{"sha": "444b5cea6a4c02cecfd50e5d1ecaaaa389d05781", "log": "Added Node.unwrap() and Elements.unwrap(), to remove a node but keep its contents.  Fixes #100", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n         return this;\n     }\n \n+    /**\n+     * Removes this node from the DOM, and moves its children up into the node's parent. This has the effect of dropping\n+     * the node but keeping its children.\n+     * <p/>\n+     * For example, with the input html:<br/>\n+     * {@code <div>One <span>Two <b>Three</b></span></div>}<br/>\n+     * Calling {@code element.unwrap()} on the {@code span} element will result in the html:<br/>\n+     * {@code <div>One Two <b>Three</b></div>}<br/>\n+     * and the {@code \"Two \"} {@link TextNode} being returned.\n+     * @return the first child of this node, after the node has been unwrapped. Null if the node had no children.\n+     * @see #remove()\n+     * @see #wrap(String)\n+     */\n+    public Node unwrap() {\n+        Validate.notNull(parentNode);\n+\n+        int index = siblingIndex;\n+        Node firstChild = childNodes.size() > 0 ? childNodes.get(0) : null;\n+        parentNode.addChildren(index, this.childNodesAsArray());\n+        this.remove();\n+\n+        return firstChild;\n+    }\n+\n     private Element getDeepChild(Element el) {\n         List<Element> children = el.children();\n         if (children.size() > 0)\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n \n import org.jsoup.helper.Validate;\n import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Node;\n \n import java.util.*;\n \n     }\n \n     /**\n+     * Removes the matched elements from the DOM, and moves their children up into their parents. This has the effect of\n+     * dropping the elements but keeping their children.\n+     * <p/>\n+     * This is useful for e.g removing unwanted formatting elements but keeping their contents.\n+     * <p/>\n+     * E.g. with HTML: {@code <div><font>One</font> <font><a href=\"/\">Two</a></font></div>}<br/>\n+     * {@code doc.select(\"font\").unwrap();}<br/>\n+     * HTML = {@code <div>One <a href=\"/\">Two</a></div>}\n+     *\n+     * @return this (for chaining)\n+     * @see Node#unwrap\n+     */\n+    public Elements unwrap() {\n+        for (Element element : contents) {\n+            element.unwrap();\n+        }\n+        return this;\n+    }\n+\n+    /**\n      * Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each\n      * element to nothing.\n      * <p>\n--- a/src/test/java/org/jsoup/nodes/NodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/NodeTest.java\n         doc.select(\"b\").first().after(\"<i>five</i>\");\n         assertEquals(\"<p>One <b>two</b><i>five</i><em>four</em> three</p>\", doc.body().html());\n     }\n+\n+    @Test public void unwrap() {\n+        Document doc = Jsoup.parse(\"<div>One <span>Two <b>Three</b></span> Four</div>\");\n+        Element span = doc.select(\"span\").first();\n+        Node twoText = span.childNode(0);\n+        Node node = span.unwrap();\n+\n+        assertEquals(\"<div>One Two <b>Three</b> Four</div>\", TextUtil.stripNewlines(doc.body().html()));\n+        assertTrue(node instanceof TextNode);\n+        assertEquals(\"Two \", ((TextNode) node).text());\n+        assertEquals(node, twoText);\n+        assertEquals(node.parent(), doc.select(\"div\").first());\n+    }\n+\n+    @Test public void unwrapNoChildren() {\n+        Document doc = Jsoup.parse(\"<div>One <span></span> Two</div>\");\n+        Element span = doc.select(\"span\").first();\n+        Node node = span.unwrap();\n+        assertEquals(\"<div>One  Two</div>\", TextUtil.stripNewlines(doc.body().html()));\n+        assertTrue(node == null);\n+    }\n }\n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n         assertEquals(\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\", doc.body().html());\n     }\n \n+    @Test public void unwrap() {\n+        String h = \"<div><font>One</font> <font><a href=\\\"/\\\">Two</a></font></div\";\n+        Document doc = Jsoup.parse(h);\n+        doc.select(\"font\").unwrap();\n+        assertEquals(\"<div>One <a href=\\\"/\\\">Two</a></div>\", TextUtil.stripNewlines(doc.body().html()));\n+    }\n+\n     @Test public void empty() {\n         Document doc = Jsoup.parse(\"<div><p>Hello <b>there</b></p> <p>now!</p></div>\");\n         doc.outputSettings().prettyPrint(false);", "timestamp": 1309605129, "metainfo": ""}