{"sha": "f435b791e193cfe771d7dbd28d2822c32a0889e2", "log": "Implemented:  * Element.getElementsByClass  * Element.getElementsWithAttribute  * Element.getElementsWithAttributeValue  * Element.className  * Element.hasClass  * Elmenet.classNames", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n         attributes.remove(key.toLowerCase());\n     }\n \n+    public boolean hasKey(String key) {\n+        return attributes.containsKey(key.toLowerCase());\n+    }\n+\n     public int size() {\n         return attributes.size();\n     }\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n import org.apache.commons.lang.Validate;\n import org.jsoup.parser.StartTag;\n import org.jsoup.parser.Tag;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.LinkedList;\n-import java.util.List;\n+import org.jsoup.select.Collector;\n+import org.jsoup.select.Evaluator;\n+\n+import java.util.*;\n \n /**\n  A HTML element: tag + data, e.g. <code>&lt;div id=\"foo\"&gt;content&lt;/div&gt;</code>\n public class Element extends Node {\n     private final Tag tag;\n     private final List<Element> elementChildren; // subset of Node.children, only holds Elements\n+    private Set<String> classNames;\n \n     public Element(StartTag startTag) {\n         super(startTag.getAttributes());\n         Validate.notEmpty(tagName);\n         tagName = tagName.toLowerCase().trim();\n \n-        List<Element> elements = new ArrayList<Element>();\n-        if (this.tag.getName().equals(tagName))\n-            elements.add(this);\n-        for (Element child : elementChildren) {\n-            elements.addAll(child.getElementsByTag(tagName));\n-        }\n-        return Collections.unmodifiableList(elements);\n+        return Collector.collect(new Evaluator.Tag(tagName), this);\n     }\n \n     /**\n     public Element getElementById(String id) {\n         Validate.notEmpty(id);\n         \n-        if (this.id().equals(id))\n-            return this;\n-        for (Element child : elementChildren) {\n-            Element byId = child.getElementById(id);\n-            if (byId != null)\n-                return byId;\n-        }\n-        return null;\n+        List<Element> elements = Collector.collect(new Evaluator.Id(id), this);\n+        if (elements.size() > 0)\n+            return elements.get(0);\n+        else\n+            return null;\n+    }\n+\n+    public List<Element> getElementsWithClass(String className) {\n+        Validate.notEmpty(className);\n+\n+        return Collector.collect(new Evaluator.Class(className), this);\n+    }\n+\n+    public List<Element> getElementsWithAttribute(String attributeKey) {\n+        Validate.notEmpty(attributeKey);\n+        attributeKey = attributeKey.trim().toLowerCase();\n+\n+        return Collector.collect(new Evaluator.Attribute(attributeKey), this);\n+    }\n+\n+    public List<Element> getElementsWithAttributeValue(String key, String value) {\n+        Validate.notEmpty(key);\n+        key = key.trim().toLowerCase();\n+        Validate.notEmpty(value);\n+        value = value.trim().toLowerCase();\n+\n+        return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);\n     }\n \n     public String text() {\n         return sb.toString();\n     }\n \n+    /**\n+     * Gets the literal value of this element's \"class\" attribute, which may include multiple class names, space\n+     * separated (e.g. <code>&lt;div class=\"header gray\"></code> returns \"<code>header gray</code>\")\n+     * @return The literal class attribute, or <b>empty string</b> if no class attribute set.\n+     */\n+    public String className() {\n+        return attributes.hasKey(\"class\") ? attributes.get(\"class\") : \"\";\n+    }\n+\n+    public Set<String> classNames() {\n+        if (classNames == null) {\n+            String[] names = className().split(\"\\\\s+\");\n+            classNames = new HashSet<String>(Arrays.asList(names));\n+        }\n+        return classNames;\n+    }\n+\n+    public boolean hasClass(String className) {\n+        return classNames().contains(className);\n+    }\n+\n \n }\n--- /dev/null\n+++ b/src/main/java/org/jsoup/select/Collector.java\n+package org.jsoup.select;\n+\n+import org.jsoup.nodes.Element;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Collects a list of elements that match the supplied criteria.\n+ *\n+ * @author Jonathan Hedley\n+ */\n+public class Collector {\n+    public static List<Element> collect (Evaluator eval, Element root) {\n+        List<Element> elements = new ArrayList<Element>();\n+        accumulateMatches(eval, elements, root);\n+        return Collections.unmodifiableList(elements);\n+    }\n+\n+    private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element) {\n+        if (eval.matches(element))\n+            elements.add(element);\n+        for (Element child: element.children())\n+            accumulateMatches(eval, elements, child);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/jsoup/select/Evaluator.java\n+package org.jsoup.select;\n+\n+import org.jsoup.nodes.Element;\n+\n+/**\n+ * Evaluates that an element matches the selector.\n+ *\n+ * @author Jonathan Hedley\n+ */\n+public abstract class Evaluator {\n+    abstract boolean matches(Element element);\n+\n+    public static class Tag extends Evaluator {\n+        private String tagName;\n+        public Tag (String tagName) {\n+            this.tagName = tagName;\n+        }\n+\n+        boolean matches(Element element) {\n+            return (element.tagName().equals(tagName));\n+        }\n+    }\n+\n+    public static class Id extends Evaluator {\n+        private String id;\n+        public Id (String id) {\n+            this.id = id;\n+        }\n+\n+        boolean matches(Element element) {\n+            return (id.equals(element.id()));\n+        }\n+    }\n+\n+    public static class Class extends Evaluator {\n+        private String className;\n+        public Class(String className) {\n+            this.className = className;\n+        }\n+\n+        boolean matches(Element element) {\n+            return (element.hasClass(className));\n+        }\n+    }\n+\n+    public static class Attribute extends Evaluator {\n+        private String key;\n+\n+        public Attribute (String key) {\n+            this.key = key;\n+        }\n+\n+        boolean matches(Element element) {\n+            return (element.attr(key) != null);\n+        }\n+    }\n+\n+    public static class AttributeWithValue extends Evaluator {\n+        private String key;\n+        private String value;\n+\n+        public AttributeWithValue(String key, String value) {\n+            this.key = key;\n+            this.value = value;\n+        }\n+\n+        boolean matches(Element element) {\n+            return (value.equals(element.attr(key)));\n+        }\n+    }\n+\n+\n+}\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n import static org.junit.Assert.*;\n \n import java.util.List;\n+import java.util.Set;\n \n /**\n  * Tests for Element (DOM stuff mostly).\n         assertEquals(\"element\", p.lastElementSibling().text());\n     }\n \n+    @Test public void testGetElementsWithClass() {\n+        Document doc = Jsoup.parse(\"<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>\");\n+\n+        List<Element> els = doc.getElementsWithClass(\"mellow\");\n+        assertEquals(2, els.size());\n+        assertEquals(\"div\", els.get(0).tagName());\n+        assertEquals(\"span\", els.get(1).tagName());\n+\n+        List<Element> els2 = doc.getElementsWithClass(\"yellow\");\n+        assertEquals(2, els2.size());\n+        assertEquals(\"div\", els2.get(0).tagName());\n+        assertEquals(\"b\", els2.get(1).tagName());\n+\n+        List<Element> none = doc.getElementsWithClass(\"solo\");\n+        assertEquals(0, none.size());\n+    }\n+\n+    @Test public void testGetElementsWithAttribute() {\n+        Document doc = Jsoup.parse(\"<div style='bold'><p><p><b style></b></p></div>\");\n+        List<Element> els = doc.getElementsWithAttribute(\"style\");\n+        assertEquals(2, els.size());\n+        assertEquals(\"div\", els.get(0).tagName());\n+        assertEquals(\"b\", els.get(1).tagName());\n+\n+        List<Element> none = doc.getElementsWithAttribute(\"class\");\n+        assertEquals(0, none.size());\n+    }\n+\n+    @Test public void testGetElementsWithAttributeValue() {\n+        Document doc = Jsoup.parse(\"<div style='bold'><p><p><b style></b></p></div>\");\n+        List<Element> els = doc.getElementsWithAttributeValue(\"style\", \"bold\");\n+        assertEquals(1, els.size());\n+        assertEquals(\"div\", els.get(0).tagName());\n+\n+        List<Element> none = doc.getElementsWithAttributeValue(\"style\", \"none\");\n+        assertEquals(0, none.size());\n+    }\n+\n+    @Test public void testClassDomMethods() {\n+        Document doc = Jsoup.parse(\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\");\n+        List<Element> els = doc.getElementsWithAttribute(\"class\");\n+        Element span = els.get(0);\n+        assertEquals(\"mellow yellow\", span.className());\n+        assertTrue(span.hasClass(\"mellow\"));\n+        assertTrue(span.hasClass(\"yellow\"));\n+        Set<String> classes = span.classNames();\n+        assertEquals(2, classes.size());\n+        assertTrue(classes.contains(\"mellow\"));\n+        assertTrue(classes.contains(\"yellow\"));\n+\n+        assertEquals(\"\", doc.className());\n+        assertFalse(doc.hasClass(\"mellow\"));\n+    }\n+\n+\n }", "timestamp": 1309605101, "metainfo": ""}