{"sha": "7ff15ee20c961e370837d8f96ae77886ecd910d8", "log": "Corrected the javadoc for Element#child() to note that it throws IndexOutOfBounds.  Fixes #277", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n      * a filtered list of children that are elements, and the index is based on that filtered list.\n      * \n      * @param index the index number of the element to retrieve\n-     * @return the child element, if it exists, or {@code null} if absent.\n+     * @return the child element, if it exists, otherwise throws an {@code IndexOutOfBoundsException}\n      * @see #childNode(int)\n      */\n     public Element child(int index) {\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n     }\n \n     /**\n-     Get a child node by index\n+     Get a child node by its 0-based index.\n      @param index index of child node\n-     @return the child node at this index.\n+     @return the child node at this index. Throws a {@code IndexOutOfBoundsException} if the index is out of bounds.\n      */\n     public Node childNode(int index) {\n         return childNodes.get(index);\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n     // list-like methods\n     /**\n      Get the first matched element.\n-     @return The first matched element, or <code>null</code> if contents is empty;\n+     @return The first matched element, or <code>null</code> if contents is empty.\n      */\n     public Element first() {\n         return contents.isEmpty() ? null : contents.get(0);\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(\"<p>One</p>\", els.get(0).outerHtml());\n         assertEquals(\"<p>Three</p>\", els.get(1).outerHtml());\n     }\n+\n+    @Test public void testChildThrowsIndexOutOfBoundsOnMissing() {\n+        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p></div>\");\n+        Element div = doc.select(\"div\").first();\n+\n+        assertEquals(2, div.children().size());\n+        assertEquals(\"One\", div.child(0).text());\n+\n+        try {\n+            div.child(3);\n+            fail(\"Should throw index out of bounds\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n }", "timestamp": 1356207016, "metainfo": ""}