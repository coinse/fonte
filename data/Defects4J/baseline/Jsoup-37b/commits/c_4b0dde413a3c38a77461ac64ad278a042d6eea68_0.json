{"sha": "4b0dde413a3c38a77461ac64ad278a042d6eea68", "log": "If a node has no parent, return null on previousSibling and nextSibling instead of throwing a null pointer exception.  Fixes #184", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n \n     /**\n-     * Get sibling elements.\n+     * Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling\n+     * of itself, so will not be included in the returned list.\n      * @return sibling elements\n      */\n     public Elements siblingElements() {\n-        return parent().children();\n+        if (parentNode == null)\n+            return new Elements(0);\n+\n+        List<Element> elements = parent().children();\n+        Elements siblings = new Elements(elements.size() - 1);\n+        for (Element el: elements)\n+            if (el != this)\n+                siblings.add(el);\n+        return siblings;\n     }\n \n     /**\n      * @see #previousElementSibling()\n      */\n     public Element nextElementSibling() {\n+        if (parentNode == null) return null;\n         List<Element> siblings = parent().children();\n         Integer index = indexInList(this, siblings);\n         Validate.notNull(index);\n      * @see #nextElementSibling()\n      */\n     public Element previousElementSibling() {\n+        if (parentNode == null) return null;\n         List<Element> siblings = parent().children();\n         Integer index = indexInList(this, siblings);\n         Validate.notNull(index);\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n     }\n     \n     /**\n-     Retrieves this node's sibling nodes. Effectively, {@link #childNodes()  node.parent.childNodes()}.\n-     @return node siblings, including this node\n+     Retrieves this node's sibling nodes. Similar to {@link #childNodes()  node.parent.childNodes()}, but does not\n+     include this node (a node is not a sibling of itself).\n+     @return node siblings. If the node has no parent, returns an empty list.\n      */\n     public List<Node> siblingNodes() {\n-        return parent().childNodes(); // TODO: should this strip out this node? i.e. not a sibling of self?\n+        if (parentNode == null)\n+            return Collections.emptyList();\n+\n+        List<Node> nodes = parentNode.childNodes;\n+        List<Node> siblings = new ArrayList<Node>(nodes.size() - 1);\n+        for (Node node: nodes)\n+            if (node != this)\n+                siblings.add(node);\n+        return siblings;\n     }\n \n     /**\n      @return the previous sibling, or null if this is the first sibling\n      */\n     public Node previousSibling() {\n+        if (parentNode == null)\n+            return null; // root\n+\n         List<Node> siblings = parentNode.childNodes;\n         Integer index = siblingIndex();\n         Validate.notNull(index);\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n \n     public Elements() {\n         contents = new ArrayList<Element>();\n+    }\n+\n+    public Elements(int initialCapacity) {\n+        contents = new ArrayList<Element>(initialCapacity);\n     }\n \n     public Elements(Collection<Element> elements) {\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         List<DataNode> pData = p.dataNodes();\n         assertEquals(0, pData.size());\n     }\n+\n+    @Test public void elementIsNotASiblingOfItself() {\n+        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div>\");\n+        Element p2 = doc.select(\"p\").get(1);\n+\n+        assertEquals(\"Two\", p2.text());\n+        Elements els = p2.siblingElements();\n+        assertEquals(2, els.size());\n+        assertEquals(\"<p>One</p>\", els.get(0).outerHtml());\n+        assertEquals(\"<p>Three</p>\", els.get(1).outerHtml());\n+    }\n }\n--- a/src/test/java/org/jsoup/nodes/NodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/NodeTest.java\n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n import org.jsoup.parser.Tag;\n+import org.jsoup.select.Elements;\n import org.jsoup.select.NodeVisitor;\n import org.junit.Test;\n+\n+import java.util.List;\n \n import static org.junit.Assert.*;\n /**\n         });\n         assertEquals(\"<div><p><#text></#text></p></div>\", accum.toString());\n     }\n+\n+    @Test public void orphanNodeReturnsNullForSiblingElements() {\n+        Node node = new Element(Tag.valueOf(\"p\"), \"\");\n+        Element el = new Element(Tag.valueOf(\"p\"), \"\");\n+\n+        assertEquals(0, node.siblingIndex());\n+        assertEquals(0, node.siblingNodes().size());\n+\n+        assertNull(node.previousSibling());\n+        assertNull(node.nextSibling());\n+\n+        assertEquals(0, el.siblingElements().size());\n+        assertNull(el.previousElementSibling());\n+        assertNull(el.nextElementSibling());\n+    }\n+\n+    @Test public void nodeIsNotASiblingOfItself() {\n+        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div>\");\n+        Element p2 = doc.select(\"p\").get(1);\n+\n+        assertEquals(\"Two\", p2.text());\n+        List<Node> nodes = p2.siblingNodes();\n+        assertEquals(2, nodes.size());\n+        assertEquals(\"<p>One</p>\", nodes.get(0).outerHtml());\n+        assertEquals(\"<p>Three</p>\", nodes.get(1).outerHtml());\n+    }\n }", "timestamp": 1334425709, "metainfo": ""}