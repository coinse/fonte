{"sha": "c5792eb641b13f8a853b6f065b6998053d106b7d", "log": "First pass at a FomElement  The FormElement extends Element to provide ready access to a form's controls, and to allow the form to be submitted. It also connects forms to their controls in situations when the DOM tree created does not have the form element be a parent of the control, like when the form tag is in a TR but the control in a TD. In that case the form tag gets reparented.", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n \n     /**\n      * Adds all of the supplied data to the request data parameters\n+     * @param data collection of data parameters\n+     * @return this Connection, for chaining\n+     */\n+    public Connection data(Collection<KeyVal> data);\n+\n+    /**\n+     * Adds all of the supplied data to the request data parameters\n      * @param data map of data parameters\n      * @return this Connection, for chaining\n      */\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n             Validate.notEmpty(key, \"Data key must not be empty\");\n             Validate.notNull(value, \"Data value must not be null\");\n             req.data(KeyVal.create(key, value));\n+        }\n+        return this;\n+    }\n+\n+    public Connection data(Collection<Connection.KeyVal> data) {\n+        Validate.notNull(data, \"Data collection must not be null\");\n+        for (Connection.KeyVal entry: data) {\n+            req.data(entry);\n         }\n         return this;\n     }\n--- /dev/null\n+++ b/src/main/java/org/jsoup/nodes/FormElement.java\n+package org.jsoup.nodes;\n+\n+import org.jsoup.Connection;\n+import org.jsoup.Jsoup;\n+import org.jsoup.helper.HttpConnection;\n+import org.jsoup.helper.Validate;\n+import org.jsoup.parser.Tag;\n+import org.jsoup.select.Elements;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * A HTML Form Element provides ready access to the form fields/controls that are associated with it. It also allows a\n+ * form to easily be submitted.\n+ */\n+public class FormElement extends Element {\n+    private final Elements elements = new Elements();\n+\n+    /**\n+     * Create a new, standalone form element.\n+     *\n+     * @param tag        tag of this element\n+     * @param baseUri    the base URI\n+     * @param attributes initial attributes\n+     */\n+    public FormElement(Tag tag, String baseUri, Attributes attributes) {\n+        super(tag, baseUri, attributes);\n+    }\n+\n+    /**\n+     * Get the list of form control elements associated with this form.\n+     * @return form controls associated with this element.\n+     */\n+    public Elements elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Add a form control element to this form.\n+     * @param element form control to add\n+     * @return this form element, for chaining\n+     */\n+    public FormElement addElement(Element element) {\n+        elements.add(element);\n+        return this;\n+    }\n+\n+    /**\n+     * Prepare to submit this form. A Connection object is created with the request set up from the form values. You\n+     * can then set up other options (like user-agent, timeout, cookies), then execute it.\n+     * @return a connection prepared from the values of this form.\n+     * @throws IllegalArgumentException if the form's absolute action URL cannot be determined. Make sure you pass the\n+     * document's base URI when parsing.\n+     */\n+    public Connection submit() {\n+        String action = hasAttr(\"action\") ? absUrl(\"action\") : baseUri();\n+        Validate.notEmpty(action, \"Could not determine a form action URL for submit. Ensure you set a base URI when parsing.\");\n+        Connection.Method method = attr(\"method\").toUpperCase().equals(\"POST\") ?\n+                Connection.Method.POST : Connection.Method.GET;\n+\n+        Connection con = Jsoup.connect(action)\n+                .data(formData())\n+                .method(method);\n+\n+        return con;\n+    }\n+\n+    /**\n+     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n+     * list will not be reflected in the DOM.\n+     * @return a list of key vals\n+     */\n+    public List<Connection.KeyVal> formData() {\n+        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();\n+\n+        // iterate the form control elements and accumulate their values\n+        for (Element el: elements) {\n+            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n+            String name = el.attr(\"name\");\n+            if (name.length() == 0) continue;\n+\n+            if (\"select\".equals(el.tagName())) {\n+                Elements options = el.select(\"option[selected]\");\n+                for (Element option: options) {\n+                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                }\n+            } else {\n+                data.add(HttpConnection.KeyVal.create(name, el.val()));\n+            }\n+        }\n+        return data;\n+    }\n+}\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n import org.jsoup.nodes.*;\n+import org.jsoup.select.Elements;\n \n import java.util.ArrayList;\n import java.util.Iterator;\n \n     private boolean baseUriSetFromDoc = false;\n     private Element headElement; // the current head element\n-    private Element formElement; // the current form element\n+    private FormElement formElement; // the current form element\n     private Element contextElement; // fragment parse context -- could be null even if fragment parsing\n     private DescendableLinkedList<Element> formattingElements = new DescendableLinkedList<Element>(); // active (open) formatting elements\n     private List<Token.Character> pendingTableCharacters = new ArrayList<Token.Character>(); // chars in table to be shifted out\n             doc.appendChild(root);\n             stack.push(root);\n             resetInsertionMode();\n-            // todo: setup form element to nearest form on context (up ancestor chain)\n+\n+            // setup form element to nearest form on context (up ancestor chain). ensures form controls are associated\n+            // with form correctly\n+            Elements contextChain = context.parents();\n+            contextChain.add(0, context);\n+            for (Element parent: contextChain) {\n+                if (parent instanceof FormElement) {\n+                    formElement = (FormElement) parent;\n+                    break;\n+                }\n+            }\n         }\n \n         runParser();\n         return el;\n     }\n \n+    FormElement insertForm(Token.StartTag startTag, boolean onStack) {\n+        Tag tag = Tag.valueOf(startTag.name());\n+        FormElement el = new FormElement(tag, baseUri, startTag.attributes);\n+        setFormElement(el);\n+        insertNode(el);\n+        if (onStack)\n+            stack.add(el);\n+        return el;\n+    }\n+\n     void insert(Token.Comment commentToken) {\n         Comment comment = new Comment(commentToken.getData(), baseUri);\n         insertNode(comment);\n             insertInFosterParent(node);\n         else\n             currentElement().appendChild(node);\n+\n+        // connect form controls to their form element\n+        if (node instanceof Element && ((Element) node).tag().isFormListed()) {\n+            if (formElement != null)\n+                formElement.addElement((Element) node);\n+        }\n     }\n \n     Element pop() {\n         this.fosterInserts = fosterInserts;\n     }\n \n-    Element getFormElement() {\n+    FormElement getFormElement() {\n         return formElement;\n     }\n \n-    void setFormElement(Element formElement) {\n+    void setFormElement(FormElement formElement) {\n         this.formElement = formElement;\n     }\n \n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.process(new Token.EndTag(\"p\"));\n                         }\n-                        Element form = tb.insert(startTag);\n-                        tb.setFormElement(form);\n+                        tb.insertForm(startTag, true);\n                     } else if (name.equals(\"li\")) {\n                         tb.framesetOk(false);\n                         LinkedList<Element> stack = tb.getStack();\n                     if (tb.getFormElement() != null)\n                         return false;\n                     else {\n-                        Element form = tb.insertEmpty(startTag);\n-                        tb.setFormElement(form);\n+                        tb.insertForm(startTag, false);\n                     }\n                 } else {\n                     return anythingElse(t, tb);\n                 }\n+                return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable\n             } else if (t.isEndTag()) {\n                 Token.EndTag endTag = t.asEndTag();\n                 String name = endTag.name();\n                 } else {\n                     return anythingElse(t, tb);\n                 }\n+                return true; // todo: as above todo\n             } else if (t.isEOF()) {\n                 if (tb.currentElement().nodeName().equals(\"html\"))\n                     tb.error(this);\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n     private boolean empty = false; // can hold nothing; e.g. img\n     private boolean selfClosing = false; // can self close (<foo />). used for unknown tags that self close, without forcing them as empty.\n     private boolean preserveWhitespace = false; // for pre, textarea, script etc\n+    private boolean formList = false; // a control that appears in forms: input, textarea, output etc\n+    private boolean formSubmit = false; // a control that can be submitted in a form: input etc\n \n     private Tag(String tagName) {\n         this.tagName = tagName.toLowerCase();\n      */\n     public boolean preserveWhitespace() {\n         return preserveWhitespace;\n+    }\n+\n+    /**\n+     * Get if this tag represents a control associated with a form. E.g. input, textarea, output\n+     * @return if associated with a form\n+     */\n+    public boolean isFormListed() {\n+        return formList;\n+    }\n+\n+    /**\n+     * Get if this tag represents an element that should be submitted with a form. E.g. input, option\n+     * @return if submittable with a form\n+     */\n+    public boolean isFormSubmittable() {\n+        return formSubmit;\n     }\n \n     Tag setSelfClosing() {\n         if (isBlock != tag.isBlock) return false;\n         if (preserveWhitespace != tag.preserveWhitespace) return false;\n         if (selfClosing != tag.selfClosing) return false;\n+        if (formList != tag.formList) return false;\n+        if (formSubmit != tag.formSubmit) return false;\n         if (!tagName.equals(tag.tagName)) return false;\n \n         return true;\n         result = 31 * result + (empty ? 1 : 0);\n         result = 31 * result + (selfClosing ? 1 : 0);\n         result = 31 * result + (preserveWhitespace ? 1 : 0);\n+        result = 31 * result + (formList ? 1 : 0);\n+        result = 31 * result + (formSubmit ? 1 : 0);\n         return result;\n     }\n \n             \"title\", \"a\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"pre\", \"address\", \"li\", \"th\", \"td\", \"script\", \"style\",\n             \"ins\", \"del\", \"s\"\n     };\n-    private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\", \"textarea\"};\n+    private static final String[] preserveWhitespaceTags = {\n+            \"pre\", \"plaintext\", \"title\", \"textarea\"\n+    };\n+    // todo: I think we just need submit tags, and can scrub listed\n+    private static final String[] formListedTags = {\n+            \"button\", \"fieldset\", \"input\", \"keygen\", \"object\", \"output\", \"select\", \"textarea\"\n+    };\n+    private static final String[] formSubmitTags = {\n+            \"button\", \"input\", \"keygen\", \"object\", \"select\", \"textarea\"\n+    };\n \n     static {\n         // creates\n             Validate.notNull(tag);\n             tag.preserveWhitespace = true;\n         }\n+\n+        for (String tagName : formListedTags) {\n+            Tag tag = tags.get(tagName);\n+            Validate.notNull(tag);\n+            tag.formList = true;\n+        }\n+\n+        for (String tagName : formSubmitTags) {\n+            Tag tag = tags.get(tagName);\n+            Validate.notNull(tag);\n+            tag.formSubmit = true;\n+        }\n     }\n \n     private static void register(Tag tag) {\n--- /dev/null\n+++ b/src/test/java/org/jsoup/nodes/FormElementTest.java\n+package org.jsoup.nodes;\n+\n+import org.jsoup.Connection;\n+import org.jsoup.Jsoup;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Tests for FormElement\n+ *\n+ * @author Jonathan Hedley\n+ */\n+public class FormElementTest {\n+    @Test public void hasAssociatedControls() {\n+        //\"button\", \"fieldset\", \"input\", \"keygen\", \"object\", \"output\", \"select\", \"textarea\"\n+        String html = \"<form id=1><button id=1><fieldset id=2 /><input id=3><keygen id=4><object id=5><output id=6>\" +\n+                \"<select id=7><option></select><textarea id=8><p id=9>\";\n+        Document doc = Jsoup.parse(html);\n+\n+        FormElement form = (FormElement) doc.select(\"form\").first();\n+        assertEquals(8, form.elements().size());\n+    }\n+\n+    @Test public void createsFormData() {\n+        String html = \"<form><input name='one' value='two'><select name='three'><option value='not'>\" +\n+                \"<option value='four' selected><option value='five' selected><textarea name=six>seven</textarea></form>\";\n+        Document doc = Jsoup.parse(html);\n+        FormElement form = (FormElement) doc.select(\"form\").first();\n+        List<Connection.KeyVal> data = form.formData();\n+\n+        assertEquals(4, data.size());\n+        assertEquals(\"one=two\", data.get(0).toString());\n+        assertEquals(\"three=four\", data.get(1).toString());\n+        assertEquals(\"three=five\", data.get(2).toString());\n+        assertEquals(\"six=seven\", data.get(3).toString());\n+    }\n+\n+    @Test public void createsSubmitableConnection() {\n+        String html = \"<form action='/search'><input name='q'></form>\";\n+        Document doc = Jsoup.parse(html, \"http://example.com/\");\n+        doc.select(\"[name=q]\").attr(\"value\", \"jsoup\");\n+\n+        FormElement form = ((FormElement) doc.select(\"form\").first());\n+        Connection con = form.submit();\n+\n+        assertEquals(Connection.Method.GET, con.request().method());\n+        assertEquals(\"http://example.com/search\", con.request().url().toExternalForm());\n+        List<Connection.KeyVal> dataList = (List<Connection.KeyVal>) con.request().data();\n+        assertEquals(\"q=jsoup\", dataList.get(0).toString());\n+\n+        doc.select(\"form\").attr(\"method\", \"post\");\n+        Connection con2 = form.submit();\n+        assertEquals(Connection.Method.POST, con2.request().method());\n+    }\n+\n+    @Test public void actionWithNoValue() {\n+        String html = \"<form><input name='q'></form>\";\n+        Document doc = Jsoup.parse(html, \"http://example.com/\");\n+        FormElement form = ((FormElement) doc.select(\"form\").first());\n+        Connection con = form.submit();\n+\n+        assertEquals(\"http://example.com/\", con.request().url().toExternalForm());\n+    }\n+\n+    @Test public void actionWithNoBaseUri() {\n+        String html = \"<form><input name='q'></form>\";\n+        Document doc = Jsoup.parse(html);\n+        FormElement form = ((FormElement) doc.select(\"form\").first());\n+\n+\n+        boolean threw = false;\n+        try {\n+            Connection con = form.submit();\n+        } catch (IllegalArgumentException e) {\n+            threw = true;\n+            assertEquals(\"Could not determine a form action URL for submit. Ensure you set a base URI when parsing.\",\n+                    e.getMessage());\n+        }\n+        assertTrue(threw);\n+    }\n+\n+    @Test public void formsAddedAfterParseAreFormElements() {\n+        Document doc = Jsoup.parse(\"<body />\");\n+        doc.body().html(\"<form action='http://example.com/search'><input name='q' value='search'>\");\n+        Element formEl = doc.select(\"form\").first();\n+        assertTrue(formEl instanceof FormElement);\n+\n+        FormElement form = (FormElement) formEl;\n+        assertEquals(1, form.elements().size());\n+    }\n+\n+    @Test public void controlsAddedAfterParseAreLinkedWithForms() {\n+        Document doc = Jsoup.parse(\"<body />\");\n+        doc.body().html(\"<form />\");\n+\n+        Element formEl = doc.select(\"form\").first();\n+        formEl.append(\"<input name=foo value=bar>\");\n+\n+        assertTrue(formEl instanceof FormElement);\n+        FormElement form = (FormElement) formEl;\n+        assertEquals(1, form.elements().size());\n+\n+        List<Connection.KeyVal> data = form.formData();\n+        assertEquals(\"foo=bar\", data.get(0).toString());\n+    }\n+}\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         Document doc = Jsoup.parse(html);\n         assertEquals(\"<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>\", doc.body().html());\n     }\n+\n+    // form tests\n+    @Test public void createsFormElements() {\n+        String html = \"<body><form><input id=1><input id=2></form></body>\";\n+        Document doc = Jsoup.parse(html);\n+        Element el = doc.select(\"form\").first();\n+\n+        assertTrue(\"Is form element\", el instanceof FormElement);\n+        FormElement form = (FormElement) el;\n+        Elements controls = form.elements();\n+        assertEquals(2, controls.size());\n+        assertEquals(\"1\", controls.get(0).id());\n+        assertEquals(\"2\", controls.get(1).id());\n+    }\n+\n+    @Test public void associatedFormControlsWithDisjointForms() {\n+        // form gets closed, isn't parent of controls\n+        String html = \"<table><tr><form><input type=hidden id=1><td><input type=text id=2></td><tr></table>\";\n+        Document doc = Jsoup.parse(html);\n+        Element el = doc.select(\"form\").first();\n+\n+        assertTrue(\"Is form element\", el instanceof FormElement);\n+        FormElement form = (FormElement) el;\n+        Elements controls = form.elements();\n+        assertEquals(2, controls.size());\n+        assertEquals(\"1\", controls.get(0).id());\n+        assertEquals(\"2\", controls.get(1).id());\n+\n+        assertEquals(\"<table><tbody><tr><form></form><input type=\\\"hidden\\\" id=\\\"1\\\" /><td><input type=\\\"text\\\" id=\\\"2\\\" /></td></tr><tr></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n+    }\n }", "timestamp": 1360287537, "metainfo": ""}