{"sha": "aec561f3328980182f299e61eaae45420245141b", "log": "Added :has(selector) pseudo-selector. Added Element#parents() and Elements#parents() methods.  Fixes #20", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n             }\n         }\n \n-        for (Node node: toMove) {\n+        for (int i = toMove.size()-1; i >= 0; i--) {\n+            Node node = toMove.get(i);\n             element.removeChild(node);\n+            body().prependChild(new TextNode(\" \", \"\"));\n             body().prependChild(node);\n-            body().prependChild(new TextNode(\" \", \"\"));\n         }\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     @Override\n     public Element parent() {\n         return (Element) super.parent();\n+    }\n+\n+    /**\n+     * Get this element's parent and ancestors, up to the document root.\n+     * @return this element's stack of parents, closest first.\n+     */\n+    public Elements parents() {\n+        Elements parents = new Elements();\n+        accumulateParents(this, parents);\n+        return parents;\n+    }\n+\n+    private static void accumulateParents(Element el, Elements parents) {\n+        Element parent = el.parent();\n+        if (parent != null && !parent.tagName().equals(\"#root\")) {\n+            parents.add(parent);\n+            accumulateParents(parent, parents);\n+        }\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n         return !children.isEmpty();\n     }\n \n+    /**\n+     * Get all of the parents and ancestor elements of the matched elements.\n+     * @return\n+     */\n+    public Elements parents() {\n+        HashSet<Element> combo = new LinkedHashSet<Element>();\n+        for (Element e: contents) {\n+            combo.addAll(e.parents());\n+        }\n+        return new Elements(combo);\n+    }\n+\n     // list-like methods\n     /**\n      Get the first matched element.\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n  <tr><td><code>E:lt(<em>n</em>)</code></td><td>an Element whose sibling index is less than <em>n</em></td><td><code>td:lt(3)</code> finds the first 2 cells of each row</td></tr>\n  <tr><td><code>E:gt(<em>n</em>)</code></td><td>an Element whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n  <tr><td><code>E:eq(<em>n</em>)</code></td><td>an Element whose sibling index is equal to <em>n</em></td><td><code>td:eq(1)</code> finds the first cell of each row</td></tr>\n+ <tr><td><code>E:has(<em>selector</em>)</code></td><td>an Element that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n  </table>\n \n  @see Element#select(String)\n             return indexGreaterThan();\n         } else if (tq.matchChomp(\":eq(\")) {\n             return indexEquals();\n+        } else if (tq.matchChomp(\":has(\")) {\n+            return has();\n         } else { // unhandled\n             throw new SelectorParseException(\"Could not parse query \" + query);\n         }\n     private int consumeIndex() {\n         String indexS = tq.chompTo(\")\").trim();\n         Validate.isTrue(StringUtils.isNumeric(indexS), \"Index must be numeric\");\n-        int index = Integer.parseInt(indexS);\n-\n-        return index;\n+        return Integer.parseInt(indexS);\n+    }\n+\n+    // pseudo selector :has(el)\n+    private Elements has() {\n+        String subQuery = tq.chompTo(\")\");\n+        Validate.notEmpty(subQuery, \":has(el) subselect must not be empty\");\n+\n+        return filterForParentsOfDescendants(elements, select(subQuery, elements));\n     }\n \n     // direct child descendants\n     private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates) {\n         Elements children = new Elements();\n         CHILD: for (Element c : candidates) {\n-            boolean found = false;\n             for (Element p : parents) {\n                 if (c.equals(p)) {\n-                    found = true;\n                     continue CHILD;\n                 }\n             }\n-            if (!found)\n-                children.add(c);\n+            children.add(c);\n         }\n         return children;\n+    }\n+\n+    // implements :has(el). Finds elements that contain the matched elements\n+    private static Elements filterForParentsOfDescendants(Collection<Element> parents, Collection<Element> children) {\n+        Elements filteredParents = new Elements();\n+        for (Element p : parents) {\n+            for (Element c : children) {\n+                if (c.parents().contains(p)) {\n+                    filteredParents.add(p);\n+                }\n+            }\n+        }\n+        return filteredParents;\n     }\n     \n     // adjacent siblings\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(\"this\", p.nextElementSibling().text());\n         assertEquals(\"Hello\", p.firstElementSibling().text());\n         assertEquals(\"element\", p.lastElementSibling().text());\n+    }\n+\n+    @Test public void testGetParents() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello <span>there</span></div>\");\n+        Element span = doc.select(\"span\").first();\n+        Elements parents = span.parents();\n+\n+        assertEquals(4, parents.size());\n+        assertEquals(\"p\", parents.get(0).tagName());\n+        assertEquals(\"div\", parents.get(1).tagName());\n+        assertEquals(\"body\", parents.get(2).tagName());\n+        assertEquals(\"html\", parents.get(3).tagName());\n     }\n     \n     @Test public void testElementSiblingIndex() {\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n     @Test public void normalisesDocument() {\n         String h = \"<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven \";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"<!doctype html><html><head><link /></head><body>Five Six Seven  One Two Four Three</body></html>\",\n+        assertEquals(\"<!doctype html><html><head><link /></head><body>One Two Four Three Five Six Seven </body></html>\",\n                 TextUtil.stripNewlines(doc.html())); // is spaced OK if not newline & space stripped\n     }\n \n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n         assertTrue(ps.is(\"[title=foo]\"));\n         assertFalse(ps.is(\"[title=bar]\"));\n     }\n+\n+    @Test public void parents() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><p>There</p>\");\n+        Elements parents = doc.select(\"p\").parents();\n+\n+        assertEquals(3, parents.size());\n+        assertEquals(\"div\", parents.get(0).tagName());\n+        assertEquals(\"body\", parents.get(1).tagName());\n+        assertEquals(\"html\", parents.get(2).tagName());\n+    }\n }\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(1, ps.size());\n         assertEquals(\"Two\", ps.get(0).text());\n     }\n+\n+    @Test public void testPseudoHas() {\n+        Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n+\n+        Elements divs1 = doc.select(\"div:has(span)\");\n+        assertEquals(2, divs1.size());\n+        assertEquals(\"0\", divs1.get(0).id());\n+        assertEquals(\"1\", divs1.get(1).id());\n+\n+        Elements divs2 = doc.select(\"div:has([class]\");\n+        assertEquals(1, divs2.size());\n+        assertEquals(\"1\", divs2.get(0).id());\n+\n+        Elements divs3 = doc.select(\"div:has(span, p)\");\n+        assertEquals(3, divs3.size());\n+        assertEquals(\"0\", divs3.get(0).id());\n+        assertEquals(\"1\", divs3.get(1).id());\n+        assertEquals(\"2\", divs3.get(2).id());\n+    }\n }", "timestamp": 1309605113, "metainfo": ""}