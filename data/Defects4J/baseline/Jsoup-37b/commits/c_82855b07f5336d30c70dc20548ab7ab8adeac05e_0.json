{"sha": "82855b07f5336d30c70dc20548ab7ab8adeac05e", "log": "Document normalisation now more correctly enforces document structure.  - ensure only one head and one body element, both under html el  - allow html/head/noscript/img for some site's analytic pattern  Fixes #43", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n \n import org.jsoup.helper.Validate;\n import org.jsoup.parser.Tag;\n+import org.jsoup.select.Elements;\n \n import java.nio.charset.Charset;\n import java.nio.charset.CharsetEncoder;\n \n         // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n         // of. do in inverse order to maintain text order.\n-        normalise(head());\n-        normalise(htmlEl);\n-        normalise(this);        \n-\n+        normaliseTextNodes(head());\n+        normaliseTextNodes(htmlEl);\n+        normaliseTextNodes(this);\n+\n+        normaliseStructure(\"head\", htmlEl);\n+        normaliseStructure(\"body\", htmlEl);\n+        \n         return this;\n     }\n \n     // does not recurse.\n-    private void normalise(Element element) {\n+    private void normaliseTextNodes(Element element) {\n         List<Node> toMove = new ArrayList<Node>();\n         for (Node node: element.childNodes) {\n             if (node instanceof TextNode) {\n             element.removeChild(node);\n             body().prependChild(new TextNode(\" \", \"\"));\n             body().prependChild(node);\n+        }\n+    }\n+\n+    // merge multiple <head> or <body> contents into one, delete the remainder, and ensure they are owned by <html>\n+    private void normaliseStructure(String tag, Element htmlEl) {\n+        Elements elements = this.getElementsByTag(tag);\n+        Element master = elements.first(); // will always be available as created above if not existent\n+        if (elements.size() > 1) { // dupes, move contents to master\n+            List<Node> toMove = new ArrayList<Node>();\n+            for (int i = 1; i < elements.size(); i++) {\n+                Node dupe = elements.get(i);\n+                for (Node node : dupe.childNodes)\n+                    toMove.add(node);\n+                dupe.remove();\n+            }\n+\n+            for (Node dupe : toMove)\n+                master.appendChild(dupe);\n+        }\n+        // ensure parented by <html>\n+        if (!master.parent().equals(htmlEl)) {\n+            htmlEl.appendChild(master); // includes remove()            \n         }\n     }\n \n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n \n         // special\n         createInline(\"A\").setOptionalClosing(); // cannot contain self\n-        createInline(\"IMG\").setEmpty();\n+        createInline(\"IMG\").setEmpty().setAncestor(\"BODY\", \"NOSCRIPT\"); // noscript so an image can be in html->head->noscript\n         createInline(\"BR\").setEmpty();\n         createInline(\"WBR\").setEmpty();\n         createInline(\"MAP\"); // map is defined as inline, but can hold block (what?) or area. Seldom used so NBD.\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n package org.jsoup.nodes;\n \n import org.jsoup.Jsoup;\n+import org.jsoup.TextUtil;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n         assertEquals(\"&lt; &gt; &amp; &quot; &apos; \u00d7\", doc.body().html());\n     }\n \n+    @Test public void testNormalisesStructure() {\n+        Document doc = Jsoup.parse(\"<html><head><script>one</script><noscript><p>two</p></noscript></head><body><p>three</p></body></html>\");\n+        assertEquals(\"<html><head><script>one</script><noscript></noscript></head><body><p>two</p><p>three</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n+    }\n+\n }", "timestamp": 1309605122, "metainfo": ""}