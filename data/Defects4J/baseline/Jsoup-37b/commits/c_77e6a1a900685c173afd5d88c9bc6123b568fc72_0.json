{"sha": "77e6a1a900685c173afd5d88c9bc6123b568fc72", "log": "Introduced finer granularity to Jsoup.connect exceptions.  Fixes #229", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n     /**\n      * Execute the request as a GET, and parse the result.\n      * @return parsed Document\n+     * @throws java.net.MalformedURLException if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed\n+     * @throws HttpStatusException if the response is not OK and HTTP response errors are not ignored\n+     * @throws UnsupportedMimeTypeException if the response mime type is not supported and those errors are not ignored\n+     * @throws java.net.SocketTimeoutException if the connection times out\n      * @throws IOException on error\n      */\n     public Document get() throws IOException;\n     /**\n      * Execute the request as a POST, and parse the result.\n      * @return parsed Document\n+     * @throws java.net.MalformedURLException if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed\n+     * @throws HttpStatusException if the response is not OK and HTTP response errors are not ignored\n+     * @throws UnsupportedMimeTypeException if the response mime type is not supported and those errors are not ignored\n+     * @throws java.net.SocketTimeoutException if the connection times out\n      * @throws IOException on error\n      */\n     public Document post() throws IOException;\n     /**\n      * Execute the request.\n      * @return a response object\n+     * @throws java.net.MalformedURLException if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed\n+     * @throws HttpStatusException if the response is not OK and HTTP response errors are not ignored\n+     * @throws UnsupportedMimeTypeException if the response mime type is not supported and those errors are not ignored\n+     * @throws java.net.SocketTimeoutException if the connection times out\n      * @throws IOException on error\n      */\n     public Response execute() throws IOException;\n--- /dev/null\n+++ b/src/main/java/org/jsoup/HttpStatusException.java\n+package org.jsoup;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Signals that a HTTP request resulted in a not OK HTTP response.\n+ */\n+public class HttpStatusException extends IOException {\n+    private int statusCode;\n+    private String url;\n+\n+    public HttpStatusException(String message, int statusCode, String url) {\n+        super(message);\n+        this.statusCode = statusCode;\n+        this.url = url;\n+    }\n+\n+    public int getStatusCode() {\n+        return statusCode;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return super.toString() + \". Status=\" + statusCode + \", URL=\" + url;\n+    }\n+}\n--- a/src/main/java/org/jsoup/Jsoup.java\n+++ b/src/main/java/org/jsoup/Jsoup.java\n      @param timeoutMillis Connection and read timeout, in milliseconds. If exceeded, IOException is thrown.\n      @return The parsed HTML.\n \n-     @throws IOException If the final server response != 200 OK (redirects are followed), or if there's an error reading\n-     the response stream.\n+     @throws java.net.MalformedURLException if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed\n+     @throws HttpStatusException if the response is not OK and HTTP response errors are not ignored\n+     @throws UnsupportedMimeTypeException if the response mime type is not supported and those errors are not ignored\n+     @throws java.net.SocketTimeoutException if the connection times out\n+     @throws IOException if a connection or read error occurs\n \n      @see #connect(String)\n      */\n--- /dev/null\n+++ b/src/main/java/org/jsoup/UnsupportedMimeTypeException.java\n+package org.jsoup;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Signals that a HTTP response returned a mime type that is not supported.\n+ */\n+public class UnsupportedMimeTypeException extends IOException {\n+    private String mimeType;\n+    private String url;\n+\n+    public UnsupportedMimeTypeException(String message, String mimeType, String url) {\n+        super(message);\n+        this.mimeType = mimeType;\n+        this.url = url;\n+    }\n+\n+    public String getMimeType() {\n+        return mimeType;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return super.toString() + \". Mimetype=\" + mimeType + \", URL=\"+url;\n+    }\n+}\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n package org.jsoup.helper;\n \n import org.jsoup.Connection;\n+import org.jsoup.HttpStatusException;\n+import org.jsoup.UnsupportedMimeTypeException;\n import org.jsoup.nodes.Document;\n import org.jsoup.parser.Parser;\n import org.jsoup.parser.TokenQueue;\n         static Response execute(Connection.Request req, Response previousResponse) throws IOException {\n             Validate.notNull(req, \"Request must not be null\");\n             String protocol = req.url().getProtocol();\n-            Validate\n-                .isTrue(protocol.equals(\"http\") || protocol.equals(\"https\"), \"Only http & https protocols supported\");\n+            if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))\n+                throw new MalformedURLException(\"Only http & https protocols supported\");\n \n             // set up the request for execution\n             if (req.method() == Connection.Method.GET && req.data().size() > 0)\n                 serialiseRequestUrl(req); // appends query string\n             HttpURLConnection conn = createConnection(req);\n-            conn.connect();\n-            if (req.method() == Connection.Method.POST)\n-                writePost(req.data(), conn.getOutputStream());          \n-\n-            int status = conn.getResponseCode();\n-            boolean needsRedirect = false;\n-            if (status != HttpURLConnection.HTTP_OK) {\n-                if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER)\n-                    needsRedirect = true;\n-                else if (!req.ignoreHttpErrors())\n-                    throw new IOException(status + \" error loading URL \" + req.url().toString());\n-            }\n-            Response res = new Response(previousResponse);\n-            res.setupFromConnection(conn, previousResponse);\n-            if (needsRedirect && req.followRedirects()) {\n-                req.method(Method.GET); // always redirect with a get. any data param from original req are dropped.\n-                req.data().clear();\n-                req.url(new URL(req.url(), res.header(\"Location\")));\n-                for (Map.Entry<String, String> cookie : res.cookies.entrySet()) { // add response cookies to request (for e.g. login posts)\n-                    req.cookie(cookie.getKey(), cookie.getValue());\n+            Response res;\n+            try {\n+                conn.connect();\n+                if (req.method() == Connection.Method.POST)\n+                    writePost(req.data(), conn.getOutputStream());\n+\n+                int status = conn.getResponseCode();\n+                boolean needsRedirect = false;\n+                if (status != HttpURLConnection.HTTP_OK) {\n+                    if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER)\n+                        needsRedirect = true;\n+                    else if (!req.ignoreHttpErrors())\n+                        throw new HttpStatusException(\"HTTP error fetching URL\", status, req.url().toString());\n                 }\n-                return execute(req, res);\n-            }\n-            res.req = req;\n-\n-            // check that we can handle the returned content type; if not, abort before fetching it\n-            String contentType = res.contentType();\n-            if (contentType != null && !req.ignoreContentType() && (!(contentType.startsWith(\"text/\") || contentType.startsWith(\"application/xml\") || contentType.startsWith(\"application/xhtml+xml\"))))\n-                throw new IOException(String.format(\"Unhandled content type \\\"%s\\\" on URL %s. Must be text/*, application/xml, or application/xhtml+xml\",\n-                    contentType, req.url().toString()));\n-\n-            InputStream bodyStream = null;\n-            InputStream dataStream = null;\n-            try {\n-                dataStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n-            \tbodyStream = res.hasHeader(\"Content-Encoding\") && res.header(\"Content-Encoding\").equalsIgnoreCase(\"gzip\") ?\n-                        new BufferedInputStream(new GZIPInputStream(dataStream)) :\n-                        new BufferedInputStream(dataStream);\n-                \n-                res.byteData = DataUtil.readToByteBuffer(bodyStream);\n-                res.charset = DataUtil.getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it\n+                res = new Response(previousResponse);\n+                res.setupFromConnection(conn, previousResponse);\n+                if (needsRedirect && req.followRedirects()) {\n+                    req.method(Method.GET); // always redirect with a get. any data param from original req are dropped.\n+                    req.data().clear();\n+                    req.url(new URL(req.url(), res.header(\"Location\")));\n+                    for (Map.Entry<String, String> cookie : res.cookies.entrySet()) { // add response cookies to request (for e.g. login posts)\n+                        req.cookie(cookie.getKey(), cookie.getValue());\n+                    }\n+                    return execute(req, res);\n+                }\n+                res.req = req;\n+\n+                // check that we can handle the returned content type; if not, abort before fetching it\n+                String contentType = res.contentType();\n+                if (contentType != null && !req.ignoreContentType() && (!(contentType.startsWith(\"text/\") || contentType.startsWith(\"application/xml\") || contentType.startsWith(\"application/xhtml+xml\"))))\n+                    throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml\",\n+                            contentType, req.url().toString());\n+\n+                InputStream bodyStream = null;\n+                InputStream dataStream = null;\n+                try {\n+                    dataStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n+                    bodyStream = res.hasHeader(\"Content-Encoding\") && res.header(\"Content-Encoding\").equalsIgnoreCase(\"gzip\") ?\n+                            new BufferedInputStream(new GZIPInputStream(dataStream)) :\n+                            new BufferedInputStream(dataStream);\n+\n+                    res.byteData = DataUtil.readToByteBuffer(bodyStream);\n+                    res.charset = DataUtil.getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it\n+                } finally {\n+                    if (bodyStream != null) bodyStream.close();\n+                    if (dataStream != null) dataStream.close();\n+                }\n             } finally {\n-                if (bodyStream != null) bodyStream.close();\n-                if (dataStream != null) dataStream.close();\n+                // per Java's documentation, this is not necessary, and precludes keepalives. However in practise,\n+                // connection errors will not be released quickly enough and can cause a too many open files error.\n+                conn.disconnect();\n             }\n \n             res.executed = true;\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n package org.jsoup.integration;\n \n+import org.jsoup.HttpStatusException;\n+import org.jsoup.UnsupportedMimeTypeException;\n import org.junit.Test;\n import org.junit.Ignore;\n import static org.junit.Assert.*;\n import org.jsoup.Jsoup;\n import org.jsoup.Connection;\n \n+import java.net.MalformedURLException;\n import java.net.URL;\n import java.io.IOException;\n import java.util.Map;\n  Tests the URL connection. Not enabled by default, so tests don't require network connection.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n-@Ignore // ignored by default so tests don't require network access. comment out to enable.\n+//@Ignore // ignored by default so tests don't require network access. comment out to enable.\n public class UrlConnectTest {\n     private static String echoURL = \"http://direct.infohound.net/tools/q.pl\";\n \n         Connection.Response res = Jsoup.connect(\"http://www.baidu.com/\").timeout(10*1000).execute();\n         Document doc = res.parse();\n \n-        assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n-        assertEquals(\"GB2312\", res.charset());\n+        assertEquals(\"GBK\", doc.outputSettings().charset().displayName());\n+        assertEquals(\"GBK\", res.charset());\n         assert(res.hasCookie(\"BAIDUID\"));\n-        assertEquals(\"text/html;charset=gb2312\", res.contentType());\n+        assertEquals(\"text/html;charset=gbk\", res.contentType());\n     }\n     \n     @Test\n         boolean threw = false;\n         try {\n             Document doc = Jsoup.parse(new URL(url), 3000);\n-        } catch (IOException e) {\n-            threw = true;\n+        } catch (UnsupportedMimeTypeException e) {\n+            threw = true;\n+            assertEquals(\"org.jsoup.UnsupportedMimeTypeException: Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml. Mimetype=image/png, URL=http://jsoup.org/rez/osi_logo.png\", e.toString());\n+            assertEquals(url, e.getUrl());\n+            assertEquals(\"image/png\", e.getMimeType());\n+        } catch (IOException e) {\n+        }\n+        assertTrue(threw);\n+    }\n+\n+    @Test\n+    public void exceptOnUnsupportedProtocol(){\n+        String url = \"file://etc/passwd\";\n+        boolean threw = false;\n+        try {\n+            Document doc = Jsoup.connect(url).get();\n+        } catch (MalformedURLException e) {\n+            threw = true;\n+            assertEquals(\"java.net.MalformedURLException: Only http & https protocols supported\", e.toString());\n+        } catch (IOException e) {\n         }\n         assertTrue(threw);\n     }\n \n     @Test\n     public void throwsExceptionOnError() {\n-        Connection con = Jsoup.connect(\"http://infohound.net/tools/404\");\n+        String url = \"http://direct.infohound.net/tools/404\";\n+        Connection con = Jsoup.connect(url);\n         boolean threw = false;\n         try {\n             Document doc = con.get();\n-        } catch (IOException e) {\n-            threw = true;\n+        } catch (HttpStatusException e) {\n+            threw = true;\n+            assertEquals(\"org.jsoup.HttpStatusException: HTTP error fetching URL. Status=404, URL=http://direct.infohound.net/tools/404\", e.toString());\n+            assertEquals(url, e.getUrl());\n+            assertEquals(404, e.getStatusCode());\n+        } catch (IOException e) {\n         }\n         assertTrue(threw);\n     }", "timestamp": 1348438468, "metainfo": ""}