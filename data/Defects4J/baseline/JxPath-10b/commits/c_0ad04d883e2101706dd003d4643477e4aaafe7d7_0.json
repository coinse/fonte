{"sha": "0ad04d883e2101706dd003d4643477e4aaafe7d7", "log": "Fixed Scott Heaberlin's StackOverflow bug.  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n \n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathIntrospector;\n+import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.QName;\n+import org.apache.commons.jxpath.ri.compiler.NodeNameTest;\n import org.apache.commons.jxpath.ri.compiler.NodeTest;\n+import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;\n import org.apache.commons.jxpath.ri.model.NodeIterator;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n import org.apache.commons.jxpath.util.ValueUtils;\n         return getValuePointer().namespacePointer(namespace);\n     }\n \n-    public boolean testNode(NodeTest nodeTest) {\n-//        if (index\n-        /** @todo: infinite loop here */\n-        return getValuePointer().testNode(nodeTest);\n+    public boolean testNode(NodeTest test) {\n+        if (index == WHOLE_COLLECTION) {\n+            if (test == null) {\n+                return true;\n+            }\n+            else if (test instanceof NodeNameTest) {\n+                return false;\n+            }\n+            else if (test instanceof NodeTypeTest) {\n+                if (((NodeTypeTest) test).getNodeType() == Compiler.NODE_TYPE_NODE) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+        return getValuePointer().testNode(test);\n     }\n \n     public int compareChildNodePointers(\n--- a/src/test/org/apache/commons/jxpath/ri/model/MixedModelTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/MixedModelTest.java\n             new Integer(4),\n             \"/matrix[1]/.[1]\");\n     }\n+    \n+    /**\n+     * Scott Heaberlin's test - collection of collections\n+     */\n+    public void testCollectionPointer() {\n+        List list = new ArrayList();\n+        Map map = new HashMap();\n+        map.put(\"KeyOne\", \"SomeStringOne\");\n+        map.put(\"KeyTwo\", \"SomeStringTwo\");\n+        \n+        Map map2 = new HashMap();\n+        map2.put(\"KeyA\", \"StringA\");\n+        map2.put(\"KeyB\", \"StringB\");\n+        \n+        map.put(\"KeyThree\", map2);\n+        list.add(map);\n+        \n+        List list2 = new ArrayList();\n+        list2.add(\"foo\");\n+        list2.add(map);\n+        list2.add(map);\n+        list.add(list2);\n+        \n+        context = JXPathContext.newContext(list);\n+        \n+        assertEquals(\"SomeStringOne\", context.getValue(\".[1]/KeyOne\"));\n+        assertEquals(\"StringA\", context.getValue(\".[1]/KeyThree/KeyA\"));\n+        assertEquals(new Integer(3), context.getValue(\"size(.[1]/KeyThree)\"));\n+        assertEquals(new Double(6.0), context.getValue(\"count(.[1]/KeyThree/*)\"));\n+        assertEquals(new Double(3.0), context.getValue(\"count(.[1]/KeyThree/KeyA)\"));\n+    }\n }", "timestamp": 1111292713, "metainfo": ""}