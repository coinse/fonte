{"sha": "438d305ba52f7498660668cfc439d9a9a0f3cc2a", "log": "Added support for the format-number() function   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/JXPathContext.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathContext.java,v 1.12 2003/01/11 05:41:22 dmitri Exp $\n- * $Revision: 1.12 $\n- * $Date: 2003/01/11 05:41:22 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathContext.java,v 1.13 2003/01/25 01:50:36 dmitri Exp $\n+ * $Revision: 1.13 $\n+ * $Date: 2003/01/25 01:50:36 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.jxpath;\n \n+import java.text.DecimalFormatSymbols;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Locale;\n \n  *\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.12 $ $Date: 2003/01/11 05:41:22 $\n+ * @version $Revision: 1.13 $ $Date: 2003/01/25 01:50:36 $\n  */\n public abstract class JXPathContext {\n     protected JXPathContext parentContext;\n     protected boolean lenient = false;\n     protected IdentityManager idManager;\n     protected KeyManager keyManager;\n+    protected HashMap decimalFormats;\n \n     private static JXPathContext compilationContext;\n \n      * the context has a parent, returns the parent's locale.\n      * Otherwise, returns Locale.getDefault().\n      */\n-    protected Locale getLocale() {\n+    public Locale getLocale() {\n         if (locale == null) {\n             if (parentContext != null) {\n                 return parentContext.getLocale();\n         }\n         return locale;\n     }\n-\n+    \n+    /**\n+     * Sets DecimalFormatSymbols for a given name. The DecimalFormatSymbols can\n+     * be referenced as the third, optional argument in the invocation of\n+     * <code>format-number (number,format,decimal-format-name)</code> function.\n+     * By default, JXPath uses the symbols for the current locale.\n+     * \n+     * @param name the format name or null for default format.\n+     */\n+    public void setDecimalFormatSymbols(\n+        String name,\n+        DecimalFormatSymbols symbols) \n+    {\n+        if (decimalFormats == null) {\n+            decimalFormats = new HashMap();\n+        }\n+        decimalFormats.put(name, symbols);\n+    }\n+\n+    /**\n+     * @see #setDecimalFormat(String, DecimalFormatS)\n+     */\n+    public DecimalFormatSymbols getDecimalFormatSymbols(String name) {\n+        if (decimalFormats == null) {\n+            return null;\n+        }\n+        return (DecimalFormatSymbols) decimalFormats.get(name);\n+    }\n+    \n     /**\n      * If the context is in the lenient mode, then getValue() returns null\n      * for inexistent paths.  Otherwise, a path that does not map to\n--- a/src/java/org/apache/commons/jxpath/ri/Compiler.java\n+++ b/src/java/org/apache/commons/jxpath/ri/Compiler.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/Compiler.java,v 1.5 2003/01/11 05:41:22 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2003/01/11 05:41:22 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/Compiler.java,v 1.6 2003/01/25 01:50:36 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2003/01/25 01:50:36 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * </pre></blockquote>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2003/01/11 05:41:22 $\n+ * @version $Revision: 1.6 $ $Date: 2003/01/25 01:50:36 $\n  */\n public interface Compiler {\n \n     public static final int FUNCTION_ROUND = 27;\n     public static final int FUNCTION_NULL = 28;\n     public static final int FUNCTION_KEY = 29;\n+    public static final int FUNCTION_FORMAT_NUMBER = 30;\n \n     /**\n      * Produces an EXPRESSION object that represents a numeric constant.\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java,v 1.10 2003/01/19 23:59:23 dmitri Exp $\n- * $Revision: 1.10 $\n- * $Date: 2003/01/19 23:59:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java,v 1.11 2003/01/25 01:50:36 dmitri Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2003/01/25 01:50:36 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.jxpath.ri.compiler;\n \n+import java.text.DecimalFormat;\n+import java.text.DecimalFormatSymbols;\n+import java.text.NumberFormat;\n import java.util.Collection;\n+import java.util.Locale;\n \n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathException;\n  * like \"position()\" or \"number()\".\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.10 $ $Date: 2003/01/19 23:59:23 $\n+ * @version $Revision: 1.11 $ $Date: 2003/01/25 01:50:36 $\n  */\n public class CoreFunction extends Operation {\n \n                 return \"round\";\n             case Compiler.FUNCTION_KEY :\n                 return \"key\";\n+            case Compiler.FUNCTION_FORMAT_NUMBER:\n+                return \"format-number\";\n         }\n         return \"unknownFunction\" + functionCode + \"()\";\n     }\n             case Compiler.FUNCTION_CEILING:\n             case Compiler.FUNCTION_ROUND:\n                 return false;\n+                \n+            case Compiler.FUNCTION_FORMAT_NUMBER:\n+                return args != null && args.length == 2;                             \n         }\n \n         return false;\n                 return functionRound(context);\n             case Compiler.FUNCTION_KEY :\n                 return functionKey(context);\n+            case Compiler.FUNCTION_FORMAT_NUMBER :\n+                return functionFormatNumber(context);\n         }\n         return null;\n     }\n         return new Double(Math.round(v));\n     }\n \n+    private Object functionFormatNumber(EvalContext context) {\n+        int ac = getArgumentCount();\n+        if (ac != 2 && ac != 3) {\n+            assertArgCount(2);\n+        }\n+\n+        double number =\n+            InfoSetUtil.doubleValue(getArg1().computeValue(context));\n+        String pattern =\n+            InfoSetUtil.stringValue(getArg2().computeValue(context));\n+\n+        DecimalFormatSymbols symbols = null;\n+        if (ac == 3) {\n+            String symbolsName =\n+                InfoSetUtil.stringValue(getArg3().computeValue(context));\n+            symbols =\n+                context.getJXPathContext().getDecimalFormatSymbols(symbolsName);\n+        }\n+        else {\n+            NodePointer pointer = context.getCurrentNodePointer();\n+            Locale locale;\n+            if (pointer != null) {\n+                locale = pointer.getLocale();\n+            }\n+            else {\n+                locale = context.getJXPathContext().getLocale();\n+            }\n+            symbols = new DecimalFormatSymbols(locale);\n+        }\n+        \n+        DecimalFormat format = (DecimalFormat) NumberFormat.getInstance();\n+        format.setDecimalFormatSymbols(symbols);\n+        format.applyLocalizedPattern(pattern);\n+        return format.format(number);\n+    }\n+\n     private void assertArgCount(int count) {\n         if (getArgumentCount() != count) {\n             throw new JXPathException(\"Incorrect number of argument: \" + this);\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java,v 1.10 2003/01/19 23:59:23 dmitri Exp $\n- * $Revision: 1.10 $\n- * $Date: 2003/01/19 23:59:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java,v 1.11 2003/01/25 01:50:36 dmitri Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2003/01/25 01:50:36 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * \"- \", \"*\" etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.10 $ $Date: 2003/01/19 23:59:23 $\n+ * @version $Revision: 1.11 $ $Date: 2003/01/25 01:50:36 $\n  */\n public abstract class CoreOperation extends Operation {\n         \n             needParens = false;\n         }\n         else if (myPrecedence == thePrecedence) {\n-            if (isSymmetric()){\n+            if (isSymmetric()) {\n                 needParens = false;\n             }\n             else {\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java,v 1.8 2003/01/11 05:41:24 dmitri Exp $\n- * $Revision: 1.8 $\n- * $Date: 2003/01/11 05:41:24 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java,v 1.9 2003/01/25 01:50:37 dmitri Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2003/01/25 01:50:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * of the attribute is based on the locale supplied to it in the constructor.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.8 $ $Date: 2003/01/11 05:41:24 $\n+ * @version $Revision: 1.9 $ $Date: 2003/01/25 01:50:37 $\n  */\n public class LangAttributePointer extends NodePointer {\n     public LangAttributePointer(NodePointer parent) {\n     }\n \n     public QName getName() {\n-        return new QName(null, \"lang\");\n+        return new QName(\"xml\", \"lang\");\n     }\n \n     public QName getExpandedName() {\n     public boolean isCollection() {\n         return false;\n     }\n-    \n+\n     public int getLength() {\n         return 1;\n-    }    \n+    }\n \n     public Object getBaseValue() {\n         return parent.getLocale().toString().replace('_', '-');\n \n     public int compareChildNodePointers(\n         NodePointer pointer1,\n-        NodePointer pointer2) \n+        NodePointer pointer2)\n     {\n         // Won't happen - lang attributes don't have children\n         return 0;\n--- a/src/java/org/apache/commons/jxpath/xml/DocumentContainer.java\n+++ b/src/java/org/apache/commons/jxpath/xml/DocumentContainer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/xml/DocumentContainer.java,v 1.4 2003/01/11 05:41:27 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/01/11 05:41:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/xml/DocumentContainer.java,v 1.5 2003/01/25 01:50:37 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2003/01/25 01:50:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * read at all.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2003/01/11 05:41:27 $\n+ * @version $Revision: 1.5 $ $Date: 2003/01/25 01:50:37 $\n  */\n public class DocumentContainer implements Container {\n \n     }\n \n     private static HashMap parsers = new HashMap();\n+\n+    /**\n+     * Add an XML parser.  Parsers for the models \"DOM\" and \"JDOM\" are\n+     * pre-registered.\n+     */\n+    public static void registerXMLParser(String model, XMLParser parser) {\n+        parsers.put(model, parser);\n+    }\n \n     /**\n      * Use this constructor if the desired model is DOM.\n--- a/src/test/org/apache/commons/jxpath/ri/JXPathCompiledExpressionTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/JXPathCompiledExpressionTest.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/JXPathCompiledExpressionTest.java,v 1.1 2003/01/20 00:00:27 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2003/01/20 00:00:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/JXPathCompiledExpressionTest.java,v 1.2 2003/01/25 01:50:37 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2003/01/25 01:50:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathTestCase;\n-import org.apache.commons.jxpath.ri.compiler.*;\n+import org.apache.commons.jxpath.ri.compiler.Constant;\n+import org.apache.commons.jxpath.ri.compiler.CoreFunction;\n+import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;\n+import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;\n+import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;\n+import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;\n+import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;\n+import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;\n+import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;\n+import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;\n+import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;\n+import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;\n+import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;\n+import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;\n+import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;\n+import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;\n+import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;\n+import org.apache.commons.jxpath.ri.compiler.ExpressionPath;\n+import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;\n+import org.apache.commons.jxpath.ri.compiler.LocationPath;\n+import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;\n+import org.apache.commons.jxpath.ri.compiler.VariableReference;\n \n /**\n  * Test compiler.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2003/01/20 00:00:27 $\n+ * @version $Revision: 1.2 $ $Date: 2003/01/25 01:50:37 $\n  */\n \n public class JXPathCompiledExpressionTest extends JXPathTestCase {\n         assertXPathExpression(\"ceiling(11.4)\", CoreFunction.class);\n         assertXPathExpression(\"round(11.4)\", CoreFunction.class);\n         assertXPathExpression(\"key('title', 'Hobbit')\", CoreFunction.class);\n+        assertXPathExpression(\"format-number(12, '##')\", CoreFunction.class);\n     }\n     \n     public void testCoreOperationAnd() {\n--- a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java,v 1.3 2003/01/20 00:00:27 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2003/01/20 00:00:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java,v 1.4 2003/01/25 01:50:37 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2003/01/25 01:50:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n package org.apache.commons.jxpath.ri.compiler;\n \n+import java.text.DecimalFormatSymbols;\n+\n import org.apache.commons.jxpath.IdentityManager;\n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathTestCase;\n  * Test basic functionality of JXPath - core functions.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2003/01/20 00:00:27 $\n+ * @version $Revision: 1.4 $ $Date: 2003/01/25 01:50:37 $\n  */\n \n public class CoreFunctionTest extends JXPathTestCase {\n \n         assertEquals(\"Test key\", \"42\", context.getValue(\"key('a', 'b')\"));\n     }\n+    \n+    public void testFormatNumberFunction() {\n+        \n+        DecimalFormatSymbols symbols = new DecimalFormatSymbols();\n+        symbols.setDigit('D');\n+        \n+        context.setDecimalFormatSymbols(\"test\", symbols);\n+        \n+        assertXPathValue(\n+            context,\n+            \"format-number(123456789, '#.000000000')\",\n+            \"123456789.000000000\");\n+\n+        assertXPathValue(\n+            context,\n+            \"format-number(123456789, '#.0')\",\n+            \"123456789.0\");\n+\n+        assertXPathValue(\n+            context, \n+            \"format-number(0.123456789, '##%')\", \n+            \"12%\");\n+\n+        assertXPathValue(\n+            context,\n+            \"format-number(123456789, '################')\",\n+            \"123456789\");\n+\n+        assertXPathValue(\n+            context,\n+            \"format-number(123456789, 'D.0', 'test')\",\n+            \"123456789.0\");\n+\n+        assertXPathValue(\n+            context,\n+            \"format-number(123456789, '$DDD,DDD,DDD.DD', 'test')\",\n+            \"$123,456,789\");\n+    }\n }\n--- a/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java,v 1.8 2003/01/20 00:00:28 dmitri Exp $\n- * $Revision: 1.8 $\n- * $Date: 2003/01/20 00:00:28 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java,v 1.9 2003/01/25 01:50:37 dmitri Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2003/01/25 01:50:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Abstract superclass for Bean access with JXPath.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.8 $ $Date: 2003/01/20 00:00:28 $\n+ * @version $Revision: 1.9 $ $Date: 2003/01/25 01:50:37 $\n  */\n \n public abstract class BeanModelTestCase extends JXPathTestCase {\n             \"integers[position()<3]\",\n             list(new Integer(1), new Integer(2)));\n             \n-        context.getVariables().declareVariable(\"temp\", context.getValue(\"beans\"));\n+        context.getVariables().declareVariable(\n+            \"temp\",\n+            context.getValue(\"beans\"));\n         \n         assertXPathValueIterator(\n             context,", "timestamp": 1043459437, "metainfo": ""}