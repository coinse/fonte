{"sha": "c6d36b46057b4d441556e6275bcd7d13d242fa02", "log": "New conversion: arrays, collections   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/util/TypeUtils.java\n+++ b/src/java/org/apache/commons/jxpath/util/TypeUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/util/TypeUtils.java,v 1.4 2002/04/26 03:28:37 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/04/26 03:28:37 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/util/TypeUtils.java,v 1.5 2002/05/08 00:38:19 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/05/08 00:38:19 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/04/26 03:28:37 $\n+ * @version $Revision: 1.5 $ $Date: 2002/05/08 00:38:19 $\n  */\n public class TypeUtils {\n \n             }\n         }\n         else if (fromType.isArray()){\n-            if (Array.getLength(object) == 1){\n+            // Collection -> array\n+            if (toType.isArray()){\n+                Class cType = toType.getComponentType();\n+                int length = Array.getLength(object);\n+                for (int i = 0; i < length; i++){\n+                    Object value = Array.get(object, i);\n+                    if (!canConvert(value, cType)){\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            }\n+            else if (Collection.class.isAssignableFrom(toType)){\n+                return canCreateCollection(toType);\n+            }\n+            else if (Array.getLength(object) == 1){\n                 Object value = Array.get(object, 0);\n                 return canConvert(value, toType);\n             }\n         }\n-        else if (object instanceof List){\n-            if (((List)object).size() == 1){\n-                Object value = ((List)object).get(0);\n-                return canConvert(value, toType);\n-            }\n-        }\n         else if (object instanceof Collection){\n-            if (!((Collection)object).isEmpty()){\n+            // Collection -> array\n+            if (toType.isArray()){\n+                Class cType = toType.getComponentType();\n                 Iterator it = ((Collection)object).iterator();\n-                Object value = it.next();\n+                while (it.hasNext()){\n+                    Object value = it.next();\n+                    if (!canConvert(value, cType)){\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            }\n+            else if (Collection.class.isAssignableFrom(toType)){\n+                return canCreateCollection(toType);\n+            }\n+            else if (((Collection)object).size() == 1){\n+                Object value;\n+                if (object instanceof List){\n+                    value = ((List)object).get(0);\n+                }\n+                else {\n+                    Iterator it = ((Collection)object).iterator();\n+                    value = it.next();\n+                }\n                 return canConvert(value, toType);\n             }\n         }\n             }\n         }\n         else if (fromType.isArray()){\n-            Object value = Array.get(object, 0);\n-            return convert(value, toType);\n-        }\n-        else if (object instanceof List){\n-            Object value = ((List)object).get(0);\n-            return convert(value, toType);\n+            int length = Array.getLength(object);\n+            if (toType.isArray()){\n+                Class cType = toType.getComponentType();\n+\n+                Object array = Array.newInstance(cType, length);\n+                for (int i = 0; i < length; i++){\n+                    Object value = Array.get(object, i);\n+                    Array.set(array, i, convert(value, cType));\n+                }\n+                return array;\n+            }\n+            else if (Collection.class.isAssignableFrom(toType)){\n+                Collection collection = allocateCollection(toType);\n+                for (int i = 0; i < length; i++){\n+                    collection.add(Array.get(object, i));\n+                }\n+                return collection;\n+            }\n+            else if (length == 1){\n+                Object value = Array.get(object, 0);\n+                return convert(value, toType);\n+            }\n         }\n         else if (object instanceof Collection){\n-            Iterator it = ((Collection)object).iterator();\n-            Object value = it.next();\n-            return convert(value, toType);\n-        }\n-        return object;\n+            int length = ((Collection) object).size();\n+            if (toType.isArray()){\n+                Class cType = toType.getComponentType();\n+                Object array = Array.newInstance(cType, length);\n+                Iterator it = ((Collection) object).iterator();\n+                for (int i = 0; i < length; i++){\n+                    Object value = it.next();\n+                    Array.set(array, i, convert(value, cType));\n+                }\n+                return array;\n+            }\n+            else if (Collection.class.isAssignableFrom(toType)){\n+                Collection collection = allocateCollection(toType);\n+                collection.addAll((Collection) object);\n+                return collection;\n+            }\n+            else if (length == 1){\n+                Object value;\n+                if (object instanceof List){\n+                    value = ((List)object).get(0);\n+                }\n+                else {\n+                    Iterator it = ((Collection)object).iterator();\n+                    value = it.next();\n+                }\n+                return convert(value, toType);\n+            }\n+        }\n+        throw new RuntimeException(\"Cannot convert \" + object.getClass() +\n+                \" to \" + toType);\n     }\n \n     private static Number allocateNumber(Class type, double value){\n         }\n         return null;\n     }\n+\n+    private static boolean canCreateCollection(Class type){\n+        if (!type.isInterface() && ((type.getModifiers() | Modifier.ABSTRACT) == 0)){\n+            return true;\n+        }\n+\n+        if (type == List.class){\n+            return true;\n+        }\n+\n+        if (type == Set.class){\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private static Collection allocateCollection(Class type){\n+        if (!type.isInterface() &&\n+                ((type.getModifiers() | Modifier.ABSTRACT) == 0)){\n+            try {\n+                return (Collection)type.newInstance();\n+            }\n+            catch(Exception ex){\n+                throw new JXPathException(\"Cannot create collection of type: \"\n+                        + type, ex);\n+            }\n+        }\n+\n+        if (type == List.class){\n+            return new ArrayList();\n+        }\n+        if (type == Set.class){\n+            return new HashSet();\n+        }\n+        throw new RuntimeException(\"Cannot create collection of type: \" + type);\n+    }\n }", "timestamp": 1020818369, "metainfo": ""}