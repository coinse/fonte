{"sha": "074cc8809cf0884f38bb22622d81209778a02b32", "log": "Cleaned up isCollection, getLength and asPath methods   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.11 2002/10/13 02:59:01 dmitri Exp $\n- * $Revision: 1.11 $\n- * $Date: 2002/10/13 02:59:01 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.12 2002/10/20 03:47:17 dmitri Exp $\n+ * $Revision: 1.12 $\n+ * $Date: 2002/10/20 03:47:17 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;\n import org.apache.commons.jxpath.ri.model.beans.NullElementPointer;\n import org.apache.commons.jxpath.ri.model.beans.NullPointer;\n-import org.apache.commons.jxpath.util.ValueUtils;\n \n /**\n  * Common superclass for Pointers of all kinds.  A NodePointer maps to\n  * context-independent predicates.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.11 $ $Date: 2002/10/13 02:59:01 $\n+ * @version $Revision: 1.12 $ $Date: 2002/10/20 03:47:17 $\n  */\n public abstract class NodePointer implements Pointer, Cloneable, Comparable {\n \n     /**\n      * If true, this node does not have children\n      */\n-    public boolean isLeaf() {\n-        Object value = getNode();\n-        return value == null\n-            || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();\n-    }\n+    public abstract boolean isLeaf();\n \n     /**\n      * If false, this node is axiliary and can only be used as an intermediate\n      * Returns <code>true</code> if the value of the pointer is an array or\n      * a Collection.\n      */\n-    public boolean isCollection() {\n-        Object value = getBaseValue();\n-        return value != null && ValueUtils.isCollection(value);\n-    }\n+    public abstract boolean isCollection();\n \n     /**\n      * If the pointer represents a collection (or collection element),\n      * returns the length of the collection.\n      * Otherwise returns 1 (even if the value is null).\n      */\n-    public int getLength() {\n-        Object value = getBaseValue();\n-        if (value == null) {\n-            return 1;\n-        }\n-        return ValueUtils.getLength(value);\n-    }\n+    public abstract int getLength();\n \n     /**\n      * By default, returns <code>getNodeValue()</code>, can be overridden to\n             if (getParent().isNode() || (parent instanceof NullElementPointer)){\n                 QName name = getName();\n                 if (name != null) {\n-                    buffer.append('/');\n+                    if (buffer.length() == 0 ||\n+                            buffer.charAt(buffer.length()-1) != '/'){\n+                        buffer.append('/');\n+                    }\n                     if (attribute){\n                         buffer.append('@');\n                     }\n--- a/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java,v 1.6 2002/08/10 16:13:03 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/08/10 16:13:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java,v 1.7 2002/10/20 03:47:17 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/10/20 03:47:17 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.AbstractFactory;\n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathException;\n+import org.apache.commons.jxpath.JXPathIntrospector;\n import org.apache.commons.jxpath.Variables;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.compiler.NodeTest;\n  * Pointer to a context variable.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2002/08/10 16:13:03 $\n+ * @version $Revision: 1.7 $ $Date: 2002/10/20 03:47:17 $\n  */\n public class VariablePointer extends NodePointer {\n     private Variables variables;\n         }\n         return variables.getVariable(name.getName());\n     }\n+    \n+    public boolean isLeaf() {\n+        Object value = getNode();\n+        return value == null\n+            || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();\n+    }\n+    \n+    public boolean isCollection(){\n+        Object value = getBaseValue();\n+        return value != null && ValueUtils.isCollection(value);\n+    }\n \n     public Object getNode(){\n         Object value = getBaseValue();\n \n     public int getLength(){\n         if (actual){\n-            return super.getLength();\n+            Object value = getBaseValue();\n+            if (value == null) {\n+                return 1;\n+            }\n+            return ValueUtils.getLength(value);\n         }\n         return 0;\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java,v 1.6 2002/08/10 01:49:46 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/08/10 01:49:46 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java,v 1.7 2002/10/20 03:47:17 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/10/20 03:47:17 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import java.util.Locale;\n \n import org.apache.commons.jxpath.JXPathBeanInfo;\n+import org.apache.commons.jxpath.JXPathIntrospector;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n import org.apache.commons.jxpath.util.ValueUtils;\n \n /**\n- * A Pointer that points to a JavaBean or a collection. It is the first element of\n- * a path, following elements will by of type PropertyPointer.\n+ * A Pointer that points to a JavaBean or a collection. It is either\n+ * the first element of a path or a pointer for a property value.\n+ * Typically there is a BeanPropertyPointer between two BeanPointers\n+ * in the chain.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2002/08/10 01:49:46 $\n+ * @version $Revision: 1.7 $ $Date: 2002/10/20 03:47:17 $\n  */\n public class BeanPointer extends PropertyOwnerPointer {\n     private QName name;\n     private Object bean;\n     private JXPathBeanInfo beanInfo;\n-    private PropertyDescriptor propertyDescriptors[];\n-    private String[] names;\n \n     public BeanPointer(QName name, Object bean, JXPathBeanInfo beanInfo, Locale locale){\n         super(null, locale);\n     }\n \n     /**\n-     * Throws an exception if you try to change the root element.\n-     */\n-    public void setValue(Object value){\n-        super.setValue(value);\n-        if (parent instanceof PropertyPointer){\n-            parent.setValue(value);\n-        }\n-        else if (parent != null){\n-            throw new UnsupportedOperationException(\"Cannot setValue of an object that is not some other object's property\");\n-        }\n-        else {\n-            throw new UnsupportedOperationException(\"Cannot replace the root object\");\n-        }\n-    }\n-\n-    public void remove(){\n-        super.setValue(null);\n-        if (parent != null){\n-            parent.remove();\n-        }\n-        else {\n-            throw new UnsupportedOperationException(\n-                \"Cannot remove an object that is not \" +\n-                \"some other object's property or a collection element\");\n-        }\n-    }\n-\n-    /**\n-     * If the bean is a collection, returns the length of that collection,\n-     * otherwise returns 1.\n+     * Returns false\n+     */\n+    public boolean isCollection(){\n+        return false;\n+    }\n+\n+    /**\n+     * Returns 1.\n      */\n     public int getLength(){\n-        return ValueUtils.getLength(getBaseValue());\n+        return 1;\n+    }\n+\n+    public boolean isLeaf() {\n+        Object value = getNode();\n+        return value == null\n+            || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();\n     }\n \n     public int hashCode(){\n     }\n \n     /**\n-     * Empty string\n+     * If the pointer has a parent, then parent's path.\n+     * If the bean is null, \"null()\".\n+     * If the bean is a primitive value, the value itself.\n+     * Otherwise - an empty string.\n      */\n     public String asPath(){\n         if (parent != null){\n         else if (bean instanceof String){\n             return \"'\" + bean + \"'\";\n         }\n-        return \"\";\n+        return \"/\";\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java,v 1.8 2002/10/12 21:02:24 dmitri Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/10/12 21:02:24 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java,v 1.9 2002/10/20 03:47:17 dmitri Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/10/20 03:47:17 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n package org.apache.commons.jxpath.ri.model.beans;\n \n import java.beans.PropertyDescriptor;\n+import java.util.Arrays;\n \n import org.apache.commons.jxpath.AbstractFactory;\n import org.apache.commons.jxpath.JXPathBeanInfo;\n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathException;\n+import org.apache.commons.jxpath.JXPathIntrospector;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n import org.apache.commons.jxpath.util.ValueUtils;\n  * Pointer pointing to a property of a JavaBean.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.8 $ $Date: 2002/10/12 21:02:24 $\n+ * @version $Revision: 1.9 $ $Date: 2002/10/20 03:47:17 $\n  */\n public class BeanPropertyPointer extends PropertyPointer {\n     private String propertyName;\n     }\n \n     /**\n-     * If the property contains a collection, then the length of that\n-     * collection, otherwise - 1.\n-     */\n-    public int getLength(){\n-        return ValueUtils.getLength(getBaseValue());\n-    }\n-\n-    /**\n      * The value of the currently selected property.\n      */\n     public Object getBaseValue(){\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java,v 1.6 2002/08/10 16:13:04 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/08/10 16:13:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java,v 1.7 2002/10/20 03:47:17 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/10/20 03:47:17 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import java.util.Locale;\n \n import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.JXPathIntrospector;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.compiler.NodeTest;\n import org.apache.commons.jxpath.ri.model.NodeIterator;\n  * Transparent pointer to a collection (array or Collection).\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2002/08/10 16:13:04 $\n+ * @version $Revision: 1.7 $ $Date: 2002/10/20 03:47:17 $\n  */\n public class CollectionPointer extends NodePointer {\n     private Object collection;\n         return collection;\n     }\n \n+    public boolean isCollection(){\n+    \treturn true;\n+    }\n+\n+    public int getLength(){\n+        return ValueUtils.getLength(getBaseValue());\n+    }\n+\n+    public boolean isLeaf() {\n+        Object value = getNode();\n+        return value == null\n+            || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();\n+    }\n+\n     public boolean isNode(){\n         return index == WHOLE_COLLECTION;\n     }\n             }\n             else {\n                 Object value = getNode();\n-                valuePointer = NodePointer.newChildNodePointer(this, getName(), value);\n+                valuePointer = NodePointer.\n+                \t\t\tnewChildNodePointer(this, getName(), value);\n             }\n         }\n         return valuePointer;\n     }\n \n-    public NodePointer createChild(JXPathContext context, QName name, int index, Object value){\n+    public NodePointer createChild(JXPathContext context, \n+    \t\t\tQName name, int index, Object value)\n+    {\n         if (parent instanceof PropertyPointer){\n             return parent.createChild(context, name, index, value);\n         }\n         }\n     }\n \n-    public NodePointer createChild(JXPathContext context, QName name, int index){\n+    public NodePointer createChild(JXPathContext context, \n+    \t\t\tQName name, int index)\n+    {\n         if (parent instanceof PropertyPointer){\n             return parent.createChild(context, name, index);\n         }\n                 index == other.index;\n     }\n \n-    public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith){\n+    public NodeIterator childIterator(NodeTest test, \n+    \t\t\tboolean reverse, NodePointer startWith)\n+    {\n         if (index == WHOLE_COLLECTION){\n             return null;\n         }\n     }\n \n     public boolean testNode(NodeTest nodeTest){\n+//        if (index\n+        /** @todo: infinite loop here */\n         return getValuePointer().testNode(nodeTest);\n     }\n \n-    public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2){\n+    public int compareChildNodePointers(\n+    \t\t\tNodePointer pointer1, NodePointer pointer2)\n+    {\n         return pointer1.getIndex() - pointer2.getIndex();\n     }\n+\n+    /**\n+     * Returns an XPath that maps to this Pointer.\n+     */\n+    public String asPath() {\n+        StringBuffer buffer = new StringBuffer();\n+        NodePointer parent = getParent();\n+        if (parent != null) {\n+            buffer.append(parent.asPath());\n+        }\n+        if (index != WHOLE_COLLECTION) {\n+            // Address the list[1][2] case\n+            if (parent != null && !parent.isNode() &&\n+                    parent.getIndex() != WHOLE_COLLECTION){\n+                buffer.append(\"/.\");\n+            }\n+            buffer.append(\"[\").append(index + 1).append(']');\n+        }\n+\n+        return buffer.toString();\n+    }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/DynamicPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/DynamicPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/Attic/DynamicPointer.java,v 1.5 2002/08/10 01:49:46 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/10 01:49:46 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/Attic/DynamicPointer.java,v 1.6 2002/10/20 03:47:17 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/10/20 03:47:17 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import java.util.Locale;\n \n import org.apache.commons.jxpath.DynamicPropertyHandler;\n+import org.apache.commons.jxpath.JXPathIntrospector;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n-import org.apache.commons.jxpath.util.ValueUtils;\n \n /**\n  * A Pointer that points to an object with Dynamic Properties. It is used\n  * for the first element of a path; following elements will by of type PropertyPointer.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/08/10 01:49:46 $\n+ * @version $Revision: 1.6 $ $Date: 2002/10/20 03:47:17 $\n  */\n public class DynamicPointer extends PropertyOwnerPointer {\n     private QName name;\n     private DynamicPropertyHandler handler;\n     private String[] names;\n \n-    public DynamicPointer(QName name, Object bean, DynamicPropertyHandler handler, Locale locale){\n+    public DynamicPointer(QName name, Object bean,\n+            DynamicPropertyHandler handler, Locale locale)\n+    {\n         super(null, locale);\n         this.name = name;\n         this.bean = bean;\n         this.handler = handler;\n     }\n \n-    public DynamicPointer(NodePointer parent, QName name, Object bean, DynamicPropertyHandler handler){\n+    public DynamicPointer(NodePointer parent, QName name,\n+            Object bean, DynamicPropertyHandler handler)\n+    {\n         super(parent);\n         this.name = name;\n         this.bean = bean;\n     public Object getBaseValue(){\n         return bean;\n     }\n-\n-    public void setValue(Object value){\n-        super.setValue(value);\n-        if (parent instanceof PropertyPointer){\n-            parent.setValue(value);\n-        }\n-        else if (parent != null){\n-            throw new UnsupportedOperationException(\"Cannot setValue of an object that is not some other object's property\");\n-        }\n-        else {\n-            throw new UnsupportedOperationException(\"Cannot replace the root object\");\n-        }\n+    \n+    public boolean isLeaf() {\n+        Object value = getNode();\n+        return value == null\n+            || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();\n+    }    \n+    \n+    public boolean isCollection(){\n+    \treturn false;\n     }\n \n     /**\n-     * If the bean is a collection, returns the length of that collection,\n-     * otherwise returns 1.\n+     * Returns 1.\n      */\n     public int getLength(){\n-        return ValueUtils.getLength(getBaseValue());\n+    \treturn 1;\n     }\n \n-    /**\n-     * Empty string\n-     */\n     public String asPath(){\n         if (parent != null){\n             return super.asPath();\n         }\n-        return \"\";\n+        return \"/\";\n     }\n \n     public int hashCode(){\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/DynamicPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/DynamicPropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/Attic/DynamicPropertyPointer.java,v 1.8 2002/08/10 16:13:04 dmitri Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/08/10 16:13:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/Attic/DynamicPropertyPointer.java,v 1.9 2002/10/20 03:47:17 dmitri Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/10/20 03:47:17 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.DynamicPropertyHandler;\n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathException;\n+import org.apache.commons.jxpath.JXPathIntrospector;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n import org.apache.commons.jxpath.util.ValueUtils;\n  * Pointer pointing to a property of an object with dynamic properties.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.8 $ $Date: 2002/08/10 16:13:04 $\n+ * @version $Revision: 1.9 $ $Date: 2002/10/20 03:47:17 $\n  */\n public class DynamicPropertyPointer extends PropertyPointer {\n     private DynamicPropertyHandler handler;\n     }\n \n     /**\n-     * If the property contains a collection, then the length of that\n-     * collection, otherwise - 1.\n-     */\n-    public int getLength(){\n-        return ValueUtils.getLength(getBaseValue());\n-    }\n-\n-    /**\n      * Returns the value of the property, not an element of the collection\n      * represented by the property, if any.\n      */\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java,v 1.4 2002/08/10 16:13:04 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/10 16:13:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java,v 1.5 2002/10/20 03:47:17 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/10/20 03:47:17 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * of the attribute is based on the locale supplied to it in the constructor.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/08/10 16:13:04 $\n+ * @version $Revision: 1.5 $ $Date: 2002/10/20 03:47:17 $\n  */\n public class LangAttributePointer extends NodePointer {\n     public LangAttributePointer(NodePointer parent){\n     public String getNamespaceURI(){\n         return null;\n     }\n+\n+    public boolean isCollection(){\n+        return false;\n+    }\n+    \n+    public int getLength(){\n+        return 1;\n+    }    \n \n     public Object getBaseValue(){\n         return parent.getLocale().toString().replace('_', '-');\n         StringBuffer buffer = new StringBuffer();\n         if (parent != null){\n             buffer.append(parent.asPath());\n-            buffer.append('/');\n+            if (buffer.length() == 0 ||\n+                    buffer.charAt(buffer.length()-1) != '/'){\n+            \tbuffer.append('/');\n+            }\n         }\n         buffer.append(\"@xml:lang\");\n         return buffer.toString();\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java,v 1.8 2002/08/10 16:13:04 dmitri Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/08/10 16:13:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java,v 1.9 2002/10/20 03:47:17 dmitri Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/10/20 03:47:17 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * as the parent.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.8 $ $Date: 2002/08/10 16:13:04 $\n+ * @version $Revision: 1.9 $ $Date: 2002/10/20 03:47:17 $\n  */\n public class NullElementPointer extends PropertyOwnerPointer {\n \n \n     public Object getNode(){\n         return null;\n+    }\n+    \n+    public boolean isLeaf() {\n+        return true;\n+    }    \n+    \n+    public boolean isCollection(){\n+        return false;\n     }\n \n     public PropertyPointer getPropertyPointer(){\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java,v 1.6 2002/08/10 01:49:46 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/08/10 01:49:46 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java,v 1.7 2002/10/20 03:47:17 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/10/20 03:47:17 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2002/08/10 01:49:46 $\n+ * @version $Revision: 1.7 $ $Date: 2002/10/20 03:47:17 $\n  */\n public class NullPointer extends PropertyOwnerPointer {\n     private QName name;\n     public Object getBaseValue(){\n         return null;\n     }\n+    \n+    public boolean isCollection(){\n+        return false;\n+    }\n \n-    public void setValue(Object value){\n-        super.setValue(value);\n-        if (parent instanceof PropertyPointer){\n-            parent.setValue(value);\n-        }\n-        else {\n-            throw new UnsupportedOperationException(\"Cannot setValue of an object that is not some other object's property/child\");\n-        }\n-    }\n+    public boolean isLeaf() {\n+        return true;\n+    }        \n \n     public boolean isActual(){\n         return false;\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java,v 1.8 2002/10/13 02:59:01 dmitri Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/10/13 02:59:01 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java,v 1.9 2002/10/20 03:47:17 dmitri Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/10/20 03:47:17 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.8 $ $Date: 2002/10/13 02:59:01 $\n+ * @version $Revision: 1.9 $ $Date: 2002/10/20 03:47:17 $\n  */\n public class NullPropertyPointer extends PropertyPointer {\n \n         return null;\n     }\n \n+    public boolean isLeaf() {\n+        return true;\n+    }    \n+\n     public NodePointer getValuePointer(){\n         return new NullPointer(this,  new QName(getPropertyName()));\n     }\n     }\n \n     public void setValue(Object value){\n-        throw new JXPathException(\"Cannot set property \" + asPath() +\n-            \", the target object is null\");\n+        if (parent == null || !parent.isNode()){\n+            throw new JXPathException(\"Cannot set property \" + asPath() +\n+                \", the target object is null\");\n+        }\n+        else {\n+            throw new JXPathException(\"Cannot set property \" + asPath() +\n+                \", path does not match a changeable location\");\n+        }\n     }\n \n     public NodePointer createPath(JXPathContext context){\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java,v 1.8 2002/08/10 16:13:04 dmitri Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/08/10 16:13:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java,v 1.9 2002/10/20 03:47:17 dmitri Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/10/20 03:47:17 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.ri.model.NodePointer;\n import org.apache.commons.jxpath.util.ValueUtils;\n \n-\n /**\n  * A pointer describing a node that has properties, each of which could be\n  * a collection.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.8 $ $Date: 2002/08/10 16:13:04 $\n+ * @version $Revision: 1.9 $ $Date: 2002/10/20 03:47:17 $\n  */\n public abstract class PropertyOwnerPointer extends NodePointer {\n \n         super(parent);\n     }\n \n-    public boolean isCollection(){\n-        Object value = getBaseValue();\n-        return value != null && ValueUtils.isCollection(value);\n-    }\n-\n     public void setIndex(int index){\n         if (this.index != index){\n             super.setIndex(index);\n     }\n \n     public abstract QName getName();\n+\n+    /**\n+     * Throws an exception if you try to change the root element, otherwise\n+     * forwards the call to the parent pointer.\n+     */\n     public void setValue(Object value){\n         this.value = value;\n+        if (parent instanceof PropertyPointer){\n+            parent.setValue(value);\n+        }\n+        else if (parent != null){\n+            throw new UnsupportedOperationException(\n+                \"Cannot setValue of an object that is not \" +\n+                \"some other object's property\");\n+        }\n+        else {\n+            throw new UnsupportedOperationException(\n+                \"Cannot replace the root object\");\n+        }\n+    }\n+\n+    /**\n+     * If this is a root node pointer, throws an exception; otherwise\n+     * forwards the call to the parent node.\n+     */\n+    public void remove(){\n+        this.value = null;\n+        if (parent != null){\n+            parent.remove();\n+        }\n+        else {\n+            throw new UnsupportedOperationException(\n+                \"Cannot remove an object that is not \" +\n+                \"some other object's property or a collection element\");\n+        }\n     }\n \n     public abstract PropertyPointer getPropertyPointer();\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java,v 1.5 2002/08/10 16:13:04 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/10 16:13:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java,v 1.6 2002/10/20 03:47:17 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/10/20 03:47:17 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.jxpath.ri.model.beans;\n \n+import org.apache.commons.jxpath.JXPathIntrospector;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n import org.apache.commons.jxpath.util.ValueUtils;\n  * a property of the parent object.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/08/10 16:13:04 $\n+ * @version $Revision: 1.6 $ $Date: 2002/10/20 03:47:17 $\n  */\n public abstract class PropertyPointer extends NodePointer {\n     public static int UNSPECIFIED_PROPERTY = Integer.MIN_VALUE;\n      */\n     public PropertyPointer(NodePointer parent){\n         super(parent);\n-    }\n-\n-    public boolean isCollection(){\n-        Object value = getBaseValue();\n-        return value != null && ValueUtils.isCollection(value);\n     }\n \n     public int getPropertyIndex(){\n         }\n         return value;\n     }\n+    \n+    public boolean isCollection(){\n+        Object value = getBaseValue();\n+        return value != null && ValueUtils.isCollection(value);\n+    }\n+    \n+    public boolean isLeaf() {\n+        Object value = getNode();\n+        return value == null\n+            || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();\n+    }    \n+\n+    /**\n+     * If the property contains a collection, then the length of that\n+     * collection, otherwise - 1.\n+     */\n+    public int getLength(){\n+        return ValueUtils.getLength(getBaseValue());\n+    }\n+\n \n     /**\n      * Returns a NodePointer that can be used to access the currently\n--- a/src/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java,v 1.4 2002/08/26 22:29:22 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/26 22:29:22 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java,v 1.5 2002/10/20 03:47:18 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/10/20 03:47:18 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * itself.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/08/26 22:29:22 $\n+ * @version $Revision: 1.5 $ $Date: 2002/10/20 03:47:18 $\n  */\n public class ContainerPointer extends NodePointer {\n     private Container container;\n     public Object getBaseValue(){\n         return container.getValue();\n     }\n+    \n+    public boolean isCollection(){\n+        Object value = getBaseValue();\n+        return value != null && ValueUtils.isCollection(value);\n+    }\n+    \n+    public int getLength(){\n+        Object value = getBaseValue();\n+        if (value == null) {\n+            return 1;\n+        }\n+        return ValueUtils.getLength(value);\n+    }    \n+\n+    public boolean isLeaf() {\n+        return getValuePointer().isLeaf();\n+    }    \n \n     public Object getNode(){\n         Object value = getBaseValue();\n         if (parent != null){\n             return parent.asPath();\n         }\n-        return \"\";\n+        return \"/\";\n     }\n  }\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributePointer.java,v 1.6 2002/08/10 16:13:04 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/08/10 16:13:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributePointer.java,v 1.7 2002/10/20 03:47:18 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/10/20 03:47:18 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2002/08/10 16:13:04 $\n+ * @version $Revision: 1.7 $ $Date: 2002/10/20 03:47:18 $\n  */\n public class DOMAttributePointer extends NodePointer {\n     private Attr attr;\n     public Object getBaseValue(){\n         return attr;\n     }\n+    \n+    public boolean isCollection(){\n+        return false;\n+    }\n+    \n+    public int getLength(){\n+        return 1;\n+    }    \n \n     public Object getNode(){\n         String value = attr.getValue();\n         StringBuffer buffer = new StringBuffer();\n         if (parent != null){\n             buffer.append(parent.asPath());\n-            buffer.append('/');\n+            if (buffer.length() == 0 ||\n+                    buffer.charAt(buffer.length()-1) != '/'){\n+            \tbuffer.append('/');\n+            }\n         }\n         buffer.append('@');\n         buffer.append(getName());\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java,v 1.5 2002/08/10 16:13:04 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/10 16:13:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java,v 1.6 2002/10/20 03:47:18 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/10/20 03:47:18 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Represents a namespace node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/08/10 16:13:04 $\n+ * @version $Revision: 1.6 $ $Date: 2002/10/20 03:47:18 $\n  */\n public class NamespacePointer extends NodePointer {\n     private String prefix;\n     public Object getBaseValue(){\n         return null;\n     }\n+    \n+    public boolean isCollection(){\n+        return false;\n+    }\n+    \n+    public int getLength(){\n+        return 1;\n+    }    \n \n     public Object getNode(){\n         return getNamespaceURI();\n         StringBuffer buffer = new StringBuffer();\n         if (parent != null){\n             buffer.append(parent.asPath());\n-            buffer.append('/');\n+            if (buffer.length() == 0 ||\n+                    buffer.charAt(buffer.length()-1) != '/'){\n+            \tbuffer.append('/');\n+            }\n         }\n         buffer.append(\"namespace::\");\n         buffer.append(prefix);\n--- a/src/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java,v 1.1 2002/10/20 03:44:18 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/10/20 03:44:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java,v 1.2 2002/10/20 03:47:18 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/10/20 03:47:18 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Pointer pointing to a property of a DynaBean.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2002/10/20 03:44:18 $\n+ * @version $Revision: 1.2 $ $Date: 2002/10/20 03:47:18 $\n  */\n public class DynaBeanPropertyPointer extends PropertyPointer {\n     private DynaBean dynaBean;\n                 }\n             }\n             Arrays.sort(names);\n-//            System.err.println(\"D.PROPERTIES: \" + Arrays.asList(names));\n         }\n         return names;\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributePointer.java,v 1.1 2002/08/26 22:29:48 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/26 22:29:48 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributePointer.java,v 1.2 2002/10/20 03:47:18 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/10/20 03:47:18 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2002/08/26 22:29:48 $\n+ * @version $Revision: 1.2 $ $Date: 2002/10/20 03:47:18 $\n  */\n public class JDOMAttributePointer extends NodePointer {\n     private Attribute attr;\n             uri = null;\n         }\n         return uri;\n-//        String prefix = DOMNodePointer.getPrefix(attr);\n-//        if (prefix == null){\n-//            return null;\n-//        }\n-//        return parent.getNamespaceURI(prefix);\n     }\n \n     public Object getBaseValue(){\n         return attr;\n     }\n+    \n+    public boolean isCollection(){\n+        return false;\n+    }\n+\n+    public int getLength(){\n+        return 1;\n+    }    \n \n     public Object getNode(){\n         String value = attr.getValue();\n         if (value == null){\n             return null;\n         }\n-//        if (value.equals(\"\") && !attr.getSpecified()){\n-//            return null;\n-//        }\n         return value;\n     }\n \n         StringBuffer buffer = new StringBuffer();\n         if (parent != null){\n             buffer.append(parent.asPath());\n-            buffer.append('/');\n+            if (buffer.length() == 0 ||\n+                    buffer.charAt(buffer.length()-1) != '/'){\n+            \tbuffer.append('/');\n+            }\n         }\n         buffer.append('@');\n         buffer.append(getName());\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespacePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespacePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespacePointer.java,v 1.1 2002/08/26 22:29:48 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/26 22:29:48 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespacePointer.java,v 1.2 2002/10/20 03:47:18 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/10/20 03:47:18 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Represents a namespace node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2002/08/26 22:29:48 $\n+ * @version $Revision: 1.2 $ $Date: 2002/10/20 03:47:18 $\n  */\n public class JDOMNamespacePointer extends NodePointer {\n     private String prefix;\n     public Object getBaseValue(){\n         return null;\n     }\n+    \n+    public boolean isCollection(){\n+        return false;\n+    }\n+    \n+    public int getLength(){\n+        return 1;\n+    }    \n \n     public Object getNode(){\n         return getNamespaceURI();\n         StringBuffer buffer = new StringBuffer();\n         if (parent != null){\n             buffer.append(parent.asPath());\n-            buffer.append('/');\n+            if (buffer.length() == 0 ||\n+                    buffer.charAt(buffer.length()-1) != '/'){\n+            \tbuffer.append('/');\n+            }\n         }\n         buffer.append(\"namespace::\");\n         buffer.append(prefix);\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java,v 1.1 2002/08/26 22:29:48 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/26 22:29:48 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java,v 1.2 2002/10/20 03:47:18 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/10/20 03:47:18 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * An iterator of children of a JDOM Node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2002/08/26 22:29:48 $\n+ * @version $Revision: 1.2 $ $Date: 2002/10/20 03:47:18 $\n  */\n public class JDOMNodeIterator implements NodeIterator {\n     private NodePointer parent;\n     private boolean reverse;\n     private int position = 0;\n     private int index = 0;\n-//    private Element node;\n     private List children;\n     private Object child;\n \n     public JDOMNodeIterator(\n-            NodePointer parent, NodeTest nodeTest, \n+            NodePointer parent, NodeTest nodeTest,\n             boolean reverse, NodePointer startWith)\n     {\n         this.parent = parent;\n         return true;\n     }\n \n+    /**\n+     * This is actually never invoked during the normal evaluation\n+     * of xpaths - an iterator is always going forward, never backwards.\n+     * So, this is implemented only for completeness and perhaps for\n+     * those who use these iterators outside of XPath evaluation.\n+     */\n     private boolean previous(){\n-        System.err.println(\"PREVIOUS\");     // TBD\n-//        position--;\n-//        if (!reverse){\n-//            child = child.getPreviousSibling();\n-//            while (child != null && !testChild()){\n-//                child = child.getPreviousSibling();\n-//            }\n-//        }\n-//        else {\n-//            child = child.getNextSibling();\n-//            while (child != null && !testChild()){\n-//                child = child.getNextSibling();\n-//            }\n-//        }\n-//        return child != null;\n+        position--;\n+        if (!reverse){\n+            while (--index >= 0){\n+                child = children.get(index);\n+                if (testChild()){\n+                    return true;\n+                }\n+            }\n+        }\n+        else {\n+            for (;index < children.size(); index++){\n+                child = children.get(index);\n+                if (testChild()){\n+                    return true;\n+                }\n+            }\n+        }\n         return false;\n     }\n ", "timestamp": 1035085638, "metainfo": ""}