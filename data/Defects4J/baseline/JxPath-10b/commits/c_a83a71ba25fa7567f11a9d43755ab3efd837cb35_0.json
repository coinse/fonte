{"sha": "a83a71ba25fa7567f11a9d43755ab3efd837cb35", "log": "Fixed a problem where the case of index specified was not distinguished from the case of index unspecified   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java,v 1.4 2002/05/08 23:05:05 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/05/08 23:05:05 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java,v 1.5 2002/08/10 01:46:19 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/10 01:46:19 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Transparent pointer to a collection (array or Collection).\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/05/08 23:05:05 $\n+ * @version $Revision: 1.5 $ $Date: 2002/08/10 01:46:19 $\n  */\n public class CollectionPointer extends NodePointer {\n     private Object collection;\n         return collection;\n     }\n \n+    public boolean isNode(){\n+        return index == WHOLE_COLLECTION;\n+    }\n+\n     public Object getNodeValue(){\n         if (index != WHOLE_COLLECTION){\n             return ValueUtils.getValue(collection, index);\n         }\n     }\n \n+    public void setIndex(int index){\n+        super.setIndex(index);\n+        valuePointer = null;\n+    }\n+\n     public NodePointer getValuePointer(){\n         if (valuePointer == null){\n-            Object value = getNodeValue();\n-            valuePointer = NodePointer.newChildNodePointer(this, getName(), value);\n+            if (index == WHOLE_COLLECTION){\n+                valuePointer = this;\n+            }\n+            else {\n+                Object value = getNodeValue();\n+                valuePointer = NodePointer.newChildNodePointer(this, getName(), value);\n+            }\n         }\n         return valuePointer;\n     }\n     }\n \n     public NodeIterator attributeIterator(QName name){\n+        if (index == WHOLE_COLLECTION){\n+            return null;\n+        }\n         return getValuePointer().attributeIterator(name);\n     }\n \n     public NodeIterator namespaceIterator(){\n+        if (index == WHOLE_COLLECTION){\n+            return null;\n+        }\n         return getValuePointer().namespaceIterator();\n     }\n \n     public NodePointer namespacePointer(String namespace){\n+        if (index == WHOLE_COLLECTION){\n+            return null;\n+        }\n         return getValuePointer().namespacePointer(namespace);\n     }\n ", "timestamp": 1028943979, "metainfo": ""}