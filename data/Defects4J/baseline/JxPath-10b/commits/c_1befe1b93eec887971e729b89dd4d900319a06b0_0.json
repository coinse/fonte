{"sha": "1befe1b93eec887971e729b89dd4d900319a06b0", "log": "[JXPATH-95] fix NaN comparisons  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java\n         if (right instanceof Iterator) {\n             return containsMatch((Iterator) right, left);\n         }\n-        return evaluateCompare(compare(left, right));\n+        double ld = InfoSetUtil.doubleValue(left);\n+        if (Double.isNaN(ld)) {\n+            return false;\n+        }\n+        double rd = InfoSetUtil.doubleValue(right);\n+        if (Double.isNaN(rd)) {\n+            return false;\n+        }\n+        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n     }\n \n     private Object reduce(Object o) {\n     private boolean containsMatch(Iterator it, Object value) {\n         while (it.hasNext()) {\n             Object element = it.next();\n-            if (evaluateCompare(compare(element, value))) {\n+            if (compute(element, value)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n \n-    private int compare(Object l, Object r) {\n-        double ld = InfoSetUtil.doubleValue(l);\n-        double rd = InfoSetUtil.doubleValue(r);\n-        return ld == rd ? 0 : ld < rd ? -1 : 1;\n-    }\n-\n }\n--- a/src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java\n             Variables vars = context.getVariables();\n             vars.declareVariable(\"integer\", new Integer(1));\n             vars.declareVariable(\"array\", new double[] { 0.25, 0.5, 0.75 });\n+            vars.declareVariable(\"nan\", new Double(Double.NaN));\n         }\n     }\n \n         assertXPathValue(context, \"$array > 1\", Boolean.FALSE, Boolean.class);\n         assertXPathValue(context, \"$array < 0\", Boolean.FALSE, Boolean.class);\n     }\n+\n+    public void testNan() {\n+        assertXPathValue(context, \"$nan > $nan\", Boolean.FALSE, Boolean.class);\n+        assertXPathValue(context, \"$nan < $nan\", Boolean.FALSE, Boolean.class);\n+        assertXPathValue(context, \"$nan = $nan\", Boolean.TRUE, Boolean.class);\n+        assertXPathValue(context, \"$nan > 0\", Boolean.FALSE, Boolean.class);\n+        assertXPathValue(context, \"$nan < 0\", Boolean.FALSE, Boolean.class);\n+        assertXPathValue(context, \"$nan = 0\", Boolean.FALSE, Boolean.class);\n+        assertXPathValue(context, \"$nan > 1\", Boolean.FALSE, Boolean.class);\n+        assertXPathValue(context, \"$nan < 1\", Boolean.FALSE, Boolean.class);\n+        assertXPathValue(context, \"$nan = 1\", Boolean.FALSE, Boolean.class);\n+    }\n }", "timestamp": 1184172241, "metainfo": ""}