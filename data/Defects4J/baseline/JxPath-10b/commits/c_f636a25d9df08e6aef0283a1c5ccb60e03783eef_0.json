{"sha": "f636a25d9df08e6aef0283a1c5ccb60e03783eef", "log": "Removed run-time dependency on DOM   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.17 2002/05/08 23:19:31 dmitri Exp $\n- * $Revision: 1.17 $\n- * $Date: 2002/05/08 23:19:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.18 2002/05/29 00:41:53 dmitri Exp $\n+ * $Revision: 1.18 $\n+ * $Date: 2002/05/29 00:41:53 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.ri.model.beans.CollectionPointerFactory;\n import org.apache.commons.jxpath.ri.model.beans.DynamicPointerFactory;\n import org.apache.commons.jxpath.ri.model.container.ContainerPointerFactory;\n-import org.apache.commons.jxpath.ri.model.dom.DOMPointerFactory;\n import org.apache.commons.jxpath.util.TypeUtils;\n \n /**\n  * The reference implementation of JXPathContext.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.17 $ $Date: 2002/05/08 23:19:31 $\n+ * @version $Revision: 1.18 $ $Date: 2002/05/29 00:41:53 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext\n {\n         nodeFactories.add(new CollectionPointerFactory());\n         nodeFactories.add(new BeanPointerFactory());\n         nodeFactories.add(new DynamicPointerFactory());\n-        nodeFactories.add(new DOMPointerFactory());\n+        Object domFactory = allocateConditionally(\n+                \"org.apache.commons.jxpath.ri.model.dom.DOMPointerFactory\",\n+                \"org.w3c.dom.Node\");\n+        if (domFactory != null){\n+            nodeFactories.add(domFactory);\n+        }\n         nodeFactories.add(new ContainerPointerFactory());\n         createNodeFactoryArray();\n     }\n         throw new JXPathException(\n             \"Undefined function: \" + functionName.toString());\n     }\n+\n+    /**\n+     * Checks if existenceCheckClass exists on the class path. If so,\n+     * allocates an instance of the specified class, otherwise\n+     * returns null.\n+     */\n+    public static Object allocateConditionally(\n+            String className,\n+            String existenceCheckClassName){\n+        try {\n+            try {\n+                Class.forName(existenceCheckClassName);\n+            }\n+            catch (ClassNotFoundException ex){\n+                return null;\n+            }\n+\n+            Class cls = Class.forName(className);\n+            return cls.newInstance();\n+        }\n+        catch (Exception ex){\n+            throw new JXPathException(\"Cannot allocate \" + className, ex);\n+        }\n+    }\n }", "timestamp": 1022632913, "metainfo": ""}