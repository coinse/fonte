{"sha": "1da214ffc187e6afda771b77baa71df054d3ee4d", "log": "More testing, fixes of error messages   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java,v 1.10 2002/11/28 01:02:04 dmitri Exp $\n- * $Revision: 1.10 $\n- * $Date: 2002/11/28 01:02:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java,v 1.11 2003/01/10 02:11:28 dmitri Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2003/01/10 02:11:28 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Transparent pointer to a collection (array or Collection).\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.10 $ $Date: 2002/11/28 01:02:04 $\n+ * @version $Revision: 1.11 $ $Date: 2003/01/10 02:11:28 $\n  */\n public class CollectionPointer extends NodePointer {\n     private Object collection;\n         }\n         if (index != WHOLE_COLLECTION) {\n             // Address the list[1][2] case\n-            if (parent != null && parent.isContainer() &&\n-                    parent.getIndex() != WHOLE_COLLECTION){\n+            if (parent != null && parent.getIndex() != WHOLE_COLLECTION){\n                 buffer.append(\"/.\");\n             }\n             buffer.append(\"[\").append(index + 1).append(']');\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java,v 1.11 2002/11/28 01:02:04 dmitri Exp $\n- * $Revision: 1.11 $\n- * $Date: 2002/11/28 01:02:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java,v 1.12 2003/01/10 02:11:28 dmitri Exp $\n+ * $Revision: 1.12 $\n+ * $Date: 2003/01/10 02:11:28 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * as the parent.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.11 $ $Date: 2002/11/28 01:02:04 $\n+ * @version $Revision: 1.12 $ $Date: 2003/01/10 02:11:28 $\n  */\n-public class NullElementPointer extends PropertyOwnerPointer {\n+public class NullElementPointer extends CollectionPointer {\n \n     public NullElementPointer(NodePointer parent, int index){\n-        super(parent);\n+        super(parent, (Object)null);\n         this.index = index;\n     }\n \n     }\n \n     public void setValue(Object value){\n-        super.setValue(value);\n-        if (parent instanceof PropertyPointer){\n-            parent.setValue(value);\n-        }\n-        else {\n-            throw new UnsupportedOperationException(\"Cannot setValue of an object that is not some other object's property\");\n-        }\n+        throw new UnsupportedOperationException(\n+            \"Collection element does not exist: \" + this);\n     }\n \n     public boolean isActual(){\n     }\n \n     public NodePointer createPath(JXPathContext context, Object value){\n-        if (parent instanceof PropertyPointer){\n-            return parent.getParent().createChild(context, parent.getName(), index, value);\n+        if (parent instanceof PropertyPointer) {\n+            return parent.getParent().createChild(\n+                context,\n+                parent.getName(),\n+                index,\n+                value);\n         }\n         else {\n             return parent.createChild(context, null, index, value);\n     }\n \n     public NodePointer createPath(JXPathContext context){\n-        if (parent instanceof PropertyPointer){\n-            return parent.getParent().createChild(context, parent.getName(), index);\n+        if (parent instanceof PropertyPointer) {\n+            return parent.getParent().createChild(\n+                context,\n+                parent.getName(),\n+                index);\n         }\n         else {\n             return parent.createChild(context, null, index);\n         }\n     }\n \n-    public NodePointer createChild(JXPathContext context, QName name, int index, Object value){\n-        if (index != 0 && index != WHOLE_COLLECTION){\n-            throw new JXPathException(\"Internal error. \" +\n-                \"Indexed passed to NullElementPointer.createChild() is not 0: \" + index);\n-        }\n-        if (parent instanceof PropertyPointer){\n-            return parent.getParent().createChild(context, parent.getName(), getIndex(), value);\n+    public NodePointer createChild(\n+        JXPathContext context,\n+        QName name,\n+        int index,\n+        Object value) \n+    {\n+        if (index != 0 && index != WHOLE_COLLECTION) {\n+            throw new JXPathException(\n+                \"Internal error. Indexed passed to \"\n+                    + \"NullElementPointer.createChild() is not 0: \"\n+                    + index);\n+        }\n+        if (parent instanceof PropertyPointer) {\n+            return parent.getParent().createChild(\n+                context,\n+                parent.getName(),\n+                getIndex(),\n+                value);\n         }\n         else {\n             return parent.createChild(context, name, getIndex(), value);\n         }\n     }\n \n-    public NodePointer createChild(JXPathContext context, QName name, int index){\n-        if (index != 0 && index != WHOLE_COLLECTION){\n-            throw new JXPathException(\"Internal error. \" +\n-                \"Indexed passed to NullElementPointer.createChild() is not 0: \" + index);\n-        }\n-        if (parent instanceof PropertyPointer){\n-            return parent.getParent().createChild(context, parent.getName(), getIndex());\n+    public NodePointer createChild(\n+        JXPathContext context,\n+        QName name,\n+        int index) \n+    {\n+        if (index != 0 && index != WHOLE_COLLECTION) {\n+            throw new JXPathException(\n+                \"Internal error. Indexed passed to \"\n+                    + \"NullElementPointer.createChild() is not 0: \"\n+                    + index);\n+        }\n+        if (parent instanceof PropertyPointer) {\n+            return parent.getParent().createChild(\n+                context,\n+                parent.getName(),\n+                getIndex());\n         }\n         else {\n             return parent.createChild(context, name, getIndex());\n             index == other.index;\n     }\n \n-    public String asPath(){\n-        return parent.asPath() + \"[\" + (index + 1) + \"]\";\n-    }\n-\n     public int getLength(){\n         return 0;\n     }\n+    \n+    public String asPath() {\n+        StringBuffer buffer = new StringBuffer();\n+        NodePointer parent = getParent();\n+        if (parent != null) {\n+            buffer.append(parent.asPath());\n+        }\n+        if (index != WHOLE_COLLECTION) {\n+            // Address the list[1][2] case\n+            if (parent != null && parent.getIndex() != WHOLE_COLLECTION) {\n+                buffer.append(\"/.\");\n+            }\n+            else if (\n+                parent != null\n+                    && parent.getParent() != null\n+                    && parent.getParent().getIndex() != WHOLE_COLLECTION) {\n+                buffer.append(\"/.\");\n+            }\n+            buffer.append(\"[\").append(index + 1).append(']');\n+        }\n+\n+        return buffer.toString();\n+    }    \n }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java,v 1.11 2002/11/28 01:02:04 dmitri Exp $\n- * $Revision: 1.11 $\n- * $Date: 2002/11/28 01:02:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java,v 1.12 2003/01/10 02:11:28 dmitri Exp $\n+ * $Revision: 1.12 $\n+ * $Date: 2003/01/10 02:11:28 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import java.util.Locale;\n \n import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.compiler.NodeNameTest;\n  * a collection.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.11 $ $Date: 2002/11/28 01:02:04 $\n+ * @version $Revision: 1.12 $ $Date: 2003/01/10 02:11:28 $\n  */\n public abstract class PropertyOwnerPointer extends NodePointer {\n \n             parent.setValue(value);\n         }\n         else if (parent != null){\n-            throw new UnsupportedOperationException(\n-                \"Cannot setValue of an object that is not \" +\n-                \"some other object's property\");\n+            if (index == WHOLE_COLLECTION){\n+                throw new UnsupportedOperationException(\n+                    \"Cannot setValue of an object that is not \" +\n+                    \"some other object's property\");\n+            }\n+            else {\n+                throw new JXPathException(\n+                    \"The specified collection element does not exist: \" + this);\n+            }\n         }\n         else {\n             throw new UnsupportedOperationException(\n--- a/src/test/org/apache/commons/jxpath/TestMixedModelBean.java\n+++ b/src/test/org/apache/commons/jxpath/TestMixedModelBean.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/TestMixedModelBean.java,v 1.1 2002/10/20 03:48:21 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/10/20 03:48:21 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/TestMixedModelBean.java,v 1.2 2003/01/10 02:11:28 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2003/01/10 02:11:28 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Mixed model test bean: Java, collections, map, DOM, Container.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2002/10/20 03:48:21 $\n+ * @version $Revision: 1.2 $ $Date: 2003/01/10 02:11:28 $\n  */\n public class TestMixedModelBean {\n     private String string;\n     private Map map;\n \n     private List list;\n+    private int[][] matrix;\n \n     public TestMixedModelBean(){\n         string = \"string\";\n         list.add(string);\n         list.add(bean);\n         list.add(map);\n-        list.add(Collections.singletonList(\"string2\"));\n+        list.add(new ArrayList(Collections.singletonList(\"string2\")));\n         list.add(document);\n         list.add(element);\n         list.add(container);\n+        \n+        matrix = new int[1][];\n+        matrix[0] = new int[1];\n+        matrix[0][0] = 3;\n     }\n \n     public String getString(){\n     public Container getContainer(){\n         return container;\n     }\n+    \n+    public int[][] getMatrix(){\n+        return matrix;\n+    }\n }\n--- a/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java,v 1.4 2002/11/29 07:22:01 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/11/29 07:22:01 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java,v 1.5 2003/01/10 02:11:29 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2003/01/10 02:11:29 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Abstract superclass for Bean access with JXPath.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/11/29 07:22:01 $\n+ * @version $Revision: 1.5 $ $Date: 2003/01/10 02:11:29 $\n  */\n \n public abstract class BeanModelTestCase extends JXPathTestCase\n \n     public void testBooleanPredicate(){\n         // use child axis\n+        \n+        // bean[1]/int = 1\n+        // bean[2]/int = 3\n+        \n         assertXPathValue(context,\n                 \"beans[int > 2]/name\",\n                 \"Name 2\");\n+\n+        assertXPathValueIterator(context,\n+                \"beans[int > 2]/name\",\n+                list(\"Name 2\"));\n+\n+        assertXPathValueIterator(context,\n+                \"beans[int >= 1]/name\",\n+                list(\"Name 1\", \"Name 2\"));\n+                \n+        assertXPathValueIterator(context,\n+                \"beans[int < 2]/name\",\n+                list(\"Name 1\"));\n+                \n+        assertXPathValueIterator(context,\n+                \"beans[int <= 3]/name\",\n+                list(\"Name 1\", \"Name 2\"));\n \n         assertXPathValueIterator(\n             context,\n--- a/src/test/org/apache/commons/jxpath/ri/model/MixedModelTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/MixedModelTest.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/MixedModelTest.java,v 1.2 2002/11/28 01:02:05 dmitri Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/11/28 01:02:05 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/MixedModelTest.java,v 1.3 2003/01/10 02:11:29 dmitri Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2003/01/10 02:11:29 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Tests JXPath with mixed model: beans, maps, DOM etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.2 $ $Date: 2002/11/28 01:02:05 $\n+ * @version $Revision: 1.3 $ $Date: 2003/01/10 02:11:29 $\n  */\n \n public class MixedModelTest extends JXPathTestCase\n         vars.declareVariable(\"document\", bean.getDocument());\n         vars.declareVariable(\"element\", bean.getElement());\n         vars.declareVariable(\"container\", bean.getContainer());\n+        vars.declareVariable(\"testnull\", new TestNull());\n         \n-        vars.declareVariable(\"testnull\", new TestNull());\n+        int[][] matrix = new int[1][];\n+        matrix[0] = new int[1];\n+        matrix[0][0] = 3;\n+        vars.declareVariable(\"matrix\", matrix);\n     }\n \n     public void testVarPrimitive(){\n             \"$e//error\",\n             Collections.EMPTY_LIST);\n     }\n+    \n+    public void testMatrix(){\n+        assertXPathValueAndPointer(context,\n+               \"$matrix[1]/.[1]\",\n+               new Integer(3),\n+               \"$matrix[1]/.[1]\");\n+                \n+        context.setValue(\"$matrix[1]/.[1]\", new Integer(2));\n+\n+        assertXPathValueAndPointer(context,\n+              \"matrix[1]/.[1]\",\n+              new Integer(3),\n+              \"/matrix[1]/.[1]\");\n+                \n+        context.setValue(\"matrix[1]/.[1]\", \"2\");\n+      \n+        assertXPathValue(context, \"matrix[1]/.[1]\", new Integer(2));\n+      \n+        context.getVariables().declareVariable(\n+            \"wholebean\",\n+            context.getContextBean());\n+            \n+        assertXPathValueAndPointer(context,\n+            \"$wholebean/matrix[1]/.[1]\",\n+            new Integer(2),\n+            \"$wholebean/matrix[1]/.[1]\");\n+\n+        boolean ex = false;\n+        try {\n+            context.setValue(\"$wholebean/matrix[1]/.[2]\", \"4\");\n+        }\n+        catch (Exception e){\n+            ex = true;\n+        }        \n+        assertTrue(\"Exception setting value of non-existent element\", ex);\n+        \n+        ex = false;\n+        try {\n+            context.setValue(\"$wholebean/matrix[2]/.[1]\", \"4\");\n+        }\n+        catch (Exception e){\n+            ex = true;\n+        }        \n+        assertTrue(\"Exception setting value of non-existent element\", ex);\n+    }\n }", "timestamp": 1042164689, "metainfo": ""}