{"sha": "dbd593dfa515f210517ebf3631b5ec8c36a242c1", "log": "Added prevention of infinite loop on descent into recursive graphs   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/axes/DescendantContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/DescendantContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/DescendantContext.java,v 1.12 2003/03/11 00:59:20 dmitri Exp $\n- * $Revision: 1.12 $\n- * $Date: 2003/03/11 00:59:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/DescendantContext.java,v 1.13 2003/05/04 23:53:19 dmitri Exp $\n+ * $Revision: 1.13 $\n+ * $Date: 2003/05/04 23:53:19 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n import java.util.Stack;\n \n+import org.apache.commons.jxpath.Pointer;\n import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.EvalContext;\n import org.apache.commons.jxpath.ri.compiler.NodeTest;\n  * axes.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.12 $ $Date: 2003/03/11 00:59:20 $\n+ * @version $Revision: 1.13 $ $Date: 2003/05/04 23:53:19 $\n  */\n public class DescendantContext extends EvalContext {\n     private NodeTest nodeTest;\n     private boolean includeSelf;\n     private static final NodeTest ELEMENT_NODE_TEST =\n             new NodeTypeTest(Compiler.NODE_TYPE_NODE);\n-\n+                        \n     public DescendantContext(\n             EvalContext parentContext,\n             boolean includeSelf,\n             NodeIterator it = (NodeIterator) stack.peek();\n             if (it.setPosition(it.getPosition() + 1)) {\n                 currentNodePointer = it.getNodePointer();\n-                if (!currentNodePointer.isLeaf()) {\n-                    stack.push(\n-                        currentNodePointer.childIterator(\n-                            ELEMENT_NODE_TEST,\n-                            false,\n-                            null));\n-                }\n-                if (currentNodePointer.testNode(nodeTest)) {\n-                    position++;\n-                    return true;\n+                if (!isRecursive()) {\n+                    if (!currentNodePointer.isLeaf()) {\n+                        stack.push(\n+                            currentNodePointer.childIterator(\n+                                ELEMENT_NODE_TEST,\n+                                false,\n+                                null));\n+                    }\n+                    if (currentNodePointer.testNode(nodeTest)) {\n+                        position++;\n+                        return true;\n+                    }\n                 }\n             }\n             else {\n         }\n         return false;\n     }\n+\n+    /**\n+     * Checks if we are reentering a bean we have already seen and if so\n+     * returns true to prevent infinite recursion.\n+     */\n+    private boolean isRecursive() {\n+        Object node = currentNodePointer.getNode();\n+        for (int i = stack.size() - 1; --i >= 0;) {\n+            NodeIterator it = (NodeIterator) stack.get(i);\n+            Pointer pointer = it.getNodePointer();\n+            if (pointer != null && pointer.getNode() == node) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n }\n--- a/src/test/org/apache/commons/jxpath/JXPathTestSuite.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestSuite.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestSuite.java,v 1.3 2003/01/20 00:00:26 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2003/01/20 00:00:26 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestSuite.java,v 1.4 2003/05/04 23:53:19 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2003/05/04 23:53:19 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import junit.textui.TestRunner;\n \n import org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest;\n+import org.apache.commons.jxpath.ri.axes.RecursiveAxesTest;\n import org.apache.commons.jxpath.ri.axes.SimplePathInterpreterTest;\n import org.apache.commons.jxpath.ri.compiler.ContextDependencyTest;\n import org.apache.commons.jxpath.ri.compiler.CoreFunctionTest;\n  * </p>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2003/01/20 00:00:26 $\n+ * @version $Revision: 1.4 $ $Date: 2003/05/04 23:53:19 $\n  */\n \n public class JXPathTestSuite extends TestCase {\n         suite.addTestSuite(JDOMModelTest.class);\n         suite.addTestSuite(MixedModelTest.class);\n         suite.addTestSuite(BasicTypeConverterTest.class);\n+        suite.addTestSuite(RecursiveAxesTest.class);\n         return suite;\n     }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/jxpath/ri/axes/RecursiveAxesTest.java\n+package org.apache.commons.jxpath.ri.axes;\n+\n+import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.JXPathTestCase;\n+\n+/**\n+ * Test for the protection mechanism that stops infinite recursion\n+ * in descent down a recursive graph. \n+ */\n+public class RecursiveAxesTest extends JXPathTestCase {\n+\n+    private RecursiveBean bean;\n+    private JXPathContext context;\n+\n+    public RecursiveAxesTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(RecursiveAxesTest.class);\n+    }\n+\n+    /**\n+     * @see TestCase#setUp()\n+     */\n+    protected void setUp() throws Exception {\n+        bean = new RecursiveBean(\"zero\");\n+        RecursiveBean bean1 = new RecursiveBean(\"one\");\n+        RecursiveBean bean2 = new RecursiveBean(\"two\");\n+        RecursiveBean bean3 = new RecursiveBean(\"three\");\n+        bean.setFirst(bean1);\n+        bean1.setFirst(bean2);\n+        bean2.setFirst(bean1);\n+        bean2.setSecond(bean3);\n+\n+        context = JXPathContext.newContext(null, bean);\n+    }\n+\n+    public void testInfiniteDescent() {\n+        // Existing scalar property\n+        assertXPathPointer(\n+            context,\n+            \"//.[name = 'three']\",\n+            \"/first/first/second\");\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/jxpath/ri/axes/RecursiveBean.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/axes/RecursiveBean.java,v 1.1 2003/05/04 23:53:19 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/05/04 23:53:19 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.jxpath.ri.axes;\n+\n+\n+/**\n+ * This bean is used to test infinite recursion protection in\n+ * descendant search contexts.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/05/04 23:53:19 $\n+ */\n+public class RecursiveBean  {\n+\n+    private String name;\n+    private RecursiveBean first;\n+    private RecursiveBean second;\n+\n+    public RecursiveBean(String name) {\n+        this.name = name;\n+    }\n+    \n+    public String getName() {\n+        return name;\n+    }\n+\n+    public RecursiveBean getFirst() {\n+        return first;\n+    }\n+\n+    public void setFirst(RecursiveBean bean) {\n+        this.first = bean;\n+    }\n+\n+    public RecursiveBean getSecond() {\n+        return second;\n+    }\n+\n+    public void setSecond(RecursiveBean bean) {\n+        second = bean;\n+    }\n+    \n+    public String toString() {\n+        return name;\n+    }\n+}", "timestamp": 1052092399, "metainfo": ""}