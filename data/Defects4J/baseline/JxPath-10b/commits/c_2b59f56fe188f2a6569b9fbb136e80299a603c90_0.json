{"sha": "2b59f56fe188f2a6569b9fbb136e80299a603c90", "log": "Added support for DynaBeans   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.22 2002/10/13 02:26:50 dmitri Exp $\n- * $Revision: 1.22 $\n- * $Date: 2002/10/13 02:26:50 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.23 2002/10/20 03:44:27 dmitri Exp $\n+ * $Revision: 1.23 $\n+ * $Date: 2002/10/20 03:44:27 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * The reference implementation of JXPathContext.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.22 $ $Date: 2002/10/13 02:26:50 $\n+ * @version $Revision: 1.23 $ $Date: 2002/10/20 03:44:27 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext\n {\n         nodeFactories.add(new BeanPointerFactory());\n         nodeFactories.add(new DynamicPointerFactory());\n \n+        // DOM  factory is only registered if DOM support is on the classpath\n         Object domFactory = allocateConditionally(\n                 \"org.apache.commons.jxpath.ri.model.dom.DOMPointerFactory\",\n                 \"org.w3c.dom.Node\");\n             nodeFactories.add(domFactory);\n         }\n \n+        // JDOM  factory is only registered if JDOM is on the classpath\n         Object jdomFactory = allocateConditionally(\n                 \"org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory\",\n                 \"org.jdom.Document\");\n             nodeFactories.add(jdomFactory);\n         }\n \n+        // DynaBean factory is only registered if BeanUtils are on the classpath\n+        Object dynaBeanFactory = allocateConditionally(\n+                \"org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointerFactory\",\n+                \"org.apache.commons.beanutils.DynaBean\");\n+        if (dynaBeanFactory != null){\n+            nodeFactories.add(dynaBeanFactory);\n+        }\n+\n         nodeFactories.add(new ContainerPointerFactory());\n         createNodeFactoryArray();\n     }\n+\n     private NodePointer rootPointer;\n \n     // The frequency of the cache cleanup\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointer.java,v 1.1 2002/10/20 03:44:18 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/10/20 03:44:18 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.model.dynabeans;\n+\n+import java.beans.PropertyDescriptor;\n+import java.util.Locale;\n+\n+import org.apache.commons.beanutils.DynaBean;\n+import org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer;\n+import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;\n+import org.apache.commons.jxpath.JXPathIntrospector;\n+import org.apache.commons.jxpath.ri.QName;\n+import org.apache.commons.jxpath.ri.model.NodePointer;\n+import org.apache.commons.jxpath.util.ValueUtils;\n+\n+\n+/**\n+ * A Pointer that points to a DynaBean.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2002/10/20 03:44:18 $\n+ */\n+public class DynaBeanPointer extends PropertyOwnerPointer {\n+    private QName name;\n+    private DynaBean dynaBean;\n+\n+    public DynaBeanPointer(QName name, DynaBean dynaBean, Locale locale)\n+    {\n+        super(null, locale);\n+        this.name = name;\n+        this.dynaBean = dynaBean;\n+    }\n+\n+    /**\n+     * @param name is the name given to the first node\n+     */\n+    public DynaBeanPointer(NodePointer parent, QName name, DynaBean dynaBean) {\n+        super(parent);\n+        this.name = name;\n+        this.dynaBean = dynaBean;\n+    }\n+\n+    public PropertyPointer getPropertyPointer(){\n+        return new DynaBeanPropertyPointer(this, dynaBean);\n+    }\n+\n+    public QName getName(){\n+        return name;\n+    }\n+\n+    /**\n+     * Returns the bean itself\n+     */\n+    public Object getBaseValue(){\n+        return dynaBean;\n+    }\n+\n+    public Object getNode(){\n+        return dynaBean;\n+    }\n+\n+    public boolean isCollection(){\n+        return false;\n+    }\n+\n+    /**\n+     * Returns 1.\n+     */\n+    public int getLength(){\n+        return 1;\n+    }\n+\n+    public boolean isLeaf() {\n+        return false;\n+    }\n+\n+    public int hashCode(){\n+        return name == null ? 0 : name.hashCode();\n+    }\n+\n+    public boolean equals(Object object){\n+        if (object == this){\n+            return true;\n+        }\n+\n+        if (!(object instanceof DynaBeanPointer)){\n+            return false;\n+        }\n+\n+        DynaBeanPointer other = (DynaBeanPointer)object;\n+        if (parent != other.parent){\n+            if (parent == null || !parent.equals(other.parent)){\n+                return false;\n+            }\n+        }\n+\n+        if ((name == null && other.name != null) ||\n+                (name != null && !name.equals(other.name))){\n+            return false;\n+        }\n+\n+        int i_this = (index == WHOLE_COLLECTION ? 0 : index);\n+        int i_other = (other.index == WHOLE_COLLECTION ? 0 : other.index);\n+        if (i_this != i_other){\n+            return false;\n+        }\n+\n+        return dynaBean == other.dynaBean;\n+    }\n+\n+    /**\n+     * If there's a parent - parent's path, otherwise \"/\".\n+     */\n+    public String asPath(){\n+        if (parent != null){\n+            return super.asPath();\n+        }\n+        return \"/\";\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointerFactory.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointerFactory.java,v 1.1 2002/10/20 03:44:18 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/10/20 03:44:18 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.model.dynabeans;\n+\n+import java.util.Locale;\n+\n+import org.apache.commons.beanutils.DynaBean;\n+import org.apache.commons.beanutils.DynaClass;\n+import org.apache.commons.jxpath.ri.QName;\n+import org.apache.commons.jxpath.ri.model.NodePointer;\n+import org.apache.commons.jxpath.ri.model.NodePointerFactory;\n+\n+/**\n+ * Implements NodePointerFactory for DynaBeans.\n+ * See <a href=\"http://jakarta.apache.org/commons/beanutils.html\">\n+ * Jakarta Commons BeanUtils\n+ * </a>\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2002/10/20 03:44:18 $\n+ */\n+public class DynaBeanPointerFactory implements NodePointerFactory {\n+\n+    public static final int DYNA_BEAN_POINTER_FACTORY_ORDER = 700;\n+\n+    public int getOrder(){\n+        return DYNA_BEAN_POINTER_FACTORY_ORDER;\n+    }\n+\n+    public NodePointer createNodePointer(\n+            QName name, Object bean, Locale locale)\n+    {\n+        if (bean instanceof DynaBean){\n+            return new DynaBeanPointer(name, (DynaBean)bean, locale);\n+        }\n+        return null;\n+    }\n+\n+    public NodePointer createNodePointer(\n+            NodePointer parent, QName name, Object bean)\n+    {\n+        if (bean instanceof DynaBean){\n+            return new DynaBeanPointer(parent, name, (DynaBean)bean);\n+        }\n+        return null;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java,v 1.1 2002/10/20 03:44:18 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/10/20 03:44:18 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.model.dynabeans;\n+\n+import java.util.Arrays;\n+\n+import org.apache.commons.beanutils.DynaBean;\n+import org.apache.commons.beanutils.DynaClass;\n+import org.apache.commons.beanutils.DynaProperty;\n+import org.apache.commons.jxpath.AbstractFactory;\n+import org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer;\n+import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.JXPathException;\n+import org.apache.commons.jxpath.JXPathIntrospector;\n+import org.apache.commons.jxpath.ri.QName;\n+import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;\n+import org.apache.commons.jxpath.ri.model.NodePointer;\n+import org.apache.commons.jxpath.util.TypeConverter;\n+import org.apache.commons.jxpath.util.TypeUtils;\n+import org.apache.commons.jxpath.util.ValueUtils;\n+\n+/**\n+ * Pointer pointing to a property of a DynaBean.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2002/10/20 03:44:18 $\n+ */\n+public class DynaBeanPropertyPointer extends PropertyPointer {\n+    private DynaBean dynaBean;\n+    private String name;\n+    private String[] names;\n+\n+    public DynaBeanPropertyPointer(NodePointer parent, DynaBean dynaBean){\n+        super(parent);\n+        this.dynaBean = dynaBean;\n+    }\n+\n+    public Object getBaseValue(){\n+        return dynaBean.get(getPropertyName());\n+    }\n+\n+    /**\n+     * This type of node is auxiliary.\n+     */\n+    public boolean isNode(){\n+        return false;\n+    }\n+\n+    /**\n+     * Number of the DP object's properties.\n+     */\n+    public int getPropertyCount(){\n+        return getPropertyNames().length;\n+    }\n+\n+    /**\n+     * Names of all properties, sorted alphabetically\n+     *\n+     * @todo do something about the sorting\n+     */\n+    public String[] getPropertyNames(){\n+        if (names == null){\n+            DynaClass dynaClass = dynaBean.getDynaClass();\n+            DynaProperty properties[] = dynaClass.getDynaProperties();\n+            int count = properties.length;\n+            boolean hasClass = dynaClass.getDynaProperty(\"class\") != null;\n+            if (hasClass){\n+                count --;       // Exclude \"class\" from properties\n+            }\n+            names = new String[count];\n+            for (int i = 0, j = 0; i < properties.length; i++){\n+                String name = properties[i].getName();\n+                if (!hasClass || !name.equals(\"class\")){\n+                    names[j++] = name;\n+                }\n+            }\n+            Arrays.sort(names);\n+//            System.err.println(\"D.PROPERTIES: \" + Arrays.asList(names));\n+        }\n+        return names;\n+    }\n+\n+    /**\n+     * Returns the name of the currently selected property or \"*\"\n+     * if none has been selected.\n+     */\n+    public String getPropertyName(){\n+        if (name == null){\n+            String names[] = getPropertyNames();\n+            if (propertyIndex >=0 && propertyIndex < names.length){\n+                name = names[propertyIndex];\n+            }\n+            else {\n+                name = \"*\";\n+            }\n+        }\n+        return name;\n+    }\n+\n+    /**\n+     * Select a property by name.\n+     */\n+    public void setPropertyName(String propertyName){\n+        setPropertyIndex(UNSPECIFIED_PROPERTY);\n+        this.name = propertyName;\n+    }\n+\n+    /**\n+     * Index of the currently selected property in the list of all\n+     * properties sorted alphabetically.\n+     */\n+    public int getPropertyIndex(){\n+        if (propertyIndex == UNSPECIFIED_PROPERTY){\n+            String names[] = getPropertyNames();\n+            for (int i = 0; i < names.length; i++){\n+                if (names[i].equals(name)){\n+                    setPropertyIndex(i);\n+                    break;\n+                }\n+            }\n+        }\n+        return super.getPropertyIndex();\n+    }\n+\n+    /**\n+     * Index a property by its index in the list of all\n+     * properties sorted alphabetically.\n+     */\n+    public void setPropertyIndex(int index){\n+        if (propertyIndex != index){\n+            super.setPropertyIndex(index);\n+            name = null;\n+        }\n+    }\n+\n+    /**\n+     * If index == WHOLE_COLLECTION, the value of the property, otherwise\n+     * the value of the index'th element of the collection represented by the\n+     * property. If the property is not a collection, index should be zero\n+     * and the value will be the property itself.\n+     */\n+    public Object getNode(){\n+        String name = getPropertyName();\n+        if (name.equals(\"*\")){\n+            return null;\n+        }\n+\n+        Object value;\n+        if (index == WHOLE_COLLECTION){\n+            value = dynaBean.get(name);\n+        }\n+        else if (isIndexedProperty()){\n+            // DynaClass at this point is not based on whether\n+            // the property is indeed indexed, but rather on\n+            // whether it is an array or List. Therefore\n+            // the indexed set may fail.\n+            try {\n+                value = dynaBean.get(name, index);\n+            }\n+            catch (ArrayIndexOutOfBoundsException ex){\n+                value = null;\n+            }\n+            catch (IllegalArgumentException ex){\n+                value = dynaBean.get(name);\n+                value = ValueUtils.getValue(value, index);\n+            }\n+        }\n+        else {\n+            value = dynaBean.get(name);\n+            if (ValueUtils.isCollection(value)){\n+                value = ValueUtils.getValue(value, index);\n+            }\n+            else if (index != 0){\n+                value = null;\n+            }\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Returns true if the bean has the currently selected property\n+     */\n+    protected boolean isActualProperty(){\n+        DynaClass dynaClass = dynaBean.getDynaClass();\n+        return dynaClass.getDynaProperty(getPropertyName()) != null;\n+    }\n+\n+    protected boolean isIndexedProperty(){\n+        DynaClass dynaClass = dynaBean.getDynaClass();\n+        DynaProperty property = dynaClass.getDynaProperty(name);\n+        return property.isIndexed();\n+    }\n+\n+    /**\n+     * If index == WHOLE_COLLECTION, change the value of the property, otherwise\n+     * change the value of the index'th element of the collection\n+     * represented by the property.\n+     */\n+    public void setValue(Object value){\n+        setValue(index, value);\n+    }\n+\n+    public NodePointer createPath(JXPathContext context, Object value){\n+        return createChild(context, getName(), index, value);\n+    }\n+\n+    public NodePointer createChild(JXPathContext context,\n+            QName name, int index, Object value)\n+    {\n+        // Ignore the name passed to us, use our own data\n+        if (index == WHOLE_COLLECTION){\n+            setValue(index, value);\n+        }\n+        else if (isIndexedProperty()){\n+            dynaBean.set(getPropertyName(), index, convert(value, true));\n+        }\n+        else {\n+            Object collection = getBaseValue();\n+            if (collection == null){\n+                AbstractFactory factory = getAbstractFactory(context);\n+                if (!factory.createObject(\n+                        context, this, getBean(), getPropertyName(), 0)){\n+                    throw new JXPathException(\n+                        \"Factory could not create an object for path: \" +\n+                        asPath());\n+                }\n+                collection = getBaseValue();\n+            }\n+\n+            if (index < 0){\n+                throw new JXPathException(\"Index is less than 1: \" + asPath());\n+            }\n+\n+            if (index >= getLength()){\n+                collection = ValueUtils.expandCollection(collection, index + 1);\n+                dynaBean.set(getPropertyName(), collection);\n+            }\n+\n+            ValueUtils.setValue(collection, index, value);\n+        }\n+        NodePointer ptr = (NodePointer)clone();\n+        ptr.setIndex(index);\n+        return ptr;\n+    }\n+\n+    public NodePointer createChild(JXPathContext context,\n+            QName name, int index)\n+    {\n+        if (isIndexedProperty()){\n+            AbstractFactory factory = getAbstractFactory(context);\n+            if (!factory.createObject(\n+                        context, this, dynaBean, getPropertyName(), index)){\n+                throw new JXPathException(\n+                    \"Factory could not create an object for path: \" + asPath());\n+            }\n+        }\n+        else {\n+            // Ignore the name passed to us, use our own data\n+            Object collection = getBaseValue();\n+            if (collection == null){\n+                AbstractFactory factory = getAbstractFactory(context);\n+                if (!factory.createObject(\n+                            context, this, dynaBean, getPropertyName(), index)){\n+                    throw new JXPathException(\n+                        \"Factory could not create an object for path: \" +\n+                        asPath());\n+                }\n+                collection = getBaseValue();\n+            }\n+\n+            if (index < 0){\n+                throw new JXPathException(\"Index is less than 1: \" + asPath());\n+            }\n+\n+            if (index >= getLength()){\n+                collection = ValueUtils.expandCollection(collection, index + 1);\n+                dynaBean.set(getPropertyName(), collection);\n+            }\n+        }\n+\n+        DynaBeanPropertyPointer pointer = (DynaBeanPropertyPointer)this.clone();\n+        pointer.setIndex(index);\n+        return pointer;\n+    }\n+\n+    public NodePointer createPath(JXPathContext context){\n+        if (getNode() == null){\n+            AbstractFactory factory = getAbstractFactory(context);\n+            int inx = (index == WHOLE_COLLECTION ? 0 : index);\n+            if (!factory.createObject(\n+                    context, this, dynaBean, getPropertyName(), inx)){\n+                throw new JXPathException(\n+                        \"Factory could not create an object for path: \" +\n+                        asPath());\n+            }\n+        }\n+        return this;\n+    }\n+\n+    public void remove(){\n+        if (index == WHOLE_COLLECTION){\n+            dynaBean.set(getPropertyName(), null);\n+        }\n+        else if (isIndexedProperty()){\n+            dynaBean.set(getPropertyName(), index, null);\n+        }\n+        else if (isCollection()){\n+            Object collection = ValueUtils.remove(getBaseValue(), index);\n+            dynaBean.set(getPropertyName(), collection);\n+        }\n+        else if (index == 0){\n+            dynaBean.set(getPropertyName(), null);\n+        }\n+    }\n+\n+    private AbstractFactory getAbstractFactory(JXPathContext context){\n+        AbstractFactory factory = context.getFactory();\n+        if (factory == null){\n+            throw new JXPathException(\"Factory is not set on the JXPathContext - cannot create path: \" + asPath());\n+        }\n+        return factory;\n+    }\n+\n+    private void setValue(int index, Object value){\n+        if (index == WHOLE_COLLECTION){\n+            dynaBean.set(getPropertyName(), convert(value, false));\n+        }\n+        else if (isIndexedProperty()){\n+            dynaBean.set(getPropertyName(), index, convert(value, true));\n+        }\n+        else {\n+            Object baseValue = dynaBean.get(getPropertyName());\n+            ValueUtils.setValue(baseValue, index, value);\n+        }\n+   }\n+\n+\n+    private Object convert(Object value, boolean element){\n+        DynaClass dynaClass = (DynaClass)dynaBean.getDynaClass();\n+        DynaProperty property =\n+                dynaClass.getDynaProperty(getPropertyName());\n+        Class type = property.getType();\n+        if (element){\n+            if (type.isArray()){\n+                type = type.getComponentType();\n+            }\n+            else {\n+                return value;       // No need to convert\n+            }\n+        }\n+\n+        try {\n+            return TypeUtils.convert(value, type);\n+        }\n+        catch (Exception ex){\n+            ex.printStackTrace();\n+            throw new JXPathException(\"Cannot convert value of class \" +\n+                    (value == null ? \"null\" : value.getClass().getName()) +\n+                    \" to type \" + type, ex);\n+        }\n+    }\n+}", "timestamp": 1035085467, "metainfo": ""}