{"sha": "bdbe018e7dea67afe7f52643c88a76e7cc8c74d6", "log": "Added testing for JDOM support, broke out DOM testing too   ", "commit": "\n--- a/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.26 2002/08/10 01:50:38 dmitri Exp $\n- * $Revision: 1.26 $\n- * $Date: 2002/08/10 01:50:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.27 2002/08/26 22:33:10 dmitri Exp $\n+ * $Revision: 1.27 $\n+ * $Date: 2002/08/26 22:33:10 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * </p>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.26 $ $Date: 2002/08/10 01:50:38 $\n+ * @version $Revision: 1.27 $ $Date: 2002/08/26 22:33:10 $\n  */\n \n public class JXPathTestCase extends TestCase\n         // Variables\n         test(\"$a\", new Double(1)),\n         testPath(\"$a\", \"$a\"),\n+\n         test(\"$a = $b\", Boolean.TRUE),\n         test(\"$a = $test\", Boolean.FALSE),\n \n         }\n         System.setProperty(JXPathContextFactory.FACTORY_NAME_PROPERTY,\n                 \"org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl\");\n-        DocumentContainer docCtr = new DocumentContainer(getClass().getResource(\"Vendor.xml\"));\n+        DocumentContainer docCtr = new DocumentContainer(\n+                getClass().getResource(\"Vendor.xml\"),\n+                DocumentContainer.MODEL_DOM);\n         Document doc = (Document)docCtr.getValue();\n         JXPathContext ctx = JXPathContextFactory.newInstance().newContext(null, doc);\n         ctx.setLocale(Locale.US);\n         ctx.getVariables().declareVariable(\"test\", tbwdom);\n         testXPaths(ctx, dom_tests, false);\n     }\n-/*\n-    public void testJDOM() throws Exception {\n-        if (true){\n-            return;\n-        }\n+\n+    private TestBeanWithNode createTestBeanWithDOM(){\n         DocumentContainer docCtr =\n             new DocumentContainer(getClass().getResource(\"Vendor.xml\"),\n-                DocumentContainer.MODEL_JDOM);\n-        org.jdom.Document doc = (org.jdom.Document)docCtr.getValue();\n-        JXPathContext ctx = JXPathContextFactory.newInstance().newContext(null, doc);\n-        ctx.setLocale(Locale.US);\n-        ctx.getVariables().declareVariable(\"dom\", doc);\n-        ctx.getVariables().declareVariable(\"object\", docCtr);\n-        ctx.getVariables().declareVariable(\"null\", null);\n-        TestBeanWithNode tbwdom = createTestBeanWithDOM();\n-        ctx.getVariables().declareVariable(\"test\", tbwdom);\n-        testXPaths(ctx, dom_tests, false);\n-    }\n-*/\n-    private TestBeanWithNode createTestBeanWithDOM(){\n-        DocumentContainer docCtr = new DocumentContainer(getClass().getResource(\"Vendor.xml\"));\n+            DocumentContainer.MODEL_DOM);\n         Document doc = (Document)docCtr.getValue();\n         TestBeanWithNode tbwdom = new TestBeanWithNode();\n         tbwdom.setVendor(doc.getDocumentElement());\n         tbwdom.setObject(docCtr);\n         return tbwdom;\n     }\n-/*\n-    private TestBeanWithNode createTestBeanWithJDOM(){\n-        DocumentContainer docCtr = new DocumentContainer(\n-            getClass().getResource(\"Vendor.xml\"),\n-            DocumentContainer.MODEL_JDOM);\n-        org.jdom.Document doc = (org.jdom.Document)docCtr.getValue();\n-        TestBeanWithNode tbwdom = new TestBeanWithNode();\n-        tbwdom.setVendor(doc.getRootElement());\n-        tbwdom.setObject(docCtr);\n-        return tbwdom;\n-    }\n-*/\n+\n     static final XP[] dom_tests = new XP[]{\n         test(\"vendor/location/address/street\", \"Orchard Road\"),\n         test(\"vendor/location[2]/address/street\", \"Tangerine Drive\"),\n         testLenient(\"//price:sale/self::x/saleEnds\", null),\n \n         test(\"//product/comment()\", \"We are not buying this product, ever\"),\n-        test(\"//product/text()[. != '']\", \"We love this product.\"),\n+        //  This test was incorrect\n+        //  test(\"//product/text()[. != '']\", \"We love this product.\"),\n         testPath(\"//product/text()\", \"/vendor[1]/product[1]/text()[1]\"),\n         test(\"//product/processing-instruction()\", \"do not show anybody\"),\n         test(\"//product/processing-instruction('report')\", \"average only\"),\n         testEval(\"vendor/contact/following::location//street\",\n             list(\"Orchard Road\", \"Tangerine Drive\")),\n \n-        test(\"id('101')//street\", \"Tangerine Drive\"),\n-        testPath(\"id('101')//street\", \"id('101')/address[1]/street[1]\"),\n+//        test(\"id('101')//street\", \"Tangerine Drive\"),\n+//        testPath(\"id('101')//street\", \"id('101')/address[1]/street[1]\"),\n    };\n \n     public void testTypeConversions(){\n--- a/src/test/org/apache/commons/jxpath/TestFactory.java\n+++ b/src/test/org/apache/commons/jxpath/TestFactory.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/Attic/TestFactory.java,v 1.4 2002/08/10 01:50:39 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/10 01:50:39 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/Attic/TestFactory.java,v 1.5 2002/08/26 22:33:10 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/26 22:33:10 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n package org.apache.commons.jxpath;\n \n import java.util.*;\n-import org.w3c.dom.*;\n+import org.w3c.dom.Node;\n+import org.jdom.*;\n \n /**\n  * Test AbstractFactory.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/08/10 01:50:39 $\n+ * @version $Revision: 1.5 $ $Date: 2002/08/26 22:33:10 $\n  */\n public class TestFactory extends AbstractFactory {\n \n             return true;\n         }\n         else if (name.equals(\"location\") || name.equals(\"address\") || name.equals(\"street\")){\n-            addElement((Node)parent, index, name);\n+            if (parent instanceof Node){        // That's DOM\n+                addDOMElement((Node)parent, index, name);\n+            }\n+            else {                              // Assume JDOM\n+                addJDOMElement((Element)parent, index, name);\n+            }\n             return true;\n         }\n         else if (name.startsWith(\"testKey\")){\n         return false;\n     }\n \n-    private void addElement(Node parent, int index, String tag){\n+    private void addDOMElement(Node parent, int index, String tag){\n         Node child = parent.getFirstChild();\n         int count = 0;\n         while (child != null){\n         while (count <= index){\n             Node newElement = parent.getOwnerDocument().createElement(tag);\n             parent.appendChild(newElement);\n+            count++;\n+        }\n+    }\n+\n+    private void addJDOMElement(Element parent, int index, String tag){\n+        List children = parent.getContent();\n+        int count = 0;\n+        for (int i = 0; i < children.size(); i++){\n+            Object child = children.get(i);\n+            if (child instanceof Element &&\n+                    ((Element)child).getQualifiedName().equals(tag)){\n+                count++;\n+            }\n+        }\n+\n+        // Keep inserting new elements until we have index + 1 of them\n+        while (count <= index){\n+            // In a real factory we would need to do the right thing with\n+            // the namespace prefix.\n+            Element newElement = new Element(tag);\n+            parent.addContent(newElement);\n             count++;\n         }\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/jxpath/ri/model/XMLModelTest.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/Attic/XMLModelTest.java,v 1.1 2002/08/26 22:33:09 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/26 22:33:09 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.jxpath.ri.model;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.w3c.dom.*;\n+import java.util.*;\n+import java.lang.reflect.*;\n+import org.apache.commons.jxpath.*;\n+import org.apache.commons.jxpath.util.*;\n+import org.apache.commons.jxpath.ri.*;\n+import org.apache.commons.jxpath.ri.parser.*;\n+import org.apache.commons.jxpath.ri.model.*;\n+import org.apache.commons.jxpath.ri.model.beans.*;\n+import org.apache.commons.jxpath.ri.axes.*;\n+import org.apache.commons.jxpath.ri.compiler.*;\n+import org.apache.commons.jxpath.ri.compiler.Expression;\n+import org.apache.commons.jxpath.xml.*;\n+import java.beans.*;\n+\n+/**\n+ * Abstract superclass for pure XPath 1.0.  Subclasses\n+ * apply the same XPaths to contexts using different models:\n+ * DOM, JDOM etc.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2002/08/26 22:33:09 $\n+ */\n+\n+public abstract class XMLModelTest extends TestCase\n+{\n+    private boolean enabled = true;\n+\n+    /**\n+     * Construct a new instance of this test case.\n+     *\n+     * @param name Name of the test case\n+     */\n+    public XMLModelTest(String name)\n+    {\n+        super(name);\n+    }\n+\n+\n+    protected abstract String getModel();\n+\n+    protected DocumentContainer createDocumentContainer(){\n+        return new DocumentContainer(\n+                getClass().getClassLoader().\n+                        getResource(\"org/apache/commons/jxpath/Vendor.xml\"),\n+                getModel());\n+    }\n+\n+    protected JXPathContext createContext(){\n+        JXPathContext context =\n+                JXPathContext.newContext(createDocumentContainer());\n+        context.setFactory(new TestFactory());\n+        return context;\n+    }\n+\n+    // ------------------------------------------------ Individual Test Methods\n+\n+    public void testDocumentOrder(){\n+        if (!enabled){\n+            return;\n+        }\n+\n+        JXPathContext context = createContext();\n+        testDocumentOrder(context, \"vendor/location\", \"vendor/location/address/street\", -1);\n+        testDocumentOrder(context, \"vendor/location[@id = '100']\", \"vendor/location[@id = '101']\", -1);\n+        testDocumentOrder(context, \"vendor//price:amount\", \"vendor/location\", 1);\n+    }\n+\n+    private void testDocumentOrder(JXPathContext context, String path1, String path2, int expected){\n+        NodePointer np1 = (NodePointer)context.getPointer(path1);\n+        NodePointer np2 = (NodePointer)context.getPointer(path2);\n+        try {\n+            int res = np1.compareTo(np2);\n+            if (res < 0){\n+                res = -1;\n+            }\n+            else if (res > 0){\n+                res = 1;\n+            }\n+            assertEquals(\"Comparing paths '\" + path1 + \"' and '\" + path2 + \"'\", expected, res);\n+        }\n+        catch (Exception ex){\n+            System.err.println(\"Comparing paths '\" + path1 + \"' and '\" + path2 + \"'\");\n+            ex.printStackTrace();\n+        }\n+    }\n+\n+    /**\n+     * Test JXPathContext.createPath() with various arguments\n+     */\n+    public void testCreatePath(){\n+        if (!enabled){\n+            return;\n+        }\n+\n+        JXPathContext context = createContext();\n+\n+        // Create a DOM element\n+        testCreatePath(context, \"/vendor[1]/location[3]\", \"\");\n+\n+        // Create a DOM element with contents\n+        testCreatePath(context, \"/vendor[1]/location[3]/address/street\", \"\",\n+                \"/vendor[1]/location[3]/address[1]/street[1]\");\n+\n+    }\n+\n+    private void testCreatePath(JXPathContext context, String path, Object value){\n+        testCreatePath(context, path, value, path);\n+    }\n+\n+    private void testCreatePath(JXPathContext context, String path,\n+                Object value, String expectedPath){\n+        Pointer ptr = null;\n+        try {\n+            ptr = context.createPath(path);\n+        }\n+        catch(JXPathException ex){\n+            ex.getException().printStackTrace();\n+        }\n+\n+        assertEquals(\"Pointer <\" + path + \">\", expectedPath, ptr.asPath());\n+        assertEquals(\"Created <\" + path + \">\", value, ptr.getValue());\n+    }\n+\n+\n+    /**\n+     * Test JXPath.createPathAndSetValue() with various arguments\n+     */\n+    public void testCreatePathAndSetValue(){\n+        if (!enabled){\n+            return;\n+        }\n+        JXPathContext context = createContext();\n+\n+        // Create a XML element\n+        testCreatePathAndSetValue(context, \"vendor/location[3]\", \"\");\n+\n+        // Create a DOM element with contents\n+        testCreatePathAndSetValue(context, \"vendor/location[3]/address/street\", \"Lemon Circle\");\n+    }\n+\n+    private void testCreatePathAndSetValue(JXPathContext context, String path, Object value){\n+        Pointer ptr = context.createPathAndSetValue(path, value);\n+        assertTrue(\"Pointer <\" + path + \">\", ptr != null);\n+        assertEquals(\"Created <\" + path + \">\", value, context.getValue(path));\n+        assertEquals(\"Pointer value <\" + path + \">\", value, ptr.getValue());\n+    }\n+\n+    /**\n+     * Test JXPathContext.removePath() with various arguments\n+     */\n+    public void testRemovePath(){\n+        if (!enabled){\n+            return;\n+        }\n+        JXPathContext context = createContext();\n+\n+        // Remove XML nodes\n+        context.removePath(\"vendor/location[@id = '101']//street/text()\");\n+        assertEquals(\"Remove DOM text\", \"\",\n+                    context.getValue(\"vendor/location[@id = '101']//street\"));\n+\n+        context.removePath(\"vendor/location[@id = '101']//street\");\n+        assertEquals(\"Remove DOM element\", new Double(0),\n+                    context.getValue(\"count(vendor/location[@id = '101']//street)\"));\n+\n+        context.removePath(\"vendor/location[@id = '100']/@name\");\n+        assertEquals(\"Remove DOM attribute\", new Double(0),\n+                    context.getValue(\"count(vendor/location[@id = '100']/@name)\"));\n+    }\n+\n+    public void testID(){\n+        if (!enabled){\n+            return;\n+        }\n+        JXPathContext context = createContext();\n+        context.setIdentityManager(new IdentityManager(){\n+            public Pointer getPointerByID(JXPathContext context, String id){\n+                NodePointer ptr = (NodePointer)context.getPointer(\"/\");\n+                ptr = ptr.getValuePointer();        // Unwrap the container\n+                return ptr.getPointerByID(context, id);\n+            }\n+        });\n+        context.setKeyManager(new KeyManager(){\n+            public Pointer getPointerByKey(JXPathContext context,\n+                                            String key, String value){\n+                return NodePointer.newNodePointer(null, \"42\", null);\n+            }\n+        });\n+        assertEquals(\"Test ID\", \"Tangerine Drive\",\n+            context.getValue(\"id(101)//street\"));\n+        assertEquals(\"Test ID Path\", \"id('101')/address[1]/street[1]\",\n+            context.getPointer(\"id(101)//street\").asPath());\n+\n+        context.setLenient(true);\n+        assertEquals(\"Test ID Path Null\", \"id(105)/address/street\",\n+            context.getPointer(\"id(105)/address/street\").asPath());\n+    }\n+\n+    public void testModel() throws Exception {\n+        if (!enabled){\n+            return;\n+        }\n+\n+        DocumentContainer docCtr = createDocumentContainer();\n+        JXPathContext context = createContext();\n+        context.getVariables().declareVariable(\"document\", docCtr.getValue());\n+        context.getVariables().declareVariable(\"container\", docCtr);\n+        testXPaths(context, dom_tests, false);\n+    }\n+\n+    private void testXPaths(JXPathContext ctx, XP xpath_tests[], boolean ignorePath) throws Exception{\n+        Exception exception = null;\n+        for  (int i=0; i < xpath_tests.length; i++) {\n+            try {\n+                Object actual;\n+                // System.err.println(\"XPATH: \" + xpath_tests[i].xpath);\n+                if (xpath_tests[i].path){\n+                    if (ignorePath){\n+                        actual = xpath_tests[i].expected;\n+                    }\n+                    else {\n+                        if (xpath_tests[i].eval){\n+                            Iterator it = ctx.iteratePointers(xpath_tests[i].xpath);\n+                            List paths = new ArrayList();\n+                            while (it.hasNext()){\n+                                paths.add(((Pointer)it.next()).asPath());\n+                            }\n+                            actual = paths;\n+                        }\n+                        else {\n+                            ctx.setLenient(xpath_tests[i].lenient);\n+                            actual = ctx.getPointer(xpath_tests[i].xpath).asPath();\n+                        }\n+                    }\n+                }\n+                else {\n+                    if (xpath_tests[i].eval){\n+                        ArrayList list = new ArrayList();\n+                        Iterator it = ctx.iterate(xpath_tests[i].xpath);\n+                        while (it.hasNext()){\n+                            list.add(it.next());\n+                        }\n+                        actual = list;\n+                    }\n+                    else {\n+                        ctx.setLenient(xpath_tests[i].lenient);\n+                        actual = ctx.getValue(xpath_tests[i].xpath);\n+                        ctx.setLenient(false);\n+                    }\n+                }\n+                assertEquals(\"Evaluating <\" + xpath_tests[i].xpath + \">\", xpath_tests[i].expected, actual);\n+            }\n+            catch (Exception ex){\n+                System.err.println(\"Exception during <\" + xpath_tests[i].xpath + \">\");\n+                ex.printStackTrace();\n+                exception = ex;\n+            }\n+            if (exception != null){\n+                throw exception;\n+            }\n+        }\n+\n+        // Make sure that location paths are properly constructed\n+        for (int i=0; i < xpath_tests.length; i++) {\n+            try {\n+                if (!xpath_tests[i].path && !xpath_tests[i].eval){\n+                    Pointer ptr = ctx.getPointer(xpath_tests[i].xpath);\n+                    Pointer test = ctx.getPointer(ptr.asPath());\n+                    assertEquals(\"Testing pointer for <\" + xpath_tests[i].xpath + \">\", ptr.asPath(), test.asPath());\n+                }\n+            }\n+            catch (Exception ex){\n+                System.err.println(\"Exception during pointer test <\" + xpath_tests[i].xpath + \">\");\n+                ex.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    private static class XP {\n+        public String xpath;\n+        public Object expected;\n+        public boolean eval;\n+        public boolean path;\n+        public boolean lenient;\n+\n+        public XP(String xpath,  Object expected, boolean eval, boolean path, boolean lenient){\n+            this.xpath = xpath;\n+            this.expected = expected;\n+            this.eval = eval;\n+            this.path = path;\n+            this.lenient = lenient;\n+        }\n+    }\n+\n+    private static XP test(String xpath, Object expected){\n+        return new XP(xpath, expected, false, false, false);\n+    }\n+\n+    private static XP testLenient(String xpath, Object expected){\n+        return new XP(xpath, expected, false, false, true);\n+    }\n+\n+    private static XP testEval(String xpath, Object expected){\n+        return new XP(xpath, expected, true, false, false);\n+    }\n+\n+    private static XP testPath(String xpath, Object expected){\n+        return new XP(xpath, expected, false, true, true);\n+    }\n+\n+    private static XP testEvalPath(String xpath, Object expected){\n+        return new XP(xpath, expected, true, true, false);\n+    }\n+\n+    private static List list(Object o1){\n+        List list = new ArrayList();\n+        list.add(o1);\n+        return list;\n+    }\n+\n+    private static List list(Object o1, Object o2){\n+        List list = new ArrayList();\n+        list.add(o1);\n+        list.add(o2);\n+        return list;\n+    }\n+\n+\n+    static final XP[] dom_tests = new XP[]{\n+        test(\"vendor/location/address/street\", \"Orchard Road\"),\n+        test(\"vendor/location[2]/address/street\", \"Tangerine Drive\"),\n+        test(\"vendor/location/address/city\", \"Fruit Market\"),\n+        test(\"//street\", \"Orchard Road\"),\n+        test(\"local-name(//street/..)\", \"address\"),\n+        test(\"number(vendor/location/employeeCount)\", new Double(10)),\n+        test(\"vendor/location/employeeCount + 1\", new Double(11)),\n+        test(\"vendor/location/employeeCount and true()\", Boolean.TRUE),\n+        test(\"vendor/location[.//employeeCount = 10]/following-sibling::location//street\", \"Tangerine Drive\"),\n+        testPath(\"vendor/location[.//employeeCount = 10]/following-sibling::location//street\",\n+                \"/vendor[1]/location[2]/address[1]/street[1]\"),\n+        testPath(\"//location[2]/preceding-sibling::location//street\",\n+                \"/vendor[1]/location[1]/address[1]/street[1]\"),\n+        test(\"vendor/location/@id\", \"100\"),\n+        testPath(\"vendor/location/@id\", \"/vendor[1]/location[1]/@id\"),\n+        testEval(\"vendor/location/@id\", list(\"100\", \"101\")),\n+        test(\"vendor/product/price:amount\", \"45.95\"),\n+        test(\"namespace-uri(vendor/product/price:amount)\", \"priceNS\"),\n+        test(\"local-name(vendor/product/price:amount)\", \"amount\"),\n+        test(\"name(vendor/product/price:amount)\", \"priceNS:amount\"),\n+        test(\"vendor/product/prix\", \"934.99\"),\n+        test(\"vendor/product/prix/namespace::price\", \"priceNS\"),\n+        testPath(\"vendor/product/prix/namespace::price\", \"/vendor[1]/product[1]/prix[1]/namespace::price\"),\n+        test(\"count(vendor/product/namespace::*)\", new Double(3)),\n+        test(\"name(vendor/product/prix/namespace::price)\", \"priceNS:price\"),\n+        test(\"local-name(vendor/product/prix/namespace::price)\", \"price\"),\n+        test(\"vendor/product/price:amount/@price:discount\", \"10%\"),\n+        test(\"vendor/product/value:amount/@value:discount\", \"10%\"),\n+        test(\"namespace-uri(vendor/product/price:amount/@price:discount)\", \"priceNS\"),\n+        test(\"local-name(vendor/product/price:amount/@price:discount)\", \"discount\"),\n+        test(\"name(vendor/product/price:amount/@price:discount)\", \"priceNS:discount\"),\n+        test(\"vendor/product/price:amount/@discount\", \"20%\"),\n+        test(\"namespace-uri(vendor/product/price:amount/@discount)\", \"\"),\n+        test(\"local-name(vendor/product/price:amount/@discount)\", \"discount\"),\n+        test(\"name(vendor/product/price:amount/@discount)\", \"discount\"),\n+        test(\"vendor/product/price:sale/saleEnds/ancestor::price:sale/saleEnds\", \"never\"),\n+        test(\"vendor/product/price:sale/ancestor-or-self::price:sale/saleEnds\", \"never\"),\n+        test(\"vendor/product/price:sale/saleEnds/ancestor::price:*\" + \"/saleEnds\", \"never\"),\n+        test(\"count(vendor/product/price:*)\", new Double(2)),\n+        test(\"count(vendor/product/value:*)\", new Double(2)),\n+        test(\"count(vendor/product/*)\", new Double(2)),\n+        testEval(\"vendor/product/price:amount/@price:*\", list(\"10%\")),\n+        testEval(\"vendor/product/price:amount/@*\", list(\"20%\")),\n+        test(\"count(//price:*)\", new Double(2)),\n+        test(\"vendor/product/price:sale/saleEnds/parent::price:*\" + \"/saleEnds\", \"never\"),\n+        test(\"//location/following::price:sale/saleEnds\", \"never\"),\n+        test(\"//price:sale/self::price:sale/saleEnds\", \"never\"),\n+        testLenient(\"//price:sale/self::x/saleEnds\", null),\n+\n+        test(\"//product/comment()\", \"We are not buying this product, ever\"),\n+        test(\"//product/text()[. != '']\", \"We love this product.\"),\n+        testPath(\"//product/text()\", \"/vendor[1]/product[1]/text()[1]\"),\n+        test(\"//product/processing-instruction()\", \"do not show anybody\"),\n+        test(\"//product/processing-instruction('report')\", \"average only\"),\n+        testPath(\"//product/processing-instruction('report')\",\n+            \"/vendor[1]/product[1]/processing-instruction('report')[1]\"),\n+        test(\"name(//product/processing-instruction()[1])\", \"security\"),\n+\n+        test(\"//product/prix/@xml:lang\", \"fr\"),\n+        test(\"//product/prix[lang('fr')]\", \"934.99\"),\n+        test(\"//product/price:sale[lang('en')]/saleEnds\", \"never\"),\n+        test(\"vendor/location/@manager\", \"\"),\n+        testLenient(\"vendor/location/@missing\", null),\n+        test(\"count(vendor/location[1]/@*)\", new Double(3)),\n+        test(\"vendor/location[@id='101']//street\", \"Tangerine Drive\"),\n+\n+        test(\"$document/vendor/location[1]//street\", \"Orchard Road\"),\n+        testPath(\"$document/vendor/location[1]//street\",\n+            \"$document/vendor[1]/location[1]/address[1]/street[1]\"),\n+        test(\"$document/vendor//street\", \"Orchard Road\"),\n+        test(\"$container/vendor//street\", \"Orchard Road\"),\n+        test(\"$container//street\", \"Orchard Road\"),\n+        testPath(\"$container//street\", \"$container/vendor[1]/location[1]/address[1]/street[1]\"),\n+\n+        testEval(\"vendor/contact/following::location//street\",\n+            list(\"Orchard Road\", \"Tangerine Drive\")),\n+   };\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java,v 1.1 2002/08/26 22:33:10 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/26 22:33:10 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.jxpath.ri.model.dom;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.w3c.dom.*;\n+import java.util.*;\n+import java.lang.reflect.*;\n+import org.apache.commons.jxpath.ri.model.XMLModelTest;\n+import org.apache.commons.jxpath.*;\n+import org.apache.commons.jxpath.util.*;\n+import org.apache.commons.jxpath.ri.*;\n+import org.apache.commons.jxpath.ri.parser.*;\n+import org.apache.commons.jxpath.ri.model.*;\n+import org.apache.commons.jxpath.ri.model.beans.*;\n+import org.apache.commons.jxpath.ri.axes.*;\n+import org.apache.commons.jxpath.ri.compiler.*;\n+import org.apache.commons.jxpath.ri.compiler.Expression;\n+import org.apache.commons.jxpath.xml.*;\n+import java.beans.*;\n+\n+/**\n+ * Abstract superclass for pure XPath 1.0.  Subclasses\n+ * apply the same XPaths to contexts using different models:\n+ * DOM, JDOM etc.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2002/08/26 22:33:10 $\n+ */\n+\n+public class DOMModelTest extends XMLModelTest\n+{\n+    /**\n+     * Exercises this test case only\n+     */\n+    public static void main(String args[]) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * Construct a new instance of this test case.\n+     *\n+     * @param name Name of the test case\n+     */\n+    public DOMModelTest(String name){\n+        super(name);\n+    }\n+\n+    /**\n+     * Return the tests included in this test suite.\n+     */\n+    public static Test suite(){\n+        return (new TestSuite(DOMModelTest.class));\n+    }\n+\n+    protected String getModel(){\n+        return DocumentContainer.MODEL_DOM;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java,v 1.1 2002/08/26 22:33:10 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/26 22:33:10 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.jxpath.ri.model.jdom;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.w3c.dom.*;\n+import java.util.*;\n+import java.lang.reflect.*;\n+import org.apache.commons.jxpath.ri.model.XMLModelTest;\n+import org.apache.commons.jxpath.*;\n+import org.apache.commons.jxpath.util.*;\n+import org.apache.commons.jxpath.ri.*;\n+import org.apache.commons.jxpath.ri.parser.*;\n+import org.apache.commons.jxpath.ri.model.*;\n+import org.apache.commons.jxpath.ri.model.beans.*;\n+import org.apache.commons.jxpath.ri.axes.*;\n+import org.apache.commons.jxpath.ri.compiler.*;\n+import org.apache.commons.jxpath.ri.compiler.Expression;\n+import org.apache.commons.jxpath.xml.*;\n+import java.beans.*;\n+\n+/**\n+ * Abstract superclass for pure XPath 1.0.  Subclasses\n+ * apply the same XPaths to contexts using different models:\n+ * DOM, JDOM etc.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2002/08/26 22:33:10 $\n+ */\n+\n+public class JDOMModelTest extends XMLModelTest\n+{\n+    /**\n+     * Exercises this test case only\n+     */\n+    public static void main(String args[]) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * Construct a new instance of this test case.\n+     *\n+     * @param name Name of the test case\n+     */\n+    public JDOMModelTest(String name){\n+        super(name);\n+    }\n+\n+    /**\n+     * Return the tests included in this test suite.\n+     */\n+    public static Test suite(){\n+        return (new TestSuite(JDOMModelTest.class));\n+    }\n+\n+    protected String getModel(){\n+        return DocumentContainer.MODEL_JDOM;\n+    }\n+\n+    public void testID(){\n+        // id() is not supported by JDOM\n+    }\n+}", "timestamp": 1030401200, "metainfo": ""}