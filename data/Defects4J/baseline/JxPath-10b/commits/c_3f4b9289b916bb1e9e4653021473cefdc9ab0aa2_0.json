{"sha": "3f4b9289b916bb1e9e4653021473cefdc9ab0aa2", "log": "Renamed isNode to !isContainer Cleaned up asPath Ignore exceptions during a property iteration   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.23 2002/10/20 03:44:27 dmitri Exp $\n- * $Revision: 1.23 $\n- * $Date: 2002/10/20 03:44:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.24 2002/11/28 01:02:04 dmitri Exp $\n+ * $Revision: 1.24 $\n+ * $Date: 2002/11/28 01:02:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.ri.model.VariablePointer;\n import org.apache.commons.jxpath.ri.model.beans.BeanPointerFactory;\n import org.apache.commons.jxpath.ri.model.beans.CollectionPointerFactory;\n-import org.apache.commons.jxpath.ri.model.beans.DynamicPointerFactory;\n import org.apache.commons.jxpath.ri.model.container.ContainerPointerFactory;\n+import org.apache.commons.jxpath.ri.model.dynamic.DynamicPointerFactory;\n import org.apache.commons.jxpath.util.TypeUtils;\n \n /**\n  * The reference implementation of JXPathContext.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.23 $ $Date: 2002/10/20 03:44:27 $\n+ * @version $Revision: 1.24 $ $Date: 2002/11/28 01:02:04 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext\n {\n \n     public Object getValue(String xpath, Expression expr){\n         Object result = expr.computeValue(getRootContext());\n-        if (result instanceof EvalContext){\n-            EvalContext ctx = (EvalContext)result;\n+        if (result instanceof EvalContext) {\n+            EvalContext ctx = (EvalContext) result;\n             result = ctx.getSingleNodePointer();\n-            if (!lenient && result == null){\n+            if (!lenient && result == null) {\n                 throw new JXPathException(\"No value for xpath: \" + xpath);\n             }\n         }\n-        if (result instanceof NodePointer){\n-            if (!lenient && !((NodePointer)result).isActual()){\n+        if (result instanceof NodePointer) {\n+            result = ((NodePointer) result).getValuePointer();\n+            if (!lenient && !((NodePointer) result).isActual()) {\n                 // We need to differentiate between pointers representing\n-                // a non-existing property and one representing a property\n+                // a non-existing property and ones representing a property\n                 // whose value is null.  In the latter case, the pointer\n                 // is going to have isActual == false, but its parent,\n                 // which is a non-node pointer identifying the bean property,\n                 // will return isActual() == true.\n-                NodePointer parent = ((NodePointer)result).getParent();\n-                if (parent == null || parent.isNode() || !parent.isActual()){\n+                NodePointer parent = ((NodePointer) result).getParent();\n+                if (parent == null\n+                    || !parent.isContainer()\n+                    || !parent.isActual()) {\n                     throw new JXPathException(\"No value for xpath: \" + xpath);\n                 }\n             }\n-            result = ((NodePointer)result).getValue();\n+            result = ((NodePointer) result).getValue();\n         }\n         return result;\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/axes/ChildContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/ChildContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/ChildContext.java,v 1.10 2002/08/10 01:31:37 dmitri Exp $\n- * $Revision: 1.10 $\n- * $Date: 2002/08/10 01:31:37 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/ChildContext.java,v 1.11 2002/11/28 01:02:04 dmitri Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2002/11/28 01:02:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * \"preceding-sibling::\" axes.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.10 $ $Date: 2002/08/10 01:31:37 $\n+ * @version $Revision: 1.11 $ $Date: 2002/11/28 01:02:04 $\n  */\n public class ChildContext extends EvalContext {\n     private NodeTest nodeTest;\n         }\n         if (startFromParentLocation){\n             NodePointer pointer = parent.getParent();\n-            while (pointer != null && !pointer.isNode()){\n+            while (pointer != null && pointer.isContainer()){\n                 pointer = pointer.getParent();\n             }\n \n--- a/src/java/org/apache/commons/jxpath/ri/axes/ParentContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/ParentContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/ParentContext.java,v 1.9 2002/11/26 01:20:06 dmitri Exp $\n- * $Revision: 1.9 $\n- * $Date: 2002/11/26 01:20:06 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/ParentContext.java,v 1.10 2002/11/28 01:02:04 dmitri Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2002/11/28 01:02:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * EvalContext that walks the \"parent::\" axis.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2002/11/26 01:20:06 $\n+ * @version $Revision: 1.10 $ $Date: 2002/11/28 01:02:04 $\n  */\n public class ParentContext extends EvalContext {\n     private NodeTest nodeTest;\n         setStarted = true;\n         NodePointer thisLocation = parentContext.getCurrentNodePointer();\n         currentNodePointer = thisLocation.getParent();\n-        while (currentNodePointer != null && !currentNodePointer.isNode()){\n+        while (currentNodePointer != null && currentNodePointer.isContainer()){\n             currentNodePointer = currentNodePointer.getParent();\n         }\n         if (currentNodePointer != null &&\n--- a/src/java/org/apache/commons/jxpath/ri/axes/PrecedingOrFollowingContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/PrecedingOrFollowingContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/PrecedingOrFollowingContext.java,v 1.9 2002/11/26 01:20:06 dmitri Exp $\n- * $Revision: 1.9 $\n- * $Date: 2002/11/26 01:20:06 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/PrecedingOrFollowingContext.java,v 1.10 2002/11/28 01:02:04 dmitri Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2002/11/28 01:02:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * EvalContext that walks the \"preceding::\" and \"following::\" axes.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2002/11/26 01:20:06 $\n+ * @version $Revision: 1.10 $ $Date: 2002/11/28 01:02:04 $\n  */\n public class PrecedingOrFollowingContext extends EvalContext {\n     private NodeTest nodeTest;\n      * If the pointer is auxiliary, return the parent; otherwise - the pointer itself\n      */\n     private NodePointer getMaterialPointer(NodePointer pointer){\n-        while (pointer != null && !pointer.isNode()){\n+        while (pointer != null && pointer.isContainer()){\n             pointer = pointer.getParent();\n         }\n         return pointer;\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.13 2002/11/26 01:20:06 dmitri Exp $\n- * $Revision: 1.13 $\n- * $Date: 2002/11/26 01:20:06 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.14 2002/11/28 01:02:04 dmitri Exp $\n+ * $Revision: 1.14 $\n+ * $Date: 2002/11/28 01:02:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.ri.compiler.NodeNameTest;\n import org.apache.commons.jxpath.ri.compiler.NodeTest;\n import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;\n-import org.apache.commons.jxpath.ri.model.beans.NullElementPointer;\n import org.apache.commons.jxpath.ri.model.beans.NullPointer;\n \n /**\n  * Common superclass for Pointers of all kinds.  A NodePointer maps to\n- * a deterministic XPath that represents the location of a node in an object graph.\n- * This XPath uses only simple axes: child, namespace and attribute and only simple,\n- * context-independent predicates.\n+ * a deterministic XPath that represents the location of a node in an \n+ * object graph. This XPath uses only simple axes: child, namespace and\n+ * attribute and only simple, context-independent predicates.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.13 $ $Date: 2002/11/26 01:20:06 $\n+ * @version $Revision: 1.14 $ $Date: 2002/11/28 01:02:04 $\n  */\n public abstract class NodePointer implements Pointer, Cloneable, Comparable {\n \n     public abstract boolean isLeaf();\n \n     /**\n-     * If false, this node is axiliary and can only be used as an intermediate\n-     * in the chain of pointers.\n-     */\n-    public boolean isNode() {\n-        return true;\n+     * @deprecated Please use !isContainer()\n+     */\n+    public boolean isNode(){\n+        return !isContainer();\n+    }\n+     \n+    /**\n+     * If true, this node is axiliary and can only be used as an intermediate in\n+     * the chain of pointers.\n+     */\n+    public boolean isContainer() {\n+        return false;\n     }\n \n     /**\n      * this method returns the pointer to the contents.\n      * Only an auxiliary (non-node) pointer can (and should) return a\n      * value pointer other than itself.\n-     * Note that you probably don't want to override <code>getValuePointer()</code>\n-     * directly.  Override the <code>getImmediateValuePointer()</code> \n-     * method instead.  The <code>getValuePointer()</code> method is\n-     * calls <code>getImmediateValuePointer()</code> and, if the result is not\n+     * Note that you probably don't want to override \n+     * <code>getValuePointer()</code> directly.  Override the\n+     * <code>getImmediateValuePointer()</code> method instead.  The\n+     * <code>getValuePointer()</code> method is calls\n+     * <code>getImmediateValuePointer()</code> and, if the result is not\n      * <code>this</code>, invokes <code>getValuePointer()</code> recursively.\n-     * The idea here is to open all nested containers. Let's say we have a \n-     * container within a container within a container.\n-     * The <code>getValuePointer()</code> method should then open all \n-     * those containers and return the pointer to the ultimate contents.\n-     * It does so with the above recursion.\n+     * The idea here is to open all nested containers. Let's say we have a\n+     * container within a container within a container. The\n+     * <code>getValuePointer()</code> method should then open all those\n+     * containers and return the pointer to the ultimate contents. It does so\n+     * with the above recursion.\n      */\n     public NodePointer getValuePointer() {\n         NodePointer ivp = getImmediateValuePointer();\n             return true;\n         }\n         else if (test instanceof NodeNameTest) {\n-            if (!isNode()) {\n+            if (isContainer()) {\n                 return false;\n             }\n             QName testName = ((NodeNameTest) test).getNodeName();\n      * Returns an XPath that maps to this Pointer.\n      */\n     public String asPath() {\n+        // If the parent of this node is a container, it is responsible\n+        // for appended this node's part of the path.\n+        if (parent != null && parent.isContainer()) {\n+            return parent.asPath();\n+        }\n+\n         StringBuffer buffer = new StringBuffer();\n-        if (getParent() != null) {\n-            buffer.append(getParent().asPath());\n-            // TBD: the following needs to be redesigned.\n-            // What this condition says is\n-            // \"if the parent of this node has already appended this node's\n-            // name, don't do it again\".  However, I would hate to add an ugly\n-            // API like \"isResponsibleForAppendingChildName()\".\n-            if (getParent().isNode() || (parent instanceof NullElementPointer)){\n-                QName name = getName();\n-                if (name != null) {\n-                    if (buffer.length() == 0 ||\n-                            buffer.charAt(buffer.length()-1) != '/'){\n-                        buffer.append('/');\n-                    }\n-                    if (attribute){\n-                        buffer.append('@');\n-                    }\n-                    buffer.append(name);\n-                }\n-            }\n-        }\n-        else {\n-            QName name = getName();\n-            if (attribute){\n-                buffer.append('@');\n-            }\n-            buffer.append(name);\n-        }\n+        if (parent != null) {\n+            buffer.append(parent.asPath());\n+        }\n+\n+        if (buffer.length() == 0\n+            || buffer.charAt(buffer.length() - 1) != '/') {\n+            buffer.append('/');\n+        }\n+        if (attribute) {\n+            buffer.append('@');\n+        }\n+        buffer.append(getName());\n+\n         if (index != WHOLE_COLLECTION && isCollection()) {\n             buffer.append('[').append(index + 1).append(']');\n         }\n--- a/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java,v 1.8 2002/11/26 01:20:06 dmitri Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/11/26 01:20:06 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java,v 1.9 2002/11/28 01:02:04 dmitri Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/11/28 01:02:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Pointer to a context variable.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.8 $ $Date: 2002/11/26 01:20:06 $\n+ * @version $Revision: 1.9 $ $Date: 2002/11/28 01:02:04 $\n  */\n public class VariablePointer extends NodePointer {\n     private Variables variables;\n         actual = false;\n     }\n \n-    public boolean isNode(){\n-        return false;\n+    public boolean isContainer(){\n+        return true;\n     }\n \n     public QName getName(){\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java,v 1.10 2002/11/26 01:20:06 dmitri Exp $\n- * $Revision: 1.10 $\n- * $Date: 2002/11/26 01:20:06 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java,v 1.11 2002/11/28 01:02:04 dmitri Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2002/11/28 01:02:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Pointer pointing to a property of a JavaBean.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.10 $ $Date: 2002/11/26 01:20:06 $\n+ * @version $Revision: 1.11 $ $Date: 2002/11/28 01:02:04 $\n  */\n public class BeanPropertyPointer extends PropertyPointer {\n     private String propertyName;\n     /**\n      * This type of node is auxiliary.\n      */\n-    public boolean isNode(){\n-        return false;\n+    public boolean isContainer(){\n+        return true;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java,v 1.9 2002/11/26 01:33:34 dmitri Exp $\n- * $Revision: 1.9 $\n- * $Date: 2002/11/26 01:33:34 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java,v 1.10 2002/11/28 01:02:04 dmitri Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2002/11/28 01:02:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Transparent pointer to a collection (array or Collection).\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2002/11/26 01:33:34 $\n+ * @version $Revision: 1.10 $ $Date: 2002/11/28 01:02:04 $\n  */\n public class CollectionPointer extends NodePointer {\n     private Object collection;\n             || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();\n     }\n \n-    public boolean isNode(){\n-        return index == WHOLE_COLLECTION;\n+    public boolean isContainer(){\n+        return index != WHOLE_COLLECTION;\n     }\n \n     public Object getImmediateNode(){\n         }\n         if (index != WHOLE_COLLECTION) {\n             // Address the list[1][2] case\n-            if (parent != null && !parent.isNode() &&\n+            if (parent != null && parent.isContainer() &&\n                     parent.getIndex() != WHOLE_COLLECTION){\n                 buffer.append(\"/.\");\n             }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java,v 1.10 2002/11/26 01:20:06 dmitri Exp $\n- * $Revision: 1.10 $\n- * $Date: 2002/11/26 01:20:06 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java,v 1.11 2002/11/28 01:02:04 dmitri Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2002/11/28 01:02:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * as the parent.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.10 $ $Date: 2002/11/26 01:20:06 $\n+ * @version $Revision: 1.11 $ $Date: 2002/11/28 01:02:04 $\n  */\n public class NullElementPointer extends PropertyOwnerPointer {\n \n         return false;\n     }\n \n-    public boolean isNode(){\n-        return false;\n+    public boolean isContainer(){\n+        return true;\n     }\n \n     public NodePointer createPath(JXPathContext context, Object value){\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java,v 1.10 2002/11/26 01:20:06 dmitri Exp $\n- * $Revision: 1.10 $\n- * $Date: 2002/11/26 01:20:06 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java,v 1.11 2002/11/28 01:02:04 dmitri Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2002/11/28 01:02:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.10 $ $Date: 2002/11/26 01:20:06 $\n+ * @version $Revision: 1.11 $ $Date: 2002/11/28 01:02:04 $\n  */\n public class NullPropertyPointer extends PropertyPointer {\n \n         return false;\n     }\n \n-    public boolean isNode(){\n-        return false;\n+    public boolean isContainer(){\n+        return true;\n     }\n \n     public void setValue(Object value){\n-        if (parent == null || !parent.isNode()){\n+        if (parent == null || parent.isContainer()){\n             throw new JXPathException(\"Cannot set property \" + asPath() +\n                 \", the target object is null\");\n         }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java,v 1.5 2002/10/12 21:02:24 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/10/12 21:02:24 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java,v 1.6 2002/11/28 01:02:04 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/11/28 01:02:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Examples of such objects are JavaBeans and objects with Dynamic Properties.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/10/12 21:02:24 $\n+ * @version $Revision: 1.6 $ $Date: 2002/11/28 01:02:04 $\n  */\n public class PropertyIterator implements NodeIterator {\n     private boolean empty = false;\n         this.name = name;\n         this.reverse = reverse;\n         this.includeStart = true;\n-        if (reverse){\n+        if (reverse) {\n             this.startPropertyIndex = PropertyPointer.UNSPECIFIED_PROPERTY;\n             this.startIndex = -1;\n         }\n-        if (startWith != null){\n-            while (startWith != null && startWith.getParent() != pointer){\n+        if (startWith != null) {\n+            while (startWith != null && startWith.getParent() != pointer) {\n                 startWith = startWith.getParent();\n             }\n-            if (startWith == null){\n+            if (startWith == null) {\n                 throw new JXPathException(\n-                    \"PropertyIerator startWith parameter is not a child of the supplied parent\");\n-            }\n-            this.startPropertyIndex = ((PropertyPointer)startWith).getPropertyIndex();\n+                    \"PropertyIerator startWith parameter is \"\n+                        + \"not a child of the supplied parent\");\n+            }\n+            this.startPropertyIndex =\n+                ((PropertyPointer) startWith).getPropertyIndex();\n             this.startIndex = startWith.getIndex();\n-            if (this.startIndex == NodePointer.WHOLE_COLLECTION){\n+            if (this.startIndex == NodePointer.WHOLE_COLLECTION) {\n                 this.startIndex = 0;\n             }\n             this.includeStart = false;\n-            if (reverse && startIndex == -1){\n+            if (reverse && startIndex == -1) {\n                 this.includeStart = true;\n             }\n         }\n+    }\n+    \n+    protected NodePointer getPropertyPointer(){\n+        return propertyNodePointer;\n     }\n \n     public void reset(){\n         if (position == 0){\n             if (name != null){\n                 if (!targetReady){\n-                    prepare();\n+                    prepareForIndividualProperty(name);\n                 }\n                 // If there is no such property - return null\n                 if (empty){\n                 reset();\n             }\n         }\n-        return propertyNodePointer.getValuePointer();\n+        return getValuePointer();       \n     }\n \n     public int getPosition(){\n         }\n \n         if (!targetReady){\n-            prepare();\n+            prepareForIndividualProperty(name);\n         }\n \n         if (empty){\n             return false;\n         }\n \n-        int length = propertyNodePointer.getLength();   // TBD: cache length\n+        int length = getLength();\n         int index;\n         if (!reverse){\n             index = position + startIndex;\n             int index = 1;\n             for (int i = startPropertyIndex; i < count; i++){\n                 propertyNodePointer.setPropertyIndex(i);\n-                int length = propertyNodePointer.getLength();\n+                int length = getLength();\n                 if (i == startPropertyIndex){\n                     length -= startIndex;\n                     if (!includeStart){\n             }\n             for (int i = start; i >= 0; i--){\n                 propertyNodePointer.setPropertyIndex(i);\n-                int length = propertyNodePointer.getLength();\n+                int length = getLength();\n                 if (i == startPropertyIndex){\n                     int end = startIndex;\n                     if (end == -1){\n         return false;\n     }\n \n-    private void prepare(){\n+    protected void prepareForIndividualProperty(String name){\n         targetReady = true;\n         empty = true;\n-        // TBD: simplify\n-        if (propertyNodePointer instanceof DynamicPropertyPointer){\n-            propertyNodePointer.setPropertyName(name);\n-        }\n \n         String names[] = propertyNodePointer.getPropertyNames();\n         if (!reverse){\n             }\n         }\n     }\n+\n+    /**\n+     * Computes length for the current pointer - ignores any exceptions\n+     */\n+    private int getLength() {\n+        int length;\n+        try {\n+            length = propertyNodePointer.getLength();   // TBD: cache length\n+        }\n+        catch (Throwable t){\n+            // @todo: should this exception be reported in any way?\n+            length = 0;\n+        }\n+        return length;\n+    }\n+\n+    /**\n+     * Computes value pointer for the current pointer - ignores any exceptions\n+     */\n+    private NodePointer getValuePointer() {\n+        try {\n+            return propertyNodePointer.getValuePointer();\n+        }\n+        catch (Throwable ex){\n+            // @todo: should this exception be reported in any way?\n+            NullPropertyPointer npp =\n+                new NullPropertyPointer(propertyNodePointer.getParent());\n+            npp.setPropertyName(propertyNodePointer.getPropertyName());\n+            npp.setIndex(propertyNodePointer.getIndex());\n+            return npp.getValuePointer();\n+        }\n+    }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java,v 1.10 2002/11/26 01:20:06 dmitri Exp $\n- * $Revision: 1.10 $\n- * $Date: 2002/11/26 01:20:06 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java,v 1.11 2002/11/28 01:02:04 dmitri Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2002/11/28 01:02:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * a collection.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.10 $ $Date: 2002/11/26 01:20:06 $\n+ * @version $Revision: 1.11 $ $Date: 2002/11/28 01:02:04 $\n  */\n public abstract class PropertyOwnerPointer extends NodePointer {\n \n     public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith){\n         if (test == null){\n-            return new PropertyIterator(this, null, reverse, startWith);\n+            return createNodeIterator(null, reverse, startWith);\n         }\n         else if (test instanceof NodeNameTest){\n             QName testName = ((NodeNameTest)test).getNodeName();\n             else {\n                 property = testName.getName();\n             }\n-            return new PropertyIterator(this, property, reverse, startWith);\n+            return createNodeIterator(property, reverse, startWith);\n         }\n         else if (test instanceof NodeTypeTest){\n             if (((NodeTypeTest)test).getNodeType() == Compiler.NODE_TYPE_NODE){\n-                return new PropertyIterator(this, null, reverse, startWith);\n+                return createNodeIterator(null, reverse, startWith);\n             }\n         }\n         return null;\n+    }\n+\n+    public NodeIterator createNodeIterator(\n+                String property,\n+                boolean reverse,\n+                NodePointer startWith) \n+    {\n+        return new PropertyIterator(this, property, reverse, startWith);\n     }\n \n     public NodeIterator attributeIterator(QName name){\n      */\n     public void setValue(Object value){\n         this.value = value;\n-        if (parent instanceof PropertyPointer){\n+        if (parent.isContainer()){\n             parent.setValue(value);\n         }\n         else if (parent != null){\n--- a/src/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java,v 1.6 2002/11/26 01:20:07 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/11/26 01:20:07 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java,v 1.7 2002/11/28 01:02:04 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/11/28 01:02:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * itself.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2002/11/26 01:20:07 $\n+ * @version $Revision: 1.7 $ $Date: 2002/11/28 01:02:04 $\n  */\n public class ContainerPointer extends NodePointer {\n     private Container container;\n     /**\n      * This type of node is auxiliary.\n      */\n-    public boolean isNode(){\n-        return false;\n+    public boolean isContainer(){\n+        return true;\n     }\n \n     public QName getName(){\n--- a/src/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java,v 1.4 2002/11/26 01:33:34 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/11/26 01:33:34 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java,v 1.5 2002/11/28 01:02:05 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/11/28 01:02:05 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Pointer pointing to a property of a DynaBean.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/11/26 01:33:34 $\n+ * @version $Revision: 1.5 $ $Date: 2002/11/28 01:02:05 $\n  */\n public class DynaBeanPropertyPointer extends PropertyPointer {\n     private DynaBean dynaBean;\n     /**\n      * This type of node is auxiliary.\n      */\n-    public boolean isNode(){\n-        return false;\n+    public boolean isContainer(){\n+        return true;\n     }\n \n     /**\n--- a/src/test/org/apache/commons/jxpath/JXPathTestSuite.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestSuite.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestSuite.java,v 1.1 2002/10/20 03:48:21 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/10/20 03:48:21 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestSuite.java,v 1.2 2002/11/28 01:02:05 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/11/28 01:02:05 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.ri.compiler.VariableTest;\n import org.apache.commons.jxpath.ri.model.MixedModelTest;\n import org.apache.commons.jxpath.ri.model.beans.BeanModelTest;\n-import org.apache.commons.jxpath.ri.model.beans.DynamicPropertiesModelTest;\n import org.apache.commons.jxpath.ri.model.dom.DOMModelTest;\n import org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanModelTest;\n+import org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest;\n import org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest;\n import org.apache.commons.jxpath.util.BasicTypeConverterTest;\n \n  * </p>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2002/10/20 03:48:21 $\n+ * @version $Revision: 1.2 $ $Date: 2002/11/28 01:02:05 $\n  */\n \n public class JXPathTestSuite extends TestCase\n--- a/src/test/org/apache/commons/jxpath/ri/axes/SimplePathInterpreterTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/axes/SimplePathInterpreterTest.java\n import org.apache.commons.jxpath.ri.model.*;\n import org.apache.commons.jxpath.ri.model.beans.*;\n import org.apache.commons.jxpath.ri.model.dom.*;\n+import org.apache.commons.jxpath.ri.model.dynamic.*;\n+\n import java.util.*;\n \n public class SimplePathInterpreterTest extends TestCase {\n--- /dev/null\n+++ b/src/test/org/apache/commons/jxpath/ri/model/ExceptionPropertyTestBean.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.model;\n+\n+import org.apache.commons.jxpath.TestBean;\n+\n+/**\n+ * \n+ * @author <a href=\"mailto:dmitri@apache.org\">Dmitri Plotnikov</a>\n+ * @version $Id: ExceptionPropertyTestBean.java,v 1.1 2002/11/28 01:02:05 dmitri Exp $\n+ */\n+public class ExceptionPropertyTestBean {\n+\n+    public String getErrorString(){\n+        throw new RuntimeException(\"errorString\");\n+    }\n+    \n+    public String[] getErrorStringArray(){\n+        throw new RuntimeException(\"errorStringArray\");\n+    }\n+\n+    public TestBean getErrorBean(){\n+        throw new RuntimeException(\"errorBean\");\n+    }\n+}\n--- a/src/test/org/apache/commons/jxpath/ri/model/MixedModelTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/MixedModelTest.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/MixedModelTest.java,v 1.1 2002/10/20 03:48:22 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/10/20 03:48:22 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/MixedModelTest.java,v 1.2 2002/11/28 01:02:05 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/11/28 01:02:05 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Tests JXPath with mixed model: beans, maps, DOM etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2002/10/20 03:48:22 $\n+ * @version $Revision: 1.2 $ $Date: 2002/11/28 01:02:05 $\n  */\n \n public class MixedModelTest extends JXPathTestCase\n {\n-    private static final boolean enabled = true;\n-\n     private JXPathContext context;\n \n     /**\n      * Test JXPath.iterate() with map containing an array\n      */\n     public void testIterateArray(){\n-        if (!enabled){\n-            return;\n-        }\n         Map map = new HashMap();\n         map.put(\"foo\", new String[]{\"a\", \"b\", \"c\"});\n \n     }\n \n     public void testIteratePointersArray(){\n-        if (!enabled){\n-            return;\n-        }\n         Map map = new HashMap();\n         map.put(\"foo\", new String[]{\"a\", \"b\", \"c\"});\n \n     }\n \n     public void testIteratePointersArrayElementWithVariable(){\n-        if (!enabled){\n-            return;\n-        }\n         Map map = new HashMap();\n         map.put(\"foo\", new String[]{\"a\", \"b\", \"c\"});\n \n     }\n \n     public void testIterateVector(){\n-        if (!enabled){\n-            return;\n-        }\n         Map map = new HashMap();\n         Vector vec = new Vector();\n         vec.add(new HashMap());\n             \"/vec\",\n             list(\"/.[@name='vec'][1]\", \"/.[@name='vec'][2]\"));\n     }\n+    \n+    public void testErrorProperty(){\n+        context.getVariables().declareVariable(\n+            \"e\",\n+            new ExceptionPropertyTestBean());\n+         \n+        boolean ex = false;   \n+        try {\n+            assertXPathValue(context, \"$e/errorString\", null);\n+        }\n+        catch (Throwable t){\n+            ex = true;\n+        }\n+        assertTrue(\"Legitimate exception accessing property\", ex);\n+        \n+        assertXPathPointer(context, \n+            \"$e/errorString\", \n+            \"$e/errorString\");\n+\n+        assertXPathPointerLenient(context,\n+            \"$e/errorStringArray[1]\",\n+            \"$e/errorStringArray[1]\");\n+            \n+        assertXPathPointerIterator(context,\n+            \"$e/errorString\",\n+            list(\"$e/errorString\"));\n+\n+        assertXPathPointerIterator(context,\n+            \"$e//error\",\n+            Collections.EMPTY_LIST);\n+    }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/jxpath/ri/model/dynamic/TestDynamicPropertyFactory.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/dynamic/TestDynamicPropertyFactory.java,v 1.1 2002/11/28 01:02:05 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/11/28 01:02:05 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.jxpath.ri.model.dynamic;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Vector;\n+\n+import org.apache.commons.jxpath.*;\n+\n+/**\n+ * Test AbstractFactory.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2002/11/28 01:02:05 $\n+ */\n+public class TestDynamicPropertyFactory extends AbstractFactory {\n+\n+    /**\n+     * Create a new instance and put it in the collection on the parent object.\n+     * Return <b>false</b> if this factory cannot create the requested object.\n+     */\n+    public boolean createObject(\n+            JXPathContext context,\n+            Pointer pointer,\n+            Object parent,\n+            String name,\n+            int index) \n+    {\n+        if (name.equals(\"map\")) {\n+            ((TestBean) parent).setMap(new HashMap());\n+            return true;\n+        } else if (name.equals(\"TestKey1\")) {\n+            ((Map) parent).put(name, \"\");\n+            return true;\n+        } else if (name.equals(\"TestKey2\")) {\n+            ((Map) parent).put(name, new NestedTestBean(\"newName\"));\n+            return true;\n+        } else if (name.equals(\"TestKey3\")) {\n+            Vector v = new Vector();\n+            for (int i = 0; i <= index; i++) {\n+                v.add(null);\n+            }\n+            ((Map) parent).put(name, v);\n+            return true;\n+        } else if (name.equals(\"TestKey4\")) {\n+            ((Map) parent).put(name, new Object[] { new TestBean()});\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public boolean declareVariable(JXPathContext context, String name){\n+        return false;\n+    }\n+}", "timestamp": 1038445325, "metainfo": ""}