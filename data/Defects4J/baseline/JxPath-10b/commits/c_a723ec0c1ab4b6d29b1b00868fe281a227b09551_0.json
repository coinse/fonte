{"sha": "a723ec0c1ab4b6d29b1b00868fe281a227b09551", "log": "Fixed the implementation of the \"*\" name test   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/axes/DescendantContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/DescendantContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/DescendantContext.java,v 1.9 2002/10/20 03:43:38 dmitri Exp $\n- * $Revision: 1.9 $\n- * $Date: 2002/10/20 03:43:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/DescendantContext.java,v 1.10 2002/11/29 06:44:16 dmitri Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2002/11/29 06:44:16 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n import java.util.Stack;\n \n+import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.EvalContext;\n-import org.apache.commons.jxpath.ri.QName;\n-import org.apache.commons.jxpath.ri.compiler.NodeNameTest;\n import org.apache.commons.jxpath.ri.compiler.NodeTest;\n+import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;\n import org.apache.commons.jxpath.ri.model.NodeIterator;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n \n  * axes.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2002/10/20 03:43:38 $\n+ * @version $Revision: 1.10 $ $Date: 2002/11/29 06:44:16 $\n  */\n public class DescendantContext extends EvalContext {\n     private NodeTest nodeTest;\n     private NodePointer currentNodePointer;\n     private boolean includeSelf;\n     private final static NodeTest elementNodeTest =\n-            new NodeNameTest(new QName(null, \"*\"));\n+            new NodeTypeTest(Compiler.NODE_TYPE_NODE);\n \n-    public DescendantContext(EvalContext parentContext, boolean includeSelf, NodeTest nodeTest){\n+    public DescendantContext(\n+            EvalContext parentContext,\n+            boolean includeSelf,\n+            NodeTest nodeTest) \n+    {\n         super(parentContext);\n         this.includeSelf = includeSelf;\n         this.nodeTest = nodeTest;\n     }\n \n     public boolean setPosition(int position){\n-//        System.err.println(\"POSITION: \" + position + \" this.position=\" + this.position);\n         if (position < this.position){\n             reset();\n         }\n     }\n \n     public boolean nextNode(){\n-        if (!setStarted){\n+        if (!setStarted) {\n             setStarted = true;\n             stack = new Stack();\n             currentNodePointer = parentContext.getCurrentNodePointer();\n-            if (currentNodePointer != null){\n-                if (!currentNodePointer.isLeaf()){\n-                    stack.push(currentNodePointer.childIterator(\n-                            elementNodeTest, false, null));\n+            if (currentNodePointer != null) {\n+                if (!currentNodePointer.isLeaf()) {\n+                    stack.push(\n+                        currentNodePointer.childIterator(\n+                            elementNodeTest,\n+                            false,\n+                            null));\n                 }\n-                if (includeSelf){\n-                    if (currentNodePointer.testNode(nodeTest)){\n+                if (includeSelf) {\n+                    if (currentNodePointer.testNode(nodeTest)) {\n                         position++;\n                         return true;\n                     }\n             }\n         }\n \n-        while (!stack.isEmpty()){\n-            NodeIterator it = (NodeIterator)stack.peek();\n-            if (it.setPosition(it.getPosition() + 1)){\n+        while (!stack.isEmpty()) {\n+            NodeIterator it = (NodeIterator) stack.peek();\n+            if (it.setPosition(it.getPosition() + 1)) {\n                 currentNodePointer = it.getNodePointer();\n-                if (!currentNodePointer.isLeaf()){\n-                    stack.push(currentNodePointer.childIterator(\n-                        elementNodeTest, false, null));\n+                if (!currentNodePointer.isLeaf()) {\n+                    stack.push(\n+                        currentNodePointer.childIterator(\n+                            elementNodeTest,\n+                            false,\n+                            null));\n                 }\n-                if (currentNodePointer.testNode(nodeTest)){\n+                if (currentNodePointer.testNode(nodeTest)) {\n                     position++;\n                     return true;\n                 }\n             }\n             else {\n-                // We get here only if the name test failed and the iterator ended\n+                // We get here only if the name test failed \n+                // and the iterator ended\n                 stack.pop();\n             }\n         }\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java,v 1.13 2002/11/26 01:33:34 dmitri Exp $\n- * $Revision: 1.13 $\n- * $Date: 2002/11/26 01:33:34 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java,v 1.14 2002/11/29 06:44:16 dmitri Exp $\n+ * $Revision: 1.14 $\n+ * $Date: 2002/11/29 06:44:16 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.13 $ $Date: 2002/11/26 01:33:34 $\n+ * @version $Revision: 1.14 $ $Date: 2002/11/29 06:44:16 $\n  */\n public class DOMNodePointer extends NodePointer {\n     private Node node;\n             if (node.getNodeType() != Node.ELEMENT_NODE){\n                 return false;\n             }\n+//            System.err.println(\"Testing: \" + ((Element)node).getTagName());\n \n             QName testName = ((NodeNameTest)test).getNodeName();\n             String testLocalName = testName.getName();\n-            if (testLocalName.equals(\"*\") || \n+            boolean wildcard = testLocalName.equals(\"*\"); \n+            String testPrefix = testName.getPrefix();\n+            if (wildcard && testPrefix == null){\n+                return true;\n+            }\n+            \n+            if (wildcard || \n                     testLocalName.equals(DOMNodePointer.getLocalName(node))){\n-                String testPrefix = testName.getPrefix();\n                 String nodePrefix = DOMNodePointer.getPrefix(node);\n                 if (equalStrings(testPrefix, nodePrefix)){\n                     return true;\n     }\n \n     public boolean isLeaf(){\n+        if (node instanceof Element){\n+//            System.err.println(\"HAS CHILD NODES: \" + ((Element)node).getTagName() + \" \" + !node.hasChildNodes());\n+        }\n         return !node.hasChildNodes();\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java,v 1.5 2002/11/26 01:33:34 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/11/26 01:33:34 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java,v 1.6 2002/11/29 06:44:16 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/11/29 06:44:16 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/11/26 01:33:34 $\n+ * @version $Revision: 1.6 $ $Date: 2002/11/29 06:44:16 $\n  */\n public class JDOMNodePointer extends NodePointer {\n     private Object node;\n \n             QName testName = ((NodeNameTest)test).getNodeName();\n             String testLocalName = testName.getName();\n-            if (testLocalName.equals(\"*\") ||\n+            boolean wildcard = testLocalName.equals(\"*\");\n+            if (wildcard && testName.getPrefix() == null){\n+                return true;\n+            }\n+             \n+            if (wildcard ||\n                     testLocalName.equals(\n                             JDOMNodePointer.getLocalName((Element)node))){\n                 String testPrefix = testName.getPrefix();\n--- a/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java,v 1.4 2002/11/26 01:33:35 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/11/26 01:33:35 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java,v 1.5 2002/11/29 06:44:15 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/11/29 06:44:15 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * DOM, JDOM etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/11/26 01:33:35 $\n+ * @version $Revision: 1.5 $ $Date: 2002/11/29 06:44:15 $\n  */\n \n public abstract class XMLModelTestCase extends JXPathTestCase\n         // child:: with the default namespace\n         assertXPathValue(context,\n                 \"count(vendor/product/*)\",\n-                new Double(2));\n+                new Double(4));\n \n         // child:: with a qualified name\n         assertXPathValue(context,\n         assertXPathValue(context,\n                 \"count(//price:*)\",\n                 new Double(2));\n+                \n+        assertXPathValueIterator(context,\n+                \"vendor//saleEnds\",\n+                list(\"never\"));\n+\n+        assertXPathValueIterator(context,\n+                \"vendor//promotion\",\n+                list(\"\"));\n+\n+        assertXPathValueIterator(context,\n+                \"vendor//saleEnds[../@stores = 'all']\",\n+                list(\"never\"));\n+\n+        assertXPathValueIterator(context,\n+                \"vendor//promotion[../@stores = 'all']\",\n+                list(\"\"));\n     }\n \n     public void testAxisParent() {\n                 \"vendor/location[@id='101']//street\",\n                 \"Tangerine Drive\");\n     }\n-\n+    \n     public void testAxisNamespace() {\n         // namespace::\n-        assertXPathValue(context,\n+        assertXPathValueAndPointer(context,\n                 \"vendor/product/prix/namespace::price\",\n-                \"priceNS\");\n-\n-        // namespace:: pointer\n-        assertXPathPointer(context,\n-                \"vendor/product/prix/namespace::price\",\n+                \"priceNS\",\n                 \"/vendor[1]/product[1]/prix[1]/namespace::price\");\n \n         // namespace::*", "timestamp": 1038552256, "metainfo": ""}