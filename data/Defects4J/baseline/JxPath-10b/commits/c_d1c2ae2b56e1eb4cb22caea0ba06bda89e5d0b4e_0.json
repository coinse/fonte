{"sha": "d1c2ae2b56e1eb4cb22caea0ba06bda89e5d0b4e", "log": "Made getNode() a public method on Pointer   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/Pointer.java\n+++ b/src/java/org/apache/commons/jxpath/Pointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/Pointer.java,v 1.3 2002/06/16 03:22:22 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/06/16 03:22:22 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/Pointer.java,v 1.4 2002/08/10 16:13:03 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/10 16:13:03 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * the map, which is the value of the property \"aMap\" of the root object.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/06/16 03:22:22 $\n+ * @version $Revision: 1.4 $ $Date: 2002/08/10 16:13:03 $\n  */\n public interface Pointer {\n \n     /**\n      * Returns the value of the object, property or collection element\n-     * this pointer represents.\n+     * this pointer represents. May convert the value to one of the \n+     * canonical InfoSet types: String, Number, Boolean, Set.\n+     * \n+     * For example, in the case of an XML element, getValue() will\n+     * return the text contained by the element rather than \n+     * the element itself.\n      */\n     Object getValue();\n+\n+    /**\n+     * Returns the raw value of the object, property or collection element\n+     * this pointer represents.  Never converts the object to a\n+     * canonical type: returns it as is. \n+     * \n+     * For example, for an XML element, getNode() will\n+     * return the element itself rather than the text it contains.\n+     */\n+    Object getNode();\n \n     /**\n      * Modifies the value of the object, property or collection element\n--- a/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java,v 1.12 2002/08/10 01:33:58 dmitri Exp $\n- * $Revision: 1.12 $\n- * $Date: 2002/08/10 01:33:58 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java,v 1.13 2002/08/10 16:13:03 dmitri Exp $\n+ * $Revision: 1.13 $\n+ * $Date: 2002/08/10 16:13:03 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * EvalContext that checks predicates.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.12 $ $Date: 2002/08/10 01:33:58 $\n+ * @version $Revision: 1.13 $ $Date: 2002/08/10 16:13:03 $\n  */\n public class PredicateContext extends EvalContext {\n     private Expression expression;\n             else {\n                 Object pred = expression.computeValue(parentContext);\n                 if (pred instanceof NodePointer){\n-                    pred = ((NodePointer)pred).getNodeValue();\n+                    pred = ((NodePointer)pred).getNode();\n                 }\n                 if (pred instanceof Number){\n                     int pos = (int)InfoSetUtil.doubleValue(pred);\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.9 2002/08/10 01:49:46 dmitri Exp $\n- * $Revision: 1.9 $\n- * $Date: 2002/08/10 01:49:46 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.10 2002/08/10 16:13:03 dmitri Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2002/08/10 16:13:03 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * context-independent predicates.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2002/08/10 01:49:46 $\n+ * @version $Revision: 1.10 $ $Date: 2002/08/10 16:13:03 $\n  */\n public abstract class NodePointer implements Pointer, Cloneable, Comparable {\n \n      * If true, this node does not have children\n      */\n     public boolean isLeaf() {\n-        Object value = getNodeValue();\n+        Object value = getNode();\n         return value == null\n             || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();\n     }\n      * return its string value.\n      */\n     public Object getValue() {\n-        return getNodeValue();\n+        return getNode();\n     }\n \n     /**\n     /**\n      * Returns the object the pointer points to; does not convert it\n      * to a \"canonical\" type.\n-     */\n-    public abstract Object getNodeValue();\n-\n+     * \n+     * @deprecated 1.1 Please use getNode()\n+     */\n+    public Object getNodeValue(){\n+    \treturn getNode();\n+    }\n+\n+    /**\n+     * Returns the object the pointer points to; does not convert it\n+     * to a \"canonical\" type.\n+     */\n+    public abstract Object getNode();\n+    \n     /**\n      * Converts the value to the required type and changes the corresponding\n      * object to that value.\n--- a/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java,v 1.5 2002/05/08 23:05:04 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/05/08 23:05:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java,v 1.6 2002/08/10 16:13:03 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/10 16:13:03 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Pointer to a context variable.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/05/08 23:05:04 $\n+ * @version $Revision: 1.6 $ $Date: 2002/08/10 16:13:03 $\n  */\n public class VariablePointer extends NodePointer {\n     private Variables variables;\n         return variables.getVariable(name.getName());\n     }\n \n-    public Object getNodeValue(){\n+    public Object getNode(){\n         Object value = getBaseValue();\n         if (index != WHOLE_COLLECTION){\n             return ValueUtils.getValue(value, index);\n         if (valuePointer == null){\n             Object value = null;\n             if (actual){\n-                value = getNodeValue();\n+                value = getNode();\n             }\n             valuePointer = NodePointer.newChildNodePointer(this, null, value);\n         }\n                 buffer.append('[').append(index + 1).append(']');\n             }\n         }\n-        else if (index != WHOLE_COLLECTION && (getNodeValue() == null || isCollection())){\n+        else if (index != WHOLE_COLLECTION && (getNode() == null || isCollection())){\n             buffer.append('[').append(index + 1).append(']');\n         }\n         return buffer.toString();\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java,v 1.6 2002/08/10 01:44:30 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/08/10 01:44:30 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java,v 1.7 2002/08/10 16:13:04 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/08/10 16:13:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Pointer pointing to a property of a JavaBean.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2002/08/10 01:44:30 $\n+ * @version $Revision: 1.7 $ $Date: 2002/08/10 16:13:04 $\n  */\n public class BeanPropertyPointer extends PropertyPointer {\n     private String propertyName;\n      * property. If the property is not a collection, index should be zero\n      * and the value will be the property itself.\n      */\n-    public Object getNodeValue(){\n+    public Object getNode(){\n         if (value == UNINITIALIZED){\n             PropertyDescriptor pd = getPropertyDescriptor();\n             if (pd == null){\n     }\n \n     public NodePointer createPath(JXPathContext context){\n-        if (getNodeValue() == null){\n+        if (getNode() == null){\n             AbstractFactory factory = getAbstractFactory(context);\n             int inx = (index == WHOLE_COLLECTION ? 0 : index);\n             if (!factory.createObject(context, this, getBean(),\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java,v 1.5 2002/08/10 01:46:19 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/10 01:46:19 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java,v 1.6 2002/08/10 16:13:04 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/10 16:13:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Transparent pointer to a collection (array or Collection).\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/08/10 01:46:19 $\n+ * @version $Revision: 1.6 $ $Date: 2002/08/10 16:13:04 $\n  */\n public class CollectionPointer extends NodePointer {\n     private Object collection;\n         return index == WHOLE_COLLECTION;\n     }\n \n-    public Object getNodeValue(){\n+    public Object getNode(){\n         if (index != WHOLE_COLLECTION){\n             return ValueUtils.getValue(collection, index);\n         }\n                 valuePointer = this;\n             }\n             else {\n-                Object value = getNodeValue();\n+                Object value = getNode();\n                 valuePointer = NodePointer.newChildNodePointer(this, getName(), value);\n             }\n         }\n         else {\n             Object collection = getBaseValue();\n             if (ValueUtils.getLength(collection) <= index){\n-                ValueUtils.expandCollection(getNodeValue(), index + 1);\n+                ValueUtils.expandCollection(getNode(), index + 1);\n             }\n             ValueUtils.setValue(collection, index, value);\n             NodePointer ptr = (NodePointer)clone();\n         else {\n             Object collection = getBaseValue();\n             if (ValueUtils.getLength(collection) <= index){\n-                ValueUtils.expandCollection(getNodeValue(), index + 1);\n+                ValueUtils.expandCollection(getNode(), index + 1);\n             }\n             return this;\n         }\n         else {\n             Object collection = getBaseValue();\n             if (ValueUtils.getLength(collection) <= index){\n-                ValueUtils.expandCollection(getNodeValue(), index + 1);\n+                ValueUtils.expandCollection(getNode(), index + 1);\n             }\n             return this;\n         }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/DynamicPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/DynamicPropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/Attic/DynamicPropertyPointer.java,v 1.7 2002/05/30 01:57:23 dmitri Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/05/30 01:57:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/Attic/DynamicPropertyPointer.java,v 1.8 2002/08/10 16:13:04 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/08/10 16:13:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Pointer pointing to a property of an object with dynamic properties.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2002/05/30 01:57:23 $\n+ * @version $Revision: 1.8 $ $Date: 2002/08/10 16:13:04 $\n  */\n public class DynamicPropertyPointer extends PropertyPointer {\n     private DynamicPropertyHandler handler;\n      * property. If the property is not a collection, index should be zero\n      * and the value will be the property itself.\n      */\n-    public Object getNodeValue(){\n+    public Object getNode(){\n         Object value;\n         if (index == WHOLE_COLLECTION){\n             value = handler.getProperty(getBean(), getPropertyName());\n     }\n \n     public NodePointer createPath(JXPathContext context){\n-        if (getNodeValue() == null){\n+        if (getNode() == null){\n             AbstractFactory factory = getAbstractFactory(context);\n             int inx = (index == WHOLE_COLLECTION ? 0 : index);\n             if (!factory.createObject(context, this, getBean(), getPropertyName(), inx)){\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java,v 1.3 2002/04/26 01:00:37 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/26 01:00:37 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java,v 1.4 2002/08/10 16:13:04 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/10 16:13:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * of the attribute is based on the locale supplied to it in the constructor.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/26 01:00:37 $\n+ * @version $Revision: 1.4 $ $Date: 2002/08/10 16:13:04 $\n  */\n public class LangAttributePointer extends NodePointer {\n     public LangAttributePointer(NodePointer parent){\n         return parent.getLocale().toString().replace('_', '-');\n     }\n \n-    public Object getNodeValue(){\n+    public Object getNode(){\n         return getBaseValue();\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java,v 1.7 2002/08/10 01:49:46 dmitri Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/08/10 01:49:46 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java,v 1.8 2002/08/10 16:13:04 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/08/10 16:13:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * as the parent.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2002/08/10 01:49:46 $\n+ * @version $Revision: 1.8 $ $Date: 2002/08/10 16:13:04 $\n  */\n public class NullElementPointer extends PropertyOwnerPointer {\n \n         return null;\n     }\n \n-    public Object getNodeValue(){\n+    public Object getNode(){\n         return null;\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java,v 1.6 2002/08/10 01:49:46 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/08/10 01:49:46 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java,v 1.7 2002/08/10 16:13:04 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/08/10 16:13:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2002/08/10 01:49:46 $\n+ * @version $Revision: 1.7 $ $Date: 2002/08/10 16:13:04 $\n  */\n public class NullPropertyPointer extends PropertyPointer {\n \n         return null;\n     }\n \n-    public Object getNodeValue(){\n+    public Object getNode(){\n         return null;\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java,v 1.7 2002/08/10 01:49:46 dmitri Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/08/10 01:49:46 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java,v 1.8 2002/08/10 16:13:04 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/08/10 16:13:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * a collection.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2002/08/10 01:49:46 $\n+ * @version $Revision: 1.8 $ $Date: 2002/08/10 16:13:04 $\n  */\n public abstract class PropertyOwnerPointer extends NodePointer {\n \n     private static final Object UNINITIALIZED = new Object();\n \n     private Object value = UNINITIALIZED;\n-    public Object getNodeValue(){\n+    public Object getNode(){\n         if (value == UNINITIALIZED){\n             if (index == WHOLE_COLLECTION){\n                 value = getBaseValue();\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java,v 1.4 2002/05/29 00:40:58 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/05/29 00:40:58 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java,v 1.5 2002/08/10 16:13:04 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/10 16:13:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * a property of the parent object.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/05/29 00:40:58 $\n+ * @version $Revision: 1.5 $ $Date: 2002/08/10 16:13:04 $\n  */\n public abstract class PropertyPointer extends NodePointer {\n     public static int UNSPECIFIED_PROPERTY = Integer.MIN_VALUE;\n \n     public Object getBean(){\n         if (bean == null){\n-            bean = getParent().getNodeValue();\n+            bean = getParent().getNode();\n         }\n         return bean;\n     }\n     private static final Object UNINITIALIZED = new Object();\n \n     private Object value = UNINITIALIZED;\n-    public Object getNodeValue(){\n+    public Object getNode(){\n         if (value == UNINITIALIZED){\n             if (index == WHOLE_COLLECTION){\n                 value = getBaseValue();\n      * selected property value.\n      */\n     public NodePointer getValuePointer(){\n-        return NodePointer.newChildNodePointer(this, getName(), getNodeValue());\n+        return NodePointer.newChildNodePointer(this, getName(), getNode());\n     }\n \n     public int hashCode(){\n--- a/src/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java,v 1.2 2002/04/26 01:00:38 dmitri Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/04/26 01:00:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java,v 1.3 2002/08/10 16:13:04 dmitri Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/10 16:13:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * itself.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.2 $ $Date: 2002/04/26 01:00:38 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/10 16:13:04 $\n  */\n public class ContainerPointer extends NodePointer {\n     private Container container;\n         return container.getValue();\n     }\n \n-    public Object getNodeValue(){\n+    public Object getNode(){\n         Object value = getBaseValue();\n         if (index != WHOLE_COLLECTION){\n-            return ValueUtils.getValue(value, index);\n+            if (index >= 0 && index < getLength()){\n+                return ValueUtils.getValue(value, index);\n+            }\n+            else {\n+                return null;\n+            }\n         }\n         return value;\n     }\n \n     public NodePointer getValuePointer(){\n         if (valuePointer == null){\n-            Object value = getNodeValue();\n+            Object value = getNode();\n             valuePointer = NodePointer.newChildNodePointer(this, getName(), value).getValuePointer();\n         }\n         return valuePointer;\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java,v 1.5 2002/06/18 11:50:35 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/06/18 11:50:35 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java,v 1.6 2002/08/10 16:13:04 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/10 16:13:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * An iterator of attributes of a DOM Node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/06/18 11:50:35 $\n+ * @version $Revision: 1.6 $ $Date: 2002/08/10 16:13:04 $\n  */\n public class DOMAttributeIterator implements NodeIterator {\n     private NodePointer parent;\n         this.parent = parent;\n         this.name = name;\n         attributes = new ArrayList();\n-        Node node = (Node)parent.getNodeValue();\n+        Node node = (Node)parent.getNode();\n         if (node.getNodeType() == Node.ELEMENT_NODE){\n             String lname = name.getName();\n             if (!lname.equals(\"*\")){\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributePointer.java,v 1.5 2002/05/08 23:05:05 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/05/08 23:05:05 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributePointer.java,v 1.6 2002/08/10 16:13:04 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/10 16:13:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/05/08 23:05:05 $\n+ * @version $Revision: 1.6 $ $Date: 2002/08/10 16:13:04 $\n  */\n public class DOMAttributePointer extends NodePointer {\n     private Attr attr;\n         return attr;\n     }\n \n-    public Object getNodeValue(){\n+    public Object getNode(){\n         String value = attr.getValue();\n         if (value == null){\n             return null;\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNamespaceIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNamespaceIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNamespaceIterator.java,v 1.3 2002/04/26 01:00:38 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/26 01:00:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNamespaceIterator.java,v 1.4 2002/08/10 16:13:04 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/10 16:13:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * An iterator of namespaces of a DOM Node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/26 01:00:38 $\n+ * @version $Revision: 1.4 $ $Date: 2002/08/10 16:13:04 $\n  */\n public class DOMNamespaceIterator implements NodeIterator {\n     private NodePointer parent;\n     public DOMNamespaceIterator(NodePointer parent){\n         this.parent = parent;\n         attributes = new ArrayList();\n-        collectNamespaces(attributes, (Node)parent.getNodeValue());\n+        collectNamespaces(attributes, (Node)parent.getNode());\n     }\n \n     private void collectNamespaces(List attributes, Node node){\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java,v 1.4 2002/08/10 01:48:36 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/10 01:48:36 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java,v 1.5 2002/08/10 16:13:04 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/10 16:13:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * An iterator of children of a DOM Node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/08/10 01:48:36 $\n+ * @version $Revision: 1.5 $ $Date: 2002/08/10 16:13:04 $\n  */\n public class DOMNodeIterator implements NodeIterator {\n     private NodePointer parent;\n \n     public DOMNodeIterator(NodePointer parent, NodeTest nodeTest, boolean reverse, NodePointer startWith){\n         this.parent = parent;\n-        this.node = (Node)parent.getNodeValue();\n+        this.node = (Node)parent.getNode();\n         if (startWith != null){\n-            this.child = (Node)startWith.getNodeValue();\n+            this.child = (Node)startWith.getNode();\n         }\n         this.nodeTest = nodeTest;\n         this.reverse = reverse;\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java,v 1.7 2002/06/08 22:47:25 dmitri Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/06/08 22:47:25 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java,v 1.8 2002/08/10 16:13:04 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/08/10 16:13:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2002/06/08 22:47:25 $\n+ * @version $Revision: 1.8 $ $Date: 2002/08/10 16:13:04 $\n  */\n public class DOMNodePointer extends NodePointer {\n     private Node node;\n         return node;\n     }\n \n-    public Object getNodeValue(){\n+    public Object getNode(){\n         return node;\n     }\n \n             return 1;\n         }\n         else if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE){\n-            NamedNodeMap map = ((Node)getNodeValue()).getAttributes();\n+            NamedNodeMap map = ((Node)getNode()).getAttributes();\n             int length = map.getLength();\n             for (int i = 0; i < length; i++){\n                 Node n = map.item(i);\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java,v 1.4 2002/05/29 00:40:58 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/05/29 00:40:58 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java,v 1.5 2002/08/10 16:13:04 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/10 16:13:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Represents a namespace node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/05/29 00:40:58 $\n+ * @version $Revision: 1.5 $ $Date: 2002/08/10 16:13:04 $\n  */\n public class NamespacePointer extends NodePointer {\n     private String prefix;\n         return null;\n     }\n \n-    public Object getNodeValue(){\n+    public Object getNode(){\n         return getNamespaceURI();\n     }\n ", "timestamp": 1028995984, "metainfo": ""}