{"sha": "f2a27fe7e7f663e44314e846f3b8ba3bdff1f902", "log": "Fixed this bug: setLenient(true) did not have the advertised effect in some cases   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.21 2002/08/26 22:29:49 dmitri Exp $\n- * $Revision: 1.21 $\n- * $Date: 2002/08/26 22:29:49 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.22 2002/10/13 02:26:50 dmitri Exp $\n+ * $Revision: 1.22 $\n+ * $Date: 2002/10/13 02:26:50 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * The reference implementation of JXPathContext.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.21 $ $Date: 2002/08/26 22:29:49 $\n+ * @version $Revision: 1.22 $ $Date: 2002/10/13 02:26:50 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext\n {\n \n     public Object getValue(String xpath, Expression expr){\n         Object result = expr.computeValue(getRootContext());\n-        if (result == null && !lenient){\n-            throw new JXPathException(\"No value for xpath: \" + xpath);\n-        }\n-\n         if (result instanceof EvalContext){\n             EvalContext ctx = (EvalContext)result;\n             result = ctx.getSingleNodePointer();\n+            if (!lenient && result == null){\n+                throw new JXPathException(\"No value for xpath: \" + xpath);\n+            }\n         }\n         if (result instanceof NodePointer){\n+            if (!lenient && !((NodePointer)result).isActual()){\n+                // We need to differentiate between pointers representing\n+                // a non-existing property and one representing a property\n+                // whose value is null.  In the latter case, the pointer\n+                // is going to have isActual == false, but its parent,\n+                // which is a non-node pointer identifying the bean property,\n+                // will return isActual() == true.\n+                NodePointer parent = ((NodePointer)result).getParent();\n+                if (parent == null || parent.isNode() || !parent.isActual()){\n+                    throw new JXPathException(\"No value for xpath: \" + xpath);\n+                }\n+            }\n             result = ((NodePointer)result).getValue();\n         }\n         return result;", "timestamp": 1034476010, "metainfo": ""}