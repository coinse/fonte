{"sha": "da8e4fc3fba1fc8ad7be0aef040702e53a25b412", "log": "Removed commented out code   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java,v 1.3 2002/04/26 01:00:38 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/26 01:00:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java,v 1.4 2002/08/10 01:48:36 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/10 01:48:36 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * An iterator of children of a DOM Node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/26 01:00:38 $\n+ * @version $Revision: 1.4 $ $Date: 2002/08/10 01:48:36 $\n  */\n public class DOMNodeIterator implements NodeIterator {\n     private NodePointer parent;\n     private boolean testChild(){\n         return DOMNodePointer.testNode(parent, child, nodeTest);\n     }\n-/*\n-    public NodePointer getNodePointer(){\n-        if (child == null){\n-            if (!setPosition(1)){\n-                return null;\n-            }\n-            position = 0;\n-        }\n-\n-        if (children){\n-            return new DOMNodePointer(parent, child);\n-        }\n-        else {\n-            return new DOMNodePointer(parent.getParent(), child);\n-        }\n-    }\n-\n-    public int getPosition(){\n-        return position;\n-    }\n-\n-    public boolean setPosition(int position){\n-        while (this.position < position){\n-            if (!next()){\n-                return false;\n-            }\n-        }\n-        while (this.position > position){\n-            if (!previous()){\n-                return false;\n-            }\n-        }\n-//        System.err.println(getNodePointer().asPath() + \" SET POSITION: \" + position);\n-        return true;\n-    }\n-\n-    private boolean previous(){\n-        position--;\n-        if (!reverse){\n-            child = child.getPreviousSibling();\n-            while (child != null && !testChild()){\n-                child = child.getPreviousSibling();\n-            }\n-        }\n-        else {\n-            child = child.getNextSibling();\n-            while (child != null && !testChild()){\n-                child = child.getNextSibling();\n-            }\n-        }\n-        return child != null;\n-    }\n-\n-    private boolean next(){\n-        position++;\n-        if (!reverse){\n-            if (position == 1){\n-                if (children){\n-                    child = node.getFirstChild();\n-                }\n-                else {\n-                    child = node.getNextSibling();\n-                }\n-            }\n-            else {\n-                child = child.getNextSibling();\n-            }\n-            while (child != null && !testChild()){\n-                child = child.getNextSibling();\n-            }\n-        }\n-        else {\n-            if (position == 1){\n-                if (children){\n-                    child = node.getLastChild();\n-                }\n-                else {\n-                    child = node.getPreviousSibling();\n-                }\n-            }\n-            else {\n-                child = child.getPreviousSibling();\n-            }\n-            while (child != null && !testChild()){\n-                child = child.getPreviousSibling();\n-            }\n-        }\n-        return child != null;\n-    }\n-\n-    private boolean testChild(){\n-        return DOMNodePointer.testNode(parent, child, nodeTest);\n-    }\n-    */\n }", "timestamp": 1028944116, "metainfo": ""}