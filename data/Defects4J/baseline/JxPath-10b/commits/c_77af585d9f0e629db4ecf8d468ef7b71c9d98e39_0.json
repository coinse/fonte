{"sha": "77af585d9f0e629db4ecf8d468ef7b71c9d98e39", "log": "Fixed collection as return value of extension function Reduced the amount of cloning   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/BasicNodeSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/BasicNodeSet.java,v 1.1 2003/03/25 02:41:33 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/03/25 02:41:33 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * A simple implementation of NodeSet that behaves as a collection of pointers. \n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/03/25 02:41:33 $\n+ */\n+public class BasicNodeSet implements NodeSet {\n+    private List pointers = new ArrayList();\n+    private List readOnlyPointers;\n+    private List nodes;\n+    private List values;\n+\n+    public void add(Pointer pointer) {\n+        pointers.add(pointer);\n+        readOnlyPointers = null;\n+    }\n+    \n+    public void remove(Pointer pointer) {\n+        pointers.remove(pointer);\n+        readOnlyPointers = null;\n+    }\n+    \n+    public List getPointers() {\n+        if (readOnlyPointers == null) {\n+            readOnlyPointers = Collections.unmodifiableList(pointers);\n+        }\n+        return readOnlyPointers;\n+    }\n+\n+    public List getNodes() {\n+        if (nodes == null) {\n+            nodes = new ArrayList();\n+            for (int i = 0; i < pointers.size(); i++) {\n+                Pointer pointer = (Pointer) pointers.get(i);\n+                nodes.add(pointer.getValue());\n+            }\n+            nodes = Collections.unmodifiableList(nodes);\n+        }\n+        return nodes;\n+    }\n+\n+    public List getValues() {\n+        if (values == null) {\n+            values = new ArrayList();\n+            for (int i = 0; i < pointers.size(); i++) {\n+                Pointer pointer = (Pointer) pointers.get(i);\n+                values.add(pointer.getValue());\n+            }\n+            values = Collections.unmodifiableList(values);\n+        }\n+        return values;\n+    }\n+    \n+    public String toString() {\n+        return pointers.toString();\n+    }\n+}\n--- a/src/java/org/apache/commons/jxpath/ri/EvalContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/EvalContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/EvalContext.java,v 1.23 2003/03/11 00:59:18 dmitri Exp $\n- * $Revision: 1.23 $\n- * $Date: 2003/03/11 00:59:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/EvalContext.java,v 1.24 2003/03/25 02:41:33 dmitri Exp $\n+ * $Revision: 1.24 $\n+ * $Date: 2003/03/25 02:41:33 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import java.util.List;\n import java.util.NoSuchElementException;\n \n+import org.apache.commons.jxpath.BasicNodeSet;\n import org.apache.commons.jxpath.ExpressionContext;\n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathException;\n  * implement behavior of various XPath axes: \"child::\", \"parent::\" etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.23 $ $Date: 2003/03/11 00:59:18 $\n+ * @version $Revision: 1.24 $ $Date: 2003/03/25 02:41:33 $\n  */\n public abstract class EvalContext implements ExpressionContext, Iterator {\n     protected EvalContext parentContext;\n                 throw new NoSuchElementException();\n             }\n             hasPerformedIteratorStep = false;\n-            return (NodePointer) getCurrentNodePointer().clone();\n+            return getCurrentNodePointer();\n         }\n     }\n \n             while (nextNode()) {\n                 NodePointer pointer = getCurrentNodePointer();\n                 if (!set.contains(pointer)) {\n-                    Pointer cln = (Pointer) pointer.clone();\n-                    set.add(cln);\n-                    list.add(cln);\n+//                    Pointer cln = (Pointer) pointer.clone();\n+                    set.add(pointer);\n+                    list.add(pointer);\n                 }\n             }\n         }\n                     + \"should not request pointer list while \"\n                     + \"iterating over an EvalContext\");\n         }\n-        \n-        return new SimpleNodeSet();\n+        BasicNodeSet set = new BasicNodeSet();\n+        while (nextSet()) {\n+            while (nextNode()) {\n+                set.add(getCurrentNodePointer());\n+            }\n+        }\n+\n+        return set;\n     }\n \n     public String toString() {\n         this.position = position;\n         return true;\n     }\n-    \n-    class SimpleNodeSet implements NodeSet {\n-        private List pointers;\n-        private List nodes;\n-        private List values;\n-\n-        public SimpleNodeSet() {\n-            pointers = new ArrayList();\n-            while (nextSet()) {\n-                while (nextNode()) {\n-                    pointers.add(getCurrentNodePointer());\n-                }\n-            }\n-        }\n-\n-        public List getPointers() {\n-            return Collections.unmodifiableList(pointers);\n-        }\n-\n-        public List getNodes() {\n-            if (nodes == null) {\n-                List pointers = getPointers();\n-                nodes = new ArrayList();\n-                for (int i = 0; i < pointers.size(); i++) {\n-                    Pointer pointer = (Pointer) pointers.get(i);\n-                    nodes.add(pointer.getValue());\n-                }\n-                nodes = Collections.unmodifiableList(nodes);\n-            }\n-            return nodes;\n-        }\n-\n-        public List getValues() {\n-            if (values == null) {\n-                List pointers = getPointers();\n-                values = new ArrayList();\n-                for (int i = 0; i < pointers.size(); i++) {\n-                    Pointer pointer = (Pointer) pointers.get(i);\n-                    values.add(pointer.getValue());\n-                }\n-                values = Collections.unmodifiableList(values);\n-            }\n-            return values;\n-        }\n-    }\n-    \n }\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.30 2003/03/11 00:59:18 dmitri Exp $\n- * $Revision: 1.30 $\n- * $Date: 2003/03/11 00:59:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.31 2003/03/25 02:41:33 dmitri Exp $\n+ * $Revision: 1.31 $\n+ * $Date: 2003/03/25 02:41:33 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * The reference implementation of JXPathContext.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.30 $ $Date: 2003/03/11 00:59:18 $\n+ * @version $Revision: 1.31 $ $Date: 2003/03/25 02:41:33 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext {\n     \n     /**\n-     * Change this to <code>false</code> to disable soft caching of CompiledExpressions. \n+     * Change this to <code>false</code> to disable soft caching of \n+     * CompiledExpressions. \n      */\n     public static final boolean USE_SOFT_CACHE = true;\n     \n      * \n      * Override this to return an aternate compiler.\n      */\n-    protected Compiler getCompiler(){\n+    protected Compiler getCompiler() {\n         return COMPILER;\n-        \n     }\n     \n     protected CompiledExpression compilePath(String xpath) {\n             if (expr == null) {\n                 expr =\n                     (Expression) Parser.parseExpression(xpath, getCompiler());\n-                compiled.put(xpath, new SoftReference(expr));\n+                synchronized (compiled) {\n+                    compiled.put(xpath, new SoftReference(expr));\n+                }\n                 if (cleanupCount++ >= CLEANUP_THRESHOLD) {\n                     cleanupCache();\n                 }\n     }\n \n     private static void cleanupCache() {\n-        Iterator it = compiled.entrySet().iterator();\n-        while (it.hasNext()) {\n-            Map.Entry me = (Map.Entry) it.next();\n-            if (((SoftReference) me.getValue()).get() == null) {\n-                it.remove();\n-            }\n-        }\n-        cleanupCount = 0;\n+        synchronized (compiled) {\n+            Iterator it = compiled.entrySet().iterator();\n+            while (it.hasNext()) {\n+                Map.Entry me = (Map.Entry) it.next();\n+                if (((SoftReference) me.getValue()).get() == null) {\n+                    it.remove();\n+                }\n+            }\n+            cleanupCount = 0;\n+        }\n     }\n \n     /**\n         }\n     }\n \n-    public JXPathContext getRelativeContext(Pointer pointer){\n+    public JXPathContext getRelativeContext(Pointer pointer) {\n         Object contextBean = pointer.getNode();\n         if (contextBean == null) {\n             throw new JXPathException(\n     }\n     \n     public synchronized Pointer getContextPointer() {\n-        return (Pointer) contextPointer.clone();\n+        return contextPointer;\n     }\n \n     private synchronized NodePointer getAbsoluteRootPointer() {\n-        return (NodePointer) rootPointer.clone();\n+        return (NodePointer) rootPointer;\n     }\n \n     private EvalContext getEvalContext() {\n--- a/src/java/org/apache/commons/jxpath/ri/axes/InitialContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/InitialContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/InitialContext.java,v 1.10 2003/03/11 00:59:20 dmitri Exp $\n- * $Revision: 1.10 $\n- * $Date: 2003/03/11 00:59:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/InitialContext.java,v 1.11 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2003/03/25 02:41:34 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * on to the parent context.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.10 $ $Date: 2003/03/11 00:59:20 $\n+ * @version $Revision: 1.11 $ $Date: 2003/03/25 02:41:34 $\n  */\n public class InitialContext extends EvalContext {\n     private boolean startedSet = false;\n \n     public InitialContext(EvalContext parentContext) {\n         super(parentContext);\n-        nodePointer = parentContext.getCurrentNodePointer();\n+        nodePointer =\n+            (NodePointer) parentContext.getCurrentNodePointer().clone();\n         if (nodePointer != null) {\n             collection =\n                 (nodePointer.getIndex() == NodePointer.WHOLE_COLLECTION);\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/NodeSetContext.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/NodeSetContext.java,v 1.1 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/03/25 02:41:34 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.axes;\n+\n+import org.apache.commons.jxpath.NodeSet;\n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.model.NodePointer;\n+\n+/**\n+ * A simple context that is based on a NodeSet.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/03/25 02:41:34 $\n+ */\n+public class NodeSetContext extends EvalContext {\n+    private boolean startedSet = false;\n+    private NodeSet nodeSet;\n+\n+    public NodeSetContext(EvalContext parentContext, NodeSet nodeSet) {\n+        super(parentContext);\n+        this.nodeSet = nodeSet;\n+    }\n+    \n+    public NodeSet getNodeSet() {\n+        return nodeSet;\n+    }\n+\n+    public NodePointer getCurrentNodePointer() {\n+        if (position == 0) {\n+            if (!setPosition(1)) {\n+                return null;\n+            }\n+        }\n+        return (NodePointer) nodeSet.getPointers().get(position - 1);\n+    }\n+\n+    public boolean setPosition(int position) {\n+        super.setPosition(position);\n+        return position >= 1 && position <= nodeSet.getPointers().size();\n+    }\n+\n+    public boolean nextSet() {\n+        if (startedSet) {\n+            return false;\n+        }\n+        startedSet = true;\n+        return true;\n+    }\n+\n+    public boolean nextNode() {\n+        return setPosition(position + 1);\n+    }\n+}\n--- a/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java,v 1.18 2003/03/11 00:59:20 dmitri Exp $\n- * $Revision: 1.18 $\n- * $Date: 2003/03/11 00:59:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java,v 1.19 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.19 $\n+ * $Date: 2003/03/25 02:41:34 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * EvalContext that checks predicates.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.18 $ $Date: 2003/03/11 00:59:20 $\n+ * @version $Revision: 1.19 $ $Date: 2003/03/25 02:41:34 $\n  */\n public class PredicateContext extends EvalContext {\n     private Expression expression;\n             return false;\n         }\n         dynamicPropertyPointer =\n-            ((PropertyOwnerPointer) parent).getPropertyPointer();\n+            (PropertyPointer) ((PropertyOwnerPointer) parent)\n+                .getPropertyPointer()\n+                .clone();\n         return true;\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/axes/RootContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/RootContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/RootContext.java,v 1.11 2003/03/11 00:59:20 dmitri Exp $\n- * $Revision: 1.11 $\n- * $Date: 2003/03/11 00:59:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/RootContext.java,v 1.12 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.12 $\n+ * $Date: 2003/03/25 02:41:34 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.jxpath.Function;\n import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.NodeSet;\n import org.apache.commons.jxpath.ri.EvalContext;\n import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;\n import org.apache.commons.jxpath.ri.QName;\n  * EvalContext that is used to hold the root node for the path traversal.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.11 $ $Date: 2003/03/11 00:59:20 $\n+ * @version $Revision: 1.12 $ $Date: 2003/03/25 02:41:34 $\n  */\n public class RootContext extends EvalContext {\n     private JXPathContextReferenceImpl jxpathContext;\n     }\n \n     public EvalContext getConstantContext(Object constant) {\n+        if (constant instanceof NodeSet) {\n+            return new NodeSetContext(\n+                new RootContext(jxpathContext, null),\n+                (NodeSet) constant);\n+        }\n+                \n         NodePointer pointer;\n         if (constant instanceof NodePointer) {\n             pointer = (NodePointer) constant;\n--- a/src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java\n             // execute remaining steps for each node,\n             // looking for the best quality match\n             int bestQuality = 0;\n+            childPointer = (NodePointer) childPointer.clone();\n             NodePointer bestMatch = null;\n             int count = childPointer.getLength();\n             for (int i = 0; i < count; i++) {\n             //  if so - proceed to the next predicate\n             NodePointer bestMatch = null;\n             int bestQuality = 0;\n+            child = (NodePointer) child.clone();\n             int count = child.getLength();\n             for (int i = 0; i < count; i++) {\n                 child.setIndex(i);\n                 NodePointer valuePointer = valuePointer(child);\n-                if (valuePointer == child) {\n-                    valuePointer = (NodePointer) child.clone();\n-                }\n                 NodePointer pointer;\n                 if ((valuePointer instanceof PropertyOwnerPointer)\n                     || valuePointer.isCollection()) {\n         int index = indexFromPredicate(context, predicate);\n         NodePointer pointer = parent;\n         if (isCollectionElement(pointer, index)) {\n+            pointer = (NodePointer) pointer.clone();\n             pointer.setIndex(index);\n             return doPredicate(\n                 context,\n--- a/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java,v 1.9 2003/03/11 00:59:20 dmitri Exp $\n- * $Revision: 1.9 $\n- * $Date: 2003/03/11 00:59:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java,v 1.10 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2003/03/25 02:41:34 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.jxpath.ri.axes;\n \n-import java.util.ArrayList;\n import java.util.HashSet;\n-import java.util.List;\n \n+import org.apache.commons.jxpath.BasicNodeSet;\n import org.apache.commons.jxpath.ri.EvalContext;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n \n  * of a union operation like (a | b)\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2003/03/11 00:59:20 $\n+ * @version $Revision: 1.10 $ $Date: 2003/03/25 02:41:34 $\n  */\n-public class UnionContext extends EvalContext {\n+public class UnionContext extends NodeSetContext {\n     private boolean startedSet = false;\n     private EvalContext contexts[];\n-    private List list;\n+    private boolean prepared = false;\n \n     public UnionContext(EvalContext parentContext, EvalContext contexts[]) {\n-        super(parentContext);\n+        super(parentContext, new BasicNodeSet());\n         this.contexts = contexts;\n     }\n \n         return super.getDocumentOrder();\n     }\n \n-    public NodePointer getCurrentNodePointer() {\n-        if (position == 0) {\n-            if (!setPosition(1)) {\n-                return null;\n-            }\n-        }\n-        return (NodePointer) list.get(position - 1);\n-    }\n-\n     public boolean setPosition(int position) {\n-        super.setPosition(position);\n-        if (list == null) {\n-            prepareList();\n-        }\n-        return position >= 1 && position <= list.size();\n-    }\n-\n-    public boolean nextSet() {\n-        if (startedSet) {\n-            return false;\n-        }\n-        startedSet = true;\n-        return true;\n-    }\n-\n-    public boolean nextNode() {\n-        return setPosition(position + 1);\n-    }\n-\n-    private void prepareList() {\n-        list = new ArrayList();\n-        HashSet set = new HashSet();\n-        for (int i = 0; i < contexts.length; i++) {\n-            EvalContext ctx = (EvalContext) contexts[i];\n-            while (ctx.nextSet()) {\n-                while (ctx.nextNode()) {\n-                    NodePointer ptr = ctx.getCurrentNodePointer();\n-                    if (!set.contains(ptr)) {\n-                        ptr = (NodePointer) ptr.clone();\n-                        list.add(ptr);\n-                        set.add(ptr);\n+        if (!prepared) {\n+            prepared = true;\n+            BasicNodeSet nodeSet = (BasicNodeSet) getNodeSet();\n+            HashSet set = new HashSet();\n+            for (int i = 0; i < contexts.length; i++) {\n+                EvalContext ctx = (EvalContext) contexts[i];\n+                while (ctx.nextSet()) {\n+                    while (ctx.nextNode()) {\n+                        NodePointer ptr = ctx.getCurrentNodePointer();\n+                        if (!set.contains(ptr)) {\n+                            nodeSet.add(ptr);\n+                            set.add(ptr);\n+                        }\n                     }\n                 }\n             }\n         }\n+        return super.setPosition(position);\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/ExpressionPath.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/ExpressionPath.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/ExpressionPath.java,v 1.8 2003/03/11 00:59:22 dmitri Exp $\n- * $Revision: 1.8 $\n- * $Date: 2003/03/11 00:59:22 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/ExpressionPath.java,v 1.9 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2003/03/25 02:41:34 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.jxpath.ri.EvalContext;\n import org.apache.commons.jxpath.ri.axes.InitialContext;\n+import org.apache.commons.jxpath.ri.axes.NodeSetContext;\n import org.apache.commons.jxpath.ri.axes.PredicateContext;\n import org.apache.commons.jxpath.ri.axes.SimplePathInterpreter;\n import org.apache.commons.jxpath.ri.axes.UnionContext;\n  * /bar</code>.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.8 $ $Date: 2003/03/11 00:59:22 $\n+ * @version $Revision: 1.9 $ $Date: 2003/03/25 02:41:34 $\n  */\n public class ExpressionPath extends Path {\n \n \n         if (firstMatch\n             && isSimpleExpressionPath()\n-            && !(context instanceof UnionContext)) {\n+            && !(context instanceof NodeSetContext)) {\n             EvalContext ctx = context;\n             NodePointer ptr = (NodePointer) ctx.getSingleNodePointer();\n             if (ptr != null\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.17 2003/03/11 00:59:23 dmitri Exp $\n- * $Revision: 1.17 $\n- * $Date: 2003/03/11 00:59:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.18 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.18 $\n+ * $Date: 2003/03/25 02:41:34 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * attribute and only simple, context-independent predicates.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.17 $ $Date: 2003/03/11 00:59:23 $\n+ * @version $Revision: 1.18 $ $Date: 2003/03/25 02:41:34 $\n  */\n public abstract class NodePointer implements Pointer {\n \n         return getValuePointer().getImmediateNode();\n     }\n     \n-    public Object getRootNode(){\n+    public Object getRootNode() {\n         if (rootNode == null) {\n-            if (parent != null){\n+            if (parent != null) {\n                 rootNode = parent.getRootNode();\n             }\n             else {\n             }\n             QName testName = ((NodeNameTest) test).getNodeName();\n             QName nodeName = getName();\n+            if (nodeName == null) {\n+                return false;\n+            }\n+            \n             String testPrefix = testName.getPrefix();\n             String nodePrefix = nodeName.getPrefix();\n             if (!equalStrings(testPrefix, nodePrefix)) {\n--- a/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java,v 1.14 2003/03/11 00:59:23 dmitri Exp $\n- * $Revision: 1.14 $\n- * $Date: 2003/03/11 00:59:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java,v 1.15 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.15 $\n+ * $Date: 2003/03/25 02:41:34 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Pointer to a context variable.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.14 $ $Date: 2003/03/11 00:59:23 $\n+ * @version $Revision: 1.15 $ $Date: 2003/03/25 02:41:34 $\n  */\n public class VariablePointer extends NodePointer {\n     private Variables variables;\n                 throw new JXPathException(\n                     \"Factory could not create object path: \" + asPath());\n             }\n-            setIndex(index);\n+            NodePointer cln = (NodePointer) clone();\n+            cln.setIndex(index);\n+            return cln;\n         }\n         return this;\n     }\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionAttributeNodeIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionAttributeNodeIterator.java,v 1.1 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/03/25 02:41:34 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */package org.apache.commons.jxpath.ri.model.beans;\n+\n+import org.apache.commons.jxpath.ri.QName;\n+import org.apache.commons.jxpath.ri.model.NodeIterator;\n+import org.apache.commons.jxpath.ri.model.NodePointer;\n+\n+/**\n+ * Combines attribute node iterators of all elements of a collection into one\n+ * aggregate attribute node iterator.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/03/25 02:41:34 $\n+ */\n+public class CollectionAttributeNodeIterator extends CollectionNodeIterator {\n+\n+    private QName name;\n+\n+    public CollectionAttributeNodeIterator(\n+        CollectionPointer pointer,\n+        QName name) \n+    {\n+        super(pointer, false, null);\n+        this.name = name;\n+    }\n+\n+    protected NodeIterator getElementNodeIterator(NodePointer elementPointer) {\n+        return elementPointer.attributeIterator(name);\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionChildNodeIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionChildNodeIterator.java,v 1.1 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/03/25 02:41:34 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */package org.apache.commons.jxpath.ri.model.beans;\n+\n+import org.apache.commons.jxpath.ri.compiler.NodeTest;\n+import org.apache.commons.jxpath.ri.model.NodeIterator;\n+import org.apache.commons.jxpath.ri.model.NodePointer;\n+\n+/**\n+ * Combines child node iterators of all elements of a collection into one\n+ * aggregate child node iterator.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/03/25 02:41:34 $\n+ */\n+public class CollectionChildNodeIterator extends CollectionNodeIterator {\n+\n+    private NodeTest test;\n+\n+    public CollectionChildNodeIterator(\n+        CollectionPointer pointer,\n+        NodeTest test,\n+        boolean reverse,\n+        NodePointer startWith) \n+    {\n+        super(pointer, reverse, startWith);\n+        this.test = test;\n+    }\n+\n+    protected NodeIterator getElementNodeIterator(NodePointer elementPointer) {\n+        return elementPointer.childIterator(test, false, null);\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionNodeIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionNodeIterator.java,v 1.1 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/03/25 02:41:34 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */package org.apache.commons.jxpath.ri.model.beans;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.jxpath.JXPathException;\n+import org.apache.commons.jxpath.ri.model.NodeIterator;\n+import org.apache.commons.jxpath.ri.model.NodePointer;\n+\n+/**\n+ * Combines node iterators of all elements of a collection into one\n+ * aggregate node iterator.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/03/25 02:41:34 $\n+ */\n+public abstract class CollectionNodeIterator implements NodeIterator {\n+    private CollectionPointer pointer;\n+    private boolean reverse;\n+    private NodePointer startWith; \n+    private int position;\n+    private List collection;\n+\n+    protected CollectionNodeIterator(\n+        CollectionPointer pointer,\n+        boolean reverse,\n+        NodePointer startWith) \n+    {\n+        this.pointer = pointer;\n+        this.reverse = reverse;\n+        this.startWith = startWith;\n+    }\n+    \n+    /**\n+     * Implemened by subclasses to produce child/attribute node iterators.\n+     */\n+    protected abstract NodeIterator \n+            getElementNodeIterator(NodePointer elementPointer);\n+\n+    public int getPosition() {\n+        return position;\n+    }\n+\n+    public boolean setPosition(int position) {\n+        if (collection == null) {\n+            prepare();\n+        }\n+        \n+        if (position < 1 || position > collection.size()) {\n+            return false;\n+        }\n+        this.position = position;\n+        return true;\n+    }\n+\n+    public NodePointer getNodePointer() {\n+        if (position == 0) {\n+            return null;\n+        }\n+        return (NodePointer) collection.get(position - 1);\n+    }\n+    \n+    private void prepare() {\n+        collection = new ArrayList();\n+        NodePointer ptr = (NodePointer) pointer.clone();\n+        int length = ptr.getLength();\n+        for (int i = 0; i < length; i++) {\n+            ptr.setIndex(i);\n+            NodePointer elementPointer = ptr.getValuePointer();\n+            NodeIterator iter = getElementNodeIterator(elementPointer);\n+\n+            for (int j = 1; iter.setPosition(j); j++) {\n+                NodePointer childPointer = iter.getNodePointer();\n+                if (reverse) {\n+                    collection.add(0, childPointer);\n+                }\n+                else {\n+                    collection.add(childPointer);\n+                }\n+            }\n+        }\n+        if (startWith != null) {\n+            int index = collection.indexOf(startWith);\n+            if (index == -1) {\n+                throw new JXPathException(\n+                    \"Invalid starting pointer for iterator: \" + startWith);\n+            }\n+            while (collection.size() > index) {\n+                if (!reverse) {\n+                    collection.remove(collection.size() - 1);\n+                }\n+                else {\n+                    collection.remove(0);\n+                }\n+            }\n+        }\n+    }\n+}\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java,v 1.14 2003/03/11 00:59:25 dmitri Exp $\n- * $Revision: 1.14 $\n- * $Date: 2003/03/11 00:59:25 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java,v 1.15 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.15 $\n+ * $Date: 2003/03/25 02:41:34 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Transparent pointer to a collection (array or Collection).\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.14 $ $Date: 2003/03/11 00:59:25 $\n+ * @version $Revision: 1.15 $ $Date: 2003/03/25 02:41:34 $\n  */\n public class CollectionPointer extends NodePointer {\n     private Object collection;\n                 boolean reverse, NodePointer startWith)\n     {\n         if (index == WHOLE_COLLECTION) {\n-            return null;\n-        }\n-        return getValuePointer().childIterator(test, reverse, startWith);\n+            return new CollectionChildNodeIterator(\n+                this,\n+                test,\n+                reverse,\n+                startWith);\n+        }\n+        else {\n+            return getValuePointer().childIterator(test, reverse, startWith);\n+        }\n     }\n \n     public NodeIterator attributeIterator(QName name) {\n         if (index == WHOLE_COLLECTION) {\n-            return null;\n+            return new CollectionAttributeNodeIterator(this, name);\n         }\n         return getValuePointer().attributeIterator(name);\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java,v 1.9 2003/03/11 00:59:25 dmitri Exp $\n- * $Revision: 1.9 $\n- * $Date: 2003/03/11 00:59:25 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java,v 1.10 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2003/03/25 02:41:34 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Examples of such objects are JavaBeans and objects with Dynamic Properties.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2003/03/11 00:59:25 $\n+ * @version $Revision: 1.10 $ $Date: 2003/03/25 02:41:34 $\n  */\n public class PropertyIterator implements NodeIterator {\n     private boolean empty = false;\n         boolean reverse,\n         NodePointer startWith) \n     {\n-        propertyNodePointer = pointer.getPropertyPointer();\n+        propertyNodePointer =\n+            (PropertyPointer) pointer.getPropertyPointer().clone();\n         this.name = name;\n         this.reverse = reverse;\n         this.includeStart = true;\n             }\n         }\n         try {\n-            NodePointer clone = (NodePointer) propertyNodePointer.clone();\n-            return clone.getValuePointer();\n+            return propertyNodePointer.getValuePointer();\n         }\n         catch (Throwable ex) {\n             // @todo: should this exception be reported in any way?\n--- a/src/java/org/apache/commons/jxpath/util/BasicTypeConverter.java\n+++ b/src/java/org/apache/commons/jxpath/util/BasicTypeConverter.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/util/BasicTypeConverter.java,v 1.7 2003/03/11 00:59:34 dmitri Exp $\n- * $Revision: 1.7 $\n- * $Date: 2003/03/11 00:59:34 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/util/BasicTypeConverter.java,v 1.8 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2003/03/25 02:41:34 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * The default implementation of TypeConverter.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2003/03/11 00:59:34 $\n+ * @version $Revision: 1.8 $ $Date: 2003/03/25 02:41:34 $\n  */\n public class BasicTypeConverter implements TypeConverter {\n \n             else if (Collection.class.isAssignableFrom(toType)) {\n                 return canCreateCollection(toType);\n             }\n-            else if (Array.getLength(object) == 1) {\n-                Object value = Array.get(object, 0);\n-                return canConvert(value, toType);\n+            else {\n+                if (Array.getLength(object) > 0) {\n+                    Object value = Array.get(object, 0);\n+                    return canConvert(value, toType);\n+                }\n+                else {\n+                    return canConvert(\"\", toType);\n+                }\n             }\n         }\n         else if (object instanceof Collection) {\n             else if (Collection.class.isAssignableFrom(toType)) {\n                 return canCreateCollection(toType);\n             }\n-            else if (((Collection) object).size() == 1) {\n-                Object value;\n-                if (object instanceof List) {\n-                    value = ((List) object).get(0);\n+            else {\n+                if (((Collection) object).size() > 0) {\n+                    Object value;\n+                    if (object instanceof List) {\n+                        value = ((List) object).get(0);\n+                    }\n+                    else {\n+                        Iterator it = ((Collection) object).iterator();\n+                        value = it.next();\n+                    }\n+                    return canConvert(value, toType);\n                 }\n                 else {\n-                    Iterator it = ((Collection) object).iterator();\n-                    value = it.next();\n-                }\n-                return canConvert(value, toType);\n+                    return canConvert(\"\", toType);\n+                }\n             }\n         }\n         else if (object instanceof NodeSet) {\n         }\n         return false;\n     }\n+\n     /**\n      * Converts the supplied object to the specified\n      * type. Throws a runtime exception if the conversion is\n             return object;\n         }\n \n-        if (toType == String.class) {\n-            return object.toString();\n-        }\n-\n-        if (object instanceof Boolean) {\n-            if (toType == boolean.class) {\n-                return object;\n-            }\n-            boolean value = ((Boolean) object).booleanValue();\n-            return allocateNumber(toType, value ? 1 : 0);\n-        }\n-        else if (object instanceof Number) {\n-            double value = ((Number) object).doubleValue();\n-            if (toType == boolean.class || toType == Boolean.class) {\n-                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n-            }\n-            if (toType.isPrimitive()\n-                || Number.class.isAssignableFrom(toType)) {\n-                return allocateNumber(toType, value);\n-            }\n-        }\n-        else if (object instanceof Character) {\n-            if (toType == char.class) {\n-                return object;\n-            }\n-        }\n-        else if (object instanceof String) {\n-            Object value = convertStringToPrimitive(object, toType);\n-            if (value != null) {\n-                return value;\n-            }\n-        }\n-        else if (fromType.isArray()) {\n+        if (fromType.isArray()) {\n             int length = Array.getLength(object);\n             if (toType.isArray()) {\n                 Class cType = toType.getComponentType();\n                 }\n                 return unmodifiableCollection(collection);\n             }\n-            else if (length == 1) {\n-                Object value = Array.get(object, 0);\n-                return convert(value, toType);\n+            else {\n+                if (length > 0) { \n+                    Object value = Array.get(object, 0);\n+                    return convert(value, toType);\n+                }\n+                else {\n+                    return convert(\"\", toType);\n+                }\n             }\n         }\n         else if (object instanceof Collection) {\n                 collection.addAll((Collection) object);\n                 return unmodifiableCollection(collection);\n             }\n-            else if (length == 1) {\n-                Object value;\n-                if (object instanceof List) {\n-                    value = ((List) object).get(0);\n+            else {\n+                if (length > 0) {\n+                    Object value;\n+                    if (object instanceof List) {\n+                        value = ((List) object).get(0);\n+                    }\n+                    else {\n+                        Iterator it = ((Collection) object).iterator();\n+                        value = it.next();\n+                    }\n+                    return convert(value, toType);\n                 }\n                 else {\n-                    Iterator it = ((Collection) object).iterator();\n-                    value = it.next();\n-                }\n-                return convert(value, toType);\n-            }\n-            else {\n-                throw new RuntimeException(\n-                    \"Cannot convert collection to \"\n-                        + toType\n-                        + \", it contains \"\n-                        + length\n-                        + \" elements\");\n+                    return convert(\"\", toType);\n+                }\n             }\n         }\n         else if (object instanceof NodeSet) {\n         }\n         else if (object instanceof Pointer) {\n             return convert(((Pointer) object).getValue(), toType);\n+        }\n+        else if (toType == String.class) {\n+            return object.toString();\n+        }\n+        else if (object instanceof Boolean) {\n+            if (toType == boolean.class) {\n+                return object;\n+            }\n+            boolean value = ((Boolean) object).booleanValue();\n+            return allocateNumber(toType, value ? 1 : 0);\n+        }\n+        else if (object instanceof Number) {\n+            double value = ((Number) object).doubleValue();\n+            if (toType == boolean.class || toType == Boolean.class) {\n+                return value == 0.0 ? Boolean.FALSE : Boolean.TRUE;\n+            }\n+            if (toType.isPrimitive()\n+                || Number.class.isAssignableFrom(toType)) {\n+                return allocateNumber(toType, value);\n+            }\n+        }\n+        else if (object instanceof Character) {\n+            if (toType == char.class) {\n+                return object;\n+            }\n+        }\n+        else if (object instanceof String) {\n+            Object value = convertStringToPrimitive(object, toType);\n+            if (value != null) {\n+                return value;\n+            }\n         }\n         \n         throw new RuntimeException(\n             throw new UnsupportedOperationException();\n         }\n         \n-        public Object clone(){\n+        public Object clone() {\n             return this;\n         }\n         \n--- /dev/null\n+++ b/src/test/org/apache/commons/jxpath/ri/StressTest.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/StressTest.java,v 1.1 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/03/25 02:41:34 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.jxpath.ri;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.jxpath.JXPathContext;\n+\n+/**\n+ * Test thread safety.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/03/25 02:41:34 $\n+ */\n+\n+public class StressTest extends TestCase {\n+    \n+    private static final int THREAD_COUNT = 50;\n+    private static final int THREAD_DURATION = 1000;\n+    private static JXPathContext context;\n+    private static int count;\n+    private static Throwable exception;\n+        \n+    /**\n+     * Construct a new instance of this test case.\n+     *\n+     * @param name Name of the test case\n+     */\n+    public StressTest(String name) {\n+        super(name);\n+    }\n+\n+    public void testThreads() throws Throwable {\n+        context = JXPathContext.newContext(null, new Double(100));\n+        Thread[] threadArray = new Thread[THREAD_COUNT];\n+        for (int i = 0; i < THREAD_COUNT; i++) {\n+            threadArray[i] = new Thread(new StressRunnable());\n+        }\n+        \n+        for (int i = 0; i < threadArray.length; i++) {\n+            threadArray[i].start();\n+        }\n+\n+        for (int i = 0; i < threadArray.length; i++) {\n+            try {\n+                threadArray[i].join();\n+            }\n+            catch (InterruptedException e) {\n+                assertTrue(\"Interrupted\", false);\n+            }\n+        }\n+\n+        if (exception != null) {\n+            throw exception;\n+        }\n+        assertEquals(\"Test count\", THREAD_COUNT * THREAD_DURATION, count);\n+    }    \n+\n+    private final class StressRunnable implements Runnable {\n+        public void run() {\n+            for (int j = 0; j < THREAD_DURATION && exception == null; j++) {\n+                try { \n+                    double random = 1 + Math.random();\n+                    double sum =\n+                        ((Double) context.getValue(\"/ + \" + random))\n+                            .doubleValue();\n+                    assertEquals(100 + random, sum, 0.0001);\n+                    synchronized (context) {\n+                        count++;\n+                    }\n+                }                    \n+                catch (Throwable t) {\n+                    exception = t;\n+                }\n+            }\n+        }\n+    }\n+}\n--- a/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java,v 1.7 2003/03/11 00:59:36 dmitri Exp $\n- * $Revision: 1.7 $\n- * $Date: 2003/03/11 00:59:36 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java,v 1.8 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2003/03/25 02:41:34 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Test extension functions.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2003/03/11 00:59:36 $\n+ * @version $Revision: 1.8 $ $Date: 2003/03/25 02:41:34 $\n  */\n \n public class ExtensionFunctionTest extends JXPathTestCase {\n         // Two ClassFunctions are sharing the same prefix.\n         // This is TestFunctions2\n         assertXPathValue(context, \"string(test:increment(8))\", \"9\");\n-\n+        \n+        // See that a NodeSet gets properly converted to a string\n+        assertXPathValue(context, \"test:string(/beans/name)\", \"Name 1\");\n     }\n \n     public void testExpressionContext() {\n             \"/beans[contains(test:path(), '[2]')]/name\",\n             \"Name 2\");\n     }\n+    \n+    public void testCollectionReturn() {\n+        assertXPathValueIterator(\n+            context,\n+            \"test:collection()/name\",\n+            list(\"foo\", \"bar\"));\n+\n+        assertXPathPointerIterator(\n+            context,\n+            \"test:collection()/name\",\n+            list(\"/.[1]/name\", \"/.[2]/name\"));\n+            \n+        assertXPathValue(\n+            context,\n+            \"test:collection()/name\",\n+            \"foo\");        \n+\n+        assertXPathValue(\n+            context,\n+            \"test:collection()/@name\",\n+            \"foo\");        \n+    }\n+\n+    public void testNodeSetReturn() {\n+        assertXPathValueIterator(\n+            context,\n+            \"test:nodeSet()/name\",\n+            list(\"Name 1\", \"Name 2\"));\n+\n+        assertXPathPointerIterator(\n+            context,\n+            \"test:nodeSet()/name\",\n+            list(\"/beans[1]/name\", \"/beans[2]/name\"));\n+            \n+        assertXPathValueAndPointer(\n+            context,\n+            \"test:nodeSet()/name\",\n+            \"Name 1\",\n+            \"/beans[1]/name\");        \n+\n+        assertXPathValueAndPointer(\n+            context,\n+            \"test:nodeSet()/@name\",\n+            \"Name 1\",\n+            \"/beans[1]/@name\");\n+    }\n \n     private static class Context implements ExpressionContext {\n         private Object object;\n--- a/src/test/org/apache/commons/jxpath/ri/compiler/TestFunctions.java\n+++ b/src/test/org/apache/commons/jxpath/ri/compiler/TestFunctions.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/compiler/TestFunctions.java,v 1.5 2003/03/11 00:59:36 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2003/03/11 00:59:36 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/compiler/TestFunctions.java,v 1.6 2003/03/25 02:41:34 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2003/03/25 02:41:34 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.jxpath.ri.compiler;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.Map;\n \n+import org.apache.commons.jxpath.BasicNodeSet;\n import org.apache.commons.jxpath.ExpressionContext;\n+import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.NestedTestBean;\n import org.apache.commons.jxpath.Pointer;\n import org.apache.commons.jxpath.NodeSet;\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2003/03/11 00:59:36 $\n+ * @version $Revision: 1.6 $ $Date: 2003/03/25 02:41:34 $\n  */\n public class TestFunctions {\n \n     public static int countPointers(NodeSet nodeSet) {\n         return nodeSet.getPointers().size();\n     }\n+    \n+    public static String string(String string) {\n+        return string;\n+    }\n+    \n+    public static Collection collection() {\n+        ArrayList list = new ArrayList();\n+        list.add(new NestedTestBean(\"foo\"));\n+        list.add(new NestedTestBean(\"bar\"));\n+        return list;\n+    }\n+    \n+    public static NodeSet nodeSet(ExpressionContext context) {\n+        JXPathContext jxpathCtx = context.getJXPathContext();\n+        BasicNodeSet set = new BasicNodeSet();\n+        set.add(jxpathCtx.getPointer(\"/beans[1]\"));\n+        set.add(jxpathCtx.getPointer(\"/beans[2]\"));\n+        \n+        return set;\n+    }\n }\n--- a/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java,v 1.12 2003/03/11 00:59:37 dmitri Exp $\n- * $Revision: 1.12 $\n- * $Date: 2003/03/11 00:59:37 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java,v 1.13 2003/03/25 02:41:35 dmitri Exp $\n+ * $Revision: 1.13 $\n+ * $Date: 2003/03/25 02:41:35 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Abstract superclass for Bean access with JXPath.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.12 $ $Date: 2003/03/11 00:59:37 $\n+ * @version $Revision: 1.13 $ $Date: 2003/03/25 02:41:35 $\n  */\n \n public abstract class BeanModelTestCase extends JXPathTestCase {\n                 new Integer(1),\n                 \"/nestedBean/beans[last() + 1]\");\n         }\n-        catch (Exception e){\n+        catch (Exception e) {\n             ex = true;\n         }\n         assertTrue(\"Exception thrown on invalid path for creation\", ex);\n--- a/src/test/org/apache/commons/jxpath/util/BasicTypeConverterTest.java\n+++ b/src/test/org/apache/commons/jxpath/util/BasicTypeConverterTest.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/util/BasicTypeConverterTest.java,v 1.3 2003/03/11 00:59:40 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2003/03/11 00:59:40 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/util/BasicTypeConverterTest.java,v 1.4 2003/03/25 02:41:35 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2003/03/25 02:41:35 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import java.lang.reflect.Array;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n \n import junit.framework.TestCase;\n+\n+import org.apache.commons.jxpath.NodeSet;\n+import org.apache.commons.jxpath.Pointer;\n \n /**\n  * Tests BasicTypeConverter\n  * \n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2003/03/11 00:59:40 $\n+ * @version $Revision: 1.4 $ $Date: 2003/03/25 02:41:35 $\n  */\n \n public class BasicTypeConverterTest extends TestCase {\n             expected,\n             result);\n     }\n+    \n+    public void testSingletonCollectionToString() {\n+        assertConversion(Collections.singleton(\"Earth\"), String.class, \"Earth\");\n+    }\n+\n+    public void testSingletonArrayToString() {\n+        assertConversion(new String[] { \"Earth\" }, String.class, \"Earth\");\n+    }\n+\n+    public void testPointerToString() {\n+        assertConversion(new Pointer() {\n+            public Object getValue() {\n+                return \"value\";\n+            }\n+            public Object getNode() {\n+                return null;\n+            }\n+            public void setValue(Object value) {\n+            }\n+            public Object getRootNode() {\n+                return null;\n+            }\n+            public String asPath() {\n+                return null;\n+            }\n+            public Object clone() {\n+                return null;\n+            }\n+            public int compareTo(Object o) {\n+                return 0;\n+            }\n+        }, String.class, \"value\");\n+    }\n+\n+    public void testNodeSetToString() {\n+        assertConversion(new NodeSet() {\n+            public List getNodes() {\n+                return null;\n+            }\n+            public List getPointers() {\n+                return null;\n+            }\n+            public List getValues() {\n+                List list = new ArrayList();\n+                list.add(\"hello\");\n+                list.add(\"goodbye\");\n+                return Collections.singletonList(list);\n+            }\n+        }, String.class, \"hello\");\n+    }\n+\n+    // succeeds in current version\n+    public void testNodeSetToInteger() {\n+        assertConversion(new NodeSet() {\n+            public List getNodes() {\n+                return null;\n+            }\n+            public List getPointers() {\n+                return null;\n+            }\n+            public List getValues() {\n+                return Collections.singletonList(\"9\");\n+            }\n+        }, Integer.class, new Integer(9));\n+    }    \n }", "timestamp": 1048560095, "metainfo": ""}