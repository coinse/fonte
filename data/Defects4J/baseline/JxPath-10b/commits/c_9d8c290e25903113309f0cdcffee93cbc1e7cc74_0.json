{"sha": "9d8c290e25903113309f0cdcffee93cbc1e7cc74", "log": "Resolved compatibility issue with JDOM b10   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespaceIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespaceIterator.java\n  * An iterator of namespaces of a DOM Node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2004/02/29 14:17:40 $\n+ * @version $Revision: 1.8 $ $Date: 2004/03/04 01:01:27 $\n  */\n public class JDOMNamespaceIterator implements NodeIterator {\n     private NodePointer parent;\n                 prefixes.add(ns.getPrefix());\n             }\n         }\n-        Element parent = (Element) element.getParent();\n-        if (parent != null) {\n-            collectNamespaces(parent);\n+        Object parent = element.getParent();\n+        if (parent instanceof Element) {\n+            collectNamespaces((Element)parent);\n         }\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.13 $ $Date: 2004/02/29 14:17:40 $\n+ * @version $Revision: 1.14 $ $Date: 2004/03/04 01:01:27 $\n  */\n public class JDOMNodePointer extends NodePointer {\n     private Object node;\n     \n     private Element nodeParent(Object node) {\n         if (node instanceof Element) {\n-            return (Element) ((Element) node).getParent();\n+            Object parent = ((Element) node).getParent();\n+            if (parent instanceof Element) {\n+                return (Element) parent;\n+            }\n         }\n         else if (node instanceof Text) {\n             return (Element) ((Text) node).getParent();\n \n     private int getRelativePositionByName() {\n         if (node instanceof Element) {\n-            Element parent = (Element)((Element) node).getParent();\n-            if (parent == null) {\n+            Object parent = ((Element) node).getParent();\n+            if (!(parent instanceof Element)) {\n                 return 1;\n             }\n-            List children = parent.getContent();\n+            \n+            List children = ((Element)parent).getContent();\n             int count = 0;\n             String name = ((Element) node).getQualifiedName();\n             for (int i = 0; i < children.size(); i++) {", "timestamp": 1078362087, "metainfo": ""}