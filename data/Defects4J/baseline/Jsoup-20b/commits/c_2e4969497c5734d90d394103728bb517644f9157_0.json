{"sha": "2e4969497c5734d90d394103728bb517644f9157", "log": "Fixed support for HTML entities with numbers in name (e.g. &frac34, &sup1)  Fixes #46", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n     private static final Map<Character, String> xhtmlByVal;\n     private static final Map<Character, String> baseByVal;\n     private static final Map<Character, String> fullByVal;\n-    private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\");\n+    private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);?\");\n \n     static String escape(String string, Document.OutputSettings out) {\n         return escape(string, out.encoder(), out.escapeMode());\n         if (!string.contains(\"&\"))\n             return string;\n \n-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n+        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]\\\\d*);?\n         StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n         // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required\n \n--- a/src/test/java/org/jsoup/nodes/EntitiesTest.java\n+++ b/src/test/java/org/jsoup/nodes/EntitiesTest.java\n \n public class EntitiesTest {\n     @Test public void escape() {\n-        String text = \"Hello &<> \u00c5 \u00e5 \u03c0 \u65b0 there\";\n+        String text = \"Hello &<> \u00c5 \u00e5 \u03c0 \u65b0 there \u00be\";\n         String escapedAscii = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.base);\n         String escapedAsciiFull = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.extended);\n         String escapedAsciiXhtml = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.xhtml);\n         String escapedUtf = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.base);\n \n-        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; &#960; &#26032; there\", escapedAscii);\n-        assertEquals(\"Hello &amp;&lt;&gt; &angst; &aring; &pi; &#26032; there\", escapedAsciiFull);\n-        assertEquals(\"Hello &amp;&lt;&gt; &#197; &#229; &#960; &#26032; there\", escapedAsciiXhtml);\n-        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; \u03c0 \u65b0 there\", escapedUtf);\n+        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; &#960; &#26032; there &frac34;\", escapedAscii);\n+        assertEquals(\"Hello &amp;&lt;&gt; &angst; &aring; &pi; &#26032; there &frac34;\", escapedAsciiFull);\n+        assertEquals(\"Hello &amp;&lt;&gt; &#197; &#229; &#960; &#26032; there &#190;\", escapedAsciiXhtml);\n+        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; \u03c0 \u65b0 there &frac34;\", escapedUtf);\n         // odd that it's defined as aring in base but angst in full\n     }\n \n     @Test public void unescape() {\n-        String text = \"Hello &amp;&LT&gt; &angst &#960; &#960 &#x65B0; there &!\";\n-        assertEquals(\"Hello &<> \u00c5 \u03c0 \u03c0 \u65b0 there &!\", Entities.unescape(text));\n+        String text = \"Hello &amp;&LT&gt; &angst &#960; &#960 &#x65B0; there &! &frac34;\";\n+        assertEquals(\"Hello &<> \u00c5 \u03c0 \u03c0 \u65b0 there &! \u00be\", Entities.unescape(text));\n \n         assertEquals(\"&0987654321; &unknown\", Entities.unescape(\"&0987654321; &unknown\"));\n     }", "timestamp": 1309605122, "metainfo": ""}