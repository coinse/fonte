{"sha": "0722718f1f3e3811639600a3333ec7665592364d", "log": "More tests for Jsoup.Connection", "commit": "\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n      * @throws IOException\n      */\n     public static Document load(File in, String charsetName, String baseUri) throws IOException {\n-        InputStream inStream = new FileInputStream(in);\n-        ByteBuffer byteData = readToByteBuffer(inStream);\n-        Document doc = parseByteData(byteData, charsetName, baseUri);\n-        inStream.close();\n-        return doc;\n+        InputStream inStream = null;\n+        try {\n+            inStream = new FileInputStream(in);\n+            ByteBuffer byteData = readToByteBuffer(inStream);\n+            return parseByteData(byteData, charsetName, baseUri);\n+        } finally {\n+            if (inStream != null)\n+                inStream.close();\n+        }\n     }\n \n     // reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n             Response res = new Response();\n             res.setupFromConnection(conn);\n \n-            InputStream inStream =\n-                (res.hasHeader(\"Content-Encoding\") && res.header(\"Content-Encoding\").equals(\"gzip\")) ?\n-                    new BufferedInputStream(new GZIPInputStream(conn.getInputStream())) :\n-                    new BufferedInputStream(conn.getInputStream());\n-            res.byteData = DataUtil.readToByteBuffer(inStream);\n-            res.charset = getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it\n-            inStream.close();\n+            InputStream inStream = null;\n+            try {\n+                inStream = res.hasHeader(\"Content-Encoding\") && res.header(\"Content-Encoding\").equalsIgnoreCase(\"gzip\") ?\n+                        new BufferedInputStream(new GZIPInputStream(conn.getInputStream())) :\n+                        new BufferedInputStream(conn.getInputStream());\n+                res.byteData = DataUtil.readToByteBuffer(inStream);\n+                res.charset = getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it\n+            } finally {\n+                if (inStream != null) inStream.close();\n+            }\n \n             res.executed = true;\n             return res;\n \n                 List<String> values = entry.getValue();\n \n-                if (name.equals(\"Set-Cookie\")) {\n+                if (name.equalsIgnoreCase(\"Set-Cookie\")) {\n                     for (String value : values) {\n                         TokenQueue cd = new TokenQueue(value);\n                         String cookieName = cd.chompTo(\"=\").trim();\n--- a/src/test/java/org/jsoup/helper/HttpConnectionTest.java\n+++ b/src/test/java/org/jsoup/helper/HttpConnectionTest.java\n \n import java.io.IOException;\n import java.util.Map;\n+import java.util.Collection;\n+import java.net.URL;\n+import java.net.MalformedURLException;\n \n public class HttpConnectionTest {\n     /* most actual network http connection tests are in integration */\n         assertEquals(\"deflate\", res.header(\"Accept-Encoding\"));\n         assertEquals(\"deflate\", res.header(\"accept-Encoding\"));\n     }\n-}\n+\n+    @Test public void connectWithUrl() throws MalformedURLException {\n+        Connection con = HttpConnection.connect(new URL(\"http://example.com\"));\n+        assertEquals(\"http://example.com\", con.request().url().toExternalForm());\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class) public void throwsOnMalformedUrl() {\n+        Connection con = HttpConnection.connect(\"bzzt\");\n+    }\n+\n+    @Test public void userAgent() {\n+        Connection con = HttpConnection.connect(\"http://example.com/\");\n+        con.userAgent(\"Mozilla\");\n+        assertEquals(\"Mozilla\", con.request().header(\"User-Agent\"));\n+    }\n+\n+    @Test public void timeout() {\n+        Connection con = HttpConnection.connect(\"http://example.com/\");\n+        con.timeout(1000);\n+        assertEquals(1000, con.request().timeout());\n+    }\n+\n+    @Test public void referrer() {\n+        Connection con = HttpConnection.connect(\"http://example.com/\");\n+        con.referrer(\"http://foo.com\");\n+        assertEquals(\"http://foo.com\", con.request().header(\"Referer\"));\n+    }\n+\n+    @Test public void method() {\n+        Connection con = HttpConnection.connect(\"http://example.com/\");\n+        assertEquals(Connection.Method.GET, con.request().method());\n+        con.method(Connection.Method.POST);\n+        assertEquals(Connection.Method.POST, con.request().method());\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class) public void throwsOnOdddData() {\n+        Connection con = HttpConnection.connect(\"http://example.com/\");\n+        con.data(\"Name\", \"val\", \"what\");\n+    }\n+\n+    @Test public void data() {\n+        Connection con = HttpConnection.connect(\"http://example.com/\");\n+        con.data(\"Name\", \"Val\", \"Foo\", \"bar\");\n+        Collection<Connection.KeyVal> values = con.request().data();\n+        Object[] data =  values.toArray();\n+        Connection.KeyVal one = (Connection.KeyVal) data[0];\n+        Connection.KeyVal two = (Connection.KeyVal) data[1];\n+        assertEquals(\"Name\", one.key());\n+        assertEquals(\"Val\", one.value());\n+        assertEquals(\"Foo\", two.key());\n+        assertEquals(\"bar\", two.value());\n+    }\n+\n+    @Test public void cookie() {\n+        Connection con = HttpConnection.connect(\"http://example.com/\");\n+        con.cookie(\"Name\", \"Val\");\n+        assertEquals(\"Val\", con.request().cookie(\"Name\"));\n+    }\n+}", "timestamp": 1309605120, "metainfo": ""}