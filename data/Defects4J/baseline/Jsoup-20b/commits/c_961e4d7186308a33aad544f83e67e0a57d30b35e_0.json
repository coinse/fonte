{"sha": "961e4d7186308a33aad544f83e67e0a57d30b35e", "log": "Validations for Connection", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n \n     /**\n      * Set the request timeouts (connect and read). If a timeout occurs, an IOException will be thrown. The default\n-     * timeout is 3 seconds (3000 millis).\n+     * timeout is 3 seconds (3000 millis). A timeout of zero is treated as an infinite timeout.\n      * @param millis number of milliseconds (thousandths of a second) before timing out connects or reads.\n      * @return this Connection, for chaining\n      */\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n     }\n \n     public Connection url(String url) {\n+        Validate.notEmpty(url, \"Must supply a valid URL\");\n         try {\n             req.url(new URL(url));\n         } catch (MalformedURLException e) {\n     }\n \n     public Connection userAgent(String userAgent) {\n+        Validate.notNull(userAgent, \"User agent must not be null\");\n         req.header(\"User-Agent\", userAgent);\n         return this;\n     }\n     }\n \n     public Connection referrer(String referrer) {\n+        Validate.notNull(referrer, \"Referrer must not be null\");\n         req.header(\"Referer\", referrer);\n         return this;\n     }\n     }\n \n     public Connection data(Map<String, String> data) {\n+        Validate.notNull(data, \"Data map must not be null\");\n         for (Map.Entry<String, String> entry : data.entrySet()) {\n             req.data(KeyVal.create(entry.getKey(), entry.getValue()));\n         }\n     }\n \n     public Connection data(String... keyvals) {\n+        Validate.notNull(keyvals, \"Data key value pairs must not be null\");\n         Validate.isTrue(keyvals.length %2 == 0, \"Must supply an even number of key value pairs\");\n         for (int i = 0; i < keyvals.length; i += 2) {\n-            req.data(KeyVal.create(keyvals[i], keyvals[i + 1]));\n+            String key = keyvals[i];\n+            String value = keyvals[i+1];\n+            Validate.notEmpty(key, \"Data key must not be empty\");\n+            Validate.notNull(value, \"Data value must not be null\");\n+            req.data(KeyVal.create(key, value));\n         }\n         return this;\n     }\n         }\n \n         public T url(URL url) {\n+            Validate.notNull(url, \"URL must not be null\");\n             this.url = url;\n             return (T) this;\n         }\n         }\n \n         public T method(Method method) {\n+            Validate.notNull(method, \"Method must not be null\");\n             this.method = method;\n             return (T) this;\n         }\n \n         public String header(String name) {\n+            Validate.notNull(name, \"Header name must not be null\");\n             return headers.get(name);\n         }\n \n         public T header(String name, String value) {\n+            Validate.notEmpty(name, \"Header name must not be empty\");\n+            Validate.notNull(value, \"Header value must not be null\");\n             headers.put(name, value);\n             return (T) this;\n         }\n \n         public boolean hasHeader(String name) {\n+            Validate.notEmpty(name, \"Header name must not be empty\");\n             return headers.containsKey(name);\n         }\n \n         public T removeHeader(String name) {\n+            Validate.notEmpty(name, \"Header name must not be empty\");\n             headers.remove(name);\n             return (T) this;\n         }\n         }\n \n         public String cookie(String name) {\n+            Validate.notNull(name, \"Cookie name must not be null\");\n             return cookies.get(name);\n         }\n \n         public T cookie(String name, String value) {\n+            Validate.notEmpty(name, \"Cookie name must not be empty\");\n+            Validate.notNull(value, \"Cookie value must not be null\");\n             cookies.put(name, value);\n             return (T) this;\n         }\n \n         public boolean hasCookie(String name) {\n+            Validate.notEmpty(\"Cookie name must not be empty\");\n             return cookies.containsKey(name);\n         }\n \n         public T removeCookie(String name) {\n+            Validate.notEmpty(\"Cookie name must not be empty\");\n             cookies.remove(name);\n             return (T) this;\n         }\n         }\n \n         public Request timeout(int millis) {\n+            Validate.isTrue(millis >= 0, \"Timeout milliseconds must be 0 (infinite) or greater\");\n             this.timeoutMilliseconds = millis;\n             return this;\n         }\n \n         public Request data(Connection.KeyVal keyval) {\n+            Validate.notNull(keyval, \"Key val must not be null\");\n             data.add(keyval);\n             return this;\n         }\n         private ByteBuffer byteData;\n         private String charset;\n         private String contentType;\n+        private boolean executed = false;\n \n         static Response execute(Connection.Request req) throws IOException {\n+            Validate.notNull(req, \"Request must not be null\");\n             URL url = req.url();\n             String protocol = url.getProtocol();\n             Validate\n             res.charset = getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it\n             inStream.close();\n \n+            res.executed = true;\n             return res;\n         }\n \n         }\n \n         public Document parse() throws IOException {\n+            Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before parsing response\");\n             if (contentType == null || !contentType.startsWith(\"text/\"))\n                 throw new IOException(String.format(\"Unhandled content type \\\"%s\\\" on URL %s. Must be text/*\",\n                     contentType, url.toString()));\n         }\n \n         public String body() {\n+            Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\");\n             // charset gets set from header on execute, and from meta-equiv on parse. parse may not have happened yet\n             String body;\n             if (charset == null)\n         }\n \n         public byte[] bodyAsBytes() {\n+            Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\");\n             return byteData.array();\n         }\n \n         private String value;\n \n         public static KeyVal create(String key, String value) {\n+            Validate.notEmpty(key, \"Data key must not be empty\");\n+            Validate.notNull(value, \"Data value must not be null\");\n             return new KeyVal(key, value);\n         }\n \n-        public KeyVal(String key, String value) {\n+        private KeyVal(String key, String value) {\n             this.key = key;\n             this.value = value;\n         }\n \n         public KeyVal key(String key) {\n+            Validate.notEmpty(key, \"Data key must not be empty\");\n             this.key = key;\n             return this;\n         }\n         }\n \n         public KeyVal value(String value) {\n+            Validate.notNull(value, \"Data value must not be null\");\n             this.value = value;\n             return this;\n         }\n--- /dev/null\n+++ b/src/test/java/org/jsoup/helper/HttpConnectionTest.java\n+package org.jsoup.helper;\n+\n+import static org.junit.Assert.assertEquals;\n+import org.junit.Test;\n+import org.jsoup.Connection;\n+\n+import java.io.IOException;\n+\n+public class HttpConnectionTest {\n+    /* most actual network http connection tests are in integration */\n+\n+    @Test(expected=IllegalArgumentException.class) public void throwsExceptionOnParseWithoutExecute() throws IOException {\n+        Connection con = HttpConnection.connect(\"http://example.com\");\n+        con.response().parse();\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class) public void throwsExceptionOnBodyWithoutExecute() throws IOException {\n+        Connection con = HttpConnection.connect(\"http://example.com\");\n+        con.response().body();\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class) public void throwsExceptionOnBodyAsBytesWithoutExecute() throws IOException {\n+        Connection con = HttpConnection.connect(\"http://example.com\");\n+        con.response().bodyAsBytes();\n+    }\n+}", "timestamp": 1309605119, "metainfo": ""}