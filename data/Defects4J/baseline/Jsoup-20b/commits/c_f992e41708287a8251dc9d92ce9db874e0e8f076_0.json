{"sha": "f992e41708287a8251dc9d92ce9db874e0e8f076", "log": "Implemented Element#wrap and #Elements#wrap  Also protected Node.replaceChild, removeChild, addChild.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n         childNodes.clear();\n         return this;\n     }\n+\n+    /**\n+     Wrap the supplied HTML around this element.\n+     @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitralily deep.\n+     @return this element, for chaining.\n+     */\n+    public Element wrap(String html) {\n+        Validate.notEmpty(html);\n+\n+        Element wrapBody = Parser.parseBodyFragment(html, baseUri).body();\n+        Elements wrapChildren = wrapBody.children();\n+        Element wrap = wrapChildren.first();\n+        if (wrap == null) // nothing to wrap with; noop\n+            return null;\n+\n+        Element deepest = getDeepChild(wrap);\n+        parentNode.replaceChild(this, wrap);\n+        deepest.addChild(this);\n+\n+        // remainder (unbalananced wrap, like <div></div><p></p> -- The <p> is remainder\n+        if (wrapChildren.size() > 1) {\n+            for (int i = 1; i < wrapChildren.size(); i++) { // skip first\n+                Element remainder = wrapChildren.get(i);\n+                remainder.parentNode.removeChild(remainder);\n+                wrap.appendChild(remainder);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    private Element getDeepChild(Element el) {\n+        List<Element> children = el.children();\n+        if (children.size() > 0)\n+            return getDeepChild(children.get(0));\n+        else\n+            return el;\n+    }\n     \n     /**\n      * Get sibling elements.\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n         this.parentNode = parentNode;\n     }\n \n+    protected void replaceChild(Node out, Node in) {\n+        Validate.isTrue(out.parentNode == this);\n+        Validate.notNull(in);\n+        if (in.parentNode != null)\n+            in.parentNode.removeChild(in);\n+        \n+        Integer index = indexInList(out, childNodes);\n+        childNodes.set(index, in);\n+        in.parentNode = this;\n+        out.parentNode = null;\n+    }\n+\n+    protected void removeChild(Node out) {\n+        Validate.isTrue(out.parentNode == this);\n+        int index = indexInList(out, childNodes);\n+        childNodes.remove(index);\n+        out.parentNode = null;\n+    }\n+\n+    protected void addChild(Node in) {\n+        Validate.notNull(in);\n+        if (in.parentNode != null)\n+            in.parentNode.removeChild(in);\n+        \n+        childNodes.add(in);\n+        in.parentNode = this;\n+    }\n+    \n     /**\n      Retrieves this node's sibling nodes. Effectively, {@link #childNodes()  node.parent.childNodes()}.\n      @return node siblings, including this node\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n package org.jsoup.select;\n \n import org.jsoup.nodes.Element;\n+import org.apache.commons.lang.Validate;\n \n import java.util.*;\n \n         }\n         return sb.toString();\n     }\n+\n+    /**\n+     Wrap the supplied HTML around each matched elements. For example, with HTML\n+     {@code <p><b>This</b> is <b>Jsoup</b></p>},\n+     <code>doc.select(\"b\").wrap(\"&lt;i&gt;&lt;/i&gt;\");</code>\n+     becomes {@code <p><i><b>This</b></i> is <i><b>jsoup</b></i></p>}\n+     @param html HTML to wrap around each element, e.g. {@code <div class=\"head\"></div>}. Can be arbitralily deep.\n+     @return this (for chaining)\n+     @see Element#wrap\n+     */\n+    public Elements wrap(String html) {\n+        Validate.notEmpty(html);\n+        for (Element element : contents) {\n+            element.wrap(html);\n+        }\n+        return this;\n+    }\n     \n     // filters\n     \n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(\"<p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html()));\n     }\n \n+    @Test public void testWrap() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello</p><p>There</p></div>\");\n+        Element p = doc.select(\"p\").first();\n+        p.wrap(\"<div class='head'></div>\");\n+        assertEquals(\"<div><div class=\\\"head\\\"><p>Hello</p></div><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n+\n+        Element ret = p.wrap(\"<div><div class=foo></div><p>What?</p></div>\");\n+        assertEquals(\"<div><div class=\\\"head\\\"><div><div class=\\\"foo\\\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>\", \n+                TextUtil.stripNewlines(doc.body().html()));\n+\n+        assertEquals(ret, p);\n+    }\n+\n+    @Test public void testWrapWithRemainder() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\");\n+        Element p = doc.select(\"p\").first();\n+        p.wrap(\"<div class='head'></div><p>There!</p>\");\n+        assertEquals(\"<div><div class=\\\"head\\\"><p>Hello</p><p>There!</p></div></div>\", TextUtil.stripNewlines(doc.body().html()));\n+    }\n+\n \n }\n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n         Document doc = Jsoup.parse(h);\n         assertEquals(\"Hello there world\", doc.select(\"div > *\").text());\n     }\n+\n+    @Test public void wrap() {\n+        String h = \"<p><b>This</b> is <b>jsoup</b></p>\";\n+        Document doc = Jsoup.parse(h);\n+        doc.select(\"b\").wrap(\"<i></i>\");\n+        assertEquals(\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\", doc.body().html());\n+    }\n     \n     @Test public void eq() {\n         String h = \"<p>Hello<p>there<p>world\";", "timestamp": 1309605109, "metainfo": ""}