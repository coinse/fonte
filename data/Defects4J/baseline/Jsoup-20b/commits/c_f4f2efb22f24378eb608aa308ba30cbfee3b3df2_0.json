{"sha": "f4f2efb22f24378eb608aa308ba30cbfee3b3df2", "log": "added EscapeMode.minimum", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n  */\n public class Entities {\n     public enum EscapeMode {\n-        base, extended\n+        minimum(minimumByVal), base(baseByVal), extended(fullByVal);\n+\n+        private Map<Character, String> map;\n+\n+        EscapeMode(Map<Character, String> map) {\n+            this.map = map;\n+        }\n+\n+        public Map<Character, String> getMap() {\n+            return map;\n+        }\n     }\n \n     private static final Map<String, Character> full;\n+    private static final Map<Character, String> minimumByVal;\n     private static final Map<Character, String> baseByVal;\n     private static final Map<Character, String> fullByVal;\n     private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\");\n \n     static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode) {\n         StringBuilder accum = new StringBuilder(string.length() * 2);\n-        Map<Character, String> map = escapeMode == EscapeMode.extended ? fullByVal : baseByVal;\n+        Map<Character, String> map = escapeMode.getMap();\n \n         for (int pos = 0; pos < string.length(); pos++) {\n             Character c = string.charAt(pos);\n         m.appendTail(accum);\n         return accum.toString();\n     }\n+\n+    private static final Object[][] minimumArray = {\n+            {\"quot\", 0x00022},\n+            {\"amp\", 0x00026},\n+            {\"apos\", 0x00027},\n+            {\"lt\", 0x0003C},\n+            {\"gt\", 0x0003E}\n+    };\n \n     // most common, base entities can be unescaped without trailing ;\n     // e.g. &amp\n \n     static {\n         full = new HashMap<String, Character>(fullArray.length);\n+        minimumByVal = new HashMap<Character, String>(minimumArray.length);\n         baseByVal = new HashMap<Character, String>(baseArray.length);\n         fullByVal = new HashMap<Character, String>(fullArray.length);\n \n+        for (Object[] entity : minimumArray) {\n+            Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());\n+            minimumByVal.put(c, ((String) entity[0]));\n+        }\n         for (Object[] entity : baseArray) {\n             Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());\n             baseByVal.put(c, ((String) entity[0]));\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n         doc.outputSettings().escapeMode(Entities.EscapeMode.extended);\n         assertEquals(\"<p title=\\\"&pi;\\\">&pi; &amp; &lt; &gt; </p>\", doc.body().html());\n     }\n+\n+    @Test public void testReferences() {\n+        Document doc = Jsoup.parse(\"&lt; &gt; &amp; &quot; &apos; &times;\");\n+        doc.outputSettings().escapeMode(Entities.EscapeMode.minimum);\n+        assertEquals(\"&lt; &gt; &amp; &quot; &apos; \u00d7\", doc.body().html());\n+    }\n+\n }", "timestamp": 1309605121, "metainfo": ""}