{"sha": "78d40f41b9567d7e8a0c891f31b7deee2b1f3f19", "log": "Improved malformed table parsing by implementing ignorable end tags.", "commit": "\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n                 }\n             }\n         } else { // specified by content type header (or by user on file load)\n+            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n             docData = Charset.forName(charsetName).decode(byteData).toString();\n         }\n         if (doc == null) {\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n \n         if (tagName.length() != 0) {\n             Tag tag = Tag.valueOf(tagName);\n-            popStackToClose(tag);\n+            if (!last().tag().isIgnorableEndTag(tag)) // skips </tr> if in <table>\n+                popStackToClose(tag);\n         }\n     }\n \n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n     private boolean preserveWhitespace = false; // for pre, textarea, script etc\n     private List<Tag> ancestors; // elements must be a descendant of one of these ancestors\n     private List<Tag> excludes = Collections.emptyList(); // cannot contain these tags\n+    private List<Tag> ignoreEndTags = Collections.emptyList(); // ignore these end tags\n     private boolean directDescendant; // if true, must directly descend from one of the ancestors\n     private boolean limitChildren; // if true, only contain children that've registered parents\n \n         // don't allow children to contain their parent (directly)\n         if (this.requiresSpecificParent() && this.getImplicitParent().equals(child))\n             return false;\n-        \n+\n         // confirm limited children\n         if (limitChildren) {\n             for (Tag childParent : child.ancestors) {\n                 return true;\n         \n         return false;\n+    }\n+\n+    boolean isIgnorableEndTag(Tag child) {\n+        for (Tag endTag : ignoreEndTags) {\n+            if (child.equals(endTag))\n+                return true;\n+        }\n+        return false;        \n     }\n \n     @Override\n         createBlock(\"LI\").setAncestor(\"UL\", \"OL\").setOptionalClosing(); // only within OL or UL.\n \n         // tables\n-        createBlock(\"TABLE\"); // specific list of only includes (tr, td, thead etc) not implemented\n-        createBlock(\"CAPTION\").setParent(\"TABLE\").setExcludes(\"THEAD\", \"TFOOT\", \"TBODY\", \"COLGROUP\", \"COL\", \"TR\", \"TH\", \"TD\").setOptionalClosing();\n-        createBlock(\"THEAD\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing(); // just TR\n-        createBlock(\"TFOOT\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing(); // just TR\n-        createBlock(\"TBODY\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing(); // optional / implicit open too. just TR\n-        createBlock(\"COLGROUP\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing(); // just COL\n+        createBlock(\"TABLE\").setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\", \"TBODY\", \"TD\", \"TFOO\", \"TH\", \"THEAD\", \"TR\"); // specific list of only includes (tr, td, thead etc) not implemented\n+        createBlock(\"CAPTION\").setParent(\"TABLE\").setExcludes(\"THEAD\", \"TFOOT\", \"TBODY\", \"COLGROUP\", \"COL\", \"TR\", \"TH\", \"TD\").setOptionalClosing().setIgnoreEnd(\"BODY\", \"COL\", \"COLGROUP\", \"HTML\", \"TBODY\", \"TD\", \"TFOOT\", \"TH\", \"THEAD\", \"TR\");\n+        createBlock(\"THEAD\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\", \"TD\", \"TH\", \"TR\"); // just TR\n+        createBlock(\"TFOOT\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\", \"TD\", \"TH\", \"TR\"); // just TR\n+        createBlock(\"TBODY\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\", \"TD\", \"TH\", \"TR\"); // optional / implicit open too. just TR\n+        createBlock(\"COLGROUP\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing().setIgnoreEnd(\"COL\"); // just COL\n         createBlock(\"COL\").setParent(\"COLGROUP\").setEmpty();\n-        createBlock(\"TR\").setParent(\"TBODY\", \"THEAD\", \"TFOOT\", \"TABLE\").setLimitChildren().setOptionalClosing(); // just TH, TD\n-        createBlock(\"TH\").setParent(\"TR\").setExcludes(\"THEAD\", \"TFOOT\", \"TBODY\", \"COLGROUP\", \"COL\", \"TR\", \"TH\", \"TD\").setOptionalClosing();\n-        createBlock(\"TD\").setParent(\"TR\").setExcludes(\"THEAD\", \"TFOOT\", \"TBODY\", \"COLGROUP\", \"COL\", \"TR\", \"TH\", \"TD\").setOptionalClosing();\n+        createBlock(\"TR\").setParent(\"TBODY\", \"THEAD\", \"TFOOT\", \"TABLE\").setLimitChildren().setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\", \"TD\", \"TH\"); // just TH, TD\n+        createBlock(\"TH\").setParent(\"TR\").setExcludes(\"THEAD\", \"TFOOT\", \"TBODY\", \"COLGROUP\", \"COL\", \"TR\", \"TH\", \"TD\").setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\");\n+        createBlock(\"TD\").setParent(\"TR\").setExcludes(\"THEAD\", \"TFOOT\", \"TBODY\", \"COLGROUP\", \"COL\", \"TR\", \"TH\", \"TD\").setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\");\n         \n         // html5 media\n         createBlock(\"VIDEO\").setExcludes(\"VIDEO\", \"AUDIO\");\n         return this;\n     }\n \n+    private Tag setIgnoreEnd(String... tagNames) {\n+        if (tagNames == null || tagNames.length == 0) {\n+            ignoreEndTags = Collections.emptyList();\n+        } else {\n+            ignoreEndTags = new ArrayList<Tag>(tagNames.length);\n+            for (String name : tagNames) {\n+                ignoreEndTags.add(Tag.valueOf(name));\n+            }\n+        }\n+        return this;\n+    }\n+\n     private Tag setParent(String... tagNames) {\n         directDescendant = true;\n         setAncestor(tagNames);\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n         // <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table\n     }\n \n-    @Test public void handlesNestedImplicitTable() {\n+     @Test public void handlesNestedImplicitTable() {\n         Document doc = Jsoup.parse(\"<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>\");\n         assertEquals(\"<table><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tr><td>3</td> <td>4</td></tr></table> </td></tr><tr><td>5</td></tr></table>\", TextUtil.stripNewlines(doc.body().html()));\n     }\n     @Test public void handlesImplicitCaptionClose() {\n         Document doc = Jsoup.parse(\"<table><caption>A caption<td>One<td>Two\");\n         assertEquals(\"<table><caption>A caption</caption><tr><td>One</td><td>Two</td></tr></table>\", TextUtil.stripNewlines(doc.body().html()));\n+    }\n+\n+    @Test public void noTableDirectInTable() {\n+        Document doc = Jsoup.parse(\"<table> <td>One <td><table><td>Two</table> <table><td>Three\");\n+        assertEquals(\"<table> <tr><td>One </td><td><table><tr><td>Two</td></tr></table> <table><tr><td>Three</td></tr></table></td></tr></table>\", \n+            TextUtil.stripNewlines(doc.body().html()));\n+    }\n+\n+    @Test public void ignoresDupeEndTrTag() {\n+        Document doc = Jsoup.parse(\"<table><tr><td>One</td><td><table><tr><td>Two</td></tr></tr></table></td><td>Three</td></tr></table>\"); // two </tr></tr>, must ignore or will close table\n+        assertEquals(\"<table><tr><td>One</td><td><table><tr><td>Two</td></tr></table></td><td>Three</td></tr></table>\",\n+            TextUtil.stripNewlines(doc.body().html()));\n     }\n \n     @Test public void handlesBaseTags() {", "timestamp": 1309605120, "metainfo": ""}