{"sha": "7f90b98c1f77a0c1af9c774a12e8e257d7a0d1ac", "log": "OptionBuilder first cut   ", "commit": "\n--- a/src/java/org/apache/commons/cli/Option.java\n+++ b/src/java/org/apache/commons/cli/Option.java\n     private ArrayList  values       = new ArrayList();\n     \n \n-    /**\n-     * Creates an Option using the specified parameters.\n-     *\n-     * @param opt short representation of the option\n-     * @param hasArg specifies whether the Option takes an argument or not\n-     * @param description describes the function of the option\n-     */\n-    public Option(String opt, boolean hasArg, String description) {\n+    private void validateOption( String opt ) \n+    throws IllegalArgumentException\n+    {\n+        if( opt == null ) {\n+            throw new IllegalArgumentException( \"opt is null\" );\n+        }\n+        else if( opt.length() == 1 ) {\n+            if ( !isValidOpt( opt.charAt( 0 ) ) ) {\n+                throw new IllegalArgumentException( \"illegal option value '\" \n+                                                    + opt.charAt( 0 ) + \"'\" );\n+            }\n+        }\n+        else {\n+            char[] chars = opt.toCharArray();\n+            for( int i = 0; i < chars.length; i++ ) {\n+                if( !isValidChar( chars[i] ) ) {\n+                    throw new IllegalArgumentException( \"opt contains illegal character value '\" + chars[i] + \"'\" );\n+                }\n+            }\n+        }\n+    }\n+\n+    private boolean isValidOpt( char c ) \n+    {\n+        if ( ! ( isValidChar( c ) || c == '?' || c == '@') ) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private boolean isValidChar( char c ) \n+    {\n+        if ( ! ( Character.isLetter( c ) ) ) {\n+            return false;\n+        }\n+        return true;\n+    }\n+    /**\n+     * Creates an Option using the specified parameters.\n+     *\n+     * @param opt short representation of the option\n+     * @param hasArg specifies whether the Option takes an argument or not\n+     * @param description describes the function of the option\n+     */\n+    public Option(String opt, boolean hasArg, String description) \n+    throws IllegalArgumentException\n+    {\n         this(opt, null, hasArg, description, false, false);\n     }\n     \n      * @param hasArg specifies whether the Option takes an argument or not\n      * @param description describes the function of the option\n      */\n-    public Option(String opt, String longOpt, boolean hasArg, String description) {\n+    public Option(String opt, String longOpt, boolean hasArg, String description) \n+    throws IllegalArgumentException\n+    {\n         this(opt, longOpt, hasArg, description, false, false );\n     }\n \n      * @param required specifies whether the option is required or not\n      */\n     public Option(String opt, String longOpt, boolean hasArg, String description,\n-                  boolean required ) {\n+                  boolean required ) \n+    throws IllegalArgumentException\n+    {\n         this(opt, longOpt, hasArg, description, required, false );\n     }\n \n      * values\n      */\n     public Option(String opt, String longOpt, boolean hasArg, String description, \n-                  boolean required, boolean multipleArgs ) {\n+                  boolean required, boolean multipleArgs ) \n+    throws IllegalArgumentException\n+    {\n         this(opt, longOpt, hasArg, description, required, multipleArgs, null );\n     }\n \n      * @param type specifies the type of the option\n      */\n     public Option(String opt, String longOpt, boolean hasArg, String description, \n-                  boolean required, boolean multipleArgs, Object type ) {\n+                  boolean required, boolean multipleArgs, Object type ) \n+    throws IllegalArgumentException\n+    {\n+        validateOption( opt );\n+\n         this.opt          = opt;\n         this.longOpt      = longOpt;\n         this.hasArg       = hasArg;\n     public Object getType() {\n         return this.type;\n     }\n+\n+    public void setType( Object type ) {\n+        this.type = type;\n+    }\n     \n     /** <p>Retrieve the long name of this Option</p>\n      *\n      */\n     public String getLongOpt() {\n         return this.longOpt;\n+    }\n+\n+    public void setLongOpt( String longOpt ) {\n+        this.longOpt = longOpt;\n     }\n     \n     /** <p>Query to see if this Option has a long name</p>\n          return this.required;\n      }\n \n+     public void setRequired( boolean required ) {\n+         this.required = required;\n+     }\n+\n      /** <p>Query to see if this Option can take multiple values</p>\n       *\n       * @return boolean flag indicating if multiple values are allowed\n          return this.multipleArgs;\n      }\n \n+     public void setMultipleArgs( boolean multipleArgs ) {\n+         this.multipleArgs = multipleArgs;\n+     }\n+\n     /** <p>Dump state, suitable for debugging.</p>\n      *\n      * @return Stringified form of this object\n--- /dev/null\n+++ b/src/java/org/apache/commons/cli/OptionBuilder.java\n+package org.apache.commons.cli;\n+\n+public class OptionBuilder {\n+\n+    private static String longopt;\n+    private static String description;\n+    private static boolean arg;\n+    private static boolean required;\n+    private static boolean multipleArgs;\n+    private static Object type;\n+\n+    private static OptionBuilder instance = new OptionBuilder();\n+\n+    // private constructor\n+    private OptionBuilder() {\n+    }\n+\n+    private static void reset() {\n+        description = null;\n+        longopt = null;\n+        type = null;\n+        arg = false;\n+        required = false;\n+        multipleArgs = false;\n+    }\n+\n+    public static OptionBuilder withLongOpt( String longopt ) {\n+        instance.longopt = longopt;\n+        return instance;\n+    }\n+\n+    public static OptionBuilder hasArg( ) {\n+        instance.arg = true;\n+        return instance;\n+    }\n+\n+    public static OptionBuilder isRequired( ) {\n+        instance.required = true;\n+        return instance;\n+    }\n+\n+    public static OptionBuilder hasMultipleArgs( ) {\n+        instance.multipleArgs = true;\n+        return instance;\n+    }\n+\n+    public static OptionBuilder withType( Object type ) {\n+        instance.type = type;\n+        return instance;\n+    }\n+\n+    public static OptionBuilder withDescription( String description ) {\n+        instance.description = description;\n+        return instance;\n+    }\n+\n+    public static Option create( char opt )\n+    throws IllegalArgumentException\n+    {\n+        return create( String.valueOf( opt ) );\n+    }\n+\n+    public static Option create( String opt ) \n+    throws IllegalArgumentException\n+    {\n+        Option option = new Option( opt, arg, description );\n+        option.setLongOpt( longopt );\n+        option.setRequired( required );\n+        option.setMultipleArgs( multipleArgs );\n+        option.setType( type );\n+        instance.reset();\n+        return option;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli/OptionBuilderTest.java\n+package org.apache.commons.cli;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import junit.textui.TestRunner;\n+\n+public class OptionBuilderTest extends TestCase {\n+\n+    public OptionBuilderTest( String name ) {\n+        super( name );\n+    }\n+\n+    public static Test suite() { \n+        return new TestSuite( OptionBuilderTest.class ); \n+    }\n+\n+    public static void main( String args[] ) { \n+        TestRunner.run( suite() );\n+    }\n+\n+    public void testCompleteOption( ) {\n+        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n+                                     .hasArg( )\n+                                     .isRequired( )\n+                                     .hasMultipleArgs( )\n+                                     .withType( new Float( 10 ) )\n+                                     .withDescription( \"this is a simple option\" )\n+                                     .create( 's' );\n+\n+        assertEquals( \"s\", simple.getOpt() );\n+        assertEquals( \"simple option\", simple.getLongOpt() );\n+        assertEquals( \"this is a simple option\", simple.getDescription() );\n+        assertEquals( simple.getType().getClass(), Float.class );\n+        assertTrue( simple.hasArg() );\n+        assertTrue( simple.isRequired() );\n+        assertTrue( simple.hasMultipleArgs() );\n+    }\n+\n+    public void testTwoCompleteOptions( ) {\n+        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n+                                     .hasArg( )\n+                                     .isRequired( )\n+                                     .hasMultipleArgs( )\n+                                     .withType( new Float( 10 ) )\n+                                     .withDescription( \"this is a simple option\" )\n+                                     .create( 's' );\n+\n+        assertEquals( \"s\", simple.getOpt() );\n+        assertEquals( \"simple option\", simple.getLongOpt() );\n+        assertEquals( \"this is a simple option\", simple.getDescription() );\n+        assertEquals( simple.getType().getClass(), Float.class );\n+        assertTrue( simple.hasArg() );\n+        assertTrue( simple.isRequired() );\n+        assertTrue( simple.hasMultipleArgs() );\n+\n+        simple = OptionBuilder.withLongOpt( \"dimple option\")\n+                              .hasArg( )\n+                              .withDescription( \"this is a dimple option\" )\n+                              .create( 'd' );\n+\n+        assertEquals( \"d\", simple.getOpt() );\n+        assertEquals( \"dimple option\", simple.getLongOpt() );\n+        assertEquals( \"this is a dimple option\", simple.getDescription() );\n+        assertNull( simple.getType() );\n+        assertTrue( simple.hasArg() );\n+        assertTrue( !simple.isRequired() );\n+        assertTrue( !simple.hasMultipleArgs() );\n+    }\n+\n+    public void testBaseOptionCharOpt() {\n+        Option base = OptionBuilder.withDescription( \"option description\")\n+                                   .create( 'o' );\n+\n+        assertEquals( \"o\", base.getOpt() );\n+        assertEquals( \"option description\", base.getDescription() );\n+        assertTrue( !base.hasArg() );\n+    }\n+\n+    public void testBaseOptionStringOpt() {\n+        Option base = OptionBuilder.withDescription( \"option description\")\n+                                   .create( \"o\" );\n+\n+        assertEquals( \"o\", base.getOpt() );\n+        assertEquals( \"option description\", base.getDescription() );\n+        assertTrue( !base.hasArg() );\n+    }\n+\n+    public void testSpecialOptChars() {\n+\n+        // '?'\n+        try {\n+            Option opt = OptionBuilder.withDescription( \"help options\" )\n+                                      .create( '?' );\n+            assertEquals( \"?\", opt.getOpt() );\n+        }\n+        catch( IllegalArgumentException arg ) {\n+            fail( \"IllegalArgumentException caught\" );\n+        }\n+\n+        // '@'\n+        try {\n+            Option opt = OptionBuilder.withDescription( \"read from stdin\" )\n+                                      .create( '@' );\n+            assertEquals( \"@\", opt.getOpt() );\n+        }\n+        catch( IllegalArgumentException arg ) {\n+            fail( \"IllegalArgumentException caught\" );\n+        }\n+    }\n+\n+    public void testIllegalOptions() {\n+        // bad single character option\n+        try {\n+            Option opt = OptionBuilder.withDescription( \"option description\" )\n+                                      .create( '\"' );\n+            fail( \"IllegalArgumentException not caught\" );\n+        }\n+        catch( IllegalArgumentException exp ) {\n+            // success\n+        }\n+\n+        // bad character in option string\n+        try {\n+            Option opt = OptionBuilder.create( \"opt`\" );\n+            fail( \"IllegalArgumentException not caught\" );\n+        }\n+        catch( IllegalArgumentException exp ) {\n+            // success\n+        }\n+\n+        // null option\n+        try {\n+            Option opt = OptionBuilder.create( null );\n+            fail( \"IllegalArgumentException not caught\" );\n+        }\n+        catch( IllegalArgumentException exp ) {\n+            // success\n+        }\n+\n+        // valid option \n+        try {\n+            Option opt = OptionBuilder.create( \"opt\" );\n+            // success\n+        }\n+        catch( IllegalArgumentException exp ) {\n+            fail( \"IllegalArgumentException caught\" );\n+        }\n+    }\n+}", "timestamp": 1027980757, "metainfo": ""}