{"sha": "df8f8e160c5fc9b955c627c4b65c7ba67088b7ac", "log": "Making the OptionComparator modifiable so people can change the order in which arguments are printed by the HelpFormatter - as requested in CLI-155  ", "commit": "\n--- a/src/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli/HelpFormatter.java\n     public String defaultArgName = DEFAULT_ARG_NAME;\n \n     /**\n+     * Comparator used to sort the options when they output in help text\n+     * \n+     * Defaults to case-insensitive alphabetical sorting by option key\n+     */\n+    protected Comparator optionComparator = new OptionComparator();\n+\n+    /**\n      * Sets the 'width'.\n      *\n      * @param width the new value of 'width'\n     public String getArgName()\n     {\n         return this.defaultArgName;\n+    }\n+\n+    /**\n+     * Comparator used to sort the options when they output in help text\n+     * \n+     * Defaults to case-insensitive alphabetical sorting by option key\n+     */\n+    public Comparator getOptionComparator() \n+    {\n+        return this.optionComparator;\n+    }\n+\n+    /**\n+     * Set the comparator used to sort the options when they output in help text\n+     * \n+     * Passing in a null parameter will set the ordering to the default mode\n+     */\n+    public void setOptionComparator(Comparator comparator) \n+    {\n+        if ( comparator == null ) \n+        {\n+            this.optionComparator = new OptionComparator();\n+        } \n+        else \n+        {\n+            this.optionComparator = comparator;\n+        }\n     }\n \n \n         Option option;\n \n         List optList = new ArrayList(options.getOptions());\n-        Collections.sort(optList, new OptionComparator());\n+        Collections.sort(optList, getOptionComparator() );\n         // iterate over the options\n         for (Iterator i = optList.iterator(); i.hasNext();)\n         {\n      * @param group the group to append\n      * @see #appendOption(StringBuffer,Option,boolean)\n      */\n-    private static void appendOptionGroup(final StringBuffer buff, \n+    private void appendOptionGroup(final StringBuffer buff, \n                                           final OptionGroup group)\n     {\n         if (!group.isRequired())\n         }\n \n         List optList = new ArrayList(group.getOptions());\n-        Collections.sort(optList, new OptionComparator());\n+        Collections.sort(optList, getOptionComparator() );\n         // for each option in the OptionGroup\n         for (Iterator i = optList.iterator(); i.hasNext();)\n         {\n         Option option;\n         List optList = options.helpOptions();\n \n-        Collections.sort(optList, new OptionComparator());\n+        Collections.sort(optList, getOptionComparator() );\n \n         for (Iterator i = optList.iterator(); i.hasNext();)\n         {\n--- a/src/test/org/apache/commons/cli/HelpFormatterTest.java\n+++ b/src/test/org/apache/commons/cli/HelpFormatterTest.java\n import java.io.ByteArrayOutputStream;\n import java.io.PrintWriter;\n \n+import java.util.Comparator;\n+\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n         assertEquals(\"usage: app [-a] [-b] [-c]\" + EOL, bytesOut.toString());\n     }\n \n+    // uses the test for CLI-131 to implement CLI-155\n+    public void testPrintSortedUsage() {\n+        Option optionA = new Option(\"a\", \"first\");\n+        Option optionB = new Option(\"b\", \"second\");\n+        Option optionC = new Option(\"c\", \"third\");\n+        Options opts = new Options();\n+        opts.addOption(optionA);\n+        opts.addOption(optionB);\n+        opts.addOption(optionC);\n+        HelpFormatter helpFormatter = new HelpFormatter();\n+        helpFormatter.setOptionComparator(\n+            new Comparator() { \n+                public int compare(Object o1, Object o2) {\n+                    // reverses the fuctionality of the default comparator\n+                    Option opt1 = (Option)o1;\n+                    Option opt2 = (Option)o2;\n+                    return opt2.getKey().compareToIgnoreCase(opt1.getKey());\n+                }\n+            } );\n+        ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\n+        PrintWriter printWriter = new PrintWriter(bytesOut);\n+        helpFormatter.printUsage(printWriter, 80, \"app\", opts);\n+        printWriter.close();\n+        assertEquals(\"usage: app [-c] [-b] [-a]\" + EOL, bytesOut.toString());\n+    }\n+\n }", "timestamp": 1210654499, "metainfo": ""}