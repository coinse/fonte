{"sha": "249ba6c8d44720bc697400961a18f935110526b1", "log": "Nested group handling improved Applied the test from the bug and implemented an alternate fix PR: 32533 Submitted by: David Morris   ", "commit": "\n--- a/src/java/org/apache/commons/cli2/option/GroupImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/GroupImpl.java\n                     // narrow the search\n                     final Collection values = optionMap.tailMap(arg).values();\n                     \n-                    for (Iterator i = values.iterator(); i.hasNext();) {\n+                    boolean foundMemberOption = false;\n+                    for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) {\n                         final Option option = (Option) i.next();\n                         \n                         if (option.canProcess(arg)) {\n+                        \tfoundMemberOption = true;\n                             arguments.previous();\n                             option.process(commandLine, arguments);\n                         }\n+                    }\n+                    // back track and abort this group if necessary\n+                    if(!foundMemberOption) {\n+                    \targuments.previous();\n+                    \treturn;\n                     }\n                 } // [END argument may be anonymous\n                 \n--- /dev/null\n+++ b/src/test/org/apache/commons/cli2/bug/Bug32533Test.java\n+/**\n+ * Copyright 2004 The Apache Software Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.cli2.bug;\n+\n+import org.apache.commons.cli2.Argument;\n+import org.apache.commons.cli2.Group;\n+import org.apache.commons.cli2.Option;\n+import org.apache.commons.cli2.OptionException;\n+import org.apache.commons.cli2.builder.ArgumentBuilder;\n+import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n+import org.apache.commons.cli2.builder.GroupBuilder;\n+import org.apache.commons.cli2.commandline.Parser;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author roxspring\n+ */\n+public class Bug32533Test extends TestCase {\n+    \n+    public void testBlah() throws OptionException {\n+        \n+        Option a1 = new DefaultOptionBuilder().withLongName(\"a1\").create();\n+        Option b1 = new DefaultOptionBuilder().withLongName(\"b1\").create();\n+        Option c1 = new DefaultOptionBuilder().withLongName(\"c1\").create();\n+        \n+        Group b = new GroupBuilder().withOption(b1).create();\n+        Group c = new GroupBuilder().withOption(c1).create();\n+        Group a = new GroupBuilder().withOption(a1).withOption(b).withOption(c).create();\n+        \n+        Parser parser = new Parser();  \n+        parser.setGroup(a);\n+        parser.parse(new String[]{\"--a1\",\"--b1\"});\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli2/option/NestedGroupTest.java\n+/**\n+ * Copyright 2003-2004 The Apache Software Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.cli2.option;\n+\n+import org.apache.commons.cli2.CLITestCase;\n+import org.apache.commons.cli2.CommandLine;\n+import org.apache.commons.cli2.Group;\n+import org.apache.commons.cli2.OptionException;\n+import org.apache.commons.cli2.builder.ArgumentBuilder;\n+import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n+import org.apache.commons.cli2.builder.GroupBuilder;\n+import org.apache.commons.cli2.commandline.Parser;\n+import org.apache.commons.cli2.util.HelpFormatter;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+/**\n+ * Test to exercise nested groups developed to demonstrate bug 32533\n+ */\n+public class NestedGroupTest extends CLITestCase {\n+    final static DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n+    final static ArgumentBuilder abuilder = new ArgumentBuilder();\n+    final static GroupBuilder gbuilder = new GroupBuilder();\n+\n+    static Group buildActionGroup() {\n+        return gbuilder.withName(\"Action\").withDescription(\"Action\")\n+                       .withMinimum(1).withMaximum(1)\n+                       .withOption(obuilder.withId(5).withShortName(\"e\")\n+                                           .withLongName(\"encrypt\")\n+                                           .withDescription(\"Encrypt input\")\n+                                           .create())\n+                       .withOption(obuilder.withId(6).withShortName(\"d\")\n+                                           .withLongName(\"decrypt\")\n+                                           .withDescription(\"Decrypt input\")\n+                                           .create()).create();\n+    }\n+\n+    static Group buildAlgorithmGroup() {\n+        return gbuilder.withName(\"Algorithm\")\n+                       .withDescription(\"Encryption Algorithm\").withMaximum(1)\n+                       .withOption(obuilder.withId(0).withShortName(\"b\")\n+                                           .withLongName(\"blowfish\")\n+                                           .withDescription(\"Blowfish\").create())\n+                       .withOption(obuilder.withId(1).withShortName(\"3\")\n+                                           .withLongName(\"3DES\")\n+                                           .withDescription(\"Triple DES\")\n+                                           .create()).create();\n+    }\n+\n+    static Group buildInputGroup() {\n+        return gbuilder.withName(\"Input\").withDescription(\"Input\").withMinimum(1)\n+                       .withMaximum(1)\n+                       .withOption(obuilder.withId(2).withShortName(\"f\")\n+                                           .withLongName(\"file\")\n+                                           .withDescription(\"Input file\")\n+                                           .withArgument(abuilder.withName(\n+                    \"file\").withMinimum(1).withMaximum(1).create()).create())\n+                       .withOption(obuilder.withId(3).withShortName(\"s\")\n+                                           .withLongName(\"string\")\n+                                           .withDescription(\"Input string\")\n+                                           .withArgument(abuilder.withName(\n+                    \"string\").withMinimum(1).withMaximum(1).create()).create())\n+                       .create();\n+    }\n+\n+    static Group buildEncryptionServiceGroup(Group[] nestedGroups) {\n+        gbuilder.withName(\"encryptionService\")\n+                .withOption(obuilder.withId(4).withShortName(\"h\")\n+                                    .withLongName(\"help\")\n+                                    .withDescription(\"Print this message\")\n+                                    .create()).withOption(obuilder.withShortName(\n+                \"k\").withLongName(\"key\").withDescription(\"Encryption key\")\n+                                                                  .create());\n+\n+        for (int i = 0; i < nestedGroups.length; i++) {\n+            gbuilder.withOption(nestedGroups[i]);\n+        }\n+\n+        return gbuilder.create();\n+    }\n+\n+    public void testNestedGroup()\n+        throws OptionException {\n+        final String[] args = {\n+                \"-eb\",\n+                \"--file\",\n+                \"/tmp/filename.txt\"\n+            };\n+\n+        Group[] nestedGroups = {\n+                buildActionGroup(),\n+                buildAlgorithmGroup(),\n+                buildInputGroup()\n+            };\n+\n+        Parser parser = new Parser();\n+        parser.setGroup(buildEncryptionServiceGroup(nestedGroups));\n+\n+        CommandLine commandLine = parser.parse(args);\n+\n+        assertTrue(\"/tmp/filename.txt\".equals(\n+                (String) commandLine.getValue(\"-f\")));\n+        assertTrue(commandLine.hasOption(\"-e\"));\n+        assertTrue(commandLine.hasOption(\"-b\"));\n+        assertFalse(commandLine.hasOption(\"-d\"));\n+    }\n+\n+    public void testNestedGroupHelp()\n+        throws OptionException {\n+        final String[] args = {\n+                \"-eb\",\n+                \"--file\",\n+                \"/tmp/filename.txt\"\n+            };\n+\n+        Group[] nestedGroups = {\n+                buildActionGroup(),\n+                buildAlgorithmGroup(),\n+                buildInputGroup()\n+            };\n+\n+        HelpFormatter helpFormatter = new HelpFormatter();\n+        helpFormatter.setGroup(buildEncryptionServiceGroup(nestedGroups));\n+\n+        final StringWriter out = new StringWriter();\n+        helpFormatter.setPrintWriter(new PrintWriter(out));\n+\n+        try {\n+            helpFormatter.print();\n+\n+            final BufferedReader bufferedReader = new BufferedReader(new StringReader(\n+                        out.toString()));\n+            final String[] expected = new String[] {\n+                    \"Usage:                                                                          \",\n+                    \" [-h -k -e|-d -b|-3 -f <file>|-s <string>]                                      \",\n+                    \"encryptionService                                                               \",\n+                    \"  -h (--help)               Print this message                                  \",\n+                    \"  -k (--key)                Encryption key                                      \",\n+                    \"  Action                    Action                                              \",\n+                    \"    -e (--encrypt)          Encrypt input                                       \",\n+                    \"    -d (--decrypt)          Decrypt input                                       \",\n+                    \"  Algorithm                 Encryption Algorithm                                \",\n+                    \"    -b (--blowfish)         Blowfish                                            \",\n+                    \"    -3 (--3DES)             Triple DES                                          \",\n+                    \"  Input                     Input                                               \",\n+                    \"    -f (--file) file        Input file                                          \",\n+                    \"    -s (--string) string    Input string                                        \"\n+                };\n+\n+            List actual = new ArrayList(expected.length);\n+            String input;\n+\n+            while ((input = bufferedReader.readLine()) != null) {\n+                actual.add(input);\n+            }\n+\n+            // Show they are the same number of lines\n+            assertEquals(\"Help text lines should be \" + expected.length,\n+                actual.size(), expected.length);\n+\n+            for (int i = 0; i < expected.length; i++) {\n+                if (!expected[i].equals(actual.get(i))) {\n+                    for (int x = 0; x < expected.length; i++) {\n+                        System.out.println(\"   \" + expected[i]);\n+                        System.out.println((expected[i].equals(actual.get(i))\n+                            ? \"== \"\n+                            : \"!= \") + actual.get(i));\n+                    }\n+                }\n+\n+                assertEquals(expected[i], actual.get(i));\n+            }\n+        }\n+        catch (IOException e) {\n+            fail(e.getLocalizedMessage());\n+        }\n+    }\n+}", "timestamp": 1109268420, "metainfo": ""}