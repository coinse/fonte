{"sha": "42b00e9972d7abcf2001fc641d4c824b38b2a75c", "log": "- fixed errors reported by javadoc tool - added html and body tags to package.html  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/Option.java\n+++ b/src/java/org/apache/commons/cli2/Option.java\n-/**\n+/*\n  * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n      * argument. The ListIterator must be restored to the initial state before\n      * returning the boolean.\n      * \n-     * @see #canProcess(String)\n+     * @see #canProcess(WriteableCommandLine,String)\n      * @param arguments\n      *            the ListIterator over String arguments\n      * @return true if the argument can be processed by this Option\n      * Builds up a list of HelpLineImpl instances to be presented by HelpFormatter.\n      * \n      * @see HelpLine\n-     * @see HelpFormatter\n+     * @see org.apache.commons.cli2.util.HelpFormatter\n      * @param depth\n      *            the initial indent depth\n      * @param helpSettings\n      * Returns a description of the option. This string is used to build help\n      * messages as in the HelpFormatter.\n      * \n-     * @see HelpFormatter\n+     * @see org.apache.commons.cli2.util.HelpFormatter\n      * @return a description of the option.\n      */\n     String getDescription();\n--- a/src/java/org/apache/commons/cli2/builder/CommandBuilder.java\n+++ b/src/java/org/apache/commons/cli2/builder/CommandBuilder.java\n  */\n public class CommandBuilder {\n \n+    /** the preferred name of the command */\n     private String preferredName;\n+\n+    /** the description of the command */\n     private String description;\n+\n+    /** the aliases of the command */\n     private Set aliases;\n+\n+    /** whether the command is required or not */\n     private boolean required;\n+\n+    /** the argument of the command */\n     private Argument argument;\n+\n+    /** the children of the command */\n     private Group children;\n+\n+    /** the id of the command */\n     private int id;\n \n     /**\n-     * Creates a new CommandBuilder instance\n+     * Creates a new <code>CommandBuilder</code> instance.\n      */\n     public CommandBuilder() {\n         reset();\n     }\n \n     /**\n-     * Creates a new Command instance using the properties of the\n-     * CommandBuilder.\n+     * Creates a new <code>Command</code> instance using the properties of the\n+     * <code>CommandBuilder</code>.\n      * \n      * @return the new Command instance\n      */\n     }\n \n     /**\n-     * Resets the CommandBuilder to the defaults for a new Command. The method\n-     * should be called automatically at the end of a create() call.\n+     * Resets the CommandBuilder to the defaults for a new Command. \n+     * \n+     * This method is called automatically at the end of the\n+     * {@link #create() create} method.\n      */\n     public CommandBuilder reset() {\n         preferredName = null;\n     }\n \n     /**\n-     * Sets the name of the command. The first name is used as the preferred\n-     * display name for the Command and then later names are used as aliases.\n+     * Specifies the name for the next <code>Command</code> \n+     * that is created.  The first name is used as the preferred\n+     * display name for the <code>Command</code> and then \n+     * later names are used as aliases.\n      * \n-     * @param name\n-     *            a name for the Command\n-     * @return this CommandBuilder\n+     * @param name the name for the next <code>Command</code>\n+     * that is created.\n+     * @return this <code>CommandBuilder</code>.\n      */\n     public CommandBuilder withName(final String name) {\n         if (preferredName == null) {\n     }\n \n     /**\n-     * Sets the description of the command. The description is used to produce\n-     * online help for the command.\n+     * Specifies the description for the next <code>Command</code>\n+     * that is created.  This description is used to produce \n+     * help documentation for the <code>Command</code>.\n      * \n-     * @param newDescription\n-     *            The description of the command\n-     * @return this CommandBuilder\n+     * @param newDescription the description for the next \n+     * <code>Command</code> that is created.\n+     * @return this <code>CommandBuilder</code>.\n      */\n     public CommandBuilder withDescription(final String newDescription) {\n         this.description = newDescription;\n     }\n \n     /**\n-     * Use this optionality\n-     * @param newRequired true iff the Option is required\n-     * @return this builder\n+     * Specifies whether the next <code>Command</code> created is\n+     * required or not.\n+     * @param newRequired whether the next <code>Command</code> created is\n+     * required or not.\n+     * @return this <code>CommandBuilder</code>.\n      */\n     public CommandBuilder withRequired(final boolean newRequired) {\n         this.required = newRequired;\n     }\n \n     /**\n-     * Sets the children of the Command.\n+     * Specifies the children for the next <code>Command</code> \n+     * that is created.\n      * \n-     * @param newChildren\n-     *            the child options for the Command\n-     * @return this CommandBuilder\n+     * @param newChildren the child options for the next <code>Command</code>\n+     * that is created.\n+     * @return this <code>CommandBuilder</code>.\n      */\n     public CommandBuilder withChildren(final Group newChildren) {\n         this.children = newChildren;\n     }\n \n     /**\n-     * Sets the argument of the Command.\n+     * Specifies the argument for the next <code>Command</code> \n+     * that is created.\n      * \n-     * @param newArgument\n-     *            the argument for the Command\n-     * @return this CommandBuilder\n+     * @param newArgument the argument for the next <code>Command</code> \n+     * that is created.\n+     * @return this <code>CommandBuilder</code>.\n      */\n     public CommandBuilder withArgument(final Argument newArgument) {\n         this.argument = newArgument;\n     }\n \n     /**\n-     * Sets the id\n+     * Specifies the id for the next <code>Command</code> that is created.\n      * \n-     * @param newId\n-     *            the id of the Command\n-     * @return this CommandBuilder\n+     * @param newId the id for the next <code>Command</code> that is created.\n+     * @return this <code>CommandBuilder</code>.\n      */\n     public final CommandBuilder withId(final int newId) {\n         this.id = newId;\n--- a/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n-/**\n+/*\n  * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n      *            The object responsible for validating the values\n      * @param consumeRemaining\n      *            The String used for the \"consuming option\" group\n-     * @param defaultValues\n+     * @param valueDefaults\n      *            The values to be used if none are specified.\n      * @param id\n      *            The id of the option, 0 implies automatic assignment.\n                 resources.getMessage(\"cli.error.minimum.exceeds.maximum\"));\n         }\n \n-        if (valueDefaults != null) {\n+        if (valueDefaults != null && valueDefaults.size() > 0) {\n             if (valueDefaults.size() < minimum) {\n                 throw new IllegalArgumentException(\n                     resources.getMessage(\"cli.error.too.few.defaults\"));\n--- a/src/java/org/apache/commons/cli2/validation/ClassValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/ClassValidator.java\n import org.apache.commons.cli2.resource.ResourceHelper;\n \n /**\n- * A validator checking for classnames\n+ * The <code>ClassValidator</code> validates the string argument\n+ * values are class names.\n+ *\n+ * The following example shows how to validate the 'logger'\n+ * argument value is a class name, that can be instantiated.\n+ *\n+ * <pre>\n+ * ...\n+ * ClassValidator validator = new ClassValidator();\n+ * validator.setInstance(true);\n+ *\n+ * ArgumentBuilder builder = new ArgumentBuilder();\n+ * Argument logger = \n+ *     builder.withName(\"logger\");\n+ *            .withValidator(validator);\n+ * </pre>\n+ * \n+ * @author John Keyes\n  */\n public class ClassValidator implements Validator {\n \n      * Specifies whether the argument value must represent a\n      * class that can be instantiated.\n      *\n-     * @param loadable whether the argument value must \n+     * @param instance whether the argument value must \n      * represent a class that can be instantiated.\n      */\n     public void setInstance(boolean instance) {\n--- a/src/java/org/apache/commons/cli2/validation/DateValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/DateValidator.java\n import java.util.ListIterator;\n \n /**\n- * A Validator for date and time value(s).\n+ * The <code>DateValidator</code> validates the argument values\n+ * are date or time value(s).\n  *\n  * The following example shows how to validate that\n  * an argument value(s) is a Date of the following \n--- a/src/java/org/apache/commons/cli2/validation/EnumValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/EnumValidator.java\n import java.util.Set;\n \n /**\n- * A Validator for a list of known string values.\n+ * The <code>EnumValidator</code> validates the string argument\n+ * values are valid.\n  *\n  * The following example shows how to limit the valid values\n  * for the color argument to 'red', 'green', or 'blue'.\n--- a/src/java/org/apache/commons/cli2/validation/FileValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/FileValidator.java\n      * Specifies whether the argument values must represent existing \n      * files/directories.\n      *\n-     * @param directory specifies whether the argument values must \n+     * @param existing specifies whether the argument values must \n      * represent existing files/directories.\n      */\n     public void setExisting(boolean existing) {\n      * Specifies whether the argument values must represent hidden \n      * files/directories.\n      *\n-     * @param file specifies whether the argument values must \n+     * @param hidden specifies whether the argument values must \n      * represent hidden files/directories.\n      */\n     public void setHidden(boolean hidden) {\n      * Specifies whether the argument values must represent readable \n      * files/directories.\n      *\n-     * @param file specifies whether the argument values must \n+     * @param readable specifies whether the argument values must \n      * represent readable files/directories.\n      */\n     public void setReadable(boolean readable) {\n      * Specifies whether the argument values must represent writable \n      * files/directories.\n      *\n-     * @param file specifies whether the argument values must \n+     * @param writable specifies whether the argument values must \n      * represent writable files/directories.\n      */\n     public void setWritable(boolean writable) {\n--- a/src/java/org/apache/commons/cli2/validation/NumberValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/NumberValidator.java\n     /**\n      * Returns a <code>NumberValidator</code> for a general-purpose \n      * number format for the current default locale.\n-     * @returns a <code>NumberValidator</code> for a general-purpose \n+     * @return a <code>NumberValidator</code> for a general-purpose \n      * number format for the current default locale.\n      */\n     public static NumberValidator getNumberInstance() {\n--- a/src/java/org/apache/commons/cli2/validation/UrlValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/UrlValidator.java\n  *\n  * URLs can also be validated based on their scheme by using \n  * the {@link #setProtocol setProtocol} method, or by using the specified\n- * {@link UrlValidator(java.lang.String) constructor}.\n+ * {@link #UrlValidator(java.lang.String) constructor}.\n  *\n  * The following example shows how to limit the valid values\n  * for the site argument to 'https' URLs.\n     /**\n      * Validate the list of values against the list of permitted values.\n      * If a value is valid, replace the string in the <code>values</code>\n-     * {@link java.util.List} with the {@link java.net.URL} instance.\n+     * {@link java.util.List} with the { java.net.URL} instance.\n      * \n      * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)\n      */", "timestamp": 1125780361, "metainfo": ""}