{"sha": "e8e755bfb9a0b1b8b19e8312942ea29cb9b626da", "log": "Implemented select(\"ancestor descendant\").", "commit": "\n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n         Character c = queue.peek();\n         while (!queue.isEmpty() && (Character.isLetterOrDigit(c) || c.equals('-') || c.equals('_'))) {\n             accum.append(queue.removeFirst());\n+            c = queue.peek();\n+        }\n+        return accum.toString();\n+    }\n+\n+    public String remainder() {\n+        StringBuilder accum = new StringBuilder();\n+        for (Character character : queue) {\n+            accum.append(character);\n         }\n         return accum.toString();\n     }\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n     private final TokenQueue tq;\n \n     private Selector(String query, Element root) {\n+        Validate.notNull(query);\n+        query = query.trim();\n         Validate.notEmpty(query);\n         Validate.notNull(root);\n \n         this.elements = new LinkedHashSet<Element>();\n-        this.query = query.trim();\n+        this.query = query;\n         this.root = root;\n         this.tq = new TokenQueue(query);\n     }\n \n     private Elements select() {\n         tq.consumeWhitespace();\n-        while (!tq.isEmpty()) {\n-            if (tq.matchChomp(\"#\")) {\n-                byId();\n-            } else if (tq.matchChomp(\".\")) {\n-                byClass();\n-            } else if (tq.matchesWord()) {\n-                byTag();\n-            } else if (tq.matchChomp(\"[\")) {\n-                byAttribute();\n-            } else if (tq.matchChomp(\",\")) {\n-                groupOr();\n-            } else { // unhandled\n-                throw new SelectorParseException(\"Could not parse query \" + query);\n+\n+        if (tq.matchChomp(\"#\")) {\n+            byId();\n+        } else if (tq.matchChomp(\".\")) {\n+            byClass();\n+        } else if (tq.matchesWord()) {\n+            byTag();\n+        } else if (tq.matchChomp(\"[\")) {\n+            byAttribute();\n+        } else { // unhandled\n+            throw new SelectorParseException(\"Could not parse query \" + query);\n+        }\n+        tq.consumeWhitespace();\n+\n+        // hierarchy (todo: implement >, +, ~)\n+        if (!tq.isEmpty()) {\n+            if (tq.matchChomp(\",\")) { // group or\n+                while (!tq.isEmpty()) {\n+                    String subQuery = tq.chompTo(\",\");\n+                    elements.addAll(select(subQuery, root));\n+                }\n+                return new Elements(elements);\n+            } else { // ancestor descendant (AND, really)\n+                return new Elements(select(tq.remainder(), elements));\n             }\n+        } else {\n+            return new Elements(elements);\n         }\n-        return new Elements(elements);\n     }\n \n     private void byId() {\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n \n     @Test public void testGroupOr() {\n         String h = \"<div title=foo /><div title=bar /><div /><p></p><img /><span title=qux>\";\n-        Elements els = Jsoup.parse(h).select(\"p,div,[title]\");\n+        Document doc = Jsoup.parse(h);\n+        Elements els = doc.select(\"p,div,[title]\");\n \n         assertEquals(5, els.size());\n         assertEquals(\"p\", els.get(0).tagName());\n         assertEquals(\"div\", els.get(3).tagName());\n         assertNull(els.get(3).attr(\"title\"));\n         assertEquals(\"span\", els.get(4).tagName());\n+    }\n \n+    @Test public void testGroupOrAttribute() {\n+        String h = \"<div id=1 /><div id=2 /><div title=foo /><div title=bar />\";\n+        Elements els = Jsoup.parse(h).select(\"[id],[title=foo]\");\n+\n+        assertEquals(3, els.size());\n+        assertEquals(\"1\", els.get(0).id());\n+        assertEquals(\"2\", els.get(1).id());\n+        assertEquals(\"foo\", els.get(2).attr(\"title\"));\n+    }\n+\n+    @Test public void descendant() {\n+        String h = \"<div class=head><p class=first>Hello</p><p>There</p></div><p>None</p>\";\n+        Document doc = Jsoup.parse(h);\n+        Elements els = doc.select(\".head p\");\n+        assertEquals(2, els.size());\n+        assertEquals(\"Hello\", els.get(0).text());\n+        assertEquals(\"There\", els.get(1).text());\n+\n+        Elements p = doc.select(\"p.first\");\n+        assertEquals(1, p.size());\n+        assertEquals(\"Hello\", p.get(0).text());\n     }\n }", "timestamp": 1309605101, "metainfo": ""}