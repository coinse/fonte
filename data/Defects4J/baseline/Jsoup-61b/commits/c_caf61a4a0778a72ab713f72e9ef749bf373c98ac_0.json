{"sha": "caf61a4a0778a72ab713f72e9ef749bf373c98ac", "log": "When parsing in XML mode, preserve XML declarations (<?xml ... ?>).  Fixes #242", "commit": "\n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n \n     static class Comment extends Token {\n         final StringBuilder data = new StringBuilder();\n+        boolean bogus = false;\n \n         Comment() {\n             type = TokenType.Comment;\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n             // rewind to capture character that lead us here\n             r.unconsume();\n             Token.Comment comment = new Token.Comment();\n+            comment.bogus = true;\n             comment.data.append(r.consumeTo('>'));\n             // todo: replace nullChar with replaceChar\n             t.emit(comment);\n--- a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n \n     void insert(Token.Comment commentToken) {\n         Comment comment = new Comment(commentToken.getData(), baseUri);\n-        insertNode(comment);\n+        Node insert = comment;\n+        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n+            String data = comment.getData();\n+            if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n+                String declaration = data.substring(1);\n+                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+            }\n+        }\n+        insertNode(insert);\n     }\n \n     void insert(Token.Character characterToken) {\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         doc.outputSettings().escapeMode(Entities.EscapeMode.extended); // modifies output only to clarify test\n         assertEquals(StringUtil.normaliseWhitespace(\"&amp; &quot; &reg; &amp;icy &amp;hopf &icy; &hopf;\"), doc.body().html());\n     }\n+\n+    @Test public void handlesXmlDeclarationAsBogusComment() {\n+        String html = \"<?xml encoding='UTF-8' ?><body>One</body>\";\n+        Document doc = Jsoup.parse(html);\n+        assertEquals(\"<!--?xml encoding='UTF-8' ?--> <html> <head></head> <body> One </body> </html>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n+    }\n }\n--- a/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java\n+++ b/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java\n \n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n+import org.jsoup.helper.StringUtil;\n import org.jsoup.nodes.Document;\n import org.junit.Ignore;\n import org.junit.Test;\n         Document xmlDoc = Jsoup.parse(\"<br>one</br>\", \"\", Parser.xmlParser());\n         assertEquals(\"<br>one</br>\", xmlDoc.html());\n     }\n+\n+    @Test public void handlesXmlDeclarationAsDeclaration() {\n+        String html = \"<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->\";\n+        Document doc = Jsoup.parse(html, \"\", Parser.xmlParser());\n+        assertEquals(\"<?xml encoding='UTF-8' ?> <body> One </body> <!-- comment -->\",\n+                StringUtil.normaliseWhitespace(doc.outerHtml()));\n+        assertEquals(\"#declaration\", doc.childNode(0).nodeName());\n+        assertEquals(\"#comment\", doc.childNode(2).nodeName());\n+    }\n }", "timestamp": 1348948715, "metainfo": ""}