{"sha": "43e17dc7f7c32e937448cff716e9af7aa40e5ec3", "log": "Changes for issue #467", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n package org.jsoup.nodes;\n \n+import org.jsoup.SerializationException;\n import org.jsoup.helper.Validate;\n \n+import java.io.IOException;\n import java.util.Arrays;\n import java.util.Map;\n \n      */\n     public String html() {\n         StringBuilder accum = new StringBuilder();\n-        html(accum, (new Document(\"\")).outputSettings());\n+        \n+        try {\n+        \thtml(accum, (new Document(\"\")).outputSettings());\n+        } catch(IOException exception) {\n+        \tthrow new SerializationException(String.format(\"Serialization of the attribute \\\"%s\\\" failed!\", getKey()) , exception);\n+        }\n         return accum.toString();\n     }\n     \n-    protected void html(StringBuilder accum, Document.OutputSettings out) {\n+    protected void html(Appendable accum, Document.OutputSettings out) throws IOException {\n         accum.append(key);\n+        \n         if (!shouldCollapseAttribute(out)) {\n             accum.append(\"=\\\"\");\n             Entities.escape(accum, value, out, true, false, false);\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n package org.jsoup.nodes;\n \n+import java.io.IOException;\n+import java.util.AbstractMap;\n+import java.util.AbstractSet;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.jsoup.SerializationException;\n import org.jsoup.helper.Validate;\n-\n-import java.util.*;\n \n /**\n  * The attributes of an Element.\n     /**\n      Get the HTML representation of these attributes.\n      @return HTML\n+     @throws SerializationException if the HTML representation of the attributes cannot be constructed.\n      */\n     public String html() {\n         StringBuilder accum = new StringBuilder();\n         return accum.toString();\n     }\n     \n-    void html(StringBuilder accum, Document.OutputSettings out) {\n+    void html(Appendable accum, Document.OutputSettings out) {\n         if (attributes == null)\n             return;\n         \n-        for (Map.Entry<String, Attribute> entry : attributes.entrySet()) {\n-            Attribute attribute = entry.getValue();\n-            accum.append(\" \");\n-            attribute.html(accum, out);\n-        }\n-    }\n-    \n-    public String toString() {\n+        try {\n+        \tfor (Map.Entry<String, Attribute> entry : attributes.entrySet()) {\n+                Attribute attribute = entry.getValue();\n+                accum.append(\" \");\n+                attribute.html(accum, out);\n+            }\n+        } catch(IOException exception) {\n+        \tthrow new SerializationException(\"Attribute serialization failed!\", exception);\n+        }\n+    }\n+    \n+    @Override\n+\tpublic String toString() {\n         return html();\n     }\n     \n--- a/src/main/java/org/jsoup/nodes/Comment.java\n+++ b/src/main/java/org/jsoup/nodes/Comment.java\n package org.jsoup.nodes;\n+\n+import java.io.IOException;\n \n /**\n  A comment node.\n         attributes.put(COMMENT_KEY, data);\n     }\n \n-    public String nodeName() {\n+    @Override\n+\tpublic String nodeName() {\n         return \"#comment\";\n     }\n \n         return attributes.get(COMMENT_KEY);\n     }\n \n-    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n+    @Override\n+\tvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         if (out.prettyPrint())\n             indent(accum, depth, out);\n-        accum\n-                .append(\"<!--\")\n-                .append(getData())\n-                .append(\"-->\");\n+        \n+        accum.append(\"<!--\").append(getData()).append(\"-->\");\n     }\n \n-    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n+    @Override\n+\tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}\n \n-    public String toString() {\n+    @Override\n+\tpublic String toString() {\n         return outerHtml();\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/DataNode.java\n+++ b/src/main/java/org/jsoup/nodes/DataNode.java\n package org.jsoup.nodes;\n+\n+import java.io.IOException;\n \n /**\n  A data node, for contents of style, script tags etc, where contents should not show in text().\n         return this;\n     }\n \n-    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n+    @Override\n+\tvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         accum.append(getWholeData()); // data is not escaped in return from data nodes, so \" in script, style is plain\n     }\n \n-    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n+    @Override\n+\tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}\n \n-    public String toString() {\n+    @Override\n+\tpublic String toString() {\n         return outerHtml();\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n     public String nodeName() {\n         return \"#document\";\n     }\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public <T extends Appendable> T serialize(T appendable) {\n+    \t // Exclude outer wrapper tag.\n+    \tfor (Node node : childNodes)\n+            node.outerHtml(appendable);\n+    \t\n+    \treturn appendable;\n+    }\n \n     @Override\n     public Document clone() {\n--- a/src/main/java/org/jsoup/nodes/DocumentType.java\n+++ b/src/main/java/org/jsoup/nodes/DocumentType.java\n package org.jsoup.nodes;\n \n+import java.io.IOException;\n+\n import org.jsoup.helper.StringUtil;\n-import org.jsoup.helper.Validate;\n \n /**\n  * A {@code <!DOCTYPE>} node.\n     }\n \n     @Override\n-    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n+    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         accum.append(\"<!DOCTYPE\");\n         if (!StringUtil.isBlank(attr(\"name\")))\n             accum.append(\" \").append(attr(\"name\"));\n     }\n \n     @Override\n-    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {\n+    void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n package org.jsoup.nodes;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n \n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n import org.jsoup.parser.Parser;\n import org.jsoup.parser.Tag;\n-import org.jsoup.select.*;\n-\n-import java.util.*;\n-import java.util.regex.Pattern;\n-import java.util.regex.PatternSyntaxException;\n+import org.jsoup.select.Collector;\n+import org.jsoup.select.Elements;\n+import org.jsoup.select.Evaluator;\n+import org.jsoup.select.NodeTraversor;\n+import org.jsoup.select.NodeVisitor;\n+import org.jsoup.select.Selector;\n \n /**\n  * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n             attr(\"value\", value);\n         return this;\n     }\n-\n-    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n-        if (accum.length() > 0 && out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline()) )\n-            indent(accum, depth, out);\n-        accum\n-                .append(\"<\")\n-                .append(tagName());\n+    \n+    @Override\n+    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n+    \tif (out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline())) {\n+    \t\tif(accum instanceof StringBuilder) {\n+    \t\t\tif(((StringBuilder)accum).length() > 0)\n+    \t\t\t\tindent(accum, depth, out);\n+    \t\t} else {\n+    \t\t\tindent(accum, depth, out);\n+    \t\t}\n+    \t}\n+        accum.append(\"<\").append(tagName());\n         attributes.html(accum, out);\n \n         // selfclosing includes unknown tags, isEmpty defines tags that are always empty\n             accum.append(\">\");\n     }\n \n-    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {\n+    @Override\n+\tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         if (!(childNodes.isEmpty() && tag.isSelfClosing())) {\n             if (out.prettyPrint() && (!childNodes.isEmpty() && (\n                     tag.formatAsBlock() || (out.outline() && (childNodes.size()>1 || (childNodes.size()==1 && !(childNodes.get(0) instanceof TextNode))))\n         return this;\n     }\n \n-    public String toString() {\n+    @Override\n+\tpublic String toString() {\n         return outerHtml();\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n package org.jsoup.nodes;\n-\n-import org.jsoup.helper.StringUtil;\n-import org.jsoup.parser.Parser;\n \n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.charset.CharsetEncoder;\n-import java.util.*;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.MissingResourceException;\n+import java.util.Properties;\n+\n+import org.jsoup.helper.StringUtil;\n+import org.jsoup.parser.Parser;\n \n /**\n  * HTML entities, and escape routines.\n         return full.get(name);\n     }\n     \n-    static String escape(String string, Document.OutputSettings out) {\n+    static String escape(String string, Document.OutputSettings out) throws IOException {\n         StringBuilder accum = new StringBuilder(string.length() * 2);\n         escape(accum, string, out, false, false, false);\n         return accum.toString();\n     }\n \n     // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations\n-    static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n-                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n+    static void escape(Appendable accum, String string, Document.OutputSettings out,\n+                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) throws IOException {\n \n         boolean lastWasWhite = false;\n         boolean reachedNonWhite = false;\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n package org.jsoup.nodes;\n \n+import org.jsoup.SerializationException;\n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n import org.jsoup.parser.Parser;\n import org.jsoup.select.NodeTraversor;\n import org.jsoup.select.NodeVisitor;\n \n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.util.ArrayList;\n         return accum.toString();\n     }\n \n-    protected void outerHtml(StringBuilder accum) {\n+    protected void outerHtml(Appendable accum) {\n         new NodeTraversor(new OuterHtmlVisitor(accum, getOutputSettings())).traverse(this);\n     }\n \n     /**\n      Get the outer HTML of this node.\n      @param accum accumulator to place HTML into\n-     */\n-    abstract void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out);\n-\n-    abstract void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out);\n-\n-    public String toString() {\n+     @throws IOException if appending to the given accumulator fails.\n+     */\n+    abstract void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException;\n+\n+    abstract void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) throws IOException;\n+\n+    /**\n+     * Recursively serializes this node to the given {@link Appendable} and returns the resulting <code>Appendable</code> instance.\n+     *   \n+     * @param appendable the {@link Appendable} that should hold the content of this node and all its child nodes.\n+     * @return the given {@link Appendable}, now containing this node and all child nodes.\n+     */\n+    public <T extends Appendable> T serialize(T appendable) {\n+    \touterHtml(appendable);\n+    \treturn appendable;\n+    }\n+    \n+    @Override\n+\tpublic String toString() {\n         return outerHtml();\n     }\n \n-    protected void indent(StringBuilder accum, int depth, Document.OutputSettings out) {\n+    protected void indent(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         accum.append(\"\\n\").append(StringUtil.padding(depth * out.indentAmount()));\n     }\n \n     }\n \n     private static class OuterHtmlVisitor implements NodeVisitor {\n-        private StringBuilder accum;\n+        private Appendable accum;\n         private Document.OutputSettings out;\n \n-        OuterHtmlVisitor(StringBuilder accum, Document.OutputSettings out) {\n+        OuterHtmlVisitor(Appendable accum, Document.OutputSettings out) {\n             this.accum = accum;\n             this.out = out;\n         }\n \n         public void head(Node node, int depth) {\n-            node.outerHtmlHead(accum, depth, out);\n+            try {\n+\t\t\t\tnode.outerHtmlHead(accum, depth, out);\n+\t\t\t} catch (IOException exception) {\n+\t\t\t\tthrow new SerializationException(\"Node head serialization failed!\", exception);\n+\t\t\t}\n         }\n \n         public void tail(Node node, int depth) {\n-            if (!node.nodeName().equals(\"#text\")) // saves a void hit.\n-                node.outerHtmlTail(accum, depth, out);\n+            if (!node.nodeName().equals(\"#text\")) {\n+\t\t\t\ttry {\n+\t\t\t\t\tnode.outerHtmlTail(accum, depth, out);\n+\t\t\t\t} catch (IOException exception) {\n+\t\t\t\t\tthrow new SerializationException(\"Node tail serialization failed!\", exception);\n+\t\t\t\t}\n+            }\n         }\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n package org.jsoup.nodes;\n+\n+import java.io.IOException;\n \n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n         this.text = text;\n     }\n \n-    public String nodeName() {\n+    @Override\n+\tpublic String nodeName() {\n         return \"#text\";\n     }\n     \n         return tailNode;\n     }\n \n-    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n+    @Override\n+\tvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         if (out.prettyPrint() && ((siblingIndex() == 0 && parentNode instanceof Element && ((Element) parentNode).tag().formatAsBlock() && !isBlank()) || (out.outline() && siblingNodes().size()>0 && !isBlank()) ))\n             indent(accum, depth, out);\n \n         Entities.escape(accum, getWholeText(), out, false, normaliseWhite, false);\n     }\n \n-    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n+    @Override\n+\tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}\n \n-    public String toString() {\n+    @Override\n+\tpublic String toString() {\n         return outerHtml();\n     }\n \n--- a/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n+++ b/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n package org.jsoup.nodes;\n+\n+import java.io.IOException;\n \n /**\n  An XML Declaration.\n         return attributes.get(DECL_KEY);\n     }\n \n-    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n+    @Override\n+\tvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         accum\n                 .append(\"<\")\n                 .append(isProcessingInstruction ? \"!\" : \"?\")\n                 .append(\">\");\n     }\n \n-    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n+    @Override\n+\tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}\n \n-    public String toString() {\n+    @Override\n+\tpublic String toString() {\n         return outerHtml();\n     }\n }\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n package org.jsoup.integration;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URISyntaxException;\n \n import org.jsoup.Jsoup;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n import org.jsoup.select.Elements;\n import org.junit.Test;\n-\n-import java.io.*;\n-import java.net.URISyntaxException;\n-\n-import static org.junit.Assert.*;\n \n /**\n  * Integration test: parses from real-world example HTML.\n     public File getFile(String resourceName) {\n         try {\n             File file = new File(ParseTest.class.getResource(resourceName).toURI());\n+            \n             return file;\n         } catch (URISyntaxException e) {\n             throw new IllegalStateException(e);\n--- a/src/test/java/org/jsoup/nodes/EntitiesTest.java\n+++ b/src/test/java/org/jsoup/nodes/EntitiesTest.java\n import static org.jsoup.nodes.Entities.EscapeMode.*;\n import static org.junit.Assert.*;\n \n+import java.io.IOException;\n import java.nio.charset.Charset;\n \n public class EntitiesTest {\n-    @Test public void escape() {\n+    @Test public void escape() throws IOException {\n         String text = \"Hello &<> \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9 \u00bb\";\n         String escapedAscii = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(base));\n         String escapedAsciiFull = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(extended));\n         assertEquals(text, Entities.unescape(escapedUtfMin));\n     }\n \n-    @Test public void escapeSupplementaryCharacter(){\n+    @Test public void escapeSupplementaryCharacter() throws IOException{\n         String text = new String(Character.toChars(135361));\n         String escapedAscii = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(base));\n         assertEquals(\"&#x210c1;\", escapedAscii);\n     }\n \n     \n-    @Test public void caseSensitive() {\n+    @Test public void caseSensitive() throws IOException {\n         String unescaped = \"\u00dc \u00fc & &\";\n         assertEquals(\"&Uuml; &uuml; &amp; &amp;\",\n                 Entities.escape(unescaped, new OutputSettings().charset(\"ascii\").escapeMode(extended)));", "timestamp": 1412769154, "metainfo": ""}