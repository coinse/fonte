{"sha": "c28e5bf53a9ce9e32ab84ce2e6eba87ec747d1a0", "log": "Fixed handling of public/system flag in doctypes  Fixes #408", "commit": "\n--- a/src/main/java/org/jsoup/nodes/DocumentType.java\n+++ b/src/main/java/org/jsoup/nodes/DocumentType.java\n  * A {@code <!DOCTYPE>} node.\n  */\n public class DocumentType extends Node {\n+    public static final String PUBLIC_KEY = \"PUBLIC\";\n+    public static final String SYSTEM_KEY = \"SYSTEM\";\n     private static final String NAME = \"name\";\n+    private static final String PUB_SYS_KEY = \"pubSysKey\"; // PUBLIC or SYSTEM\n     private static final String PUBLIC_ID = \"publicId\";\n     private static final String SYSTEM_ID = \"systemId\";\n     // todo: quirk mode from publicId and systemId\n         super(baseUri);\n \n         attr(NAME, name);\n+        attr(PUBLIC_ID, publicId);\n+        if (has(PUBLIC_ID)) {\n+            attr(PUB_SYS_KEY, PUBLIC_KEY);\n+        }\n+        attr(SYSTEM_ID, systemId);\n+    }\n+\n+    /**\n+     * Create a new doctype element.\n+     * @param name the doctype's name\n+     * @param publicId the doctype's public ID\n+     * @param systemId the doctype's system ID\n+     * @param baseUri the doctype's base URI\n+     */\n+    public DocumentType(String name, String pubSysKey, String publicId, String systemId, String baseUri) {\n+        super(baseUri);\n+\n+        attr(NAME, name);\n+        if (pubSysKey != null) {\n+            attr(PUB_SYS_KEY, pubSysKey);\n+        }\n         attr(PUBLIC_ID, publicId);\n         attr(SYSTEM_ID, systemId);\n     }\n         }\n         if (has(NAME))\n             accum.append(\" \").append(attr(NAME));\n+        if (has(PUB_SYS_KEY))\n+            accum.append(\" \").append(attr(PUB_SYS_KEY));\n         if (has(PUBLIC_ID))\n-            accum.append(\" PUBLIC \\\"\").append(attr(PUBLIC_ID)).append('\"');\n+            accum.append(\" \\\"\").append(attr(PUBLIC_ID)).append('\"');\n         if (has(SYSTEM_ID))\n             accum.append(\" \\\"\").append(attr(SYSTEM_ID)).append('\"');\n         accum.append('>');\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n                 // todo: quirk state check on doctype ids\n                 Token.Doctype d = t.asDoctype();\n                 DocumentType doctype = new DocumentType(\n-                    tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());\n+                    tb.settings.normalizeTag(d.getName()), d.getPubSysKey(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());\n                 tb.getDocument().appendChild(doctype);\n                 if (d.isForceQuirks())\n                     tb.getDocument().quirksMode(Document.QuirksMode.quirks);\n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n \n     static final class Doctype extends Token {\n         final StringBuilder name = new StringBuilder();\n+        String pubSysKey = null;\n         final StringBuilder publicIdentifier = new StringBuilder();\n         final StringBuilder systemIdentifier = new StringBuilder();\n         boolean forceQuirks = false;\n         @Override\n         Token reset() {\n             reset(name);\n+            pubSysKey = null;\n             reset(publicIdentifier);\n             reset(systemIdentifier);\n             forceQuirks = false;\n \n         String getName() {\n             return name.toString();\n+        }\n+\n+        String getPubSysKey() {\n+            return pubSysKey;\n         }\n \n         String getPublicIdentifier() {\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n package org.jsoup.parser;\n+\n+import org.jsoup.nodes.DocumentType;\n \n import java.util.Arrays;\n \n             else if (r.matches('>')) {\n                 t.emitDoctypePending();\n                 t.advanceTransition(Data);\n-            } else if (r.matchConsumeIgnoreCase(\"PUBLIC\")) {\n+            } else if (r.matchConsumeIgnoreCase(DocumentType.PUBLIC_KEY)) {\n+                t.doctypePending.pubSysKey = DocumentType.PUBLIC_KEY;\n                 t.transition(AfterDoctypePublicKeyword);\n-            } else if (r.matchConsumeIgnoreCase(\"SYSTEM\")) {\n+            } else if (r.matchConsumeIgnoreCase(DocumentType.SYSTEM_KEY)) {\n+                t.doctypePending.pubSysKey = DocumentType.SYSTEM_KEY;\n                 t.transition(AfterDoctypeSystemKeyword);\n             } else {\n                 t.error(this);\n--- a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n     }\n \n     void insert(Token.Doctype d) {\n-        DocumentType doctypeNode = new DocumentType(settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier(), baseUri);\n+        DocumentType doctypeNode = new DocumentType(settings.normalizeTag(d.getName()), d.getPubSysKey(), d.getPublicIdentifier(), d.getSystemIdentifier(), baseUri);\n         insertNode(doctypeNode);\n     }\n \n--- a/src/test/java/org/jsoup/nodes/DocumentTypeTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTypeTest.java\n package org.jsoup.nodes;\n \n+import org.jsoup.Jsoup;\n+import org.jsoup.parser.Parser;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n         DocumentType combo = new DocumentType(\"notHtml\", \"--public\", \"--system\", \"\");\n         assertEquals(\"<!DOCTYPE notHtml PUBLIC \\\"--public\\\" \\\"--system\\\">\", combo.outerHtml());\n     }\n+\n+    @Test public void testRoundTrip() {\n+        String base = \"<!DOCTYPE html>\";\n+        assertEquals(\"<!doctype html>\", htmlOutput(base));\n+        assertEquals(base, xmlOutput(base));\n+\n+        String publicDoc = \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\";\n+        assertEquals(publicDoc, htmlOutput(publicDoc));\n+        assertEquals(publicDoc, xmlOutput(publicDoc));\n+\n+        String systemDoc = \"<!DOCTYPE html SYSTEM \\\"exampledtdfile.dtd\\\">\";\n+        assertEquals(systemDoc, htmlOutput(systemDoc));\n+        assertEquals(systemDoc, xmlOutput(systemDoc));\n+\n+        String legacyDoc = \"<!DOCTYPE html SYSTEM \\\"about:legacy-compat\\\">\";\n+        assertEquals(legacyDoc, htmlOutput(legacyDoc));\n+        assertEquals(legacyDoc, xmlOutput(legacyDoc));\n+    }\n+\n+    private String htmlOutput(String in) {\n+        DocumentType type = (DocumentType) Jsoup.parse(in).childNode(0);\n+        return type.outerHtml();\n+    }\n+\n+    private String xmlOutput(String in) {\n+        return Jsoup.parse(in, \"\", Parser.xmlParser()).childNode(0).outerHtml();\n+    }\n }", "timestamp": 1477357301, "metainfo": ""}