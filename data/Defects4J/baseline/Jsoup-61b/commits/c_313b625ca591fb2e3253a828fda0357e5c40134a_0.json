{"sha": "313b625ca591fb2e3253a828fda0357e5c40134a", "log": "Added removeProtocols method to Whitelist", "commit": "\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n     }\n \n     /**\n+     Remove allowed URL protocols for an element's URL attribute.\n+     <p/>\n+     E.g.: <code>removeProtocols(\"a\", \"href\", \"ftp\")</code>\n+\n+     @param tag       Tag the URL protocol is for\n+     @param key       Attribute key\n+     @param protocols List of invalid protocols\n+     @return this, for chaining\n+     */\n+    public Whitelist removeProtocols(String tag, String key, String... protocols) {\n+        Validate.notEmpty(tag);\n+        Validate.notEmpty(key);\n+        Validate.notNull(protocols);\n+\n+        TagName tagName = TagName.valueOf(tag);\n+        AttributeKey attrKey = AttributeKey.valueOf(key);\n+\n+        if(this.protocols.containsKey(tagName)) {\n+            Map<AttributeKey, Set<Protocol>> attrMap = this.protocols.get(tagName);\n+            if(attrMap.containsKey(attrKey)) {\n+                Set<Protocol> protSet = attrMap.get(attrKey);\n+                for (String protocol : protocols) {\n+                    Validate.notEmpty(protocol);\n+                    Protocol prot = Protocol.valueOf(protocol);\n+                    protSet.remove(prot);\n+                }\n+\n+                if(protSet.isEmpty()) { // Remove protocol set if empty\n+                    attrMap.remove(attrKey);\n+                    if(attrMap.isEmpty()) // Remove entry for tag if empty\n+                        this.protocols.remove(tagName);\n+                }\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n      * Test if the supplied tag is allowed by this whitelist\n      * @param tag test tag\n      * @return true if allowed", "timestamp": 1407909197, "metainfo": ""}