{"sha": "b033535fe2cf887de8076221a0d614abfcf17d7b", "log": "Relaxed doctype validation  Fixes #460", "commit": "\n--- a/src/main/java/org/jsoup/nodes/DocumentType.java\n+++ b/src/main/java/org/jsoup/nodes/DocumentType.java\n     public DocumentType(String name, String publicId, String systemId, String baseUri) {\n         super(baseUri);\n \n-        Validate.notEmpty(name);\n         attr(\"name\", name);\n         attr(\"publicId\", publicId);\n         attr(\"systemId\", systemId);\n \n     @Override\n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n-        accum.append(\"<!DOCTYPE \").append(attr(\"name\"));\n+        accum.append(\"<!DOCTYPE\");\n+        if (!StringUtil.isBlank(attr(\"name\")))\n+            accum.append(\" \").append(attr(\"name\"));\n         if (!StringUtil.isBlank(attr(\"publicId\")))\n             accum.append(\" PUBLIC \\\"\").append(attr(\"publicId\")).append('\"');\n         if (!StringUtil.isBlank(attr(\"systemId\")))\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n                     break;\n                 case eof:\n                     t.eofError(this);\n+                    // note: fall through to > case\n+                case '>': // catch invalid <!DOCTYPE>\n+                    t.error(this);\n                     t.createDoctypePending();\n                     t.doctypePending.forceQuirks = true;\n                     t.emitDoctypePending();\n                     break; // ignore whitespace\n                 case nullChar:\n                     t.error(this);\n+                    t.createDoctypePending();\n                     t.doctypePending.name.append(replacementChar);\n                     t.transition(DoctypeName);\n                     break;\n--- a/src/test/java/org/jsoup/nodes/DocumentTypeTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTypeTest.java\n  * @author Jonathan Hedley, http://jonathanhedley.com/\n  */\n public class DocumentTypeTest {\n-    @Test(expected = IllegalArgumentException.class)\n-    public void constructorValidationThrowsExceptionOnBlankName() {\n+    @Test\n+    public void constructorValidationOkWithBlankName() {\n         DocumentType fail = new DocumentType(\"\",\"\", \"\", \"\");\n     }\n \n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         Document doc = Jsoup.parse(h);\n         assertEquals(\"<img>\\n<svg>\\n <image />\\n</svg>\", doc.body().html());\n     }\n+\n+    @Test public void handlesInvalidDoctypes() {\n+        // would previously throw invalid name exception on empty doctype\n+        Document doc = Jsoup.parse(\"<!DOCTYPE>\");\n+        assertEquals(\n+                \"<!DOCTYPE> <html> <head></head> <body></body> </html>\",\n+                StringUtil.normaliseWhitespace(doc.outerHtml()));\n+\n+        doc = Jsoup.parse(\"<!DOCTYPE><html><p>Foo</p></html>\");\n+        assertEquals(\n+                \"<!DOCTYPE> <html> <head></head> <body> <p>Foo</p> </body> </html>\",\n+                StringUtil.normaliseWhitespace(doc.outerHtml()));\n+\n+        doc = Jsoup.parse(\"<!DOCTYPE \\u0000>\");\n+        assertEquals(\n+                \"<!DOCTYPE \ufffd> <html> <head></head> <body></body> </html>\",\n+                StringUtil.normaliseWhitespace(doc.outerHtml()));\n+    }\n }", "timestamp": 1411857296, "metainfo": ""}