{"sha": "465e2febabc92b1906d520689b9d895d33b902ed", "log": "[JXPATH-131] Exception handling  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ExceptionHandler.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.jxpath;\n+\n+/**\n+ * Exception handler interface.  Actually handles Throwables.\n+ * @since 1.4\n+ */\n+public interface ExceptionHandler {\n+    /**\n+     * Handle an encountered Throwable.\n+     * @param t to handle\n+     * @param ptr specific context\n+     */\n+    void handle(Throwable t, Pointer ptr);\n+}\n--- a/src/java/org/apache/commons/jxpath/JXPathContext.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathContext.java\n                 \"Namespace registration is not implemented by \" + getClass());\n     }\n \n+    /**\n+     * Set the ExceptionHandler used by this context, if any.\n+     * @param exceptionHandler to set\n+     * @since 1.4\n+     */\n+    public void setExceptionHandler(ExceptionHandler exceptionHandler) {\n+        throw new UnsupportedOperationException(\n+                \"ExceptionHandler registration is not implemented by \" + getClass());\n+    }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n import java.util.Map.Entry;\n \n import org.apache.commons.jxpath.CompiledExpression;\n+import org.apache.commons.jxpath.ExceptionHandler;\n import org.apache.commons.jxpath.Function;\n import org.apache.commons.jxpath.Functions;\n import org.apache.commons.jxpath.JXPathContext;\n     }\n \n     /**\n+     * {@inheritDoc}\n+     */\n+    public void setExceptionHandler(ExceptionHandler exceptionHandler) {\n+        if (rootPointer instanceof NodePointer) {\n+            ((NodePointer) rootPointer).setExceptionHandler(exceptionHandler);\n+        }\n+    }\n+\n+    /**\n      * Checks if existenceCheckClass exists on the class path. If so, allocates\n      * an instance of the specified class, otherwise returns null.\n      * @param className to instantiate\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n import java.util.Locale;\n \n import org.apache.commons.jxpath.AbstractFactory;\n+import org.apache.commons.jxpath.ExceptionHandler;\n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.NodeSet;\n  */\n public abstract class NodePointer implements Pointer {\n \n+    /** Serialization version */\n+    private static final long serialVersionUID = 8117201322861007777L;\n+\n     /** Whole collection index. */\n     public static final int WHOLE_COLLECTION = Integer.MIN_VALUE;\n \n \n     private boolean attribute = false;\n     private NamespaceResolver namespaceResolver;\n+    private ExceptionHandler exceptionHandler;\n     private transient Object rootNode;\n \n     /**\n     }\n \n     /**\n+     * Set the exceptionHandler of this NodePointer.\n+     * @param exceptionHandler the ExceptionHandler to set\n+     */\n+    public void setExceptionHandler(ExceptionHandler exceptionHandler) {\n+        this.exceptionHandler = exceptionHandler;\n+    }\n+\n+    /**\n+     * Handle a Throwable using an installed ExceptionHandler, if available.\n+     * Public to facilitate calling for RI support; not truly intended for public consumption.\n+     * @param t to handle\n+     * @param originator context\n+     */\n+    public void handle(Throwable t, NodePointer originator) {\n+        if (exceptionHandler != null) {\n+            exceptionHandler.handle(t, originator);\n+            return;\n+        }\n+        if (parent != null) {\n+            parent.handle(t, originator);\n+        }\n+    }\n+\n+    /**\n+     * Handle a Throwable using an installed ExceptionHandler, if available.\n+     * Public to facilitate calling for RI support; not truly intended for public consumption.\n+     * @param t to handle\n+     */\n+    public void handle(Throwable t) {\n+        handle(t, this);\n+    }\n+\n+    /**\n      * Return a string escaping single and double quotes.\n      * @param string string to treat\n      * @return string with any necessary changes made.\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java\n         try {\n             return propertyNodePointer.getValuePointer();\n         }\n-        catch (Throwable ex) {\n-            // @todo: should this exception be reported in any way?\n+        catch (Throwable t) {\n+            propertyNodePointer.handle(t);\n             NullPropertyPointer npp =\n                 new NullPropertyPointer(\n                         propertyNodePointer.getImmediateParentPointer());\n             length = propertyNodePointer.getLength(); // TBD: cache length\n         }\n         catch (Throwable t) {\n-            // @todo: should this exception be reported in any way?\n+            propertyNodePointer.handle(t);\n             length = 0;\n         }\n         return length;\n--- /dev/null\n+++ b/src/test/org/apache/commons/jxpath/ri/ExceptionHandlerTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.jxpath.ri;\n+\n+import org.apache.commons.jxpath.ExceptionHandler;\n+import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.JXPathTestCase;\n+import org.apache.commons.jxpath.Pointer;\n+\n+/**\n+ * Test simple ExceptionHandler.\n+ */\n+public class ExceptionHandlerTest extends JXPathTestCase {\n+    public static class Bar {\n+        public Object getBaz() {\n+            throw new IllegalStateException(\"baz unavailable\");\n+        }\n+    }\n+\n+    private JXPathContext context;\n+    private Bar bar = new Bar();\n+\n+    public void setUp() throws Exception {\n+        context = JXPathContext.newContext(this);\n+        context.setExceptionHandler(new ExceptionHandler() {\n+            \n+            public void handle(Throwable t, Pointer ptr) {\n+                if (t instanceof Error) {\n+                    throw (Error) t;\n+                }\n+                if (t instanceof RuntimeException) {\n+                    throw (RuntimeException) t;\n+                }\n+                throw new RuntimeException(t);\n+            }\n+        });\n+    }\n+    \n+    public Object getFoo() {\n+        throw new IllegalStateException(\"foo unavailable\");\n+    }\n+    \n+    public void testHandleFoo() throws Exception {\n+        try {\n+            context.getValue(\"foo\");\n+            fail(\"expected Throwable\");\n+        } catch (Throwable t) {\n+            while (t != null) {\n+                if (\"foo unavailable\".equals(t.getMessage())) {\n+                    return;\n+                }\n+                t = t.getCause();\n+            }\n+            fail(\"expected \\\"foo unavailable\\\" in throwable chain\");\n+        }\n+    }\n+\n+    public void testHandleBarBaz() throws Exception {\n+        try {\n+            context.getValue(\"bar/baz\");\n+            fail(\"expected Throwable\");\n+        } catch (Throwable t) {\n+            while (t != null) {\n+                if (\"baz unavailable\".equals(t.getMessage())) {\n+                    return;\n+                }\n+                t = t.getCause();\n+            }\n+            fail(\"expected \\\"baz unavailable\\\" in throwable chain\");\n+        }\n+    }\n+\n+    public Bar getBar() {\n+        return bar;\n+    }\n+}", "timestamp": 1267382820, "metainfo": ""}