{"sha": "15a67164cbefb9f9ae03b334888947d5fe5dccb4", "log": "[JXPATH-97] handle createPathAndSetValue() for externally registered namespaced attributes; also refactor to ensure externally-registered namespaces preclude those explicitly assigned within a document  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java\n+++ b/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java\n     private boolean sealed;\n \n     /**\n+     * Find the namespace prefix for the specified namespace URI and NodePointer.\n+     * @param pointer\n+     * @param namespaceURI\n+     * @return prefix if found\n+     * @since JXPath 1.3\n+     */\n+    protected static String getPrefix(NodePointer pointer, String namespaceURI) {\n+        NodePointer currentPointer = pointer;\n+        while (currentPointer != null) {\n+            NodeIterator ni = currentPointer.namespaceIterator();\n+            for (int position = 1; ni != null && ni.setPosition(position); position++) {\n+                NodePointer nsPointer = ni.getNodePointer();\n+                String uri = nsPointer.getNamespaceURI();\n+                if (uri.equals(namespaceURI)) {\n+                    String prefix = nsPointer.getName().getName();\n+                    if (!\"\".equals(prefix)) {\n+                        return prefix;\n+                    }\n+                }\n+            }\n+            currentPointer = pointer.getParent();\n+        }\n+        return null;\n+    }\n+\n+    /**\n      * Create a new NamespaceResolver.\n      */\n     public NamespaceResolver() {\n      */\n     public synchronized void registerNamespace(String prefix, String namespaceURI) {\n         if (isSealed()) {\n-            throw new IllegalStateException(\"Cannot register namespaces on a sealed NamespaceResolver\");\n+            throw new IllegalStateException(\n+                    \"Cannot register namespaces on a sealed NamespaceResolver\");\n         }\n         namespaceMap.put(prefix, namespaceURI);\n         reverseMap = null;\n      * @return namespace URI or null if the prefix is undefined.\n      */\n     public synchronized String getNamespaceURI(String prefix) {\n+        String uri = getExternallyRegisteredNamespaceURI(prefix);\n+        return uri == null && pointer != null ? pointer.getNamespaceURI(prefix)\n+                : uri;\n+    }\n+\n+    /**\n+     * Given a prefix, returns an externally registered namespace URI.\n+     * \n+     * @param prefix The namespace prefix to look up\n+     * @return namespace URI or null if the prefix is undefined.\n+     * @since JXPath 1.3\n+     */\n+     protected synchronized String getExternallyRegisteredNamespaceURI(\n+            String prefix) {\n         String uri = (String) namespaceMap.get(prefix);\n-        if (uri == null && pointer != null) {\n-            uri = pointer.getNamespaceURI(prefix);\n-        }\n-        if (uri == null && parent != null) {\n-            return parent.getNamespaceURI(prefix);\n-        }\n-        return uri;\n+        return uri == null && parent != null ? parent\n+                .getExternallyRegisteredNamespaceURI(prefix) : uri;\n     }\n \n     /**\n      * @return String prefix\n      */\n     public synchronized String getPrefix(String namespaceURI) {\n+        String prefix = getExternallyRegisteredPrefix(namespaceURI);\n+        return prefix == null && pointer != null ? getPrefix(pointer,\n+                namespaceURI) : prefix;\n+    }\n+\n+    /**\n+     * Get the nearest prefix found that matches an externally-registered namespace. \n+     * @param namespaceURI\n+     * @return String prefix if found.\n+     * @since JXPath 1.3\n+     */\n+    protected synchronized String getExternallyRegisteredPrefix(String namespaceURI) {\n         if (reverseMap == null) {\n             reverseMap = new HashMap();\n-            NodeIterator ni = pointer.namespaceIterator();\n-            if (ni != null) {\n-                for (int position = 1; ni.setPosition(position); position++) {\n-                    NodePointer nsPointer = ni.getNodePointer();\n-                    String uri = nsPointer.getNamespaceURI();                    \n-                    String prefix = nsPointer.getName().getName();\n-                    if (!\"\".equals(prefix)) {\n-                        reverseMap.put(uri, prefix);\n-                    }\n-                }\n-            }\n             Iterator it = namespaceMap.entrySet().iterator();\n             while (it.hasNext()) {\n                 Map.Entry entry = (Map.Entry) it.next();\n             }\n         }\n         String prefix = (String) reverseMap.get(namespaceURI);\n-        if (prefix == null && parent != null) {\n-            return parent.getPrefix(namespaceURI);\n-        }\n-        return prefix;\n+        return prefix == null && parent != null ? parent\n+                .getExternallyRegisteredPrefix(namespaceURI) : prefix;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.jxpath.ri.NamespaceResolver;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.model.NodeIterator;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n         String testNS = null;\n \n         if (testPrefix != null) {\n-            NamespaceResolver nsr = parent.getNamespaceResolver();\n-            testNS = nsr == null ? null : nsr.getNamespaceURI(testPrefix);\n-            testNS = testNS == null ? parent.getNamespaceURI(testPrefix) : testNS;\n+            testNS = parent.getNamespaceResolver().getNamespaceURI(testPrefix);\n         }\n \n         if (testNS != null) {\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.Pointer;\n import org.apache.commons.jxpath.ri.Compiler;\n+import org.apache.commons.jxpath.ri.NamespaceResolver;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.compiler.NodeNameTest;\n import org.apache.commons.jxpath.ri.compiler.NodeTest;\n     private Map namespaces;\n     private String defaultNamespace;\n     private String id;\n+    private NamespaceResolver localNamespaceResolver;\n \n     public static final String XML_NAMESPACE_URI = \n             \"http://www.w3.org/XML/1998/namespace\";\n         return new DOMNamespaceIterator(this);\n     }\n \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.jxpath.ri.model.NodePointer#getNamespaceResolver()\n+     */\n+    public synchronized NamespaceResolver getNamespaceResolver() {\n+        if (localNamespaceResolver == null) {\n+            localNamespaceResolver = new NamespaceResolver(super.getNamespaceResolver());\n+            localNamespaceResolver.setNamespaceContextPointer(this);\n+        }\n+        return localNamespaceResolver;\n+    }\n+\n     public String getNamespaceURI(String prefix) {\n         if (prefix == null || prefix.equals(\"\")) {\n             return getDefaultNamespaceURI();\n         Element element = (Element) node;\n         String prefix = name.getPrefix();\n         if (prefix != null) {\n-            String ns = getNamespaceURI(prefix);\n+            String ns = null;\n+            NamespaceResolver nsr = getNamespaceResolver();\n+            if (nsr != null) {\n+                ns = nsr.getNamespaceURI(prefix);\n+            }\n             if (ns == null) {\n                 throw new JXPathException(\n                     \"Unknown namespace prefix: \" + prefix);\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java\n import java.util.Collections;\n import java.util.List;\n \n-import org.apache.commons.jxpath.ri.NamespaceResolver;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.model.NodeIterator;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n                     ns = Namespace.XML_NAMESPACE;\n                 }\n                 else {\n-                    NamespaceResolver nsr = parent.getNamespaceResolver();\n-                    if (nsr != null) {\n-                        String uri = nsr.getNamespaceURI(prefix);\n-                        if (uri != null) {\n-                            ns = Namespace.getNamespace(prefix, uri);\n-                        }\n+                    String uri = parent.getNamespaceResolver().getNamespaceURI(prefix);\n+                    if (uri != null) {\n+                        ns = Namespace.getNamespace(prefix, uri);\n                     }\n                     if (ns == null) {\n-                        ns = element.getNamespace(prefix);\n-                        if (ns == null) {\n-                            // TBD: no attributes\n-                            attributes = Collections.EMPTY_LIST;\n-                            return;\n-                        }\n+                        // TBD: no attributes\n+                        attributes = Collections.EMPTY_LIST;\n+                        return;\n                     }\n                 }\n             }\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.ri.Compiler;\n+import org.apache.commons.jxpath.ri.NamespaceResolver;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.compiler.NodeNameTest;\n import org.apache.commons.jxpath.ri.compiler.NodeTest;\n \n     private Object node;\n     private String id;\n+    private NamespaceResolver localNamespaceResolver;\n \n     public static final String XML_NAMESPACE_URI =\n             \"http://www.w3.org/XML/1998/namespace\";\n         return null;\n     }\n \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.jxpath.ri.model.NodePointer#getNamespaceResolver()\n+     */\n+    public synchronized NamespaceResolver getNamespaceResolver() {\n+        if (localNamespaceResolver == null) {\n+            localNamespaceResolver = new NamespaceResolver(super.getNamespaceResolver());\n+            localNamespaceResolver.setNamespaceContextPointer(this);\n+        }\n+        return localNamespaceResolver;\n+    }\n+\n     public String getNamespaceURI(String prefix) {\n+        if (prefix.equals(\"xml\")) {\n+            return Namespace.XML_NAMESPACE.getURI();\n+        }\n+        Element element = null;\n         if (node instanceof Document) {\n-            Element element = ((Document)node).getRootElement(); \n-            Namespace ns = element.getNamespace(prefix);\n-            if (ns != null) {\n-                return ns.getURI();\n-            }\n-        }        \n-        else if (node instanceof Element) {\n-            Element element = (Element) node;\n-            Namespace ns = element.getNamespace(prefix);\n-            if (ns != null) {\n-                return ns.getURI();\n-            }\n-        }\n-        return null;\n+            element = ((Document) node).getRootElement(); \n+        }\n+        if (node instanceof Element) {\n+            element = (Element) node;\n+        }\n+        if (element == null) {\n+            return null;\n+        }\n+        Namespace ns = element.getNamespace(prefix);\n+        return ns == null ? null : ns.getURI();\n     }\n \n     public int compareChildNodePointers(\n         Element element = (Element) node;\n         String prefix = name.getPrefix();\n         if (prefix != null) {\n-            Namespace ns = element.getNamespace(prefix);\n-            if (ns == null) {\n+            String namespaceUri = getNamespaceResolver().getNamespaceURI(prefix);\n+            if (namespaceUri == null) {\n                 throw new JXPathException(\n                     \"Unknown namespace prefix: \" + prefix);\n             }\n+            Namespace ns = Namespace.getNamespace(prefix, namespaceUri);\n             Attribute attr = element.getAttribute(name.getName(), ns);\n             if (attr == null) {\n                 element.setAttribute(name.getName(), \"\", ns);\n--- a/src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java\n     protected DocumentContainer createDocumentContainer(String model) {\n         DocumentContainer result = new DocumentContainer(JXPathTestCase.class\n                 .getResource(\"ExternalNS.xml\"), model);\n-        //this setting only works for DOM, so no JDOM tests :|\n+        // this setting only works for DOM, so no JDOM tests :|\n         result.setNamespaceAware(false);\n         return result;\n     }\n \n-    protected void doTest(String xpath, String model, String expected) {\n+    protected JXPathContext createContext(String model) {\n         JXPathContext context = JXPathContext\n                 .newContext(createDocumentContainer(model));\n         context.registerNamespace(\"A\", \"foo\");\n         context.registerNamespace(\"B\", \"bar\");\n-        assertXPathValue(context, xpath, expected);\n+        return context;\n+    }\n+\n+    protected void doTest(String xpath, String model, String expected) {\n+        assertXPathValue(createContext(model), xpath, expected);\n     }\n \n     protected void doTestAttribute(String model) {\n     }\n \n     protected void doTestElement(String model) {\n-         doTest(\"/ElementA/B:ElementB\", model, \"MY VALUE\");\n+        doTest(\"/ElementA/B:ElementB\", model, \"MY VALUE\");\n+    }\n+\n+    protected void doTestCreateAndSetAttribute(String model) {\n+        assertXPathCreatePathAndSetValue(createContext(model),\n+                \"/ElementA/@A:newAttr\", \"newValue\", \"/ElementA[1]/@A:newAttr\");\n     }\n \n     public void testAttributeDOM() {\n         doTestElement(DocumentContainer.MODEL_DOM);\n     }\n \n+    public void testCreateAndSetAttributeDOM() {\n+        doTestCreateAndSetAttribute(DocumentContainer.MODEL_DOM);\n+    }\n+\n }", "timestamp": 1185392973, "metainfo": ""}