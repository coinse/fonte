{"sha": "2aa453ad768d42b6aecfd27fdd1ecfbc17d4192b", "log": "javadoc; remove commented code  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n      * Check whether our locale matches the specified language.\n      * @param lang String language to check\n      * @return true if the selected locale name starts\n-     * with the specified prefix <i>lang</i>, case-insensitive.\n+     *              with the specified prefix <i>lang</i>, case-insensitive.\n      */\n     public boolean isLanguage(String lang) {\n         Locale loc = getLocale();\n         return name.toUpperCase().startsWith(lang.toUpperCase());\n     }\n \n-//    /**\n-//     * Installs the supplied manager as the namespace manager for this node\n-//     * pointer. The {@link #getNamespaceURI(String) getNamespaceURI(prefix)}\n-//     * uses this manager to resolve namespace prefixes.\n-//     *\n-//     * @param namespaceManager\n-//     */\n-//    public void setNamespaceManager(NamespaceManager namespaceManager) {\n-//        this.namespaceManager = namespaceManager;\n-//    }\n-//\n-//    public NamespaceManager getNamespaceManager() {\n-//        if (namespaceManager != null) {\n-//            return namespaceManager;\n-//        }\n-//        if (parent != null) {\n-//            return parent.getNamespaceManager();\n-//        }\n-//        return null;\n-//    }\n-//\n     /**\n      * Returns a NodeIterator that iterates over all children or all children\n      * that match the given NodeTest, starting with the specified one.\n         return asPath();\n     }\n \n-\n+    /**\n+     * {@inheritDoc}\n+     */\n     public int compareTo(Object object) {\n         if (object == this) {\n             return 0;\n         return commonParentFound ? compareNodePointers(this, depth1, pointer, depth2) : 0;\n     }\n \n+    /**\n+     * Compare node pointers.\n+     * @param p1 pointer 1\n+     * @param depth1 depth 1\n+     * @param p2 pointer 2\n+     * @param depth2 depth 2\n+     * @return comparison result: (< 0) -> (p1 lt p2); (0) -> (p1 eq p2); (> 0) -> (p1 gt p2)\n+     */\n     private int compareNodePointers(\n         NodePointer p1,\n         int depth1,\n         printDeep(this, \"\");\n     }\n \n+    /**\n+     * Print deep\n+     * @param pointer to print\n+     * @param indent indentation level\n+     */\n     private static void printDeep(NodePointer pointer, String indent) {\n         if (indent.length() == 0) {\n             System.err.println(", "timestamp": 1201987861, "metainfo": ""}