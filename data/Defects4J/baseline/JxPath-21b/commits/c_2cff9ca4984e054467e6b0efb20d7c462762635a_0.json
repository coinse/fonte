{"sha": "2cff9ca4984e054467e6b0efb20d7c462762635a", "log": "Fixed bug in root collection iteration   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.25 2003/01/11 05:41:22 dmitri Exp $\n- * $Revision: 1.25 $\n- * $Date: 2003/01/11 05:41:22 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.26 2003/01/30 23:41:29 dmitri Exp $\n+ * $Revision: 1.26 $\n+ * $Date: 2003/01/30 23:41:29 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * The reference implementation of JXPathContext.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.25 $ $Date: 2003/01/11 05:41:22 $\n+ * @version $Revision: 1.26 $ $Date: 2003/01/30 23:41:29 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext {\n     \n             rootPointer = NodePointer.newNodePointer(new QName(null, \"root\"),\n                 getContextBean(), getLocale());\n         }\n-        return rootPointer;\n+        return (Pointer) rootPointer.clone();\n     }\n \n     private EvalContext getRootContext() {\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java,v 1.12 2003/01/11 05:41:24 dmitri Exp $\n- * $Revision: 1.12 $\n- * $Date: 2003/01/11 05:41:24 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java,v 1.13 2003/01/30 23:41:29 dmitri Exp $\n+ * $Revision: 1.13 $\n+ * $Date: 2003/01/30 23:41:29 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Transparent pointer to a collection (array or Collection).\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.12 $ $Date: 2003/01/11 05:41:24 $\n+ * @version $Revision: 1.13 $ $Date: 2003/01/30 23:41:29 $\n  */\n public class CollectionPointer extends NodePointer {\n     private Object collection;\n         NodePointer parent = getParent();\n         if (parent != null) {\n             buffer.append(parent.asPath());\n-        }\n-        if (index != WHOLE_COLLECTION) {\n-            // Address the list[1][2] case\n-            if (parent != null && parent.getIndex() != WHOLE_COLLECTION) {\n-                buffer.append(\"/.\");\n-            }\n-            buffer.append(\"[\").append(index + 1).append(']');\n-        }\n-\n+            if (index != WHOLE_COLLECTION) {\n+                // Address the list[1][2] case\n+                if (parent.getIndex() != WHOLE_COLLECTION) {\n+                    buffer.append(\"/.\");\n+                }\n+                buffer.append(\"[\").append(index + 1).append(']');\n+            }\n+        }\n+        else {\n+            if (index != WHOLE_COLLECTION) {\n+                buffer.append(\"/.[\").append(index + 1).append(']');\n+            }\n+            else {\n+                buffer.append(\"/\");\n+            }\n+        }\n+        \n         return buffer.toString();\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java,v 1.7 2003/01/11 05:41:25 dmitri Exp $\n- * $Revision: 1.7 $\n- * $Date: 2003/01/11 05:41:25 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java,v 1.8 2003/01/30 23:41:29 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2003/01/30 23:41:29 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Examples of such objects are JavaBeans and objects with Dynamic Properties.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2003/01/11 05:41:25 $\n+ * @version $Revision: 1.8 $ $Date: 2003/01/30 23:41:29 $\n  */\n public class PropertyIterator implements NodeIterator {\n     private boolean empty = false;\n             }\n         }\n     }\n-    \n+\n     protected NodePointer getPropertyPointer() {\n         return propertyNodePointer;\n     }\n                 reset();\n             }\n         }\n-        return getValuePointer();       \n+        try {\n+            NodePointer clone = (NodePointer) propertyNodePointer.clone();\n+            return clone.getValuePointer();\n+        }\n+        catch (Throwable ex) {\n+            // @todo: should this exception be reported in any way?\n+            NullPropertyPointer npp =\n+                new NullPropertyPointer(propertyNodePointer.getParent());\n+            npp.setPropertyName(propertyNodePointer.getPropertyName());\n+            npp.setIndex(propertyNodePointer.getIndex());\n+            return npp.getValuePointer();\n+        }\n     }\n \n     public int getPosition() {\n     private int getLength() {\n         int length;\n         try {\n-            length = propertyNodePointer.getLength();   // TBD: cache length\n+            length = propertyNodePointer.getLength(); // TBD: cache length\n         }\n         catch (Throwable t) {\n             // @todo: should this exception be reported in any way?\n         }\n         return length;\n     }\n-\n-    /**\n-     * Computes value pointer for the current pointer - ignores any exceptions\n-     */\n-    private NodePointer getValuePointer() {\n-        try {\n-            return propertyNodePointer.getValuePointer();\n-        }\n-        catch (Throwable ex) {\n-            // @todo: should this exception be reported in any way?\n-            NullPropertyPointer npp =\n-                new NullPropertyPointer(propertyNodePointer.getParent());\n-            npp.setPropertyName(propertyNodePointer.getPropertyName());\n-            npp.setIndex(propertyNodePointer.getIndex());\n-            return npp.getValuePointer();\n-        }\n-    }\n }", "timestamp": 1043970089, "metainfo": ""}