{"sha": "5e833a276a407c491b2b931b875e80296003b9b1", "log": "Bug fix: #9912   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java,v 1.10 2002/05/30 01:57:23 dmitri Exp $\n- * $Revision: 1.10 $\n- * $Date: 2002/05/30 01:57:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java,v 1.11 2002/06/18 00:01:15 dmitri Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2002/06/18 00:01:15 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * EvalContext that checks predicates.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.10 $ $Date: 2002/05/30 01:57:23 $\n+ * @version $Revision: 1.11 $ $Date: 2002/06/18 00:01:15 $\n  */\n public class PredicateContext extends EvalContext {\n     private Expression expression;\n         }\n \n         NodePointer parent = parentContext.getCurrentNodePointer();\n+        if (parent == null){\n+            return false;\n+        }\n+        parent = parent.getValuePointer();\n         if (!(parent instanceof PropertyOwnerPointer)){\n             return false;\n         }\n-        dynamicPropertyPointer = ((PropertyOwnerPointer)parent).getPropertyPointer();\n+        dynamicPropertyPointer =\n+            ((PropertyOwnerPointer)parent).getPropertyPointer();\n         return true;\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.6 2002/06/08 22:47:24 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/06/08 22:47:24 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.7 2002/06/18 00:01:15 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/06/18 00:01:15 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * context-independent predicates.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2002/06/08 22:47:24 $\n+ * @version $Revision: 1.7 $ $Date: 2002/06/18 00:01:15 $\n  */\n public abstract class NodePointer implements Pointer, Cloneable, Comparable {\n \n      * that match the given NodeTest, starting with the specified one.\n      */\n     public NodeIterator childIterator(\n-        NodeTest test,\n-        boolean reverse,\n-        NodePointer startWith) {\n+                    NodeTest test, boolean reverse, NodePointer startWith) {\n+        NodePointer valuePointer = getValuePointer();\n+        if (valuePointer != null && valuePointer != this){\n+            return valuePointer.childIterator(test, reverse, startWith);\n+        }\n         return null;\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java,v 1.4 2002/05/08 23:05:05 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/05/08 23:05:05 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java,v 1.5 2002/06/18 00:01:15 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/06/18 00:01:15 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * a collection.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/05/08 23:05:05 $\n+ * @version $Revision: 1.5 $ $Date: 2002/06/18 00:01:15 $\n  */\n public abstract class PropertyOwnerPointer extends NodePointer {\n \n \n     public abstract PropertyPointer getPropertyPointer();\n \n-    /**\n-     * If has an index, returns a pointer to the collection element,\n-     * otherwise returns the pointer itself.\n-     */\n-    public NodePointer getValuePointer() {\n-        return NodePointer.newChildNodePointer(this, getName(), getNodeValue());\n-    }\n-\n     public NodePointer createChild(JXPathContext context, QName name, int index, Object value){\n         PropertyPointer prop = getPropertyPointer();\n         prop.setPropertyName(name.getName());\n--- a/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.23 2002/06/09 01:58:41 dmitri Exp $\n- * $Revision: 1.23 $\n- * $Date: 2002/06/09 01:58:41 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.24 2002/06/18 00:01:16 dmitri Exp $\n+ * $Revision: 1.24 $\n+ * $Date: 2002/06/18 00:01:16 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * </p>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.23 $ $Date: 2002/06/09 01:58:41 $\n+ * @version $Revision: 1.24 $ $Date: 2002/06/18 00:01:16 $\n  */\n \n public class JXPathTestCase extends TestCase\n         Map tm = new HashMap();\n         tm.put(\"bar\", \"zz\");\n         bean.getMap().put(\"foo\", new Map[]{tm, tm});\n+        bean.getMap().put(\"biz\", tm);\n+\n         testGetValue(context, \"map/foo[2]/bar/../bar\", \"zz\");\n+        testGetValue(context, \"map[@name='biz'][@name='bar']\", \"zz\");\n \n         boolean exception = false;\n         try {\n     }\n \n     public void testParserReferenceImpl() throws Exception {\n-        if (!enabled){\n-            return;\n-        }\n+//        if (!enabled){\n+//            return;\n+//        }\n         System.setProperty(JXPathContextFactory.FACTORY_NAME_PROPERTY,\n                 \"org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl\");\n         testParser(JXPathContextFactory.newInstance().newContext(null, bean), false);\n         test(\"map/Key1\", \"Value 1\"),\n         testPath(\"map/Key1\", \"/map[@name='Key1']\"),\n         testPath(\"map[@name = 'Key&quot;&apos;&quot;&apos;1']\", \"/map[@name='Key&quot;&apos;&quot;&apos;1']\"),\n+        test(\"map/Key2/name\", \"Name 6\"),\n+        testPath(\"map/Key2/name\", \"/map[@name='Key2']/name\"),\n+        test(\"/.[@name='map']/Key2/name\", \"Name 6\"),\n+        testPath(\"/.[@name='map']/Key2/name\", \"/map[@name='Key2']/name\"),\n+        test(\"/map[@name='Key2'][@name='name']\", \"Name 6\"),\n+        testPath(\"/map[@name='Key2'][@name='name']\", \"/map[@name='Key2']/name\"),\n+        test(\"/.[@name='map'][@name='Key2'][@name='name']\", \"Name 6\"),\n+        testPath(\"/.[@name='map'][@name='Key2'][@name='name']\", \"/map[@name='Key2']/name\"),\n \n         // Standard functions\n         test(\"string(2)\", \"2\"),", "timestamp": 1024358476, "metainfo": ""}