{"sha": "57063255566c2a3a4006d29fb41534e6f63ad9d2", "log": "Fixed Bug #28753: conversion of Boolean to Number   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/InfoSetUtil.java\n+++ b/src/java/org/apache/commons/jxpath/ri/InfoSetUtil.java\n  * Type conversions, XPath style.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2004/02/29 14:17:45 $\n+ * @version $Revision: 1.10 $ $Date: 2004/05/08 20:07:09 $\n  */\n public class InfoSetUtil {\n \n             return value;\n         }\n         else if (object instanceof EvalContext) {\n-            return number(stringValue(object));\n+            EvalContext ctx = (EvalContext) object;\n+            Pointer ptr = ctx.getSingleNodePointer();\n+            if (ptr != null) {\n+                return number(ptr);\n+            }\n+            return NOT_A_NUMBER;\n         }\n         else if (object instanceof NodePointer) {\n             return number(((NodePointer) object).getValue());\n             return doubleValue(((NodePointer) object).getValue());\n         }\n         else if (object instanceof EvalContext) {\n-            return doubleValue(stringValue(object));\n+            EvalContext ctx = (EvalContext) object;\n+            Pointer ptr = ctx.getSingleNodePointer();\n+            if (ptr != null) {\n+                return doubleValue(ptr);\n+            }\n+            return Double.NaN;\n         }\n         return doubleValue(stringValue(object));\n     }\n--- a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java\n  * Test basic functionality of JXPath - core functions.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2004/02/29 14:17:42 $\n+ * @version $Revision: 1.10 $ $Date: 2004/05/08 20:07:09 $\n  */\n \n public class CoreFunctionTest extends JXPathTestCase {\n             context = JXPathContext.newContext(new TestMixedModelBean());\n             Variables vars = context.getVariables();\n             vars.declareVariable(\"nan\", new Double(Double.NaN));\n+            vars.declareVariable(\"bool_true\", new Boolean(\"true\"));\n+            vars.declareVariable(\"bool_false\", new Boolean(\"false\"));\n         }\n     }\n \n         assertXPathValue(context, \"not(false())\", Boolean.TRUE);\n         assertXPathValue(context, \"not(true())\", Boolean.FALSE);\n         assertXPathValue(context, \"number('1')\", new Double(1));\n+        assertXPathValue(context, \"number($bool_true)\", new Double(1));\n+        assertXPathValue(context, \"number($bool_false)\", new Double(0));\n         assertXPathValue(context, \"floor(1.5)\", new Double(1));\n         assertXPathValue(context, \"floor(-1.5)\", new Double(-2));\n         assertXPathValue(context, \"ceiling(1.5)\", new Double(2));\n         assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));\n         assertXPathValue(context, \"round(1.5)\", new Double(2));\n         assertXPathValue(context, \"round(-1.5)\", new Double(-1));\n-        assertXPathValue(context, \"null()\", null);\n+        assertXPathValue(context, \"null()\", null);        \n     }\n \n     public void testIDFunction() {", "timestamp": 1084046829, "metainfo": ""}