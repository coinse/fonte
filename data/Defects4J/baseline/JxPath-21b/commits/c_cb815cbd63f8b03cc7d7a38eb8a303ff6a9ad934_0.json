{"sha": "cb815cbd63f8b03cc7d7a38eb8a303ff6a9ad934", "log": "Change visibility of some methods to protected   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/util/BasicTypeConverter.java\n+++ b/src/java/org/apache/commons/jxpath/util/BasicTypeConverter.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/util/BasicTypeConverter.java,v 1.8 2003/03/25 02:41:34 dmitri Exp $\n- * $Revision: 1.8 $\n- * $Date: 2003/03/25 02:41:34 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/util/BasicTypeConverter.java,v 1.9 2003/06/26 02:17:30 dmitri Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2003/06/26 02:17:30 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * The default implementation of TypeConverter.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.8 $ $Date: 2003/03/25 02:41:34 $\n+ * @version $Revision: 1.9 $ $Date: 2003/06/26 02:17:30 $\n  */\n public class BasicTypeConverter implements TypeConverter {\n \n             \"Cannot convert \" + object.getClass() + \" to \" + toType);\n     }\n \n-    private Object convertNullToPrimitive(Class toType) {\n+    protected Object convertNullToPrimitive(Class toType) {\n         if (toType == boolean.class) {\n             return Boolean.FALSE;\n         }\n         return null;\n     }\n \n-    private Object convertStringToPrimitive(Object object, Class toType) {\n+    protected Object convertStringToPrimitive(Object object, Class toType) {\n         if (toType == boolean.class || toType == Boolean.class) {\n             return Boolean.valueOf((String) object);\n         }\n         return null;\n     }\n     \n-    private static Number allocateNumber(Class type, double value) {\n+    protected Number allocateNumber(Class type, double value) {\n         if (type == Byte.class || type == byte.class) {\n             return new Byte((byte) value);\n         }\n         return null;\n     }\n \n-    private static boolean canCreateCollection(Class type) {\n+    protected boolean canCreateCollection(Class type) {\n         if (!type.isInterface()\n             && ((type.getModifiers() | Modifier.ABSTRACT) == 0)) {\n             return true;\n         return false;\n     }\n \n-    private static Collection allocateCollection(Class type) {\n+    protected Collection allocateCollection(Class type) {\n         if (!type.isInterface()\n             && ((type.getModifiers() | Modifier.ABSTRACT) == 0)) {\n             try {\n         throw new RuntimeException(\"Cannot create collection of type: \" + type);\n     }\n     \n-    private Collection unmodifiableCollection(Collection collection) {\n+    protected Collection unmodifiableCollection(Collection collection) {\n         if (collection instanceof List) {\n             return Collections.unmodifiableList((List) collection);\n         }\n         return collection;\n     }\n     \n-    static class ValueNodeSet implements NodeSet {\n+    static final class ValueNodeSet implements NodeSet {\n         private List values;\n         private List pointers;\n ", "timestamp": 1056593850, "metainfo": ""}