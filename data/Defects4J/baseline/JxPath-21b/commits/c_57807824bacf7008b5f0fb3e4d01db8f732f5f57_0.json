{"sha": "57807824bacf7008b5f0fb3e4d01db8f732f5f57", "log": "consolidate duplicate code  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n import java.util.HashSet;\n import java.util.Locale;\n \n+import org.apache.commons.jxpath.AbstractFactory;\n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.NodeSet;\n     }\n \n     /**\n+     * Return a string escaping single and double quotes.\n+     * @param string string to treat\n+     * @return string with any necessary changes made.\n+     */\n+    protected String escape(String string) {\n+        final char[] c = new char[] { '\\'', '\"' };\n+        final String[] esc = new String[] { \"&apos;\", \"&quot;\" };\n+        StringBuffer sb = null;\n+        for (int i = 0; sb == null && i < c.length; i++) {\n+            if (string.indexOf(c[i]) >= 0) {\n+                sb = new StringBuffer(string);\n+            }\n+        }\n+        if (sb == null) {\n+            return string;\n+        }\n+        for (int i = 0; i < c.length; i++) {\n+            if (string.indexOf(c[i]) < 0) {\n+                continue;\n+            }\n+            int pos = 0;\n+            while (pos < sb.length()) {\n+                if (sb.charAt(pos) == c[i]) {\n+                    sb.replace(pos, pos + 1, esc[i]);\n+                    pos += esc[i].length();\n+                } else {\n+                    pos++;\n+                }\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Get the AbstractFactory associated with the specified JXPathContext.\n+     * @param context JXPathContext\n+     * @return AbstractFactory\n+     */\n+    protected AbstractFactory getAbstractFactory(JXPathContext context) {\n+        AbstractFactory factory = context.getFactory();\n+        if (factory == null) {\n+            throw new JXPathException(\n+                \"Factory is not set on the JXPathContext - cannot create path: \"\n+                    + asPath());\n+        }\n+        return factory;\n+    }\n+\n+    /**\n      * Print deep\n      * @param pointer to print\n      * @param indent indentation level\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java\n     }\n \n     /**\n-     * Return a string escaping single and double quotes.\n-     * @param string string to treat\n-     * @return string with any necessary changes made.\n-     */\n-    private String escape(String string) {\n-        final char[] c = new char[] { '\\'', '\"' };\n-        final String[] esc = new String[] { \"&apos;\", \"&quot;\" };\n-        StringBuffer sb = null;\n-        for (int i = 0; sb == null && i < c.length; i++) {\n-            if (string.indexOf(c[i]) >= 0) {\n-                sb = new StringBuffer(string);\n-            }\n-        }\n-        if (sb == null) {\n-            return string;\n-        }\n-        for (int i = 0; i < c.length; i++) {\n-            if (string.indexOf(c[i]) < 0) {\n-                continue;\n-            }\n-            int pos = 0;\n-            while (pos < sb.length()) {\n-                if (sb.charAt(pos) == c[i]) {\n-                    sb.replace(pos, pos + 1, esc[i]);\n-                    pos += esc[i].length();\n-                }\n-                else {\n-                    pos++;\n-                }\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    /**\n      * Create a \"bad factory\" JXPathAbstractFactoryException for the specified AbstractFactory.\n      * @param factory AbstractFactory\n      * @return JXPathAbstractFactoryException\n--- a/src/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyPointer.java\n import org.apache.commons.jxpath.DynamicPropertyHandler;\n import org.apache.commons.jxpath.JXPathAbstractFactoryException;\n import org.apache.commons.jxpath.JXPathContext;\n-import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.JXPathInvalidAccessException;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;\n         return buffer.toString();\n     }\n \n-    /**\n-     * Escape string.\n-     * @param string s\n-     * @return String\n-     */\n-    private String escape(String string) {\n-        int index = string.indexOf('\\'');\n-        while (index != -1) {\n-            string =\n-                string.substring(0, index)\n-                    + \"&apos;\"\n-                    + string.substring(index + 1);\n-            index = string.indexOf('\\'');\n-        }\n-        index = string.indexOf('\\\"');\n-        while (index != -1) {\n-            string =\n-                string.substring(0, index)\n-                    + \"&quot;\"\n-                    + string.substring(index + 1);\n-            index = string.indexOf('\\\"');\n-        }\n-        return string;\n-    }\n-\n-    /**\n-     * Get abstractFactory from context.\n-     * @param context to search\n-     * @return AbstractFactory\n-     */\n-    private AbstractFactory getAbstractFactory(JXPathContext context) {\n-        AbstractFactory factory = context.getFactory();\n-        if (factory == null) {\n-            throw new JXPathException(\n-                \"Factory is not set on the JXPathContext - cannot create path: \"\n-                    + asPath());\n-        }\n-        return factory;\n-    }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n import java.util.List;\n import java.util.Locale;\n \n-import org.apache.commons.jxpath.AbstractFactory;\n import org.apache.commons.jxpath.JXPathAbstractFactoryException;\n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathException;\n     }\n \n     /**\n-     * Return a string escaping single and double quotes.\n-     * @param string string to treat\n-     * @return string with any necessary changes made.\n-     */\n-    private String escape(String string) {\n-        final char[] c = new char[] { '\\'', '\"' };\n-        final String[] esc = new String[] { \"&apos;\", \"&quot;\" };\n-        StringBuffer sb = null;\n-        for (int i = 0; sb == null && i < c.length; i++) {\n-            if (string.indexOf(c[i]) >= 0) {\n-                sb = new StringBuffer(string);\n-            }\n-        }\n-        if (sb == null) {\n-            return string;\n-        }\n-        for (int i = 0; i < c.length; i++) {\n-            if (string.indexOf(c[i]) < 0) {\n-                continue;\n-            }\n-            int pos = 0;\n-            while (pos < sb.length()) {\n-                if (sb.charAt(pos) == c[i]) {\n-                    sb.replace(pos, pos + 1, esc[i]);\n-                    pos += esc[i].length();\n-                } else {\n-                    pos++;\n-                }\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    /**\n      * Get relative position of this among like-named siblings.\n      * @return 1..n\n      */\n         return node == other.node;\n     }\n \n-    /**\n-     * Get the AbstractFactory associated with the specified JXPathContext.\n-     * @param context JXPathContext\n-     * @return AbstractFactory\n-     */\n-    private AbstractFactory getAbstractFactory(JXPathContext context) {\n-        AbstractFactory factory = context.getFactory();\n-        if (factory == null) {\n-            throw new JXPathException(\n-                \"Factory is not set on the JXPathContext - cannot create path: \"\n-                    + asPath());\n-        }\n-        return factory;\n-    }\n-\n }", "timestamp": 1202072638, "metainfo": ""}