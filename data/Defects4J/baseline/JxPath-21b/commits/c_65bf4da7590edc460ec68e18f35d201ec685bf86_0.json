{"sha": "65bf4da7590edc460ec68e18f35d201ec685bf86", "log": "Removed dependency on DOM from everywhere except where needed   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ExpressionContext.java\n+++ b/src/java/org/apache/commons/jxpath/ExpressionContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ExpressionContext.java,v 1.2 2002/04/10 03:40:19 dmitri Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/04/10 03:40:19 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ExpressionContext.java,v 1.3 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.jxpath;\n \n-import org.w3c.dom.Node;\n import java.util.*;\n \n /**\n--- a/src/java/org/apache/commons/jxpath/JXPath.java\n+++ b/src/java/org/apache/commons/jxpath/JXPath.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/Attic/JXPath.java,v 1.2 2002/04/10 03:40:19 dmitri Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/04/10 03:40:19 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/Attic/JXPath.java,v 1.3 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n package org.apache.commons.jxpath;\n \n import java.util.List;\n-import org.w3c.dom.Node;\n \n /**\n  * This class defines convenience methods for XPath traversal. Each method\n  * </ul>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.2 $ $Date: 2002/04/10 03:40:19 $\n+ * @version $Revision: 1.3 $ $Date: 2002/04/12 02:28:06 $\n  */\n public final class JXPath {\n \n--- a/src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java,v 1.1 2001/08/23 00:46:58 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/08/23 00:46:58 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java,v 1.2 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.jxpath;\n \n-import org.w3c.dom.*;\n import java.beans.*;\n import java.util.*;\n \n  * See java.beans.BeanInfo, java.beans.Introspector\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2001/08/23 00:46:58 $\n+ * @version $Revision: 1.2 $ $Date: 2002/04/12 02:28:06 $\n  */\n public class JXPathBasicBeanInfo implements JXPathBeanInfo {\n     private boolean atomic = false;\n--- a/src/java/org/apache/commons/jxpath/JXPathBeanInfo.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathBeanInfo.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathBeanInfo.java,v 1.1 2001/08/23 00:46:58 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/08/23 00:46:58 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathBeanInfo.java,v 1.2 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.jxpath;\n \n-import org.w3c.dom.*;\n import java.beans.PropertyDescriptor;\n \n /**\n  * \"com.foo.BarXBeanInfo\" and make it implement the JXPathBeanInfo interface.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2001/08/23 00:46:58 $\n+ * @version $Revision: 1.2 $ $Date: 2002/04/12 02:28:06 $\n  */\n public interface JXPathBeanInfo  {\n \n--- a/src/java/org/apache/commons/jxpath/JXPathContext.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathContext.java,v 1.5 2002/04/10 03:40:19 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/04/10 03:40:19 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathContext.java,v 1.6 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n package org.apache.commons.jxpath;\n \n import java.util.List;\n-import org.w3c.dom.Node;\n import java.util.Locale;\n \n /**\n  * Also see <a href=\"http://www.w3.org/TR/xpath\">XML Path Language (XPath) Version 1.0 </a>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/04/10 03:40:19 $\n+ * @version $Revision: 1.6 $ $Date: 2002/04/12 02:28:06 $\n  */\n public abstract class JXPathContext {\n     protected JXPathContext parentContext;\n--- a/src/java/org/apache/commons/jxpath/ri/EvalContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/EvalContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/EvalContext.java,v 1.6 2002/04/10 03:40:19 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/04/10 03:40:19 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/EvalContext.java,v 1.7 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.ExpressionContext;\n import org.apache.commons.jxpath.Pointer;\n import java.util.*;\n-import org.w3c.dom.*;\n \n /**\n  * An XPath evaluation context.\n  * implement behavior of various XPath axes: \"child::\", \"parent::\" etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2002/04/10 03:40:19 $\n+ * @version $Revision: 1.7 $ $Date: 2002/04/12 02:28:06 $\n  */\n public abstract class EvalContext {\n     protected EvalContext parentContext;\n             }\n         }\n \n-        if (l instanceof Pointer){\n-            l = ((Pointer)l).getValue();\n-        }\n-        if (r instanceof Pointer){\n-            r = ((Pointer)r).getValue();\n+        if (l instanceof NodePointer){\n+            l = ((NodePointer)l).getPrimitiveValue();\n+        }\n+        if (r instanceof NodePointer){\n+            r = ((NodePointer)r).getPrimitiveValue();\n         }\n \n         if (l instanceof Boolean || r instanceof Boolean){\n         HashSet set = new HashSet();\n         while(nextSet()){\n             while(next()){\n-                Pointer pointer = getCurrentNodePointer();\n-                set.add(pointer.getValue());\n+                NodePointer pointer = getCurrentNodePointer();\n+                set.add(pointer.getPrimitiveValue());\n             }\n         }\n         return set;\n         else if (object == null){\n             return \"\";\n         }\n-        else if (object instanceof Node){\n-            Node node = (Node)object;\n-            int nodeType = node.getNodeType();\n-            if (nodeType == Node.COMMENT_NODE){\n-                String text = ((Comment)node).getData();\n-                return text == null ? \"\" : text.trim();\n-            }\n-            else if (nodeType == Node.TEXT_NODE ||\n-                    nodeType == Node.CDATA_SECTION_NODE){\n-                String text = node.getNodeValue();\n-                return text == null ? \"\" : text.trim();\n-            }\n-            else if (nodeType == Node.PROCESSING_INSTRUCTION_NODE){\n-                String text = ((ProcessingInstruction)node).getData();\n-                return text == null ? \"\" : text.trim();\n-            }\n-            else {\n-                NodeList list = node.getChildNodes();\n-                StringBuffer buf = new StringBuffer(16);\n-                for(int i = 0; i < list.getLength();i++) {\n-                    Node child = list.item(i);\n-                    if (child.getNodeType() == Node.TEXT_NODE){\n-                        buf.append(child.getNodeValue());\n-                    }\n-                    else {\n-                        buf.append(stringValue(child));\n-                    }\n-                }\n-                return buf.toString().trim();\n-            }\n-        }\n         else if (object instanceof NodePointer){\n-            return stringValue(((NodePointer)object).getValue());\n+            return stringValue(((NodePointer)object).getPrimitiveValue());\n         }\n         else if (object instanceof EvalContext){\n             EvalContext ctx = (EvalContext)object;\n             }\n             return value;\n         }\n-        else if (object instanceof Node){\n-            return number(stringValue(object));\n-        }\n         else if (object instanceof EvalContext){\n             return number(stringValue(object));\n         }\n         else if (object instanceof NodePointer){\n-            return number(((NodePointer)object).getValue());\n-        }\n+            return number(((NodePointer)object).getPrimitiveValue());\n+        }\n+//        else if (object instanceof Node){\n+//            System.err.println(\"HERE\");\n+//            return number(stringValue(object));\n+//        }\n         return ZERO;\n     }\n \n             }\n             return value;\n         }\n-        else if (object instanceof Node){\n-            return doubleValue(stringValue(object));\n-        }\n         else if (object instanceof NodePointer){\n-            return doubleValue(((NodePointer)object).getValue());\n+            return doubleValue(((NodePointer)object).getPrimitiveValue());\n         }\n         else if (object instanceof EvalContext){\n             return doubleValue(stringValue(object));\n         else if (object instanceof String){\n             return ((String)object).length() != 0;\n         }\n-        else if (object instanceof Node){\n-            return stringValue(object).length() != 0;\n-        }\n         else if (object instanceof NodePointer){\n-            return booleanValue(((NodePointer)object).getValue());\n+            return booleanValue(((NodePointer)object).getPrimitiveValue());\n         }\n         return false;\n     }\n                 if (predicate instanceof EvalContext){\n                     predicate = ((EvalContext)predicate).getContextNodePointer();\n                 }\n-                if (predicate instanceof Pointer){\n-                    predicate = ((Pointer)predicate).getValue();\n+                if (predicate instanceof NodePointer){\n+                    predicate = ((NodePointer)predicate).getPrimitiveValue();\n                 }\n                 if (predicate == null){\n                     throw new RuntimeException(\"Predicate is null: \" + predicates[i]);\n         Expression arg1 = function.getArg1();\n         int count = 0;\n         Object value = eval(arg1, false);\n-        if (value instanceof Pointer){\n-            value = ((Pointer)value).getValue();\n+        if (value instanceof NodePointer){\n+            value = ((NodePointer)value).getPrimitiveValue();\n         }\n         if (value instanceof EvalContext){\n             EvalContext ctx = (EvalContext)value;\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.7 2002/04/10 03:40:19 dmitri Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/04/10 03:40:19 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.8 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.ri.axes.*;\n import org.apache.commons.jxpath.functions.Types;\n import java.lang.ref.SoftReference;\n-import org.w3c.dom.*;\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2002/04/10 03:40:19 $\n+ * @version $Revision: 1.8 $ $Date: 2002/04/12 02:28:06 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext\n {\n             result = ctx.getContextNodePointer();\n         }\n \n-        if (result instanceof Pointer){\n-            result = ((Pointer)result).getValue();\n-        }\n-        if (result instanceof Node){\n-            result = EvalContext.stringValue((Node)result);\n+//        if (result instanceof DOMNodePointer){\n+//            result = ((DOMNodePointer)result).stringValue();\n+//        }\n+        if (result instanceof NodePointer){\n+            result = ((NodePointer)result).getPrimitiveValue();\n         }\n         return result;\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/BeanAttributeIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/BeanAttributeIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/BeanAttributeIterator.java,v 1.1 2001/09/26 01:21:54 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/09/26 01:21:54 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/BeanAttributeIterator.java,v 1.2 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import java.lang.reflect.*;\n import java.util.*;\n import java.beans.*;\n-import org.w3c.dom.*;\n \n /**\n  * An iterator of attributes of a JavaBean. Currently supports only one\n  * attribute - \"lang\".\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2001/09/26 01:21:54 $\n+ * @version $Revision: 1.2 $ $Date: 2002/04/12 02:28:06 $\n  */\n public class BeanAttributeIterator implements NodeIterator {\n     private NodePointer parent;\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/BeanPointerFactory.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/BeanPointerFactory.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/BeanPointerFactory.java,v 1.1 2002/04/10 03:40:20 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/04/10 03:40:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/BeanPointerFactory.java,v 1.2 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Implements NodePointerFactory for JavaBeans.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2002/04/10 03:40:20 $\n+ * @version $Revision: 1.2 $ $Date: 2002/04/12 02:28:06 $\n  */\n public class BeanPointerFactory implements NodePointerFactory {\n \n     }\n \n     public NodePointer createNodePointer(NodePointer parent, QName name, Object bean){\n+        if (name == null && parent instanceof PropertyPointer){\n+            return (NodePointer)parent.clone();\n+        }\n+\n+        if (bean == null){\n+            return new NullPointer(parent, name);\n+        }\n+\n         JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());\n         return new BeanPointer(parent, name, bean, bi);\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/ContainerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/ContainerPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/ContainerPointer.java,v 1.4 2002/04/10 03:40:20 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/04/10 03:40:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/ContainerPointer.java,v 1.5 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n package org.apache.commons.jxpath.ri.pointers;\n \n import org.apache.commons.jxpath.*;\n-import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.compiler.*;\n-\n-import java.lang.reflect.*;\n import java.util.*;\n-import java.beans.*;\n-import org.w3c.dom.Node;\n \n /**\n  * Transparent pointer to a Container. The getValue() method\n  * itself.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/04/10 03:40:20 $\n+ * @version $Revision: 1.5 $ $Date: 2002/04/12 02:28:06 $\n  */\n public class ContainerPointer extends NodePointer {\n     private Container container;\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/DOMNodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/DOMNodePointer.java,v 1.5 2002/04/11 02:59:42 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/04/11 02:59:42 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/DOMNodePointer.java,v 1.6 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/04/11 02:59:42 $\n+ * @version $Revision: 1.6 $ $Date: 2002/04/12 02:28:06 $\n  */\n public class DOMNodePointer extends NodePointer {\n     private Node node;\n \n         return name.substring(index + 1);\n     }\n+\n+    public Object getPrimitiveValue(){\n+        return stringValue(node);\n+    }\n+\n+    private String stringValue(Node node){\n+        int nodeType = node.getNodeType();\n+        if (nodeType == Node.COMMENT_NODE){\n+            String text = ((Comment)node).getData();\n+            return text == null ? \"\" : text.trim();\n+        }\n+        else if (nodeType == Node.TEXT_NODE ||\n+                nodeType == Node.CDATA_SECTION_NODE){\n+            String text = node.getNodeValue();\n+            return text == null ? \"\" : text.trim();\n+        }\n+        else if (nodeType == Node.PROCESSING_INSTRUCTION_NODE){\n+            String text = ((ProcessingInstruction)node).getData();\n+            return text == null ? \"\" : text.trim();\n+        }\n+        else {\n+            NodeList list = node.getChildNodes();\n+            StringBuffer buf = new StringBuffer(16);\n+            for(int i = 0; i < list.getLength();i++) {\n+                Node child = list.item(i);\n+                if (child.getNodeType() == Node.TEXT_NODE){\n+                    buf.append(child.getNodeValue());\n+                }\n+                else {\n+                    buf.append(stringValue(child));\n+                }\n+            }\n+            return buf.toString().trim();\n+        }\n+    }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/DynamicPointerFactory.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/DynamicPointerFactory.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/DynamicPointerFactory.java,v 1.1 2002/04/10 03:40:20 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/04/10 03:40:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/DynamicPointerFactory.java,v 1.2 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Implements NodePointerFactory for Dynamic classes like Map.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2002/04/10 03:40:20 $\n+ * @version $Revision: 1.2 $ $Date: 2002/04/12 02:28:06 $\n  */\n public class DynamicPointerFactory implements NodePointerFactory {\n \n     }\n \n     public NodePointer createNodePointer(NodePointer parent, QName name, Object bean){\n+        if (name == null && parent instanceof PropertyPointer){\n+            return (NodePointer)parent.clone();\n+        }\n+\n+        if (bean == null){\n+            return new NullPointer(parent, name);\n+        }\n+\n         JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());\n         if (bi.isDynamic()){\n             DynamicPropertyHandler handler = PropertyAccessHelper.getDynamicPropertyHandler(bi.getDynamicPropertyHandlerClass());\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/LangAttributePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/LangAttributePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/LangAttributePointer.java,v 1.1 2001/09/26 01:21:54 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/09/26 01:21:54 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/LangAttributePointer.java,v 1.2 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.jxpath.ri.pointers;\n \n-import org.apache.commons.jxpath.*;\n-import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.compiler.*;\n-\n-import java.lang.reflect.*;\n import java.util.*;\n-import java.beans.*;\n-import org.w3c.dom.*;\n \n /**\n  * A Pointer that points to the \"lang\" attribute of a JavaBean. The value\n  * of the attribute is based on the locale supplied to it in the constructor.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2001/09/26 01:21:54 $\n+ * @version $Revision: 1.2 $ $Date: 2002/04/12 02:28:06 $\n  */\n public class LangAttributePointer extends NodePointer {\n     public LangAttributePointer(NodePointer parent){\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/NamespacePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/NamespacePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/NamespacePointer.java,v 1.1 2001/09/21 23:22:45 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/09/21 23:22:45 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/NamespacePointer.java,v 1.2 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.jxpath.ri.pointers;\n \n-import org.apache.commons.jxpath.*;\n import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.compiler.*;\n \n-import java.lang.reflect.*;\n import java.util.*;\n-import java.beans.*;\n-import org.w3c.dom.*;\n \n /**\n  * Represents a namespace node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2001/09/21 23:22:45 $\n+ * @version $Revision: 1.2 $ $Date: 2002/04/12 02:28:06 $\n  */\n public class NamespacePointer extends NodePointer {\n     private String prefix;\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/NodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/NodePointer.java,v 1.5 2002/04/10 03:40:20 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/04/10 03:40:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/NodePointer.java,v 1.6 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.jxpath.*;\n import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;\n-import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.compiler.*;\n-\n-import java.lang.reflect.*;\n+import org.apache.commons.jxpath.functions.Types;\n+\n import java.util.*;\n-import java.beans.*;\n-import org.w3c.dom.Node;\n \n /**\n  * Common superclass for Pointers of all kinds.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/04/10 03:40:20 $\n+ * @version $Revision: 1.6 $ $Date: 2002/04/12 02:28:06 $\n  */\n public abstract class NodePointer implements Pointer, Cloneable {\n \n     }\n \n     public static NodePointer createNodePointer(NodePointer parent, QName name, Object bean){\n-        if (bean == null){\n-            return new NullPointer(parent, name);\n-        }\n         NodePointerFactory[] factories = JXPathContextReferenceImpl.getNodePointerFactories();\n         for (int i = 0; i < factories.length; i++){\n             NodePointer pointer = factories[i].createNodePointer(parent, name, bean);\n \n     public QName getExpandedName(){\n         return getName();\n+    }\n+\n+    /**\n+     * By default, returns <code>getValue()</code>, can be overridden to\n+     * return a \"canonical\" value, like for instance a DOM element should\n+     * return its string value.\n+     */\n+    public Object getPrimitiveValue(){\n+        return getValue();\n     }\n \n     protected NodePointer parent;\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/PropertyOwnerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/PropertyOwnerPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/PropertyOwnerPointer.java,v 1.3 2001/09/26 01:21:54 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2001/09/26 01:21:54 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/PropertyOwnerPointer.java,v 1.4 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.compiler.*;\n \n-import java.lang.reflect.*;\n import java.util.*;\n-import java.beans.*;\n-import org.w3c.dom.*;\n+\n \n /**\n  * A pointer describing a node that has properties, each of which could be\n  * a collection.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2001/09/26 01:21:54 $\n+ * @version $Revision: 1.4 $ $Date: 2002/04/12 02:28:06 $\n  */\n public abstract class PropertyOwnerPointer extends NodePointer {\n \n--- a/src/java/org/apache/commons/jxpath/ri/pointers/PropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/PropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/PropertyPointer.java,v 1.4 2002/04/10 03:40:20 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/04/10 03:40:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/PropertyPointer.java,v 1.5 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n package org.apache.commons.jxpath.ri.pointers;\n \n import org.apache.commons.jxpath.*;\n-import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.compiler.*;\n \n-import java.lang.reflect.*;\n import java.util.*;\n-import java.beans.*;\n-import org.w3c.dom.Node;\n \n /**\n+ * A pointer allocated by a PropertyOwnerPointer to represent the value of\n+ * a property of the parent object.\n+ *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/04/10 03:40:20 $\n+ * @version $Revision: 1.5 $ $Date: 2002/04/12 02:28:06 $\n  */\n public abstract class PropertyPointer extends PropertyOwnerPointer {\n     protected int propertyIndex = UNSPECIFIED_PROPERTY;\n         return super.isActual();\n     }\n \n-\n     /**\n      * Returns a NodePointer that can be used to access the currently\n      * selected property value.\n      */\n     public NodePointer childNodePointer(){\n-        Object bean = getValue();\n-\n-        if (bean instanceof Node){\n-            return new DOMNodePointer(this, (Node)bean);\n-        }\n-        else if (bean instanceof Container){\n-            return new ContainerPointer(this, (Container)bean);\n-        }\n-\n-        return (NodePointer)clone();\n+        return createNodePointer(this, null, getValue());\n     }\n \n     public int hashCode(){\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/VariablePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/VariablePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/VariablePointer.java,v 1.4 2002/04/10 03:40:20 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/04/10 03:40:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/VariablePointer.java,v 1.5 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n package org.apache.commons.jxpath.ri.pointers;\n \n import org.apache.commons.jxpath.*;\n-import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.compiler.*;\n-\n-import java.lang.reflect.*;\n import java.util.*;\n-import java.beans.*;\n-import org.w3c.dom.Node;\n \n /**\n  * Pointer to a context variable.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/04/10 03:40:20 $\n+ * @version $Revision: 1.5 $ $Date: 2002/04/12 02:28:06 $\n  */\n public class VariablePointer extends NodePointer {\n     private Variables variables;\n--- a/src/test/org/apache/commons/jxpath/NestedTestBean.java\n+++ b/src/test/org/apache/commons/jxpath/NestedTestBean.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/NestedTestBean.java,v 1.2 2002/04/10 03:40:21 dmitri Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/04/10 03:40:21 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/NestedTestBean.java,v 1.3 2002/04/12 02:28:06 dmitri Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/04/12 02:28:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.jxpath;\n \n-import org.w3c.dom.*;\n-import java.beans.PropertyDescriptor;\n-import java.lang.reflect.*;\n-\n /**\n  * A general purpose JavaBean for JUnit tests for the \"jxpath\" component.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.2 $ $Date: 2002/04/10 03:40:21 $\n+ * @version $Revision: 1.3 $ $Date: 2002/04/12 02:28:06 $\n  */\n public class NestedTestBean {\n     private String name = \"Name 0\";", "timestamp": 1018578486, "metainfo": ""}