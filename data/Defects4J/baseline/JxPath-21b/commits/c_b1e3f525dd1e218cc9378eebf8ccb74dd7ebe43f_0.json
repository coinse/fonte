{"sha": "b1e3f525dd1e218cc9378eebf8ccb74dd7ebe43f", "log": "Fixed bug with default index   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/axes/ChildContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/ChildContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/ChildContext.java,v 1.8 2002/04/28 04:35:48 dmitri Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/04/28 04:35:48 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/ChildContext.java,v 1.9 2002/05/14 23:08:26 dmitri Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/05/14 23:08:26 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * \"preceding-sibling::\" axes.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.8 $ $Date: 2002/04/28 04:35:48 $\n+ * @version $Revision: 1.9 $ $Date: 2002/05/14 23:08:26 $\n  */\n public class ChildContext extends EvalContext {\n     private NodeTest nodeTest;\n                     return null;\n                 }\n                 // See if there is a property there, singular or collection\n-                if (iterator.getNodePointer() != null){\n-                    break;\n+                NodePointer pointer = iterator.getNodePointer();\n+                if (pointer != null){\n+                    return pointer;\n                 }\n             }\n         }\n--- a/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.18 2002/05/08 23:05:05 dmitri Exp $\n- * $Revision: 1.18 $\n- * $Date: 2002/05/08 23:05:05 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.19 2002/05/14 23:08:25 dmitri Exp $\n+ * $Revision: 1.19 $\n+ * $Date: 2002/05/14 23:08:25 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.ri.compiler.Expression;\n import java.beans.*;\n \n-//import org.apache.xpath.XPath;\n-//import org.apache.xpath.XPathContext;\n-//import org.apache.xml.utils.PrefixResolver;\n-//import org.apache.xml.utils.PrefixResolverDefault;\n-\n /**\n  * <p>\n  *  Test Case for the JXPath class.  The majority of these tests use\n  * </p>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.18 $ $Date: 2002/05/08 23:05:05 $\n+ * @version $Revision: 1.19 $ $Date: 2002/05/14 23:08:25 $\n  */\n \n public class JXPathTestCase extends TestCase\n         testGetValue(context, \"2 + 3\",                  \"5.0\", String.class);\n         testGetValue(context, \"2 + 3\",                  Boolean.TRUE, boolean.class);\n         testGetValue(context, \"'true'\",                 Boolean.TRUE, Boolean.class);\n+\n         boolean exception = false;\n         try {\n             testGetValue(context, \"'foo'\",              null, Date.class);\n      * Test JXPath.setValue() with various arguments\n      */\n     public void testSetValue(){\n-        if (enabled){\n-            TestBean tBean = new TestBean();\n-            JXPathContext context = JXPathContext.newContext(tBean);\n-            context.getVariables().declareVariable(\"x\", null);\n-\n-            context.setValue(\"$x\", new Integer(1));\n-            assertEquals(\"Modified <\" + \"$x\" + \">\", new Integer(1), context.getValue(\"$x\"));\n-\n-            boolean exception = false;\n-            try {\n-                context.setValue(\"$y\", new Integer(1));\n-            }\n-            catch (Exception ex){\n-                exception = true;\n-            }\n-            assertTrue(\"Setting '$y = 1', expected exception - did not get it\", exception);\n-\n-            context.setValue(\"int\", new Integer(3));\n-            assertEquals(\"Modified <\" + \"int\" + \">\", new Integer(3), context.getValue(\"int\"));\n-\n-            context.setValue(\"int\", new int[]{4});\n-            assertEquals(\"Modified <\" + \"int\" + \">\", new Integer(4), context.getValue(\"int\"));\n-\n-            context.setValue(\"integers[2]\", new Integer(5));\n-            assertEquals(\"Modified <\" + \"integers[2]\" + \">\", new Integer(5), context.getValue(\"integers[2]\"));\n-\n-            context.setValue(\"integers[2]\", new int[]{6});\n-            assertEquals(\"Modified <\" + \"integers[2]\" + \">\", new Integer(6), context.getValue(\"integers[2]\"));\n-\n-            NestedTestBean nBean = new NestedTestBean(\"Name 9\");\n-            tBean.getBeans()[1] = null;\n-            context.setValue(\"beans[2]\", nBean);\n-            assertEquals(\"Modified <\" + \"beans[2]\" + \">\", nBean, context.getValue(\"beans[2]\"));\n-\n-            context.setValue(\"map/Key1\", new Integer(6));\n-            assertEquals(\"Modified <\" + \"map/Key1\" + \">\", new Integer(6), context.getValue(\"map/Key1\"));\n-\n-            context.setValue(\"map/Key1\", new Integer[]{new Integer(7), new Integer(8)});\n-            context.setValue(\"map/Key1[1]\", new Integer(9));\n-            assertEquals(\"Modified <\" + \"map/Key1[1]\" + \">\", new Integer(9), context.getValue(\"map/Key1[1]\"));\n-\n-            context.setValue(\"map/Key4\", new Integer(7));\n-            assertEquals(\"Modified <\" + \"map/Key4\" + \">\", new Integer(7), context.getValue(\"map/Key4\"));\n-        }\n+        if (!enabled){\n+            return;\n+        }\n+        TestBean tBean = new TestBean();\n+        JXPathContext context = JXPathContext.newContext(tBean);\n+        context.getVariables().declareVariable(\"x\", null);\n+\n+        context.setValue(\"$x\", new Integer(1));\n+        assertEquals(\"Modified <\" + \"$x\" + \">\", new Integer(1), context.getValue(\"$x\"));\n+\n+        boolean exception = false;\n+        try {\n+            context.setValue(\"$y\", new Integer(1));\n+        }\n+        catch (Exception ex){\n+            exception = true;\n+        }\n+        assertTrue(\"Setting '$y = 1', expected exception - did not get it\", exception);\n+\n+        context.setValue(\"int\", new Integer(3));\n+        assertEquals(\"Modified <\" + \"int\" + \">\", new Integer(3), context.getValue(\"int\"));\n+\n+        context.setValue(\"int\", new int[]{4});\n+        assertEquals(\"Modified <\" + \"int\" + \">\", new Integer(4), context.getValue(\"int\"));\n+\n+        context.setValue(\"integers[2]\", new Integer(5));\n+        assertEquals(\"Modified <\" + \"integers[2]\" + \">\", new Integer(5), context.getValue(\"integers[2]\"));\n+\n+        context.setValue(\"integers[2]\", new int[]{6});\n+        assertEquals(\"Modified <\" + \"integers[2]\" + \">\", new Integer(6), context.getValue(\"integers[2]\"));\n+\n+        NestedTestBean nBean = new NestedTestBean(\"Name 9\");\n+        tBean.getBeans()[1] = null;\n+        context.setValue(\"beans[2]\", nBean);\n+        assertEquals(\"Modified <\" + \"beans[2]\" + \">\", nBean, context.getValue(\"beans[2]\"));\n+\n+        context.setValue(\"map/Key1\", new Integer(6));\n+        assertEquals(\"Modified <\" + \"map/Key1\" + \">\", new Integer(6), context.getValue(\"map/Key1\"));\n+\n+        context.setValue(\"map/Key1\", new Integer[]{new Integer(7), new Integer(8)});\n+        context.setValue(\"map/Key1[1]\", new Integer(9));\n+        assertEquals(\"Modified <\" + \"map/Key1[1]\" + \">\", new Integer(9), context.getValue(\"map/Key1[1]\"));\n+\n+        context.setValue(\"map/Key4\", new Integer(7));\n+        assertEquals(\"Modified <\" + \"map/Key4\" + \">\", new Integer(7), context.getValue(\"map/Key4\"));\n+\n+        context.setValue(\"integers[. = 6]\", new Integer(8));\n+        assertEquals(\"Modified <\" + \"integers[. = 6]\" + \">\", new Integer(8), context.getValue(\"integers[2]\"));\n+\n+        context.setValue(\"beans[name = 'Name 9']/int\", new Integer(9));\n+        assertEquals(\"Modified <\" + \"beans[name = 'Name 9']/int\" + \">\", new Integer(9), context.getValue(\"beans[name = 'Name 9']/int\"));\n     }\n \n     /**", "timestamp": 1021417706, "metainfo": ""}