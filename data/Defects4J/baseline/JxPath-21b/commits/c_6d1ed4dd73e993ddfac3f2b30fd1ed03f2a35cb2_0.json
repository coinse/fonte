{"sha": "6d1ed4dd73e993ddfac3f2b30fd1ed03f2a35cb2", "log": "[JXPATH-105] test basicnodeset nodes  ", "commit": "\n--- a/src/test/org/apache/commons/jxpath/BasicNodeSetTest.java\n+++ b/src/test/org/apache/commons/jxpath/BasicNodeSetTest.java\n package org.apache.commons.jxpath;\n \n import java.util.Iterator;\n+import java.util.List;\n+\n+import org.w3c.dom.Element;\n \n /**\n  * Test BasicNodeSet\n  *          2007) $\n  */\n public class BasicNodeSetTest extends JXPathTestCase {\n+\n     /** JXPathContext */\n     protected JXPathContext context;\n \n      */\n     protected void setUp() throws Exception {\n         super.setUp();\n-        context = JXPathContext.newContext(new TestBean());\n+        context = JXPathContext.newContext(new TestMixedModelBean());\n         nodeSet = new BasicNodeSet();\n     }\n \n      * Test adding pointers.\n      */\n     public void testAdd() {\n-        addPointers(\"/integers\");\n-        assertEquals(nodeSet.getPointers().toString(), list(\"/integers[1]\",\n-                \"/integers[2]\", \"/integers[3]\", \"/integers[4]\").toString());\n+        addPointers(\"/bean/integers\");\n+        assertEquals(nodeSet.getPointers().toString(), list(\"/bean/integers[1]\",\n+                \"/bean/integers[2]\", \"/bean/integers[3]\", \"/bean/integers[4]\").toString());\n         assertEquals(list(new Integer(1), new Integer(2), new Integer(3),\n                 new Integer(4)), nodeSet.getValues());\n         assertEquals(list(new Integer(1), new Integer(2), new Integer(3),\n      * Test removing a pointer.\n      */\n     public void testRemove() {\n-        addPointers(\"/integers\");\n-        removePointers(\"/integers[4]\");\n-        assertEquals(list(\"/integers[1]\", \"/integers[2]\", \"/integers[3]\")\n+        addPointers(\"/bean/integers\");\n+        removePointers(\"/bean/integers[4]\");\n+        assertEquals(list(\"/bean/integers[1]\", \"/bean/integers[2]\", \"/bean/integers[3]\")\n                 .toString(), nodeSet.getPointers().toString());\n         assertEquals(list(new Integer(1), new Integer(2), new Integer(3)),\n                 nodeSet.getValues());\n                 nodeSet.getNodes());\n     }\n \n+    /**\n+     * Demonstrate when nodes != values:  in XML models.\n+     */\n+    public void testNodes() {\n+        addPointers(\"/document/vendor/contact\");\n+        assertEquals(list(\"/document/vendor[1]/contact[1]\",\n+                \"/document/vendor[1]/contact[2]\",\n+                \"/document/vendor[1]/contact[3]\",\n+                \"/document/vendor[1]/contact[4]\").toString(),\n+                nodeSet.getPointers().toString());\n+        assertEquals(list(\"John\", \"Jack\", \"Jim\", \"Jack Black\"),\n+                nodeSet.getValues());\n+        assertElementNames(list(\"contact\", \"contact\", \"contact\", \"contact\"), nodeSet.getNodes());\n+        assertElementValues(list(\"John\", \"Jack\", \"Jim\", \"Jack Black\"), nodeSet.getNodes());\n+    }\n+\n+    /**\n+     * Do assertions on DOM element names.\n+     * @param names List of expected names\n+     * @param elements List of DOM elements\n+     */\n+    protected void assertElementNames(List names, List elements) {\n+        assertEquals(names.size(), elements.size());\n+        Iterator nameIter = names.iterator();\n+        Iterator elementIter = elements.iterator();\n+        while (elementIter.hasNext()) {\n+            assertEquals(nameIter.next(), ((Element) elementIter.next()).getTagName());\n+        }\n+    }\n+\n+    /**\n+     * Do assertions on DOM element values.\n+     * @param values List of expected values\n+     * @param elements List of DOM elements\n+     */\n+    protected void assertElementValues(List values, List elements) {\n+        assertEquals(values.size(), elements.size());\n+        Iterator valueIter = values.iterator();\n+        Iterator elementIter = elements.iterator();\n+        while (elementIter.hasNext()) {\n+            assertEquals(valueIter.next(), ((Element) elementIter.next()).getFirstChild().getNodeValue());\n+        }\n+        \n+    }\n }", "timestamp": 1197653648, "metainfo": ""}