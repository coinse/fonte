{"sha": "e5a284c0486a8b2a4289605939074cc6ddf9df44", "log": "Upgraded to JavaCC 2.1   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/parser/JavaCharStream.java\n+/* Generated By:JavaCC: Do not edit this line. JavaCharStream.java Version 2.1 */\n+package org.apache.commons.jxpath.ri.parser;\n+\n+/**\n+ * An implementation of interface CharStream, where the stream is assumed to\n+ * contain only ASCII characters (with java-like unicode escape processing).\n+ */\n+\n+public final class JavaCharStream\n+{\n+  public static final boolean staticFlag = false;\n+  static final int hexval(char c) throws java.io.IOException {\n+    switch(c)\n+    {\n+       case '0' :\n+          return 0;\n+       case '1' :\n+          return 1;\n+       case '2' :\n+          return 2;\n+       case '3' :\n+          return 3;\n+       case '4' :\n+          return 4;\n+       case '5' :\n+          return 5;\n+       case '6' :\n+          return 6;\n+       case '7' :\n+          return 7;\n+       case '8' :\n+          return 8;\n+       case '9' :\n+          return 9;\n+\n+       case 'a' :\n+       case 'A' :\n+          return 10;\n+       case 'b' :\n+       case 'B' :\n+          return 11;\n+       case 'c' :\n+       case 'C' :\n+          return 12;\n+       case 'd' :\n+       case 'D' :\n+          return 13;\n+       case 'e' :\n+       case 'E' :\n+          return 14;\n+       case 'f' :\n+       case 'F' :\n+          return 15;\n+    }\n+\n+    throw new java.io.IOException(); // Should never come here\n+  }\n+\n+  public int bufpos = -1;\n+  int bufsize;\n+  int available;\n+  int tokenBegin;\n+  private int bufline[];\n+  private int bufcolumn[];\n+\n+  private int column = 0;\n+  private int line = 1;\n+\n+  private boolean prevCharIsCR = false;\n+  private boolean prevCharIsLF = false;\n+\n+  private java.io.Reader inputStream;\n+\n+  private char[] nextCharBuf;\n+  private char[] buffer;\n+  private int maxNextCharInd = 0;\n+  private int nextCharInd = -1;\n+  private int inBuf = 0;\n+\n+  private final void ExpandBuff(boolean wrapAround)\n+  {\n+     char[] newbuffer = new char[bufsize + 2048];\n+     int newbufline[] = new int[bufsize + 2048];\n+     int newbufcolumn[] = new int[bufsize + 2048];\n+\n+     try\n+     {\n+        if (wrapAround)\n+        {\n+           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n+           System.arraycopy(buffer, 0, newbuffer,\n+                                             bufsize - tokenBegin, bufpos);\n+           buffer = newbuffer;\n+\n+           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n+           System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);\n+           bufline = newbufline;\n+\n+           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n+           System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);\n+           bufcolumn = newbufcolumn;\n+\n+           bufpos += (bufsize - tokenBegin);\n+        }\n+        else\n+        {\n+           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n+           buffer = newbuffer;\n+\n+           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n+           bufline = newbufline;\n+\n+           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n+           bufcolumn = newbufcolumn;\n+\n+           bufpos -= tokenBegin;\n+        }\n+     }\n+     catch (Throwable t)\n+     {\n+        throw new Error(t.getMessage());\n+     }\n+\n+     available = (bufsize += 2048);\n+     tokenBegin = 0;\n+  }\n+\n+  private final void FillBuff() throws java.io.IOException\n+  {\n+     int i;\n+     if (maxNextCharInd == 4096)\n+        maxNextCharInd = nextCharInd = 0;\n+\n+     try {\n+        if ((i = inputStream.read(nextCharBuf, maxNextCharInd,\n+                                            4096 - maxNextCharInd)) == -1)\n+        {\n+           inputStream.close();\n+           throw new java.io.IOException();\n+        }\n+        else\n+           maxNextCharInd += i;\n+        return;\n+     }\n+     catch(java.io.IOException e) {\n+        if (bufpos != 0)\n+        {\n+           --bufpos;\n+           backup(0);\n+        }\n+        else\n+        {\n+           bufline[bufpos] = line;\n+           bufcolumn[bufpos] = column;\n+        }\n+        throw e;\n+     }\n+  }\n+\n+  private final char ReadByte() throws java.io.IOException\n+  {\n+     if (++nextCharInd >= maxNextCharInd)\n+        FillBuff();\n+\n+     return nextCharBuf[nextCharInd];\n+  }\n+\n+  public final char BeginToken() throws java.io.IOException\n+  {     \n+     if (inBuf > 0)\n+     {\n+        --inBuf;\n+\n+        if (++bufpos == bufsize)\n+           bufpos = 0;\n+\n+        tokenBegin = bufpos;\n+        return buffer[bufpos];\n+     }\n+\n+     tokenBegin = 0;\n+     bufpos = -1;\n+\n+     return readChar();\n+  }     \n+\n+  private final void AdjustBuffSize()\n+  {\n+     if (available == bufsize)\n+     {\n+        if (tokenBegin > 2048)\n+        {\n+           bufpos = 0;\n+           available = tokenBegin;\n+        }\n+        else\n+           ExpandBuff(false);\n+     }\n+     else if (available > tokenBegin)\n+        available = bufsize;\n+     else if ((tokenBegin - available) < 2048)\n+        ExpandBuff(true);\n+     else\n+        available = tokenBegin;\n+  }\n+\n+  private final void UpdateLineColumn(char c)\n+  {\n+     column++;\n+\n+     if (prevCharIsLF)\n+     {\n+        prevCharIsLF = false;\n+        line += (column = 1);\n+     }\n+     else if (prevCharIsCR)\n+     {\n+        prevCharIsCR = false;\n+        if (c == '\\n')\n+        {\n+           prevCharIsLF = true;\n+        }\n+        else\n+           line += (column = 1);\n+     }\n+\n+     switch (c)\n+     {\n+        case '\\r' :\n+           prevCharIsCR = true;\n+           break;\n+        case '\\n' :\n+           prevCharIsLF = true;\n+           break;\n+        case '\\t' :\n+           column--;\n+           column += (8 - (column & 07));\n+           break;\n+        default :\n+           break;\n+     }\n+\n+     bufline[bufpos] = line;\n+     bufcolumn[bufpos] = column;\n+  }\n+\n+  public final char readChar() throws java.io.IOException\n+  {\n+     if (inBuf > 0)\n+     {\n+        --inBuf;\n+\n+        if (++bufpos == bufsize)\n+           bufpos = 0;\n+\n+        return buffer[bufpos];\n+     }\n+\n+     char c;\n+\n+     if (++bufpos == available)\n+        AdjustBuffSize();\n+\n+     if ((buffer[bufpos] = c = ReadByte()) == '\\\\')\n+     {\n+        UpdateLineColumn(c);\n+\n+        int backSlashCnt = 1;\n+\n+        for (;;) // Read all the backslashes\n+        {\n+           if (++bufpos == available)\n+              AdjustBuffSize();\n+\n+           try\n+           {\n+              if ((buffer[bufpos] = c = ReadByte()) != '\\\\')\n+              {\n+                 UpdateLineColumn(c);\n+                 // found a non-backslash char.\n+                 if ((c == 'u') && ((backSlashCnt & 1) == 1))\n+                 {\n+                    if (--bufpos < 0)\n+                       bufpos = bufsize - 1;\n+\n+                    break;\n+                 }\n+\n+                 backup(backSlashCnt);\n+                 return '\\\\';\n+              }\n+           }\n+           catch(java.io.IOException e)\n+           {\n+              if (backSlashCnt > 1)\n+                 backup(backSlashCnt);\n+\n+              return '\\\\';\n+           }\n+\n+           UpdateLineColumn(c);\n+           backSlashCnt++;\n+        }\n+\n+        // Here, we have seen an odd number of backslash's followed by a 'u'\n+        try\n+        {\n+           while ((c = ReadByte()) == 'u')\n+              ++column;\n+\n+           buffer[bufpos] = c = (char)(hexval(c) << 12 |\n+                                       hexval(ReadByte()) << 8 |\n+                                       hexval(ReadByte()) << 4 |\n+                                       hexval(ReadByte()));\n+\n+           column += 4;\n+        }\n+        catch(java.io.IOException e)\n+        {\n+           throw new Error(\"Invalid escape character at line \" + line +\n+                                         \" column \" + column + \".\");\n+        }\n+\n+        if (backSlashCnt == 1)\n+           return c;\n+        else\n+        {\n+           backup(backSlashCnt - 1);\n+           return '\\\\';\n+        }\n+     }\n+     else\n+     {\n+        UpdateLineColumn(c);\n+        return (c);\n+     }\n+  }\n+\n+  /**\n+   * @deprecated \n+   * @see #getEndColumn\n+   */\n+\n+  public final int getColumn() {\n+     return bufcolumn[bufpos];\n+  }\n+\n+  /**\n+   * @deprecated \n+   * @see #getEndLine\n+   */\n+\n+  public final int getLine() {\n+     return bufline[bufpos];\n+  }\n+\n+  public final int getEndColumn() {\n+     return bufcolumn[bufpos];\n+  }\n+\n+  public final int getEndLine() {\n+     return bufline[bufpos];\n+  }\n+\n+  public final int getBeginColumn() {\n+     return bufcolumn[tokenBegin];\n+  }\n+\n+  public final int getBeginLine() {\n+     return bufline[tokenBegin];\n+  }\n+\n+  public final void backup(int amount) {\n+\n+    inBuf += amount;\n+    if ((bufpos -= amount) < 0)\n+       bufpos += bufsize;\n+  }\n+\n+  public JavaCharStream(java.io.Reader dstream,\n+                 int startline, int startcolumn, int buffersize)\n+  {\n+    inputStream = dstream;\n+    line = startline;\n+    column = startcolumn - 1;\n+\n+    available = bufsize = buffersize;\n+    buffer = new char[buffersize];\n+    bufline = new int[buffersize];\n+    bufcolumn = new int[buffersize];\n+    nextCharBuf = new char[4096];\n+  }\n+\n+  public JavaCharStream(java.io.Reader dstream,\n+                                        int startline, int startcolumn)\n+  {\n+     this(dstream, startline, startcolumn, 4096);\n+  }\n+\n+  public JavaCharStream(java.io.Reader dstream)\n+  {\n+     this(dstream, 1, 1, 4096);\n+  }\n+  public void ReInit(java.io.Reader dstream,\n+                 int startline, int startcolumn, int buffersize)\n+  {\n+    inputStream = dstream;\n+    line = startline;\n+    column = startcolumn - 1;\n+\n+    if (buffer == null || buffersize != buffer.length)\n+    {\n+      available = bufsize = buffersize;\n+      buffer = new char[buffersize];\n+      bufline = new int[buffersize];\n+      bufcolumn = new int[buffersize];\n+      nextCharBuf = new char[4096];\n+    }\n+    prevCharIsLF = prevCharIsCR = false;\n+    tokenBegin = inBuf = maxNextCharInd = 0;\n+    nextCharInd = bufpos = -1;\n+  }\n+\n+  public void ReInit(java.io.Reader dstream,\n+                                        int startline, int startcolumn)\n+  {\n+     ReInit(dstream, startline, startcolumn, 4096);\n+  }\n+\n+  public void ReInit(java.io.Reader dstream)\n+  {\n+     ReInit(dstream, 1, 1, 4096);\n+  }\n+  public JavaCharStream(java.io.InputStream dstream, int startline,\n+  int startcolumn, int buffersize)\n+  {\n+     this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);\n+  }\n+\n+  public JavaCharStream(java.io.InputStream dstream, int startline,\n+                                                           int startcolumn)\n+  {\n+     this(dstream, startline, startcolumn, 4096);\n+  }\n+\n+  public JavaCharStream(java.io.InputStream dstream)\n+  {\n+     this(dstream, 1, 1, 4096);\n+  }\n+\n+  public void ReInit(java.io.InputStream dstream, int startline,\n+  int startcolumn, int buffersize)\n+  {\n+     ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);\n+  }\n+  public void ReInit(java.io.InputStream dstream, int startline,\n+                                                           int startcolumn)\n+  {\n+     ReInit(dstream, startline, startcolumn, 4096);\n+  }\n+  public void ReInit(java.io.InputStream dstream)\n+  {\n+     ReInit(dstream, 1, 1, 4096);\n+  }\n+\n+  public final String GetImage()\n+  {\n+     if (bufpos >= tokenBegin)\n+        return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);\n+     else\n+        return new String(buffer, tokenBegin, bufsize - tokenBegin) +\n+                              new String(buffer, 0, bufpos + 1);\n+  }\n+\n+  public final char[] GetSuffix(int len)\n+  {\n+     char[] ret = new char[len];\n+\n+     if ((bufpos + 1) >= len)\n+        System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);\n+     else\n+     {\n+        System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,\n+                                                          len - bufpos - 1);\n+        System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);\n+     }\n+\n+     return ret;\n+  }\n+\n+  public void Done()\n+  {\n+     nextCharBuf = null;\n+     buffer = null;\n+     bufline = null;\n+     bufcolumn = null;\n+  }\n+\n+  /**\n+   * Method to adjust line and column numbers for the start of a token.<BR>\n+   */\n+  public void adjustBeginLineColumn(int newLine, int newCol)\n+  {\n+     int start = tokenBegin;\n+     int len;\n+\n+     if (bufpos >= tokenBegin)\n+     {\n+        len = bufpos - tokenBegin + inBuf + 1;\n+     }\n+     else\n+     {\n+        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n+     }\n+\n+     int i = 0, j = 0, k = 0;\n+     int nextColDiff = 0, columnDiff = 0;\n+\n+     while (i < len &&\n+            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n+     {\n+        bufline[j] = newLine;\n+        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n+        bufcolumn[j] = newCol + columnDiff;\n+        columnDiff = nextColDiff;\n+        i++;\n+     } \n+\n+     if (i < len)\n+     {\n+        bufline[j] = newLine++;\n+        bufcolumn[j] = newCol + columnDiff;\n+\n+        while (i++ < len)\n+        {\n+           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n+              bufline[j] = newLine++;\n+           else\n+              bufline[j] = newLine;\n+        }\n+     }\n+\n+     line = bufline[j];\n+     column = bufcolumn[j];\n+  }\n+\n+}\n--- a/src/java/org/apache/commons/jxpath/ri/parser/ParseException.java\n+++ b/src/java/org/apache/commons/jxpath/ri/parser/ParseException.java\n-/* Generated By:JavaCC: Do not edit this line. ParseException.java Version 0.7pre6 */\n+/* Generated By:JavaCC: Do not edit this line. ParseException.java Version 2.1 */\n package org.apache.commons.jxpath.ri.parser;\n \n /**\n       retval += add_escapes(tok.image);\n       tok = tok.next; \n     }\n-    retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn + \".\" + eol;\n+    retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn;\n+    retval += \".\" + eol;\n     if (expectedTokenSequences.length == 1) {\n       retval += \"Was expecting:\" + eol + \"    \";\n     } else {\n--- a/src/java/org/apache/commons/jxpath/ri/parser/Token.java\n+++ b/src/java/org/apache/commons/jxpath/ri/parser/Token.java\n-/* Generated By:JavaCC: Do not edit this line. Token.java Version 0.7pre3 */\n+/* Generated By:JavaCC: Do not edit this line. Token.java Version 2.1 */\n package org.apache.commons.jxpath.ri.parser;\n \n /**\n--- a/src/java/org/apache/commons/jxpath/ri/parser/TokenMgrError.java\n+++ b/src/java/org/apache/commons/jxpath/ri/parser/TokenMgrError.java\n-/* Generated By:JavaCC: Do not edit this line. MODIFIED BY DMITRI PLOTNIKOV - DO NOT REGENERATE */\n+/* Generated By:JavaCC: Do not edit this line. TokenMgrError.java Version 2.1 *\n+ * \n+ * !!!MODIFIED BY DMITRI PLOTNIKOV - DO NOT REGENERATE!!!\n+ */\n package org.apache.commons.jxpath.ri.parser;\n \n public class TokenMgrError extends Error\n {\n-    private int position;\n-    private char character;\n-\n-\n    /*\n     * Ordinals for various reasons why an Error of this type can be thrown.\n     */\n     * Replaces unprintable characters by their espaced (or unicode escaped)\n     * equivalents in the given string\n     */\n+   \n+   // MADE PUBLIC - DMITRI PLOTNIKOV\n    public static final String addEscapes(String str) {\n       StringBuffer retval = new StringBuffer();\n       char ch;\n    /**\n     * Returns a detailed message for the Error when it is thrown by the\n     * token manager to indicate a lexical error.\n-    * Parameters :\n+    * Parameters : \n     *    EOFSeen     : indicates if EOF caused the lexicl error\n     *    curLexState : lexical state in which this error occured\n     *    errorLine   : line number when the error occured\n    /**\n     * You can also modify the body of this method to customize your error messages.\n     * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not\n-    * of end-users concern, so you can return something like :\n+    * of end-users concern, so you can return something like : \n     *\n     *     \"Internal Error : Please file a bug report .... \"\n     *\n \n    public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason) {\n       this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);\n+\n+      // ADDED BY ME FROM THIS POINT TO THE EOF - DMITRI PLOTNIKOV\n       position = errorColumn - 1;\n       character = curChar;\n    }\n+   \n+\n+   private int position;\n+   private char character;\n \n \n-   // ADDED BY ME - DMITRI PLOTNIKOV\n    public int getPosition(){\n     return position;\n    }\n \n    public char getCharacter(){\n     return character;\n-   }\n+   }   \n }\n--- a/src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java\n+++ b/src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java\n     case FUNCTION_KEY:\n       jj_consume_token(FUNCTION_KEY);\n       break;\n+    case FUNCTION_FORMAT_NUMBER:\n+      jj_consume_token(FUNCTION_FORMAT_NUMBER);\n+      break;\n     default:\n       jj_la1[0] = jj_gen;\n       jj_consume_token(-1);\n       jj_consume_token(FUNCTION_KEY);\n                                       code = Compiler.FUNCTION_KEY;\n       break;\n+    case FUNCTION_FORMAT_NUMBER:\n+      jj_consume_token(FUNCTION_FORMAT_NUMBER);\n+                                      code = Compiler.FUNCTION_FORMAT_NUMBER;\n+      break;\n     default:\n       jj_la1[2] = jj_gen;\n       jj_consume_token(-1);\n  String nc1, nc2 = null;\n     nc1 = NCName();\n     switch (jj_nt.kind) {\n-    case 74:\n-      jj_consume_token(74);\n+    case 75:\n+      jj_consume_token(75);\n       nc2 = NCName();\n       break;\n     default:\n     String nc1, nc2 = null;\n     if (jj_2_1(2147483647)) {\n       nc1 = NCName();\n-      jj_consume_token(74);\n+      jj_consume_token(75);\n       nc2 = NCName();\n     } else {\n       switch (jj_nt.kind) {\n     case FUNCTION_FLOOR:\n     case FUNCTION_CEILING:\n     case FUNCTION_ROUND:\n+    case FUNCTION_FORMAT_NUMBER:\n     case NCName:\n-    case 77:\n     case 78:\n-    case 81:\n-    case 83:\n+    case 79:\n+    case 82:\n+    case 84:\n       ex = RelativeLocationPath();\n       break;\n     case SLASH:\n     case FUNCTION_FLOOR:\n     case FUNCTION_CEILING:\n     case FUNCTION_ROUND:\n+    case FUNCTION_FORMAT_NUMBER:\n     case NCName:\n-    case 81:\n-    case 83:\n+    case 82:\n+    case 84:\n       axis = AxisSpecifier();\n       if (jj_2_3(2147483647)) {\n         type = NodeType();\n-        jj_consume_token(75);\n         jj_consume_token(76);\n+        jj_consume_token(77);\n       } else if (jj_2_4(2147483647)) {\n         jj_consume_token(PI);\n-        jj_consume_token(75);\n+        jj_consume_token(76);\n         jj_consume_token(Literal);\n                     instruction = unescape(token.image.substring(1, token.image.length() - 1));\n-        jj_consume_token(76);\n+        jj_consume_token(77);\n       } else {\n         switch (jj_nt.kind) {\n         case OR:\n         case FUNCTION_FLOOR:\n         case FUNCTION_CEILING:\n         case FUNCTION_ROUND:\n+        case FUNCTION_FORMAT_NUMBER:\n         case NCName:\n-        case 83:\n+        case 84:\n           name = WildcardName();\n           break;\n         default:\n         }\n       }\n       break;\n-    case 77:\n-      jj_consume_token(77);\n+    case 78:\n+      jj_consume_token(78);\n                     axis = Compiler.AXIS_SELF;\n                     type = Compiler.NODE_TYPE_NODE;\n       break;\n-    case 78:\n-      jj_consume_token(78);\n+    case 79:\n+      jj_consume_token(79);\n                     axis = Compiler.AXIS_PARENT;\n                     type = Compiler.NODE_TYPE_NODE;\n       break;\n     label_3:\n     while (true) {\n       switch (jj_nt.kind) {\n-      case 79:\n+      case 80:\n         ;\n         break;\n       default:\n /* [9] PredicateExpr ::=  Expr  */\n   final public Object Predicate() throws ParseException {\n     Object ex;\n-    jj_consume_token(79);\n+    jj_consume_token(80);\n     ex = Expression();\n-    jj_consume_token(80);\n+    jj_consume_token(81);\n         {if (true) return ex;}\n     throw new Error(\"Missing return statement in function\");\n   }\n   final public int AbbreviatedAxisSpecifier() throws ParseException {\n     int axis = Compiler.AXIS_CHILD;\n     switch (jj_nt.kind) {\n-    case 81:\n-      jj_consume_token(81);\n+    case 82:\n+      jj_consume_token(82);\n            axis = Compiler.AXIS_ATTRIBUTE;\n       break;\n     default:\n     case VARIABLE:\n       ex = VariableReference();\n       break;\n-    case 75:\n-      jj_consume_token(75);\n+    case 76:\n+      jj_consume_token(76);\n       ex = Expression();\n-      jj_consume_token(76);\n+      jj_consume_token(77);\n       break;\n     case Literal:\n       jj_consume_token(Literal);\n         case FUNCTION_FLOOR:\n         case FUNCTION_CEILING:\n         case FUNCTION_ROUND:\n+        case FUNCTION_FORMAT_NUMBER:\n         case NCName:\n           ex = FunctionCall();\n           break;\n   final public ArrayList ArgumentList() throws ParseException {\n     ArrayList args = null;\n     Object arg;\n-    jj_consume_token(75);\n+    jj_consume_token(76);\n     switch (jj_nt.kind) {\n     case SLASH:\n     case SLASHSLASH:\n     case FUNCTION_FLOOR:\n     case FUNCTION_CEILING:\n     case FUNCTION_ROUND:\n+    case FUNCTION_FORMAT_NUMBER:\n     case NCName:\n-    case 75:\n-    case 77:\n+    case 76:\n     case 78:\n-    case 81:\n-    case 83:\n+    case 79:\n+    case 82:\n+    case 84:\n       arg = Argument();\n                                 args = new ArrayList(); args.add(arg);\n       label_4:\n       while (true) {\n         switch (jj_nt.kind) {\n-        case 82:\n+        case 83:\n           ;\n           break;\n         default:\n           jj_la1[18] = jj_gen;\n           break label_4;\n         }\n-        jj_consume_token(82);\n+        jj_consume_token(83);\n         arg = Argument();\n                                        args.add(arg);\n       }\n       jj_la1[19] = jj_gen;\n       ;\n     }\n-    jj_consume_token(76);\n+    jj_consume_token(77);\n         {if (true) return args;}\n     throw new Error(\"Missing return statement in function\");\n   }\n       case FUNCTION_FLOOR:\n       case FUNCTION_CEILING:\n       case FUNCTION_ROUND:\n+      case FUNCTION_FORMAT_NUMBER:\n       case NCName:\n-      case 77:\n       case 78:\n-      case 81:\n-      case 83:\n+      case 79:\n+      case 82:\n+      case 84:\n         ex = LocationPath();\n         break;\n       default:\n     label_6:\n     while (true) {\n       switch (jj_nt.kind) {\n-      case 79:\n+      case 80:\n         ;\n         break;\n       default:\n       switch (jj_nt.kind) {\n       case MOD:\n       case DIV:\n-      case 83:\n+      case 84:\n         ;\n         break;\n       default:\n         break label_14;\n       }\n       switch (jj_nt.kind) {\n-      case 83:\n-        jj_consume_token(83);\n+      case 84:\n+        jj_consume_token(84);\n         r = UnaryExpr();\n                                     ex = compiler.multiply(ex, r);\n         break;\n     case FUNCTION_FLOOR:\n     case FUNCTION_CEILING:\n     case FUNCTION_ROUND:\n+    case FUNCTION_FORMAT_NUMBER:\n     case NCName:\n-    case 75:\n-    case 77:\n+    case 76:\n     case 78:\n-    case 81:\n-    case 83:\n+    case 79:\n+    case 82:\n+    case 84:\n       ex = UnionExpr();\n       break;\n     case MINUS:\n     Object qn;\n     String nc1, nc2 = null;\n     switch (jj_nt.kind) {\n-    case 83:\n-      jj_consume_token(83);\n+    case 84:\n+      jj_consume_token(84);\n       break;\n     case OR:\n     case AND:\n     case FUNCTION_FLOOR:\n     case FUNCTION_CEILING:\n     case FUNCTION_ROUND:\n+    case FUNCTION_FORMAT_NUMBER:\n     case NCName:\n       NCName();\n       break;\n     }\n                            nc1 = token.image;\n     switch (jj_nt.kind) {\n-    case 74:\n-      jj_consume_token(74);\n+    case 75:\n+      jj_consume_token(75);\n       switch (jj_nt.kind) {\n-      case 83:\n-        jj_consume_token(83);\n+      case 84:\n+        jj_consume_token(84);\n         break;\n       case OR:\n       case AND:\n       case FUNCTION_FLOOR:\n       case FUNCTION_CEILING:\n       case FUNCTION_ROUND:\n+      case FUNCTION_FORMAT_NUMBER:\n       case NCName:\n         NCName();\n         break;\n     return retval;\n   }\n \n-  final private boolean jj_3R_65() {\n-    if (jj_scan_token(FUNCTION_LOCAL_NAME)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n   final private boolean jj_3R_64() {\n-    if (jj_scan_token(FUNCTION_ID)) return true;\n+    if (jj_scan_token(FUNCTION_COUNT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_104() {\n+    if (jj_3R_118()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_63() {\n-    if (jj_scan_token(FUNCTION_COUNT)) return true;\n+    if (jj_scan_token(FUNCTION_POSITION)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_62() {\n-    if (jj_scan_token(FUNCTION_POSITION)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_102() {\n-    if (jj_3R_116()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_61() {\n     if (jj_scan_token(FUNCTION_LAST)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   final private boolean jj_3R_18() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_61()) {\n-    jj_scanpos = xsp;\n     if (jj_3R_62()) {\n     jj_scanpos = xsp;\n     if (jj_3R_63()) {\n     jj_scanpos = xsp;\n     if (jj_3R_88()) {\n     jj_scanpos = xsp;\n-    if (jj_3R_89()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_89()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_90()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_91()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_111() {\n+    if (jj_scan_token(DIV)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_110() {\n+    if (jj_scan_token(MOD)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_109() {\n-    if (jj_scan_token(DIV)) return true;\n+    if (jj_scan_token(AND)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_108() {\n-    if (jj_scan_token(MOD)) return true;\n+    if (jj_scan_token(OR)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_107() {\n-    if (jj_scan_token(AND)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_106() {\n-    if (jj_scan_token(OR)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_105() {\n     if (jj_scan_token(NCName)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n-  final private boolean jj_3R_96() {\n+  final private boolean jj_3R_173() {\n+    if (jj_scan_token(MINUS)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_170()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_98() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_105()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_106()) {\n-    jj_scanpos = xsp;\n     if (jj_3R_107()) {\n     jj_scanpos = xsp;\n     if (jj_3R_108()) {\n     jj_scanpos = xsp;\n-    if (jj_3R_109()) return true;\n+    if (jj_3R_109()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_110()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_111()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n   }\n \n   final private boolean jj_3R_171() {\n-    if (jj_scan_token(MINUS)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_168()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_169() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_174()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_175()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_176()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_172() {\n+    if (jj_3R_177()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_153() {\n+    if (jj_scan_token(82)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_130() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_153()) jj_scanpos = xsp;\n+    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_54() {\n+    if (jj_scan_token(FUNCTION_FORMAT_NUMBER)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_170() {\n     Token xsp;\n     xsp = jj_scanpos;\n     if (jj_3R_172()) {\n     jj_scanpos = xsp;\n-    if (jj_3R_173()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_174()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_170() {\n-    if (jj_3R_175()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_151() {\n-    if (jj_scan_token(81)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_173()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n     return false;\n   }\n \n-  final private boolean jj_3R_128() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_151()) jj_scanpos = xsp;\n-    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n   final private boolean jj_3R_52() {\n     if (jj_scan_token(FUNCTION_ROUND)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n-  final private boolean jj_3R_168() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_170()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_171()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n   final private boolean jj_3R_51() {\n     if (jj_scan_token(FUNCTION_CEILING)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n+  final private boolean jj_3R_176() {\n+    if (jj_scan_token(MOD)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_170()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n   final private boolean jj_3R_47() {\n     if (jj_scan_token(FUNCTION_LANG)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n+  final private boolean jj_3R_175() {\n+    if (jj_scan_token(DIV)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_170()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n   final private boolean jj_3R_46() {\n     if (jj_scan_token(FUNCTION_NULL)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n   }\n \n   final private boolean jj_3R_174() {\n-    if (jj_scan_token(MOD)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_168()) return true;\n+    if (jj_scan_token(84)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_170()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n     return false;\n   }\n \n-  final private boolean jj_3R_173() {\n-    if (jj_scan_token(DIV)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_168()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n   final private boolean jj_3R_44() {\n     if (jj_scan_token(FUNCTION_TRUE)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n-  final private boolean jj_3R_172() {\n-    if (jj_scan_token(83)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_168()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n   final private boolean jj_3R_43() {\n     if (jj_scan_token(FUNCTION_NOT)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n+  final private boolean jj_3R_116() {\n+    if (jj_scan_token(80)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_104()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(81)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n   final private boolean jj_3R_40() {\n     if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n-  final private boolean jj_3R_114() {\n-    if (jj_scan_token(79)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_102()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(80)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n   final private boolean jj_3R_38() {\n     if (jj_scan_token(FUNCTION_SUBSTRING)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n+  final private boolean jj_3R_168() {\n+    if (jj_3R_170()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_171()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    return false;\n+  }\n+\n   final private boolean jj_3R_35() {\n     if (jj_scan_token(FUNCTION_CONTAINS)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n-  final private boolean jj_3R_166() {\n+  final private boolean jj_3R_33() {\n+    if (jj_scan_token(FUNCTION_CONCAT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_32() {\n+    if (jj_scan_token(FUNCTION_STRING)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_31() {\n+    if (jj_scan_token(FUNCTION_NAME)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_30() {\n+    if (jj_scan_token(FUNCTION_NAMESPACE_URI)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_29() {\n+    if (jj_scan_token(FUNCTION_LOCAL_NAME)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_169() {\n+    if (jj_scan_token(MINUS)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_168()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_28() {\n+    if (jj_scan_token(FUNCTION_ID)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_27() {\n+    if (jj_scan_token(FUNCTION_COUNT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_152() {\n+    if (jj_scan_token(AXIS_DESCENDANT_OR_SELF)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_26() {\n+    if (jj_scan_token(FUNCTION_POSITION)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_25() {\n+    if (jj_scan_token(FUNCTION_LAST)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_151() {\n+    if (jj_scan_token(AXIS_PRECEDING_SIBLING)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_24() {\n+    if (jj_scan_token(PI)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_150() {\n+    if (jj_scan_token(AXIS_FOLLOWING_SIBLING)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_23() {\n+    if (jj_scan_token(COMMENT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_149() {\n+    if (jj_scan_token(AXIS_ANCESTOR_OR_SELF)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_163() {\n+    if (jj_scan_token(PLUS)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_162()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_22() {\n+    if (jj_scan_token(TEXT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_148() {\n+    if (jj_scan_token(AXIS_DESCENDANT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_21() {\n+    if (jj_scan_token(NODE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_147() {\n+    if (jj_scan_token(AXIS_FOLLOWING)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_20() {\n+    if (jj_3R_98()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_146() {\n+    if (jj_scan_token(AXIS_PRECEDING)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_145() {\n+    if (jj_scan_token(AXIS_NAMESPACE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_162() {\n     if (jj_3R_168()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     Token xsp;\n     return false;\n   }\n \n-  final private boolean jj_3R_33() {\n-    if (jj_scan_token(FUNCTION_CONCAT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_32() {\n-    if (jj_scan_token(FUNCTION_STRING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_31() {\n-    if (jj_scan_token(FUNCTION_NAME)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_30() {\n-    if (jj_scan_token(FUNCTION_NAMESPACE_URI)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_29() {\n-    if (jj_scan_token(FUNCTION_LOCAL_NAME)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_28() {\n-    if (jj_scan_token(FUNCTION_ID)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_27() {\n-    if (jj_scan_token(FUNCTION_COUNT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_167() {\n-    if (jj_scan_token(MINUS)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_166()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_26() {\n-    if (jj_scan_token(FUNCTION_POSITION)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_25() {\n-    if (jj_scan_token(FUNCTION_LAST)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_24() {\n-    if (jj_scan_token(PI)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_150() {\n-    if (jj_scan_token(AXIS_DESCENDANT_OR_SELF)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_23() {\n-    if (jj_scan_token(COMMENT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_149() {\n-    if (jj_scan_token(AXIS_PRECEDING_SIBLING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_22() {\n-    if (jj_scan_token(TEXT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_148() {\n-    if (jj_scan_token(AXIS_FOLLOWING_SIBLING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_21() {\n-    if (jj_scan_token(NODE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_147() {\n-    if (jj_scan_token(AXIS_ANCESTOR_OR_SELF)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_161() {\n-    if (jj_scan_token(PLUS)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_160()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_20() {\n-    if (jj_3R_96()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_146() {\n-    if (jj_scan_token(AXIS_DESCENDANT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_145() {\n-    if (jj_scan_token(AXIS_FOLLOWING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n   final private boolean jj_3R_144() {\n-    if (jj_scan_token(AXIS_PRECEDING)) return true;\n+    if (jj_scan_token(AXIS_ATTRIBUTE)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_143() {\n-    if (jj_scan_token(AXIS_NAMESPACE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_160() {\n-    if (jj_3R_166()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_167()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n+    if (jj_scan_token(AXIS_ANCESTOR)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_142() {\n-    if (jj_scan_token(AXIS_ATTRIBUTE)) return true;\n+    if (jj_scan_token(AXIS_PARENT)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n     jj_scanpos = xsp;\n     if (jj_3R_52()) {\n     jj_scanpos = xsp;\n-    if (jj_3R_53()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_53()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_54()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n   }\n \n   final private boolean jj_3R_141() {\n-    if (jj_scan_token(AXIS_ANCESTOR)) return true;\n+    if (jj_scan_token(AXIS_CHILD)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_140() {\n-    if (jj_scan_token(AXIS_PARENT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_139() {\n-    if (jj_scan_token(AXIS_CHILD)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_138() {\n     if (jj_scan_token(AXIS_SELF)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n-  final private boolean jj_3R_127() {\n+  final private boolean jj_3R_129() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_138()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_139()) {\n-    jj_scanpos = xsp;\n     if (jj_3R_140()) {\n     jj_scanpos = xsp;\n     if (jj_3R_141()) {\n     jj_scanpos = xsp;\n     if (jj_3R_149()) {\n     jj_scanpos = xsp;\n-    if (jj_3R_150()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_150()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_151()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_152()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_159() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_164()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_165()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_166()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_167()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_158() {\n+    if (jj_3R_162()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_163()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_122() {\n+    if (jj_3R_130()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_121() {\n+    if (jj_3R_129()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_167() {\n+    if (jj_scan_token(GTE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_158()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_112() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_121()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_122()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_166() {\n+    if (jj_scan_token(LTE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_158()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_165() {\n+    if (jj_scan_token(GT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_158()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_157() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_162()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_163()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_164()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_165()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_160()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_161()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_164() {\n+    if (jj_scan_token(LT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_158()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_156() {\n-    if (jj_3R_160()) return true;\n+    if (jj_3R_158()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     Token xsp;\n     while (true) {\n       xsp = jj_scanpos;\n-      if (jj_3R_161()) { jj_scanpos = xsp; break; }\n+      if (jj_3R_159()) { jj_scanpos = xsp; break; }\n       if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     }\n     return false;\n   }\n \n-  final private boolean jj_3R_120() {\n-    if (jj_3R_128()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_119() {\n-    if (jj_3R_127()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_165() {\n-    if (jj_scan_token(GTE)) return true;\n+  final private boolean jj_3R_161() {\n+    if (jj_scan_token(NEQ)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     if (jj_3R_156()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n-  final private boolean jj_3R_110() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_119()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_120()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_164() {\n-    if (jj_scan_token(LTE)) return true;\n+  final private boolean jj_3R_160() {\n+    if (jj_scan_token(EQ)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     if (jj_3R_156()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n-  final private boolean jj_3R_163() {\n-    if (jj_scan_token(GT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_156()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_155() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_158()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_159()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_162() {\n-    if (jj_scan_token(LT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_156()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_154() {\n+  final private boolean jj_3R_102() {\n+    if (jj_3R_116()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3_4() {\n+    if (jj_scan_token(PI)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3_3() {\n+    if (jj_3R_17()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(76)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(77)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_101() {\n+    if (jj_scan_token(79)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_100() {\n+    if (jj_scan_token(78)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_115() {\n+    if (jj_3R_123()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_134() {\n     if (jj_3R_156()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     Token xsp;\n     return false;\n   }\n \n-  final private boolean jj_3R_159() {\n-    if (jj_scan_token(NEQ)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_154()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_158() {\n-    if (jj_scan_token(EQ)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_154()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_100() {\n-    if (jj_3R_114()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3_4() {\n+  final private boolean jj_3R_114() {\n     if (jj_scan_token(PI)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3_3() {\n+    if (jj_scan_token(76)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(Literal)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(77)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_113() {\n     if (jj_3R_17()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(75)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     if (jj_scan_token(76)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(77)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_99() {\n-    if (jj_scan_token(78)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_98() {\n-    if (jj_scan_token(77)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_113() {\n-    if (jj_3R_121()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_132() {\n-    if (jj_3R_154()) return true;\n+    if (jj_3R_112()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_113()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_114()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_115()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_135() {\n+    if (jj_scan_token(AND)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_134()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_57() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_99()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_100()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_101()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     while (true) {\n       xsp = jj_scanpos;\n-      if (jj_3R_155()) { jj_scanpos = xsp; break; }\n+      if (jj_3R_102()) { jj_scanpos = xsp; break; }\n       if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_112() {\n-    if (jj_scan_token(PI)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(75)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(Literal)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(76)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_111() {\n-    if (jj_3R_17()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(75)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(76)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_97() {\n-    if (jj_3R_110()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_111()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_112()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_113()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_133() {\n-    if (jj_scan_token(AND)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_132()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_56() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_97()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_98()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_99()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_100()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_123() {\n-    if (jj_3R_132()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_133()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_191() {\n-    if (jj_3R_16()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_55() {\n-    if (jj_scan_token(SLASHSLASH)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_54() {\n-    if (jj_scan_token(SLASH)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_124() {\n-    if (jj_scan_token(OR)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_123()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_16() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_54()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_55()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_56()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_188() {\n-    if (jj_3R_16()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_116() {\n-    if (jj_3R_123()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_124()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_186() {\n-    if (jj_3R_56()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_188()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3_2() {\n-    if (jj_3R_16()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_183() {\n-    if (jj_3R_16()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_190() {\n-    if (jj_scan_token(SLASH)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_189() {\n-    if (jj_3R_16()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_191()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_182() {\n-    if (jj_3R_114()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_187() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_189()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_190()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_180() {\n-    if (jj_3R_19()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_182()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_183()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3_6() {\n-    if (jj_3R_19()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_185() {\n-    if (jj_3R_187()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_184() {\n-    if (jj_3R_186()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_181() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_184()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_185()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_179() {\n-    if (jj_3R_181()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_178() {\n-    if (jj_3R_180()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_176() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_178()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_179()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_177() {\n-    if (jj_scan_token(UNION)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_176()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_175() {\n-    if (jj_3R_176()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_177()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_134() {\n-    if (jj_3R_102()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_135() {\n-    if (jj_scan_token(82)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_134()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n     return false;\n   }\n \n-  final private boolean jj_3R_117() {\n-    if (jj_scan_token(75)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+  final private boolean jj_3R_193() {\n+    if (jj_3R_16()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_56() {\n+    if (jj_scan_token(SLASHSLASH)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_55() {\n+    if (jj_scan_token(SLASH)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_126() {\n+    if (jj_scan_token(OR)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_125()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_16() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_125()) jj_scanpos = xsp;\n+    if (jj_3R_55()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_56()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_57()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_190() {\n+    if (jj_3R_16()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_118() {\n+    if (jj_3R_125()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_126()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_188() {\n+    if (jj_3R_57()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_190()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3_2() {\n+    if (jj_3R_16()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_185() {\n+    if (jj_3R_16()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_192() {\n+    if (jj_scan_token(SLASH)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_191() {\n+    if (jj_3R_16()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_193()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_184() {\n+    if (jj_3R_116()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_189() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_191()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_192()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_182() {\n+    if (jj_3R_19()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_184()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_185()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3_6() {\n+    if (jj_3R_19()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_187() {\n+    if (jj_3R_189()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_186() {\n+    if (jj_3R_188()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_183() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_186()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_187()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_181() {\n+    if (jj_3R_183()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_180() {\n+    if (jj_3R_182()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_178() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_180()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_181()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_179() {\n+    if (jj_scan_token(UNION)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_178()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_177() {\n+    if (jj_3R_178()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_179()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_136() {\n+    if (jj_3R_104()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_137() {\n+    if (jj_scan_token(83)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_136()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_127() {\n+    if (jj_3R_136()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_137()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_119() {\n+    if (jj_scan_token(76)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_127()) jj_scanpos = xsp;\n     else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(76)) return true;\n+    if (jj_scan_token(77)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_61() {\n+    if (jj_scan_token(PI)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_60() {\n-    if (jj_scan_token(PI)) return true;\n+    if (jj_scan_token(COMMENT)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_59() {\n-    if (jj_scan_token(COMMENT)) return true;\n+    if (jj_scan_token(NODE)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_58() {\n-    if (jj_scan_token(NODE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_57() {\n     if (jj_scan_token(TEXT)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   final private boolean jj_3_1() {\n     if (jj_3R_15()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(74)) return true;\n+    if (jj_scan_token(75)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n   final private boolean jj_3R_17() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_57()) {\n-    jj_scanpos = xsp;\n     if (jj_3R_58()) {\n     jj_scanpos = xsp;\n     if (jj_3R_59()) {\n     jj_scanpos = xsp;\n-    if (jj_3R_60()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_153() {\n+    if (jj_3R_60()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_61()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_155() {\n     if (jj_3R_15()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n-  final private boolean jj_3R_137() {\n-    if (jj_3R_96()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_136() {\n+  final private boolean jj_3R_139() {\n+    if (jj_3R_98()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_138() {\n     if (jj_3R_15()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(74)) return true;\n+    if (jj_scan_token(75)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     if (jj_3R_15()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n-  final private boolean jj_3R_152() {\n-    if (jj_scan_token(83)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_130() {\n+  final private boolean jj_3R_154() {\n+    if (jj_scan_token(84)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_132() {\n     if (jj_3R_15()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n-  final private boolean jj_3R_103() {\n+  final private boolean jj_3R_105() {\n     if (jj_3R_18()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_117()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_122() {\n-    if (jj_scan_token(74)) return true;\n+    if (jj_3R_119()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_124() {\n+    if (jj_scan_token(75)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     if (jj_3R_15()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n-  final private boolean jj_3R_131() {\n-    if (jj_scan_token(74)) return true;\n+  final private boolean jj_3R_133() {\n+    if (jj_scan_token(75)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_152()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_153()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_126() {\n+    if (jj_3R_154()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_155()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_128() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_136()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_137()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_129() {\n-    if (jj_scan_token(83)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_121() {\n+    if (jj_3R_138()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_139()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_131() {\n+    if (jj_scan_token(84)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_123() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_129()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_130()) return true;\n+    if (jj_3R_131()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_132()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     xsp = jj_scanpos;\n-    if (jj_3R_131()) jj_scanpos = xsp;\n+    if (jj_3R_133()) jj_scanpos = xsp;\n     else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n-  final private boolean jj_3R_104() {\n-    if (jj_3R_118()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_117()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_115() {\n+  final private boolean jj_3R_106() {\n+    if (jj_3R_120()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_119()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_117() {\n     if (jj_3R_15()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_122()) jj_scanpos = xsp;\n+    if (jj_3R_124()) jj_scanpos = xsp;\n     else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n   final private boolean jj_3_5() {\n     if (jj_3R_18()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(75)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_101() {\n+    if (jj_scan_token(76)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_103() {\n     if (jj_scan_token(VARIABLE)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_115()) return true;\n+    if (jj_3R_117()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_91() {\n+    if (jj_scan_token(FUNCTION_FORMAT_NUMBER)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_90() {\n+    if (jj_scan_token(FUNCTION_KEY)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_89() {\n-    if (jj_scan_token(FUNCTION_KEY)) return true;\n+    if (jj_scan_token(FUNCTION_ROUND)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_88() {\n-    if (jj_scan_token(FUNCTION_ROUND)) return true;\n+    if (jj_scan_token(FUNCTION_CEILING)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_97() {\n+    if (jj_3R_106()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_87() {\n-    if (jj_scan_token(FUNCTION_CEILING)) return true;\n+    if (jj_scan_token(FUNCTION_FLOOR)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_96() {\n+    if (jj_3R_105()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_86() {\n-    if (jj_scan_token(FUNCTION_FLOOR)) return true;\n+    if (jj_scan_token(FUNCTION_SUM)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_95() {\n+    if (jj_scan_token(Number)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_85() {\n+    if (jj_scan_token(FUNCTION_NUMBER)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_94() {\n+    if (jj_scan_token(Literal)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_84() {\n+    if (jj_scan_token(FUNCTION_LANG)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_93() {\n+    if (jj_scan_token(76)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     if (jj_3R_104()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_85() {\n-    if (jj_scan_token(FUNCTION_SUM)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_94() {\n+    if (jj_scan_token(77)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_83() {\n+    if (jj_scan_token(FUNCTION_NULL)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_92() {\n     if (jj_3R_103()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n-  final private boolean jj_3R_84() {\n-    if (jj_scan_token(FUNCTION_NUMBER)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_93() {\n-    if (jj_scan_token(Number)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_83() {\n-    if (jj_scan_token(FUNCTION_LANG)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_92() {\n-    if (jj_scan_token(Literal)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n   final private boolean jj_3R_82() {\n-    if (jj_scan_token(FUNCTION_NULL)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_91() {\n-    if (jj_scan_token(75)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_102()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(76)) return true;\n+    if (jj_scan_token(FUNCTION_FALSE)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_81() {\n-    if (jj_scan_token(FUNCTION_FALSE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_90() {\n-    if (jj_3R_101()) return true;\n+    if (jj_scan_token(FUNCTION_TRUE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_120() {\n+    if (jj_3R_128()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_80() {\n-    if (jj_scan_token(FUNCTION_TRUE)) return true;\n+    if (jj_scan_token(FUNCTION_NOT)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_79() {\n-    if (jj_scan_token(FUNCTION_NOT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_118() {\n-    if (jj_3R_126()) return true;\n+    if (jj_scan_token(FUNCTION_BOOLEAN)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_78() {\n-    if (jj_scan_token(FUNCTION_BOOLEAN)) return true;\n+    if (jj_scan_token(FUNCTION_TRANSLATE)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_77() {\n-    if (jj_scan_token(FUNCTION_TRANSLATE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_76() {\n     if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_75() {\n-    if (jj_scan_token(FUNCTION_STRING_LENGTH)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n   final private boolean jj_3R_19() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_90()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_91()) {\n-    jj_scanpos = xsp;\n     if (jj_3R_92()) {\n     jj_scanpos = xsp;\n     if (jj_3R_93()) {\n     jj_scanpos = xsp;\n     if (jj_3R_94()) {\n     jj_scanpos = xsp;\n-    if (jj_3R_95()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_95()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_96()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_97()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_76() {\n+    if (jj_scan_token(FUNCTION_STRING_LENGTH)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_75() {\n+    if (jj_scan_token(FUNCTION_SUBSTRING)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_74() {\n-    if (jj_scan_token(FUNCTION_SUBSTRING)) return true;\n+    if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_73() {\n-    if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) return true;\n+    if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_72() {\n-    if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) return true;\n+    if (jj_scan_token(FUNCTION_CONTAINS)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_71() {\n-    if (jj_scan_token(FUNCTION_CONTAINS)) return true;\n+    if (jj_scan_token(FUNCTION_STARTS_WITH)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_70() {\n-    if (jj_scan_token(FUNCTION_STARTS_WITH)) return true;\n+    if (jj_scan_token(FUNCTION_CONCAT)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_69() {\n-    if (jj_scan_token(FUNCTION_CONCAT)) return true;\n+    if (jj_scan_token(FUNCTION_STRING)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_68() {\n-    if (jj_scan_token(FUNCTION_STRING)) return true;\n+    if (jj_scan_token(FUNCTION_NAME)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_67() {\n-    if (jj_scan_token(FUNCTION_NAME)) return true;\n+    if (jj_scan_token(FUNCTION_NAMESPACE_URI)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_66() {\n-    if (jj_scan_token(FUNCTION_NAMESPACE_URI)) return true;\n+    if (jj_scan_token(FUNCTION_LOCAL_NAME)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_65() {\n+    if (jj_scan_token(FUNCTION_ID)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   public XPathParserTokenManager token_source;\n-  ASCII_UCodeESC_CharStream jj_input_stream;\n+  JavaCharStream jj_input_stream;\n   public Token token, jj_nt;\n   private Token jj_scanpos, jj_lastpos;\n   private int jj_la;\n   final private int[] jj_la1 = new int[39];\n   final private int[] jj_la1_0 = {0x7f800000,0x7800000,0x0,0x0,0x7800000,0xff80000c,0xc,0x4,0xc,0xc,0x7f800000,0xff800000,0x0,0x80000000,0x80000000,0x0,0x16000,0x7f800000,0x0,0xff81604c,0x10,0xff80000c,0x0,0xc,0x800000,0x1000000,0x180,0x180,0x1e00,0x1e00,0x20,0x40,0x6000000,0x6000000,0xff81604c,0x7f800000,0x7f800000,0x0,0x78000000,};\n   final private int[] jj_la1_1 = {0xfffff000,0x0,0xfffff000,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0xfffff000,0xffffffff,0x0,0xfff,0xfff,0x0,0x0,0xfffff000,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xfffff000,0xfffff000,0x0,0x0,};\n-  final private int[] jj_la1_2 = {0x3ff,0x200,0x1ff,0x400,0x200,0xa63ff,0x0,0x0,0x0,0x0,0x803ff,0xa63ff,0x8000,0x0,0x0,0x20000,0x800,0x3ff,0x40000,0xa6bff,0x0,0xa63ff,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,0xa6bff,0x803ff,0x803ff,0x400,0x0,};\n+  final private int[] jj_la1_2 = {0x7ff,0x400,0x3ff,0x800,0x400,0x14c7ff,0x0,0x0,0x0,0x0,0x1007ff,0x14c7ff,0x10000,0x0,0x0,0x40000,0x1000,0x7ff,0x80000,0x14d7ff,0x0,0x14c7ff,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x14d7ff,0x1007ff,0x1007ff,0x800,0x0,};\n   final private JJCalls[] jj_2_rtns = new JJCalls[6];\n   private boolean jj_rescan = false;\n   private int jj_gc = 0;\n \n   public XPathParser(java.io.InputStream stream) {\n-    jj_input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);\n+    jj_input_stream = new JavaCharStream(stream, 1, 1);\n     token_source = new XPathParserTokenManager(jj_input_stream);\n     token = new Token();\n     token.next = jj_nt = token_source.getNextToken();\n   }\n \n   public XPathParser(java.io.Reader stream) {\n-    jj_input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);\n+    jj_input_stream = new JavaCharStream(stream, 1, 1);\n     token_source = new XPathParserTokenManager(jj_input_stream);\n     token = new Token();\n     token.next = jj_nt = token_source.getNextToken();\n \n   final public ParseException generateParseException() {\n     jj_expentries.removeAllElements();\n-    boolean[] la1tokens = new boolean[84];\n-    for (int i = 0; i < 84; i++) {\n+    boolean[] la1tokens = new boolean[85];\n+    for (int i = 0; i < 85; i++) {\n       la1tokens[i] = false;\n     }\n     if (jj_kind >= 0) {\n         }\n       }\n     }\n-    for (int i = 0; i < 84; i++) {\n+    for (int i = 0; i < 85; i++) {\n       if (la1tokens[i]) {\n         jj_expentry = new int[1];\n         jj_expentry[0] = i;\n--- a/src/java/org/apache/commons/jxpath/ri/parser/XPathParserConstants.java\n+++ b/src/java/org/apache/commons/jxpath/ri/parser/XPathParserConstants.java\n   int FUNCTION_FLOOR = 70;\n   int FUNCTION_CEILING = 71;\n   int FUNCTION_ROUND = 72;\n-  int NCName = 73;\n+  int FUNCTION_FORMAT_NUMBER = 73;\n+  int NCName = 74;\n \n   int DEFAULT = 0;\n \n     \"\\\"floor\\\"\",\n     \"\\\"ceiling\\\"\",\n     \"\\\"round\\\"\",\n+    \"\\\"format-number\\\"\",\n     \"<NCName>\",\n     \"\\\":\\\"\",\n     \"\\\"(\\\"\",\n--- a/src/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java\n+++ b/src/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java\n \n public class XPathParserTokenManager implements XPathParserConstants\n {\n+  public  java.io.PrintStream debugStream = System.out;\n+  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }\n private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)\n {\n    switch (pos)\n    {\n       case 0:\n-         if ((active1 & 0x6000L) != 0L)\n+         if ((active0 & 0xffffffffff800000L) != 0L || (active1 & 0x3ffL) != 0L)\n+         {\n+            jjmatchedKind = 74;\n+            return 13;\n+         }\n+         if ((active1 & 0xc000L) != 0L)\n             return 11;\n-         if ((active0 & 0xffffffffff800000L) != 0L || (active1 & 0x1ffL) != 0L)\n-         {\n-            jjmatchedKind = 73;\n-            return 13;\n-         }\n          return -1;\n       case 1:\n          if ((active0 & 0x800000800000L) != 0L)\n             return 13;\n-         if ((active0 & 0xffff7fffff000000L) != 0L || (active1 & 0x1ffL) != 0L)\n-         {\n-            jjmatchedKind = 73;\n+         if ((active0 & 0xffff7fffff000000L) != 0L || (active1 & 0x3ffL) != 0L)\n+         {\n+            jjmatchedKind = 74;\n             jjmatchedPos = 1;\n             return 13;\n          }\n          return -1;\n       case 2:\n-         if ((active0 & 0x7ffe7ffff8000000L) != 0L || (active1 & 0x1dfL) != 0L)\n-         {\n-            jjmatchedKind = 73;\n+         if ((active0 & 0x7ffe7ffff8000000L) != 0L || (active1 & 0x3dfL) != 0L)\n+         {\n+            jjmatchedKind = 74;\n             jjmatchedPos = 2;\n             return 13;\n          }\n             return 13;\n          return -1;\n       case 3:\n-         if ((active0 & 0x7ff26fefe0000000L) != 0L || (active1 & 0x1d2L) != 0L)\n+         if ((active0 & 0x7ff26fefe0000000L) != 0L || (active1 & 0x3d2L) != 0L)\n          {\n             if (jjmatchedPos != 3)\n             {\n-               jjmatchedKind = 73;\n+               jjmatchedKind = 74;\n                jjmatchedPos = 3;\n             }\n             return 13;\n             return 13;\n          return -1;\n       case 4:\n+         if ((active0 & 0x80000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 3)\n+            {\n+               jjmatchedKind = 74;\n+               jjmatchedPos = 3;\n+            }\n+            return -1;\n+         }\n          if ((active0 & 0x400000000000L) != 0L || (active1 & 0x142L) != 0L)\n             return 13;\n-         if ((active0 & 0x7ff62fff60000000L) != 0L || (active1 & 0x90L) != 0L)\n-         {\n-            jjmatchedKind = 73;\n+         if ((active0 & 0x7ff62fff60000000L) != 0L || (active1 & 0x290L) != 0L)\n+         {\n+            jjmatchedKind = 74;\n             jjmatchedPos = 4;\n             return 13;\n          }\n+         return -1;\n+      case 5:\n+         if ((active0 & 0x77c62ffe60000000L) != 0L || (active1 & 0x280L) != 0L)\n+         {\n+            if (jjmatchedPos != 5)\n+            {\n+               jjmatchedKind = 74;\n+               jjmatchedPos = 5;\n+            }\n+            return 13;\n+         }\n+         if ((active0 & 0x100000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 4)\n+            {\n+               jjmatchedKind = 74;\n+               jjmatchedPos = 4;\n+            }\n+            return -1;\n+         }\n          if ((active0 & 0x80000000L) != 0L)\n          {\n             if (jjmatchedPos < 3)\n             {\n-               jjmatchedKind = 73;\n+               jjmatchedKind = 74;\n                jjmatchedPos = 3;\n             }\n             return -1;\n          }\n-         return -1;\n-      case 5:\n-         if ((active0 & 0x77c62ffe60000000L) != 0L || (active1 & 0x80L) != 0L)\n-         {\n-            if (jjmatchedPos != 5)\n-            {\n-               jjmatchedKind = 73;\n+         if ((active0 & 0x830000000000000L) != 0L || (active1 & 0x10L) != 0L)\n+            return 13;\n+         return -1;\n+      case 6:\n+         if ((active0 & 0x200000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 5)\n+            {\n+               jjmatchedKind = 74;\n                jjmatchedPos = 5;\n             }\n-            return 13;\n-         }\n-         if ((active0 & 0x830000000000000L) != 0L || (active1 & 0x10L) != 0L)\n-            return 13;\n+            return -1;\n+         }\n          if ((active0 & 0x100000000L) != 0L)\n          {\n             if (jjmatchedPos < 4)\n             {\n-               jjmatchedKind = 73;\n+               jjmatchedKind = 74;\n                jjmatchedPos = 4;\n             }\n             return -1;\n          }\n-         if ((active0 & 0x80000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 3)\n-            {\n-               jjmatchedKind = 73;\n-               jjmatchedPos = 3;\n+         if ((active0 & 0x3fc62ffc40000000L) != 0L || (active1 & 0x200L) != 0L)\n+         {\n+            jjmatchedKind = 74;\n+            jjmatchedPos = 6;\n+            return 13;\n+         }\n+         if ((active0 & 0x4000000020000000L) != 0L || (active1 & 0x80L) != 0L)\n+            return 13;\n+         return -1;\n+      case 7:\n+         if ((active0 & 0x200000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 5)\n+            {\n+               jjmatchedKind = 74;\n+               jjmatchedPos = 5;\n             }\n             return -1;\n          }\n-         return -1;\n-      case 6:\n-         if ((active0 & 0x3fc62ffc40000000L) != 0L)\n-         {\n-            jjmatchedKind = 73;\n-            jjmatchedPos = 6;\n-            return 13;\n-         }\n-         if ((active0 & 0x4000000020000000L) != 0L || (active1 & 0x80L) != 0L)\n-            return 13;\n-         if ((active0 & 0x200000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 5)\n-            {\n-               jjmatchedKind = 73;\n-               jjmatchedPos = 5;\n+         if ((active0 & 0x80200000000000L) != 0L)\n+            return 13;\n+         if ((active0 & 0x3f460ffc40000000L) != 0L || (active1 & 0x200L) != 0L)\n+         {\n+            jjmatchedKind = 74;\n+            jjmatchedPos = 7;\n+            return 13;\n+         }\n+         return -1;\n+      case 8:\n+         if ((active0 & 0x18460ff840000000L) != 0L || (active1 & 0x200L) != 0L)\n+         {\n+            if (jjmatchedPos != 8)\n+            {\n+               jjmatchedKind = 74;\n+               jjmatchedPos = 8;\n+            }\n+            return 13;\n+         }\n+         if ((active0 & 0x400000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 7)\n+            {\n+               jjmatchedKind = 74;\n+               jjmatchedPos = 7;\n             }\n             return -1;\n          }\n-         if ((active0 & 0x100000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 4)\n-            {\n-               jjmatchedKind = 73;\n-               jjmatchedPos = 4;\n+         if ((active0 & 0x2700000000000000L) != 0L)\n+            return 13;\n+         return -1;\n+      case 9:\n+         if ((active0 & 0x7800000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 8)\n+            {\n+               jjmatchedKind = 74;\n+               jjmatchedPos = 8;\n             }\n             return -1;\n          }\n-         return -1;\n-      case 7:\n-         if ((active0 & 0x80200000000000L) != 0L)\n-            return 13;\n-         if ((active0 & 0x3f460ffc40000000L) != 0L)\n-         {\n-            jjmatchedKind = 73;\n-            jjmatchedPos = 7;\n-            return 13;\n-         }\n-         if ((active0 & 0x200000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 5)\n-            {\n-               jjmatchedKind = 73;\n-               jjmatchedPos = 5;\n+         if ((active0 & 0x400000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 7)\n+            {\n+               jjmatchedKind = 74;\n+               jjmatchedPos = 7;\n             }\n             return -1;\n          }\n-         return -1;\n-      case 8:\n-         if ((active0 & 0x18460ff840000000L) != 0L)\n-         {\n-            if (jjmatchedPos != 8)\n-            {\n-               jjmatchedKind = 73;\n+         if ((active0 & 0x1b440f8040000000L) != 0L || (active1 & 0x200L) != 0L)\n+         {\n+            jjmatchedKind = 74;\n+            jjmatchedPos = 9;\n+            return 13;\n+         }\n+         if ((active0 & 0x2000000000000L) != 0L)\n+            return 13;\n+         return -1;\n+      case 10:\n+         if ((active0 & 0x8000000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 9)\n+            {\n+               jjmatchedKind = 74;\n+               jjmatchedPos = 9;\n+            }\n+            return -1;\n+         }\n+         if ((active0 & 0x7800000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 8)\n+            {\n+               jjmatchedKind = 74;\n                jjmatchedPos = 8;\n             }\n-            return 13;\n-         }\n-         if ((active0 & 0x2700000000000000L) != 0L)\n-            return 13;\n-         if ((active0 & 0x400000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 7)\n-            {\n-               jjmatchedKind = 73;\n-               jjmatchedPos = 7;\n-            }\n             return -1;\n          }\n-         return -1;\n-      case 9:\n-         if ((active0 & 0x1b440f8040000000L) != 0L)\n-         {\n-            jjmatchedKind = 73;\n-            jjmatchedPos = 9;\n-            return 13;\n-         }\n-         if ((active0 & 0x2000000000000L) != 0L)\n-            return 13;\n-         if ((active0 & 0x7800000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 8)\n-            {\n-               jjmatchedKind = 73;\n-               jjmatchedPos = 8;\n+         if ((active0 & 0x1b040f0040000000L) != 0L || (active1 & 0x200L) != 0L)\n+         {\n+            jjmatchedKind = 74;\n+            jjmatchedPos = 10;\n+            return 13;\n+         }\n+         if ((active0 & 0x40000000000000L) != 0L)\n+            return 13;\n+         return -1;\n+      case 11:\n+         if ((active0 & 0x8000000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 9)\n+            {\n+               jjmatchedKind = 74;\n+               jjmatchedPos = 9;\n             }\n             return -1;\n          }\n-         if ((active0 & 0x400000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 7)\n-            {\n-               jjmatchedKind = 73;\n-               jjmatchedPos = 7;\n-            }\n-            return -1;\n-         }\n-         return -1;\n-      case 10:\n-         if ((active0 & 0x40000000000000L) != 0L)\n-            return 13;\n-         if ((active0 & 0x8000000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 9)\n-            {\n-               jjmatchedKind = 73;\n-               jjmatchedPos = 9;\n-            }\n-            return -1;\n-         }\n-         if ((active0 & 0x7800000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 8)\n-            {\n-               jjmatchedKind = 73;\n-               jjmatchedPos = 8;\n-            }\n-            return -1;\n-         }\n-         if ((active0 & 0x1b040f0040000000L) != 0L)\n-         {\n-            jjmatchedKind = 73;\n-            jjmatchedPos = 10;\n-            return 13;\n-         }\n-         return -1;\n-      case 11:\n-         if ((active0 & 0x1b040f0040000000L) != 0L)\n-         {\n-            jjmatchedKind = 73;\n+         if ((active0 & 0x1b040f0040000000L) != 0L || (active1 & 0x200L) != 0L)\n+         {\n+            jjmatchedKind = 74;\n             jjmatchedPos = 11;\n             return 13;\n-         }\n-         if ((active0 & 0x8000000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 9)\n-            {\n-               jjmatchedKind = 73;\n-               jjmatchedPos = 9;\n-            }\n-            return -1;\n          }\n          return -1;\n       case 12:\n          if ((active0 & 0x13000f0040000000L) != 0L)\n          {\n-            jjmatchedKind = 73;\n+            jjmatchedKind = 74;\n             jjmatchedPos = 12;\n             return 13;\n          }\n-         if ((active0 & 0x804000000000000L) != 0L)\n+         if ((active0 & 0x804000000000000L) != 0L || (active1 & 0x200L) != 0L)\n             return 13;\n          return -1;\n       case 13:\n          if ((active0 & 0x13000f0040000000L) != 0L)\n          {\n-            jjmatchedKind = 73;\n+            jjmatchedKind = 74;\n             jjmatchedPos = 13;\n             return 13;\n          }\n          return -1;\n       case 14:\n+         if ((active0 & 0x1200000000000000L) != 0L)\n+            return 13;\n          if ((active0 & 0x1000f0040000000L) != 0L)\n          {\n-            jjmatchedKind = 73;\n+            jjmatchedKind = 74;\n             jjmatchedPos = 14;\n             return 13;\n          }\n-         if ((active0 & 0x1200000000000000L) != 0L)\n-            return 13;\n          return -1;\n       case 15:\n          if ((active0 & 0xf0040000000L) != 0L)\n          {\n-            jjmatchedKind = 73;\n+            jjmatchedKind = 74;\n             jjmatchedPos = 15;\n             return 13;\n          }\n          {\n             if (jjmatchedPos < 15)\n             {\n-               jjmatchedKind = 73;\n+               jjmatchedKind = 74;\n                jjmatchedPos = 15;\n             }\n             return -1;\n          }\n          if ((active0 & 0xe0040000000L) != 0L)\n          {\n-            jjmatchedKind = 73;\n+            jjmatchedKind = 74;\n             jjmatchedPos = 16;\n             return 13;\n          }\n          {\n             if (jjmatchedPos < 16)\n             {\n-               jjmatchedKind = 73;\n+               jjmatchedKind = 74;\n                jjmatchedPos = 16;\n             }\n             return -1;\n          {\n             if (jjmatchedPos < 15)\n             {\n-               jjmatchedKind = 73;\n+               jjmatchedKind = 74;\n                jjmatchedPos = 15;\n             }\n             return -1;\n          }\n          if ((active0 & 0x80040000000L) != 0L)\n          {\n-            jjmatchedKind = 73;\n+            jjmatchedKind = 74;\n             jjmatchedPos = 17;\n             return 13;\n          }\n          return -1;\n       case 18:\n+         if ((active0 & 0x80000000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 17)\n+            {\n+               jjmatchedKind = 74;\n+               jjmatchedPos = 17;\n+            }\n+            return -1;\n+         }\n          if ((active0 & 0x60000000000L) != 0L)\n          {\n             if (jjmatchedPos < 16)\n             {\n-               jjmatchedKind = 73;\n+               jjmatchedKind = 74;\n                jjmatchedPos = 16;\n             }\n             return -1;\n          }\n          if ((active0 & 0x40000000L) != 0L)\n          {\n-            jjmatchedKind = 73;\n+            jjmatchedKind = 74;\n             jjmatchedPos = 18;\n             return 13;\n          }\n+         return -1;\n+      case 19:\n          if ((active0 & 0x80000000000L) != 0L)\n          {\n             if (jjmatchedPos < 17)\n             {\n-               jjmatchedKind = 73;\n+               jjmatchedKind = 74;\n                jjmatchedPos = 17;\n             }\n             return -1;\n          }\n-         return -1;\n-      case 19:\n          if ((active0 & 0x40000000L) != 0L)\n          {\n-            jjmatchedKind = 73;\n+            jjmatchedKind = 74;\n             jjmatchedPos = 19;\n             return 13;\n-         }\n-         if ((active0 & 0x80000000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 17)\n-            {\n-               jjmatchedKind = 73;\n-               jjmatchedPos = 17;\n-            }\n-            return -1;\n          }\n          return -1;\n       case 20:\n          if ((active0 & 0x40000000L) != 0L)\n          {\n-            jjmatchedKind = 73;\n+            jjmatchedKind = 74;\n             jjmatchedPos = 20;\n             return 13;\n          }\n       case 36:\n          return jjStopAtPos(0, 13);\n       case 40:\n-         return jjStopAtPos(0, 75);\n+         return jjStopAtPos(0, 76);\n       case 41:\n-         return jjStopAtPos(0, 76);\n+         return jjStopAtPos(0, 77);\n       case 42:\n-         return jjStopAtPos(0, 83);\n+         return jjStopAtPos(0, 84);\n       case 43:\n          return jjStopAtPos(0, 5);\n       case 44:\n-         return jjStopAtPos(0, 82);\n+         return jjStopAtPos(0, 83);\n       case 45:\n          return jjStopAtPos(0, 6);\n       case 46:\n-         jjmatchedKind = 77;\n-         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);\n+         jjmatchedKind = 78;\n+         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);\n       case 47:\n          jjmatchedKind = 2;\n          return jjMoveStringLiteralDfa1_0(0x8L, 0x0L);\n       case 58:\n-         return jjStopAtPos(0, 74);\n+         return jjStopAtPos(0, 75);\n       case 60:\n          jjmatchedKind = 9;\n          return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);\n          jjmatchedKind = 11;\n          return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);\n       case 64:\n+         return jjStopAtPos(0, 82);\n+      case 91:\n+         return jjStopAtPos(0, 80);\n+      case 93:\n          return jjStopAtPos(0, 81);\n-      case 91:\n-         return jjStopAtPos(0, 79);\n-      case 93:\n-         return jjStopAtPos(0, 80);\n       case 97:\n          return jjMoveStringLiteralDfa1_0(0x10c01000000L, 0x0L);\n       case 98:\n       case 100:\n          return jjMoveStringLiteralDfa1_0(0x88004000000L, 0x0L);\n       case 102:\n-         return jjMoveStringLiteralDfa1_0(0x24000000000L, 0x42L);\n+         return jjMoveStringLiteralDfa1_0(0x24000000000L, 0x242L);\n       case 105:\n          return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);\n       case 107:\n    switch(curChar)\n    {\n       case 46:\n-         if ((active1 & 0x4000L) != 0L)\n-            return jjStopAtPos(1, 78);\n+         if ((active1 & 0x8000L) != 0L)\n+            return jjStopAtPos(1, 79);\n          break;\n       case 47:\n          if ((active0 & 0x8L) != 0L)\n       case 110:\n          return jjMoveStringLiteralDfa2_0(active0, 0x10401000000L, active1, 0L);\n       case 111:\n-         return jjMoveStringLiteralDfa2_0(active0, 0xd0a262402a000000L, active1, 0x100L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0xd0a262402a000000L, active1, 0x300L);\n       case 114:\n          if ((active0 & 0x800000L) != 0L)\n             return jjStartNfaWithStates_0(1, 23, 13);\n       case 111:\n          return jjMoveStringLiteralDfa3_0(active0, 0x4000000040000000L, active1, 0x40L);\n       case 114:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x1810000200000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x1810000200000000L, active1, 0x200L);\n       case 115:\n          return jjMoveStringLiteralDfa3_0(active0, 0x388000000000L, active1, 0L);\n       case 116:\n             return jjStartNfaWithStates_0(3, 66, 13);\n          return jjMoveStringLiteralDfa4_0(active0, 0x4000024100000000L, active1, 0x80L);\n       case 109:\n-         return jjMoveStringLiteralDfa4_0(active0, 0x1000000020000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0x1000000020000000L, active1, 0x200L);\n       case 110:\n          return jjMoveStringLiteralDfa4_0(active0, 0x2000400000000000L, active1, 0x100L);\n       case 111:\n       case 58:\n          return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0L);\n       case 97:\n-         return jjMoveStringLiteralDfa5_0(active0, 0x10a0000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa5_0(active0, 0x10a0000000000000L, active1, 0x200L);\n       case 100:\n          if ((active1 & 0x100L) != 0L)\n             return jjStartNfaWithStates_0(4, 72, 13);\n       case 116:\n          if ((active0 & 0x20000000000000L) != 0L)\n             return jjStartNfaWithStates_0(5, 53, 13);\n-         return jjMoveStringLiteralDfa6_0(active0, 0x10600000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa6_0(active0, 0x10600000000L, active1, 0x200L);\n       case 119:\n          return jjMoveStringLiteralDfa6_0(active0, 0x24000000000L, active1, 0L);\n       default :\n    switch(curChar)\n    {\n       case 45:\n-         return jjMoveStringLiteralDfa7_0(active0, 0x840000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa7_0(active0, 0x840000000000000L, active1, 0x200L);\n       case 58:\n          if ((active0 & 0x100000000L) != 0L)\n             return jjStopAtPos(6, 32);\n       return jjStartNfa_0(5, old0, old1); \n    try { curChar = input_stream.readChar(); }\n    catch(java.io.IOException e) {\n-      jjStopStringLiteralDfa_0(6, active0, 0L);\n+      jjStopStringLiteralDfa_0(6, active0, active1);\n       return 7;\n    }\n    switch(curChar)\n             return jjStopAtPos(7, 33);\n          break;\n       case 97:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x2088000000000L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x2088000000000L, active1, 0L);\n       case 99:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x4001000000000L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x4001000000000L, active1, 0L);\n       case 105:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0L);\n       case 108:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L);\n       case 110:\n          if ((active0 & 0x200000000000L) != 0L)\n             return jjStartNfaWithStates_0(7, 45, 13);\n-         return jjMoveStringLiteralDfa8_0(active0, 0x700066000000000L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x700066000000000L, active1, 0x200L);\n       case 114:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x10400000000L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x10400000000L, active1, 0L);\n       case 115:\n          if ((active0 & 0x80000000000000L) != 0L)\n             return jjStartNfaWithStates_0(7, 55, 13);\n          break;\n       case 116:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x2000000800000000L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x2000000800000000L, active1, 0L);\n       case 119:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L);\n       case 122:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L);\n-      default :\n-         break;\n-   }\n-   return jjStartNfa_0(6, active0, 0L);\n-}\n-private final int jjMoveStringLiteralDfa8_0(long old0, long active0)\n-{\n-   if (((active0 &= old0)) == 0L)\n-      return jjStartNfa_0(6, old0, 0L);\n-   try { curChar = input_stream.readChar(); }\n-   catch(java.io.IOException e) {\n-      jjStopStringLiteralDfa_0(7, active0, 0L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L);\n+      default :\n+         break;\n+   }\n+   return jjStartNfa_0(6, active0, active1);\n+}\n+private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)\n+{\n+   if (((active0 &= old0) | (active1 &= old1)) == 0L)\n+      return jjStartNfa_0(6, old0, old1); \n+   try { curChar = input_stream.readChar(); }\n+   catch(java.io.IOException e) {\n+      jjStopStringLiteralDfa_0(7, active0, active1);\n       return 8;\n    }\n    switch(curChar)\n    {\n       case 45:\n-         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L);\n+         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L, active1, 0L);\n       case 58:\n-         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);\n+         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L, active1, 0L);\n       case 101:\n          if ((active0 & 0x2000000000000000L) != 0L)\n             return jjStartNfaWithStates_0(8, 61, 13);\n-         return jjMoveStringLiteralDfa9_0(active0, 0x1804001800000000L);\n+         return jjMoveStringLiteralDfa9_0(active0, 0x1804001800000000L, active1, 0L);\n       case 103:\n          if ((active0 & 0x400000000000000L) != 0L)\n          {\n             jjmatchedKind = 58;\n             jjmatchedPos = 8;\n          }\n-         return jjMoveStringLiteralDfa9_0(active0, 0x300066000000000L);\n+         return jjMoveStringLiteralDfa9_0(active0, 0x300066000000000L, active1, 0L);\n       case 105:\n-         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L);\n+         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0L);\n       case 109:\n-         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L);\n+         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L, active1, 0L);\n       case 110:\n-         return jjMoveStringLiteralDfa9_0(active0, 0x88040000000L);\n-      default :\n-         break;\n-   }\n-   return jjStartNfa_0(7, active0, 0L);\n-}\n-private final int jjMoveStringLiteralDfa9_0(long old0, long active0)\n-{\n-   if (((active0 &= old0)) == 0L)\n-      return jjStartNfa_0(7, old0, 0L);\n-   try { curChar = input_stream.readChar(); }\n-   catch(java.io.IOException e) {\n-      jjStopStringLiteralDfa_0(8, active0, 0L);\n+         return jjMoveStringLiteralDfa9_0(active0, 0x88040000000L, active1, 0L);\n+      case 117:\n+         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200L);\n+      default :\n+         break;\n+   }\n+   return jjStartNfa_0(7, active0, active1);\n+}\n+private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)\n+{\n+   if (((active0 &= old0) | (active1 &= old1)) == 0L)\n+      return jjStartNfa_0(7, old0, old1); \n+   try { curChar = input_stream.readChar(); }\n+   catch(java.io.IOException e) {\n+      jjStopStringLiteralDfa_0(8, active0, active1);\n       return 9;\n    }\n    switch(curChar)\n    {\n       case 45:\n-         return jjMoveStringLiteralDfa10_0(active0, 0x1304060000000000L);\n+         return jjMoveStringLiteralDfa10_0(active0, 0x1304060000000000L, active1, 0L);\n       case 58:\n          if ((active0 & 0x400000000L) != 0L)\n             return jjStopAtPos(9, 34);\n-         return jjMoveStringLiteralDfa10_0(active0, 0x7800000000L);\n+         return jjMoveStringLiteralDfa10_0(active0, 0x7800000000L, active1, 0L);\n       case 101:\n          if ((active0 & 0x2000000000000L) != 0L)\n             return jjStartNfaWithStates_0(9, 49, 13);\n          break;\n       case 103:\n-         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);\n+         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L, active1, 0L);\n+      case 109:\n+         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200L);\n       case 110:\n-         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L);\n+         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L, active1, 0L);\n       case 111:\n-         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L);\n+         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L, active1, 0L);\n       case 116:\n-         return jjMoveStringLiteralDfa10_0(active0, 0x40088000000000L);\n-      default :\n-         break;\n-   }\n-   return jjStartNfa_0(8, active0, 0L);\n-}\n-private final int jjMoveStringLiteralDfa10_0(long old0, long active0)\n-{\n-   if (((active0 &= old0)) == 0L)\n-      return jjStartNfa_0(8, old0, 0L);\n-   try { curChar = input_stream.readChar(); }\n-   catch(java.io.IOException e) {\n-      jjStopStringLiteralDfa_0(9, active0, 0L);\n+         return jjMoveStringLiteralDfa10_0(active0, 0x40088000000000L, active1, 0L);\n+      default :\n+         break;\n+   }\n+   return jjStartNfa_0(8, active0, active1);\n+}\n+private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)\n+{\n+   if (((active0 &= old0) | (active1 &= old1)) == 0L)\n+      return jjStartNfa_0(8, old0, old1); \n+   try { curChar = input_stream.readChar(); }\n+   catch(java.io.IOException e) {\n+      jjStopStringLiteralDfa_0(9, active0, active1);\n       return 10;\n    }\n    switch(curChar)\n    {\n       case 45:\n-         return jjMoveStringLiteralDfa11_0(active0, 0x80040000000L);\n+         return jjMoveStringLiteralDfa11_0(active0, 0x80040000000L, active1, 0L);\n       case 58:\n          if ((active0 & 0x800000000L) != 0L)\n             return jjStopAtPos(10, 35);\n             return jjStopAtPos(10, 37);\n          else if ((active0 & 0x4000000000L) != 0L)\n             return jjStopAtPos(10, 38);\n-         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000L);\n+         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000L, active1, 0L);\n       case 97:\n-         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L);\n+         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L, active1, 0L);\n       case 98:\n-         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L);\n+         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L, active1, 0x200L);\n       case 103:\n-         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L);\n+         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L, active1, 0L);\n       case 104:\n          if ((active0 & 0x40000000000000L) != 0L)\n             return jjStartNfaWithStates_0(10, 54, 13);\n          break;\n       case 114:\n-         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L);\n+         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L, active1, 0L);\n       case 115:\n-         return jjMoveStringLiteralDfa11_0(active0, 0x1000060000000000L);\n+         return jjMoveStringLiteralDfa11_0(active0, 0x1000060000000000L, active1, 0L);\n       case 117:\n-         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L);\n-      default :\n-         break;\n-   }\n-   return jjStartNfa_0(9, active0, 0L);\n-}\n-private final int jjMoveStringLiteralDfa11_0(long old0, long active0)\n-{\n-   if (((active0 &= old0)) == 0L)\n-      return jjStartNfa_0(9, old0, 0L);\n-   try { curChar = input_stream.readChar(); }\n-   catch(java.io.IOException e) {\n-      jjStopStringLiteralDfa_0(10, active0, 0L);\n+         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L, active1, 0L);\n+      default :\n+         break;\n+   }\n+   return jjStartNfa_0(9, active0, active1);\n+}\n+private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)\n+{\n+   if (((active0 &= old0) | (active1 &= old1)) == 0L)\n+      return jjStartNfa_0(9, old0, old1); \n+   try { curChar = input_stream.readChar(); }\n+   catch(java.io.IOException e) {\n+      jjStopStringLiteralDfa_0(10, active0, active1);\n       return 11;\n    }\n    switch(curChar)\n    {\n       case 45:\n-         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L);\n+         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L, active1, 0L);\n       case 58:\n          if ((active0 & 0x8000000000L) != 0L)\n             return jjStopAtPos(11, 39);\n          break;\n       case 101:\n-         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L);\n+         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L, active1, 0x200L);\n       case 102:\n-         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000000L);\n+         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000000L, active1, 0L);\n       case 105:\n-         return jjMoveStringLiteralDfa12_0(active0, 0x60040000000L);\n+         return jjMoveStringLiteralDfa12_0(active0, 0x60040000000L, active1, 0L);\n       case 111:\n-         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L);\n+         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L, active1, 0L);\n       case 112:\n-         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000000L);\n+         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000000L, active1, 0L);\n       case 114:\n-         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L);\n+         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L, active1, 0L);\n       case 116:\n-         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000000L);\n-      default :\n-         break;\n-   }\n-   return jjStartNfa_0(10, active0, 0L);\n-}\n-private final int jjMoveStringLiteralDfa12_0(long old0, long active0)\n-{\n-   if (((active0 &= old0)) == 0L)\n-      return jjStartNfa_0(10, old0, 0L);\n-   try { curChar = input_stream.readChar(); }\n-   catch(java.io.IOException e) {\n-      jjStopStringLiteralDfa_0(11, active0, 0L);\n+         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000000L, active1, 0L);\n+      default :\n+         break;\n+   }\n+   return jjStartNfa_0(10, active0, active1);\n+}\n+private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)\n+{\n+   if (((active0 &= old0) | (active1 &= old1)) == 0L)\n+      return jjStartNfa_0(10, old0, old1); \n+   try { curChar = input_stream.readChar(); }\n+   catch(java.io.IOException e) {\n+      jjStopStringLiteralDfa_0(11, active0, active1);\n       return 12;\n    }\n    switch(curChar)\n    {\n       case 97:\n-         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000000L);\n+         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000000L, active1, 0L);\n       case 98:\n-         return jjMoveStringLiteralDfa13_0(active0, 0x60000000000L);\n+         return jjMoveStringLiteralDfa13_0(active0, 0x60000000000L, active1, 0L);\n       case 102:\n-         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000000L);\n+         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000000L, active1, 0L);\n       case 104:\n          if ((active0 & 0x800000000000000L) != 0L)\n             return jjStartNfaWithStates_0(12, 59, 13);\n             return jjStartNfaWithStates_0(12, 50, 13);\n          break;\n       case 110:\n-         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L);\n+         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L, active1, 0L);\n       case 114:\n-         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000L);\n+         if ((active1 & 0x200L) != 0L)\n+            return jjStartNfaWithStates_0(12, 73, 13);\n+         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000L, active1, 0L);\n       case 115:\n-         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L);\n+         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L, active1, 0L);\n       case 116:\n-         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000000L);\n-      default :\n-         break;\n-   }\n-   return jjStartNfa_0(11, active0, 0L);\n-}\n-private final int jjMoveStringLiteralDfa13_0(long old0, long active0)\n-{\n-   if (((active0 &= old0)) == 0L)\n-      return jjStartNfa_0(11, old0, 0L);\n+         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000000L, active1, 0L);\n+      default :\n+         break;\n+   }\n+   return jjStartNfa_0(11, active0, active1);\n+}\n+private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)\n+{\n+   if (((active0 &= old0) | (active1 &= old1)) == 0L)\n+      return jjStartNfa_0(11, old0, old1); \n    try { curChar = input_stream.readChar(); }\n    catch(java.io.IOException e) {\n       jjStopStringLiteralDfa_0(12, active0, 0L);\n                case 13:\n                   if ((0x3ff600000000000L & l) == 0L)\n                      break;\n-                  if (kind > 73)\n-                     kind = 73;\n+                  if (kind > 74)\n+                     kind = 74;\n                   jjstateSet[jjnewStateCnt++] = 13;\n                   break;\n                default : break;\n                case 13:\n                   if ((0x7fffffe87fffffeL & l) == 0L)\n                      break;\n-                  if (kind > 73)\n-                     kind = 73;\n+                  if (kind > 74)\n+                     kind = 74;\n                   jjCheckNAdd(13);\n                   break;\n                case 2:\n                case 1:\n                   if (!jjCanMove_1(hiByte, i1, i2, l1, l2))\n                      break;\n-                  if (kind > 73)\n-                     kind = 73;\n+                  if (kind > 74)\n+                     kind = 74;\n                   jjCheckNAdd(13);\n                   break;\n                case 2:\n                case 13:\n                   if (!jjCanMove_2(hiByte, i1, i2, l1, l2))\n                      break;\n-                  if (kind > 73)\n-                     kind = 73;\n+                  if (kind > 74)\n+                     kind = 74;\n                   jjCheckNAdd(13);\n                   break;\n                default : break;\n \"\\156\\157\\162\\155\\141\\154\\151\\172\\145\\55\\163\\160\\141\\143\\145\", \"\\164\\162\\141\\156\\163\\154\\141\\164\\145\", \"\\142\\157\\157\\154\\145\\141\\156\", \n \"\\156\\157\\164\", \"\\164\\162\\165\\145\", \"\\146\\141\\154\\163\\145\", \"\\156\\165\\154\\154\", \n \"\\154\\141\\156\\147\", \"\\156\\165\\155\\142\\145\\162\", \"\\163\\165\\155\", \"\\146\\154\\157\\157\\162\", \n-\"\\143\\145\\151\\154\\151\\156\\147\", \"\\162\\157\\165\\156\\144\", null, \"\\72\", \"\\50\", \"\\51\", \"\\56\", \"\\56\\56\", \"\\133\", \n-\"\\135\", \"\\100\", \"\\54\", \"\\52\", };\n+\"\\143\\145\\151\\154\\151\\156\\147\", \"\\162\\157\\165\\156\\144\", \"\\146\\157\\162\\155\\141\\164\\55\\156\\165\\155\\142\\145\\162\", \n+null, \"\\72\", \"\\50\", \"\\51\", \"\\56\", \"\\56\\56\", \"\\133\", \"\\135\", \"\\100\", \"\\54\", \"\\52\", };\n public static final String[] lexStateNames = {\n    \"DEFAULT\", \n };\n static final long[] jjtoToken = {\n-   0xffffffffff817ffdL, 0xfffffL, \n+   0xffffffffff817ffdL, 0x1fffffL, \n };\n static final long[] jjtoSkip = {\n    0x2L, 0x0L, \n static final long[] jjtoSpecial = {\n    0x2L, 0x0L, \n };\n-private ASCII_UCodeESC_CharStream input_stream;\n+private JavaCharStream input_stream;\n private final int[] jjrounds = new int[14];\n private final int[] jjstateSet = new int[28];\n protected char curChar;\n-public XPathParserTokenManager(ASCII_UCodeESC_CharStream stream)\n-{\n-   if (ASCII_UCodeESC_CharStream.staticFlag)\n+public XPathParserTokenManager(JavaCharStream stream)\n+{\n+   if (JavaCharStream.staticFlag)\n       throw new Error(\"ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.\");\n    input_stream = stream;\n }\n-public XPathParserTokenManager(ASCII_UCodeESC_CharStream stream, int lexState)\n+public XPathParserTokenManager(JavaCharStream stream, int lexState)\n {\n    this(stream);\n    SwitchTo(lexState);\n }\n-public void ReInit(ASCII_UCodeESC_CharStream stream)\n+public void ReInit(JavaCharStream stream)\n {\n    jjmatchedPos = jjnewStateCnt = 0;\n    curLexState = defaultLexState;\n    for (i = 14; i-- > 0;)\n       jjrounds[i] = 0x80000000;\n }\n-public void ReInit(ASCII_UCodeESC_CharStream stream, int lexState)\n+public void ReInit(JavaCharStream stream, int lexState)\n {\n    ReInit(stream);\n    SwitchTo(lexState);", "timestamp": 1043459359, "metainfo": ""}