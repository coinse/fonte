{"sha": "d0b44a455070e7c245d329d302344cd997290bf4", "log": "Promoted a common method to the superclass   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.8 2002/07/03 21:12:36 dmitri Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/07/03 21:12:36 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.9 2002/08/10 01:49:46 dmitri Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/08/10 01:49:46 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * context-independent predicates.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.8 $ $Date: 2002/07/03 21:12:36 $\n+ * @version $Revision: 1.9 $ $Date: 2002/08/10 01:49:46 $\n  */\n public abstract class NodePointer implements Pointer, Cloneable, Comparable {\n \n      * May return null if the object does not support the attributes.\n      */\n     public NodeIterator attributeIterator(QName qname) {\n+        NodePointer valuePointer = getValuePointer();\n+        if (valuePointer != null && valuePointer != this){\n+            return valuePointer.attributeIterator(qname);\n+        }\n         return null;\n     }\n \n         return p1.parent.compareChildNodePointers(p1, p2);\n     }\n \n+    /**\n+     * Print internal structure of a pointer for debugging\n+     */\n     public void printPointerChain(){\n-        Pointer p = this;\n-        while (p != null){\n-            System.err.println((p == this ? \"POINTER: \" : \" PARENT: \")\n-                + p.getClass() + \" \" + p.asPath());\n-            if (p instanceof NodePointer){\n-                p = ((NodePointer)p).getParent();\n-            }\n+        printDeep(this, \"\");\n+    }\n+\n+    private static void printDeep(NodePointer pointer, String indent){\n+        if (indent.length() == 0){\n+            System.err.println(\"POINTER: \" + pointer + \"(\" +\n+                    pointer.getClass().getName() + \")\");\n+        }\n+        else {\n+            System.err.println(indent + \" of \" + pointer + \"(\" +\n+                    pointer.getClass().getName() + \")\");\n+        }\n+        if (pointer.getParent() != null){\n+            printDeep(pointer.getParent(), indent + \"  \");\n         }\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java,v 1.5 2002/07/11 01:17:16 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/07/11 01:17:16 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java,v 1.6 2002/08/10 01:49:46 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/10 01:49:46 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * a path, following elements will by of type PropertyPointer.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/07/11 01:17:16 $\n+ * @version $Revision: 1.6 $ $Date: 2002/08/10 01:49:46 $\n  */\n public class BeanPointer extends PropertyOwnerPointer {\n     private QName name;\n         return bean;\n     }\n \n+    /**\n+     * Throws an exception if you try to change the root element.\n+     */\n+    public void setValue(Object value){\n+        super.setValue(value);\n+        if (parent instanceof PropertyPointer){\n+            parent.setValue(value);\n+        }\n+        else if (parent != null){\n+            throw new UnsupportedOperationException(\"Cannot setValue of an object that is not some other object's property\");\n+        }\n+        else {\n+            throw new UnsupportedOperationException(\"Cannot replace the root object\");\n+        }\n+    }\n+\n     public void remove(){\n         super.setValue(null);\n         if (parent != null){\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/DynamicPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/DynamicPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/Attic/DynamicPointer.java,v 1.4 2002/07/11 01:17:16 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/07/11 01:17:16 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/Attic/DynamicPointer.java,v 1.5 2002/08/10 01:49:46 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/10 01:49:46 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * for the first element of a path; following elements will by of type PropertyPointer.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/07/11 01:17:16 $\n+ * @version $Revision: 1.5 $ $Date: 2002/08/10 01:49:46 $\n  */\n public class DynamicPointer extends PropertyOwnerPointer {\n     private QName name;\n      */\n     public Object getBaseValue(){\n         return bean;\n+    }\n+\n+    public void setValue(Object value){\n+        super.setValue(value);\n+        if (parent instanceof PropertyPointer){\n+            parent.setValue(value);\n+        }\n+        else if (parent != null){\n+            throw new UnsupportedOperationException(\"Cannot setValue of an object that is not some other object's property\");\n+        }\n+        else {\n+            throw new UnsupportedOperationException(\"Cannot replace the root object\");\n+        }\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java,v 1.6 2002/07/11 01:17:16 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/07/11 01:17:16 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java,v 1.7 2002/08/10 01:49:46 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/08/10 01:49:46 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * as the parent.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2002/07/11 01:17:16 $\n+ * @version $Revision: 1.7 $ $Date: 2002/08/10 01:49:46 $\n  */\n public class NullElementPointer extends PropertyOwnerPointer {\n \n \n     public NodePointer getValuePointer(){\n         return new NullPointer(this, getName());\n+    }\n+\n+    public void setValue(Object value){\n+        super.setValue(value);\n+        if (parent instanceof PropertyPointer){\n+            parent.setValue(value);\n+        }\n+        else {\n+            throw new UnsupportedOperationException(\"Cannot setValue of an object that is not some other object's property\");\n+        }\n     }\n \n     public boolean isActual(){\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java,v 1.5 2002/07/11 01:17:16 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/07/11 01:17:16 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java,v 1.6 2002/08/10 01:49:46 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/10 01:49:46 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/07/11 01:17:16 $\n+ * @version $Revision: 1.6 $ $Date: 2002/08/10 01:49:46 $\n  */\n public class NullPointer extends PropertyOwnerPointer {\n     private QName name;\n         return null;\n     }\n \n+    public void setValue(Object value){\n+        super.setValue(value);\n+        if (parent instanceof PropertyPointer){\n+            parent.setValue(value);\n+        }\n+        else {\n+            throw new UnsupportedOperationException(\"Cannot setValue of an object that is not some other object's property/child\");\n+        }\n+    }\n+\n     public boolean isActual(){\n         return false;\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java,v 1.5 2002/05/08 23:05:05 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/05/08 23:05:05 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java,v 1.6 2002/08/10 01:49:46 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/10 01:49:46 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/05/08 23:05:05 $\n+ * @version $Revision: 1.6 $ $Date: 2002/08/10 01:49:46 $\n  */\n public class NullPropertyPointer extends PropertyPointer {\n \n     private String propertyName = \"*\";\n-    private boolean dynamic = false;\n+    private boolean byNameAttribute = false;\n \n     /**\n      */\n         return parent.createChild(context, getName(), getIndex(), value);\n     }\n \n-    public NodePointer createChild(JXPathContext context, QName name, int index, Object value){\n+    public NodePointer createChild(JXPathContext context, \n+            QName name, int index, Object value){\n         return createPath(context).createChild(context, name, index, value);\n     }\n \n-    public NodePointer createChild(JXPathContext context, QName name, int index){\n+    public NodePointer createChild(JXPathContext context, \n+            QName name, int index){\n         return createPath(context).createChild(context, name, index);\n     }\n \n         this.propertyName = propertyName;\n     }\n \n-    public void setDynamic(boolean flag){\n-        dynamic = flag;\n+    public void setNameAttributeValue(String attributeValue){\n+        this.propertyName = attributeValue;\n+        byNameAttribute = true;\n     }\n \n     public boolean isCollection(){\n     }\n \n     public String asPath(){\n-        if (!dynamic){\n+        if (!byNameAttribute){\n             return super.asPath();\n         }\n         else {\n     private String escape(String string){\n         int index = string.indexOf('\\'');\n         while (index != -1){\n-            string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1);\n+            string = string.substring(0, index) + \"&apos;\" + \n+                    string.substring(index + 1);\n             index = string.indexOf('\\'');\n         }\n         index = string.indexOf('\\\"');\n         while (index != -1){\n-            string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1);\n+            string = string.substring(0, index) + \"&quot;\" + \n+                    string.substring(index + 1);\n             index = string.indexOf('\\\"');\n         }\n         return string;\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java,v 1.6 2002/07/11 01:17:16 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/07/11 01:17:16 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java,v 1.7 2002/08/10 01:49:46 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/08/10 01:49:46 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * a collection.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2002/07/11 01:17:16 $\n+ * @version $Revision: 1.7 $ $Date: 2002/08/10 01:49:46 $\n  */\n public abstract class PropertyOwnerPointer extends NodePointer {\n \n     }\n \n     public abstract QName getName();\n-\n     public void setValue(Object value){\n         this.value = value;\n-        if (parent != null){\n-            if (!parent.isNode()){\n-                parent.setValue(value);\n-            }\n-            else {\n-                throw new UnsupportedOperationException(\n-                  \"Cannot setValue of an object that is not \" +\n-                  \"some other object's property\");\n-            }\n-        }\n-        else {\n-            throw new UnsupportedOperationException(\n-              \"Cannot replace the root object\");\n-        }\n     }\n \n     public abstract PropertyPointer getPropertyPointer();", "timestamp": 1028944186, "metainfo": ""}