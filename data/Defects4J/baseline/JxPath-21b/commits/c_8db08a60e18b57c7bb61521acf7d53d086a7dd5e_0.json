{"sha": "8db08a60e18b57c7bb61521acf7d53d086a7dd5e", "log": "Made namespace mappings inherited by child contexts   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n  * The reference implementation of JXPathContext.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.43 $ $Date: 2004/04/04 23:16:23 $\n+ * @version $Revision: 1.44 $ $Date: 2004/12/30 21:59:36 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext {\n     \n             this.rootPointer = this.contextPointer;\n         }\n         \n-        namespaceResolver = new NamespaceResolver();\n+        NamespaceResolver parentNR = null;\n+        if (parentContext instanceof JXPathContextReferenceImpl) {\n+            parentNR = ((JXPathContextReferenceImpl)parentContext).getNamespaceResolver();\n+        }\n+        namespaceResolver = new NamespaceResolver(parentNR);\n         namespaceResolver\n                 .setNamespaceContextPointer((NodePointer) this.contextPointer);\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java\n+++ b/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java\n  * The reference implementation of JXPathContext.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.2 $ $Date: 2004/06/29 22:57:20 $\n+ * @version $Revision: 1.3 $ $Date: 2004/12/30 21:59:36 $\n  */\n public class NamespaceResolver implements Cloneable {\n-    \n+    final protected NamespaceResolver parent;\n     protected HashMap namespaceMap = new HashMap();\n     protected HashMap reverseMap;\n     protected NodePointer pointer;\n     private boolean sealed;\n+        \n+    public NamespaceResolver(NamespaceResolver parent) {\n+        this.parent = parent;\n+    }\n     \n     /**\n      * Registers a namespace prefix.\n     }\n     \n     public Pointer getNamespaceContextPointer() {\n+        if (pointer == null && parent != null) {\n+            return parent.getNamespaceContextPointer();\n+        }\n         return pointer;\n     }\n     \n         String uri = (String) namespaceMap.get(prefix);\n         if (uri == null && pointer != null) {\n             uri = pointer.getNamespaceURI(prefix);\n+        }\n+        if (uri == null && parent != null) {\n+            return parent.getNamespaceURI(prefix);\n         }\n //        System.err.println(\"For prefix \" + prefix + \" URI=\" + uri);\n         return uri;\n             }\n         }\n         String prefix = (String) reverseMap.get(namespaceURI);\n+        if (prefix == null && parent != null) {\n+            return parent.getPrefix(namespaceURI);\n+        }\n         return prefix;\n     }\n     \n     \n     public void seal() {\n         sealed = true;\n+        if (parent != null) {\n+            parent.seal();\n+        }\n     }\n     \n     public Object clone() {\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.25 $ $Date: 2004/10/06 00:34:14 $\n+ * @version $Revision: 1.26 $ $Date: 2004/12/30 21:59:36 $\n  */\n public class DOMNodePointer extends NodePointer {\n     private Node node;\n         }\n \n         namespaces.put(prefix, namespace);\n+        if (namespace == UNKNOWN_NAMESPACE) {\n+            return null;\n+        }\n+        \n         // TBD: We are supposed to resolve relative URIs to absolute ones.\n         return namespace;\n     }\n--- a/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java\n  * DOM, JDOM etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.24 $ $Date: 2004/10/06 00:34:14 $\n+ * @version $Revision: 1.25 $ $Date: 2004/12/30 21:59:36 $\n  */\n \n public abstract class XMLModelTestCase extends JXPathTestCase {\n                 \"//product:name\",\n                 \"Box of oranges\",\n                 \"/vendor[1]/product[1]/goods:name[1]\");\n+        \n+        // Same, but with a child context        \n+        JXPathContext childCtx = \n+            JXPathContext.newContext(context, context.getContextBean());\n+        assertXPathValueAndPointer(childCtx,\n+                \"//product:name\",\n+                \"Box of oranges\",\n+                \"/vendor[1]/product[1]/goods:name[1]\");\n+        \n+        // Same, but with a relative context        \n+        JXPathContext relativeCtx = \n+            context.getRelativeContext(context.getPointer(\"/vendor\"));\n+        assertXPathValueAndPointer(relativeCtx,\n+                \"product/product:name\",\n+                \"Box of oranges\",\n+                \"/vendor[1]/product[1]/goods:name[1]\");\n     }\n }", "timestamp": 1104443976, "metainfo": ""}