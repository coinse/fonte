{"sha": "a1bc20f2af31730caa12faa116e14a964354f28d", "log": "[JXPATH-109] attribute::* should select attrs regardless of whether they have a namespace  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java\n                 int count = map.getLength();\n                 for (int i = 0; i < count; i++) {\n                     Attr attr = (Attr) map.item(i);\n-                    if (testAttr(attr, name)) {\n+                    if (testAttr(attr)) {\n                         attributes.add(attr);\n                     }\n                 }\n         }\n     }\n \n-    private boolean testAttr(Attr attr, QName testName) {\n+    private boolean testAttr(Attr attr) {\n         String nodePrefix = DOMNodePointer.getPrefix(attr);\n         String nodeLocalName = DOMNodePointer.getLocalName(attr);\n \n \n         String testLocalName = name.getName();\n         if (testLocalName.equals(\"*\") || testLocalName.equals(nodeLocalName)) {\n-            String testPrefix = testName.getPrefix();\n+            String testPrefix = name.getPrefix();\n \n-            if (equalStrings(testPrefix, nodePrefix)) {\n+            if (testPrefix == null || equalStrings(testPrefix, nodePrefix)) {\n                 return true;\n             }\n-\n-            String testNS = null;\n-            if (testPrefix != null) {\n-                testNS = parent.getNamespaceURI(testPrefix);\n+            if (nodePrefix == null) {\n+                return false;\n             }\n-\n-            String nodeNS = null;\n-            if (nodePrefix != null) {\n-                nodeNS = parent.getNamespaceURI(nodePrefix);\n-            }\n-            return equalStrings(testNS, nodeNS);\n+            return equalStrings(parent.getNamespaceURI(testPrefix), parent\n+                    .getNamespaceURI(nodePrefix));\n         }\n         return false;\n     }\n             NamedNodeMap nnm = element.getAttributes();\n             for (int i = 0; i < nnm.getLength(); i++) {\n                 attr = (Attr) nnm.item(i);\n-                if (testAttr(attr, name)) {\n+                if (testAttr(attr)) {\n                     return attr;\n                 }\n             }\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java\n             String lname = name.getName();\n             if (!lname.equals(\"*\")) {\n                 attributes = new ArrayList();\n-                if (ns != null) {\n-                    Attribute attr = element.getAttribute(lname, ns);\n-                    if (attr != null) {\n-                        attributes.add(attr);\n-                    }\n+                Attribute attr = element.getAttribute(lname, ns);\n+                if (attr != null) {\n+                    attributes.add(attr);\n                 }\n             }\n             else {\n                 List allAttributes = element.getAttributes();\n                 for (int i = 0; i < allAttributes.size(); i++) {\n                     Attribute attr = (Attribute) allAttributes.get(i);\n-                    if (attr.getNamespace().equals(ns)) {\n+                    if (ns == Namespace.NO_NAMESPACE\n+                            || attr.getNamespace().equals(ns)) {\n                         attributes.add(attr);\n                     }\n                 }\n--- a/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n         return list;\n     }\n \n+    protected static Set set(Object o1, Object o2) {\n+        Set list = new HashSet();\n+        list.add(o1);\n+        list.add(o2);\n+        return list;\n+    }\n+\n     protected static Set set(Object o1, Object o2, Object o3) {\n         Set list = new HashSet();\n         list.add(o1);\n--- a/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java\n \n         // attribute:: with default namespace and wildcard\n         assertXPathValueIterator(\n-            context,\n-            \"vendor/product/price:amount/@*\",\n+                context,\n+                \"vendor/product/price:amount/@*\",\n+                //use a set because DOM returns attrs sorted by name, JDOM by occurrence order:\n+                set(\"10%\", \"20%\"));\n+\n+        // attribute:: select non-ns'd attributes only\n+        assertXPathValueIterator(\n+            context,\n+            \"vendor/product/price:amount/@*[namespace-uri() = '']\",\n             list(\"20%\"));\n \n         // Empty attribute", "timestamp": 1202004839, "metainfo": ""}