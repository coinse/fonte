{"sha": "d3698cab8589ced4c494bf35d459ea3212b961d1", "log": "Fix problems with pointer comparison   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java,v 1.3 2002/05/08 23:05:05 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/05/08 23:05:05 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java,v 1.4 2002/05/29 00:40:58 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/05/29 00:40:58 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * a path, following elements will by of type PropertyPointer.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/05/08 23:05:05 $\n+ * @version $Revision: 1.4 $ $Date: 2002/05/29 00:40:58 $\n  */\n public class BeanPointer extends PropertyOwnerPointer {\n     private QName name;\n         }\n \n         BeanPointer other = (BeanPointer)object;\n+        if (parent != other.parent){\n+            if (parent == null || !parent.equals(other.parent)){\n+                return false;\n+            }\n+        }\n+\n         if ((name == null && other.name != null) ||\n                 (name != null && !name.equals(other.name))){\n+            return false;\n+        }\n+\n+        int i_this = (index == WHOLE_COLLECTION ? 0 : index);\n+        int i_other = (other.index == WHOLE_COLLECTION ? 0 : other.index);\n+        if (i_this != i_other){\n             return false;\n         }\n \n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java,v 1.3 2002/04/26 01:00:37 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/26 01:00:37 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java,v 1.4 2002/05/29 00:40:58 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/05/29 00:40:58 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * a property of the parent object.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/26 01:00:37 $\n+ * @version $Revision: 1.4 $ $Date: 2002/05/29 00:40:58 $\n  */\n public abstract class PropertyPointer extends NodePointer {\n     public static int UNSPECIFIED_PROPERTY = Integer.MIN_VALUE;\n         }\n \n         PropertyPointer other = (PropertyPointer)object;\n-        return getParent() == other.getParent() &&\n-                propertyIndex == other.propertyIndex &&\n-                index == other.index;\n+        if (parent != other.parent){\n+            if (parent == null || !parent.equals(other.parent)){\n+                return false;\n+            }\n+        }\n+\n+        if (getPropertyIndex() != other.getPropertyIndex() ||\n+               !getPropertyName().equals(other.getPropertyName())){\n+            return false;\n+        }\n+\n+        int i_this = (index == WHOLE_COLLECTION ? 0 : index);\n+        int i_other = (other.index == WHOLE_COLLECTION ? 0 : other.index);\n+        return i_this == i_other;\n     }\n \n     public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2){\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java,v 1.5 2002/05/08 23:05:05 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/05/08 23:05:05 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java,v 1.6 2002/05/29 00:40:58 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/05/29 00:40:58 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.w3c.dom.Attr;\n import org.w3c.dom.Comment;\n import org.w3c.dom.Element;\n+import org.w3c.dom.NamedNodeMap;\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n import org.w3c.dom.ProcessingInstruction;\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/05/08 23:05:05 $\n+ * @version $Revision: 1.6 $ $Date: 2002/05/29 00:40:58 $\n  */\n public class DOMNodePointer extends NodePointer {\n     private Node node;\n     }\n \n     public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2){\n-        Node node1 = (Node)pointer1.getNodeValue();\n-        Node node2 = (Node)pointer2.getNodeValue();\n+        Node node1 = (Node)pointer1.getBaseValue();\n+        Node node2 = (Node)pointer2.getBaseValue();\n         if (node1 == node2){\n             return 0;\n+        }\n+\n+        int t1 = node1.getNodeType();\n+        int t2 = node2.getNodeType();\n+        if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE){\n+            return -1;\n+        }\n+        else if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE){\n+            return 1;\n+        }\n+        else if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE){\n+            NamedNodeMap map = ((Node)getNodeValue()).getAttributes();\n+            int length = map.getLength();\n+            for (int i = 0; i < length; i++){\n+                Node n = map.item(i);\n+                if (n == node1){\n+                    return -1;\n+                }\n+                else if (n == node2){\n+                    return 1;\n+                }\n+            }\n+            return 0;       // Should not happen\n         }\n \n         Node current = node.getFirstChild();\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java,v 1.3 2002/04/26 01:00:38 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/26 01:00:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java,v 1.4 2002/05/29 00:40:58 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/05/29 00:40:58 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Represents a namespace node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/26 01:00:38 $\n+ * @version $Revision: 1.4 $ $Date: 2002/05/29 00:40:58 $\n  */\n public class NamespacePointer extends NodePointer {\n     private String prefix;\n     }\n \n     public int hashCode(){\n-        String nsURI = getNamespaceURI();\n-        if (nsURI == null){\n-            return 0;\n-        }\n-        else {\n-            return nsURI.hashCode();\n-        }\n+        return prefix.hashCode();\n     }\n \n     public boolean equals(Object object){\n         }\n \n         NamespacePointer other = (NamespacePointer)object;\n-        String nsURI = getNamespaceURI();\n-        String otherNSURI = other.getNamespaceURI();\n-        return (nsURI == null && otherNSURI == null) ||\n-               (nsURI != null && nsURI.endsWith(otherNSURI));\n+        return prefix.equals(other.prefix);\n     }\n- \n+\n     public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2){\n         // Won't happen - namespaces don't have children\n         return 0;", "timestamp": 1022632858, "metainfo": ""}