{"sha": "515ed3d91e9e8ed1c1e8538a2ecbfc1f08ea473b", "log": "[JXPATH-141] FunctionLibrary Multithreading issue  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/FunctionLibrary.java\n+++ b/src/java/org/apache/commons/jxpath/FunctionLibrary.java\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n \n /**\n  * @version $Revision$ $Date$\n  */\n public class FunctionLibrary implements Functions {\n-    private List allFunctions = new ArrayList();\n-    private HashMap byNamespace = null;\n+    private final List allFunctions = new ArrayList();\n+    private Map byNamespace;\n \n     /**\n      * Add functions to the library\n      * @return Set<String>\n      */\n     public Set getUsedNamespaces() {\n-        if (byNamespace == null) {\n-            prepareCache();\n-        }\n-        return byNamespace.keySet();\n+        return functionCache().keySet();\n     }\n \n     /**\n      */\n     public Function getFunction(String namespace, String name,\n             Object[] parameters) {\n-        if (byNamespace == null) {\n-            prepareCache();\n-        }\n-        Object candidates = byNamespace.get(namespace);\n+        Object candidates = functionCache().get(namespace);\n         if (candidates instanceof Functions) {\n             return ((Functions) candidates).getFunction(\n                 namespace,\n     /**\n      * Prepare the cache.\n      */\n-    private void prepareCache() {\n-        byNamespace = new HashMap();\n-        int count = allFunctions.size();\n-        for (int i = 0; i < count; i++) {\n-            Functions funcs = (Functions) allFunctions.get(i);\n-            Set namespaces = funcs.getUsedNamespaces();\n-            for (Iterator it = namespaces.iterator(); it.hasNext();) {\n-                String ns = (String) it.next();\n-                Object candidates = byNamespace.get(ns);\n-                if (candidates == null) {\n-                    byNamespace.put(ns, funcs);\n-                }\n-                else if (candidates instanceof Functions) {\n-                    List lst = new ArrayList();\n-                    lst.add(candidates);\n-                    lst.add(funcs);\n-                    byNamespace.put(ns, lst);\n-                }\n-                else {\n-                    ((List) candidates).add(funcs);\n+    private Map functionCache() {\n+        if (byNamespace == null) {\n+            synchronized (this) {\n+                //read again\n+                if (byNamespace == null) {\n+                    byNamespace = new HashMap();\n+                    int count = allFunctions.size();\n+                    for (int i = 0; i < count; i++) {\n+                        Functions funcs = (Functions) allFunctions.get(i);\n+                        Set namespaces = funcs.getUsedNamespaces();\n+                        for (Iterator it = namespaces.iterator(); it.hasNext();) {\n+                            String ns = (String) it.next();\n+                            Object candidates = byNamespace.get(ns);\n+                            if (candidates == null) {\n+                                byNamespace.put(ns, funcs);\n+                            } else if (candidates instanceof Functions) {\n+                                List lst = new ArrayList();\n+                                lst.add(candidates);\n+                                lst.add(funcs);\n+                                byNamespace.put(ns, lst);\n+                            } else {\n+                                ((List) candidates).add(funcs);\n+                            }\n+                        }\n+                    }\n                 }\n             }\n         }\n+        return byNamespace;\n     }\n }", "timestamp": 1307479744, "metainfo": ""}