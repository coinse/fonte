{"sha": "7b2847e882a9e4216dcf0f35d27101e363611532", "log": "[JXPATH-125] JXPathContext.iteratePointers() does not work with multiple prefixes for a single namespace URI  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n                     if (nsURI == null) {\n                         buffer.append(ln);\n                         buffer.append('[');\n-                        buffer.append(getRelativePositionByName()).append(']');\n+                        buffer.append(getRelativePositionByQName()).append(']');\n                     }\n                     else {\n                         String prefix = getNamespaceResolver().getPrefix(nsURI);\n                             buffer.append(':');\n                             buffer.append(ln);\n                             buffer.append('[');\n-                            buffer.append(getRelativePositionByName());\n+                            buffer.append(getRelativePositionByQName());\n                             buffer.append(']');\n                         }\n                         else {\n      * Get relative position of this among like-named siblings.\n      * @return 1..n\n      */\n-    private int getRelativePositionByName() {\n+    private int getRelativePositionByQName() {\n         int count = 1;\n         Node n = node.getPreviousSibling();\n         while (n != null) {\n-            if (n.getNodeType() == Node.ELEMENT_NODE) {\n-                String nm = n.getNodeName();\n-                if (nm.equals(node.getNodeName())) {\n-                    count++;\n-                }\n+            if (n.getNodeType() == Node.ELEMENT_NODE && matchesQName(n)) {\n+                count++;\n             }\n             n = n.getPreviousSibling();\n         }\n         return count;\n+    }\n+\n+    private boolean matchesQName(Node n) {\n+        if (getNamespaceURI() != null) {\n+            return equalStrings(getNamespaceURI(n), getNamespaceURI())\n+                    && equalStrings(node.getLocalName(), n.getLocalName());\n+        }\n+        return equalStrings(node.getNodeName(), n.getNodeName());\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n                 if (nsURI == null) {\n                     buffer.append(ln);\n                     buffer.append('[');\n-                    buffer.append(getRelativePositionByName()).append(']');\n+                    buffer.append(getRelativePositionByQName()).append(']');\n                 }\n                 else {\n                     String prefix = getNamespaceResolver().getPrefix(nsURI);\n                         buffer.append(':');\n                         buffer.append(ln);\n                         buffer.append('[');\n-                        buffer.append(getRelativePositionByName());\n+                        buffer.append(getRelativePositionByQName());\n                         buffer.append(']');\n                     }\n                     else {\n      * Get relative position of this among like-named siblings.\n      * @return 1..n\n      */\n-    private int getRelativePositionByName() {\n+    private int getRelativePositionByQName() {\n         if (node instanceof Element) {\n             Object parent = ((Element) node).getParent();\n             if (!(parent instanceof Element)) {\n             String name = ((Element) node).getQualifiedName();\n             for (int i = 0; i < children.size(); i++) {\n                 Object child = children.get(i);\n-                if ((child instanceof Element)\n-                    && ((Element) child).getQualifiedName().equals(name)) {\n+                if (child instanceof Element && matchesQName(((Element) child))) {\n                     count++;\n                 }\n                 if (child == node) {\n             return count;\n         }\n         return 1;\n+    }\n+\n+    private boolean matchesQName(Element element) {\n+        if (getNamespaceURI() != null) {\n+            String ns = getNamespaceURI(element);\n+            if (ns == null || !ns.equals(getNamespaceURI())) {\n+                return false;\n+            }\n+        }\n+        return element.getName().equals(((Element) node).getName());\n     }\n \n     /**\n--- /dev/null\n+++ b/src/test/org/apache/commons/jxpath/ri/model/AliasedNamespaceIterationTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.jxpath.ri.model;\n+\n+import java.util.Collection;\n+\n+import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.JXPathTestCase;\n+import org.apache.commons.jxpath.xml.DocumentContainer;\n+\n+/**\n+ * Test aliased/doubled XML namespace iteration; JXPATH-125.\n+ *\n+ * @version $Revision$ $Date$\n+ */\n+public class AliasedNamespaceIterationTest extends JXPathTestCase {\n+    protected JXPathContext context;\n+\n+    protected DocumentContainer createDocumentContainer(String model) {\n+        DocumentContainer result = new DocumentContainer(JXPathTestCase.class\n+                .getResource(\"IterateAliasedNS.xml\"), model);\n+        return result;\n+    }\n+\n+    protected JXPathContext createContext(String model) {\n+        JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));\n+        context.registerNamespace(\"a\", \"ns\");\n+        return context;\n+    }\n+\n+    protected void doTestIterate(String xpath, String model, Collection expected) {\n+        assertXPathPointerIterator(createContext(model), xpath, expected);\n+    }\n+\n+    protected void doTestIterate(String model) {\n+        assertXPathPointerIterator(createContext(model), \"/a:doc/a:elem\", list(\"/a:doc[1]/a:elem[1]\", \"/a:doc[1]/a:elem[2]\"));\n+    }\n+\n+    public void testIterateDOM() {\n+        doTestIterate(DocumentContainer.MODEL_DOM);\n+    }\n+    \n+    public void testIterateJDOM() {\n+        doTestIterate(DocumentContainer.MODEL_JDOM);\n+    }\n+}", "timestamp": 1267295679, "metainfo": ""}