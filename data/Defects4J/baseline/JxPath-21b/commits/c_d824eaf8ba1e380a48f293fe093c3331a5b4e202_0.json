{"sha": "d824eaf8ba1e380a48f293fe093c3331a5b4e202", "log": "avoid error due to calling getBeanInfo(Object.class, Object.class)  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java\n \n     public synchronized PropertyDescriptor[] getPropertyDescriptors() {\n         if (propertyDescriptors == null) {\n-            try {\n-                BeanInfo bi = null;\n-                if (clazz.isInterface()) {\n-                    bi = Introspector.getBeanInfo(clazz);\n+            if (clazz == Object.class) {\n+                propertyDescriptors = new PropertyDescriptor[0];\n+            }\n+            else {\n+                try {\n+                    BeanInfo bi = null;\n+                    if (clazz.isInterface()) {\n+                        bi = Introspector.getBeanInfo(clazz);\n+                    }\n+                    else {\n+                        bi = Introspector.getBeanInfo(clazz, Object.class);\n+                    }\n+                    PropertyDescriptor[] pds = bi.getPropertyDescriptors();\n+                    PropertyDescriptor[] descriptors = new PropertyDescriptor[pds.length];\n+                    System.arraycopy(pds, 0, descriptors, 0, pds.length);\n+                    Arrays.sort(descriptors, new Comparator() {\n+                        public int compare(Object left, Object right) {\n+                            return ((PropertyDescriptor) left).getName().compareTo(\n+                                ((PropertyDescriptor) right).getName());\n+                        }\n+                    });\n+                    propertyDescriptors = descriptors;\n                 }\n-                else {\n-                    bi = Introspector.getBeanInfo(clazz, Object.class);\n+                catch (IntrospectionException ex) {\n+                    ex.printStackTrace();\n                 }\n-                PropertyDescriptor[] pds = bi.getPropertyDescriptors();\n-                PropertyDescriptor[] descriptors = new PropertyDescriptor[pds.length];\n-                System.arraycopy(pds, 0, descriptors, 0, pds.length);\n-                Arrays.sort(descriptors, new Comparator() {\n-                    public int compare(Object left, Object right) {\n-                        return ((PropertyDescriptor) left).getName().compareTo(\n-                            ((PropertyDescriptor) right).getName());\n-                    }\n-                });\n-                propertyDescriptors = descriptors;\n-            }\n-            catch (IntrospectionException ex) {\n-                ex.printStackTrace();\n             }\n         }\n         return propertyDescriptors;", "timestamp": 1201984171, "metainfo": ""}