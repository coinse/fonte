{"sha": "10cb322e1c2fc92d4c2fb9580eb4435dc7242f3d", "log": "Implemented the ends-with function (JXPATH-132)  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/Compiler.java\n+++ b/src/java/org/apache/commons/jxpath/ri/Compiler.java\n     public static final int FUNCTION_NULL = 28;\n     public static final int FUNCTION_KEY = 29;\n     public static final int FUNCTION_FORMAT_NUMBER = 30;\n+    \n+    public static final int FUNCTION_ENDS_WITH = 31;\n \n     /**\n      * Produces an EXPRESSION object that represents a numeric constant.\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java\n                 return \"concat\";\n             case Compiler.FUNCTION_STARTS_WITH :\n                 return \"starts-with\";\n+            case Compiler.FUNCTION_ENDS_WITH :\n+                return \"ends-with\";\n             case Compiler.FUNCTION_CONTAINS :\n                 return \"contains\";\n             case Compiler.FUNCTION_SUBSTRING_BEFORE :\n             case Compiler.FUNCTION_ID:\n             case Compiler.FUNCTION_CONCAT:\n             case Compiler.FUNCTION_STARTS_WITH:\n+            case Compiler.FUNCTION_ENDS_WITH:\n             case Compiler.FUNCTION_CONTAINS:\n             case Compiler.FUNCTION_SUBSTRING_BEFORE:\n             case Compiler.FUNCTION_SUBSTRING_AFTER:\n                 return functionConcat(context);\n             case Compiler.FUNCTION_STARTS_WITH :\n                 return functionStartsWith(context);\n+            case Compiler.FUNCTION_ENDS_WITH :\n+                return functionEndsWith(context);\n             case Compiler.FUNCTION_CONTAINS :\n                 return functionContains(context);\n             case Compiler.FUNCTION_SUBSTRING_BEFORE :\n     }\n \n     /**\n+     * ends-with() implementation.\n+     * @param context evaluation context\n+     * @return Boolean\n+     * @since 1.4\n+     */\n+    protected Object functionEndsWith(EvalContext context) {\n+        assertArgCount(2);\n+        String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));\n+        String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));\n+        return s1.endsWith(s2) ? Boolean.TRUE : Boolean.FALSE;\n+    }\n+\n+    /**\n      * contains() implementation.\n      * @param context evaluation context\n      * @return Boolean\n--- a/src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java\n+++ b/src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java\n     case FUNCTION_STARTS_WITH:\n       jj_consume_token(FUNCTION_STARTS_WITH);\n       break;\n+    case FUNCTION_ENDS_WITH:\n+      jj_consume_token(FUNCTION_ENDS_WITH);\n+      break;\n     case FUNCTION_CONTAINS:\n       jj_consume_token(FUNCTION_CONTAINS);\n       break;\n       jj_consume_token(FUNCTION_STARTS_WITH);\n                                       code = Compiler.FUNCTION_STARTS_WITH;\n       break;\n+    case FUNCTION_ENDS_WITH:\n+      jj_consume_token(FUNCTION_ENDS_WITH);\n+                                      code = Compiler.FUNCTION_ENDS_WITH;\n+      break;\n     case FUNCTION_CONTAINS:\n       jj_consume_token(FUNCTION_CONTAINS);\n                                       code = Compiler.FUNCTION_CONTAINS;\n  String nc1, nc2 = null;\n     nc1 = NCName();\n     switch (jj_nt.kind) {\n-    case 79:\n-      jj_consume_token(79);\n+    case 80:\n+      jj_consume_token(80);\n       nc2 = NCName();\n       break;\n     default:\n     String nc1, nc2 = null;\n     if (jj_2_1(2147483647)) {\n       nc1 = NCName();\n-      jj_consume_token(79);\n+      jj_consume_token(80);\n       nc2 = NCName();\n     } else {\n       switch (jj_nt.kind) {\n     case FUNCTION_STRING:\n     case FUNCTION_CONCAT:\n     case FUNCTION_STARTS_WITH:\n+    case FUNCTION_ENDS_WITH:\n     case FUNCTION_CONTAINS:\n     case FUNCTION_SUBSTRING_BEFORE:\n     case FUNCTION_SUBSTRING_AFTER:\n     case FUNCTION_ROUND:\n     case FUNCTION_FORMAT_NUMBER:\n     case NCName:\n-    case 82:\n     case 83:\n-    case 86:\n-    case 88:\n+    case 84:\n+    case 87:\n+    case 89:\n       ex = RelativeLocationPath();\n       break;\n     case SLASH:\n     case FUNCTION_STRING:\n     case FUNCTION_CONCAT:\n     case FUNCTION_STARTS_WITH:\n+    case FUNCTION_ENDS_WITH:\n     case FUNCTION_CONTAINS:\n     case FUNCTION_SUBSTRING_BEFORE:\n     case FUNCTION_SUBSTRING_AFTER:\n     case FUNCTION_ROUND:\n     case FUNCTION_FORMAT_NUMBER:\n     case NCName:\n-    case 86:\n-    case 88:\n+    case 87:\n+    case 89:\n       axis = AxisSpecifier();\n       if (jj_2_3(2147483647)) {\n         type = NodeType();\n-        jj_consume_token(80);\n         jj_consume_token(81);\n+        jj_consume_token(82);\n       } else if (jj_2_4(2147483647)) {\n         jj_consume_token(PI);\n-        jj_consume_token(80);\n+        jj_consume_token(81);\n         jj_consume_token(Literal);\n                     instruction = unescape(token.image.substring(1, token.image.length() - 1));\n-        jj_consume_token(81);\n+        jj_consume_token(82);\n       } else {\n         switch (jj_nt.kind) {\n         case OR:\n         case FUNCTION_STRING:\n         case FUNCTION_CONCAT:\n         case FUNCTION_STARTS_WITH:\n+        case FUNCTION_ENDS_WITH:\n         case FUNCTION_CONTAINS:\n         case FUNCTION_SUBSTRING_BEFORE:\n         case FUNCTION_SUBSTRING_AFTER:\n         case FUNCTION_ROUND:\n         case FUNCTION_FORMAT_NUMBER:\n         case NCName:\n-        case 88:\n+        case 89:\n           name = WildcardName();\n           break;\n         default:\n         }\n       }\n       break;\n-    case 82:\n-      jj_consume_token(82);\n+    case 83:\n+      jj_consume_token(83);\n                     axis = Compiler.AXIS_SELF;\n                     type = Compiler.NODE_TYPE_NODE;\n       break;\n-    case 83:\n-      jj_consume_token(83);\n+    case 84:\n+      jj_consume_token(84);\n                     axis = Compiler.AXIS_PARENT;\n                     type = Compiler.NODE_TYPE_NODE;\n       break;\n     label_3:\n     while (true) {\n       switch (jj_nt.kind) {\n-      case 84:\n+      case 85:\n         ;\n         break;\n       default:\n /* [9] PredicateExpr ::=  Expr  */\n   final public Object Predicate() throws ParseException {\n     Object ex;\n-    jj_consume_token(84);\n+    jj_consume_token(85);\n     ex = Expression();\n-    jj_consume_token(85);\n+    jj_consume_token(86);\n         {if (true) return ex;}\n     throw new Error(\"Missing return statement in function\");\n   }\n   final public int AbbreviatedAxisSpecifier() throws ParseException {\n     int axis = Compiler.AXIS_CHILD;\n     switch (jj_nt.kind) {\n-    case 86:\n-      jj_consume_token(86);\n+    case 87:\n+      jj_consume_token(87);\n            axis = Compiler.AXIS_ATTRIBUTE;\n       break;\n     default:\n     case VARIABLE:\n       ex = VariableReference();\n       break;\n-    case 80:\n-      jj_consume_token(80);\n+    case 81:\n+      jj_consume_token(81);\n       ex = Expression();\n-      jj_consume_token(81);\n+      jj_consume_token(82);\n       break;\n     case Literal:\n       jj_consume_token(Literal);\n         case FUNCTION_STRING:\n         case FUNCTION_CONCAT:\n         case FUNCTION_STARTS_WITH:\n+        case FUNCTION_ENDS_WITH:\n         case FUNCTION_CONTAINS:\n         case FUNCTION_SUBSTRING_BEFORE:\n         case FUNCTION_SUBSTRING_AFTER:\n   final public ArrayList ArgumentList() throws ParseException {\n     ArrayList args = null;\n     Object arg;\n-    jj_consume_token(80);\n+    jj_consume_token(81);\n     switch (jj_nt.kind) {\n     case SLASH:\n     case SLASHSLASH:\n     case FUNCTION_STRING:\n     case FUNCTION_CONCAT:\n     case FUNCTION_STARTS_WITH:\n+    case FUNCTION_ENDS_WITH:\n     case FUNCTION_CONTAINS:\n     case FUNCTION_SUBSTRING_BEFORE:\n     case FUNCTION_SUBSTRING_AFTER:\n     case FUNCTION_ROUND:\n     case FUNCTION_FORMAT_NUMBER:\n     case NCName:\n-    case 80:\n-    case 82:\n+    case 81:\n     case 83:\n-    case 86:\n-    case 88:\n+    case 84:\n+    case 87:\n+    case 89:\n       arg = Argument();\n                                 args = new ArrayList(); args.add(arg);\n       label_4:\n       while (true) {\n         switch (jj_nt.kind) {\n-        case 87:\n+        case 88:\n           ;\n           break;\n         default:\n           jj_la1[18] = jj_gen;\n           break label_4;\n         }\n-        jj_consume_token(87);\n+        jj_consume_token(88);\n         arg = Argument();\n                                        args.add(arg);\n       }\n       jj_la1[19] = jj_gen;\n       ;\n     }\n-    jj_consume_token(81);\n+    jj_consume_token(82);\n         {if (true) return args;}\n     throw new Error(\"Missing return statement in function\");\n   }\n       case FUNCTION_STRING:\n       case FUNCTION_CONCAT:\n       case FUNCTION_STARTS_WITH:\n+      case FUNCTION_ENDS_WITH:\n       case FUNCTION_CONTAINS:\n       case FUNCTION_SUBSTRING_BEFORE:\n       case FUNCTION_SUBSTRING_AFTER:\n       case FUNCTION_ROUND:\n       case FUNCTION_FORMAT_NUMBER:\n       case NCName:\n-      case 82:\n       case 83:\n-      case 86:\n-      case 88:\n+      case 84:\n+      case 87:\n+      case 89:\n         ex = LocationPath();\n         break;\n       default:\n     label_6:\n     while (true) {\n       switch (jj_nt.kind) {\n-      case 84:\n+      case 85:\n         ;\n         break;\n       default:\n       switch (jj_nt.kind) {\n       case MOD:\n       case DIV:\n-      case 88:\n+      case 89:\n         ;\n         break;\n       default:\n         break label_14;\n       }\n       switch (jj_nt.kind) {\n-      case 88:\n-        jj_consume_token(88);\n+      case 89:\n+        jj_consume_token(89);\n         r = UnaryExpr();\n                                     ex = compiler.multiply(ex, r);\n         break;\n     case FUNCTION_STRING:\n     case FUNCTION_CONCAT:\n     case FUNCTION_STARTS_WITH:\n+    case FUNCTION_ENDS_WITH:\n     case FUNCTION_CONTAINS:\n     case FUNCTION_SUBSTRING_BEFORE:\n     case FUNCTION_SUBSTRING_AFTER:\n     case FUNCTION_ROUND:\n     case FUNCTION_FORMAT_NUMBER:\n     case NCName:\n-    case 80:\n-    case 82:\n+    case 81:\n     case 83:\n-    case 86:\n-    case 88:\n+    case 84:\n+    case 87:\n+    case 89:\n       ex = UnionExpr();\n       break;\n     case MINUS:\n     Object qn;\n     String nc1, nc2 = null;\n     switch (jj_nt.kind) {\n-    case 88:\n-      jj_consume_token(88);\n+    case 89:\n+      jj_consume_token(89);\n       break;\n     case OR:\n     case AND:\n     case FUNCTION_STRING:\n     case FUNCTION_CONCAT:\n     case FUNCTION_STARTS_WITH:\n+    case FUNCTION_ENDS_WITH:\n     case FUNCTION_CONTAINS:\n     case FUNCTION_SUBSTRING_BEFORE:\n     case FUNCTION_SUBSTRING_AFTER:\n     }\n                            nc1 = token.image;\n     switch (jj_nt.kind) {\n-    case 79:\n-      jj_consume_token(79);\n+    case 80:\n+      jj_consume_token(80);\n       switch (jj_nt.kind) {\n-      case 88:\n-        jj_consume_token(88);\n+      case 89:\n+        jj_consume_token(89);\n         break;\n       case OR:\n       case AND:\n       case FUNCTION_STRING:\n       case FUNCTION_CONCAT:\n       case FUNCTION_STARTS_WITH:\n+      case FUNCTION_ENDS_WITH:\n       case FUNCTION_CONTAINS:\n       case FUNCTION_SUBSTRING_BEFORE:\n       case FUNCTION_SUBSTRING_AFTER:\n \n   final private boolean jj_2_1(int xla) {\n     jj_la = xla; jj_lastpos = jj_scanpos = token;\n-    boolean retval = !jj_3_1();\n-    jj_save(0, xla);\n-    return retval;\n+    try { return !jj_3_1(); }\n+    catch(LookaheadSuccess ls) { return true; }\n+    finally { jj_save(0, xla); }\n   }\n \n   final private boolean jj_2_2(int xla) {\n     jj_la = xla; jj_lastpos = jj_scanpos = token;\n-    boolean retval = !jj_3_2();\n-    jj_save(1, xla);\n-    return retval;\n+    try { return !jj_3_2(); }\n+    catch(LookaheadSuccess ls) { return true; }\n+    finally { jj_save(1, xla); }\n   }\n \n   final private boolean jj_2_3(int xla) {\n     jj_la = xla; jj_lastpos = jj_scanpos = token;\n-    boolean retval = !jj_3_3();\n-    jj_save(2, xla);\n-    return retval;\n+    try { return !jj_3_3(); }\n+    catch(LookaheadSuccess ls) { return true; }\n+    finally { jj_save(2, xla); }\n   }\n \n   final private boolean jj_2_4(int xla) {\n     jj_la = xla; jj_lastpos = jj_scanpos = token;\n-    boolean retval = !jj_3_4();\n-    jj_save(3, xla);\n-    return retval;\n+    try { return !jj_3_4(); }\n+    catch(LookaheadSuccess ls) { return true; }\n+    finally { jj_save(3, xla); }\n   }\n \n   final private boolean jj_2_5(int xla) {\n     jj_la = xla; jj_lastpos = jj_scanpos = token;\n-    boolean retval = !jj_3_5();\n-    jj_save(4, xla);\n-    return retval;\n+    try { return !jj_3_5(); }\n+    catch(LookaheadSuccess ls) { return true; }\n+    finally { jj_save(4, xla); }\n   }\n \n   final private boolean jj_2_6(int xla) {\n     jj_la = xla; jj_lastpos = jj_scanpos = token;\n-    boolean retval = !jj_3_6();\n-    jj_save(5, xla);\n-    return retval;\n-  }\n-\n-  final private boolean jj_3R_65() {\n-    if (jj_scan_token(FUNCTION_ID)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_104() {\n-    if (jj_3R_118()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_64() {\n-    if (jj_scan_token(FUNCTION_COUNT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_63() {\n-    if (jj_scan_token(FUNCTION_POSITION)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_62() {\n-    if (jj_scan_token(FUNCTION_LAST)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_18() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_62()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_63()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_64()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_65()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_66()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_67()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_68()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_69()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_70()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_71()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_72()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_73()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_74()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_75()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_76()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_77()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_78()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_79()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_80()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_81()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_82()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_83()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_84()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_85()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_86()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_87()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_88()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_89()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_90()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_91()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_111() {\n-    if (jj_scan_token(DIV)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_110() {\n-    if (jj_scan_token(MOD)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_109() {\n-    if (jj_scan_token(AND)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_108() {\n-    if (jj_scan_token(OR)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_107() {\n-    if (jj_scan_token(NCName)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_173() {\n-    if (jj_scan_token(MINUS)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_170()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_98() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_107()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_108()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_109()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_110()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_111()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_171() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_174()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_175()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_176()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_172() {\n-    if (jj_3R_177()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_153() {\n-    if (jj_scan_token(86)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_130() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_153()) jj_scanpos = xsp;\n-    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_54() {\n-    if (jj_scan_token(FUNCTION_FORMAT_NUMBER)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_170() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_172()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_173()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_53() {\n-    if (jj_scan_token(FUNCTION_KEY)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_52() {\n-    if (jj_scan_token(FUNCTION_ROUND)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_51() {\n-    if (jj_scan_token(FUNCTION_CEILING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_50() {\n-    if (jj_scan_token(FUNCTION_FLOOR)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_49() {\n-    if (jj_scan_token(FUNCTION_SUM)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_48() {\n-    if (jj_scan_token(FUNCTION_NUMBER)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_176() {\n-    if (jj_scan_token(MOD)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_170()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_47() {\n-    if (jj_scan_token(FUNCTION_LANG)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_175() {\n-    if (jj_scan_token(DIV)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_170()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_46() {\n-    if (jj_scan_token(FUNCTION_NULL)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_174() {\n-    if (jj_scan_token(88)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_170()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_45() {\n-    if (jj_scan_token(FUNCTION_FALSE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_44() {\n-    if (jj_scan_token(FUNCTION_TRUE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_43() {\n-    if (jj_scan_token(FUNCTION_NOT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_42() {\n-    if (jj_scan_token(FUNCTION_BOOLEAN)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_41() {\n-    if (jj_scan_token(FUNCTION_TRANSLATE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_116() {\n-    if (jj_scan_token(84)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_104()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(85)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_40() {\n-    if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_39() {\n-    if (jj_scan_token(FUNCTION_STRING_LENGTH)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_38() {\n-    if (jj_scan_token(FUNCTION_SUBSTRING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_37() {\n-    if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_36() {\n-    if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_168() {\n-    if (jj_3R_170()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    try { return !jj_3_6(); }\n+    catch(LookaheadSuccess ls) { return true; }\n+    finally { jj_save(5, xla); }\n+  }\n+\n+  final private boolean jj_3_2() {\n+    if (jj_3R_16()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_144() {\n+    if (jj_3R_16()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_143() {\n+    if (jj_3R_77()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_150() {\n+    if (jj_3R_16()) return true;\n     Token xsp;\n     while (true) {\n       xsp = jj_scanpos;\n-      if (jj_3R_171()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_35() {\n-    if (jj_scan_token(FUNCTION_CONTAINS)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_34() {\n-    if (jj_scan_token(FUNCTION_STARTS_WITH)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_33() {\n-    if (jj_scan_token(FUNCTION_CONCAT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_32() {\n-    if (jj_scan_token(FUNCTION_STRING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_31() {\n-    if (jj_scan_token(FUNCTION_NAME)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_30() {\n-    if (jj_scan_token(FUNCTION_NAMESPACE_URI)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_29() {\n-    if (jj_scan_token(FUNCTION_LOCAL_NAME)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_169() {\n+      if (jj_3R_151()) { jj_scanpos = xsp; break; }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_132() {\n     if (jj_scan_token(MINUS)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_168()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_28() {\n-    if (jj_scan_token(FUNCTION_ID)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_27() {\n-    if (jj_scan_token(FUNCTION_COUNT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_152() {\n-    if (jj_scan_token(AXIS_DESCENDANT_OR_SELF)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_26() {\n-    if (jj_scan_token(FUNCTION_POSITION)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_25() {\n-    if (jj_scan_token(FUNCTION_LAST)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_151() {\n-    if (jj_scan_token(AXIS_PRECEDING_SIBLING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_24() {\n-    if (jj_scan_token(PI)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_150() {\n-    if (jj_scan_token(AXIS_FOLLOWING_SIBLING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_23() {\n-    if (jj_scan_token(COMMENT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_149() {\n-    if (jj_scan_token(AXIS_ANCESTOR_OR_SELF)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_163() {\n-    if (jj_scan_token(PLUS)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_162()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_22() {\n-    if (jj_scan_token(TEXT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_129()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_130() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_133()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_134()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_135()) return true;\n+    }\n+    }\n     return false;\n   }\n \n   final private boolean jj_3R_148() {\n-    if (jj_scan_token(AXIS_DESCENDANT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_21() {\n-    if (jj_scan_token(NODE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_147() {\n-    if (jj_scan_token(AXIS_FOLLOWING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_20() {\n-    if (jj_3R_98()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_146() {\n-    if (jj_scan_token(AXIS_PRECEDING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_145() {\n-    if (jj_scan_token(AXIS_NAMESPACE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_162() {\n-    if (jj_3R_168()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_150()) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(6)) return true;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_131() {\n+    if (jj_3R_136()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_64() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_scan_token(79)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(27)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(28)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(29)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(30)) return true;\n+    }\n+    }\n+    }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_113() {\n+    if (jj_scan_token(87)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_91() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_113()) jj_scanpos = xsp;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_141() {\n+    if (jj_3R_19()) return true;\n     Token xsp;\n     while (true) {\n       xsp = jj_scanpos;\n-      if (jj_3R_169()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_144() {\n+      if (jj_3R_143()) { jj_scanpos = xsp; break; }\n+    }\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_144()) { jj_scanpos = xsp; break; }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_129() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_131()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_132()) return true;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3_6() {\n+    if (jj_3R_19()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_146() {\n+    if (jj_3R_148()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_135() {\n+    if (jj_scan_token(MOD)) return true;\n+    if (jj_3R_129()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_145() {\n+    if (jj_3R_147()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_134() {\n+    if (jj_scan_token(DIV)) return true;\n+    if (jj_3R_129()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_133() {\n+    if (jj_scan_token(89)) return true;\n+    if (jj_3R_129()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_142() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_145()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_146()) return true;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_140() {\n+    if (jj_3R_142()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_139() {\n+    if (jj_3R_141()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_77() {\n+    if (jj_scan_token(85)) return true;\n+    if (jj_3R_70()) return true;\n+    if (jj_scan_token(86)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_127() {\n+    if (jj_3R_129()) return true;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_130()) { jj_scanpos = xsp; break; }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_137() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_139()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_140()) return true;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_128() {\n+    if (jj_scan_token(MINUS)) return true;\n+    if (jj_3R_127()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_112() {\n+    if (jj_scan_token(AXIS_DESCENDANT_OR_SELF)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_111() {\n+    if (jj_scan_token(AXIS_PRECEDING_SIBLING)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_110() {\n+    if (jj_scan_token(AXIS_FOLLOWING_SIBLING)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_122() {\n+    if (jj_scan_token(PLUS)) return true;\n+    if (jj_3R_121()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_109() {\n+    if (jj_scan_token(AXIS_ANCESTOR_OR_SELF)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_108() {\n+    if (jj_scan_token(AXIS_DESCENDANT)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_107() {\n+    if (jj_scan_token(AXIS_FOLLOWING)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_106() {\n+    if (jj_scan_token(AXIS_PRECEDING)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_121() {\n+    if (jj_3R_127()) return true;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_128()) { jj_scanpos = xsp; break; }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_105() {\n+    if (jj_scan_token(AXIS_NAMESPACE)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_104() {\n     if (jj_scan_token(AXIS_ATTRIBUTE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_143() {\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_103() {\n     if (jj_scan_token(AXIS_ANCESTOR)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_142() {\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_20() {\n+    if (jj_3R_64()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_102() {\n     if (jj_scan_token(AXIS_PARENT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_101() {\n+    if (jj_scan_token(AXIS_CHILD)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_100() {\n+    if (jj_scan_token(AXIS_SELF)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_138() {\n+    if (jj_scan_token(UNION)) return true;\n+    if (jj_3R_137()) return true;\n     return false;\n   }\n \n     xsp = jj_scanpos;\n     if (jj_3R_20()) {\n     jj_scanpos = xsp;\n-    if (jj_3R_21()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_22()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_23()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_24()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_25()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_26()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_27()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_28()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_29()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_30()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_31()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_32()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_33()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_34()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_35()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_36()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_37()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_38()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_39()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_40()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_41()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_42()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_43()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_44()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_45()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_46()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_47()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_48()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_49()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_50()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_51()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_52()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_53()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_54()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_141() {\n-    if (jj_scan_token(AXIS_CHILD)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_140() {\n-    if (jj_scan_token(AXIS_SELF)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_129() {\n+    if (jj_scan_token(31)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(32)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(33)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(34)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(48)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(49)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(50)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(51)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(53)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(54)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(55)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(56)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(57)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(58)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(59)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(60)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(61)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(62)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(63)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(64)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(65)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(66)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(67)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(68)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(69)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(70)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(71)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(72)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(73)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(74)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(75)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(76)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(77)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(52)) {\n+    jj_scanpos = xsp;\n+    if (jj_scan_token(78)) return true;\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_90() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_140()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_141()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_142()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_143()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_144()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_145()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_146()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_147()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_148()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_149()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_150()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_151()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_152()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_159() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_164()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_165()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_166()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_167()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_158() {\n-    if (jj_3R_162()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_100()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_101()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_102()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_103()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_104()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_105()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_106()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_107()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_108()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_109()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_110()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_111()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_112()) return true;\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_136() {\n+    if (jj_3R_137()) return true;\n     Token xsp;\n     while (true) {\n       xsp = jj_scanpos;\n-      if (jj_3R_163()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_122() {\n-    if (jj_3R_130()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_121() {\n-    if (jj_3R_129()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_167() {\n-    if (jj_scan_token(GTE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_158()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_112() {\n+      if (jj_3R_138()) { jj_scanpos = xsp; break; }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_118() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_121()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_122()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_166() {\n-    if (jj_scan_token(LTE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_158()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_165() {\n-    if (jj_scan_token(GT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_158()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_157() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_160()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_161()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_164() {\n-    if (jj_scan_token(LT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_158()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_156() {\n-    if (jj_3R_158()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_123()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_124()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_125()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_126()) return true;\n+    }\n+    }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_117() {\n+    if (jj_3R_121()) return true;\n     Token xsp;\n     while (true) {\n       xsp = jj_scanpos;\n-      if (jj_3R_159()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_161() {\n+      if (jj_3R_122()) { jj_scanpos = xsp; break; }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_83() {\n+    if (jj_3R_91()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_82() {\n+    if (jj_3R_90()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_96() {\n+    if (jj_3R_70()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_126() {\n+    if (jj_scan_token(GTE)) return true;\n+    if (jj_3R_117()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_97() {\n+    if (jj_scan_token(88)) return true;\n+    if (jj_3R_96()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_125() {\n+    if (jj_scan_token(LTE)) return true;\n+    if (jj_3R_117()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_73() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_82()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_83()) return true;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_124() {\n+    if (jj_scan_token(GT)) return true;\n+    if (jj_3R_117()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_116() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_119()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_120()) return true;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_123() {\n+    if (jj_scan_token(LT)) return true;\n+    if (jj_3R_117()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_88() {\n+    if (jj_3R_96()) return true;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_97()) { jj_scanpos = xsp; break; }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_115() {\n+    if (jj_3R_117()) return true;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_118()) { jj_scanpos = xsp; break; }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_26() {\n+    if (jj_scan_token(PI)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_80() {\n+    if (jj_scan_token(81)) return true;\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_88()) jj_scanpos = xsp;\n+    if (jj_scan_token(82)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_25() {\n+    if (jj_scan_token(COMMENT)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_24() {\n+    if (jj_scan_token(NODE)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_120() {\n     if (jj_scan_token(NEQ)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_156()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_160() {\n+    if (jj_3R_115()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_23() {\n+    if (jj_scan_token(TEXT)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_119() {\n     if (jj_scan_token(EQ)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_156()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_102() {\n-    if (jj_3R_116()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_115()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_68() {\n+    if (jj_3R_77()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3_1() {\n+    if (jj_3R_15()) return true;\n+    if (jj_scan_token(80)) return true;\n     return false;\n   }\n \n   final private boolean jj_3_4() {\n     if (jj_scan_token(PI)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3_3() {\n     if (jj_3R_17()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(80)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     if (jj_scan_token(81)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_101() {\n+    if (jj_scan_token(82)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_17() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_23()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_24()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_25()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_26()) return true;\n+    }\n+    }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_67() {\n+    if (jj_scan_token(84)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_114() {\n+    if (jj_3R_15()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_66() {\n     if (jj_scan_token(83)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_100() {\n-    if (jj_scan_token(82)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_115() {\n-    if (jj_3R_123()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_134() {\n-    if (jj_3R_156()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_94() {\n+    if (jj_3R_115()) return true;\n     Token xsp;\n     while (true) {\n       xsp = jj_scanpos;\n-      if (jj_3R_157()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_114() {\n+      if (jj_3R_116()) { jj_scanpos = xsp; break; }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_76() {\n+    if (jj_3R_84()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_99() {\n+    if (jj_3R_64()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_98() {\n+    if (jj_3R_15()) return true;\n+    if (jj_scan_token(80)) return true;\n+    if (jj_3R_15()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_75() {\n     if (jj_scan_token(PI)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(81)) return true;\n+    if (jj_scan_token(Literal)) return true;\n+    if (jj_scan_token(82)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_92() {\n+    if (jj_3R_15()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_74() {\n+    if (jj_3R_17()) return true;\n+    if (jj_scan_token(81)) return true;\n+    if (jj_scan_token(82)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_71() {\n+    if (jj_3R_18()) return true;\n+    if (jj_3R_80()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_93() {\n     if (jj_scan_token(80)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(Literal)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(81)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_113() {\n-    if (jj_3R_17()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_scan_token(89)) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_114()) return true;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_65() {\n+    if (jj_3R_73()) return true;\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_74()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_75()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_76()) return true;\n+    }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_85() {\n     if (jj_scan_token(80)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(81)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_99() {\n-    if (jj_3R_112()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_15()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_89() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_113()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_114()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_115()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_135() {\n+    if (jj_3R_98()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_99()) return true;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_95() {\n     if (jj_scan_token(AND)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_134()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_57() {\n+    if (jj_3R_94()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_84() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_99()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_100()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_101()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(89)) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_92()) return true;\n+    }\n+    xsp = jj_scanpos;\n+    if (jj_3R_93()) jj_scanpos = xsp;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_22() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_65()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_66()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_67()) return true;\n+    }\n+    }\n     while (true) {\n       xsp = jj_scanpos;\n-      if (jj_3R_102()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_125() {\n-    if (jj_3R_134()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+      if (jj_3R_68()) { jj_scanpos = xsp; break; }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_72() {\n+    if (jj_3R_81()) return true;\n+    if (jj_3R_80()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_86() {\n+    if (jj_3R_94()) return true;\n     Token xsp;\n     while (true) {\n       xsp = jj_scanpos;\n-      if (jj_3R_135()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_193() {\n+      if (jj_3R_95()) { jj_scanpos = xsp; break; }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_151() {\n     if (jj_3R_16()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3_5() {\n+    if (jj_3R_18()) return true;\n+    if (jj_scan_token(81)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_78() {\n+    if (jj_3R_15()) return true;\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_85()) jj_scanpos = xsp;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_69() {\n+    if (jj_scan_token(VARIABLE)) return true;\n+    if (jj_3R_78()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_57() {\n+    if (jj_scan_token(FUNCTION_FORMAT_NUMBER)) return true;\n     return false;\n   }\n \n   final private boolean jj_3R_56() {\n+    if (jj_scan_token(FUNCTION_KEY)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_55() {\n+    if (jj_scan_token(FUNCTION_ROUND)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_63() {\n+    if (jj_3R_72()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_54() {\n+    if (jj_scan_token(FUNCTION_CEILING)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_62() {\n+    if (jj_3R_71()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_53() {\n+    if (jj_scan_token(FUNCTION_FLOOR)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_61() {\n+    if (jj_scan_token(Number)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_52() {\n+    if (jj_scan_token(FUNCTION_SUM)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_21() {\n     if (jj_scan_token(SLASHSLASH)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_55() {\n-    if (jj_scan_token(SLASH)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_126() {\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_60() {\n+    if (jj_scan_token(Literal)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_51() {\n+    if (jj_scan_token(FUNCTION_NUMBER)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_59() {\n+    if (jj_scan_token(81)) return true;\n+    if (jj_3R_70()) return true;\n+    if (jj_scan_token(82)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_87() {\n     if (jj_scan_token(OR)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_125()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_86()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_50() {\n+    if (jj_scan_token(FUNCTION_LANG)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_58() {\n+    if (jj_3R_69()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_81() {\n+    if (jj_3R_89()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_49() {\n+    if (jj_scan_token(FUNCTION_NULL)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_48() {\n+    if (jj_scan_token(FUNCTION_FALSE)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_47() {\n+    if (jj_scan_token(FUNCTION_TRUE)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_46() {\n+    if (jj_scan_token(FUNCTION_NOT)) return true;\n     return false;\n   }\n \n   final private boolean jj_3R_16() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_55()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_56()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_57()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_190() {\n+    if (jj_scan_token(6)) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_21()) return true;\n+    }\n+    if (jj_3R_22()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_149() {\n     if (jj_3R_16()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_118() {\n-    if (jj_3R_125()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_45() {\n+    if (jj_scan_token(FUNCTION_BOOLEAN)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_44() {\n+    if (jj_scan_token(FUNCTION_TRANSLATE)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_19() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_58()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_59()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_60()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_61()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_62()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_63()) return true;\n+    }\n+    }\n+    }\n+    }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_43() {\n+    if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_42() {\n+    if (jj_scan_token(FUNCTION_STRING_LENGTH)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_41() {\n+    if (jj_scan_token(FUNCTION_SUBSTRING)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_40() {\n+    if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_79() {\n+    if (jj_3R_86()) return true;\n     Token xsp;\n     while (true) {\n       xsp = jj_scanpos;\n-      if (jj_3R_126()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_188() {\n-    if (jj_3R_57()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+      if (jj_3R_87()) { jj_scanpos = xsp; break; }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_39() {\n+    if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_38() {\n+    if (jj_scan_token(FUNCTION_CONTAINS)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_37() {\n+    if (jj_scan_token(FUNCTION_ENDS_WITH)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_36() {\n+    if (jj_scan_token(FUNCTION_STARTS_WITH)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_35() {\n+    if (jj_scan_token(FUNCTION_CONCAT)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_34() {\n+    if (jj_scan_token(FUNCTION_STRING)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_33() {\n+    if (jj_scan_token(FUNCTION_NAME)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_32() {\n+    if (jj_scan_token(FUNCTION_NAMESPACE_URI)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_31() {\n+    if (jj_scan_token(FUNCTION_LOCAL_NAME)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_70() {\n+    if (jj_3R_79()) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_30() {\n+    if (jj_scan_token(FUNCTION_ID)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_29() {\n+    if (jj_scan_token(FUNCTION_COUNT)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_28() {\n+    if (jj_scan_token(FUNCTION_POSITION)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_27() {\n+    if (jj_scan_token(FUNCTION_LAST)) return true;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_147() {\n+    if (jj_3R_22()) return true;\n     Token xsp;\n     while (true) {\n       xsp = jj_scanpos;\n-      if (jj_3R_190()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3_2() {\n-    if (jj_3R_16()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_185() {\n-    if (jj_3R_16()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_192() {\n-    if (jj_scan_token(SLASH)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_191() {\n-    if (jj_3R_16()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_193()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_184() {\n-    if (jj_3R_116()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_189() {\n+      if (jj_3R_149()) { jj_scanpos = xsp; break; }\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_18() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_191()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_192()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_182() {\n-    if (jj_3R_19()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_184()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_185()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3_6() {\n-    if (jj_3R_19()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_187() {\n-    if (jj_3R_189()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_186() {\n-    if (jj_3R_188()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_183() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_186()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_187()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_181() {\n-    if (jj_3R_183()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_180() {\n-    if (jj_3R_182()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_178() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_180()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_181()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_179() {\n-    if (jj_scan_token(UNION)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_178()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_177() {\n-    if (jj_3R_178()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_179()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_136() {\n-    if (jj_3R_104()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_137() {\n-    if (jj_scan_token(87)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_136()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_127() {\n-    if (jj_3R_136()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_137()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_119() {\n-    if (jj_scan_token(80)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_127()) jj_scanpos = xsp;\n-    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(81)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_61() {\n-    if (jj_scan_token(PI)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_60() {\n-    if (jj_scan_token(COMMENT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_59() {\n-    if (jj_scan_token(NODE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_58() {\n-    if (jj_scan_token(TEXT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3_1() {\n-    if (jj_3R_15()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(79)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_17() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_58()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_59()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_60()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_61()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_155() {\n-    if (jj_3R_15()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_139() {\n-    if (jj_3R_98()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_138() {\n-    if (jj_3R_15()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(79)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_15()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_154() {\n-    if (jj_scan_token(88)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_132() {\n-    if (jj_3R_15()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_105() {\n-    if (jj_3R_18()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_119()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_124() {\n-    if (jj_scan_token(79)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_15()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_133() {\n-    if (jj_scan_token(79)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_154()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_155()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_128() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_138()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_139()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_131() {\n-    if (jj_scan_token(88)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_123() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_131()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_132()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    xsp = jj_scanpos;\n-    if (jj_3R_133()) jj_scanpos = xsp;\n-    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_106() {\n-    if (jj_3R_120()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_119()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_117() {\n-    if (jj_3R_15()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_124()) jj_scanpos = xsp;\n-    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3_5() {\n-    if (jj_3R_18()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(80)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_103() {\n-    if (jj_scan_token(VARIABLE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_117()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_91() {\n-    if (jj_scan_token(FUNCTION_FORMAT_NUMBER)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_90() {\n-    if (jj_scan_token(FUNCTION_KEY)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_89() {\n-    if (jj_scan_token(FUNCTION_ROUND)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_88() {\n-    if (jj_scan_token(FUNCTION_CEILING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_97() {\n-    if (jj_3R_106()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_87() {\n-    if (jj_scan_token(FUNCTION_FLOOR)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_96() {\n-    if (jj_3R_105()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_86() {\n-    if (jj_scan_token(FUNCTION_SUM)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_95() {\n-    if (jj_scan_token(Number)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_85() {\n-    if (jj_scan_token(FUNCTION_NUMBER)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_94() {\n-    if (jj_scan_token(Literal)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_84() {\n-    if (jj_scan_token(FUNCTION_LANG)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_93() {\n-    if (jj_scan_token(80)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_104()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(81)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_83() {\n-    if (jj_scan_token(FUNCTION_NULL)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_92() {\n-    if (jj_3R_103()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_82() {\n-    if (jj_scan_token(FUNCTION_FALSE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_81() {\n-    if (jj_scan_token(FUNCTION_TRUE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_120() {\n-    if (jj_3R_128()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_80() {\n-    if (jj_scan_token(FUNCTION_NOT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_79() {\n-    if (jj_scan_token(FUNCTION_BOOLEAN)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_78() {\n-    if (jj_scan_token(FUNCTION_TRANSLATE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_77() {\n-    if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_19() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_92()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_93()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_94()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_95()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_96()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_97()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_76() {\n-    if (jj_scan_token(FUNCTION_STRING_LENGTH)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_75() {\n-    if (jj_scan_token(FUNCTION_SUBSTRING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_74() {\n-    if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_73() {\n-    if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_72() {\n-    if (jj_scan_token(FUNCTION_CONTAINS)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_71() {\n-    if (jj_scan_token(FUNCTION_STARTS_WITH)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_70() {\n-    if (jj_scan_token(FUNCTION_CONCAT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_69() {\n-    if (jj_scan_token(FUNCTION_STRING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_68() {\n-    if (jj_scan_token(FUNCTION_NAME)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_67() {\n-    if (jj_scan_token(FUNCTION_NAMESPACE_URI)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_66() {\n-    if (jj_scan_token(FUNCTION_LOCAL_NAME)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_27()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_28()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_29()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_30()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_31()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_32()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_33()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_34()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_35()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_36()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_37()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_38()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_39()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_40()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_41()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_42()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_43()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_44()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_45()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_46()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_47()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_48()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_49()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_50()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_51()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_52()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_53()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_54()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_55()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_56()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_57()) return true;\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n     return false;\n   }\n \n       jj_la1_1 = new int[] {0xffff0007,0x0,0xffff0000,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0xffff0007,0xffffffff,0x0,0xfff8,0xfff8,0x0,0x0,0xffff0007,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffff0007,0xffff0007,0x0,0x7,};\n    }\n    private static void jj_la1_2() {\n-      jj_la1_2 = new int[] {0x7fff,0x4000,0x3fff,0x8000,0x4000,0x14c7fff,0x0,0x0,0x0,0x0,0x1007fff,0x14c7fff,0x100000,0x0,0x0,0x400000,0x10000,0x7fff,0x800000,0x14d7fff,0x0,0x14c7fff,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x14d7fff,0x1007fff,0x1007fff,0x8000,0x0,};\n+      jj_la1_2 = new int[] {0xffff,0x8000,0x7fff,0x10000,0x8000,0x298ffff,0x0,0x0,0x0,0x0,0x200ffff,0x298ffff,0x200000,0x0,0x0,0x800000,0x20000,0xffff,0x1000000,0x29affff,0x0,0x298ffff,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x29affff,0x200ffff,0x200ffff,0x10000,0x0,};\n    }\n   final private JJCalls[] jj_2_rtns = new JJCalls[6];\n   private boolean jj_rescan = false;\n     throw generateParseException();\n   }\n \n+  static private final class LookaheadSuccess extends java.lang.Error { }\n+  final private LookaheadSuccess jj_ls = new LookaheadSuccess();\n   final private boolean jj_scan_token(int kind) {\n     if (jj_scanpos == jj_lastpos) {\n       jj_la--;\n       while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }\n       if (tok != null) jj_add_error_token(kind, i);\n     }\n-    return (jj_scanpos.kind != kind);\n+    if (jj_scanpos.kind != kind) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;\n+    return false;\n   }\n \n   final public Token getNextToken() {\n         jj_expentry[i] = jj_lasttokens[i];\n       }\n       boolean exists = false;\n-      for (java.util.Enumeration en = jj_expentries.elements(); en.hasMoreElements();) {\n-        int[] oldentry = (int[])(en.nextElement());\n+      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {\n+        int[] oldentry = (int[])(e.nextElement());\n         if (oldentry.length == jj_expentry.length) {\n           exists = true;\n           for (int i = 0; i < jj_expentry.length; i++) {\n \n   public ParseException generateParseException() {\n     jj_expentries.removeAllElements();\n-    boolean[] la1tokens = new boolean[89];\n-    for (int i = 0; i < 89; i++) {\n+    boolean[] la1tokens = new boolean[90];\n+    for (int i = 0; i < 90; i++) {\n       la1tokens[i] = false;\n     }\n     if (jj_kind >= 0) {\n         }\n       }\n     }\n-    for (int i = 0; i < 89; i++) {\n+    for (int i = 0; i < 90; i++) {\n       if (la1tokens[i]) {\n         jj_expentry = new int[1];\n         jj_expentry[0] = i;\n--- a/src/java/org/apache/commons/jxpath/ri/parser/XPathParserConstants.java\n+++ b/src/java/org/apache/commons/jxpath/ri/parser/XPathParserConstants.java\n   int FUNCTION_STRING = 56;\n   int FUNCTION_CONCAT = 57;\n   int FUNCTION_STARTS_WITH = 58;\n-  int FUNCTION_CONTAINS = 59;\n-  int FUNCTION_SUBSTRING_BEFORE = 60;\n-  int FUNCTION_SUBSTRING_AFTER = 61;\n-  int FUNCTION_SUBSTRING = 62;\n-  int FUNCTION_STRING_LENGTH = 63;\n-  int FUNCTION_NORMALIZE_SPACE = 64;\n-  int FUNCTION_TRANSLATE = 65;\n-  int FUNCTION_BOOLEAN = 66;\n-  int FUNCTION_NOT = 67;\n-  int FUNCTION_TRUE = 68;\n-  int FUNCTION_FALSE = 69;\n-  int FUNCTION_NULL = 70;\n-  int FUNCTION_LANG = 71;\n-  int FUNCTION_NUMBER = 72;\n-  int FUNCTION_SUM = 73;\n-  int FUNCTION_FLOOR = 74;\n-  int FUNCTION_CEILING = 75;\n-  int FUNCTION_ROUND = 76;\n-  int FUNCTION_FORMAT_NUMBER = 77;\n-  int NCName = 78;\n+  int FUNCTION_ENDS_WITH = 59;\n+  int FUNCTION_CONTAINS = 60;\n+  int FUNCTION_SUBSTRING_BEFORE = 61;\n+  int FUNCTION_SUBSTRING_AFTER = 62;\n+  int FUNCTION_SUBSTRING = 63;\n+  int FUNCTION_STRING_LENGTH = 64;\n+  int FUNCTION_NORMALIZE_SPACE = 65;\n+  int FUNCTION_TRANSLATE = 66;\n+  int FUNCTION_BOOLEAN = 67;\n+  int FUNCTION_NOT = 68;\n+  int FUNCTION_TRUE = 69;\n+  int FUNCTION_FALSE = 70;\n+  int FUNCTION_NULL = 71;\n+  int FUNCTION_LANG = 72;\n+  int FUNCTION_NUMBER = 73;\n+  int FUNCTION_SUM = 74;\n+  int FUNCTION_FLOOR = 75;\n+  int FUNCTION_CEILING = 76;\n+  int FUNCTION_ROUND = 77;\n+  int FUNCTION_FORMAT_NUMBER = 78;\n+  int NCName = 79;\n \n   int DEFAULT = 0;\n \n     \"\\\"string\\\"\",\n     \"\\\"concat\\\"\",\n     \"\\\"starts-with\\\"\",\n+    \"\\\"ends-with\\\"\",\n     \"\\\"contains\\\"\",\n     \"\\\"substring-before\\\"\",\n     \"\\\"substring-after\\\"\",\n--- a/src/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java\n+++ b/src/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java\n    switch (pos)\n    {\n       case 0:\n-         if ((active1 & 0xc0000L) != 0L)\n+         if ((active1 & 0x180000L) != 0L)\n             return 10;\n-         if ((active0 & 0xfffffffff8000000L) != 0L || (active1 & 0x3fffL) != 0L)\n-         {\n-            jjmatchedKind = 78;\n+         if ((active0 & 0xfffffffff8000000L) != 0L || (active1 & 0x7fffL) != 0L)\n+         {\n+            jjmatchedKind = 79;\n             return 12;\n          }\n          return -1;\n       case 1:\n+         if ((active0 & 0xfff7fffff0000000L) != 0L || (active1 & 0x7fffL) != 0L)\n+         {\n+            jjmatchedKind = 79;\n+            jjmatchedPos = 1;\n+            return 12;\n+         }\n          if ((active0 & 0x8000008000000L) != 0L)\n             return 12;\n-         if ((active0 & 0xfff7fffff0000000L) != 0L || (active1 & 0x3fffL) != 0L)\n-         {\n-            jjmatchedKind = 78;\n-            jjmatchedPos = 1;\n-            return 12;\n-         }\n          return -1;\n       case 2:\n-         if ((active0 & 0x10000070000000L) != 0L || (active1 & 0x208L) != 0L)\n-            return 12;\n-         if ((active0 & 0xffe7ffff80000000L) != 0L || (active1 & 0x3df7L) != 0L)\n-         {\n-            jjmatchedKind = 78;\n+         if ((active0 & 0x10000070000000L) != 0L || (active1 & 0x410L) != 0L)\n+            return 12;\n+         if ((active0 & 0xffe7ffff80000000L) != 0L || (active1 & 0x7befL) != 0L)\n+         {\n+            jjmatchedKind = 79;\n             jjmatchedPos = 2;\n             return 12;\n          }\n          return -1;\n       case 3:\n-         if ((active0 & 0xc1010180000000L) != 0L || (active1 & 0xd0L) != 0L)\n-            return 12;\n-         if ((active0 & 0xff26fefe00000000L) != 0L || (active1 & 0x3d27L) != 0L)\n+         if ((active0 & 0xc1010180000000L) != 0L || (active1 & 0x1a0L) != 0L)\n+            return 12;\n+         if ((active0 & 0xff26fefe00000000L) != 0L || (active1 & 0x7a4fL) != 0L)\n          {\n             if (jjmatchedPos != 3)\n             {\n-               jjmatchedKind = 78;\n+               jjmatchedKind = 79;\n                jjmatchedPos = 3;\n             }\n             return 12;\n          }\n          return -1;\n       case 4:\n-         if ((active0 & 0xff62fff600000000L) != 0L || (active1 & 0x2907L) != 0L)\n-         {\n-            jjmatchedKind = 78;\n+         if ((active0 & 0xff62fff600000000L) != 0L || (active1 & 0x520fL) != 0L)\n+         {\n+            jjmatchedKind = 79;\n             jjmatchedPos = 4;\n             return 12;\n          }\n-         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x1420L) != 0L)\n+         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x2840L) != 0L)\n             return 12;\n          if ((active0 & 0x800000000L) != 0L)\n          {\n             if (jjmatchedPos < 3)\n             {\n-               jjmatchedKind = 78;\n+               jjmatchedKind = 79;\n                jjmatchedPos = 3;\n             }\n             return -1;\n          }\n          return -1;\n       case 5:\n-         if ((active0 & 0x8300000000000000L) != 0L || (active1 & 0x100L) != 0L)\n-            return 12;\n-         if ((active0 & 0x7c62ffe600000000L) != 0L || (active1 & 0x2807L) != 0L)\n+         if ((active0 & 0x300000000000000L) != 0L || (active1 & 0x201L) != 0L)\n+            return 12;\n+         if ((active0 & 0xfc62ffe600000000L) != 0L || (active1 & 0x500eL) != 0L)\n          {\n             if (jjmatchedPos != 5)\n             {\n-               jjmatchedKind = 78;\n+               jjmatchedKind = 79;\n                jjmatchedPos = 5;\n             }\n             return 12;\n          {\n             if (jjmatchedPos < 4)\n             {\n-               jjmatchedKind = 78;\n+               jjmatchedKind = 79;\n                jjmatchedPos = 4;\n             }\n             return -1;\n          {\n             if (jjmatchedPos < 3)\n             {\n-               jjmatchedKind = 78;\n+               jjmatchedKind = 79;\n                jjmatchedPos = 3;\n             }\n             return -1;\n          }\n          return -1;\n       case 6:\n-         if ((active0 & 0x200000000L) != 0L || (active1 & 0x804L) != 0L)\n-            return 12;\n+         if ((active0 & 0x200000000L) != 0L || (active1 & 0x1008L) != 0L)\n+            return 12;\n+         if ((active0 & 0xfc62ffc400000000L) != 0L || (active1 & 0x4007L) != 0L)\n+         {\n+            jjmatchedKind = 79;\n+            jjmatchedPos = 6;\n+            return 12;\n+         }\n          if ((active0 & 0x2000000000L) != 0L)\n          {\n             if (jjmatchedPos < 5)\n             {\n-               jjmatchedKind = 78;\n+               jjmatchedKind = 79;\n                jjmatchedPos = 5;\n             }\n             return -1;\n          {\n             if (jjmatchedPos < 4)\n             {\n-               jjmatchedKind = 78;\n+               jjmatchedKind = 79;\n                jjmatchedPos = 4;\n             }\n             return -1;\n          }\n-         if ((active0 & 0xfc62ffc400000000L) != 0L || (active1 & 0x2003L) != 0L)\n-         {\n-            jjmatchedKind = 78;\n-            jjmatchedPos = 6;\n-            return 12;\n-         }\n          return -1;\n       case 7:\n-         if ((active0 & 0xf460ffc400000000L) != 0L || (active1 & 0x2003L) != 0L)\n-         {\n-            jjmatchedKind = 78;\n+         if ((active0 & 0x1002000000000000L) != 0L)\n+            return 12;\n+         if ((active0 & 0x2000000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 5)\n+            {\n+               jjmatchedKind = 79;\n+               jjmatchedPos = 5;\n+            }\n+            return -1;\n+         }\n+         if ((active0 & 0xec60ffc400000000L) != 0L || (active1 & 0x4007L) != 0L)\n+         {\n+            jjmatchedKind = 79;\n             jjmatchedPos = 7;\n             return 12;\n          }\n-         if ((active0 & 0x802000000000000L) != 0L)\n-            return 12;\n-         if ((active0 & 0x2000000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 5)\n-            {\n-               jjmatchedKind = 78;\n-               jjmatchedPos = 5;\n+         return -1;\n+      case 8:\n+         if ((active0 & 0xe800000000000000L) != 0L || (active1 & 0x4L) != 0L)\n+            return 12;\n+         if ((active0 & 0x460ff8400000000L) != 0L || (active1 & 0x4003L) != 0L)\n+         {\n+            if (jjmatchedPos != 8)\n+            {\n+               jjmatchedKind = 79;\n+               jjmatchedPos = 8;\n+            }\n+            return 12;\n+         }\n+         if ((active0 & 0x4000000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 7)\n+            {\n+               jjmatchedKind = 79;\n+               jjmatchedPos = 7;\n             }\n             return -1;\n-         }\n-         return -1;\n-      case 8:\n-         if ((active0 & 0x7000000000000000L) != 0L || (active1 & 0x2L) != 0L)\n-            return 12;\n-         if ((active0 & 0x4000000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 7)\n-            {\n-               jjmatchedKind = 78;\n-               jjmatchedPos = 7;\n-            }\n-            return -1;\n-         }\n-         if ((active0 & 0x8460ff8400000000L) != 0L || (active1 & 0x2001L) != 0L)\n-         {\n-            if (jjmatchedPos != 8)\n-            {\n-               jjmatchedKind = 78;\n-               jjmatchedPos = 8;\n-            }\n-            return 12;\n          }\n          return -1;\n       case 9:\n          {\n             if (jjmatchedPos < 8)\n             {\n-               jjmatchedKind = 78;\n+               jjmatchedKind = 79;\n                jjmatchedPos = 8;\n             }\n             return -1;\n          {\n             if (jjmatchedPos < 7)\n             {\n-               jjmatchedKind = 78;\n+               jjmatchedKind = 79;\n                jjmatchedPos = 7;\n             }\n             return -1;\n          }\n-         if ((active0 & 0xb440f80400000000L) != 0L || (active1 & 0x2001L) != 0L)\n-         {\n-            jjmatchedKind = 78;\n+         if ((active0 & 0x6440f80400000000L) != 0L || (active1 & 0x4003L) != 0L)\n+         {\n+            jjmatchedKind = 79;\n             jjmatchedPos = 9;\n             return 12;\n          }\n       case 10:\n          if ((active0 & 0x400000000000000L) != 0L)\n             return 12;\n+         if ((active0 & 0x6040f00400000000L) != 0L || (active1 & 0x4003L) != 0L)\n+         {\n+            jjmatchedKind = 79;\n+            jjmatchedPos = 10;\n+            return 12;\n+         }\n          if ((active0 & 0x80000000000L) != 0L)\n          {\n             if (jjmatchedPos < 9)\n             {\n-               jjmatchedKind = 78;\n+               jjmatchedKind = 79;\n                jjmatchedPos = 9;\n             }\n             return -1;\n          {\n             if (jjmatchedPos < 8)\n             {\n-               jjmatchedKind = 78;\n+               jjmatchedKind = 79;\n                jjmatchedPos = 8;\n             }\n             return -1;\n          }\n-         if ((active0 & 0xb040f00400000000L) != 0L || (active1 & 0x2001L) != 0L)\n-         {\n-            jjmatchedKind = 78;\n-            jjmatchedPos = 10;\n-            return 12;\n-         }\n          return -1;\n       case 11:\n-         if ((active0 & 0xb040f00400000000L) != 0L || (active1 & 0x2001L) != 0L)\n-         {\n-            jjmatchedKind = 78;\n+         if ((active0 & 0x80000000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 9)\n+            {\n+               jjmatchedKind = 79;\n+               jjmatchedPos = 9;\n+            }\n+            return -1;\n+         }\n+         if ((active0 & 0x6040f00400000000L) != 0L || (active1 & 0x4003L) != 0L)\n+         {\n+            jjmatchedKind = 79;\n             jjmatchedPos = 11;\n             return 12;\n          }\n-         if ((active0 & 0x80000000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 9)\n-            {\n-               jjmatchedKind = 78;\n-               jjmatchedPos = 9;\n-            }\n-            return -1;\n-         }\n          return -1;\n       case 12:\n-         if ((active0 & 0x8040000000000000L) != 0L || (active1 & 0x2000L) != 0L)\n-            return 12;\n-         if ((active0 & 0x3000f00400000000L) != 0L || (active1 & 0x1L) != 0L)\n-         {\n-            jjmatchedKind = 78;\n+         if ((active0 & 0x6000f00400000000L) != 0L || (active1 & 0x2L) != 0L)\n+         {\n+            jjmatchedKind = 79;\n             jjmatchedPos = 12;\n             return 12;\n          }\n+         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x4001L) != 0L)\n+            return 12;\n          return -1;\n       case 13:\n-         if ((active0 & 0x3000f00400000000L) != 0L || (active1 & 0x1L) != 0L)\n-         {\n-            jjmatchedKind = 78;\n+         if ((active0 & 0x6000f00400000000L) != 0L || (active1 & 0x2L) != 0L)\n+         {\n+            jjmatchedKind = 79;\n             jjmatchedPos = 13;\n             return 12;\n          }\n          return -1;\n       case 14:\n-         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x1L) != 0L)\n-            return 12;\n-         if ((active0 & 0x1000f00400000000L) != 0L)\n-         {\n-            jjmatchedKind = 78;\n+         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x2L) != 0L)\n+            return 12;\n+         if ((active0 & 0x2000f00400000000L) != 0L)\n+         {\n+            jjmatchedKind = 79;\n             jjmatchedPos = 14;\n             return 12;\n          }\n          return -1;\n       case 15:\n-         if ((active0 & 0x1000000000000000L) != 0L)\n+         if ((active0 & 0x2000000000000000L) != 0L)\n             return 12;\n          if ((active0 & 0xf00400000000L) != 0L)\n          {\n-            jjmatchedKind = 78;\n+            jjmatchedKind = 79;\n             jjmatchedPos = 15;\n             return 12;\n          }\n       case 16:\n          if ((active0 & 0xe00400000000L) != 0L)\n          {\n-            jjmatchedKind = 78;\n+            jjmatchedKind = 79;\n             jjmatchedPos = 16;\n             return 12;\n          }\n          {\n             if (jjmatchedPos < 15)\n             {\n-               jjmatchedKind = 78;\n+               jjmatchedKind = 79;\n                jjmatchedPos = 15;\n             }\n             return -1;\n          {\n             if (jjmatchedPos < 16)\n             {\n-               jjmatchedKind = 78;\n+               jjmatchedKind = 79;\n                jjmatchedPos = 16;\n             }\n             return -1;\n          {\n             if (jjmatchedPos < 15)\n             {\n-               jjmatchedKind = 78;\n+               jjmatchedKind = 79;\n                jjmatchedPos = 15;\n             }\n             return -1;\n          }\n          if ((active0 & 0x800400000000L) != 0L)\n          {\n-            jjmatchedKind = 78;\n+            jjmatchedKind = 79;\n             jjmatchedPos = 17;\n             return 12;\n          }\n          return -1;\n       case 18:\n+         if ((active0 & 0x800000000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 17)\n+            {\n+               jjmatchedKind = 79;\n+               jjmatchedPos = 17;\n+            }\n+            return -1;\n+         }\n+         if ((active0 & 0x600000000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 16)\n+            {\n+               jjmatchedKind = 79;\n+               jjmatchedPos = 16;\n+            }\n+            return -1;\n+         }\n          if ((active0 & 0x400000000L) != 0L)\n          {\n-            jjmatchedKind = 78;\n+            jjmatchedKind = 79;\n             jjmatchedPos = 18;\n             return 12;\n-         }\n-         if ((active0 & 0x800000000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 17)\n-            {\n-               jjmatchedKind = 78;\n-               jjmatchedPos = 17;\n-            }\n-            return -1;\n-         }\n-         if ((active0 & 0x600000000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 16)\n-            {\n-               jjmatchedKind = 78;\n-               jjmatchedPos = 16;\n-            }\n-            return -1;\n          }\n          return -1;\n       case 19:\n          if ((active0 & 0x400000000L) != 0L)\n          {\n-            jjmatchedKind = 78;\n+            jjmatchedKind = 79;\n             jjmatchedPos = 19;\n             return 12;\n          }\n          {\n             if (jjmatchedPos < 17)\n             {\n-               jjmatchedKind = 78;\n+               jjmatchedKind = 79;\n                jjmatchedPos = 17;\n             }\n             return -1;\n       case 20:\n          if ((active0 & 0x400000000L) != 0L)\n          {\n-            jjmatchedKind = 78;\n+            jjmatchedKind = 79;\n             jjmatchedPos = 20;\n             return 12;\n          }\n       case 36:\n          return jjStopAtPos(0, 17);\n       case 40:\n-         return jjStopAtPos(0, 80);\n+         return jjStopAtPos(0, 81);\n       case 41:\n-         return jjStopAtPos(0, 81);\n+         return jjStopAtPos(0, 82);\n       case 42:\n-         return jjStopAtPos(0, 88);\n+         return jjStopAtPos(0, 89);\n       case 43:\n          return jjStopAtPos(0, 9);\n       case 44:\n-         return jjStopAtPos(0, 87);\n+         return jjStopAtPos(0, 88);\n       case 45:\n          return jjStopAtPos(0, 10);\n       case 46:\n-         jjmatchedKind = 82;\n-         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);\n+         jjmatchedKind = 83;\n+         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);\n       case 47:\n          jjmatchedKind = 6;\n          return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);\n       case 58:\n-         return jjStopAtPos(0, 79);\n+         return jjStopAtPos(0, 80);\n       case 60:\n          jjmatchedKind = 13;\n          return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);\n          jjmatchedKind = 15;\n          return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);\n       case 64:\n+         return jjStopAtPos(0, 87);\n+      case 91:\n+         return jjStopAtPos(0, 85);\n+      case 93:\n          return jjStopAtPos(0, 86);\n-      case 91:\n-         return jjStopAtPos(0, 84);\n-      case 93:\n-         return jjStopAtPos(0, 85);\n       case 97:\n          return jjMoveStringLiteralDfa1_0(0x10c010000000L, 0x0L);\n       case 98:\n-         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);\n+         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);\n       case 99:\n-         return jjMoveStringLiteralDfa1_0(0xa04001200000000L, 0x800L);\n+         return jjMoveStringLiteralDfa1_0(0x1204001200000000L, 0x1000L);\n       case 100:\n          return jjMoveStringLiteralDfa1_0(0x880040000000L, 0x0L);\n+      case 101:\n+         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);\n       case 102:\n-         return jjMoveStringLiteralDfa1_0(0x240000000000L, 0x2420L);\n+         return jjMoveStringLiteralDfa1_0(0x240000000000L, 0x4840L);\n       case 105:\n          return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);\n       case 107:\n          return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);\n       case 108:\n-         return jjMoveStringLiteralDfa1_0(0x21000000000000L, 0x80L);\n+         return jjMoveStringLiteralDfa1_0(0x21000000000000L, 0x100L);\n       case 109:\n          return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);\n       case 110:\n-         return jjMoveStringLiteralDfa1_0(0xc0010080000000L, 0x149L);\n+         return jjMoveStringLiteralDfa1_0(0xc0010080000000L, 0x292L);\n       case 111:\n          return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);\n       case 112:\n          return jjMoveStringLiteralDfa1_0(0x2422400000000L, 0x0L);\n       case 114:\n-         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);\n+         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);\n       case 115:\n-         return jjMoveStringLiteralDfa1_0(0xf500000800000000L, 0x200L);\n+         return jjMoveStringLiteralDfa1_0(0xe500000800000000L, 0x401L);\n       case 116:\n-         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x12L);\n+         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x24L);\n       case 124:\n          return jjStopAtPos(0, 8);\n       default :\n    switch(curChar)\n    {\n       case 46:\n-         if ((active1 & 0x80000L) != 0L)\n-            return jjStopAtPos(1, 83);\n+         if ((active1 & 0x100000L) != 0L)\n+            return jjStopAtPos(1, 84);\n          break;\n       case 47:\n          if ((active0 & 0x80L) != 0L)\n             return jjStopAtPos(1, 16);\n          break;\n       case 97:\n-         return jjMoveStringLiteralDfa2_0(active0, 0xc1012000000000L, active1, 0xa0L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0xc1012000000000L, active1, 0x140L);\n       case 100:\n          if ((active0 & 0x8000000000000L) != 0L)\n             return jjStartNfaWithStates_0(1, 51, 12);\n          break;\n       case 101:\n-         return jjMoveStringLiteralDfa2_0(active0, 0x10880900000000L, active1, 0x800L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0x10880900000000L, active1, 0x1000L);\n       case 104:\n          return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);\n       case 105:\n          return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);\n       case 108:\n-         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L);\n       case 110:\n-         return jjMoveStringLiteralDfa2_0(active0, 0x104010000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0x800104010000000L, active1, 0L);\n       case 111:\n-         return jjMoveStringLiteralDfa2_0(active0, 0xa262402a0000000L, active1, 0x300dL);\n+         return jjMoveStringLiteralDfa2_0(active0, 0x12262402a0000000L, active1, 0x601aL);\n       case 114:\n          if ((active0 & 0x8000000L) != 0L)\n             return jjStartNfaWithStates_0(1, 27, 12);\n-         return jjMoveStringLiteralDfa2_0(active0, 0x420400000000L, active1, 0x12L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0x420400000000L, active1, 0x24L);\n       case 116:\n-         return jjMoveStringLiteralDfa2_0(active0, 0x8500008000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0x500008000000000L, active1, 0x1L);\n       case 117:\n-         return jjMoveStringLiteralDfa2_0(active0, 0x7000000000000000L, active1, 0x340L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0xe000000000000000L, active1, 0x680L);\n       default :\n          break;\n    }\n private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)\n {\n    if (((active0 &= old0) | (active1 &= old1)) == 0L)\n-      return jjStartNfa_0(0, old0, old1);\n+      return jjStartNfa_0(0, old0, old1); \n    try { curChar = input_stream.readChar(); }\n    catch(java.io.IOException e) {\n       jjStopStringLiteralDfa_0(1, active0, active1);\n    switch(curChar)\n    {\n       case 97:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x2L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x4L);\n       case 98:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x7000000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0xe000000000000000L, active1, 0L);\n       case 99:\n          return jjMoveStringLiteralDfa3_0(active0, 0x20104000000000L, active1, 0L);\n       case 100:\n             return jjStartNfaWithStates_0(2, 28, 12);\n          else if ((active0 & 0x20000000L) != 0L)\n             return jjStartNfaWithStates_0(2, 29, 12);\n-         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x800000080000000L, active1, 0L);\n       case 101:\n          return jjMoveStringLiteralDfa3_0(active0, 0x420000000000L, active1, 0L);\n       case 105:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x800L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x1000L);\n       case 108:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x240800000000L, active1, 0x60L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x240800000000L, active1, 0xc0L);\n       case 109:\n-         if ((active1 & 0x200L) != 0L)\n-            return jjStartNfaWithStates_0(2, 73, 12);\n-         return jjMoveStringLiteralDfa3_0(active0, 0xc0010200000000L, active1, 0x100L);\n+         if ((active1 & 0x400L) != 0L)\n+            return jjStartNfaWithStates_0(2, 74, 12);\n+         return jjMoveStringLiteralDfa3_0(active0, 0xc0010200000000L, active1, 0x200L);\n       case 110:\n-         return jjMoveStringLiteralDfa3_0(active0, 0xa00000000000000L, active1, 0x80L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x1200000000000000L, active1, 0x100L);\n       case 111:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x404L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x808L);\n       case 114:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x8100002000000000L, active1, 0x2001L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x100002000000000L, active1, 0x4003L);\n       case 115:\n          return jjMoveStringLiteralDfa3_0(active0, 0x3880000000000L, active1, 0L);\n       case 116:\n-         if ((active1 & 0x8L) != 0L)\n-            return jjStartNfaWithStates_0(2, 67, 12);\n+         if ((active1 & 0x10L) != 0L)\n+            return jjStartNfaWithStates_0(2, 68, 12);\n          return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);\n       case 117:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x1010L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x2020L);\n       case 118:\n          if ((active0 & 0x40000000L) != 0L)\n             return jjStartNfaWithStates_0(2, 30, 12);\n private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)\n {\n    if (((active0 &= old0) | (active1 &= old1)) == 0L)\n-      return jjStartNfa_0(1, old0, old1);\n+      return jjStartNfa_0(1, old0, old1); \n    try { curChar = input_stream.readChar(); }\n    catch(java.io.IOException e) {\n       jjStopStringLiteralDfa_0(2, active0, active1);\n       case 97:\n          return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);\n       case 98:\n-         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L);\n       case 99:\n          return jjMoveStringLiteralDfa4_0(active0, 0x200ca0400000000L, active1, 0L);\n       case 101:\n             jjmatchedKind = 55;\n             jjmatchedPos = 3;\n          }\n-         else if ((active1 & 0x10L) != 0L)\n-            return jjStartNfaWithStates_0(3, 68, 12);\n+         else if ((active1 & 0x20L) != 0L)\n+            return jjStartNfaWithStates_0(3, 69, 12);\n          return jjMoveStringLiteralDfa4_0(active0, 0x40116000000000L, active1, 0L);\n       case 102:\n          return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);\n       case 103:\n+         if ((active1 & 0x100L) != 0L)\n+            return jjStartNfaWithStates_0(3, 72, 12);\n+         break;\n+      case 105:\n+         return jjMoveStringLiteralDfa4_0(active0, 0x102000000000000L, active1, 0x1L);\n+      case 108:\n          if ((active1 & 0x80L) != 0L)\n             return jjStartNfaWithStates_0(3, 71, 12);\n-         break;\n-      case 105:\n-         return jjMoveStringLiteralDfa4_0(active0, 0x8102000000000000L, active1, 0L);\n-      case 108:\n-         if ((active1 & 0x40L) != 0L)\n-            return jjStartNfaWithStates_0(3, 70, 12);\n-         return jjMoveStringLiteralDfa4_0(active0, 0x241000000000L, active1, 0x804L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0x241000000000L, active1, 0x1008L);\n       case 109:\n-         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0x2001L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0x4002L);\n       case 110:\n-         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0x1002L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0x2004L);\n       case 111:\n-         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L);\n       case 114:\n          return jjMoveStringLiteralDfa4_0(active0, 0x400008000000000L, active1, 0L);\n       case 115:\n-         return jjMoveStringLiteralDfa4_0(active0, 0x7000000000000000L, active1, 0x20L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0xe800000000000000L, active1, 0x40L);\n       case 116:\n          if ((active0 & 0x100000000L) != 0L)\n             return jjStartNfaWithStates_0(3, 32, 12);\n          else if ((active0 & 0x1000000000000L) != 0L)\n             return jjStartNfaWithStates_0(3, 48, 12);\n-         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);\n       default :\n          break;\n    }\n private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)\n {\n    if (((active0 &= old0) | (active1 &= old1)) == 0L)\n-      return jjStartNfa_0(2, old0, old1);\n+      return jjStartNfa_0(2, old0, old1); \n    try { curChar = input_stream.readChar(); }\n    catch(java.io.IOException e) {\n       jjStopStringLiteralDfa_0(3, active0, active1);\n    }\n    switch(curChar)\n    {\n+      case 45:\n+         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);\n       case 58:\n          return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L);\n       case 97:\n-         return jjMoveStringLiteralDfa5_0(active0, 0xa00000000000000L, active1, 0x2001L);\n+         return jjMoveStringLiteralDfa5_0(active0, 0x1200000000000000L, active1, 0x4002L);\n       case 100:\n-         if ((active1 & 0x1000L) != 0L)\n-            return jjStartNfaWithStates_0(4, 76, 12);\n+         if ((active1 & 0x2000L) != 0L)\n+            return jjStartNfaWithStates_0(4, 77, 12);\n          return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);\n       case 101:\n-         if ((active1 & 0x20L) != 0L)\n-            return jjStartNfaWithStates_0(4, 69, 12);\n-         return jjMoveStringLiteralDfa5_0(active0, 0xca0600000000L, active1, 0x104L);\n+         if ((active1 & 0x40L) != 0L)\n+            return jjStartNfaWithStates_0(4, 70, 12);\n+         return jjMoveStringLiteralDfa5_0(active0, 0xca0600000000L, active1, 0x208L);\n       case 105:\n-         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0x800L);\n+         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0x1000L);\n       case 108:\n          return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);\n       case 110:\n-         return jjMoveStringLiteralDfa5_0(active0, 0x8100002000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa5_0(active0, 0x100002000000000L, active1, 0x1L);\n       case 111:\n          return jjMoveStringLiteralDfa5_0(active0, 0x240000000000L, active1, 0L);\n       case 114:\n-         if ((active1 & 0x400L) != 0L)\n-            return jjStartNfaWithStates_0(4, 74, 12);\n+         if ((active1 & 0x800L) != 0L)\n+            return jjStartNfaWithStates_0(4, 75, 12);\n          break;\n       case 115:\n-         return jjMoveStringLiteralDfa5_0(active0, 0x40114000000000L, active1, 0x2L);\n+         return jjMoveStringLiteralDfa5_0(active0, 0x40114000000000L, active1, 0x4L);\n       case 116:\n          if ((active0 & 0x4000000000000L) != 0L)\n             return jjStartNfaWithStates_0(4, 50, 12);\n-         return jjMoveStringLiteralDfa5_0(active0, 0x7402000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa5_0(active0, 0xe402000000000000L, active1, 0L);\n       default :\n          break;\n    }\n private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)\n {\n    if (((active0 &= old0) | (active1 &= old1)) == 0L)\n-      return jjStartNfa_0(3, old0, old1);\n+      return jjStartNfa_0(3, old0, old1); \n    try { curChar = input_stream.readChar(); }\n    catch(java.io.IOException e) {\n       jjStopStringLiteralDfa_0(4, active0, active1);\n             return jjStopAtPos(5, 35);\n          return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);\n       case 97:\n-         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);\n+         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L);\n       case 98:\n          return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);\n       case 100:\n             jjmatchedKind = 56;\n             jjmatchedPos = 5;\n          }\n-         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);\n       case 105:\n-         return jjMoveStringLiteralDfa6_0(active0, 0x802000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa6_0(active0, 0x1002000000000000L, active1, 0L);\n       case 108:\n-         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x3L);\n+         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x6L);\n       case 110:\n-         return jjMoveStringLiteralDfa6_0(active0, 0x880200000000L, active1, 0x800L);\n+         return jjMoveStringLiteralDfa6_0(active0, 0x880200000000L, active1, 0x1000L);\n       case 112:\n          return jjMoveStringLiteralDfa6_0(active0, 0x40010000000000L, active1, 0L);\n       case 114:\n-         if ((active1 & 0x100L) != 0L)\n-            return jjStartNfaWithStates_0(5, 72, 12);\n-         return jjMoveStringLiteralDfa6_0(active0, 0x7000000000000000L, active1, 0L);\n+         if ((active1 & 0x200L) != 0L)\n+            return jjStartNfaWithStates_0(5, 73, 12);\n+         return jjMoveStringLiteralDfa6_0(active0, 0xe000000000000000L, active1, 0L);\n       case 115:\n          return jjMoveStringLiteralDfa6_0(active0, 0x400000400000000L, active1, 0L);\n       case 116:\n          if ((active0 & 0x200000000000000L) != 0L)\n             return jjStartNfaWithStates_0(5, 57, 12);\n-         return jjMoveStringLiteralDfa6_0(active0, 0x106000000000L, active1, 0x2000L);\n+         return jjMoveStringLiteralDfa6_0(active0, 0x106000000000L, active1, 0x4000L);\n       case 119:\n-         return jjMoveStringLiteralDfa6_0(active0, 0x240000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa6_0(active0, 0x800240000000000L, active1, 0L);\n       default :\n          break;\n    }\n private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)\n {\n    if (((active0 &= old0) | (active1 &= old1)) == 0L)\n-      return jjStartNfa_0(4, old0, old1);\n+      return jjStartNfa_0(4, old0, old1); \n    try { curChar = input_stream.readChar(); }\n    catch(java.io.IOException e) {\n       jjStopStringLiteralDfa_0(5, active0, active1);\n    switch(curChar)\n    {\n       case 45:\n-         return jjMoveStringLiteralDfa7_0(active0, 0x8400000000000000L, active1, 0x2000L);\n+         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0x4001L);\n       case 58:\n          if ((active0 & 0x1000000000L) != 0L)\n             return jjStopAtPos(6, 36);\n          return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);\n       case 97:\n-         return jjMoveStringLiteralDfa7_0(active0, 0x40010000000000L, active1, 0x2L);\n+         return jjMoveStringLiteralDfa7_0(active0, 0x40010000000000L, active1, 0x4L);\n       case 100:\n          return jjMoveStringLiteralDfa7_0(active0, 0x880000000000L, active1, 0L);\n       case 103:\n-         if ((active1 & 0x800L) != 0L)\n-            return jjStartNfaWithStates_0(6, 75, 12);\n+         if ((active1 & 0x1000L) != 0L)\n+            return jjStartNfaWithStates_0(6, 76, 12);\n          break;\n       case 105:\n-         return jjMoveStringLiteralDfa7_0(active0, 0x7000660000000000L, active1, 0x1L);\n+         return jjMoveStringLiteralDfa7_0(active0, 0xe800660000000000L, active1, 0x2L);\n       case 110:\n-         if ((active1 & 0x4L) != 0L)\n-            return jjStartNfaWithStates_0(6, 66, 12);\n-         return jjMoveStringLiteralDfa7_0(active0, 0x820000000000000L, active1, 0L);\n+         if ((active1 & 0x8L) != 0L)\n+            return jjStartNfaWithStates_0(6, 67, 12);\n+         return jjMoveStringLiteralDfa7_0(active0, 0x1020000000000000L, active1, 0L);\n       case 111:\n          return jjMoveStringLiteralDfa7_0(active0, 0x2104000000000L, active1, 0L);\n       case 115:\n private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)\n {\n    if (((active0 &= old0) | (active1 &= old1)) == 0L)\n-      return jjStartNfa_0(5, old0, old1);\n+      return jjStartNfa_0(5, old0, old1); \n    try { curChar = input_stream.readChar(); }\n    catch(java.io.IOException e) {\n       jjStopStringLiteralDfa_0(6, active0, active1);\n       case 105:\n          return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0L);\n       case 108:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L);\n       case 110:\n          if ((active0 & 0x2000000000000L) != 0L)\n             return jjStartNfaWithStates_0(7, 49, 12);\n-         return jjMoveStringLiteralDfa8_0(active0, 0x7000660000000000L, active1, 0x2000L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0xe000660000000000L, active1, 0x4000L);\n       case 114:\n          return jjMoveStringLiteralDfa8_0(active0, 0x104000000000L, active1, 0L);\n       case 115:\n-         if ((active0 & 0x800000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(7, 59, 12);\n+         if ((active0 & 0x1000000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(7, 60, 12);\n          break;\n       case 116:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0x2L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x800008000000000L, active1, 0x4L);\n       case 119:\n          return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0L);\n       case 122:\n-         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2L);\n       default :\n          break;\n    }\n private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)\n {\n    if (((active0 &= old0) | (active1 &= old1)) == 0L)\n-      return jjStartNfa_0(6, old0, old1);\n+      return jjStartNfa_0(6, old0, old1); \n    try { curChar = input_stream.readChar(); }\n    catch(java.io.IOException e) {\n       jjStopStringLiteralDfa_0(7, active0, active1);\n       case 58:\n          return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L, active1, 0L);\n       case 101:\n-         if ((active1 & 0x2L) != 0L)\n-            return jjStartNfaWithStates_0(8, 65, 12);\n-         return jjMoveStringLiteralDfa9_0(active0, 0x8040018000000000L, active1, 0x1L);\n+         if ((active1 & 0x4L) != 0L)\n+            return jjStartNfaWithStates_0(8, 66, 12);\n+         return jjMoveStringLiteralDfa9_0(active0, 0x40018000000000L, active1, 0x3L);\n       case 103:\n-         if ((active0 & 0x4000000000000000L) != 0L)\n-         {\n-            jjmatchedKind = 62;\n+         if ((active0 & 0x8000000000000000L) != 0L)\n+         {\n+            jjmatchedKind = 63;\n             jjmatchedPos = 8;\n          }\n-         return jjMoveStringLiteralDfa9_0(active0, 0x3000660000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa9_0(active0, 0x6000660000000000L, active1, 0L);\n+      case 104:\n+         if ((active0 & 0x800000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(8, 59, 12);\n+         break;\n       case 105:\n          return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0L);\n       case 109:\n       case 110:\n          return jjMoveStringLiteralDfa9_0(active0, 0x880400000000L, active1, 0L);\n       case 117:\n-         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000L);\n+         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000L);\n       default :\n          break;\n    }\n private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)\n {\n    if (((active0 &= old0) | (active1 &= old1)) == 0L)\n-      return jjStartNfa_0(7, old0, old1);\n+      return jjStartNfa_0(7, old0, old1); \n    try { curChar = input_stream.readChar(); }\n    catch(java.io.IOException e) {\n       jjStopStringLiteralDfa_0(8, active0, active1);\n    switch(curChar)\n    {\n       case 45:\n-         return jjMoveStringLiteralDfa10_0(active0, 0x3040600000000000L, active1, 0x1L);\n+         return jjMoveStringLiteralDfa10_0(active0, 0x6040600000000000L, active1, 0x2L);\n       case 58:\n          if ((active0 & 0x4000000000L) != 0L)\n             return jjStopAtPos(9, 38);\n       case 103:\n          return jjMoveStringLiteralDfa10_0(active0, 0x400000000L, active1, 0L);\n       case 109:\n-         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000L);\n+         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000L);\n       case 110:\n-         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1L);\n       case 111:\n          return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L, active1, 0L);\n       case 116:\n private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)\n {\n    if (((active0 &= old0) | (active1 &= old1)) == 0L)\n-      return jjStartNfa_0(8, old0, old1);\n+      return jjStartNfa_0(8, old0, old1); \n    try { curChar = input_stream.readChar(); }\n    catch(java.io.IOException e) {\n       jjStopStringLiteralDfa_0(9, active0, active1);\n             return jjStopAtPos(10, 42);\n          return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L, active1, 0L);\n       case 97:\n-         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L, active1, 0L);\n       case 98:\n-         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L, active1, 0x2000L);\n+         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L, active1, 0x4000L);\n       case 103:\n-         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1L);\n       case 104:\n          if ((active0 & 0x400000000000000L) != 0L)\n             return jjStartNfaWithStates_0(10, 58, 12);\n       case 114:\n          return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L, active1, 0L);\n       case 115:\n-         return jjMoveStringLiteralDfa11_0(active0, 0x600000000000L, active1, 0x1L);\n+         return jjMoveStringLiteralDfa11_0(active0, 0x600000000000L, active1, 0x2L);\n       case 117:\n          return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L, active1, 0L);\n       default :\n private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)\n {\n    if (((active0 &= old0) | (active1 &= old1)) == 0L)\n-      return jjStartNfa_0(9, old0, old1);\n+      return jjStartNfa_0(9, old0, old1); \n    try { curChar = input_stream.readChar(); }\n    catch(java.io.IOException e) {\n       jjStopStringLiteralDfa_0(10, active0, active1);\n             return jjStopAtPos(11, 43);\n          break;\n       case 101:\n-         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000000L, active1, 0x2000L);\n+         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L, active1, 0x4000L);\n       case 102:\n-         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L, active1, 0L);\n       case 105:\n          return jjMoveStringLiteralDfa12_0(active0, 0x600400000000L, active1, 0L);\n       case 111:\n          return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L, active1, 0L);\n       case 112:\n-         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1L);\n+         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2L);\n       case 114:\n          return jjMoveStringLiteralDfa12_0(active0, 0x40000000000000L, active1, 0L);\n       case 116:\n-         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1L);\n       default :\n          break;\n    }\n private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)\n {\n    if (((active0 &= old0) | (active1 &= old1)) == 0L)\n-      return jjStartNfa_0(10, old0, old1);\n+      return jjStartNfa_0(10, old0, old1); \n    try { curChar = input_stream.readChar(); }\n    catch(java.io.IOException e) {\n       jjStopStringLiteralDfa_0(11, active0, active1);\n    switch(curChar)\n    {\n       case 97:\n-         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1L);\n+         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2L);\n       case 98:\n          return jjMoveStringLiteralDfa13_0(active0, 0x600000000000L, active1, 0L);\n       case 102:\n-         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000000L, active1, 0L);\n       case 104:\n-         if ((active0 & 0x8000000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(12, 63, 12);\n+         if ((active1 & 0x1L) != 0L)\n+            return jjStartNfaWithStates_0(12, 64, 12);\n          break;\n       case 105:\n          if ((active0 & 0x40000000000000L) != 0L)\n       case 110:\n          return jjMoveStringLiteralDfa13_0(active0, 0x400000000L, active1, 0L);\n       case 114:\n-         if ((active1 & 0x2000L) != 0L)\n-            return jjStartNfaWithStates_0(12, 77, 12);\n+         if ((active1 & 0x4000L) != 0L)\n+            return jjStartNfaWithStates_0(12, 78, 12);\n          return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L, active1, 0L);\n       case 115:\n          return jjMoveStringLiteralDfa13_0(active0, 0x100000000000L, active1, 0L);\n       case 116:\n-         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000000000L, active1, 0L);\n       default :\n          break;\n    }\n private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)\n {\n    if (((active0 &= old0) | (active1 &= old1)) == 0L)\n-      return jjStartNfa_0(11, old0, old1);\n+      return jjStartNfa_0(11, old0, old1); \n    try { curChar = input_stream.readChar(); }\n    catch(java.io.IOException e) {\n       jjStopStringLiteralDfa_0(12, active0, active1);\n       case 45:\n          return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L, active1, 0L);\n       case 99:\n-         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1L);\n+         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2L);\n       case 101:\n-         return jjMoveStringLiteralDfa14_0(active0, 0x2000100000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa14_0(active0, 0x4000100000000000L, active1, 0L);\n       case 108:\n          return jjMoveStringLiteralDfa14_0(active0, 0x600000000000L, active1, 0L);\n       case 111:\n-         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000000L, active1, 0L);\n       case 115:\n          return jjMoveStringLiteralDfa14_0(active0, 0x400000000L, active1, 0L);\n       default :\n private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)\n {\n    if (((active0 &= old0) | (active1 &= old1)) == 0L)\n-      return jjStartNfa_0(12, old0, old1);\n+      return jjStartNfa_0(12, old0, old1); \n    try { curChar = input_stream.readChar(); }\n    catch(java.io.IOException e) {\n       jjStopStringLiteralDfa_0(13, active0, active1);\n    switch(curChar)\n    {\n       case 101:\n-         if ((active1 & 0x1L) != 0L)\n-            return jjStartNfaWithStates_0(14, 64, 12);\n+         if ((active1 & 0x2L) != 0L)\n+            return jjStartNfaWithStates_0(14, 65, 12);\n          break;\n       case 105:\n          return jjMoveStringLiteralDfa15_0(active0, 0x600000000000L, active1, 0L);\n       case 108:\n          return jjMoveStringLiteralDfa15_0(active0, 0x100000000000L, active1, 0L);\n       case 114:\n-         if ((active0 & 0x2000000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(14, 61, 12);\n-         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000000L, active1, 0L);\n+         if ((active0 & 0x4000000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(14, 62, 12);\n+         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000000L, active1, 0L);\n       case 115:\n          return jjMoveStringLiteralDfa15_0(active0, 0x800000000000L, active1, 0L);\n       case 116:\n private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)\n {\n    if (((active0 &= old0) | (active1 &= old1)) == 0L)\n-      return jjStartNfa_0(13, old0, old1);\n+      return jjStartNfa_0(13, old0, old1); \n    try { curChar = input_stream.readChar(); }\n    catch(java.io.IOException e) {\n       jjStopStringLiteralDfa_0(14, active0, 0L);\n    switch(curChar)\n    {\n       case 101:\n-         if ((active0 & 0x1000000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(15, 60, 12);\n+         if ((active0 & 0x2000000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(15, 61, 12);\n          return jjMoveStringLiteralDfa16_0(active0, 0x800000000000L);\n       case 102:\n          return jjMoveStringLiteralDfa16_0(active0, 0x100000000000L);\n                case 12:\n                   if ((0x3ff600000000000L & l) == 0L)\n                      break;\n-                  if (kind > 78)\n-                     kind = 78;\n+                  if (kind > 79)\n+                     kind = 79;\n                   jjstateSet[jjnewStateCnt++] = 12;\n                   break;\n                default : break;\n                case 12:\n                   if ((0x7fffffe87fffffeL & l) == 0L)\n                      break;\n-                  if (kind > 78)\n-                     kind = 78;\n+                  if (kind > 79)\n+                     kind = 79;\n                   jjCheckNAdd(12);\n                   break;\n                case 1:\n                case 0:\n                   if (!jjCanMove_1(hiByte, i1, i2, l1, l2))\n                      break;\n-                  if (kind > 78)\n-                     kind = 78;\n+                  if (kind > 79)\n+                     kind = 79;\n                   jjCheckNAdd(12);\n                   break;\n                case 1:\n                case 12:\n                   if (!jjCanMove_2(hiByte, i1, i2, l1, l2))\n                      break;\n-                  if (kind > 78)\n-                     kind = 78;\n+                  if (kind > 79)\n+                     kind = 79;\n                   jjCheckNAdd(12);\n                   break;\n                default : break;\n    }\n }\n static final int[] jjnextStates = {\n-   1, 2, 4, 5,\n+   1, 2, 4, 5, \n };\n private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)\n {\n    {\n       case 0:\n          return ((jjbitVec2[i2] & l2) != 0L);\n-      default :\n+      default : \n          if ((jjbitVec0[i1] & l1) != 0L)\n             return true;\n          return false;\n          return ((jjbitVec25[i2] & l2) != 0L);\n       case 215:\n          return ((jjbitVec26[i2] & l2) != 0L);\n-      default :\n+      default : \n          if ((jjbitVec3[i1] & l1) != 0L)\n             return true;\n          return false;\n          return ((jjbitVec25[i2] & l2) != 0L);\n       case 215:\n          return ((jjbitVec26[i2] & l2) != 0L);\n-      default :\n+      default : \n          if ((jjbitVec3[i1] & l1) != 0L)\n             return true;\n          return false;\n    }\n }\n public static final String[] jjstrLiteralImages = {\n-\"\", null, null, null, null, null, \"\\57\", \"\\57\\57\", \"\\174\", \"\\53\", \"\\55\",\n-\"\\75\", \"\\41\\75\", \"\\74\", \"\\74\\75\", \"\\76\", \"\\76\\75\", \"\\44\", null, null, null, null,\n-null, null, null, null, null, \"\\157\\162\", \"\\141\\156\\144\", \"\\155\\157\\144\",\n-\"\\144\\151\\166\", \"\\156\\157\\144\\145\", \"\\164\\145\\170\\164\", \"\\143\\157\\155\\155\\145\\156\\164\",\n-\"\\160\\162\\157\\143\\145\\163\\163\\151\\156\\147\\55\\151\\156\\163\\164\\162\\165\\143\\164\\151\\157\\156\", \"\\163\\145\\154\\146\\72\\72\", \"\\143\\150\\151\\154\\144\\72\\72\",\n-\"\\160\\141\\162\\145\\156\\164\\72\\72\", \"\\141\\156\\143\\145\\163\\164\\157\\162\\72\\72\",\n-\"\\141\\164\\164\\162\\151\\142\\165\\164\\145\\72\\72\", \"\\156\\141\\155\\145\\163\\160\\141\\143\\145\\72\\72\",\n-\"\\160\\162\\145\\143\\145\\144\\151\\156\\147\\72\\72\", \"\\146\\157\\154\\154\\157\\167\\151\\156\\147\\72\\72\",\n-\"\\144\\145\\163\\143\\145\\156\\144\\141\\156\\164\\72\\72\", \"\\141\\156\\143\\145\\163\\164\\157\\162\\55\\157\\162\\55\\163\\145\\154\\146\\72\\72\",\n-\"\\146\\157\\154\\154\\157\\167\\151\\156\\147\\55\\163\\151\\142\\154\\151\\156\\147\\72\\72\", \"\\160\\162\\145\\143\\145\\144\\151\\156\\147\\55\\163\\151\\142\\154\\151\\156\\147\\72\\72\",\n-\"\\144\\145\\163\\143\\145\\156\\144\\141\\156\\164\\55\\157\\162\\55\\163\\145\\154\\146\\72\\72\", \"\\154\\141\\163\\164\", \"\\160\\157\\163\\151\\164\\151\\157\\156\",\n-\"\\143\\157\\165\\156\\164\", \"\\151\\144\", \"\\153\\145\\171\", \"\\154\\157\\143\\141\\154\\55\\156\\141\\155\\145\",\n-\"\\156\\141\\155\\145\\163\\160\\141\\143\\145\\55\\165\\162\\151\", \"\\156\\141\\155\\145\", \"\\163\\164\\162\\151\\156\\147\", \"\\143\\157\\156\\143\\141\\164\",\n-\"\\163\\164\\141\\162\\164\\163\\55\\167\\151\\164\\150\", \"\\143\\157\\156\\164\\141\\151\\156\\163\",\n-\"\\163\\165\\142\\163\\164\\162\\151\\156\\147\\55\\142\\145\\146\\157\\162\\145\", \"\\163\\165\\142\\163\\164\\162\\151\\156\\147\\55\\141\\146\\164\\145\\162\",\n-\"\\163\\165\\142\\163\\164\\162\\151\\156\\147\", \"\\163\\164\\162\\151\\156\\147\\55\\154\\145\\156\\147\\164\\150\",\n-\"\\156\\157\\162\\155\\141\\154\\151\\172\\145\\55\\163\\160\\141\\143\\145\", \"\\164\\162\\141\\156\\163\\154\\141\\164\\145\", \"\\142\\157\\157\\154\\145\\141\\156\",\n-\"\\156\\157\\164\", \"\\164\\162\\165\\145\", \"\\146\\141\\154\\163\\145\", \"\\156\\165\\154\\154\",\n-\"\\154\\141\\156\\147\", \"\\156\\165\\155\\142\\145\\162\", \"\\163\\165\\155\", \"\\146\\154\\157\\157\\162\",\n-\"\\143\\145\\151\\154\\151\\156\\147\", \"\\162\\157\\165\\156\\144\", \"\\146\\157\\162\\155\\141\\164\\55\\156\\165\\155\\142\\145\\162\",\n+\"\", null, null, null, null, null, \"\\57\", \"\\57\\57\", \"\\174\", \"\\53\", \"\\55\", \n+\"\\75\", \"\\41\\75\", \"\\74\", \"\\74\\75\", \"\\76\", \"\\76\\75\", \"\\44\", null, null, null, null, \n+null, null, null, null, null, \"\\157\\162\", \"\\141\\156\\144\", \"\\155\\157\\144\", \n+\"\\144\\151\\166\", \"\\156\\157\\144\\145\", \"\\164\\145\\170\\164\", \"\\143\\157\\155\\155\\145\\156\\164\", \n+\"\\160\\162\\157\\143\\145\\163\\163\\151\\156\\147\\55\\151\\156\\163\\164\\162\\165\\143\\164\\151\\157\\156\", \"\\163\\145\\154\\146\\72\\72\", \"\\143\\150\\151\\154\\144\\72\\72\", \n+\"\\160\\141\\162\\145\\156\\164\\72\\72\", \"\\141\\156\\143\\145\\163\\164\\157\\162\\72\\72\", \n+\"\\141\\164\\164\\162\\151\\142\\165\\164\\145\\72\\72\", \"\\156\\141\\155\\145\\163\\160\\141\\143\\145\\72\\72\", \n+\"\\160\\162\\145\\143\\145\\144\\151\\156\\147\\72\\72\", \"\\146\\157\\154\\154\\157\\167\\151\\156\\147\\72\\72\", \n+\"\\144\\145\\163\\143\\145\\156\\144\\141\\156\\164\\72\\72\", \"\\141\\156\\143\\145\\163\\164\\157\\162\\55\\157\\162\\55\\163\\145\\154\\146\\72\\72\", \n+\"\\146\\157\\154\\154\\157\\167\\151\\156\\147\\55\\163\\151\\142\\154\\151\\156\\147\\72\\72\", \"\\160\\162\\145\\143\\145\\144\\151\\156\\147\\55\\163\\151\\142\\154\\151\\156\\147\\72\\72\", \n+\"\\144\\145\\163\\143\\145\\156\\144\\141\\156\\164\\55\\157\\162\\55\\163\\145\\154\\146\\72\\72\", \"\\154\\141\\163\\164\", \"\\160\\157\\163\\151\\164\\151\\157\\156\", \n+\"\\143\\157\\165\\156\\164\", \"\\151\\144\", \"\\153\\145\\171\", \"\\154\\157\\143\\141\\154\\55\\156\\141\\155\\145\", \n+\"\\156\\141\\155\\145\\163\\160\\141\\143\\145\\55\\165\\162\\151\", \"\\156\\141\\155\\145\", \"\\163\\164\\162\\151\\156\\147\", \"\\143\\157\\156\\143\\141\\164\", \n+\"\\163\\164\\141\\162\\164\\163\\55\\167\\151\\164\\150\", \"\\145\\156\\144\\163\\55\\167\\151\\164\\150\", \"\\143\\157\\156\\164\\141\\151\\156\\163\", \n+\"\\163\\165\\142\\163\\164\\162\\151\\156\\147\\55\\142\\145\\146\\157\\162\\145\", \"\\163\\165\\142\\163\\164\\162\\151\\156\\147\\55\\141\\146\\164\\145\\162\", \n+\"\\163\\165\\142\\163\\164\\162\\151\\156\\147\", \"\\163\\164\\162\\151\\156\\147\\55\\154\\145\\156\\147\\164\\150\", \n+\"\\156\\157\\162\\155\\141\\154\\151\\172\\145\\55\\163\\160\\141\\143\\145\", \"\\164\\162\\141\\156\\163\\154\\141\\164\\145\", \"\\142\\157\\157\\154\\145\\141\\156\", \n+\"\\156\\157\\164\", \"\\164\\162\\165\\145\", \"\\146\\141\\154\\163\\145\", \"\\156\\165\\154\\154\", \n+\"\\154\\141\\156\\147\", \"\\156\\165\\155\\142\\145\\162\", \"\\163\\165\\155\", \"\\146\\154\\157\\157\\162\", \n+\"\\143\\145\\151\\154\\151\\156\\147\", \"\\162\\157\\165\\156\\144\", \"\\146\\157\\162\\155\\141\\164\\55\\156\\165\\155\\142\\145\\162\", \n null, \"\\72\", \"\\50\", \"\\51\", \"\\56\", \"\\56\\56\", \"\\133\", \"\\135\", \"\\100\", \"\\54\", \"\\52\", };\n public static final String[] lexStateNames = {\n-   \"DEFAULT\",\n+   \"DEFAULT\", \n };\n static final long[] jjtoToken = {\n-   0xfffffffff817ffc1L, 0x1ffffffL,\n+   0xfffffffff817ffc1L, 0x3ffffffL, \n };\n static final long[] jjtoSkip = {\n-   0x3eL, 0x0L,\n+   0x3eL, 0x0L, \n };\n protected SimpleCharStream input_stream;\n private final int[] jjrounds = new int[13];\n int jjmatchedPos;\n int jjmatchedKind;\n \n-public Token getNextToken()\n+public Token getNextToken() \n {\n   int kind;\n   Token specialToken = null;\n \n   EOFLoop :\n   for (;;)\n-  {\n-   try\n-   {\n+  {   \n+   try   \n+   {     \n       curChar = input_stream.BeginToken();\n-   }\n+   }     \n    catch(java.io.IOException e)\n-   {\n+   {        \n       jjmatchedKind = 0;\n       matchedToken = jjFillToken();\n       return matchedToken;\n--- a/src/test/org/apache/commons/jxpath/ri/JXPathCompiledExpressionTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/JXPathCompiledExpressionTest.java\n         assertXPathExpression(\"string(3)\", CoreFunction.class);\n         assertXPathExpression(\"concat('a', 'b')\", CoreFunction.class);\n         assertXPathExpression(\"starts-with('a', 'b')\", CoreFunction.class);\n+        assertXPathExpression(\"ends-with('a', 'b')\", CoreFunction.class);\n         assertXPathExpression(\"contains('a', 'b')\", CoreFunction.class);\n         assertXPathExpression(\"substring-before('a', 1)\", CoreFunction.class);\n         assertXPathExpression(\"substring-after('a', 2)\", CoreFunction.class);\n--- a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java\n         assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");\n         assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);\n         assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);\n+        assertXPathValue(context, \"ends-with('abc', 'bc')\", Boolean.TRUE);\n+        assertXPathValue(context, \"ends-with('xabc', 'ab')\", Boolean.FALSE);\n         assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);\n         assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);\n         assertXPathValue(", "timestamp": 1243592620, "metainfo": ""}