{"sha": "8189c26b2b8be0a179c1e8ad3699ab0b3d773480", "log": "get rid of operator precedence magic #s  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java\n  * @version $Revision$ $Date$\n  */\n public abstract class CoreOperation extends Operation {\n+\n+    /** or precedence */\n+    protected static final int OR_PRECEDENCE = 0;\n+    /** and precedence */\n+    protected static final int AND_PRECEDENCE = 1;\n+    /** compare precedence */\n+    protected static final int COMPARE_PRECEDENCE = 2;\n+    /** relational expression precedence */\n+    protected static final int RELATIONAL_EXPR_PRECEDENCE = 3;\n+    /** add/subtract precedence */\n+    protected static final int ADD_PRECEDENCE = 4;\n+    /** multiply/divide/mod precedence */\n+    protected static final int MULTIPLY_PRECEDENCE = 5;\n+    /** negate precedence */\n+    protected static final int NEGATE_PRECEDENCE = 6;\n+    /** union precedence */\n+    protected static final int UNION_PRECEDENCE = 7;\n \n     /**\n      * Create a new CoreOperation.\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAdd.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAdd.java\n      * {@inheritDoc}\n      */\n     protected int getPrecedence() {\n-        return 4;\n+        return ADD_PRECEDENCE;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAnd.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAnd.java\n     }\n \n     protected int getPrecedence() {\n-        return 1;\n+        return AND_PRECEDENCE;\n     }\n \n     protected boolean isSymmetric() {\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java\n     }\n \n     protected int getPrecedence() {\n-        return 2;\n+        return COMPARE_PRECEDENCE;\n     }\n \n     protected boolean isSymmetric() {\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationDivide.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationDivide.java\n      * {@inheritDoc}\n      */\n     protected int getPrecedence() {\n-        return 5;\n+        return MULTIPLY_PRECEDENCE;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMod.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMod.java\n      * {@inheritDoc}\n      */\n     protected int getPrecedence() {\n-        return 5;\n+        return MULTIPLY_PRECEDENCE;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMultiply.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMultiply.java\n      * {@inheritDoc}\n      */\n     protected int getPrecedence() {\n-        return 5;\n+        return MULTIPLY_PRECEDENCE;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNegate.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNegate.java\n      * {@inheritDoc}\n      */\n     protected int getPrecedence() {\n-        return 6;\n+        return NEGATE_PRECEDENCE;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationOr.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationOr.java\n      * {@inheritDoc}\n      */\n     protected int getPrecedence() {\n-        return 0;\n+        return OR_PRECEDENCE;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java\n     }\n \n     protected final int getPrecedence() {\n-        return 3;\n+        return RELATIONAL_EXPR_PRECEDENCE;\n     }\n \n     protected final boolean isSymmetric() {\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationSubtract.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationSubtract.java\n     }\n \n     protected int getPrecedence() {\n-        return 4;\n+        return ADD_PRECEDENCE;\n     }\n \n     protected boolean isSymmetric() {\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationUnion.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationUnion.java\n      * {@inheritDoc}\n      */\n     protected int getPrecedence() {\n-        return 7;\n+        return UNION_PRECEDENCE;\n     }\n \n     /**", "timestamp": 1202056201, "metainfo": ""}