{"sha": "5badb5743937ebdc218a5ca51385e2153579cf1b", "log": "[JXPATH-133] use == or .equals on parent node comparison in compareTo(); associated refactorings  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n \n             String testPrefix = testName.getPrefix();\n             String nodePrefix = nodeName.getPrefix();\n-            if (!equalStrings(testPrefix, nodePrefix)) {\n+            if (!safeEquals(testPrefix, nodePrefix)) {\n                 String testNS = getNamespaceURI(testPrefix);\n                 String nodeNS = getNamespaceURI(nodePrefix);\n-                if (!equalStrings(testNS, nodeNS)) {\n+                if (!safeEquals(testNS, nodeNS)) {\n                     return false;\n                 }\n             }\n         }\n         return test instanceof NodeTypeTest\n                 && ((NodeTypeTest) test).getNodeType() == Compiler.NODE_TYPE_NODE && isNode();\n-    }\n-\n-    /**\n-     * Compare two strings, either of which may be null, for equality.\n-     * @param s1 the first String to compare\n-     * @param s2 the second String to compare\n-     * @return true if both Strings are null, same or equal\n-     */\n-    private static boolean equalStrings(String s1, String s2) {\n-        return s1 == s2 || s1 != null && s1.equals(s2);\n     }\n \n     /**\n         }\n         // Let it throw a ClassCastException\n         NodePointer pointer = (NodePointer) object;\n-        if (parent == pointer.parent) {\n+        if (safeEquals(parent, pointer.parent)) {\n             return parent == null ? 0 : parent.compareChildNodePointers(this, pointer);\n         }\n \n             return r == 0 ? 1 : r;\n         }\n         //henceforth depth1 == depth2:\n-        if (p1 == p2 || p1 != null && p1.equals(p2)) {\n+        if (safeEquals(p1, p2)) {\n             return 0;\n         }\n         if (depth1 == 1) {\n             printDeep(pointer.getImmediateParentPointer(), indent + \"  \");\n         }\n     }\n+\n+    private static boolean safeEquals(Object o1, Object o2) {\n+        return o1 == o2 || o1 != null && o1.equals(o2);\n+    }\n }", "timestamp": 1267557275, "metainfo": ""}