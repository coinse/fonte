{"sha": "d73d9bf24a5fb76383f519e5d4df00f9b634c19b", "log": "Fix for bug #26899.   See http://nagoya.apache.org/bugzilla/show_bug.cgi?id=26899   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n import org.apache.commons.jxpath.ri.axes.RootContext;\n import org.apache.commons.jxpath.ri.compiler.Expression;\n import org.apache.commons.jxpath.ri.compiler.LocationPath;\n+import org.apache.commons.jxpath.ri.compiler.Path;\n import org.apache.commons.jxpath.ri.compiler.TreeCompiler;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n import org.apache.commons.jxpath.ri.model.NodePointerFactory;\n  * The reference implementation of JXPathContext.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.38 $ $Date: 2004/02/29 14:17:45 $\n+ * @version $Revision: 1.39 $ $Date: 2004/03/02 01:32:20 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext {\n     \n      * types are wrapped into objects.\n      */\n     public Object getValue(String xpath) {\n-        return getValue(xpath, compileExpression(xpath));\n-    }\n+        Expression expression = compileExpression(xpath);\n+// TODO: (work in progress) - trying to integrate with Xalan\n+//        Object ctxNode = getNativeContextNode(expression);\n+//        if (ctxNode != null) {\n+//            System.err.println(\"WILL USE XALAN: \" + xpath);\n+//            CachedXPathAPI api = new CachedXPathAPI();\n+//            try {\n+//                if (expression instanceof Path) {\n+//                    Node node = api.selectSingleNode((Node)ctxNode, xpath);\n+//                    System.err.println(\"NODE: \" + node);\n+//                    if (node == null) {\n+//                        return null;\n+//                    }\n+//                    return new DOMNodePointer(node, null).getValue();\n+//                }\n+//                else {\n+//                    XObject object = api.eval((Node)ctxNode, xpath);\n+//                    switch (object.getType()) {\n+//                    case XObject.CLASS_STRING: return object.str();\n+//                    case XObject.CLASS_NUMBER: return new Double(object.num());\n+//                    case XObject.CLASS_BOOLEAN: return new Boolean(object.bool());\n+//                    default:\n+//                        System.err.println(\"OTHER TYPE: \" + object.getTypeString());\n+//                    }\n+//                }\n+//            }\n+//            catch (TransformerException e) {\n+//                // TODO Auto-generated catch block\n+//                e.printStackTrace();\n+//            }\n+//            return\n+//        }\n+        \n+        return getValue(xpath, expression);\n+    }\n+\n+//    private Object getNativeContextNode(Expression expression) {\n+//        Object node = getNativeContextNode(getContextBean());\n+//        if (node == null) {\n+//            return null;\n+//        }\n+//        \n+//        List vars = expression.getUsedVariables();\n+//        if (vars != null) {\n+//            return null;\n+//        }\n+//        \n+//        return node;\n+//    }\n+\n+//    private Object getNativeContextNode(Object bean) {\n+//        if (bean instanceof Number || bean instanceof String || bean instanceof Boolean) {\n+//            return bean;\n+//        }\n+//        if (bean instanceof Node) {\n+//            return (Node)bean;            \n+//        }\n+//        \n+//        if (bean instanceof Container) {\n+//            bean = ((Container)bean).getValue();\n+//            return getNativeContextNode(bean);\n+//        }\n+//        \n+//        return null;\n+//    }\n \n     public Object getValue(String xpath, Expression expr) {\n         Object result = expr.computeValue(getEvalContext());\n+        if (result == null) {\n+            if (expr instanceof Path) {\n+                if (!isLenient()) {\n+                    throw new JXPathException(\"No value for xpath: \" + xpath);\n+                }\n+            }\n+            return null;\n+        }\n         if (result instanceof EvalContext) {\n             EvalContext ctx = (EvalContext) result;\n             result = ctx.getSingleNodePointer();\n--- a/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java\n import org.apache.commons.jxpath.AbstractFactory;\n import org.apache.commons.jxpath.IdentityManager;\n import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.JXPathTestCase;\n import org.apache.commons.jxpath.Pointer;\n import org.apache.commons.jxpath.Variables;\n  * DOM, JDOM etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.19 $ $Date: 2004/02/29 14:17:45 $\n+ * @version $Revision: 1.20 $ $Date: 2004/03/02 01:32:20 $\n  */\n \n public abstract class XMLModelTestCase extends JXPathTestCase {\n \n         // default namespace does not affect search\n         assertXPathValue(context, \"vendor/product/prix\", \"934.99\");\n+        \n+        assertXPathValue(context, \"/vendor/contact[@name='jim']\", \"Jim\");\n+        \n+        boolean nsv = false;\n+        try {\n+            context.setLenient(false);\n+            context.getValue(\"/vendor/contact[@name='jane']\");\n+        }\n+        catch (JXPathException ex) {\n+            nsv = true;\n+        }\n+        assertTrue(\"No such value: /vendor/contact[@name='jim']\", nsv);\n+                \n+        nsv = false;\n+        try {\n+            context.setLenient(false);\n+            context.getValue(\"/vendor/contact[@name='jane']/*\");\n+        }\n+        catch (JXPathException ex) {\n+            nsv = true;\n+        }\n+        assertTrue(\"No such value: /vendor/contact[@name='jane']/*\", nsv);\n         \n         // child:: with a wildcard\n         assertXPathValue(\n--- a/src/test/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java\n import junit.framework.TestSuite;\n \n import org.apache.commons.jxpath.AbstractFactory;\n-import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.ri.model.XMLModelTestCase;\n import org.apache.commons.jxpath.xml.DocumentContainer;\n import org.w3c.dom.Attr;\n  * Tests JXPath with DOM\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.12 $ $Date: 2004/02/29 14:17:46 $\n+ * @version $Revision: 1.13 $ $Date: 2004/03/02 01:32:20 $\n  */\n \n public class DOMModelTest extends XMLModelTestCase {", "timestamp": 1078191140, "metainfo": ""}