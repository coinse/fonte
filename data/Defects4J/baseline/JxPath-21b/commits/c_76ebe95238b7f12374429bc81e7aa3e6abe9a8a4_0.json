{"sha": "76ebe95238b7f12374429bc81e7aa3e6abe9a8a4", "log": "Fixed bugs in iteratePointers() when iterating over a scalar value   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java,v 1.13 2002/08/10 16:13:03 dmitri Exp $\n- * $Revision: 1.13 $\n- * $Date: 2002/08/10 16:13:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java,v 1.14 2002/10/12 21:02:24 dmitri Exp $\n+ * $Revision: 1.14 $\n+ * $Date: 2002/10/12 21:02:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.jxpath.ri.axes;\n \n-\n+import java.util.Iterator;\n import org.apache.commons.jxpath.ri.EvalContext;\n import org.apache.commons.jxpath.ri.compiler.CoreOperation;\n import org.apache.commons.jxpath.ri.compiler.Expression;\n  * EvalContext that checks predicates.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.13 $ $Date: 2002/08/10 16:13:03 $\n+ * @version $Revision: 1.14 $ $Date: 2002/10/12 21:02:24 $\n  */\n public class PredicateContext extends EvalContext {\n     private Expression expression;\n             }\n             else {\n                 Object pred = expression.computeValue(parentContext);\n+                if (pred instanceof Iterator){\n+                    if (!((Iterator)pred).hasNext()){\n+                        return false;\n+                    }\n+                    pred = ((Iterator)pred).next();\n+                }\n+\n                 if (pred instanceof NodePointer){\n                     pred = ((NodePointer)pred).getNode();\n                 }\n+\n                 if (pred instanceof Number){\n                     int pos = (int)InfoSetUtil.doubleValue(pred);\n                     position++;\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java,v 1.7 2002/08/10 16:13:04 dmitri Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/08/10 16:13:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java,v 1.8 2002/10/12 21:02:24 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/10/12 21:02:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Pointer pointing to a property of a JavaBean.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2002/08/10 16:13:04 $\n+ * @version $Revision: 1.8 $ $Date: 2002/10/12 21:02:24 $\n  */\n public class BeanPropertyPointer extends PropertyPointer {\n     private String propertyName;\n \n     public void setIndex(int index){\n         if (this.index != index){\n-            super.setIndex(index);\n-            value = UNINITIALIZED;\n+            // When dealing with a scalar, index == 0 is equivalent to\n+            // WHOLE_COLLECTION, so do not change it.\n+            if (this.index != WHOLE_COLLECTION || index != 0 || isCollection()){\n+                super.setIndex(index);\n+                value = UNINITIALIZED;\n+            }\n         }\n     }\n \n      */\n     public Object getNode(){\n         if (value == UNINITIALIZED){\n-            PropertyDescriptor pd = getPropertyDescriptor();\n-            if (pd == null){\n+            Object baseValue = getBaseValue();\n+            if (index == WHOLE_COLLECTION){\n+                value = baseValue;\n+            }\n+            else if (value != null && index >= 0 && index < getLength()){\n+                value = ValueUtils.getValue(baseValue, index);\n+            }\n+            else {\n                 value = null;\n-            }\n-            else {\n-                if (index == WHOLE_COLLECTION){\n-                    value = ValueUtils.getValue(getBean(), pd);\n-                }\n-                else if (index >= 0 && index < getLength()){\n-                    value = ValueUtils.getValue(getBean(), pd, index);\n-                }\n-                else {\n-                    value = null;\n-                }\n             }\n         }\n         return value;\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java,v 1.4 2002/06/16 03:22:22 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/06/16 03:22:22 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java,v 1.5 2002/10/12 21:02:24 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/10/12 21:02:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Examples of such objects are JavaBeans and objects with Dynamic Properties.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/06/16 03:22:22 $\n+ * @version $Revision: 1.5 $ $Date: 2002/10/12 21:02:24 $\n  */\n public class PropertyIterator implements NodeIterator {\n     private boolean empty = false;\n             }\n             this.startPropertyIndex = ((PropertyPointer)startWith).getPropertyIndex();\n             this.startIndex = startWith.getIndex();\n+            if (this.startIndex == NodePointer.WHOLE_COLLECTION){\n+                this.startIndex = 0;\n+            }\n             this.includeStart = false;\n             if (reverse && startIndex == -1){\n                 this.includeStart = true;", "timestamp": 1034456544, "metainfo": ""}