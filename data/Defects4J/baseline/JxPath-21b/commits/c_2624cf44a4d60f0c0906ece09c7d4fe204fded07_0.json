{"sha": "2624cf44a4d60f0c0906ece09c7d4fe204fded07", "log": "add BasicNodeSetTest; fix caching issues detected thereby.  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/BasicNodeSet.java\n+++ b/src/java/org/apache/commons/jxpath/BasicNodeSet.java\n \n     public void add(Pointer pointer) {\n         pointers.add(pointer);\n-        readOnlyPointers = null;\n+        clearCacheLists();\n     }\n \n     public void add(NodeSet nodeSet) {\n         pointers.addAll(nodeSet.getPointers());\n-        readOnlyPointers = null;\n+        clearCacheLists();\n     }\n \n     public void remove(Pointer pointer) {\n         pointers.remove(pointer);\n-        readOnlyPointers = null;\n+        clearCacheLists();\n     }\n     \n-    public List getPointers() {\n+    public synchronized List getPointers() {\n         if (readOnlyPointers == null) {\n             readOnlyPointers = Collections.unmodifiableList(pointers);\n         }\n         return readOnlyPointers;\n     }\n \n-    public List getNodes() {\n+    public synchronized List getNodes() {\n         if (nodes == null) {\n             nodes = new ArrayList();\n             for (int i = 0; i < pointers.size(); i++) {\n         return nodes;\n     }\n \n-    public List getValues() {\n+    public synchronized List getValues() {\n         if (values == null) {\n             values = new ArrayList();\n             for (int i = 0; i < pointers.size(); i++) {\n     public String toString() {\n         return pointers.toString();\n     }\n+\n+    /**\n+     * Clear cache list members.\n+     */\n+    private synchronized void clearCacheLists() {\n+        readOnlyPointers = null;\n+        nodes = null;\n+        values = null;\n+    }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/jxpath/BasicNodeSetTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.jxpath;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Test BasicNodeSet\n+ * \n+ * @author Matt Benson\n+ * @version $Revision$ $Date$\n+ */\n+public class BasicNodeSetTest extends JXPathTestCase {\n+    /** JXPathContext */\n+    protected JXPathContext context;\n+\n+    /** BasicNodeSet */\n+    protected BasicNodeSet nodeSet;\n+\n+    /**\n+     * Create a new BasicNodeSetTest.\n+     * \n+     * @param name testcase name\n+     */\n+    public BasicNodeSetTest(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        context = JXPathContext.newContext(new TestBean());\n+        nodeSet = new BasicNodeSet();\n+    }\n+\n+    /**\n+     * Add the pointers for the specified path to <code>nodeSet</code>.\n+     * \n+     * @param xpath\n+     */\n+    protected void addPointers(String xpath) {\n+        for (Iterator iter = context.iteratePointers(xpath); iter.hasNext();) {\n+            nodeSet.add((Pointer) iter.next());\n+        }\n+        nudge();\n+    }\n+\n+    /**\n+     * Remove the pointers for the specified path from <code>nodeSet</code>.\n+     * \n+     * @param xpath\n+     */\n+    protected void removePointers(String xpath) {\n+        for (Iterator iter = context.iteratePointers(xpath); iter.hasNext();) {\n+            nodeSet.remove((Pointer) iter.next());\n+        }\n+        nudge();\n+    }\n+\n+    /**\n+     * \"Nudge\" the nodeSet.\n+     */\n+    protected void nudge() {\n+        nodeSet.getPointers();\n+        nodeSet.getValues();\n+        nodeSet.getNodes();\n+    }\n+\n+    /**\n+     * Test adding pointers.\n+     */\n+    public void testAdd() {\n+        addPointers(\"/integers\");\n+        assertEquals(nodeSet.getPointers().toString(), list(\"/integers[1]\",\n+                \"/integers[2]\", \"/integers[3]\", \"/integers[4]\").toString());\n+    }\n+\n+    /**\n+     * Test removing a pointer.\n+     */\n+    public void testRemove() {\n+        addPointers(\"/integers\");\n+        removePointers(\"/integers[4]\");\n+        assertEquals(list(\"/integers[1]\", \"/integers[2]\", \"/integers[3]\")\n+                .toString(), nodeSet.getPointers().toString());\n+        assertEquals(list(new Integer(1), new Integer(2), new Integer(3)),\n+                nodeSet.getValues());\n+    }\n+}", "timestamp": 1197321327, "metainfo": ""}