{"sha": "2735dfce721fbf083b91b3b7695d8672c28200ae", "log": "Copied getAccessibleProperty from PropertyUtils   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/PropertyAccessHelper.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/PropertyAccessHelper.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/PropertyAccessHelper.java,v 1.1 2001/08/23 00:47:00 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/08/23 00:47:00 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/PropertyAccessHelper.java,v 1.2 2001/09/09 00:52:04 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2001/09/09 00:52:04 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2001/08/23 00:47:00 $\n+ * @version $Revision: 1.2 $ $Date: 2001/09/09 00:52:04 $\n  */\n public class PropertyAccessHelper {\n     private static Map dynamicPropertyHandlerMap = new HashMap();\n     public static Object getValue(Object bean, PropertyDescriptor propertyDescriptor){\n         Object value;\n         try {\n-            Method method = propertyDescriptor.getReadMethod();\n+            Method method = getAccessibleMethod(propertyDescriptor.getReadMethod());\n             if (method == null){\n                 throw new RuntimeException(\"No read method\");\n             }\n             value = method.invoke(bean, new Object[0]);\n         }\n         catch (Exception ex){\n+            ex.printStackTrace();\n             throw new RuntimeException(\"Cannot access property: \" + propertyDescriptor.getName() +\n                 \", \" + ex.getMessage());\n         }\n \n     public static void setValue(Object bean, PropertyDescriptor propertyDescriptor, Object value){\n         try {\n-            Method method = propertyDescriptor.getWriteMethod();\n+            Method method = getAccessibleMethod(propertyDescriptor.getWriteMethod());\n             if (method == null){\n                 throw new RuntimeException(\"No write method\");\n             }\n         return handler;\n     }\n \n-\n+    // -------------------------------------------------------- Private Methods\n+    //\n+    //  The rest of the code in this file was copied FROM\n+    //  org.apache.commons.beanutils.PropertyUtil. We don't want to introduce a dependency\n+    //  on BeanUtils yet - DP.\n+    //\n+\n+    /**\n+     * Return an accessible method (that is, one that can be invoked via\n+     * reflection) that implements the specified Method.  If no such method\n+     * can be found, return <code>null</code>.\n+     *\n+     * @param method The method that we wish to call\n+     */\n+    private static Method getAccessibleMethod(Method method) {\n+\n+        // Make sure we have a method to check\n+        if (method == null) {\n+            return (null);\n+        }\n+\n+        // If the requested method is not public we cannot call it\n+        if (!Modifier.isPublic(method.getModifiers())) {\n+            return (null);\n+        }\n+\n+        // If the declaring class is public, we are done\n+        Class clazz = method.getDeclaringClass();\n+        if (Modifier.isPublic(clazz.getModifiers())) {\n+            return (method);\n+        }\n+\n+        // Check the implemented interfaces and subinterfaces\n+        String methodName = method.getName();\n+        Class[] parameterTypes = method.getParameterTypes();\n+        method =\n+            getAccessibleMethodFromInterfaceNest(clazz,\n+                                                 method.getName(),\n+                                                 method.getParameterTypes());\n+        return (method);\n+    }\n+\n+\n+    /**\n+     * Return an accessible method (that is, one that can be invoked via\n+     * reflection) that implements the specified method, by scanning through\n+     * all implemented interfaces and subinterfaces.  If no such Method\n+     * can be found, return <code>null</code>.\n+     *\n+     * @param clazz Parent class for the interfaces to be checked\n+     * @param methodName Method name of the method we wish to call\n+     * @param parameterTypes The parameter type signatures\n+     */\n+    private static Method getAccessibleMethodFromInterfaceNest\n+        (Class clazz, String methodName, Class parameterTypes[]) {\n+\n+        Method method = null;\n+\n+        // Check the implemented interfaces of the parent class\n+        Class interfaces[] = clazz.getInterfaces();\n+        for (int i = 0; i < interfaces.length; i++) {\n+\n+            // Is this interface public?\n+            if (!Modifier.isPublic(interfaces[i].getModifiers()))\n+                continue;\n+\n+            // Does the method exist on this interface?\n+            try {\n+                method = interfaces[i].getDeclaredMethod(methodName,\n+                                                         parameterTypes);\n+            } catch (NoSuchMethodException e) {\n+                ;\n+            }\n+            if (method != null)\n+                break;\n+\n+            // Recursively check our parent interfaces\n+            method =\n+                getAccessibleMethodFromInterfaceNest(interfaces[i],\n+                                                     methodName,\n+                                                     parameterTypes);\n+            if (method != null)\n+                break;\n+\n+        }\n+\n+        // Return whatever we have found\n+        return (method);\n+    }\n }", "timestamp": 999996724, "metainfo": ""}