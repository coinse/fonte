{"sha": "35095d43427355136d31c78acf2e54f635401efc", "log": "[JXPATH-104] Add helper method to determine whether a given qname denotes a valid property(ies).  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n         if (test instanceof NodeNameTest) {\n             NodeNameTest nodeNameTest = (NodeNameTest) test;\n             QName testName = nodeNameTest.getNodeName();\n-            if (!isDefaultNamespace(testName.getPrefix())) {\n-                return null;\n+            if (isValidProperty(testName)) {\n+                return createNodeIterator(nodeNameTest.isWildcard() ? null\n+                        : testName.toString(), reverse, startWith);\n             }\n-            String property = nodeNameTest.isWildcard() ? null : testName.getName();\n-            return createNodeIterator(property, reverse, startWith);\n+            return null;\n         }\n         return test instanceof NodeTypeTest && ((NodeTypeTest) test).getNodeType() == Compiler.NODE_TYPE_NODE\n                 ? createNodeIterator(null, reverse, startWith) : null;\n     }\n \n     public abstract QName getName();\n+\n+    /**\n+     * Learn whether <code>name</code> is a valid child name for this PropertyOwnerPointer.\n+     * @param name the QName to test\n+     * @return <code>true</code> if <code>QName</code> is a valid property name.\n+     * @since JXPath 1.3\n+     */\n+    public boolean isValidProperty(QName name) {\n+        return isDefaultNamespace(name.getPrefix());\n+    }\n \n     /**\n      * Throws an exception if you try to change the root element, otherwise", "timestamp": 1196888521, "metainfo": ""}