{"sha": "788f8dcdb0be4c8ec90efc130272a346bf513a03", "log": "New test for the JXPathServletContexts based on mock objects Fixed the ClassCastException in ServletRequestHandler (JXPATH-120)  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/servlet/ServletRequestHandler.java\n+++ b/src/java/org/apache/commons/jxpath/servlet/ServletRequestHandler.java\n  */\n package org.apache.commons.jxpath.servlet;\n \n-import java.util.Arrays;\n import java.util.Enumeration;\n import java.util.HashSet;\n import javax.servlet.ServletRequest;\n     }\n \n     public void setProperty(Object request, String property, Object value) {\n-        ((ServletRequest) request).setAttribute(property, value);\n+        ((ServletRequestAndContext) request).getServletRequest().setAttribute(property, value);\n     }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/jxpath/servlet/JXPathServletContextTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.jxpath.servlet;\n+\n+import java.util.Iterator;\n+import javax.servlet.ServletContext;\n+\n+import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.Pointer;\n+import org.apache.commons.jxpath.Variables;\n+\n+import com.mockrunner.mock.web.MockHttpServletRequest;\n+import com.mockrunner.mock.web.MockHttpSession;\n+import com.mockrunner.mock.web.MockPageContext;\n+import com.mockrunner.mock.web.MockServletConfig;\n+import com.mockrunner.mock.web.MockServletContext;\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Emmanuel Bourg\n+ * @version $Revision$, $Date$\n+ */\n+public class JXPathServletContextTest extends TestCase {\n+\n+    private ServletContext getServletContext() {\n+        MockServletContext context = new MockServletContext();\n+        context.setAttribute(\"app\", \"OK\");\n+\n+        return context;\n+    }\n+    \n+    public void testServletContext() {\n+        ServletContext context = getServletContext();\n+        JXPathContext appContext = JXPathServletContexts.getApplicationContext(context);\n+\n+        assertSame(\"Cached context not property returned\", appContext, JXPathServletContexts.getApplicationContext(context));\n+\n+        assertEquals(\"Application Context\", \"OK\", appContext.getValue(\"app\"));\n+\n+        checkPointerIterator(appContext);\n+\n+        // test setting a value in the context\n+        appContext.setValue(\"/foo\", \"bar\");\n+        assertEquals(\"Context property\", \"bar\", appContext.getValue(\"/foo\"));\n+\n+        // test the variables\n+        Variables variables = appContext.getVariables();\n+        assertNotNull(\"$application variable\", variables.getVariable(\"application\"));\n+        assertNull(\"$foo variable\", variables.getVariable(\"$foo\"));\n+    }\n+\n+    public void testServletRequest() {\n+        ServletContext context = getServletContext();\n+\n+        MockHttpSession session = new MockHttpSession();\n+        session.setupServletContext(context);\n+        session.setUpIsNew(true);\n+        Integer count = new Integer(10);\n+        session.setAttribute(\"count\", count);\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.setSession(session);\n+        request.setAttribute(\"attr\", \"OK\");\n+        request.setupAddParameter(\"parm\", \"OK\");\n+        request.setupAddParameter(\"multiparam\", new String[] { \"value1\", \"value2\" });\n+        request.setupAddParameter(\"emptyparam\", new String[0]);\n+\n+        assertSame(\"Request session\", session, request.getSession());\n+\n+        JXPathContext reqContext = JXPathServletContexts.getRequestContext(request, context);\n+\n+        assertSame(\"Cached context not property returned\", reqContext, JXPathServletContexts.getRequestContext(request, context));\n+\n+        JXPathContext sessionContext = JXPathServletContexts.getSessionContext(session, context);\n+\n+        assertSame(\"Cached context not property returned\", sessionContext, JXPathServletContexts.getSessionContext(session, context));\n+\n+        assertEquals(\"Request Context Attribute\", \"OK\", reqContext.getValue(\"attr\"));\n+\n+        assertEquals(\"Request Context Parameter\", \"OK\", reqContext.getValue(\"parm\"));\n+        assertTrue(\"Request Context Parameter (Array)\", reqContext.getValue(\"multiparam\").getClass().isArray());\n+        assertEquals(\"Request Context Parameter (Empty)\", null, reqContext.getValue(\"emptyparam\"));\n+\n+        assertEquals(\"Session Context Parameter\", count, sessionContext.getValue(\"count\"));\n+        assertEquals(\"Application Context via Request Context\", \"OK\", reqContext.getValue(\"app\"));\n+        assertEquals(\"Session Context via Request Context\", count, reqContext.getValue(\"count\"));\n+        assertEquals(\"Application Context via Session Context\", \"OK\", sessionContext.getValue(\"app\"));\n+\n+        checkPointerIterator(reqContext);\n+        checkPointerIterator(sessionContext);\n+\n+        // test setting a value in the context\n+        reqContext.setValue(\"/foo1\", \"bar1\");\n+        assertEquals(\"Context property\", \"bar1\", reqContext.getValue(\"/foo1\"));\n+\n+        sessionContext.setValue(\"/foo2\", \"bar2\");\n+        assertEquals(\"Context property\", \"bar2\", sessionContext.getValue(\"/foo2\"));\n+    }\n+\n+    public void testServletRequestWithoutSession() {\n+        ServletContext context = getServletContext();\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+\n+        JXPathContext reqContext = JXPathServletContexts.getRequestContext(request, context);\n+\n+        assertEquals(\"Application Context via Request Context\", \"OK\", reqContext.getValue(\"app\"));\n+    }\n+\n+    private void checkPointerIterator(JXPathContext context) {\n+        Iterator it = context.iteratePointers(\"/*\");\n+        assertTrue(\"Empty context\", it.hasNext());\n+        while (it.hasNext())\n+        {\n+            Pointer pointer = (Pointer) it.next();\n+            assertNotNull(\"null pointer\", pointer);\n+            assertNotNull(\"null path\", pointer.asPath());\n+        }\n+    }\n+\n+    public void testPageContext() {\n+        MockServletContext servletContext = new MockServletContext();\n+        servletContext.setAttribute(\"app\", \"app\");\n+\n+        MockServletConfig servletConfig = new MockServletConfig();\n+        servletConfig.setServletContext(servletContext);\n+\n+        MockHttpSession session = new MockHttpSession();\n+        session.setupServletContext(servletContext);\n+        session.setAttribute(\"session\", \"session\");\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.setAttribute(\"request\", \"request\");\n+        request.setSession(session);\n+\n+        MockPageContext pageContext = new MockPageContext();\n+        pageContext.setServletConfig(servletConfig);\n+        pageContext.setServletRequest(request);\n+        pageContext.setAttribute(\"page\", \"page\");\n+\n+        assertSame(\"Request session\", session, request.getSession());\n+\n+\n+        JXPathContext context = JXPathServletContexts.getPageContext(pageContext);\n+        context.setLenient(true);\n+        \n+        checkPointerIterator(context);\n+\n+        assertEquals(\"Page Scope\", \"page\", context.getValue(\"page\"));\n+        assertEquals(\"Request Scope\", \"request\", context.getValue(\"request\"));\n+        assertEquals(\"Session Scope\", \"session\", context.getValue(\"session\"));\n+        assertEquals(\"Application Scope\", \"app\", context.getValue(\"app\"));\n+\n+        assertEquals(\"Explicit Page Scope\", \"page\", context.getValue(\"$page/page\"));\n+        assertEquals(\"Explicit Request Scope\", \"request\", context.getValue(\"$request/request\"));\n+        assertEquals(\"Explicit Session Scope\", \"session\", context.getValue(\"$session/session\"));\n+        assertEquals(\"Explicit Application Scope\", \"app\", context.getValue(\"$application/app\"));\n+\n+        // iterate through the elements of page context only (two elements expected, 'page' and the context)\n+        Iterator it = context.iteratePointers(\"$page/*\");\n+        assertTrue(\"element not found\", it.hasNext());\n+        it.next();\n+        it.next();\n+        assertFalse(\"too many elements\", it.hasNext());\n+\n+        // test setting a value in the context\n+        context.setValue(\"/foo1\", \"bar1\");\n+        assertEquals(\"Context property\", \"bar1\", context.getValue(\"/foo1\"));\n+\n+        context.setValue(\"$page/foo2\", \"bar2\");\n+        assertEquals(\"Context property\", \"bar2\", context.getValue(\"$page/foo2\"));\n+    }\n+}", "timestamp": 1209750830, "metainfo": ""}