{"sha": "163440e05f7cd4680973e99144f7d60f343ebeaa", "log": "Added getValue(expr,class) that can perform type conversion   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/JXPathContext.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathContext.java,v 1.1 2001/08/23 00:46:58 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/08/23 00:46:58 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathContext.java,v 1.2 2001/09/08 20:59:58 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2001/09/08 20:59:58 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * See <a href=\"http://www.w3.org/TR/xpath\">XML Path Language (XPath) Version 1.0 </a>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2001/08/23 00:46:58 $\n+ * @version $Revision: 1.2 $ $Date: 2001/09/08 20:59:58 $\n  */\n public abstract class JXPathContext {\n     protected JXPathContext parentContext;\n     }\n \n     /**\n-     * Traverses the xpath and returns the resulting object. Primitive\n+     * Evaluates the xpath and returns the resulting object. Primitive\n      * types are wrapped into objects.\n      */\n     public abstract Object getValue(String xpath);\n+\n+    /**\n+     * Evaluates the xpath, converts the result to the specified class and\n+     * returns the resulting object.\n+     */\n+    public abstract Object getValue(String xpath, Class requiredType);\n \n     /**\n      * Modifies the value of the property described by the supplied xpath.\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.2 2001/09/03 01:22:30 dmitri Exp $\n- * $Revision: 1.2 $\n- * $Date: 2001/09/03 01:22:30 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.3 2001/09/08 20:59:58 dmitri Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2001/09/08 20:59:58 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.ri.pointers.*;\n import org.apache.commons.jxpath.ri.EvalContext;\n import org.apache.commons.jxpath.ri.axes.*;\n+import org.apache.commons.jxpath.functions.Types;\n import java.lang.ref.SoftReference;\n import org.w3c.dom.*;\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.2 $ $Date: 2001/09/03 01:22:30 $\n+ * @version $Revision: 1.3 $ $Date: 2001/09/08 20:59:58 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext\n {\n             result = EvalContext.stringValue((Node)result);\n         }\n         return result;\n+    }\n+\n+    /**\n+     * Calls getValue(xpath), converts the result to the required type\n+     * and returns the result of the conversion.\n+     */\n+    public Object getValue(String xpath, Class requiredType){\n+        Object value = getValue(xpath);\n+        if (value != null && requiredType != null){\n+            if (!Types.canConvert(value, requiredType)){\n+                throw new RuntimeException(\"Invalid expression type. '\" + xpath +\n+                    \"' returns \" + value.getClass().getName() +\n+                    \". It cannot be converted to \" + requiredType.getName());\n+            }\n+            value = Types.convert(value, requiredType);\n+        }\n+        return value;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/xalan/JXPathContextXalanImpl.java\n+++ b/src/java/org/apache/commons/jxpath/xalan/JXPathContextXalanImpl.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/xalan/Attic/JXPathContextXalanImpl.java,v 1.1 2001/08/23 00:47:01 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/08/23 00:47:01 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/xalan/Attic/JXPathContextXalanImpl.java,v 1.2 2001/09/08 20:59:58 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2001/09/08 20:59:58 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * <a href=\"http://www.java.sun.com/xml/download.html\">JAXP</a>.\n  * </p>\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2001/08/23 00:47:01 $\n+ * @version $Revision: 1.2 $ $Date: 2001/09/08 20:59:58 $\n  */\n public class JXPathContextXalanImpl extends JXPathContext {\n \n     }\n \n     /**\n+     * Calls getValue(xpath) and verifies that it has returned\n+     * a value of the required type.\n+     */\n+    public Object getValue(String xpath, Class requiredType){\n+        Object value = getValue(xpath);\n+        if (value != null){\n+            if (!requiredType.isInstance(value)){\n+                throw new RuntimeException(\"Invalid expression type. '\" + xpath +\n+                    \"' returns \" + value.getClass().getName() +\n+                    \". Expected \" + requiredType.getName());\n+            }\n+        }\n+        return value;\n+    }\n+\n+    /**\n      * Traverses the xpath and returns the resulting object. Primitive\n      * types are wrapped into objects.\n      */\n     public Object getValue(String xpath){\n         return evalNode(getWrapper(), xpath, true);\n     }\n+\n \n     /**\n      * Traverses the xpath and returns a List of objects. Even if\n--- a/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.3 2001/09/03 01:22:31 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2001/09/03 01:22:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.4 2001/09/08 20:59:58 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2001/09/08 20:59:58 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * </p>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2001/09/03 01:22:31 $\n+ * @version $Revision: 1.4 $ $Date: 2001/09/08 20:59:58 $\n  */\n \n public class JXPathTestCase extends TestCase\n             testGetValue(context, \".[1]/int\",                new Integer(1));\n //        testGetValue(context, \"id('foo')\",               new Integer(1));\n //        testGetValue(context, \"key('foo', 'bar')\",               new Integer(1));\n+            testGetValue(context, \"integers[1]\",            new Double(1), Double.class);\n+            testGetValue(context, \"2 + 3\",                  \"5.0\", String.class);\n+            testGetValue(context, \"2 + 3\",                  Boolean.TRUE, boolean.class);\n+            boolean exception = false;\n+            try {\n+                testGetValue(context, \"'foo'\",                  null, Date.class);\n+            }\n+            catch(Exception ex){\n+                exception = true;\n+            }\n+            assertTrue(\"Type conversion exception\", exception);\n         }\n     }\n \n \n     private void testGetValue(JXPathContext context, String xpath, Object expected) {\n         Object actual = context.getValue(xpath);\n+        assertEquals(\"Evaluating <\" + xpath + \">\", expected, actual);\n+    }\n+\n+    private void testGetValue(JXPathContext context, String xpath, Object expected, Class requiredType) {\n+        Object actual = context.getValue(xpath, requiredType);\n         assertEquals(\"Evaluating <\" + xpath + \">\", expected, actual);\n     }\n ", "timestamp": 999982798, "metainfo": ""}