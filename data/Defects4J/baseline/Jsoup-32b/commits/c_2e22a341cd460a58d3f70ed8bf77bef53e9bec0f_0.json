{"sha": "2e22a341cd460a58d3f70ed8bf77bef53e9bec0f", "log": "Selector documentation tweak", "commit": "\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n  is equivalent).\n \n  <table>\n- <tr><th>Pattern</th><th>Matches</th><th>Example</th></tr>\n- <tr><td><code>*</code></td><td>any element</td><td><code>*</code></td></tr>\n- <tr><td><code>E</code></td><td>an element of type E</td><td><code>h1</code></td></tr>\n- <tr><td><code>ns|E</code></td><td>an element of type E in the namespace <i>ns</i></td><td><code>fb|name</code> finds <code>&lt;fb:name></code> elements</td></tr>\n- <tr><td><code>E#id</code></td><td>an Element with attribute ID of \"id\"</td><td><code>div#wrap</code>, <code>#logo</code></td></tr>\n- <tr><td><code>E.class</code></td><td>an Element with a class name of \"class\"</td><td><code>div.left</code>, <code>.result</code></td></tr>\n- <tr><td><code>E[attr]</code></td><td>an Element with the attribute named \"attr\"</td><td><code>a[href]</code>, <code>[title]</code></td></tr>\n- <tr><td><code>E[^attrPrefix]</code></td><td>an Element with an attribute name starting with \"attrPrefix\". Use to find elements with HTML5 datasets</td><td><code>[^data-]</code>, <code>div[^data-]</code></td></tr>\n- <tr><td><code>E[attr=val]</code></td><td>an Element with the attribute named \"attr\" and value equal to \"val\"</td><td><code>img[width=500]</code>, <code>a[rel=nofollow]</code></td></tr>\n- <tr><td><code>E[attr^=valPrefix]</code></td><td>an Element with the attribute named \"attr\" and value starting with \"valPrefix\"</td><td><code>a[href^=http:]</code></code></td></tr>\n- <tr><td><code>E[attr$=valSuffix]</code></td><td>an Element with the attribute named \"attr\" and value ending with \"valSuffix\"</td><td><code>img[src$=.png]</code></td></tr>\n- <tr><td><code>E[attr*=valContaining]</code></td><td>an Element with the attribute named \"attr\" and value containing \"valContaining\"</td><td><code>a[href*=/search/]</code></td></tr>\n- <tr><td><code>E[attr~=<em>regex</em>]</code></td><td>an Element with the attribute named \"attr\" and value matching the regular expression</td><td><code>img[src~=(?i)\\\\.(png|jpe?g)]</code></td></tr>\n- <tr><td></td><td>The above may be combined in any order</td><td><code>div.header[title]</code></td></tr>\n- <tr><td><td colspan=\"3\"><h3>Combinators</h3></td></tr>\n- <tr><td><code>E F</code></td><td>an F element descended from an E element</td><td><code>div a</code>, <code>.logo h1</code></td></tr>\n- <tr><td><code>E > F</code></td><td>an F child of E</td><td><code>ol > li</code></td></tr>\n- <tr><td><code>E + F</code></td><td>an F element immediately preceded by sibling E</td><td><code>li + li</code>, <code>div.head + div</code></td></tr>\n- <tr><td><code>E ~ F</code></td><td>an F element preceded by sibling E</td><td><code>h1 ~ p</code></td></tr>\n- <tr><td><code>E, F, G</code></td><td>any matching element E, F, or G</td><td><code>a[href], div, h3</code></td></tr>\n- <tr><td><td colspan=\"3\"><h3>Pseudo selectors</h3></td></tr>\n- <tr><td><code>E:lt(<em>n</em>)</code></td><td>an Element whose sibling index is less than <em>n</em></td><td><code>td:lt(3)</code> finds the first 2 cells of each row</td></tr>\n- <tr><td><code>E:gt(<em>n</em>)</code></td><td>an Element whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n- <tr><td><code>E:eq(<em>n</em>)</code></td><td>an Element whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n- <tr><td><code>E:has(<em>selector</em>)</code></td><td>an Element that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n- <tr><td><code>E:contains(<em>text</em>)</code></td><td>an Element that contains the specified text. The search is case insensitive. The text may appear in the found Element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n- <tr><td><code>E:matches(<em>regex</em>)</code></td><td>an Element whose text matches the specified regular expression. The text may appear in the found Element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n- <tr><td><code>E:containsOwn(<em>text</em>)</code></td><td>an Element that directly contains the specified text. The search is case insensitive. The text must appear in the found Element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n- <tr><td><code>E:matchesOwn(<em>regex</em>)</code></td><td>an Element whose own text matches the specified regular expression. The text must appear in the found Element, not any of its descendants.</td><td><code>td:matchesOwn(\\\\d+)</code> finds table cells directly containing digits. <code>div:matchesOwn((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n- </table>\n+  <tr><th>Pattern</th><th>Matches</th><th>Example</th></tr>\n+  <tr><td><code>*</code></td><td>any element</td><td><code>*</code></td></tr>\n+  <tr><td><code>tag</code></td><td>elements with the given tag name</td><td><code>div</code></td></tr>\n+  <tr><td><code>ns|E</code></td><td>elements of type E in the namespace <i>ns</i></td><td><code>fb|name</code> finds <code>&lt;fb:name></code> elements</td></tr>\n+  <tr><td><code>#id</code></td><td>elements with attribute ID of \"id\"</td><td><code>div#wrap</code>, <code>#logo</code></td></tr>\n+  <tr><td><code>.class</code></td><td>elements with a class name of \"class\"</td><td><code>div.left</code>, <code>.result</code></td></tr>\n+  <tr><td><code>[attr]</code></td><td>elements with an attribute named \"attr\" (with any value)</td><td><code>a[href]</code>, <code>[title]</code></td></tr>\n+  <tr><td><code>[^attrPrefix]</code></td><td>elements with an attribute name starting with \"attrPrefix\". Use to find elements with HTML5 datasets</td><td><code>[^data-]</code>, <code>div[^data-]</code></td></tr>\n+  <tr><td><code>[attr=val]</code></td><td>elements with an attribute named \"attr\", and value equal to \"val\"</td><td><code>img[width=500]</code>, <code>a[rel=nofollow]</code></td></tr>\n+  <tr><td><code>[attr^=valPrefix]</code></td><td>elements with an attribute named \"attr\", and value starting with \"valPrefix\"</td><td><code>a[href^=http:]</code></code></td></tr>\n+  <tr><td><code>[attr$=valSuffix]</code></td><td>elements with an attribute named \"attr\", and value ending with \"valSuffix\"</td><td><code>img[src$=.png]</code></td></tr>\n+  <tr><td><code>[attr*=valContaining]</code></td><td>elements with an attribute named \"attr\", and value containing \"valContaining\"</td><td><code>a[href*=/search/]</code></td></tr>\n+  <tr><td><code>[attr~=<em>regex</em>]</code></td><td>elements with an attribute named \"attr\", and value matching the regular expression</td><td><code>img[src~=(?i)\\\\.(png|jpe?g)]</code></td></tr>\n+  <tr><td></td><td>The above may be combined in any order</td><td><code>div.header[title]</code></td></tr>\n+  <tr><td><td colspan=\"3\"><h3>Combinators</h3></td></tr>\n+  <tr><td><code>E F</code></td><td>an F element descended from an E element</td><td><code>div a</code>, <code>.logo h1</code></td></tr>\n+  <tr><td><code>E > F</code></td><td>an F direct child of E</td><td><code>ol > li</code></td></tr>\n+  <tr><td><code>E + F</code></td><td>an F element immediately preceded by sibling E</td><td><code>li + li</code>, <code>div.head + div</code></td></tr>\n+  <tr><td><code>E ~ F</code></td><td>an F element preceded by sibling E</td><td><code>h1 ~ p</code></td></tr>\n+  <tr><td><code>E, F, G</code></td><td>all matching elements E, F, or G</td><td><code>a[href], div, h3</code></td></tr>\n+  <tr><td><td colspan=\"3\"><h3>Pseudo selectors</h3></td></tr>\n+  <tr><td><code>:lt(<em>n</em>)</code></td><td>elements whose sibling index is less than <em>n</em></td><td><code>td:lt(3)</code> finds the first 2 cells of each row</td></tr>\n+  <tr><td><code>:gt(<em>n</em>)</code></td><td>elements whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n+  <tr><td><code>:eq(<em>n</em>)</code></td><td>elements whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n+  <tr><td><code>:has(<em>selector</em>)</code></td><td>elements that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n+  <tr><td><code>:contains(<em>text</em>)</code></td><td>elements that contains the specified text. The search is case insensitive. The text may appear in the found element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n+  <tr><td><code>:matches(<em>regex</em>)</code></td><td>elements whose text matches the specified regular expression. The text may appear in the found element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n+  <tr><td><code>:containsOwn(<em>text</em>)</code></td><td>elements that directly contains the specified text. The search is case insensitive. The text must appear in the found element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n+  <tr><td><code>:matchesOwn(<em>regex</em>)</code></td><td>elements whose own text matches the specified regular expression. The text must appear in the found element, not any of its descendants.</td><td><code>td:matchesOwn(\\\\d+)</code> finds table cells directly containing digits. <code>div:matchesOwn((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n+  <tr><td></td><td>The above may be combined in any order and with other selectors</td><td><code>.light:contains(name):eq(0)</code></td></tr>\n+  </table>\n \n  @see Element#select(String)\n  @author Jonathan Hedley, jonathan@hedley.net */\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         Elements ps3 = doc.select(\"p:contains(the Rain):has(i)\");\n         assertEquals(1, ps3.size());\n         assertEquals(\"light\", ps3.first().className());\n+\n+        Elements ps4 = doc.select(\".light:contains(rain)\");\n+        assertEquals(1, ps4.size());\n+        assertEquals(\"light\", ps3.first().className());\n+\n+        Elements ps5 = doc.select(\":contains(rain)\");\n+        assertEquals(8, ps5.size()); // html, body, div,...\n     }\n     \n     @Test public void testPsuedoContainsWithParentheses() {", "timestamp": 1309605120, "metainfo": ""}