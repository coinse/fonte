{"sha": "e322266704817edd0a19e05207a15b791ca160b6", "log": "Implemented \"abs:\" virtual attribute prefix for absolute URLs.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n     public abstract String nodeName();\n \n     /**\n-     * Get an attribute.\n+     * Get an attribute's value by its key.\n+     * <p/>\n+     * To get an absolute URL from an attribute that may be a relative URL, prefix the key with <code><b>abs</b></code>,\n+     * which is a shortcut to the {@link #absUrl} method.\n+     * E.g.: <blockquote><code>String url = a.attr(\"abs:href\");</code></blockquote>\n      * @param attributeKey The attribute key.\n      * @return The attribute, or empty string if not present (to avoid nulls).\n      * @see #getAttributes()\n      * @see #hasAttr(String)\n+     * @see #absUrl(String)\n      */\n     public String attr(String attributeKey) {\n-        String value = attributes.get(attributeKey);\n-        return value == null ? \"\" : value;\n+        Validate.notNull(attributeKey);\n+\n+        if (hasAttr(attributeKey))\n+            return attributes.get(attributeKey);\n+        else if (attributeKey.toLowerCase().startsWith(\"abs:\"))\n+            return absUrl(attributeKey.substring(\"abs:\".length()));\n+        else return \"\";\n     }\n \n     /**\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n         \n         Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first();\n         assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\"));\n-        assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.absUrl(\"href\"));\n+        assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\"));\n         \n         Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first();\n         assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\"));\n-        assertEquals(hs.attr(\"href\"), hs.absUrl(\"href\"));\n+        assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\"));\n     }\n     \n     @Test public void testGoogleSearchIpod() {\n--- a/src/test/java/org/jsoup/nodes/NodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/NodeTest.java\n package org.jsoup.nodes;\n \n+import org.jsoup.Jsoup;\n import org.jsoup.parser.StartTag;\n import org.jsoup.parser.Tag;\n import org.junit.Test;\n         assertEquals(\"http://bar/qux\", dodgyBase.absUrl(\"absHref\")); // base fails, but href good, so get that\n         assertEquals(\"\", dodgyBase.absUrl(\"relHref\")); // base fails, only rel href, so return nothing \n     }\n+\n+    @Test public void handlesAbsPrefix() {\n+        Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\");\n+        Element a = doc.select(\"a\").first();\n+        assertEquals(\"/foo\", a.attr(\"href\"));\n+        assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\"));\n+        assertFalse(a.hasAttr(\"abs:href\")); // only realised on the get method, not in has or iterator\n+    }\n }", "timestamp": 1309605104, "metainfo": ""}