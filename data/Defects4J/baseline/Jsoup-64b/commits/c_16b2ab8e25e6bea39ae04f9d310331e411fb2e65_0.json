{"sha": "16b2ab8e25e6bea39ae04f9d310331e411fb2e65", "log": "Added eachText and eachAttr", "commit": "\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n     }\n \n     /**\n-     Checks if any of the matched elements have this attribute set.\n+     Checks if any of the matched elements have this attribute defined.\n      @param attributeKey attribute key\n      @return true if any of the elements have the attribute; false if none do.\n      */\n                 return true;\n         }\n         return false;\n+    }\n+\n+    /**\n+     * Get the attribute value for each of the matched elements. If an element does not have this attribute, no value is\n+     * included in the result set for that element.\n+     * @param attributeKey the attribute name to return values for. You can add the {@code abs:} prefix to the key to\n+     * get absolute URLs from relative URLs, e.g.: {@code doc.select(\"a\").eachAttr(\"abs:href\")} .\n+     * @return a list of each element's attribute value for the attribute\n+     */\n+    public List<String> eachAttr(String attributeKey) {\n+        List<String> attrs = new ArrayList<String>(size());\n+        for (Element element : this) {\n+            if (element.hasAttr(attributeKey))\n+                attrs.add(element.attr(attributeKey));\n+        }\n+        return attrs;\n     }\n \n     /**\n      * children, as the Element.text() method returns the combined text of a parent and all its children.\n      * @return string of all text: unescaped and no HTML.\n      * @see Element#text()\n+     * @see #eachText()\n      */\n     public String text() {\n         StringBuilder sb = new StringBuilder();\n         return sb.toString();\n     }\n \n+    /**\n+     Test if any matched Element has any text content, that is not just whitespace.\n+     @return true if any element has non-blank text content.\n+     @see Element#hasText()\n+     */\n     public boolean hasText() {\n         for (Element element: this) {\n             if (element.hasText())\n                 return true;\n         }\n         return false;\n+    }\n+\n+    /**\n+     * Get the text content of each of the matched elements. If an element has no text, then it is not included in the\n+     * result.\n+     * @return A list of each matched element's text content.\n+     * @see Element#text()\n+     * @see Element#hasText()\n+     * @see #text()\n+     */\n+    public List<String> eachText() {\n+        ArrayList<String> texts = new ArrayList<String>(size());\n+        for (Element el: this) {\n+            if (el.hasText())\n+                texts.add(el.text());\n+        }\n+        return texts;\n     }\n     \n     /**\n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n \n import java.util.List;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n \n /**\n  Tests for ElementList.\n         assertEquals(1, prevAF.size());\n         assertEquals(\"1\", prevAF.first().text());\n     }\n+\n+    @Test public void eachText() {\n+        Document doc = Jsoup.parse(\"<div><p>1<p>2<p>3<p>4<p>5<p>6</div><div><p>7<p>8<p>9<p>10<p>11<p>12<p></p></div>\");\n+        List<String> divText = doc.select(\"div\").eachText();\n+        assertEquals(2, divText.size());\n+        assertEquals(\"1 2 3 4 5 6\", divText.get(0));\n+        assertEquals(\"7 8 9 10 11 12\", divText.get(1));\n+\n+        List<String> pText = doc.select(\"p\").eachText();\n+        Elements ps = doc.select(\"p\");\n+        assertEquals(13, ps.size());\n+        assertEquals(12, pText.size()); // not 13, as last doesn't have text\n+        assertEquals(\"1\", pText.get(0));\n+        assertEquals(\"2\", pText.get(1));\n+        assertEquals(\"5\", pText.get(4));\n+        assertEquals(\"7\", pText.get(6));\n+        assertEquals(\"12\", pText.get(11));\n+    }\n+\n+    @Test public void eachAttr() {\n+        Document doc = Jsoup.parse(\n+            \"<div><a href='/foo'>1</a><a href='http://example.com/bar'>2</a><a href=''>3</a><a>4</a>\",\n+            \"http://example.com\");\n+\n+        List<String> hrefAttrs = doc.select(\"a\").eachAttr(\"href\");\n+        assertEquals(3, hrefAttrs.size());\n+        assertEquals(\"/foo\", hrefAttrs.get(0));\n+        assertEquals(\"http://example.com/bar\", hrefAttrs.get(1));\n+        assertEquals(\"\", hrefAttrs.get(2));\n+        assertEquals(4, doc.select(\"a\").size());\n+\n+        List<String> absAttrs = doc.select(\"a\").eachAttr(\"abs:href\");\n+        assertEquals(3, absAttrs.size());\n+        assertEquals(3, absAttrs.size());\n+        assertEquals(\"http://example.com/foo\", absAttrs.get(0));\n+        assertEquals(\"http://example.com/bar\", absAttrs.get(1));\n+        assertEquals(\"http://example.com\", absAttrs.get(2));\n+    }\n }", "timestamp": 1484689908, "metainfo": ""}