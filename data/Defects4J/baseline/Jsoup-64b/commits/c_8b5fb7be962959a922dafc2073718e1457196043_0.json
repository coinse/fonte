{"sha": "8b5fb7be962959a922dafc2073718e1457196043", "log": "Merge remote-tracking branch 'upstream/master'  Conflicts: \tsrc/test/java/org/jsoup/integration/UrlConnectTest.java", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n         public Request timeout(int millis);\n \n         /**\n-         * Get the maximum body size, in milliseconds.\n-         * @return the maximum body size, in milliseconds.\n+         * Get the maximum body size, in bytes.\n+         * @return the maximum body size, in bytes.\n          */\n         public int maxBodySize();\n \n         /**\n-         * Update the maximum body size, in milliseconds.\n-         * @param bytes maximum body size, in milliseconds.\n+         * Update the maximum body size, in bytes.\n+         * @param bytes maximum body size, in bytes.\n          * @return this Request, for chaining\n          */\n         public Request maxBodySize(int bytes);\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n import java.io.*;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.Locale;\n  *\n  */\n public class DataUtil {\n-    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*\\\"?([^\\\\s;\\\"]*)\");\n+    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");\n     static final String defaultCharset = \"UTF-8\"; // used if not found in header or meta charset\n     private static final int bufferSize = 0x20000; // ~130K.\n \n      * @throws IOException on IO error\n      */\n     public static Document load(File in, String charsetName, String baseUri) throws IOException {\n-        FileInputStream inStream = null;\n-        try {\n-            inStream = new FileInputStream(in);\n-            ByteBuffer byteData = readToByteBuffer(inStream);\n-            return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());\n-        } finally {\n-            if (inStream != null)\n-                inStream.close();\n-        }\n+        ByteBuffer byteData = readFileToByteBuffer(in);\n+        return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());\n     }\n \n     /**\n \n     // reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\n     // switching the chartset midstream when a meta http-equiv tag defines the charset.\n+    // todo - this is getting gnarly. needs a rewrite.\n     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n         String docData;\n         Document doc = null;\n             doc = parser.parseInput(docData, baseUri);\n             Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n             if (meta != null) { // if not found, will keep utf-8 as best attempt\n-                String foundCharset = meta.hasAttr(\"http-equiv\") ? getCharsetFromContentType(meta.attr(\"content\")) : meta.attr(\"charset\");\n+                String foundCharset;\n+                if (meta.hasAttr(\"http-equiv\")) {\n+                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n+                    if (foundCharset == null && meta.hasAttr(\"charset\")) {\n+                        try {\n+                            if (Charset.isSupported(meta.attr(\"charset\"))) {\n+                                foundCharset = meta.attr(\"charset\");\n+                            }\n+                        } catch (IllegalCharsetNameException e) {\n+                            foundCharset = null;\n+                        }\n+                    }\n+                } else {\n+                    foundCharset = meta.attr(\"charset\");\n+                }\n+\n                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n+                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                     charsetName = foundCharset;\n                     byteData.rewind();\n                     docData = Charset.forName(foundCharset).decode(byteData).toString();\n             Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n             docData = Charset.forName(charsetName).decode(byteData).toString();\n         }\n+        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly\n+        if (docData.length() > 0 && docData.charAt(0) == 65279) {\n+            byteData.rewind();\n+            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n+            docData = docData.substring(1);\n+            charsetName = defaultCharset;\n+            doc = null;\n+        }\n         if (doc == null) {\n-            // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n-            // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n-            // into head mode\n-            if (docData.length() > 0 && docData.charAt(0) == 65279)\n-                docData = docData.substring(1);\n-\n             doc = parser.parseInput(docData, baseUri);\n             doc.outputSettings().charset(charsetName);\n         }\n         return readToByteBuffer(inStream, 0);\n     }\n \n+    static ByteBuffer readFileToByteBuffer(File file) throws IOException {\n+        RandomAccessFile randomAccessFile = null;\n+        try {\n+            randomAccessFile = new RandomAccessFile(file, \"r\");\n+            byte[] bytes = new byte[(int) randomAccessFile.length()];\n+            randomAccessFile.readFully(bytes);\n+            return ByteBuffer.wrap(bytes);\n+        } finally {\n+            if (randomAccessFile != null)\n+                randomAccessFile.close();\n+        }\n+    }\n+\n     /**\n      * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n      * will kick in.)\n         Matcher m = charsetPattern.matcher(contentType);\n         if (m.find()) {\n             String charset = m.group(1).trim();\n-            if (Charset.isSupported(charset)) return charset;\n-            charset = charset.toUpperCase(Locale.ENGLISH);\n-            if (Charset.isSupported(charset)) return charset;\n+            charset = charset.replace(\"charset=\", \"\");\n+            if (charset.isEmpty()) return null;\n+            try {\n+                if (Charset.isSupported(charset)) return charset;\n+                charset = charset.toUpperCase(Locale.ENGLISH);\n+                if (Charset.isSupported(charset)) return charset;\n+            } catch (IllegalCharsetNameException e) {\n+                // if our advanced charset matching fails.... we just take the default\n+                return null;\n+            }\n         }\n         return null;\n     }\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n         return con;\n     }\n \n+\tprivate static String encodeUrl(String url) {\n+\t\tif(url == null)\n+\t\t\treturn null;\n+    \treturn url.replaceAll(\" \", \"%20\");\n+\t}\n+\n     private Connection.Request req;\n     private Connection.Response res;\n \n     public Connection url(String url) {\n         Validate.notEmpty(url, \"Must supply a valid URL\");\n         try {\n-            req.url(new URL(url));\n+            req.url(new URL(encodeUrl(url)));\n         } catch (MalformedURLException e) {\n             throw new IllegalArgumentException(\"Malformed URL: \" + url, e);\n         }\n                 if (needsRedirect && req.followRedirects()) {\n                     req.method(Method.GET); // always redirect with a get. any data param from original req are dropped.\n                     req.data().clear();\n-                    req.url(new URL(req.url(), res.header(\"Location\")));\n+\n+                    String location = res.header(\"Location\");\n+                    if (location != null && location.startsWith(\"http:/\") && location.charAt(6) != '/') // fix broken Location: http:/temp/AAG_New/en/index.php\n+                        location = location.substring(6);\n+                    req.url(new URL(req.url(), encodeUrl(location)));\n+\n                     for (Map.Entry<String, String> cookie : res.cookies.entrySet()) { // add response cookies to request (for e.g. login posts)\n                         req.cookie(cookie.getKey(), cookie.getValue());\n                     }\n--- a/src/main/java/org/jsoup/helper/StringUtil.java\n+++ b/src/main/java/org/jsoup/helper/StringUtil.java\n         return c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r';\n     }\n \n+    /**\n+     * Normalise the whitespace within this string; multiple spaces collapse to a single, and all whitespace characters\n+     * (e.g. newline, tab) convert to a simple space\n+     * @param string content to normalise\n+     * @return normalised string\n+     */\n     public static String normaliseWhitespace(String string) {\n         StringBuilder sb = new StringBuilder(string.length());\n+        appendNormalisedWhitespace(sb, string, false);\n+        return sb.toString();\n+    }\n \n+    /**\n+     * After normalizing the whitespace within a string, appends it to a string builder.\n+     * @param accum builder to append to\n+     * @param string string to normalize whitespace within\n+     * @param stripLeading set to true if you wish to remove any leading whitespace\n+     * @return\n+     */\n+    public static void appendNormalisedWhitespace(StringBuilder accum, String string, boolean stripLeading) {\n         boolean lastWasWhite = false;\n-        boolean modified = false;\n+        boolean reachedNonWhite = false;\n \n-        int l = string.length();\n+        int len = string.length();\n         int c;\n-        for (int i = 0; i < l; i+= Character.charCount(c)) {\n+        for (int i = 0; i < len; i+= Character.charCount(c)) {\n             c = string.codePointAt(i);\n             if (isWhitespace(c)) {\n-                if (lastWasWhite) {\n-                    modified = true;\n+                if ((stripLeading && !reachedNonWhite) || lastWasWhite)\n                     continue;\n-                }\n-                if (c != ' ')\n-                    modified = true;\n-                sb.append(' ');\n+                accum.append(' ');\n                 lastWasWhite = true;\n             }\n             else {\n-                sb.appendCodePoint(c);\n+                accum.appendCodePoint(c);\n                 lastWasWhite = false;\n+                reachedNonWhite = true;\n             }\n         }\n-        return modified ? sb.toString() : string;\n     }\n \n     public static boolean in(String needle, String... haystack) {\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n \n import org.jsoup.helper.Validate;\n \n+import java.util.Arrays;\n import java.util.Map;\n \n /**\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class Attribute implements Map.Entry<String, String>, Cloneable  {\n+    private static final String[] booleanAttributes = {\n+            \"allowfullscreen\", \"async\", \"autofocus\", \"checked\", \"compact\", \"declare\", \"default\", \"defer\", \"disabled\",\n+            \"formnovalidate\", \"hidden\", \"inert\", \"ismap\", \"itemscope\", \"multiple\", \"muted\", \"nohref\", \"noresize\",\n+            \"noshade\", \"novalidate\", \"nowrap\", \"open\", \"readonly\", \"required\", \"reversed\", \"seamless\", \"selected\",\n+            \"sortable\", \"truespeed\", \"typemustmatch\"\n+    };\n+\n     private String key;\n     private String value;\n \n      @return HTML\n      */\n     public String html() {\n-        return key + \"=\\\"\" + Entities.escape(value, (new Document(\"\")).outputSettings()) + \"\\\"\";\n+        StringBuilder accum = new StringBuilder();\n+        html(accum, (new Document(\"\")).outputSettings());\n+        return accum.toString();\n     }\n     \n     protected void html(StringBuilder accum, Document.OutputSettings out) {\n-        accum\n-            .append(key)\n-            .append(\"=\\\"\")\n-            .append(Entities.escape(value, out))\n-            .append(\"\\\"\");\n+        accum.append(key);\n+        if (!shouldCollapseAttribute(out)) {\n+            accum.append(\"=\\\"\");\n+            Entities.escape(accum, value, out, true, false, false);\n+            accum.append('\"');\n+        }\n     }\n \n     /**\n \n     protected boolean isDataAttribute() {\n         return key.startsWith(Attributes.dataPrefix) && key.length() > Attributes.dataPrefix.length();\n+    }\n+\n+    /**\n+     * Collapsible if it's a boolean attribute and value is empty or same as name\n+     */\n+    protected final boolean shouldCollapseAttribute(Document.OutputSettings out) {\n+        return (\"\".equals(value) || value.equalsIgnoreCase(key))\n+                && out.syntax() == Document.OutputSettings.Syntax.html\n+                && Arrays.binarySearch(booleanAttributes, key) >= 0;\n     }\n \n     @Override\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n public class Document extends Element {\n     private OutputSettings outputSettings = new OutputSettings();\n     private QuirksMode quirksMode = QuirksMode.noQuirks;\n+    private String location;\n \n     /**\n      Create a new, empty Document.\n      */\n     public Document(String baseUri) {\n         super(Tag.valueOf(\"#root\"), baseUri);\n+        this.location = baseUri;\n     }\n \n     /**\n         return doc;\n     }\n \n+    /**\n+     * Get the URL this Document was parsed from. If the starting URL is a redirect,\n+     * this will return the final URL from which the document was served from.\n+     * @return location\n+     */\n+    public String location() {\n+     return location;\n+    }\n+    \n     /**\n      Accessor to the document's {@code head} element.\n      @return {@code head}\n      * A Document's output settings control the form of the text() and html() methods.\n      */\n     public static class OutputSettings implements Cloneable {\n+        /**\n+         * The output serialization syntax.\n+         */\n+        public enum Syntax {html, xml}\n+\n         private Entities.EscapeMode escapeMode = Entities.EscapeMode.base;\n         private Charset charset = Charset.forName(\"UTF-8\");\n         private CharsetEncoder charsetEncoder = charset.newEncoder();\n         private boolean prettyPrint = true;\n         private boolean outline = false;\n         private int indentAmount = 1;\n+        private Syntax syntax = Syntax.html;\n \n         public OutputSettings() {}\n \n         }\n \n         /**\n-         * Set the document's escape mode\n+         * Set the document's escape mode, which determines how characters are escaped when the output character set\n+         * does not support a given character:- using either a named or a numbered escape.\n          * @param escapeMode the new escape mode to use\n          * @return the document's output settings, for chaining\n          */\n \n         CharsetEncoder encoder() {\n             return charsetEncoder;\n+        }\n+\n+        /**\n+         * Get the document's current output syntax.\n+         * @return current syntax\n+         */\n+        public Syntax syntax() {\n+            return syntax;\n+        }\n+\n+        /**\n+         * Set the document's output syntax. Either {@code html}, with empty tags and boolean attributes (etc), or\n+         * {@code xml}, with self-closing tags.\n+         * @param syntax serialization syntax\n+         * @return the document's output settings, for chaining\n+         */\n+        public OutputSettings syntax(Syntax syntax) {\n+            this.syntax = syntax;\n+            return this;\n         }\n \n         /**\n--- a/src/main/java/org/jsoup/nodes/DocumentType.java\n+++ b/src/main/java/org/jsoup/nodes/DocumentType.java\n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n         accum.append(\"<!DOCTYPE \").append(attr(\"name\"));\n         if (!StringUtil.isBlank(attr(\"publicId\")))\n-            accum.append(\" PUBLIC \\\"\").append(attr(\"publicId\")).append(\"\\\"\");\n+            accum.append(\" PUBLIC \\\"\").append(attr(\"publicId\")).append('\"');\n         if (!StringUtil.isBlank(attr(\"systemId\")))\n-            accum.append(\" \\\"\").append(attr(\"systemId\")).append(\"\\\"\");\n+            accum.append(\" \\\"\").append(attr(\"systemId\")).append('\"');\n         accum.append('>');\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     private static void appendNormalisedText(StringBuilder accum, TextNode textNode) {\n         String text = textNode.getWholeText();\n \n-        if (!preserveWhitespace(textNode.parent())) {\n-            text = TextNode.normaliseWhitespace(text);\n-            if (TextNode.lastCharIsWhitespace(accum))\n-                text = TextNode.stripLeadingWhitespace(text);\n-        }\n-        accum.append(text);\n+        if (preserveWhitespace(textNode.parentNode))\n+            accum.append(text);\n+        else\n+            StringUtil.appendNormalisedWhitespace(accum, text, TextNode.lastCharIsWhitespace(accum));\n     }\n \n     private static void appendWhitespaceIfBr(Element element, StringBuilder accum) {\n                 .append(tagName());\n         attributes.html(accum, out);\n \n-        if (childNodes.isEmpty() && tag.isSelfClosing())\n-            accum.append(\" />\");\n+        // selfclosing includes unknown tags, isEmpty defines tags that are always empty\n+        if (childNodes.isEmpty() && tag.isSelfClosing()) {\n+            if (out.syntax() == Document.OutputSettings.Syntax.html && tag.isEmpty())\n+                accum.append('>');\n+            else\n+                accum.append(\" />\"); // <img> in html, <img /> in xml\n+        }\n         else\n             accum.append(\">\");\n     }\n      */\n     public String html() {\n         StringBuilder accum = new StringBuilder();\n-        html(accum); \n-        return accum.toString().trim();\n+        html(accum);\n+        return getOutputSettings().prettyPrint() ? accum.toString().trim() : accum.toString();\n     }\n \n     private void html(StringBuilder accum) {\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n package org.jsoup.nodes;\n \n+import org.jsoup.helper.StringUtil;\n import org.jsoup.parser.Parser;\n \n import java.io.IOException;\n  */\n public class Entities {\n     public enum EscapeMode {\n-        /** Restricted entities suitable for XHTML output: lt, gt, amp, apos, and quot only. */\n+        /** Restricted entities suitable for XHTML output: lt, gt, amp, and quot only. */\n         xhtml(xhtmlByVal),\n         /** Default HTML output entities. */\n         base(baseByVal),\n     private static final Map<String, Character> base;\n     private static final Map<Character, String> baseByVal;\n     private static final Map<Character, String> fullByVal;\n-    private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);?\");\n-    private static final Pattern strictUnescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);\");\n \n     private Entities() {}\n \n     }\n     \n     static String escape(String string, Document.OutputSettings out) {\n-        return escape(string, out.encoder(), out.escapeMode());\n-    }\n-\n-    static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode) {\n         StringBuilder accum = new StringBuilder(string.length() * 2);\n+        escape(accum, string, out, false, false, false);\n+        return accum.toString();\n+    }\n+\n+    // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations\n+    static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n+                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n+\n+        boolean lastWasWhite = false;\n+        boolean reachedNonWhite = false;\n+        EscapeMode escapeMode = out.escapeMode();\n+        CharsetEncoder encoder = out.encoder();\n         Map<Character, String> map = escapeMode.getMap();\n-\n         final int length = string.length();\n-        for (int offset = 0; offset < length; ) {\n-            final int codePoint = string.codePointAt(offset);\n-\n+\n+        int codePoint;\n+        for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n+            codePoint = string.codePointAt(offset);\n+\n+            if (normaliseWhite) {\n+                if (StringUtil.isWhitespace(codePoint)) {\n+                    if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)\n+                        continue;\n+                    accum.append(' ');\n+                    lastWasWhite = true;\n+                    continue;\n+                } else {\n+                    lastWasWhite = false;\n+                    reachedNonWhite = true;\n+                }\n+            }\n             // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):\n             if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n                 final char c = (char) codePoint;\n-                if (map.containsKey(c))\n-                    accum.append('&').append(map.get(c)).append(';');\n-                else if (encoder.canEncode(c))\n-                    accum.append(c);\n-                else\n-                    accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n+                // html specific and required escapes:\n+                switch (c) {\n+                    case '&':\n+                        accum.append(\"&amp;\");\n+                        break;\n+                    case 0xA0:\n+                        if (escapeMode != EscapeMode.xhtml)\n+                            accum.append(\"&nbsp;\");\n+                        else\n+                            accum.append(c);\n+                        break;\n+                    case '<':\n+                        if (!inAttribute)\n+                            accum.append(\"&lt;\");\n+                        else\n+                            accum.append(c);\n+                        break;\n+                    case '>':\n+                        if (!inAttribute)\n+                            accum.append(\"&gt;\");\n+                        else\n+                            accum.append(c);\n+                        break;\n+                    case '\"':\n+                        if (inAttribute)\n+                            accum.append(\"&quot;\");\n+                        else\n+                            accum.append(c);\n+                        break;\n+                    default:\n+                        if (encoder.canEncode(c))\n+                            accum.append(c);\n+                        else if (map.containsKey(c))\n+                            accum.append('&').append(map.get(c)).append(';');\n+                        else\n+                            accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n+                }\n             } else {\n                 final String c = new String(Character.toChars(codePoint));\n                 if (encoder.canEncode(c))\n                 else\n                     accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n             }\n-\n-            offset += Character.charCount(codePoint);\n-        }\n-\n-        return accum.toString();\n+        }\n     }\n \n     static String unescape(String string) {\n         return Parser.unescapeEntities(string, strict);\n     }\n \n+\n     // xhtml has restricted entities\n     private static final Object[][] xhtmlArray = {\n             {\"quot\", 0x00022},\n             {\"amp\", 0x00026},\n-            {\"apos\", 0x00027},\n             {\"lt\", 0x0003C},\n             {\"gt\", 0x0003E}\n     };\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n     public boolean hasAttr(String attributeKey) {\n         Validate.notNull(attributeKey);\n \n-        if (attributeKey.toLowerCase().startsWith(\"abs:\")) {\n+        if (attributeKey.startsWith(\"abs:\")) {\n             String key = attributeKey.substring(\"abs:\".length());\n             if (attributes.hasKey(key) && !absUrl(key).equals(\"\"))\n                 return true;\n     public Node parent() {\n         return parentNode;\n     }\n+\n+    /**\n+     Gets this node's parent node. Node overridable by extending classes, so useful if you really just need the Node type.\n+     @return parent node; or null if no parent.\n+     */\n+    public final Node parentNode() {\n+        return parentNode;\n+    }\n     \n     /**\n      * Gets the Document associated with this Node. \n     }\n \n     // if this node has no document (or parent), retrieve the default output settings\n-    private Document.OutputSettings getOutputSettings() {\n+    Document.OutputSettings getOutputSettings() {\n         return ownerDocument() != null ? ownerDocument().outputSettings() : (new Document(\"\")).outputSettings();\n     }\n \n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n     }\n \n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n-        String html = Entities.escape(getWholeText(), out);\n-        if (out.prettyPrint() && parent() instanceof Element && !Element.preserveWhitespace((Element) parent())) {\n-            html = normaliseWhitespace(html);\n-        }\n-\n         if (out.prettyPrint() && ((siblingIndex() == 0 && parentNode instanceof Element && ((Element) parentNode).tag().formatAsBlock() && !isBlank()) || (out.outline() && siblingNodes().size()>0 && !isBlank()) ))\n             indent(accum, depth, out);\n-        accum.append(html);\n+\n+        boolean normaliseWhite = out.prettyPrint() && parent() instanceof Element\n+                && !Element.preserveWhitespace((Element) parent());\n+        Entities.escape(accum, getWholeText(), out, false, normaliseWhite, false);\n     }\n \n     void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n--- a/src/main/java/org/jsoup/parser/CharacterReader.java\n+++ b/src/main/java/org/jsoup/parser/CharacterReader.java\n     }\n \n     char current() {\n-        return isEmpty() ? EOF : input[pos];\n+        return pos >= length ? EOF : input[pos];\n     }\n \n     char consume() {\n-        char val = isEmpty() ? EOF : input[pos];\n+        char val = pos >= length ? EOF : input[pos];\n         pos++;\n         return val;\n     }\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n  * HTML Tree Builder; creates a DOM from Tokens.\n  */\n class HtmlTreeBuilder extends TreeBuilder {\n+    // tag searches\n+    private static final String[] TagsScriptStyle = new String[]{\"script\", \"style\"};\n+    public static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"};\n+    private static final String[] TagSearchList = new String[]{\"ol\", \"ul\"};\n+    private static final String[] TagSearchButton = new String[]{\"button\"};\n+    private static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"};\n+    private static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"};\n+    private static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"};\n+    private static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\",\n+            \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\",\n+            \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\",\n+            \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\",\n+            \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\",\n+            \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\",\n+            \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\",\n+            \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"};\n \n     private HtmlTreeBuilderState state; // the current state\n     private HtmlTreeBuilderState originalState; // original / marked state\n     void insert(Token.Character characterToken) {\n         Node node;\n         // characters in script and style go in as datanodes, not text nodes\n-        if (StringUtil.in(currentElement().tagName(), \"script\", \"style\"))\n+        String tagName = currentElement().tagName();\n+        if (tagName.equals(\"script\") || tagName.equals(\"style\"))\n             node = new DataNode(characterToken.getData(), baseUri);\n         else\n             node = new TextNode(characterToken.getData(), baseUri);\n     }\n \n     boolean inScope(String[] targetNames) {\n-        return inSpecificScope(targetNames, new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"}, null);\n+        return inSpecificScope(targetNames, TagsSearchInScope, null);\n     }\n \n     boolean inScope(String targetName) {\n     }\n \n     boolean inScope(String targetName, String[] extras) {\n-        return inSpecificScope(targetName, new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"}, extras);\n+        return inSpecificScope(targetName, TagsSearchInScope , extras);\n         // todo: in mathml namespace: mi, mo, mn, ms, mtext annotation-xml\n         // todo: in svg namespace: forignOjbect, desc, title\n     }\n \n     boolean inListItemScope(String targetName) {\n-        return inScope(targetName, new String[]{\"ol\", \"ul\"});\n+        return inScope(targetName, TagSearchList);\n     }\n \n     boolean inButtonScope(String targetName) {\n-        return inScope(targetName, new String[]{\"button\"});\n+        return inScope(targetName, TagSearchButton);\n     }\n \n     boolean inTableScope(String targetName) {\n-        return inSpecificScope(targetName, new String[]{\"html\", \"table\"}, null);\n+        return inSpecificScope(targetName, TagSearchTableScope, null);\n     }\n \n     boolean inSelectScope(String targetName) {\n             String elName = el.nodeName();\n             if (elName.equals(targetName))\n                 return true;\n-            if (!StringUtil.in(elName, \"optgroup\", \"option\")) // all elements except\n+            if (!StringUtil.in(elName, TagSearchSelectScope)) // all elements except\n                 return false;\n         }\n         Validate.fail(\"Should not be reachable\");\n      */\n     void generateImpliedEndTags(String excludeTag) {\n         while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) &&\n-                StringUtil.in(currentElement().nodeName(), \"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"))\n+                StringUtil.in(currentElement().nodeName(), TagSearchEndTags))\n             pop();\n     }\n \n         // todo: mathml's mi, mo, mn\n         // todo: svg's foreigObject, desc, title\n         String name = el.nodeName();\n-        return StringUtil.in(name, \"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\",\n-                \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\",\n-                \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\",\n-                \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\",\n-                \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\",\n-                \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\",\n-                \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\",\n-                \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\");\n+        return StringUtil.in(name, TagSearchSpecial);\n     }\n \n     // active formatting elements\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n                         // todo confirm that check\n                         tb.error(this);\n                         return false;\n-                    } else if (isWhitespace(c)) {\n+                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                         tb.reconstructFormattingElements();\n                         tb.insert(c);\n                     } else {\n                             if (!html.hasAttr(attribute.getKey()))\n                                 html.attributes().put(attribute);\n                         }\n-                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartToHead)) {\n                         return tb.process(t, InHead);\n                     } else if (name.equals(\"body\")) {\n                         tb.error(this);\n                             tb.insert(startTag);\n                             tb.transition(InFrameset);\n                         }\n-                    } else if (StringUtil.in(name,\n-                            \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n-                            \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n-                            \"p\", \"section\", \"summary\", \"ul\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartPClosers)) {\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.process(new Token.EndTag(\"p\"));\n                         }\n                         tb.insert(startTag);\n-                    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n+                    } else if (StringUtil.in(name, Constants.Headings)) {\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.process(new Token.EndTag(\"p\"));\n                         }\n-                        if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n+                        if (StringUtil.in(tb.currentElement().nodeName(), Constants.Headings)) {\n                             tb.error(this);\n                             tb.pop();\n                         }\n                         tb.insert(startTag);\n-                    } else if (StringUtil.in(name, \"pre\", \"listing\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartPreListing)) {\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.process(new Token.EndTag(\"p\"));\n                         }\n                                 tb.process(new Token.EndTag(\"li\"));\n                                 break;\n                             }\n-                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n+                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                 break;\n                         }\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.process(new Token.EndTag(\"p\"));\n                         }\n                         tb.insert(startTag);\n-                    } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n+                    } else if (StringUtil.in(name, Constants.DdDt)) {\n                         tb.framesetOk(false);\n                         LinkedList<Element> stack = tb.getStack();\n                         for (int i = stack.size() - 1; i > 0; i--) {\n                             Element el = stack.get(i);\n-                            if (StringUtil.in(el.nodeName(), \"dd\", \"dt\")) {\n+                            if (StringUtil.in(el.nodeName(), Constants.DdDt)) {\n                                 tb.process(new Token.EndTag(el.nodeName()));\n                                 break;\n                             }\n-                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n+                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                 break;\n                         }\n                         if (tb.inButtonScope(\"p\")) {\n                         tb.reconstructFormattingElements();\n                         Element a = tb.insert(startTag);\n                         tb.pushActiveFormattingElements(a);\n-                    } else if (StringUtil.in(name,\n-                            \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n+                    } else if (StringUtil.in(name, Constants.Formatters)) {\n                         tb.reconstructFormattingElements();\n                         Element el = tb.insert(startTag);\n                         tb.pushActiveFormattingElements(el);\n                         }\n                         Element el = tb.insert(startTag);\n                         tb.pushActiveFormattingElements(el);\n-                    } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartApplets)) {\n                         tb.reconstructFormattingElements();\n                         tb.insert(startTag);\n                         tb.insertMarkerToFormattingElements();\n                         tb.insert(startTag);\n                         tb.framesetOk(false);\n                         tb.transition(InTable);\n-                    } else if (StringUtil.in(name, \"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartEmptyFormatters)) {\n                         tb.reconstructFormattingElements();\n                         tb.insertEmpty(startTag);\n                         tb.framesetOk(false);\n                         Element el = tb.insertEmpty(startTag);\n                         if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                             tb.framesetOk(false);\n-                    } else if (StringUtil.in(name, \"param\", \"source\", \"track\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartMedia)) {\n                         tb.insertEmpty(startTag);\n                     } else if (name.equals(\"hr\")) {\n                         if (tb.inButtonScope(\"p\")) {\n                         tb.insertEmpty(startTag);\n                         tb.framesetOk(false);\n                     } else if (name.equals(\"image\")) {\n-                        // we're not supposed to ask.\n-                        startTag.name(\"img\");\n-                        return tb.process(startTag);\n+                        if (tb.getFromStack(\"svg\") == null)\n+                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n+                        else\n+                            tb.insert(startTag);\n                     } else if (name.equals(\"isindex\")) {\n                         // how much do we care about the early 90s?\n                         tb.error(this);\n                         // input\n                         Attributes inputAttribs = new Attributes();\n                         for (Attribute attr : startTag.attributes) {\n-                            if (!StringUtil.in(attr.getKey(), \"name\", \"action\", \"prompt\"))\n+                            if (!StringUtil.in(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                 inputAttribs.put(attr);\n                         }\n                         inputAttribs.put(\"name\", \"isindex\");\n                             tb.transition(InSelectInTable);\n                         else\n                             tb.transition(InSelect);\n-                    } else if (StringUtil.in(\"optgroup\", \"option\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartOptions)) {\n                         if (tb.currentElement().nodeName().equals(\"option\"))\n                             tb.process(new Token.EndTag(\"option\"));\n                         tb.reconstructFormattingElements();\n                         tb.insert(startTag);\n-                    } else if (StringUtil.in(\"rp\", \"rt\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartRuby)) {\n                         if (tb.inScope(\"ruby\")) {\n                             tb.generateImpliedEndTags();\n                             if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                         // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                         tb.insert(startTag);\n                         tb.tokeniser.acknowledgeSelfClosingFlag();\n-                    } else if (StringUtil.in(name,\n-                            \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartDrop)) {\n                         tb.error(this);\n                         return false;\n                     } else {\n                         boolean notIgnored = tb.process(new Token.EndTag(\"body\"));\n                         if (notIgnored)\n                             return tb.process(endTag);\n-                    } else if (StringUtil.in(name,\n-                            \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n-                            \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n-                            \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\")) {\n-                        // todo: refactor these lookups\n+                    } else if (StringUtil.in(name, Constants.InBodyEndClosers)) {\n                         if (!tb.inScope(name)) {\n                             // nothing to close\n                             tb.error(this);\n                                 tb.error(this);\n                             tb.popStackToClose(name);\n                         }\n-                    } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n+                    } else if (StringUtil.in(name, Constants.DdDt)) {\n                         if (!tb.inScope(name)) {\n                             tb.error(this);\n                             return false;\n                                 tb.error(this);\n                             tb.popStackToClose(name);\n                         }\n-                    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n-                        if (!tb.inScope(new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"})) {\n+                    } else if (StringUtil.in(name, Constants.Headings)) {\n+                        if (!tb.inScope(Constants.Headings)) {\n                             tb.error(this);\n                             return false;\n                         } else {\n                             tb.generateImpliedEndTags(name);\n                             if (!tb.currentElement().nodeName().equals(name))\n                                 tb.error(this);\n-                            tb.popStackToClose(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\");\n+                            tb.popStackToClose(Constants.Headings);\n                         }\n                     } else if (name.equals(\"sarcasm\")) {\n                         // *sigh*\n                         return anyOtherEndTag(t, tb);\n-                    } else if (StringUtil.in(name,\n-                            \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyEndAdoptionFormatters)) {\n                         // Adoption Agency Algorithm.\n                         OUTER:\n                         for (int i = 0; i < 8; i++) {\n                             LinkedList<Element> stack = tb.getStack();\n                             // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                             // run-aways\n-                            for (int si = 0; si < stack.size() && si < 64; si++) {\n+                            final int stackSize = stack.size();\n+                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                 Element el = stack.get(si);\n                                 if (el == formatEl) {\n                                     commonAncestor = stack.get(si - 1);\n                                 lastNode = node;\n                             }\n \n-                            if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+                            if (StringUtil.in(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                 if (lastNode.parent() != null)\n                                     lastNode.remove();\n                                 tb.insertInFosterParent(lastNode);\n                             tb.removeFromStack(formatEl);\n                             tb.insertOnStackAfter(furthestBlock, adopter);\n                         }\n-                    } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartApplets)) {\n                         if (!tb.inScope(\"name\")) {\n                             if (!tb.inScope(name)) {\n                                 tb.error(this);\n         tb.markInsertionMode();\n         tb.transition(Text);\n     }\n+\n+    // lists of tags to search through. A little harder to read here, but causes less GC than dynamic varargs.\n+    // was contributing around 10% of parse GC load.\n+    private static final class Constants {\n+        private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};\n+        private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n+                \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n+                \"p\", \"section\", \"summary\", \"ul\"};\n+        private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};\n+        private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"};\n+        private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};\n+        private static final String[] DdDt = new String[]{\"dd\", \"dt\"};\n+        private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};\n+        private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};\n+        private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};\n+        private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"};\n+        private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"};\n+        private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};\n+        private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};\n+        private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};\n+        private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n+                \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n+                \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};\n+        private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};\n+        private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};\n+    }\n }\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n             \"var\", \"cite\", \"abbr\", \"time\", \"acronym\", \"mark\", \"ruby\", \"rt\", \"rp\", \"a\", \"img\", \"br\", \"wbr\", \"map\", \"q\",\n             \"sub\", \"sup\", \"bdo\", \"iframe\", \"embed\", \"span\", \"input\", \"select\", \"textarea\", \"label\", \"button\", \"optgroup\",\n             \"option\", \"legend\", \"datalist\", \"keygen\", \"output\", \"progress\", \"meter\", \"area\", \"param\", \"source\", \"track\",\n-            \"summary\", \"command\", \"device\"\n+            \"summary\", \"command\", \"device\", \"area\", \"basefont\", \"bgsound\", \"menuitem\", \"param\", \"source\", \"track\"\n     };\n     private static final String[] emptyTags = {\n             \"meta\", \"link\", \"base\", \"frame\", \"img\", \"br\", \"wbr\", \"embed\", \"hr\", \"input\", \"keygen\", \"col\", \"command\",\n-            \"device\"\n+            \"device\", \"area\", \"basefont\", \"bgsound\", \"menuitem\", \"param\", \"source\", \"track\"\n     };\n     private static final String[] formatAsInlineTags = {\n             \"title\", \"a\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"pre\", \"address\", \"li\", \"th\", \"td\", \"script\", \"style\",\n     };\n     private static final String[] preserveWhitespaceTags = {\n             \"pre\", \"plaintext\", \"title\", \"textarea\"\n+            // script is not here as it is a data node, which always preserve whitespace\n     };\n     // todo: I think we just need submit tags, and can scrub listed\n     private static final String[] formListedTags = {\n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n      * @return data matched from the queue\n      */\n     public String chompBalanced(char open, char close) {\n-        StringBuilder accum = new StringBuilder();\n+        int start = -1;\n+        int end = -1;\n         int depth = 0;\n         char last = 0;\n \n             if (isEmpty()) break;\n             Character c = consume();\n             if (last == 0 || last != ESC) {\n-                if (c.equals(open))\n+                if (c.equals(open)) {\n                     depth++;\n+                    if (start == -1)\n+                        start = pos;\n+                }\n                 else if (c.equals(close))\n                     depth--;\n             }\n \n             if (depth > 0 && last != 0)\n-                accum.append(c); // don't include the outer match pair in the return\n+                end = pos; // don't include the outer match pair in the return\n             last = c;\n         } while (depth > 0);\n-        return accum.toString();\n+        return (end >= 0) ? queue.substring(start, end) : \"\";\n     }\n     \n     /**\n      @return remained of queue.\n      */\n     public String remainder() {\n-        StringBuilder accum = new StringBuilder();\n-        while (!isEmpty()) {\n-            accum.append(consume());\n-        }\n-        return accum.toString();\n+        final String remainder = queue.substring(pos, queue.length());\n+        pos = queue.length();\n+        return remainder;\n     }\n     \n     public String toString() {\n--- a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n import java.util.List;\n \n /**\n+ * Use the {@code XmlTreeBuilder} when you want to parse XML without any of the HTML DOM rules being applied to the\n+ * document.\n+ * <p>Usage example: {@code Document xmlDoc = Jsoup.parse(html, baseUrl, Parser.xmlParser());}</p>\n+ *\n  * @author Jonathan Hedley\n  */\n public class XmlTreeBuilder extends TreeBuilder {\n     protected void initialiseParse(String input, String baseUri, ParseErrorList errors) {\n         super.initialiseParse(input, baseUri, errors);\n         stack.add(doc); // place the document onto the stack. differs from HtmlTreeBuilder (not on stack)\n+        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);\n     }\n \n     @Override\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n      * @param attr attribute under test\n      * @return true if allowed\n      */\n-    boolean isSafeAttribute(String tagName, Element el, Attribute attr) {\n+    protected boolean isSafeAttribute(String tagName, Element el, Attribute attr) {\n         TagName tag = TagName.valueOf(tagName);\n         AttributeKey key = AttributeKey.valueOf(attr.getKey());\n \n--- a/src/main/java/org/jsoup/select/CombiningEvaluator.java\n+++ b/src/main/java/org/jsoup/select/CombiningEvaluator.java\n  * Base combining (and, or) evaluator.\n  */\n abstract class CombiningEvaluator extends Evaluator {\n-    final List<Evaluator> evaluators;\n+    final ArrayList<Evaluator> evaluators;\n+    int num = 0;\n \n     CombiningEvaluator() {\n         super();\n     CombiningEvaluator(Collection<Evaluator> evaluators) {\n         this();\n         this.evaluators.addAll(evaluators);\n+        updateNumEvaluators();\n     }\n \n     Evaluator rightMostEvaluator() {\n-        return evaluators.size() > 0 ? evaluators.get(evaluators.size() - 1) : null;\n+        return num > 0 ? evaluators.get(num - 1) : null;\n     }\n     \n     void replaceRightMostEvaluator(Evaluator replacement) {\n-        evaluators.set(evaluators.size() - 1, replacement);\n+        evaluators.set(num - 1, replacement);\n+    }\n+\n+    void updateNumEvaluators() {\n+        // used so we don't need to bash on size() for every match test\n+        num = evaluators.size();\n     }\n \n     static final class And extends CombiningEvaluator {\n \n         @Override\n         public boolean matches(Element root, Element node) {\n-            for (int i = 0; i < evaluators.size(); i++) {\n+            for (int i = 0; i < num; i++) {\n                 Evaluator s = evaluators.get(i);\n                 if (!s.matches(root, node))\n                     return false;\n          */\n         Or(Collection<Evaluator> evaluators) {\n             super();\n-            if (evaluators.size() > 1)\n+            if (num > 1)\n                 this.evaluators.add(new And(evaluators));\n             else // 0 or 1\n                 this.evaluators.addAll(evaluators);\n+            updateNumEvaluators();\n         }\n \n         Or() {\n \n         public void add(Evaluator e) {\n             evaluators.add(e);\n+            updateNumEvaluators();\n         }\n \n         @Override\n         public boolean matches(Element root, Element node) {\n-            for (int i = 0; i < evaluators.size(); i++) {\n+            for (int i = 0; i < num; i++) {\n                 Evaluator s = evaluators.get(i);\n                 if (s.matches(root, node))\n                     return true;\n--- a/src/main/java/org/jsoup/select/NodeTraversor.java\n+++ b/src/main/java/org/jsoup/select/NodeTraversor.java\n             } else {\n                 while (node.nextSibling() == null && depth > 0) {\n                     visitor.tail(node, depth);\n-                    node = node.parent();\n+                    node = node.parentNode();\n                     depth--;\n                 }\n                 visitor.tail(node, depth);\n--- a/src/main/java/org/jsoup/select/QueryParser.java\n+++ b/src/main/java/org/jsoup/select/QueryParser.java\n  */\n class QueryParser {\n     private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};\n+    private static final String[] AttributeEvals = new String[]{\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"};\n \n     private TokenQueue tq;\n     private String query;\n \n     private void byAttribute() {\n         TokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']')); // content queue\n-        String key = cq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"); // eq, not, start, end, contain, match, (no val)\n+        String key = cq.consumeToAny(AttributeEvals); // eq, not, start, end, contain, match, (no val)\n         Validate.notEmpty(key);\n         cq.consumeWhitespace();\n \n--- a/src/test/java/org/jsoup/helper/DataUtilTest.java\n+++ b/src/test/java/org/jsoup/helper/DataUtilTest.java\n package org.jsoup.helper;\n-\n-import static org.junit.Assert.assertEquals;\n \n import org.jsoup.nodes.Document;\n import org.jsoup.parser.Parser;\n \n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n+\n+import static org.junit.Assert.assertEquals;\n \n public class DataUtilTest {\n     @Test\n         assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html;charset=\\\"UTF-8\\\"\"));\n         assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=\\\"ISO-8859-1\\\"\"));\n         assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html; charset=\\\"Unsupported\\\"\"));\n+        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html; charset='UTF-8'\"));\n     }\n-    \n+\n     @Test public void discardsSpuriousByteOrderMark() {\n         String html = \"\\uFEFF<html><head><title>One</title></head><body>Two</body></html>\";\n         ByteBuffer buffer = Charset.forName(\"UTF-8\").encode(html);\n         Document doc = DataUtil.parseByteData(buffer, \"UTF-8\", \"http://foo.com/\", Parser.htmlParser());\n         assertEquals(\"One\", doc.head().text());\n     }\n+\n+    @Test public void discardsSpuriousByteOrderMarkWhenNoCharsetSet() {\n+        String html = \"\\uFEFF<html><head><title>One</title></head><body>Two</body></html>\";\n+        ByteBuffer buffer = Charset.forName(\"UTF-8\").encode(html);\n+        Document doc = DataUtil.parseByteData(buffer, null, \"http://foo.com/\", Parser.htmlParser());\n+        assertEquals(\"One\", doc.head().text());\n+        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n+    }\n+\n+    @Test\n+    public void shouldNotThrowExceptionOnEmptyCharset() {\n+        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html; charset=\"));\n+        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html; charset=;\"));\n+    }\n+\n+    @Test\n+    public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags() {\n+        assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=ISO-8859-1, charset=1251\"));\n+    }\n+\n+    @Test\n+    public void shouldCorrectCharsetForDuplicateCharsetString() {\n+        assertEquals(\"iso-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=charset=iso-8859-1\"));\n+    }\n+\n+    @Test\n+    public void shouldReturnNullForIllegalCharsetNames() {\n+        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html; charset=$HJKDF\u00a7$/(\"));\n+    }\n+\n }\n--- a/src/test/java/org/jsoup/helper/StringUtilTest.java\n+++ b/src/test/java/org/jsoup/helper/StringUtilTest.java\n         assertEquals(\"hello there\", StringUtil.normaliseWhitespace(\"hello\\nthere\"));\n     }\n \n-    @Test public void normaliseWhiteSpaceModified() {\n-        String check1 = \"Hello there\";\n-        String check2 = \"Hello\\nthere\";\n-        String check3 = \"Hello  there\";\n-\n-        // does not create new string no mods done\n-        assertTrue(check1 == StringUtil.normaliseWhitespace(check1));\n-        assertTrue(check2 != StringUtil.normaliseWhitespace(check2));\n-        assertTrue(check3 != StringUtil.normaliseWhitespace(check3));\n-    }\n-\n     @Test public void normaliseWhiteSpaceHandlesHighSurrogates() {\n         String test71540chars = \"\\ud869\\udeb2\\u304b\\u309a  1\";\n         String test71540charsExpectedSingleWhitespace = \"\\ud869\\udeb2\\u304b\\u309a 1\";\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n import org.jsoup.select.Elements;\n-import static org.junit.Assert.*;\n import org.junit.Test;\n \n-import java.io.File;\n-import java.io.IOException;\n+import java.io.*;\n import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.*;\n \n /**\n  * Integration test: parses from real-world example HTML.\n     public void testSmhBizArticle() throws IOException {\n         File in = getFile(\"/htmltests/smh-biz-article-1.html\");\n         Document doc = Jsoup.parse(in, \"UTF-8\",\n-            \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\");\n+                \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\");\n         assertEquals(\"The board\u2019s next fear: the female quota\",\n-            doc.title()); // note that the apos in the source is a literal \u2019 (8217), not escaped or '\n+                doc.title()); // note that the apos in the source is a literal \u2019 (8217), not escaped or '\n         assertEquals(\"en\", doc.select(\"html\").attr(\"xml:lang\"));\n \n         Elements articleBody = doc.select(\".articleBody > *\");\n \n         Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first();\n         assertEquals(\n-            \"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\",\n-            hs.attr(\"href\"));\n+                \"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\",\n+                hs.attr(\"href\"));\n         assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\"));\n     }\n \n         Elements results = doc.select(\"h3.r > a\");\n         assertEquals(12, results.size());\n         assertEquals(\n-            \"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\",\n-            results.get(0).attr(\"href\"));\n+                \"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\",\n+                results.get(0).attr(\"href\"));\n         assertEquals(\"http://www.apple.com/itunes/\",\n-            results.get(1).attr(\"href\"));\n+                results.get(1).attr(\"href\"));\n     }\n \n     @Test\n         assertEquals(\"Yahoo! JAPAN\", doc.title());\n         Element a = doc.select(\"a[href=t/2322m2]\").first();\n         assertEquals(\"http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2\",\n-            a.attr(\"abs:href\")); // session put into <base>\n+                a.attr(\"abs:href\")); // session put into <base>\n         assertEquals(\"\u5168\u56fd\u3001\u4eba\u6c17\u306e\u99c5\u30e9\u30f3\u30ad\u30f3\u30b0\", a.text());\n     }\n \n         // tests <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\">\n         File in = getFile(\"/htmltests/baidu-cn-home.html\");\n         Document doc = Jsoup.parse(in, null,\n-            \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n+                \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n         Element submit = doc.select(\"#su\").first();\n         assertEquals(\"\u767e\u5ea6\u4e00\u4e0b\", submit.attr(\"value\"));\n \n \n         doc.outputSettings().charset(\"ascii\");\n         assertEquals(\"<title>&#x767e;&#x5ea6;&#x4e00;&#x4e0b;&#xff0c;&#x4f60;&#x5c31;&#x77e5;&#x9053;      </title>\",\n-            doc.select(\"title\").outerHtml());\n+                doc.select(\"title\").outerHtml());\n     }\n \n     @Test\n         // tests <meta charset> when preceded by another <meta>\n         File in = getFile(\"/htmltests/baidu-variant.html\");\n         Document doc = Jsoup.parse(in, null,\n-            \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n+                \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n         // check auto-detect from meta\n         assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n         assertEquals(\"<title>\u767e\u5ea6\u4e00\u4e0b\uff0c\u4f60\u5c31\u77e5\u9053</title>\", doc.select(\"title\").outerHtml());\n     }\n \n     @Test\n+    public void testBrokenHtml5CharsetWithASingleDoubleQuote() throws IOException {\n+        InputStream in = inputStreamFrom(\"<html>\\n\" +\n+                \"<head><meta charset=UTF-8\\\"></head>\\n\" +\n+                \"<body></body>\\n\" +\n+                \"</html>\");\n+        Document doc = Jsoup.parse(in, null, \"http://example.com/\");\n+        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n+    }\n+\n+    @Test\n     public void testNytArticle() throws IOException {\n         // has tags like <nyt_text>\n         File in = getFile(\"/htmltests/nyt-article-1.html\");\n         Element headline = doc.select(\"nyt_headline[version=1.0]\").first();\n         assertEquals(\"As BP Lays Out Future, It Will Not Include Hayward\", headline.text());\n     }\n-    \n+\n     @Test\n     public void testYahooArticle() throws IOException {\n         File in = getFile(\"/htmltests/yahoo-article-1.html\");\n         assertEquals(\"In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.\", p.text());\n     }\n \n-    File getFile(String resourceName) {\n+    public File getFile(String resourceName) {\n         try {\n             File file = new File(ParseTest.class.getResource(resourceName).toURI());\n             return file;\n-        }\n-        catch (URISyntaxException e) {\n+        } catch (URISyntaxException e) {\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private InputStream inputStreamFrom(String s) {\n+        try {\n+            return new ByteArrayInputStream(s.getBytes(\"UTF-8\"));\n+        } catch (UnsupportedEncodingException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n }\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n package org.jsoup.integration;\n \n+import org.jsoup.Connection;\n import org.jsoup.HttpStatusException;\n+import org.jsoup.Jsoup;\n import org.jsoup.UnsupportedMimeTypeException;\n+import org.jsoup.nodes.Document;\n+import org.junit.Ignore;\n import org.junit.Test;\n-import org.junit.Ignore;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Map;\n \n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.*;\n-import org.jsoup.nodes.Document;\n-import org.jsoup.Jsoup;\n-import org.jsoup.Connection;\n-\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.io.IOException;\n-import java.util.Map;\n \n /**\n  Tests the URL connection. Not enabled by default, so tests don't require network connection.\n         String url = \"http://www.google.com\"; // no trailing / to force redir\n         Document doc = Jsoup.parse(new URL(url), 10*1000);\n         assertTrue(doc.title().contains(\"Google\"));\n+    }\n+\n+    @Test\n+    public void fetchURIWithWihtespace() throws IOException {\n+        Connection con = Jsoup.connect(\"http://try.jsoup.org/#with whitespaces\");\n+        Document doc = con.get();\n+        assertTrue(doc.title().contains(\"jsoup\"));\n     }\n \n     @Test\n         Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302-rel.pl\"); // to ./ - /tools/\n         Document doc = con.post();\n         assertTrue(doc.title().contains(\"HTML Tidy Online\"));\n+    }\n+\n+    @Test\n+    public void followsRedirectsWithWithespaces() throws IOException {\n+        Connection con = Jsoup.connect(\"http://tinyurl.com/kgofxl8\"); // to http://www.google.com/?q=white spaces\n+        Document doc = con.get();\n+        assertTrue(doc.title().contains(\"Google\"));\n+    }\n+\n+    @Test\n+    public void gracefullyHandleBrokenLocationRedirect() throws IOException {\n+        Connection con = Jsoup.connect(\"http://aag-ye.com\"); // has Location: http:/temp/AAG_New/en/index.php\n+        con.get(); // would throw exception on error\n+        assertTrue(true);\n     }\n \n     @Test\n         Connection.Response  defaultRes = Jsoup.connect(url).setSecure(false).execute();\n         assertThat(defaultRes.statusCode(),is(200));\n     }\n+\n+    @Test\n+    public void shouldWorkForCharsetInExtraAttribute() throws IOException {\n+        Connection.Response res = Jsoup.connect(\"https://www.creditmutuel.com/groupe/fr/\").execute();\n+        Document doc = res.parse(); // would throw an error if charset unsupported\n+        assertEquals(\"ISO-8859-1\", res.charset());\n+    }\n+\n+    // The following tests were added to test specific domains if they work. All code paths\n+    // which make the following test green are tested in other unit or integration tests, so the following lines\n+    // could be deleted\n+\n+    @Test\n+    public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags() throws IOException {\n+        Connection.Response res = Jsoup.connect(\"http://aamo.info/\").execute();\n+        res.parse(); // would throw an error if charset unsupported\n+        assertEquals(\"ISO-8859-1\", res.charset());\n+    }\n+\n+    @Test\n+    public void shouldParseBrokenHtml5MetaCharsetTagCorrectly() throws IOException {\n+        Connection.Response res = Jsoup.connect(\"http://9kuhkep.net\").execute();\n+        res.parse(); // would throw an error if charset unsupported\n+        assertEquals(\"UTF-8\", res.charset());\n+    }\n+\n+    @Test\n+    public void shouldEmptyMetaCharsetCorrectly() throws IOException {\n+        Connection.Response res = Jsoup.connect(\"http://aastmultimedia.com\").execute();\n+        res.parse(); // would throw an error if charset unsupported\n+        assertEquals(\"UTF-8\", res.charset());\n+    }\n+\n+    @Test\n+    public void shouldWorkForDuplicateCharsetInTag() throws IOException {\n+        Connection.Response res = Jsoup.connect(\"http://aaptsdassn.org\").execute();\n+        Document doc = res.parse(); // would throw an error if charset unsupported\n+        assertEquals(\"ISO-8859-1\", res.charset());\n+    }\n }\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n package org.jsoup.nodes;\n+\n+import java.io.File;\n+import java.io.IOException;\n \n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n+import org.jsoup.integration.ParseTest;\n import org.junit.Test;\n import org.junit.Ignore;\n \n+import static org.jsoup.nodes.Document.OutputSettings.Syntax;\n import static org.junit.Assert.*;\n \n /**\n     @Test public void testXhtmlReferences() {\n         Document doc = Jsoup.parse(\"&lt; &gt; &amp; &quot; &apos; &times;\");\n         doc.outputSettings().escapeMode(Entities.EscapeMode.xhtml);\n-        assertEquals(\"&lt; &gt; &amp; &quot; &apos; \u00d7\", doc.body().html());\n+        assertEquals(\"&lt; &gt; &amp; \\\" ' \u00d7\", doc.body().html());\n     }\n \n     @Test public void testNormalisesStructure() {\n         assertEquals(\"<!DOCTYPE html><html><head><title>Doctype test</title></head><body></body></html>\",\n                 TextUtil.stripNewlines(clone.html()));\n     }\n+    \n+    @Test public void testLocation() throws IOException {\n+    \tFile in = new ParseTest().getFile(\"/htmltests/yahoo-jp.html\");\n+        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.yahoo.co.jp/index.html\");\n+        String location = doc.location();\n+        String baseUri = doc.baseUri();\n+        assertEquals(\"http://www.yahoo.co.jp/index.html\",location);\n+        assertEquals(\"http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/\",baseUri);\n+        in = new ParseTest().getFile(\"/htmltests/nyt-article-1.html\");\n+        doc = Jsoup.parse(in, null, \"http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp\");\n+        location = doc.location();\n+        baseUri = doc.baseUri();\n+        assertEquals(\"http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp\",location);\n+        assertEquals(\"http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp\",baseUri);\n+    }\n+\n+    @Test public void testHtmlAndXmlSyntax() {\n+        String h = \"<!DOCTYPE html><body><img async checked='checked' src='&<>\\\"'>&lt;&gt;&amp;&quot;<foo />bar\";\n+        Document doc = Jsoup.parse(h);\n+\n+        doc.outputSettings().syntax(Syntax.html);\n+        assertEquals(\"<!DOCTYPE html>\\n\" +\n+                \"<html>\\n\" +\n+                \" <head></head>\\n\" +\n+                \" <body>\\n\" +\n+                \"  <img async checked src=\\\"&amp;<>&quot;\\\">&lt;&gt;&amp;\\\"\\n\" +\n+                \"  <foo />bar\\n\" +\n+                \" </body>\\n\" +\n+                \"</html>\", doc.html());\n+\n+        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);\n+        assertEquals(\"<!DOCTYPE html>\\n\" +\n+                \"<html>\\n\" +\n+                \" <head></head>\\n\" +\n+                \" <body>\\n\" +\n+                \"  <img async=\\\"\\\" checked=\\\"checked\\\" src=\\\"&amp;<>&quot;\\\" />&lt;&gt;&amp;\\\"\\n\" +\n+                \"  <foo />bar\\n\" +\n+                \" </body>\\n\" +\n+                \"</html>\", doc.html());\n+    }\n+\n+    @Test public void htmlParseDefaultsToHtmlOutputSyntax() {\n+        Document doc = Jsoup.parse(\"x\");\n+        assertEquals(Syntax.html, doc.outputSettings().syntax());\n+    }\n \n     // Ignored since this test can take awhile to run.\n     @Ignore\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n \n     @Test public void testOuterHtml() {\n         Document doc = Jsoup.parse(\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\");\n-        assertEquals(\"<html><head></head><body><div title=\\\"Tags &amp;c.\\\"><img src=\\\"foo.png\\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\",\n+        assertEquals(\"<html><head></head><body><div title=\\\"Tags &amp;c.\\\"><img src=\\\"foo.png\\\"><p><!-- comment -->Hello</p><p>there</p></div></body></html>\",\n                 TextUtil.stripNewlines(doc.outerHtml()));\n     }\n \n     @Test public void testInnerHtml() {\n-        Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\");\n+        Document doc = Jsoup.parse(\"<div>\\n <p>Hello</p> </div>\");\n         assertEquals(\"<p>Hello</p>\", doc.getElementsByTag(\"div\").get(0).html());\n     }\n \n     }\n \n     @Test public void testNotPretty() {\n-        Document doc = Jsoup.parse(\"<div>   \\n<p>Hello\\n there</p></div>\");\n+        Document doc = Jsoup.parse(\"<div>   \\n<p>Hello\\n there\\n</p></div>\");\n         doc.outputSettings().prettyPrint(false);\n-        assertEquals(\"<html><head></head><body><div>   \\n<p>Hello\\n there</p></div></body></html>\", doc.html());\n+        assertEquals(\"<html><head></head><body><div>   \\n<p>Hello\\n there\\n</p></div></body></html>\", doc.html());\n+\n+        Element div = doc.select(\"div\").first();\n+        assertEquals(\"   \\n<p>Hello\\n there\\n</p>\", div.html());\n     }\n     \n     @Test public void testEmptyElementFormatHtml() {\n     @Test public void parentlessToString() {\n         Document doc = Jsoup.parse(\"<img src='foo'>\");\n         Element img = doc.select(\"img\").first();\n-        assertEquals(\"<img src=\\\"foo\\\" />\", img.toString());\n+        assertEquals(\"<img src=\\\"foo\\\">\", img.toString());\n \n         img.remove(); // lost its parent\n-        assertEquals(\"<img src=\\\"foo\\\" />\", img.toString());\n+        assertEquals(\"<img src=\\\"foo\\\">\", img.toString());\n     }\n \n     @Test public void testClone() {\n--- a/src/test/java/org/jsoup/nodes/EntitiesTest.java\n+++ b/src/test/java/org/jsoup/nodes/EntitiesTest.java\n import org.jsoup.Jsoup;\n import org.junit.Test;\n \n+import static org.jsoup.nodes.Document.OutputSettings;\n+import static org.jsoup.nodes.Entities.EscapeMode.*;\n import static org.junit.Assert.*;\n \n import java.nio.charset.Charset;\n public class EntitiesTest {\n     @Test public void escape() {\n         String text = \"Hello &<> \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9\";\n-        String escapedAscii = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.base);\n-        String escapedAsciiFull = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.extended);\n-        String escapedAsciiXhtml = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.xhtml);\n-        String escapedUtfFull = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.base);\n-        String escapedUtfMin = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.xhtml);\n+        String escapedAscii = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(base));\n+        String escapedAsciiFull = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(extended));\n+        String escapedAsciiXhtml = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(xhtml));\n+        String escapedUtfFull = Entities.escape(text, new OutputSettings().charset(\"UTF-8\").escapeMode(base));\n+        String escapedUtfMin = Entities.escape(text, new OutputSettings().charset(\"UTF-8\").escapeMode(xhtml));\n \n         assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy;\", escapedAscii);\n         assertEquals(\"Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy;\", escapedAsciiFull);\n         assertEquals(\"Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9;\", escapedAsciiXhtml);\n-        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; \u03c0 \u65b0 there &frac34; &copy;\", escapedUtfFull);\n+        assertEquals(\"Hello &amp;&lt;&gt; \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9\", escapedUtfFull);\n         assertEquals(\"Hello &amp;&lt;&gt; \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9\", escapedUtfMin);\n         // odd that it's defined as aring in base but angst in full\n \n \n     @Test public void escapeSupplementaryCharacter(){\n         String text = new String(Character.toChars(135361));\n-        String escapedAscii = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.base);\n+        String escapedAscii = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(base));\n         assertEquals(\"&#x210c1;\", escapedAscii);\n-        String escapedUtf = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.base);\n+        String escapedUtf = Entities.escape(text, new OutputSettings().charset(\"UTF-8\").escapeMode(base));\n         assertEquals(text, escapedUtf);\n     }\n \n     \n     @Test public void caseSensitive() {\n         String unescaped = \"\u00dc \u00fc & &\";\n-        assertEquals(\"&Uuml; &uuml; &amp; &amp;\", Entities.escape(unescaped, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.extended));\n+        assertEquals(\"&Uuml; &uuml; &amp; &amp;\",\n+                Entities.escape(unescaped, new OutputSettings().charset(\"ascii\").escapeMode(extended)));\n         \n         String escaped = \"&Uuml; &uuml; &amp; &AMP\";\n         assertEquals(\"\u00dc \u00fc & &\", Entities.unescape(escaped));\n     @Test public void letterDigitEntities() {\n         String html = \"<p>&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;</p>\";\n         Document doc = Jsoup.parse(html);\n+        doc.outputSettings().charset(\"ascii\");\n         Element p = doc.select(\"p\").first();\n         assertEquals(\"&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;\", p.html());\n         assertEquals(\"\u00b9\u00b2\u00b3\u00bc\u00bd\u00be\", p.text());\n+        doc.outputSettings().charset(\"UTF-8\");\n+        assertEquals(\"\u00b9\u00b2\u00b3\u00bc\u00bd\u00be\", p.html());\n     }\n \n     @Test public void noSpuriousDecodes() {\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n     @Test public void handlesWhatWgExpensesTableExample() {\n         // http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0\n         Document doc = Jsoup.parse(\"<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>\");\n-        assertEquals(\"<table> <colgroup> <col /> </colgroup><colgroup> <col /> <col /> <col /> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\\\"rowgroup\\\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr><tr> <th scope=\\\"row\\\"> Percentage of net sales </th><td> 3.4% </td><td> 3.3% </td><td> 3.7% </td></tr></tbody><tbody> <tr> <th scope=\\\"rowgroup\\\"> Selling, general, and administrative </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433 </td></tr><tr> <th scope=\\\"row\\\"> Percentage of net sales </th><td> 11.6% </td><td> 12.3% </td><td> 12.6% </td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n+        assertEquals(\"<table> <colgroup> <col> </colgroup><colgroup> <col> <col> <col> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\\\"rowgroup\\\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr><tr> <th scope=\\\"row\\\"> Percentage of net sales </th><td> 3.4% </td><td> 3.3% </td><td> 3.7% </td></tr></tbody><tbody> <tr> <th scope=\\\"rowgroup\\\"> Selling, general, and administrative </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433 </td></tr><tr> <th scope=\\\"row\\\"> Percentage of net sales </th><td> 11.6% </td><td> 12.3% </td><td> 12.6% </td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n     }\n \n     @Test public void handlesTbodyTable() {\n         // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.\n         String h = \"<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two\";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"<div id=\\\"1\\\"></div><script src=\\\"/foo\\\"></script><div id=\\\"2\\\"><img /><img /></div><a id=\\\"3\\\"></a><i></i><foo /><foo>One</foo> <hr /> hr text <hr /> hr text two\", TextUtil.stripNewlines(doc.body().html()));\n+        assertEquals(\"<div id=\\\"1\\\"></div><script src=\\\"/foo\\\"></script><div id=\\\"2\\\"><img><img></div><a id=\\\"3\\\"></a><i></i><foo /><foo>One</foo> <hr> hr text <hr> hr text two\", TextUtil.stripNewlines(doc.body().html()));\n     }\n \n     @Test public void handlesSolidusAtAttributeEnd() {\n     @Test public void handlesFrames() {\n         String h = \"<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>\";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"<html><head><script></script><noscript></noscript></head><frameset><frame src=\\\"foo\\\" /><frame src=\\\"foo\\\" /></frameset></html>\",\n+        assertEquals(\"<html><head><script></script><noscript></noscript></head><frameset><frame src=\\\"foo\\\"><frame src=\\\"foo\\\"></frameset></html>\",\n                 TextUtil.stripNewlines(doc.html()));\n         // no body auto vivification\n     }\n     @Test public void ignoresContentAfterFrameset() {\n         String h = \"<html><head><title>One</title></head><frameset><frame /><frame /></frameset><table></table></html>\";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"<html><head><title>One</title></head><frameset><frame /><frame /></frameset></html>\", TextUtil.stripNewlines(doc.html()));\n+        assertEquals(\"<html><head><title>One</title></head><frameset><frame><frame></frameset></html>\", TextUtil.stripNewlines(doc.html()));\n         // no body, no table. No crash!\n     }\n \n     @Test public void normalisesDocument() {\n         String h = \"<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven \";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"<!DOCTYPE html><html><head></head><body>OneTwoThree<link />FourFive Six Seven </body></html>\",\n+        assertEquals(\"<!DOCTYPE html><html><head></head><body>OneTwoThree<link>FourFive Six Seven </body></html>\",\n                 TextUtil.stripNewlines(doc.html()));\n     }\n \n     @Test public void testNoImagesInNoScriptInHead() {\n         // jsoup used to allow, but against spec if parsing with noscript\n         Document doc = Jsoup.parse(\"<html><head><noscript><img src='foo'></noscript></head><body><p>Hello</p></body></html>\");\n-        assertEquals(\"<html><head><noscript></noscript></head><body><img src=\\\"foo\\\" /><p>Hello</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n+        assertEquals(\"<html><head><noscript></noscript></head><body><img src=\\\"foo\\\"><p>Hello</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n     }\n \n     @Test public void testAFlowContents() {\n         // extended entities need a ; at the end to match, base does not\n         String html = \"&amp &quot &reg &icy &hopf &icy; &hopf;\";\n         Document doc = Jsoup.parse(html);\n-        doc.outputSettings().escapeMode(Entities.EscapeMode.extended); // modifies output only to clarify test\n-        assertEquals(StringUtil.normaliseWhitespace(\"&amp; &quot; &reg; &amp;icy &amp;hopf &icy; &hopf;\"), doc.body().html());\n+        doc.outputSettings().escapeMode(Entities.EscapeMode.extended).charset(\"ascii\"); // modifies output only to clarify test\n+        assertEquals(\"&amp; \\\" &reg; &amp;icy &amp;hopf &icy; &hopf;\", doc.body().html());\n     }\n \n     @Test public void handlesXmlDeclarationAsBogusComment() {\n         assertEquals(\"1\", controls.get(0).id());\n         assertEquals(\"2\", controls.get(1).id());\n \n-        assertEquals(\"<table><tbody><tr><form></form><input type=\\\"hidden\\\" id=\\\"1\\\" /><td><input type=\\\"text\\\" id=\\\"2\\\" /></td></tr><tr></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n+        assertEquals(\"<table><tbody><tr><form></form><input type=\\\"hidden\\\" id=\\\"1\\\"><td><input type=\\\"text\\\" id=\\\"2\\\"></td></tr><tr></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n     }\n \n     @Test public void handlesInputInTable() {\n         assertEquals(1, doc.select(\"table input\").size());\n         assertEquals(2, doc.select(\"input\").size());\n     }\n+\n+    @Test public void convertsImageToImg() {\n+        // image to img, unless in a svg. old html cruft.\n+        String h = \"<body><image><svg><image /></svg></body>\";\n+        Document doc = Jsoup.parse(h);\n+        assertEquals(\"<img>\\n<svg>\\n <image />\\n</svg>\", doc.body().html());\n+    }\n }\n--- a/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java\n+++ b/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java\n import java.net.URISyntaxException;\n import java.util.List;\n \n+import static org.jsoup.nodes.Document.OutputSettings.Syntax;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotSame;\n \n \n     @Test\n     public void testDoesNotForceSelfClosingKnownTags() {\n-        // html will force \"<br>one</br>\" to \"<br />One<br />\". XML should be stay \"<br>one</br> -- don't recognise tag.\n+        // html will force \"<br>one</br>\" to logically \"<br />One<br />\". XML should be stay \"<br>one</br> -- don't recognise tag.\n         Document htmlDoc = Jsoup.parse(\"<br>one</br>\");\n-        assertEquals(\"<br />one\\n<br />\", htmlDoc.body().html());\n+        assertEquals(\"<br>one\\n<br>\", htmlDoc.body().html());\n \n         Document xmlDoc = Jsoup.parse(\"<br>one</br>\", \"\", Parser.xmlParser());\n         assertEquals(\"<br>one</br>\", xmlDoc.html());\n         assertEquals(\"one\", nodes.get(0).nodeName());\n         assertEquals(\"Two\", ((TextNode)nodes.get(1)).text());\n     }\n+\n+    @Test public void xmlParseDefaultsToHtmlOutputSyntax() {\n+        Document doc = Jsoup.parse(\"x\", \"\", Parser.xmlParser());\n+        assertEquals(Syntax.xml, doc.outputSettings().syntax());\n+    }\n }\n--- a/src/test/java/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/safety/CleanerTest.java\n     @Test public void basicWithImagesTest() {\n         String h = \"<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages());\n-        assertEquals(\"<p><img src=\\\"http://example.com/\\\" alt=\\\"Image\\\" /></p><p><img /></p>\", TextUtil.stripNewlines(cleanHtml));\n+        assertEquals(\"<p><img src=\\\"http://example.com/\\\" alt=\\\"Image\\\"></p><p><img></p>\", TextUtil.stripNewlines(cleanHtml));\n     }\n     \n     @Test public void testRelaxed() {\n     @Test public void testDropImageScript() {\n         String h = \"<IMG SRC=\\\"javascript:alert('XSS')\\\">\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n-        assertEquals(\"<img />\", cleanHtml);\n+        assertEquals(\"<img>\", cleanHtml);\n     }\n     \n     @Test public void testCleanJavascriptHref() {\n     @Test public void testHandlesEmptyAttributes() {\n         String h = \"<img alt=\\\"\\\" src= unknown=''>\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages());\n-        assertEquals(\"<img alt=\\\"\\\" />\", cleanHtml);\n+        assertEquals(\"<img alt=\\\"\\\">\", cleanHtml);\n     }\n \n     @Test public void testIsValid() {\n     @Test public void resolvesRelativeLinks() {\n         String html = \"<a href='/foo'>Link</a><img src='/bar'>\";\n         String clean = Jsoup.clean(html, \"http://example.com/\", Whitelist.basicWithImages());\n-        assertEquals(\"<a href=\\\"http://example.com/foo\\\" rel=\\\"nofollow\\\">Link</a>\\n<img src=\\\"http://example.com/bar\\\" />\", clean);\n+        assertEquals(\"<a href=\\\"http://example.com/foo\\\" rel=\\\"nofollow\\\">Link</a>\\n<img src=\\\"http://example.com/bar\\\">\", clean);\n     }\n \n     @Test public void preservesRelativeLinksIfConfigured() {\n         String html = \"<a href='/foo'>Link</a><img src='/bar'> <img src='javascript:alert()'>\";\n         String clean = Jsoup.clean(html, \"http://example.com/\", Whitelist.basicWithImages().preserveRelativeLinks(true));\n-        assertEquals(\"<a href=\\\"/foo\\\" rel=\\\"nofollow\\\">Link</a>\\n<img src=\\\"/bar\\\" /> \\n<img />\", clean);\n+        assertEquals(\"<a href=\\\"/foo\\\" rel=\\\"nofollow\\\">Link</a>\\n<img src=\\\"/bar\\\"> \\n<img>\", clean);\n     }\n     \n     @Test public void dropsUnresolvableRelativeLinks() {\n     @Test public void handlesCustomProtocols() {\n         String html = \"<img src='cid:12345' /> <img src='data:gzzt' />\";\n         String dropped = Jsoup.clean(html, Whitelist.basicWithImages());\n-        assertEquals(\"<img /> \\n<img />\", dropped);\n+        assertEquals(\"<img> \\n<img>\", dropped);\n \n         String preserved = Jsoup.clean(html, Whitelist.basicWithImages().addProtocols(\"img\", \"src\", \"cid\", \"data\"));\n-        assertEquals(\"<img src=\\\"cid:12345\\\" /> \\n<img src=\\\"data:gzzt\\\" />\", preserved);\n+        assertEquals(\"<img src=\\\"cid:12345\\\"> \\n<img src=\\\"data:gzzt\\\">\", preserved);\n     }\n \n     @Test public void handlesAllPseudoTag() {\n         Document.OutputSettings os = new Document.OutputSettings();\n         os.prettyPrint(false);\n         os.escapeMode(Entities.EscapeMode.extended);\n+        os.charset(\"ascii\");\n \n         String html = \"<div><p>&bernou;</p></div>\";\n         String customOut = Jsoup.clean(html, \"http://foo.com/\", Whitelist.relaxed(), os);\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n     }\n \n     /**\n+     * Setter to disable\\enable SSL certificates checks during https connection\n+     * @param value\n+     */\n+    Connection setSecure (boolean value);\n+\n+    /**\n      * Set the request URL to fetch. The protocol must be HTTP or HTTPS.\n      * @param url URL to connect to\n      * @return this Connection, for chaining\n      * Represents a HTTP request.\n      */\n     public interface Request extends Base<Request> {\n+\n+\n         /**\n          * Get the request timeout, in milliseconds.\n          * @return the timeout in milliseconds.\n          * @return current Parser\n          */\n         public Parser parser();\n+\n+        /**\n+         * get current state of security enabling\\disabling feature\n+         *\n+         * @return\n+         */\n+        boolean isSecure();\n+\n+        /**\n+         * Disable SSL certificates checks.\n+         * @param value\n+         */\n+        void setSecure(boolean value);\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n import org.jsoup.parser.Parser;\n import org.jsoup.parser.TokenQueue;\n \n+import javax.net.ssl.*;\n import java.io.*;\n import java.net.HttpURLConnection;\n import java.net.MalformedURLException;\n import java.net.URLEncoder;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n+import java.security.KeyManagementException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.X509Certificate;\n import java.util.*;\n import java.util.zip.GZIPInputStream;\n \n \tprivate HttpConnection() {\n         req = new Request();\n         res = new Response();\n+    }\n+\n+    public Connection setSecure(boolean value) {\n+        req.setSecure(value);\n+        return this;\n     }\n \n     public Connection url(URL url) {\n         private boolean ignoreHttpErrors = false;\n         private boolean ignoreContentType = false;\n         private Parser parser;\n-\n-      \tprivate Request() {\n+//      always default to secure connections in https\n+        private boolean secure = true;\n+\n+        private Request() {\n             timeoutMilliseconds = 3000;\n             maxBodySizeBytes = 1024 * 1024; // 1MB\n             followRedirects = true;\n         public Parser parser() {\n             return parser;\n         }\n+\n+        public boolean isSecure() {\n+            return secure;\n+        }\n+\n+        public void setSecure(boolean value) {\n+            secure = value;\n+        }\n     }\n \n     public static class Response extends Base<Connection.Response> implements Connection.Response {\n         private static final int MAX_REDIRECTS = 20;\n+        private static SSLSocketFactory sslSocketFactory;\n         private int statusCode;\n         private String statusMessage;\n         private ByteBuffer byteData;\n         // set up connection defaults, and details from request\n         private static HttpURLConnection createConnection(Connection.Request req) throws IOException {\n             HttpURLConnection conn = (HttpURLConnection) req.url().openConnection();\n+\n             conn.setRequestMethod(req.method().name());\n             conn.setInstanceFollowRedirects(false); // don't rely on native redirection support\n             conn.setConnectTimeout(req.timeout());\n             conn.setReadTimeout(req.timeout());\n+            if (!req.isSecure()) {\n+                initUnSecureSSL();\n+                if (conn instanceof HttpsURLConnection) {\n+                    ((HttpsURLConnection)conn).setSSLSocketFactory(sslSocketFactory);\n+                }\n+            }\n             if (req.method() == Method.POST)\n                 conn.setDoOutput(true);\n             if (req.cookies().size() > 0)\n                 conn.addRequestProperty(header.getKey(), header.getValue());\n             }\n             return conn;\n+        }\n+\n+        /**\n+         * Initialise Trust manager that does not validate certificate chains and\n+         * add it to current SSLContext.\n+         *\n+         * @throws IOException\n+         */\n+        private static void initUnSecureSSL() throws IOException {\n+            if ( sslSocketFactory == null) {\n+                // Create a trust manager that does not validate certificate chains\n+                final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {\n+\n+                    public void checkClientTrusted( final X509Certificate[] chain, final String authType ) {\n+                    }\n+\n+                    public void checkServerTrusted( final X509Certificate[] chain, final String authType ) {\n+                    }\n+\n+                    public X509Certificate[] getAcceptedIssuers() {\n+                        return null;\n+                    }\n+                } };\n+\n+                // Install the all-trusting trust manager\n+                final SSLContext sslContext;\n+                try {\n+                    sslContext = SSLContext.getInstance(\"SSL\");\n+                    sslContext.init( null, trustAllCerts, new java.security.SecureRandom() );\n+                    // Create an ssl socket factory with our all-trusting manager\n+                    sslSocketFactory = sslContext.getSocketFactory();\n+                } catch (NoSuchAlgorithmException e) {\n+                    throw new IOException(\"Can't create unsecure trust manager\");\n+                } catch (KeyManagementException e) {\n+                    throw new IOException(\"Can't create unsecure trust manager\");\n+                }\n+            }\n+\n         }\n \n         // set up url, method, header, cookies\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n import java.net.URL;\n import java.util.Map;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.*;\n \n /**\n  Tests the URL connection. Not enabled by default, so tests don't require network connection.\n         assertEquals(actualDocText, unlimitedRes.parse().text().length());\n     }\n \n+    /**\n+     * Verify that security disabling feature works properly.\n+     *\n+     * 1. try to hit url with invalid certificate and evaluate that exception is thrown\n+     * 2. disable security checks and call the same url to verify that content is consumed correctly\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testUnsafe() throws Exception {\n+        String url = \"https://certs.cac.washington.edu/CAtest/\";\n+\n+        try {\n+            Jsoup.connect(url).execute();\n+        } catch (IOException e) {\n+//          that's expected exception\n+        }\n+        Connection.Response  defaultRes = Jsoup.connect(url).setSecure(false).execute();\n+        assertThat(defaultRes.statusCode(),is(200));\n+    }\n+\n     @Test\n     public void shouldWorkForCharsetInExtraAttribute() throws IOException {\n         Connection.Response res = Jsoup.connect(\"https://www.creditmutuel.com/groupe/fr/\").execute();\n         Document doc = res.parse(); // would throw an error if charset unsupported\n         assertEquals(\"ISO-8859-1\", res.charset());\n     }\n-\n }", "timestamp": 1392153591, "metainfo": ""}