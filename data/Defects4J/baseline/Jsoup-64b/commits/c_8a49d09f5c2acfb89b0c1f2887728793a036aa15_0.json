{"sha": "8a49d09f5c2acfb89b0c1f2887728793a036aa15", "log": "Added support for tag names with - and _ (<abc_foo>, <abc-foo>)", "commit": "\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n             parseTextNode();\n             return;\n         }\n-\n+        \n+        tq.consumeWhitespace();\n         Attributes attributes = new Attributes();\n         while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n             Attribute attribute = parseAttribute();\n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n     }\n     \n     /**\n-     * Consume an tag name off the queue (word or :)\n+     * Consume an tag name off the queue (word or :, _, -)\n      * \n      * @return tag name\n      */\n     public String consumeTagName() {\n         int start = pos;\n-        while (!isEmpty() && (matchesWord() || matchesAny(\":\")))\n+        while (!isEmpty() && (matchesWord() || matchesAny(\":\", \"_\", \"-\")))\n             pos++;\n         \n         return queue.substring(start, pos);\n      */\n     public String consumeElementSelector() {\n         int start = pos;\n-        while (!isEmpty() && (matchesWord() || matchesAny(\"|\")))\n+        while (!isEmpty() && (matchesWord() || matchesAny(\"|\", \"_\", \"-\")))\n             pos++;\n         \n         return queue.substring(start, pos);\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n         assertEquals(\"\u65b0\", doc.text());\n     }\n     \n+    @Test public void testNytArticle() throws IOException {\n+        // has tags like <nyt_text>\n+        File in = getFile(\"/htmltests/nyt-article-1.html\");\n+        Document doc = Jsoup.parse(in, null, \"http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp\");\n+        \n+        Element headline = doc.select(\"nyt_headline[version=1.0]\").first();\n+        assertEquals(\"As BP Lays Out Future, It Will Not Include Hayward\", headline.text());\n+    }\n+    \n     File getFile(String resourceName) {\n         try {\n             File file = new File(ParseTest.class.getResource(resourceName).toURI());\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n         assertEquals(\"One\", options.first().text());\n         assertEquals(\"Two\", options.last().text());\n     }\n+    \n+    @Test public void testSpaceAfterTag() {\n+        Document doc = Jsoup.parse(\"<div > <a name=\\\"top\\\"></a ><p id=1 >Hello</p></div>\");\n+        assertEquals(\"<div> <a name=\\\"top\\\"></a><p id=\\\"1\\\">Hello</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n+    }\n \n     @Test public void createsDocumentStructure() {\n         String html = \"<meta name=keywords /><link rel=stylesheet /><title>jsoup</title><p>Hello world</p>\";\n         assertEquals(\"<h1>Hello </h1><h2>There </h2><hgroup><h1>Another</h1><h2>headline</h2></hgroup> <hgroup><h1>More</h1></hgroup><p>stuff</p>\", TextUtil.stripNewlines(doc.body().html()));\n     }\n     \n-\n+    @Test public void testRelaxedTags() {\n+        Document doc = Jsoup.parse(\"<abc_def id=1>Hello</abc_def> <abc-def>There</abc-def>\");\n+        assertEquals(\"<abc_def id=\\\"1\\\">Hello</abc_def> <abc-def>There</abc-def>\", TextUtil.stripNewlines(doc.body().html()));\n+    }\n }\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(1, p7.size());\n         assertEquals(\"1\", p7.first().id());\n     }\n+    \n+    @Test public void testRelaxedTags() {\n+        Document doc = Jsoup.parse(\"<abc_def id=1>Hello</abc_def> <abc-def id=2>There</abc-def>\");\n+        \n+        Elements el1 = doc.select(\"abc_def\");\n+        assertEquals(1, el1.size());\n+        assertEquals(\"1\", el1.first().id());\n+        \n+        Elements el2 = doc.select(\"abc-def\");\n+        assertEquals(1, el2.size());\n+        assertEquals(\"2\", el2.first().id());\n+    }\n }", "timestamp": 1309605116, "metainfo": ""}