{"sha": "99286c8986c92ef12861710c0cbf5cd51b8c93f0", "log": "Cleaned a few dupe", "commit": "\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n     CharacterReferenceInData {\n         // from & in data\n         void read(Tokeniser t, CharacterReader r) {\n-            char[] c = t.consumeCharacterReference(null, false);\n-            if (c == null)\n-                t.emit('&');\n-            else\n-                t.emit(c);\n-            t.transition(Data);\n+            readCharRef(t, Data);\n         }\n     },\n     Rcdata {\n     },\n     CharacterReferenceInRcdata {\n         void read(Tokeniser t, CharacterReader r) {\n-            char[] c = t.consumeCharacterReference(null, false);\n-            if (c == null)\n-                t.emit('&');\n-            else\n-                t.emit(c);\n-            t.transition(Rcdata);\n+            readCharRef(t, Rcdata);\n         }\n     },\n     Rawtext {\n         void read(Tokeniser t, CharacterReader r) {\n-            switch (r.current()) {\n-                case '<':\n-                    t.advanceTransition(RawtextLessthanSign);\n-                    break;\n-                case nullChar:\n-                    t.error(this);\n-                    r.advance();\n-                    t.emit(replacementChar);\n-                    break;\n-                case eof:\n-                    t.emit(new Token.EOF());\n-                    break;\n-                default:\n-                    String data = r.consumeToAny('<', nullChar);\n-                    t.emit(data);\n-                    break;\n-            }\n+            readData(t, r, this, RawtextLessthanSign);\n         }\n     },\n     ScriptData {\n         void read(Tokeniser t, CharacterReader r) {\n-            switch (r.current()) {\n-                case '<':\n-                    t.advanceTransition(ScriptDataLessthanSign);\n-                    break;\n-                case nullChar:\n-                    t.error(this);\n-                    r.advance();\n-                    t.emit(replacementChar);\n-                    break;\n-                case eof:\n-                    t.emit(new Token.EOF());\n-                    break;\n-                default:\n-                    String data = r.consumeToAny('<', nullChar);\n-                    t.emit(data);\n-                    break;\n-            }\n+            readData(t, r, this, ScriptDataLessthanSign);\n         }\n     },\n     PLAINTEXT {\n     },\n     RawtextEndTagOpen {\n         void read(Tokeniser t, CharacterReader r) {\n-            if (r.matchesLetter()) {\n-                t.createTagPending(false);\n-                t.transition(RawtextEndTagName);\n-            } else {\n-                t.emit(\"</\");\n-                t.transition(Rawtext);\n-            }\n+            readEndTag(t, r, RawtextEndTagName, Rawtext);\n         }\n     },\n     RawtextEndTagName {\n     },\n     ScriptDataEndTagOpen {\n         void read(Tokeniser t, CharacterReader r) {\n-            if (r.matchesLetter()) {\n-                t.createTagPending(false);\n-                t.transition(ScriptDataEndTagName);\n-            } else {\n-                t.emit(\"</\");\n-                t.transition(ScriptData);\n-            }\n-\n+            readEndTag(t, r, ScriptDataEndTagName, ScriptData);\n         }\n     },\n     ScriptDataEndTagName {\n         if (needsExitTransition) {\n             t.emit(\"</\" + t.dataBuffer.toString());\n             t.transition(elseTransition);\n+        }\n+    }\n+\n+    private static void readData(Tokeniser t, CharacterReader r, TokeniserState current, TokeniserState advance) {\n+        switch (r.current()) {\n+            case '<':\n+                t.advanceTransition(advance);\n+                break;\n+            case nullChar:\n+                t.error(current);\n+                r.advance();\n+                t.emit(replacementChar);\n+                break;\n+            case eof:\n+                t.emit(new Token.EOF());\n+                break;\n+            default:\n+                String data = r.consumeToAny('<', nullChar);\n+                t.emit(data);\n+                break;\n+        }\n+    }\n+\n+    private static void readCharRef(Tokeniser t, TokeniserState advance) {\n+        char[] c = t.consumeCharacterReference(null, false);\n+        if (c == null)\n+            t.emit('&');\n+        else\n+            t.emit(c);\n+        t.transition(advance);\n+    }\n+\n+    private static void readEndTag(Tokeniser t, CharacterReader r, TokeniserState a, TokeniserState b) {\n+        if (r.matchesLetter()) {\n+            t.createTagPending(false);\n+            t.transition(a);\n+        } else {\n+            t.emit(\"</\");\n+            t.transition(b);\n         }\n     }\n ", "timestamp": 1461440232, "metainfo": ""}