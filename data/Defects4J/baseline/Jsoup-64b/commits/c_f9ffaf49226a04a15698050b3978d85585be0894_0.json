{"sha": "f9ffaf49226a04a15698050b3978d85585be0894", "log": "added .toString() to basic Evaluators", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Evaluator.java\n+++ b/src/main/java/org/jsoup/nodes/Evaluator.java\n         public boolean matches(Element element) {\n             return (element.tagName().equals(tagName));\n         }\n+        \n+        @Override\n+        public String toString() {\n+        \treturn String.format(\":tag=%s\", tagName);\n+        }\n     }\n \n     public static final class Id extends Evaluator {\n         public boolean matches(Element element) {\n             return (id.equals(element.id()));\n         }\n+        \n+        @Override\n+        public String toString() {\n+        \treturn String.format(\":id=%s\", id);\n+        }\n+\n     }\n \n     public static final class Class extends Evaluator {\n         public boolean matches(Element element) {\n             return (element.hasClass(className));\n         }\n+        \n+        @Override\n+        public String toString() {\n+        \treturn String.format(\":class=%s\", className);\n+        }\n+\n     }\n \n     public static final class Attribute extends Evaluator {\n         public boolean matches(Element element) {\n             return element.hasAttr(key);\n         }\n+        \n+        @Override\n+        public String toString() {\n+        \treturn String.format(\":[%s]\", key);\n+        }\n+\n     }\n \n     public static final class AttributeStarting extends Evaluator {\n             }\n             return false;\n         }\n+        \n+        @Override\n+        public String toString() {\n+        \treturn String.format(\":[^%s]\", keyPrefix);\n+        }\n+\n     }\n \n     public static final class AttributeWithValue extends AttributeKeyPair {\n         public boolean matches(Element element) {\n             return element.hasAttr(key) && value.equalsIgnoreCase(element.attr(key));\n         }\n+        \n+        @Override\n+        public String toString() {\n+        \treturn String.format(\":[%s=%s]\", key, value);\n+        }\n+\n     }\n \n     public static final class AttributeWithValueNot extends AttributeKeyPair {\n         public boolean matches(Element element) {\n             return !value.equalsIgnoreCase(element.attr(key));\n         }\n+        \n+        @Override\n+        public String toString() {\n+        \treturn String.format(\":[%s!=%s]\", key, value);\n+        }\n+\n     }\n \n     public static final class AttributeWithValueStarting extends AttributeKeyPair {\n         public boolean matches(Element element) {\n             return element.hasAttr(key) && element.attr(key).toLowerCase().startsWith(value); // value is lower case already\n         }\n+        \n+        @Override\n+        public String toString() {\n+        \treturn String.format(\":[%s^=%s]\", key, value);\n+        }\n+\n     }\n \n     public static final class AttributeWithValueEnding extends AttributeKeyPair {\n         public boolean matches(Element element) {\n             return element.hasAttr(key) && element.attr(key).toLowerCase().endsWith(value); // value is lower case\n         }\n+        \n+        @Override\n+        public String toString() {\n+        \treturn String.format(\":[%s$=%s]\", key, value);\n+        }\n+\n     }\n \n     public static final class AttributeWithValueContaining extends AttributeKeyPair {\n         public boolean matches(Element element) {\n             return element.hasAttr(key) && element.attr(key).toLowerCase().contains(value); // value is lower case\n         }\n+        \n+        @Override\n+        public String toString() {\n+        \treturn String.format(\":[%s*=%s]\", key, value);\n+        }\n+\n     }\n     \n     public static final class AttributeWithValueMatching extends Evaluator{\n         public boolean matches(Element element) {\n             return element.hasAttr(key) && pattern.matcher(element.attr(key)).find();\n         }\n+        \n+        @Override\n+        public String toString() {\n+        \treturn String.format(\":[%s~=%s]\", key, pattern.toString());\n+        }\n+\n     }\n \n     public abstract static class AttributeKeyPair extends Evaluator {\n         public boolean matches(Element element) {\n             return element.elementSiblingIndex() < index;\n         }\n+        \n+        @Override\n+        public String toString() {\n+        \treturn String.format(\":lt(%d)\", index);\n+        }\n+\n     }\n     \n     public static final class IndexGreaterThan extends IndexEvaluator {\n         public boolean matches(Element element) {\n             return element.elementSiblingIndex() > index;\n         }\n+        \n+        @Override\n+        public String toString() {\n+        \treturn String.format(\":gt(%d)\", index);\n+        }\n+\n     }\n     \n     public static final class IndexEquals extends IndexEvaluator {\n         public boolean matches(Element element) {\n             return element.elementSiblingIndex() == index;\n         }\n+        \n+        @Override\n+        public String toString() {\n+        \treturn String.format(\":eq(%d)\", index);\n+        }\n+\n     }    \n     \n     public abstract static class IndexEvaluator extends Evaluator {", "timestamp": 1309605124, "metainfo": ""}