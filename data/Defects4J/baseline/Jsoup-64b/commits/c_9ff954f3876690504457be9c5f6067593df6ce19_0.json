{"sha": "9ff954f3876690504457be9c5f6067593df6ce19", "log": "Added documentation for NodeVisitor and NodeTraversor.", "commit": "\n--- a/src/main/java/org/jsoup/select/NodeTraversor.java\n+++ b/src/main/java/org/jsoup/select/NodeTraversor.java\n import org.jsoup.nodes.Node;\n \n /**\n- * Breadth first node traversor.\n+ * Breadth first node traversor. Use to iterate through all nodes under and including the specified root node.\n+ * <p/>\n+ * This implementation does not use recursion, so a deep DOM does not risk blowing the stack.\n  */\n public class NodeTraversor {\n     private NodeVisitor visitor;\n \n+    /**\n+     * Create a new traversor.\n+     * @param visitor a class implementing the {@link NodeVisitor} interface, to be called when visiting each node.\n+     */\n     public NodeTraversor(NodeVisitor visitor) {\n         this.visitor = visitor;\n     }\n \n+    /**\n+     * Start a breadth-first traverse of the root and all of its descendants.\n+     * @param root the root node point to traverse.\n+     */\n     public void traverse(Node root) {\n         Node node = root;\n         int depth = 0;\n--- a/src/main/java/org/jsoup/select/NodeVisitor.java\n+++ b/src/main/java/org/jsoup/select/NodeVisitor.java\n import org.jsoup.nodes.Node;\n \n /**\n- * Node visitor interface\n+ * Node visitor interface. Provide an implementing class to {@link NodeTraversor} to iterate through nodes.\n+ * <p/>\n+ * This interface provides two methods, {@code head} and {@code tail}. The head method is called when the node is first\n+ * seen, and the tail method when all of the node's children have been visited. As an example, head can be used to\n+ * create a start tag for a node, and tail to create the end tag.\n  */\n public interface NodeVisitor {\n+    /**\n+     * Callback for when a node is first visited.\n+     *\n+     * @param node the node being visited.\n+     * @param depth the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node\n+     * of that will have depth 1.\n+     */\n     public void head(Node node, int depth);\n+\n+    /**\n+     * Callback for when a node is last visited, after all of its descendants have been visited.\n+     *\n+     * @param node the node being visited.\n+     * @param depth the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node\n+     * of that will have depth 1.\n+     */\n     public void tail(Node node, int depth);\n }", "timestamp": 1314933973, "metainfo": ""}