{"sha": "01779db81c28933f4bffbfb2d530937a96a23b84", "log": "Merge branch 'attributes-iterator-optim' of https://github.com/benbenw/jsoup", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n     }\n \n     public Iterator<Attribute> iterator() {\n-        return asList().iterator();\n+        if (attributes == null || attributes.isEmpty()) {\n+            return Collections.<Attribute>emptyList().iterator();\n+        }\n+        \n+        return new AttributesReadOnlyIterator(attributes.values().iterator());\n     }\n \n     /**\n     private static String dataKey(String key) {\n         return dataPrefix + key;\n     }\n+    \n+    private static class AttributesReadOnlyIterator implements Iterator<Attribute> {\n+\n+        private Iterator<Attribute> iterator;\n+\n+        public AttributesReadOnlyIterator(Iterator<Attribute> iterator) {\n+            this.iterator = iterator;\n+        }\n+\n+        public boolean hasNext() {\n+            return iterator.hasNext();\n+        }\n+\n+        public Attribute next() {\n+            return iterator.next();\n+        }\n+\n+        public void remove() {\n+            throw new UnsupportedOperationException();\n+        }\n+        \n+    }\n }\n--- a/src/test/java/org/jsoup/nodes/AttributesTest.java\n+++ b/src/test/java/org/jsoup/nodes/AttributesTest.java\n package org.jsoup.nodes;\n \n import static org.junit.Assert.*;\n+\n+import java.util.Iterator;\n \n import org.junit.Test;\n \n  * @author Jonathan Hedley\n  */\n public class AttributesTest {\n+    \n     @Test public void html() {\n         Attributes a = new Attributes();\n         a.put(\"Tot\", \"a&p\");\n         assertEquals(\" Tot=\\\"a&amp;p\\\" Hello=\\\"There\\\" data-name=\\\"Jsoup\\\"\", a.html());\n         assertEquals(a.html(), a.toString());\n     }\n+    \n+    @Test(expected=UnsupportedOperationException.class)\n+    public void testIteratorReadOnly() {\n+        Attributes a = new Attributes();\n+        a.put(\"Tot\", \"a&p\");\n+        a.put(\"Hello\", \"There\");\n+        a.put(\"data-name\", \"Jsoup\");\n+\n+        Iterator<Attribute> iterator = a.iterator();\n+        iterator.remove();\n+    }\n+    \n+    @Test\n+    public void testIterator() {\n+        Attributes a = new Attributes();\n+        String[][] datas = {{\"Tot\", \"raul\"},\n+                {\"Hello\", \"pismuth\"},\n+                {\"data-name\", \"Jsoup\"}};\n+        for (String[] atts : datas) {\n+            a.put(atts[0], atts[1]);\n+        }\n+        \n+        Iterator<Attribute> iterator = a.iterator();\n+        assertTrue(iterator.hasNext());\n+        int i = 0;\n+        for (Attribute attribute : a) {\n+            assertEquals(datas[i][0], attribute.getKey());\n+            assertEquals(datas[i][1], attribute.getValue());\n+            i++;\n+        }\n+        assertEquals(datas.length, i);\n+    }\n+    \n+    @Test\n+    public void testIteratorEmpty() {\n+        Attributes a = new Attributes();\n+        \n+\n+        Iterator<Attribute> iterator = a.iterator();\n+        assertFalse(iterator.hasNext());\n+    }\n \n }\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n \n         private static String setOutputContentType(final Connection.Request req) {\n             String bound = null;\n-            if (needsMultipart(req)) {\n+            if (req.hasHeader(CONTENT_TYPE)) {\n+                // no-op; don't add content type as already set (e.g. for requestBody())\n+                // todo - if content type already set, we could add charset or boundary if those aren't included\n+            }\n+            else if (needsMultipart(req)) {\n                 bound = DataUtil.mimeBoundary();\n                 req.header(CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bound);\n             } else {\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n      * @param className name of class to check for\n      * @return true if it does, false if not\n      */\n-    /*\n-    Used by common .class selector, so perf tweaked to reduce object creation vs hitting classnames().\n-\n-    Wiki: 71, 13 (5.4x)\n-    CNN: 227, 91 (2.5x)\n-    Alterslash: 59, 4 (14.8x)\n-    Jsoup: 14, 1 (14x)\n-    */\n+    // performance sensitive\n     public boolean hasClass(String className) {\n-        String classAttr = attributes.get(\"class\");\n-        if (classAttr.equals(\"\") || classAttr.length() < className.length())\n+        final String classAttr = attributes.get(\"class\");\n+        final int len = classAttr.length();\n+        final int wantLen = className.length();\n+\n+        if (len == 0 || len < wantLen) {\n             return false;\n-\n-        final String[] classes = classSplit.split(classAttr);\n-        for (String name : classes) {\n-            if (className.equalsIgnoreCase(name))\n-                return true;\n+        }\n+\n+        // if both lengths are equal, only need compare the className with the attribute\n+        if (len == wantLen) {\n+            return className.equalsIgnoreCase(classAttr);\n+        }\n+\n+        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n+        boolean inClass = false;\n+        int start = 0;\n+        for (int i = 0; i < len; i++) {\n+            if (Character.isWhitespace(classAttr.charAt(i))) {\n+                if (inClass) {\n+                    // white space ends a class name, compare it with the requested one, ignore case\n+                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n+                        return true;\n+                    }\n+                    inClass = false;\n+                }\n+            } else {\n+                if (!inClass) {\n+                    // we're in a class name : keep the start of the substring\n+                    inClass = true;\n+                    start = i;\n+                }\n+            }\n+        }\n+\n+        // check the last entry\n+        if (inClass && len - start == wantLen) {\n+            return classAttr.regionMatches(true, start, className, 0, wantLen);\n         }\n \n         return false;\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n     }\n \n     @Test\n+    public void sendsRequestBodyJsonWithData() throws IOException {\n+        final String body = \"{key:value}\";\n+        Document doc = Jsoup.connect(echoURL)\n+            .requestBody(body)\n+            .header(\"Content-Type\", \"application/json\")\n+            .userAgent(browserUa)\n+            .data(\"foo\", \"true\")\n+            .post();\n+        assertEquals(\"POST\", ihVal(\"REQUEST_METHOD\", doc));\n+        assertEquals(\"application/json\", ihVal(\"CONTENT_TYPE\", doc));\n+        assertEquals(\"foo=true\", ihVal(\"QUERY_STRING\", doc));\n+        assertEquals(body, doc.select(\"th:contains(POSTDATA) ~ td\").text());\n+    }\n+\n+    @Test\n+    public void sendsRequestBodyJsonWithoutData() throws IOException {\n+        final String body = \"{key:value}\";\n+        Document doc = Jsoup.connect(echoURL)\n+            .requestBody(body)\n+            .header(\"Content-Type\", \"application/json\")\n+            .userAgent(browserUa)\n+            .post();\n+        assertEquals(\"POST\", ihVal(\"REQUEST_METHOD\", doc));\n+        assertEquals(\"application/json\", ihVal(\"CONTENT_TYPE\", doc));\n+        assertEquals(body, doc.select(\"th:contains(POSTDATA) ~ td\").text());\n+    }\n+\n+    @Test\n     public void sendsRequestBody() throws IOException {\n         final String body = \"{key:value}\";\n         Document doc = Jsoup.connect(echoURL)\n             .userAgent(browserUa)\n             .post();\n         assertEquals(\"POST\", ihVal(\"REQUEST_METHOD\", doc));\n-        assertEquals(body, ihVal(\"keywords\", doc));\n+        assertEquals(\"text/plain\", ihVal(\"CONTENT_TYPE\", doc));\n+        assertEquals(body, doc.select(\"th:contains(POSTDATA) ~ td\").text());\n     }\n \n     @Test\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(0, classes.size());\n         assertFalse(doc.hasClass(\"mellow\"));\n     }\n-\n+    \n+    @Test public void testHasClassDomMethods() {\n+        Tag tag = Tag.valueOf(\"a\");\n+        Attributes attribs = new Attributes();\n+        Element el = new Element(tag, \"\", attribs);\n+        \n+        attribs.put(\"class\", \"toto\");\n+        boolean hasClass = el.hasClass(\"toto\");\n+        assertTrue(hasClass);\n+        \n+        attribs.put(\"class\", \" toto\");\n+        hasClass = el.hasClass(\"toto\");\n+        assertTrue(hasClass);\n+        \n+        attribs.put(\"class\", \"toto \");\n+        hasClass = el.hasClass(\"toto\");\n+        assertTrue(hasClass);\n+        \n+        attribs.put(\"class\", \"\\ttoto \");\n+        hasClass = el.hasClass(\"toto\");\n+        assertTrue(hasClass);\n+        \n+        attribs.put(\"class\", \"  toto \");\n+        hasClass = el.hasClass(\"toto\");\n+        assertTrue(hasClass);\n+        \n+        attribs.put(\"class\", \"ab\");\n+        hasClass = el.hasClass(\"toto\");\n+        assertFalse(hasClass);\n+        \n+        attribs.put(\"class\", \"     \");\n+        hasClass = el.hasClass(\"toto\");\n+        assertFalse(hasClass);\n+        \n+        attribs.put(\"class\", \"tototo\");\n+        hasClass = el.hasClass(\"toto\");\n+        assertFalse(hasClass);\n+        \n+        attribs.put(\"class\", \"raulpismuth  \");\n+        hasClass = el.hasClass(\"raulpismuth\");\n+        assertTrue(hasClass);\n+        \n+        attribs.put(\"class\", \" abcd  raulpismuth efgh \");\n+        hasClass = el.hasClass(\"raulpismuth\");\n+        assertTrue(hasClass);\n+        \n+        attribs.put(\"class\", \" abcd efgh raulpismuth\");\n+        hasClass = el.hasClass(\"raulpismuth\");\n+        assertTrue(hasClass);\n+        \n+        attribs.put(\"class\", \" abcd efgh raulpismuth \");\n+        hasClass = el.hasClass(\"raulpismuth\");\n+        assertTrue(hasClass);\n+    }\n+\n+    \n     @Test public void testClassUpdates() {\n         Document doc = Jsoup.parse(\"<div class='mellow yellow'></div>\");\n         Element div = doc.select(\"div\").first();", "timestamp": 1472162430, "metainfo": ""}