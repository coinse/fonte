{"sha": "fcd8807033d27e7591291cd5143d912dd94e09c3", "log": "Support prev and next etc", "commit": "\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n     }\n \n     /**\n+     * Get the immediate next element sibling of each element in this list.\n+     * @return next element siblings.\n+     */\n+    public Elements next() {\n+        return siblings(null, true, false);\n+    }\n+\n+    /**\n+     * Get the immediate next element sibling of each element in this list, filtered by the query.\n+     * @param query CSS query to match siblings against\n+     * @return next element siblings.\n+     */\n+    public Elements next(String query) {\n+        return siblings(query, true, false);\n+    }\n+\n+    /**\n+     * Get all of the following element siblings of each element in this list.\n+     * @return all following element siblings.\n+     */\n+    public Elements nextAll() {\n+        return siblings(null, true, true);\n+    }\n+\n+    /**\n+     * Get all of the following element siblings of each element in this list, filtered by the query.\n+     * @param query CSS query to match siblings against\n+     * @return all following element siblings.\n+     */\n+    public Elements nextAll(String query) {\n+        return siblings(query, true, true);\n+    }\n+\n+    /**\n+     * Get the immediate previous element sibling of each element in this list.\n+     * @return previous element siblings.\n+     */\n+    public Elements prev() {\n+        return siblings(null, false, false);\n+    }\n+\n+    /**\n+     * Get the immediate previous element sibling of each element in this list, filtered by the query.\n+     * @param query CSS query to match siblings against\n+     * @return previous element siblings.\n+     */\n+    public Elements prev(String query) {\n+        return siblings(query, false, false);\n+    }\n+\n+    /**\n+     * Get all of the previous element siblings of each element in this list.\n+     * @return all previous element siblings.\n+     */\n+    public Elements prevAll() {\n+        return siblings(null, false, true);\n+    }\n+\n+    /**\n+     * Get all of the previous element siblings of each element in this list, filtered by the query.\n+     * @param query CSS query to match siblings against\n+     * @return all previous element siblings.\n+     */\n+    public Elements prevAll(String query) {\n+        return siblings(query, false, true);\n+    }\n+\n+    private Elements siblings(String query, boolean next, boolean all) {\n+        Elements els = new Elements();\n+        Evaluator eval = query != null? QueryParser.parse(query) : null;\n+        for (Element e : this) {\n+            do {\n+                Element sib = next ? e.nextElementSibling() : e.previousElementSibling();\n+                if (sib == null) break;\n+                if (eval == null)\n+                    els.add(sib);\n+                else if (sib.is(eval))\n+                    els.add(sib);\n+                e = sib;\n+            } while (all);\n+        }\n+        return els;\n+    }\n+\n+    /**\n      * Get all of the parents and ancestor elements of the matched elements.\n      * @return all of the parents and ancestor elements of the matched elements\n      */\n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n         assertEquals(1, els.size());\n         assertEquals(\"Check\", els.text());\n     }\n+\n+    @Test public void siblings() {\n+        Document doc = Jsoup.parse(\"<div><p>1<p>2<p>3<p>4<p>5<p>6</div><div><p>7<p>8<p>9<p>10<p>11<p>12</div>\");\n+\n+        Elements els = doc.select(\"p:eq(3)\"); // gets p4 and p10\n+        assertEquals(2, els.size());\n+\n+        Elements next = els.next();\n+        assertEquals(2, next.size());\n+        assertEquals(\"5\", next.first().text());\n+        assertEquals(\"11\", next.last().text());\n+\n+        assertEquals(0, els.next(\"p:contains(6)\").size());\n+        final Elements nextF = els.next(\"p:contains(5)\");\n+        assertEquals(1, nextF.size());\n+        assertEquals(\"5\", nextF.first().text());\n+\n+        Elements nextA = els.nextAll();\n+        assertEquals(4, nextA.size());\n+        assertEquals(\"5\", nextA.first().text());\n+        assertEquals(\"12\", nextA.last().text());\n+\n+        Elements nextAF = els.nextAll(\"p:contains(6)\");\n+        assertEquals(1, nextAF.size());\n+        assertEquals(\"6\", nextAF.first().text());\n+\n+        Elements prev = els.prev();\n+        assertEquals(2, prev.size());\n+        assertEquals(\"3\", prev.first().text());\n+        assertEquals(\"9\", prev.last().text());\n+\n+        assertEquals(0, els.prev(\"p:contains(1)\").size());\n+        final Elements prevF = els.prev(\"p:contains(3)\");\n+        assertEquals(1, prevF.size());\n+        assertEquals(\"3\", prevF.first().text());\n+\n+        Elements prevA = els.prevAll();\n+        assertEquals(6, prevA.size());\n+        assertEquals(\"3\", prevA.first().text());\n+        assertEquals(\"7\", prevA.last().text());\n+\n+        Elements prevAF = els.prevAll(\"p:contains(1)\");\n+        assertEquals(1, prevAF.size());\n+        assertEquals(\"1\", prevAF.first().text());\n+    }\n }", "timestamp": 1477781776, "metainfo": ""}