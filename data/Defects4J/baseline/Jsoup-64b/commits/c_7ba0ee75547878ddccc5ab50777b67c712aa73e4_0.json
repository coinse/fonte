{"sha": "7ba0ee75547878ddccc5ab50777b67c712aa73e4", "log": "Merge pull request #820 from cketti/GH-256_fix_locale_bugs  Don't use default locale when lowercasing", "commit": "\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n import java.util.zip.GZIPInputStream;\n \n import static org.jsoup.Connection.Method.HEAD;\n+import static org.jsoup.internal.Normalizer.lowerCase;\n \n /**\n  * Implementation of {@link Connection}.\n             // quick evals for common case of title case, lower case, then scan for mixed\n             String value = headers.get(name);\n             if (value == null)\n-                value = headers.get(name.toLowerCase());\n+                value = headers.get(lowerCase(name));\n             if (value == null) {\n                 Map.Entry<String, String> entry = scanHeaders(name);\n                 if (entry != null)\n         }\n \n         private Map.Entry<String, String> scanHeaders(String name) {\n-            String lc = name.toLowerCase();\n+            String lc = lowerCase(name);\n             for (Map.Entry<String, String> entry : headers.entrySet()) {\n-                if (entry.getKey().toLowerCase().equals(lc))\n+                if (lowerCase(entry.getKey()).equals(lc))\n                     return entry;\n             }\n             return null;\n--- /dev/null\n+++ b/src/main/java/org/jsoup/internal/Normalizer.java\n+package org.jsoup.internal;\n+\n+import java.util.Locale;\n+\n+public class Normalizer {\n+    public static String lowerCase(String input) {\n+        return input.toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    public static String normalize(String input) {\n+        return lowerCase(input).trim();\n+    }\n+}\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n import java.util.regex.Pattern;\n import java.util.regex.PatternSyntaxException;\n \n+import static org.jsoup.internal.Normalizer.normalize;\n+\n /**\n  * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n  * other elements).\n      */\n     public Elements getElementsByTag(String tagName) {\n         Validate.notEmpty(tagName);\n-        tagName = tagName.toLowerCase().trim();\n+        tagName = normalize(tagName);\n \n         return Collector.collect(new Evaluator.Tag(tagName), this);\n     }\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n+\n+import static org.jsoup.internal.Normalizer.lowerCase;\n \n /**\n  The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.\n         String val = attributes.getIgnoreCase(attributeKey);\n         if (val.length() > 0)\n             return val;\n-        else if (attributeKey.toLowerCase().startsWith(\"abs:\"))\n+        else if (lowerCase(attributeKey).startsWith(\"abs:\"))\n             return absUrl(attributeKey.substring(\"abs:\".length()));\n         else return \"\";\n     }\n--- a/src/main/java/org/jsoup/parser/ParseSettings.java\n+++ b/src/main/java/org/jsoup/parser/ParseSettings.java\n \n import org.jsoup.nodes.Attribute;\n import org.jsoup.nodes.Attributes;\n+\n+import static org.jsoup.internal.Normalizer.lowerCase;\n \n /**\n  * Controls parser settings, to optionally preserve tag and/or attribute name case.\n     String normalizeTag(String name) {\n         name = name.trim();\n         if (!preserveTagCase)\n-            name = name.toLowerCase();\n+            name = lowerCase(name);\n         return name;\n     }\n \n     String normalizeAttribute(String name) {\n         name = name.trim();\n         if (!preserveAttributeCase)\n-            name = name.toLowerCase();\n+            name = lowerCase(name);\n         return name;\n     }\n \n     Attributes normalizeAttributes(Attributes attributes) {\n         if (!preserveAttributeCase) {\n             for (Attribute attr : attributes) {\n-                attr.setKey(attr.getKey().toLowerCase());\n+                attr.setKey(lowerCase(attr.getKey()));\n             }\n         }\n         return attributes;\n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n import org.jsoup.nodes.Attribute;\n import org.jsoup.nodes.Attributes;\n import org.jsoup.nodes.BooleanAttribute;\n+\n+import static org.jsoup.internal.Normalizer.lowerCase;\n \n /**\n  * Parse tokens for the Tokeniser.\n \n         final Tag name(String name) {\n             tagName = name;\n-            normalName = name.toLowerCase();\n+            normalName = lowerCase(name);\n             return this;\n         }\n \n         // these appenders are rarely hit in not null state-- caused by null chars.\n         final void appendTagName(String append) {\n             tagName = tagName == null ? append : tagName.concat(append);\n-            normalName = tagName.toLowerCase();\n+            normalName = lowerCase(tagName);\n         }\n \n         final void appendTagName(char append) {\n         StartTag nameAttr(String name, Attributes attributes) {\n             this.tagName = name;\n             this.attributes = attributes;\n-            normalName = tagName.toLowerCase();\n+            normalName = lowerCase(tagName);\n             return this;\n         }\n \n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+\n+import static org.jsoup.internal.Normalizer.lowerCase;\n \n \n /**\n \n             prot += \":\";\n \n-            if (value.toLowerCase().startsWith(prot)) {\n+            if (lowerCase(value).startsWith(prot)) {\n                 return true;\n             }\n         }\n--- a/src/main/java/org/jsoup/select/Evaluator.java\n+++ b/src/main/java/org/jsoup/select/Evaluator.java\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import static org.jsoup.internal.Normalizer.lowerCase;\n+import static org.jsoup.internal.Normalizer.normalize;\n+\n \n /**\n  * Evaluates that an element matches the selector.\n \n         public AttributeStarting(String keyPrefix) {\n             Validate.notEmpty(keyPrefix);\n-            this.keyPrefix = keyPrefix.toLowerCase();\n+            this.keyPrefix = lowerCase(keyPrefix);\n         }\n \n         @Override\n         public boolean matches(Element root, Element element) {\n             List<org.jsoup.nodes.Attribute> values = element.attributes().asList();\n             for (org.jsoup.nodes.Attribute attribute : values) {\n-                if (attribute.getKey().toLowerCase().startsWith(keyPrefix))\n+                if (lowerCase(attribute.getKey()).startsWith(keyPrefix))\n                     return true;\n             }\n             return false;\n \n         @Override\n         public boolean matches(Element root, Element element) {\n-            return element.hasAttr(key) && element.attr(key).toLowerCase().startsWith(value); // value is lower case already\n+            return element.hasAttr(key) && lowerCase(element.attr(key)).startsWith(value); // value is lower case already\n         }\n \n         @Override\n \n         @Override\n         public boolean matches(Element root, Element element) {\n-            return element.hasAttr(key) && element.attr(key).toLowerCase().endsWith(value); // value is lower case\n+            return element.hasAttr(key) && lowerCase(element.attr(key)).endsWith(value); // value is lower case\n         }\n \n         @Override\n \n         @Override\n         public boolean matches(Element root, Element element) {\n-            return element.hasAttr(key) && element.attr(key).toLowerCase().contains(value); // value is lower case\n+            return element.hasAttr(key) && lowerCase(element.attr(key)).contains(value); // value is lower case\n         }\n \n         @Override\n         Pattern pattern;\n \n         public AttributeWithValueMatching(String key, Pattern pattern) {\n-            this.key = key.trim().toLowerCase();\n+            this.key = normalize(key);\n             this.pattern = pattern;\n         }\n \n             Validate.notEmpty(key);\n             Validate.notEmpty(value);\n \n-            this.key = key.trim().toLowerCase();\n+            this.key = normalize(key);\n             if (value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")\n                     || value.startsWith(\"'\") && value.endsWith(\"'\")) {\n                 value = value.substring(1, value.length()-1);\n             }\n-            this.value = value.trim().toLowerCase();\n+            this.value = normalize(value);\n         }\n     }\n \n         private String searchText;\n \n         public ContainsText(String searchText) {\n-            this.searchText = searchText.toLowerCase();\n-        }\n-\n-        @Override\n-        public boolean matches(Element root, Element element) {\n-            return (element.text().toLowerCase().contains(searchText));\n+            this.searchText = lowerCase(searchText);\n+        }\n+\n+        @Override\n+        public boolean matches(Element root, Element element) {\n+            return lowerCase(element.text()).contains(searchText);\n         }\n \n         @Override\n         private String searchText;\n \n         public ContainsData(String searchText) {\n-            this.searchText = searchText.toLowerCase();\n-        }\n-\n-        @Override\n-        public boolean matches(Element root, Element element) {\n-            return (element.data().toLowerCase().contains(searchText));\n+            this.searchText = lowerCase(searchText);\n+        }\n+\n+        @Override\n+        public boolean matches(Element root, Element element) {\n+            return lowerCase(element.data()).contains(searchText);\n         }\n \n         @Override\n         private String searchText;\n \n         public ContainsOwnText(String searchText) {\n-            this.searchText = searchText.toLowerCase();\n-        }\n-\n-        @Override\n-        public boolean matches(Element root, Element element) {\n-            return (element.ownText().toLowerCase().contains(searchText));\n+            this.searchText = lowerCase(searchText);\n+        }\n+\n+        @Override\n+        public boolean matches(Element root, Element element) {\n+            return lowerCase(element.ownText()).contains(searchText);\n         }\n \n         @Override\n--- a/src/main/java/org/jsoup/select/QueryParser.java\n+++ b/src/main/java/org/jsoup/select/QueryParser.java\n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n import org.jsoup.parser.TokenQueue;\n+\n+import static org.jsoup.internal.Normalizer.normalize;\n \n /**\n  * Parses a CSS selector into an Evaluator tree.\n \n         // namespaces: wildcard match equals(tagName) or ending in \":\"+tagName\n         if (tagName.startsWith(\"*|\")) {\n-            evals.add(new CombiningEvaluator.Or(new Evaluator.Tag(tagName.trim().toLowerCase()), new Evaluator.TagEndsWith(tagName.replace(\"*|\", \":\").trim().toLowerCase())));\n+            evals.add(new CombiningEvaluator.Or(new Evaluator.Tag(normalize(tagName)), new Evaluator.TagEndsWith(normalize(tagName.replace(\"*|\", \":\")))));\n         } else {\n             // namespaces: if element name is \"abc:def\", selector must be \"abc|def\", so flip:\n             if (tagName.contains(\"|\"))\n     private static final Pattern NTH_B  = Pattern.compile(\"(\\\\+|-)?(\\\\d+)\");\n \n \tprivate void cssNthChild(boolean backwards, boolean ofType) {\n-\t\tString argS = tq.chompTo(\")\").trim().toLowerCase();\n+\t\tString argS = normalize(tq.chompTo(\")\"));\n \t\tMatcher mAB = NTH_AB.matcher(argS);\n \t\tMatcher mB = NTH_B.matcher(argS);\n \t\tfinal int a, b;\n--- /dev/null\n+++ b/src/test/java/org/jsoup/MultiLocaleRule.java\n+package org.jsoup;\n+\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.util.Locale;\n+\n+public class MultiLocaleRule implements TestRule {\n+    @Retention(RetentionPolicy.RUNTIME)\n+    public @interface MultiLocaleTest {\n+    }\n+\n+    public Statement apply(final Statement statement, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                MultiLocaleTest annotation = description.getAnnotation(MultiLocaleTest.class);\n+                if (annotation == null) {\n+                    statement.evaluate();\n+                    return;\n+                }\n+\n+                evaluateWithLocale(Locale.ENGLISH);\n+                evaluateWithLocale(new Locale(\"tr\"));\n+            }\n+\n+            private void evaluateWithLocale(Locale locale) throws Throwable {\n+                Locale oldLocale = Locale.getDefault();\n+                Locale.setDefault(locale);\n+                try {\n+                    statement.evaluate();\n+                } finally {\n+                    Locale.setDefault(oldLocale);\n+                }\n+            }\n+        };\n+    }\n+}\n--- a/src/test/java/org/jsoup/helper/HttpConnectionTest.java\n+++ b/src/test/java/org/jsoup/helper/HttpConnectionTest.java\n \n import static org.junit.Assert.*;\n \n+import org.jsoup.MultiLocaleRule;\n+import org.jsoup.MultiLocaleRule.MultiLocaleTest;\n import org.jsoup.integration.ParseTest;\n+import org.junit.Rule;\n import org.junit.Test;\n import org.jsoup.Connection;\n \n \n public class HttpConnectionTest {\n     /* most actual network http connection tests are in integration */\n+\n+    @Rule public MultiLocaleRule rule = new MultiLocaleRule();\n \n     @Test(expected=IllegalArgumentException.class) public void throwsExceptionOnParseWithoutExecute() throws IOException {\n         Connection con = HttpConnection.connect(\"http://example.com\");\n         con.response().bodyAsBytes();\n     }\n \n-    @Test public void caseInsensitiveHeaders() {\n+    @Test @MultiLocaleTest public void caseInsensitiveHeaders() {\n         Connection.Response res = new HttpConnection.Response();\n         Map<String, String> headers = res.headers();\n         headers.put(\"Accept-Encoding\", \"gzip\");\n         assertTrue(res.hasHeader(\"Accept-Encoding\"));\n         assertTrue(res.hasHeader(\"accept-encoding\"));\n         assertTrue(res.hasHeader(\"accept-Encoding\"));\n+        assertTrue(res.hasHeader(\"ACCEPT-ENCODING\"));\n \n         assertEquals(\"gzip\", res.header(\"accept-Encoding\"));\n+        assertEquals(\"gzip\", res.header(\"ACCEPT-ENCODING\"));\n         assertEquals(\"text/html\", res.header(\"Content-Type\"));\n         assertEquals(\"http://example.com\", res.header(\"Referrer\"));\n \n         res.removeHeader(\"Content-Type\");\n         assertFalse(res.hasHeader(\"content-type\"));\n \n-        res.header(\"accept-encoding\", \"deflate\");\n+        res.removeHeader(\"ACCEPT-ENCODING\");\n+        assertFalse(res.hasHeader(\"Accept-Encoding\"));\n+\n+        res.header(\"ACCEPT-ENCODING\", \"deflate\");\n         assertEquals(\"deflate\", res.header(\"Accept-Encoding\"));\n         assertEquals(\"deflate\", res.header(\"accept-Encoding\"));\n     }\n--- a/src/test/java/org/jsoup/parser/ParserSettingsTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserSettingsTest.java\n package org.jsoup.parser;\n \n+import org.jsoup.MultiLocaleRule;\n+import org.jsoup.MultiLocaleRule.MultiLocaleTest;\n+import org.jsoup.nodes.Attributes;\n+import org.junit.Rule;\n import org.junit.Test;\n+\n import static org.junit.Assert.assertEquals;\n \n public class ParserSettingsTest {\n-    @Test\n-    public void caseSupport() {\n+    @Rule public MultiLocaleRule rule = new MultiLocaleRule();\n+\n+    @Test @MultiLocaleTest public void caseSupport() {\n         ParseSettings bothOn = new ParseSettings(true, true);\n         ParseSettings bothOff = new ParseSettings(false, false);\n         ParseSettings tagOn = new ParseSettings(true, false);\n         ParseSettings attrOn = new ParseSettings(false, true);\n \n-        assertEquals(\"FOO\", bothOn.normalizeTag(\"FOO\"));\n-        assertEquals(\"FOO\", bothOn.normalizeAttribute(\"FOO\"));\n+        assertEquals(\"IMG\", bothOn.normalizeTag(\"IMG\"));\n+        assertEquals(\"ID\", bothOn.normalizeAttribute(\"ID\"));\n \n-        assertEquals(\"foo\", bothOff.normalizeTag(\"FOO\"));\n-        assertEquals(\"foo\", bothOff.normalizeAttribute(\"FOO\"));\n+        assertEquals(\"img\", bothOff.normalizeTag(\"IMG\"));\n+        assertEquals(\"id\", bothOff.normalizeAttribute(\"ID\"));\n \n-        assertEquals(\"FOO\", tagOn.normalizeTag(\"FOO\"));\n-        assertEquals(\"foo\", tagOn.normalizeAttribute(\"FOO\"));\n+        assertEquals(\"IMG\", tagOn.normalizeTag(\"IMG\"));\n+        assertEquals(\"id\", tagOn.normalizeAttribute(\"ID\"));\n \n-        assertEquals(\"foo\", attrOn.normalizeTag(\"FOO\"));\n-        assertEquals(\"FOO\", attrOn.normalizeAttribute(\"FOO\"));\n+        assertEquals(\"img\", attrOn.normalizeTag(\"IMG\"));\n+        assertEquals(\"ID\", attrOn.normalizeAttribute(\"ID\"));\n+    }\n \n+    @Test @MultiLocaleTest public void attributeCaseNormalization() throws Exception {\n+        ParseSettings parseSettings = new ParseSettings(false, false);\n+\n+        String normalizedAttribute = parseSettings.normalizeAttribute(\"HIDDEN\");\n+\n+        assertEquals(\"hidden\", normalizedAttribute);\n+    }\n+\n+    @Test @MultiLocaleTest public void attributesCaseNormalization() throws Exception {\n+        ParseSettings parseSettings = new ParseSettings(false, false);\n+        Attributes attributes = new Attributes();\n+        attributes.put(\"ITEM\", \"1\");\n+\n+        Attributes normalizedAttributes = parseSettings.normalizeAttributes(attributes);\n+\n+        assertEquals(\"item\", normalizedAttributes.asList().get(0).getKey());\n     }\n }\n--- a/src/test/java/org/jsoup/parser/TagTest.java\n+++ b/src/test/java/org/jsoup/parser/TagTest.java\n package org.jsoup.parser;\n \n+import org.jsoup.MultiLocaleRule;\n+import org.jsoup.MultiLocaleRule.MultiLocaleTest;\n+import org.junit.Rule;\n import org.junit.Test;\n+\n import static org.junit.Assert.*;\n \n /**\n  Tag tests.\n  @author Jonathan Hedley, jonathan@hedley.net */\n public class TagTest {\n+    @Rule public MultiLocaleRule rule = new MultiLocaleRule();\n \n     @Test public void isCaseSensitive() {\n         Tag p1 = Tag.valueOf(\"P\");\n         assertFalse(p1.equals(p2));\n     }\n \n-    @Test public void canBeInsensitive() {\n-        Tag p1 = Tag.valueOf(\"P\", ParseSettings.htmlDefault);\n-        Tag p2 = Tag.valueOf(\"p\", ParseSettings.htmlDefault);\n-        assertEquals(p1, p2);\n+    @Test @MultiLocaleTest public void canBeInsensitive() {\n+        Tag script1 = Tag.valueOf(\"script\", ParseSettings.htmlDefault);\n+        Tag script2 = Tag.valueOf(\"SCRIPT\", ParseSettings.htmlDefault);\n+        assertSame(script1, script2);\n     }\n \n     @Test public void trims() {\n--- a/src/test/java/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/safety/CleanerTest.java\n package org.jsoup.safety;\n \n+import org.jsoup.MultiLocaleRule;\n+import org.jsoup.MultiLocaleRule.MultiLocaleTest;\n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n import org.jsoup.nodes.Document;\n-import org.jsoup.nodes.Element;\n import org.jsoup.nodes.Entities;\n+import org.junit.Rule;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class CleanerTest {\n+    @Rule public MultiLocaleRule rule = new MultiLocaleRule();\n+\n     @Test public void simpleBehaviourTest() {\n         String h = \"<div><p class=foo><a href='http://evil.com'>Hello <b id=bar>there</b>!</a></div>\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.simpleText());\n         assertEquals(\"<p>Contact me <a rel=\\\"nofollow\\\">here</a></p>\",\n                 TextUtil.stripNewlines(cleanHtml));\n     }\n-    \n+\n+    @Test @MultiLocaleTest public void whitelistedProtocolShouldBeRetained() {\n+        Whitelist whitelist = Whitelist.none()\n+                .addTags(\"a\")\n+                .addAttributes(\"a\", \"href\")\n+                .addProtocols(\"a\", \"href\", \"something\");\n+\n+        String cleanHtml = Jsoup.clean(\"<a href=\\\"SOMETHING://x\\\"></a>\", whitelist);\n+\n+        assertEquals(\"<a href=\\\"SOMETHING://x\\\"></a>\", TextUtil.stripNewlines(cleanHtml));\n+    }\n+\n     @Test public void testDropComments() {\n         String h = \"<p>Hello<!-- no --></p>\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n package org.jsoup.select;\n \n+import org.jsoup.MultiLocaleRule;\n+import org.jsoup.MultiLocaleRule.MultiLocaleTest;\n import org.jsoup.Jsoup;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n+import org.junit.Rule;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n  * @author Jonathan Hedley, jonathan@hedley.net\n  */\n public class SelectorTest {\n+    @Rule public MultiLocaleRule rule = new MultiLocaleRule();\n+\n     @Test public void testByTag() {\n         // should be case insensitive\n         Elements els = Jsoup.parse(\"<div id=1><div id=2><p>Hello</p></div></div><DIV id=3>\").select(\"DIV\");\n         assertEquals(\"Two\", elsFromClass.get(1).text());\n     }\n \n-    @Test public void testByAttribute() {\n-        String h = \"<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM />\" +\n+    @Test @MultiLocaleTest public void testByAttribute() {\n+        String h = \"<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Balim /><div title=SLIM />\" +\n                 \"<div data-name='with spaces'/>\";\n         Document doc = Jsoup.parse(h);\n \n         Elements starts = doc.select(\"[title^=ba]\");\n         assertEquals(2, starts.size());\n         assertEquals(\"Bar\", starts.first().attr(\"title\"));\n-        assertEquals(\"Bam\", starts.last().attr(\"title\"));\n-\n-        Elements ends = doc.select(\"[title$=am]\");\n+        assertEquals(\"Balim\", starts.last().attr(\"title\"));\n+\n+        Elements ends = doc.select(\"[title$=im]\");\n         assertEquals(2, ends.size());\n-        assertEquals(\"Bam\", ends.first().attr(\"title\"));\n-        assertEquals(\"SLAM\", ends.last().attr(\"title\"));\n-\n-        Elements contains = doc.select(\"[title*=a]\");\n-        assertEquals(3, contains.size());\n-        assertEquals(\"Bar\", contains.first().attr(\"title\"));\n-        assertEquals(\"SLAM\", contains.last().attr(\"title\"));\n+        assertEquals(\"Balim\", ends.first().attr(\"title\"));\n+        assertEquals(\"SLIM\", ends.last().attr(\"title\"));\n+\n+        Elements contains = doc.select(\"[title*=i]\");\n+        assertEquals(2, contains.size());\n+        assertEquals(\"Balim\", contains.first().attr(\"title\"));\n+        assertEquals(\"SLIM\", contains.last().attr(\"title\"));\n     }\n \n     @Test public void testNamespacedTag() {\n         assertEquals(\"2\", byContains.last().id());\n     }\n \n-    @Test public void testByAttributeStarting() {\n-        Document doc = Jsoup.parse(\"<div id=1 data-name=jsoup>Hello</div><p data-val=5 id=2>There</p><p id=3>No</p>\");\n+    @Test @MultiLocaleTest public void testByAttributeStarting() {\n+        Document doc = Jsoup.parse(\"<div id=1 ATTRIBUTE data-name=jsoup>Hello</div><p data-val=5 id=2>There</p><p id=3>No</p>\");\n         Elements withData = doc.select(\"[^data-]\");\n         assertEquals(2, withData.size());\n         assertEquals(\"1\", withData.first().id());\n         withData = doc.select(\"p[^data-]\");\n         assertEquals(1, withData.size());\n         assertEquals(\"2\", withData.first().id());\n+\n+        assertEquals(1, doc.select(\"[^attrib]\").size());\n     }\n \n     @Test public void testByAttributeRegex() {\n         assertEquals(\"Two\", divs.first().text());\n     }\n \n-    @Test public void testPseudoContains() {\n-        Document doc = Jsoup.parse(\"<div><p>The Rain.</p> <p class=light>The <i>rain</i>.</p> <p>Rain, the.</p></div>\");\n+    @Test @MultiLocaleTest public void testPseudoContains() {\n+        Document doc = Jsoup.parse(\"<div><p>The Rain.</p> <p class=light>The <i>RAIN</i>.</p> <p>Rain, the.</p></div>\");\n \n         Elements ps1 = doc.select(\"p:contains(Rain)\");\n         assertEquals(3, ps1.size());\n         Elements ps2 = doc.select(\"p:contains(the rain)\");\n         assertEquals(2, ps2.size());\n         assertEquals(\"The Rain.\", ps2.first().html());\n-        assertEquals(\"The <i>rain</i>.\", ps2.last().html());\n+        assertEquals(\"The <i>RAIN</i>.\", ps2.last().html());\n \n         Elements ps3 = doc.select(\"p:contains(the Rain):has(i)\");\n         assertEquals(1, ps3.size());\n \n         Elements ps5 = doc.select(\":contains(rain)\");\n         assertEquals(8, ps5.size()); // html, body, div,...\n+\n+        Elements ps6 = doc.select(\":contains(RAIN)\");\n+        assertEquals(8, ps6.size());\n     }\n \n     @Test public void testPsuedoContainsWithParentheses() {\n         assertEquals(\"2\", ps2.first().id());\n     }\n \n-    @Test public void containsOwn() {\n-        Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b> now</p>\");\n-        Elements ps = doc.select(\"p:containsOwn(Hello now)\");\n+    @Test @MultiLocaleTest public void containsOwn() {\n+        Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b> igor</p>\");\n+        Elements ps = doc.select(\"p:containsOwn(Hello IGOR)\");\n         assertEquals(1, ps.size());\n         assertEquals(\"1\", ps.first().id());\n \n         assertEquals(0, doc.select(\"p:containsOwn(there)\").size());\n+\n+        Document doc2 = Jsoup.parse(\"<p>Hello <b>there</b> IGOR</p>\");\n+        assertEquals(1, doc2.select(\"p:containsOwn(igor)\").size());\n+\n     }\n \n     @Test public void testMatches() {\n         assertEquals(\"Two\", doc.select(\"div[data=\\\"[Another)]]\\\"]\").first().text());\n     }\n \n-    @Test public void containsData() {\n-        String html = \"<p>jsoup</p><script>jsoup</script><span><!-- comments --></span>\";\n+    @Test @MultiLocaleTest public void containsData() {\n+        String html = \"<p>function</p><script>FUNCTION</script><style>item</style><span><!-- comments --></span>\";\n         Document doc = Jsoup.parse(html);\n         Element body = doc.body();\n \n-        Elements dataEls1 = body.select(\":containsData(jsoup)\");\n-        Elements dataEls2 = body.select(\"script:containsData(jsoup)\");\n+        Elements dataEls1 = body.select(\":containsData(function)\");\n+        Elements dataEls2 = body.select(\"script:containsData(function)\");\n         Elements dataEls3 = body.select(\"span:containsData(comments)\");\n-        Elements dataEls4 = body.select(\":containsData(s)\");\n+        Elements dataEls4 = body.select(\":containsData(o)\");\n+        Elements dataEls5 = body.select(\"style:containsData(ITEM)\");\n \n         assertEquals(2, dataEls1.size()); // body and script\n         assertEquals(1, dataEls2.size());\n         assertEquals(dataEls1.last(), dataEls2.first());\n-        assertEquals(\"<script>jsoup</script>\", dataEls2.outerHtml());\n+        assertEquals(\"<script>FUNCTION</script>\", dataEls2.outerHtml());\n         assertEquals(1, dataEls3.size());\n         assertEquals(\"span\", dataEls3.first().tagName());\n         assertEquals(3, dataEls4.size());\n         assertEquals(\"body\", dataEls4.first().tagName());\n         assertEquals(\"script\", dataEls4.get(1).tagName());\n         assertEquals(\"span\", dataEls4.get(2).tagName());\n+        assertEquals(1, dataEls5.size());\n     }\n \n     @Test public void containsWithQuote() {\n--- /dev/null\n+++ b/src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java\n+package org.jsoup.helper;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+/**\n+ * Implementation of ArrayList that watches out for changes to the contents.\n+ */\n+public abstract class ChangeNotifyingArrayList<E> extends ArrayList<E> {\n+    public ChangeNotifyingArrayList(int initialCapacity) {\n+        super(initialCapacity);\n+    }\n+\n+    public abstract void onContentsChanged();\n+\n+    @Override\n+    public E set(int index, E element) {\n+        onContentsChanged();\n+        return super.set(index, element);\n+    }\n+\n+    @Override\n+    public boolean add(E e) {\n+        onContentsChanged();\n+        return super.add(e);\n+    }\n+\n+    @Override\n+    public void add(int index, E element) {\n+        onContentsChanged();\n+        super.add(index, element);\n+    }\n+\n+    @Override\n+    public E remove(int index) {\n+        onContentsChanged();\n+        return super.remove(index);\n+    }\n+\n+    @Override\n+    public boolean remove(Object o) {\n+        onContentsChanged();\n+        return super.remove(o);\n+    }\n+\n+    @Override\n+    public void clear() {\n+        onContentsChanged();\n+        super.clear();\n+    }\n+\n+    @Override\n+    public boolean addAll(Collection<? extends E> c) {\n+        onContentsChanged();\n+        return super.addAll(c);\n+    }\n+\n+    @Override\n+    public boolean addAll(int index, Collection<? extends E> c) {\n+        onContentsChanged();\n+        return super.addAll(index, c);\n+    }\n+\n+    @Override\n+    protected void removeRange(int fromIndex, int toIndex) {\n+        onContentsChanged();\n+        super.removeRange(fromIndex, toIndex);\n+    }\n+\n+    @Override\n+    public boolean removeAll(Collection<?> c) {\n+        onContentsChanged();\n+        return super.removeAll(c);\n+    }\n+\n+    @Override\n+    public boolean retainAll(Collection<?> c) {\n+        onContentsChanged();\n+        return super.retainAll(c);\n+    }\n+\n+}\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n import org.jsoup.nodes.Element;\n import org.jsoup.nodes.XmlDeclaration;\n import org.jsoup.parser.Parser;\n+import org.jsoup.select.Elements;\n \n import java.io.ByteArrayOutputStream;\n import java.io.File;\n             // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n             docData = Charset.forName(defaultCharset).decode(byteData).toString();\n             doc = parser.parseInput(docData, baseUri);\n-            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n+            Elements metaElements = doc.select(\"meta[http-equiv=content-type], meta[charset]\");\n             String foundCharset = null; // if not found, will keep utf-8 as best attempt\n-            if (meta != null) {\n+            for (Element meta : metaElements) {\n                 if (meta.hasAttr(\"http-equiv\")) {\n                     foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                 }\n                 if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                     foundCharset = meta.attr(\"charset\");\n                 }\n-            }\n+                if (foundCharset != null) {\n+                    break;\n+                }\n+            }\n+\n             // look for <?xml encoding='ISO-8859-1'?>\n             if (foundCharset == null && doc.childNodeSize() > 0 && doc.childNode(0) instanceof XmlDeclaration) {\n                 XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0);\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n                     if (status != HTTP_TEMP_REDIR) {\n                         req.method(Method.GET); // always redirect with a get. any data param from original req are dropped.\n                         req.data().clear();\n+                        req.requestBody(null);\n+                        req.removeHeader(CONTENT_TYPE);\n                     }\n \n                     String location = res.header(LOCATION);\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n import org.jsoup.select.Selector;\n \n import java.io.IOException;\n+import java.lang.ref.SoftReference;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n  */\n public class Element extends Node {\n     private Tag tag;\n+    private SoftReference<List<Element>> shadowChildrenRef; // points to child elements shadowed from node children\n \n     private static final Pattern classSplit = Pattern.compile(\"\\\\s+\");\n \n      * @see #childNode(int)\n      */\n     public Element child(int index) {\n-        return children().get(index);\n+        return childElementsList().get(index);\n     }\n \n     /**\n      * <p>\n      * This is effectively a filter on {@link #childNodes()} to get Element nodes.\n      * </p>\n-     * @return child elements. If this element has no children, returns an\n-     * empty list.\n+     * @return child elements. If this element has no children, returns an empty list.\n      * @see #childNodes()\n      */\n     public Elements children() {\n-        // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n-        List<Element> elements = new ArrayList<Element>(childNodes.size());\n-        for (Node node : childNodes) {\n-            if (node instanceof Element)\n-                elements.add((Element) node);\n-        }\n-        return new Elements(elements);\n+        return new Elements(childElementsList());\n+    }\n+\n+    /**\n+     * Maintains a shadow copy of this element's child elements. If the nodelist is changed, this cache is invalidated.\n+     * TODO - think about pulling this out as a helper as there are other shadow lists (like in Attributes) kept around.\n+     * @return a list of child elements\n+     */\n+    private List<Element> childElementsList() {\n+        List<Element> children;\n+        if (shadowChildrenRef == null || (children = shadowChildrenRef.get()) == null) {\n+            children = new ArrayList<Element>(childNodes.size());\n+            for (Node node : childNodes) {\n+                if (node instanceof Element)\n+                    children.add((Element) node);\n+            }\n+            shadowChildrenRef = new SoftReference<List<Element>>(children);\n+        }\n+        return children;\n+    }\n+\n+    /**\n+     * Clears the cached shadow child elements.\n+     */\n+    @Override\n+    void nodelistChanged() {\n+        super.nodelistChanged();\n+        shadowChildrenRef = null;\n     }\n \n     /**\n         addChildren(index, nodeArray);\n         return this;\n     }\n+\n+    /**\n+     * Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the\n+     * right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.\n+     *\n+     * @param index 0-based index to insert children at. Specify {@code 0} to insert at the start, {@code -1} at the\n+     * end\n+     * @param children child nodes to insert\n+     * @return this element, for chaining.\n+     */\n+    public Element insertChildren(int index, Node... children) {\n+        Validate.notNull(children, \"Children collection to be inserted must not be null.\");\n+        int currentSize = childNodeSize();\n+        if (index < 0) index += currentSize +1; // roll around\n+        Validate.isTrue(index >= 0 && index <= currentSize, \"Insert position out of bounds.\");\n+\n+        addChildren(index, children);\n+        return this;\n+    }\n     \n     /**\n      * Create a new element by tag name, and add it as the last child.\n         if (parentNode == null)\n             return new Elements(0);\n \n-        List<Element> elements = parent().children();\n+        List<Element> elements = parent().childElementsList();\n         Elements siblings = new Elements(elements.size() - 1);\n         for (Element el: elements)\n             if (el != this)\n      */\n     public Element nextElementSibling() {\n         if (parentNode == null) return null;\n-        List<Element> siblings = parent().children();\n+        List<Element> siblings = parent().childElementsList();\n         Integer index = indexInList(this, siblings);\n         Validate.notNull(index);\n         if (siblings.size() > index+1)\n      */\n     public Element previousElementSibling() {\n         if (parentNode == null) return null;\n-        List<Element> siblings = parent().children();\n+        List<Element> siblings = parent().childElementsList();\n         Integer index = indexInList(this, siblings);\n         Validate.notNull(index);\n         if (index > 0)\n      */\n     public Element firstElementSibling() {\n         // todo: should firstSibling() exclude this?\n-        List<Element> siblings = parent().children();\n+        List<Element> siblings = parent().childElementsList();\n         return siblings.size() > 1 ? siblings.get(0) : null;\n     }\n     \n      */\n     public Integer elementSiblingIndex() {\n        if (parent() == null) return 0;\n-       return indexInList(this, parent().children()); \n+       return indexInList(this, parent().childElementsList());\n     }\n \n     /**\n      * @return the last sibling that is an element (aka the parent's last element child) \n      */\n     public Element lastElementSibling() {\n-        List<Element> siblings = parent().children();\n+        List<Element> siblings = parent().childElementsList();\n         return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;\n     }\n     \n     }\n \n     /**\n-     * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag.\n+     * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag. Note that data is NOT the\n+     * text of the element. Use {@link #text()} to get the text that would be visible to a user, and {@link #data()}\n+     * for the contents of scripts, comments, CSS styles, etc.\n+     *\n      * @return the data, or empty string if none\n      *\n      * @see #dataNodes()\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n package org.jsoup.nodes;\n \n import org.jsoup.SerializationException;\n+import org.jsoup.helper.ChangeNotifyingArrayList;\n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n import org.jsoup.parser.Parser;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n \n     public Node removeAttr(String attributeKey) {\n         Validate.notNull(attributeKey);\n         attributes.removeIgnoreCase(attributeKey);\n+        return this;\n+    }\n+\n+    /**\n+     * Clear (remove) all of the attributes in this node.\n+     * @return this, for chaining\n+     */\n+    public Node clearAttributes() {\n+        Iterator<Attribute> it = attributes.iterator();\n+        while (it.hasNext()) {\n+            it.next();\n+            it.remove();\n+        }\n         return this;\n     }\n \n         else\n             return el;\n     }\n+\n+    void nodelistChanged() {\n+        // Element overrides this to clear its shadow children elements\n+    }\n     \n     /**\n      * Replace this node in the DOM with the supplied node.\n     }\n \n     protected void setParentNode(Node parentNode) {\n+        Validate.notNull(parentNode);\n         if (this.parentNode != null)\n             this.parentNode.removeChild(this);\n         this.parentNode = parentNode;\n \n     protected void ensureChildNodes() {\n         if (childNodes == EMPTY_NODES) {\n-            childNodes = new ArrayList<Node>(4);\n+            childNodes = new NodeList(4);\n         }\n     }\n \n         clone.siblingIndex = parent == null ? 0 : siblingIndex;\n         clone.attributes = attributes != null ? attributes.clone() : null;\n         clone.baseUri = baseUri;\n-        clone.childNodes = new ArrayList<Node>(childNodes.size());\n+        clone.childNodes = new NodeList(childNodes.size());\n \n         for (Node child: childNodes)\n             clone.childNodes.add(child);\n             }\n         }\n     }\n+\n+    private final class NodeList extends ChangeNotifyingArrayList<Node> {\n+        NodeList(int initialCapacity) {\n+            super(initialCapacity);\n+        }\n+\n+        public void onContentsChanged() {\n+            nodelistChanged();\n+        }\n+    }\n }\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n         }\n \n         boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n-            String name = t.asEndTag().normalName();\n+            String name = t.asEndTag().name(); // matches with case sensitivity if enabled\n             ArrayList<Element> stack = tb.getStack();\n             for (int pos = stack.size() -1; pos >= 0; pos--) {\n                 Element node = stack.get(pos);\n                     if (name.equals(\"html\"))\n                         return tb.process(start, InBody);\n                     else if (name.equals(\"option\")) {\n-                        tb.processEndTag(\"option\");\n+                        if (tb.currentElement().nodeName().equals(\"option\"))\n+                            tb.processEndTag(\"option\");\n                         tb.insert(start);\n                     } else if (name.equals(\"optgroup\")) {\n                         if (tb.currentElement().nodeName().equals(\"option\"))\n--- a/src/test/java/org/jsoup/helper/DataUtilTest.java\n+++ b/src/test/java/org/jsoup/helper/DataUtilTest.java\n     }\n \n     @Test\n+    public void secondMetaElementWithContentTypeContainsCharsetParameter() throws Exception {\n+        ByteBuffer inBuffer = ByteBuffer.wrap((\"<html><head>\" +\n+                \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html\\\">\" +\n+                \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=euc-kr\\\">\" +\n+                \"</head><body>\ud55c\uad6d\uc5b4</body></html>\").getBytes(\"euc-kr\"));\n+\n+        Document doc = DataUtil.parseByteData(inBuffer, null, \"http://example.com\", Parser.htmlParser());\n+\n+        assertEquals(\"\ud55c\uad6d\uc5b4\", doc.body().text());\n+    }\n+\n+    @Test\n+    public void firstMetaElementWithCharsetShouldBeUsedForDecoding() throws Exception {\n+        ByteBuffer inBuffer = ByteBuffer.wrap((\"<html><head>\" +\n+                \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=iso-8859-1\\\">\" +\n+                \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=koi8-u\\\">\" +\n+                \"</head><body>\u00dcbergr\u00f6\u00dfentr\u00e4ger</body></html>\").getBytes(\"iso-8859-1\"));\n+\n+        Document doc = DataUtil.parseByteData(inBuffer, null, \"http://example.com\", Parser.htmlParser());\n+\n+        assertEquals(\"\u00dcbergr\u00f6\u00dfentr\u00e4ger\", doc.body().text());\n+    }\n+\n+    @Test\n     public void supportsBOMinFiles() throws IOException {\n         // test files from http://www.i18nl10n.com/korean/utftest/\n         File in = getFile(\"/bomtests/bom_utf16be.html\");\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n         Document doc = res.parse();\n         assertEquals(200, res.statusCode());\n     }\n+\n+    @Test public void handlesUnicodeInQuery() throws IOException {\n+        Document doc = Jsoup.connect(\"https://www.google.pl/search?q=g\u0105ska\").get();\n+        assertEquals(\"g\u0105ska - Szukaj w Google\", doc.title());\n+\n+        doc = Jsoup.connect(\"http://mov-world.net/archiv/TV/A/%23No.Title/\").get();\n+        assertEquals(\"Index of /archiv/TV/A/%23No.Title\", doc.title());\n+    }\n }\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         }\n \n         try {\n-            div2.insertChildren(0, null);\n+            div2.insertChildren(0, (Collection<? extends Node>) null);\n             fail();\n         } catch (IllegalArgumentException e) {\n         }\n     }\n \n     @Test\n+    public void testLoopedRemoveAttributes() {\n+        String html = \"<a one two three four>Text</a><p foo>Two</p>\";\n+        Document doc = Jsoup.parse(html);\n+        for (Element el : doc.getAllElements()) {\n+            el.clearAttributes();\n+        }\n+\n+        assertEquals(\"<a>Text</a>\\n<p>Two</p>\", doc.body().html());\n+    }\n+\n+    @Test\n     public void testIs() {\n         String html = \"<div><p>One <a class=big>Two</a> Three</p><p>Another</p>\";\n         Document doc = Jsoup.parse(html);\n         assertTrue(a.tagName().equals(\"P\"));\n     }\n \n-    public void testChildrenElements() {\n+    @Test public void testChildrenElements() {\n         String html = \"<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>\";\n         Document doc = Jsoup.parse(html);\n         Element div = doc.select(\"div\").first();\n         assertEquals(0, img.children().size());\n         assertEquals(0, img.childNodes().size());\n     }\n+\n+    @Test public void testShadowElementsAreUpdated() {\n+        String html = \"<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>\";\n+        Document doc = Jsoup.parse(html);\n+        Element div = doc.select(\"div\").first();\n+        Elements els = div.children();\n+        List<Node> nodes = div.childNodes();\n+\n+        assertEquals(2, els.size()); // the two Ps\n+        assertEquals(3, nodes.size()); // the \"Three\" textnode\n+\n+        Element p3 = new Element(\"p\").text(\"P3\");\n+        Element p4 = new Element(\"p\").text(\"P4\");\n+        div.insertChildren(1, p3);\n+        div.insertChildren(3, p4);\n+        Elements els2 = div.children();\n+\n+        // first els should not have changed\n+        assertEquals(2, els.size());\n+        assertEquals(4, els2.size());\n+\n+        assertEquals(\"<p><a>One</a></p>\\n\" +\n+            \"<p>P3</p>\\n\" +\n+            \"<p><a>Two</a></p>\\n\" +\n+            \"<p>P4</p>Three\", div.html());\n+        assertEquals(\"P3\", els2.get(1).text());\n+        assertEquals(\"P4\", els2.get(3).text());\n+\n+        p3.after(\"<span>Another</span\");\n+\n+        Elements els3 = div.children();\n+        assertEquals(5, els3.size());\n+        assertEquals(\"span\", els3.get(2).tagName());\n+        assertEquals(\"Another\", els3.get(2).text());\n+\n+        assertEquals(\"<p><a>One</a></p>\\n\" +\n+            \"<p>P3</p>\\n\" +\n+            \"<span>Another</span>\\n\" +\n+            \"<p><a>Two</a></p>\\n\" +\n+            \"<p>P4</p>Three\", div.html());\n+    }\n+\n+    @Test public void classNamesAndAttributeNameIsCaseInsensitive() {\n+        String html = \"<p Class='SomeText AnotherText'>One</p>\";\n+        Document doc = Jsoup.parse(html);\n+        Element p = doc.select(\"p\").first();\n+        assertEquals(\"SomeText AnotherText\", p.className());\n+        assertTrue(p.classNames().contains(\"SomeText\"));\n+        assertTrue(p.classNames().contains(\"AnotherText\"));\n+        assertTrue(p.hasClass(\"SomeText\"));\n+        assertTrue(p.hasClass(\"sometext\"));\n+        assertTrue(p.hasClass(\"AnotherText\"));\n+        assertTrue(p.hasClass(\"anothertext\"));\n+\n+        Element p1 = doc.select(\".SomeText\").first();\n+        Element p2 = doc.select(\".sometext\").first();\n+        Element p3 = doc.select(\"[class=SomeText AnotherText]\").first();\n+        Element p4 = doc.select(\"[Class=SomeText AnotherText]\").first();\n+        Element p5 = doc.select(\"[class=sometext anothertext]\").first();\n+        Element p6 = doc.select(\"[class=SomeText AnotherText]\").first();\n+        Element p7 = doc.select(\"[class^=sometext]\").first();\n+        Element p8 = doc.select(\"[class$=nothertext]\").first();\n+        Element p9 = doc.select(\"[class^=sometext]\").first();\n+        Element p10 = doc.select(\"[class$=AnotherText]\").first();\n+\n+        assertEquals(\"One\", p1.text());\n+        assertEquals(p1, p2);\n+        assertEquals(p1, p3);\n+        assertEquals(p1, p4);\n+        assertEquals(p1, p5);\n+        assertEquals(p1, p6);\n+        assertEquals(p1, p7);\n+        assertEquals(p1, p8);\n+        assertEquals(p1, p9);\n+        assertEquals(p1, p10);\n+    }\n }\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         assertEquals(2, options.size());\n         assertEquals(\"One\", options.first().text());\n         assertEquals(\"TwoThree\", options.last().text());\n+    }\n+\n+    @Test public void testSelectWithOption() {\n+        Parser parser = Parser.htmlParser();\n+        parser.setTrackErrors(10);\n+        Document document = parser.parseInput(\"<select><option>Option 1</option></select>\", \"http://jsoup.org\");\n+        assertEquals(0, parser.getErrors().size());\n     }\n \n     @Test public void testSpaceAfterTag() {\n         Document doc = Jsoup.parse(\"<p><a \\06=foo>One</a><a/\\06=bar><a foo\\06=bar>Two</a></p>\");\n         assertEquals(\"<p><a>One</a><a></a><a foo=\\\"bar\\\">Two</a></p>\", doc.body().html());\n     }\n+\n+    @Test public void caseSensitiveParseTree() {\n+        String html = \"<r><X>A</X><y>B</y></r>\";\n+        Parser parser = Parser.htmlParser();\n+        parser.settings(ParseSettings.preserveCase);\n+        Document doc = parser.parseInput(html, \"\");\n+        assertEquals(\"<r> <X> A </X> <y> B </y> </r>\", StringUtil.normaliseWhitespace(doc.body().html()));\n+\n+    }\n }", "timestamp": 1497141931, "metainfo": ""}