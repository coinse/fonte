{"sha": "ad4a1bee132ee7d1167ac795407345f2bc6a1db8", "log": "Minor inspections", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n             List<Node> toMove = new ArrayList<>();\n             for (int i = 1; i < elements.size(); i++) {\n                 Node dupe = elements.get(i);\n-                for (Node node : dupe.childNodes)\n-                    toMove.add(node);\n+                toMove.addAll(dupe.childNodes);\n                 dupe.remove();\n             }\n \n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n         clone.baseUri = baseUri;\n         clone.childNodes = new NodeList(childNodes.size());\n \n-        for (Node child: childNodes)\n-            clone.childNodes.add(child);\n+        clone.childNodes.addAll(childNodes);\n \n         return clone;\n     }\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n         }\n \n         runParser();\n-        if (context != null && root != null)\n+        if (context != null)\n             return root.childNodes();\n         else\n             return doc.childNodes();\n--- a/src/main/java/org/jsoup/parser/Tokeniser.java\n+++ b/src/main/java/org/jsoup/parser/Tokeniser.java\n             try {\n                 int base = isHexMode ? 16 : 10;\n                 charval = Integer.valueOf(numRef, base);\n-            } catch (NumberFormatException e) {\n+            } catch (NumberFormatException ignored) {\n             } // skip\n             if (charval == -1 || (charval >= 0xD800 && charval <= 0xDFFF) || charval > 0x10FFFF) {\n                 characterReferenceError(\"character outside of valid range\");", "timestamp": 1497739750, "metainfo": ""}