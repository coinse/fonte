{"sha": "1dec69d8df78aee955205d8ae8bed0dfe86056f8", "log": "Fix for bug 671: namespace is included in W3CDom.fromJsoup", "commit": "\n--- a/src/main/java/org/jsoup/helper/W3CDom.java\n+++ b/src/main/java/org/jsoup/helper/W3CDom.java\n         Validate.notNull(in);\n         DocumentBuilder builder;\n         try {\n+        \t//set the factory to be namespace-aware\n+        \tfactory.setNamespaceAware(true);\n             builder = factory.newDocumentBuilder();\n             Document out = builder.newDocument();\n             convert(in, out);\n             out.setDocumentURI(in.location());\n \n         org.jsoup.nodes.Element rootEl = in.child(0); // skip the #root node\n-        NodeTraversor traversor = new NodeTraversor(new W3CBuilder(out));\n-        traversor.traverse(rootEl);\n+        //check to see if the the root node has a namespace attribute\n+        String namespace = rootEl.attr(\"xmlns\");\n+        NodeTraversor traversor = new NodeTraversor(new W3CBuilder(out, namespace));\n+        if (namespace == null || namespace.equals(\"\")) //maven build fails if using .isEmpty()\n+        \ttraversor.traverse(rootEl);\n+        else\n+        {\n+        \ttraversor.traverse(rootEl, namespace);\n+        }\n     }\n \n     /**\n     protected class W3CBuilder implements NodeVisitor {\n         private final Document doc;\n         private Element dest;\n+        private String namespace = null;\n \n         public W3CBuilder(Document doc) {\n             this.doc = doc;\n+        }\n+        \n+        public W3CBuilder(Document doc, String namespace) {\n+            this.doc = doc;\n+            if (namespace != null && !namespace.equals(\"\")) //maven build fails if using .isEmpty()\n+            \tthis.namespace = namespace;\n         }\n \n         public void head(org.jsoup.nodes.Node source, int depth) {\n             if (source instanceof org.jsoup.nodes.Element) {\n                 org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n-                Element el = doc.createElement(sourceEl.tagName());\n+                Element el = doc.createElementNS(namespace, sourceEl.tagName());\n                 copyAttributes(sourceEl, el);\n                 if (dest == null) { // sets up the root\n                     doc.appendChild(el);\n--- a/src/main/java/org/jsoup/select/NodeTraversor.java\n+++ b/src/main/java/org/jsoup/select/NodeTraversor.java\n     /**\n      * Start a depth-first traverse of the root and all of its descendants.\n      * @param root the root node point to traverse.\n+     * @param namespace the namespace of the document\n      */\n-    public void traverse(Node root) {\n+    public void traverse(Node root, String namespace) {\n         Node node = root;\n         int depth = 0;\n         \n             }\n         }\n     }\n+    \n+    public void traverse (Node root)\n+    {\n+    \ttraverse (root, null);\n+    }\n }\n--- a/src/test/java/org/jsoup/helper/W3CDomTest.java\n+++ b/src/test/java/org/jsoup/helper/W3CDomTest.java\n         String out = w3c.asString(wDoc);\n         assertTrue(out.contains(\"ipod\"));\n     }\n+    \n+    @Test\n+    public void namespacePreservation()\n+    {\n+    \tFile in = ParseTest.getFile(\"/htmltests/cover.xhtml\");\n+    \torg.jsoup.nodes.Document jsoupDoc = null;\n+    \tDocument doc = null;\n+\t\ttry {\n+\t\t\tjsoupDoc = Jsoup.parse(in, \"UTF-8\");\n+\t\t\t//then, convert it back into a WC3 Dom document\n+\t    \torg.jsoup.helper.W3CDom jDom = new org.jsoup.helper.W3CDom();\n+\t    \tdoc = jDom.fromJsoup(jsoupDoc);\n+\t\t} catch (IOException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n+    \tif (doc != null)\n+    \t{\n+    \t\tassertEquals(doc.getChildNodes().item(0).getNamespaceURI(), \"http://www.w3.org/1999/xhtml\");\n+    \t\tassertEquals(doc.getChildNodes().item(0).getLocalName(), \"html\");\n+    \t}\n+    }\n }\n ", "timestamp": 1453929971, "metainfo": ""}