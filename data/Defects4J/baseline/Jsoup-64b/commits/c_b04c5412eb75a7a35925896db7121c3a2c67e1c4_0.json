{"sha": "b04c5412eb75a7a35925896db7121c3a2c67e1c4", "log": "Element child(int) method, attr(key) method", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Comment.java\n+++ b/src/main/java/org/jsoup/nodes/Comment.java\n         attributes.put(COMMENT_KEY, data);\n     }\n \n-    public String getNodeName() {\n+    public String nodeName() {\n         return \"#comment\";\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n         elementChildren = new ArrayList<Element>();\n     }\n \n-    public String getNodeName() {\n+    public String nodeName() {\n         return tag.getName();\n     }\n \n-    public String getTagName() {\n+    public String tagName() {\n         return tag.getName();\n     }\n \n         return tag;\n     }\n \n-    public List<Element> getChildren() {\n+    @Override\n+    public Element attr(String attributeKey, String attributeValue) {\n+        super.attr(attributeKey, attributeValue);\n+        return this;\n+    }\n+\n+    public Element child(int index) {\n+        return elementChildren.get(index);\n+    }\n+\n+    public List<Element> children() {\n         return Collections.unmodifiableList(elementChildren);\n     }\n \n         childNodes.add(child);\n     }\n \n-    public Element getNextElementSibling() {\n+    public Element nextElementSibling() {\n         // TODO: implement\n         return null;\n     }\n \n-    public Element getPreviousElementSibling() {\n+    public Element previousElementSibling() {\n         // TODO: implement\n         return null;\n     }\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n         this(parentNode, new Attributes());\n     }\n \n-    public abstract String getNodeName();\n+    public abstract String nodeName();\n \n-    public List<Node> getChildNodes() {\n+    public String attr(String attributeKey) {\n+        return attributes.get(attributeKey);\n+    }\n+\n+    public Node attr(String attributeKey, String attributeValue) {\n+        attributes.put(attributeKey, attributeValue);\n+        return this;\n+    }\n+\n+    public Node childNode(int index) {\n+        return childNodes.get(index);\n+    }\n+\n+    public List<Node> childNodes() {\n         return Collections.unmodifiableList(childNodes);\n     }\n \n-    public Node getParentNode() {\n+    public Node parentNode() {\n         return parentNode;\n     }\n \n-    public Node getNextSibling() {\n+    public Node nextSibling() {\n         // TODO: implement\n         return null;\n     }\n \n-    public Node getPreviousSibling() {\n+    public Node previousSibling() {\n         // TODO: implement\n         return null;\n     }\n     }\n \n     public String toString() {\n-        return getNodeName();\n+        return nodeName();\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n         attributes.put(TEXT_KEY, text);\n     }\n \n-    public String getNodeName() {\n+    public String nodeName() {\n         return \"#text\";\n     }\n \n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n         Parser parser = new Parser(tokenStream);\n         Document doc = parser.parse();\n         // need a better way to verify these:\n-        Element p = doc.getChildren().get(1).getChildren().get(0);\n-        assertEquals(\"p\", p.getTagName());\n-        assertEquals(\"foo.png\", p.getChildren().get(0).getAttributes().get(\"src\"));\n+        Element p = doc.child(1).child(0);\n+        assertEquals(\"p\", p.tagName());\n+        Element img = p.child(0);\n+        assertEquals(\"foo.png\", img.attr(\"src\"));\n+        assertEquals(\"img\", img.tagName());\n     }\n \n     @Test public void testParsesRoughAttributes() {\n         Parser parser = new Parser(tokenStream);\n         Document doc = parser.parse();\n         // need a better way to verify these:\n-        Element p = doc.getChildren().get(1).getChildren().get(0);\n-        assertEquals(\"p\", p.getTagName());\n-        assertEquals(\"foo > bar\", p.getAttributes().get(\"class\"));\n-        assertEquals(\"foo.png\", p.getChildren().get(0).getAttributes().get(\"src\"));\n+        Element p = doc.child(1).child(0);\n+        assertEquals(\"p\", p.tagName());\n+        assertEquals(\"foo > bar\", p.attr(\"class\"));\n     }\n \n     @Test public void testParsesComments() {\n         TokenStream ts = TokenStream.create(\"<html><head></head><body><!-- <table><tr><td></table> --><p>Hello</p></body></html>\");\n         Document doc = new Parser(ts).parse();\n-        Element body = doc.getChildren().get(1);\n-        Comment comment = (Comment) body.getChildNodes().get(0);\n+        Element body = doc.child(1);\n+        Comment comment = (Comment) body.childNode(0);\n         assertEquals(\"<table><tr><td></table>\", comment.getData());\n-        Element p = body.getChildren().get(0);\n-        TextNode text = (TextNode) p.getChildNodes().get(0);\n+        Element p = body.child(0);\n+        TextNode text = (TextNode) p.childNode(0);\n         assertEquals(\"Hello\", text.getWholeText());\n     }\n }", "timestamp": 1309605100, "metainfo": ""}