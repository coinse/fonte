{"sha": "3c81151c7b4dd4739b11f0b6aa5eff81c07fd684", "log": "Don't create Integer objects or Iterators  Getting rid of the autoboxing effectively doubles the speed of the N-th selector benchmark (450 to 850 ops/s). And removing the Iterator lowers a bunch of GC.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     private List<Element> childElementsList() {\n         List<Element> children;\n         if (shadowChildrenRef == null || (children = shadowChildrenRef.get()) == null) {\n-            children = new ArrayList<Element>(childNodes.size());\n-            for (Node node : childNodes) {\n+            final int size = childNodes.size();\n+            children = new ArrayList<Element>(size);\n+            for (int i = 0; i < size; i++) {\n+                final Node node = childNodes.get(i);\n                 if (node instanceof Element)\n                     children.add((Element) node);\n             }\n      * sibling, returns 0.\n      * @return position in element sibling list\n      */\n-    public Integer elementSiblingIndex() {\n+    public int elementSiblingIndex() {\n        if (parent() == null) return 0;\n        return indexInList(this, parent().childElementsList());\n     }\n         List<Element> siblings = parent().childElementsList();\n         return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;\n     }\n-    \n-    private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n-        Validate.notNull(search);\n-        Validate.notNull(elements);\n-\n+\n+    private static <E extends Element> int indexInList(Element search, List<E> elements) {\n         for (int i = 0; i < elements.size(); i++) {\n-            E element = elements.get(i);\n-            if (element == search)\n+            if (elements.get(i) == search)\n                 return i;\n         }\n-        return null;\n+        return 0;\n     }\n \n     // DOM type methods", "timestamp": 1497203182, "metainfo": ""}