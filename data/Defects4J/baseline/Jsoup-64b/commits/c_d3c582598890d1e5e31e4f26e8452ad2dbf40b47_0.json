{"sha": "d3c582598890d1e5e31e4f26e8452ad2dbf40b47", "log": "optimize Element#hasClass this method is perf sensitive (CPU and memory allocations) This replace the regexp split with a custom implementation that do not allocate unneeded memory. With this patch a simple test calling Element#select in a loop for several selector went from 3Gb allocated to 10Mb. GC times were reduced. Fixes #752", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     */\n     public boolean hasClass(String className) {\n         String classAttr = attributes.get(\"class\");\n-        if (classAttr.equals(\"\") || classAttr.length() < className.length())\n+        final int end = classAttr.length();\n+        final int classNameLength = className.length();\n+\n+        // class attribute is empty or the requested class name is 'too' long\n+        if (end == 0 || end < classNameLength) {\n             return false;\n-\n-        final String[] classes = classSplit.split(classAttr);\n-        for (String name : classes) {\n-            if (className.equalsIgnoreCase(name))\n-                return true;\n-        }\n-\n+        }\n+        \n+        // if both length are equals, just compare the className with the attribute\n+        if(end == classNameLength) {\n+            return className.equalsIgnoreCase(classAttr);\n+        }\n+\n+        // manually split the different class names in the class attibute\n+        // DO NOT allocate the string but use regionMatches and length comparaison to make the check\n+        boolean inClass = false;\n+        int start = 0;\n+        for (int i = 0; i < end; i ++) {\n+            if (Character.isWhitespace(classAttr.charAt(i))) {\n+                if(inClass) {\n+                    // the white space ends a class name\n+                    // compare it with the requested one\n+                    if(i-start == classNameLength && classAttr.regionMatches(true, start, className, 0, classNameLength)) {\n+                        return true;\n+                    }\n+                    inClass = false;\n+                }\n+            }\n+            else {\n+                if(!inClass) {\n+                    // we're in a class name : keep the start of the substring\n+                    inClass = true;\n+                    start = i;\n+                }\n+            }\n+        }\n+        \n+        // the attribute may not end by a white space\n+        // check the current class name\n+        if(inClass && end-start == classNameLength) {\n+            return classAttr.regionMatches(true, start, className, 0, classNameLength);  \n+        }\n+        \n         return false;\n     }\n \n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(0, classes.size());\n         assertFalse(doc.hasClass(\"mellow\"));\n     }\n-\n+    \n+    @Test public void testHasClassDomMethods() {\n+        Tag tag = Tag.valueOf(\"a\");\n+        Attributes attribs = new Attributes();\n+        Element el = new Element(tag, \"\", attribs);\n+        \n+        attribs.put(\"class\", \"toto\");\n+        boolean hasClass = el.hasClass(\"toto\");\n+        assertTrue(hasClass);\n+        \n+        attribs.put(\"class\", \" toto\");\n+        hasClass = el.hasClass(\"toto\");\n+        assertTrue(hasClass);\n+        \n+        attribs.put(\"class\", \"toto \");\n+        hasClass = el.hasClass(\"toto\");\n+        assertTrue(hasClass);\n+        \n+        attribs.put(\"class\", \"\\ttoto \");\n+        hasClass = el.hasClass(\"toto\");\n+        assertTrue(hasClass);\n+        \n+        attribs.put(\"class\", \"  toto \");\n+        hasClass = el.hasClass(\"toto\");\n+        assertTrue(hasClass);\n+        \n+        attribs.put(\"class\", \"ab\");\n+        hasClass = el.hasClass(\"toto\");\n+        assertFalse(hasClass);\n+        \n+        attribs.put(\"class\", \"     \");\n+        hasClass = el.hasClass(\"toto\");\n+        assertFalse(hasClass);\n+        \n+        attribs.put(\"class\", \"tototo\");\n+        hasClass = el.hasClass(\"toto\");\n+        assertFalse(hasClass);\n+        \n+        attribs.put(\"class\", \"raulpismuth  \");\n+        hasClass = el.hasClass(\"raulpismuth\");\n+        assertTrue(hasClass);\n+        \n+        attribs.put(\"class\", \" abcd  raulpismuth efgh \");\n+        hasClass = el.hasClass(\"raulpismuth\");\n+        assertTrue(hasClass);\n+        \n+        attribs.put(\"class\", \" abcd efgh raulpismuth\");\n+        hasClass = el.hasClass(\"raulpismuth\");\n+        assertTrue(hasClass);\n+        \n+        attribs.put(\"class\", \" abcd efgh raulpismuth \");\n+        hasClass = el.hasClass(\"raulpismuth\");\n+        assertTrue(hasClass);\n+    }\n+\n+    \n     @Test public void testClassUpdates() {\n         Document doc = Jsoup.parse(\"<div class='mellow yellow'></div>\");\n         Element div = doc.select(\"div\").first();", "timestamp": 1471965076, "metainfo": ""}