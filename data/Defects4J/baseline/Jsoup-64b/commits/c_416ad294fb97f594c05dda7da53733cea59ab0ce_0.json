{"sha": "416ad294fb97f594c05dda7da53733cea59ab0ce", "log": "Case-insensitive attribute setter (#903)  * Add failing test for updating attribute using differently-cased key\r \r * Do case-insensitive key comparison when replacing attributes", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n      * @return the first matching attribute value if set; or empty string if not set.\n      */\n     public String getIgnoreCase(String key) {\n+        Attribute attr = getAttributeIgnoreCase(key);\n+        return attr != null ? attr.getValue() : \"\";\n+    }\n+\n+    private Attribute getAttributeIgnoreCase(String key) {\n         Validate.notEmpty(key);\n         if (attributes == null)\n-            return \"\";\n+            return null;\n \n         Attribute attr = attributes.get(key);\n         if (attr != null)\n-            return attr.getValue();\n+            return attr;\n \n         for (String attrKey : attributes.keySet()) {\n             if (attrKey.equalsIgnoreCase(key))\n-                return attributes.get(attrKey).getValue();\n-        }\n-        return \"\";\n+                return attributes.get(attrKey);\n+        }\n+        return null;\n     }\n \n     /**\n     public void put(String key, String value) {\n         Attribute attr = new Attribute(key, value);\n         put(attr);\n+    }\n+\n+    void putIgnoreCase(String key, String value) {\n+        Attribute oldAttr = getAttributeIgnoreCase(key);\n+        if (oldAttr != null && !oldAttr.getKey().equals(key)) {\n+            attributes.remove(oldAttr.getKey());\n+        }\n+\n+        put(key, value);\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n     }\n \n     /**\n-     * Set an attribute (key=value). If the attribute already exists, it is replaced.\n+     * Set an attribute (key=value). If the attribute already exists, it is replaced. The attribute key comparison is\n+     * <b>case insensitive</b>.\n      * @param attributeKey The attribute key.\n      * @param attributeValue The attribute value.\n      * @return this (for chaining)\n      */\n     public Node attr(String attributeKey, String attributeValue) {\n-        attributes.put(attributeKey, attributeValue);\n+        attributes.putIgnoreCase(attributeKey, attributeValue);\n         return this;\n     }\n \n--- a/src/test/java/org/jsoup/nodes/NodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/NodeTest.java\n         assertTrue(el.text().equals(\"None\"));\n         assertTrue(elClone.text().equals(\"Text\"));\n     }\n+\n+    @Test public void changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive() {\n+        Document document = Jsoup.parse(\"<INPUT id=\\\"foo\\\" NAME=\\\"foo\\\" VALUE=\\\"\\\">\");\n+        Element inputElement = document.select(\"#foo\").first();\n+\n+        inputElement.attr(\"value\",\"bar\");\n+\n+        assertEquals(singletonAttributes(\"value\", \"bar\"), getAttributesCaseInsensitive(inputElement, \"value\"));\n+    }\n+\n+    private Attributes getAttributesCaseInsensitive(Element element, String attributeName) {\n+        Attributes matches = new Attributes();\n+        for (Attribute attribute : element.attributes()) {\n+            if (attribute.getKey().equalsIgnoreCase(attributeName)) {\n+                matches.put(attribute);\n+            }\n+        }\n+        return matches;\n+    }\n+\n+    private Attributes singletonAttributes(String key, String value) {\n+        Attributes attributes = new Attributes();\n+        attributes.put(key, value);\n+        return attributes;\n+    }\n }", "timestamp": 1498373933, "metainfo": ""}