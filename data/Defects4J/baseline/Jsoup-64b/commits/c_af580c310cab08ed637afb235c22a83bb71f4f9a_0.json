{"sha": "af580c310cab08ed637afb235c22a83bb71f4f9a", "log": "Added support for [^attributePrefix] selector query. Useful for finding elements with HTML5 datasets: [^data]", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     /**\n      * Find elements that have a named attribute set. Case insensitive.\n      *\n-     * @param key name of the attribute\n+     * @param key name of the attribute, e.g. {@code href}\n      * @return elements that have this attribute, empty if none\n      */\n     public Elements getElementsByAttribute(String key) {\n         key = key.trim().toLowerCase();\n \n         return Collector.collect(new Evaluator.Attribute(key), this);\n+    }\n+\n+    /**\n+     * Find elements that have an attribute name starting with the supplied prefix. Use {@code data-} to find elements\n+     * that have HTML5 datasets.\n+     * @param keyPrefix name prefix of the attribute e.g. {@code data-}\n+     * @return elements that have attribute names that start with with the prefix, empty if none.\n+     */\n+    public Elements getElementsByAttributeStarting(String keyPrefix) {\n+        Validate.notEmpty(keyPrefix);\n+        keyPrefix = keyPrefix.trim().toLowerCase();\n+\n+        return Collector.collect(new Evaluator.AttributeStarting(keyPrefix), this);\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/nodes/Evaluator.java\n+++ b/src/main/java/org/jsoup/nodes/Evaluator.java\n \n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+import java.util.List;\n \n import org.apache.commons.lang.Validate;\n \n         }\n     }\n \n+    static final class AttributeStarting extends Evaluator {\n+        private String keyPrefix;\n+\n+        AttributeStarting (String keyPrefix) {\n+            this.keyPrefix = keyPrefix;\n+        }\n+\n+        public boolean matches(Element element) {\n+            List<org.jsoup.nodes.Attribute> values = element.attributes.asList();\n+            for (org.jsoup.nodes.Attribute attribute : values) {\n+                if (attribute.getKey().startsWith(keyPrefix))\n+                    return true;\n+            }\n+            return false;\n+        }\n+    }\n+\n     static final class AttributeWithValue extends AttributeKeyPair {\n         AttributeWithValue(String key, String value) {\n             super(key, value);\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n  <tr><td><code>E#id</code></td><td>an Element with attribute ID of \"id\"</td><td><code>div#wrap</code>, <code>#logo</code></td></tr>\n  <tr><td><code>E.class</code></td><td>an Element with a class name of \"class\"</td><td><code>div.left</code>, <code>.result</code></td></tr>\n  <tr><td><code>E[attr]</code></td><td>an Element with the attribute named \"attr\"</td><td><code>a[href]</code>, <code>[title]</code></td></tr>\n+ <tr><td><code>E[^attrPrefix]</code></td><td>an Element with an attribute name starting with \"attrPrefix\". Use to find elements with HTML5 datasets</td><td><code>[^data-]</code>, <code>div[^data-]</code></td></tr>\n  <tr><td><code>E[attr=val]</code></td><td>an Element with the attribute named \"attr\" and value equal to \"val\"</td><td><code>img[width=500]</code>, <code>a[rel=nofollow]</code></td></tr>\n- <tr><td><code>E[attr^=val]</code></td><td>an Element with the attribute named \"attr\" and value starting with \"val\"</td><td><code>a[href^=http:]</code></code></td></tr>\n- <tr><td><code>E[attr$=val]</code></td><td>an Element with the attribute named \"attr\" and value ending with \"val\"</td><td><code>img[src$=.png]</code></td></tr>\n- <tr><td><code>E[attr*=val]</code></td><td>an Element with the attribute named \"attr\" and value containing \"val\"</td><td><code>a[href*=/search/]</code></td></tr>\n+ <tr><td><code>E[attr^=valPrefix]</code></td><td>an Element with the attribute named \"attr\" and value starting with \"valPrefix\"</td><td><code>a[href^=http:]</code></code></td></tr>\n+ <tr><td><code>E[attr$=valSuffix]</code></td><td>an Element with the attribute named \"attr\" and value ending with \"valSuffix\"</td><td><code>img[src$=.png]</code></td></tr>\n+ <tr><td><code>E[attr*=valContaining]</code></td><td>an Element with the attribute named \"attr\" and value containing \"valContaining\"</td><td><code>a[href*=/search/]</code></td></tr>\n  <tr><td><code>E[attr~=<em>regex</em>]</code></td><td>an Element with the attribute named \"attr\" and value matching the regular expression</td><td><code>img[src~=(?i)\\\\.(png|jpe?g)]</code></td></tr>\n  <tr><td></td><td>The above may be combined in any order</td><td><code>div.header[title]</code></td></tr>\n  <tr><td><td colspan=\"3\"><h3>Combinators</h3></td></tr>\n         Validate.notEmpty(key);\n \n         if (tq.matchChomp(\"]\")) {\n-            return root.getElementsByAttribute(key);\n+            return key.startsWith(\"^\") ? root.getElementsByAttributeStarting(key.substring(1)) : root.getElementsByAttribute(key);\n         } else {\n             if (tq.matchChomp(\"=\"))\n                 return root.getElementsByAttributeValue(key, tq.chompTo(\"]\"));\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(3, contains.size());\n         assertEquals(\"Bar\", contains.first().attr(\"title\"));\n         assertEquals(\"SLAM\", contains.last().attr(\"title\"));\n+    }\n+\n+    @Test public void testByAttributeStarting() {\n+        Document doc = Jsoup.parse(\"<div id=1 data-name=jsoup>Hello</div><p data-val=5 id=2>There</p><p id=3>No</p>\");\n+        Elements withData = doc.select(\"[^data-]\");\n+        assertEquals(2, withData.size());\n+        assertEquals(\"1\", withData.first().id());\n+        assertEquals(\"2\", withData.last().id());\n+\n+        withData = doc.select(\"p[^data-]\");\n+        assertEquals(1, withData.size());\n+        assertEquals(\"2\", withData.first().id());\n     }\n     \n     @Test public void testByAttributeRegex() {", "timestamp": 1309605115, "metainfo": ""}