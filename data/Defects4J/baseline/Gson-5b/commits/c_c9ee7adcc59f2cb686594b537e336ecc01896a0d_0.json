{"sha": "c9ee7adcc59f2cb686594b537e336ecc01896a0d", "log": "Start using JsonNull.INSTANCE everywhere and remove creation method.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonNull.java\n+++ b/gson/src/main/java/com/google/gson/JsonNull.java\n public final class JsonNull extends JsonElement {\n   /**\n    * singleton for JsonNull\n-   * \n+   *\n    * @since 1.8\n    */\n   public static final JsonNull INSTANCE = new JsonNull();\n   protected void toString(Appendable sb, Escaper escaper) throws IOException {\n     sb.append(\"null\");\n   }\n-  \n+\n   /**\n    * All instances of JsonNull have the same hash code since they are indistinguishable\n    */\n   public int hashCode() {\n     return JsonNull.class.hashCode();\n   }\n-  \n+\n   /**\n    * All instances of JsonNull are the same\n    */\n   public boolean equals(Object other) {\n     return this == other || other instanceof JsonNull;\n   }\n-  \n-  /**\n-   * Creation method used to return an instance of a {@link JsonNull}.  To reduce the memory\n-   * footprint, a single object has been created for this class; therefore the same instance is\n-   * being returned for each invocation of this method. This method is kept private since we \n-   * prefer the users to use {@link JsonNull#JsonNull()} which is similar to how other JsonElements\n-   * are created. Note that all instances of JsonNull return true for {@link #equals(Object)} \n-   * when compared to each other.\n-   *\n-   * @return a instance of a {@link JsonNull}\n-   */\n-  static JsonNull createJsonNull() {\n-    return INSTANCE;\n-  }\n }\n--- a/gson/src/test/java/com/google/gson/JsonNullTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonNullTest.java\n package com.google.gson;\n \n import com.google.gson.common.MoreAsserts;\n+\n import junit.framework.TestCase;\n \n /**\n   public void testEqualsAndHashcode() {\n     MoreAsserts.assertEqualsAndHashCode(new JsonNull(), new JsonNull());\n     MoreAsserts.assertEqualsAndHashCode(new JsonNull(), JsonNull.INSTANCE);\n-    MoreAsserts.assertEqualsAndHashCode(new JsonNull(), JsonNull.createJsonNull());\n-    MoreAsserts.assertEqualsAndHashCode(JsonNull.createJsonNull(), JsonNull.createJsonNull());\n+    MoreAsserts.assertEqualsAndHashCode(JsonNull.INSTANCE, JsonNull.INSTANCE);\n   }\n }\n--- a/gson/src/test/java/com/google/gson/JsonObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonObjectTest.java\n package com.google.gson;\n \n import com.google.gson.common.MoreAsserts;\n+\n import junit.framework.TestCase;\n \n /**\n   public void testAddingNullOrEmptyPropertyName() throws Exception {\n     JsonObject jsonObj = new JsonObject();\n     try {\n-      jsonObj.add(null, JsonNull.createJsonNull());\n+      jsonObj.add(null, JsonNull.INSTANCE);\n       fail(\"Should not allow null property names.\");\n     } catch (NullPointerException expected) { }\n \n-    jsonObj.add(\"\", JsonNull.createJsonNull());\n-    jsonObj.add(\"   \\t\", JsonNull.createJsonNull());\n+    jsonObj.add(\"\", JsonNull.INSTANCE);\n+    jsonObj.add(\"   \\t\", JsonNull.INSTANCE);\n   }\n \n   public void testAddingBooleanProperties() throws Exception {", "timestamp": 1307127748, "metainfo": ""}