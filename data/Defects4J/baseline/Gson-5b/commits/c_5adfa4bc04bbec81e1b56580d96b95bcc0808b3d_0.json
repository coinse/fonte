{"sha": "5adfa4bc04bbec81e1b56580d96b95bcc0808b3d", "log": "Defined an interface RestResource that all resources need to extend from. Defined an Id class for a resource. Changed a rest body spec to take a type instead of a class. This allows parameterized resource types. Defined a repository interface with an in-memory implementation for server-side storage of rest resource instances.", "commit": "\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/RestClient.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/RestClient.java\n import com.google.gson.webservice.definition.WebServiceSystemException;\n import com.google.gson.webservice.definition.rest.RestCallSpec;\n import com.google.gson.webservice.definition.rest.RestRequest;\n+import com.google.gson.webservice.definition.rest.RestResource;\n import com.google.gson.webservice.definition.rest.RestResponse;\n \n /**\n     this.logLevel = logLevel;\n   }\n   \n-  private URL getWebServiceUrl(RestCallSpec<?> callSpec) {\n+  private URL getWebServiceUrl(RestCallSpec callSpec) {\n     String url = config.getServiceBaseUrl() + callSpec.getPath().get();\n     try {\n       return new URL(url);\n     }\n   }\n   \n-  public <R> RestResponse<R> getResponse(RestCallSpec<R> callSpec, RestRequest<R> request) {\n+  public <R extends RestResource<R>> RestResponse<R> getResponse(\n+      RestCallSpec callSpec, RestRequest<R> request) {\n     Gson gson = new GsonBuilder().create();\n     return getResponse(callSpec, request, gson);\n   }\n \n-  public <R> RestResponse<R> getResponse(\n-      RestCallSpec<R> callSpec, RestRequest<R> request, Gson gson) {\n+  public <R extends RestResource<R>> RestResponse<R> getResponse(\n+      RestCallSpec callSpec, RestRequest<R> request, Gson gson) {\n     HttpURLConnection conn = null;\n     try {\n       URL webServiceUrl = getWebServiceUrl(callSpec);\n    * Use this method if you want to mange the HTTP Connection yourself. This is useful when you\n    * want to use HTTP pipelining.\n    */\n-  public <R> RestResponse<R> getResponse(\n-      RestCallSpec<R> callSpec, RestRequest<R> request, Gson gson, HttpURLConnection conn) {\n+  public <R extends RestResource<R>> RestResponse<R> getResponse(\n+      RestCallSpec callSpec, RestRequest<R> request, Gson gson, HttpURLConnection conn) {\n     try {\n       if (logger != null) {\n         URL webServiceUrl = getWebServiceUrl(callSpec);\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/RestRequestSender.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/RestRequestSender.java\n import com.google.gson.webservice.definition.HeaderMapSpec;\n import com.google.gson.webservice.definition.WebServiceSystemException;\n import com.google.gson.webservice.definition.rest.RestRequest;\n+import com.google.gson.webservice.definition.rest.RestResource;\n \n /**\n  * Class to send Web service requests on a {@link HttpURLConnection}.\n     this.logLevel = logLevel;\n   }\n   \n-  public <R> void send(HttpURLConnection conn, RestRequest<R> request) {    \n+  public <R extends RestResource<R>> void send(HttpURLConnection conn, RestRequest<R> request) {    \n     try {\n       conn.setRequestMethod(request.getHttpMethod().toString());\n       setHeader(conn, \"Content-Type\", request.getContentType(), true);\n       // Android Java VM ignore Content-Length if setDoOutput is not set\n       conn.setDoOutput(true);\n       if (requestBody != null) {\n-        requestBodyContents = gson.toJson(requestBody);\n+        requestBodyContents = gson.toJson(requestBody, request.getSpec().getResourceType());\n       }\n       String contentLength = String.valueOf(requestBodyContents.length());\n       setHeader(conn, \"Content-Length\", contentLength, true);\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/RestResponseReceiver.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/RestResponseReceiver.java\n import com.google.gson.webservice.definition.HeaderMap;\n import com.google.gson.webservice.definition.HeaderMapSpec;\n import com.google.gson.webservice.definition.WebServiceSystemException;\n+import com.google.gson.webservice.definition.rest.RestResource;\n import com.google.gson.webservice.definition.rest.RestResponse;\n import com.google.gson.webservice.definition.rest.RestResponseSpec;\n \n  * \n  * @author inder\n  */\n-public final class RestResponseReceiver<R> {\n+public final class RestResponseReceiver<R extends RestResource<R>> {\n   private final Gson gson;\n-  private final RestResponseSpec<R> spec;\n+  private final RestResponseSpec spec;\n   private final Logger logger;\n   private final Level logLevel;\n \n-  public RestResponseReceiver(Gson gson, RestResponseSpec<R> spec) {\n+  public RestResponseReceiver(Gson gson, RestResponseSpec spec) {\n     this(gson, spec, null);\n   }\n-  public RestResponseReceiver(Gson gson, RestResponseSpec<R> spec, Level logLevel) {\n+  public RestResponseReceiver(Gson gson, RestResponseSpec spec, Level logLevel) {\n     this.gson = gson;\n     this.spec = spec;\n     this.logger = logLevel == null ? null : Logger.getLogger(RestResponseReceiver.class.getName());\n   public RestResponse<R> receive(HttpURLConnection conn) {\n     try {\n       HeaderMapSpec paramSpec = spec.getHeadersSpec();\n-      Class<R> bodySpec = spec.getResourceClass();\n+      Type bodyType = spec.getResourceType();\n       // read response\n       HeaderMap responseParams = readResponseHeaders(conn, paramSpec);\n-      R responseBody = readResponseBody(conn, bodySpec);\n-      return new RestResponse<R>(responseParams, responseBody);\n+      R responseBody = readResponseBody(conn, bodyType);\n+      return new RestResponse<R>(responseParams, responseBody, bodyType);\n     } catch (IOException e) {\n       throw new WebServiceSystemException(e);\n     }\n     return paramsBuilder.build();\n   }\n \n-  private R readResponseBody(HttpURLConnection conn, Class<R> resourceClass) throws IOException {\n+  @SuppressWarnings(\"unchecked\")\n+  private R readResponseBody(\n+      HttpURLConnection conn, Type resourceType) throws IOException {\n     String connContentType = conn.getContentType();\n     Preconditions.checkArgument(connContentType.contains(ContentBodySpec.JSON_CONTENT_TYPE), conn);\n     Reader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n-    R body = gson.fromJson(reader, resourceClass);\n+    R body = (R) gson.fromJson(reader, resourceType);\n     return body;\n   }\n }\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/HasId.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.rest;\n+\n+/**\n+ * An interface to indicate that an object has an Id\n+ *\n+ * @author inder\n+ *\n+ * @param <T> type of object\n+ */\n+public interface HasId<R> {\n+  public Id<R> getId();\n+  public void setId(Id<R> id);\n+  public boolean hasId();\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/Id.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.rest;\n+\n+import java.lang.reflect.Type;\n+\n+/**\n+ * An id for a rest resource\n+ *\n+ * @author inder\n+ *\n+ * @param <R> type variable for the rest resource\n+ */\n+public final class Id<R> {\n+  private final long value;\n+  private final Type typeOfId;\n+\n+  private Id(long value, Type typeOfId) {\n+    this.value = value;\n+    this.typeOfId = typeOfId;\n+  }\n+\n+  public long getValue() {\n+    return value;\n+  }\n+\n+  public Type getTypeOfId() {\n+    return typeOfId;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    final int prime = 31;\n+    int result = 1;\n+    result = prime * result + ((typeOfId == null) ? 0 : typeOfId.hashCode());\n+    result = prime * result + (int)(value ^ (value >>> 32));\n+    return result;\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj) return true;\n+    if (obj == null) return false;\n+    if (getClass() != obj.getClass()) return false;\n+    @SuppressWarnings(\"unchecked\")\n+    Id<R> other = (Id<R>)obj;\n+    if (typeOfId == null) {\n+      if (other.typeOfId != null) return false;\n+    } else if (!typeOfId.equals(other.typeOfId)) return false;\n+    if (value != other.value) return false;\n+    return true;\n+  }\n+\n+  public static <RS> Id<RS> get(long value, Type typeOfId) {\n+    return new Id<RS>(value, typeOfId);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"{value:%s,type:%s}\", value, typeOfId);\n+  }\n+}\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/rest/ResourceMap.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/ResourceMap.java\n public final class ResourceMap {\n \n   public static final class Builder {\n-    private final Map<CallPath, RestCallSpec<?>> resources =\n-      new HashMap<CallPath, RestCallSpec<?>>();\n+    private final Map<CallPath, RestCallSpec> resources =\n+      new HashMap<CallPath, RestCallSpec>();\n     \n-    public <R> Builder set(CallPath callPath, RestCallSpec<R> spec) {\n+    public Builder set(CallPath callPath, RestCallSpec spec) {\n+      Preconditions.checkArgument(resources.get(callPath) == null);\n       resources.put(callPath, spec);\n       return this;\n     }\n     }\n   }\n \n-  private final Map<CallPath, RestCallSpec<?>> resources;\n+  private final Map<CallPath, RestCallSpec> resources;\n \n-  public ResourceMap(Map<CallPath, RestCallSpec<?>> resources) {\n+  public ResourceMap(Map<CallPath, RestCallSpec> resources) {\n     this.resources = resources;\n   }\n \n-  public <T> RestCallSpec<T> get(CallPath callPath) {\n-    @SuppressWarnings(\"unchecked\")\n-    RestCallSpec<T> restCallSpec = (RestCallSpec<T>)resources.get(callPath);\n-    return restCallSpec;\n+  public RestCallSpec get(CallPath callPath) {\n+    return (RestCallSpec)resources.get(callPath);\n   }\n }\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestCall.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestCall.java\n  * \n  * @author inder\n  */\n-public final class RestCall<R> {\n+public final class RestCall<R extends RestResource<R>> {\n   \n-  private final RestCallSpec<R> callSpec;\n+  private final RestCallSpec callSpec;\n   private final RestRequest<R> request;\n   private final RestResponse<R> response;\n   \n-  public RestCall(RestCallSpec<R> callSpec, RestRequest<R> request, RestResponse<R> response) {\n+  public RestCall(RestCallSpec callSpec, RestRequest<R> request, RestResponse<R> response) {\n     this.callSpec = callSpec;\n     this.request = request;\n     this.response = response;\n   }\n \n-  public RestCallSpec<R> getSpec() {\n+  public RestCallSpec getSpec() {\n     return callSpec;\n   }\n   \n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestCallSpec.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestCallSpec.java\n  */\n package com.google.gson.webservice.definition.rest;\n \n+import java.lang.reflect.Type;\n import java.util.Arrays;\n import java.util.LinkedHashSet;\n import java.util.Set;\n  *\n  * @author inder\n  */\n-public final class RestCallSpec<R> {\n-  public static class Builder<R> {\n+public final class RestCallSpec {\n+  public static class Builder {\n     private final CallPath callPath;\n     private final Set<HttpMethod> supportedHttpMethods = new LinkedHashSet<HttpMethod>();\n     private final HeaderMapSpec.Builder reqParamsSpecBuilder = new HeaderMapSpec.Builder();\n     private final HeaderMapSpec.Builder resParamsSpecBuilder = new HeaderMapSpec.Builder();\n-    private final Class<R> resourceClass;\n+    private final Type resourceType;\n     \n-    public Builder(CallPath callPath, Class<R> resourceClass) {\n+    public Builder(CallPath callPath, Type resourceType) {\n       this.callPath = callPath;\n       supportedHttpMethods.addAll(HttpMethod.ALL_METHODS);\n-      this.resourceClass = resourceClass;\n+      this.resourceType = resourceType;\n     }\n \n-    public Builder<R> disableHttpMethod(HttpMethod httpMethod) {\n+    public Builder disableHttpMethod(HttpMethod httpMethod) {\n       supportedHttpMethods.remove(httpMethod);\n       return this;\n     }\n     \n-    public <T> Builder<R> addRequestParam(TypedKey<T> param) {\n+    public <T> Builder addRequestParam(TypedKey<T> param) {\n       reqParamsSpecBuilder.put(param.getName(), param.getClassOfT());\n       return this;\n     }\n \n-    public <T> Builder<R> addResponseParam(TypedKey<T> param) {\n+    public <T> Builder addResponseParam(TypedKey<T> param) {\n       resParamsSpecBuilder.put(param.getName(), param.getClassOfT());\n       return this;\n     }\n \n-    public RestCallSpec<R> build() {\n+    public RestCallSpec build() {\n       if (supportedHttpMethods.isEmpty()) {\n         supportedHttpMethods.addAll(Arrays.asList(HttpMethod.values()));\n       }\n-      RestRequestSpec<R> requestSpec = \n-        new RestRequestSpec<R>(reqParamsSpecBuilder.build(), resourceClass);\n-      RestResponseSpec<R> responseSpec =\n-        new RestResponseSpec<R>(resParamsSpecBuilder.build(), resourceClass);\n-      return new RestCallSpec<R>(supportedHttpMethods, callPath, \n-          requestSpec, responseSpec);\n+      RestRequestSpec requestSpec = \n+        new RestRequestSpec(reqParamsSpecBuilder.build(), resourceType);\n+      RestResponseSpec responseSpec =\n+        new RestResponseSpec(resParamsSpecBuilder.build(), resourceType);\n+      return new RestCallSpec(supportedHttpMethods, callPath, \n+          requestSpec, responseSpec, resourceType);\n     }\n   }\n \n   private final Set<HttpMethod> supportedHttpMethods;\n   private final CallPath path;\n-  private final RestRequestSpec<R> requestSpec;\n-  private final RestResponseSpec<R> responseSpec;\n+  private final RestRequestSpec requestSpec;\n+  private final RestResponseSpec responseSpec;\n+  private final Type resourceType;\n \n   private RestCallSpec(Set<HttpMethod> supportedHttpMethods, CallPath path,\n-      RestRequestSpec<R> requestSpec, RestResponseSpec<R> responseSpec) {\n+      RestRequestSpec requestSpec, RestResponseSpec responseSpec,\n+      Type resourceType) {\n     Preconditions.checkArgument(!supportedHttpMethods.isEmpty());\n     Preconditions.checkNotNull(path);\n     this.supportedHttpMethods = supportedHttpMethods;\n     this.path = path;\n     this.requestSpec = requestSpec;\n     this.responseSpec = responseSpec;\n+    this.resourceType = resourceType;\n   }\n \n   public CallPath getPath() {\n     return supportedHttpMethods;\n   }\n \n-  public RestResponseSpec<R> getResponseSpec() {\n+  public RestResponseSpec getResponseSpec() {\n     return responseSpec;\n   }\n   \n-  public RestRequestSpec<R> getRequestSpec() {\n+  public RestRequestSpec getRequestSpec() {\n     return requestSpec;\n   }\n+\n+  public Type getResourceType() {\n+    return resourceType;\n+  }\n }\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestRequest.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestRequest.java\n  */\n package com.google.gson.webservice.definition.rest;\n \n+import java.lang.reflect.Type;\n+\n import com.google.gson.webservice.definition.ContentBodySpec;\n import com.google.gson.webservice.definition.HeaderMap;\n import com.google.gson.webservice.definition.HttpMethod;\n  * \n  * @author inder\n  */\n-public final class RestRequest<R> {\n+public final class RestRequest<R extends RestResource<R>> {\n   private final HttpMethod method;\n   private final HeaderMap headers;\n   private final R body;\n-  private final RestRequestSpec<R> spec;\n+  private final RestRequestSpec spec;\n   \n   public RestRequest(HttpMethod method, HeaderMap requestHeaders,\n-      R requestBody, Class<R> resourceClass) {\n+      R requestBody, Type resourceType) {\n     this.method = method;\n     this.body = requestBody;\n     this.headers = requestHeaders;\n-    this.spec = new RestRequestSpec<R>(requestHeaders.getSpec(), resourceClass);\n+    this.spec = new RestRequestSpec(requestHeaders.getSpec(), resourceType);\n+  }\n+\n+  public Id<R> getId() {\n+    return body.getId();\n   }\n \n   public HttpMethod getMethod() {\n     return method;\n   }\n \n-  public RestRequestSpec<R> getSpec() {\n+  public RestRequestSpec getSpec() {\n     return spec;\n   }\n \n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestRequestSpec.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestRequestSpec.java\n  */\n package com.google.gson.webservice.definition.rest;\n \n+import java.lang.reflect.Type;\n+\n import com.google.gson.webservice.definition.HeaderMapSpec;\n \n /**\n  * \n  * @author inder\n  */\n-public final class RestRequestSpec<R> {\n+public final class RestRequestSpec {\n   private final HeaderMapSpec headersSpec;\n-  private final Class<R> resourceClass;\n+  private final Type resourceType;\n \n-  public RestRequestSpec(HeaderMapSpec headersSpec, Class<R> resourceClass) {\n+  public RestRequestSpec(HeaderMapSpec headersSpec, Type resourceClass) {\n     this.headersSpec = headersSpec;\n-    this.resourceClass = resourceClass;\n+    this.resourceType = resourceClass;\n   }\n \n-  public Class<R> getResourceClass() {\n-    return resourceClass;\n+  public Type getResourceType() {\n+    return resourceType;\n   }\n \n   public HeaderMapSpec getHeadersSpec() {\n   \n   @Override\n   public String toString() {\n-    return String.format(\"{headersSpec:%s,resourceClass:%s}\", headersSpec, resourceClass);\n+    return String.format(\"{headersSpec:%s,resourceType:%s}\", headersSpec, resourceType);\n   }\n }\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestResource.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.rest;\n+\n+/**\n+ * An interface implemented by an object that is intended to be a rest resource\n+ *\n+ * @author inder\n+ *\n+ * @param <R> the rest resource type\n+ */\n+public interface RestResource<R> extends HasId<R> {\n+\n+}\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestResponse.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestResponse.java\n  */\n package com.google.gson.webservice.definition.rest;\n \n+import java.lang.reflect.Type;\n+\n import com.google.gson.webservice.definition.HeaderMap;\n import com.google.gson.webservice.definition.TypedKey;\n \n  * \n  * @author inder\n  */\n-public final class RestResponse<R> {\n+public final class RestResponse<R extends RestResource<R>> {\n   \n   private final HeaderMap headers;\n   private final R body;\n-  private final RestResponseSpec<R> spec;\n+  private final RestResponseSpec spec;\n   \n-  public static class Builder<R> {\n+  public static class Builder<RS extends RestResource<RS>> {\n     private final HeaderMap.Builder headers;\n-    private R body;\n-    private final RestResponseSpec<R> spec;\n+    private RS body;\n+    private final RestResponseSpec spec;\n     \n-    public Builder(RestResponseSpec<R> spec) {\n+    public Builder(RestResponseSpec spec) {\n       this.spec = spec;\n       headers = new HeaderMap.Builder(spec.getHeadersSpec());\n     }\n     \n-    public <T> Builder<R> putHeader(TypedKey<T> paramName, T content) {\n+    public <T> Builder<RS> putHeader(TypedKey<T> paramName, T content) {\n       headers.put(paramName.getName(), content, paramName.getClassOfT());\n       return this;\n     }\n     \n-    public Builder<R> setBody(R body) {\n+    public Builder<RS> setBody(RS body) {\n       this.body = body;\n       return this;\n     }\n \n-    public RestResponse<R> build() {\n-      return new RestResponse<R>(spec, headers.build(), body);\n+    public RestResponse<RS> build() {\n+      return new RestResponse<RS>(spec, headers.build(), body);\n     }\n   }\n   \n-  private RestResponse(RestResponseSpec<R> spec, HeaderMap headers, R body) {\n+  private RestResponse(RestResponseSpec spec, HeaderMap headers, R body) {\n     this.spec = spec;\n     this.headers = headers;\n     this.body = body;\n   }\n   \n-  @SuppressWarnings(\"unchecked\")\n-  public RestResponse(HeaderMap responseHeaders, R responseBody) {\n-    this.spec = new RestResponseSpec<R>(responseHeaders.getSpec(),\n-        (Class<R>)responseBody.getClass());\n+  public RestResponse(HeaderMap responseHeaders, R responseBody, Type responseBodyType) {\n+    this.spec = new RestResponseSpec(responseHeaders.getSpec(), responseBodyType);\n     this.headers = responseHeaders;\n     this.body = responseBody;\n   }\n \n-  public RestResponseSpec<R> getSpec() {\n+  public RestResponseSpec getSpec() {\n     return spec;\n   }\n \n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestResponseSpec.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestResponseSpec.java\n  */\n package com.google.gson.webservice.definition.rest;\n \n+import java.lang.reflect.Type;\n+\n import com.google.gson.webservice.definition.HeaderMapSpec;\n \n /**\n  * \n  * @author inder\n  */\n-public final class RestResponseSpec<R> {\n+public final class RestResponseSpec {\n   private final HeaderMapSpec headersSpec;\n-  private final Class<R> resourceClass;\n+  private final Type resourceType;\n \n-  public RestResponseSpec(HeaderMapSpec headersSpec, Class<R> resourceClass) {\n+  public RestResponseSpec(HeaderMapSpec headersSpec, Type resourceType) {\n     this.headersSpec = headersSpec;\n-    this.resourceClass = resourceClass;\n+    this.resourceType = resourceType;\n   }\n \n-  public Class<R> getResourceClass() {\n-    return resourceClass;\n+  public Type getResourceType() {\n+    return resourceType;\n   }\n \n   public HeaderMapSpec getHeadersSpec() {\n   \n   @Override\n   public String toString() {\n-    return String.format(\"{headersSpec:%s,resourceClass:%s}\", headersSpec, resourceClass);\n+    return String.format(\"{headersSpec:%s,resourceType:%s}\", headersSpec, resourceType);\n   }\n }\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/rest/IdMap.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.wsf.server.rest;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.google.gson.webservice.definition.rest.HasId;\n+import com.google.gson.webservice.definition.rest.Id;\n+\n+/**\n+ * This class provides a type-safe map to access values associated with Ids\n+ *\n+ * @author inder\n+ *\n+ * @param <T> the type of the objects being kept in the map\n+ */\n+public class IdMap<T extends HasId<T>> {\n+  public static final Logger LOG = Logger.getLogger(IdMap.class.getName());\n+  protected final Map<Id<T>, T> map;\n+  private volatile long nextAvailableId;\n+  private final Type typeOfId;\n+\n+  /**\n+   * Use {@link #create(Class)} instead of constructor\n+   */\n+  protected IdMap(Type typeOfId) {\n+    this.typeOfId = typeOfId;\n+    map = new ConcurrentHashMap<Id<T>, T>();\n+    nextAvailableId = 0;\n+  }\n+\n+  public T get(Id<T> id) {\n+    return map.get(id);\n+  }\n+\n+  public T put(T obj) {\n+    map.put(obj.getId(), obj);\n+    return obj;\n+  }\n+\n+  public void delete(Id<T> id) {\n+    T removed = map.remove(id);\n+    if (removed == null) {\n+      LOG.log(Level.WARNING, \"Attempted to delete non-existent id: {0}\", id);\n+    }\n+  }\n+\n+  public boolean exists(Id<T> id) {\n+    return map.containsKey(id);\n+  }\n+\n+  public synchronized Id<T> getNextId() {\n+    long id = nextAvailableId++;\n+    return Id.get(id, typeOfId);\n+  }\n+\n+  public static <S extends HasId<S>> IdMap<S> create(Type typeOfId) {\n+    return new IdMap<S>(typeOfId);\n+  }\n+}\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/rest/MetaData.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.wsf.server.rest;\n+\n+import com.google.gson.webservice.definition.rest.RestResource;\n+\n+/**\n+ * Metadata associated with a repository for a rest resource\n+ *\n+ * @author inder\n+ *\n+ * @param <R> The resource\n+ */\n+public final class MetaData<R extends RestResource<R>> {\n+\n+  final boolean freshlyAssignedId;\n+\n+  public MetaData(boolean freshlyAssignedId) {\n+    this.freshlyAssignedId = freshlyAssignedId;\n+  }\n+\n+  public boolean isFreshlyAssignedId() {\n+    return freshlyAssignedId;\n+  }\n+}\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/rest/Repository.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.wsf.server.rest;\n+\n+import com.google.gson.webservice.definition.rest.HasId;\n+import com.google.gson.webservice.definition.rest.Id;\n+\n+/**\n+ * An interface for a repository of rest resources. Meant for abstracting the server-side\n+ * storage of rest resources.\n+ *\n+ * @author inder\n+ *\n+ * @param <R> the type of rest resource\n+ */\n+public interface Repository<R extends HasId<R>> {\n+  public R get(Id<R> resourceId);\n+\n+  /**\n+   * if resource.getId() == null, inserts the resource after assigning it a new id.\n+   * Otherwise, updates the resource ensuring that it pre-exists.\n+   */\n+  public R put(R resource);\n+\n+  public void delete(Id<R> resourceId);\n+  \n+  public boolean exists(Id<R> resourceId);\n+\n+  /**\n+   * Ensures that the specified resource has a valid id that will be used when it is saved\n+   */\n+  public Id<R> assignId(R resource);\n+\n+  public Id<R> getNextId();\n+}\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/rest/RepositoryInMemory.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.wsf.server.rest;\n+\n+import java.util.Map;\n+\n+import com.google.gson.webservice.definition.rest.Id;\n+import com.google.gson.webservice.definition.rest.RestResource;\n+import com.google.inject.internal.Maps;\n+import com.google.inject.internal.Preconditions;\n+\n+/**\n+ * An in-memory map of rest resources\n+ *\n+ * @author inder\n+ *\n+ * @param <R> Type variable for the resource\n+ */\n+public class RepositoryInMemory<R extends RestResource<R>> implements Repository<R> {\n+  private final IdMap<R> resources;\n+  private final Map<Id<R>, MetaData<R>> metaDataMap;\n+\n+  public RepositoryInMemory(Class<? super R> classOfResource) {\n+    this.resources = IdMap.create(classOfResource);\n+    this.metaDataMap = Maps.newHashMap();\n+  }\n+\n+  @Override\n+  public R get(Id<R> resourceId) {\n+    return resources.get(resourceId);\n+  }\n+\n+  public boolean isFreshlyAssignedId(Id<R> resourceId) {\n+    MetaData<R> metaData = metaDataMap.get(resourceId);\n+    if (metaData == null) {\n+      return false;\n+    }\n+    return metaData.isFreshlyAssignedId();\n+  }\n+\n+  @Override\n+  public R put(R resource) {\n+    if (!resource.hasId()) {\n+      // insert semantics\n+      assignId(resource);\n+    } else {\n+      Id<R> id = resource.getId();\n+      if (!isFreshlyAssignedId(id)) {\n+        // update semantics\n+        Preconditions.checkState(resources.exists(resource.getId()));\n+      }\n+    }\n+    resource = resources.put(resource);\n+    metaDataMap.remove(resource.getId());\n+    return resource;\n+  }\n+\n+  @Override\n+  public void delete(Id<R> resourceId) {\n+    resources.delete(resourceId);\n+  }\n+\n+  @Override\n+  public boolean exists(Id<R> resourceId) {\n+    return resources.exists(resourceId);\n+  }\n+\n+  @Override\n+  public Id<R> getNextId() {\n+    return resources.getNextId();\n+  }\n+\n+  @Override\n+  public Id<R> assignId(R resource) {\n+    if (resource.getId() == null) {\n+      Id<R> id = resources.getNextId();\n+      resource.setId(id);\n+      metaDataMap.put(id, new MetaData<R>(true));\n+    }\n+    return resource.getId();\n+  }\n+}\n--- a/wsf/src/main/java/com/google/gson/wsf/server/rest/RestRequestReceiver.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/rest/RestRequestReceiver.java\n import com.google.gson.webservice.definition.WebServiceSystemException;\n import com.google.gson.webservice.definition.rest.RestRequest;\n import com.google.gson.webservice.definition.rest.RestRequestSpec;\n+import com.google.gson.webservice.definition.rest.RestResource;\n \n /**\n  * Receives and parses a request at the server side on a {@link HttpServletRequest}.  \n  * \n  * @author inder\n  */\n-public final class RestRequestReceiver<R> {\n+public final class RestRequestReceiver<R extends RestResource<R>> {\n \n   private final Gson gson;\n-  private final RestRequestSpec<R> spec;\n+  private final RestRequestSpec spec;\n \n-  public RestRequestReceiver(Gson gson, RestRequestSpec<R> spec) {\n+  public RestRequestReceiver(Gson gson, RestRequestSpec spec) {\n     this.gson = gson;\n     this.spec = spec;\n   }\n       R requestBody = buildRequestBody(request);\n       \n       HttpMethod method = HttpMethod.getMethod(request.getMethod());\n-      return new RestRequest<R>(method, requestParams, requestBody, spec.getResourceClass());\n+      return new RestRequest<R>(method, requestParams, requestBody, spec.getResourceType());\n     } catch (IOException e) {\n       throw new WebServiceSystemException(e);\n     } catch (JsonParseException e) {\n   }\n   \n   private R buildRequestBody(HttpServletRequest request) throws IOException {\n-    Class<R> resourceClass = spec.getResourceClass();\n     Reader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));\n-    R requestBody = gson.fromJson(reader, resourceClass);\n+    R requestBody = gson.fromJson(reader, spec.getResourceType());\n     return requestBody;\n   }\n }\n--- a/wsf/src/main/java/com/google/gson/wsf/server/rest/RestResponseBuilder.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/rest/RestResponseBuilder.java\n  */\n package com.google.gson.wsf.server.rest;\n \n+import com.google.gson.webservice.definition.HttpMethod;\n+import com.google.gson.webservice.definition.rest.Id;\n+import com.google.gson.webservice.definition.rest.RestCallSpec;\n import com.google.gson.webservice.definition.rest.RestRequest;\n+import com.google.gson.webservice.definition.rest.RestResource;\n import com.google.gson.webservice.definition.rest.RestResponse;\n-import com.google.gson.webservice.definition.rest.RestCallSpec;\n \n-public interface RestResponseBuilder<R> {\n-  public void buildResponse(RestCallSpec<R> callSpec, RestRequest<R> request,\n-      RestResponse.Builder<R> responseBuilder); \n+public abstract class RestResponseBuilder<R extends RestResource<R>> {\n+  protected final Repository<R> resources;\n+\n+  public RestResponseBuilder(Repository<R> resources) {\n+    this.resources = resources;\n+  }\n+\n+  public void buildResponse(RestCallSpec callSpec, RestRequest<R> request,\n+      RestResponse.Builder<R> responseBuilder) {\n+    HttpMethod method = request.getMethod();\n+    R responseBody = null;\n+    switch (method) {\n+      case GET:\n+        responseBody = get(request.getId());\n+        break;\n+      case POST:\n+        responseBody = post(request.getBody());\n+        break;\n+      case DELETE:\n+        delete(request.getId());\n+        break;\n+      case PUT:\n+      default:\n+        throw new IllegalStateException(\"Unexpected method: \" + method);\n+    }\n+    responseBuilder.setBody(responseBody);\n+  }\n+\n+  public R get(Id<R> resourceId) {\n+    return resources.get(resourceId);\n+  }\n+\n+  public R post(R resource) {\n+    return resources.put(resource);\n+  }\n+\n+  public void delete(Id<R> resourceId) {\n+    resources.delete(resourceId);\n+  }\n+\n+  public R put(R resource) {\n+    return resources.put(resource);\n+  }\n }\n--- a/wsf/src/main/java/com/google/gson/wsf/server/rest/RestResponseSender.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/rest/RestResponseSender.java\n import com.google.gson.webservice.definition.ContentBodySpec;\n import com.google.gson.webservice.definition.HeaderMap;\n import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.rest.RestResource;\n import com.google.gson.webservice.definition.rest.RestResponse;\n \n /**\n  * \n  * @author inder\n  */\n-public final class RestResponseSender<R> {\n+public final class RestResponseSender<R extends RestResource<R>> {\n   private static final Logger logger = Logger.getLogger(RestResponseSender.class.getCanonicalName());\n \n   private Gson gson;", "timestamp": 1287331296, "metainfo": ""}