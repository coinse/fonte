{"sha": "24eec9428bbd2a6f24b36b8a216ca425b8b5252e", "log": "Merge pull request #671 from ownaginatious/master  Support for adding primitives directly to JsonArray instances", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonArray.java\n+++ b/gson/src/main/java/com/google/gson/JsonArray.java\n   }\n \n   /**\n+   * Adds the specified boolean to self.\n+   *\n+   * @param bool the boolean that needs to be added to the array.\n+   */\n+  public void add(Boolean bool) {\n+    elements.add(bool == null ? JsonNull.INSTANCE : new JsonPrimitive(bool));\n+  }\n+\n+  /**\n+   * Adds the specified character to self.\n+   *\n+   * @param character the character that needs to be added to the array.\n+   */\n+  public void add(Character character) {\n+    elements.add(character == null ? JsonNull.INSTANCE : new JsonPrimitive(character));\n+  }\n+\n+  /**\n+   * Adds the specified number to self.\n+   *\n+   * @param number the number that needs to be added to the array.\n+   */\n+  public void add(Number number) {\n+    elements.add(number == null ? JsonNull.INSTANCE : new JsonPrimitive(number));\n+  }\n+\n+  /**\n+   * Adds the specified string to self.\n+   *\n+   * @param string the string that needs to be added to the array.\n+   */\n+  public void add(String string) {\n+    elements.add(string == null ? JsonNull.INSTANCE : new JsonPrimitive(string));\n+  }\n+\n+  /**\n    * Adds the specified element to self.\n    *\n    * @param element the element that needs to be added to the array.\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/JsonArrayTest.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import com.google.gson.JsonArray;\n+import junit.framework.TestCase;\n+\n+import java.math.BigInteger;\n+\n+/**\n+ * Functional tests for adding primitives to a JsonArray.\n+ *\n+ * @author Dillon Dixon\n+ */\n+public class JsonArrayTest extends TestCase {\n+\n+  public void testStringPrimitiveAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    jsonArray.add(\"Hello\");\n+    jsonArray.add(\"Goodbye\");\n+    jsonArray.add(\"Thank you\");\n+    jsonArray.add((String) null);\n+    jsonArray.add(\"Yes\");\n+\n+    assertEquals(\"[\\\"Hello\\\",\\\"Goodbye\\\",\\\"Thank you\\\",null,\\\"Yes\\\"]\", jsonArray.toString());\n+  }\n+\n+  public void testIntegerPrimitiveAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    int x = 1;\n+    jsonArray.add(x);\n+\n+    x = 2;\n+    jsonArray.add(x);\n+\n+    x = -3;\n+    jsonArray.add(x);\n+\n+    jsonArray.add((Integer) null);\n+\n+    x = 4;\n+    jsonArray.add(x);\n+\n+    x = 0;\n+    jsonArray.add(x);\n+\n+    assertEquals(\"[1,2,-3,null,4,0]\", jsonArray.toString());\n+  }\n+\n+  public void testDoublePrimitiveAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    double x = 1.0;\n+    jsonArray.add(x);\n+\n+    x = 2.13232;\n+    jsonArray.add(x);\n+\n+    x = 0.121;\n+    jsonArray.add(x);\n+\n+    jsonArray.add((Double) null);\n+\n+    x = -0.00234;\n+    jsonArray.add(x);\n+\n+    jsonArray.add((Double) null);\n+\n+    assertEquals(\"[1.0,2.13232,0.121,null,-0.00234,null]\", jsonArray.toString());\n+  }\n+\n+  public void testBooleanPrimitiveAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    jsonArray.add(true);\n+    jsonArray.add(true);\n+    jsonArray.add(false);\n+    jsonArray.add(false);\n+    jsonArray.add((Boolean) null);\n+    jsonArray.add(true);\n+\n+    assertEquals(\"[true,true,false,false,null,true]\", jsonArray.toString());\n+  }\n+\n+  public void testCharPrimitiveAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    jsonArray.add('a');\n+    jsonArray.add('e');\n+    jsonArray.add('i');\n+    jsonArray.add((char) 111);\n+    jsonArray.add((Character) null);\n+    jsonArray.add('u');\n+    jsonArray.add(\"and sometimes Y\");\n+\n+    assertEquals(\"[\\\"a\\\",\\\"e\\\",\\\"i\\\",\\\"o\\\",null,\\\"u\\\",\\\"and sometimes Y\\\"]\", jsonArray.toString());\n+  }\n+\n+  public void testMixedPrimitiveAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    jsonArray.add('a');\n+    jsonArray.add(\"apple\");\n+    jsonArray.add(12121);\n+    jsonArray.add((char) 111);\n+    jsonArray.add((Boolean) null);\n+    jsonArray.add((Character) null);\n+    jsonArray.add(12.232);\n+    jsonArray.add(BigInteger.valueOf(2323));\n+\n+    assertEquals(\"[\\\"a\\\",\\\"apple\\\",12121,\\\"o\\\",null,null,12.232,2323]\", jsonArray.toString());\n+  }\n+\n+  public void testNullPrimitiveAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    jsonArray.add((Character) null);\n+    jsonArray.add((Boolean) null);\n+    jsonArray.add((Integer) null);\n+    jsonArray.add((Double) null);\n+    jsonArray.add((Float) null);\n+    jsonArray.add((BigInteger) null);\n+    jsonArray.add((String) null);\n+    jsonArray.add((Boolean) null);\n+    jsonArray.add((Number) null);\n+\n+    assertEquals(\"[null,null,null,null,null,null,null,null,null]\", jsonArray.toString());\n+  }\n+\n+  public void testSameAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    jsonArray.add('a');\n+    jsonArray.add('a');\n+    jsonArray.add(true);\n+    jsonArray.add(true);\n+    jsonArray.add(1212);\n+    jsonArray.add(1212);\n+    jsonArray.add(34.34);\n+    jsonArray.add(34.34);\n+    jsonArray.add((Boolean) null);\n+    jsonArray.add((Boolean) null);\n+\n+    assertEquals(\"[\\\"a\\\",\\\"a\\\",true,true,1212,1212,34.34,34.34,null,null]\", jsonArray.toString());\n+  }\n+}\n--- a/gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java\n   }\n   \n   public void testInetAddressSerializationAndDeserialization() throws Exception {\n-    InetAddress localhost = InetAddress.getLocalHost();\n-    String localInetAddress = gson.toJson(localhost);\n-    assertEquals(\"\\\"\" + localhost.getHostAddress() + \"\\\"\", localInetAddress);\n+    InetAddress address = InetAddress.getByName(\"8.8.8.8\");\n+    String jsonAddress = gson.toJson(address);\n+    assertEquals(\"\\\"8.8.8.8\\\"\", jsonAddress);\n     \n-    InetAddress value = gson.fromJson(localInetAddress, InetAddress.class);\n-    assertEquals(localhost, value);\n+    InetAddress value = gson.fromJson(jsonAddress, InetAddress.class);\n+    assertEquals(value, address);\n   } \n }", "timestamp": 1437945430, "metainfo": ""}