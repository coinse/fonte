{"sha": "ef2f73180b4befad061a64464bf8b9382f4e671f", "log": "added tests to illustrate and validate that Gson can serialize parameterized types without the need of explicit type token.", "commit": "\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/RawSerializationTest.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.functional;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import junit.framework.AssertionFailedError;\n+import junit.framework.TestCase;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Unit tests to validate serialization of parameterized types without explicit types\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class RawSerializationTest extends TestCase {\n+\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new Gson();\n+  }\n+\n+  public void testCollectionOfPrimitives() {\n+    Collection<Integer> ints = Arrays.asList(1, 2, 3, 4, 5);\n+    String json = gson.toJson(ints);\n+    assertEquals(\"[1,2,3,4,5]\", json);\n+  }\n+\n+  public void testCollectionOfObjects() {\n+    Collection<Foo> foos = Arrays.asList(new Foo(1), new Foo(2));\n+    String json = gson.toJson(foos);\n+    assertEquals(\"[{\\\"b\\\":1},{\\\"b\\\":2}]\", json);\n+  }\n+\n+  public void testParameterizedObject() {\n+    Bar<Foo> bar = new Bar<Foo>(new Foo(1));\n+    String expectedJson = \"{\\\"t\\\":{\\\"b\\\":1}}\";\n+    try {\n+      String json = gson.toJson(bar);\n+      assertEquals(expectedJson, json);\n+    } catch (AssertionFailedError expected) {\n+    }\n+    String json = gson.toJson(bar, new TypeToken<Bar<Foo>>(){}.getType());\n+    assertEquals(expectedJson, json);\n+  }\n+\n+  private static class Foo {\n+    @SuppressWarnings(\"unused\")\n+    int b;\n+    Foo(int b) {\n+      this.b = b;\n+    }\n+  }\n+\n+  private static class Bar<T> {\n+    @SuppressWarnings(\"unused\")\n+    T t;\n+    Bar(T t) {\n+      this.t = t;\n+    }\n+  }\n+}", "timestamp": 1309030985, "metainfo": ""}