{"sha": "102f8b3a71fa33cdac09d0e6ecdf8881702c10a7", "log": "Adding a few more assert to the InstanceCreatorTest to ensure that the default values are set for sub class fields.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java\n \n package com.google.gson.functional;\n \n-import java.lang.reflect.Type;\n-\n-import junit.framework.TestCase;\n-\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.InstanceCreator;\n import com.google.gson.common.TestTypes.ClassWithBaseField;\n import com.google.gson.common.TestTypes.Sub;\n \n+import junit.framework.TestCase;\n+\n+import java.lang.reflect.Type;\n+\n /**\n- * Functional Test exercising custom serialization only.  When test applies to both \n+ * Functional Test exercising custom serialization only.  When test applies to both\n  * serialization and deserialization then add it to CustomTypeAdapterTest.\n  *\n  * @author Inderjeet Singh\n  */\n public class InstanceCreatorTest extends TestCase {\n-  \n+\n   public void testInstanceCreatorReturnsBaseType() {\n     Gson gson = new GsonBuilder()\n       .registerTypeAdapter(Base.class, new InstanceCreator<Base>() {\n     Base base = gson.fromJson(json, Base.class);\n     assertEquals(\"BaseRevised\", base.baseName);\n   }\n-  \n+\n   public void testInstanceCreatorReturnsSubTypeForTopLevelObject() {\n     Gson gson = new GsonBuilder()\n     .registerTypeAdapter(Base.class, new InstanceCreator<Base>() {\n       }\n     })\n     .create();\n+\n     String json = \"{baseName:'Base',subName:'SubRevised'}\";\n     Base base = gson.fromJson(json, Base.class);\n-    assertFalse(\"SubRevised\".equals(((Sub)base).subName));\n+    assertTrue(base instanceof Sub);\n+\n+    Sub sub = (Sub) base;\n+    assertFalse(\"SubRevised\".equals(sub.subName));\n+    assertEquals(Sub.SUB_NAME, sub.subName);\n   }\n-  \n+\n   public void testInstanceCreatorReturnsSubTypeForField() {\n     Gson gson = new GsonBuilder()\n     .registerTypeAdapter(Base.class, new InstanceCreator<Base>() {", "timestamp": 1255123431, "metainfo": ""}