{"sha": "feb9617bf087738ddb5becffdcaf16efeb187478", "log": "Incorporated comments from r726", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonArray.java\n+++ b/gson/src/main/java/com/google/gson/JsonArray.java\n \n   @Override\n   public boolean equals(Object o) {\n-    return o instanceof JsonArray && ((JsonArray) o).elements.equals(elements);\n+    return (o == this) || (o instanceof JsonArray && ((JsonArray) o).elements.equals(elements));\n   }\n \n   @Override\n--- a/gson/src/main/java/com/google/gson/JsonNull.java\n+++ b/gson/src/main/java/com/google/gson/JsonNull.java\n    */\n   @Override\n   public boolean equals(Object other) {\n-    return other instanceof JsonNull;\n+    return this == other || other instanceof JsonNull;\n   }\n   \n   /**\n--- a/gson/src/main/java/com/google/gson/JsonObject.java\n+++ b/gson/src/main/java/com/google/gson/JsonObject.java\n \n   @Override\n   public boolean equals(Object o) {\n-    return o instanceof JsonObject\n-        && ((JsonObject) o).members.equals(members);\n+    return (o == this) || (o instanceof JsonObject\n+        && ((JsonObject) o).members.equals(members));\n   }\n \n   @Override\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n     }\n     if (isFloatingPoint(this) && isFloatingPoint(other)) {\n       double a = getAsNumber().doubleValue();\n+      // Java standard types other than double return true for two NaN. So, need\n+      // special handling for double.\n       double b = other.getAsNumber().doubleValue();\n       return a == b || (Double.isNaN(a) && Double.isNaN(b));\n     }\n--- a/gson/src/test/java/com/google/gson/JsonArrayTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonArrayTest.java\n     JsonArray a = new JsonArray();\n     JsonArray b = new JsonArray();\n \n+    assertEquals(a, a);\n+\n     a.add(new JsonObject());\n     assertFalse(a.equals(b));\n     assertFalse(b.equals(a));\n--- a/gson/src/test/java/com/google/gson/JsonObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonObjectTest.java\n     JsonObject a = new JsonObject();\n     JsonObject b = new JsonObject();\n \n+    assertEquals(a, a);\n+\n     a.add(\"foo\", new JsonObject());\n     assertFalse(a.equals(b));\n     assertFalse(b.equals(a));\n--- a/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java\n     MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(5L), new JsonPrimitive(5L));\n     MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive('a'), new JsonPrimitive('a'));\n     MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NaN), new JsonPrimitive(Float.NaN));\n+    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NEGATIVE_INFINITY),\n+        new JsonPrimitive(Float.NEGATIVE_INFINITY));\n+    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.POSITIVE_INFINITY),\n+        new JsonPrimitive(Float.POSITIVE_INFINITY));\n+    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.NaN), new JsonPrimitive(Double.NaN));\n+    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.NEGATIVE_INFINITY),\n+        new JsonPrimitive(Double.NEGATIVE_INFINITY));\n+    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.POSITIVE_INFINITY),\n+        new JsonPrimitive(Double.POSITIVE_INFINITY));\n     assertFalse(new JsonPrimitive(\"a\").equals(new JsonPrimitive(\"b\")));\n     assertFalse(new JsonPrimitive(true).equals(new JsonPrimitive(false)));\n     assertFalse(new JsonPrimitive(0).equals(new JsonPrimitive(1)));", "timestamp": 1301954991, "metainfo": ""}