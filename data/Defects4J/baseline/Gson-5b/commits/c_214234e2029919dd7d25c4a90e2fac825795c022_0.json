{"sha": "214234e2029919dd7d25c4a90e2fac825795c022", "log": "Support @SerializedName on annotations.  Fixes issue 347.", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n import com.google.gson.JsonPrimitive;\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.TypeAdapter;\n+import com.google.gson.annotations.SerializedName;\n import com.google.gson.internal.LazilyParsedNumber;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n+import java.util.HashMap;\n import java.util.Locale;\n import java.util.Map;\n import java.util.StringTokenizer;\n       = newFactory(JsonElement.class, JSON_ELEMENT);\n \n   private static final class EnumTypeAdapter<T extends Enum<T>> extends TypeAdapter<T> {\n-    private final Class<T> classOfT;\n+    private final Map<String, T> nameToConstant = new HashMap<String, T>();\n+    private final Map<T, String> constantToName = new HashMap<T, String>();\n \n     public EnumTypeAdapter(Class<T> classOfT) {\n-      this.classOfT = classOfT;\n+      try {\n+        for (T constant : classOfT.getEnumConstants()) {\n+          String name = constant.name();\n+          SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);\n+          if (annotation != null) {\n+            name = annotation.value();\n+          }\n+          nameToConstant.put(name, constant);\n+          constantToName.put(constant, name);\n+        }\n+      } catch (NoSuchFieldException e) {\n+        throw new AssertionError();\n+      }\n     }\n     public T read(JsonReader in) throws IOException {\n       if (in.peek() == JsonToken.NULL) {\n         in.nextNull();\n         return null;\n       }\n-      return Enum.valueOf(classOfT, in.nextString());\n+      return nameToConstant.get(in.nextString());\n     }\n \n     public void write(JsonWriter out, T value) throws IOException {\n-      out.value(value == null ? null : value.name());\n+      out.value(value == null ? null : constantToName.get(value));\n     }\n   }\n \n--- a/gson/src/test/java/com/google/gson/functional/EnumTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/EnumTest.java\n import com.google.gson.JsonPrimitive;\n import com.google.gson.JsonSerializationContext;\n import com.google.gson.JsonSerializer;\n+import com.google.gson.annotations.SerializedName;\n import com.google.gson.common.MoreAsserts;\n import com.google.gson.reflect.TypeToken;\n-\n-import junit.framework.TestCase;\n-\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.EnumSet;\n import java.util.Set;\n+import junit.framework.TestCase;\n \n /**\n  * Functional tests for Java 5.0 enums.\n     MoreAsserts.assertContains(actualJsonList, Roshambo.PAPER);\n   }\n \n+  public void testEnumCaseMapping() {\n+    assertEquals(Gender.MALE, gson.fromJson(\"\\\"boy\\\"\", Gender.class));\n+    assertEquals(\"\\\"boy\\\"\", gson.toJson(Gender.MALE, Gender.class));\n+  }\n+\n   public enum Roshambo {\n     ROCK {\n       @Override Roshambo defeats() {\n       return Roshambo.valueOf(json.getAsString().substring(3));\n     }\n   }\n+\n+  public enum Gender {\n+    @SerializedName(\"boy\")\n+    MALE,\n+\n+    @SerializedName(\"girl\")\n+    FEMALE\n+  }\n }", "timestamp": 1324013570, "metainfo": ""}