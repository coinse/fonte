{"sha": "f1f8b666ec665b41446ddb3d68de115d8ce91d2f", "log": "Implemented support for FieldNamingPolicy with MiniGson.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n   }\n \n   Gson(ExclusionStrategy deserializationExclusionStrategy,\n-      ExclusionStrategy serializationExclusionStrategy, FieldNamingStrategy2 fieldNamingPolicy,\n+      ExclusionStrategy serializationExclusionStrategy,\n+      final FieldNamingStrategy2 fieldNamingPolicy,\n       final MappedObjectConstructor objectConstructor, boolean serializeNulls,\n       final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,\n       final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n     TypeAdapter.Factory reflectiveTypeAdapterFactory =\n       new ReflectiveTypeAdapter.FactoryImpl() {\n       @Override\n+      public String getFieldName(Class<?> declaringClazz, Field f, Type declaredType) {\n+        return fieldNamingPolicy.translateName(new FieldAttributes(declaringClazz, f, declaredType));\n+      }\n+      @Override\n       public boolean serializeField(Class<?> declaringClazz, Field f, Type declaredType) {\n         return !Gson.this.serializationExclusionStrategy.shouldSkipField(\n             new FieldAttributes(declaringClazz, f, declaredType));\n--- a/gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java\n  */\n package com.google.gson;\n \n-import java.beans.DesignMode;\n import java.io.IOException;\n-import java.io.StringReader;\n-import java.io.StringWriter;\n import java.lang.reflect.Type;\n \n import com.google.gson.internal.Streams;\n--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java\n \n package com.google.gson.internal.bind;\n \n-import com.google.gson.internal.$Gson$Types;\n-import com.google.gson.internal.UnsafeAllocator;\n-import com.google.gson.reflect.TypeToken;\n-import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonToken;\n-import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Type;\n import java.util.LinkedHashMap;\n import java.util.Map;\n+\n+import com.google.gson.FieldAttributes;\n+import com.google.gson.FieldAttributesTest;\n+import com.google.gson.internal.$Gson$Types;\n+import com.google.gson.internal.UnsafeAllocator;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n+import com.google.gson.stream.JsonWriter;\n \n /**\n  * Adapts the fields of an object to the properties of a JSON object.\n   }\n \n   static BoundField createBoundField(\n-      final MiniGson context, final Field field, final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n+      final MiniGson context, final Field field, final String name,\n+      final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n     // special casing primitives here saves ~5% on Android...\n-    return new BoundField(field.getName(), serialize, deserialize) {\n+    return new BoundField(name, serialize, deserialize) {\n       final TypeAdapter<?> typeAdapter = context.getAdapter(fieldType);\n       @SuppressWarnings(\"unchecked\") // the type adapter and field type always agree\n       @Override void write(JsonWriter writer, Object value)\n   }\n \n   public static class FactoryImpl implements Factory {\n-    public boolean serializeField(Class<?> declaringClazz, Field f, Type declaringType) {\n+    public boolean serializeField(Class<?> declaringClazz, Field f, Type declaredType) {\n       return true;\n     }\n-    public boolean deserializeField(Class<?> declaringClazz, Field f, Type declaringType) {\n+    public boolean deserializeField(Class<?> declaringClazz, Field f, Type declaredType) {\n       return true;\n     }\n+\n+    public String getFieldName(Class<?> declaringClazz, Field f, Type declaredType) {\n+      return f.getName();\n+    }\n+\n     public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> type) {\n       Class<? super T> raw = type.getRawType();\n \n           boolean deserialize = deserializeField(raw, field, declaredType);\n           if (serialize || deserialize) {\n             Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n-            BoundField boundField = createBoundField(context, field, TypeToken.get(fieldType), serialize, deserialize);\n+            BoundField boundField = createBoundField(context, field, getFieldName(raw, field, declaredType),\n+                TypeToken.get(fieldType), serialize, deserialize);\n             result.put(boundField.name, boundField);\n           }\n         }", "timestamp": 1312339919, "metainfo": ""}