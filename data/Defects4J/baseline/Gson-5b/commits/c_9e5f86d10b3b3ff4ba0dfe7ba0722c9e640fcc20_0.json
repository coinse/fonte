{"sha": "9e5f86d10b3b3ff4ba0dfe7ba0722c9e640fcc20", "log": "Merge pull request #729 from google/jdk6  updated minimum JDK version to 1.6.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java\n \n   // These methods need to be synchronized since JDK DateFormat classes are not thread-safe\n   // See issue 162\n+  @Override\n   public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {\n     synchronized (localFormat) {\n       String dateFormatAsString = enUsFormat.format(src);\n     }\n   }\n \n+  @Override\n   public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n       throws JsonParseException {\n     if (!(json instanceof JsonPrimitive)) {\n--- a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java\n+++ b/gson/src/main/java/com/google/gson/FieldNamingPolicy.java\n    * unchanged.\n    */\n   IDENTITY() {\n-    public String translateName(Field f) {\n+    @Override public String translateName(Field f) {\n       return f.getName();\n     }\n   },\n    * </ul>\n    */\n   UPPER_CAMEL_CASE() {\n-    public String translateName(Field f) {\n+    @Override public String translateName(Field f) {\n       return upperCaseFirstLetter(f.getName());\n     }\n   },\n    * @since 1.4\n    */\n   UPPER_CAMEL_CASE_WITH_SPACES() {\n-    public String translateName(Field f) {\n+    @Override public String translateName(Field f) {\n       return upperCaseFirstLetter(separateCamelCase(f.getName(), \" \"));\n     }\n   },\n    * </ul>\n    */\n   LOWER_CASE_WITH_UNDERSCORES() {\n-    public String translateName(Field f) {\n+    @Override public String translateName(Field f) {\n       return separateCamelCase(f.getName(), \"_\").toLowerCase(Locale.ENGLISH);\n     }\n   },\n    * @since 1.4\n    */\n   LOWER_CASE_WITH_DASHES() {\n-    public String translateName(Field f) {\n+    @Override public String translateName(Field f) {\n       return separateCamelCase(f.getName(), \"-\").toLowerCase(Locale.ENGLISH);\n     }\n   };\n         ? firstCharacter + srcString.substring(indexOfSubstring)\n         : String.valueOf(firstCharacter);\n   }\n-}\n+}\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n \n   final JsonDeserializationContext deserializationContext = new JsonDeserializationContext() {\n     @SuppressWarnings(\"unchecked\")\n-\tpublic <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\n+    @Override public <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\n       return (T) fromJson(json, typeOfT);\n     }\n   };\n \n   final JsonSerializationContext serializationContext = new JsonSerializationContext() {\n-    public JsonElement serialize(Object src) {\n+    @Override public JsonElement serialize(Object src) {\n       return toJsonTree(src);\n     }\n-    public JsonElement serialize(Object src, Type typeOfSrc) {\n+    @Override public JsonElement serialize(Object src, Type typeOfSrc) {\n       return toJsonTree(src, typeOfSrc);\n     }\n   };\n--- a/gson/src/main/java/com/google/gson/LongSerializationPolicy.java\n+++ b/gson/src/main/java/com/google/gson/LongSerializationPolicy.java\n    * {@code {\"f\":123}}.\n    */\n   DEFAULT() {\n-    public JsonElement serialize(Long value) {\n+    @Override public JsonElement serialize(Long value) {\n       return new JsonPrimitive(value);\n     }\n   },\n    * {@code {\"f\":\"123\"}}.\n    */\n   STRING() {\n-    public JsonElement serialize(Long value) {\n+    @Override public JsonElement serialize(Long value) {\n       return new JsonPrimitive(String.valueOf(value));\n     }\n   };\n--- a/gson/src/main/java/com/google/gson/TreeTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/TreeTypeAdapter.java\n     }\n \n     @SuppressWarnings(\"unchecked\") // guarded by typeToken.equals() call\n+    @Override\n     public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n       boolean matches = exactType != null\n           ? exactType.equals(type) || matchRawType && exactType.getType() == type.getRawType()\n--- a/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java\n public final class ArrayTypeAdapter<E> extends TypeAdapter<Object> {\n   public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {\n     @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n+    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n       Type type = typeToken.getType();\n       if (!(type instanceof GenericArrayType || type instanceof Class && ((Class<?>) type).isArray())) {\n         return null;\n     this.componentType = componentType;\n   }\n \n-  public Object read(JsonReader in) throws IOException {\n+  @Override public Object read(JsonReader in) throws IOException {\n     if (in.peek() == JsonToken.NULL) {\n       in.nextNull();\n       return null;\n--- a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java\n     this.constructorConstructor = constructorConstructor;\n   }\n \n+  @Override\n   public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n     Type type = typeToken.getType();\n \n       this.constructor = constructor;\n     }\n \n-    public Collection<E> read(JsonReader in) throws IOException {\n+    @Override public Collection<E> read(JsonReader in) throws IOException {\n       if (in.peek() == JsonToken.NULL) {\n         in.nextNull();\n         return null;\n       return collection;\n     }\n \n-    public void write(JsonWriter out, Collection<E> collection) throws IOException {\n+    @Override public void write(JsonWriter out, Collection<E> collection) throws IOException {\n       if (collection == null) {\n         out.nullValue();\n         return;\n--- a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java\n public final class DateTypeAdapter extends TypeAdapter<Date> {\n   public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {\n     @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n-    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n+    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n       return typeToken.getRawType() == Date.class ? (TypeAdapter<T>) new DateTypeAdapter() : null;\n     }\n   };\n--- a/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java\n   }\n \n   @SuppressWarnings(\"unchecked\")\n+  @Override\n   public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> targetType) {\n     JsonAdapter annotation = targetType.getRawType().getAnnotation(JsonAdapter.class);\n     if (annotation == null) {\n--- a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java\n     this.complexMapKeySerialization = complexMapKeySerialization;\n   }\n \n-  public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n+  @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n     Type type = typeToken.getType();\n \n     Class<? super T> rawType = typeToken.getRawType();\n       this.constructor = constructor;\n     }\n \n-    public Map<K, V> read(JsonReader in) throws IOException {\n+    @Override public Map<K, V> read(JsonReader in) throws IOException {\n       JsonToken peek = in.peek();\n       if (peek == JsonToken.NULL) {\n         in.nextNull();\n       return map;\n     }\n \n-    public void write(JsonWriter out, Map<K, V> map) throws IOException {\n+    @Override public void write(JsonWriter out, Map<K, V> map) throws IOException {\n       if (map == null) {\n         out.nullValue();\n         return;\n--- a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java\n public final class ObjectTypeAdapter extends TypeAdapter<Object> {\n   public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {\n     @SuppressWarnings(\"unchecked\")\n-    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n+    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n       if (type.getRawType() == Object.class) {\n         return (TypeAdapter<T>) new ObjectTypeAdapter(gson);\n       }\n--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n     return fieldNames;\n   }\n \n-  public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\n+  @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\n     Class<? super T> raw = type.getRawType();\n \n     if (!Object.class.isAssignableFrom(raw)) {\n           field.set(value, fieldValue);\n         }\n       }\n-      public boolean writeField(Object value) throws IOException, IllegalAccessException {\n+      @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {\n         if (!serialized) return false;\n         Object fieldValue = field.get(value);\n         return fieldValue != value; // avoid recursion for example for Throwable.cause\n--- a/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java\n public final class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {\n   public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {\n     @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n-    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n+    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n       return typeToken.getRawType() == java.sql.Date.class\n           ? (TypeAdapter<T>) new SqlDateTypeAdapter() : null;\n     }\n--- a/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java\n public final class TimeTypeAdapter extends TypeAdapter<Time> {\n   public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {\n     @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n-    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n+    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n       return typeToken.getRawType() == Time.class ? (TypeAdapter<T>) new TimeTypeAdapter() : null;\n     }\n   };\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n   public static final TypeAdapterFactory CLASS_FACTORY = newFactory(Class.class, CLASS);\n \n   public static final TypeAdapter<BitSet> BIT_SET = new TypeAdapter<BitSet>() {\n-    public BitSet read(JsonReader in) throws IOException {\n+    @Override public BitSet read(JsonReader in) throws IOException {\n       if (in.peek() == JsonToken.NULL) {\n         in.nextNull();\n         return null;\n       return bitset;\n     }\n \n-    public void write(JsonWriter out, BitSet src) throws IOException {\n+    @Override public void write(JsonWriter out, BitSet src) throws IOException {\n       if (src == null) {\n         out.nullValue();\n         return;\n \n   public static final TypeAdapterFactory TIMESTAMP_FACTORY = new TypeAdapterFactory() {\n     @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n-    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n+    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n       if (typeToken.getRawType() != Timestamp.class) {\n         return null;\n       }\n         throw new AssertionError();\n       }\n     }\n-    public T read(JsonReader in) throws IOException {\n+    @Override public T read(JsonReader in) throws IOException {\n       if (in.peek() == JsonToken.NULL) {\n         in.nextNull();\n         return null;\n       return nameToConstant.get(in.nextString());\n     }\n \n-    public void write(JsonWriter out, T value) throws IOException {\n+    @Override public void write(JsonWriter out, T value) throws IOException {\n       out.value(value == null ? null : constantToName.get(value));\n     }\n   }\n \n   public static final TypeAdapterFactory ENUM_FACTORY = new TypeAdapterFactory() {\n     @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n-    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n+    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n       Class<? super T> rawType = typeToken.getRawType();\n       if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class) {\n         return null;\n       final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter) {\n     return new TypeAdapterFactory() {\n       @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n-      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n+      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n         return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;\n       }\n     };\n       final Class<TT> type, final TypeAdapter<TT> typeAdapter) {\n     return new TypeAdapterFactory() {\n       @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n-      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n+      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n         return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;\n       }\n       @Override public String toString() {\n       final Class<TT> unboxed, final Class<TT> boxed, final TypeAdapter<? super TT> typeAdapter) {\n     return new TypeAdapterFactory() {\n       @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n-      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n+      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n         Class<? super T> rawType = typeToken.getRawType();\n         return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;\n       }\n       final Class<? extends TT> sub, final TypeAdapter<? super TT> typeAdapter) {\n     return new TypeAdapterFactory() {\n       @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n-      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n+      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n         Class<? super T> rawType = typeToken.getRawType();\n         return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;\n       }\n       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n     return new TypeAdapterFactory() {\n       @SuppressWarnings(\"unchecked\")\n-      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n+      @Override public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n         final Class<? super T2> requestedType = typeToken.getRawType();\n         if (!clazz.isAssignableFrom(requestedType)) {\n           return null;\n--- a/gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java\n \n   private static class ExceptionTypeAdapter\n       implements JsonSerializer<AtomicLong>, JsonDeserializer<AtomicLong> {\n-    public JsonElement serialize(\n+    @Override public JsonElement serialize(\n         AtomicLong src, Type typeOfSrc, JsonSerializationContext context) {\n       throw new IllegalStateException();\n     }\n-\n-    public AtomicLong deserialize(\n+    @Override public AtomicLong deserialize(\n         JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       throw new IllegalStateException();\n \n   private static class AtomicIntegerTypeAdapter\n       implements JsonSerializer<AtomicInteger>, JsonDeserializer<AtomicInteger> {\n-    public JsonElement serialize(AtomicInteger src, Type typeOfSrc, JsonSerializationContext context) {\n+    @Override public JsonElement serialize(AtomicInteger src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.incrementAndGet());\n     }\n \n-    public AtomicInteger deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+    @Override public AtomicInteger deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       int intValue = json.getAsInt();\n       return new AtomicInteger(--intValue);\n--- a/gson/src/test/java/com/google/gson/MockExclusionStrategy.java\n+++ b/gson/src/test/java/com/google/gson/MockExclusionStrategy.java\n     this.skipField = skipField;\n   }\n \n+  @Override\n   public boolean shouldSkipField(FieldAttributes f) {\n     return skipField;\n   }\n \n+  @Override\n   public boolean shouldSkipClass(Class<?> clazz) {\n     return skipClass;\n   }\n--- a/gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java\n+++ b/gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java\n     public MyParameterizedTypeInstanceCreator(T instanceOfT) {\n       this.instanceOfT = instanceOfT;\n     }\n-    public MyParameterizedType<T> createInstance(Type type) {\n+    @Override public MyParameterizedType<T> createInstance(Type type) {\n       return new MyParameterizedType<T>(instanceOfT);\n     }\n   }\n \n-  public static class MyParameterizedTypeAdapter<T>\n+  public static final class MyParameterizedTypeAdapter<T>\n   implements JsonSerializer<MyParameterizedType<T>>, JsonDeserializer<MyParameterizedType<T>> {\n     @SuppressWarnings(\"unchecked\")\n     public static<T> String getExpectedJson(MyParameterizedType<T> obj) {\n       return sb.toString();\n     }\n \n-    public JsonElement serialize(MyParameterizedType<T> src, Type classOfSrc,\n+    @Override public JsonElement serialize(MyParameterizedType<T> src, Type classOfSrc,\n         JsonSerializationContext context) {\n       JsonObject json = new JsonObject();\n       T value = src.getValue();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public MyParameterizedType<T> deserialize(JsonElement json, Type typeOfT,\n+    @Override public MyParameterizedType<T> deserialize(JsonElement json, Type typeOfT,\n         JsonDeserializationContext context) throws JsonParseException {\n       Type genericClass = ((ParameterizedType) typeOfT).getActualTypeArguments()[0];\n       Class<?> rawType = $Gson$Types.getRawType(genericClass);\n--- a/gson/src/test/java/com/google/gson/common/TestTypes.java\n+++ b/gson/src/test/java/com/google/gson/common/TestTypes.java\n \n   public static class BaseSerializer implements JsonSerializer<Base> {\n     public static final String NAME = BaseSerializer.class.getSimpleName(); \n+    @Override\n     public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {\n       JsonObject obj = new JsonObject();\n       obj.addProperty(Base.SERIALIZER_KEY, NAME);\n       return obj;\n-    }    \n+    }\n   }\n   public static class SubSerializer implements JsonSerializer<Sub> {\n     public static final String NAME = SubSerializer.class.getSimpleName(); \n+    @Override\n     public JsonElement serialize(Sub src, Type typeOfSrc, JsonSerializationContext context) {\n       JsonObject obj = new JsonObject();\n       obj.addProperty(Base.SERIALIZER_KEY, NAME);\n   }\n \n   public static class ClassWithNoFields {\n-    // Nothing here.. .\n+    // Nothing here..\n     @Override\n     public boolean equals(Object other) {\n       return other.getClass() == ClassWithNoFields.class;\n       return '{' + \"\\\"fooBar\\\":\" + f + \",\\\"Another Foo\\\":\" + g + '}';\n     }\n   }\n-  \n+\n   public static class CrazyLongTypeAdapter\n       implements JsonSerializer<Long>, JsonDeserializer<Long> {\n     public static final long DIFFERENCE = 5L;\n+    @Override\n     public JsonElement serialize(Long src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src + DIFFERENCE);\n     }\n-    \n+    @Override\n     public Long deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       return json.getAsLong() - DIFFERENCE;\n     }\n+  }\n }\n-}\n--- a/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java\n   }\n \n   private static class DataHolderDeserializer implements JsonDeserializer<DataHolder> {\n+    @Override\n     public DataHolder deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       JsonObject jsonObj = json.getAsJsonObject();\n   public void testJsonTypeFieldBasedDeserialization() {\n     String json = \"{field1:'abc',field2:'def',__type__:'SUB_TYPE1'}\";\n     Gson gson = new GsonBuilder().registerTypeAdapter(MyBase.class, new JsonDeserializer<MyBase>() {\n-      public MyBase deserialize(JsonElement json, Type pojoType,\n+      @Override public MyBase deserialize(JsonElement json, Type pojoType,\n           JsonDeserializationContext context) throws JsonParseException {\n         String type = json.getAsJsonObject().get(MyBase.TYPE_ACCESS).getAsString();\n         return context.deserialize(json, SubTypes.valueOf(type).getSubclass());\n   public void testCustomDeserializerReturnsNullForTopLevelObject() {\n     Gson gson = new GsonBuilder()\n       .registerTypeAdapter(Base.class, new JsonDeserializer<Base>() {\n+        @Override\n         public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n             throws JsonParseException {\n           return null;\n   public void testCustomDeserializerReturnsNull() {\n     Gson gson = new GsonBuilder()\n       .registerTypeAdapter(Base.class, new JsonDeserializer<Base>() {\n+        @Override\n         public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n             throws JsonParseException {\n           return null;\n   public void testCustomDeserializerReturnsNullForArrayElements() {\n     Gson gson = new GsonBuilder()\n       .registerTypeAdapter(Base.class, new JsonDeserializer<Base>() {\n+        @Override\n         public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n             throws JsonParseException {\n           return null;\n   public void testCustomDeserializerReturnsNullForArrayElementsForArrayField() {\n     Gson gson = new GsonBuilder()\n       .registerTypeAdapter(Base.class, new JsonDeserializer<Base>() {\n+        @Override\n         public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n             throws JsonParseException {\n           return null;\n     assertNull(target.bases[1]);\n   }\n \n-  private static class ClassWithBaseArray {\n+  private static final class ClassWithBaseArray {\n     Base[] bases;\n   }\n }\n--- a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n   public void testCustomSerializers() {\n     Gson gson = builder.registerTypeAdapter(\n         ClassWithCustomTypeConverter.class, new JsonSerializer<ClassWithCustomTypeConverter>() {\n-      public JsonElement serialize(ClassWithCustomTypeConverter src, Type typeOfSrc,\n-          JsonSerializationContext context) {\n+          @Override public JsonElement serialize(ClassWithCustomTypeConverter src, Type typeOfSrc,\n+              JsonSerializationContext context) {\n         JsonObject json = new JsonObject();\n         json.addProperty(\"bag\", 5);\n         json.addProperty(\"value\", 25);\n   public void testCustomDeserializers() {\n     Gson gson = new GsonBuilder().registerTypeAdapter(\n         ClassWithCustomTypeConverter.class, new JsonDeserializer<ClassWithCustomTypeConverter>() {\n-      public ClassWithCustomTypeConverter deserialize(JsonElement json, Type typeOfT,\n-          JsonDeserializationContext context) {\n+          @Override public ClassWithCustomTypeConverter deserialize(JsonElement json, Type typeOfT,\n+              JsonDeserializationContext context) {\n         JsonObject jsonObject = json.getAsJsonObject();\n         int value = jsonObject.get(\"bag\").getAsInt();\n         return new ClassWithCustomTypeConverter(new BagOfPrimitives(value,\n   public void testCustomNestedSerializers() {\n     Gson gson = new GsonBuilder().registerTypeAdapter(\n         BagOfPrimitives.class, new JsonSerializer<BagOfPrimitives>() {\n-      public JsonElement serialize(BagOfPrimitives src, Type typeOfSrc,\n+          @Override public JsonElement serialize(BagOfPrimitives src, Type typeOfSrc,\n           JsonSerializationContext context) {\n         return new JsonPrimitive(6);\n       }\n   public void testCustomNestedDeserializers() {\n     Gson gson = new GsonBuilder().registerTypeAdapter(\n         BagOfPrimitives.class, new JsonDeserializer<BagOfPrimitives>() {\n-      public BagOfPrimitives deserialize(JsonElement json, Type typeOfT,\n+          @Override public BagOfPrimitives deserialize(JsonElement json, Type typeOfT,\n           JsonDeserializationContext context) throws JsonParseException {\n         int value = json.getAsInt();\n         return new BagOfPrimitives(value, value, false, \"\");\n \n   public void testCustomTypeAdapterDoesNotAppliesToSubClasses() {\n     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base> () {\n+      @Override\n       public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {\n         JsonObject json = new JsonObject();\n         json.addProperty(\"value\", src.baseValue);\n \n   public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() {\n     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base> () {\n+      @Override\n       public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {\n         JsonObject json = new JsonObject();\n         json.addProperty(\"value\", src.baseValue);\n     }\n   }\n \n-  public static class FooTypeAdapter implements JsonSerializer<Foo>, JsonDeserializer<Foo> {\n+  public static final class FooTypeAdapter implements JsonSerializer<Foo>, JsonDeserializer<Foo> {\n+    @Override\n     public Foo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       return context.deserialize(json, typeOfT);\n     }\n \n+    @Override\n     public JsonElement serialize(Foo src, Type typeOfSrc, JsonSerializationContext context) {\n       return context.serialize(src, typeOfSrc);\n     }\n   public void testCustomSerializerInvokedForPrimitives() {\n     Gson gson = new GsonBuilder()\n         .registerTypeAdapter(boolean.class, new JsonSerializer<Boolean>() {\n-          public JsonElement serialize(Boolean s, Type t, JsonSerializationContext c) {\n+          @Override public JsonElement serialize(Boolean s, Type t, JsonSerializationContext c) {\n             return new JsonPrimitive(s ? 1 : 0);\n           }\n         })\n   public void testCustomDeserializerInvokedForPrimitives() {\n     Gson gson = new GsonBuilder()\n         .registerTypeAdapter(boolean.class, new JsonDeserializer() {\n+          @Override\n           public Object deserialize(JsonElement json, Type t, JsonDeserializationContext context) {\n             return json.getAsInt() != 0;\n           }\n \n   public void testCustomByteArraySerializer() {\n     Gson gson = new GsonBuilder().registerTypeAdapter(byte[].class, new JsonSerializer<byte[]>() {\n+      @Override\n       public JsonElement serialize(byte[] src, Type typeOfSrc, JsonSerializationContext context) {\n         StringBuilder sb = new StringBuilder(src.length);\n         for (byte b : src) {\n   public void testCustomByteArrayDeserializerAndInstanceCreator() {\n     GsonBuilder gsonBuilder = new GsonBuilder().registerTypeAdapter(byte[].class,\n         new JsonDeserializer<byte[]>() {\n-      public byte[] deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-          throws JsonParseException {\n+          @Override public byte[] deserialize(JsonElement json,\n+              Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n         String str = json.getAsString();\n         byte[] data = new byte[str.length()];\n         for (int i = 0; i < data.length; ++i) {\n     }\n   }\n \n-  private static class StringHolder {\n+  private static final class StringHolder {\n     String part1;\n     String part2;\n \n   private static class StringHolderTypeAdapter implements JsonSerializer<StringHolder>,\n       JsonDeserializer<StringHolder>, InstanceCreator<StringHolder> {\n \n-    public StringHolder createInstance(Type type) {\n+    @Override public StringHolder createInstance(Type type) {\n       //Fill up with objects that will be thrown away\n       return new StringHolder(\"unknown:thing\");\n     }\n \n-    public StringHolder deserialize(JsonElement src, Type type,\n+    @Override public StringHolder deserialize(JsonElement src, Type type,\n         JsonDeserializationContext context) {\n       return new StringHolder(src.getAsString());\n     }\n \n-    public JsonElement serialize(StringHolder src, Type typeOfSrc,\n+    @Override public JsonElement serialize(StringHolder src, Type typeOfSrc,\n         JsonSerializationContext context) {\n       String contents = src.part1 + ':' + src.part2;\n       return new JsonPrimitive(contents);\n   }\n \n   private static class DataHolderSerializer implements JsonSerializer<DataHolder> {\n+    @Override\n     public JsonElement serialize(DataHolder src, Type typeOfSrc, JsonSerializationContext context) {\n       JsonObject obj = new JsonObject();\n       obj.addProperty(\"myData\", src.data);\n   }\n \n   private static class DataHolderDeserializer implements JsonDeserializer<DataHolder> {\n+    @Override\n     public DataHolder deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       JsonObject jsonObj = json.getAsJsonObject();\n   }\n \n   private static class DateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n-    public Date deserialize(JsonElement json, Type typeOfT,\n-        JsonDeserializationContext context) throws JsonParseException {\n+    @Override\n+    public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) {\n       return typeOfT == Date.class\n           ? new Date(json.getAsLong())\n           : new java.sql.Date(json.getAsLong());\n     }\n+    @Override\n     public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.getTime());\n     }\n--- a/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java\n \n   private StatsTypeAdapterFactory stats;\n   private Gson gson;\n+\n+  @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n     stats = new StatsTypeAdapterFactory();\n     public int numReads = 0;\n     public int numWrites = 0;\n \n-    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n+    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n       final TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);\n       return new TypeAdapter<T>() {\n         @Override\n--- a/gson/src/test/java/com/google/gson/functional/EnumTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/EnumTest.java\n \n   private static class MyEnumTypeAdapter\n       implements JsonSerializer<Roshambo>, JsonDeserializer<Roshambo> {\n-    public JsonElement serialize(Roshambo src, Type typeOfSrc, JsonSerializationContext context) {\n+    @Override public JsonElement serialize(Roshambo src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(\"123\" + src.name());\n     }\n \n-    public Roshambo deserialize(JsonElement json, Type classOfT, JsonDeserializationContext context)\n+    @Override public Roshambo deserialize(JsonElement json, Type classOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       return Roshambo.valueOf(json.getAsString().substring(3));\n     }\n--- a/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java\n  */\n public class ExclusionStrategyFunctionalTest extends TestCase {\n   private static final ExclusionStrategy EXCLUDE_SAMPLE_OBJECT_FOR_TEST = new ExclusionStrategy() {\n-    public boolean shouldSkipField(FieldAttributes f) {\n+    @Override public boolean shouldSkipField(FieldAttributes f) {\n       return false;\n     }\n-    public boolean shouldSkipClass(Class<?> clazz) {\n+    @Override public boolean shouldSkipClass(Class<?> clazz) {\n       return clazz == SampleObjectForTest.class;\n     }\n   };\n     }\n   }\n \n-  private static class MyExclusionStrategy implements ExclusionStrategy {\n+  private static final class MyExclusionStrategy implements ExclusionStrategy {\n     private final Class<?> typeToSkip;\n \n     private MyExclusionStrategy(Class<?> typeToSkip) {\n       this.typeToSkip = typeToSkip;\n     }\n \n-    public boolean shouldSkipClass(Class<?> clazz) {\n+    @Override public boolean shouldSkipClass(Class<?> clazz) {\n       return (clazz == typeToSkip);\n     }\n \n-    public boolean shouldSkipField(FieldAttributes f) {\n+    @Override public boolean shouldSkipField(FieldAttributes f) {\n       return f.getAnnotation(Foo.class) != null;\n     }\n   }\n--- a/gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java\n   }\n   \n   private static class SomeInterfaceInstanceCreator implements InstanceCreator<SomeInterface> {\n-    public SomeInterface createInstance(Type type) {\n+    @Override public SomeInterface createInstance(Type type) {\n       return new SomeObject();\n     }\n   }\n--- a/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java\n   public void testInstanceCreatorReturnsBaseType() {\n     Gson gson = new GsonBuilder()\n       .registerTypeAdapter(Base.class, new InstanceCreator<Base>() {\n-       public Base createInstance(Type type) {\n+        @Override public Base createInstance(Type type) {\n          return new Base();\n        }\n       })\n   public void testInstanceCreatorReturnsSubTypeForTopLevelObject() {\n     Gson gson = new GsonBuilder()\n     .registerTypeAdapter(Base.class, new InstanceCreator<Base>() {\n-      public Base createInstance(Type type) {\n+      @Override public Base createInstance(Type type) {\n         return new Sub();\n       }\n     })\n   public void testInstanceCreatorReturnsSubTypeForField() {\n     Gson gson = new GsonBuilder()\n     .registerTypeAdapter(Base.class, new InstanceCreator<Base>() {\n-      public Base createInstance(Type type) {\n+      @Override public Base createInstance(Type type) {\n         return new Sub();\n       }\n     })\n     @SuppressWarnings(\"serial\")\n     class SubArrayList<T> extends ArrayList<T> {}\n     InstanceCreator<List<String>> listCreator = new InstanceCreator<List<String>>() {\n-      public List<String> createInstance(Type type) {\n+      @Override public List<String> createInstance(Type type) {\n         return new SubArrayList<String>();\n       }\n     };\n     @SuppressWarnings(\"serial\")\n     class SubTreeSet<T> extends TreeSet<T> {}\n     InstanceCreator<SortedSet> sortedSetCreator = new InstanceCreator<SortedSet>() {\n-      public SortedSet createInstance(Type type) {\n+      @Override public SortedSet createInstance(Type type) {\n         return new SubTreeSet();\n       }\n     };\n--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java\n       this.value = value;\n     }\n     static final class JsonAdapterFactory implements TypeAdapterFactory {\n-      public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\n+      @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\n         return new TypeAdapter<T>() {\n           @Override public void write(JsonWriter out, T value) throws IOException {\n             out.value(\"jsonAdapterFactory\");\n--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java\n   }\n \n   private static class GizmoPartTypeAdapterFactory implements TypeAdapterFactory {\n-    public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\n+    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\n       return new TypeAdapter<T>() {\n         @Override public void write(JsonWriter out, T value) throws IOException {\n           out.value(\"GizmoPartTypeAdapterFactory\");\n--- a/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java\n     assertEquals(\"{\\\"@foo\\\":\\\"bar\\\"}\", new Gson().toJson(new AtName()));\n   }\n \n-  static class AtName {\n+  static final class AtName {\n     @SerializedName(\"@foo\") String f = \"bar\";\n   }\n \n-  private static class UpperCaseNamingStrategy implements FieldNamingStrategy {\n+  private static final class UpperCaseNamingStrategy implements FieldNamingStrategy {\n+    @Override\n     public String translateName(Field f) {\n       return f.getName().toUpperCase();\n     }\n--- a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java\n   }\n   \n   private static class ClassWithObjectsSerializer implements JsonSerializer<ClassWithObjects> {\n-    public JsonElement serialize(ClassWithObjects src, Type typeOfSrc,\n+    @Override public JsonElement serialize(ClassWithObjects src, Type typeOfSrc,\n         JsonSerializationContext context) {\n       JsonObject obj = new JsonObject();\n       obj.add(\"bag\", JsonNull.INSTANCE);\n   public void testCustomTypeAdapterPassesNullSerialization() {\n     Gson gson = new GsonBuilder()\n         .registerTypeAdapter(ObjectWithField.class, new JsonSerializer<ObjectWithField>() {\n-          public JsonElement serialize(ObjectWithField src, Type typeOfSrc,\n+          @Override public JsonElement serialize(ObjectWithField src, Type typeOfSrc,\n               JsonSerializationContext context) {\n             return context.serialize(null);\n           }\n   public void testCustomTypeAdapterPassesNullDesrialization() {\n     Gson gson = new GsonBuilder()\n         .registerTypeAdapter(ObjectWithField.class, new JsonDeserializer<ObjectWithField>() {\n-          public ObjectWithField deserialize(JsonElement json, Type type,\n+          @Override public ObjectWithField deserialize(JsonElement json, Type type,\n               JsonDeserializationContext context) {\n             return context.deserialize(null, type);\n           }\n--- a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java\n       return registerSubtype(type, type.getSimpleName());\n     }\n \n-    public <R> TypeAdapter<R> create(Gson gson, TypeToken<R> type) {\n+    @Override public <R> TypeAdapter<R> create(Gson gson, TypeToken<R> type) {\n       if (type.getRawType() != baseType) {\n         return null;\n       }\n--- a/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java\n       JsonDeserializer<Id<?>> {\n \n     @SuppressWarnings(\"rawtypes\")\n+    @Override\n     public Id<?> deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       if (!(typeOfT instanceof ParameterizedType)) {\n       return new Id(json.getAsString(), typeOfId);\n     }\n \n+    @Override\n     public JsonElement serialize(Id<?> src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.getValue());\n     }\n--- a/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java\n \n   private JsonSerializer<Foo> newSerializer(final String name) {\n     return new JsonSerializer<Foo>() {\n+      @Override\n       public JsonElement serialize(Foo src, Type typeOfSrc, JsonSerializationContext context) {\n         return new JsonPrimitive(src.name + \" via \" + name);\n       }\n \n   private JsonDeserializer<Foo> newDeserializer(final String name) {\n     return new JsonDeserializer<Foo>() {\n+      @Override\n       public Foo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) {\n         return new Foo(json.getAsString() + \" via \" + name);\n       }\n--- a/gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java\n   }\n \n   static class ManagerAdapter implements JsonSerializer<Manager>, JsonDeserializer<Manager> {\n-    public Manager deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) {\n+    @Override public Manager deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) {\n       Manager result = new Manager();\n       result.userid = json.getAsString();\n       return result;\n     }\n-    public JsonElement serialize(Manager src, Type typeOfSrc, JsonSerializationContext context) {\n+    @Override public JsonElement serialize(Manager src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.userid);\n     }\n   }\n \n   static class EmployeeAdapter implements JsonSerializer<Employee>, JsonDeserializer<Employee> {\n-    public JsonElement serialize(Employee employee, Type typeOfSrc,\n+    @Override public JsonElement serialize(Employee employee, Type typeOfSrc,\n         JsonSerializationContext context) {\n       JsonObject result = new JsonObject();\n       result.add(\"userid\", context.serialize(employee.userid, String.class));\n       return result;\n     }\n \n-    public Employee deserialize(JsonElement json, Type typeOfT,\n+    @Override public Employee deserialize(JsonElement json, Type typeOfT,\n         JsonDeserializationContext context) throws JsonParseException {\n       JsonObject object = json.getAsJsonObject();\n       Employee result = null;\n--- a/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java\n     Derived2() { opType = OperationType.OP2; }\n   }\n   private static class BaseTypeAdapter implements JsonDeserializer<Base> {\n-    public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+    @Override public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       String opTypeStr = json.getAsJsonObject().get(\"opType\").getAsString();\n       OperationType opType = OperationType.valueOf(opTypeStr);", "timestamp": 1446693845, "metainfo": ""}