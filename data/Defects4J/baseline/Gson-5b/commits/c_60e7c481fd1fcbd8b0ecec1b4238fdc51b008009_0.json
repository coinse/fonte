{"sha": "60e7c481fd1fcbd8b0ecec1b4238fdc51b008009", "log": "Added complex map serialization tests in case the Map is defined with TypeVariables.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java\n \n package com.google.gson.functional;\n \n+import java.lang.reflect.Type;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.reflect.TypeToken;\n-import java.lang.reflect.Type;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import junit.framework.TestCase;\n \n public class MapAsArrayTypeAdapterTest extends TestCase {\n \n     assertEquals(original, gson.<Map<Point, String>>fromJson(json, type));\n   }\n \n+  public void testMapWithTypeVariableSerialization() {\n+    Gson gson = new GsonBuilder().enableComplexMapKeySerialization().create();\n+    PointWithProperty<Point> map = new PointWithProperty<Point>();\n+    map.map.put(new Point(2, 3), new Point(4, 5));\n+    Type type = new TypeToken<PointWithProperty<Point>>(){}.getType();\n+    String json = gson.toJson(map, type);\n+    assertEquals(\"{\\\"map\\\":[[{\\\"x\\\":2,\\\"y\\\":3},{\\\"x\\\":4,\\\"y\\\":5}]]}\", json);\n+  }\n+\n+  public void testMapWithTypeVariableDeserialization() {\n+    Gson gson = new GsonBuilder().enableComplexMapKeySerialization().create();\n+    String json = \"{map:[[{x:2,y:3},{x:4,y:5}]]}\";\n+    Type type = new TypeToken<PointWithProperty<Point>>(){}.getType();\n+    PointWithProperty<Point> map = gson.fromJson(json, type);\n+    Point key = map.map.keySet().iterator().next();\n+    Point value = map.map.values().iterator().next();\n+    assertEquals(new Point(2, 3), key);\n+    assertEquals(new Point(4, 5), value);\n+  }\n+\n   static class Point {\n     int x;\n     int y;\n       return \"(\" + x + \",\" + y + \")\";\n     }\n   }\n+\n+  static class PointWithProperty<T> {\n+    Map<Point, T> map = new HashMap<Point, T>();\n+  }\n }", "timestamp": 1306748318, "metainfo": ""}