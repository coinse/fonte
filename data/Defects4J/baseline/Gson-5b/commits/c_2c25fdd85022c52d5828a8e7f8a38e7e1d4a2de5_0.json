{"sha": "2c25fdd85022c52d5828a8e7f8a38e7e1d4a2de5", "log": "Added a test to measure performance of Gson on large collections. Gson's parser handled a collection of 1.4 million objects for serialization. For deserialization, the numbers were lower and Gson parser gave a stack overflow beyond a collection of 87,000 objects.", "commit": "\n--- a/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java\n+++ b/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java\n \n import com.google.gson.Gson;\n import com.google.gson.JsonParseException;\n+import com.google.gson.reflect.TypeToken;\n \n import junit.framework.TestCase;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n \n /**\n  * Tests to measure performance for Gson. All tests in this file will be disabled in code. To run\n       this.stackTrace = stackTrace;\n     }\n   }\n+\n+  private static class CollectionEntry {\n+    final String name;\n+    final String value;\n+    \n+    CollectionEntry() {\n+      this(null, null);\n+    }\n+    \n+    CollectionEntry(String name, String value) {\n+      this.name = name;\n+      this.value = value;\n+    }\n+  }\n+  \n+  /**\n+   * Created in response to http://code.google.com/p/google-gson/issues/detail?id=96\n+   */\n+  public void disable_testLargeCollectionSerialization() {\n+    int count = 1400000;\n+    List<CollectionEntry> list = new ArrayList<CollectionEntry>(count);\n+    for (int i = 0; i < count; ++i) {\n+      list.add(new CollectionEntry(\"name\"+i,\"value\"+i));\n+    }    \n+    gson.toJson(list);\n+  }\n+  \n+  /**\n+   * Created in response to http://code.google.com/p/google-gson/issues/detail?id=96\n+   */\n+  public void disable_testLargeCollectionDeserialization() {\n+    StringBuilder sb = new StringBuilder();\n+    int count = 87000;\n+    boolean first = true;\n+    sb.append('[');\n+    for (int i = 0; i < count; ++i) {\n+      if (first) {\n+        first = false;\n+      } else {\n+        sb.append(',');\n+      }\n+      sb.append(\"{name:'name\").append(i).append(\"',value:'value\").append(i).append(\"'}\");\n+    }    \n+    sb.append(']');\n+    String json = sb.toString();\n+    Type collectionType = new TypeToken<ArrayList<CollectionEntry>>(){}.getType();    \n+    List<CollectionEntry> list = gson.fromJson(json, collectionType);       \n+    assertEquals(count, list.size());\n+  }\n }", "timestamp": 1236118859, "metainfo": ""}