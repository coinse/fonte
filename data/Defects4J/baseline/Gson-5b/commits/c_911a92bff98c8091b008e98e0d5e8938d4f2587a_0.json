{"sha": "911a92bff98c8091b008e98e0d5e8938d4f2587a", "log": "Removal of all unnecessary \"Default\" InstanceCreators.  While refactoring the code, I found a bug that these InstanceCreators were being called when inside an \"Array\".  This bug is fixed in this change.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n   private static final ByteTypeAdapter BYTE_TYPE_ADAPTER = new ByteTypeAdapter();\n   private static final CharacterTypeAdapter CHARACTER_TYPE_ADAPTER = new CharacterTypeAdapter();\n   private static final DoubleTypeAdapter DOUBLE_TYPE_ADAPTER = new DoubleTypeAdapter();\n-  private static final FloatTypeAdapter FLOAT_TYPE_ADAPTER = new FloatTypeAdapter();\n+  private static final FloatDeserializer FLOAT_TYPE_ADAPTER = new FloatDeserializer();\n   private static final IntegerTypeAdapter INTEGER_TYPE_ADAPTER = new IntegerTypeAdapter();\n   private static final LongTypeAdapter LONG_TYPE_ADAPTER = new LongTypeAdapter();\n   private static final NumberTypeAdapter NUMBER_TYPE_ADAPTER = new NumberTypeAdapter();\n   private static final ShortTypeAdapter SHORT_TYPE_ADAPTER = new ShortTypeAdapter();\n   private static final StringTypeAdapter STRING_TYPE_ADAPTER = new StringTypeAdapter();\n \n-  private static final LinkedListCreator LINKED_LIST_CREATOR = new LinkedListCreator();\n   private static final TreeSetCreator TREE_SET_CREATOR = new TreeSetCreator();\n \n   // The constants DEFAULT_SERIALIZERS, DEFAULT_DESERIALIZERS, and DEFAULT_INSTANCE_CREATORS\n \n   private static ParameterizedTypeHandlerMap<InstanceCreator<?>> getDefaultInstanceCreators() {\n     ParameterizedTypeHandlerMap<InstanceCreator<?>> map =\n-      new ParameterizedTypeHandlerMap<InstanceCreator<?>>();\n+        new ParameterizedTypeHandlerMap<InstanceCreator<?>>();\n     map.register(Enum.class, ENUM_TYPE_ADAPTER);\n-    map.register(URL.class, URL_TYPE_ADAPTER);\n-    map.register(Locale.class, LOCALE_TYPE_ADAPTER);\n     map.register(Map.class, MAP_TYPE_ADAPTER);\n-    map.register(BigDecimal.class, BIG_DECIMAL_TYPE_ADAPTER);\n-    map.register(BigInteger.class, BIG_INTEGER_TYPE_ADAPTER);\n-\n-    // Add primitive instance creators\n-    map.register(Boolean.class, BOOLEAN_TYPE_ADAPTER);\n-    map.register(boolean.class, BOOLEAN_TYPE_ADAPTER);\n-    map.register(Byte.class, BYTE_TYPE_ADAPTER);\n-    map.register(byte.class, BYTE_TYPE_ADAPTER);\n-    map.register(Character.class, CHARACTER_TYPE_ADAPTER);\n-    map.register(char.class, CHARACTER_TYPE_ADAPTER);\n-    map.register(Double.class, DOUBLE_TYPE_ADAPTER);\n-    map.register(double.class, DOUBLE_TYPE_ADAPTER);\n-    map.register(Float.class, FLOAT_TYPE_ADAPTER);\n-    map.register(float.class, FLOAT_TYPE_ADAPTER);\n-    map.register(Integer.class, INTEGER_TYPE_ADAPTER);\n-    map.register(int.class, INTEGER_TYPE_ADAPTER);\n-    map.register(Long.class, LONG_TYPE_ADAPTER);\n-    map.register(long.class, LONG_TYPE_ADAPTER);\n-    map.register(Short.class, SHORT_TYPE_ADAPTER);\n-    map.register(short.class, SHORT_TYPE_ADAPTER);\n-    map.register(String.class, STRING_TYPE_ADAPTER);\n-    \n+\n     // Add Collection type instance creators\n     map.register(Collection.class, COLLECTION_TYPE_ADAPTER);\n-    map.register(List.class, LINKED_LIST_CREATOR);\n-    map.register(Queue.class, LINKED_LIST_CREATOR);\n+    map.register(List.class, COLLECTION_TYPE_ADAPTER);\n+    map.register(Queue.class, COLLECTION_TYPE_ADAPTER);\n \n     map.register(Set.class, TREE_SET_CREATOR);\n     map.register(SortedSet.class, TREE_SET_CREATOR);\n   static void registerSerializersForFloatingPoints(boolean serializeSpecialFloatingPointValues,\n       ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers) {\n     DefaultTypeAdapters.DoubleSerializer doubleSerializer = \n-      new DefaultTypeAdapters.DoubleSerializer(serializeSpecialFloatingPointValues);\n+        new DefaultTypeAdapters.DoubleSerializer(serializeSpecialFloatingPointValues);\n     DefaultTypeAdapters.FloatSerializer floatSerializer = \n-      new DefaultTypeAdapters.FloatSerializer(serializeSpecialFloatingPointValues);\n+        new DefaultTypeAdapters.FloatSerializer(serializeSpecialFloatingPointValues);\n     serializers.registerIfAbsent(Double.class, doubleSerializer);\n     serializers.registerIfAbsent(double.class, doubleSerializer);\n     serializers.registerIfAbsent(Float.class, floatSerializer);\n   }\n \n   static class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n-\n     private final DateFormat format;\n \n     public DefaultDateTypeAdapter(String datePattern) {\n     public JsonElement serialize(T src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.name());\n     }\n+\n     @SuppressWarnings(\"cast\")\n     public T deserialize(JsonElement json, Type classOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n-      return (T) Enum.valueOf((Class<T>)classOfT, json.getAsString());\n-    }\n+      return (T) Enum.valueOf((Class<T>) classOfT, json.getAsString());\n+    }\n+\n     public Enum<?> createInstance(Type type) {\n       Class<Enum<?>> enumClass = (Class<Enum<?>>) type;\n       try {\n         throw new RuntimeException(e);\n       }\n     }\n+\n     @Override\n     public String toString() {\n       return EnumTypeAdapter.class.getSimpleName();\n     }\n   }\n \n-  private static class UrlTypeAdapter implements JsonSerializer<URL>, JsonDeserializer<URL>,\n-      InstanceCreator<URL> {\n+  private static class UrlTypeAdapter implements JsonSerializer<URL>, JsonDeserializer<URL> {\n     public JsonElement serialize(URL src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.toExternalForm());\n     }\n+\n     public URL deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       try {\n         throw new JsonParseException(e);\n       }\n     }\n-    public URL createInstance(Type type) {\n-      try {\n-        return new URL(\"http://google.com/\");\n-      } catch (MalformedURLException e) {\n-        throw new RuntimeException(e);\n-      }\n-    }\n+\n     @Override\n     public String toString() {\n       return UrlTypeAdapter.class.getSimpleName();\n     }\n   }\n \n-  private static class LocaleTypeAdapter implements JsonSerializer<Locale>,\n-      JsonDeserializer<Locale>, InstanceCreator<Locale> {\n+  private static class LocaleTypeAdapter \n+      implements JsonSerializer<Locale>, JsonDeserializer<Locale> {\n     public JsonElement serialize(Locale src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.toString());\n     }\n+\n     public Locale deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       String locale = json.getAsString();\n         return new Locale(language, country, variant);\n       }\n     }\n-    public Locale createInstance(Type type) {\n-      return new Locale(\"en_US\");\n-    }\n+\n     @Override\n     public String toString() {\n       return LocaleTypeAdapter.class.getSimpleName();\n \n   @SuppressWarnings({ \"unchecked\" })\n   private static class CollectionTypeAdapter implements JsonSerializer<Collection>, \n-  JsonDeserializer<Collection>, InstanceCreator<Collection> {\n-\n+      JsonDeserializer<Collection>, InstanceCreator<Collection> {\n     public JsonElement serialize(Collection src, Type typeOfSrc, JsonSerializationContext context) {\n       if (src == null) {\n         return JsonNull.createJsonNull();\n     }\n   }\n \n-  private static class BigDecimalTypeAdapter implements JsonSerializer<BigDecimal>,\n-      JsonDeserializer<BigDecimal>, InstanceCreator<BigDecimal> {\n-\n+  private static class BigDecimalTypeAdapter\n+      implements JsonSerializer<BigDecimal>, JsonDeserializer<BigDecimal> {\n     public JsonElement serialize(BigDecimal src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n       return json.getAsBigDecimal();\n     }\n \n-    public BigDecimal createInstance(Type type) {\n-      return new BigDecimal(0);\n-    }\n     @Override\n     public String toString() {\n       return BigDecimalTypeAdapter.class.getSimpleName();\n     }\n   }\n \n-  private static class BigIntegerTypeAdapter implements JsonSerializer<BigInteger>,\n-      JsonDeserializer<BigInteger>, InstanceCreator<BigInteger> {\n+  private static class BigIntegerTypeAdapter \n+      implements JsonSerializer<BigInteger>, JsonDeserializer<BigInteger> {\n \n     public JsonElement serialize(BigInteger src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n       return json.getAsBigInteger();\n     }\n \n-    public BigInteger createInstance(Type type) {\n-      return new BigInteger(\"0\");\n-    }\n     @Override\n     public String toString() {\n       return BigIntegerTypeAdapter.class.getSimpleName();\n     }\n   }\n \n-  private static class LongTypeAdapter\n-      implements InstanceCreator<Long>, JsonSerializer<Long>, JsonDeserializer<Long> {\n+  private static class LongTypeAdapter implements JsonSerializer<Long>, JsonDeserializer<Long> {\n     public JsonElement serialize(Long src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n         throws JsonParseException {\n       return json.getAsLong();\n     }\n-    \n-    public Long createInstance(Type type) {\n-      return new Long(0L);\n-    }\n \n     @Override\n     public String toString() {\n   }\n \n   private static class IntegerTypeAdapter \n-      implements InstanceCreator<Integer>, JsonSerializer<Integer>, JsonDeserializer<Integer> {\n+      implements JsonSerializer<Integer>, JsonDeserializer<Integer> {\n     public JsonElement serialize(Integer src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n         throws JsonParseException {\n       return json.getAsInt();\n     }\n-    \n-    public Integer createInstance(Type type) {\n-      return new Integer(0);\n-    }\n \n     @Override\n     public String toString() {\n   }\n \n   private static class ShortTypeAdapter\n-      implements InstanceCreator<Short>, JsonSerializer<Short>, JsonDeserializer<Short> {\n+      implements JsonSerializer<Short>, JsonDeserializer<Short> {\n     public JsonElement serialize(Short src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n         throws JsonParseException {\n       return json.getAsShort();\n     }\n-\n-    public Short createInstance(Type type) {\n-      return new Short((short) 0);\n-    }\n     \n     @Override\n     public String toString() {\n     }\n   }\n \n-  private static class ByteTypeAdapter\n-      implements InstanceCreator<Byte>, JsonSerializer<Byte>, JsonDeserializer<Byte> {\n+  private static class ByteTypeAdapter implements JsonSerializer<Byte>, JsonDeserializer<Byte> {\n     public JsonElement serialize(Byte src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n     public Byte deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       return json.getAsByte();\n-    }\n-    \n-    public Byte createInstance(Type type) {\n-      return new Byte((byte) 0);\n     }\n \n     @Override\n     }\n   }\n   \n-  private static class FloatTypeAdapter implements InstanceCreator<Float>, JsonDeserializer<Float> {\n-\n+  private static class FloatDeserializer implements JsonDeserializer<Float> {\n     public Float deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       return json.getAsFloat();\n     }\n-    \n-    public Float createInstance(Type type) {\n-      return new Float(0F);\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return FloatTypeAdapter.class.getSimpleName();\n+\n+    @Override\n+    public String toString() {\n+      return FloatDeserializer.class.getSimpleName();\n     }\n   }\n \n     DoubleSerializer(boolean serializeSpecialDoubleValues) {\n       this.serializeSpecialFloatingPointValues = serializeSpecialDoubleValues;\n     }\n+\n     public JsonElement serialize(Double src, Type typeOfSrc, JsonSerializationContext context) {\n       if (!serializeSpecialFloatingPointValues) {\n         if (Double.isNaN(src) || Double.isInfinite(src)) {\n     }\n   }\n \n-  private static class DoubleTypeAdapter implements InstanceCreator<Double>, \n-      JsonDeserializer<Double> {\n-    \n+  private static class DoubleTypeAdapter implements JsonDeserializer<Double> {\n     public Double deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       return json.getAsDouble();\n     }\n-    \n-    public Double createInstance(Type type) {\n-      return new Double(0D);\n-    }\n \n     @Override\n     public String toString() {\n     }\n   }\n \n-  private static class CharacterTypeAdapter implements InstanceCreator<Character>,\n-      JsonSerializer<Character>, JsonDeserializer<Character> {\n+  private static class CharacterTypeAdapter \n+      implements JsonSerializer<Character>, JsonDeserializer<Character> {\n     public JsonElement serialize(Character src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n         throws JsonParseException {\n       return json.getAsCharacter();\n     }\n-    \n-    public Character createInstance(Type type) {\n-      return new Character('0');\n-    }\n \n     @Override\n     public String toString() {\n     }\n   }\n   \n-  private static class StringTypeAdapter \n-      implements InstanceCreator<String>, JsonSerializer<String>, JsonDeserializer<String> {\n+  private static class StringTypeAdapter\n+      implements JsonSerializer<String>, JsonDeserializer<String> {\n     public JsonElement serialize(String src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n       return json.getAsString();\n     }\n     \n-    public String createInstance(Type type) {\n-      return \"\";\n-    }\n-    \n     @Override\n     public String toString() {\n       return StringTypeAdapter.class.getSimpleName();\n   }\n \n   private static class BooleanTypeAdapter \n-      implements InstanceCreator<Boolean>, JsonSerializer<Boolean>, JsonDeserializer<Boolean> {\n+      implements JsonSerializer<Boolean>, JsonDeserializer<Boolean> {\n     public JsonElement serialize(Boolean src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n         throws JsonParseException {\n       return json.getAsBoolean();\n     }\n-    \n-    public Boolean createInstance(Type type) {\n-      return new Boolean(false);\n-    }\n \n     @Override\n     public String toString() {\n       return BooleanTypeAdapter.class.getSimpleName();\n-    }\n-  }\n-\n-  private static class LinkedListCreator implements InstanceCreator<LinkedList<?>> {\n-    public LinkedList<?> createInstance(Type type) {\n-      return new LinkedList<Object>();\n-    }\n-    @Override\n-    public String toString() {\n-      return LinkedListCreator.class.getSimpleName();\n     }\n   }\n \n--- a/gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java\n       JsonDeserializationContext context) throws JsonParseException {\n     JsonArrayDeserializationVisitor<T> visitor = new JsonArrayDeserializationVisitor<T>(\n         jsonArray, arrayType, navigatorFactory, objectConstructor, deserializers, context);\n-    Object target = visitor.getTarget();\n-    ObjectNavigator on = navigatorFactory.create(target, arrayType);\n+    ObjectNavigator on = navigatorFactory.create(null, arrayType);\n     on.accept(visitor);\n     return visitor.getTarget();\n   }\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n \n   final Object visitChildAsObject(Type childType, JsonElement jsonChild) {\n     JsonDeserializationVisitor<?> childVisitor =\n-      new JsonObjectDeserializationVisitor<Object>(jsonChild, childType,\n-          factory, objectConstructor, deserializers, context);\n+        new JsonObjectDeserializationVisitor<Object>(jsonChild, childType,\n+            factory, objectConstructor, deserializers, context);\n     return visitChild(childType, childVisitor);\n   }\n \n   final Object visitChildAsArray(Type childType, JsonArray jsonChild) {\n     JsonDeserializationVisitor<?> childVisitor =\n-      new JsonArrayDeserializationVisitor<Object>(jsonChild.getAsJsonArray(), childType,\n-          factory, objectConstructor, deserializers, context);\n+        new JsonArrayDeserializationVisitor<Object>(jsonChild.getAsJsonArray(), childType,\n+            factory, objectConstructor, deserializers, context);\n     return visitChild(childType, childVisitor);\n   }\n \n   private Object visitChild(Type type, JsonDeserializationVisitor<?> childVisitor) {\n-    Object child = childVisitor.getTarget();\n-    ObjectNavigator on = factory.create(child, type);\n+    ObjectNavigator on = factory.create(null, type);\n     on.accept(childVisitor);\n     // the underlying object may have changed during the construction phase\n     // This happens primarily because of custom deserializers", "timestamp": 1230421396, "metainfo": ""}