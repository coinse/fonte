{"sha": "e19672d0a394d552469147e12a70bf81413f0076", "log": "Throw the right exceptions when primitives fail to parse.", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java\n \n package com.google.gson.internal.bind;\n \n+import com.google.gson.JsonSyntaxException;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n \n \n   @Override\n   public BigDecimal read(JsonReader reader) throws IOException {\n-    return new BigDecimal(reader.nextString());\n+    try {\n+      return new BigDecimal(reader.nextString());\n+    } catch (NumberFormatException e) {\n+      throw new JsonSyntaxException(e);\n+    }\n   }\n \n   @Override\n--- a/gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java\n \n package com.google.gson.internal.bind;\n \n+import com.google.gson.JsonSyntaxException;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n \n \n   @Override\n   public BigInteger read(JsonReader reader) throws IOException {\n-    return new BigInteger(reader.nextString());\n+    try {\n+      return new BigInteger(reader.nextString());\n+    } catch (NumberFormatException e) {\n+      throw new JsonSyntaxException(e);\n+    }\n   }\n \n   @Override\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n \n package com.google.gson.internal.bind;\n \n+import com.google.gson.JsonSyntaxException;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n \n   public static final TypeAdapter<Number> BYTE = new TypeAdapter<Number>() {\n     public Number read(JsonReader reader) throws IOException {\n-      int intValue = reader.nextInt();\n-      return (byte) intValue;\n+      try {\n+        int intValue = reader.nextInt();\n+        return (byte) intValue;\n+      } catch (NumberFormatException e) {\n+        throw new JsonSyntaxException(e);\n+      }\n     }\n     public void write(JsonWriter writer, Number value) throws IOException {\n       writer.value(value);\n \n   public static final TypeAdapter<Number> SHORT = new TypeAdapter<Number>() {\n     public Number read(JsonReader reader) throws IOException {\n-      return (short) reader.nextInt();\n+      try {\n+        return (short) reader.nextInt();\n+      } catch (NumberFormatException e) {\n+        throw new JsonSyntaxException(e);\n+      }\n     }\n     public void write(JsonWriter writer, Number value) throws IOException {\n       writer.value(value);\n \n   public static final TypeAdapter<Number> INTEGER = new TypeAdapter<Number>() {\n     public Number read(JsonReader reader) throws IOException {\n-      return reader.nextInt();\n+      try {\n+        return reader.nextInt();\n+      } catch (NumberFormatException e) {\n+        throw new JsonSyntaxException(e);\n+      }\n     }\n     public void write(JsonWriter writer, Number value) throws IOException {\n       writer.value(value);\n \n   public static final TypeAdapter<Number> LONG = new TypeAdapter<Number>() {\n     public Number read(JsonReader reader) throws IOException {\n-      return reader.nextLong();\n+      try {\n+        return reader.nextLong();\n+      } catch (NumberFormatException e) {\n+        throw new JsonSyntaxException(e);\n+      }\n     }\n     public void write(JsonWriter writer, Number value) throws IOException {\n       writer.value(value);\n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n     assertEquals(\"[-9332]\", gson.toJson(target, Integer[].class));\n   }\n \n-  public void testPrimitiveIntegerAutoboxedInASingleElementArrayDeserialization() {\n-    int expected = 1;\n-    int actual = gson.fromJson(\"[1]\", int.class);\n-    assertEquals(expected, actual);\n-\n-    actual = gson.fromJson(\"[1]\", Integer.class);\n-    assertEquals(expected, actual);\n-  }\n-\n   public void testReallyLongValuesSerialization() {\n     long value = 333961828784581L;\n     assertEquals(\"333961828784581\", gson.toJson(value));\n     assertEquals(\"[-23]\", gson.toJson(target, Long[].class));\n   }\n \n-  public void testPrimitiveLongAutoboxedInASingleElementArrayDeserialization() {\n-    long expected = 1L;\n-    long actual = gson.fromJson(\"[1]\", long.class);\n-    assertEquals(expected, actual);\n-\n-    actual = gson.fromJson(\"[1]\", Long.class);\n-    assertEquals(expected, actual);\n-  }\n-\n   public void testPrimitiveBooleanAutoboxedSerialization() {\n     assertEquals(\"true\", gson.toJson(true));\n     assertEquals(\"false\", gson.toJson(false));\n   }\n \n-  public void testPrimitiveBooleanAutoboxedDeserialization() {\n-    assertEquals(Boolean.FALSE, gson.fromJson(\"[false]\", Boolean.class));\n-    assertEquals(Boolean.TRUE, gson.fromJson(\"[true]\", Boolean.class));\n-\n+  public void testBooleanDeserialization() {\n     boolean value = gson.fromJson(\"false\", boolean.class);\n     assertEquals(false, value);\n     value = gson.fromJson(\"true\", boolean.class);\n     assertEquals(\"[false]\", gson.toJson(target, Boolean[].class));\n   }\n \n-  public void testPrimitiveBooleanAutoboxedInASingleElementArrayDeserialization() {\n-    assertEquals(Boolean.FALSE, gson.fromJson(\"[false]\", Boolean.class));\n-    assertEquals(Boolean.TRUE, gson.fromJson(\"[true]\", Boolean.class));\n-\n-    boolean value = gson.fromJson(\"[false]\", boolean.class);\n-    assertEquals(false, value);\n-    value = gson.fromJson(\"[true]\", boolean.class);\n-    assertEquals(true, value);\n-  }\n-\n   public void testNumberSerialization() {\n     Number expected = 1L;\n     String json = gson.toJson(expected);\n     assertEquals(expected.doubleValue(), actual1);\n   }\n \n-  public void testPrimitiveDoubleAutoboxedInASingleElementArrayDeserialization() {\n-    double expected = -122.08;\n-    double actual = gson.fromJson(\"[-122.08]\", double.class);\n-    assertEquals(expected, actual);\n-\n-    actual = gson.fromJson(\"[-122.08]\", Double.class);\n-    assertEquals(expected, actual);\n-  }\n-\n   public void testBigDecimalSerialization() {\n     BigDecimal target = new BigDecimal(\"-122.0e-21\");\n     String json = gson.toJson(target);\n     assertEquals(target[0], new BigDecimal(actual));\n   }\n \n-  public void testBigDecimalInASingleElementArrayDeserialization() {\n-    BigDecimal expected = new BigDecimal(\"-122.08e-21\");\n-    BigDecimal actual = gson.fromJson(\"[-122.08e-21]\", BigDecimal.class);\n-    assertEquals(expected, actual);\n-  }\n-\n   public void testSmallValueForBigDecimalSerialization() {\n     BigDecimal target = new BigDecimal(\"1.55\");\n     String actual = gson.toJson(target);\n     assertEquals(target[0], new BigInteger(actual));\n   }\n \n-  public void testBigIntegerInASingleElementArrayDeserialization() {\n-    BigInteger expected = new BigInteger(\"34343434343424242423432323243243242\");\n-    BigInteger actual = gson.fromJson(\"[34343434343424242423432323243243242]\", BigInteger.class);\n-    assertEquals(expected, actual);\n-  }\n-\n   public void testSmallValueForBigIntegerSerialization() {\n     BigInteger target = new BigInteger(\"15\");\n     String actual = gson.toJson(target);\n     try {\n       gson.fromJson(\"15.099\", BigInteger.class);\n       fail(\"BigInteger can not be decimal values.\");\n-    } catch (JsonParseException expected) { }\n+    } catch (JsonSyntaxException expected) { }\n   }\n \n   public void testMoreSpecificSerialization() {\n     Serializable serializableString = expected;\n     String actualJson = gson.toJson(serializableString, Serializable.class);\n     assertFalse(expectedJson.equals(actualJson));\n-  }\n-\n-  public void testOverridingDefaultPrimitiveSerialization() {\n-    CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter();\n-    gson = new GsonBuilder()\n-        .registerTypeAdapter(long.class, typeAdapter)\n-        .registerTypeAdapter(Long.class, typeAdapter)\n-        .create();\n-    long value = 1L;\n-    String serializedValue = gson.toJson(value);\n-    assertEquals(String.valueOf(value + CrazyLongTypeAdapter.DIFFERENCE), serializedValue);\n-\n-    long deserializedValue = gson.fromJson(serializedValue, long.class);\n-    assertEquals(value, deserializedValue);\n   }\n \n   private String extractElementFromArray(String json) {\n     try {\n       gson.fromJson(\"NaN\", BigDecimal.class);\n       fail(\"Gson should not accept NaN for deserialization by default.\");\n-    } catch (JsonParseException expected) {\n+    } catch (JsonSyntaxException expected) {\n     }\n   }\n \n     try {\n       gson.fromJson(\"Infinity\", BigDecimal.class);\n       fail(\"Gson should not accept positive infinity for deserialization with BigDecimal\");\n-    } catch (JsonParseException expected) {\n+    } catch (JsonSyntaxException expected) {\n     }\n   }\n \n     try {\n       gson.fromJson(\"-Infinity\", BigDecimal.class);\n       fail(\"Gson should not accept positive infinity for deserialization\");\n-    } catch (JsonParseException expected) {\n+    } catch (JsonSyntaxException expected) {\n     }\n   }\n \n     } catch (JsonSyntaxException expected) {}\n   }\n \n-  public void testDeserializingDecimalPointValuesAsIntegerFails() {\n-    try {\n-      gson.fromJson(\"1.0\", Integer.class);\n-      fail();\n-    } catch (JsonParseException expected) {\n+  public void testDeserializingDecimalPointValueZeroSucceeds() {\n+    assertEquals(1, (int) gson.fromJson(\"1.0\", Integer.class));\n+  }\n+\n+  public void testDeserializingNonZeroDecimalPointValuesAsIntegerFails() {\n+    try {\n+      gson.fromJson(\"1.02\", Byte.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {\n+    }\n+    try {\n+      gson.fromJson(\"1.02\", Short.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {\n+    }\n+    try {\n+      gson.fromJson(\"1.02\", Integer.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {\n+    }\n+    try {\n+      gson.fromJson(\"1.02\", Long.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {\n     }\n   }\n \n     try {\n       gson.fromJson(\"-122.08e-213\", Integer.class);\n       fail();\n-    } catch (JsonParseException expected) {\n+    } catch (JsonSyntaxException expected) {\n     }\n   }\n \n     try {\n       gson.fromJson(\"-122.08e-2132\", long.class);\n       fail();\n-    } catch (JsonParseException expected) {\n+    } catch (JsonSyntaxException expected) {\n     }\n   }\n \n     try {\n       gson.fromJson(\"-122.08e-213\", BigInteger.class);\n       fail();\n-    } catch (JsonParseException expected) {\n+    } catch (JsonSyntaxException expected) {\n     }\n   }\n ", "timestamp": 1315544664, "metainfo": ""}