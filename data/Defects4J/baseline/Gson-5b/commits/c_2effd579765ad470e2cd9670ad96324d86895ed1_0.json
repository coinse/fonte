{"sha": "2effd579765ad470e2cd9670ad96324d86895ed1", "log": "Deserialization will no longer call the default constructor or InstanceCreator if the object being deserialized has a custom deserializer.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java\n       JsonDeserializationContext context) throws JsonParseException {\n     JsonObjectDeserializationVisitor<T> visitor = new JsonObjectDeserializationVisitor<T>(\n         jsonObject, typeOfT, navigatorFactory, objectConstructor, deserializers, context);\n-    Object target = visitor.getTarget();\n-    ObjectNavigator on = navigatorFactory.create(target, typeOfT);\n+    ObjectNavigator on = navigatorFactory.create(null, typeOfT);\n     on.accept(visitor);\n     return visitor.getTarget();\n   }\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n     this.context = context;\n   }\n \n-  T getTarget() {\n+  public T getTarget() {\n     if (target == null) {\n       target = constructTarget();\n     }\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n     this.serializeNulls = serializeNulls;\n     this.serializers = serializers;\n     this.context = context;\n+  }\n+  \n+  public Object getTarget() {\n+    return null;\n   }\n \n   public void startVisitingObject(Object node) {\n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n      * This is called to visit a field of the current object using a custom handler\n      */\n     public boolean visitFieldUsingCustomHandler(Field f, Type actualTypeOfField, Object parent);\n+    \n+    /**\n+     * Retrieve the current target\n+     */\n+    Object getTarget();\n   }\n \n   private final ExclusionStrategy exclusionStrategy;\n    * If a field is null, it does not get visited.\n    */\n   public void accept(Visitor visitor) {\n-    if (obj == null) {\n-      return;\n-    }\n-    TypeInfo objTypeInfo = new TypeInfo(objType);\n-    if (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {\n-      return;\n-    }\n-\n-    if (ancestors.contains(obj)) {\n-      throw new IllegalStateException(\"Circular reference found: \" + obj);\n-    }\n-    ancestors.push(obj);\n-\n-    try {\n-      boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler(obj, objType);\n-      if (!visitedWithCustomHandler) {\n+    boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler(obj, objType);\n+    if (!visitedWithCustomHandler) {\n+      Object objectToVisit = (obj == null) ? visitor.getTarget() : obj;\n+      if (objectToVisit == null) {\n+        return;\n+      }\n+      TypeInfo objTypeInfo = new TypeInfo(objType);\n+      if (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {\n+        return;\n+      }\n+  \n+      if (ancestors.contains(objectToVisit)) {\n+        throw new IllegalStateException(\"Circular reference found: \" + objectToVisit);\n+      }\n+      ancestors.push(objectToVisit);\n+  \n+      try {\n         if (objTypeInfo.isArray()) {\n-          visitor.visitArray(obj, objType);\n+          visitor.visitArray(objectToVisit, objType);\n         } else {\n-          visitor.startVisitingObject(obj);\n+          visitor.startVisitingObject(objectToVisit);\n           // For all classes in the inheritance hierarchy (including the current class),\n           // visit all fields\n           for (Class<?> curr = objTypeInfo.getRawClass();\n           curr != null && !curr.equals(Object.class); curr = curr.getSuperclass()) {\n             if (!curr.isSynthetic()) {\n-              navigateClassFields(obj, curr, visitor);\n+              navigateClassFields(objectToVisit, curr, visitor);\n             }\n           }\n         }\n+      } finally {\n+        ancestors.pop();\n       }\n-    } finally {\n-      ancestors.pop();\n     }\n   }\n \n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import java.lang.reflect.Type;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Functional Test exercising custom deserialization only.  When test applies to both \n+ * serialization and deserialization then add it to CustomTypeAdapterTest.\n+ *\n+ * @author Joel Leitch\n+ */\n+public class CustomDeserializerTest extends TestCase {\n+  private static final String DEFAULT_VALUE = \"test123\";\n+  private static final String SUFFIX = \"blah\";\n+  \n+  private Gson gson;\n+  \n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new GsonBuilder().registerTypeAdapter(DataHolder.class, new DataHolderDeserializer()).create();\n+  }\n+  \n+  public void testDefaultConstructorNotCalledOnObject() throws Exception {\n+    DataHolder data = new DataHolder(DEFAULT_VALUE);\n+    String json = gson.toJson(data);\n+    \n+    DataHolder actual = gson.fromJson(json, DataHolder.class);\n+    assertEquals(DEFAULT_VALUE + SUFFIX, actual.getData());\n+  }\n+  \n+  public void testDefaultConstructorNotCalledOnField() throws Exception {\n+    DataHolderWrapper dataWrapper = new DataHolderWrapper(new DataHolder(DEFAULT_VALUE));\n+    String json = gson.toJson(dataWrapper);\n+    \n+    DataHolderWrapper actual = gson.fromJson(json, DataHolderWrapper.class);\n+    assertEquals(DEFAULT_VALUE + SUFFIX, actual.getWrappedData().getData());\n+  }\n+\n+  private static class DataHolder {\n+    private final String data;\n+\n+    public DataHolder() {\n+      throw new IllegalStateException();\n+    }\n+    \n+    public DataHolder(String data) {\n+      this.data = data;\n+    }\n+    \n+    public String getData() {\n+      return data;\n+    }\n+  }\n+  \n+  private static class DataHolderWrapper {\n+    private final DataHolder wrappedData;\n+    \n+    public DataHolderWrapper() {\n+      this(new DataHolder(DEFAULT_VALUE));\n+    }\n+    \n+    public DataHolderWrapper(DataHolder data) {\n+      this.wrappedData = data;\n+    }\n+\n+    public DataHolder getWrappedData() {\n+      return wrappedData;\n+    }\n+  }\n+  \n+  private static class DataHolderDeserializer implements JsonDeserializer<DataHolder> {\n+    public DataHolder deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+        throws JsonParseException {\n+      JsonObject jsonObj = json.getAsJsonObject();\n+      String dataString = jsonObj.get(\"data\").getAsString();\n+      return new DataHolder(dataString + SUFFIX);\n+    }\n+  }\n+}", "timestamp": 1227638567, "metainfo": ""}