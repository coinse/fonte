{"sha": "e839336eea7aa7e414108a6d33703349adc7a705", "log": "Incorporated comments from the code review r355", "commit": "\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n   private int dateStyle;\n   private int timeStyle;\n   private boolean serializeSpecialFloatingPointValues;\n+  private boolean escapeHtmlChars;\n \n   /**\n    * Creates a GsonBuilder instance that can be used to build Gson with various configuration\n     ignoreVersionsAfter = VersionConstants.IGNORE_VERSIONS;\n     serializeLongAsString = false;\n     serializeInnerClasses = true;\n+    escapeHtmlChars = true;\n     anonAndLocalClassExclusionStrategy = new AnonymousAndLocalClassExclusionStrategy();\n     innerClassExclusionStrategy = new InnerClassExclusionStrategy();\n     modifierBasedExclusionStrategy = Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY;\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n    */\n   public GsonBuilder setPrettyPrinting() {\n-    setFormatter(new JsonPrintFormatter());\n+    setFormatter(new JsonPrintFormatter(escapeHtmlChars));\n     return this;\n   }\n   \n   /**\n-   * Configures Gson to output Json that fits in a page for pretty printing. This option only\n-   * affects Json serialization.\n-   *\n-   * @param escapeHtmlChars true if specific HTML characters should be escaped\n+   * By default, Gson escapes HTML characters such as &lt; &gt; etc. Use this option to configure\n+   * Gson to pass-through HTML characters as is.\n+   * \n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n    * @since 1.3\n    */\n-  public GsonBuilder setPrettyPrinting(boolean escapeHtmlChars) {\n-    setFormatter(new JsonPrintFormatter(escapeHtmlChars));\n-    return this;\n-  }\n-  \n-  /**\n-   * Configures Gson to output Json in a compact format.\n-   *\n-   * @param escapeHtmlChars true if specific HTML characters should be escaped\n-   * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n-   * @since 1.3\n-   */\n-  public GsonBuilder setCompactPrinting(boolean escapeHtmlChars) {\n-    setFormatter(new JsonCompactFormatter(escapeHtmlChars));\n+  public GsonBuilder disableHtmlEscaping() {\n+    this.escapeHtmlChars = false;\n     return this;\n   }\n \n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n     String result = gson.toJson(target);\n     assertFalse(result.equals('\"' + target + '\"'));\n     \n-    gson = new GsonBuilder().setCompactPrinting(false).create();\n+    gson = new GsonBuilder().disableHtmlEscaping().create();\n     result = gson.toJson(target);\n     assertTrue(result.equals('\"' + target + '\"'));\n   }", "timestamp": 1230663823, "metainfo": ""}