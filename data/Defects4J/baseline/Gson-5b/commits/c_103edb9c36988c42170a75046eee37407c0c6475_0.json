{"sha": "103edb9c36988c42170a75046eee37407c0c6475", "log": "Don't return null on an unexpected EOF unless the document is empty. This brings us back to compatibility with GSON 1.5.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Streams.java\n+++ b/gson/src/main/java/com/google/gson/Streams.java\n package com.google.gson;\n \n import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n import com.google.gson.stream.MalformedJsonException;\n-import com.google.gson.stream.JsonWriter;\n-\n import java.io.EOFException;\n import java.io.IOException;\n import java.io.Writer;\n    * Takes a reader in any state and returns the next value as a JsonElement.\n    */\n   static JsonElement parse(JsonReader reader) throws JsonParseException {\n+    boolean isEmpty = true;\n     try {\n-      switch (reader.peek()) {\n-      case STRING:\n-        return new JsonPrimitive(reader.nextString());\n-      case NUMBER:\n-        String number = reader.nextString();\n-        return new JsonPrimitive(JsonPrimitive.stringToNumber(number));\n-      case BOOLEAN:\n-        return new JsonPrimitive(reader.nextBoolean());\n-      case NULL:\n-        reader.nextNull();\n+      reader.peek();\n+      isEmpty = false;\n+      return parseRecursive(reader);\n+    } catch (EOFException e) {\n+      /*\n+       * For compatibility with JSON 1.5 and earlier, we return a JsonNull for\n+       * empty documents instead of throwing.\n+       */\n+      if (isEmpty) {\n         return JsonNull.createJsonNull();\n-      case BEGIN_ARRAY:\n-        JsonArray array = new JsonArray();\n-        reader.beginArray();\n-        while (reader.hasNext()) {\n-          array.add(parse(reader));\n-        }\n-        reader.endArray();\n-        return array;\n-      case BEGIN_OBJECT:\n-        JsonObject object = new JsonObject();\n-        reader.beginObject();\n-        while (reader.hasNext()) {\n-          object.add(reader.nextName(), parse(reader));\n-        }\n-        reader.endObject();\n-        return object;\n-      case END_DOCUMENT:\n-      case NAME:\n-      case END_OBJECT:\n-      case END_ARRAY:\n-      default:\n-        throw new IllegalArgumentException();\n+      } else {\n+        throw new JsonIOException(e);\n       }\n-    } catch (EOFException e) {\n-      return JsonNull.createJsonNull();\n     } catch (MalformedJsonException e) {\n       throw new JsonSyntaxException(e);\n     } catch (IOException e) {\n       throw new JsonIOException(e);\n     } catch (NumberFormatException e) {\n       throw new JsonSyntaxException(e);\n+    }\n+  }\n+\n+  private static JsonElement parseRecursive(JsonReader reader) throws IOException {\n+    switch (reader.peek()) {\n+    case STRING:\n+      return new JsonPrimitive(reader.nextString());\n+    case NUMBER:\n+      String number = reader.nextString();\n+      return new JsonPrimitive(JsonPrimitive.stringToNumber(number));\n+    case BOOLEAN:\n+      return new JsonPrimitive(reader.nextBoolean());\n+    case NULL:\n+      reader.nextNull();\n+      return JsonNull.createJsonNull();\n+    case BEGIN_ARRAY:\n+      JsonArray array = new JsonArray();\n+      reader.beginArray();\n+      while (reader.hasNext()) {\n+        array.add(parseRecursive(reader));\n+      }\n+      reader.endArray();\n+      return array;\n+    case BEGIN_OBJECT:\n+      JsonObject object = new JsonObject();\n+      reader.beginObject();\n+      while (reader.hasNext()) {\n+        object.add(reader.nextName(), parseRecursive(reader));\n+      }\n+      reader.endObject();\n+      return object;\n+    case END_DOCUMENT:\n+    case NAME:\n+    case END_OBJECT:\n+    case END_ARRAY:\n+    default:\n+      throw new IllegalArgumentException();\n     }\n   }\n \n--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n import com.google.gson.GsonBuilder;\n import com.google.gson.InstanceCreator;\n import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n import com.google.gson.common.TestTypes.ArrayOfObjects;\n import com.google.gson.common.TestTypes.BagOfPrimitiveWrappers;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n import com.google.gson.common.TestTypes.Nested;\n import com.google.gson.common.TestTypes.PrimitiveArray;\n \n+import com.google.gson.reflect.TypeToken;\n import java.util.List;\n import junit.framework.TestCase;\n \n   public void testEmptyStringDeserialization() throws Exception {\n     Object object = gson.fromJson(\"\", Object.class);\n     assertNull(object);\n+  }\n+\n+  public void testTruncatedDeserialization() {\n+    try {\n+      gson.fromJson(\"[\\\"a\\\", \\\"b\\\",\", new TypeToken<List<String>>() {}.getType());\n+      fail();\n+    } catch (JsonParseException expected) {\n+    }\n   }\n \n   public void testNullDeserialization() throws Exception {", "timestamp": 1289243765, "metainfo": ""}