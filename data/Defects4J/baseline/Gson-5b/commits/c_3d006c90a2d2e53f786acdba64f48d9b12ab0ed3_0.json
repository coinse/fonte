{"sha": "3d006c90a2d2e53f786acdba64f48d9b12ab0ed3", "log": "equals & hashCode for subclasses of JsonElement.  Resolves issue 64.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonArray.java\n+++ b/gson/src/main/java/com/google/gson/JsonArray.java\n   }\n \n   @Override\n+  public boolean equals(Object o) {\n+    return o instanceof JsonArray && ((JsonArray) o).elements.equals(elements);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return elements.hashCode();\n+  }\n+\n+  @Override\n   protected void toString(Appendable sb, Escaper escaper) throws IOException {\n     sb.append('[');\n     boolean first = true;\n--- a/gson/src/main/java/com/google/gson/JsonObject.java\n+++ b/gson/src/main/java/com/google/gson/JsonObject.java\n    */\n   public JsonObject getAsJsonObject(String memberName) {\n     return (JsonObject) members.get(memberName);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    return o instanceof JsonObject\n+        && ((JsonObject) o).members.equals(members);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return members.hashCode();\n   }\n \n   @Override\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n       return getAsNumber().longValue() == other.getAsNumber().longValue();\n     }\n     if (isFloatingPoint(this) && isFloatingPoint(other)) {\n-      return getAsNumber().doubleValue() == other.getAsNumber().doubleValue();\n+      double a = getAsNumber().doubleValue();\n+      double b = other.getAsNumber().doubleValue();\n+      return a == b || (Double.isNaN(a) && Double.isNaN(b));\n     }\n     return value.equals(other.value);\n   }\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/JsonArrayTest.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import com.google.gson.common.MoreAsserts;\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Jesse Wilson\n+ */\n+public final class JsonArrayTest extends TestCase {\n+\n+  public void testEqualsOnEmptyArray() {\n+    MoreAsserts.assertEqualsAndHashCode(new JsonArray(), new JsonArray());\n+  }\n+\n+  public void testEqualsNonEmptyArray() {\n+    JsonArray a = new JsonArray();\n+    JsonArray b = new JsonArray();\n+\n+    a.add(new JsonObject());\n+    assertFalse(a.equals(b));\n+    assertFalse(b.equals(a));\n+\n+    b.add(new JsonObject());\n+    MoreAsserts.assertEqualsAndHashCode(a, b);\n+\n+    a.add(new JsonObject());\n+    assertFalse(a.equals(b));\n+    assertFalse(b.equals(a));\n+\n+    b.add(new JsonNull());\n+    assertFalse(a.equals(b));\n+    assertFalse(b.equals(a));\n+  }\n+}\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/JsonNullTest.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import com.google.gson.common.MoreAsserts;\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Jesse Wilson\n+ */\n+public final class JsonNullTest extends TestCase {\n+\n+  public void testEqualsAndHashcode() {\n+    MoreAsserts.assertEqualsAndHashCode(new JsonNull(), new JsonNull());\n+    MoreAsserts.assertEqualsAndHashCode(new JsonNull(), JsonNull.createJsonNull());\n+    MoreAsserts.assertEqualsAndHashCode(JsonNull.createJsonNull(), JsonNull.createJsonNull());\n+  }\n+}\n--- a/gson/src/test/java/com/google/gson/JsonObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonObjectTest.java\n \n package com.google.gson;\n \n+import com.google.gson.common.MoreAsserts;\n import junit.framework.TestCase;\n \n /**\n   public void testReadPropertyWithEmptyStringName() {\n     JsonObject jsonObj = new JsonParser().parse(\"{\\\"\\\":true}\").getAsJsonObject();\n     assertEquals(true, jsonObj.get(\"\").getAsBoolean());\n+  }\n \n+  public void testEqualsOnEmptyObject() {\n+    MoreAsserts.assertEqualsAndHashCode(new JsonObject(), new JsonObject());\n+  }\n+\n+  public void testEqualsNonEmptyObject() {\n+    JsonObject a = new JsonObject();\n+    JsonObject b = new JsonObject();\n+\n+    a.add(\"foo\", new JsonObject());\n+    assertFalse(a.equals(b));\n+    assertFalse(b.equals(a));\n+\n+    b.add(\"foo\", new JsonObject());\n+    MoreAsserts.assertEqualsAndHashCode(a, b);\n+\n+    a.add(\"bar\", new JsonObject());\n+    assertFalse(a.equals(b));\n+    assertFalse(b.equals(a));\n+\n+    b.add(\"bar\", new JsonNull());\n+    assertFalse(a.equals(b));\n+    assertFalse(b.equals(a));\n   }\n }\n--- a/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java\n \n package com.google.gson;\n \n+import com.google.gson.common.MoreAsserts;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n-\n import junit.framework.TestCase;\n \n /**\n  * Unit test for the {@link JsonPrimitive} class.\n- * \n+ *\n  * @author Joel Leitch\n  */\n public class JsonPrimitiveTest extends TestCase {\n \n   public void testBoolean() throws Exception {\n     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE);\n-    \n+\n     assertTrue(json.isBoolean());\n     assertTrue(json.getAsBoolean());\n   }\n-  \n+\n   public void testParsingStringAsBoolean() throws Exception {\n     JsonPrimitive json = new JsonPrimitive(\"true\");\n-    \n+\n     assertFalse(json.isBoolean());\n     assertTrue(json.getAsBoolean());\n   }\n-  \n+\n   public void testParsingStringAsNumber() throws Exception {\n     JsonPrimitive json = new JsonPrimitive(\"1\");\n \n     assertEquals(new BigInteger(\"1\"), json.getAsBigInteger());\n     assertEquals(new BigDecimal(\"1\"), json.getAsBigDecimal());\n   }\n-  \n+\n   public void testStringsAndChar() throws Exception {\n     JsonPrimitive json = new JsonPrimitive(\"abc\");\n     assertTrue(json.isString());\n     assertEquals('a', json.getAsCharacter());\n     assertEquals(\"abc\", json.getAsString());\n-    \n+\n     json = new JsonPrimitive('z');\n     assertTrue(json.isString());\n     assertEquals('z', json.getAsCharacter());\n     assertEquals(\"z\", json.getAsString());\n   }\n-  \n+\n   public void testExponential() throws Exception {\n     JsonPrimitive json = new JsonPrimitive(\"1E+7\");\n \n     assertEquals(new BigDecimal(\"1E+7\"), json.getAsBigDecimal());\n     assertEquals(new Double(\"1E+7\"), json.getAsDouble(), 0.00001);\n     assertEquals(new Float(\"1E+7\"), json.getAsDouble(), 0.00001);\n-    \n+\n     try {\n       json.getAsInt();\n       fail(\"Integers can not handle exponents like this.\");\n     } catch (NumberFormatException expected) { }\n   }\n-  \n+\n   public void testByteEqualsShort() {\n     JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n     JsonPrimitive p2 = new JsonPrimitive(new Short((short)10));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n-  \n+\n   public void testValidJsonOnToString() throws Exception {\n     JsonPrimitive json = new JsonPrimitive(\"Some\\nEscaped\\nValue\");\n     assertEquals(\"\\\"Some\\\\nEscaped\\\\nValue\\\"\", json.toString());\n-    \n+\n     json = new JsonPrimitive(new BigDecimal(\"1.333\"));\n     assertEquals(\"1.333\", json.toString());\n   }\n+\n+  public void testEquals() {\n+    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(\"A\"), new JsonPrimitive(\"A\"));\n+    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(true), new JsonPrimitive(true));\n+    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(5L), new JsonPrimitive(5L));\n+    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive('a'), new JsonPrimitive('a'));\n+    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NaN), new JsonPrimitive(Float.NaN));\n+    assertFalse(new JsonPrimitive(\"a\").equals(new JsonPrimitive(\"b\")));\n+    assertFalse(new JsonPrimitive(true).equals(new JsonPrimitive(false)));\n+    assertFalse(new JsonPrimitive(0).equals(new JsonPrimitive(1)));\n+  }\n+\n+  public void testEqualsAcrossTypes() {\n+    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(\"a\"), new JsonPrimitive('a'));\n+    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(new BigInteger(\"0\")), new JsonPrimitive(0));\n+    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(0), new JsonPrimitive(0L));\n+    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(new BigInteger(\"0\")), new JsonPrimitive(0));\n+    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NaN), new JsonPrimitive(Double.NaN));\n+  }\n+\n+  public void testEqualsDoesNotEquateStringAndNonStringTypes() {\n+    assertFalse(new JsonPrimitive(\"true\").equals(new JsonPrimitive(true)));\n+    assertFalse(new JsonPrimitive(\"0\").equals(new JsonPrimitive(0)));\n+    assertFalse(new JsonPrimitive(\"NaN\").equals(new JsonPrimitive(Float.NaN)));\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/common/MoreAsserts.java\n+++ b/gson/src/test/java/com/google/gson/common/MoreAsserts.java\n     }\n     Assert.fail(value + \" not present in \" + collection);\n   }\n+\n+  public static void assertEqualsAndHashCode(Object a, Object b) {\n+    Assert.assertTrue(a.equals(b));\n+    Assert.assertTrue(b.equals(a));\n+    Assert.assertEquals(a.hashCode(), b.hashCode());\n+    Assert.assertFalse(a.equals(null));\n+    Assert.assertFalse(a.equals(new Object()));\n+  }\n }", "timestamp": 1297728860, "metainfo": ""}