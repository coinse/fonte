{"sha": "b50277c9af513619a60a670f29b800546fa2cd5b", "log": "revised prefix for rest packages to com.google.gson.rest from com.google.gson.webservice.rest", "commit": "\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/rest/client/RestClient.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.client;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.rest.definition.RestCallSpec;\n+import com.google.gson.rest.definition.RestRequest;\n+import com.google.gson.rest.definition.RestResource;\n+import com.google.gson.rest.definition.RestResponse;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n+\n+/**\n+ * Main class used by clients to access a Gson Web service.\n+ * \n+ * @author inder\n+ */\n+public class RestClient {\n+  private final RestServerConfig config;\n+  private final Logger logger;\n+  private final Level logLevel;\n+\n+  public RestClient(RestServerConfig serverConfig) {\n+    this(serverConfig, null);\n+  }\n+\n+  public RestClient(RestServerConfig serverConfig, Level logLevel) {\n+    this.config = serverConfig;\n+    this.logger = logLevel == null ? null : Logger.getLogger(RestClient.class.getName());\n+    this.logLevel = logLevel;\n+  }\n+  \n+  private URL getWebServiceUrl(RestCallSpec callSpec) {\n+    String url = config.getServiceBaseUrl() + callSpec.getPath().get();\n+    try {\n+      return new URL(url);\n+    } catch (MalformedURLException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+  \n+  public <R extends RestResource<R>> RestResponse<R> getResponse(\n+      RestCallSpec callSpec, RestRequest<R> request) {\n+    Gson gson = new GsonBuilder().setVersion(callSpec.getVersion()).create();\n+    return getResponse(callSpec, request, gson);\n+  }\n+\n+  public <R extends RestResource<R>> RestResponse<R> getResponse(\n+      RestCallSpec callSpec, RestRequest<R> request, Gson gson) {\n+    HttpURLConnection conn = null;\n+    try {\n+      URL webServiceUrl = getWebServiceUrl(callSpec);\n+      if (logger != null) {\n+        logger.log(logLevel, \"Opening connection to \" + webServiceUrl);\n+      }\n+      conn = (HttpURLConnection) webServiceUrl.openConnection();\n+      return getResponse(callSpec, request, gson, conn);\n+    } catch (IOException e) {\n+      throw new WebServiceSystemException(e);\n+    } finally {\n+      closeIgnoringErrors(conn);\n+    }\n+  }\n+\n+  /**\n+   * Use this method if you want to mange the HTTP Connection yourself. This is useful when you\n+   * want to use HTTP pipelining.\n+   */\n+  public <R extends RestResource<R>> RestResponse<R> getResponse(\n+      RestCallSpec callSpec, RestRequest<R> request, Gson gson, HttpURLConnection conn) {\n+    try {\n+      if (logger != null) {\n+        URL webServiceUrl = getWebServiceUrl(callSpec);\n+        logger.log(logLevel, \"Opening connection to \" + webServiceUrl);\n+      }\n+      RestRequestSender requestSender = new RestRequestSender(gson, logLevel);\n+      requestSender.send(conn, request);\n+      RestResponseReceiver<R> responseReceiver =\n+        new RestResponseReceiver<R>(gson, callSpec.getResponseSpec(), logLevel);\n+      return responseReceiver.receive(conn);\n+    } catch (IllegalArgumentException e) {\n+      throw new WebServiceSystemException(e);\n+    }\n+  }\n+  \n+  private static void closeIgnoringErrors(HttpURLConnection conn) {\n+    if (conn != null) {\n+      conn.disconnect();\n+    }\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"config:%s\", config);\n+  }\n+}\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/rest/client/RestRequestSender.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.client;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Type;\n+import java.net.HttpURLConnection;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.rest.definition.RestRequest;\n+import com.google.gson.rest.definition.RestResource;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n+import com.google.gson.wsclient.internal.utils.Streams;\n+\n+/**\n+ * Class to send Web service requests on a {@link HttpURLConnection}.\n+ * \n+ * @author inder\n+ */\n+public final class RestRequestSender {\n+  private final Gson gson;\n+  private final Logger logger;\n+  private final Level logLevel;\n+\n+  public RestRequestSender(Gson gson) {\n+    this(gson, null);\n+  }\n+\n+  public RestRequestSender(Gson gson, Level logLevel) {\n+    this.gson = gson;\n+    logger = logLevel == null ? null : Logger.getLogger(RestRequestSender.class.getName());\n+    this.logLevel = logLevel;\n+  }\n+  \n+  public <R extends RestResource<R>> void send(HttpURLConnection conn, RestRequest<R> request) {    \n+    try {\n+      conn.setRequestMethod(request.getHttpMethod().toString());\n+      setHeader(conn, \"Content-Type\", request.getContentType(), true);\n+      \n+      // Assume conservatively that the response will need to be read.\n+      // This is done here instead of in the response receiver because this property must be set\n+      // before sending any data on the connection.\n+      conn.setDoInput(true);\n+      \n+      R requestBody = request.getBody();\n+      String requestBodyContents = \"\";\n+      // Android Java VM ignore Content-Length if setDoOutput is not set\n+      conn.setDoOutput(true);\n+      if (requestBody != null) {\n+        requestBodyContents = gson.toJson(requestBody, request.getSpec().getResourceType());\n+      }\n+      String contentLength = String.valueOf(requestBodyContents.length());\n+      setHeader(conn, \"Content-Length\", contentLength, true);\n+      addRequestParams(conn, request.getHeaders());\n+      Streams.copy(requestBodyContents, conn.getOutputStream(), false);\n+\n+      // Initiate the sending of the request.\n+      conn.connect();\n+    } catch (IOException e) {\n+      throw new WebServiceSystemException(e);\n+    }\n+  }\n+\n+  private void addRequestParams(HttpURLConnection conn, HeaderMap requestParams) {\n+    HeaderMapSpec spec = requestParams.getSpec();\n+    for (Map.Entry<String, Object> entry : requestParams.entrySet()) {\n+      String paramName = entry.getKey();\n+      Type type = spec.getTypeFor(paramName);\n+      Object value = entry.getValue();\n+      String json = gson.toJson(value, type);\n+      setHeader(conn, paramName, json, false);\n+    }\n+  }\n+\n+  private void setHeader(HttpURLConnection conn, String name, String value, boolean overwrite) {\n+    if (logger != null) {\n+      logger.log(logLevel, String.format(\"Request param: %s:%s\", name, value));\n+    }\n+    if (overwrite) {\n+      conn.setRequestProperty(name, value);\n+    } else {\n+      conn.addRequestProperty(name, value);\n+    }\n+  }  \n+}\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/rest/client/RestResponseReceiver.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.client;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.rest.definition.RestResource;\n+import com.google.gson.rest.definition.RestResponse;\n+import com.google.gson.rest.definition.RestResponseSpec;\n+import com.google.gson.webservice.definition.ContentBodySpec;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n+import com.google.gson.wsclient.internal.utils.ConnectionPreconditions;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.lang.reflect.Type;\n+import java.net.HttpURLConnection;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Receives a response coming on an {@link HttpURLConnection}.\n+ * \n+ * @author inder\n+ */\n+public final class RestResponseReceiver<R extends RestResource<R>> {\n+  private final Gson gson;\n+  private final RestResponseSpec spec;\n+  private final Logger logger;\n+  private final Level logLevel;\n+\n+  public RestResponseReceiver(Gson gson, RestResponseSpec spec) {\n+    this(gson, spec, null);\n+  }\n+  public RestResponseReceiver(Gson gson, RestResponseSpec spec, Level logLevel) {\n+    this.gson = gson;\n+    this.spec = spec;\n+    this.logger = logLevel == null ? null : Logger.getLogger(RestResponseReceiver.class.getName());\n+    this.logLevel = logLevel;\n+  }\n+  \n+  public RestResponse<R> receive(HttpURLConnection conn) {\n+    try {\n+      HeaderMapSpec paramSpec = spec.getHeadersSpec();\n+      Type bodyType = spec.getResourceType();\n+      // read response\n+      HeaderMap responseParams = readResponseHeaders(conn, paramSpec);\n+      R responseBody = readResponseBody(conn, bodyType);\n+      return new RestResponse<R>(responseParams, responseBody, bodyType);\n+    } catch (IOException e) {\n+      throw new WebServiceSystemException(e);\n+    }\n+  }\n+\n+  private HeaderMap readResponseHeaders(HttpURLConnection conn, HeaderMapSpec paramsSpec) {    \n+    HeaderMap.Builder paramsBuilder = new HeaderMap.Builder(paramsSpec);    \n+    for (Map.Entry<String, Type> entry : paramsSpec.entrySet()) {\n+      String paramName = entry.getKey();\n+      String json = conn.getHeaderField(paramName);\n+      if (json != null) {\n+        if (logger != null) {\n+          logger.log(logLevel, String.format(\"Response Header: %s:%s\\n\", paramName, json));\n+        }\n+        Type typeOfT = paramsSpec.getTypeFor(paramName);\n+        Object value = gson.fromJson(json, typeOfT);\n+        paramsBuilder.put(paramName, value, typeOfT);\n+      }\n+    }\n+    return paramsBuilder.build();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private R readResponseBody(\n+      HttpURLConnection conn, Type resourceType) throws IOException {\n+    String connContentType = conn.getContentType();\n+    ConnectionPreconditions.checkArgument(\n+      connContentType.contains(ContentBodySpec.JSON_CONTENT_TYPE), conn);\n+    Reader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n+    R body = (R) gson.fromJson(reader, resourceType);\n+    return body;\n+  }\n+}\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/rest/client/RestServerConfig.java\n+/*\n+ * Copyright (C) 2008-2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.client;\n+\n+/**\n+ * Configuration needed to access a Gson REST service.\n+ * \n+ * @author inder\n+ */\n+public final class RestServerConfig {\n+  private final String serviceBaseUrl;\n+\n+  public RestServerConfig(String serviceBaseUrl) {\n+    this.serviceBaseUrl = serviceBaseUrl;\n+  }\n+\n+  public String getServiceBaseUrl() {\n+    return serviceBaseUrl;\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    return serviceBaseUrl;\n+  }\n+}\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/RequestSender.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/RequestSender.java\n import com.google.gson.webservice.definition.WebServiceSystemException;\n import com.google.gson.webservice.definition.procedural.RequestBody;\n import com.google.gson.webservice.definition.procedural.WebServiceRequest;\n+import com.google.gson.wsclient.internal.utils.Streams;\n \n /**\n  * Class to send Web service requests on a {@link HttpURLConnection}.\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/ResponseReceiver.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/ResponseReceiver.java\n import com.google.gson.webservice.definition.procedural.ResponseBodySpec;\n import com.google.gson.webservice.definition.procedural.ResponseSpec;\n import com.google.gson.webservice.definition.procedural.WebServiceResponse;\n+import com.google.gson.wsclient.internal.utils.ConnectionPreconditions;\n \n /**\n  * Receives a response coming on an {@link HttpURLConnection}.\n       return new ResponseBody.Builder(bodySpec).build();\n     }\n     String connContentType = conn.getContentType();\n-    Preconditions.checkArgument(connContentType.contains(bodySpec.getContentType()), conn);\n+    ConnectionPreconditions.checkArgument(connContentType.contains(bodySpec.getContentType()), conn);\n     Reader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n     ResponseBody body = gson.fromJson(reader, ResponseBody.class);\n     return body;\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/ServerConfig.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+/**\n+ * Configuration needed to access a Gson web service.\n+ * \n+ * @author inder\n+ */\n+public final class ServerConfig {\n+  private final String serviceBaseUrl;\n+\n+  public ServerConfig(String serviceBaseUrl) {\n+    this.serviceBaseUrl = serviceBaseUrl;\n+  }\n+\n+  public String getServiceBaseUrl() {\n+    return serviceBaseUrl;\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    return serviceBaseUrl;\n+  }\n+}\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/WebServiceClient.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/WebServiceClient.java\n  * @author inder\n  */\n public class WebServiceClient {\n-  private final WebServiceConfig config;\n+  private final ServerConfig config;\n   private final Logger logger;\n   private final Level logLevel;\n \n-  public WebServiceClient(WebServiceConfig serverConfig) {\n+  public WebServiceClient(ServerConfig serverConfig) {\n     this(serverConfig, null);\n   }\n \n-  public WebServiceClient(WebServiceConfig serverConfig, Level logLevel) {\n+  public WebServiceClient(ServerConfig serverConfig, Level logLevel) {\n     this.config = serverConfig;\n     this.logger = logLevel == null ? null : Logger.getLogger(WebServiceClient.class.getName());\n     this.logLevel = logLevel;\n   }\n   \n   public WebServiceResponse getResponse(WebServiceCallSpec callSpec, WebServiceRequest request) {\n-    Gson gson = new GsonBuilder().registerTypeAdapter(ResponseBody.class,\n-        new ResponseBodyGsonConverter(callSpec.getResponseSpec().getBodySpec()))\n+    Gson gson = new GsonBuilder()\n+        .registerTypeAdapter(ResponseBody.class,\n+            new ResponseBodyGsonConverter(callSpec.getResponseSpec().getBodySpec()))\n         .create();\n     return getResponse(callSpec, request, gson);\n   }\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/WebServiceClientAsync.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/WebServiceClientAsync.java\n   private final boolean threadPerTask;\n   private final TaskExecutor executor;\n \n-  public WebServiceClientAsync(WebServiceConfig serverConfig) {\n+  public WebServiceClientAsync(ServerConfig serverConfig) {\n     this(serverConfig, null);\n   }\n-  public WebServiceClientAsync(WebServiceConfig serverConfig, Level logLevel) {\n+  public WebServiceClientAsync(ServerConfig serverConfig, Level logLevel) {\n     this(new WebServiceClient(serverConfig, logLevel));\n   }\n \n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/wsclient/internal/utils/ConnectionPreconditions.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.wsclient.internal.utils;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+public final class ConnectionPreconditions {\n+\n+  public static void checkArgument(boolean condition, HttpURLConnection conn) {\n+    if (!condition) {\n+      StringBuilder sb = new StringBuilder();\n+      try {\n+        sb.append(\"HttpURLConnection Details\\n\");\n+        sb.append(\"ResponseCode:\" + conn.getResponseCode());\n+        sb.append(\", ContentType: \" + conn.getContentType() + \"\\n\");\n+        Map<String, List<String>> headerFields = conn.getHeaderFields();\n+        for (Entry<String, List<String>> header : headerFields.entrySet()) {\n+          sb.append(header.getKey()).append(\":\");\n+          boolean first = true;\n+          for (String value : header.getValue()) {\n+            if (first) {\n+              first = false;\n+            } else {\n+              sb.append(\",\"); \n+            }\n+            sb.append(value);\n+          }\n+          sb.append(\"\\n\");\n+        }\n+        byte[] data = readInByteArray(conn.getInputStream());\n+        sb.append(new String(data));\n+      } catch (IOException e) {\n+        // ignore\n+      }\n+      throw new IllegalArgumentException(sb.toString());\n+    }\n+  }\n+\n+  private static byte[] readInByteArray(InputStream src) {\n+    ByteArrayOutputStream dst = new ByteArrayOutputStream();\n+    try {\n+      Streams.copy(src, dst, true, true);\n+    } catch (IOException e) {\n+      // ignore\n+    }\n+    return dst.toByteArray();\n+  }\n+\n+  private ConnectionPreconditions() {\n+    // prevent instantiation\n+  }\n+}\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/wsclient/internal/utils/Streams.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.wsclient.internal.utils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+public final class Streams {\n+\n+  public static void copy(String str, OutputStream dst, boolean closeOutput) throws IOException {\n+    byte[] bytes = str.getBytes(\"UTF-8\");\n+    copy(new ByteArrayInputStream(bytes), dst, true, closeOutput);    \n+  }\n+\n+  /**\n+   * Copy contents of src to dst. Exhausts src completely, and closes both streams.\n+   */\n+  public static void copy(InputStream src, OutputStream dst, boolean closeInput,\n+                          boolean closeOutput) throws IOException {\n+    try {\n+      final byte[] buf = new byte[2048];\n+      int count;\n+      while ((count = src.read(buf)) != -1) {\n+        dst.write(buf, 0, count);\n+      }\n+    } finally {\n+      if (closeInput) src.close();\n+      if (closeOutput) dst.close();\n+    }\n+  }\n+\n+  private Streams() {\n+    // Prevent instantiation\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/HasId.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.definition;\n+\n+/**\n+ * An interface to indicate that an object has an Id\n+ *\n+ * @author inder\n+ *\n+ * @param <R> type of object\n+ */\n+public interface HasId<R> {\n+  public Id<R> getId();\n+  public void setId(Id<R> id);\n+  public boolean hasId();\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/Id.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.definition;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.webservice.definition.internal.utils.Preconditions;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.lang.reflect.WildcardType;\n+\n+/**\n+ * An id for a rest resource\n+ *\n+ * @author inder\n+ *\n+ * @param <R> type variable for the rest resource\n+ */\n+public final class Id<R> {\n+  private static final long NULL_VALUE = -1;\n+  private final long value;\n+  private final Type typeOfId;\n+\n+  private Id(long value, Type typeOfId) {\n+    Preconditions.checkArgument(value != NULL_VALUE);\n+    this.value = value;\n+    this.typeOfId = typeOfId;\n+  }\n+\n+  public long getValue() {\n+    return value;\n+  }\n+\n+  public static long getValue(Id<?> id) {\n+    return id == null ? NULL_VALUE : id.getValue();\n+  }\n+  public Type getTypeOfId() {\n+    return typeOfId;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return (int) value;\n+  }\n+\n+  public static boolean isValid(Id<?> id) {\n+    return id != null && id.value != NULL_VALUE;\n+  }\n+\n+  /**\n+   * A more efficient comparison method for ids that take into account of ids being nullable.\n+   * Since the method is parameterized and both ids are of the same type, this method compares\n+   * only id values, not their types. Note that this shortcut doesn't work if you pass raw ids\n+   * to this method\n+   */\n+  public static <T> boolean equals(/* @Nullable */ Id<T> id1, /* @Nullable */ Id<T> id2) {\n+    if ((id1 == null && id2 != null) || (id1 != null && id2 == null)) {\n+      return false;\n+    }\n+    if (id1 == null && id2 == null) {\n+      return true;\n+    }\n+    return id1.value == id2.value;\n+  }\n+\n+  @Override  \n+  public boolean equals(Object obj) {\n+    if (this == obj) return true;\n+    if (obj == null) return false;\n+    if (getClass() != obj.getClass()) return false;\n+    @SuppressWarnings(\"unchecked\")\n+    Id<R> other = (Id<R>)obj;\n+    if (typeOfId == null) {\n+      if (other.typeOfId != null) return false;\n+    } else if (!equivalentTypes(typeOfId, other.typeOfId)) return false;\n+    if (value != other.value) return false;\n+    return true;\n+  }\n+\n+  /**\n+   * Returns true for equivalentTypes(Class<?>, Class)\n+   * Visible for testing only \n+   */\n+  @SuppressWarnings(\"rawtypes\")\n+  static boolean equivalentTypes(Type type1, Type type2) {\n+    if (type1 instanceof ParameterizedType && type2 instanceof Class) {\n+      return areEquivalentTypes((ParameterizedType)type1, (Class)type2);\n+    } else if (type2 instanceof ParameterizedType && type1 instanceof Class) {\n+      return areEquivalentTypes((ParameterizedType)type2, (Class)type1);\n+    }\n+    return type1.equals(type2);\n+  }\n+\n+  /**\n+   * Visible for testing only\n+   */\n+  @SuppressWarnings(\"rawtypes\")\n+  static boolean areEquivalentTypes(ParameterizedType type, Class clazz) {\n+    Class rawClass = (Class) type.getRawType();\n+    if (!clazz.equals(rawClass)) {\n+      return false;\n+    }\n+    for (Type typeVariable : type.getActualTypeArguments()) {\n+      if (typeVariable instanceof WildcardType) {\n+        continue;\n+      }\n+      // This is a real parameterized type, not just ?\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  public static <RS> Id<RS> get(long value, Type typeOfId) {\n+    return new Id<RS>(value, typeOfId);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    String typeAsString = getSimpleTypeName(typeOfId);\n+    return String.format(\"{value:%s,type:%s}\", value, typeAsString);\n+  }\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  private static String getSimpleTypeName(Type type) {\n+    if (type == null) {\n+      return \"null\";\n+    }\n+    if (type instanceof Class) {\n+      return ((Class)type).getSimpleName();\n+    } else if (type instanceof ParameterizedType) {\n+      ParameterizedType pType = (ParameterizedType) type;\n+      StringBuilder sb = new StringBuilder(getSimpleTypeName(pType.getRawType()));\n+      sb.append('<');\n+      boolean first = true;\n+      for (Type argumentType : pType.getActualTypeArguments()) {\n+        if (first) {\n+          first = false;\n+        } else {\n+          sb.append(',');\n+        }\n+        sb.append(getSimpleTypeName(argumentType));\n+      }\n+      sb.append('>');\n+      return sb.toString();\n+    } else if (type instanceof WildcardType) {\n+      return \"?\";\n+    }\n+    return type.toString();\n+  }\n+\n+  /**\n+   * Type adapter for converting an Id to its serialized form\n+   *\n+   * @author inder\n+   *\n+   */\n+  public static final class GsonTypeAdapter implements JsonSerializer<Id<?>>,\n+      JsonDeserializer<Id<?>> {\n+\n+    @Override\n+    public JsonElement serialize(Id<?> src, Type typeOfSrc, JsonSerializationContext context) {\n+      return new JsonPrimitive(src.getValue());\n+    }\n+\n+    @Override\n+    public Id<?> deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+        throws JsonParseException {\n+      if (!(typeOfT instanceof ParameterizedType)) {\n+        throw new JsonParseException(\"Id of unknown type: \" + typeOfT);\n+      }\n+      ParameterizedType parameterizedType = (ParameterizedType) typeOfT;\n+      // Since Id takes only one TypeVariable, the actual type corresponding to the first\n+      // TypeVariable is the Type we are looking for\n+      Type typeOfId = parameterizedType.getActualTypeArguments()[0];\n+      return Id.get(json.getAsLong(), typeOfId);\n+    }\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/MetaData.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.definition;\n+\n+import java.lang.reflect.Type;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Metadata associated with a repository for a rest resource. Metadata is of two types: persistent\n+ * and transient. All metadata is persistent by default, and must be a name-value pair of strings.\n+ * Transient metadata can be an arbitrary key-value pair of objects and is available through\n+ * {@link #getFromTransient(Object)}, {@link #putInTransient(Object, Object)},\n+ * and {@link #removeFromTransient(Object)} methods.\n+ *\n+ * @author inder\n+ *\n+ * @param <R> The resource\n+ */\n+public final class MetaData<R extends RestResource<R>> {\n+\n+  private final Map<String, String> map;\n+  private final transient Map<Object, Object> mapTransient;\n+\n+  public static <RS extends RestResource<RS>> MetaData<RS> create() {\n+    return new MetaData<RS>();\n+  }\n+\n+  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+  private static MetaData<?> createTypeUnsafe(Map<String, String> values) {\n+    return new MetaData(values);\n+  }\n+\n+  public MetaData() {\n+    this(new HashMap<String, String>());\n+  }\n+\n+  private MetaData(Map<String, String> values) {\n+    this.map = values == null ? new HashMap<String, String>() : values;\n+    this.mapTransient = new HashMap<Object, Object>();\n+  }\n+\n+  public String getString(String key) {\n+    return map.get(key);\n+  }\n+\n+  public void putString(String key, String value) {\n+    map.put(key, value);\n+  }\n+\n+  public boolean getBoolean(String key) {\n+    String value = map.get(key);\n+    return value == null ? false : Boolean.parseBoolean(value);\n+  }\n+\n+  public void putBoolean(String key, boolean value) {\n+    map.put(key, String.valueOf(value));\n+  }\n+\n+  public void remove(String key) {\n+    map.remove(key);\n+  }\n+\n+  public Object getFromTransient(Object key) {\n+    return mapTransient.get(key);\n+  }\n+\n+  public void putInTransient(Object key, Object value) {\n+    mapTransient.put(key, value);\n+  }\n+\n+  public void removeFromTransient(Object key) {\n+    mapTransient.remove(key);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return new StringBuilder().append(map).append(',').append(mapTransient).toString();\n+  }\n+\n+  /**\n+   * Gson Type adapter for {@link MetaData}. The serialized representation on wire is just a\n+   * Map<String, String>\n+   */\n+  public static final class GsonTypeAdapter implements JsonSerializer<MetaData<?>>,\n+    JsonDeserializer<MetaData<?>>{\n+\n+    private static final Type MAP_TYPE = new TypeToken<Map<String, String>>(){}.getType();\n+\n+    @Override\n+    public MetaData<?> deserialize(JsonElement json, Type typeOfT,\n+        JsonDeserializationContext context) throws JsonParseException {\n+      Map<String, String> map = context.deserialize(json, MAP_TYPE);\n+      return MetaData.createTypeUnsafe(map);\n+    }\n+\n+    @Override\n+    public JsonElement serialize(MetaData<?> src, Type typeOfSrc,\n+        JsonSerializationContext context) {\n+      return context.serialize(src.map, MAP_TYPE);\n+    }\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/ResourceMap.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.definition;\n+\n+import com.google.gson.webservice.definition.CallPath;\n+import com.google.gson.webservice.definition.internal.utils.Preconditions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * A {@link Map} of {@link CallPath} to {@link RestCallSpec}\n+ *\n+ * @author inder\n+ */\n+public final class ResourceMap {\n+\n+  public static final class Builder {\n+    private final Map<CallPath, RestCallSpec> resources =\n+      new HashMap<CallPath, RestCallSpec>();\n+    \n+    public Builder set(CallPath callPath, RestCallSpec spec) {\n+      Preconditions.checkArgument(resources.get(callPath) == null);\n+      resources.put(callPath, spec);\n+      return this;\n+    }\n+\n+    public ResourceMap build() {\n+      return new ResourceMap(resources);\n+    }\n+  }\n+\n+  private final Map<CallPath, RestCallSpec> resources;\n+\n+  public ResourceMap(Map<CallPath, RestCallSpec> resources) {\n+    this.resources = resources;\n+  }\n+\n+  public RestCallSpec get(CallPath callPath) {\n+    return resources.get(callPath);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/RestCall.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.definition;\n+\n+/**\n+ * The data associated with a Rest Web service call. This includes http request header parameters\n+ * (form and URL parameters), request body, response header parameters, and resource response body. \n+ * \n+ * @author inder\n+ */\n+public final class RestCall<R extends RestResource<R>> {\n+  \n+  private final RestCallSpec callSpec;\n+  private final RestRequest<R> request;\n+  private final RestResponse<R> response;\n+  \n+  public RestCall(RestCallSpec callSpec, RestRequest<R> request, RestResponse<R> response) {\n+    this.callSpec = callSpec;\n+    this.request = request;\n+    this.response = response;\n+  }\n+\n+  public RestCallSpec getSpec() {\n+    return callSpec;\n+  }\n+  \n+  public RestRequest<R> getRequest() {\n+    return request;\n+  }\n+\n+  public RestResponse<R> getResponse() {\n+    return response;\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/RestCallSpec.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.definition;\n+\n+import com.google.gson.webservice.definition.CallPath;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.HttpMethod;\n+import com.google.gson.webservice.definition.TypedKey;\n+import com.google.gson.webservice.definition.internal.utils.Preconditions;\n+\n+import java.lang.reflect.Type;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+/**\n+ * Specification for a REST service\n+ *\n+ * @author inder\n+ */\n+public final class RestCallSpec {\n+  public static class Builder {\n+    private final CallPath callPath;\n+    private final Set<HttpMethod> supportedHttpMethods = new LinkedHashSet<HttpMethod>();\n+    private final HeaderMapSpec.Builder reqParamsSpecBuilder = new HeaderMapSpec.Builder();\n+    private final HeaderMapSpec.Builder resParamsSpecBuilder = new HeaderMapSpec.Builder();\n+    private final Type resourceType;\n+    private double version;\n+    \n+    public Builder(CallPath callPath, Type resourceType) {\n+      this.callPath = callPath;\n+      supportedHttpMethods.addAll(HttpMethod.ALL_METHODS);\n+      this.resourceType = resourceType;\n+      this.version = -1D; \n+    }\n+\n+    public Builder disableHttpMethod(HttpMethod httpMethod) {\n+      supportedHttpMethods.remove(httpMethod);\n+      return this;\n+    }\n+\n+    public Builder setVersion(double version) {\n+      this.version = version;\n+      return this;\n+    }\n+\n+    public <T> Builder addRequestParam(TypedKey<T> param) {\n+      reqParamsSpecBuilder.put(param.getName(), param.getClassOfT());\n+      return this;\n+    }\n+\n+    public <T> Builder addResponseParam(TypedKey<T> param) {\n+      resParamsSpecBuilder.put(param.getName(), param.getClassOfT());\n+      return this;\n+    }\n+\n+    public RestCallSpec build() {\n+      if (supportedHttpMethods.isEmpty()) {\n+        supportedHttpMethods.addAll(Arrays.asList(HttpMethod.values()));\n+      }\n+      RestRequestSpec requestSpec = \n+        new RestRequestSpec(reqParamsSpecBuilder.build(), resourceType);\n+      RestResponseSpec responseSpec =\n+        new RestResponseSpec(resParamsSpecBuilder.build(), resourceType);\n+      return new RestCallSpec(supportedHttpMethods, callPath, \n+          requestSpec, responseSpec, resourceType, version);\n+    }\n+  }\n+\n+  private final Set<HttpMethod> supportedHttpMethods;\n+  private final CallPath path;\n+  private final RestRequestSpec requestSpec;\n+  private final RestResponseSpec responseSpec;\n+  private final Type resourceType;\n+  private final double version;\n+\n+  private RestCallSpec(Set<HttpMethod> supportedHttpMethods, CallPath path,\n+      RestRequestSpec requestSpec, RestResponseSpec responseSpec,\n+      Type resourceType, double version) {\n+    Preconditions.checkArgument(!supportedHttpMethods.isEmpty());\n+    Preconditions.checkNotNull(path);\n+    this.supportedHttpMethods = supportedHttpMethods;\n+    this.path = path;\n+    this.requestSpec = requestSpec;\n+    this.responseSpec = responseSpec;\n+    this.resourceType = resourceType;\n+    this.version = version;\n+  }\n+\n+  public CallPath getPath() {\n+    return path;\n+  }\n+  \n+  public Set<HttpMethod> getSupportedHttpMethods() {\n+    return supportedHttpMethods;\n+  }\n+\n+  public RestResponseSpec getResponseSpec() {\n+    return responseSpec;\n+  }\n+  \n+  public RestRequestSpec getRequestSpec() {\n+    return requestSpec;\n+  }\n+\n+  public Type getResourceType() {\n+    return resourceType;\n+  }\n+\n+  public double getVersion() {\n+    return version;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\n+      \"path: %s, version: %.2f, resourceType: %s, requestSpec: %s, responseSpec: %s\",\n+      path, version, resourceType, requestSpec, responseSpec);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/RestRequest.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.definition;\n+\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HttpMethod;\n+import com.google.gson.webservice.definition.TypedKey;\n+\n+import java.lang.reflect.Type;\n+\n+/**\n+ * The data associated with a Web service request. This includes HTTP request header parameters \n+ * (form and URL parameters), and request body. \n+ * \n+ * @author inder\n+ */\n+public final class RestRequest<R extends RestResource<R>> {\n+  public static final String JSON_CONTENT_TYPE = \"application/json\";\n+\n+  private final HttpMethod method;\n+  private final HeaderMap headers;\n+  private final R body;\n+  private final RestRequestSpec spec;\n+  \n+  public RestRequest(HttpMethod method, HeaderMap requestHeaders,\n+      R requestBody, Type resourceType) {\n+    this.method = method;\n+    this.body = requestBody;\n+    this.headers = requestHeaders;\n+    this.spec = new RestRequestSpec(requestHeaders.getSpec(), resourceType);\n+  }\n+\n+  public Id<R> getId() {\n+    return body.getId();\n+  }\n+\n+  public HttpMethod getMethod() {\n+    return method;\n+  }\n+\n+  public RestRequestSpec getSpec() {\n+    return spec;\n+  }\n+\n+  public HttpMethod getHttpMethod() {\n+    return method;\n+  }\n+\n+  public R getBody() {\n+    return body;\n+  }\n+\n+  public HeaderMap getHeaders() {\n+    return headers;\n+  }\n+\n+  public String getContentType() {\n+    return JSON_CONTENT_TYPE;\n+  }\n+\n+  public <T> T getHeader(TypedKey<T> key) {\n+    return headers.get(key);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> T getHeader(String headerName) {\n+    return (T) headers.get(headerName);\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    return String.format(\"{method:%s,headers:%s,body:%s}\", method, headers, body);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/RestRequestSpec.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.definition;\n+\n+import java.lang.reflect.Type;\n+\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+\n+/**\n+ * Specification for a {@link RestRequest}.\n+ * \n+ * @author inder\n+ */\n+public final class RestRequestSpec {\n+  private final HeaderMapSpec headersSpec;\n+  private final Type resourceType;\n+\n+  public RestRequestSpec(HeaderMapSpec headersSpec, Type resourceClass) {\n+    this.headersSpec = headersSpec;\n+    this.resourceType = resourceClass;\n+  }\n+\n+  public Type getResourceType() {\n+    return resourceType;\n+  }\n+\n+  public HeaderMapSpec getHeadersSpec() {\n+    return headersSpec;\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    return String.format(\"{headersSpec:%s,resourceType:%s}\", headersSpec, resourceType);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/RestResource.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.definition;\n+\n+/**\n+ * An interface implemented by an object that is intended to be a rest resource\n+ *\n+ * @author inder\n+ *\n+ * @param <R> the rest resource type\n+ */\n+public interface RestResource<R> extends HasId<R> {\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/RestResponse.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.definition;\n+\n+import java.lang.reflect.Type;\n+\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.TypedKey;\n+\n+/**\n+ * The data associated with a REST Web service response. This includes http response header\n+ * parameters, and the response body. \n+ * \n+ * @author inder\n+ */\n+public final class RestResponse<R extends RestResource<R>> {\n+  \n+  private final HeaderMap headers;\n+  private final R body;\n+  private final RestResponseSpec spec;\n+  \n+  public static class Builder<RS extends RestResource<RS>> {\n+    private final HeaderMap.Builder headers;\n+    private RS body;\n+    private final RestResponseSpec spec;\n+    \n+    public Builder(RestResponseSpec spec) {\n+      this.spec = spec;\n+      headers = new HeaderMap.Builder(spec.getHeadersSpec());\n+    }\n+    \n+    public <T> Builder<RS> putHeader(TypedKey<T> paramName, T content) {\n+      headers.put(paramName.getName(), content, paramName.getClassOfT());\n+      return this;\n+    }\n+    \n+    public Builder<RS> setBody(RS body) {\n+      this.body = body;\n+      return this;\n+    }\n+\n+    public RestResponse<RS> build() {\n+      return new RestResponse<RS>(spec, headers.build(), body);\n+    }\n+  }\n+  \n+  private RestResponse(RestResponseSpec spec, HeaderMap headers, R body) {\n+    this.spec = spec;\n+    this.headers = headers;\n+    this.body = body;\n+  }\n+  \n+  public RestResponse(HeaderMap responseHeaders, R responseBody, Type responseBodyType) {\n+    this.spec = new RestResponseSpec(responseHeaders.getSpec(), responseBodyType);\n+    this.headers = responseHeaders;\n+    this.body = responseBody;\n+  }\n+\n+  public RestResponseSpec getSpec() {\n+    return spec;\n+  }\n+\n+  public HeaderMap getHeaders() {\n+    return headers;\n+  }\n+  \n+  public R getBody() {\n+    return body;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> T getHeader(String headerName) {\n+    return (T) headers.get(headerName);\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    return String.format(\"{headers:%s, body:%s}\", headers, body);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/RestResponseSpec.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.definition;\n+\n+import java.lang.reflect.Type;\n+\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+\n+/**\n+ * Specification for a {@link RestResponse}.\n+ * \n+ * @author inder\n+ */\n+public final class RestResponseSpec {\n+  private final HeaderMapSpec headersSpec;\n+  private final Type resourceType;\n+\n+  public RestResponseSpec(HeaderMapSpec headersSpec, Type resourceType) {\n+    this.headersSpec = headersSpec;\n+    this.resourceType = resourceType;\n+  }\n+\n+  public Type getResourceType() {\n+    return resourceType;\n+  }\n+\n+  public HeaderMapSpec getHeadersSpec() {\n+    return headersSpec;\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    return String.format(\"{headersSpec:%s,resourceType:%s}\", headersSpec, resourceType);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/test/java/com/google/gson/rest/definition/IdTest.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.definition;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import junit.framework.TestCase;\n+\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.rest.definition.Id;\n+\n+/**\n+ * Unit test for {@link Id}\n+ *\n+ * @author inder\n+ */\n+public class IdTest extends TestCase {\n+\n+  public void testRawTypeNotEqualToParameterizedOfConcreteType() {\n+    ParameterizedType type = (ParameterizedType) new TypeToken<Id<Foo>>(){}.getType(); \n+    assertFalse(Id.areEquivalentTypes(type, Id.class));\n+  }\n+\n+  public void testRawTypeEqualToParameterizedOfWildcardType() {\n+    ParameterizedType fooType = (ParameterizedType) new TypeToken<Id<?>>(){}.getType(); \n+    assertTrue(Id.areEquivalentTypes(fooType, Id.class));\n+  }\n+\n+  public void testStaticEquals() {\n+    Id<Foo> id1 = Id.get(3L, Foo.class);\n+    Id<Foo> id2 = Id.get(3L, Foo.class);\n+    Id<Foo> id3 = Id.get(4L, Foo.class);\n+    assertTrue(Id.equals(id1, id2));\n+    assertFalse(Id.equals(null, id2));\n+    assertFalse(Id.equals(id1, null));\n+    assertTrue(Id.equals(null, null));\n+    assertFalse(Id.equals(id1, id3));\n+  }\n+\n+  private static class Foo {\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/test/java/com/google/gson/rest/definition/IdTypeAdapterTest.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.definition;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import junit.framework.TestCase;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.rest.definition.Id;\n+\n+/**\n+ * Unit tests for {@link IdTypeAdapter}\n+ *\n+ * @author inder\n+ */\n+public class IdTypeAdapterTest extends TestCase {\n+  private static final Id<Student> STUDENT1_ID = Id.get(5L, Student.class);\n+  private static final Id<Student> STUDENT2_ID = Id.get(6L, Student.class);\n+  private static final Student STUDENT1 = new Student(STUDENT1_ID, \"first\");\n+  private static final Student STUDENT2 = new Student(STUDENT2_ID, \"second\");\n+  private static final Type TYPE_COURSE_HISTORY =\n+    new TypeToken<Course<HistoryCourse>>(){}.getType(); \n+  private static final Id<Course<HistoryCourse>> COURSE_ID = Id.get(10L, TYPE_COURSE_HISTORY);\n+\n+  private Gson gson;\n+  private Course<HistoryCourse> course;\n+\n+  @Override\n+  protected void setUp() {\n+    gson = new GsonBuilder()\n+        .registerTypeAdapter(Id.class, new Id.GsonTypeAdapter())\n+        .create();\n+    course = new Course<HistoryCourse>(COURSE_ID, 4,\n+        new Assignment<HistoryCourse>(null, null), createList(STUDENT1, STUDENT2));\n+  }\n+\n+  public void testSerializeId() {\n+    String json = gson.toJson(course, TYPE_COURSE_HISTORY);\n+    assertTrue(json.contains(String.valueOf(COURSE_ID.getValue())));\n+    assertTrue(json.contains(String.valueOf(STUDENT1_ID.getValue())));\n+    assertTrue(json.contains(String.valueOf(STUDENT2_ID.getValue())));\n+  }\n+\n+  public void testDeserializeId() {\n+    String json = \"{courseId:1,students:[{id:1,name:'first'},{id:6,name:'second'}],\"\n+      + \"numAssignments:4,assignment:{}}\";\n+    Course<HistoryCourse> target = gson.fromJson(json, TYPE_COURSE_HISTORY);\n+    assertEquals(1, target.getStudents().get(0).id.getValue());\n+    assertEquals(6, target.getStudents().get(1).id.getValue());\n+    assertEquals(1, target.getId().getValue());\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class Student {\n+    Id<Student> id;\n+    String name;\n+\n+    private Student() {\n+      this(null, null);\n+    }\n+    public Student(Id<Student> id, String name) {\n+      this.id = id;\n+      this.name = name;\n+    }\n+  }\n+  @SuppressWarnings(\"unused\")\n+  private static class Course<T> {\n+    final List<Student> students;\n+    private final Id<Course<T>> courseId;\n+    private final int numAssignments;\n+    private final Assignment<T> assignment;\n+\n+    private Course() {\n+      this(null, 0, null, new ArrayList<Student>());\n+    }\n+\n+    public Course(Id<Course<T>> courseId, int numAssignments,\n+        Assignment<T> assignment, List<Student> players) {\n+      this.courseId = courseId;\n+      this.numAssignments = numAssignments;\n+      this.assignment = assignment;\n+      this.students = players;\n+    }\n+    public Id<Course<T>> getId() {\n+      return courseId;\n+    }\n+    List<Student> getStudents() {\n+      return students;\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class Assignment<T> {\n+    private final Id<Assignment<T>> id;\n+    private final T data;\n+\n+    private Assignment() {\n+      this(null, null);\n+    }\n+    public Assignment(Id<Assignment<T>> id, T data) {\n+      this.id = id;\n+      this.data = data;\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class HistoryCourse {\n+    int numClasses;\n+  }\n+\n+  private static <T> List<T> createList(T ...items) {\n+    return Arrays.asList(items);\n+  }\n+}\n--- a/wsexample/client/src/main/java/com/google/gson/example/client/ExampleClient.java\n+++ b/wsexample/client/src/main/java/com/google/gson/example/client/ExampleClient.java\n  */\n package com.google.gson.example.client;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.logging.Level;\n-\n import com.google.gson.example.model.Cart;\n import com.google.gson.example.model.LineItem;\n import com.google.gson.example.model.Order;\n import com.google.gson.example.model.TypedKeys;\n import com.google.gson.example.service.SampleJsonService;\n+import com.google.gson.webservice.client.ServerConfig;\n import com.google.gson.webservice.client.WebServiceClient;\n-import com.google.gson.webservice.client.WebServiceConfig;\n import com.google.gson.webservice.definition.HeaderMap;\n import com.google.gson.webservice.definition.HttpMethod;\n import com.google.gson.webservice.definition.procedural.RequestBody;\n import com.google.gson.webservice.definition.procedural.WebServiceRequest;\n import com.google.gson.webservice.definition.procedural.WebServiceResponse;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+\n public class ExampleClient {\n \n   private final WebServiceClient wsClient;\n   public ExampleClient() {\n-    WebServiceConfig serverConfig = new WebServiceConfig(\"http://localhost\");\n+    ServerConfig serverConfig = new ServerConfig(\"http://localhost\");\n \twsClient = new WebServiceClient(serverConfig, Level.INFO); \n   }\n \n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/rest/server/IdMap.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.server;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.google.gson.rest.definition.HasId;\n+import com.google.gson.rest.definition.Id;\n+\n+/**\n+ * This class provides a type-safe map to access values associated with Ids\n+ *\n+ * @author inder\n+ *\n+ * @param <T> the type of the objects being kept in the map\n+ */\n+public class IdMap<T extends HasId<T>> {\n+  public static final Logger LOG = Logger.getLogger(IdMap.class.getName());\n+  protected final Map<Id<T>, T> map;\n+  private volatile long nextAvailableId;\n+  private final Type typeOfId;\n+\n+  /**\n+   * Use {@link #create(Type)} instead of constructor\n+   */\n+  protected IdMap(Type typeOfId) {\n+    this.typeOfId = typeOfId;\n+    map = new ConcurrentHashMap<Id<T>, T>();\n+    nextAvailableId = 0;\n+  }\n+\n+  public T get(Id<T> id) {\n+    return map.get(id);\n+  }\n+\n+  public T put(T obj) {\n+    map.put(obj.getId(), obj);\n+    return obj;\n+  }\n+\n+  public void delete(Id<T> id) {\n+    T removed = map.remove(id);\n+    if (removed == null) {\n+      LOG.log(Level.WARNING, \"Attempted to delete non-existent id: {0}\", id);\n+    }\n+  }\n+\n+  public boolean exists(Id<T> id) {\n+    return map.containsKey(id);\n+  }\n+\n+  public synchronized Id<T> getNextId() {\n+    long id = nextAvailableId++;\n+    return Id.get(id, typeOfId);\n+  }\n+\n+  public static <S extends HasId<S>> IdMap<S> create(Type typeOfId) {\n+    return new IdMap<S>(typeOfId);\n+  }\n+}\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/rest/server/MetaDataMap.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.server;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.gson.rest.definition.Id;\n+import com.google.gson.rest.definition.MetaData;\n+import com.google.gson.rest.definition.RestResource;\n+\n+/**\n+ * A map of resources to their MetaData\n+ *\n+ * @author inder\n+ *\n+ * @param <R> the rest resource for whic the metadata is being stored\n+ */\n+public class MetaDataMap<R extends RestResource<R>> {\n+  private final Map<Id<R>, MetaData<R>> map;\n+\n+  public MetaDataMap() {\n+    this.map = new HashMap<Id<R>, MetaData<R>>();\n+  }\n+\n+  public MetaData<R> get(Id<R> resourceId) {\n+    MetaData<R> metaData = map.get(resourceId);\n+    if (metaData == null) {\n+      metaData = MetaData.create();\n+      map.put(resourceId, metaData);\n+    }\n+    return metaData;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"%s\", map);\n+  }\n+}\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/rest/server/Repository.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.server;\n+\n+import com.google.gson.rest.definition.HasId;\n+import com.google.gson.rest.definition.Id;\n+\n+/**\n+ * An interface for a repository of rest resources. Meant for abstracting the server-side\n+ * storage of rest resources.\n+ *\n+ * @author inder\n+ *\n+ * @param <R> the type of rest resource\n+ */\n+public interface Repository<R extends HasId<R>> {\n+  public R get(Id<R> resourceId);\n+\n+  /**\n+   * if resource.getId() == null, inserts the resource after assigning it a new id.\n+   * Otherwise, updates the resource ensuring that it pre-exists.\n+   */\n+  public R put(R resource);\n+\n+  public void delete(Id<R> resourceId);\n+  \n+  public boolean exists(Id<R> resourceId);\n+\n+  /**\n+   * Ensures that the specified resource has a valid id that will be used when it is saved\n+   */\n+  public Id<R> assignId(R resource);\n+\n+  public Id<R> getNextId();\n+}\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/rest/server/RepositoryInMemory.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.server;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.rest.definition.Id;\n+import com.google.gson.rest.definition.MetaData;\n+import com.google.gson.rest.definition.RestResource;\n+\n+/**\n+ * An in-memory map of rest resources\n+ *\n+ * @author inder\n+ *\n+ * @param <R> Type variable for the resource\n+ */\n+public class RepositoryInMemory<R extends RestResource<R>> implements Repository<R> {\n+  private static final String METADATA_KEY_IS_FRESHLY_ASSIGNED_ID = \"isFreshlyAssignedId\";\n+\n+  private final IdMap<R> resources;\n+  private final MetaDataMap<R> metaDataMap;\n+\n+  public RepositoryInMemory(Class<? super R> classOfResource) {\n+    this.resources = IdMap.create(classOfResource);\n+    this.metaDataMap = new MetaDataMap<R>();\n+  }\n+\n+  @Override\n+  public R get(Id<R> resourceId) {\n+    return resources.get(resourceId);\n+  }\n+\n+  public boolean isFreshlyAssignedId(Id<R> resourceId) {\n+    MetaData<R> metaData = metaDataMap.get(resourceId);\n+    if (metaData == null) {\n+      return false;\n+    }\n+    return metaData.getBoolean(METADATA_KEY_IS_FRESHLY_ASSIGNED_ID);\n+  }\n+\n+  @Override\n+  public R put(R resource) {\n+    if (!resource.hasId()) {\n+      // insert semantics\n+      assignId(resource);\n+    } else {\n+      Id<R> id = resource.getId();\n+      if (!isFreshlyAssignedId(id)) {\n+        // update semantics\n+        Preconditions.checkState(resources.exists(resource.getId()));\n+      }\n+    }\n+    resource = resources.put(resource);\n+    metaDataMap.get(resource.getId()).remove(METADATA_KEY_IS_FRESHLY_ASSIGNED_ID);\n+    return resource;\n+  }\n+\n+  @Override\n+  public void delete(Id<R> resourceId) {\n+    resources.delete(resourceId);\n+  }\n+\n+  @Override\n+  public boolean exists(Id<R> resourceId) {\n+    return resources.exists(resourceId);\n+  }\n+\n+  @Override\n+  public Id<R> getNextId() {\n+    return resources.getNextId();\n+  }\n+\n+  @Override\n+  public Id<R> assignId(R resource) {\n+    if (resource.getId() == null) {\n+      Id<R> id = resources.getNextId();\n+      resource.setId(id);\n+      metaDataMap.get(id).putBoolean(METADATA_KEY_IS_FRESHLY_ASSIGNED_ID, true);\n+    }\n+    return resource.getId();\n+  }\n+}\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/rest/server/RestRequestReceiver.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.server;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.rest.definition.RestRequest;\n+import com.google.gson.rest.definition.RestRequestSpec;\n+import com.google.gson.rest.definition.RestResource;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.HttpMethod;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n+\n+/**\n+ * Receives and parses a request at the server side on a {@link HttpServletRequest}.  \n+ * \n+ * @author inder\n+ */\n+public final class RestRequestReceiver<R extends RestResource<R>> {\n+\n+  private final Gson gson;\n+  private final RestRequestSpec spec;\n+\n+  public RestRequestReceiver(Gson gson, RestRequestSpec spec) {\n+    this.gson = gson;\n+    this.spec = spec;\n+  }\n+  \n+  public RestRequest<R> receive(HttpServletRequest request) {\n+    try {\n+      HeaderMap requestParams = buildRequestParams(request);\n+      R requestBody = buildRequestBody(request);\n+      \n+      HttpMethod method = HttpMethod.getMethod(request.getMethod());\n+      return new RestRequest<R>(method, requestParams, requestBody, spec.getResourceType());\n+    } catch (IOException e) {\n+      throw new WebServiceSystemException(e);\n+    } catch (JsonParseException e) {\n+      // Not a Web service request\n+      throw new WebServiceSystemException(e);\n+    }\n+  }\n+  \n+  private HeaderMap buildRequestParams(HttpServletRequest request) {\n+    HeaderMapSpec paramsSpec = this.spec.getHeadersSpec();\n+    HeaderMap.Builder paramsBuilder = new HeaderMap.Builder(paramsSpec);\n+    for (Map.Entry<String, Type> param : paramsSpec.entrySet()) {\n+      String name = param.getKey();\n+      Type type = param.getValue();\n+      String header = request.getHeader(name);\n+      if (header == null || header.equals(\"\")) {\n+        // check parameter map for the value\n+        header = request.getParameter(name);\n+      }\n+      if (header != null && !header.equals(\"\")) { \n+        Object value = gson.fromJson(header, type);\n+        paramsBuilder.put(name, value);\n+      }\n+    }\n+    return paramsBuilder.build();\n+  }\n+  \n+  private R buildRequestBody(HttpServletRequest request) throws IOException {\n+    Reader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));\n+    R requestBody = gson.fromJson(reader, spec.getResourceType());\n+    return requestBody;\n+  }\n+}\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/rest/server/RestResponseBuilder.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.server;\n+\n+import com.google.gson.rest.definition.Id;\n+import com.google.gson.rest.definition.RestCallSpec;\n+import com.google.gson.rest.definition.RestRequest;\n+import com.google.gson.rest.definition.RestResource;\n+import com.google.gson.rest.definition.RestResponse;\n+import com.google.gson.webservice.definition.HttpMethod;\n+\n+public abstract class RestResponseBuilder<R extends RestResource<R>> {\n+  protected final Repository<R> resources;\n+\n+  public RestResponseBuilder(Repository<R> resources) {\n+    this.resources = resources;\n+  }\n+\n+  public void buildResponse(RestCallSpec callSpec, RestRequest<R> request,\n+      RestResponse.Builder<R> responseBuilder) {\n+    HttpMethod method = request.getMethod();\n+    R responseBody = null;\n+    switch (method) {\n+      case GET:\n+        responseBody = get(request.getId());\n+        break;\n+      case POST:\n+        responseBody = post(request.getBody());\n+        break;\n+      case DELETE:\n+        delete(request.getId());\n+        break;\n+      case PUT:\n+      default:\n+        throw new IllegalStateException(\"Unexpected method: \" + method);\n+    }\n+    responseBuilder.setBody(responseBody);\n+  }\n+\n+  public R get(Id<R> resourceId) {\n+    return resources.get(resourceId);\n+  }\n+\n+  public R post(R resource) {\n+    return resources.put(resource);\n+  }\n+\n+  public void delete(Id<R> resourceId) {\n+    resources.delete(resourceId);\n+  }\n+\n+  public R put(R resource) {\n+    return resources.put(resource);\n+  }\n+}\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/rest/server/RestResponseSender.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.server;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.rest.definition.RestResource;\n+import com.google.gson.rest.definition.RestResponse;\n+import com.google.gson.webservice.definition.ContentBodySpec;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+\n+/**\n+ * Sends a JSON web service response on {@link HttpServletResponse}.\n+ * \n+ * @author inder\n+ */\n+public final class RestResponseSender<R extends RestResource<R>> {\n+  private static final Logger logger = Logger.getLogger(RestResponseSender.class.getCanonicalName());\n+\n+  private Gson gson;\n+\n+  public RestResponseSender(Gson gson) {\n+    this.gson = gson;\n+  }\n+  \n+  public void send(HttpServletResponse conn, RestResponse<R> response) {\n+    try {\n+      sendHeaders(conn, response.getHeaders());\n+      sendBody(conn, response.getBody());\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+ \n+  private void sendHeaders(HttpServletResponse conn, HeaderMap responseParams) {\n+    HeaderMapSpec spec = responseParams.getSpec();\n+    for (Map.Entry<String, Object> param : responseParams.entrySet()) {\n+      String paramName = param.getKey();\n+      Object paramValue = param.getValue();\n+      Type paramType = spec.getTypeFor(paramName);\n+      String json = gson.toJson(paramValue, paramType);\n+      logger.fine(\"RESPONSE HEADER:{\" + paramName + \", \" + json + \"}\");\n+      conn.addHeader(paramName, json);\n+    }\n+  }\n+\n+  private void sendBody(HttpServletResponse conn, R responseBody) throws IOException {\n+    conn.setContentType(ContentBodySpec.JSON_CONTENT_TYPE);\n+    conn.setCharacterEncoding(ContentBodySpec.JSON_CHARACTER_ENCODING);\n+    String json = gson.toJson(responseBody);\n+    logger.fine(\"RESPONSE BODY:\" + json);\n+    conn.getWriter().append(json);\n+  }\n+}\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/wsf/inject/server/procedural/RequestBodySpecProvider.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.wsf.inject.server.procedural;\n+\n+import com.google.gson.webservice.definition.procedural.RequestBodySpec;\n+import com.google.gson.webservice.definition.procedural.RequestSpec;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+/**\n+ * Guice provider for the {@link RequestBodySpec} to map to the incoming requests.\n+ * \n+ * @author inder\n+ */\n+public final class RequestBodySpecProvider implements Provider<RequestBodySpec> {\n+\n+  private final RequestSpec requestSpec;\n+\n+  @Inject\n+  public RequestBodySpecProvider(RequestSpec requestSpec) {\n+    this.requestSpec = requestSpec;\n+  }\n+  \n+  @Override\n+  public RequestBodySpec get() {\n+    return requestSpec.getBodySpec();\n+  }\n+}\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/wsf/inject/server/procedural/RequestSpecProvider.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.wsf.inject.server.procedural;\n+\n+import com.google.gson.webservice.definition.procedural.RequestSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceCallSpec;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+/**\n+ * Guice provider for the {@link RequestSpec} to map to the incoming requests.\n+ * \n+ * @author inder\n+ */\n+public final class RequestSpecProvider implements Provider<RequestSpec> {\n+\n+  private final WebServiceCallSpec webServiceCallSpec;\n+\n+  @Inject\n+  public RequestSpecProvider(WebServiceCallSpec webServiceCallSpec) {\n+    this.webServiceCallSpec = webServiceCallSpec;\n+  }\n+  \n+  @Override\n+  public RequestSpec get() {\n+    return webServiceCallSpec.getRequestSpec();\n+  }\n+}", "timestamp": 1288734206, "metainfo": ""}