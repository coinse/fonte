{"sha": "52288d712730a50f13fc6c2bf07d339642d06846", "log": "rawtypes -> unchecked Fixed spurious eclipse warnings on deprecation, missing classes or parameters, etc.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n   private static final DefaultTimestampDeserializer TIMESTAMP_DESERIALIZER =\n     new DefaultTimestampDeserializer();\n \n-  @SuppressWarnings(\"rawtypes\")\n+  @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n   private static final EnumTypeAdapter ENUM_TYPE_ADAPTER = new EnumTypeAdapter();\n   private static final UrlTypeAdapter URL_TYPE_ADAPTER = new UrlTypeAdapter();\n   private static final UriTypeAdapter URI_TYPE_ADAPTER = new UriTypeAdapter();\n--- a/gson/src/main/java/com/google/gson/FieldNamingStrategy2Adapter.java\n+++ b/gson/src/main/java/com/google/gson/FieldNamingStrategy2Adapter.java\n package com.google.gson;\n \n /**\n- * Adapts the old \"deprecated\" {@link FieldNamingStrategy} to the new {@link FieldNamingStrategy2}\n+ * Adapts the old \"deprecated\" FieldNamingStrategy to the new {@link FieldNamingStrategy2}\n  * type. \n  * \n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n+@SuppressWarnings(\"deprecation\")\n final class FieldNamingStrategy2Adapter implements FieldNamingStrategy2 {\n   private final FieldNamingStrategy adaptee;\n \n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n    * depending on the {@code mode} that is passed into this method.\n    *\n    * @param strategies the set of strategy object to apply during the {@code mode}.\n-   * @param the mode of Gson (either serialization or deserialization) as to when the\n+   * @param mode the mode of Gson (either serialization or deserialization) as to when the\n    *   {@code strategies} should be applied.\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n    * @since 1.7\n--- a/gson/src/main/java/com/google/gson/NullExclusionStrategy.java\n+++ b/gson/src/main/java/com/google/gson/NullExclusionStrategy.java\n package com.google.gson;\n \n /**\n- * This acts as a \"Null Object\" pattern for the {@link ExclusionStrategy2}.\n+ * This acts as a \"Null Object\" pattern for the {@link ExclusionStrategy}.\n  * Passing an instance of this class into the {@link ObjectNavigator} will\n  * make the {@link ObjectNavigator} parse/visit every field of the object\n  * being navigated.\n--- a/gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java\n \n /**\n  * A factory class used to simplify {@link ObjectNavigator} creation.\n- * This object holds on to a reference of the {@link ExclusionStrategy2}\n+ * This object holds on to a reference of the {@link ExclusionStrategy}\n  * that you'd like to use with the {@link ObjectNavigator}.\n  *\n  * @author Joel Leitch\n--- a/gson/src/main/java/com/google/gson/Types.java\n+++ b/gson/src/main/java/com/google/gson/Types.java\n    * according to {@link Object#equals(Object) Object.equals()}. The returned\n    * type is {@link java.io.Serializable}.\n    */\n+  @SuppressWarnings(\"unchecked\")\n   public static Type canonicalize(Type type) {\n     if (type instanceof Class) {\n       Class<?> c = (Class<?>) type;\n     }\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n   public static Class<?> getRawType(Type type) {\n     if (type instanceof Class<?>) {\n       // type is a normal class.\n   /**\n    * Returns true if {@code a} and {@code b} are equal.\n    */\n+  @SuppressWarnings(\"unchecked\")\n   public static boolean equals(Type a, Type b) {\n     if (a == b) {\n       // also handles (a == null && b == null)\n     return o != null ? o.hashCode() : 0;\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n   public static String typeToString(Type type) {\n     return type instanceof Class ? ((Class<?>) type).getName() : type.toString();\n   }\n   /**\n    * Returns true if this type is an array.\n    */\n+  @SuppressWarnings(\"unchecked\")\n   static boolean isArray(Type type) {\n     return type instanceof GenericArrayType\n         || (type instanceof Class && ((Class<?>) type).isArray());\n     return mapParameterizedType.getActualTypeArguments();\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n   static Type resolve(Type context, Class<?> contextRawType, Type toResolve) {\n     // this implementation is made a little more complicated in an attempt to avoid object-creation\n     while (true) {\n     }\n   }\n \n-  @SuppressWarnings(\"rawtypes\")\n+  @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n   static Type resolveTypeVariable(Type context, Class<?> contextRawType, TypeVariable unknown) {\n     Class<?> declaredByRaw = declaringClassOf(unknown);\n \n    * Returns the declaring class of {@code typeVariable}, or {@code null} if it was not declared by\n    * a class.\n    */\n-  @SuppressWarnings(\"rawtypes\")\n+  @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n   private static Class<?> declaringClassOf(TypeVariable typeVariable) {\n     GenericDeclaration genericDeclaration = typeVariable.getGenericDeclaration();\n     return genericDeclaration instanceof Class\n     private final Type rawType;\n     private final Type[] typeArguments;\n \n-    @SuppressWarnings(\"rawtypes\")\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     public ParameterizedTypeImpl(Type ownerType, Type rawType, Type... typeArguments) {\n       // require an owner type if the raw type needs it\n       if (rawType instanceof Class<?>) {\n--- a/gson/src/main/java/com/google/gson/reflect/TypeToken.java\n+++ b/gson/src/main/java/com/google/gson/reflect/TypeToken.java\n    * Returns the type from super class's type parameter in {@link Types#canonicalize(java.lang.reflect.Type)\n    * canonical form}.\n    */\n+  @SuppressWarnings(\"unchecked\")\n   static Type getSuperclassTypeParameter(Class<?> subclass) {\n     Type superclass = subclass.getGenericSuperclass();\n     if (superclass instanceof Class) {\n    * Checks if two types are the same or are equivalent under a variable mapping\n    * given in the type map that was provided.\n    */\n+  @SuppressWarnings(\"unchecked\")\n   private static boolean matches(Type from, Type to, Map<String, Type> typeMap) {\n     return to.equals(from)\n         || (from instanceof TypeVariable\n--- a/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java\n+++ b/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java\n  */\n public class DefaultMapJsonSerializerTest extends TestCase {\n \n-  @SuppressWarnings(\"rawtypes\")\n+  @SuppressWarnings(\"unchecked\")\n   private JsonSerializer<Map> mapSerializer;\n \n   @Override\n--- a/gson/src/test/java/com/google/gson/FieldNamingStrategy2AdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/FieldNamingStrategy2AdapterTest.java\n         new FieldAttributes(String.class, field)));\n   }\n   \n+  @SuppressWarnings(\"deprecation\")\n   private static class UpperCaseNamingStrategy implements FieldNamingStrategy {\n     public String translateName(Field f) {\n       return f.getName().toUpperCase();\n--- a/gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java\n+++ b/gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java\n     public int hashCode() {\n       return value == null ? 0 : value.hashCode();\n     }\n-    @SuppressWarnings(\"rawtypes\")\n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public boolean equals(Object obj) {\n       if (this == obj) {\n--- a/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java\n \n /**\n  * Performs some functional tests when Gson is instantiated with some common user defined\n- * {@link ExclusionStrategy} and {@link ExclusionStrategy2} objects.\n+ * {@link ExclusionStrategy} objects.\n  *\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n--- a/gson/src/test/java/com/google/gson/functional/MapTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n     assertTrue(json.contains(\"\\\"a\\\":\\\"b\\\"\"));\n   }\n \n-  @SuppressWarnings(\"rawtypes\")\n+  @SuppressWarnings(\"unchecked\")\n   public void testParameterizedMapSubclassDeserialization() {\n     Type type = new TypeToken<MyParameterizedMap<String, Integer>>() {}.getType();\n     Gson gson = new GsonBuilder().registerTypeAdapter(type, \n--- a/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n+@SuppressWarnings(\"deprecation\")\n public class NamingPolicyTest extends TestCase {\n \n   private GsonBuilder builder;\n--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n     assertEquals(target.getExpectedJson(), gson.toJson(target));\n   }\n \n-  @SuppressWarnings(\"rawtypes\")\n+  @SuppressWarnings(\"unchecked\")\n   public void testClassWithTransientFieldsDeserialization() throws Exception {\n     String json = \"{\\\"longValue\\\":[1]}\";\n     ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class);\n     assertEquals(json, target.getExpectedJson());\n   }\n \n-  @SuppressWarnings(\"rawtypes\")\n+  @SuppressWarnings(\"unchecked\")\n   public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored()\n       throws Exception {\n     String json = \"{\\\"transientLongValue\\\":1,\\\"longValue\\\":[1]}\";", "timestamp": 1298587675, "metainfo": ""}