{"sha": "5db4caeec5bc538bcfaecefc8ade8b4dafd184a3", "log": "A whole bunch of tests for support for null elements.  Fixes bug 369", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java\n \n import com.google.gson.JsonSyntaxException;\n import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n \n import java.io.IOException;\n \n   @Override\n   public BigDecimal read(JsonReader reader) throws IOException {\n+    if (reader.peek() == JsonToken.NULL) {\n+      reader.nextNull();\n+      return null;\n+    }\n     try {\n       return new BigDecimal(reader.nextString());\n     } catch (NumberFormatException e) {\n--- a/gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java\n \n import com.google.gson.JsonSyntaxException;\n import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n-\n import java.io.IOException;\n import java.math.BigInteger;\n \n \n   @Override\n   public BigInteger read(JsonReader reader) throws IOException {\n+    if (reader.peek() == JsonToken.NULL) {\n+      reader.nextNull();\n+      return null;\n+    }\n     try {\n       return new BigInteger(reader.nextString());\n     } catch (NumberFormatException e) {\n--- a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n import java.text.DateFormat;\n   }\n \n   @Override public Date read(JsonReader reader) throws IOException {\n+    if (reader.peek() == JsonToken.NULL) {\n+      reader.nextNull();\n+      return null;\n+    }\n     return deserializeToDate(reader.nextString());\n   }\n \n   }\n \n   @Override public synchronized void write(JsonWriter writer, Date value) throws IOException {\n+    if (value == null) {\n+      writer.nullValue();\n+      return;\n+    }\n     String dateFormatAsString = enUsFormat.format(value);\n     writer.value(dateFormatAsString);\n   }\n--- a/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n import java.text.DateFormat;\n \n   @Override\n   public synchronized java.sql.Date read(JsonReader reader) throws IOException {\n+    if (reader.peek() == JsonToken.NULL) {\n+      reader.nextNull();\n+      return null;\n+    }\n     try {\n       final long utilDate = format.parse(reader.nextString()).getTime();\n       return new java.sql.Date(utilDate);\n \n   @Override\n   public synchronized void write(JsonWriter writer, java.sql.Date value) throws IOException {\n-    writer.value(format.format(value));\n+    writer.value(value == null ? null : format.format(value));\n   }\n }\n--- a/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n import java.sql.Time;\n   private final DateFormat format = new SimpleDateFormat(\"hh:mm:ss a\");\n \n   @Override public synchronized Time read(JsonReader reader) throws IOException {\n+    if (reader.peek() == JsonToken.NULL) {\n+      reader.nextNull();\n+      return null;\n+    }\n     try {\n       Date date = format.parse(reader.nextString());\n       return new Time(date.getTime());\n   }\n \n   @Override public synchronized void write(JsonWriter writer, Time value) throws IOException {\n-    writer.value(format.format(value));\n+    writer.value(value == null ? null : format.format(value));\n   }\n }\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n \n   public static final TypeAdapter<BitSet> BIT_SET = new TypeAdapter<BitSet>() {\n     public BitSet read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull();\n+        return null;\n+      }\n+\n       BitSet bitset = new BitSet();\n       reader.beginArray();\n       int i = 0;\n     }\n \n     public void write(JsonWriter writer, BitSet src) throws IOException {\n+      if (src == null) {\n+        writer.nullValue();\n+        return;\n+      }\n+\n       writer.beginArray();\n       for (int i = 0; i < src.length(); i++) {\n         int value = (src.get(i)) ? 1 : 0;\n     }\n     @Override\n     public void write(JsonWriter writer, Boolean value) throws IOException {\n+      if (value == null) {\n+        writer.nullValue();\n+        return;\n+      }\n       writer.value(value);\n     }\n   };\n     }\n     @Override\n     public void write(JsonWriter writer, Character value) throws IOException {\n-      writer.value(String.valueOf(value));\n+      writer.value(value == null ? null : String.valueOf(value));\n     }\n   };\n \n     }\n     @Override\n     public void write(JsonWriter writer, StringBuilder value) throws IOException {\n-      writer.value(value.toString());\n+      writer.value(value == null ? null : value.toString());\n     }\n   };\n \n     }\n     @Override\n     public void write(JsonWriter writer, StringBuffer value) throws IOException {\n-      writer.value(value.toString());\n+      writer.value(value == null ? null : value.toString());\n     }\n   };\n \n     }\n     @Override\n     public void write(JsonWriter writer, InetAddress value) throws IOException {\n-      writer.value(value.getHostAddress());\n+      writer.value(value == null ? null : value.getHostAddress());\n     }\n   };\n \n     }\n     @Override\n     public void write(JsonWriter writer, UUID value) throws IOException {\n-      writer.value(value.toString());\n+      writer.value(value == null ? null : value.toString());\n     }\n   };\n \n       return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {\n         @Override public Timestamp read(JsonReader reader) throws IOException {\n           Date date = dateTypeAdapter.read(reader);\n-          return new Timestamp(date.getTime());\n+          return date != null ? new Timestamp(date.getTime()) : null;\n         }\n \n         @Override public void write(JsonWriter writer, Timestamp value) throws IOException {\n \n     @Override\n     public Calendar read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull();\n+        return  null;\n+      }\n       reader.beginObject();\n       int year = 0;\n       int month = 0;\n \n     @Override\n     public void write(JsonWriter writer, Calendar value) throws IOException {\n+      if (value == null) {\n+        writer.nullValue();\n+        return;\n+      }\n       writer.beginObject();\n       writer.name(YEAR);\n       writer.value(value.get(Calendar.YEAR));\n     }\n     @Override\n     public void write(JsonWriter writer, Locale value) throws IOException {\n-      writer.value(value.toString());\n+      writer.value(value == null ? null : value.toString());\n     }\n   };\n \n       this.classOfT = classOfT;\n     }\n     public T read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull();\n+        return null;\n+      }\n       return (T) Enum.valueOf((Class<T>) classOfT, reader.nextString());\n     }\n \n-    public void write(JsonWriter writer, T src) throws IOException {\n-      writer.value(src.name());\n+    public void write(JsonWriter writer, T value) throws IOException {\n+      writer.value(value == null ? null : value.name());\n     }\n   };\n \n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n+import java.net.InetAddress;\n import java.net.URI;\n import java.net.URL;\n import java.sql.Time;\n import java.sql.Timestamp;\n import java.text.DateFormat;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.BitSet;\n import java.util.Calendar;\n     String json = '\"' + uriValue + '\"';\n     URI target = gson.fromJson(json, URI.class);\n     assertEquals(uriValue, target.toASCIIString());\n+  }\n+  \n+  public void testNullSerialization() throws Exception {\n+    testNullSerializationAndDeserialization(Boolean.class);\n+    testNullSerializationAndDeserialization(Byte.class);\n+    testNullSerializationAndDeserialization(Short.class);\n+    testNullSerializationAndDeserialization(Integer.class);\n+    testNullSerializationAndDeserialization(Long.class);\n+    testNullSerializationAndDeserialization(Double.class);\n+    testNullSerializationAndDeserialization(Float.class);\n+    testNullSerializationAndDeserialization(Number.class);\n+    testNullSerializationAndDeserialization(Character.class);\n+    testNullSerializationAndDeserialization(String.class);\n+    testNullSerializationAndDeserialization(StringBuilder.class);\n+    testNullSerializationAndDeserialization(StringBuffer.class);\n+    testNullSerializationAndDeserialization(BigDecimal.class);\n+    testNullSerializationAndDeserialization(BigInteger.class);\n+    testNullSerializationAndDeserialization(TreeSet.class);\n+    testNullSerializationAndDeserialization(ArrayList.class);\n+    testNullSerializationAndDeserialization(HashSet.class);\n+    testNullSerializationAndDeserialization(Properties.class);\n+    testNullSerializationAndDeserialization(URL.class);\n+    testNullSerializationAndDeserialization(URI.class);\n+    testNullSerializationAndDeserialization(UUID.class);\n+    testNullSerializationAndDeserialization(Locale.class);\n+    testNullSerializationAndDeserialization(InetAddress.class);\n+    testNullSerializationAndDeserialization(BitSet.class);\n+    testNullSerializationAndDeserialization(Date.class);\n+    testNullSerializationAndDeserialization(GregorianCalendar.class);\n+    testNullSerializationAndDeserialization(Calendar.class);\n+    testNullSerializationAndDeserialization(Time.class);\n+    testNullSerializationAndDeserialization(Timestamp.class);\n+    testNullSerializationAndDeserialization(java.sql.Date.class);\n+    testNullSerializationAndDeserialization(Enum.class);\n+  }\n+\n+  private void testNullSerializationAndDeserialization(Class<?> c) {\n+    assertEquals(\"null\", gson.toJson(null, c));\n+    assertEquals(null, gson.fromJson(\"null\", c));\n   }\n \n   public void testUuidSerialization() throws Exception {", "timestamp": 1318562232, "metainfo": ""}