{"sha": "040bae34d701172375e5aaef7492a5782933d46d", "log": "Allowing instance creators to be registered with the raw type only (without specifying type parameters).", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java\n+++ b/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.LinkedHashSet;\n import java.util.LinkedList;\n     this.instanceCreators = instanceCreators;\n   }\n \n-  public ConstructorConstructor() {\n-    this(Collections.<Type, InstanceCreator<?>>emptyMap());\n-  }\n-\n   public <T> ObjectConstructor<T> get(TypeToken<T> typeToken) {\n     final Type type = typeToken.getType();\n     final Class<? super T> rawType = typeToken.getRawType();\n     // first try an instance creator\n \n     @SuppressWarnings(\"unchecked\") // types must agree\n-    final InstanceCreator<T> creator = (InstanceCreator<T>) instanceCreators.get(type);\n-    if (creator != null) {\n+    final InstanceCreator<T> typeCreator = (InstanceCreator<T>) instanceCreators.get(type);\n+    if (typeCreator != null) {\n       return new ObjectConstructor<T>() {\n         public T construct() {\n-          return creator.createInstance(type);\n+          return typeCreator.createInstance(type);\n+        }\n+      };\n+    }\n+\n+    // Next try raw type match for instance creators\n+    @SuppressWarnings(\"unchecked\") // types must agree\n+    final InstanceCreator<T> rawTypeCreator =\n+        (InstanceCreator<T>) instanceCreators.get(rawType);\n+    if (rawTypeCreator != null) {\n+      return new ObjectConstructor<T>() {\n+        public T construct() {\n+          return rawTypeCreator.createInstance(type);\n         }\n       };\n     }\n--- a/gson/src/test/java/com/google/gson/functional/InheritanceTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/InheritanceTest.java\n  * limitations under the License.\n  */\n package com.google.gson.functional;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Queue;\n-import java.util.Set;\n-import java.util.SortedSet;\n-import java.util.TreeSet;\n-\n-import junit.framework.TestCase;\n \n import com.google.gson.Gson;\n import com.google.gson.JsonArray;\n import com.google.gson.common.TestTypes.ClassWithBaseField;\n import com.google.gson.common.TestTypes.Nested;\n import com.google.gson.common.TestTypes.Sub;\n+\n+import junit.framework.TestCase;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n \n /**\n  * Functional tests for Json serialization and deserialization of classes with \n--- a/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java\n import junit.framework.TestCase;\n \n import java.lang.reflect.Type;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n \n /**\n  * Functional Test exercising custom serialization only.  When test applies to both\n     class SubArrayList<T> extends ArrayList<T> {}\n     InstanceCreator<List<String>> listCreator = new InstanceCreator<List<String>>() {\n       public List<String> createInstance(Type type) {\n-        return new SubArrayList<java.lang.String>();\n+        return new SubArrayList<String>();\n       }\n     };\n     Type listOfStringType = new TypeToken<List<String>>() {}.getType();\n     List<String> list = gson.fromJson(\"[\\\"a\\\"]\", listOfStringType);\n     assertEquals(SubArrayList.class, list.getClass());\n   }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public void testInstanceCreatorForParametrizedType() throws Exception {\n+    class SubTreeSet<T> extends TreeSet<T> {}\n+    InstanceCreator<SortedSet> sortedSetCreator = new InstanceCreator<SortedSet>() {\n+      public SortedSet createInstance(Type type) {\n+        return new SubTreeSet();\n+      }\n+    };\n+    Gson gson = new GsonBuilder()\n+        .registerTypeAdapter(SortedSet.class, sortedSetCreator)\n+        .create();\n+\n+    Type sortedSetType = new TypeToken<SortedSet<String>>() {}.getType();\n+    SortedSet<String> set = gson.fromJson(\"[\\\"a\\\"]\", sortedSetType);\n+    assertEquals(set.first(), \"a\");\n+    assertEquals(SubTreeSet.class, set.getClass());\n+\n+    set = gson.fromJson(\"[\\\"b\\\"]\", SortedSet.class);\n+    assertEquals(set.first(), \"b\");\n+    assertEquals(SubTreeSet.class, set.getClass());\n+  }\n }", "timestamp": 1351111244, "metainfo": ""}