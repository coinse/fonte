{"sha": "e60274ed353ebdb1100a41b6d9bc9938ca4e71ec", "log": "Added tests to ensure that subclass objects that are of a parameterized type are serialized per their declared type in lists or maps.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java\n     assertEquals(3, sub.get(\"s\").getAsInt());\n   }\n \n+  /**\n+   * For parameterized type, Gson ignores the more-specific type and sticks to the declared type\n+   */\n+  public void testParameterizedSubclassFields() {\n+    ClassWithParameterizedBaseFields target = new ClassWithParameterizedBaseFields(\n+        new ParameterizedSub<String>(\"one\", \"two\"));\n+    String json = gson.toJson(target);\n+    assertTrue(json.contains(\"\\\"t\\\":\\\"one\\\"\"));\n+    assertFalse(json.contains(\"\\\"s\\\"\"));\n+  }\n+\n+  /**\n+   * For parameterized type in a List, Gson ignores the more-specific type and sticks to\n+   * the declared type\n+   */\n+  public void testListOfParameterizedSubclassFields() {\n+    Collection<ParameterizedBase<String>> list = new ArrayList<ParameterizedBase<String>>();\n+    list.add(new ParameterizedBase<String>(\"one\"));\n+    list.add(new ParameterizedSub<String>(\"two\", \"three\"));\n+    ClassWithContainersOfParameterizedBaseFields target =\n+      new ClassWithContainersOfParameterizedBaseFields(list, null);\n+    String json = gson.toJson(target);\n+    assertTrue(json, json.contains(\"{\\\"t\\\":\\\"one\\\"}\"));\n+    assertFalse(json, json.contains(\"\\\"s\\\":\"));\n+  }\n+\n+  /**\n+   * For parameterized type in a map, Gson ignores the more-specific type and sticks to the\n+   * declared type\n+   */\n+  public void testMapOfParameterizedSubclassFields() {\n+    Map<String, ParameterizedBase<String>> map = new HashMap<String, ParameterizedBase<String>>();\n+    map.put(\"base\", new ParameterizedBase<String>(\"one\"));\n+    map.put(\"sub\", new ParameterizedSub<String>(\"two\", \"three\"));\n+    ClassWithContainersOfParameterizedBaseFields target =\n+      new ClassWithContainersOfParameterizedBaseFields(null, map);\n+    JsonObject json = gson.toJsonTree(target).getAsJsonObject().get(\"map\").getAsJsonObject();\n+    assertEquals(\"one\", json.get(\"base\").getAsJsonObject().get(\"t\").getAsString());\n+    JsonObject sub = json.get(\"sub\").getAsJsonObject();\n+    assertEquals(\"two\", sub.get(\"t\").getAsString());\n+    assertNull(sub.get(\"s\"));\n+  }\n+\n   private static class Base {\n     int b;\n     Base(int b) {\n       this.map = map;\n     }\n   }\n+\n+  private static class ParameterizedBase<T> {\n+    T t;\n+    ParameterizedBase(T t) {\n+      this.t = t;\n+    }\n+  }\n+\n+  private static class ParameterizedSub<T> extends ParameterizedBase<T> {\n+    T s;\n+    ParameterizedSub(T t, T s) {\n+      super(t);\n+      this.s = s;\n+    }\n+  }\n+\n+  private static class ClassWithParameterizedBaseFields {\n+    ParameterizedBase<String> b;\n+    ClassWithParameterizedBaseFields(ParameterizedBase<String> b) {\n+      this.b = b;\n+    }\n+  }\n+\n+  private static class ClassWithContainersOfParameterizedBaseFields {\n+    Collection<ParameterizedBase<String>> collection;\n+    Map<String, ParameterizedBase<String>> map;\n+    ClassWithContainersOfParameterizedBaseFields(Collection<ParameterizedBase<String>> collection,\n+        Map<String, ParameterizedBase<String>> map) {\n+      this.collection = collection;\n+      this.map = map;\n+    }\n+  }\n }", "timestamp": 1303246188, "metainfo": ""}