{"sha": "6a69c603c0686e20cc71d73689080dc9e1239ab8", "log": "Permit serialization of \"Class\" fields, but only if they're null.", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n   public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {\n     @Override\n     public void write(JsonWriter out, Class value) throws IOException {\n-      throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n-          + value.getName() + \". Forgot to register a type adapter?\");\n+      if (value == null) {\n+        out.nullValue();\n+      } else {\n+        throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n+            + value.getName() + \". Forgot to register a type adapter?\");\n+      }\n     }\n     @Override\n     public Class read(JsonReader in) throws IOException {\n+      if (in.peek() == JsonToken.NULL) {\n+        in.nextNull();\n+        return null;\n+      } else {\n         throw new UnsupportedOperationException(\n             \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n+      }\n     }\n   };\n   public static final TypeAdapterFactory CLASS_FACTORY = newFactory(Class.class, CLASS);\n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n     testNullSerializationAndDeserialization(Timestamp.class);\n     testNullSerializationAndDeserialization(java.sql.Date.class);\n     testNullSerializationAndDeserialization(Enum.class);\n+    testNullSerializationAndDeserialization(Class.class);\n   }\n \n   private void testNullSerializationAndDeserialization(Class<?> c) {", "timestamp": 1359993171, "metainfo": ""}