{"sha": "1c87bd599378901db637b02d51d5b6356789645b", "log": "Some minor update to our JavaDoc", "commit": "\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n    * though JSON specification disallows them. \n    * \n    * <p>Gson always accepts these special values during deserialization. However, it outputs \n-   * strictly compliant JSON. Hence, if it encounters a float value {@link Float.NaN}, \n-   * {@link Float.POSITIVE_INFINITY}, {@link Float.NEGATIVE_INFINITY}, or a double value \n-   * {@link Double.NaN}, {@link Double.POSITIVE_INFINITY}, {@link Double.NEGATIVE_INFINITY}, it \n+   * strictly compliant JSON. Hence, if it encounters a float value {@link Float#NaN}, \n+   * {@link Float#POSITIVE_INFINITY}, {@link Float#NEGATIVE_INFINITY}, or a double value \n+   * {@link Double#NaN}, {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, it \n    * will throw an {@link IllegalArgumentException}. This method provides a way to override the\n    * default behavior when you know that the JSON receiver will be able to handle these special\n    * values.   \n--- a/gson/src/main/java/com/google/gson/annotations/Since.java\n+++ b/gson/src/main/java/com/google/gson/annotations/Since.java\n  *\n  * <p>If you created Gson with {@code new Gson()}, the {@code toJson()} and {@code fromJson()}\n  * methods will use all the fields for serialization and deserialization. However, if you created\n- * Gson with {@code Gson gson = new GsonBuilder().setVersion(1.0).create()} the the\n+ * Gson with {@code Gson gson = new GsonBuilder().setVersion(1.0).create()} then the\n  * {@code toJson()} and {@code fromJson()} methods of Gson will exclude the {@code address} field\n  * since it's version number is set to {@code 1.1}.</p>\n  *\n--- a/gson/src/main/java/com/google/gson/annotations/Until.java\n+++ b/gson/src/main/java/com/google/gson/annotations/Until.java\n  *\n  * <p>If you created Gson with {@code new Gson()}, the {@code toJson()} and {@code fromJson()}\n  * methods will use all the fields for serialization and deserialization. However, if you created\n- * Gson with {@code Gson gson = new GsonBuilder().setVersion(1.2).create()} the the\n+ * Gson with {@code Gson gson = new GsonBuilder().setVersion(1.2).create()} then the\n  * {@code toJson()} and {@code fromJson()} methods of Gson will exclude the {@code emailAddress}\n- * and {@code password} fields because the version number passed to the GsonBuilder, {@code 1.2},\n- * exceeds the version number set on the {@code Until} annotation for those fields.\n+ * and {@code password} fields from the example above, because the version number passed to the \n+ * GsonBuilder, {@code 1.2}, exceeds the version number set on the {@code Until} annotation,\n+ * {@code 1.1}, for those fields.\n  *\n  * @author Joel Leitch\n  */", "timestamp": 1230447071, "metainfo": ""}