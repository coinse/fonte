{"sha": "389f918bb83c34f6590351cf7b4a748ae358c890", "log": "Add new performance test for large objects (many fields).", "commit": "\n--- a/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java\n+++ b/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java\n \n package com.google.gson.metrics;\n \n+import java.io.StringWriter;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+\n import com.google.gson.Gson;\n import com.google.gson.JsonParseException;\n import com.google.gson.annotations.Expose;\n import com.google.gson.reflect.TypeToken;\n-\n-import junit.framework.TestCase;\n-\n-import java.io.StringWriter;\n-import java.lang.reflect.Type;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n  * Tests to measure performance for Gson. All tests in this file will be disabled in code. To run\n     long avg = (t2 - t1) / NUM_ITERATIONS;\n     System.out.printf(\"Deserialize classes avg time: %d ms\\n\", avg);     \n   }\n+  \n+  public void disable_testLargeObjectSerializationAndDeserialization() {\n+    Map<String, Long> largeObject = new HashMap<String, Long>();\n+    for (long l = 0; l < 100000; l++) {\n+      largeObject.put(\"field\" + l, l);\n+    }\n+    \n+    long t1 = System.currentTimeMillis(); \n+    String json = gson.toJson(largeObject);\n+    long t2 = System.currentTimeMillis();\n+    System.out.printf(\"Large object serialized in: %d ms\\n\", (t2 - t1));\n+\n+    t1 = System.currentTimeMillis(); \n+    gson.fromJson(json, new TypeToken<Map<String, Long>>() {}.getType());\n+    t2 = System.currentTimeMillis();\n+    System.out.printf(\"Large object deserialized in: %d ms\\n\", (t2 - t1));\n+    \n+  }\n \n   public void disable_testSerializeExposedClasses() {\n     ClassWithListOfObjects c1 = new ClassWithListOfObjects(\"str\"); ", "timestamp": 1274304598, "metainfo": ""}