{"sha": "f4f596ec3daee1cb1890d4655c7f7ca15b557df3", "log": "Made JsonParser implement Iterator", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonParserAsync.java\n+++ b/gson/src/main/java/com/google/gson/JsonParserAsync.java\n import java.io.EOFException;\n import java.io.Reader;\n import java.io.StringReader;\n+import java.util.Iterator;\n \n /**\n  * A parser that allows reading of multiple {@link JsonElement}s from the specified reader\n- * asynchronously.\n+ * asynchronously. This class is not thread-safe.\n  *\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  * @since 1.4\n  */\n-public final class JsonParserAsync {\n+public final class JsonParserAsync implements Iterator<JsonElement> {\n \n   private final JsonParserJavacc parser;\n+  private boolean eof;\n+  private JsonElement nextElement;\n \n   /**\n    * @param json The string containing JSON elements concatenated to each other.\n    */\n   public JsonParserAsync(Reader reader) {\n     parser = new JsonParserJavacc(reader);      \n+    eof = false;\n+    nextElement = null;\n   }\n   \n   /**\n    * @throws JsonParseException if the incoming stream is malformed JSON.\n    * @since 1.4\n    */\n-  public JsonElement nextElement() throws JsonParseException {\n+  public JsonElement next() throws JsonParseException {\n+    if (eof) {\n+      return null;\n+    }\n+    if (nextElement != null) {\n+      JsonElement returnValue = nextElement;\n+      nextElement = null;\n+      return returnValue;\n+    }\n     try {\n       JsonElement element = parser.parse();\n       return element;\n       throw new JsonParseException(\"Failed parsing JSON source to Json\", e);\n     } catch (JsonParseException e) {\n       if (e.getCause() instanceof EOFException) {\n+        eof = true;\n         return null;\n       } else {\n         throw e;\n       }\n     }\n-  }    \n+  }\n+\n+  public boolean hasNext() {\n+    nextElement = next();\n+    return nextElement != null;\n+  }\n+\n+  public void remove() {\n+    throw new UnsupportedOperationException();\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/JsonParserAsyncTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonParserAsyncTest.java\n package com.google.gson;\n+\n+import java.util.Enumeration;\n+import java.util.Iterator;\n \n import junit.framework.TestCase;\n \n   \n   public void testParseTwoStrings() {\n     JsonParserAsync parser = new JsonParserAsync(\"'one' 'two'\");\n-    String actualOne = parser.nextElement().getAsString();\n+    String actualOne = parser.next().getAsString();\n     assertEquals(\"one\", actualOne);\n-    String actualTwo = parser.nextElement().getAsString();\n+    String actualTwo = parser.next().getAsString();\n     assertEquals(\"two\", actualTwo);\n   }\n+  \n+  public void testIterator() {\n+    Iterator<JsonElement> parser = new JsonParserAsync(\"'one' 'two'\");\n+    assertTrue(parser.hasNext());\n+    assertEquals(\"one\", parser.next().getAsString());\n+    assertTrue(parser.hasNext());\n+    assertEquals(\"two\", parser.next().getAsString());\n+    assertFalse(parser.hasNext());\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java\n     writer.write(gson.toJson(\"two\").toCharArray());\n     CharArrayReader reader = new CharArrayReader(writer.toCharArray());\n     JsonParserAsync parser = new JsonParserAsync(reader);\n-    String actualOne = gson.fromJson(parser.nextElement(), String.class);\n+    String actualOne = gson.fromJson(parser.next(), String.class);\n     assertEquals(\"one\", actualOne);\n-    String actualTwo = gson.fromJson(parser.nextElement(), String.class);\n+    String actualTwo = gson.fromJson(parser.next(), String.class);\n     assertEquals(\"two\", actualTwo);\n   }\n   \n     writer.write(gson.toJson(expectedTwo).toCharArray());\n     CharArrayReader reader = new CharArrayReader(writer.toCharArray());\n     JsonParserAsync parser = new JsonParserAsync(reader);\n-    BagOfPrimitives actualOne = gson.fromJson(parser.nextElement(), BagOfPrimitives.class);\n+    BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class);\n     assertEquals(\"one\", actualOne.stringValue);\n-    BagOfPrimitives actualTwo = gson.fromJson(parser.nextElement(), BagOfPrimitives.class);\n+    BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class);\n     assertEquals(\"two\", actualTwo.stringValue);\n-    JsonElement jsonElement = parser.nextElement();\n+    JsonElement jsonElement = parser.next();\n+    assertNull(jsonElement);\n   }\n }", "timestamp": 1250110902, "metainfo": ""}