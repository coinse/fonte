{"sha": "e9c156b01661b53e3a33f63fb45c0beda5bfa731", "log": "Added inheritance tests using toJson() method as well.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/InheritanceTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/InheritanceTest.java\n     assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString());\n   }\n \n+  public void testBaseSerializedAsSubForToJsonMethod() {\n+    Base base = new Sub();\n+    String json = gson.toJson(base);\n+    assertTrue(json.contains(Sub.SUB_NAME));\n+  }\n+\n   public void testBaseSerializedAsBaseWhenSpecifiedWithExplicitType() {\n     Base base = new Sub();\n     JsonObject json = gson.toJsonTree(base, Base.class).getAsJsonObject();\n     assertNull(json.get(Sub.SUB_FIELD_KEY));\n   }\n \n+  public void testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod() {\n+    Base base = new Sub();\n+    String json = gson.toJson(base, Base.class);\n+    assertTrue(json.contains(Base.BASE_NAME));\n+    assertFalse(json.contains(Sub.SUB_FIELD_KEY));\n+  }\n+\n   public void testBaseSerializedAsSubWhenSpecifiedWithExplicitType() {\n     Base base = new Sub();\n     JsonObject json = gson.toJsonTree(base, Sub.class).getAsJsonObject();\n     assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString());\n+  }\n+\n+  public void testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod() {\n+    Base base = new Sub();\n+    String json = gson.toJson(base, Sub.class);\n+    assertTrue(json.contains(Sub.SUB_NAME));\n   }\n \n   private static class SubTypeOfNested extends Nested {", "timestamp": 1255030335, "metainfo": ""}