{"sha": "7f8f490fdc95fb087e735dc582a2af07cee46078", "log": "Re-order factories to allow @JsonAdapter on enums which are user-defined types.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n     factories.add(SqlDateTypeAdapter.FACTORY);\n     factories.add(TypeAdapters.TIMESTAMP_FACTORY);\n     factories.add(ArrayTypeAdapter.FACTORY);\n-    factories.add(TypeAdapters.ENUM_FACTORY);\n     factories.add(TypeAdapters.CLASS_FACTORY);\n \n     // type adapters for composite and user-defined types\n     factories.add(new CollectionTypeAdapterFactory(constructorConstructor));\n     factories.add(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization));\n     factories.add(new JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor));\n+    factories.add(TypeAdapters.ENUM_FACTORY);\n     factories.add(new ReflectiveTypeAdapterFactory(\n         constructorConstructor, fieldNamingPolicy, excluder));\n \n    *  }</pre>\n    *  Note that since you can not override type adapter factories for String and Java primitive\n    *  types, our stats factory will not count the number of String or primitives that will be\n-   *  read or written. \n+   *  read or written.\n    * @param skipPast The type adapter factory that needs to be skipped while searching for\n    *   a matching type adapter. In most cases, you should just pass <i>this</i> (the type adapter\n    *   factory from where {@link #getDelegateAdapter} method is being invoked).\n--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java\n import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n import java.lang.reflect.Type;\n+import java.util.Locale;\n import junit.framework.TestCase;\n \n /**\n     User user = gson.fromJson(\"{'name':'Joel Leitch'}\", User.class);\n     assertEquals(\"Joel\", user.firstName);\n     assertEquals(\"Leitch\", user.lastName);\n+\n+    json = gson.toJson(Foo.BAR);\n+    assertEquals(\"\\\"bar\\\"\", json);\n+    Foo baz = gson.fromJson(\"\\\"baz\\\"\", Foo.class);\n+    assertEquals(Foo.BAZ, baz);\n   }\n \n   public void testJsonAdapterFactoryInvoked() {\n     }\n   }\n \n+  @JsonAdapter(FooJsonAdapter.class)\n+  private static enum Foo { BAR, BAZ }\n+  private static class FooJsonAdapter extends TypeAdapter<Foo> {\n+    @Override public void write(JsonWriter out, Foo value) throws IOException {\n+      out.value(value.name().toLowerCase(Locale.US));\n+    }\n+\n+    @Override public Foo read(JsonReader in) throws IOException {\n+      return Foo.valueOf(in.nextString().toUpperCase(Locale.US));\n+    }\n+  }\n }", "timestamp": 1415062782, "metainfo": ""}