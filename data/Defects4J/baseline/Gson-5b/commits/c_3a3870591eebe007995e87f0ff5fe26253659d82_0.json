{"sha": "3a3870591eebe007995e87f0ff5fe26253659d82", "log": "Tests to demonstrate that GSON 2 fixes some user-reported bugs.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/ArrayTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ArrayTest.java\n     assertEquals(\"3m Co\", items[0][0]);\n     assertEquals(\"Manufacturing\", items[1][5]);\n   }\n+\n+  /** http://code.google.com/p/google-gson/issues/detail?id=342 */\n+  public void testArrayElementsAreArrays() {\n+    Object[] stringArrays = {\n+        new String[] {\"test1\", \"test2\"},\n+        new String[] {\"test3\", \"test4\"}\n+    };\n+    assertEquals(\"[[\\\"test1\\\",\\\"test2\\\"],[\\\"test3\\\",\\\"test4\\\"]]\",\n+        new Gson().toJson(stringArrays));\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java\n     assertEquals(10, obj.value);\n   }\n \n+  /** http://code.google.com/p/google-gson/issues/detail?id=349 */\n+  public void testAtSignInSerializedName() {\n+    assertEquals(\"{\\\"@foo\\\":\\\"bar\\\"}\", new Gson().toJson(new AtName()));\n+  }\n+\n+  static class AtName {\n+    @SerializedName(\"@foo\") String f = \"bar\";\n+  }\n+\n   private static class UpperCaseNamingStrategy implements FieldNamingStrategy {\n     public String translateName(Field f) {\n       return f.getName().toUpperCase();\n--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n import com.google.gson.common.TestTypes.ClassWithTransientFields;\n import com.google.gson.common.TestTypes.Nested;\n import com.google.gson.common.TestTypes.PrimitiveArray;\n-\n import com.google.gson.reflect.TypeToken;\n-import java.util.List;\n-import junit.framework.TestCase;\n-\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.TimeZone;\n+import junit.framework.TestCase;\n \n /**\n  * Functional tests for Json serialization and deserialization of regular classes.\n  */\n public class ObjectTest extends TestCase {\n   private Gson gson;\n+  private TimeZone oldTimeZone = TimeZone.getDefault();\n \n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n     gson = new Gson();\n-  }\n-\n+\n+    TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));\n+    Locale.setDefault(Locale.US);\n+  }\n+\n+  @Override\n+  protected void tearDown() throws Exception {\n+    TimeZone.setDefault(oldTimeZone);\n+    super.tearDown();\n+  }\n   public void testJsonInSingleQuotesDeserialization() {\n     String json = \"{'stringValue':'no message','intValue':10,'longValue':20}\";\n     BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);\n     gson.fromJson(gson.toJson(product), Product.class);\n   }\n \n+  // http://code.google.com/p/google-gson/issues/detail?id=270\n+  public void testDateAsMapObjectField() {\n+    HasObjectMap a = new HasObjectMap();\n+    a.map.put(\"date\", new Date(0));\n+    assertEquals(\"{\\\"map\\\":{\\\"date\\\":\\\"Dec 31, 1969 4:00:00 PM\\\"}}\", gson.toJson(a));\n+  }\n+\n+  public class HasObjectMap {\n+    Map<String, Object> map = new HashMap<String, Object>();\n+  }\n+\n   static final class Department {\n     public String name = \"abc\";\n     public String code = \"123\";\n     private List<String> attributes = new ArrayList<String>();\n     private List<Department> departments = new ArrayList<Department>();\n   }\n-\n }", "timestamp": 1317568692, "metainfo": ""}