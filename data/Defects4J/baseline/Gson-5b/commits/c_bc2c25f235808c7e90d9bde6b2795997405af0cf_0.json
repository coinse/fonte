{"sha": "bc2c25f235808c7e90d9bde6b2795997405af0cf", "log": "Removed ExceptionWrapper from serializers.  This is done since it is improper to throw a parse exception from serializers. Moreover, the serializers dont deal with external input, they deal with classes, so they need not guard against spurious input.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n import java.text.DateFormat;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Date;\n import java.util.Iterator;\n     ParameterizedTypeHandlerMap<JsonSerializer<?>> map =\n       new ParameterizedTypeHandlerMap<JsonSerializer<?>>();\n \n-    map.register(Enum.class, wrapSerializer(ENUM_TYPE_ADAPTER));\n-    map.register(URL.class, wrapSerializer(URL_TYPE_ADAPTER));\n-    map.register(URI.class, wrapSerializer(URI_TYPE_ADAPTER));\n-    map.register(Locale.class, wrapSerializer(LOCALE_TYPE_ADAPTER));\n+    map.register(Enum.class, ENUM_TYPE_ADAPTER);\n+    map.register(URL.class, URL_TYPE_ADAPTER);\n+    map.register(URI.class, URI_TYPE_ADAPTER);\n+    map.register(Locale.class, LOCALE_TYPE_ADAPTER);\n     map.register(Collection.class, COLLECTION_TYPE_ADAPTER);\n-    map.register(Map.class, wrapSerializer(MAP_TYPE_ADAPTER));\n-    map.register(Date.class, wrapSerializer(DATE_TYPE_ADAPTER));\n-    map.register(BigDecimal.class, wrapSerializer(BIG_DECIMAL_TYPE_ADAPTER));\n-    map.register(BigInteger.class, wrapSerializer(BIG_INTEGER_TYPE_ADAPTER));\n+    map.register(Map.class, MAP_TYPE_ADAPTER);\n+    map.register(Date.class, DATE_TYPE_ADAPTER);\n+    map.register(BigDecimal.class, BIG_DECIMAL_TYPE_ADAPTER);\n+    map.register(BigInteger.class, BIG_INTEGER_TYPE_ADAPTER);\n     map.makeUnmodifiable();\n     return map;\n   }\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  private static JsonSerializer<?> wrapSerializer(JsonSerializer<?> serializer) {\n-    return new JsonSerializerExceptionWrapper(serializer);\n-  }\n-\n-  @SuppressWarnings(\"unchecked\")\n   private static JsonDeserializer<?> wrapDeserializer(JsonDeserializer<?> deserializer) {\n     return new JsonDeserializerExceptionWrapper(deserializer);\n   }\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n    */\n   private <T> GsonBuilder registerSerializer(Type typeOfT, final JsonSerializer<T> serializer) {\n-    serializers.register(typeOfT, new JsonSerializerExceptionWrapper<T>(serializer));\n+    serializers.register(typeOfT, serializer);\n     return this;\n   }\n \n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n package com.google.gson;\n \n import java.lang.reflect.Type;\n-import java.util.Collection;\n-import java.util.Map;\n import java.util.logging.Logger;\n \n /**\n--- a/gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java\n     try {\n       gson.toJson(new AtomicLong(0));\n       fail(\"Type Adapter should have thrown an exception\");\n-    } catch (JsonParseException expected) { }\n+    } catch (IllegalStateException expected) { }\n \n     try {\n       gson.fromJson(\"123\", AtomicLong.class);\n--- a/gson/src/test/java/com/google/gson/functional/MapTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n     }).create();\n     String json = \"{\\\"a\\\":1,\\\"b\\\":2}\";\n     MyParameterizedMap<String, Integer> map = gson.fromJson(json, type);\n-    assertEquals(1, ((Integer) map.get(\"a\")).intValue()); \n-    assertEquals(2, ((Integer) map.get(\"b\")).intValue()); \n+    assertEquals(1, map.get(\"a\").intValue()); \n+    assertEquals(2, map.get(\"b\").intValue()); \n   }\n \n   private static class MyParameterizedMap<K, V> extends LinkedHashMap<K, V> {", "timestamp": 1226629039, "metainfo": ""}