{"sha": "0b6bbaf5f182acfddb696096fbf56366f1e8c72a", "log": "deleted unused visitCollection method in the visitor. All of this functionality has now been replaced with the default CollectionTypeAdapter", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java\n import java.lang.reflect.Array;\n import java.lang.reflect.Field;\n import java.lang.reflect.Type;\n-import java.util.Collection;\n \n /**\n  * A visitor that populates fields of an object with data from its equivalent\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  public void visitCollection(Collection collection, Type collectionType) {\n-    Type childType = TypeUtils.getActualTypeForFirstTypeVariable(collectionType);\n-    for (JsonElement jsonChild : json.getAsJsonArray()) {\n-      if (childType == Object.class) {\n-        throw new JsonParseException(collection +\n-            \" must not be a raw collection. Try making it genericized instead.\");\n-      }\n-      Object child = visitChild(childType, jsonChild);\n-      collection.add(child);\n-    }\n-  }\n-\n-  @SuppressWarnings(\"unchecked\")\n   public void visitPrimitiveValue(Object obj) {\n     target = (T) typeAdapter.adaptType(json.getAsJsonArray().get(0).getAsObject(), componentType);\n   }\n--- a/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n \n   public void endVisitingObject(Object node) {\n     // do nothing\n-  }\n-\n-  public void visitCollection(@SuppressWarnings(\"unchecked\")Collection collection,\n-      Type componentType) {\n-    // should not be called since this case should invoke JsonArrayDeserializationVisitor\n-    throw new IllegalStateException();\n   }\n \n   public void visitArray(Object array, Type componentType) {\n--- a/gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java\n \n import java.lang.reflect.Field;\n import java.lang.reflect.Type;\n-import java.util.Collection;\n \n /**\n  * A visitor that populates a primitive value from its JSON representation\n \n   public void endVisitingObject(Object node) {\n     // do nothing\n-  }\n-\n-  public void visitCollection(@SuppressWarnings(\"unchecked\")Collection collection,\n-      Type componentType) {\n-    // should not be called since this case should invoke JsonArrayDeserializationVisitor\n-    throw new IllegalStateException();\n   }\n \n   public void visitArray(Object array, Type componentType) {\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n     }\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n-  public void visitCollection(Collection collection, Type collectionType) {\n-    assignToRoot(new JsonArray());\n-    for (Object child : collection) {\n-      Type childType = TypeUtils.getActualTypeForFirstTypeVariable(collectionType);\n-      if (childType == Object.class && child != null) {\n-        // Try our luck some other way\n-        childType = child.getClass();\n-      }\n-      addAsArrayElement(childType, child);\n-    }\n-  }\n-\n   public void visitArrayField(Field f, Type typeOfF, Object obj) {\n     if (isFieldNull(f, obj)) {\n       if (serializeNulls) {\n   @SuppressWarnings(\"unchecked\")\n   public boolean visitUsingCustomHandler(Object obj, Type objType) {\n     JsonSerializer serializer = serializers.getHandlerFor(objType);\n-//    if (serializer == null) {\n-//      if (obj instanceof Map) {\n-//        serializer = serializers.getHandlerFor(Map.class);\n-//      } else if (obj instanceof Collection) {\n-//        serializer = serializers.getHandlerFor(Collection.class);\n-//      }\n-//    }\n     if (serializer != null) {\n       if (obj == null) {\n         assignToRoot(JsonNull.INSTANCE);\n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Field;\n import java.lang.reflect.Type;\n-import java.util.Collection;\n \n /**\n  * Provides ability to apply a visitor to an object and all of its fields recursively.\n      * This is called after the object navigator finishes visiting the current object\n      */\n     void endVisitingObject(Object node);\n-\n-    /**\n-     * This is called to visit the current object if it is an iterable\n-     *\n-     * @param componentType the type of each element of the component\n-     */\n-    void visitCollection(@SuppressWarnings(\"unchecked\") Collection collection, Type componentType);\n \n     /**\n      * This is called to visit the current object if it is an array\n     try {\n       boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler(obj, objType);\n       if (!visitedWithCustomHandler) {\n-        if (objTypeInfo.isCollectionOrArray()) {\n-          if (objTypeInfo.isArray()) {\n-            visitor.visitArray(obj, objType);\n-          } else { // must be a collection\n-            visitor.visitCollection((Collection<?>) obj, objType);\n-          }\n+        if (objTypeInfo.isArray()) {\n+          visitor.visitArray(obj, objType);\n         } else if (objTypeInfo.isEnum()) {\n           visitor.visitEnum(obj, objType);\n         } else if (objTypeInfo.isPrimitiveOrStringAndNotAnArray()) {", "timestamp": 1226629541, "metainfo": ""}