{"sha": "dfad0a3612a1753cb595dd41e6b1de8263536fef", "log": "Added tests in response to Issue 70.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n \n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n+import com.google.gson.InstanceCreator;\n import com.google.gson.JsonDeserializationContext;\n import com.google.gson.JsonDeserializer;\n import com.google.gson.JsonElement;\n-import com.google.gson.JsonNull;\n import com.google.gson.JsonObject;\n import com.google.gson.JsonParseException;\n import com.google.gson.JsonPrimitive;\n import com.google.gson.JsonSerializer;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n import com.google.gson.common.TestTypes.ClassWithCustomTypeConverter;\n+import com.google.gson.reflect.TypeToken;\n \n import junit.framework.TestCase;\n \n import java.lang.reflect.Type;\n+import java.util.HashSet;\n+import java.util.Set;\n \n /**\n  * Functional tests for the support of custom serializer and deserializers.\n   private static class ClassWithBooleanField {\n     Boolean value;\n   }\n+  \n+  private static class StringHolder {\n+    String part1;\n+    String part2;\n+\n+    public StringHolder(String string) {\n+      String[] parts = string.split(\":\");\n+      part1 = parts[0];\n+      part2 = parts[1];\n+    }\n+    public StringHolder(String part1, String part2) {\n+      this.part1 = part1;\n+      this.part2 = part2;\n+    }\n+  }\n+  \n+  private static class StringHolderTypeAdapter implements JsonSerializer<StringHolder>, \n+      JsonDeserializer<StringHolder>, InstanceCreator<StringHolder> {\n+\n+    public StringHolder createInstance(Type type) {\n+      //Fill up with objects that will be thrown away\n+      return new StringHolder(\"unknown:thing\");\n+    }\n+\n+    public StringHolder deserialize(JsonElement src, Type type, \n+        JsonDeserializationContext context) {\n+      return new StringHolder(src.getAsString());\n+    }\n+\n+    public JsonElement serialize(StringHolder src, Type typeOfSrc, \n+        JsonSerializationContext context) {\n+      String contents = src.part1 + ':' + src.part2;\n+      return new JsonPrimitive(contents);\n+    }\n+  }\n+\n+  // Test created from Issue 70\n+  public void testCustomAdapterInvokedForCollectionElementSerialization() {\n+    Gson gson = new GsonBuilder()\n+      .registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter())\n+      .create();\n+    Type setType = new TypeToken<Set<StringHolder>>() {}.getType();\n+    StringHolder holder = new StringHolder(\"Jacob\", \"Tomaw\");\n+    Set<StringHolder> setOfHolders = new HashSet<StringHolder>();\n+    setOfHolders.add(holder);\n+    String json = gson.toJson(holder);\n+    assertTrue(json.contains(\"Jacob:Tomaw\"));\n+  }\n+\n+  // Test created from Issue 70\n+  public void testCustomAdapterInvokedForCollectionElementDeserialization() {\n+    Gson gson = new GsonBuilder()\n+      .registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter())\n+      .create();\n+    Type setType = new TypeToken<Set<StringHolder>>() {}.getType();\n+    Set<StringHolder> setOfFoo = gson.fromJson(\"['Jacob:Tomaw']\", setType);\n+    assertEquals(1, setOfFoo.size());\n+    StringHolder foo = setOfFoo.iterator().next();\n+    assertEquals(\"Jacob\", foo.part1);\n+    assertEquals(\"Tomaw\", foo.part2);\n+  }\n }", "timestamp": 1226699999, "metainfo": ""}