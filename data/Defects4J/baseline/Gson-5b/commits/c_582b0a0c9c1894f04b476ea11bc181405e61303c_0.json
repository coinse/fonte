{"sha": "582b0a0c9c1894f04b476ea11bc181405e61303c", "log": "Fixed issue 443 by relying on Streams.parse() to return a JsonNull on empty documents and throw a JsonParseException otherwise.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonParser.java\n+++ b/gson/src/main/java/com/google/gson/JsonParser.java\n  */\n package com.google.gson;\n \n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+\n import com.google.gson.internal.Streams;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.MalformedJsonException;\n-import java.io.EOFException;\n-import java.io.IOException;\n-import java.io.Reader;\n-import java.io.StringReader;\n \n /**\n  * A parser to parse Json into a parse tree of {@link JsonElement}s\n       throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     } catch (OutOfMemoryError e) {\n       throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n-    } catch (JsonParseException e) {\n-      if (e.getCause() instanceof EOFException) {\n-        return JsonNull.INSTANCE;\n-      }\n-      throw e;\n     } finally {\n       json.setLenient(lenient);\n     }\n--- a/gson/src/main/java/com/google/gson/internal/Streams.java\n+++ b/gson/src/main/java/com/google/gson/internal/Streams.java\n       if (isEmpty) {\n         return JsonNull.INSTANCE;\n       }\n+      // We could possibly throw JsonSyntaxException since the stream prematurely ended.\n+      // However, it seems safe to throw JsonIOException since the source is an IOException.\n+      // Another reason is to maintain backward compatibility.\n       throw new JsonIOException(e);\n     } catch (MalformedJsonException e) {\n       throw new JsonSyntaxException(e);\n--- a/gson/src/test/java/com/google/gson/JsonParserTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonParserTest.java\n   protected void setUp() throws Exception {\n     super.setUp();\n     parser = new JsonParser();\n+  }\n+\n+  public void testParseInvalidJson() {\n+    try {\n+      parser.parse(\"[[]\");\n+      fail();\n+    } catch (JsonParseException expected) { }\n   }\n \n   public void testParseUnquotedStringArrayFails() {\n--- a/gson/src/test/java/com/google/gson/functional/JsonParserTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonParserTest.java\n   protected void setUp() throws Exception {\n     super.setUp();\n     gson = new Gson();\n+  }\n+\n+  public void testParseInvalidJson() {\n+    try {\n+      gson.fromJson(\"[[]\", Object[].class);\n+      fail();\n+    } catch (JsonSyntaxException expected) { }\n   }\n \n   public void testDeserializingCustomTree() {", "timestamp": 1341082091, "metainfo": ""}