{"sha": "7d53113ebc9ef6921c6238f013aabd10890611a0", "log": "fixed https://code.google.com/p/google-gson/issues/detail?id=509 by adding construction for EnumSet", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java\n+++ b/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java\n \n package com.google.gson.internal;\n \n-import com.google.gson.InstanceCreator;\n-import com.google.gson.reflect.TypeToken;\n-\n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.EnumSet;\n import java.util.LinkedHashMap;\n import java.util.LinkedHashSet;\n import java.util.LinkedList;\n import java.util.SortedSet;\n import java.util.TreeMap;\n import java.util.TreeSet;\n+\n+import com.google.gson.InstanceCreator;\n+import com.google.gson.JsonIOException;\n+import com.google.gson.reflect.TypeToken;\n \n /**\n  * Returns a function that can construct an instance of a requested type.\n    */\n   @SuppressWarnings(\"unchecked\") // use runtime checks to guarantee that 'T' is what it is\n   private <T> ObjectConstructor<T> newDefaultImplementationConstructor(\n-      Type type, Class<? super T> rawType) {\n+      final Type type, Class<? super T> rawType) {\n     if (Collection.class.isAssignableFrom(rawType)) {\n       if (SortedSet.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n           public T construct() {\n             return (T) new TreeSet<Object>();\n+          }\n+        };\n+      } else if (EnumSet.class.isAssignableFrom(rawType)) {\n+        return new ObjectConstructor<T>() {\n+          @SuppressWarnings(\"rawtypes\")\n+          public T construct() {\n+            if (type instanceof ParameterizedType) {\n+              Type elementType = ((ParameterizedType) type).getActualTypeArguments()[0];\n+              if (elementType instanceof Class) {\n+                return (T) EnumSet.noneOf((Class)elementType);\n+              } else {\n+                throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n+              }\n+            } else {\n+              throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n+            }\n           }\n         };\n       } else if (Set.class.isAssignableFrom(rawType)) {\n--- a/gson/src/test/java/com/google/gson/functional/EnumTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/EnumTest.java\n  */\n \n package com.google.gson.functional;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import junit.framework.TestCase;\n \n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.common.MoreAsserts;\n import com.google.gson.reflect.TypeToken;\n-import java.lang.reflect.Type;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.EnumSet;\n-import java.util.Set;\n-import junit.framework.TestCase;\n \n /**\n  * Functional tests for Java 5.0 enums.\n   public void testEnumCaseMapping() {\n     assertEquals(Gender.MALE, gson.fromJson(\"\\\"boy\\\"\", Gender.class));\n     assertEquals(\"\\\"boy\\\"\", gson.toJson(Gender.MALE, Gender.class));\n+  }\n+  enum Color { red, blue, green, yellow, thistle }\n+\n+  public void testEnumSet() {\n+    EnumSet<Roshambo> foo = EnumSet.of(Roshambo.ROCK, Roshambo.PAPER);\n+    String json = gson.toJson(foo);\n+    Type type = new TypeToken<EnumSet<Roshambo>>() {}.getType();\n+    EnumSet<Roshambo> bar = gson.fromJson(json, type);\n+    assertTrue(bar.contains(Roshambo.ROCK));\n+    assertTrue(bar.contains(Roshambo.PAPER));\n+    assertFalse(bar.contains(Roshambo.SCISSORS));\n   }\n \n   public enum Roshambo {", "timestamp": 1365110150, "metainfo": ""}