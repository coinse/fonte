{"sha": "4402240294300515e8f4141adba42732395b5c21", "log": "Converted Number type adapter to the new style.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n   private static final DefaultTimestampDeserializer TIMESTAMP_DESERIALIZER =\n     new DefaultTimestampDeserializer();\n \n-  private static final NumberTypeAdapter NUMBER_TYPE_ADAPTER = new NumberTypeAdapter();\n-\n   private static final GregorianCalendarTypeAdapter GREGORIAN_CALENDAR_TYPE_ADAPTER =\n       new GregorianCalendarTypeAdapter();\n \n     map.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n     map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n \n-    map.register(Number.class, NUMBER_TYPE_ADAPTER, true);\n-\n     map.makeUnmodifiable();\n     return map;\n   }\n     map.register(Time.class, wrapDeserializer(TIME_TYPE_ADAPTER), true);\n     map.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n     map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n-\n-    map.register(Number.class, NUMBER_TYPE_ADAPTER, true);\n \n     map.makeUnmodifiable();\n     return map;\n       return GregorianCalendarTypeAdapter.class.getSimpleName();\n     }\n   }\n-\n-  private static final class NumberTypeAdapter\n-      implements JsonSerializer<Number>, JsonDeserializer<Number> {\n-    public JsonElement serialize(Number src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src);\n-    }\n-\n-    public Number deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-        throws JsonParseException {\n-      try {\n-        return json.getAsNumber();\n-      } catch (NumberFormatException e) {\n-        throw new JsonSyntaxException(e);\n-      } catch (UnsupportedOperationException e) {\n-        throw new JsonSyntaxException(e);\n-      } catch (IllegalStateException e) {\n-        throw new JsonSyntaxException(e);\n-      }\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return NumberTypeAdapter.class.getSimpleName();\n-    }\n-  }\n }\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n             floatAdapter(serializeSpecialFloatingPointValues)))\n         .factory(new ExcludedTypeAdapterFactory(\n             serializationExclusionStrategy, deserializationExclusionStrategy))\n+        .factory(TypeAdapters.NUMBER_FACTORY)\n         .factory(TypeAdapters.CHARACTER_FACTORY)\n         .factory(TypeAdapters.STRING_FACTORY)\n         .factory(TypeAdapters.STRING_BUILDER_FACTORY)\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n \n import com.google.gson.JsonIOException;\n import com.google.gson.JsonSyntaxException;\n+import com.google.gson.internal.LazilyParsedNumber;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n   public static final TypeAdapter.Factory DOUBLE_FACTORY\n       = newFactory(double.class, Double.class, DOUBLE);\n \n+  public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {\n+    @Override\n+    public Number read(JsonReader reader) throws IOException {\n+      JsonToken jsonToken = reader.peek();\n+      switch (jsonToken) {\n+      case NULL:\n+        reader.nextNull(); // TODO: does this belong here?\n+        return null;\n+      case NUMBER:\n+        return new LazilyParsedNumber(reader.nextString());\n+      default:\n+        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n+      }\n+    }\n+    @Override\n+    public void write(JsonWriter writer, Number value) throws IOException {\n+      writer.value(value);\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory NUMBER_FACTORY = newFactory(Number.class, NUMBER);\n+\n   public static final TypeAdapter<Character> CHARACTER = new TypeAdapter<Character>() {\n     @Override\n     public Character read(JsonReader reader) throws IOException {", "timestamp": 1316451722, "metainfo": ""}