{"sha": "eaaa2a1b4f7daa7cc5c0485fba77bfe58e1ebf75", "log": "added functional tests for applying JsonAdapter annotation on Fields.", "commit": "\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java\n+/*\n+ * Copyright (C) 2014 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import java.io.IOException;\n+\n+import junit.framework.TestCase;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.annotations.JsonAdapter;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+\n+/**\n+ * Functional tests for the {@link com.google.gson.annotations.JsonAdapter} annotation on fields.\n+ */\n+public final class JsonAdapterAnnotationOnFieldsTest extends TestCase {\n+\n+  public void testJsonAdapterInvoked() {\n+    Gson gson = new Gson();\n+    String json = gson.toJson(new Computer(new User(\"Inderjeet Singh\")));\n+    assertEquals(\"{\\\"user\\\":{\\\"firstName\\\":\\\"Inderjeet\\\",\\\"lastName\\\":\\\"Singh\\\"}}\", json);\n+    Computer computer = gson.fromJson(\"{'user':{'firstName':'Jesse','lastName':'Wilson'}}\", Computer.class);\n+    assertEquals(\"Jesse Wilson\", computer.user.name);\n+  }\n+\n+  public void testRegisteredTypeAdapterOverridesFieldAnnotation() {\n+    Gson gson = new GsonBuilder()\n+      .registerTypeAdapter(Part.class, new TypeAdapter<Part>() {\n+        @Override public void write(JsonWriter out, Part user) throws IOException {\n+          out.value(\"registeredAdapter\");\n+        }\n+        @Override public Part read(JsonReader in) throws IOException {\n+          return new Part(in.nextString());\n+        }\n+      }).create();\n+    String json = gson.toJson(new Gadget(new Part(\"screen\")));\n+    assertEquals(\"{\\\"part\\\":\\\"registeredAdapter\\\"}\", json);\n+    Gadget gadget = gson.fromJson(\"{'part':'registeredAdapterValue'}\", Gadget.class);\n+    assertEquals(\"registeredAdapterValue\", gadget.part.name);\n+  }\n+\n+  private static final class Gadget {\n+    @JsonAdapter(PartJsonAdapter.class)\n+    final Part part;\n+    Gadget(Part part) {\n+      this.part = part;\n+    }\n+  }\n+\n+  private static final class Part {\n+    final String name;\n+    Part(String name) {\n+      this.name = name;\n+    }\n+  }\n+\n+  private static class PartJsonAdapter extends TypeAdapter<Part> {\n+    @Override public void write(JsonWriter out, Part part) throws IOException {\n+      out.value(part.name);\n+    }\n+    @Override public Part read(JsonReader in) throws IOException {\n+      in.nextString();\n+      return new Part(\"partJsonAdapter\");\n+    }\n+  }\n+\n+  private static final class Computer {\n+    @JsonAdapter(UserJsonAdapter.class)\n+    final User user;\n+    Computer(User user) {\n+      this.user = user;\n+    }\n+  }\n+\n+  @JsonAdapter(UserJsonAdapter.class)\n+  private static class User {\n+    public final String name;\n+    private User(String name) {\n+      this.name = name;\n+    }\n+  }\n+\n+  private static class UserJsonAdapter extends TypeAdapter<User> {\n+    @Override public void write(JsonWriter out, User user) throws IOException {\n+      // implement write: combine firstName and lastName into name\n+      out.beginObject();\n+      String[] parts = user.name.split(\" \");\n+      out.name(\"firstName\");\n+      out.value(parts[0]);\n+      out.name(\"lastName\");\n+      out.value(parts[1]);\n+      out.endObject();\n+    }\n+    @Override public User read(JsonReader in) throws IOException {\n+      // implement read: split name into firstName and lastName\n+      in.beginObject();\n+      in.nextName();\n+      String firstName = in.nextString();\n+      in.nextName();\n+      String lastName = in.nextString();\n+      in.endObject();\n+      return new User(firstName + \" \" + lastName);\n+    }\n+  }\n+}", "timestamp": 1394350262, "metainfo": ""}