{"sha": "45bf2db854b01e17efda9fabf048a409917340a1", "log": "Created new projects: 1. wsdef: contains classes that are used to define a Gson based JSON web service 2. wsclient: contains classes that are used to write a Gson based web-service client  wsf is now only a server-side framework. Moved classes relevant for wsdef and wsclient from it to the individual projects.", "commit": "\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/RequestSender.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.lang.reflect.Type;\n+import java.net.HttpURLConnection;\n+import java.util.Map;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.RequestBody;\n+import com.google.gson.webservice.definition.WebServiceRequest;\n+\n+/**\n+ * Class to send Web service requests on a {@link HttpURLConnection}.\n+ * \n+ * @author inder\n+ */\n+public final class RequestSender {\n+  private final Gson gson;\n+\n+  public RequestSender(Gson gson) {\n+    this.gson = gson;\n+  }\n+  \n+  public void send(HttpURLConnection conn, WebServiceRequest request) {    \n+    try {\n+      conn.setRequestMethod(request.getHttpMethod().toString());\n+      conn.setRequestProperty(\"Content-Type\", request.getContentType());\n+      \n+      // Assume conservatively that the response will need to be read.\n+      // This is done here instead of in the response receiver because this property must be set\n+      // before sending any data on the connection.\n+      conn.setDoInput(true);\n+      \n+      addRequestParams(conn, request.getHeaders());\n+      RequestBody requestBody = request.getBody();\n+      if (requestBody.getSpec().size() > 0) {\n+        conn.setDoOutput(true);    \n+        addRequestBody(conn, requestBody);\n+      }      \n+      \n+      // Initiate the sending of the request.\n+      conn.connect();\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  private void addRequestParams(HttpURLConnection conn, HeaderMap requestParams) {\n+    HeaderMapSpec spec = requestParams.getSpec();\n+    for (Map.Entry<String, Object> entry : requestParams.entrySet()) {\n+      String paramName = entry.getKey();\n+      Type type = spec.getTypeFor(paramName);\n+      Object value = entry.getValue();\n+      String json = gson.toJson(value, type);\n+      conn.addRequestProperty(paramName, json);\n+    }\n+  }\n+  \n+  private void addRequestBody(HttpURLConnection conn, RequestBody body) throws IOException {\n+    Writer writer = new PrintWriter(conn.getOutputStream());\n+    gson.toJson(body, writer);\n+    writer.close();\n+  }\n+}\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/ResponseReceiver.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.lang.reflect.Type;\n+import java.net.HttpURLConnection;\n+import java.util.Map;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.gson.Gson;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.ResponseBody;\n+import com.google.gson.webservice.definition.ResponseBodySpec;\n+import com.google.gson.webservice.definition.ResponseSpec;\n+import com.google.gson.webservice.definition.WebServiceResponse;\n+\n+/**\n+ * Receives a response coming on an {@link HttpURLConnection}.\n+ * \n+ * @author inder\n+ */\n+public final class ResponseReceiver {\n+  private final Gson gson;\n+  private final ResponseSpec spec;\n+\n+  public ResponseReceiver(Gson gson, ResponseSpec spec) {\n+    this.gson = gson;\n+    this.spec = spec;\n+  }\n+  \n+  public WebServiceResponse receive(HttpURLConnection conn) {\n+    try {\n+      HeaderMapSpec paramSpec = spec.getHeadersSpec();\n+      ResponseBodySpec bodySpec = spec.getBodySpec();\n+      // read response\n+      HeaderMap responseParams = readResponseHeaders(conn, paramSpec);\n+      ResponseBody responseBody = readResponseBody(conn, bodySpec);\n+      return new WebServiceResponse(responseParams, responseBody);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  private HeaderMap readResponseHeaders(HttpURLConnection conn, HeaderMapSpec paramsSpec) {    \n+    HeaderMap.Builder paramsBuilder = new HeaderMap.Builder(paramsSpec);    \n+    for (Map.Entry<String, Type> entry : paramsSpec.entrySet()) {\n+      String paramName = entry.getKey();\n+      String json = conn.getHeaderField(paramName);\n+      if (json != null) {\n+        Type typeOfT = paramsSpec.getTypeFor(paramName);\n+        Object value = gson.fromJson(json, typeOfT);\n+        paramsBuilder.put(paramName, value, typeOfT);\n+      }\n+    }\n+    return paramsBuilder.create();\n+  }\n+\n+  private ResponseBody readResponseBody(HttpURLConnection conn, ResponseBodySpec bodySpec) \n+      throws IOException {\n+    if (bodySpec.size() == 0) {\n+      return new ResponseBody.Builder(bodySpec).create();\n+    }\n+    String connContentType = conn.getContentType();\n+    Preconditions.checkArgument(connContentType.contains(bodySpec.getContentType()));\n+    Reader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n+    ResponseBody body = gson.fromJson(reader, ResponseBody.class);\n+    return body;\n+  }\n+}\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/WebServiceClient.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.webservice.definition.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.WebServiceRequest;\n+import com.google.gson.webservice.definition.WebServiceResponse;\n+\n+/**\n+ * Main class used by clients to access a Gson Web service.\n+ * \n+ * @author inder\n+ */\n+public final class WebServiceClient {\n+  private final WebServiceConfig config;\n+  private final WebServiceCallSpec callSpec;\n+  private final Gson gson;\n+\n+  public WebServiceClient(Gson gson, WebServiceConfig serverConfig, WebServiceCallSpec callSpec) {\n+    this.gson = gson;\n+    this.config = serverConfig;\n+    this.callSpec = callSpec;\n+  }\n+  \n+  private URL getWebServiceUrl() {\n+    String url = config.getServiceBaseUrl() + callSpec.getPath().get();\n+    try {\n+      return new URL(url);\n+    } catch (MalformedURLException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+  \n+  public WebServiceResponse getResponse(WebServiceRequest request) {\n+    try {\n+      HttpURLConnection conn = (HttpURLConnection) getWebServiceUrl().openConnection();\n+      RequestSender requestSender = new RequestSender(gson);\n+      requestSender.send(conn, request);\n+      ResponseReceiver responseReceiver = new ResponseReceiver(gson, callSpec.getResponseSpec());\n+      return responseReceiver.receive(conn);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"{config:\").append(config).append(\",callSpec:\").append(callSpec);\n+    sb.append(\"gson:\").append(gson).append(\"}\");\n+    return sb.toString();\n+  }\n+}\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/WebServiceConfig.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+/**\n+ * Configuration needed to access a Gson web service.\n+ * \n+ * @author inder\n+ */\n+public final class WebServiceConfig {\n+  private final String serviceBaseUrl;\n+\n+  public WebServiceConfig(String serviceBaseUrl) {\n+    this.serviceBaseUrl = serviceBaseUrl;\n+  }\n+\n+  public String getServiceBaseUrl() {\n+    return serviceBaseUrl;\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    return serviceBaseUrl;\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/CallPath.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+/**\n+ * Encapsulation of a Web service path that is sent by the client.\n+ * \n+ * @author inder\n+ */\n+public final class CallPath {\n+\n+  private final String path;\n+\n+  public CallPath(String path) {\n+    this.path = path;\n+  }\n+\n+  public String get() {\n+    return path;\n+  }\n+  \n+  @Override\n+  public int hashCode() {\n+    return path.hashCode();\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj) {\n+      return true;\n+    }\n+    if (obj == null) {\n+      return false;\n+    }\n+    if (getClass() != obj.getClass()) {\n+      return false;\n+    }\n+    CallPath other = (CallPath) obj;\n+    if (path == null && other.path != null) { \n+      return false;\n+    } else if (!path.equals(other.path)) {\n+      return false;\n+    }\n+    return true;\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    return path;\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/CallPathMap.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+import java.util.Map;\n+\n+import com.google.common.collect.Maps;\n+\n+/**\n+ * A generic Map of calls with relative path where the call is available as the key. \n+ * \n+ * @author inder\n+ *\n+ * @param <T> The target of the call path.\n+ */\n+public final class CallPathMap<T> {\n+  \n+  public static class Builder<T> {\n+    private final Map<CallPath, T> contents = Maps.newHashMap();\n+    private final T nullValue;\n+    \n+    public Builder(T nullValue) {\n+      this.nullValue = nullValue;\n+    }\n+    public <R extends T> Builder<T> put(CallPath path, R content) {\n+      contents.put(path, content);\n+      return this;\n+    }\n+    \n+    public CallPathMap<T> create() {\n+      return new CallPathMap<T>(contents, nullValue);\n+    }\n+  }\n+  \n+  private final Map<CallPath, T> contents;\n+  private final T nullValue;\n+  \n+  private CallPathMap(Map<CallPath, T> contents, T nullValue) {\n+    this.contents = contents;\n+    this.nullValue = nullValue;\n+  }\n+  \n+  public T get(CallPath path) {\n+    T content = contents.get(path);\n+    return content == null ? nullValue : content;\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder(\"{\");\n+    boolean first = true;\n+    for (Map.Entry<CallPath, T> entry : contents.entrySet()) {\n+      if (first) {\n+        first = false;\n+      } else {\n+        sb.append(\",\");\n+      }\n+      CallPath path = entry.getKey();\n+      sb.append(path.get()).append(\":\");\n+      sb.append(entry.getValue().toString());\n+    }\n+    sb.append(\"}\");\n+    return sb.toString();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/ContentBody.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+import java.util.Map;\n+\n+/**\n+ * Body of a request or response. The body contains a map of name-value pairs.\n+ * There is a {@link ContentBodySpec} associated with the body as well and only the name-value \n+ * pairs consistent with the specification are permitted.\n+ * \n+ * @author inder\n+ */\n+class ContentBody extends ParamMap {\n+  \n+  ContentBody(ContentBodySpec spec, Map<String, Object> contents) {\n+    super(spec, contents);\n+  }\n+  \n+  public ContentBodySpec getSpec() {\n+    return (ContentBodySpec) spec;\n+  }\n+\n+  public String getContentType() {\n+    return getSpec().getContentType();\n+  }\n+  \n+  public String getCharacterEncoding() {\n+    return getSpec().getCharacterEncoding();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/ContentBodySpec.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+import java.lang.reflect.Type;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Base class for the specification of a {@link ContentBody}.\n+ * \n+ * @author inder\n+ */\n+class ContentBodySpec implements ParamMapSpec {\n+\n+  public static final String JSON_CONTENT_TYPE = \"application/json\";\n+  private static final String JSON_CHARACTER_ENCODING = \"utf-8\";\n+  \n+  private final Map<String, Type> paramsSpec;\n+\n+  protected ContentBodySpec(Map<String, Type> paramsSpec) {\n+    this.paramsSpec = Collections.unmodifiableMap(paramsSpec);\n+  }\n+  \n+  public Type getTypeFor(String paramName) {\n+    return paramsSpec.get(paramName);\n+  }\n+  \n+  public boolean checkIfCompatible(String paramName, Type type) {\n+    return type.equals(getTypeFor(paramName));\n+  }\n+  \n+  public boolean checkIfCompatible(String paramName, Object object) {\n+    return checkIfCompatible(paramName, object.getClass());\n+  }\n+  \n+  public Set<Map.Entry<String, Type>> entrySet() {\n+    return paramsSpec.entrySet();\n+  }\n+  \n+  public int size() {\n+    return paramsSpec.size();\n+  }\n+  \n+  public String getContentType() {\n+    return JSON_CONTENT_TYPE;\n+  }\n+  \n+  public String getCharacterEncoding() {\n+    return JSON_CHARACTER_ENCODING;\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    return Util.toStringMapKeys(paramsSpec);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/HeaderMap.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Map of request or response header objects. There is a {@link HeaderMapSpec} associated with the\n+ * map as well and only those headers are allowed that are consistent with the specification.\n+ * \n+ * @author inder\n+ */\n+public final class HeaderMap extends ParamMap {\n+\n+  public static class Builder extends ParamMap.Builder<HeaderMapSpec> {\n+    @Inject\n+    public Builder(HeaderMapSpec spec) {\n+      super(spec);\n+    }\n+    \n+    @Override\n+    public Builder put(String paramName, Object content) {\n+      return (Builder) super.put(paramName, content);\n+    }\n+\n+    @Override\n+    public Builder put(String paramName, Object content, Type typeOfContent) {\n+      return (Builder) super.put(paramName, content, typeOfContent);\n+    }\n+    \n+    public HeaderMap create() {\n+      return new HeaderMap(spec, contents);\n+    }\n+  }\n+  \n+  private HeaderMap(HeaderMapSpec spec, Map<String, Object> contents) {\n+    super(spec, contents);\n+  }  \n+\n+  @Override\n+  public HeaderMapSpec getSpec() {\n+    return (HeaderMapSpec) super.getSpec();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/HeaderMapSpec.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.collect.Maps;\n+\n+/**\n+ * Specification of a header map for {@link HeaderMap}. \n+ *\n+ * @author inder\n+ */\n+public final class HeaderMapSpec implements ParamMapSpec {\n+  \n+  public static class Builder {\n+    private final Map<String, Type> map = Maps.newLinkedHashMap();\n+  \n+    public void put(String headerName, Type headerType) {\n+      map.put(headerName, headerType);\n+    }\n+    \n+    public HeaderMapSpec create() {\n+      return new HeaderMapSpec(map);\n+    }\n+  }\n+  private final Map<String, Type> map;\n+  \n+  private HeaderMapSpec(Map<String, Type> map) {\n+    this.map = map;\n+  }  \n+  \n+  public Type getTypeFor(String headerName) {\n+    return map.get(headerName);\n+  }\n+  \n+  public Set<Map.Entry<String, Type>> entrySet() {\n+    return map.entrySet();\n+  }\n+  \n+  @Override\n+  public boolean checkIfCompatible(String headerName, Type targetType) {\n+    Type typeOfHeader = getTypeFor(headerName);\n+    if (typeOfHeader == null) {\n+      return false;\n+    }\n+    Class<?> rawClassOfHeader = TypeUtils.toRawClass(typeOfHeader);\n+    Class<?> rawClassOfTargetType = TypeUtils.toRawClass(targetType);\n+    return rawClassOfHeader.isAssignableFrom(rawClassOfTargetType);\n+  }\n+\n+  public boolean checkIfCompatible(String headerName, Object headerValue) {\n+    return checkIfCompatible(headerName, headerValue.getClass());\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    return Util.toStringMapKeys(map);\n+  }\n+\n+  @Override\n+  public int size() {\n+    return map.size();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/HttpMethod.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+/**\n+ * An enum of Http methods to provide strongly-typed versions instead of strings. \n+ * \n+ * @author inder\n+ */\n+public enum HttpMethod { \n+  GET, \n+  POST, \n+  PUT, \n+  DELETE;\n+  \n+  public static HttpMethod getMethod(String method) {\n+    return valueOf(method.trim().toUpperCase());\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/ParamMap.java\n+package com.google.gson.webservice.definition;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Maps;\n+\n+class ParamMap {\n+\n+  public static class Builder<T extends ParamMapSpec> {    \n+    protected final Map<String, Object> contents = Maps.newLinkedHashMap();\n+    protected final T spec;\n+\n+    public Builder(T spec) {\n+      this.spec = spec;\n+    }\n+\n+    /**\n+     * If value is a generic type, use {@link #put(String, Object, Type)} instead.\n+     * \n+     * @param key\n+     * @param value\n+     */\n+    public Builder<T> put(String paramName, Object content) {\n+      return put(paramName, content, content.getClass());\n+    }\n+\n+    public Builder<T> put(String paramName, Object content, Type typeOfContent) {\n+      spec.checkIfCompatible(paramName, typeOfContent);\n+      contents.put(paramName, content);\n+      return this;\n+    }\n+  }\n+  \n+  protected final Map<String, Object> contents;\n+  protected final ParamMapSpec spec;\n+\n+  protected ParamMap(ParamMapSpec spec, Map<String, Object> contents) {\n+    this.spec = spec;\n+    this.contents = contents;\n+  }\n+\n+  public ParamMapSpec getSpec() {\n+    return spec;\n+  }\n+\n+  public Object get(String paramName) {\n+    return contents.get(paramName);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> T get(String key, Type typeOfValue) {\n+    Preconditions.checkArgument(spec.checkIfCompatible(key, typeOfValue));\n+    return (T) contents.get(key);\n+  }\n+  \n+  public Type getSpec(String headerName) {\n+    return spec.getTypeFor(headerName);\n+  }\n+\n+  public Set<Map.Entry<String, Object>> entrySet() {\n+    return contents.entrySet();\n+  }\n+\n+  public int size() {\n+    return contents.size();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return Util.toStringMap(contents);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/ParamMapSpec.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Specification of a parameter map. Both {@link ContentBody} and {@link HeaderMap} are \n+ * parameter maps.\n+ * \n+ * @author inder\n+ */\n+interface ParamMapSpec {\n+\n+  Type getTypeFor(String paramName);\n+\n+  boolean checkIfCompatible(String paramName, Type type);\n+\n+  boolean checkIfCompatible(String paramName, Object object);\n+  \n+  public Set<Map.Entry<String, Type>> entrySet();\n+\n+  public int size();\n+\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/RequestBody.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Definition of the request body of a {@link WebServiceCall}. The request body is what is sent out\n+ * in the output stream of the request (for example, with \n+ * {@link java.net.HttpURLConnection#getOutputStream()}) , and is read by the \n+ * {@link javax.servlet.http.HttpServletRequest#getInputStream()}.\n+ * \n+ * @author inder\n+ */\n+public final class RequestBody extends ContentBody {\n+\n+  public static class Builder extends ParamMap.Builder<RequestBodySpec> {    \n+    \n+    @Inject\n+    public Builder(RequestBodySpec spec) {\n+      super(spec);\n+    }\n+    \n+    @Override\n+    public Builder put(String paramName, Object content) {\n+      return (Builder) super.put(paramName, content);\n+    }\n+\n+    @Override\n+    public Builder put(String paramName, Object content, Type typeOfContent) {\n+      return (Builder) super.put(paramName, content, typeOfContent);\n+    }\n+    \n+    public RequestBody create() {\n+      return new RequestBody(spec, contents);\n+    }    \n+  }\n+\n+  private RequestBody(RequestBodySpec spec, Map<String, Object> contents) {\n+    super(spec, contents);\n+  }\n+  \n+  @Override\n+  public RequestBodySpec getSpec() {\n+    return (RequestBodySpec) spec;\n+  }  \n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/RequestBodySpec.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+import com.google.common.collect.Maps;\n+\n+/**\n+ * Specification of a {@link RequestBody}.\n+ * \n+ * @author inder\n+ */\n+public final class RequestBodySpec extends ContentBodySpec {\n+  \n+  public static class Builder {\n+    private final Map<String, Type> paramsSpec = Maps.newLinkedHashMap();\n+    public Builder add(String paramName, Type type) {\n+      paramsSpec.put(paramName, type);\n+      return this;\n+    }\n+    \n+    public RequestBodySpec create() {\n+      RequestBodySpec spec = new RequestBodySpec(paramsSpec);\n+      return spec;\n+    }    \n+  }\n+  \n+  public RequestBodySpec(Map<String, Type> paramsSpec) {\n+    super(paramsSpec);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/RequestSpec.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Specification for a {@link WebServiceRequest}.\n+ * \n+ * @author inder\n+ */\n+public final class RequestSpec {\n+\n+  private final HeaderMapSpec headersSpec;\n+  private final RequestBodySpec bodySpec;\n+  \n+  public RequestSpec(HeaderMapSpec headersSpec, RequestBodySpec bodySpec) {\n+    Preconditions.checkNotNull(headersSpec);\n+    Preconditions.checkNotNull(bodySpec);\n+    \n+    this.headersSpec = headersSpec;\n+    this.bodySpec = bodySpec;\n+  }\n+  \n+  public HeaderMapSpec getHeadersSpec() {\n+    return headersSpec;\n+  }\n+ \n+  public RequestBodySpec getBodySpec() {\n+    return bodySpec;\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder(\"{headersSpec:\");\n+    sb.append(headersSpec).append(\",bodySpec:\");\n+    sb.append(bodySpec).append(\"}\");\n+    return sb.toString();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/ResponseBody.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * body of the response. This is written out as JSON to be sent out to the client. \n+ * \n+ * @author inder\n+ */\n+public final class ResponseBody extends ContentBody {\n+\n+  public static class Builder extends ParamMap.Builder<ResponseBodySpec> {    \n+\n+    @Inject\n+    public Builder(ResponseBodySpec spec) {\n+      super(spec);\n+    }\n+\n+    @Override\n+    public Builder put(String paramName, Object content) {\n+      return (Builder) super.put(paramName, content);\n+    }\n+\n+    @Override\n+    public Builder put(String paramName, Object content, Type typeOfContent) {\n+      return (Builder) super.put(paramName, content, typeOfContent);\n+    }\n+    \n+    public ResponseBody create() {\n+      return new ResponseBody(spec, contents);\n+    }    \n+  }\n+\n+\n+  private ResponseBody(ResponseBodySpec spec, Map<String, Object> contents) {\n+    super(spec, contents);\n+  }\n+  \n+  @Override\n+  public ResponseBodySpec getSpec() {\n+    return (ResponseBodySpec) spec;\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/ResponseBodySpec.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+import com.google.common.collect.Maps;\n+\n+/**\n+ * Specification of a {@link ResponseBody}.\n+ * \n+ * @author inder\n+ */\n+public final class ResponseBodySpec extends ContentBodySpec {\n+  \n+  public static class Builder {\n+    private final Map<String, Type> paramsSpec = Maps.newLinkedHashMap();\n+    public Builder add(String paramName, Type type) {\n+      paramsSpec.put(paramName, type);\n+      return this;\n+    }\n+    \n+    public ResponseBodySpec create() {\n+      ResponseBodySpec spec = new ResponseBodySpec(paramsSpec);\n+      return spec;\n+    }    \n+  }\n+  \n+  public ResponseBodySpec(Map<String, Type> paramsSpec) {\n+    super(paramsSpec);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/ResponseSpec.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Specification for a {@link WebServiceResponse}.\n+ * \n+ * @author inder\n+ */\n+public final class ResponseSpec {\n+  private final HeaderMapSpec headersSpec;\n+  private final ResponseBodySpec bodySpec;\n+\n+  public ResponseSpec(HeaderMapSpec headersSpec, ResponseBodySpec bodySpec) {\n+    Preconditions.checkNotNull(headersSpec);\n+    Preconditions.checkNotNull(bodySpec);\n+    \n+    this.headersSpec = headersSpec;\n+    this.bodySpec = bodySpec;\n+  }\n+\n+  public ResponseBodySpec getBodySpec() {\n+    return bodySpec;\n+  }\n+\n+  public HeaderMapSpec getHeadersSpec() {\n+    return headersSpec;\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder(\"{headersSpec:\");\n+    sb.append(headersSpec).append(\",bodySpec:\");\n+    sb.append(bodySpec).append(\"}\");\n+    return sb.toString();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/TypeUtils.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// Copied from com.google.gson.TypeUtils\n+package com.google.gson.webservice.definition;\n+\n+import java.lang.reflect.Array;\n+import java.lang.reflect.GenericArrayType;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+\n+/**\n+ * Utility class containing some methods for obtaining information on types.\n+ *\n+ * @author Inderjeet Singh\n+ * @author Joel Leitch\n+ */\n+final class TypeUtils {\n+\n+  /**\n+   * Returns the actual type matching up with the first type variable.\n+   * So, for a {@code typeInfo} instance defined as:\n+   * <pre>\n+   *   class Foo<A, B> {\n+   *   }\n+   *   Type fooType = new TypeToken<Foo<Integer, String>>() {}.getType();\n+   * </pre>\n+   * <code>TypeUtils.getActualTypeForFirstTypeVariable(fooType)</code> will return Integer.class.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  static Type getActualTypeForFirstTypeVariable(Type type) {\n+    if (type instanceof Class) {\n+      return Object.class;\n+    } else if (type instanceof ParameterizedType) {\n+      return ((ParameterizedType)type).getActualTypeArguments()[0];\n+    } else if (type instanceof GenericArrayType) {\n+      return getActualTypeForFirstTypeVariable(((GenericArrayType)type).getGenericComponentType());\n+    } else {\n+      throw new IllegalArgumentException(\"Type \\'\" + type + \"\\' is not a Class, \"\n+          + \"ParameterizedType, or GenericArrayType. Can't extract class.\");\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  static boolean isArray(Type type) {\n+    if (type instanceof Class) {\n+      return ((Class<?>)type).isArray();\n+    } else if (type instanceof GenericArrayType) {\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * This method returns the actual raw class associated with the specified type.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  static Class<?> toRawClass(Type type) {\n+    if (type instanceof Class) {\n+      return (Class<?>) type;\n+    } else if (type instanceof ParameterizedType) {\n+      ParameterizedType actualType = (ParameterizedType)type;\n+      return toRawClass(actualType.getRawType());\n+    } else if (type instanceof GenericArrayType) {\n+      GenericArrayType actualType = (GenericArrayType) type;\n+      Class<?> rawClass = toRawClass(actualType.getGenericComponentType());\n+      return wrapWithArray(rawClass);\n+    } else {\n+      throw new IllegalArgumentException(\"Type \\'\" + type + \"\\' is not a Class, \"\n+          + \"ParameterizedType, or GenericArrayType. Can't extract class.\");\n+    }\n+  }\n+\n+  static Class<?> wrapWithArray(Class<?> rawClass) {\n+    return Array.newInstance(rawClass, 0).getClass();\n+  }\n+\n+  private TypeUtils() {\n+    // Class with just some static utility methods, should not be instantiated\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/Util.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+final class Util {\n+  private Util() { }\n+  \n+  public static boolean isAssignableFrom(Type typeOfValue, Type expectedType) {\n+    return typeOfValue.equals(expectedType);\n+  }\n+  \n+  public static String toStringMapKeys(Map<String, ?> map) {\n+    StringBuilder sb = new StringBuilder(\"[\");\n+    boolean first = true;\n+    for (Map.Entry<String, ?> entry : map.entrySet()) {\n+      if (first) {\n+        first = false;\n+      } else {\n+        sb.append(\",\");\n+      }\n+      sb.append(entry.getKey());\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();    \n+  }\n+  \n+  public static String toStringMapOfTypes(Map<String, Type> map) {\n+    StringBuilder sb = new StringBuilder(\"[\");\n+    boolean first = true;\n+    for (Map.Entry<String, ?> entry : map.entrySet()) {\n+      if (first) {\n+        first = false;\n+      } else {\n+        sb.append(\",\");\n+      }\n+      sb.append(entry.getKey()).append(\":\");\n+      Class<?> clazz = (Class<?>) entry.getValue();\n+      sb.append(clazz.getSimpleName());\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();    \n+  }\n+  \n+  public static String toStringMap(Map<String, Object> map) {\n+    StringBuilder sb = new StringBuilder(\"[\");\n+    boolean first = true;\n+    for (Map.Entry<String, ?> entry : map.entrySet()) {\n+      if (first) {\n+        first = false;\n+      } else {\n+        sb.append(\",\");\n+      }\n+      sb.append(entry.getKey()).append(\":\").append(entry.getValue());\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();    \n+  }\n+\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceAppException.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+/**\n+ * Base class for exceptions thrown to indicate a Web service external or application error \n+ * condition. This can happen due to bad input, or illegal sequence of operations. This should\n+ * never be thrown to indicate a System error condition. For that purpose, use \n+ * {@link WebServiceSystemException} instead. \n+ * \n+ * @author inder\n+ */\n+public class WebServiceAppException extends RuntimeException {\n+\n+  private static final long serialVersionUID = 4422041697108937041L;\n+\n+  public WebServiceAppException(Exception cause) {\n+    super(cause);\n+  }\n+  \n+  public WebServiceAppException(String msg, Exception cause) {\n+\tsuper(msg, cause);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceCall.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+/**\n+ * The data associated with a Web service call. This includes http request header parameters (form \n+ * and URL parameters), {@link RequestBody}, response header parameters, and {@link ResponseBody}. \n+ * \n+ * @author inder\n+ */\n+public final class WebServiceCall {\n+  \n+  private final WebServiceCallSpec callSpec;\n+  private final WebServiceRequest request;\n+  private final WebServiceResponse response;\n+  \n+  public WebServiceCall(WebServiceCallSpec callSpec, WebServiceRequest request, \n+      WebServiceResponse response) {\n+    this.callSpec = callSpec;\n+    this.request = request;\n+    this.response = response;\n+  }\n+\n+  public WebServiceCallSpec getSpec() {\n+    return callSpec;\n+  }\n+  \n+  public WebServiceRequest getRequest() {\n+    return request;\n+  }\n+\n+  public WebServiceResponse getResponse() {\n+    return response;\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceCallSpec.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+import java.lang.reflect.Type;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import com.google.common.base.Preconditions;\n+\n+\n+/**\n+ * Specification for a Json web service call. The call includes the relative path where the call \n+ * is available, the specification of requests, and responses. \n+ * \n+ * @author inder\n+ */\n+public final class WebServiceCallSpec {\n+  \n+  public static final WebServiceCallSpec NULL_SPEC = new Builder(new CallPath(\"\")).create();\n+  \n+  public static class Builder {\n+\tprivate final CallPath callPath;\n+\tprivate final Set<HttpMethod> supportedHttpMethods = new LinkedHashSet<HttpMethod>();\n+    private final HeaderMapSpec.Builder reqParamsSpecBuilder = new HeaderMapSpec.Builder();\n+    private final RequestBodySpec.Builder reqBodySpecBuilder = new RequestBodySpec.Builder();\n+    private final HeaderMapSpec.Builder resParamsSpecBuilder = new HeaderMapSpec.Builder();\n+    private final ResponseBodySpec.Builder resBodySpecBuilder = new ResponseBodySpec.Builder();\n+    \n+    public Builder(CallPath callPath) {\n+      this.callPath = callPath;      \n+    }\n+    \n+    /**\n+     * If this method is not invoked, then it is assumed that the WebServiceCall supports all\n+     * methods specified in {@link HttpMethod#values()}.\n+     * \n+     * @param httpMethods list of methods that this call supports.\n+     * @return self to follow the Builder pattern.\n+     */\n+    public Builder supportsHttpMethod(HttpMethod... httpMethods) {\n+      supportedHttpMethods.addAll(Arrays.asList(httpMethods));\n+      return this;\n+    }\n+    \n+    public Builder addRequestParam(String paramName, Type type) {\n+      reqParamsSpecBuilder.put(paramName, type);\n+      return this;\n+    }\n+    public Builder addRequestBodyParam(String paramName, Type type) {\n+      reqBodySpecBuilder.add(paramName, type);\n+      return this;\n+    }\n+    public Builder addResponseParam(String paramName, Type type) {\n+      resParamsSpecBuilder.put(paramName, type);\n+      return this;\n+    }\n+    public Builder addResponseBodyParam(String paramName, Type type) {\n+      resBodySpecBuilder.add(paramName, type);\n+      return this;\n+    }\n+    public WebServiceCallSpec create() {      \n+      if (supportedHttpMethods.isEmpty()) {\n+        supportedHttpMethods.addAll(Arrays.asList(HttpMethod.values()));\n+      }\n+      RequestSpec requestSpec = \n+        new RequestSpec(reqParamsSpecBuilder.create(), reqBodySpecBuilder.create());\n+      ResponseSpec responseSpec = \n+        new ResponseSpec(resParamsSpecBuilder.create(), resBodySpecBuilder.create());\n+      WebServiceCallSpec callSpec = new WebServiceCallSpec(supportedHttpMethods, callPath, \n+          requestSpec, responseSpec);\n+      return callSpec;\n+    }\n+  }\n+  \n+  private final Set<HttpMethod> supportedHttpMethods;\n+  private final CallPath path;\n+  private final ResponseSpec responseSpec;\n+  private final RequestSpec requestSpec;\n+  \n+  private WebServiceCallSpec(Set<HttpMethod> supportedHttpMethods, CallPath path, \n+      RequestSpec requestSpec, ResponseSpec responseSpec) {\n+    Preconditions.checkArgument(!supportedHttpMethods.isEmpty());\n+    Preconditions.checkNotNull(path);\n+    \n+    this.supportedHttpMethods = supportedHttpMethods;\n+    this.path = path;\n+    this.requestSpec = requestSpec;\n+    this.responseSpec = responseSpec;\n+  }\n+\n+  public CallPath getPath() {\n+    return path;\n+  }\n+  \n+  public Set<HttpMethod> getSupportedHttpMethods() {\n+    return supportedHttpMethods;\n+  }\n+\n+  public ResponseSpec getResponseSpec() {\n+    return responseSpec;\n+  }\n+  \n+  public RequestSpec getRequestSpec() {\n+    return requestSpec;\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder(\"{path:\");\n+    sb.append(path).append(\",supportedHttpMethods:\");\n+    boolean first = true;\n+    for (HttpMethod method : supportedHttpMethods) {\n+      if (first) {\n+        first = false;\n+      } else {\n+        sb.append(\",\");\n+      }\n+      sb.append(method);\n+    }\n+    sb.append(path).append(\",requestSpec:\");\n+    sb.append(requestSpec).append(\",responseSpec:\");\n+    sb.append(responseSpec).append(\"}\");\n+    return sb.toString();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceRequest.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+/**\n+ * The data associated with a Web service request. This includes HTTP request header parameters \n+ * (form and URL parameters), and {@link RequestBody}. \n+ * \n+ * @author inder\n+ */\n+public final class WebServiceRequest {\n+  private final HttpMethod method;\n+  private final HeaderMap headers;\n+  private final RequestBody body;\n+  private final RequestSpec spec;\n+  \n+  public WebServiceRequest(HttpMethod method, HeaderMap requestHeaders, RequestBody requestBody) {\n+    this.method = method;\n+    this.body = requestBody;\n+    this.headers = requestHeaders;\n+    this.spec = new RequestSpec(requestHeaders.getSpec(), requestBody.getSpec());\n+  }\n+\n+  public HttpMethod getMethod() {\n+    return method;\n+  }\n+\n+  public RequestSpec getSpec() {\n+    return spec;\n+  }\n+\n+  public HttpMethod getHttpMethod() {\n+    return method;\n+  }\n+\n+  public RequestBody getBody() {\n+    return body;\n+  }\n+\n+  public HeaderMap getHeaders() {\n+    return headers;\n+  }\n+\n+  public String getContentType() {\n+    return ContentBodySpec.JSON_CONTENT_TYPE;\n+  }\n+  \n+  @SuppressWarnings(\"unchecked\")\n+  public <T> T getHeader(String headerName) {\n+    return (T) headers.get(headerName);\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder(\"{\");\n+    sb.append(method).append(\",\");\n+    sb.append(\",headers:\").append(headers);\n+    sb.append(\",body:\").append(body);\n+    sb.append(\"}\");\n+    return sb.toString();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceResponse.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+import java.lang.reflect.Type;\n+\n+/**\n+ * The data associated with a Web service response. This includes http response header parameters, \n+ * and {@link ResponseBody}. \n+ * \n+ * @author inder\n+ */\n+public final class WebServiceResponse {\n+  \n+  private final HeaderMap headers;\n+  private final ResponseBody body;\n+  private final ResponseSpec spec;\n+  \n+  public static class Builder {\n+    private final HeaderMap.Builder headers;\n+    private final ResponseBody.Builder body;\n+    private final ResponseSpec spec;\n+    \n+    public Builder(ResponseSpec spec) {\n+      this.spec = spec;\n+      headers = new HeaderMap.Builder(spec.getHeadersSpec());\n+      body = new ResponseBody.Builder(spec.getBodySpec());      \n+    }\n+    \n+    public Builder putHeader(String paramName, Object content) {\n+      headers.put(paramName, content);\n+      return this;\n+    }\n+    \n+    public Builder putHeader(String paramName, Object content, Type typeOfContent) {\n+      headers.put(paramName, content, typeOfContent);\n+      return this;\n+    }\n+    \n+    public Builder putBody(String paramName, Object content) {\n+      body.put(paramName, content);\n+      return this;\n+    }\n+\n+    public Builder put(String paramName, Object content, Type typeOfContent) {\n+      body.put(paramName, content, typeOfContent);\n+      return this;\n+    }\n+    \n+    public WebServiceResponse create() {\n+      return new WebServiceResponse(spec, headers.create(), body.create());\n+    }\n+  }\n+  \n+  private WebServiceResponse(ResponseSpec spec, HeaderMap headers, ResponseBody body) {\n+    this.spec = spec;\n+    this.headers = headers;\n+    this.body = body;\n+  }\n+  \n+  public WebServiceResponse(HeaderMap responseHeaders, ResponseBody responseBody) {\n+    this.spec = new ResponseSpec(responseHeaders.getSpec(), responseBody.getSpec());\n+    this.headers = responseHeaders;\n+    this.body = responseBody;\n+  }\n+\n+  public ResponseSpec getSpec() {\n+    return spec;\n+  }\n+\n+  public HeaderMap getHeaders() {\n+    return headers;\n+  }\n+  \n+  public ResponseBody getBody() {\n+    return body;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> T getHeader(String headerName) {\n+    return (T) headers.get(headerName);\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder(\"{headers:\");\n+    sb.append(headers);\n+    sb.append(\",body:\").append(body);\n+    sb.append(\"}\");\n+    return sb.toString();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceSpec.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+/**\n+ * Specification of the Web service. This contains a specification of all the \n+ * {@link WebServiceCall}s supported by this Web service.\n+ * \n+ * @author inder\n+ */\n+public interface WebServiceSpec {\n+  public CallPathMap<WebServiceCallSpec> getCalls();\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceSystemException.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+/**\n+ * Base class for all exceptions thrown by the Web service to indicate a system error condition. \n+ * This should never be thrown to indicate bad user input. For that purpose, use \n+ * {@link WebServiceAppException}.\n+ * \n+ * @author inder\n+ */\n+public class WebServiceSystemException extends RuntimeException {\n+\n+  private static final long serialVersionUID = -2511829073381716183L;\n+\n+  public WebServiceSystemException(Exception cause) {\n+    super(cause);\n+  }\n+  \n+  public WebServiceSystemException(String msg, Exception cause) {\n+\t  super(msg, cause);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/typeadapters/RequestBodyGsonConverter.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.typeadapters;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+import com.google.gson.InstanceCreator;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.webservice.definition.RequestBody;\n+import com.google.gson.webservice.definition.RequestBodySpec;\n+\n+/**\n+ * Gson type adapter for {@link RequestBody}. \n+ * \n+ * @author inder\n+ */\n+public class RequestBodyGsonConverter implements JsonSerializer<RequestBody>, \n+  JsonDeserializer<RequestBody>, InstanceCreator<RequestBody> {\n+\n+  private final RequestBodySpec spec;\n+\n+  public RequestBodyGsonConverter(RequestBodySpec spec) {\n+    this.spec = spec;\n+  }\n+  \n+  @Override\n+  public JsonElement serialize(RequestBody src, Type typeOfSrc, \n+      JsonSerializationContext context) {\n+    JsonObject root = new JsonObject();\n+    for(Map.Entry<String, Object> entry : src.entrySet()) {\n+      String key = entry.getKey();\n+      Type entryType = src.getSpec().getTypeFor(key);\n+      JsonElement value = context.serialize(entry.getValue(), entryType);\n+      root.add(key, value);        \n+    }\n+    return root;\n+  }\n+\n+  @Override\n+  public RequestBody deserialize(JsonElement json, Type typeOfT, \n+      JsonDeserializationContext context) throws JsonParseException {\n+    RequestBody.Builder builder = new RequestBody.Builder(spec);\n+    for (Map.Entry<String, JsonElement> entry : json.getAsJsonObject().entrySet()) {\n+      String key = entry.getKey();\n+      Type entryType = spec.getTypeFor(key);\n+      Object value = context.deserialize(entry.getValue(), entryType);\n+      builder.put(key, value);\n+    }\n+    return builder.create();\n+  }\n+\n+  @Override\n+  public RequestBody createInstance(Type type) {\n+    return new RequestBody.Builder(spec).create();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/typeadapters/ResponseBodyGsonConverter.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.typeadapters;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+import com.google.gson.InstanceCreator;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.webservice.definition.ResponseBody;\n+import com.google.gson.webservice.definition.ResponseBodySpec;\n+\n+/**\n+ * Gson type adapter for {@link ResponseBody}. \n+ * \n+ * @author inder\n+ */\n+public final class ResponseBodyGsonConverter implements JsonSerializer<ResponseBody>, \n+  JsonDeserializer<ResponseBody>, InstanceCreator<ResponseBody> {\n+\n+  private final ResponseBodySpec spec;\n+\n+  public ResponseBodyGsonConverter(ResponseBodySpec spec) {\n+    this.spec = spec;\n+  }\n+  \n+  @Override\n+  public JsonElement serialize(ResponseBody src, Type typeOfSrc, \n+      JsonSerializationContext context) {\n+    JsonObject root = new JsonObject();\n+    for(Map.Entry<String, Object> entry : src.entrySet()) {\n+      String key = entry.getKey();\n+      Type entryType = src.getSpec().getTypeFor(key);\n+      JsonElement value = context.serialize(entry.getValue(), entryType);\n+      root.add(key, value);        \n+    }\n+    return root;\n+  }\n+\n+  @Override\n+  public ResponseBody deserialize(JsonElement json, Type typeOfT, \n+      JsonDeserializationContext context) throws JsonParseException {\n+    ResponseBody.Builder responseBodyBuilder = new ResponseBody.Builder(spec);\n+    for (Map.Entry<String, JsonElement> entry : json.getAsJsonObject().entrySet()) {\n+      String key = entry.getKey();\n+      Type entryType = spec.getTypeFor(key);\n+      Object value = context.deserialize(entry.getValue(), entryType);\n+      responseBodyBuilder.put(key, value, entryType);\n+    }\n+    return responseBodyBuilder.create();\n+  }\n+\n+  @Override\n+  public ResponseBody createInstance(Type type) {\n+    return new ResponseBody.Builder(spec).create();\n+  }\n+}\n--- a/wsf/src/main/java/com/google/gson/wsf/inject/CallPathProvider.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/inject/CallPathProvider.java\n \n import javax.servlet.http.HttpServletRequest;\n \n-import com.google.gson.wsf.CallPath;\n+import com.google.gson.webservice.definition.CallPath;\n import com.google.inject.Inject;\n import com.google.inject.Provider;\n \n--- a/wsf/src/main/java/com/google/gson/wsf/inject/RequestBodySpecProvider.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/inject/RequestBodySpecProvider.java\n  */\n package com.google.gson.wsf.inject;\n \n-import com.google.gson.wsf.RequestBodySpec;\n-import com.google.gson.wsf.RequestSpec;\n+import com.google.gson.webservice.definition.RequestBodySpec;\n+import com.google.gson.webservice.definition.RequestSpec;\n import com.google.inject.Inject;\n import com.google.inject.Provider;\n \n--- a/wsf/src/main/java/com/google/gson/wsf/inject/RequestSpecProvider.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/inject/RequestSpecProvider.java\n  */\n package com.google.gson.wsf.inject;\n \n-import com.google.gson.wsf.RequestSpec;\n-import com.google.gson.wsf.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.RequestSpec;\n+import com.google.gson.webservice.definition.WebServiceCallSpec;\n import com.google.inject.Inject;\n import com.google.inject.Provider;\n \n--- a/wsf/src/main/java/com/google/gson/wsf/inject/WebServiceCallSpecProvider.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/inject/WebServiceCallSpecProvider.java\n  */\n package com.google.gson.wsf.inject;\n \n-import com.google.gson.wsf.CallPath;\n-import com.google.gson.wsf.WebServiceCallSpec;\n-import com.google.gson.wsf.WebServiceSpec;\n+import com.google.gson.webservice.definition.CallPath;\n+import com.google.gson.webservice.definition.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.WebServiceSpec;\n import com.google.inject.Inject;\n import com.google.inject.Provider;\n \n--- a/wsf/src/main/java/com/google/gson/wsf/inject/server/WebServiceCallServerProvider.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/inject/server/WebServiceCallServerProvider.java\n import javax.servlet.http.HttpServletRequest;\n \n import com.google.gson.Gson;\n-import com.google.gson.wsf.WebServiceCall;\n-import com.google.gson.wsf.WebServiceCallSpec;\n-import com.google.gson.wsf.WebServiceRequest;\n-import com.google.gson.wsf.WebServiceResponse;\n+import com.google.gson.webservice.definition.WebServiceCall;\n+import com.google.gson.webservice.definition.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.WebServiceRequest;\n+import com.google.gson.webservice.definition.WebServiceResponse;\n import com.google.gson.wsf.server.RequestReceiver;\n import com.google.gson.wsf.server.WebServiceCallServerBuilder;\n import com.google.inject.Inject;\n--- a/wsf/src/main/java/com/google/gson/wsf/server/RequestReceiver.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/RequestReceiver.java\n \n import com.google.gson.Gson;\n import com.google.gson.JsonParseException;\n-import com.google.gson.wsf.HeaderMap;\n-import com.google.gson.wsf.HeaderMapSpec;\n-import com.google.gson.wsf.HttpMethod;\n-import com.google.gson.wsf.RequestBody;\n-import com.google.gson.wsf.RequestBodySpec;\n-import com.google.gson.wsf.RequestSpec;\n-import com.google.gson.wsf.WebServiceRequest;\n-import com.google.gson.wsf.WebServiceSystemException;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.HttpMethod;\n+import com.google.gson.webservice.definition.RequestBody;\n+import com.google.gson.webservice.definition.RequestBodySpec;\n+import com.google.gson.webservice.definition.RequestSpec;\n+import com.google.gson.webservice.definition.WebServiceRequest;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n \n /**\n  * Receives and parses a request at the server side on a {@link HttpServletRequest}.  \n--- a/wsf/src/main/java/com/google/gson/wsf/server/ResponseSender.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/ResponseSender.java\n import javax.servlet.http.HttpServletResponse;\n \n import com.google.gson.Gson;\n-import com.google.gson.wsf.HeaderMap;\n-import com.google.gson.wsf.HeaderMapSpec;\n-import com.google.gson.wsf.ResponseBody;\n-import com.google.gson.wsf.WebServiceResponse;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.ResponseBody;\n+import com.google.gson.webservice.definition.WebServiceResponse;\n \n /**\n  * Sends a JSON web service response on {@link HttpServletResponse}.", "timestamp": 1261993487, "metainfo": ""}