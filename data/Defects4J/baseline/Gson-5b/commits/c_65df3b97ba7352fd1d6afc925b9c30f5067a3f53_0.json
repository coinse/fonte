{"sha": "65df3b97ba7352fd1d6afc925b9c30f5067a3f53", "log": "Add a type adapter for JsonElement, so it serializes just like everything else.    Fixes issue 362.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n         .typeAdapter(BigDecimal.class, new BigDecimalTypeAdapter())\n         .typeAdapter(BigInteger.class, new BigIntegerTypeAdapter())\n         .factory(new CollectionTypeAdapterFactory(constructorConstructor))\n+        .factory(TypeAdapters.JSON_ELEMENT_FACTORY)\n         .factory(ObjectTypeAdapter.FACTORY);\n \n     for (TypeAdapter.Factory factory : typeAdapterFactories) {\n--- a/gson/src/main/java/com/google/gson/internal/Streams.java\n+++ b/gson/src/main/java/com/google/gson/internal/Streams.java\n \n package com.google.gson.internal;\n \n-import com.google.gson.JsonArray;\n import com.google.gson.JsonElement;\n import com.google.gson.JsonIOException;\n import com.google.gson.JsonNull;\n-import com.google.gson.JsonObject;\n import com.google.gson.JsonParseException;\n-import com.google.gson.JsonPrimitive;\n import com.google.gson.JsonSyntaxException;\n+import com.google.gson.internal.bind.TypeAdapters;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n import com.google.gson.stream.MalformedJsonException;\n import java.io.EOFException;\n import java.io.IOException;\n import java.io.Writer;\n-import java.util.Map;\n \n /**\n  * Reads and writes GSON parse trees over streams.\n  */\n public final class Streams {\n-\n   /**\n    * Takes a reader in any state and returns the next value as a JsonElement.\n    */\n     try {\n       reader.peek();\n       isEmpty = false;\n-      return parseRecursive(reader);\n+      return TypeAdapters.JSON_ELEMENT.read(reader);\n     } catch (EOFException e) {\n       /*\n        * For compatibility with JSON 1.5 and earlier, we return a JsonNull for\n     }\n   }\n \n-  private static JsonElement parseRecursive(JsonReader reader) throws IOException {\n-    switch (reader.peek()) {\n-    case STRING:\n-      return new JsonPrimitive(reader.nextString());\n-    case NUMBER:\n-      String number = reader.nextString();\n-      return new JsonPrimitive(new LazilyParsedNumber(number));\n-    case BOOLEAN:\n-      return new JsonPrimitive(reader.nextBoolean());\n-    case NULL:\n-      reader.nextNull();\n-      return JsonNull.INSTANCE;\n-    case BEGIN_ARRAY:\n-      JsonArray array = new JsonArray();\n-      reader.beginArray();\n-      while (reader.hasNext()) {\n-        array.add(parseRecursive(reader));\n-      }\n-      reader.endArray();\n-      return array;\n-    case BEGIN_OBJECT:\n-      JsonObject object = new JsonObject();\n-      reader.beginObject();\n-      while (reader.hasNext()) {\n-        object.add(reader.nextName(), parseRecursive(reader));\n-      }\n-      reader.endObject();\n-      return object;\n-    case END_DOCUMENT:\n-    case NAME:\n-    case END_OBJECT:\n-    case END_ARRAY:\n-    default:\n-      throw new IllegalArgumentException();\n-    }\n-  }\n-\n   /**\n    * Writes the JSON element to the writer, recursively.\n    */\n-  public static void write(JsonElement element, JsonWriter writer)\n-      throws IOException {\n-    if (element == null || element.isJsonNull()) {\n-      writer.nullValue();\n-    } else if (element.isJsonPrimitive()) {\n-      JsonPrimitive primitive = element.getAsJsonPrimitive();\n-      if (primitive.isNumber()) {\n-        writer.value(primitive.getAsNumber());\n-      } else if (primitive.isBoolean()) {\n-        writer.value(primitive.getAsBoolean());\n-      } else {\n-        writer.value(primitive.getAsString());\n-      }\n-\n-    } else if (element.isJsonArray()) {\n-      writer.beginArray();\n-      for (JsonElement e : element.getAsJsonArray()) {\n-        write(e, writer);\n-      }\n-      writer.endArray();\n-\n-    } else if (element.isJsonObject()) {\n-      writer.beginObject();\n-      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n-        JsonElement value = e.getValue();\n-        writer.name(e.getKey());\n-        write(value, writer);\n-      }\n-      writer.endObject();\n-\n-    } else {\n-      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n-    }\n+  public static void write(JsonElement element, JsonWriter writer) throws IOException {\n+    TypeAdapters.JSON_ELEMENT.write(writer, element);\n   }\n \n   public static Writer writerForAppendable(Appendable appendable) {\n       }\n     }\n   }\n+\n }\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n \n package com.google.gson.internal.bind;\n \n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n import com.google.gson.JsonIOException;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.internal.LazilyParsedNumber;\n import com.google.gson.reflect.TypeToken;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.Locale;\n+import java.util.Map;\n import java.util.StringTokenizer;\n import java.util.UUID;\n \n \n   public static final TypeAdapter.Factory LOCALE_FACTORY = newFactory(Locale.class, LOCALE);\n \n+  public static final TypeAdapter<JsonElement> JSON_ELEMENT = new TypeAdapter<JsonElement>() {\n+    @Override public JsonElement read(JsonReader reader) throws IOException {\n+      switch (reader.peek()) {\n+      case STRING:\n+        return new JsonPrimitive(reader.nextString());\n+      case NUMBER:\n+        String number = reader.nextString();\n+        return new JsonPrimitive(new LazilyParsedNumber(number));\n+      case BOOLEAN:\n+        return new JsonPrimitive(reader.nextBoolean());\n+      case NULL:\n+        reader.nextNull();\n+        return JsonNull.INSTANCE;\n+      case BEGIN_ARRAY:\n+        JsonArray array = new JsonArray();\n+        reader.beginArray();\n+        while (reader.hasNext()) {\n+          array.add(read(reader));\n+        }\n+        reader.endArray();\n+        return array;\n+      case BEGIN_OBJECT:\n+        JsonObject object = new JsonObject();\n+        reader.beginObject();\n+        while (reader.hasNext()) {\n+          object.add(reader.nextName(), read(reader));\n+        }\n+        reader.endObject();\n+        return object;\n+      case END_DOCUMENT:\n+      case NAME:\n+      case END_OBJECT:\n+      case END_ARRAY:\n+      default:\n+        throw new IllegalArgumentException();\n+      }\n+    }\n+\n+    @Override public void write(JsonWriter writer, JsonElement value) throws IOException {\n+      if (value == null || value.isJsonNull()) {\n+        writer.nullValue();\n+      } else if (value.isJsonPrimitive()) {\n+        JsonPrimitive primitive = value.getAsJsonPrimitive();\n+        if (primitive.isNumber()) {\n+          writer.value(primitive.getAsNumber());\n+        } else if (primitive.isBoolean()) {\n+          writer.value(primitive.getAsBoolean());\n+        } else {\n+          writer.value(primitive.getAsString());\n+        }\n+\n+      } else if (value.isJsonArray()) {\n+        writer.beginArray();\n+        for (JsonElement e : value.getAsJsonArray()) {\n+          write(writer, e);\n+        }\n+        writer.endArray();\n+\n+      } else if (value.isJsonObject()) {\n+        writer.beginObject();\n+        for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet()) {\n+          writer.name(e.getKey());\n+          write(writer, e.getValue());\n+        }\n+        writer.endObject();\n+\n+      } else {\n+        throw new IllegalArgumentException(\"Couldn't write \" + value.getClass());\n+      }\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory JSON_ELEMENT_FACTORY\n+      = newFactory(JsonElement.class, JSON_ELEMENT);\n+\n   private static final class EnumTypeAdapter<T extends Enum<T>> extends TypeAdapter<T> {\n     private final Class<T> classOfT;\n \n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n \n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonArray;\n import com.google.gson.JsonDeserializationContext;\n import com.google.gson.JsonDeserializer;\n import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n import com.google.gson.reflect.TypeToken;\n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n     }\n   }\n \n+  public void testJsonPrimitiveSerialization() {\n+    assertEquals(\"5\", gson.toJson(new JsonPrimitive(5), JsonElement.class));\n+    assertEquals(\"true\", gson.toJson(new JsonPrimitive(true), JsonElement.class));\n+    assertEquals(\"\\\"foo\\\"\", gson.toJson(new JsonPrimitive(\"foo\"), JsonElement.class));\n+    assertEquals(\"\\\"a\\\"\", gson.toJson(new JsonPrimitive('a'), JsonElement.class));\n+  }\n+\n+  public void testJsonPrimitiveDeserialization() {\n+    assertEquals(new JsonPrimitive(5), gson.fromJson(\"5\", JsonElement.class));\n+    assertEquals(new JsonPrimitive(true), gson.fromJson(\"true\", JsonElement.class));\n+    assertEquals(new JsonPrimitive(\"foo\"), gson.fromJson(\"\\\"foo\\\"\", JsonElement.class));\n+    assertEquals(new JsonPrimitive('a'), gson.fromJson(\"\\\"a\\\"\", JsonElement.class));\n+  }\n+\n+  public void testJsonNullSerialization() {\n+    assertEquals(\"null\", gson.toJson(JsonNull.INSTANCE, JsonElement.class));\n+  }\n+\n+  public void testNullJsonElementSerialization() {\n+    assertEquals(\"null\", gson.toJson(null, JsonElement.class));\n+  }\n+\n+  public void testJsonArraySerialization() {\n+    JsonArray array = new JsonArray();\n+    array.add(new JsonPrimitive(1));\n+    array.add(new JsonPrimitive(2));\n+    array.add(new JsonPrimitive(3));\n+    assertEquals(\"[1,2,3]\", gson.toJson(array, JsonElement.class));\n+  }\n+\n+  public void testJsonArrayDeerialization() {\n+    JsonArray array = new JsonArray();\n+    array.add(new JsonPrimitive(1));\n+    array.add(new JsonPrimitive(2));\n+    array.add(new JsonPrimitive(3));\n+    assertEquals(array, gson.fromJson(\"[1,2,3]\", JsonElement.class));\n+  }\n+\n+  public void testJsonObjectSerialization() {\n+    JsonObject object = new JsonObject();\n+    object.add(\"foo\", new JsonPrimitive(1));\n+    object.add(\"bar\", new JsonPrimitive(2));\n+    assertEquals(\"{\\\"foo\\\":1,\\\"bar\\\":2}\", gson.toJson(object, JsonElement.class));\n+  }\n+\n+  public void testJsonObjectDeerialization() {\n+    JsonObject object = new JsonObject();\n+    object.add(\"foo\", new JsonPrimitive(1));\n+    object.add(\"bar\", new JsonPrimitive(2));\n+    assertEquals(object, gson.fromJson(\"{\\\"foo\\\":1,\\\"bar\\\":2}\", JsonElement.class));\n+  }\n+\n+  public void testJsonNullDeerialization() {\n+    assertEquals(JsonNull.INSTANCE, gson.fromJson(\"null\", JsonElement.class));\n+  }\n+\n+  public void testNullJsonElementDeserialization() {\n+    assertEquals(JsonNull.INSTANCE, gson.fromJson(\"null\", JsonElement.class));\n+  }\n+\n   private static class ClassWithBigDecimal {\n     BigDecimal value;\n     ClassWithBigDecimal(String value) {", "timestamp": 1317574796, "metainfo": ""}