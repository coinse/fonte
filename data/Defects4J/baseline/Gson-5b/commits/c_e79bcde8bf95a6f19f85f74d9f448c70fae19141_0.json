{"sha": "e79bcde8bf95a6f19f85f74d9f448c70fae19141", "log": "Using JsonNull.INSTANCE instead of JsonNull.createJsonNull() method", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n       JsonDeserializer<Collection> {\n     public JsonElement serialize(Collection src, Type typeOfSrc, JsonSerializationContext context) {\n       if (src == null) {\n-        return JsonNull.createJsonNull();\n+        return JsonNull.INSTANCE;\n       }\n       JsonArray array = new JsonArray();\n       Type childGenericType = null;\n       }\n       for (Object child : src) {\n         if (child == null) {\n-          array.add(JsonNull.createJsonNull());\n+          array.add(JsonNull.INSTANCE);\n         } else {\n           Type childType = (childGenericType == null || childGenericType == Object.class)\n               ? child.getClass() : childGenericType;\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n    */\n   public JsonElement toJsonTree(Object src) {\n     if (src == null) {\n-      return JsonNull.createJsonNull();\n+      return JsonNull.INSTANCE;\n     }\n     return toJsonTree(src, src.getClass());\n   }\n    */\n   public String toJson(Object src) {\n     if (src == null) {\n-      return toJson(JsonNull.createJsonNull());\n+      return toJson(JsonNull.INSTANCE);\n     }\n     return toJson(src, src.getClass());\n   }\n     if (src != null) {\n       toJson(src, src.getClass(), writer);\n     } else {\n-      toJson(JsonNull.createJsonNull(), writer);\n+      toJson(JsonNull.INSTANCE, writer);\n     }\n   }\n \n--- a/gson/src/main/java/com/google/gson/JsonArray.java\n+++ b/gson/src/main/java/com/google/gson/JsonArray.java\n    */\n   public void add(JsonElement element) {\n     if (element == null) {\n-      element = JsonNull.createJsonNull();\n+      element = JsonNull.INSTANCE;\n     }\n     elements.add(element);\n   }\n--- a/gson/src/main/java/com/google/gson/JsonObject.java\n+++ b/gson/src/main/java/com/google/gson/JsonObject.java\n    */\n   public void add(String property, JsonElement value) {\n     if (value == null) {\n-      value = JsonNull.createJsonNull();\n+      value = JsonNull.INSTANCE;\n     }\n     members.put($Gson$Preconditions.checkNotNull(property), value);\n   }\n    * @return a {@link JsonPrimitive} if the {@code value} is not null, otherwise a {@link JsonNull}\n    */\n   private JsonElement createJsonElement(Object value) {\n-    return value == null ? JsonNull.createJsonNull() : new JsonPrimitive(value);\n+    return value == null ? JsonNull.INSTANCE : new JsonPrimitive(value);\n   }\n \n   /**\n   public JsonElement get(String memberName) {\n     if (members.containsKey(memberName)) {\n       JsonElement member = members.get(memberName);\n-      return member == null ? JsonNull.createJsonNull() : member;\n+      return member == null ? JsonNull.INSTANCE : member;\n     }\n     return null;\n   }\n--- a/gson/src/main/java/com/google/gson/JsonParser.java\n+++ b/gson/src/main/java/com/google/gson/JsonParser.java\n       throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     } catch (JsonParseException e) {\n       if (e.getCause() instanceof EOFException) {\n-        return JsonNull.createJsonNull();\n+        return JsonNull.INSTANCE;\n       }\n       throw e;\n     } finally {\n--- a/gson/src/main/java/com/google/gson/JsonSerializationContext.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationContext.java\n    */\n   public JsonElement serialize(Object src) {\n     if (src == null) {\n-      return JsonNull.createJsonNull();\n+      return JsonNull.INSTANCE;\n     }\n     return serialize(src, src.getClass(), false);\n   }\n \n   JsonElement serialize(Object src, Type typeOfSrc, boolean preserveType) {\n     if (src == null) {\n-      return JsonNull.createJsonNull();\n+      return JsonNull.INSTANCE;\n     }\n     JsonSerializationVisitor visitor = new JsonSerializationVisitor(\n         objectNavigator, fieldNamingPolicy, serializeNulls, serializers, this, ancestors);\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n     try {\n       if (isFieldNull(f, obj)) {\n         if (serializeNulls) {\n-          addChildAsElement(f, JsonNull.createJsonNull());\n+          addChildAsElement(f, JsonNull.INSTANCE);\n         }\n       } else {\n         Object array = getFieldValue(f, obj);\n     try {\n       if (isFieldNull(f, obj)) {\n         if (serializeNulls) {\n-          addChildAsElement(f, JsonNull.createJsonNull());\n+          addChildAsElement(f, JsonNull.INSTANCE);\n         }\n       } else {\n         Object fieldValue = getFieldValue(f, obj);\n   }\n \n   public void visitPrimitive(Object obj) {\n-    JsonElement json = obj == null ? JsonNull.createJsonNull() : new JsonPrimitive(obj);\n+    JsonElement json = obj == null ? JsonNull.INSTANCE : new JsonPrimitive(obj);\n     assignToRoot(json);\n   }\n \n \n   private void addAsArrayElement(ObjectTypePair elementTypePair) {\n     if (elementTypePair.getObject() == null) {\n-      root.getAsJsonArray().add(JsonNull.createJsonNull());\n+      root.getAsJsonArray().add(JsonNull.INSTANCE);\n     } else {\n       JsonElement childElement = getJsonElementForChild(elementTypePair);\n       root.getAsJsonArray().add(childElement);\n       Object obj = objTypePair.getObject();\n       if (obj == null) {\n         if (serializeNulls) {\n-          assignToRoot(JsonNull.createJsonNull());\n+          assignToRoot(JsonNull.INSTANCE);\n         }\n         return true;\n       }\n     try {\n       JsonElement element =\n           serializer.serialize(objTypePair.getObject(), objTypePair.getType(), context);\n-      return element == null ? JsonNull.createJsonNull() : element;\n+      return element == null ? JsonNull.INSTANCE : element;\n     } finally {\n       end(objTypePair);\n     }\n       Object obj = f.get(parent);\n       if (obj == null) {\n         if (serializeNulls) {\n-          addChildAsElement(f, JsonNull.createJsonNull());\n+          addChildAsElement(f, JsonNull.INSTANCE);\n         }\n         return true;\n       }\n--- a/gson/src/main/java/com/google/gson/MapTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/MapTypeAdapter.java\n \n       JsonElement valueElement;\n       if (value == null) {\n-        valueElement = JsonNull.createJsonNull();\n+        valueElement = JsonNull.INSTANCE;\n       } else {\n         Type childType = (childGenericType == null)\n             ? value.getClass() : childGenericType;\n--- a/gson/src/main/java/com/google/gson/Streams.java\n+++ b/gson/src/main/java/com/google/gson/Streams.java\n        * empty documents instead of throwing.\n        */\n       if (isEmpty) {\n-        return JsonNull.createJsonNull();\n+        return JsonNull.INSTANCE;\n       }\n       throw new JsonIOException(e);\n     } catch (MalformedJsonException e) {\n       return new JsonPrimitive(reader.nextBoolean());\n     case NULL:\n       reader.nextNull();\n-      return JsonNull.createJsonNull();\n+      return JsonNull.INSTANCE;\n     case BEGIN_ARRAY:\n       JsonArray array = new JsonArray();\n       reader.beginArray();", "timestamp": 1306342557, "metainfo": ""}