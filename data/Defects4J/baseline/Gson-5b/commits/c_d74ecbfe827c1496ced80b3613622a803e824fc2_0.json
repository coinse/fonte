{"sha": "d74ecbfe827c1496ced80b3613622a803e824fc2", "log": "Updated JsonParser to use Token to match strings instead of productions. This enables Gson to handle much larger strings (~10s of MB) than previously possible (<100kb). This also reduces memory and stack requirements, and increases Gson performance as well.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Escaper.java\n+++ b/gson/src/main/java/com/google/gson/Escaper.java\n  */\n class Escaper {\n \n-  private static final char[] HEX_CHARS = {\n+  static final char[] HEX_CHARS = {\n     '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'\n   };\n \n--- a/gson/src/main/java/com/google/gson/JsonParser.java\n+++ b/gson/src/main/java/com/google/gson/JsonParser.java\n   final public JsonElement parse() throws ParseException {\n   JsonElement json = null;\n     switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n-    case 17:\n+    case 20:\n       json = JsonObject();\n       break;\n-    case 22:\n+    case 25:\n       json = JsonArray();\n       break;\n     case DIGITS:\n     case SINGLE_QUOTE_LITERAL:\n-    case QUOTE:\n-    case 24:\n-    case 25:\n-    case 26:\n+    case DOUBLE_QUOTE_LITERAL:\n+    case 27:\n+    case 28:\n+    case 29:\n       json = JsonPrimitive();\n       break;\n-    case 19:\n+    case 22:\n       json = JsonNull();\n       break;\n     default:\n \n   final private JsonObject JsonObject() throws ParseException {\n   JsonObject o = new JsonObject();\n-    jj_consume_token(17);\n+    jj_consume_token(20);\n     switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n     case SINGLE_QUOTE_LITERAL:\n-    case QUOTE:\n+    case DOUBLE_QUOTE_LITERAL:\n       Members(o);\n       break;\n     default:\n       jj_la1[1] = jj_gen;\n       ;\n     }\n-    jj_consume_token(18);\n+    jj_consume_token(21);\n     {if (true) return o;}\n     throw new Error(\"Missing return statement in function\");\n   }\n \n   final private JsonNull JsonNull() throws ParseException {\n   JsonNull json = new JsonNull();\n-    jj_consume_token(19);\n+    jj_consume_token(22);\n     {if (true) return json;}\n     throw new Error(\"Missing return statement in function\");\n   }\n   final private void Members(JsonObject o) throws ParseException {\n     Pair(o);\n     switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n-    case 20:\n-      jj_consume_token(20);\n+    case 23:\n+      jj_consume_token(23);\n       Members(o);\n       break;\n     default:\n   JsonPrimitive property;\n   JsonElement value;\n     property = JsonString();\n-    jj_consume_token(21);\n+    jj_consume_token(24);\n     value = JsonValue();\n     o.add(property.getAsString(), value);\n   }\n \n   final private JsonArray JsonArray() throws ParseException {\n   JsonArray array = new JsonArray();\n-    jj_consume_token(22);\n+    jj_consume_token(25);\n     switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n     case DIGITS:\n     case SINGLE_QUOTE_LITERAL:\n-    case QUOTE:\n-    case 17:\n-    case 19:\n+    case DOUBLE_QUOTE_LITERAL:\n+    case 20:\n     case 22:\n-    case 24:\n     case 25:\n-    case 26:\n+    case 27:\n+    case 28:\n+    case 29:\n       Elements(array);\n       break;\n     default:\n       jj_la1[3] = jj_gen;\n       ;\n     }\n-    jj_consume_token(23);\n+    jj_consume_token(26);\n     array.reverse();\n     {if (true) return array;}\n     throw new Error(\"Missing return statement in function\");\n   JsonElement element;\n     element = JsonValue();\n     switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n-    case 20:\n-      jj_consume_token(20);\n+    case 23:\n+      jj_consume_token(23);\n       Elements(array);\n       break;\n     default:\n   JsonElement o = null;\n     switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n     case SINGLE_QUOTE_LITERAL:\n-    case QUOTE:\n+    case DOUBLE_QUOTE_LITERAL:\n       o = JsonString();\n       break;\n     case DIGITS:\n-    case 26:\n+    case 29:\n       o = JsonNumber();\n       break;\n-    case 17:\n+    case 20:\n       o = JsonObject();\n       break;\n+    case 25:\n+      o = JsonArray();\n+      break;\n+    case 27:\n+      jj_consume_token(27);\n+             o = new JsonPrimitive(true);\n+      break;\n+    case 28:\n+      jj_consume_token(28);\n+              o = new JsonPrimitive(false);\n+      break;\n     case 22:\n-      o = JsonArray();\n-      break;\n-    case 24:\n-      jj_consume_token(24);\n-             o = new JsonPrimitive(true);\n-      break;\n-    case 25:\n-      jj_consume_token(25);\n-              o = new JsonPrimitive(false);\n-      break;\n-    case 19:\n-      jj_consume_token(19);\n+      jj_consume_token(22);\n       break;\n     default:\n       jj_la1[5] = jj_gen;\n   JsonPrimitive value;\n     switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n     case SINGLE_QUOTE_LITERAL:\n-    case QUOTE:\n+    case DOUBLE_QUOTE_LITERAL:\n       value = JsonString();\n                           {if (true) return value;}\n       break;\n     case DIGITS:\n-    case 26:\n+    case 29:\n       value = JsonNumber();\n                           {if (true) return value;}\n       break;\n-    case 24:\n-      jj_consume_token(24);\n+    case 27:\n+      jj_consume_token(27);\n              {if (true) return new JsonPrimitive(true);}\n       break;\n-    case 25:\n-      jj_consume_token(25);\n+    case 28:\n+      jj_consume_token(28);\n               {if (true) return new JsonPrimitive(false);}\n       break;\n     default:\n          exppart = null;\n     intpart = JsonInt();\n     switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n-    case 27:\n+    case 30:\n       fracpart = JsonFrac();\n       break;\n     default:\n   String digits;\n   boolean negative = false;\n     switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n-    case 26:\n-      jj_consume_token(26);\n+    case 29:\n+      jj_consume_token(29);\n          negative = true;\n       break;\n     default:\n \n   final private String JsonFrac() throws ParseException {\n   String digits;\n-    jj_consume_token(27);\n+    jj_consume_token(30);\n     digits = Digits();\n     {if (true) return \".\" + digits;}\n     throw new Error(\"Missing return statement in function\");\n   }\n \n   final private JsonPrimitive JsonString() throws ParseException {\n-  StringBuffer strbuf = new StringBuffer(); Token t;\n+  Token t;\n     switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n     case SINGLE_QUOTE_LITERAL:\n       t = jj_consume_token(SINGLE_QUOTE_LITERAL);\n-    String value = t.image;\n-    String valueWithInQuotes = value.substring(1, value.length()-1);\n-    {if (true) return new JsonPrimitive(valueWithInQuotes);}\n-      break;\n-    case QUOTE:\n-      jj_consume_token(QUOTE);\n-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n-      case CHAR:\n-      case CNTRL_ESC:\n-      case HEX_ESC:\n-        Chars(strbuf);\n-        break;\n-      default:\n-        jj_la1[10] = jj_gen;\n-        ;\n-      }\n-      jj_consume_token(ENDQUOTE);\n-    {if (true) return new JsonPrimitive(strbuf.toString());}\n-      break;\n-    default:\n-      jj_la1[11] = jj_gen;\n+      break;\n+    case DOUBLE_QUOTE_LITERAL:\n+      t = jj_consume_token(DOUBLE_QUOTE_LITERAL);\n+      break;\n+    default:\n+      jj_la1[10] = jj_gen;\n       jj_consume_token(-1);\n       throw new ParseException();\n     }\n+    String value = StringUnmarshaller.unmarshall(t.image);\n+    {if (true) return new JsonPrimitive(value);}\n     throw new Error(\"Missing return statement in function\");\n   }\n \n       Chars(strbuf);\n       break;\n     default:\n-      jj_la1[12] = jj_gen;\n+      jj_la1[11] = jj_gen;\n       ;\n     }\n     strbuf.insert(0, c);\n       t = jj_consume_token(HEX_ESC);\n       break;\n     default:\n-      jj_la1[13] = jj_gen;\n+      jj_la1[12] = jj_gen;\n       jj_consume_token(-1);\n       throw new ParseException();\n     }\n   public Token token, jj_nt;\n   private int jj_ntk;\n   private int jj_gen;\n-  final private int[] jj_la1 = new int[14];\n+  final private int[] jj_la1 = new int[13];\n   static private int[] jj_la1_0;\n   static {\n       jj_la1_0();\n    }\n    private static void jj_la1_0() {\n-      jj_la1_0 = new int[] {0x74a0340,0x300,0x100000,0x74a0340,0x100000,0x74a0340,0x7000340,0x8000000,0x20,0x4000000,0x13000,0x300,0x13000,0x13000,};\n+      jj_la1_0 = new int[] {0x3a500c40,0xc00,0x800000,0x3a500c40,0x800000,0x3a500c40,0x38000c40,0x40000000,0x20,0x20000000,0xc00,0x98000,0x98000,};\n    }\n \n   public JsonParser(java.io.InputStream stream) {\n     token = new Token();\n     jj_ntk = -1;\n     jj_gen = 0;\n-    for (int i = 0; i < 14; i++) jj_la1[i] = -1;\n+    for (int i = 0; i < 13; i++) jj_la1[i] = -1;\n   }\n \n   public void ReInit(java.io.InputStream stream) {\n     token = new Token();\n     jj_ntk = -1;\n     jj_gen = 0;\n-    for (int i = 0; i < 14; i++) jj_la1[i] = -1;\n+    for (int i = 0; i < 13; i++) jj_la1[i] = -1;\n   }\n \n   public JsonParser(java.io.Reader stream) {\n     token = new Token();\n     jj_ntk = -1;\n     jj_gen = 0;\n-    for (int i = 0; i < 14; i++) jj_la1[i] = -1;\n+    for (int i = 0; i < 13; i++) jj_la1[i] = -1;\n   }\n \n   public void ReInit(java.io.Reader stream) {\n     token = new Token();\n     jj_ntk = -1;\n     jj_gen = 0;\n-    for (int i = 0; i < 14; i++) jj_la1[i] = -1;\n+    for (int i = 0; i < 13; i++) jj_la1[i] = -1;\n   }\n \n   public JsonParser(JsonParserTokenManager tm) {\n     token = new Token();\n     jj_ntk = -1;\n     jj_gen = 0;\n-    for (int i = 0; i < 14; i++) jj_la1[i] = -1;\n+    for (int i = 0; i < 13; i++) jj_la1[i] = -1;\n   }\n \n   public void ReInit(JsonParserTokenManager tm) {\n     token = new Token();\n     jj_ntk = -1;\n     jj_gen = 0;\n-    for (int i = 0; i < 14; i++) jj_la1[i] = -1;\n+    for (int i = 0; i < 13; i++) jj_la1[i] = -1;\n   }\n \n   final private Token jj_consume_token(int kind) throws ParseException {\n \n   public ParseException generateParseException() {\n     jj_expentries.removeAllElements();\n-    boolean[] la1tokens = new boolean[28];\n-    for (int i = 0; i < 28; i++) {\n+    boolean[] la1tokens = new boolean[31];\n+    for (int i = 0; i < 31; i++) {\n       la1tokens[i] = false;\n     }\n     if (jj_kind >= 0) {\n       la1tokens[jj_kind] = true;\n       jj_kind = -1;\n     }\n-    for (int i = 0; i < 14; i++) {\n+    for (int i = 0; i < 13; i++) {\n       if (jj_la1[i] == jj_gen) {\n         for (int j = 0; j < 32; j++) {\n           if ((jj_la1_0[i] & (1<<j)) != 0) {\n         }\n       }\n     }\n-    for (int i = 0; i < 28; i++) {\n+    for (int i = 0; i < 31; i++) {\n       if (la1tokens[i]) {\n         jj_expentry = new int[1];\n         jj_expentry[0] = i;\n--- a/gson/src/main/java/com/google/gson/JsonParserConstants.java\n+++ b/gson/src/main/java/com/google/gson/JsonParserConstants.java\n   int EOF = 0;\n   int E = 5;\n   int DIGITS = 6;\n-  int ESCAPE_CHAR = 7;\n-  int SINGLE_QUOTE_LITERAL = 8;\n-  int QUOTE = 9;\n-  int ENDQUOTE = 11;\n-  int CHAR = 12;\n-  int CNTRL_ESC = 13;\n-  int HEX = 15;\n-  int HEX_ESC = 16;\n+  int HEX_CHAR = 7;\n+  int UNICODE_CHAR = 8;\n+  int ESCAPE_CHAR = 9;\n+  int SINGLE_QUOTE_LITERAL = 10;\n+  int DOUBLE_QUOTE_LITERAL = 11;\n+  int QUOTE = 12;\n+  int ENDQUOTE = 14;\n+  int CHAR = 15;\n+  int CNTRL_ESC = 16;\n+  int HEX = 18;\n+  int HEX_ESC = 19;\n \n   int DEFAULT = 0;\n   int STRING_STATE = 1;\n     \"\\\"\\\\r\\\"\",\n     \"<E>\",\n     \"<DIGITS>\",\n+    \"<HEX_CHAR>\",\n+    \"<UNICODE_CHAR>\",\n     \"<ESCAPE_CHAR>\",\n     \"<SINGLE_QUOTE_LITERAL>\",\n+    \"<DOUBLE_QUOTE_LITERAL>\",\n     \"\\\"\\\\\\\"\\\"\",\n     \"\\\"\\\\\\\\\\\"\",\n     \"<ENDQUOTE>\",\n--- a/gson/src/main/java/com/google/gson/JsonParserTokenManager.java\n+++ b/gson/src/main/java/com/google/gson/JsonParserTokenManager.java\n                      jjstateSet[jjnewStateCnt++] = 3;\n                   break;\n                case 3:\n-                  if ((0x3ff000000000000L & l) != 0L && kind > 16)\n-                     kind = 16;\n+                  if ((0x3ff000000000000L & l) != 0L && kind > 19)\n+                     kind = 19;\n                   break;\n                default : break;\n             }\n                      jjstateSet[jjnewStateCnt++] = 3;\n                   break;\n                case 3:\n-                  if ((0x7e0000007eL & l) != 0L && kind > 16)\n-                     kind = 16;\n+                  if ((0x7e0000007eL & l) != 0L && kind > 19)\n+                     kind = 19;\n                   break;\n                default : break;\n             }\n {\n    switch (pos)\n    {\n+      case 0:\n+         if ((active0 & 0x1000L) != 0L)\n+            return 31;\n+         return -1;\n       default :\n          return -1;\n    }\n    switch(curChar)\n    {\n       case 34:\n-         return jjStopAtPos(0, 9);\n+         return jjStartNfaWithStates_0(0, 12, 31);\n       case 44:\n+         return jjStopAtPos(0, 23);\n+      case 45:\n+         return jjStopAtPos(0, 29);\n+      case 46:\n+         return jjStopAtPos(0, 30);\n+      case 58:\n+         return jjStopAtPos(0, 24);\n+      case 91:\n+         return jjStopAtPos(0, 25);\n+      case 93:\n+         return jjStopAtPos(0, 26);\n+      case 102:\n+         return jjMoveStringLiteralDfa1_0(0x10000000L);\n+      case 110:\n+         return jjMoveStringLiteralDfa1_0(0x400000L);\n+      case 116:\n+         return jjMoveStringLiteralDfa1_0(0x8000000L);\n+      case 123:\n          return jjStopAtPos(0, 20);\n-      case 45:\n-         return jjStopAtPos(0, 26);\n-      case 46:\n-         return jjStopAtPos(0, 27);\n-      case 58:\n+      case 125:\n          return jjStopAtPos(0, 21);\n-      case 91:\n-         return jjStopAtPos(0, 22);\n-      case 93:\n-         return jjStopAtPos(0, 23);\n-      case 102:\n-         return jjMoveStringLiteralDfa1_0(0x2000000L);\n-      case 110:\n-         return jjMoveStringLiteralDfa1_0(0x80000L);\n-      case 116:\n-         return jjMoveStringLiteralDfa1_0(0x1000000L);\n-      case 123:\n-         return jjStopAtPos(0, 17);\n-      case 125:\n-         return jjStopAtPos(0, 18);\n       default :\n          return jjMoveNfa_0(0, 0);\n    }\n    switch(curChar)\n    {\n       case 97:\n-         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);\n       case 114:\n-         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);\n       case 117:\n-         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);\n       default :\n          break;\n    }\n    switch(curChar)\n    {\n       case 108:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x2080000L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x10400000L);\n       case 117:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);\n       default :\n          break;\n    }\n    switch(curChar)\n    {\n       case 101:\n-         if ((active0 & 0x1000000L) != 0L)\n-            return jjStopAtPos(3, 24);\n+         if ((active0 & 0x8000000L) != 0L)\n+            return jjStopAtPos(3, 27);\n          break;\n       case 108:\n-         if ((active0 & 0x80000L) != 0L)\n-            return jjStopAtPos(3, 19);\n+         if ((active0 & 0x400000L) != 0L)\n+            return jjStopAtPos(3, 22);\n          break;\n       case 115:\n-         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);\n       default :\n          break;\n    }\n    switch(curChar)\n    {\n       case 101:\n-         if ((active0 & 0x2000000L) != 0L)\n-            return jjStopAtPos(4, 25);\n+         if ((active0 & 0x10000000L) != 0L)\n+            return jjStopAtPos(4, 28);\n          break;\n       default :\n          break;\n {\n    int[] nextStates;\n    int startsAt = 0;\n-   jjnewStateCnt = 8;\n+   jjnewStateCnt = 31;\n    int i = 1;\n    jjstateSet[0] = startState;\n    int j, kind = 0x7fffffff;\n          {\n             switch(jjstateSet[--i])\n             {\n+               case 31:\n+                  if ((0xfffffffbffffdbffL & l) != 0L)\n+                     jjCheckNAddStates(0, 3);\n+                  else if (curChar == 34)\n+                  {\n+                     if (kind > 11)\n+                        kind = 11;\n+                  }\n+                  break;\n                case 0:\n                   if ((0x3ff000000000000L & l) != 0L)\n                   {\n                         kind = 6;\n                      jjCheckNAdd(2);\n                   }\n+                  else if (curChar == 34)\n+                     jjCheckNAddStates(0, 3);\n                   else if (curChar == 39)\n-                     jjCheckNAddStates(0, 2);\n+                     jjCheckNAddStates(4, 7);\n                   break;\n                case 1:\n                   if ((0x280000000000L & l) != 0L && kind > 5)\n                      kind = 6;\n                   jjCheckNAdd(2);\n                   break;\n+               case 4:\n+                  if ((0x3ff000000000000L & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 5;\n+                  break;\n+               case 5:\n+                  if ((0x3ff000000000000L & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 6;\n+                  break;\n+               case 6:\n+                  if ((0x3ff000000000000L & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 7;\n+                  break;\n+               case 7:\n+                  if ((0x3ff000000000000L & l) != 0L && kind > 8)\n+                     kind = 8;\n+                  break;\n+               case 9:\n+                  if (curChar == 39)\n+                     jjCheckNAddStates(4, 7);\n+                  break;\n+               case 10:\n+                  if ((0xffffff7fffffdbffL & l) != 0L)\n+                     jjCheckNAddStates(4, 7);\n+                  break;\n+               case 12:\n+                  if ((0x8400000000L & l) != 0L)\n+                     jjCheckNAddStates(4, 7);\n+                  break;\n+               case 14:\n+                  if ((0x3ff000000000000L & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 15;\n+                  break;\n+               case 15:\n+                  if ((0x3ff000000000000L & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 16;\n+                  break;\n+               case 16:\n+                  if ((0x3ff000000000000L & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 17;\n+                  break;\n+               case 17:\n+                  if ((0x3ff000000000000L & l) != 0L)\n+                     jjCheckNAddStates(4, 7);\n+                  break;\n+               case 19:\n+                  if (curChar == 39 && kind > 10)\n+                     kind = 10;\n+                  break;\n+               case 20:\n+                  if (curChar == 34)\n+                     jjCheckNAddStates(0, 3);\n+                  break;\n+               case 21:\n+                  if ((0xfffffffbffffdbffL & l) != 0L)\n+                     jjCheckNAddStates(0, 3);\n+                  break;\n+               case 23:\n+                  if ((0x8400000000L & l) != 0L)\n+                     jjCheckNAddStates(0, 3);\n+                  break;\n+               case 25:\n+                  if ((0x3ff000000000000L & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 26;\n+                  break;\n+               case 26:\n+                  if ((0x3ff000000000000L & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 27;\n+                  break;\n+               case 27:\n+                  if ((0x3ff000000000000L & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 28;\n+                  break;\n+               case 28:\n+                  if ((0x3ff000000000000L & l) != 0L)\n+                     jjCheckNAddStates(0, 3);\n+                  break;\n+               case 30:\n+                  if (curChar == 34 && kind > 11)\n+                     kind = 11;\n+                  break;\n+               default : break;\n+            }\n+         } while(i != startsAt);\n+      }\n+      else if (curChar < 128)\n+      {\n+         long l = 1L << (curChar & 077);\n+         MatchLoop: do\n+         {\n+            switch(jjstateSet[--i])\n+            {\n+               case 31:\n+                  if ((0xffffffffefffffffL & l) != 0L)\n+                     jjCheckNAddStates(0, 3);\n+                  else if (curChar == 92)\n+                     jjstateSet[jjnewStateCnt++] = 24;\n+                  if (curChar == 92)\n+                     jjstateSet[jjnewStateCnt++] = 23;\n+                  break;\n+               case 0:\n+                  if ((0x2000000020L & l) != 0L)\n+                  {\n+                     if (kind > 5)\n+                        kind = 5;\n+                     jjstateSet[jjnewStateCnt++] = 1;\n+                  }\n+                  else if (curChar == 92)\n+                     jjstateSet[jjnewStateCnt++] = 3;\n+                  break;\n                case 3:\n-                  if (curChar == 39)\n-                     jjCheckNAddStates(0, 2);\n+                  if (curChar == 117)\n+                     jjstateSet[jjnewStateCnt++] = 4;\n                   break;\n                case 4:\n-                  if ((0xffffff7fffffdbffL & l) != 0L)\n-                     jjCheckNAddStates(0, 2);\n+                  if ((0x7e0000007eL & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 5;\n+                  break;\n+               case 5:\n+                  if ((0x7e0000007eL & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 6;\n                   break;\n                case 6:\n-                  if ((0x8400000000L & l) != 0L)\n-                     jjCheckNAddStates(0, 2);\n+                  if ((0x7e0000007eL & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 7;\n                   break;\n                case 7:\n-                  if (curChar == 39 && kind > 8)\n+                  if ((0x7e0000007eL & l) != 0L && kind > 8)\n                      kind = 8;\n                   break;\n-               default : break;\n-            }\n-         } while(i != startsAt);\n-      }\n-      else if (curChar < 128)\n-      {\n-         long l = 1L << (curChar & 077);\n-         MatchLoop: do\n-         {\n-            switch(jjstateSet[--i])\n-            {\n-               case 0:\n-                  if ((0x2000000020L & l) == 0L)\n-                     break;\n-                  if (kind > 5)\n-                     kind = 5;\n-                  jjstateSet[jjnewStateCnt++] = 1;\n-                  break;\n-               case 4:\n+               case 8:\n+                  if (curChar == 92)\n+                     jjstateSet[jjnewStateCnt++] = 3;\n+                  break;\n+               case 10:\n                   if ((0xffffffffefffffffL & l) != 0L)\n-                     jjCheckNAddStates(0, 2);\n-                  break;\n-               case 5:\n+                     jjCheckNAddStates(4, 7);\n+                  break;\n+               case 11:\n                   if (curChar == 92)\n-                     jjstateSet[jjnewStateCnt++] = 6;\n-                  break;\n-               case 6:\n+                     jjstateSet[jjnewStateCnt++] = 12;\n+                  break;\n+               case 12:\n                   if ((0x14404410000000L & l) != 0L)\n-                     jjCheckNAddStates(0, 2);\n+                     jjCheckNAddStates(4, 7);\n+                  break;\n+               case 13:\n+                  if (curChar == 117)\n+                     jjstateSet[jjnewStateCnt++] = 14;\n+                  break;\n+               case 14:\n+                  if ((0x7e0000007eL & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 15;\n+                  break;\n+               case 15:\n+                  if ((0x7e0000007eL & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 16;\n+                  break;\n+               case 16:\n+                  if ((0x7e0000007eL & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 17;\n+                  break;\n+               case 17:\n+                  if ((0x7e0000007eL & l) != 0L)\n+                     jjCheckNAddStates(4, 7);\n+                  break;\n+               case 18:\n+                  if (curChar == 92)\n+                     jjstateSet[jjnewStateCnt++] = 13;\n+                  break;\n+               case 21:\n+                  if ((0xffffffffefffffffL & l) != 0L)\n+                     jjCheckNAddStates(0, 3);\n+                  break;\n+               case 22:\n+                  if (curChar == 92)\n+                     jjstateSet[jjnewStateCnt++] = 23;\n+                  break;\n+               case 23:\n+                  if ((0x14404410000000L & l) != 0L)\n+                     jjCheckNAddStates(0, 3);\n+                  break;\n+               case 24:\n+                  if (curChar == 117)\n+                     jjstateSet[jjnewStateCnt++] = 25;\n+                  break;\n+               case 25:\n+                  if ((0x7e0000007eL & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 26;\n+                  break;\n+               case 26:\n+                  if ((0x7e0000007eL & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 27;\n+                  break;\n+               case 27:\n+                  if ((0x7e0000007eL & l) != 0L)\n+                     jjstateSet[jjnewStateCnt++] = 28;\n+                  break;\n+               case 28:\n+                  if ((0x7e0000007eL & l) != 0L)\n+                     jjCheckNAddStates(0, 3);\n+                  break;\n+               case 29:\n+                  if (curChar == 92)\n+                     jjstateSet[jjnewStateCnt++] = 24;\n                   break;\n                default : break;\n             }\n          {\n             switch(jjstateSet[--i])\n             {\n-               case 4:\n+               case 31:\n+               case 21:\n                   if (jjCanMove_0(hiByte, i1, i2, l1, l2))\n-                     jjAddStates(0, 2);\n+                     jjCheckNAddStates(0, 3);\n+                  break;\n+               case 10:\n+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))\n+                     jjAddStates(4, 7);\n                   break;\n                default : break;\n             }\n          kind = 0x7fffffff;\n       }\n       ++curPos;\n-      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))\n+      if ((i = jjnewStateCnt) == (startsAt = 31 - (jjnewStateCnt = startsAt)))\n          return curPos;\n       try { curChar = input_stream.readChar(); }\n       catch(java.io.IOException e) { return curPos; }\n    switch(curChar)\n    {\n       case 117:\n-         return jjStopAtPos(0, 14);\n+         return jjStopAtPos(0, 17);\n       default :\n          return jjMoveNfa_2(0, 0);\n    }\n             {\n                case 0:\n                   if ((0x800400000000L & l) != 0L)\n-                     kind = 13;\n+                     kind = 16;\n                   break;\n                default : break;\n             }\n             {\n                case 0:\n                   if ((0x14404410000000L & l) != 0L)\n-                     kind = 13;\n+                     kind = 16;\n                   break;\n                default : break;\n             }\n    switch(curChar)\n    {\n       case 92:\n-         return jjStopAtPos(0, 10);\n+         return jjStopAtPos(0, 13);\n       default :\n          return jjMoveNfa_1(0, 0);\n    }\n                case 0:\n                   if ((0xfffffffbffffffffL & l) != 0L)\n                   {\n-                     if (kind > 12)\n-                        kind = 12;\n+                     if (kind > 15)\n+                        kind = 15;\n                   }\n                   else if (curChar == 34)\n                   {\n-                     if (kind > 11)\n-                        kind = 11;\n+                     if (kind > 14)\n+                        kind = 14;\n                   }\n                   break;\n                case 1:\n                   if ((0xfffffffbffffffffL & l) != 0L)\n-                     kind = 12;\n+                     kind = 15;\n                   break;\n                default : break;\n             }\n             {\n                case 0:\n                   if ((0xffffffffefffffffL & l) != 0L)\n-                     kind = 12;\n+                     kind = 15;\n                   break;\n                default : break;\n             }\n             switch(jjstateSet[--i])\n             {\n                case 0:\n-                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 12)\n-                     kind = 12;\n+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 15)\n+                     kind = 15;\n                   break;\n                default : break;\n             }\n    }\n }\n static final int[] jjnextStates = {\n-   4, 5, 7, \n+   21, 22, 29, 30, 10, 11, 18, 19, \n };\n private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)\n {\n    }\n }\n public static final String[] jjstrLiteralImages = {\n-\"\", null, null, null, null, null, null, null, null, \"\\42\", null, null, null, \n-null, null, null, null, \"\\173\", \"\\175\", \"\\156\\165\\154\\154\", \"\\54\", \"\\72\", \"\\133\", \n-\"\\135\", \"\\164\\162\\165\\145\", \"\\146\\141\\154\\163\\145\", \"\\55\", \"\\56\", };\n+\"\", null, null, null, null, null, null, null, null, null, null, null, \"\\42\", \n+null, null, null, null, null, null, null, \"\\173\", \"\\175\", \"\\156\\165\\154\\154\", \"\\54\", \n+\"\\72\", \"\\133\", \"\\135\", \"\\164\\162\\165\\145\", \"\\146\\141\\154\\163\\145\", \"\\55\", \"\\56\", };\n public static final String[] lexStateNames = {\n    \"DEFAULT\", \n    \"STRING_STATE\", \n    \"HEX_STATE\", \n };\n public static final int[] jjnewLexState = {\n-   -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 0, -1, 1, 3, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, \n-   -1, -1, -1, \n+   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 0, -1, 1, 3, -1, 1, -1, -1, -1, -1, -1, \n+   -1, -1, -1, -1, -1, -1, \n };\n static final long[] jjtoToken = {\n-   0xfff3b61L, \n+   0x7ff9dd61L, \n };\n static final long[] jjtoSkip = {\n    0x1eL, \n };\n static final long[] jjtoMore = {\n-   0x4400L, \n+   0x22000L, \n };\n protected SimpleCharStream input_stream;\n-private final int[] jjrounds = new int[8];\n-private final int[] jjstateSet = new int[16];\n+private final int[] jjrounds = new int[31];\n+private final int[] jjstateSet = new int[62];\n protected char curChar;\n public JsonParserTokenManager(SimpleCharStream stream){\n    if (SimpleCharStream.staticFlag)\n {\n    int i;\n    jjround = 0x80000001;\n-   for (i = 8; i-- > 0;)\n+   for (i = 31; i-- > 0;)\n       jjrounds[i] = 0x80000000;\n }\n public void ReInit(SimpleCharStream stream, int lexState)\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/StringUnmarshaller.java\n+package com.google.gson;\n+\n+final class StringUnmarshaller {\n+  static String unmarshall(String str) {\n+    str = str.substring(1, str.length()-1);\n+    \n+    int len = str.length();    \n+    StringBuilder sb = new StringBuilder(len);    \n+    int i = 0;    \n+    while (i < len) {\n+      char c = str.charAt(i);      \n+      ++i;\n+      if (c == '\\\\') {\n+        char c1 = str.charAt(i);\n+        ++i;\n+        if (c1 == 'u') { // This is a unicode escape\n+          // TODO(inder): Handle the case where code points are of size bigger than 4 \n+          int codePoint = getCodePoint(str, i);\n+          sb.appendCodePoint(codePoint);\n+          i += 4;           \n+        } else {\n+          char escapedChar = getEscapedChar(str, c1);\n+          sb.append(escapedChar);\n+        }\n+      } else {\n+        sb.append(c);\n+      }\n+    }\n+    return sb.toString();\n+  }\n+\n+  private static int getCodePoint(String str, int i) {\n+//    int codePoint = Character.codePointAt(str, i);\n+    String s = str.substring(i, i+4);\n+    int codePoint = Integer.parseInt(s, 16);\n+    return codePoint;\n+  }\n+\n+  private static char getEscapedChar(String str, char c) {\n+    char ch;\n+    switch (c) {\n+      case 'n':\n+        ch = '\\n';\n+        break;\n+      case 'b':\n+        ch = '\\b';\n+        break;\n+      case 'f':\n+        ch = '\\f';\n+        break;\n+      case 't':\n+        ch = '\\t';\n+        break;\n+      case 'r':\n+        ch = '\\r';\n+        break;\n+      case '\\\"':\n+        ch = '\\\"';\n+        break;\n+      case '\\'':\n+        ch = '\\'';\n+        break;\n+      case '\\\\':\n+        ch = '\\\\';\n+        break;\n+      default:\n+        throw new IllegalStateException(\"Unexpected character: \" + c + \" in \" + str);\n+    }\n+    return ch;\n+  }\n+}\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/StringUnmarshallerTest.java\n+package com.google.gson;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests for {@link StringUnmarshaller}. \n+ * \n+ * @author Inderjeet Singh\n+ */\n+public class StringUnmarshallerTest extends TestCase {\n+\n+  public void testCtrlN() {\n+    assertEquals(\"a\\nb\", StringUnmarshaller.unmarshall(\"'a\\\\nb'\"));\n+  }\n+\n+  public void testCtrlR() {\n+    assertEquals(\"a\\rb\", StringUnmarshaller.unmarshall(\"'a\\\\rb'\"));\n+  }\n+  \n+  public void testCtrlT() {\n+    assertEquals(\"\\tb\", StringUnmarshaller.unmarshall(\"'\\\\tb'\"));\n+  }\n+  \n+  public void testBackSpace() {\n+    assertEquals(\"\\b foo\", StringUnmarshaller.unmarshall(\"'\\\\b foo'\"));\n+  }\n+  \n+  public void testFormFeed() {\n+    assertEquals(\"\\f bar\", StringUnmarshaller.unmarshall(\"'\\\\f bar'\"));\n+  }\n+  \n+  public void testSingleQuote() {\n+    assertEquals(\"a'b\", StringUnmarshaller.unmarshall(\"'a'b'\"));\n+  }\n+  \n+  public void testSingleQuoteEscaped() {\n+    assertEquals(\"a'b\", StringUnmarshaller.unmarshall(\"'a\\\\'b'\"));\n+  }\n+  \n+  public void testDoubleQuote() {\n+    assertEquals(\"a\\\"b\", StringUnmarshaller.unmarshall(\"'a\\\"b'\"));\n+  }\n+  \n+  public void testDoubleQuoteEscaped() {\n+    assertEquals(\"a\\\"b\", StringUnmarshaller.unmarshall(\"'a\\\\\\\"b'\"));\n+  }\n+  \n+  public void testBackslash() {\n+    assertEquals(\"a\\\\b\", StringUnmarshaller.unmarshall(\"'a\\\\\\\\b'\"));\n+  }\n+    \n+  public void testUnicodeString() {\n+    assertEquals(\"\\u03a9b\", StringUnmarshaller.unmarshall(\"'\\\\u03a9b'\"));\n+  }\n+}\n--- a/gson/src/test/java/com/google/gson/functional/InternationalizationTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/InternationalizationTest.java\n   }\n \n   public void testStringsWithUnicodeChineseCharactersEscapedDeserialization() throws Exception {\n-    String json = \"\\\"\" + \"\\\\u597d\\\\u597d\\\\u597d\" + \"\\\"\";\n-    String actual = gson.fromJson(json, String.class);\n-    String expected = \"\\u597d\\u597d\\u597d\";\n-    assertEquals(expected, actual);\n+    String actual = gson.fromJson(\"'\\\\u597d\\\\u597d\\\\u597d'\", String.class);\n+    assertEquals(\"\\u597d\\u597d\\u597d\", actual);\n   }\n }\n--- a/gson/src/test/java/com/google/gson/functional/StringTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/StringTest.java\n     String valueWithQuotes = \"beforeQuote'afterQuote\";\n     String jsonRepresentation = gson.toJson(valueWithQuotes);\n     assertEquals(valueWithQuotes, gson.fromJson(jsonRepresentation, String.class));\n+  }\n+\n+  public void testEscapedCtrlNInStringSerialization() throws Exception {\n+    String value = \"a\\nb\";\n+    String json = gson.toJson(value);\n+    assertEquals(\"\\\"a\\\\nb\\\"\", json);\n+  }\n+\n+  public void testEscapedCtrlNInStringDeserialization() throws Exception {\n+    String json = \"'a\\\\nb'\";\n+    String actual = gson.fromJson(json, String.class);\n+    assertEquals(\"a\\nb\", actual);\n+  }\n+\n+  public void testEscapedCtrlRInStringSerialization() throws Exception {\n+    String value = \"a\\rb\";\n+    String json = gson.toJson(value);\n+    assertEquals(\"\\\"a\\\\rb\\\"\", json);\n+  }\n+\n+  public void testEscapedCtrlRInStringDeserialization() throws Exception {\n+    String json = \"'a\\\\rb'\";\n+    String actual = gson.fromJson(json, String.class);\n+    assertEquals(\"a\\rb\", actual);\n+  }\n+\n+  public void testEscapedBackslashInStringSerialization() throws Exception {\n+    String value = \"a\\\\b\";\n+    String json = gson.toJson(value);\n+    assertEquals(\"\\\"a\\\\\\\\b\\\"\", json);\n+  }\n+\n+  public void testEscapedBackslashInStringDeserialization() throws Exception {\n+    String actual = gson.fromJson(\"'a\\\\\\\\b'\", String.class);\n+    assertEquals(\"a\\\\b\", actual);\n   }\n \n   public void testSingleQuoteInStringDeserialization() throws Exception {", "timestamp": 1223675522, "metainfo": ""}