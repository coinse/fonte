{"sha": "c25278b4d6036a0e0ae758b13194813936d9e911", "log": "Created an alpha package that holds experimental feature. Added support for JsonPostDeserializer that allows you to invoke postDeserialize methods on an Gson deserialized object.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n \n import com.google.gson.internal.ConstructorConstructor;\n import com.google.gson.internal.Excluder;\n+import com.google.gson.internal.ObjectConstructor;\n import com.google.gson.internal.Primitives;\n import com.google.gson.internal.Streams;\n+import com.google.gson.internal.alpha.Intercept;\n+import com.google.gson.internal.alpha.JsonPostDeserializer;\n import com.google.gson.internal.bind.ArrayTypeAdapter;\n import com.google.gson.internal.bind.CollectionTypeAdapterFactory;\n import com.google.gson.internal.bind.DateTypeAdapter;\n     try {\n       reader.peek();\n       isEmpty = false;\n-      TypeAdapter<T> typeAdapter = (TypeAdapter<T>) getAdapter(TypeToken.get(typeOfT));\n-      return typeAdapter.read(reader);\n+      TypeToken<T> typeToken = (TypeToken<T>) TypeToken.get(typeOfT);\n+      TypeAdapter<T> typeAdapter = (TypeAdapter<T>) getAdapter(typeToken);\n+      T object = typeAdapter.read(reader);\n+      invokeInterceptorIfNeeded(object, typeToken);\n+      return object;\n     } catch (EOFException e) {\n       /*\n        * For compatibility with JSON 1.5 and earlier, we return null for empty\n     }\n   }\n \n+  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+  private <T> void invokeInterceptorIfNeeded(T object, TypeToken<T> type) {\n+    Class<? super T> clazz = type.getRawType();\n+    Intercept interceptor = clazz.getAnnotation(Intercept.class);\n+    if (interceptor == null) return;\n+    // TODO: We don't need to construct an instance of postDeserializer every time. we can\n+    // create it once and cache it.\n+    Class<? extends JsonPostDeserializer> postDeserializerClass = interceptor.postDeserialize();\n+    ObjectConstructor<? extends JsonPostDeserializer> objectConstructor =\n+        constructorConstructor.get(TypeToken.get(postDeserializerClass));\n+    JsonPostDeserializer<T> postDeserializer = objectConstructor.construct();\n+    postDeserializer.postDeserialize(object);\n+  }\n+\n   @Override\n   public String toString() {\n   \tStringBuilder sb = new StringBuilder(\"{\")\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/internal/alpha/Intercept.java\n+/*\n+ * Copyright (C) 2012 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.internal.alpha;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+\n+/**\n+ * Use this annotation to indicate various interceptors for class instances after\n+ * they have been processed by Gson. For example, you can use it to validate an instance\n+ * after it has been deserialized from Json.\n+ * Here is an example of how this annotation is used:\n+ * <p>Here is an example of how this annotation is used:\n+ * <p><pre>\n+ * &#64Intercept(postDeserialize=UserValidator.class)\n+ * public class User {\n+ *   String name;\n+ *   String password;\n+ *   String emailAddress;\n+ * }\n+ *\n+ * public class UserValidator implements JsonPostDeserializer&lt;User&gt; {\n+ *   public void postDeserialize(User user) {\n+ *     // Do some checks on user\n+ *     if (user.name == null || user.password == null) {\n+ *       throw new JsonParseException(\"name and password are required fields.\");\n+ *     }\n+ *     if (user.emailAddress == null) {\n+ *       emailAddress = \"unknown\"; // assign a default value.\n+ *     }\n+ *   }\n+ * }\n+ * </pre></p>\n+ *\n+ * @author Inderjeet Singh\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+public @interface Intercept {\n+\n+  /**\n+   * Specify the class that provides the methods that should be invoked after an instance\n+   * has been deserialized.\n+   */\n+  @SuppressWarnings(\"rawtypes\")\n+  public Class<? extends JsonPostDeserializer> postDeserialize();\n+}\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/internal/alpha/JsonPostDeserializer.java\n+/*\n+ * Copyright (C) 2012 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.internal.alpha;\n+\n+import com.google.gson.InstanceCreator;\n+\n+/**\n+ * This interface is implemented by a class that wishes to inspect or modify an object\n+ * after it has been deserialized. You must define a no-args constructor or register an\n+ * {@link InstanceCreator} for such a class.\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public interface JsonPostDeserializer<T> {\n+\n+  /**\n+   * This method is called by Gson after the object has been deserialized from Json.\n+   */\n+  public void postDeserialize(T object);\n+}\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/internal/alpha/package-info.java\n+/**\n+ * This package provides experimental Gson features that are very likely to change from\n+ * release to release. Backwards compatibility will almost certainly be broken in a future\n+ * release by either changing the package name (when the feature moves to main Gson) or when\n+ * we decide that the feature isn't worth adding.\n+ *\n+ * @author Inderjeet Singh, Joel Leitch, Jesse Wilson\n+ */\n+package com.google.gson.internal.alpha;\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/InterceptorTest.java\n+/*\n+ * Copyright (C) 2012 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.functional;\n+\n+import junit.framework.TestCase;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.internal.alpha.Intercept;\n+import com.google.gson.internal.alpha.JsonPostDeserializer;\n+\n+/**\n+ * Unit tests for {@link Intercept} and {@link JsonPostDeserializer}.\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public final class InterceptorTest extends TestCase {\n+\n+  private Gson gson;\n+\n+  @Override\n+  public void setUp() throws Exception {\n+    super.setUp();\n+    this.gson = new Gson();\n+  }\n+\n+  public void testPostDeserialize() {\n+    MyObject target = gson.fromJson(\"{}\", MyObject.class);\n+    assertEquals(MyObject.DEFAULT_VALUE, target.value);\n+    assertEquals(MyObject.DEFAULT_MESSAGE, target.message);\n+  }\n+\n+  @Intercept(postDeserialize = MyObjectInterceptor.class)\n+  private static final class MyObject {\n+    static final int DEFAULT_VALUE = 10;\n+    static final String DEFAULT_MESSAGE = \"hello\";\n+\n+    int value = 0;\n+    String message = null;\n+  }\n+\n+  private static final class MyObjectInterceptor implements JsonPostDeserializer<MyObject> {\n+    public void postDeserialize(MyObject o) {\n+      if (o.value == 0) {\n+        o.value = MyObject.DEFAULT_VALUE;\n+      }\n+      if (o.message == null) {\n+        o.message = MyObject.DEFAULT_MESSAGE;\n+      }\n+    }\n+  }\n+}", "timestamp": 1349925636, "metainfo": ""}