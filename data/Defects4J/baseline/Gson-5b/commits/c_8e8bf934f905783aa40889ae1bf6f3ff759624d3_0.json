{"sha": "8e8bf934f905783aa40889ae1bf6f3ff759624d3", "log": "Inline the nesting stack to save ~20% on JsonReader parsing.", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n import java.io.EOFException;\n import java.io.IOException;\n import java.io.Reader;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n  * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>)\n   private int bufferStartLine = 1;\n   private int bufferStartColumn = 1;\n \n-  private final List<JsonScope> stack = new ArrayList<JsonScope>();\n+  /*\n+   * The nesting stack. Using a manual array rather than an ArrayList saves 20%.\n+   */\n+  private JsonScope[] stack = new JsonScope[32];\n+  private int stackSize = 0;\n   {\n     push(JsonScope.EMPTY_DOCUMENT);\n   }\n       return token;\n     }\n \n-    switch (peekStack()) {\n+    switch (stack[stackSize - 1]) {\n     case EMPTY_DOCUMENT:\n       if (lenient) {\n         consumeNonExecutePrefix();\n       }\n-      replaceTop(JsonScope.NONEMPTY_DOCUMENT);\n+      stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;\n       JsonToken firstToken = nextValue();\n       if (!lenient && token != JsonToken.BEGIN_ARRAY && token != JsonToken.BEGIN_OBJECT) {\n         throw new IOException(\n   public void close() throws IOException {\n     value = null;\n     token = null;\n-    stack.clear();\n-    stack.add(JsonScope.CLOSED);\n+    stack[0] = JsonScope.CLOSED;\n+    stackSize = 1;\n     in.close();\n   }\n \n     }\n   }\n \n-  private JsonScope peekStack() {\n-    return stack.get(stack.size() - 1);\n-  }\n-\n-  private JsonScope pop() {\n-    return stack.remove(stack.size() - 1);\n-  }\n-\n   private void push(JsonScope newTop) {\n-    stack.add(newTop);\n-  }\n-\n-  /**\n-   * Replace the value on the top of the stack with the given value.\n-   */\n-  private void replaceTop(JsonScope newTop) {\n-    stack.set(stack.size() - 1, newTop);\n+    if (stackSize == stack.length) {\n+      JsonScope[] newStack = new JsonScope[stackSize * 2];\n+      System.arraycopy(stack, 0, newStack, 0, stackSize);\n+      stack = newStack;\n+    }\n+    stack[stackSize++] = newTop;\n   }\n \n   @SuppressWarnings(\"fallthrough\")\n   private JsonToken nextInArray(boolean firstElement) throws IOException {\n     if (firstElement) {\n-      replaceTop(JsonScope.NONEMPTY_ARRAY);\n+      stack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;\n     } else {\n       /* Look for a comma before each element after the first element. */\n       switch (nextNonWhitespace(true)) {\n       case ']':\n-        pop();\n+        stackSize--;\n         return token = JsonToken.END_ARRAY;\n       case ';':\n         checkLenient(); // fall-through\n     switch (nextNonWhitespace(true)) {\n     case ']':\n       if (firstElement) {\n-        pop();\n+        stackSize--;\n         return token = JsonToken.END_ARRAY;\n       }\n       // fall-through to handle \",]\"\n       /* Peek to see if this is the empty object. */\n       switch (nextNonWhitespace(true)) {\n       case '}':\n-        pop();\n+        stackSize--;\n         return token = JsonToken.END_OBJECT;\n       default:\n         pos--;\n     } else {\n       switch (nextNonWhitespace(true)) {\n       case '}':\n-        pop();\n+        stackSize--;\n         return token = JsonToken.END_OBJECT;\n       case ';':\n       case ',':\n       }\n     }\n \n-    replaceTop(JsonScope.DANGLING_NAME);\n+    stack[stackSize - 1] = JsonScope.DANGLING_NAME;\n     return token = JsonToken.NAME;\n   }\n \n       throw syntaxError(\"Expected ':'\");\n     }\n \n-    replaceTop(JsonScope.NONEMPTY_OBJECT);\n+    stack[stackSize - 1] = JsonScope.NONEMPTY_OBJECT;\n     return nextValue();\n   }\n ", "timestamp": 1323749328, "metainfo": ""}