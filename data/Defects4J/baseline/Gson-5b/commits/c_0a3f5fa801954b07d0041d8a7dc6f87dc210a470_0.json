{"sha": "0a3f5fa801954b07d0041d8a7dc6f87dc210a470", "log": "Required strings to be quoted even in lenient mode.  As far as Inderjeet and I can tell, this is consistent with Gson 1.5.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n package com.google.gson;\n \n import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n-import com.google.gson.stream.MalformedJsonException;\n \n import java.io.IOException;\n import java.io.Reader;\n   public <T> T fromJson(Reader json, Class<T> classOfT) throws JsonSyntaxException, JsonIOException {\n     JsonReader jsonReader = new JsonReader(json);\n     Object object = fromJson(jsonReader, classOfT);\n-    assertFullConsumption(object, jsonReader);\n     return Primitives.wrap(classOfT).cast(object);\n   }\n \n    */\n   public <T> T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n     JsonReader jsonReader = new JsonReader(json);\n-    T object = this.<T>fromJson(jsonReader, typeOfT);\n-    assertFullConsumption(object, jsonReader);\n-    return object;\n-  }\n-\n-  private static void assertFullConsumption(Object obj, JsonReader reader) {\n-    try {\n-      if (obj != null && reader.peek() != JsonToken.END_DOCUMENT) {\n-        throw new JsonIOException(\"JSON document was not fully consumed.\");\n-      }\n-    } catch (MalformedJsonException e) {\n-      throw new JsonSyntaxException(e);\n-    } catch (IOException e) {\n-      throw new JsonIOException(e);\n-    }\n+    return this.<T>fromJson(jsonReader, typeOfT);\n   }\n \n   /**\n--- a/gson/src/main/java/com/google/gson/JsonParser.java\n+++ b/gson/src/main/java/com/google/gson/JsonParser.java\n package com.google.gson;\n \n import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonToken;\n-import com.google.gson.stream.MalformedJsonException;\n \n import java.io.EOFException;\n-import java.io.IOException;\n import java.io.Reader;\n import java.io.StringReader;\n \n    * @since 1.3\n    */\n   public JsonElement parse(Reader json) throws JsonIOException, JsonSyntaxException {\n-    try {\n-      JsonReader jsonReader = new JsonReader(json);\n-      JsonElement element = parse(jsonReader);\n-      if (!element.isJsonNull() && jsonReader.peek() != JsonToken.END_DOCUMENT) {\n-        throw new JsonSyntaxException(\"Did not consume the entire document.\");\n-      }\n-      return element;\n-    } catch (MalformedJsonException e) {\n-      throw new JsonSyntaxException(e);\n-    } catch (IOException e) {\n-      throw new JsonIOException(e);\n-    } catch (NumberFormatException e) {\n-      throw new JsonSyntaxException(e);\n-    }\n+    JsonReader jsonReader = new JsonReader(json);\n+    return parse(jsonReader);\n   }\n \n   /**\n    *\n    * @throws JsonParseException if there is an IOException or if the specified\n    *     text is not valid JSON\n+   * @since 1.6\n    */\n   public JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException {\n     boolean lenient = json.isLenient();\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n     // fast forward through the leading whitespace\n     nextNonWhitespace();\n     pos--;\n-    \n+\n     if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n       return;\n     }\n-    \n+\n     for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\n       if (buffer[pos + i] != NON_EXECUTE_PREFIX[i]) {\n         return; // not a security token!\n       }\n     }\n-    \n+\n     // we consumed a security token!\n     pos += NON_EXECUTE_PREFIX.length;\n   }\n         token = JsonToken.NUMBER;\n       } catch (NumberFormatException ignored) {\n         // this must be an unquoted string\n-        checkLenient();\n-        token = JsonToken.STRING;\n+        throw syntaxError(\"invalid number or unquoted string\");\n       }\n     }\n   }\n--- a/gson/src/test/java/com/google/gson/JsonParserTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonParserTest.java\n     parser = new JsonParser();\n   }\n \n+  public void testParseSingleWordFails() {\n+    try {\n+      parser.parse(\"Word\");\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testParseUnquotedStringArrayFails() {\n+    try {\n+      parser.parse(\"[a,b,c]\");\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n   public void testParseString() {\n     String json = \"{a:10,b:'c'}\";\n     JsonElement e = parser.parse(json);\n     assertTrue(e.isJsonNull());\n   }\n \n-  public void testParseUnquotedStringSentence() {\n+  public void testParseUnquotedSingleWordStringFails() {\n+    try {\n+      parser.parse(\"Test\");\n+      fail();\n+    } catch (JsonSyntaxException expected) { }\n+  }\n+\n+  public void testParseUnquotedMultiWordStringFails() {\n     String unquotedSentence = \"Test is a test..blah blah\";\n     try {\n       parser.parse(unquotedSentence);\n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n     assertEquals(value, actual);\n   }\n \n-  public void testUnquotedStringDeserialization() throws Exception {\n+  public void testUnquotedStringDeserializationFails() throws Exception {\n+    try {\n+      gson.fromJson(\"UnquotedSingleWord\", String.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) { }\n+\n     String value = \"String Blah Blah Blah...1, 2, 3\";\n     try {\n       gson.fromJson(value, String.class);\n--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n     try {\n       reader.nextString();\n       fail();\n-    } catch (IOException expected) {\n+    } catch (MalformedJsonException expected) {\n     }\n   }\n \n     JsonReader reader = new JsonReader(new StringReader(\"[a]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n-    assertEquals(\"a\", reader.nextString());\n+    try {\n+      reader.nextString();\n+      fail();\n+    } catch (MalformedJsonException expected) { }\n   }\n \n   public void testStrictSingleQuotedStrings() throws IOException {\n   public void testLenientPartialNonExecutePrefix() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\")]}' []\"));\n     reader.setLenient(true);\n-    assertEquals(\")\", reader.nextString()); // lenient is almost too lenient!\n-    try {\n-      reader.peek();\n+    try {\n+      reader.beginArray();\n       fail();\n     } catch (IOException expected) {\n     }", "timestamp": 1289945680, "metainfo": ""}