{"sha": "3f2efac95ef6575e33a7b4c9052d00afe1b83bad", "log": "Stop blowing up on a null key, but rather return that the element is not found.", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java\n+++ b/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java\n   }\n \n   private TreeNode<K, V> find(K key) {\n-    for (TreeNode<K, V> entry = root; entry != null; ) {\n-      int compareVal = key.compareTo(entry.key);\n-      if (compareVal < 0) {\n-        entry = entry.left;\n-      } else if (compareVal > 0) {\n-        entry = entry.right;\n-      } else {\n-        return entry;\n+    if (key != null) {\n+      for (TreeNode<K, V> entry = root; entry != null; ) {\n+        int compareVal = key.compareTo(entry.key);\n+        if (compareVal < 0) {\n+          entry = entry.left;\n+        } else if (compareVal > 0) {\n+          entry = entry.right;\n+        } else {\n+          return entry;\n+        }\n       }\n     }\n     return null;\n--- a/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java\n+++ b/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java\n \n     // Ensure entry set size is same as map size\n     assertEquals(map.size(), map.entrySet().size());\n+  }\n+\n+  public void testGetAndContainsNullKey() throws Exception {\n+    LinkedTreeMap<String, Integer> map = new LinkedTreeMap<String, Integer>();\n+    assertFalse(map.containsKey(null));\n+    assertNull(map.get(null));\n+\n+    map.put(\"A\", 1);\n+    assertFalse(map.containsKey(null));\n+    assertNull(map.get(null));\n+  }\n+\n+  public void testDisallowPutForNullKeys() throws Exception {\n+    LinkedTreeMap<String, Integer> map = new LinkedTreeMap<String, Integer>();\n+    try {\n+      map.put(null, 1);\n+      fail();\n+    } catch (NullPointerException expected) {}\n   }\n \n   public void testSingleElement() throws Exception {", "timestamp": 1357774658, "metainfo": ""}