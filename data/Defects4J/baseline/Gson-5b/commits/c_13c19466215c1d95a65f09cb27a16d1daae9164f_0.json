{"sha": "13c19466215c1d95a65f09cb27a16d1daae9164f", "log": "More tests that skipValue() is no less strict.", "commit": "\n--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n     reader.endArray();\n   }\n \n+  public void testStrictNonFiniteDoublesWithSkipValue() throws IOException {\n+    String json = \"[NaN]\";\n+    JsonReader reader = new JsonReader(new StringReader(json));\n+    reader.beginArray();\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (MalformedJsonException expected) {\n+    }\n+  }\n+\n   public void testLongs() throws IOException {\n     String json = \"[0,0,0,\"\n         + \"1,1,1,\"\n     assertEquals(true, reader.nextBoolean());\n   }\n \n+  public void testStrictNameValueSeparatorWithSkipValue() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\"=true}\"));\n+    reader.beginObject();\n+    assertEquals(\"a\", reader.nextName());\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+\n+    reader = new JsonReader(new StringReader(\"{\\\"a\\\"=>true}\"));\n+    reader.beginObject();\n+    assertEquals(\"a\", reader.nextName());\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+  }\n+\n   public void testStrictComments() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\"[// comment \\n true]\"));\n     reader.beginArray();\n     assertEquals(true, reader.nextBoolean());\n   }\n \n+  public void testStrictCommentsWithSkipValue() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"[// comment \\n true]\"));\n+    reader.beginArray();\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+\n+    reader = new JsonReader(new StringReader(\"[# comment \\n true]\"));\n+    reader.beginArray();\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+\n+    reader = new JsonReader(new StringReader(\"[/* comment */ true]\"));\n+    reader.beginArray();\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+  }\n+\n   public void testStrictUnquotedNames() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\"{a:true}\"));\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n   }\n \n+  public void testStrictUnquotedNamesWithSkipValue() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"{a:true}\"));\n+    reader.beginObject();\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+  }\n+\n   public void testStrictSingleQuotedNames() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\"{'a':true}\"));\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n   }\n \n+  public void testStrictSingleQuotedNamesWithSkipValue() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"{'a':true}\"));\n+    reader.beginObject();\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+  }\n+\n   public void testStrictUnquotedStrings() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\"[a]\"));\n     reader.beginArray();\n     assertEquals(\"a\", reader.nextString());\n   }\n \n+  public void testStrictSingleQuotedStringsWithSkipValue() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"['a']\"));\n+    reader.beginArray();\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+  }\n+\n   public void testStrictSemicolonDelimitedArray() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\"[true;true]\"));\n     reader.beginArray();\n     assertEquals(true, reader.nextBoolean());\n   }\n \n+  public void testStrictSemicolonDelimitedArrayWithSkipValue() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"[true;true]\"));\n+    reader.beginArray();\n+    try {\n+      reader.skipValue();\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+  }\n+\n   public void testStrictSemicolonDelimitedNameValuePair() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\n     reader.beginObject();\n     assertEquals(\"b\", reader.nextName());\n   }\n \n+  public void testStrictSemicolonDelimitedNameValuePairWithSkipValue() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\n+    reader.beginObject();\n+    assertEquals(\"a\", reader.nextName());\n+    try {\n+      reader.skipValue();\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+  }\n+\n   public void testStrictUnnecessaryArraySeparators() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\"[true,,true]\"));\n     reader.beginArray();\n     reader.endArray();\n   }\n \n+  public void testStrictUnnecessaryArraySeparatorsWithSkipValue() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"[true,,true]\"));\n+    reader.beginArray();\n+    assertEquals(true, reader.nextBoolean());\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+\n+    reader = new JsonReader(new StringReader(\"[,true]\"));\n+    reader.beginArray();\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+\n+    reader = new JsonReader(new StringReader(\"[true,]\"));\n+    reader.beginArray();\n+    assertEquals(true, reader.nextBoolean());\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+\n+    reader = new JsonReader(new StringReader(\"[,]\"));\n+    reader.beginArray();\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+  }\n+\n   public void testStrictMultipleTopLevelValues() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\"[] []\"));\n     reader.beginArray();\n     assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n   }\n \n+  public void testStrictMultipleTopLevelValuesWithSkipValue() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"[] []\"));\n+    reader.beginArray();\n+    reader.endArray();\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+  }\n+\n   public void testStrictTopLevelValueType() {\n     JsonReader reader = new JsonReader(new StringReader(\"true\"));\n     try {\n     assertEquals(true, reader.nextBoolean());\n   }\n \n+  public void testStrictTopLevelValueTypeWithSkipValue() {\n+    JsonReader reader = new JsonReader(new StringReader(\"true\"));\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+  }\n+\n   public void testStrictNonExecutePrefix() {\n     JsonReader reader = new JsonReader(new StringReader(\")]}'\\n []\"));\n     try {\n       reader.beginArray();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+  }\n+\n+  public void testStrictNonExecutePrefixWithSkipValue() {\n+    JsonReader reader = new JsonReader(new StringReader(\")]}'\\n []\"));\n+    try {\n+      reader.skipValue();\n       fail();\n     } catch (IOException expected) {\n     }", "timestamp": 1324503835, "metainfo": ""}