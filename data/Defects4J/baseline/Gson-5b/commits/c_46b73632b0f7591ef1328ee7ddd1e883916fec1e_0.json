{"sha": "46b73632b0f7591ef1328ee7ddd1e883916fec1e", "log": "Fix a bug where we weren't reading enough characters when a BOM was encountered.", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n       if (bufferStartLine == 1 && bufferStartColumn == 1 && limit > 0 && buffer[0] == '\\ufeff') {\n         pos++;\n         bufferStartColumn--;\n+        minimum++;\n       }\n \n       if (limit >= minimum) {\n--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n \n import java.io.EOFException;\n import java.io.IOException;\n-import java.io.StringReader;\n+import java.io.Reader;\n import java.util.Arrays;\n import junit.framework.TestCase;\n \n \n public final class JsonReaderTest extends TestCase {\n   public void testReadArray() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[true, true]\"));\n+    JsonReader reader = new JsonReader(reader(\"[true, true]\"));\n     reader.beginArray();\n     assertEquals(true, reader.nextBoolean());\n     assertEquals(true, reader.nextBoolean());\n   }\n \n   public void testReadEmptyArray() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[]\"));\n+    JsonReader reader = new JsonReader(reader(\"[]\"));\n     reader.beginArray();\n     assertFalse(reader.hasNext());\n     reader.endArray();\n   }\n \n   public void testReadObject() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\n+    JsonReader reader = new JsonReader(reader(\n         \"{\\\"a\\\": \\\"android\\\", \\\"b\\\": \\\"banana\\\"}\"));\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n   }\n \n   public void testReadEmptyObject() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{}\"));\n+    JsonReader reader = new JsonReader(reader(\"{}\"));\n     reader.beginObject();\n     assertFalse(reader.hasNext());\n     reader.endObject();\n   }\n \n   public void testSkipObject() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\n+    JsonReader reader = new JsonReader(reader(\n         \"{\\\"a\\\": { \\\"c\\\": [], \\\"d\\\": [true, true, {}] }, \\\"b\\\": \\\"banana\\\"}\"));\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n   }\n \n   public void testSkipInteger() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\n+    JsonReader reader = new JsonReader(reader(\n         \"{\\\"a\\\":123456789,\\\"b\\\":-123456789}\"));\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n   }\n \n   public void testSkipDouble() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\n+    JsonReader reader = new JsonReader(reader(\n         \"{\\\"a\\\":-123.456e-789,\\\"b\\\":123456789.0}\"));\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n         \"   \\\"hello\\\": true,\\n\" +\n         \"   \\\"foo\\\": [\\\"world\\\"]\\n\" +\n         \"}\";\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.beginObject();\n     assertEquals(\"hello\", reader.nextName());\n     assertEquals(true, reader.nextBoolean());\n \n   public void testEmptyString() {\n     try {\n-      new JsonReader(new StringReader(\"\")).beginArray();\n-    } catch (IOException expected) {\n-    }\n-    try {\n-      new JsonReader(new StringReader(\"\")).beginObject();\n+      new JsonReader(reader(\"\")).beginArray();\n+    } catch (IOException expected) {\n+    }\n+    try {\n+      new JsonReader(reader(\"\")).beginObject();\n     } catch (IOException expected) {\n     }\n   }\n \n   public void testNoTopLevelObject() {\n     try {\n-      new JsonReader(new StringReader(\"true\")).nextBoolean();\n+      new JsonReader(reader(\"true\")).nextBoolean();\n     } catch (IOException expected) {\n     }\n   }\n         + \"\\\"\\\\u0019\\\",\"\n         + \"\\\"\\\\u20AC\\\"\"\n         + \"]\";\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.beginArray();\n     assertEquals(\"a\", reader.nextString());\n     assertEquals(\"a\\\"\", reader.nextString());\n \n   public void testUnescapingInvalidCharacters() throws IOException {\n     String json = \"[\\\"\\\\u000g\\\"]\";\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.beginArray();\n     try {\n       reader.nextString();\n \n   public void testUnescapingTruncatedCharacters() throws IOException {\n     String json = \"[\\\"\\\\u000\";\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.beginArray();\n     try {\n       reader.nextString();\n \n   public void testUnescapingTruncatedSequence() throws IOException {\n     String json = \"[\\\"\\\\\";\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.beginArray();\n     try {\n       reader.nextString();\n   }\n \n   public void testIntegersWithFractionalPartSpecified() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[1.0,1.0,1.0]\"));\n+    JsonReader reader = new JsonReader(reader(\"[1.0,1.0,1.0]\"));\n     reader.beginArray();\n     assertEquals(1.0, reader.nextDouble());\n     assertEquals(1, reader.nextInt());\n         + \"2.2250738585072014E-308,\"\n         + \"3.141592653589793,\"\n         + \"2.718281828459045]\";\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.beginArray();\n     assertEquals(-0.0, reader.nextDouble());\n     assertEquals(1.0, reader.nextDouble());\n \n   public void testStrictNonFiniteDoubles() throws IOException {\n     String json = \"[NaN]\";\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.beginArray();\n     try {\n       reader.nextDouble();\n \n   public void testStrictQuotedNonFiniteDoubles() throws IOException {\n     String json = \"[\\\"NaN\\\"]\";\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.beginArray();\n     try {\n       reader.nextDouble();\n \n   public void testLenientNonFiniteDoubles() throws IOException {\n     String json = \"[NaN, -Infinity, Infinity]\";\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertTrue(Double.isNaN(reader.nextDouble()));\n \n   public void testLenientQuotedNonFiniteDoubles() throws IOException {\n     String json = \"[\\\"NaN\\\", \\\"-Infinity\\\", \\\"Infinity\\\"]\";\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertTrue(Double.isNaN(reader.nextDouble()));\n \n   public void testStrictNonFiniteDoublesWithSkipValue() throws IOException {\n     String json = \"[NaN]\";\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.beginArray();\n     try {\n       reader.skipValue();\n         + \"-1,-1,-1,\"\n         + \"-9223372036854775808,\"\n         + \"9223372036854775807]\";\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.beginArray();\n     assertEquals(0L, reader.nextLong());\n     assertEquals(0, reader.nextInt());\n \n   public void testNumberWithOctalPrefix() throws IOException {\n     String json = \"[01]\";\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.beginArray();\n     try {\n       reader.peek();\n   }\n \n   public void testBooleans() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[true,false]\"));\n+    JsonReader reader = new JsonReader(reader(\"[true,false]\"));\n     reader.beginArray();\n     assertEquals(true, reader.nextBoolean());\n     assertEquals(false, reader.nextBoolean());\n   }\n \n   public void testPeekingUnquotedStringsPrefixedWithBooleans() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[truey]\"));\n+    JsonReader reader = new JsonReader(reader(\"[truey]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(STRING, reader.peek());\n   }\n \n   public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[12.34e5x]\"));\n+    JsonReader reader = new JsonReader(reader(\"[12.34e5x]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(STRING, reader.peek());\n   }\n \n   public void testPeekLongMinValue() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[-9223372036854775808]\"));\n+    JsonReader reader = new JsonReader(reader(\"[-9223372036854775808]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(NUMBER, reader.peek());\n   }\n \n   public void testPeekLongMaxValue() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[9223372036854775807]\"));\n+    JsonReader reader = new JsonReader(reader(\"[9223372036854775807]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(NUMBER, reader.peek());\n   }\n \n   public void testLongLargerThanMaxLongThatWrapsAround() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[22233720368547758070]\"));\n+    JsonReader reader = new JsonReader(reader(\"[22233720368547758070]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(NUMBER, reader.peek());\n   }\n \n   public void testLongLargerThanMinLongThatWrapsAround() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[-22233720368547758070]\"));\n+    JsonReader reader = new JsonReader(reader(\"[-22233720368547758070]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(NUMBER, reader.peek());\n    * long parsing uses Double.parseDouble() for fractional values.\n    */\n   public void testPeekLargerThanLongMaxValue() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[9223372036854775808]\"));\n+    JsonReader reader = new JsonReader(reader(\"[9223372036854775808]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(NUMBER, reader.peek());\n    * long parsing uses Double.parseDouble() for fractional values.\n    */\n   public void testPeekLargerThanLongMinValue() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[-9223372036854775809]\"));\n+    JsonReader reader = new JsonReader(reader(\"[-9223372036854775809]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(NUMBER, reader.peek());\n    */\n   public void disabled_testHighPrecisionLong() throws IOException {\n     String json = \"[9223372036854775806.000]\";\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.beginArray();\n     assertEquals(9223372036854775806L, reader.nextLong());\n     reader.endArray();\n   }\n \n   public void testPeekMuchLargerThanLongMinValue() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[-92233720368547758080]\"));\n+    JsonReader reader = new JsonReader(reader(\"[-92233720368547758080]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(NUMBER, reader.peek());\n   }\n \n   public void testQuotedNumberWithEscape() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[\\\"12\\u00334\\\"]\"));\n+    JsonReader reader = new JsonReader(reader(\"[\\\"12\\u00334\\\"]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(STRING, reader.peek());\n   }\n \n   public void testMixedCaseLiterals() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[True,TruE,False,FALSE,NULL,nulL]\"));\n+    JsonReader reader = new JsonReader(reader(\"[True,TruE,False,FALSE,NULL,nulL]\"));\n     reader.beginArray();\n     assertEquals(true, reader.nextBoolean());\n     assertEquals(true, reader.nextBoolean());\n   }\n \n   public void testMissingValue() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":}\"));\n+    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":}\"));\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n     try {\n   }\n \n   public void testPrematureEndOfInput() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":true,\"));\n+    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true,\"));\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n     assertEquals(true, reader.nextBoolean());\n \n   public void testPrematurelyClosed() throws IOException {\n     try {\n-      JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":[]}\"));\n+      JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":[]}\"));\n       reader.beginObject();\n       reader.close();\n       reader.nextName();\n     }\n \n     try {\n-      JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":[]}\"));\n+      JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":[]}\"));\n       reader.close();\n       reader.beginObject();\n       fail();\n     }\n \n     try {\n-      JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":true}\"));\n+      JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true}\"));\n       reader.beginObject();\n       reader.nextName();\n       reader.peek();\n   }\n \n   public void testNextFailuresDoNotAdvance() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":true}\"));\n+    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true}\"));\n     reader.beginObject();\n     try {\n       reader.nextString();\n   }\n \n   public void testIntegerMismatchFailuresDoNotAdvance() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[1.5]\"));\n+    JsonReader reader = new JsonReader(reader(\"[1.5]\"));\n     reader.beginArray();\n     try {\n       reader.nextInt();\n   }\n \n   public void testStringNullIsNotNull() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[\\\"null\\\"]\"));\n+    JsonReader reader = new JsonReader(reader(\"[\\\"null\\\"]\"));\n     reader.beginArray();\n     try {\n       reader.nextNull();\n   }\n \n   public void testNullLiteralIsNotAString() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[null]\"));\n+    JsonReader reader = new JsonReader(reader(\"[null]\"));\n     reader.beginArray();\n     try {\n       reader.nextString();\n   }\n \n   public void testStrictNameValueSeparator() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\"=true}\"));\n+    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\"=true}\"));\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n     try {\n     } catch (IOException expected) {\n     }\n \n-    reader = new JsonReader(new StringReader(\"{\\\"a\\\"=>true}\"));\n+    reader = new JsonReader(reader(\"{\\\"a\\\"=>true}\"));\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n     try {\n   }\n \n   public void testLenientNameValueSeparator() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\"=true}\"));\n-    reader.setLenient(true);\n-    reader.beginObject();\n-    assertEquals(\"a\", reader.nextName());\n-    assertEquals(true, reader.nextBoolean());\n-\n-    reader = new JsonReader(new StringReader(\"{\\\"a\\\"=>true}\"));\n+    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\"=true}\"));\n+    reader.setLenient(true);\n+    reader.beginObject();\n+    assertEquals(\"a\", reader.nextName());\n+    assertEquals(true, reader.nextBoolean());\n+\n+    reader = new JsonReader(reader(\"{\\\"a\\\"=>true}\"));\n     reader.setLenient(true);\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n   }\n \n   public void testStrictNameValueSeparatorWithSkipValue() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\"=true}\"));\n-    reader.beginObject();\n-    assertEquals(\"a\", reader.nextName());\n-    try {\n-      reader.skipValue();\n-      fail();\n-    } catch (IOException expected) {\n-    }\n-\n-    reader = new JsonReader(new StringReader(\"{\\\"a\\\"=>true}\"));\n+    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\"=true}\"));\n+    reader.beginObject();\n+    assertEquals(\"a\", reader.nextName());\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+\n+    reader = new JsonReader(reader(\"{\\\"a\\\"=>true}\"));\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n     try {\n   }\n \n   public void testStrictComments() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[// comment \\n true]\"));\n+    JsonReader reader = new JsonReader(reader(\"[// comment \\n true]\"));\n     reader.beginArray();\n     try {\n       reader.nextBoolean();\n     } catch (IOException expected) {\n     }\n \n-    reader = new JsonReader(new StringReader(\"[# comment \\n true]\"));\n+    reader = new JsonReader(reader(\"[# comment \\n true]\"));\n     reader.beginArray();\n     try {\n       reader.nextBoolean();\n     } catch (IOException expected) {\n     }\n \n-    reader = new JsonReader(new StringReader(\"[/* comment */ true]\"));\n+    reader = new JsonReader(reader(\"[/* comment */ true]\"));\n     reader.beginArray();\n     try {\n       reader.nextBoolean();\n   }\n \n   public void testLenientComments() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[// comment \\n true]\"));\n-    reader.setLenient(true);\n-    reader.beginArray();\n-    assertEquals(true, reader.nextBoolean());\n-\n-    reader = new JsonReader(new StringReader(\"[# comment \\n true]\"));\n-    reader.setLenient(true);\n-    reader.beginArray();\n-    assertEquals(true, reader.nextBoolean());\n-\n-    reader = new JsonReader(new StringReader(\"[/* comment */ true]\"));\n+    JsonReader reader = new JsonReader(reader(\"[// comment \\n true]\"));\n+    reader.setLenient(true);\n+    reader.beginArray();\n+    assertEquals(true, reader.nextBoolean());\n+\n+    reader = new JsonReader(reader(\"[# comment \\n true]\"));\n+    reader.setLenient(true);\n+    reader.beginArray();\n+    assertEquals(true, reader.nextBoolean());\n+\n+    reader = new JsonReader(reader(\"[/* comment */ true]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(true, reader.nextBoolean());\n   }\n \n   public void testStrictCommentsWithSkipValue() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[// comment \\n true]\"));\n-    reader.beginArray();\n-    try {\n-      reader.skipValue();\n-      fail();\n-    } catch (IOException expected) {\n-    }\n-\n-    reader = new JsonReader(new StringReader(\"[# comment \\n true]\"));\n-    reader.beginArray();\n-    try {\n-      reader.skipValue();\n-      fail();\n-    } catch (IOException expected) {\n-    }\n-\n-    reader = new JsonReader(new StringReader(\"[/* comment */ true]\"));\n+    JsonReader reader = new JsonReader(reader(\"[// comment \\n true]\"));\n+    reader.beginArray();\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+\n+    reader = new JsonReader(reader(\"[# comment \\n true]\"));\n+    reader.beginArray();\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+\n+    reader = new JsonReader(reader(\"[/* comment */ true]\"));\n     reader.beginArray();\n     try {\n       reader.skipValue();\n   }\n \n   public void testStrictUnquotedNames() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{a:true}\"));\n+    JsonReader reader = new JsonReader(reader(\"{a:true}\"));\n     reader.beginObject();\n     try {\n       reader.nextName();\n   }\n \n   public void testLenientUnquotedNames() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{a:true}\"));\n+    JsonReader reader = new JsonReader(reader(\"{a:true}\"));\n     reader.setLenient(true);\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n   }\n \n   public void testStrictUnquotedNamesWithSkipValue() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{a:true}\"));\n+    JsonReader reader = new JsonReader(reader(\"{a:true}\"));\n     reader.beginObject();\n     try {\n       reader.skipValue();\n   }\n \n   public void testStrictSingleQuotedNames() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{'a':true}\"));\n+    JsonReader reader = new JsonReader(reader(\"{'a':true}\"));\n     reader.beginObject();\n     try {\n       reader.nextName();\n   }\n \n   public void testLenientSingleQuotedNames() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{'a':true}\"));\n+    JsonReader reader = new JsonReader(reader(\"{'a':true}\"));\n     reader.setLenient(true);\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n   }\n \n   public void testStrictSingleQuotedNamesWithSkipValue() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{'a':true}\"));\n+    JsonReader reader = new JsonReader(reader(\"{'a':true}\"));\n     reader.beginObject();\n     try {\n       reader.skipValue();\n   }\n \n   public void testStrictUnquotedStrings() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[a]\"));\n+    JsonReader reader = new JsonReader(reader(\"[a]\"));\n     reader.beginArray();\n     try {\n       reader.nextString();\n   }\n \n   public void testStrictUnquotedStringsWithSkipValue() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[a]\"));\n+    JsonReader reader = new JsonReader(reader(\"[a]\"));\n     reader.beginArray();\n     try {\n       reader.skipValue();\n   }\n \n   public void testLenientUnquotedStrings() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[a]\"));\n+    JsonReader reader = new JsonReader(reader(\"[a]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(\"a\", reader.nextString());\n   }\n \n   public void testStrictSingleQuotedStrings() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"['a']\"));\n+    JsonReader reader = new JsonReader(reader(\"['a']\"));\n     reader.beginArray();\n     try {\n       reader.nextString();\n   }\n \n   public void testLenientSingleQuotedStrings() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"['a']\"));\n+    JsonReader reader = new JsonReader(reader(\"['a']\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(\"a\", reader.nextString());\n   }\n \n   public void testStrictSingleQuotedStringsWithSkipValue() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"['a']\"));\n+    JsonReader reader = new JsonReader(reader(\"['a']\"));\n     reader.beginArray();\n     try {\n       reader.skipValue();\n   }\n \n   public void testStrictSemicolonDelimitedArray() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[true;true]\"));\n+    JsonReader reader = new JsonReader(reader(\"[true;true]\"));\n     reader.beginArray();\n     try {\n       reader.nextBoolean();\n   }\n \n   public void testLenientSemicolonDelimitedArray() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[true;true]\"));\n+    JsonReader reader = new JsonReader(reader(\"[true;true]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(true, reader.nextBoolean());\n   }\n \n   public void testStrictSemicolonDelimitedArrayWithSkipValue() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[true;true]\"));\n+    JsonReader reader = new JsonReader(reader(\"[true;true]\"));\n     reader.beginArray();\n     try {\n       reader.skipValue();\n   }\n \n   public void testStrictSemicolonDelimitedNameValuePair() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\n+    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n     try {\n   }\n \n   public void testLenientSemicolonDelimitedNameValuePair() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\n+    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\n     reader.setLenient(true);\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n   }\n \n   public void testStrictSemicolonDelimitedNameValuePairWithSkipValue() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\n+    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n     try {\n   }\n \n   public void testStrictUnnecessaryArraySeparators() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[true,,true]\"));\n+    JsonReader reader = new JsonReader(reader(\"[true,,true]\"));\n     reader.beginArray();\n     assertEquals(true, reader.nextBoolean());\n     try {\n     } catch (IOException expected) {\n     }\n \n-    reader = new JsonReader(new StringReader(\"[,true]\"));\n+    reader = new JsonReader(reader(\"[,true]\"));\n     reader.beginArray();\n     try {\n       reader.nextNull();\n     } catch (IOException expected) {\n     }\n \n-    reader = new JsonReader(new StringReader(\"[true,]\"));\n+    reader = new JsonReader(reader(\"[true,]\"));\n     reader.beginArray();\n     assertEquals(true, reader.nextBoolean());\n     try {\n     } catch (IOException expected) {\n     }\n \n-    reader = new JsonReader(new StringReader(\"[,]\"));\n+    reader = new JsonReader(reader(\"[,]\"));\n     reader.beginArray();\n     try {\n       reader.nextNull();\n   }\n \n   public void testLenientUnnecessaryArraySeparators() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[true,,true]\"));\n+    JsonReader reader = new JsonReader(reader(\"[true,,true]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(true, reader.nextBoolean());\n     assertEquals(true, reader.nextBoolean());\n     reader.endArray();\n \n-    reader = new JsonReader(new StringReader(\"[,true]\"));\n+    reader = new JsonReader(reader(\"[,true]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     reader.nextNull();\n     assertEquals(true, reader.nextBoolean());\n     reader.endArray();\n \n-    reader = new JsonReader(new StringReader(\"[true,]\"));\n+    reader = new JsonReader(reader(\"[true,]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(true, reader.nextBoolean());\n     reader.nextNull();\n     reader.endArray();\n \n-    reader = new JsonReader(new StringReader(\"[,]\"));\n+    reader = new JsonReader(reader(\"[,]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     reader.nextNull();\n   }\n \n   public void testStrictUnnecessaryArraySeparatorsWithSkipValue() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[true,,true]\"));\n-    reader.beginArray();\n-    assertEquals(true, reader.nextBoolean());\n-    try {\n-      reader.skipValue();\n-      fail();\n-    } catch (IOException expected) {\n-    }\n-\n-    reader = new JsonReader(new StringReader(\"[,true]\"));\n-    reader.beginArray();\n-    try {\n-      reader.skipValue();\n-      fail();\n-    } catch (IOException expected) {\n-    }\n-\n-    reader = new JsonReader(new StringReader(\"[true,]\"));\n-    reader.beginArray();\n-    assertEquals(true, reader.nextBoolean());\n-    try {\n-      reader.skipValue();\n-      fail();\n-    } catch (IOException expected) {\n-    }\n-\n-    reader = new JsonReader(new StringReader(\"[,]\"));\n+    JsonReader reader = new JsonReader(reader(\"[true,,true]\"));\n+    reader.beginArray();\n+    assertEquals(true, reader.nextBoolean());\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+\n+    reader = new JsonReader(reader(\"[,true]\"));\n+    reader.beginArray();\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+\n+    reader = new JsonReader(reader(\"[true,]\"));\n+    reader.beginArray();\n+    assertEquals(true, reader.nextBoolean());\n+    try {\n+      reader.skipValue();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+\n+    reader = new JsonReader(reader(\"[,]\"));\n     reader.beginArray();\n     try {\n       reader.skipValue();\n   }\n \n   public void testStrictMultipleTopLevelValues() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[] []\"));\n+    JsonReader reader = new JsonReader(reader(\"[] []\"));\n     reader.beginArray();\n     reader.endArray();\n     try {\n   }\n \n   public void testLenientMultipleTopLevelValues() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[] true {}\"));\n+    JsonReader reader = new JsonReader(reader(\"[] true {}\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     reader.endArray();\n   }\n \n   public void testStrictMultipleTopLevelValuesWithSkipValue() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[] []\"));\n+    JsonReader reader = new JsonReader(reader(\"[] []\"));\n     reader.beginArray();\n     reader.endArray();\n     try {\n   }\n \n   public void testStrictTopLevelString() {\n-    JsonReader reader = new JsonReader(new StringReader(\"\\\"a\\\"\"));\n+    JsonReader reader = new JsonReader(reader(\"\\\"a\\\"\"));\n     try {\n       reader.nextString();\n       fail();\n   }\n \n   public void testLenientTopLevelString() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"\\\"a\\\"\"));\n+    JsonReader reader = new JsonReader(reader(\"\\\"a\\\"\"));\n     reader.setLenient(true);\n     assertEquals(\"a\", reader.nextString());\n     assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n   }\n \n   public void testStrictTopLevelValueType() {\n-    JsonReader reader = new JsonReader(new StringReader(\"true\"));\n+    JsonReader reader = new JsonReader(reader(\"true\"));\n     try {\n       reader.nextBoolean();\n       fail();\n   }\n \n   public void testLenientTopLevelValueType() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"true\"));\n+    JsonReader reader = new JsonReader(reader(\"true\"));\n     reader.setLenient(true);\n     assertEquals(true, reader.nextBoolean());\n   }\n \n   public void testStrictTopLevelValueTypeWithSkipValue() {\n-    JsonReader reader = new JsonReader(new StringReader(\"true\"));\n+    JsonReader reader = new JsonReader(reader(\"true\"));\n     try {\n       reader.skipValue();\n       fail();\n   }\n \n   public void testStrictNonExecutePrefix() {\n-    JsonReader reader = new JsonReader(new StringReader(\")]}'\\n []\"));\n+    JsonReader reader = new JsonReader(reader(\")]}'\\n []\"));\n     try {\n       reader.beginArray();\n       fail();\n   }\n \n   public void testStrictNonExecutePrefixWithSkipValue() {\n-    JsonReader reader = new JsonReader(new StringReader(\")]}'\\n []\"));\n+    JsonReader reader = new JsonReader(reader(\")]}'\\n []\"));\n     try {\n       reader.skipValue();\n       fail();\n   }\n \n   public void testLenientNonExecutePrefix() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\")]}'\\n []\"));\n+    JsonReader reader = new JsonReader(reader(\")]}'\\n []\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     reader.endArray();\n   }\n \n   public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"\\r\\n \\t)]}'\\n []\"));\n+    JsonReader reader = new JsonReader(reader(\"\\r\\n \\t)]}'\\n []\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     reader.endArray();\n   }\n \n   public void testLenientPartialNonExecutePrefix() {\n-    JsonReader reader = new JsonReader(new StringReader(\")]}' []\"));\n+    JsonReader reader = new JsonReader(reader(\")]}' []\"));\n     reader.setLenient(true);\n     try {\n       assertEquals(\")\", reader.nextString());\n   }\n \n   public void testBomIgnoredAsFirstCharacterOfDocument() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"\\ufeff[]\"));\n+    JsonReader reader = new JsonReader(reader(\"\\ufeff[]\"));\n     reader.beginArray();\n     reader.endArray();\n   }\n \n   public void testBomForbiddenAsOtherCharacterInDocument() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[\\ufeff]\"));\n+    JsonReader reader = new JsonReader(reader(\"[\\ufeff]\"));\n     reader.beginArray();\n     try {\n       reader.endArray();\n \n   public void disabled_testVeryLongNumber() throws IOException {\n     // TODO: this is a completely broken case that needs to be fixed!\n-    JsonReader reader = new JsonReader(new StringReader(\"[0.\" + repeat('9', 8192) + \"]\"));\n+    JsonReader reader = new JsonReader(reader(\"[0.\" + repeat('9', 8192) + \"]\"));\n     reader.beginArray();\n     assertEquals(1d, reader.nextDouble());\n     reader.endArray();\n \n   public void testVeryLongUnquotedLiteral() throws IOException {\n     String literal = \"a\" + repeat('b', 8192) + \"c\";\n-    JsonReader reader = new JsonReader(new StringReader(\"[\" + literal + \"]\"));\n+    JsonReader reader = new JsonReader(reader(\"[\" + literal + \"]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(literal, reader.nextString());\n   }\n   \n   private void testFailWithPosition(String message, String json) throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.beginArray();\n     reader.nextInt();\n     try {\n   \n   public void testDeeplyNestedArrays() throws IOException {\n     // this is nested 40 levels deep; Gson is tuned for nesting is 30 levels deep or fewer\n-    JsonReader reader = new JsonReader(new StringReader(\n+    JsonReader reader = new JsonReader(reader(\n         \"[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\"));\n     for (int i = 0; i < 40; i++) {\n       reader.beginArray();\n       json = String.format(array, json);\n     }\n \n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     for (int i = 0; i < 40; i++) {\n       reader.beginObject();\n       assertEquals(\"a\", reader.nextName());\n \n   // http://code.google.com/p/google-gson/issues/detail?id=409\n   public void testStringEndingInSlash() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"/\"));\n+    JsonReader reader = new JsonReader(reader(\"/\"));\n     reader.setLenient(true);\n     try {\n       reader.peek();\n   }\n \n   public void testDocumentWithCommentEndingInSlash() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"/* foo *//\"));\n+    JsonReader reader = new JsonReader(reader(\"/* foo *//\"));\n     reader.setLenient(true);\n     try {\n       reader.peek();\n   }\n \n   public void testStringWithLeadingSlash() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"/x\"));\n+    JsonReader reader = new JsonReader(reader(\"/x\"));\n     reader.setLenient(true);\n     try {\n       reader.peek();\n   }\n \n   public void testUnterminatedObject() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":\\\"android\\\"x\"));\n+    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":\\\"android\\\"x\"));\n     reader.setLenient(true);\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n     Arrays.fill(stringChars, 'x');\n     String string = new String(stringChars);\n     String json = \"[\\\"\" + string + \"\\\"]\";\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.beginArray();\n     assertEquals(string, reader.nextString());\n     reader.endArray();\n     Arrays.fill(stringChars, 'x');\n     String string = new String(stringChars);\n     String json = \"[\" + string + \"]\";\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(string, reader.nextString());\n     Arrays.fill(stringChars, 'x');\n     String string = new String(stringChars);\n     String json = \"[\" + string;\n-    JsonReader reader = new JsonReader(new StringReader(json));\n+    JsonReader reader = new JsonReader(reader(json));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(string, reader.nextString());\n   }\n \n   public void testSkipVeryLongUnquotedString() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[\" + repeat('x', 8192) + \"]\"));\n+    JsonReader reader = new JsonReader(reader(\"[\" + repeat('x', 8192) + \"]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     reader.skipValue();\n   }\n \n   public void testSkipTopLevelUnquotedString() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(repeat('x', 8192)));\n+    JsonReader reader = new JsonReader(reader(repeat('x', 8192)));\n     reader.setLenient(true);\n     reader.skipValue();\n     assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n   }\n \n   public void testSkipVeryLongQuotedString() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[\\\"\" + repeat('x', 8192) + \"\\\"]\"));\n+    JsonReader reader = new JsonReader(reader(\"[\\\"\" + repeat('x', 8192) + \"\\\"]\"));\n     reader.beginArray();\n     reader.skipValue();\n     reader.endArray();\n   }\n \n   public void testSkipTopLevelQuotedString() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"\\\"\" + repeat('x', 8192) + \"\\\"\"));\n+    JsonReader reader = new JsonReader(reader(\"\\\"\" + repeat('x', 8192) + \"\\\"\"));\n     reader.setLenient(true);\n     reader.skipValue();\n     assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n   }\n \n   public void testStringAsNumberWithTruncatedExponent() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[123e]\"));\n+    JsonReader reader = new JsonReader(reader(\"[123e]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(STRING, reader.peek());\n   }\n \n   public void testStringAsNumberWithDigitAndNonDigitExponent() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[123e4b]\"));\n+    JsonReader reader = new JsonReader(reader(\"[123e4b]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(STRING, reader.peek());\n   }\n \n   public void testStringAsNumberWithNonDigitExponent() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[123eb]\"));\n+    JsonReader reader = new JsonReader(reader(\"[123eb]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(STRING, reader.peek());\n   }\n \n   public void testEmptyStringName() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"\\\":true}\"));\n+    JsonReader reader = new JsonReader(reader(\"{\\\"\\\":true}\"));\n     reader.setLenient(true);\n     assertEquals(BEGIN_OBJECT, reader.peek());\n     reader.beginObject();\n   }\n \n   public void testStrictExtraCommasInMaps() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":\\\"b\\\",}\"));\n+    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":\\\"b\\\",}\"));\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n     assertEquals(\"b\", reader.nextString());\n   }\n \n   public void testLenientExtraCommasInMaps() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":\\\"b\\\",}\"));\n+    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":\\\"b\\\",}\"));\n     reader.setLenient(true);\n     reader.beginObject();\n     assertEquals(\"a\", reader.nextName());\n    * during peek rather than during nextString().\n    */\n   public void testUnterminatedStringFailure() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[\\\"string\"));\n+    JsonReader reader = new JsonReader(reader(\"[\\\"string\"));\n     reader.setLenient(true);\n     reader.beginArray();\n     assertEquals(JsonToken.STRING, reader.peek());\n   }\n \n   private void assertDocument(String document, Object... expectations) throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(document));\n+    JsonReader reader = new JsonReader(reader(document));\n     reader.setLenient(true);\n     for (Object expectation : expectations) {\n       if (expectation == BEGIN_OBJECT) {\n     }\n   }\n \n-  // TODO: test character-by-character reads\n+  /**\n+   * Returns a reader that returns one character at a time.\n+   */\n+  private Reader reader(final String s) {\n+    return new Reader() {\n+      int position = 0;\n+      @Override public int read(char[] buffer, int offset, int count) throws IOException {\n+        if (position == s.length()) {\n+          return -1;\n+        } else if (count > 0) {\n+          buffer[offset] = s.charAt(position++);\n+          return 1;\n+        } else {\n+          throw new IllegalArgumentException();\n+        }\n+      }\n+      @Override public void close() throws IOException {\n+      }\n+    };\n+  }\n }", "timestamp": 1346118505, "metainfo": ""}