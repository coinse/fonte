{"sha": "7da18b96e819a347eedc7c84b29645b128de3cf6", "log": "fixed issue 46 by adding toString() methods to Gson, serializers, deserializers, and instanceCreators, and default type adapters.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n         throw new JsonParseException(e);\n       }\n     }\n+    \n+    @Override\n+    public String toString() {\n+      StringBuilder sb = new StringBuilder();\n+      sb.append(DefaultDateTypeAdapter.class.getSimpleName());\n+      sb.append('(').append(format.getClass().getSimpleName()).append(')');\n+      return sb.toString();\n+    }\n   }\n \n   @SuppressWarnings(\"unchecked\")\n         throw new RuntimeException(e);\n       }\n     }\n+    @Override\n+    public String toString() {\n+      return EnumTypeAdapter.class.getSimpleName();\n+    }\n   }\n \n   private static class UrlTypeAdapter implements JsonSerializer<URL>, JsonDeserializer<URL>,\n         throw new RuntimeException(e);\n       }\n     }\n+    @Override\n+    public String toString() {\n+      return UrlTypeAdapter.class.getSimpleName();\n+    }    \n   }\n \n   private static class UriTypeAdapter implements JsonSerializer<URI>, JsonDeserializer<URI> {\n       } catch (URISyntaxException e) {\n         throw new JsonParseException(e);\n       }\n+    }\n+    @Override\n+    public String toString() {\n+      return UriTypeAdapter.class.getSimpleName();\n     }\n   }\n \n     }\n     public Locale createInstance(Type type) {\n       return new Locale(\"en_US\");\n+    }\n+    @Override\n+    public String toString() {\n+      return LocaleTypeAdapter.class.getSimpleName();\n     }\n   }\n \n     public Map createInstance(Type type) {\n       return new LinkedHashMap();\n     }\n+    @Override\n+    public String toString() {\n+      return MapTypeAdapter.class.getSimpleName();\n+    }\n   }\n \n   private static class BigDecimalTypeAdapter implements JsonSerializer<BigDecimal>,\n     public BigDecimal createInstance(Type type) {\n       return new BigDecimal(0);\n     }\n+    @Override\n+    public String toString() {\n+      return BigDecimalTypeAdapter.class.getSimpleName();\n+    }\n   }\n \n   private static class BigIntegerTypeAdapter implements JsonSerializer<BigInteger>,\n     public BigInteger createInstance(Type type) {\n       return new BigInteger(\"0\");\n     }\n+    @Override\n+    public String toString() {\n+      return BigIntegerTypeAdapter.class.getSimpleName();\n+    }\n   }\n \n   private static class LongCreator implements InstanceCreator<Long> {\n     public Long createInstance(Type type) {\n       return new Long(0L);\n     }\n+    @Override\n+    public String toString() {\n+      return LongCreator.class.getSimpleName();\n+    }\n   }\n \n   private static class IntegerCreator implements InstanceCreator<Integer> {\n     public Integer createInstance(Type type) {\n       return new Integer(0);\n     }\n+    @Override\n+    public String toString() {\n+      return IntegerCreator.class.getSimpleName();\n+    }\n   }\n \n   private static class ShortCreator implements InstanceCreator<Short> {\n     public Short createInstance(Type type) {\n       return new Short((short) 0);\n     }\n+    @Override\n+    public String toString() {\n+      return ShortCreator.class.getSimpleName();\n+    }\n   }\n \n   private static class ByteCreator implements InstanceCreator<Byte> {\n     public Byte createInstance(Type type) {\n       return new Byte((byte) 0);\n     }\n+    @Override\n+    public String toString() {\n+      return ByteCreator.class.getSimpleName();\n+    }\n   }\n \n   private static class FloatCreator implements InstanceCreator<Float> {\n     public Float createInstance(Type type) {\n       return new Float(0F);\n     }\n+    @Override\n+    public String toString() {\n+      return FloatCreator.class.getSimpleName();\n+    }\n   }\n \n   private static class DoubleCreator implements InstanceCreator<Double> {\n     public Double createInstance(Type type) {\n       return new Double(0D);\n     }\n+    @Override\n+    public String toString() {\n+      return DoubleCreator.class.getSimpleName();\n+    }\n   }\n \n   private static class CharacterCreator implements InstanceCreator<Character> {\n     public Character createInstance(Type type) {\n       return new Character((char) 0);\n     }\n+    @Override\n+    public String toString() {\n+      return CharacterCreator.class.getSimpleName();\n+    }\n   }\n \n   private static class BooleanCreator implements InstanceCreator<Boolean> {\n     public Boolean createInstance(Type type) {\n       return new Boolean(false);\n     }\n+    @Override\n+    public String toString() {\n+      return BooleanCreator.class.getSimpleName();\n+    }\n   }\n \n   private static class LinkedListCreator implements InstanceCreator<LinkedList<?>> {\n     public LinkedList<?> createInstance(Type type) {\n       return new LinkedList<Object>();\n     }\n+    @Override\n+    public String toString() {\n+      return LinkedListCreator.class.getSimpleName();\n+    }\n   }\n \n   private static class TreeSetCreator implements InstanceCreator<TreeSet<?>> {\n     public TreeSet<?> createInstance(Type type) {\n       return new TreeSet<Object>();\n     }\n+    @Override\n+    public String toString() {\n+      return TreeSetCreator.class.getSimpleName();\n+    }\n   }\n }\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n       throw new JsonParseException(e);\n     }\n   }\n+  \n+  @Override \n+  public String toString() {\n+\tStringBuilder sb = new StringBuilder(\"{\");\n+    sb.append(\"serializeNulls:\").append(serializeNulls);\n+\tsb.append(\",serializers:\").append(serializers);\n+\tsb.append(\",deserializers:\").append(deserializers);\n+\t// using the name instanceCreator instead of ObjectConstructor since the users of Gson are \n+\t// more familiar with the concept of Instance Creators. Moreover, the objectConstructor is\n+\t// just a utility class around instance creators, and its toString() only displays them.\n+    sb.append(\",instanceCreators:\").append(objectConstructor);\n+\tsb.append(\"}\");\n+\treturn sb.toString();\n+  }\n }\n--- a/gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java\n       throw new JsonParseException(errorMsg.toString(), e);\n     }\n   }\n+  \n+  @Override\n+  public String toString() {\n+    return delegate.toString();\n+  }\n }\n--- a/gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java\n       throw new JsonParseException(errorMsg.toString(), e);\n     }\n   }\n+  \n+  @Override\n+  public String toString() {\n+    return delegate.toString();\n+  }\n }\n--- a/gson/src/main/java/com/google/gson/MappedObjectConstructor.java\n+++ b/gson/src/main/java/com/google/gson/MappedObjectConstructor.java\n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Type;\n+import java.util.Map;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n     }\n     instanceCreatorMap.register(typeOfT, creator);\n   }\n+  \n+  @Override\n+  public String toString() {\n+    return instanceCreatorMap.toString();\n+  }\n }\n--- a/gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java\n+++ b/gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java\n   public synchronized Set<Map.Entry<Type, T>> entrySet() {\n     return map.entrySet();\n   }\n+  \n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder(\"{\");\n+    boolean first = true;\n+    for (Map.Entry<Type, T> entry : map.entrySet()) {\n+      if (first) {\n+        first = false;\n+      } else {\n+        sb.append(',');\n+      }\n+      sb.append(typeToString(entry.getKey())).append(':');\n+      sb.append(entry.getValue());\n+    }\n+    return sb.toString();\n+  }\n+  \n+  private String typeToString(Type type) {\n+    return TypeUtils.toRawClass(type).getSimpleName();\n+  }\n }", "timestamp": 1221589711, "metainfo": ""}