{"sha": "2d7367364b866ad468f5b71316d92fd1490d9381", "log": "Added additional functional tests involving complex protocol buffers, and protos with repeated fields. Moved all the functional tests under a functional package.", "commit": "\n--- /dev/null\n+++ b/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithComplexAndRepeatedFieldsTest.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.protobuf.functional;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.protobuf.ProtoTypeAdapter;\n+import com.google.gson.protobuf.generated.Bag.ProtoWithRepeatedFields;\n+import com.google.gson.protobuf.generated.Bag.SimpleProto;\n+import com.google.protobuf.GeneratedMessage;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Functional tests for protocol buffers using complex and repeated fields\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class ProtosWithComplexAndRepeatedFieldsTest extends TestCase {\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new GsonBuilder().registerTypeHierarchyAdapter(\n+      GeneratedMessage.class, new ProtoTypeAdapter()).create();\n+  }\n+\n+  public void testSerializeRepeatedFields() {\n+    ProtoWithRepeatedFields proto = ProtoWithRepeatedFields.newBuilder()\n+      .addNumbers(2)\n+      .addNumbers(3)\n+      .addSimples(SimpleProto.newBuilder().setMsg(\"foo\").build())\n+      .addSimples(SimpleProto.newBuilder().setCount(3).build())\n+      .build();\n+    String json = gson.toJson(proto);\n+    assertTrue(json.contains(\"[2,3]\"));\n+    assertTrue(json.contains(\"foo\"));\n+    assertTrue(json.contains(\"count\"));\n+  }\n+\n+  public void testDeserializeRepeatedFieldsProto() {\n+    String json = \"{numbers:[4,6],simples:[{msg:'bar'},{count:7}]}\";\n+    ProtoWithRepeatedFields proto =\n+      gson.fromJson(json, ProtoWithRepeatedFields.class);\n+    assertEquals(4, proto.getNumbers(0));\n+    assertEquals(6, proto.getNumbers(1));\n+    assertEquals(\"bar\", proto.getSimples(0).getMsg());\n+    assertEquals(7, proto.getSimples(1).getCount());\n+  }\n+}\n--- /dev/null\n+++ b/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.protobuf.functional;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.protobuf.ProtoTypeAdapter;\n+import com.google.gson.protobuf.generated.Bag.SimpleProto;\n+import com.google.protobuf.Descriptors.Descriptor;\n+import com.google.protobuf.GeneratedMessage;\n+\n+import junit.framework.TestCase;\n+\n+public class ProtosWithPrimitiveTypesTest extends TestCase {\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new GsonBuilder().registerTypeHierarchyAdapter(\n+      GeneratedMessage.class, new ProtoTypeAdapter()).create();\n+  }\n+\n+  public void testSerializeEmptyProto() {\n+    SimpleProto proto = SimpleProto.newBuilder().build();\n+    String json = gson.toJson(proto);\n+    assertEquals(\"{}\", json);\n+  }\n+\n+  public void testDeserializeEmptyProto() {\n+    SimpleProto proto = gson.fromJson(\"{}\", SimpleProto.class);\n+    assertFalse(proto.hasCount());\n+    assertFalse(proto.hasMsg());\n+  }\n+\n+  public void testSerializeProto() {\n+    Descriptor descriptor = SimpleProto.getDescriptor();\n+    SimpleProto proto = SimpleProto.newBuilder()\n+      .setCount(3)\n+      .setMsg(\"foo\")\n+      .build();\n+    String json = gson.toJson(proto);\n+    assertTrue(json.contains(\"\\\"msg\\\":\\\"foo\\\"\"));\n+    assertTrue(json.contains(\"\\\"count\\\":3\"));\n+  }\n+\n+  public void testDeserializeProto() {\n+    SimpleProto proto = gson.fromJson(\"{msg:'foo',count:3}\", SimpleProto.class);\n+    assertEquals(\"foo\", proto.getMsg());\n+    assertEquals(3, proto.getCount());\n+  }\n+}", "timestamp": 1288223362, "metainfo": ""}