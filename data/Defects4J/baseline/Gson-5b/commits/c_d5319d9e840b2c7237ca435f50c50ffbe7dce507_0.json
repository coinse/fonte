{"sha": "d5319d9e840b2c7237ca435f50c50ffbe7dce507", "log": "Parse all JSON numbers as either BigDecimal or BigInteger.  From there we can properly convert into the proper primitive type if need be.  This reduces the chance of losing precision with floating point numbers.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonParser.java\n+++ b/gson/src/main/java/com/google/gson/JsonParser.java\n       ;\n     }\n     Number n;\n-    if (exppart != null) {\n+    if (exppart != null || fracpart != null) {\n       fracpart = (fracpart == null) ? \"\" : fracpart;\n+      exppart = (exppart == null) ? \"\" : exppart;\n       n = new java.math.BigDecimal(intpart + fracpart + exppart);\n-    } else if (fracpart != null) {\n-      n = new Double(intpart + fracpart);\n     } else {\n-      // See if the number fits in an integer, or long\n-      // Use BigInteger only if it is big enough.\n-      if (intpart.length() < 10) {\n-        n = new Integer(intpart);\n-      } else if (intpart.length() < 19) {\n-        n = new Long(intpart);\n-      } else {\n-        n = new java.math.BigInteger(intpart);\n-      }\n+      n = new java.math.BigInteger(intpart);\n     }\n     {if (true) return new JsonPrimitive(n);}\n     throw new Error(\"Missing return statement in function\");\n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n     BigDecimal actual = gson.fromJson(\"1.55\", BigDecimal.class);\n     assertEquals(expected, actual);\n   }\n+  \n+  public void testBigDecimalPreservePrecisionSerialization() {\n+    String expectedValue = \"1.000\";\n+    BigDecimal obj = new BigDecimal(expectedValue);\n+    String actualValue = gson.toJson(obj);\n+    \n+    assertEquals(expectedValue, actualValue);\n+  }\n+  \n+  public void testBigDecimalPreservePrecisionDeserialization() {\n+    String json = \"1.000\";\n+    BigDecimal expected = new BigDecimal(json);\n+    BigDecimal actual = gson.fromJson(json, BigDecimal.class);\n+    \n+    assertEquals(expected, actual);\n+  }\n \n   public void testBigDecimalAsStringRepresentationDeserialization() {\n     String doubleValue = \"0.05E+5\";", "timestamp": 1227039975, "metainfo": ""}