{"sha": "6f59bc3bfea8ccdff1bfd0640351241ccf4100ff", "log": "Added \"Until\" type version.  This new annotation allows you to remove members from the JSON output beginning at a certain version number.  This new annotation work in conjunction with the \"@Since\" annotation.", "commit": "\n--- a/gson/src/main/java/com/google/gson/VersionExclusionStrategy.java\n+++ b/gson/src/main/java/com/google/gson/VersionExclusionStrategy.java\n package com.google.gson;\n \n import com.google.gson.annotations.Since;\n+import com.google.gson.annotations.Until;\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n \n   private boolean isValidVersion(Annotation[] annotations) {\n     for (Annotation annotation : annotations) {\n-      if (annotation instanceof Since) {\n-        double annotationVersion = ((Since) annotation).value();\n-        if (annotationVersion > version) {\n-          return false;\n-        }\n+      if (!isValidSince(annotation) || !isValidUntil(annotation)) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+  \n+  private boolean isValidSince(Annotation annotation) {\n+    if (annotation instanceof Since) {\n+      double annotationVersion = ((Since) annotation).value();\n+      if (annotationVersion > version) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+  \n+  private boolean isValidUntil(Annotation annotation) {\n+    if (annotation instanceof Until) {\n+      double annotationVersion = ((Until) annotation).value();\n+      if (annotationVersion <= version) {\n+        return false;\n       }\n     }\n     return true;\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/annotations/Until.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.annotations;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * An annotation that indicates the version number until a member or a type should be present.\n+ * Basically, if Gson is created with a version number that exceeds the value stored in the\n+ * {@code Until} annotation then the field will be ignored from the JSON output.  This annotation\n+ * is useful to manage versioning of your JSON classes for a web-service.\n+ *\n+ * <p>\n+ * This annotation has no effect unless you build {@link com.google.gson.Gson} with a\n+ * {@link com.google.gson.GsonBuilder} and invoke\n+ * {@link com.google.gson.GsonBuilder#setVersion(double)} method.\n+ *\n+ * <p>Here is an example of how this annotation is meant to be used:</p>\n+ * <pre>\n+ * public class User {\n+ *   private String firstName;\n+ *   private String lastName;\n+ *   &#64Until(1.1) private String emailAddress;\n+ *   &#64Until(1.1) private String password;\n+ * }\n+ * </pre>\n+ *\n+ * <p>If you created Gson with {@code new Gson()}, the {@code toJson()} and {@code fromJson()}\n+ * methods will use all the fields for serialization and deserialization. However, if you created\n+ * Gson with {@code Gson gson = new GsonBuilder().setVersion(1.2).create()} the the\n+ * {@code toJson()} and {@code fromJson()} methods of Gson will exclude the {@code emailAddress}\n+ * and {@code password} fields because the version number passed to the GsonBuilder, {@code 1.2},\n+ * exceeds the version number set on the {@code Until} annotation for those fields.\n+ *\n+ * @author Joel Leitch\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.FIELD, ElementType.TYPE})\n+public @interface Until {\n+\n+  /**\n+   * the value indicating a version number until this member\n+   * or type should be ignored.\n+   */\n+  double value();\n+}\n--- a/gson/src/test/java/com/google/gson/functional/VersioningTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/VersioningTest.java\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.annotations.Since;\n+import com.google.gson.annotations.Until;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n \n import junit.framework.TestCase;\n   protected void setUp() throws Exception {\n     super.setUp();\n     builder = new GsonBuilder();\n+  }\n+\n+  public void testVersionedUntilSerialization() {\n+    Version1 target = new Version1();\n+    Gson gson = builder.setVersion(1.29).create();\n+    String json = gson.toJson(target);\n+    assertTrue(json.contains(\"\\\"a\\\":\" + A));\n+    \n+    gson = builder.setVersion(1.3).create();\n+    json = gson.toJson(target);\n+    assertFalse(json.contains(\"\\\"a\\\":\" + A));\n   }\n \n   public void testVersionedClassesSerialization() {\n   }\n \n   private static class Version1 {\n-    int a = A;\n+    @Until(1.3) int a = A;\n     @Since(1.0) int b = B;\n   }\n ", "timestamp": 1228090204, "metainfo": ""}