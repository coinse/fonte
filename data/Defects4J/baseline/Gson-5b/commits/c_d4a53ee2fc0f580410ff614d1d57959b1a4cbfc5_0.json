{"sha": "d4a53ee2fc0f580410ff614d1d57959b1a4cbfc5", "log": "Added tests to verify JsonParser and related methods in Gson.", "commit": "\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/JsonParserTest.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.common.TestTypes.BagOfPrimitives;\n+\n+import junit.framework.TestCase;\n+\n+import java.io.StringReader;\n+\n+/**\n+ * Functional tests for that use JsonParser and related Gson methods\n+ *\n+ * @author Inderjeet Singh\n+ * @author Joel Leitch\n+ */\n+public class JsonParserTest extends TestCase {\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new Gson();\n+  }\n+  \n+  public void testDeserializingCustomTree() {\n+    JsonObject obj = new JsonObject();\n+    obj.addProperty(\"stringValue\", \"foo\");\n+    obj.addProperty(\"intValue\", 11);\n+    BagOfPrimitives target = gson.fromJson(obj, BagOfPrimitives.class);\n+    assertEquals(11, target.intValue);\n+    assertEquals(\"foo\", target.stringValue);\n+  }\n+\n+  public void testChangingCustomTreeAndDeserializing() {\n+    StringReader json = \n+      new StringReader(\"{'stringValue':'no message','intValue':10,'longValue':20}\");\n+    JsonObject obj = (JsonObject) JsonParser.parse(json);\n+    obj.remove(\"stringValue\");\n+    obj.addProperty(\"stringValue\", \"fooBar\");\n+    BagOfPrimitives target = gson.fromJson(obj, BagOfPrimitives.class);\n+    assertEquals(10, target.intValue);\n+    assertEquals(20, target.longValue);\n+    assertEquals(\"fooBar\", target.stringValue);\n+  }\n+}", "timestamp": 1233966030, "metainfo": ""}