{"sha": "296d843afd575a75d7959474aad76ac05afa0706", "log": "Implement Inder's improvements on the TypeAdapter docs", "commit": "\n--- a/gson/src/main/java/com/google/gson/TypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/TypeAdapter.java\n import com.google.gson.stream.JsonWriter;\n \n /**\n- * Converts between Java objects and JSON. Applications use type adapters both\n- * for customizing types' JSON forms, and for JSON conversions.\n+ * Converts Java objects to and from JSON.\n  *\n  * <h3>Defining a type's JSON form</h3>\n  * By default Gson converts application classes to JSON using its built-in type\n- * adapters. Change your Java objects' JSON representation by subclassing {@code\n- * TypeAdapter} and registering the subclass with a {@code GsonBuilder}. Here's\n- * an example of a type adapter for an (X,Y) coordinate point: <pre>   {@code\n+ * adapters. If Gson's default JSON conversion isn't appropriate for a type,\n+ * extend this class to customize the conversion. Here's an example of a type\n+ * adapter for an (X,Y) coordinate point: <pre>   {@code\n  *\n  *   public class PointAdapter extends TypeAdapter<Point> {\n  *     public Point read(JsonReader reader) throws IOException {\n  * <p>The {@link #read(JsonReader) read()} method must read exactly one value\n  * and {@link #write(JsonWriter,Object) write()} must write exactly one value.\n  * For primitive types this is means readers should make exactly one call to\n- * <code>next<i>Type</i>()</code> and writers should make exactly one call to\n- * one of <code>value()</code> or <code>nullValue()</code>. For composite types,\n- * type adapters should start with a call to <code>begin<i>Type</i>()</code>,\n- * convert the entire contents of the object or array, and finish with a call\n- * to <code>end<i>Type</i>()</code>. Failing to convert a value or converting\n- * too many values will disrupt the cadence of the caller and may cause the\n- * application to crash.\n+ * {@code nextBoolean()}, {@code nextDouble()}, {@code nextInt()}, {@code\n+ * nextLong()}, {@code nextString()} or {@code nextNull()}. Writers should make\n+ * exactly one call to one of <code>value()</code> or <code>nullValue()</code>.\n+ * For arrays, type adapters should start with a call to {@code beginArray()},\n+ * convert all elements, and finish with a call to {@code endArray}. For\n+ * objects, they should start with {@code beginObject()}, convert the object,\n+ * and finish with {@code endObject()}. Failing to convert a value or converting\n+ * too many values may cause the application to crash.\n  *\n  * <p>Type adapters should be prepared to read null from the stream and write it\n  * to the stream. If your {@code Gson} instance has been configured to {@link", "timestamp": 1323147406, "metainfo": ""}