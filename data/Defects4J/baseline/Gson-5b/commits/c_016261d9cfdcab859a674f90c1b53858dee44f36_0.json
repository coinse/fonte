{"sha": "016261d9cfdcab859a674f90c1b53858dee44f36", "log": "Throw JsonParseException in event of binding failures like type mismatches.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n       T target = (T) fromJson(reader, typeOfT);\n       return target;\n     } catch (IllegalStateException e) {\n-      // TODO(inder): Figure out whether it is indeed right to rethrow this as JsonSyntaxException\n       throw new JsonSyntaxException(e);\n     }\n   }\n         return null;\n       }\n       throw new JsonSyntaxException(e);\n+    } catch (IllegalStateException e) {\n+      throw new JsonSyntaxException(e);\n     } catch (IOException e) {\n       // TODO(inder): Figure out whether it is indeed right to rethrow this as JsonSyntaxException\n       throw new JsonSyntaxException(e);\n--- a/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonStreamParser;\n+import com.google.gson.JsonSyntaxException;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n \n+import com.google.gson.reflect.TypeToken;\n+import java.util.Map;\n import junit.framework.TestCase;\n \n import java.io.CharArrayReader;\n     assertEquals(\"two\", actualTwo.stringValue);\n     assertFalse(parser.hasNext());\n   }\n+\n+  public void testTypeMismatchThrowsJsonSyntaxExceptionForStrings() {\n+    try {\n+      gson.fromJson(\"true\", new TypeToken<Map<String, String>>() {}.getType());\n+      fail();\n+    } catch (JsonSyntaxException expected) {\n+    }\n+  }\n+\n+  public void testTypeMismatchThrowsJsonSyntaxExceptionForReaders() {\n+    try {\n+      gson.fromJson(new StringReader(\"true\"), new TypeToken<Map<String, String>>() {}.getType());\n+      fail();\n+    } catch (JsonSyntaxException expected) {\n+    }\n+  }\n }", "timestamp": 1319419966, "metainfo": ""}