{"sha": "8e570ee3a2b5dc637c0fd270e09f67e72de35f83", "log": "Merge pull request #667 from adamtanner/json-writer-opaque-value  JsonWriter#value supports opaque JSON values.", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonWriter.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonWriter.java\n   }\n \n   /**\n+   * Writes {@code value} directly to the writer without quoting or\n+   * escaping.\n+   *\n+   * @param value the literal string value, or null to encode a null literal.\n+   * @return this writer.\n+   */\n+  public JsonWriter jsonValue(String value) throws IOException {\n+    if (value == null) {\n+      return nullValue();\n+    }\n+    writeDeferredName();\n+    beforeValue(false);\n+    out.append(value);\n+    return this;\n+  }\n+\n+  /**\n    * Encodes {@code null}.\n    *\n    * @return this writer.\n--- a/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java\n     jsonWriter.value((String) null);\n     jsonWriter.endObject();\n     assertEquals(\"{\\\"a\\\":null}\", stringWriter.toString());\n+  }\n+\n+  public void testJsonValue() throws IOException {\n+    StringWriter stringWriter = new StringWriter();\n+    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+    jsonWriter.beginObject();\n+    jsonWriter.name(\"a\");\n+    jsonWriter.jsonValue(\"{\\\"b\\\":true}\");\n+    jsonWriter.name(\"c\");\n+    jsonWriter.value(1);\n+    jsonWriter.endObject();\n+    assertEquals(\"{\\\"a\\\":{\\\"b\\\":true},\\\"c\\\":1}\", stringWriter.toString());\n   }\n \n   public void testNonFiniteDoubles() throws IOException {", "timestamp": 1437416483, "metainfo": ""}