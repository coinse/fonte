{"sha": "628a2c5b866429286e6c82232d4f7edab7f0caee", "log": "Added default serializer/deserializer for \"Number\"", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n   private static final FloatTypeAdapter FLOAT_TYPE_ADAPTER = new FloatTypeAdapter();\n   private static final IntegerTypeAdapter INTEGER_TYPE_ADAPTER = new IntegerTypeAdapter();\n   private static final LongTypeAdapter LONG_TYPE_ADAPTER = new LongTypeAdapter();\n+  private static final NumberTypeAdapter NUMBER_TYPE_ADAPTER = new NumberTypeAdapter();\n   private static final ShortTypeAdapter SHORT_TYPE_ADAPTER = new ShortTypeAdapter();\n   private static final StringTypeAdapter STRING_TYPE_ADAPTER = new StringTypeAdapter();\n \n     map.register(int.class, INTEGER_TYPE_ADAPTER);\n     map.register(Long.class, LONG_TYPE_ADAPTER);\n     map.register(long.class, LONG_TYPE_ADAPTER);\n+    map.register(Number.class, NUMBER_TYPE_ADAPTER);\n     map.register(Short.class, SHORT_TYPE_ADAPTER);\n     map.register(short.class, SHORT_TYPE_ADAPTER);\n     map.register(String.class, STRING_TYPE_ADAPTER);\n     map.register(int.class, wrapDeserializer(INTEGER_TYPE_ADAPTER));\n     map.register(Long.class, wrapDeserializer(LONG_TYPE_ADAPTER));\n     map.register(long.class, wrapDeserializer(LONG_TYPE_ADAPTER));\n+    map.register(Number.class, wrapDeserializer(NUMBER_TYPE_ADAPTER));\n     map.register(Short.class, wrapDeserializer(SHORT_TYPE_ADAPTER));\n     map.register(short.class, wrapDeserializer(SHORT_TYPE_ADAPTER));\n     map.register(String.class, wrapDeserializer(STRING_TYPE_ADAPTER));\n       return BigIntegerTypeAdapter.class.getSimpleName();\n     }\n   }\n+  \n+  private static class NumberTypeAdapter\n+      implements JsonSerializer<Number>, JsonDeserializer<Number> {\n+    public JsonElement serialize(Number src, Type typeOfSrc, JsonSerializationContext context) {\n+      return new JsonPrimitive(src);\n+    }\n+    \n+    public Number deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+        throws JsonParseException {\n+      return json.getAsNumber();\n+    }\n+    \n+    @Override\n+    public String toString() {\n+      return LongTypeAdapter.class.getSimpleName();\n+    }\n+  }\n \n   private static class LongTypeAdapter\n       implements InstanceCreator<Long>, JsonSerializer<Long>, JsonDeserializer<Long> {\n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n     value = gson.fromJson(\"[true]\", boolean.class);\n     assertEquals(true, value);\n   }\n+  \n+  public void testNumberSerialization() {\n+    Number expected = 1L;\n+    String json = gson.toJson(expected);\n+    assertEquals(expected.toString(), json);\n+    \n+    json = gson.toJson(expected, Number.class);\n+    assertEquals(expected.toString(), json);\n+  }\n+  \n+  public void testNumberDeserialization() {\n+    String json = \"1\";\n+    Number expected = new Integer(json);\n+    Number actual = gson.fromJson(json, Number.class);\n+    assertEquals(expected.intValue(), actual.intValue());\n+    \n+    json = String.valueOf(Long.MAX_VALUE);\n+    expected = new Long(json);\n+    actual = gson.fromJson(json, Number.class);\n+    assertEquals(expected.longValue(), actual.longValue());\n+  }\n \n   public void testPrimitiveDoubleAutoboxedSerialization() {\n     assertEquals(\"-122.08234335\", gson.toJson(-122.08234335));", "timestamp": 1227038702, "metainfo": ""}