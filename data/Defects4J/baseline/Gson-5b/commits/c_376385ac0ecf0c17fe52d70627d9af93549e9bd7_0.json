{"sha": "376385ac0ecf0c17fe52d70627d9af93549e9bd7", "log": "Add a single quote to the HTML set of characters that should be escaped.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Escaper.java\n+++ b/gson/src/main/java/com/google/gson/Escaper.java\n     htmlEscapeSet.add('>');\n     htmlEscapeSet.add('&');\n     htmlEscapeSet.add('=');\n+    htmlEscapeSet.add('\\'');\n  //   htmlEscapeSet.add('/');  -- Removing slash for now since it causes some incompatibilities\n     HTML_ESCAPE_CHARS = Collections.unmodifiableSet(htmlEscapeSet);\n   }\n          case '\"':\n            out.append('\\\\').append((char) codePoint);\n            break;\n+         case '\\'':\n+           out.append('\\\\').append((char) codePoint);\n+           break;\n          default:\n            appendHexJavaScriptRepresentation(codePoint, out);\n            break;\n \n   private static boolean isControlCharacter(int codePoint) {\n     // JSON spec defines these code points as control characters, so they must be escaped\n-    return codePoint < 0x20 \n+    return codePoint < 0x20\n         || codePoint == 0x2028  // Line separator\n         || codePoint == 0x2029  // Paragraph separator\n         || (codePoint >= 0x7f && codePoint <= 0x9f);\n--- a/gson/src/test/java/com/google/gson/EscaperTest.java\n+++ b/gson/src/test/java/com/google/gson/EscaperTest.java\n     assertEquals(\"123\\\\t456\", escapedString);\n   }\n \n-  public void testQuoteEscaping() throws Exception {\n+  public void testDoubleQuoteEscaping() throws Exception {\n     String containsQuote = \"123\\\"456\";\n     String escapedString = escapeHtmlChar.escapeJsonString(containsQuote);\n     assertEquals(\"123\\\\\\\"456\", escapedString);\n+  }\n+  \n+  public void testSingleQuoteEscaping() throws Exception {\n+    String containsQuote = \"123'456\";\n+    String escapedString = escapeHtmlChar.escapeJsonString(containsQuote);\n+    assertEquals(\"123\\\\'456\", escapedString);\n   }\n \n   public void testLineSeparatorEscaping() throws Exception {\n \n   public void testSingleQuoteNotEscaped() throws Exception {\n     String containsSingleQuote = \"123'456\";\n-    String escapedString = escapeHtmlChar.escapeJsonString(containsSingleQuote);\n+    String escapedString = noEscapeHtmlChar.escapeJsonString(containsSingleQuote);\n     assertEquals(containsSingleQuote, escapedString);\n   }\n \n--- a/gson/src/test/java/com/google/gson/functional/EscapingTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/EscapingTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.google.gson.functional;\n \n import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n \n import junit.framework.TestCase;\n \n+/**\n+ * Performs some functional test involving JSON output escaping.\n+ *\n+ * @author Inderjeet Singh\n+ * @author Joel Leitch\n+ */\n public class EscapingTest extends TestCase {\n   private Gson gson;\n \n     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class);\n     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson());\n   }\n+  \n+  public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception {\n+    Gson escapeHtmlGson = new GsonBuilder().create();\n+    Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create();\n+    \n+    BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, \"test' / w'ith\\\" / \\\\ <script>\");\n+    String escapedJsonForm = escapeHtmlGson.toJson(target);\n+    String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target);\n+    assertFalse(escapedJsonForm.equals(nonEscapedJsonForm));\n+    \n+    assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class));\n+    assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class));\n+  }\n }", "timestamp": 1242762565, "metainfo": ""}