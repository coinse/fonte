{"sha": "255f2e2847d133a751a2dd5a4bd16d048333cf75", "log": "added a sample Date type adapter for UTC", "commit": "\n--- /dev/null\n+++ b/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.typeadapters;\n+\n+import java.io.IOException;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import com.google.gson.JsonParseException;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+\n+public final class UtcDateTypeAdapter extends TypeAdapter<Date> {\n+  private final DateFormat iso8601Format;\n+\n+  public UtcDateTypeAdapter() {\n+    this.iso8601Format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\", Locale.US);\n+    this.iso8601Format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+  }\n+\n+  // These methods need to be synchronized since JDK DateFormat classes are not thread-safe\n+  // See issue 162\n+  @Override\n+  public synchronized void write(JsonWriter out, Date date) throws IOException {\n+    if (date == null) {\n+      out.nullValue();\n+    }\n+    out.value(iso8601Format.format(date));\n+  }\n+\n+  // These methods need to be synchronized since JDK DateFormat classes are not thread-safe\n+  // See issue 162\n+  @Override\n+  public synchronized Date read(JsonReader in) throws IOException {\n+    try {\n+      switch (in.peek()) {\n+      case NULL: return null;\n+      default: return iso8601Format.parse(in.nextString());\n+      }\n+    } catch (ParseException e) {\n+      throw new JsonParseException(e);\n+    }\n+  }\n+}\n--- /dev/null\n+++ b/extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.typeadapters;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+public final class UtcDateTypeAdapterTest extends TestCase {\n+  private final Gson gson = new GsonBuilder()\n+  .registerTypeAdapter(Date.class, new UtcDateTypeAdapter())\n+  .create();\n+\n+  public void testLocalTimeZone() {\n+    Date expected = new Date();\n+    String json = gson.toJson(expected);\n+    Date actual = gson.fromJson(json, Date.class);\n+    assertEquals(expected.getTime(), actual.getTime());\n+  }\n+\n+  public void testDifferentTimeZones() {\n+    for (String timeZone : TimeZone.getAvailableIDs()) {\n+      Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(timeZone));\n+      Date expected = cal.getTime();\n+      String json = gson.toJson(expected);\n+      // System.out.println(json + \": \" + timeZone);\n+      Date actual = gson.fromJson(json, Date.class);\n+      assertEquals(expected.getTime(), actual.getTime());\n+    }\n+  }\n+}", "timestamp": 1417738584, "metainfo": ""}