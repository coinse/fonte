{"sha": "35c13173b0c509fd7088566fcc8f75473d5a3b7c", "log": "Switch on ints rather than enums in JsonReader.  Using enums was triggering this Android bug: http://code.google.com/p/android/issues/detail?id=36349", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n import java.io.EOFException;\n import java.io.IOException;\n import java.io.Reader;\n+\n+import static com.google.gson.stream.JsonScope.CLOSED;\n+import static com.google.gson.stream.JsonScope.DANGLING_NAME;\n+import static com.google.gson.stream.JsonScope.EMPTY_ARRAY;\n+import static com.google.gson.stream.JsonScope.EMPTY_DOCUMENT;\n+import static com.google.gson.stream.JsonScope.EMPTY_OBJECT;\n+import static com.google.gson.stream.JsonScope.NONEMPTY_ARRAY;\n+import static com.google.gson.stream.JsonScope.NONEMPTY_DOCUMENT;\n+import static com.google.gson.stream.JsonScope.NONEMPTY_OBJECT;\n \n /**\n  * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>)\n   /*\n    * The nesting stack. Using a manual array rather than an ArrayList saves 20%.\n    */\n-  private JsonScope[] stack = new JsonScope[32];\n+  private int[] stack = new int[32];\n   private int stackSize = 0;\n   {\n-    push(JsonScope.EMPTY_DOCUMENT);\n+    push(EMPTY_DOCUMENT);\n   }\n \n   /**\n       if (lenient) {\n         consumeNonExecutePrefix();\n       }\n-      stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;\n+      stack[stackSize - 1] = NONEMPTY_DOCUMENT;\n       JsonToken firstToken = nextValue();\n       if (!lenient && token != JsonToken.BEGIN_ARRAY && token != JsonToken.BEGIN_OBJECT) {\n         throw new IOException(\"Expected JSON document to start with '[' or '{' but was \" + token\n   public void close() throws IOException {\n     value = null;\n     token = null;\n-    stack[0] = JsonScope.CLOSED;\n+    stack[0] = CLOSED;\n     stackSize = 1;\n     in.close();\n   }\n     }\n   }\n \n-  private void push(JsonScope newTop) {\n+  private void push(int newTop) {\n     if (stackSize == stack.length) {\n-      JsonScope[] newStack = new JsonScope[stackSize * 2];\n+      int[] newStack = new int[stackSize * 2];\n       System.arraycopy(stack, 0, newStack, 0, stackSize);\n       stack = newStack;\n     }\n   @SuppressWarnings(\"fallthrough\")\n   private JsonToken nextInArray(boolean firstElement) throws IOException {\n     if (firstElement) {\n-      stack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;\n+      stack[stackSize - 1] = NONEMPTY_ARRAY;\n     } else {\n       /* Look for a comma before each element after the first element. */\n       switch (nextNonWhitespace(true)) {\n       }\n     }\n \n-    stack[stackSize - 1] = JsonScope.DANGLING_NAME;\n+    stack[stackSize - 1] = DANGLING_NAME;\n     return token = JsonToken.NAME;\n   }\n \n       throw syntaxError(\"Expected ':'\");\n     }\n \n-    stack[stackSize - 1] = JsonScope.NONEMPTY_OBJECT;\n+    stack[stackSize - 1] = NONEMPTY_OBJECT;\n     return nextValue();\n   }\n \n     int c = nextNonWhitespace(true);\n     switch (c) {\n     case '{':\n-      push(JsonScope.EMPTY_OBJECT);\n+      push(EMPTY_OBJECT);\n       return token = JsonToken.BEGIN_OBJECT;\n \n     case '[':\n-      push(JsonScope.EMPTY_ARRAY);\n+      push(EMPTY_ARRAY);\n       return token = JsonToken.BEGIN_ARRAY;\n \n     case '\\'':\n--- a/gson/src/main/java/com/google/gson/stream/JsonScope.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonScope.java\n  * @author Jesse Wilson\n  * @since 1.6\n  */\n-enum JsonScope {\n+final class JsonScope {\n \n     /**\n      * An array with no elements requires no separators or newlines before\n      * it is closed.\n      */\n-    EMPTY_ARRAY,\n+    static final int EMPTY_ARRAY = 1;\n \n     /**\n      * A array with at least one value requires a comma and newline before\n      * the next element.\n      */\n-    NONEMPTY_ARRAY,\n+    static final int NONEMPTY_ARRAY = 2;\n \n     /**\n      * An object with no name/value pairs requires no separators or newlines\n      * before it is closed.\n      */\n-    EMPTY_OBJECT,\n+    static final int EMPTY_OBJECT = 3;\n \n     /**\n      * An object whose most recent element is a key. The next element must\n      * be a value.\n      */\n-    DANGLING_NAME,\n+    static final int DANGLING_NAME = 4;\n \n     /**\n      * An object with at least one name/value pair requires a comma and\n      * newline before the next element.\n      */\n-    NONEMPTY_OBJECT,\n+    static final int NONEMPTY_OBJECT = 5;\n \n     /**\n      * No object or array has been started.\n      */\n-    EMPTY_DOCUMENT,\n+    static final int EMPTY_DOCUMENT = 6;\n \n     /**\n      * A document with at an array or object.\n      */\n-    NONEMPTY_DOCUMENT,\n+    static final int NONEMPTY_DOCUMENT = 7;\n \n     /**\n      * A document that's been closed and cannot be accessed.\n      */\n-    CLOSED,\n+    static final int CLOSED = 8;\n }\n--- a/gson/src/main/java/com/google/gson/stream/JsonWriter.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonWriter.java\n import java.io.Flushable;\n import java.io.IOException;\n import java.io.Writer;\n-import java.util.ArrayList;\n-import java.util.List;\n+\n+import static com.google.gson.stream.JsonScope.DANGLING_NAME;\n+import static com.google.gson.stream.JsonScope.EMPTY_ARRAY;\n+import static com.google.gson.stream.JsonScope.EMPTY_DOCUMENT;\n+import static com.google.gson.stream.JsonScope.EMPTY_OBJECT;\n+import static com.google.gson.stream.JsonScope.NONEMPTY_ARRAY;\n+import static com.google.gson.stream.JsonScope.NONEMPTY_DOCUMENT;\n+import static com.google.gson.stream.JsonScope.NONEMPTY_OBJECT;\n \n /**\n  * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>)\n   /** The output data, containing at most one top-level array or object. */\n   private final Writer out;\n \n-  private final List<JsonScope> stack = new ArrayList<JsonScope>();\n+  private int[] stack = new int[32];\n+  private int stackSize = 0;\n   {\n-    stack.add(JsonScope.EMPTY_DOCUMENT);\n+    push(EMPTY_DOCUMENT);\n   }\n \n   /**\n    */\n   public JsonWriter beginArray() throws IOException {\n     writeDeferredName();\n-    return open(JsonScope.EMPTY_ARRAY, \"[\");\n+    return open(EMPTY_ARRAY, \"[\");\n   }\n \n   /**\n    * @return this writer.\n    */\n   public JsonWriter endArray() throws IOException {\n-    return close(JsonScope.EMPTY_ARRAY, JsonScope.NONEMPTY_ARRAY, \"]\");\n+    return close(EMPTY_ARRAY, NONEMPTY_ARRAY, \"]\");\n   }\n \n   /**\n    */\n   public JsonWriter beginObject() throws IOException {\n     writeDeferredName();\n-    return open(JsonScope.EMPTY_OBJECT, \"{\");\n+    return open(EMPTY_OBJECT, \"{\");\n   }\n \n   /**\n    * @return this writer.\n    */\n   public JsonWriter endObject() throws IOException {\n-    return close(JsonScope.EMPTY_OBJECT, JsonScope.NONEMPTY_OBJECT, \"}\");\n+    return close(EMPTY_OBJECT, NONEMPTY_OBJECT, \"}\");\n   }\n \n   /**\n    * Enters a new scope by appending any necessary whitespace and the given\n    * bracket.\n    */\n-  private JsonWriter open(JsonScope empty, String openBracket) throws IOException {\n+  private JsonWriter open(int empty, String openBracket) throws IOException {\n     beforeValue(true);\n-    stack.add(empty);\n+    push(empty);\n     out.write(openBracket);\n     return this;\n   }\n    * Closes the current scope by appending any necessary whitespace and the\n    * given bracket.\n    */\n-  private JsonWriter close(JsonScope empty, JsonScope nonempty, String closeBracket)\n+  private JsonWriter close(int empty, int nonempty, String closeBracket)\n       throws IOException {\n-    JsonScope context = peek();\n+    int context = peek();\n     if (context != nonempty && context != empty) {\n-      throw new IllegalStateException(\"Nesting problem: \" + stack);\n+      throw new IllegalStateException(\"Nesting problem.\");\n     }\n     if (deferredName != null) {\n       throw new IllegalStateException(\"Dangling name: \" + deferredName);\n     }\n \n-    stack.remove(stack.size() - 1);\n+    stackSize--;\n     if (context == nonempty) {\n       newline();\n     }\n     return this;\n   }\n \n+  private void push(int newTop) {\n+    if (stackSize == stack.length) {\n+      int[] newStack = new int[stackSize * 2];\n+      System.arraycopy(stack, 0, newStack, 0, stackSize);\n+      stack = newStack;\n+    }\n+    stack[stackSize++] = newTop;\n+  }\n+\n   /**\n    * Returns the value on the top of the stack.\n    */\n-  private JsonScope peek() {\n-    int size = stack.size();\n-    if (size == 0) {\n+  private int peek() {\n+    if (stackSize == 0) {\n       throw new IllegalStateException(\"JsonWriter is closed.\");\n     }\n-    return stack.get(size - 1);\n+    return stack[stackSize - 1];\n   }\n \n   /**\n    * Replace the value on the top of the stack with the given value.\n    */\n-  private void replaceTop(JsonScope topOfStack) {\n-    stack.set(stack.size() - 1, topOfStack);\n+  private void replaceTop(int topOfStack) {\n+    stack[stackSize - 1] = topOfStack;\n   }\n \n   /**\n     if (deferredName != null) {\n       throw new IllegalStateException();\n     }\n-    if (stack.isEmpty()) {\n+    if (stackSize == 0) {\n       throw new IllegalStateException(\"JsonWriter is closed.\");\n     }\n     deferredName = name;\n    * and flushes that writer.\n    */\n   public void flush() throws IOException {\n-    if (stack.isEmpty()) {\n+    if (stackSize == 0) {\n       throw new IllegalStateException(\"JsonWriter is closed.\");\n     }\n     out.flush();\n   public void close() throws IOException {\n     out.close();\n \n-    int size = stack.size();\n-    if (size > 1 || size == 1 && stack.get(size - 1) != JsonScope.NONEMPTY_DOCUMENT) {\n+    int size = stackSize;\n+    if (size > 1 || size == 1 && stack[size - 1] != NONEMPTY_DOCUMENT) {\n       throw new IOException(\"Incomplete document\");\n     }\n-    stack.clear();\n+    stackSize = 0;\n   }\n \n   private void string(String value) throws IOException {\n     }\n \n     out.write(\"\\n\");\n-    for (int i = 1; i < stack.size(); i++) {\n+    for (int i = 1, size = stackSize; i < size; i++) {\n       out.write(indent);\n     }\n   }\n    * adjusts the stack to expect the name's value.\n    */\n   private void beforeName() throws IOException {\n-    JsonScope context = peek();\n-    if (context == JsonScope.NONEMPTY_OBJECT) { // first in object\n+    int context = peek();\n+    if (context == NONEMPTY_OBJECT) { // first in object\n       out.write(',');\n-    } else if (context != JsonScope.EMPTY_OBJECT) { // not in an object!\n-      throw new IllegalStateException(\"Nesting problem: \" + stack);\n+    } else if (context != EMPTY_OBJECT) { // not in an object!\n+      throw new IllegalStateException(\"Nesting problem.\");\n     }\n     newline();\n-    replaceTop(JsonScope.DANGLING_NAME);\n+    replaceTop(DANGLING_NAME);\n   }\n \n   /**\n         throw new IllegalStateException(\n             \"JSON must start with an array or an object.\");\n       }\n-      replaceTop(JsonScope.NONEMPTY_DOCUMENT);\n+      replaceTop(NONEMPTY_DOCUMENT);\n       break;\n \n     case EMPTY_ARRAY: // first in array\n-      replaceTop(JsonScope.NONEMPTY_ARRAY);\n+      replaceTop(NONEMPTY_ARRAY);\n       newline();\n       break;\n \n \n     case DANGLING_NAME: // value for name\n       out.append(separator);\n-      replaceTop(JsonScope.NONEMPTY_OBJECT);\n+      replaceTop(NONEMPTY_OBJECT);\n       break;\n \n     default:\n-      throw new IllegalStateException(\"Nesting problem: \" + stack);\n+      throw new IllegalStateException(\"Nesting problem.\");\n     }\n   }\n }", "timestamp": 1344979938, "metainfo": ""}