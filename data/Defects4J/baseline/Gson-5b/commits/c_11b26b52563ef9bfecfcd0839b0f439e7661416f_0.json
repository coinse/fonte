{"sha": "11b26b52563ef9bfecfcd0839b0f439e7661416f", "log": "Added support for AtomicLongArray. Also added tests to ensure LongSerializationPolicy is honored.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.atomic.AtomicIntegerArray;\n import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicLongArray;\n \n import com.google.gson.internal.ConstructorConstructor;\n import com.google.gson.internal.Excluder;\n     factories.add(TypeAdapters.ATOMIC_INTEGER_FACTORY);\n     factories.add(TypeAdapters.ATOMIC_BOOLEAN_FACTORY);\n     factories.add(TypeAdapters.newFactory(AtomicLong.class, atomicLongAdapter(longAdapter)));\n+    factories.add(TypeAdapters.newFactory(AtomicLongArray.class, atomicLongArrayAdapter(longAdapter)));\n     factories.add(TypeAdapters.ATOMIC_INTEGER_ARRAY_FACTORY);\n     factories.add(TypeAdapters.CHARACTER_FACTORY);\n     factories.add(TypeAdapters.STRING_BUILDER_FACTORY);\n       }\n     }.nullSafe();\n   }\n+\n+  private static TypeAdapter<AtomicLongArray> atomicLongArrayAdapter(final TypeAdapter<Number> longAdapter) {\n+    return new TypeAdapter<AtomicLongArray>() {\n+      @Override public void write(JsonWriter out, AtomicLongArray value) throws IOException {\n+        out.beginArray();\n+        for (int i = 0, length = value.length(); i < length; i++) {\n+          longAdapter.write(out, value.get(i));\n+        }\n+        out.endArray();\n+      }\n+      @Override public AtomicLongArray read(JsonReader in) throws IOException {\n+        List<Long> list = new ArrayList<Long>();\n+        in.beginArray();\n+        while (in.hasNext()) {\n+            long value = longAdapter.read(in).longValue();\n+            list.add(value);\n+        }\n+        in.endArray();\n+        int length = list.size();\n+        AtomicLongArray array = new AtomicLongArray(length);\n+        for (int i = 0; i < length; ++i) {\n+          array.set(i, list.get(i));\n+        }\n+        return array;\n+      }\n+    }.nullSafe();\n+  }\n+\n   /**\n    * Returns the type adapter for {@code} type.\n    *\n--- a/gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicIntegerArray;\n import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicLongArray;\n \n import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.LongSerializationPolicy;\n \n import junit.framework.TestCase;\n \n     assertEquals(\"10\", json);\n   }\n \n+  public void testAtomicLongWithStringSerializationPolicy() throws Exception {\n+    Gson gson = new GsonBuilder()\n+        .setLongSerializationPolicy(LongSerializationPolicy.STRING)\n+        .create();\n+    AtomicLongHolder target = gson.fromJson(\"{'value':'10'}\", AtomicLongHolder.class);\n+    assertEquals(10, target.value.get());\n+    String json = gson.toJson(target);\n+    assertEquals(\"{\\\"value\\\":\\\"10\\\"}\", json);\n+  }\n+\n   public void testAtomicIntegerArray() throws Exception {\n     AtomicIntegerArray target = gson.fromJson(\"[10, 13, 14]\", AtomicIntegerArray.class);\n     assertEquals(3, target.length());\n     String json = gson.toJson(target);\n     assertEquals(\"[10,13,14]\", json);\n   }\n+\n+  public void testAtomicLongArray() throws Exception {\n+    AtomicLongArray target = gson.fromJson(\"[10, 13, 14]\", AtomicLongArray.class);\n+    assertEquals(3, target.length());\n+    assertEquals(10, target.get(0));\n+    assertEquals(13, target.get(1));\n+    assertEquals(14, target.get(2));\n+    String json = gson.toJson(target);\n+    assertEquals(\"[10,13,14]\", json);\n+  }\n+\n+  public void testAtomicLongArrayWithStringSerializationPolicy() throws Exception {\n+    Gson gson = new GsonBuilder()\n+        .setLongSerializationPolicy(LongSerializationPolicy.STRING)\n+        .create();\n+    AtomicLongArray target = gson.fromJson(\"['10', '13', '14']\", AtomicLongArray.class);\n+    assertEquals(3, target.length());\n+    assertEquals(10, target.get(0));\n+    assertEquals(13, target.get(1));\n+    assertEquals(14, target.get(2));\n+    String json = gson.toJson(target);\n+    assertEquals(\"[\\\"10\\\",\\\"13\\\",\\\"14\\\"]\", json);\n+  }\n+\n+  private static class AtomicLongHolder {\n+    AtomicLong value;\n+  }\n }", "timestamp": 1446761746, "metainfo": ""}