{"sha": "2b1f3eec15969d5771a957ba810e3c3a80519a3e", "log": "Removed a bunch of unused code and unnecessary else statements.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Escaper.java\n+++ b/gson/src/main/java/com/google/gson/Escaper.java\n       char c = (char) codepoint;\n       return JS_ESCAPE_CHARS.contains(c)\n           || (escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains(c));\n-    } else {\n-      return false;\n     }\n+    return false;\n   }\n \n   private static boolean isControlCharacter(int codePoint) {\n--- a/gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java\n+++ b/gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java\n   public boolean equals(Object o) {\n     if (!(o instanceof  GenericArrayType)) {\n       return false;\n-    } else {\n-      GenericArrayType that = (GenericArrayType) o;\n-      Type thatComponentType = that.getGenericComponentType();\n-      return genericComponentType == null ?\n-          thatComponentType == null : genericComponentType.equals(thatComponentType);\n     }\n+    GenericArrayType that = (GenericArrayType) o;\n+    Type thatComponentType = that.getGenericComponentType();\n+    return genericComponentType == null ?\n+        thatComponentType == null : genericComponentType.equals(thatComponentType);\n   }\n \n   @Override\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n       new SyntheticFieldExclusionStrategy(true);\n   static final ModifierBasedExclusionStrategy DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY =\n       new ModifierBasedExclusionStrategy(new int[] { Modifier.TRANSIENT, Modifier.STATIC });\n-  static final JsonFormatter DEFAULT_JSON_FORMATTER = new JsonCompactFormatter();\n   static final FieldNamingStrategy2 DEFAULT_NAMING_POLICY =\n       new SerializedNameAnnotationInterceptingNamingPolicy(new JavaFieldNamingPolicy());\n \n   /** Map containing Type or Class objects as keys */\n   private final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;\n \n-  private final JsonFormatter formatter;\n   private final boolean serializeNulls;\n   private final boolean htmlSafe;\n \n   public Gson() {\n     this(DEFAULT_EXCLUSION_STRATEGY, DEFAULT_EXCLUSION_STRATEGY, DEFAULT_NAMING_POLICY,\n     new MappedObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()),\n-    DEFAULT_JSON_FORMATTER, false, DefaultTypeAdapters.getDefaultSerializers(),\n+    false, DefaultTypeAdapters.getDefaultSerializers(),\n     DefaultTypeAdapters.getDefaultDeserializers(), DEFAULT_JSON_NON_EXECUTABLE, true);\n   }\n \n   Gson(ExclusionStrategy serializationStrategy, ExclusionStrategy deserializationStrategy,\n       FieldNamingStrategy2 fieldNamingPolicy, MappedObjectConstructor objectConstructor,\n-      JsonFormatter formatter, boolean serializeNulls,\n-      ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,\n+      boolean serializeNulls, ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,\n       ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n       boolean generateNonExecutableGson, boolean htmlSafe) {\n     this.serializationStrategy = serializationStrategy;\n     this.deserializationStrategy = deserializationStrategy;\n     this.fieldNamingPolicy = fieldNamingPolicy;\n     this.objectConstructor = objectConstructor;\n-    this.formatter = formatter;\n     this.serializeNulls = serializeNulls;\n     this.serializers = serializers;\n     this.deserializers = deserializers;\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n \n     MappedObjectConstructor objConstructor = new MappedObjectConstructor(customInstanceCreators);\n \n-    JsonFormatter formatter =  prettyPrinting ?\n-        new JsonPrintFormatter(escapeHtmlChars) : new JsonCompactFormatter(escapeHtmlChars);\n     Gson gson = new Gson(serializationExclusionStrategy, deserializationExclusionStrategy,\n-        fieldNamingPolicy, objConstructor, formatter, serializeNulls, customSerializers,\n+        fieldNamingPolicy, objConstructor, serializeNulls, customSerializers,\n         customDeserializers, generateNonExecutableJson, escapeHtmlChars);\n     return gson;\n   }\n--- a/gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java\n       // this typecasting is safe.\n       return (T) objectConstructor.constructArray(arrayTypeInfo.getSecondLevelType(),\n           jsonArray.size());\n-    } else { // is a collection\n-      return (T) objectConstructor.construct(typeInfo.getRawClass());\n     }\n+    // is a collection\n+    return (T) objectConstructor.construct(typeInfo.getRawClass());\n   }\n \n   public void visitArray(Object array, Type arrayType) {\n--- a/gson/src/main/java/com/google/gson/JsonElement.java\n+++ b/gson/src/main/java/com/google/gson/JsonElement.java\n   public JsonObject getAsJsonObject() {\n     if (isJsonObject()) {\n       return (JsonObject) this;\n-    } else {\n-      throw new IllegalStateException(\"This is not a JSON Object.\");\n-    }\n+    }\n+    throw new IllegalStateException(\"This is not a JSON Object.\");\n   }\n \n   /**\n   public JsonArray getAsJsonArray() {\n     if (isJsonArray()) {\n       return (JsonArray) this;\n-    } else {\n-      throw new IllegalStateException(\"This is not a JSON Array.\");\n-    }\n+    }\n+    throw new IllegalStateException(\"This is not a JSON Array.\");\n   }\n \n   /**\n   public JsonPrimitive getAsJsonPrimitive() {\n     if (isJsonPrimitive()) {\n       return (JsonPrimitive) this;\n-    } else {\n-      throw new IllegalStateException(\"This is not a JSON Primitive.\");\n-    }\n+    }\n+    throw new IllegalStateException(\"This is not a JSON Primitive.\");\n   }\n \n   /**\n   public JsonNull getAsJsonNull() {\n     if (isJsonNull()) {\n       return (JsonNull) this;\n-    } else {\n-      throw new IllegalStateException(\"This is not a JSON Null.\");\n-    }\n+    }\n+    throw new IllegalStateException(\"This is not a JSON Null.\");\n   }\n \n   /**\n--- a/gson/src/main/java/com/google/gson/JsonFieldNameValidator.java\n+++ b/gson/src/main/java/com/google/gson/JsonFieldNameValidator.java\n     Matcher matcher = JSON_FIELD_NAME_PATTERN.matcher(fieldName);\n     if (!matcher.matches()) {\n       throw new IllegalArgumentException(fieldName + \" is not a valid JSON field name.\");\n-    } else {\n-      return fieldName;\n     }\n+    return fieldName;\n   }\n }\n--- a/gson/src/main/java/com/google/gson/JsonObject.java\n+++ b/gson/src/main/java/com/google/gson/JsonObject.java\n    * @return a {@link JsonPrimitive} if the {@code value} is not null, otherwise a {@link JsonNull}\n    */\n   private JsonElement createJsonElement(Object value) {\n-    if (value == null) {\n-      return JsonNull.createJsonNull();\n-    } else {\n-      return new JsonPrimitive(value);\n-    }\n+    return value == null ? JsonNull.createJsonNull() : new JsonPrimitive(value);\n   }\n \n   /**\n     if (members.containsKey(memberName)) {\n       JsonElement member = members.get(memberName);\n       return member == null ? JsonNull.createJsonNull() : member;\n-    } else {\n-      return null;\n     }\n+    return null;\n   }\n \n   /**\n--- a/gson/src/main/java/com/google/gson/JsonParser.java\n+++ b/gson/src/main/java/com/google/gson/JsonParser.java\n     } catch (JsonParseException e) {\n       if (e.getCause() instanceof EOFException) {\n         return JsonNull.createJsonNull();\n-      } else {\n-        throw e;\n       }\n+      throw e;\n     } finally {\n       json.setLenient(lenient);\n     }\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n    */\n   @Override\n   public boolean getAsBoolean() {\n-    if (isBoolean()) {\n-      return getAsBooleanWrapper().booleanValue();\n-    } else {\n-      return Boolean.parseBoolean(getAsString());\n-    }\n+    return isBoolean() ? getAsBooleanWrapper().booleanValue() : Boolean.parseBoolean(getAsString());\n   }\n \n   /**\n       long longValue = Long.parseLong(value);\n       if (longValue >= Integer.MIN_VALUE && longValue <= Integer.MAX_VALUE) {\n         return (int) longValue;\n-      } else {\n-        return longValue;\n       }\n+      return longValue;\n     } catch (NumberFormatException ignored) {\n     }\n \n    */\n   @Override\n   public double getAsDouble() {\n-    if (isNumber()) {\n-      return getAsNumber().doubleValue();\n-    } else {\n-      return Double.parseDouble(getAsString());\n-    }\n+    return isNumber() ? getAsNumber().doubleValue() : Double.parseDouble(getAsString());\n   }\n \n   /**\n    */\n   @Override\n   public BigDecimal getAsBigDecimal() {\n-    if (value instanceof BigDecimal) {\n-      return (BigDecimal) value;\n-    } else {\n-      return new BigDecimal(value.toString());\n-    }\n+    return value instanceof BigDecimal ? (BigDecimal) value : new BigDecimal(value.toString());\n   }\n \n   /**\n    */\n   @Override\n   public BigInteger getAsBigInteger() {\n-    if (value instanceof BigInteger) {\n-      return (BigInteger) value;\n-    } else {\n-      return new BigInteger(value.toString());\n-    }\n+    return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString());\n   }\n \n   /**\n    */\n   @Override\n   public float getAsFloat() {\n-    if (isNumber()) {\n-      return getAsNumber().floatValue();\n-    } else {\n-      return Float.parseFloat(getAsString());\n-    }\n+    return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString());\n   }\n \n   /**\n    */\n   @Override\n   public long getAsLong() {\n-    if (isNumber()) {\n-      return getAsNumber().longValue();\n-    } else {\n-      return Long.parseLong(getAsString());\n-    }\n+    return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString());\n   }\n \n   /**\n    */\n   @Override\n   public short getAsShort() {\n-    if (isNumber()) {\n-      return getAsNumber().shortValue();\n-    } else {\n-      return Short.parseShort(getAsString());\n-    }\n+    return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString());\n   }\n \n  /**\n   */\n   @Override\n   public int getAsInt() {\n-    if (isNumber()) {\n-      return getAsNumber().intValue();\n-    } else {\n-      return Integer.parseInt(getAsString());\n-    }\n+    return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString());\n   }\n \n   @Override\n   public byte getAsByte() {\n-    if (isNumber()) {\n-      return getAsNumber().byteValue();\n-    } else {\n-      return Byte.parseByte(getAsString());\n-    }\n+    return isNumber() ? getAsNumber().byteValue() : Byte.parseByte(getAsString());\n   }\n \n   @Override\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n       if (element != null) {\n         assignToRoot(element);\n         return true;\n-      } else {\n-        return false;\n-      }\n+      }\n+      return false;\n     } catch (CircularReferenceException e) {\n       throw e.createDetailedException(null);\n     }\n       if (child != null) {\n         addChildAsElement(f, child);\n         return true;\n-      } else {\n-        return false;\n-      }\n+      }\n+      return false;\n     } catch (IllegalAccessException e) {\n       throw new RuntimeException();\n     } catch (CircularReferenceException e) {\n--- a/gson/src/main/java/com/google/gson/JsonStreamParser.java\n+++ b/gson/src/main/java/com/google/gson/JsonStreamParser.java\n     } catch (OutOfMemoryError e) {\n       throw new JsonParseException(\"Failed parsing JSON source to Json\", e);\n     } catch (JsonParseException e) {\n-      if (e.getCause() instanceof EOFException) {\n-        throw new NoSuchElementException();\n-      } else {\n-        throw e;\n-      }\n+      throw e.getCause() instanceof EOFException ? new NoSuchElementException() : e;\n     }\n   }\n \n--- a/gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java\n+++ b/gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java\n   }\n \n   private String modifyString(char firstCharacter, String srcString, int indexOfSubstring) {\n-    if (indexOfSubstring < srcString.length()) {\n-      return firstCharacter + srcString.substring(indexOfSubstring);\n-    } else {\n-      return String.valueOf(firstCharacter);\n-    }\n+    return indexOfSubstring < srcString.length() ?\n+        firstCharacter + srcString.substring(indexOfSubstring)\n+        : String.valueOf(firstCharacter);\n   }\n }\n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n       if (exclusionStrategy.shouldSkipField(fieldAttributes)\n           || exclusionStrategy.shouldSkipClass(fieldAttributes.getDeclaredClass())) {\n         continue; // skip\n-      } else {\n-        TypeInfo fieldTypeInfo = TypeInfoFactory.getTypeInfoForField(f, objTypePair.type);\n-        Type declaredTypeOfField = fieldTypeInfo.getActualType();\n-        boolean visitedWithCustomHandler =\n-            visitor.visitFieldUsingCustomHandler(fieldAttributes, declaredTypeOfField, obj);\n-        if (!visitedWithCustomHandler) {\n-          if (fieldTypeInfo.isArray()) {\n-            visitor.visitArrayField(fieldAttributes, declaredTypeOfField, obj);\n-          } else {\n-            visitor.visitObjectField(fieldAttributes, declaredTypeOfField, obj);\n-          }\n+      }\n+      TypeInfo fieldTypeInfo = TypeInfoFactory.getTypeInfoForField(f, objTypePair.type);\n+      Type declaredTypeOfField = fieldTypeInfo.getActualType();\n+      boolean visitedWithCustomHandler =\n+        visitor.visitFieldUsingCustomHandler(fieldAttributes, declaredTypeOfField, obj);\n+      if (!visitedWithCustomHandler) {\n+        if (fieldTypeInfo.isArray()) {\n+          visitor.visitArrayField(fieldAttributes, declaredTypeOfField, obj);\n+        } else {\n+          visitor.visitObjectField(fieldAttributes, declaredTypeOfField, obj);\n         }\n       }\n     }\n--- a/gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java\n+++ b/gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java\n   public boolean equals(Object o) {\n     if (!(o instanceof  ParameterizedType)) {\n       return false;\n-    } else {\n-      // Check that information is equivalent\n-      ParameterizedType that = (ParameterizedType) o;\n-      if (this  == that)\n+    }\n+    // Check that information is equivalent\n+    ParameterizedType that = (ParameterizedType) o;\n+    if (this  == that) {\n       return true;\n+    }\n+    Type thatOwner = that.getOwnerType();\n+    Type thatRawType = that.getRawType();\n \n-      Type thatOwner = that.getOwnerType();\n-      Type thatRawType = that.getRawType();\n-\n-      return (owner == null ? thatOwner == null : owner.equals(thatOwner))\n-          && (rawType == null ? thatRawType == null : rawType.equals(thatRawType))\n-          && Arrays.equals(actualTypeArguments, that.getActualTypeArguments());\n-    }\n+    return (owner == null ? thatOwner == null : owner.equals(thatOwner))\n+      && (rawType == null ? thatRawType == null : rawType.equals(thatRawType))\n+      && Arrays.equals(actualTypeArguments, that.getActualTypeArguments());\n   }\n \n   @Override\n--- a/gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java\n+++ b/gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java\n   public String translateName(FieldAttributes f) {\n     Preconditions.checkNotNull(f);\n     SerializedName serializedName = f.getAnnotation(SerializedName.class);\n-    if (serializedName != null) {\n-      return fieldNameValidator.validate(serializedName.value());\n-    } else {\n-      return delegate.translateName(f);\n-    }\n+    return serializedName == null ? delegate.translateName(f)\n+        : fieldNameValidator.validate(serializedName.value());\n   }\n }\n--- a/gson/src/main/java/com/google/gson/TypeInfoArray.java\n+++ b/gson/src/main/java/com/google/gson/TypeInfoArray.java\n   }\n \n   private static Type extractSecondLevelType(Type actualType, Class<?> rawClass) {\n-    if (actualType instanceof GenericArrayType) {\n-      GenericArrayType castedType = (GenericArrayType) actualType;\n-      return castedType.getGenericComponentType();\n-    } else {\n-      return rawClass.getComponentType();\n-    }\n+    return actualType instanceof GenericArrayType ?\n+        ((GenericArrayType) actualType).getGenericComponentType() : rawClass.getComponentType();\n   }\n \n   /**\n--- a/gson/src/main/java/com/google/gson/TypeInfoFactory.java\n+++ b/gson/src/main/java/com/google/gson/TypeInfoFactory.java\n       Type actualType = getActualType(componentType, parentType, rawParentClass);\n       if (componentType.equals(actualType)) {\n         return castedType;\n-      } else {\n-        if (actualType instanceof Class<?>) {\n-          return TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType));\n-        } else {\n-          return new GenericArrayTypeImpl(actualType);\n-        }\n       }\n+      return actualType instanceof Class<?> ?\n+          TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))\n+          : new GenericArrayTypeImpl(actualType);\n     } else if (typeToEvaluate instanceof TypeVariable<?>) {\n       if (parentType instanceof ParameterizedType) {\n         // The class definition has the actual types used for the type variables.\n         int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);\n         Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();\n         return actualTypeArguments[indexOfActualTypeArgument];\n-      } else {\n-        throw new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType\n-            + \".\\n Are you missing the use of TypeToken idiom?\\n See \" \n-            + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\");\n       }\n+      throw new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType\n+          + \".\\n Are you missing the use of TypeToken idiom?\\n See \" \n+          + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\");\n     } else if (typeToEvaluate instanceof WildcardType) {\n       WildcardType castedType = (WildcardType) typeToEvaluate;\n       return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n         JsonToken token = nextValue();\n         if (lenient) {\n           return token;\n-        } else {\n-          throw syntaxError(\"Expected EOF\");\n         }\n+        throw syntaxError(\"Expected EOF\");\n       } catch (EOFException e) {\n         hasToken = true; // TODO: avoid throwing here?\n         return token = JsonToken.END_DOCUMENT;\n--- a/gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java\n+++ b/gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java\n     ExclusionStrategy exclusionStrategy = new DisjunctionExclusionStrategy(strategies);\n     Gson gson = new Gson(exclusionStrategy, exclusionStrategy, Gson.DEFAULT_NAMING_POLICY,\n         new MappedObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()),\n-        Gson.DEFAULT_JSON_FORMATTER, false, DefaultTypeAdapters.getDefaultSerializers(),\n+        false, DefaultTypeAdapters.getDefaultSerializers(),\n         DefaultTypeAdapters.getDefaultDeserializers(), Gson.DEFAULT_JSON_NON_EXECUTABLE, true);\n     assertEquals(\"{}\", gson.toJson(new ClassWithNoFields() {\n       // empty anonymous class\n--- a/gson/src/test/java/com/google/gson/MixedStreamTest.java\n+++ b/gson/src/test/java/com/google/gson/MixedStreamTest.java\n       this.color = color;\n     }\n \n-    @SuppressWarnings(\"unused\") // used by Gson\n+    // used by Gson\n     Car() {}\n \n     @Override public int hashCode() {\n--- a/gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java\n+++ b/gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java\n         String value = from.toString();\n         if (value.length() == 1) {\n           return (T) (Character) from.toString().charAt(0);\n-        } else {\n-          throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n         }\n+        throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n       }\n \n       try {\n--- a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n         customDeserializerInvoked.value = true;\n         if (json == null || json.isJsonNull()) {\n           return null;\n-        } else {\n-          Number number = json.getAsJsonPrimitive().getAsNumber();\n-          return number == null ? null : number.longValue();\n         }\n+        Number number = json.getAsJsonPrimitive().getAsNumber();\n+        return number == null ? null : number.longValue();\n       }      \n     }).create();\n     String json = \"{'value':null}\";\n--- a/gson/src/test/java/com/google/gson/functional/EnumTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/EnumTest.java\n \n package com.google.gson.functional;\n \n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import junit.framework.TestCase;\n+\n import com.google.gson.Gson;\n import com.google.gson.common.MoreAsserts;\n import com.google.gson.reflect.TypeToken;\n-\n-import java.util.Arrays;\n-import java.util.EnumSet;\n-import java.util.List;\n-import java.util.Set;\n-import junit.framework.TestCase;\n-\n-import java.lang.reflect.Type;\n-import java.util.ArrayList;\n-import java.util.Collection;\n \n /**\n  * Functional tests for Java 5.0 enums.", "timestamp": 1285681363, "metainfo": ""}