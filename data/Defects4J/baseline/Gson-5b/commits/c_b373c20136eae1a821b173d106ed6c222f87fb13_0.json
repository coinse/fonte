{"sha": "b373c20136eae1a821b173d106ed6c222f87fb13", "log": "Fixed issue 552 by documenting when fromJson returns null.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n    * @param <T> the type of the desired object\n    * @param json the string from which the object is to be deserialized\n    * @param classOfT the class of T\n-   * @return an object of type T from the string\n+   * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type\n    * classOfT\n    */\n    * <pre>\n    * Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();\n    * </pre>\n-   * @return an object of type T from the string\n+   * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.\n    * @throws JsonParseException if json is not a valid representation for an object of type typeOfT\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type\n    */\n    * @param <T> the type of the desired object\n    * @param json the reader producing the Json from which the object is to be deserialized.\n    * @param classOfT the class of T\n-   * @return an object of type T from the string\n+   * @return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.\n    * @throws JsonIOException if there was a problem reading from the Reader\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type\n    * @since 1.2\n    * <pre>\n    * Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();\n    * </pre>\n-   * @return an object of type T from the json\n+   * @return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.\n    * @throws JsonIOException if there was a problem reading from the Reader\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type\n    * @since 1.2\n \n   /**\n    * Reads the next JSON value from {@code reader} and convert it to an object\n-   * of type {@code typeOfT}.\n+   * of type {@code typeOfT}. Returns {@code null}, if the {@code reader} is at EOF.\n    * Since Type is not parameterized by T, this method is type unsafe and should be used carefully\n    *\n    * @throws JsonIOException if there was a problem writing to the Reader\n    * @param json the root of the parse tree of {@link JsonElement}s from which the object is to\n    * be deserialized\n    * @param classOfT The class of T\n-   * @return an object of type T from the json\n+   * @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\n    * @since 1.3\n    */\n    * <pre>\n    * Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();\n    * </pre>\n-   * @return an object of type T from the json\n+   * @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\n    * @since 1.3\n    */", "timestamp": 1396135732, "metainfo": ""}