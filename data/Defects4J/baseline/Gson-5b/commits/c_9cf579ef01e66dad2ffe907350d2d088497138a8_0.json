{"sha": "9cf579ef01e66dad2ffe907350d2d088497138a8", "log": "Use Streams instead of Escaper.  Fixes issue 345.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonArray.java\n+++ b/gson/src/main/java/com/google/gson/JsonArray.java\n \n package com.google.gson;\n \n-import java.io.IOException;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.util.ArrayList;\n   public int hashCode() {\n     return elements.hashCode();\n   }\n-\n-  @Override\n-  protected void toString(Appendable sb, Escaper escaper) throws IOException {\n-    sb.append('[');\n-    boolean first = true;\n-    for (JsonElement element : elements) {\n-      if (first) {\n-        first = false;\n-      } else {\n-        sb.append(',');\n-      }\n-      element.toString(sb, escaper);\n-    }\n-    sb.append(']');\n-  }\n }\n--- a/gson/src/main/java/com/google/gson/JsonElement.java\n+++ b/gson/src/main/java/com/google/gson/JsonElement.java\n \n package com.google.gson;\n \n+import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n+import java.io.StringWriter;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n  * @author Joel Leitch\n  */\n public abstract class JsonElement {\n-  private static final Escaper BASIC_ESCAPER = new Escaper(false);\n-\n   /**\n    * provides check for verifying if this element is an array or not.\n    *\n \n   /**\n    * Returns a String representation of this element.\n-   *\n-   * @return String the string representation of this element.\n    */\n   @Override\n   public String toString() {\n     try {\n-      StringBuilder sb = new StringBuilder();\n-      toString(sb, BASIC_ESCAPER);\n-      return sb.toString();\n+      StringWriter stringWriter = new StringWriter();\n+      JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+      jsonWriter.setLenient(true);\n+      Streams.write(this, true, jsonWriter);\n+      return stringWriter.toString();\n     } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n-\n-  protected abstract void toString(Appendable sb, Escaper escaper) throws IOException;\n+      throw new AssertionError(e);\n+    }\n+  }\n }\n--- a/gson/src/main/java/com/google/gson/JsonNull.java\n+++ b/gson/src/main/java/com/google/gson/JsonNull.java\n  */\n \n package com.google.gson;\n-\n-import java.io.IOException;\n \n /**\n  * A class representing a Json {@code null} value.\n     return this; // immutable!\n   }\n \n-  @Override\n-  protected void toString(Appendable sb, Escaper escaper) throws IOException {\n-    sb.append(\"null\");\n-  }\n-\n   /**\n    * All instances of JsonNull have the same hash code since they are indistinguishable\n    */\n--- a/gson/src/main/java/com/google/gson/JsonObject.java\n+++ b/gson/src/main/java/com/google/gson/JsonObject.java\n package com.google.gson;\n \n import com.google.gson.internal.$Gson$Preconditions;\n-\n-import java.io.IOException;\n import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Set;\n   public int hashCode() {\n     return members.hashCode();\n   }\n-\n-  @Override\n-  protected void toString(Appendable sb, Escaper escaper) throws IOException {\n-    sb.append('{');\n-    boolean first = true;\n-    for (Map.Entry<String, JsonElement> entry : members.entrySet()) {\n-      if (first) {\n-        first = false;\n-      } else {\n-        sb.append(',');\n-      }\n-      sb.append('\\\"');\n-      sb.append(escaper.escapeJsonString(entry.getKey()));\n-      sb.append(\"\\\":\");\n-      entry.getValue().toString(sb, escaper);\n-    }\n-    sb.append('}');\n-  }\n }\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n package com.google.gson;\n \n import com.google.gson.internal.$Gson$Preconditions;\n-\n-import java.io.IOException;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n     return value;\n   }\n \n-  @Override\n-  protected void toString(Appendable sb, Escaper escaper) throws IOException {\n-    if (isString()) {\n-      sb.append('\"');\n-      sb.append(escaper.escapeJsonString(value.toString()));\n-      sb.append('\"');\n-    } else {\n-      sb.append(value.toString());\n-    }\n-  }\n-\n   private static boolean isPrimitiveOrString(Object target) {\n     if (target instanceof String) {\n       return true;", "timestamp": 1310514600, "metainfo": ""}