{"sha": "05f54f35520bb0718dcaa12333520f4c2aaf3cc7", "log": "Incorporated code review comments from r350", "commit": "\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n   }\n \n   /**\n-   * Configures Gson to include or exclude inner classes.\n-   *\n-   * @param value the boolean value on whether or not {@code Gson} should serialize inner classes\n+   * Configures Gson to exclude inner classes during serialization.\n+   * \n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n    * @since 1.3\n    */\n-  public GsonBuilder serializeInnerClasses(boolean value) {\n-    serializeInnerClasses = value;\n+  public GsonBuilder disableInnerClassSerialization() {\n+    serializeInnerClasses = false;\n     return this;\n   }\n   \n--- a/gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java\n  */\n public class FieldExclusionTest extends TestCase {\n   private static final String VALUE = \"blah_1234\";\n+\n+  private Outer outer;\n+  \n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    outer = new Outer();\n+  }\n   \n   public void testDefaultInnerClassExclusion() throws Exception {\n     Gson gson = new Gson();\n-    TestInnerClass target = new TestInnerClass(VALUE);\n+    Outer.Inner target = outer.new Inner(VALUE);\n     String result = gson.toJson(target);\n     assertEquals(target.toJson(), result);\n     \n     gson = new GsonBuilder().create();\n-    target = new TestInnerClass(VALUE);\n+    target = outer.new Inner(VALUE);\n     result = gson.toJson(target);\n     assertEquals(target.toJson(), result);\n   }\n   \n   public void testInnerClassExclusion() throws Exception {\n-    Gson gson = new GsonBuilder().serializeInnerClasses(false).create();\n-    TestInnerClass target = new TestInnerClass(VALUE);\n+    Gson gson = new GsonBuilder().disableInnerClassSerialization().create();\n+    Outer.Inner target = outer.new Inner(VALUE);\n     String result = gson.toJson(target);\n     assertEquals(\"\", result);\n   }\n   \n   public void testDefaultNestedStaticClassIncluded() throws Exception {\n     Gson gson = new Gson();\n-    TestInnerClass target = new TestInnerClass(VALUE);\n+    Outer.Inner target = outer.new Inner(VALUE);\n     String result = gson.toJson(target);\n     assertEquals(target.toJson(), result);\n     \n     gson = new GsonBuilder().create();\n-    target = new TestInnerClass(VALUE);\n+    target = outer.new Inner(VALUE);\n     result = gson.toJson(target);\n     assertEquals(target.toJson(), result);\n   }\n   \n-  private class TestInnerClass extends TestStaticNestedClass {\n-    public TestInnerClass(String value) {\n-      super(value);\n+  private static class Outer {\n+    private class Inner extends NestedClass {\n+      public Inner(String value) {\n+        super(value);\n+      }\n     }\n+        \n   }\n   \n-  private static class TestStaticNestedClass {\n+  private static class NestedClass {\n     private final String value;\n-    public TestStaticNestedClass(String value) {\n+    public NestedClass(String value) {\n       this.value = value;\n     }\n     ", "timestamp": 1230663273, "metainfo": ""}