{"sha": "e26a6d5c187228d5f8152db6a8cbbd157a28b0a5", "log": "removed the wrapping (regarding exception handling) of some primitive deserializers (numbers and boolean). Added a number of additional tests that cover the cases of attempts to deserialize JsonObjects or arrays as primitives that must fail.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n     map.register(Time.class, wrapDeserializer(TIME_TYPE_ADAPTER));\n     map.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\n     map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\n-    map.register(BigDecimal.class, wrapDeserializer(BIG_DECIMAL_TYPE_ADAPTER));\n-    map.register(BigInteger.class, wrapDeserializer(BIG_INTEGER_TYPE_ADAPTER));\n+    map.register(BigDecimal.class, BIG_DECIMAL_TYPE_ADAPTER);\n+    map.register(BigInteger.class, BIG_INTEGER_TYPE_ADAPTER);\n \n     // Add primitive deserializers\n-    map.register(Boolean.class, wrapDeserializer(BOOLEAN_TYPE_ADAPTER));\n-    map.register(boolean.class, wrapDeserializer(BOOLEAN_TYPE_ADAPTER));\n-    map.register(Byte.class, wrapDeserializer(BYTE_TYPE_ADAPTER));\n-    map.register(byte.class, wrapDeserializer(BYTE_TYPE_ADAPTER));\n+    map.register(Boolean.class, BOOLEAN_TYPE_ADAPTER);\n+    map.register(boolean.class, BOOLEAN_TYPE_ADAPTER);\n+    map.register(Byte.class, BYTE_TYPE_ADAPTER);\n+    map.register(byte.class, BYTE_TYPE_ADAPTER);\n     map.register(Character.class, wrapDeserializer(CHARACTER_TYPE_ADAPTER));\n     map.register(char.class, wrapDeserializer(CHARACTER_TYPE_ADAPTER));\n-    map.register(Double.class, wrapDeserializer(DOUBLE_TYPE_ADAPTER));\n-    map.register(double.class, wrapDeserializer(DOUBLE_TYPE_ADAPTER));\n-    map.register(Float.class, wrapDeserializer(FLOAT_TYPE_ADAPTER));\n-    map.register(float.class, wrapDeserializer(FLOAT_TYPE_ADAPTER));\n-    map.register(Integer.class, wrapDeserializer(INTEGER_TYPE_ADAPTER));\n-    map.register(int.class, wrapDeserializer(INTEGER_TYPE_ADAPTER));\n-    map.register(Long.class, wrapDeserializer(LONG_DESERIALIZER));\n-    map.register(long.class, wrapDeserializer(LONG_DESERIALIZER));\n-    map.register(Number.class, wrapDeserializer(NUMBER_TYPE_ADAPTER));\n-    map.register(Short.class, wrapDeserializer(SHORT_TYPE_ADAPTER));\n-    map.register(short.class, wrapDeserializer(SHORT_TYPE_ADAPTER));\n+    map.register(Double.class, DOUBLE_TYPE_ADAPTER);\n+    map.register(double.class, DOUBLE_TYPE_ADAPTER);\n+    map.register(Float.class, FLOAT_TYPE_ADAPTER);\n+    map.register(float.class, FLOAT_TYPE_ADAPTER);\n+    map.register(Integer.class, INTEGER_TYPE_ADAPTER);\n+    map.register(int.class, INTEGER_TYPE_ADAPTER);\n+    map.register(Long.class, LONG_DESERIALIZER);\n+    map.register(long.class, LONG_DESERIALIZER);\n+    map.register(Number.class, NUMBER_TYPE_ADAPTER);\n+    map.register(Short.class, SHORT_TYPE_ADAPTER);\n+    map.register(short.class, SHORT_TYPE_ADAPTER);\n     map.register(String.class, wrapDeserializer(STRING_TYPE_ADAPTER));\n     map.register(StringBuilder.class, wrapDeserializer(STRING_BUILDER_TYPE_ADAPTER));\n     map.register(StringBuffer.class, wrapDeserializer(STRING_BUFFER_TYPE_ADAPTER));\n \n     public BigDecimal deserialize(JsonElement json, Type typeOfT,\n         JsonDeserializationContext context) throws JsonParseException {\n-      return json.getAsBigDecimal();\n+      try {\n+        return json.getAsBigDecimal();\n+      } catch (NumberFormatException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (UnsupportedOperationException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (IllegalStateException e) {\n+        throw new JsonSyntaxException(e);\n+      }\n     }\n \n     @Override\n \n     public BigInteger deserialize(JsonElement json, Type typeOfT,\n         JsonDeserializationContext context) throws JsonParseException {\n-      return json.getAsBigInteger();\n+      try {\n+        return json.getAsBigInteger();\n+      } catch (NumberFormatException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (UnsupportedOperationException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (IllegalStateException e) {\n+        throw new JsonSyntaxException(e);\n+      }\n     }\n \n     @Override\n \n     public Number deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n-      return json.getAsNumber();\n+      try {\n+        return json.getAsNumber();\n+      } catch (NumberFormatException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (UnsupportedOperationException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (IllegalStateException e) {\n+        throw new JsonSyntaxException(e);\n+      }\n     }\n \n     @Override\n   private static class LongDeserializer implements JsonDeserializer<Long> {\n     public Long deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n-      return json.getAsLong();\n+      try {\n+        return json.getAsLong();\n+      } catch (NumberFormatException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (UnsupportedOperationException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (IllegalStateException e) {\n+        throw new JsonSyntaxException(e);\n+      }\n     }\n \n     @Override\n \n     public Integer deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n-      return json.getAsInt();\n+      try {\n+        return json.getAsInt();\n+      } catch (NumberFormatException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (UnsupportedOperationException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (IllegalStateException e) {\n+        throw new JsonSyntaxException(e);\n+      }\n     }\n \n     @Override\n \n     public Short deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n-      return json.getAsShort();\n+      try {\n+        return json.getAsShort();\n+      } catch (NumberFormatException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (UnsupportedOperationException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (IllegalStateException e) {\n+        throw new JsonSyntaxException(e);\n+      }\n     }\n \n     @Override\n \n     public Byte deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n-      return json.getAsByte();\n+      try {\n+        return json.getAsByte();\n+      } catch (NumberFormatException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (UnsupportedOperationException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (IllegalStateException e) {\n+        throw new JsonSyntaxException(e);\n+      }\n     }\n \n     @Override\n   private static class FloatDeserializer implements JsonDeserializer<Float> {\n     public Float deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n-      return json.getAsFloat();\n+      try {\n+        return json.getAsFloat();\n+      } catch (NumberFormatException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (UnsupportedOperationException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (IllegalStateException e) {\n+        throw new JsonSyntaxException(e);\n+      }\n     }\n \n     @Override\n   private static class DoubleDeserializer implements JsonDeserializer<Double> {\n     public Double deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n-      return json.getAsDouble();\n+      try {\n+        return json.getAsDouble();\n+      } catch (NumberFormatException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (UnsupportedOperationException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (IllegalStateException e) {\n+        throw new JsonSyntaxException(e);\n+      }\n     }\n \n     @Override\n \n     public Boolean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n-      return json.getAsBoolean();\n+      try {\n+        return json.getAsBoolean();\n+      } catch (UnsupportedOperationException e) {\n+        throw new JsonSyntaxException(e);\n+      } catch (IllegalStateException e) {\n+        throw new JsonSyntaxException(e);\n+      }        \n     }\n \n     @Override\n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n     assertEquals(1, gson.fromJson(new StringReader(\"1\"), int.class).intValue());\n     assertEquals(1, gson.fromJson(new JsonPrimitive(1), int.class).intValue());\n   }\n+\n+  public void testDeserializeJsonObjectAsLongPrimitive() {\n+    try {\n+      gson.fromJson(\"{'abc':1}\", long.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonArrayAsLongWrapper() {\n+    try {\n+      gson.fromJson(\"[1,2,3]\", Long.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonArrayAsInt() {\n+    try {\n+      gson.fromJson(\"[1, 2, 3, 4]\", int.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonObjectAsInteger() {\n+    try {\n+      gson.fromJson(\"{}\", Integer.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonObjectAsShortPrimitive() {\n+    try {\n+      gson.fromJson(\"{'abc':1}\", short.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonArrayAsShortWrapper() {\n+    try {\n+      gson.fromJson(\"['a','b']\", Short.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonArrayAsDoublePrimitive() {\n+    try {\n+      gson.fromJson(\"[1,2]\", double.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonObjectAsDoubleWrapper() {\n+    try {\n+      gson.fromJson(\"{'abc':1}\", Double.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonObjectAsFloatPrimitive() {\n+    try {\n+      gson.fromJson(\"{'abc':1}\", float.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonArrayAsFloatWrapper() {\n+    try {\n+      gson.fromJson(\"[1,2,3]\", Float.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonObjectAsBytePrimitive() {\n+    try {\n+      gson.fromJson(\"{'abc':1}\", byte.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonArrayAsByteWrapper() {\n+    try {\n+      gson.fromJson(\"[1,2,3,4]\", Byte.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonObjectAsBooleanPrimitive() {\n+    try {\n+      gson.fromJson(\"{'abc':1}\", boolean.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonArrayAsBooleanWrapper() {\n+    try {\n+      gson.fromJson(\"[1,2,3,4]\", Boolean.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonArrayAsBigDecimal() {\n+    try {\n+      gson.fromJson(\"[1,2,3,4]\", BigDecimal.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonObjectAsBigDecimal() {\n+    try {\n+      gson.fromJson(\"{'a':1}\", BigDecimal.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonArrayAsBigInteger() {\n+    try {\n+      gson.fromJson(\"[1,2,3,4]\", BigInteger.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonObjectAsBigInteger() {\n+    try {\n+      gson.fromJson(\"{'c':2}\", BigInteger.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonArrayAsNumber() {\n+    try {\n+      gson.fromJson(\"[1,2,3,4]\", Number.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n+\n+  public void testDeserializeJsonObjectAsNumber() {\n+    try {\n+      gson.fromJson(\"{'c':2}\", Number.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+  }\n }", "timestamp": 1299881658, "metainfo": ""}