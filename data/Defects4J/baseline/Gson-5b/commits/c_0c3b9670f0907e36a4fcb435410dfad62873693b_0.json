{"sha": "0c3b9670f0907e36a4fcb435410dfad62873693b", "log": "Ensuring that UTC date adapter serializes nulls correctly", "commit": "\n--- a/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java\n+++ b/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java\n   public void write(JsonWriter out, Date date) throws IOException {\n     if (date == null) {\n       out.nullValue();\n-    }\n-    String value = format(date, true, UTC_TIME_ZONE);\n-    out.value(value);\n+    } else {\n+      String value = format(date, true, UTC_TIME_ZONE);\n+      out.value(value);\n+    }\n   }\n \n   @Override\n--- a/extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java\n+++ b/extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java\n \n public final class UtcDateTypeAdapterTest extends TestCase {\n   private final Gson gson = new GsonBuilder()\n-  .registerTypeAdapter(Date.class, new UtcDateTypeAdapter())\n-  .create();\n+    .registerTypeAdapter(Date.class, new UtcDateTypeAdapter())\n+    .create();\n \n   public void testLocalTimeZone() {\n     Date expected = new Date();\n     Date actual = gson.fromJson(expectedJson, Date.class);\n     assertEquals(expected.getTime(), actual.getTime());\n   }\n+\n+  public void testNullDateSerialization() {\n+    String json = gson.toJson(null, Date.class);\n+    assertEquals(\"null\", json);\n+  }\n }", "timestamp": 1417817574, "metainfo": ""}