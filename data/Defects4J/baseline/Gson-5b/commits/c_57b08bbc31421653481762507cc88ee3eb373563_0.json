{"sha": "57b08bbc31421653481762507cc88ee3eb373563", "log": "Merge pull request #772 from chalup/nullsafe-jsonadapter  Add nullsafe option to JsonAdapter annotation", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java\n   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n       TypeToken<?> fieldType, JsonAdapter annotation) {\n     Class<?> value = annotation.value();\n+    final TypeAdapter<?> typeAdapter;\n     if (TypeAdapter.class.isAssignableFrom(value)) {\n-          Class<TypeAdapter<?>> typeAdapter = (Class<TypeAdapter<?>>) value;\n-      return constructorConstructor.get(TypeToken.get(typeAdapter)).construct();\n-    }\n-    if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n-          Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n-      return constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n+      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n+      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n+    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n+      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n+      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n           .construct()\n           .create(gson, fieldType);\n+    } else {\n+      throw new IllegalArgumentException(\n+          \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n     }\n \n-    throw new IllegalArgumentException(\n-        \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n+    return typeAdapter.nullSafe();\n   }\n }\n--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java\n     assertFalse(json.contains(\"jsonAdapter\"));\n   }\n \n+  public void testNullSafeObjectFromJson() {\n+    Gson gson = new Gson();\n+    NullableClass fromJson = gson.fromJson(\"null\", NullableClass.class);\n+    assertNull(fromJson);\n+  }\n+\n   @JsonAdapter(A.JsonAdapter.class)\n   private static class A {\n     final String value;\n     }\n   }\n \n+  @JsonAdapter(value = NullableClassJsonAdapter.class)\n+  private static class NullableClass {\n+  }\n+\n+  private static class NullableClassJsonAdapter extends TypeAdapter<NullableClass> {\n+    @Override\n+    public void write(JsonWriter out, NullableClass value) throws IOException {\n+      out.value(\"nullable\");\n+    }\n+\n+    @Override\n+    public NullableClass read(JsonReader in) throws IOException {\n+      in.nextString();\n+      return new NullableClass();\n+    }\n+  }\n+\n   @JsonAdapter(FooJsonAdapter.class)\n   private static enum Foo { BAR, BAZ }\n   private static class FooJsonAdapter extends TypeAdapter<Foo> {\n--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java\n       this.part2 = part2;\n     }\n   }\n+\n+  public void testJsonAdapterWrappedInNullSafeAsRequested() {\n+    Gson gson = new Gson();\n+    String fromJson = \"{'part':null}\";\n+\n+    GadgetWithOptionalPart gadget = gson.fromJson(fromJson, GadgetWithOptionalPart.class);\n+    assertNull(gadget.part);\n+\n+    String toJson = gson.toJson(gadget);\n+    assertFalse(toJson.contains(\"PartJsonFieldAnnotationAdapter\"));\n+  }\n+\n+  private static final class GadgetWithOptionalPart {\n+    @JsonAdapter(value = PartJsonFieldAnnotationAdapter.class)\n+    final Part part;\n+\n+    private GadgetWithOptionalPart(Part part) {\n+      this.part = part;\n+    }\n+  }\n }", "timestamp": 1453136174, "metainfo": ""}