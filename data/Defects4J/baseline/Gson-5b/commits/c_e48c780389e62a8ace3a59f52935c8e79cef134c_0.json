{"sha": "e48c780389e62a8ace3a59f52935c8e79cef134c", "log": "Merge pull request #733 from google/java_util_additional_classes  Supported Currency and added additional tests for Vector, Stack and Properties.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n     factories.add(TypeAdapters.URL_FACTORY);\n     factories.add(TypeAdapters.URI_FACTORY);\n     factories.add(TypeAdapters.UUID_FACTORY);\n+    factories.add(TypeAdapters.CURRENCY_FACTORY);\n     factories.add(TypeAdapters.LOCALE_FACTORY);\n     factories.add(TypeAdapters.INET_ADDRESS_FACTORY);\n     factories.add(TypeAdapters.BIT_SET_FACTORY);\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n import java.util.ArrayList;\n import java.util.BitSet;\n import java.util.Calendar;\n+import java.util.Currency;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.HashMap;\n \n   public static final TypeAdapterFactory UUID_FACTORY = newFactory(UUID.class, UUID);\n \n+  public static final TypeAdapter<Currency> CURRENCY = new TypeAdapter<Currency>() {\n+    @Override\n+    public Currency read(JsonReader in) throws IOException {\n+      return Currency.getInstance(in.nextString());\n+    }\n+    @Override\n+    public void write(JsonWriter out, Currency value) throws IOException {\n+      out.value(value.getCurrencyCode());\n+    }\n+  }.nullSafe();\n+  public static final TypeAdapterFactory CURRENCY_FACTORY = newFactory(Currency.class, CURRENCY);\n+\n   public static final TypeAdapterFactory TIMESTAMP_FACTORY = new TypeAdapterFactory() {\n     @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n     @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n \n package com.google.gson.functional;\n \n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import java.util.Queue;\n+import java.util.Set;\n+import java.util.Stack;\n+import java.util.Vector;\n+\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonElement;\n import com.google.gson.reflect.TypeToken;\n \n import junit.framework.TestCase;\n-\n-import java.lang.reflect.Type;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Queue;\n-import java.util.Set;\n \n /**\n  * Functional tests for Json serialization and deserialization of collections.\n     assertEquals(\"a1\", queue.element());\n     queue.remove();\n     assertEquals(\"a2\", queue.element());\n+  }\n+\n+  public void testPriorityQueue() throws Exception {\n+    Type type = new TypeToken<PriorityQueue<Integer>>(){}.getType();\n+    PriorityQueue<Integer> queue = gson.fromJson(\"[10, 20, 22]\", type);\n+    assertEquals(3, queue.size());\n+    String json = gson.toJson(queue);\n+    assertEquals(10, queue.remove().intValue());\n+    assertEquals(20, queue.remove().intValue());\n+    assertEquals(22, queue.remove().intValue());\n+    assertEquals(\"[10,20,22]\", json);\n+  }\n+\n+  public void testVector() {\n+    Type type = new TypeToken<Vector<Integer>>(){}.getType();\n+    Vector<Integer> target = gson.fromJson(\"[10, 20, 31]\", type);\n+    assertEquals(3, target.size());\n+    assertEquals(10, target.get(0).intValue());\n+    assertEquals(20, target.get(1).intValue());\n+    assertEquals(31, target.get(2).intValue());\n+    String json = gson.toJson(target);\n+    assertEquals(\"[10,20,31]\", json);\n+  }\n+\n+  public void testStack() {\n+    Type type = new TypeToken<Stack<Integer>>(){}.getType();\n+    Stack<Integer> target = gson.fromJson(\"[11, 13, 17]\", type);\n+    assertEquals(3, target.size());\n+    String json = gson.toJson(target);\n+    assertEquals(17, target.pop().intValue());\n+    assertEquals(13, target.pop().intValue());\n+    assertEquals(11, target.pop().intValue());\n+    assertEquals(\"[11,13,17]\", json);\n   }\n \n   public void testNullsInListSerialization() {\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/JavaUtilTest.java\n+/*\n+ * Copyright (C) 2015 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import java.util.Currency;\n+import java.util.Properties;\n+\n+import com.google.gson.Gson;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Functional test for Json serialization and deserialization for classes in java.util\n+ */\n+public class JavaUtilTest extends TestCase {\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new Gson();\n+  }\n+\n+  public void testCurrency() throws Exception {\n+    CurrencyHolder target = gson.fromJson(\"{'value':'USD'}\", CurrencyHolder.class);\n+    assertEquals(\"USD\", target.value.getCurrencyCode());\n+    String json = gson.toJson(target);\n+    assertEquals(\"{\\\"value\\\":\\\"USD\\\"}\", json);\n+\n+    // null handling\n+    target = gson.fromJson(\"{'value':null}\", CurrencyHolder.class);\n+    assertNull(target.value);\n+    assertEquals(\"{}\", gson.toJson(target));\n+  }\n+\n+  private static class CurrencyHolder {\n+    Currency value;\n+  }\n+\n+  public void testProperties() {\n+    Properties props = gson.fromJson(\"{'a':'v1','b':'v2'}\", Properties.class);\n+    assertEquals(\"v1\", props.getProperty(\"a\"));\n+    assertEquals(\"v2\", props.getProperty(\"b\"));\n+    String json = gson.toJson(props);\n+    assertTrue(json.contains(\"\\\"a\\\":\\\"v1\\\"\"));\n+    assertTrue(json.contains(\"\\\"b\\\":\\\"v2\\\"\"));\n+  }\n+}\n--- a/gson/src/main/java/com/google/gson/internal/Excluder.java\n+++ b/gson/src/main/java/com/google/gson/internal/Excluder.java\n     try {\n       return (Excluder) super.clone();\n     } catch (CloneNotSupportedException e) {\n-      throw new AssertionError();\n+      throw new AssertionError(e);\n     }\n   }\n \n--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n           }\n         }\n       } catch (IllegalAccessException e) {\n-        throw new AssertionError();\n+        throw new AssertionError(e);\n       }\n       out.endObject();\n     }\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n           constantToName.put(constant, name);\n         }\n       } catch (NoSuchFieldException e) {\n-        throw new AssertionError();\n+        throw new AssertionError(\"Missing field in \" + classOfT.getName(), e);\n       }\n     }\n     @Override public T read(JsonReader in) throws IOException {", "timestamp": 1447811879, "metainfo": ""}