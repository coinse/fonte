{"sha": "cf2a457af7b0422e7728e0d55a4e794048af5a6b", "log": "Removed the TypeAdapter object from GSON now that the primitive objects and fields are created by a custom Type Adapter.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n \n   private static final String NULL_STRING = \"null\";\n   // Default instances of plug-ins\n-  static final TypeAdapter DEFAULT_TYPE_ADAPTER =\n-      new TypeAdapterNotRequired(new PrimitiveTypeAdapter());\n   static final ModifierBasedExclusionStrategy DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY =\n       new ModifierBasedExclusionStrategy(true, new int[] { Modifier.TRANSIENT, Modifier.STATIC });\n   static final JsonFormatter DEFAULT_JSON_FORMATTER = new JsonCompactFormatter();\n   private final ExclusionStrategy strategy;\n   private final FieldNamingStrategy fieldNamingPolicy;\n   private final MappedObjectConstructor objectConstructor;\n-  private final TypeAdapter typeAdapter;\n \n   /** Map containing Type or Class objects as keys */\n   private final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;\n    */\n   Gson(ExclusionStrategy strategy, FieldNamingStrategy fieldNamingPolicy) {\n     this(strategy, fieldNamingPolicy, createObjectConstructor(DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS),\n-        DEFAULT_TYPE_ADAPTER, DEFAULT_JSON_FORMATTER, false,\n+        DEFAULT_JSON_FORMATTER, false,\n         DefaultTypeAdapters.DEFAULT_SERIALIZERS, DefaultTypeAdapters.DEFAULT_DESERIALIZERS);\n   }\n \n   Gson(ExclusionStrategy strategy, FieldNamingStrategy fieldNamingPolicy, \n-      MappedObjectConstructor objectConstructor,\n-      TypeAdapter typeAdapter, JsonFormatter formatter, boolean serializeNulls,\n+      MappedObjectConstructor objectConstructor, JsonFormatter formatter, boolean serializeNulls,\n       ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,\n       ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers) {\n     this.strategy = strategy;\n     this.fieldNamingPolicy = fieldNamingPolicy;\n     this.objectConstructor = objectConstructor;\n-    this.typeAdapter = typeAdapter;\n     this.formatter = formatter;\n     this.serializeNulls = serializeNulls;\n     this.serializers = serializers;\n       JsonParser parser = new JsonParser(json);\n       JsonElement root = parser.parse();\n       JsonDeserializationContext context = new JsonDeserializationContextDefault(\n-          createDefaultObjectNavigatorFactory(), deserializers, objectConstructor, typeAdapter);\n+          createDefaultObjectNavigatorFactory(), deserializers, objectConstructor);\n       T target = (T) context.deserialize(root, typeOfT);\n       return target;\n     } catch (TokenMgrError e) {\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n   private ModifierBasedExclusionStrategy modifierBasedExclusionStrategy;\n   private final InnerClassExclusionStrategy innerClassExclusionStrategy;\n   private boolean excludeFieldsWithoutExposeAnnotation;\n-  private final TypeAdapter typeAdapter;\n   private JsonFormatter formatter;\n   private FieldNamingStrategy fieldNamingPolicy;\n   private final ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators;\n     innerClassExclusionStrategy = new InnerClassExclusionStrategy();\n     modifierBasedExclusionStrategy = Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY;\n     excludeFieldsWithoutExposeAnnotation = false;\n-    typeAdapter = Gson.DEFAULT_TYPE_ADAPTER;\n     formatter = Gson.DEFAULT_JSON_FORMATTER;\n     fieldNamingPolicy = Gson.DEFAULT_NAMING_POLICY;\n     instanceCreators = new ParameterizedTypeHandlerMap<InstanceCreator<?>>();\n     customInstanceCreators.registerIfAbsent(DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS);\n     MappedObjectConstructor objConstructor = Gson.createObjectConstructor(customInstanceCreators);\n \n-    Gson gson = new Gson(exclusionStrategy, fieldNamingPolicy, objConstructor, typeAdapter, \n+    Gson gson = new Gson(exclusionStrategy, fieldNamingPolicy, objConstructor, \n         formatter, serializeNulls, customSerializers, customDeserializers);\n     return gson;\n   }\n--- a/gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java\n \n   JsonArrayDeserializationVisitor(JsonArray jsonArray, Type arrayType,\n       ObjectNavigatorFactory factory, ObjectConstructor objectConstructor,\n-      TypeAdapter typeAdapter, ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n+      ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n       JsonDeserializationContext context) {\n-    super(jsonArray, arrayType, factory, objectConstructor, typeAdapter, deserializers, context);\n+    super(jsonArray, arrayType, factory, objectConstructor, deserializers, context);\n   }\n \n   @Override\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java\n   private final ObjectNavigatorFactory navigatorFactory;\n   private final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;\n   private final MappedObjectConstructor objectConstructor;\n-  private final TypeAdapter typeAdapter;\n \n   JsonDeserializationContextDefault(ObjectNavigatorFactory navigatorFactory,\n       ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n-      MappedObjectConstructor objectConstructor, TypeAdapter typeAdapter) {\n+      MappedObjectConstructor objectConstructor) {\n     this.navigatorFactory = navigatorFactory;\n     this.deserializers = deserializers;\n     this.objectConstructor = objectConstructor;\n-    this.typeAdapter = typeAdapter;\n   }\n \n   ObjectConstructor getObjectConstructor() {\n   private <T> T fromJsonArray(Type arrayType, JsonArray jsonArray,\n       JsonDeserializationContext context) throws JsonParseException {\n     JsonArrayDeserializationVisitor<T> visitor = new JsonArrayDeserializationVisitor<T>(\n-        jsonArray, arrayType, navigatorFactory, objectConstructor, typeAdapter, deserializers,\n-        context);\n+        jsonArray, arrayType, navigatorFactory, objectConstructor, deserializers, context);\n     Object target = visitor.getTarget();\n     ObjectNavigator on = navigatorFactory.create(target, arrayType);\n     on.accept(visitor);\n   private <T> T fromJsonObject(Type typeOfT, JsonObject jsonObject,\n       JsonDeserializationContext context) throws JsonParseException {\n     JsonObjectDeserializationVisitor<T> visitor = new JsonObjectDeserializationVisitor<T>(\n-        jsonObject, typeOfT, navigatorFactory, objectConstructor, typeAdapter, deserializers,\n-        context);\n+        jsonObject, typeOfT, navigatorFactory, objectConstructor, deserializers, context);\n     Object target = visitor.getTarget();\n     ObjectNavigator on = navigatorFactory.create(target, typeOfT);\n     on.accept(visitor);\n   private <T> T fromJsonPrimitive(Type typeOfT, JsonPrimitive json,\n       JsonDeserializationContext context) throws JsonParseException {\n     JsonObjectDeserializationVisitor<T> visitor = new JsonObjectDeserializationVisitor<T>(\n-        json, typeOfT, navigatorFactory, objectConstructor, typeAdapter, deserializers, context);\n+        json, typeOfT, navigatorFactory, objectConstructor, deserializers, context);\n     ObjectNavigator on = navigatorFactory.create(json.getAsObject(), typeOfT);\n     on.accept(visitor);\n     Object target = visitor.getTarget();\n-    if (typeOfT instanceof Class) {\n-      target = typeAdapter.adaptType(target, (Class) typeOfT);\n-    }\n     return (T) target;\n   }\n }\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n \n   protected final ObjectNavigatorFactory factory;\n   protected final ObjectConstructor objectConstructor;\n-  protected final TypeAdapter typeAdapter;\n   protected final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;\n   protected T target;\n   protected final JsonElement json;\n   protected final JsonDeserializationContext context;\n \n   public JsonDeserializationVisitor(JsonElement json, Type targetType,\n-      ObjectNavigatorFactory factory, ObjectConstructor objectConstructor, TypeAdapter typeAdapter,\n+      ObjectNavigatorFactory factory, ObjectConstructor objectConstructor,\n       ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n       JsonDeserializationContext context) {\n     Preconditions.checkNotNull(json);\n     this.targetType = targetType;\n     this.factory = factory;\n     this.objectConstructor = objectConstructor;\n-    this.typeAdapter = typeAdapter;\n     this.deserializers = deserializers;\n     this.json = json;\n     this.context = context;\n   final Object visitChildAsObject(Type childType, JsonElement jsonChild) {\n     JsonDeserializationVisitor<?> childVisitor =\n       new JsonObjectDeserializationVisitor<Object>(jsonChild, childType,\n-          factory, objectConstructor, typeAdapter, deserializers, context);\n+          factory, objectConstructor, deserializers, context);\n     return visitChild(childType, childVisitor);\n   }\n \n   final Object visitChildAsArray(Type childType, JsonArray jsonChild) {\n     JsonDeserializationVisitor<?> childVisitor =\n       new JsonArrayDeserializationVisitor<Object>(jsonChild.getAsJsonArray(), childType,\n-          factory, objectConstructor, typeAdapter, deserializers, context);\n+          factory, objectConstructor, deserializers, context);\n     return visitChild(childType, childVisitor);\n   }\n \n--- a/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n \n   JsonObjectDeserializationVisitor(JsonElement json, Type type,\n       ObjectNavigatorFactory factory, ObjectConstructor objectConstructor,\n-      TypeAdapter typeAdapter, ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n+      ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n       JsonDeserializationContext context) {\n-    super(json, type, factory, objectConstructor, typeAdapter, deserializers, context);\n+    super(json, type, factory, objectConstructor, deserializers, context);\n   }\n \n   @Override\n--- a/gson/src/main/java/com/google/gson/MappedObjectConstructor.java\n+++ b/gson/src/main/java/com/google/gson/MappedObjectConstructor.java\n     TypeInfo typeInfo = new TypeInfo(typeOfT);\n     if (typeInfo.isEnum()) {\n       InstanceCreator<T> creator =\n-        (InstanceCreator<T>) instanceCreatorMap.getHandlerFor(Enum.class);\n+          (InstanceCreator<T>) instanceCreatorMap.getHandlerFor(Enum.class);\n       return creator.createInstance(typeOfT);\n     }\n     return (T) constructWithNoArgConstructor(typeOfT);\n--- a/gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java\n+++ b/gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.lang.reflect.Type;\n+\n \n /**\n  * This class contains some test fixtures for Parameterized types. These classes should ideally\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+import com.google.gson.JsonParseException;\n+import com.google.gson.Primitives;\n+\n+/**\n+ * Handles type conversion from some object to some primitive (or primitive\n+ * wrapper instance).\n+ * \n+ * @author Joel Leitch\n+ */\n+final class PrimitiveTypeAdapter {\n+\n+  @SuppressWarnings( { \"unchecked\" })\n+  public <T> T adaptType(Object from, Class<T> to) {\n+    Class<?> aClass = Primitives.wrap(to);\n+    if (Primitives.isWrapperType(aClass)) {\n+      if (aClass == Character.class) {\n+        String value = from.toString();\n+        if (value.length() == 1) {\n+          return (T) (Character) from.toString().charAt(0);\n+        } else {\n+          throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\n+        }\n+      }\n+\n+      try {\n+        Constructor<?> constructor = aClass.getConstructor(String.class);\n+        return (T) constructor.newInstance(from.toString());\n+      } catch (NoSuchMethodException e) {\n+        throw new JsonParseException(e);\n+      } catch (IllegalAccessException e) {\n+        throw new JsonParseException(e);\n+      } catch (InvocationTargetException e) {\n+        throw new JsonParseException(e);\n+      } catch (InstantiationException e) {\n+        throw new JsonParseException(e);\n+      }\n+    } else if (Enum.class.isAssignableFrom(to)) {\n+      // Case where the type being adapted to is an Enum\n+      // We will try to convert from.toString() to the enum\n+      try {\n+        Method valuesMethod = to.getMethod(\"valueOf\", String.class);\n+        return (T) valuesMethod.invoke(null, from.toString());\n+      } catch (NoSuchMethodException e) {\n+        throw new RuntimeException(e);\n+      } catch (IllegalAccessException e) {\n+        throw new RuntimeException(e);\n+      } catch (InvocationTargetException e) {\n+        throw new RuntimeException(e);\n+      }\n+    } else {\n+      throw new JsonParseException(\"Can not adapt type \" + from.getClass() + \" to \" + to);\n+    }\n+  }\n+}", "timestamp": 1226725888, "metainfo": ""}