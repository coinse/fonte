{"sha": "3e7ebf85568e7c9ef5b1373907c89a215e27e2b9", "log": "Fixed issue 156.  Added support for serializing an object field (or array elements) as per its actual type. Refactored inheritance related tests into its own test class. Added regression tests for issue 156.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n     Type componentType = fieldTypeInfo.getSecondLevelType();\n     for (int i = 0; i < length; ++i) {\n       Object child = Array.get(array, i);\n-      addAsArrayElement(componentType, child);\n+      Type childType = componentType;\n+      if (child != null) {\n+        childType = getActualTypeIfMoreSpecific(childType, child.getClass());\n+      }\n+      addAsArrayElement(childType, child);\n     }\n   }\n \n       }\n     } else {\n       Object fieldValue = getFieldValue(f, obj);\n-      // This takes care of situations where the field was declared as an Object, but the\n-      // actual value contains something more specific. See Issue 54.\n-      if (fieldValue != null && typeOfF == Object.class) {\n-        typeOfF = fieldValue.getClass();\n+      if (fieldValue != null) {\n+        typeOfF = getActualTypeIfMoreSpecific(typeOfF, fieldValue.getClass());\n       }\n       addAsChildOfObject(f, typeOfF, fieldValue);\n     }\n+  }\n+\n+  // This takes care of situations where the field was declared as an Object, but the\n+  // actual value contains something more specific. See Issue 54.      \n+  private Type getActualTypeIfMoreSpecific(Type type, Class<?> actualClass) {\n+    if (type instanceof Class<?>) {\n+      Class<?> typeAsClass = (Class<?>) type;\n+      if (typeAsClass.isAssignableFrom(actualClass)) {\n+        type = actualClass;\n+      }\n+      if (type == Object.class) {\n+        type = actualClass;\n+      } \n+    }\n+    return type;\n   }\n \n   public void visitPrimitive(Object obj) {\n--- a/gson/src/test/java/com/google/gson/common/TestTypes.java\n+++ b/gson/src/test/java/com/google/gson/common/TestTypes.java\n  */\n public class TestTypes {\n \n+  public static class BaseClass {\n+    final String baseField;\n+    public BaseClass() {\n+      this(\"baseFieldValue\");\n+    }\n+    public BaseClass(String value) {\n+      this.baseField = value;\n+    }\n+    public String getExpectedJson() {\n+      return String.format(\"{\\\"baseField\\\":\\\"%s\\\"}\", baseField);\n+    }\n+  }\n+\n+  public static class SubClass extends BaseClass {\n+    final String subField;\n+    public SubClass() {\n+      this(\"subFieldValue\");\n+    }\n+    public SubClass(String subFieldValue) {\n+      this.subField = subFieldValue;\n+    }\n+    @Override\n+    public String getExpectedJson() {\n+      return String.format(\"{\\\"subField\\\":\\\"%s\\\",\\\"baseField\\\":\\\"%s\\\"}\", subField, baseField);\n+    }\n+  }\n+\n   public static class StringWrapper {\n     public final String someConstantStringInstanceField;\n \n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/InheritanceTest.java\n+/*\n+ * Copyright (C) 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.functional;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+import junit.framework.TestCase;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.common.TestTypes.BagOfPrimitives;\n+import com.google.gson.common.TestTypes.BaseClass;\n+import com.google.gson.common.TestTypes.Nested;\n+import com.google.gson.common.TestTypes.SubClass;\n+\n+/**\n+ * Functional tests for Json serialization and deserialization of classes with \n+ * inheritance hierarchies.\n+ *\n+ * @author Inderjeet Singh\n+ * @author Joel Leitch\n+ */\n+public class InheritanceTest extends TestCase {\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new Gson();\n+  }\n+\n+  public void testSubClassSerialization() throws Exception {\n+    SubTypeOfNested target = new SubTypeOfNested(new BagOfPrimitives(10, 20, false, \"stringValue\"),\n+        new BagOfPrimitives(30, 40, true, \"stringValue\"));\n+    assertEquals(target.getExpectedJson(), gson.toJson(target));\n+  }\n+\n+  public void testSubClassDeserialization() throws Exception {\n+    String json = \"{\\\"value\\\":5,\\\"primitive1\\\":{\\\"longValue\\\":10,\\\"intValue\\\":20,\"\n+        + \"\\\"booleanValue\\\":false,\\\"stringValue\\\":\\\"stringValue\\\"},\\\"primitive2\\\":\"\n+        + \"{\\\"longValue\\\":30,\\\"intValue\\\":40,\\\"booleanValue\\\":true,\"\n+        + \"\\\"stringValue\\\":\\\"stringValue\\\"}}\";\n+    SubTypeOfNested target = gson.fromJson(json, SubTypeOfNested.class);\n+    assertEquals(json, target.getExpectedJson());\n+  }\n+\n+  public void testClassWithBaseFieldSerialization() throws Exception {\n+    ClassWithBaseFields sub = new ClassWithBaseFields();\n+    sub.field = new SubClass();\n+    String json = gson.toJson(sub);\n+    String expectedJson = sub.field.getExpectedJson();\n+    assertTrue(json.contains(expectedJson));\n+  }\n+\n+  public void testClassWithBaseArrayFieldSerialization() throws Exception {\n+    ClassWithBaseFields sub = new ClassWithBaseFields();\n+    sub.array = new BaseClass[]{ new SubClass(\"sub1\"), new SubClass(\"sub2\")};\n+    String json = gson.toJson(sub);\n+    assertTrue(json.contains(\"sub1\"));\n+    assertTrue(json.contains(\"sub2\"));\n+  }\n+\n+  private static class ClassWithBaseFields {\n+    BaseClass field;\n+    @SuppressWarnings(\"unused\")\n+    BaseClass[] array;\n+  }\n+\n+  private static class SubTypeOfNested extends Nested {\n+    private final long value = 5;\n+\n+    // Used by Gson\n+    @SuppressWarnings(\"unused\")\n+    private SubTypeOfNested() {\n+      this(null, null);\n+    }\n+\n+    public SubTypeOfNested(BagOfPrimitives primitive1, BagOfPrimitives primitive2) {\n+      super(primitive1, primitive2);\n+    }\n+\n+    @Override\n+    public void appendFields(StringBuilder sb) {\n+      sb.append(\"\\\"value\\\":\").append(value).append(\",\");\n+      super.appendFields(sb);\n+    }\n+  }\n+\n+  public void testSubInterfacesOfCollectionSerialization() throws Exception {\n+    List<Integer> list = new LinkedList<Integer>();\n+    list.add(0);\n+    list.add(1);\n+    list.add(2);\n+    list.add(3);\n+    Queue<Long> queue = new LinkedList<Long>();\n+    queue.add(0L);\n+    queue.add(1L);\n+    queue.add(2L);\n+    queue.add(3L);\n+    Set<Float> set = new TreeSet<Float>();\n+    set.add(0.1F);\n+    set.add(0.2F);\n+    set.add(0.3F);\n+    set.add(0.4F);\n+    SortedSet<Character> sortedSet = new TreeSet<Character>();\n+    sortedSet.add('a');\n+    sortedSet.add('b');\n+    sortedSet.add('c');\n+    sortedSet.add('d');\n+    ClassWithSubInterfacesOfCollection target =\n+        new ClassWithSubInterfacesOfCollection(list, queue, set, sortedSet);\n+    assertEquals(target.getExpectedJson(), gson.toJson(target));\n+  }\n+\n+  public void testSubInterfacesOfCollectionDeserialization() throws Exception {\n+    String json = \"{\\\"list\\\":[0,1,2,3],\\\"queue\\\":[0,1,2,3],\\\"set\\\":[0.1,0.2,0.3,0.4],\"\n+        + \"\\\"sortedSet\\\":[\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\"]\"\n+        + \"}\";\n+    ClassWithSubInterfacesOfCollection target = \n+      gson.fromJson(json, ClassWithSubInterfacesOfCollection.class);\n+    assertTrue(target.listContains(0, 1, 2, 3));\n+    assertTrue(target.queueContains(0, 1, 2, 3));\n+    assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F));\n+    assertTrue(target.sortedSetContains('a', 'b', 'c', 'd'));\n+  }\n+  \n+  private static class ClassWithSubInterfacesOfCollection {\n+    private List<Integer> list;\n+    private Queue<Long> queue;\n+    private Set<Float> set;\n+    private SortedSet<Character> sortedSet;\n+\n+    // For use by Gson\n+    @SuppressWarnings(\"unused\")\n+    private ClassWithSubInterfacesOfCollection() {\n+    }\n+\n+    public ClassWithSubInterfacesOfCollection(List<Integer> list, Queue<Long> queue, Set<Float> set,\n+        SortedSet<Character> sortedSet) {\n+      this.list = list;\n+      this.queue = queue;\n+      this.set = set;\n+      this.sortedSet = sortedSet;\n+    }\n+\n+    boolean listContains(int... values) {\n+      for (int value : values) {\n+        if (!list.contains(value)) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    }\n+    \n+    boolean queueContains(long... values) {\n+      for (long value : values) {\n+        if (!queue.contains(value)) {\n+          return false;\n+        }\n+      }\n+      return true;      \n+    }\n+    \n+    boolean setContains(float... values) {\n+      for (float value : values) {\n+        if (!set.contains(value)) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    }\n+\n+    boolean sortedSetContains(char... values) {\n+      for (char value : values) {\n+        if (!sortedSet.contains(value)) {\n+          return false;\n+        }\n+      }\n+      return true;      \n+    }\n+    \n+    public String getExpectedJson() {\n+      StringBuilder sb = new StringBuilder();\n+      sb.append(\"{\");\n+      sb.append(\"\\\"list\\\":\");\n+      append(sb, list).append(\",\");\n+      sb.append(\"\\\"queue\\\":\");\n+      append(sb, queue).append(\",\");\n+      sb.append(\"\\\"set\\\":\");\n+      append(sb, set).append(\",\");\n+      sb.append(\"\\\"sortedSet\\\":\");\n+      append(sb, sortedSet);\n+      sb.append(\"}\");\n+      return sb.toString();\n+    }\n+\n+    private StringBuilder append(StringBuilder sb, Collection<?> c) {\n+      sb.append(\"[\");\n+      boolean first = true;\n+      for (Object o : c) {\n+        if (!first) {\n+          sb.append(\",\");\n+        } else {\n+          first = false;\n+        }\n+        if (o instanceof String || o instanceof Character) {\n+          sb.append('\\\"');\n+        }\n+        sb.append(o.toString());\n+        if (o instanceof String || o instanceof Character) {\n+          sb.append('\\\"');\n+        }\n+      }\n+      sb.append(\"]\");\n+      return sb;\n+    }\n+  }\n+}\n--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Queue;\n-import java.util.Set;\n-import java.util.SortedSet;\n-import java.util.TreeSet;\n \n import junit.framework.TestCase;\n \n     Nested target = gson.fromJson(json, Nested.class);\n     assertEquals(json, target.getExpectedJson());\n   }\n-\n-  public void testInheritenceSerialization() throws Exception {\n-    SubTypeOfNested target = new SubTypeOfNested(new BagOfPrimitives(10, 20, false, \"stringValue\"),\n-        new BagOfPrimitives(30, 40, true, \"stringValue\"));\n-    assertEquals(target.getExpectedJson(), gson.toJson(target));\n-  }\n-\n-  public void testInheritenceDeserialization() throws Exception {\n-    String json = \"{\\\"value\\\":5,\\\"primitive1\\\":{\\\"longValue\\\":10,\\\"intValue\\\":20,\"\n-        + \"\\\"booleanValue\\\":false,\\\"stringValue\\\":\\\"stringValue\\\"},\\\"primitive2\\\":\"\n-        + \"{\\\"longValue\\\":30,\\\"intValue\\\":40,\\\"booleanValue\\\":true,\"\n-        + \"\\\"stringValue\\\":\\\"stringValue\\\"}}\";\n-    SubTypeOfNested target = gson.fromJson(json, SubTypeOfNested.class);\n-    assertEquals(json, target.getExpectedJson());\n-  }\n-\n   public void testNullSerialization() throws Exception {\n     assertEquals(\"\", gson.toJson(null));\n   }\n     String json = new ArrayOfArrays().getExpectedJson();\n     ArrayOfArrays target = gson.fromJson(json, ArrayOfArrays.class);\n     assertEquals(json, target.getExpectedJson());\n-  }\n-\n-  public void testSubInterfacesOfCollectionSerialization() throws Exception {\n-    List<Integer> list = new LinkedList<Integer>();\n-    list.add(0);\n-    list.add(1);\n-    list.add(2);\n-    list.add(3);\n-    Queue<Long> queue = new LinkedList<Long>();\n-    queue.add(0L);\n-    queue.add(1L);\n-    queue.add(2L);\n-    queue.add(3L);\n-    Set<Float> set = new TreeSet<Float>();\n-    set.add(0.1F);\n-    set.add(0.2F);\n-    set.add(0.3F);\n-    set.add(0.4F);\n-    SortedSet<Character> sortedSet = new TreeSet<Character>();\n-    sortedSet.add('a');\n-    sortedSet.add('b');\n-    sortedSet.add('c');\n-    sortedSet.add('d');\n-    ClassWithSubInterfacesOfCollection target =\n-        new ClassWithSubInterfacesOfCollection(list, queue, set, sortedSet);\n-    assertEquals(target.getExpectedJson(), gson.toJson(target));\n-  }\n-\n-  public void testSubInterfacesOfCollectionDeserialization() throws Exception {\n-    String json = \"{\\\"list\\\":[0,1,2,3],\\\"queue\\\":[0,1,2,3],\\\"set\\\":[0.1,0.2,0.3,0.4],\"\n-        + \"\\\"sortedSet\\\":[\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\"]\"\n-        + \"}\";\n-    ClassWithSubInterfacesOfCollection target = \n-      gson.fromJson(json, ClassWithSubInterfacesOfCollection.class);\n-    assertTrue(target.listContains(0, 1, 2, 3));\n-    assertTrue(target.queueContains(0, 1, 2, 3));\n-    assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F));\n-    assertTrue(target.sortedSetContains('a', 'b', 'c', 'd'));\n   }\n \n   public void testArrayOfObjectsAsFields() throws Exception {\n       int value2 = 2;\n     }\n   }\n-  \n-  private static class ClassWithSubInterfacesOfCollection {\n-    private List<Integer> list;\n-    private Queue<Long> queue;\n-    private Set<Float> set;\n-    private SortedSet<Character> sortedSet;\n-\n-    // For use by Gson\n-    @SuppressWarnings(\"unused\")\n-    private ClassWithSubInterfacesOfCollection() {\n-    }\n-\n-    public ClassWithSubInterfacesOfCollection(List<Integer> list, Queue<Long> queue, Set<Float> set,\n-        SortedSet<Character> sortedSet) {\n-      this.list = list;\n-      this.queue = queue;\n-      this.set = set;\n-      this.sortedSet = sortedSet;\n-    }\n-\n-    boolean listContains(int... values) {\n-      for (int value : values) {\n-        if (!list.contains(value)) {\n-          return false;\n-        }\n-      }\n-      return true;\n-    }\n-    \n-    boolean queueContains(long... values) {\n-      for (long value : values) {\n-        if (!queue.contains(value)) {\n-          return false;\n-        }\n-      }\n-      return true;      \n-    }\n-    \n-    boolean setContains(float... values) {\n-      for (float value : values) {\n-        if (!set.contains(value)) {\n-          return false;\n-        }\n-      }\n-      return true;\n-    }\n-\n-    boolean sortedSetContains(char... values) {\n-      for (char value : values) {\n-        if (!sortedSet.contains(value)) {\n-          return false;\n-        }\n-      }\n-      return true;      \n-    }\n-    \n-    public String getExpectedJson() {\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n-      sb.append(\"\\\"list\\\":\");\n-      append(sb, list).append(\",\");\n-      sb.append(\"\\\"queue\\\":\");\n-      append(sb, queue).append(\",\");\n-      sb.append(\"\\\"set\\\":\");\n-      append(sb, set).append(\",\");\n-      sb.append(\"\\\"sortedSet\\\":\");\n-      append(sb, sortedSet);\n-      sb.append(\"}\");\n-      return sb.toString();\n-    }\n-\n-    private StringBuilder append(StringBuilder sb, Collection<?> c) {\n-      sb.append(\"[\");\n-      boolean first = true;\n-      for (Object o : c) {\n-        if (!first) {\n-          sb.append(\",\");\n-        } else {\n-          first = false;\n-        }\n-        if (o instanceof String || o instanceof Character) {\n-          sb.append('\\\"');\n-        }\n-        sb.append(o.toString());\n-        if (o instanceof String || o instanceof Character) {\n-          sb.append('\\\"');\n-        }\n-      }\n-      sb.append(\"]\");\n-      return sb;\n-    }\n-  }\n \n   private static class ContainsReferenceToSelfType {\n     public Collection<ContainsReferenceToSelfType> children =\n         new ArrayList<ContainsReferenceToSelfType>();\n-  }\n-\n-  private static class SubTypeOfNested extends Nested {\n-    private final long value = 5;\n-\n-    // Used by Gson\n-    @SuppressWarnings(\"unused\")\n-    private SubTypeOfNested() {\n-      this(null, null);\n-    }\n-\n-    public SubTypeOfNested(BagOfPrimitives primitive1, BagOfPrimitives primitive2) {\n-      super(primitive1, primitive2);\n-    }\n-\n-    @Override\n-    public void appendFields(StringBuilder sb) {\n-      sb.append(\"\\\"value\\\":\").append(value).append(\",\");\n-      super.appendFields(sb);\n-    }\n   }\n \n   private static class ArrayOfArrays {", "timestamp": 1253908465, "metainfo": ""}