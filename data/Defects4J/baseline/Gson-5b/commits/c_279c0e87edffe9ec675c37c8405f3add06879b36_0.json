{"sha": "279c0e87edffe9ec675c37c8405f3add06879b36", "log": "Update Precondition checks and have it throw a NPE instead.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java\n+++ b/gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java\n   private final JsonElementVisitor delegate;\n \n   protected DelegatingJsonElementVisitor(JsonElementVisitor delegate) {\n-    Preconditions.checkNotNull(delegate);\n-    this.delegate = delegate;\n+    this.delegate = Preconditions.checkNotNull(delegate);\n   }\n \n   public void endArray(JsonArray array) throws IOException {\n--- a/gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java\n+++ b/gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java\n   private final Collection<ExclusionStrategy> strategies;\n \n   DisjunctionExclusionStrategy(Collection<ExclusionStrategy> strategies) {\n-    Preconditions.checkNotNull(strategies);\n-    this.strategies = strategies;\n+    this.strategies = Preconditions.checkNotNull(strategies);\n   }\n \n   public boolean shouldSkipField(FieldAttributes f) {\n--- a/gson/src/main/java/com/google/gson/FieldAttributes.java\n+++ b/gson/src/main/java/com/google/gson/FieldAttributes.java\n    * @param f the field to pull attributes from\n    */\n   FieldAttributes(final Class<?> declaringClazz, final Field f) {\n-    Preconditions.checkNotNull(declaringClazz);\n-    this.declaringClazz = declaringClazz;\n-    name = f.getName();\n-    declaredType = f.getType();\n-    isSynthetic = f.isSynthetic();\n-    modifiers = f.getModifiers();\n-    field = f;\n+    this.declaringClazz = Preconditions.checkNotNull(declaringClazz);\n+    this.name = f.getName();\n+    this.declaredType = f.getType();\n+    this.isSynthetic = f.isSynthetic();\n+    this.modifiers = f.getModifiers();\n+    this.field = f;\n   }\n \n   private static int getMaxCacheSize() {\n--- a/gson/src/main/java/com/google/gson/FieldNamingStrategy2Adapter.java\n+++ b/gson/src/main/java/com/google/gson/FieldNamingStrategy2Adapter.java\n   private final FieldNamingStrategy adaptee;\n \n   public FieldNamingStrategy2Adapter(FieldNamingStrategy adaptee) {\n-    Preconditions.checkNotNull(adaptee);\n-    this.adaptee = adaptee;\n+    this.adaptee = Preconditions.checkNotNull(adaptee);\n   }\n \n   public String translateName(FieldAttributes f) {\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n    * @since 1.7\n    */\n   public GsonBuilder setExclusionStrategies(Mode mode, ExclusionStrategy... strategies) {\n-    Preconditions.checkNotNull(mode);\n-    Set<ExclusionStrategy> strategySet = (mode == Mode.SERIALIZE) \n+    Set<ExclusionStrategy> strategySet = \n+        (Preconditions.checkNotNull(mode) == Mode.SERIALIZE) \n         ? serializeExclusionStrategies : deserializeExclusionStrategies;\n     strategySet.addAll(Arrays.asList(strategies));\n     return this;\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n       ObjectNavigatorFactory factory, ObjectConstructor objectConstructor,\n       ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n       JsonDeserializationContext context) {\n-    Preconditions.checkNotNull(json);\n     this.targetType = targetType;\n     this.factory = factory;\n     this.objectConstructor = objectConstructor;\n     this.deserializers = deserializers;\n-    this.json = json;\n+    this.json = Preconditions.checkNotNull(json);\n     this.context = context;\n     this.constructed = false;\n   }\n--- a/gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java\n    * @throws IllegalArgumentException if {@code delegate} is {@code null}.\n    */\n   JsonDeserializerExceptionWrapper(JsonDeserializer<T> delegate) {\n-    Preconditions.checkNotNull(delegate);\n-    this.delegate = delegate;\n+    this.delegate = Preconditions.checkNotNull(delegate);\n   }\n \n   public T deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n--- a/gson/src/main/java/com/google/gson/JsonObject.java\n+++ b/gson/src/main/java/com/google/gson/JsonObject.java\n    * @param value the member object.\n    */\n   public void add(String property, JsonElement value) {\n-    Preconditions.checkNotNull(property);\n     if (value == null) {\n       value = JsonNull.createJsonNull();\n     }\n-    members.put(property, value);\n+    members.put(Preconditions.checkNotNull(property), value);\n   }\n \n   /**\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n   }\n \n   private void assignToRoot(JsonElement newRoot) {\n-    Preconditions.checkNotNull(newRoot);\n-    root = newRoot;\n+    root = Preconditions.checkNotNull(newRoot);\n   }\n \n   private boolean isFieldNull(FieldAttributes f, Object obj) {\n--- a/gson/src/main/java/com/google/gson/MemoryRefStack.java\n+++ b/gson/src/main/java/com/google/gson/MemoryRefStack.java\n    */\n   public ObjectTypePair push(ObjectTypePair obj) {\n     Preconditions.checkNotNull(obj);\n-\n     return stack.push(obj);\n   }\n \n--- a/gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java\n+++ b/gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java\n    * @throws IllegalArgumentException if {@code modifier} is null\n    */\n   ModifyFirstLetterNamingPolicy(LetterModifier modifier) {\n-    Preconditions.checkNotNull(modifier);\n-    this.letterModifier = modifier;\n+    this.letterModifier = Preconditions.checkNotNull(modifier);\n   }\n \n   @Override\n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n    *          object.\n    */\n   ObjectNavigator(ObjectTypePair objTypePair, ExclusionStrategy exclusionStrategy) {\n-    Preconditions.checkNotNull(exclusionStrategy);\n-\n     this.objTypePair = objTypePair;\n-    this.exclusionStrategy = exclusionStrategy;\n+    this.exclusionStrategy = Preconditions.checkNotNull(exclusionStrategy);\n   }\n \n   /**\n--- a/gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java\n    *        names\n    */\n   public ObjectNavigatorFactory(ExclusionStrategy strategy, FieldNamingStrategy2 fieldNamingPolicy) {\n-    Preconditions.checkNotNull(fieldNamingPolicy);\n     this.strategy = (strategy == null ? new NullExclusionStrategy() : strategy);\n-    this.fieldNamingPolicy = fieldNamingPolicy;\n+    this.fieldNamingPolicy = Preconditions.checkNotNull(fieldNamingPolicy);\n   }\n \n   /**\n--- a/gson/src/main/java/com/google/gson/Preconditions.java\n+++ b/gson/src/main/java/com/google/gson/Preconditions.java\n  */\n final class Preconditions {\n   public static <T> T checkNotNull(T obj) {\n-    checkArgument(obj != null);\n+    if (obj == null) {\n+      throw new NullPointerException();\n+    }\n     return obj;\n   }\n \n--- a/gson/src/main/java/com/google/gson/Primitives.java\n+++ b/gson/src/main/java/com/google/gson/Primitives.java\n    * @see Class#isPrimitive\n    */\n   public static boolean isWrapperType(Class<?> type) {\n-    return WRAPPER_TO_PRIMITIVE_TYPE.containsKey(checkNotNull(type));\n-  }\n-\n-  private static Class<?> checkNotNull(Class<?> type) {\n-    Preconditions.checkNotNull(type);\n-    return type;\n+    return WRAPPER_TO_PRIMITIVE_TYPE.containsKey(\n+        Preconditions.checkNotNull(type));\n   }\n \n   /**\n    * </pre>\n    */\n   public static <T> Class<T> wrap(Class<T> type) {\n-    checkNotNull(type);\n-\n     // cast is safe: long.class and Long.class are both of type Class<Long>\n     @SuppressWarnings(\"unchecked\")\n-    Class<T> wrapped = (Class<T>) PRIMITIVE_TO_WRAPPER_TYPE.get(type);\n+    Class<T> wrapped = (Class<T>) PRIMITIVE_TO_WRAPPER_TYPE.get(\n+        Preconditions.checkNotNull(type));\n     return (wrapped == null) ? type : wrapped;\n   }\n \n    * </pre>\n    */\n   public static <T> Class<T> unwrap(Class<T> type) {\n-    checkNotNull(type);\n-\n     // cast is safe: long.class and Long.class are both of type Class<Long>\n     @SuppressWarnings(\"unchecked\")\n-    Class<T> unwrapped = (Class<T>) WRAPPER_TO_PRIMITIVE_TYPE.get(type);\n+    Class<T> unwrapped = (Class<T>) WRAPPER_TO_PRIMITIVE_TYPE.get(\n+        Preconditions.checkNotNull(type));\n     return (unwrapped == null) ? type : unwrapped;\n   }  \n }\n--- a/gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java\n+++ b/gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java\n abstract class RecursiveFieldNamingPolicy implements FieldNamingStrategy2 {\n \n   public final String translateName(FieldAttributes f) {\n-    Preconditions.checkNotNull(f);\n     return translateName(f.getName(), f.getDeclaredType(), f.getAnnotations());\n   }\n \n--- a/gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java\n+++ b/gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java\n   }\n \n   public String translateName(FieldAttributes f) {\n-    Preconditions.checkNotNull(f);\n     SerializedName serializedName = f.getAnnotation(SerializedName.class);\n     return serializedName == null ? delegate.translateName(f)\n         : fieldNameValidator.validate(serializedName.value());\n--- a/gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java\n+++ b/gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java\n     try {\n       new CamelCaseSeparatorNamingPolicy(null);\n       fail(\"Null separator string is not supported\");\n-    } catch (IllegalArgumentException expected) { }\n+    } catch (NullPointerException expected) { }\n \n     try {\n       new CamelCaseSeparatorNamingPolicy(\"\");\n--- a/gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java\n       List<ExclusionStrategy> constructorParam = null;\n       new DisjunctionExclusionStrategy(constructorParam);\n       fail(\"Should throw an exception\");\n-    } catch (IllegalArgumentException expected) { }\n+    } catch (NullPointerException expected) { }\n   }\n \n   public void testSkipFieldsWithMixedTrueAndFalse() throws Exception {\n--- a/gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java\n+++ b/gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java\n     try {\n       namingPolicy.translateName((FieldAttributes) null);\n       fail(\"Should have thrown an exception\");\n-    } catch (IllegalArgumentException expected) { }\n+    } catch (NullPointerException expected) { }\n   }\n }\n--- a/gson/src/test/java/com/google/gson/JsonObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonObjectTest.java\n     try {\n       jsonObj.add(null, JsonNull.createJsonNull());\n       fail(\"Should not allow null property names.\");\n-    } catch (IllegalArgumentException expected) { }\n+    } catch (NullPointerException expected) { }\n \n     jsonObj.add(\"\", JsonNull.createJsonNull());\n     jsonObj.add(\"   \\t\", JsonNull.createJsonNull());\n--- a/gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java\n+++ b/gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java\n     try {\n       new ModifyFirstLetterNamingPolicy(null);\n       fail(\"Null values are not allowed as a constructor parameters\");\n-    } catch (IllegalArgumentException expected) { }\n+    } catch (NullPointerException expected) { }\n   }\n \n   public void testLowerCaseFirstLetter() throws Exception {", "timestamp": 1300260224, "metainfo": ""}