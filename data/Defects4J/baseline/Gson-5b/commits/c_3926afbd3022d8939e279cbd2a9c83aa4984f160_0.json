{"sha": "3926afbd3022d8939e279cbd2a9c83aa4984f160", "log": "Removing unused files with the new Types class.", "commit": "\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/GenericArrayTypeTest.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import com.google.gson.reflect.TypeToken;\n+\n+import junit.framework.TestCase;\n+\n+import java.lang.reflect.GenericArrayType;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+\n+/**\n+ * Unit tests for the {@code GenericArrayType}s created by the {@link Types} class.\n+ *\n+ * @author Inderjeet Singh\n+ * @author Joel Leitch\n+ */\n+public class GenericArrayTypeTest extends TestCase {\n+  private GenericArrayType ourType;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    ourType = Types.arrayOf(Types.newParameterizedTypeWithOwner(null, List.class, String.class));\n+  }\n+\n+  public void testOurTypeFunctionality() throws Exception {\n+    Type parameterizedType = new TypeToken<List<String>>() {}.getType();\n+    Type genericArrayType = new TypeToken<List<String>[]>() {}.getType();\n+    \n+    assertEquals(parameterizedType, ourType.getGenericComponentType());\n+    assertEquals(genericArrayType, ourType);\n+    assertEquals(genericArrayType.hashCode(), ourType.hashCode());\n+  }\n+\n+  public void testNotEquals() throws Exception {\n+    Type differentGenericArrayType = new TypeToken<List<String>[][]>() {}.getType();\n+    assertFalse(differentGenericArrayType.equals(ourType));\n+    assertFalse(ourType.equals(differentGenericArrayType));\n+  }\n+}\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/ParameterizedTypeTest.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import com.google.gson.reflect.TypeToken;\n+\n+import junit.framework.TestCase;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+\n+/**\n+ * Unit tests for {@code ParamterizedType}s created by the {@link Types} class.\n+ *\n+ * @author Inderjeet Singh\n+ * @author Joel Leitch\n+ */\n+public class ParameterizedTypeTest extends TestCase {\n+  private ParameterizedType ourType;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    ourType = Types.newParameterizedTypeWithOwner(null, List.class, String.class);\n+  }\n+\n+  public void testOurTypeFunctionality() throws Exception {\n+    Type parameterizedType = new TypeToken<List<String>>() {}.getType();\n+    assertNull(ourType.getOwnerType());\n+    assertEquals(String.class, ourType.getActualTypeArguments()[0]);\n+    assertEquals(List.class, ourType.getRawType());\n+    assertEquals(parameterizedType, ourType);\n+    assertEquals(parameterizedType.hashCode(), ourType.hashCode());\n+  }\n+\n+  public void testNotEquals() throws Exception {\n+    Type differentParameterizedType = new TypeToken<List<Integer>>() {}.getType();\n+    assertFalse(differentParameterizedType.equals(ourType));\n+    assertFalse(ourType.equals(differentParameterizedType));\n+  }\n+}", "timestamp": 1294699662, "metainfo": ""}