{"sha": "fdcd3945c53c4a1c921ea8097cbecbbf154fa9e8", "log": "Fixed issue 147. Integral values (byte, short, integer, long, BigInteger) are now comparable to each other. Floating point values (float, double, BigDecimal) are now comparable to each other.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n \n   @Override\n   public int hashCode() {\n-    return (value == null) ? 31 : value.hashCode();\n+    if (value == null) {\n+      return 31;\n+    }\n+    // Using recommended hashing algorithm from Effective Java for longs and doubles\n+    if (isIntegral(this)) {\n+      long value = getAsNumber().longValue();\n+      return (int) (value ^ (value >>> 32));\n+    }\n+    if (isFloatingPoint(this)) {\n+      long value = Double.doubleToLongBits(getAsNumber().doubleValue());\n+      return (int) (value ^ (value >>> 32));\n+    }\n+    return value.hashCode();\n   }\n \n   @Override\n     if (value == null) {\n       return other.value == null;\n     }\n+    if (isIntegral(this) && isIntegral(other)) {\n+      return getAsNumber().longValue() == other.getAsNumber().longValue();\n+    }\n+    if (isFloatingPoint(this) && isFloatingPoint(other)) {\n+      return getAsNumber().doubleValue() == other.getAsNumber().doubleValue();\n+    }\n     return value.equals(other.value);\n   }  \n+  \n+  /**\n+   * Returns true if the specified number is an integral type \n+   * (Long, Integer, Short, Byte, BigInteger) \n+   */\n+  private static boolean isIntegral(JsonPrimitive primitive) {\n+    if (primitive.value instanceof Number) {\n+      Number number = (Number) primitive.value;\n+      return number instanceof BigInteger || number instanceof Long || number instanceof Integer \n+      || number instanceof Short || number instanceof Byte;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Returns true if the specified number is a floating point type (BigDecimal, double, float) \n+   */\n+  private static boolean isFloatingPoint(JsonPrimitive primitive) {\n+    if (primitive.value instanceof Number) {\n+      Number number = (Number) primitive.value;\n+      return number instanceof BigDecimal || number instanceof Double || number instanceof Float;\n+    }\n+    return false;\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java\n     } catch (NumberFormatException expected) { }\n   }\n   \n+  public void testByteEqualsShort() {\n+    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n+    JsonPrimitive p2 = new JsonPrimitive(new Short((short)10));\n+    assertEquals(p1, p2);\n+    assertEquals(p1.hashCode(), p2.hashCode());\n+  }\n+\n+  public void testByteEqualsInteger() {\n+    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n+    JsonPrimitive p2 = new JsonPrimitive(new Integer(10));\n+    assertEquals(p1, p2);\n+    assertEquals(p1.hashCode(), p2.hashCode());\n+  }\n+\n+  public void testByteEqualsLong() {\n+    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n+    JsonPrimitive p2 = new JsonPrimitive(new Long(10L));\n+    assertEquals(p1, p2);\n+    assertEquals(p1.hashCode(), p2.hashCode());\n+  }\n+\n+  public void testByteEqualsBigInteger() {\n+    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n+    JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\n+    assertEquals(p1, p2);\n+    assertEquals(p1.hashCode(), p2.hashCode());\n+  }\n+\n+  public void testShortEqualsInteger() {\n+    JsonPrimitive p1 = new JsonPrimitive(new Short((short)10));\n+    JsonPrimitive p2 = new JsonPrimitive(new Integer(10));\n+    assertEquals(p1, p2);\n+    assertEquals(p1.hashCode(), p2.hashCode());\n+  }\n+\n+  public void testShortEqualsLong() {\n+    JsonPrimitive p1 = new JsonPrimitive(new Short((short)10));\n+    JsonPrimitive p2 = new JsonPrimitive(new Long(10));\n+    assertEquals(p1, p2);\n+    assertEquals(p1.hashCode(), p2.hashCode());\n+  }\n+\n+  public void testShortEqualsBigInteger() {\n+    JsonPrimitive p1 = new JsonPrimitive(new Short((short)10));\n+    JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\n+    assertEquals(p1, p2);\n+    assertEquals(p1.hashCode(), p2.hashCode());\n+  }\n+\n+  public void testIntegerEqualsLong() {\n+    JsonPrimitive p1 = new JsonPrimitive(new Integer(10));\n+    JsonPrimitive p2 = new JsonPrimitive(new Long(10L));\n+    assertEquals(p1, p2);\n+    assertEquals(p1.hashCode(), p2.hashCode());\n+  }\n+\n+  public void testIntegerEqualsBigInteger() {\n+    JsonPrimitive p1 = new JsonPrimitive(new Integer(10));\n+    JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\n+    assertEquals(p1, p2);\n+    assertEquals(p1.hashCode(), p2.hashCode());\n+  }\n+\n+  public void testLongEqualsBigInteger() {\n+    JsonPrimitive p1 = new JsonPrimitive(new Long(10L));\n+    JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\n+    assertEquals(p1, p2);\n+    assertEquals(p1.hashCode(), p2.hashCode());\n+  }\n+\n+  public void testFloatEqualsDouble() {\n+    JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F));\n+    JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D));\n+    assertEquals(p1, p2);\n+    assertEquals(p1.hashCode(), p2.hashCode());\n+  }\n+\n+  public void testFloatEqualsBigDecimal() {\n+    JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F));\n+    JsonPrimitive p2 = new JsonPrimitive(new BigDecimal(\"10.25\"));\n+    assertEquals(p1, p2);\n+    assertEquals(p1.hashCode(), p2.hashCode());\n+  }\n+\n+  public void testDoubleEqualsBigDecimal() {\n+    JsonPrimitive p1 = new JsonPrimitive(new Double(10.25D));\n+    JsonPrimitive p2 = new JsonPrimitive(new BigDecimal(\"10.25\"));\n+    assertEquals(p1, p2);\n+    assertEquals(p1.hashCode(), p2.hashCode());\n+  }\n+  \n   public void testValidJsonOnToString() throws Exception {\n     JsonPrimitive json = new JsonPrimitive(\"Some\\nEscaped\\nValue\");\n     assertEquals(\"\\\"Some\\\\nEscaped\\\\nValue\\\"\", json.toString());", "timestamp": 1253732041, "metainfo": ""}