{"sha": "40045dc2e4c840f75f67e177f6df7247fb908c74", "log": "Added tests to ensure that subclass objects are serialized per their real type in lists or maps. Currently, this doesnt happen for List and hence the test is marked as disabled.", "commit": "\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+\n+import junit.framework.TestCase;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Tests for Gson serialization of a sub-class object while encountering a base-class type\n+ *\n+ * @author Inderjeet Singh\n+ */\n+@SuppressWarnings(\"unused\")\n+public class MoreSpecificTypeSerializationTest extends TestCase {\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new Gson();\n+  }\n+\n+  public void testSubclassFields() {\n+    ClassWithBaseFields target = new ClassWithBaseFields(new Sub(1, 2));\n+    String json = gson.toJson(target);\n+    assertTrue(json.contains(\"\\\"b\\\":1\"));\n+    assertTrue(json.contains(\"\\\"s\\\":2\"));\n+  }\n+\n+  public void disabled_testListOfSubclassFields() {\n+    Collection<Base> list = new ArrayList<Base>();\n+    list.add(new Base(1));\n+    list.add(new Sub(2, 3));\n+    ClassWithContainersOfBaseFields target = new ClassWithContainersOfBaseFields(list, null);\n+    String json = gson.toJson(target);\n+    assertTrue(json, json.contains(\"{\\\"b\\\":1}\"));\n+    assertTrue(json, json.contains(\"{\\\"b\\\":2,\\\"s\\\":3}\"));\n+  }\n+\n+  public void testMapOfSubclassFields() {\n+    Map<String, Base> map = new HashMap<String, Base>();\n+    map.put(\"base\", new Base(1));\n+    map.put(\"sub\", new Sub(2, 3));\n+    ClassWithContainersOfBaseFields target = new ClassWithContainersOfBaseFields(null, map);\n+    JsonObject json = gson.toJsonTree(target).getAsJsonObject().get(\"map\").getAsJsonObject();\n+    assertEquals(1, json.get(\"base\").getAsJsonObject().get(\"b\").getAsInt());\n+    JsonObject sub = json.get(\"sub\").getAsJsonObject();\n+    assertEquals(2, sub.get(\"b\").getAsInt());\n+    assertEquals(3, sub.get(\"s\").getAsInt());\n+  }\n+\n+  private static class Base {\n+    int b;\n+    Base(int b) {\n+      this.b = b;\n+    }\n+  }\n+\n+  private static class Sub extends Base {\n+    int s;\n+    Sub(int b, int s) {\n+      super(b);\n+      this.s = s;\n+    }\n+  }\n+\n+  private static class ClassWithBaseFields {\n+    Base b;\n+    ClassWithBaseFields(Base b) {\n+      this.b = b;\n+    }\n+  }\n+\n+  private static class ClassWithContainersOfBaseFields {\n+    Collection<Base> collection;\n+    Map<String, Base> map;\n+    ClassWithContainersOfBaseFields(Collection<Base> collection, Map<String, Base> map) {\n+      this.collection = collection;\n+      this.map = map;\n+    }\n+  }\n+}", "timestamp": 1303244776, "metainfo": ""}