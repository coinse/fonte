{"sha": "eaa43b76e44d2491dfbabb69e9d20beceffd9822", "log": "Added a custom type adapter for Collection class. We will migrate the code to use it instead of special cases for collections all over. This type adapter is called at a few places already.   Also added tests for verifying that Gson can handle serialization and deserialization of sub types of Maps. The deserialization test fails currently.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n   private static final UrlTypeAdapter URL_TYPE_ADAPTER = new UrlTypeAdapter();\n   private static final UriTypeAdapter URI_TYPE_ADAPTER = new UriTypeAdapter();\n   private static final LocaleTypeAdapter LOCALE_TYPE_ADAPTER = new LocaleTypeAdapter();\n+  private static final CollectionTypeAdapter COLLECTION_TYPE_ADAPTER = new CollectionTypeAdapter();\n   private static final MapTypeAdapter MAP_TYPE_ADAPTER = new MapTypeAdapter();\n   private static final BigDecimalTypeAdapter BIG_DECIMAL_TYPE_ADAPTER = new BigDecimalTypeAdapter();\n   private static final BigIntegerTypeAdapter BIG_INTEGER_TYPE_ADAPTER = new BigIntegerTypeAdapter();\n     map.register(URL.class, wrapSerializer(URL_TYPE_ADAPTER));\n     map.register(URI.class, wrapSerializer(URI_TYPE_ADAPTER));\n     map.register(Locale.class, wrapSerializer(LOCALE_TYPE_ADAPTER));\n+    map.register(Collection.class, COLLECTION_TYPE_ADAPTER);\n     map.register(Map.class, wrapSerializer(MAP_TYPE_ADAPTER));\n     map.register(Date.class, wrapSerializer(DATE_TYPE_ADAPTER));\n     map.register(BigDecimal.class, wrapSerializer(BIG_DECIMAL_TYPE_ADAPTER));\n     map.register(URL.class, wrapDeserializer(URL_TYPE_ADAPTER));\n     map.register(URI.class, wrapDeserializer(URI_TYPE_ADAPTER));\n     map.register(Locale.class, wrapDeserializer(LOCALE_TYPE_ADAPTER));\n+    map.register(Collection.class, wrapDeserializer(COLLECTION_TYPE_ADAPTER));\n     map.register(Map.class, wrapDeserializer(MAP_TYPE_ADAPTER));\n     map.register(Date.class, wrapDeserializer(DATE_TYPE_ADAPTER));\n     map.register(BigDecimal.class, wrapDeserializer(BIG_DECIMAL_TYPE_ADAPTER));\n     map.register(Enum.class, ENUM_TYPE_ADAPTER);\n     map.register(URL.class, URL_TYPE_ADAPTER);\n     map.register(Locale.class, LOCALE_TYPE_ADAPTER);\n+    map.register(Collection.class, COLLECTION_TYPE_ADAPTER);\n     map.register(Map.class, MAP_TYPE_ADAPTER);\n     map.register(BigDecimal.class, BIG_DECIMAL_TYPE_ADAPTER);\n     map.register(BigInteger.class, BIG_INTEGER_TYPE_ADAPTER);\n     }\n   }\n \n+  @SuppressWarnings({ \"unchecked\" })\n+  private static class CollectionTypeAdapter implements JsonSerializer<Collection>, JsonDeserializer<Collection>, InstanceCreator<Collection> {\n+\n+    public JsonElement serialize(Collection src, Type typeOfSrc, JsonSerializationContext context) {\n+      if (src == null) {\n+        return JsonNull.INSTANCE;\n+      }\n+      JsonArray array = new JsonArray();\n+      Type childGenericType = null;\n+      if (typeOfSrc instanceof ParameterizedType) {\n+        childGenericType = new TypeInfoCollection(typeOfSrc).getElementType();        \n+      }\n+      for (Object child : src) {\n+        Type childType = (childGenericType == null) ? \n+            childType = child.getClass() : childGenericType;\n+        JsonElement element = context.serialize(child, childType);\n+        array.add(element);\n+      }\n+      return array;\n+    }\n+\n+    public Collection deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+        throws JsonParseException {\n+      if (json.isJsonNull()) {\n+        return null;\n+      }\n+      // Using list to preserve order in which elements are entered\n+      List<Object> list = new LinkedList<Object>();\n+      Type childType = new TypeInfoCollection(typeOfT).getElementType();\n+      for (JsonElement childElement : json.getAsJsonArray()) {\n+        Object value = context.deserialize(childElement, childType);\n+        list.add(value);\n+      }\n+      return list;\n+    }\n+\n+    public Collection createInstance(Type type) {\n+      return new LinkedList();\n+    }    \n+  }\n+  \n   @SuppressWarnings(\"unchecked\")\n   static class MapTypeAdapter implements JsonSerializer<Map>, JsonDeserializer<Map>,\n       InstanceCreator<Map> {\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n package com.google.gson;\n \n import java.lang.reflect.Type;\n+import java.util.Collection;\n+import java.util.Map;\n import java.util.logging.Logger;\n \n /**\n \n   @SuppressWarnings(\"unchecked\")\n   public final boolean visitUsingCustomHandler(Object obj, Type objType) {\n-    JsonDeserializer<T> deserializer = (JsonDeserializer<T>) deserializers.getHandlerFor(objType);\n+    JsonDeserializer deserializer = (JsonDeserializer) deserializers.getHandlerFor(objType);\n+    if (deserializer == null) {\n+      if (objType instanceof Map) {\n+        deserializer = deserializers.getHandlerFor(Map.class);\n+      } else if (objType instanceof Collection) {\n+        deserializer = deserializers.getHandlerFor(Collection.class);\n+      }\n+    }\n     if (deserializer != null) {\n-      target = deserializer.deserialize(json, objType, context);\n+      target = (T) deserializer.deserialize(json, objType, context);\n       return true;\n     }\n     return false;\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n   @SuppressWarnings(\"unchecked\")\n   public boolean visitUsingCustomHandler(Object obj, Type objType) {\n     JsonSerializer serializer = serializers.getHandlerFor(objType);\n-    if (serializer == null && obj instanceof Map) {\n-      serializer = serializers.getHandlerFor(Map.class);\n+    if (serializer == null) {\n+      if (obj instanceof Map) {\n+        serializer = serializers.getHandlerFor(Map.class);\n+      } else if (obj instanceof Collection) {\n+        serializer = serializers.getHandlerFor(Collection.class);\n+      }\n     }\n     if (serializer != null) {\n       if (obj == null) {\n       if (serializer == null && obj instanceof Map) {\n         serializer = serializers.getHandlerFor(Map.class);\n       }\n+      if (serializer == null && obj instanceof Collection) {\n+        serializer = serializers.getHandlerFor(Collection.class);\n+      }\n       if (serializer != null) {\n         JsonElement child = serializer.serialize(obj, actualTypeOfField, context);\n         addChildAsElement(f, child);\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/TypeInfoCollection.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.util.Collection;\n+\n+/**\n+ * A convenience object for retrieving the map type information.\n+ *\n+ * @author Inderjeet Singh\n+ * @author Joel Leitch\n+ */\n+final class TypeInfoCollection {\n+  private final ParameterizedType collectionType;\n+\n+  public TypeInfoCollection(Type collectionType) {\n+    if (!(collectionType instanceof ParameterizedType)) {\n+      throw new IllegalArgumentException(\n+          \"Collection objects need to be parameterized unless you use a custom serializer. \"\n+              + \"Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType.\");\n+    }\n+    TypeInfo rawType = new TypeInfo(collectionType);\n+    Preconditions.checkArgument(Collection.class.isAssignableFrom(rawType.getRawClass()));\n+    this.collectionType = (ParameterizedType) collectionType;\n+  }\n+\n+  public Type getElementType() {\n+    return collectionType.getActualTypeArguments()[0];\n+  }\n+}\n--- a/gson/src/test/java/com/google/gson/functional/MapTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n import junit.framework.TestCase;\n \n import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.InstanceCreator;\n import com.google.gson.reflect.TypeToken;\n \n /**\n     String json = gson.toJson(map, typeOfMap);\n     assertEquals(\"{}\", json);\n   }\n+  \n+  public void testMapSubclassSerialization() {\n+    MyMap map = new MyMap();\n+    map.put(\"a\", \"b\");\n+    String json = gson.toJson(map);\n+    assertTrue(json.contains(\"\\\"a\\\":\\\"b\\\"\"));\n+  }\n+  \n+  public void testMapSubclassDeserialization() {\n+    Gson gson = new GsonBuilder().registerTypeAdapter(MyMap.class, new InstanceCreator<MyMap>(){\n+      public MyMap createInstance(Type type) {\n+        return new MyMap();\n+      }      \n+    }).create();\n+    String json = \"{\\\"a\\\":1,\\\"b\\\":2}\";\n+    MyMap map = gson.fromJson(json, MyMap.class);\n+    assertEquals(\"1\", map.get(\"a\")); \n+    assertEquals(\"2\", map.get(\"b\")); \n+  }\n+  \n+  private static class MyMap extends LinkedHashMap<String, String> {\n+    int foo = 10;\n+  }\n }", "timestamp": 1226619610, "metainfo": ""}