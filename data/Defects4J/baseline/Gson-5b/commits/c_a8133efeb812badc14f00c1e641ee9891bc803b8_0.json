{"sha": "a8133efeb812badc14f00c1e641ee9891bc803b8", "log": "removed old-style Collections type adapter since the new one covers all cases.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n   @SuppressWarnings(\"unchecked\")\n   private static final EnumTypeAdapter ENUM_TYPE_ADAPTER = new EnumTypeAdapter();\n   private static final BitSetTypeAdapter BIT_SET_ADAPTER = new BitSetTypeAdapter();\n-  private static final CollectionTypeAdapter COLLECTION_TYPE_ADAPTER = new CollectionTypeAdapter();\n   private static final MapTypeAdapter MAP_TYPE_ADAPTER = new MapTypeAdapter();\n \n   private static final ByteTypeAdapter BYTE_TYPE_ADAPTER = new ByteTypeAdapter();\n     ParameterizedTypeHandlerMap<JsonSerializer<?>> map =\n         new ParameterizedTypeHandlerMap<JsonSerializer<?>>();\n     map.registerForTypeHierarchy(Enum.class, ENUM_TYPE_ADAPTER, true);\n-    map.registerForTypeHierarchy(Collection.class, COLLECTION_TYPE_ADAPTER, true);\n     map.registerForTypeHierarchy(Map.class, MAP_TYPE_ADAPTER, true);\n     map.makeUnmodifiable();\n     return map;\n     ParameterizedTypeHandlerMap<JsonDeserializer<?>> map =\n         new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();\n     map.registerForTypeHierarchy(Enum.class, wrapDeserializer(ENUM_TYPE_ADAPTER), true);\n-    map.registerForTypeHierarchy(Collection.class, wrapDeserializer(COLLECTION_TYPE_ADAPTER), true);\n     map.registerForTypeHierarchy(Map.class, wrapDeserializer(MAP_TYPE_ADAPTER), true);\n     map.makeUnmodifiable();\n     return map;\n     }\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n-  private static final class CollectionTypeAdapter implements JsonSerializer<Collection>,\n-      JsonDeserializer<Collection> {\n-    public JsonElement serialize(Collection src, Type typeOfSrc, JsonSerializationContext context) {\n-      if (src == null) {\n-        return JsonNull.INSTANCE;\n-      }\n-      JsonArray array = new JsonArray();\n-      Type childGenericType = null;\n-      if (typeOfSrc instanceof ParameterizedType) {\n-        Class<?> rawTypeOfSrc = $Gson$Types.getRawType(typeOfSrc);\n-        childGenericType = $Gson$Types.getCollectionElementType(typeOfSrc, rawTypeOfSrc);\n-      }\n-      for (Object child : src) {\n-        if (child == null) {\n-          array.add(JsonNull.INSTANCE);\n-        } else {\n-          Type childType = (childGenericType == null || childGenericType == Object.class)\n-              ? child.getClass() : childGenericType;\n-          JsonElement element = context.serialize(child, childType, false, false);\n-          array.add(element);\n-        }\n-      }\n-      return array;\n-    }\n-\n-    public Collection deserialize(JsonElement json, Type typeOfT,\n-        JsonDeserializationContext context) throws JsonParseException {\n-      if (json.isJsonNull()) {\n-        return null;\n-      }\n-      // Use ObjectConstructor to create instance instead of hard-coding a specific type.\n-      // This handles cases where users are using their own subclass of Collection.\n-      Collection collection = constructCollectionType(typeOfT, context);\n-      Type childType = $Gson$Types.getCollectionElementType(typeOfT, $Gson$Types.getRawType(typeOfT));\n-      for (JsonElement childElement : json.getAsJsonArray()) {\n-        if (childElement == null || childElement.isJsonNull()) {\n-          collection.add(null);\n-        } else {\n-          Object value = context.deserialize(childElement, childType);\n-          collection.add(value);\n-        }\n-      }\n-      return collection;\n-    }\n-\n-    private Collection constructCollectionType(Type collectionType,\n-        JsonDeserializationContext context) {\n-      return context.construct(collectionType);\n-    }\n-  }\n-\n   private static final class NumberTypeAdapter\n       implements JsonSerializer<Number>, JsonDeserializer<Number> {\n     public JsonElement serialize(Number src, Type typeOfSrc, JsonSerializationContext context) {", "timestamp": 1315542177, "metainfo": ""}