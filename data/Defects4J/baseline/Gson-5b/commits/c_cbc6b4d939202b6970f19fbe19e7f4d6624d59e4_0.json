{"sha": "cbc6b4d939202b6970f19fbe19e7f4d6624d59e4", "log": "Added checks to ensure that we do not serialize NaN or postiive or negative infinity for doubles.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n   private static class DoubleTypeAdapter\n       implements InstanceCreator<Double>, JsonSerializer<Double>, JsonDeserializer<Double> {\n     public JsonElement serialize(Double src, Type typeOfSrc, JsonSerializationContext context) {\n+      if (Double.isNaN(src) || Double.isInfinite(src)) {\n+        throw new IllegalArgumentException(src + \" is not a valid double value as per JavaScript specification.\");\n+      }\n       return new JsonPrimitive(src);\n     }\n \n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n   private String extractElementFromArray(String json) {\n     return json.substring(json.indexOf('[') + 1, json.indexOf(']'));\n   }\n+  \n+  public void testNaNSerializationNotSupported() {\n+    try {\n+      double d = Double.NaN;\n+      gson.toJson(d);\n+      fail(\"Gson should not accept NaN for serialization\");\n+    } catch (IllegalArgumentException expected) {      \n+    }\n+  }\n+  \n+  public void testNaNDeserializationNotSupported() {\n+    try {\n+      String json = \"NaN\";\n+      assertEquals(Double.NaN, gson.fromJson(json, Double.class));\n+    } catch (JsonParseException expected) {      \n+    }\n+   }\n+\n+  public void testInfinitySerializationNotSupported() {\n+    try {\n+      double d = Double.POSITIVE_INFINITY;\n+      gson.toJson(d);\n+      fail(\"Gson should not accept positive infinity for serialization\");\n+    } catch (IllegalArgumentException expected) {      \n+    }\n+  }\n+  \n+  public void testInfinityDeserializationNotSupported() {\n+    try {\n+      String json = \"Infinity\";\n+      assertEquals(Double.POSITIVE_INFINITY, gson.fromJson(json, Double.class));\n+    } catch (JsonParseException expected) {      \n+    }\n+ }\n+  \n+  public void testNegativeInfinitySerializationNotSupported() {\n+    try {\n+      double d = Double.NEGATIVE_INFINITY;\n+      gson.toJson(d);\n+      fail(\"Gson should not accept positive infinity for serialization\");\n+    } catch (IllegalArgumentException expected) {      \n+    }\n+  }\n+  \n+  public void testNegativeInfinityDeserializationNotSupported() {\n+    try {\n+      String json = \"-Infinity\";\n+      assertEquals(Double.NEGATIVE_INFINITY, gson.fromJson(json, Double.class));\n+    } catch (JsonParseException expected) {      \n+    }\n+  }\n }", "timestamp": 1229630427, "metainfo": ""}