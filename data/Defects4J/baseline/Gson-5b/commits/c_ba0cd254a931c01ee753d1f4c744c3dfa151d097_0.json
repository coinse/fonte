{"sha": "ba0cd254a931c01ee753d1f4c744c3dfa151d097", "log": "Clean up warnings.", "commit": "\n--- a/gson/src/main/java/com/google/gson/FieldNamingStrategy2Adapter.java\n+++ b/gson/src/main/java/com/google/gson/FieldNamingStrategy2Adapter.java\n     Preconditions.checkNotNull(adaptee);\n     this.adaptee = adaptee;\n   }\n-  \n-  @SuppressWarnings(\"deprecation\")\n+\n   public String translateName(FieldAttributes f) {\n     return adaptee.translateName(f.getFieldObject());\n   }\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n    * @since 1.4\n    */\n   public JsonElement toJsonTree(Object src, Type typeOfSrc) {\n-    if (src == null) {\n-      return JsonNull.createJsonNull();\n-    }\n     JsonSerializationContextDefault context = new JsonSerializationContextDefault(\n         createDefaultObjectNavigatorFactory(serializationExclusionStrategy), serializeNulls, serializers);\n-    return context.serialize(src, typeOfSrc, true);\n+    return context.serialize(src, typeOfSrc);\n   }\n \n   /**\n--- a/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n   }\n \n   public JsonElement serialize(Object src, Type typeOfSrc) {\n+    if (src == null) {\n+      return JsonNull.createJsonNull();\n+    }\n     return serialize(src, typeOfSrc, true);\n   }\n \n-  public JsonElement serialize(Object src, Type typeOfSrc, boolean preserveType) {\n+  JsonElement serialize(Object src, Type typeOfSrc, boolean preserveType) {\n     ObjectNavigator on = factory.create(new ObjectTypePair(src, typeOfSrc, preserveType));\n     JsonSerializationVisitor visitor =\n         new JsonSerializationVisitor(factory, serializeNulls, serializers, this, ancestors);\n--- a/gson/src/main/java/com/google/gson/Preconditions.java\n+++ b/gson/src/main/java/com/google/gson/Preconditions.java\n  * @author Joel Leitch\n  */\n final class Preconditions {\n-  public static void checkNotNull(Object obj) {\n+  public static <T> T checkNotNull(T obj) {\n     checkArgument(obj != null);\n+    return obj;\n   }\n \n   public static void checkArgument(boolean condition) {\n--- a/gson/src/main/java/com/google/gson/Types.java\n+++ b/gson/src/main/java/com/google/gson/Types.java\n    * Returns the declaring class of {@code typeVariable}, or {@code null} if it was not declared by\n    * a class.\n    */\n-  @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+  @SuppressWarnings(\"unchecked\")\n   private static Class<?> declaringClassOf(TypeVariable typeVariable) {\n     GenericDeclaration genericDeclaration = typeVariable.getGenericDeclaration();\n     return genericDeclaration instanceof Class\n     private final Type rawType;\n     private final Type[] typeArguments;\n \n-    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    @SuppressWarnings(\"unchecked\")\n     public ParameterizedTypeImpl(Type ownerType, Type rawType, Type... typeArguments) {\n       // require an owner type if the raw type needs it\n       if (rawType instanceof Class<?>) {\n--- a/gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java\n     gson = new Gson();\n   }\n \n-  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+  @SuppressWarnings(\"unchecked\")\n   public void testCompactFormattingLeavesNoWhiteSpace() {\n     List list = new ArrayList();\n     list.add(new BagOfPrimitives());", "timestamp": 1300203497, "metainfo": ""}