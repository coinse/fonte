{"sha": "3d1f7251c1285148481a2cde6d2a8e9bbcaae158", "log": "Added tests to reproduce issue 103. The tests pass at the moment, so we need more information in the bugreport.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java\n import junit.framework.TestCase;\n \n import java.io.Reader;\n+import java.io.Serializable;\n import java.io.StringReader;\n import java.io.StringWriter;\n import java.io.Writer;\n       return true;\n     }\n   }\n+  \n+  // Begin: tests to reproduce issue 103\n+  private static class Quantity {\n+    int q = 10;\n+  }\n+  private static class MyQuantity extends Quantity {\n+    int q2 = 20;\n+  }\n+  private interface Measurable<T> {    \n+  }\n+  private interface Field<T> {    \n+  }\n+  private interface Immutable {    \n+  }\n+  \n+  public static final class Amount<Q extends Quantity> implements\n+      Measurable<Q>, Field<Amount<?>>, Serializable, Immutable {\n+    int value = 30;\n+  }\n+  \n+  public void testDeepParameterizedTypeSerialization() {\n+    Amount<MyQuantity> amount = new Amount<MyQuantity>();\n+    String json = gson.toJson(amount);\n+    assertTrue(json.contains(\"value\"));\n+    assertTrue(json.contains(\"30\"));    \n+  }\n+  \n+  public void testDeepParameterizedTypeDeserialization() {\n+    String json = \"{value:30}\";\n+    Type type = new TypeToken<Amount<MyQuantity>>() {}.getType();    \n+    Amount<MyQuantity> amount = gson.fromJson(json, type);\n+    assertEquals(30, amount.value);\n+  }\n+  // End: tests to reproduce issue 103\n }", "timestamp": 1236819870, "metainfo": ""}