{"sha": "37abcf36379f9f24efb2dea8b4d1dd1577a10db1", "log": "Break 203 tests and adopt the new stream binding internally. Test fixes coming soon...", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n \n package com.google.gson;\n \n+import com.google.gson.internal.bind.MiniGson;\n+import com.google.gson.internal.bind.TypeAdapter;\n+import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n import com.google.gson.stream.MalformedJsonException;\n-\n import java.io.IOException;\n import java.io.Reader;\n import java.io.StringReader;\n   private final boolean htmlSafe;\n   private final boolean generateNonExecutableJson;\n   private final boolean prettyPrinting;\n+\n+  private final MiniGson miniGson;\n \n   /**\n    * Constructs a Gson object with default configuration. The default configuration has the\n     this.generateNonExecutableJson = generateNonExecutableGson;\n     this.htmlSafe = htmlSafe;\n     this.prettyPrinting = prettyPrinting;\n+\n+    /*\n+      TODO: for serialization, honor:\n+        serializationExclusionStrategy\n+        fieldNamingPolicy\n+        serializeNulls\n+        serializers\n+     */\n+    this.miniGson = new MiniGson.Builder()\n+        .build();\n   }\n \n   private static ExclusionStrategy createExclusionStrategy() {\n    * @return Json representation of {@code src}\n    * @since 1.4\n    */\n+  @SuppressWarnings(\"unchecked\") // the caller is required to make src and typeOfSrc consistent\n   public JsonElement toJsonTree(Object src, Type typeOfSrc) {\n-    JsonSerializationContext context = new JsonSerializationContext(\n-        new ObjectNavigator(serializationExclusionStrategy), fieldNamingPolicy,\n-        serializeNulls, serializers);\n-    return context.serialize(src, typeOfSrc);\n+    // Serialize 'src' to JSON, then deserialize that to a JSON tree.\n+    TypeAdapter adapter = miniGson.getAdapter(TypeToken.get(typeOfSrc));\n+    StringWriter writer = new StringWriter();\n+    try {\n+      adapter.write(writer, src);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    return Streams.parse(new JsonReader(new StringReader(writer.toString())));\n   }\n \n   /**", "timestamp": 1312331282, "metainfo": ""}