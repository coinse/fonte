{"sha": "8567fe6c101f2472662b9362b880a55fc3dcca15", "log": "Implementing code review comment from r428: Using Polymorphism for exclusion strategies for expose annotations.", "commit": "\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategy.java\n+/*\n+ * Copyright (C) 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson;\n+\n+import java.lang.reflect.Field;\n+\n+import com.google.gson.annotations.Expose;\n+\n+/**\n+ * Excludes fields that do not have the {@link Expose} annotation\n+ * \n+ * @author Inderjeet Singh\n+ * @author Joel Leitch\n+ */\n+final class ExposeAnnotationDeserializationExclusionStrategy implements ExclusionStrategy {\n+\n+  public boolean shouldSkipClass(Class<?> clazz) {\n+    return false;\n+  }\n+\n+  public boolean shouldSkipField(Field f) {\n+    Expose annotation = f.getAnnotation(Expose.class);\n+    if (annotation == null) {\n+      return true;\n+    }\n+    return !annotation.deserialize();\n+  }\n+}\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategy.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import com.google.gson.annotations.Expose;\n+\n+import java.lang.reflect.Field;\n+\n+/**\n+ * Excludes fields that do not have the {@link Expose} annotation\n+ * \n+ * @author Inderjeet Singh\n+ * @author Joel Leitch\n+ */\n+final class ExposeAnnotationSerializationExclusionStrategy implements ExclusionStrategy {\n+\n+  public boolean shouldSkipClass(Class<?> clazz) {\n+    return false;\n+  }\n+\n+  public boolean shouldSkipField(Field f) {\n+    Expose annotation = f.getAnnotation(Expose.class);\n+    if (annotation == null) {\n+      return true;\n+    }\n+    return !annotation.serialize();\n+  }\n+}\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n import java.util.List;\n \n import com.google.gson.DefaultTypeAdapters.DefaultDateTypeAdapter;\n-import com.google.gson.ExposeAnnotationBasedExclusionStrategy.Phase;\n \n /**\n  * <p>Use this builder to construct a {@link Gson} instance when you need to set configuration\n       new AnonymousAndLocalClassExclusionStrategy();\n   private static final InnerClassExclusionStrategy innerClassExclusionStrategy =\n       new InnerClassExclusionStrategy();\n-  private static final ExposeAnnotationBasedExclusionStrategy \n+  private static final ExposeAnnotationSerializationExclusionStrategy \n     exposeAnnotationSerializationExclusionStrategy =\n-      new ExposeAnnotationBasedExclusionStrategy(Phase.SERIALIZATION);\n-  private static final ExposeAnnotationBasedExclusionStrategy \n+      new ExposeAnnotationSerializationExclusionStrategy();\n+  private static final ExposeAnnotationDeserializationExclusionStrategy \n     exposeAnnotationDeserializationExclusionStrategy =\n-      new ExposeAnnotationBasedExclusionStrategy(Phase.DESERIALIZATION);\n+      new ExposeAnnotationDeserializationExclusionStrategy();\n   \n   private double ignoreVersionsAfter;\n   private ModifierBasedExclusionStrategy modifierBasedExclusionStrategy;\n--- a/gson/src/main/java/com/google/gson/JsonPrintFormatter.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrintFormatter.java\n package com.google.gson;\n \n import java.io.IOException;\n-import java.util.Stack;\n \n /**\n  * Formats Json in a nicely indented way with a specified print margin.\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import java.lang.reflect.Field;\n+\n+import junit.framework.TestCase;\n+\n+import com.google.gson.annotations.Expose;\n+\n+/**\n+ * Unit tests for the {@link ExposeAnnotationDeserializationExclusionStrategy} class.\n+ *\n+ * @author Joel Leitch\n+ */\n+public class ExposeAnnotationDeserializationExclusionStrategyTest extends TestCase {\n+  private ExposeAnnotationDeserializationExclusionStrategy strategy;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    strategy = new ExposeAnnotationDeserializationExclusionStrategy();\n+  }\n+\n+  public void testNeverSkipClasses() throws Exception {\n+    assertFalse(strategy.shouldSkipClass(MockObject.class));\n+  }\n+  \n+  public void testSkipNonAnnotatedFields() throws Exception {\n+    Field f = MockObject.class.getField(\"hiddenField\");\n+    assertTrue(strategy.shouldSkipField(f));\n+  }\n+  \n+  public void testSkipExplicitlySkippedFields() throws Exception {\n+    Field f = MockObject.class.getField(\"explicitlyHiddenField\");\n+    assertTrue(strategy.shouldSkipField(f));\n+  }\n+  \n+  public void testNeverSkipExposedAnnotatedFields() throws Exception {\n+    Field f = MockObject.class.getField(\"exposedField\");\n+    assertFalse(strategy.shouldSkipField(f));\n+  }\n+\n+  public void testNeverSkipExplicitlyExposedAnnotatedFields() throws Exception {\n+    Field f = MockObject.class.getField(\"explicitlyExposedField\");\n+    assertFalse(strategy.shouldSkipField(f));\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class MockObject {\n+    @Expose\n+    public final int exposedField = 0;\n+\n+    @Expose(deserialize=true)\n+    public final int explicitlyExposedField = 0;\n+    \n+    @Expose(deserialize=false)\n+    public final int explicitlyHiddenField = 0;\n+\n+    public final int hiddenField = 0;\n+  }\n+}\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import java.lang.reflect.Field;\n+\n+import junit.framework.TestCase;\n+\n+import com.google.gson.annotations.Expose;\n+\n+/**\n+ * Unit tests for the {@link ExposeAnnotationSerializationExclusionStrategy} class.\n+ *\n+ * @author Joel Leitch\n+ */\n+public class ExposeAnnotationSerializationExclusionStrategyTest extends TestCase {\n+  private ExposeAnnotationSerializationExclusionStrategy strategy;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    strategy = new ExposeAnnotationSerializationExclusionStrategy();\n+  }\n+\n+  public void testNeverSkipClasses() throws Exception {\n+    assertFalse(strategy.shouldSkipClass(MockObject.class));\n+  }\n+  \n+  public void testSkipNonAnnotatedFields() throws Exception {\n+    Field f = MockObject.class.getField(\"hiddenField\");\n+    assertTrue(strategy.shouldSkipField(f));\n+  }\n+  \n+  public void testSkipExplicitlySkippedFields() throws Exception {\n+    Field f = MockObject.class.getField(\"explicitlyHiddenField\");\n+    assertTrue(strategy.shouldSkipField(f));\n+  }\n+  \n+  public void testNeverSkipExposedAnnotatedFields() throws Exception {\n+    Field f = MockObject.class.getField(\"exposedField\");\n+    assertFalse(strategy.shouldSkipField(f));\n+  }\n+\n+  public void testNeverSkipExplicitlyExposedAnnotatedFields() throws Exception {\n+    Field f = MockObject.class.getField(\"explicitlyExposedField\");\n+    assertFalse(strategy.shouldSkipField(f));\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class MockObject {\n+    @Expose\n+    public final int exposedField = 0;\n+\n+    @Expose(serialize=true)\n+    public final int explicitlyExposedField = 0;\n+    \n+    @Expose(serialize=false)\n+    public final int explicitlyHiddenField = 0;\n+\n+    public final int hiddenField = 0;\n+  }\n+}", "timestamp": 1254361077, "metainfo": ""}