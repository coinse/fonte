{"sha": "73d93e332251ccf3619b3b6d2e7b1529e902e78d", "log": "Provide a setting to allow a client to skip the escaping of special HTML characters.  As well, remove the \"/\" from the list of special HTML characters since it is causing some incompatibilities.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Escaper.java\n+++ b/gson/src/main/java/com/google/gson/Escaper.java\n  */\n class Escaper {\n \n-  static final char[] HEX_CHARS = {\n+  private static final char[] HEX_CHARS = {\n     '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'\n   };\n \n   private static final Set<Character> JS_ESCAPE_CHARS;\n+  private static final Set<Character> HTML_ESCAPE_CHARS;\n \n   static {\n-    Set<Character> tmpSet = new HashSet<Character>();\n-    tmpSet.add('\\u0000');\n-    tmpSet.add('\\r');\n-    tmpSet.add('\\n');\n-    tmpSet.add('\\u2028');\n-    tmpSet.add('\\u2029');\n-    tmpSet.add('\\u0085');\n-    tmpSet.add('\\'');\n-    tmpSet.add('\"');\n-    tmpSet.add('<');\n-    tmpSet.add('>');\n-    tmpSet.add('&');\n-    tmpSet.add('=');\n-    tmpSet.add('/');\n-    tmpSet.add('\\\\');\n-    JS_ESCAPE_CHARS = Collections.unmodifiableSet(tmpSet);\n+    Set<Character> mandatoryEscapeSet = new HashSet<Character>();\n+    mandatoryEscapeSet.add('\"');\n+    mandatoryEscapeSet.add('\\\\');\n+    JS_ESCAPE_CHARS = Collections.unmodifiableSet(mandatoryEscapeSet);\n+\n+    Set<Character> htmlEscapeSet = new HashSet<Character>();\n+    htmlEscapeSet.add('<');\n+    htmlEscapeSet.add('>');\n+    htmlEscapeSet.add('&');\n+    htmlEscapeSet.add('=');\n+ //   htmlEscapeSet.add('/');  -- Removing slash for now since it causes some incompatibilities\n+    HTML_ESCAPE_CHARS = Collections.unmodifiableSet(htmlEscapeSet);\n   }\n \n-  public static String escapeJsonString(CharSequence plainText) {\n+  private final boolean escapeHtmlCharacters;\n+  \n+  Escaper(boolean escapeHtmlCharacters) {\n+    this.escapeHtmlCharacters = escapeHtmlCharacters;\n+  }\n+  \n+  public String escapeJsonString(CharSequence plainText) {\n     StringBuffer escapedString = new StringBuffer(plainText.length() + 20);\n     try {\n       escapeJsonString(plainText, escapedString);\n     return escapedString.toString();\n   }\n \n-  private static void escapeJsonString(CharSequence plainText, StringBuffer out) throws IOException {\n+  private void escapeJsonString(CharSequence plainText, StringBuffer out) throws IOException {\n     int pos = 0;  // Index just past the last char in plainText written to out.\n     int len = plainText.length();\n-     for (int charCount, i = 0; i < len; i += charCount) {\n-       int codePoint = Character.codePointAt(plainText, i);\n-       charCount = Character.charCount(codePoint);\n+    \n+    for (int charCount, i = 0; i < len; i += charCount) {\n+      int codePoint = Character.codePointAt(plainText, i);\n+      charCount = Character.charCount(codePoint);\n+      \n+       if (!isControlCharacter(codePoint) && !mustEscapeCharInJsString(codePoint)) {\n+          continue;\n+       }\n \n-         if (!isControlCharacter(codePoint) && !mustEscapeCharInJsString(codePoint)) {\n-            continue;\n-         }\n-\n-         out.append(plainText, pos, i);\n-         pos = i + charCount;\n-         switch (codePoint) {\n-           case '\\b':\n-             out.append(\"\\\\b\");\n-             break;\n-           case '\\t':\n-             out.append(\"\\\\t\");\n-             break;\n-           case '\\n':\n-             out.append(\"\\\\n\");\n-             break;\n-           case '\\f':\n-             out.append(\"\\\\f\");\n-             break;\n-           case '\\r':\n-             out.append(\"\\\\r\");\n-             break;\n-           case '\\\\':\n-             out.append(\"\\\\\\\\\");\n-             break;\n-           case '/':\n-             out.append(\"\\\\/\");\n-             break;\n-           case '\"':\n-             out.append('\\\\').append((char) codePoint);\n-             break;\n-           case '\\'':\n-             out.append((char) codePoint);\n-             break;\n-           default:\n-             appendHexJavaScriptRepresentation(codePoint, out);\n-             break;\n-         }\n+       out.append(plainText, pos, i);\n+       pos = i + charCount;\n+       switch (codePoint) {\n+         case '\\b':\n+           out.append(\"\\\\b\");\n+           break;\n+         case '\\t':\n+           out.append(\"\\\\t\");\n+           break;\n+         case '\\n':\n+           out.append(\"\\\\n\");\n+           break;\n+         case '\\f':\n+           out.append(\"\\\\f\");\n+           break;\n+         case '\\r':\n+           out.append(\"\\\\r\");\n+           break;\n+         case '\\\\':\n+           out.append(\"\\\\\\\\\");\n+           break;\n+         case '/':\n+           out.append(\"\\\\/\");\n+           break;\n+         case '\"':\n+           out.append('\\\\').append((char) codePoint);\n+           break;\n+         default:\n+           appendHexJavaScriptRepresentation(codePoint, out);\n+           break;\n+       }\n      }\n      out.append(plainText, pos, len);\n+  }\n+  \n+  private boolean mustEscapeCharInJsString(int codepoint) {\n+    if (!Character.isSupplementaryCodePoint(codepoint)) {\n+      char c = (char) codepoint;\n+      return JS_ESCAPE_CHARS.contains(c)\n+          || (escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains(c));\n+    } else {\n+      return false;\n+    }\n   }\n \n   private static boolean isControlCharacter(int codePoint) {\n         .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n         .append(HEX_CHARS[codePoint & 0xf]);\n   }\n-\n-  private static boolean mustEscapeCharInJsString(int codepoint) {\n-    if (!Character.isSupplementaryCodePoint(codepoint)) {\n-      return JS_ESCAPE_CHARS.contains((char)codepoint);\n-    } else {\n-      return false;\n-    }\n-  }\n }\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n     setFormatter(new JsonPrintFormatter());\n     return this;\n   }\n+  \n+  /**\n+   * Configures Gson to output Json that fits in a page for pretty printing. This option only\n+   * affects Json serialization.\n+   *\n+   * @param escapeHtmlChars true if specific HTML characters should be escaped\n+   * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n+   * @since 1.3\n+   */\n+  public GsonBuilder setPrettyPrinting(boolean escapeHtmlChars) {\n+    setFormatter(new JsonPrintFormatter(escapeHtmlChars));\n+    return this;\n+  }\n+  \n+  /**\n+   * Configures Gson to output Json in a compact format.\n+   *\n+   * @param escapeHtmlChars true if specific HTML characters should be escaped\n+   * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n+   * @since 1.3\n+   */\n+  public GsonBuilder setCompactPrinting(boolean escapeHtmlChars) {\n+    setFormatter(new JsonCompactFormatter(escapeHtmlChars));\n+    return this;\n+  }\n \n   /**\n    * Configures Gson with a new formatting strategy other than the default strategy. The default\n--- a/gson/src/main/java/com/google/gson/JsonCompactFormatter.java\n+++ b/gson/src/main/java/com/google/gson/JsonCompactFormatter.java\n       writer.append('}');\n     }\n   }\n+  \n+  private final boolean escapeHtmlChars;\n+\n+  JsonCompactFormatter() {\n+    this(true);\n+  }\n+  \n+  JsonCompactFormatter(boolean escapeHtmlChars) {\n+    this.escapeHtmlChars = escapeHtmlChars;\n+  }\n \n   public void format(JsonElement root, Appendable writer, \n       boolean serializeNulls) throws IOException {\n     if (root == null) {\n       return;\n     }\n-    JsonElementVisitor visitor = \n-      new JsonEscapingVisitor(new FormattingVisitor(writer, serializeNulls));\n+    JsonElementVisitor visitor = new JsonEscapingVisitor(\n+        new FormattingVisitor(writer, serializeNulls), escapeHtmlChars);\n     JsonTreeNavigator navigator = new JsonTreeNavigator(visitor, serializeNulls);\n     navigator.navigate(root);\n   }\n--- a/gson/src/main/java/com/google/gson/JsonEscapingVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonEscapingVisitor.java\n  * @author Joel Leitch\n  */\n class JsonEscapingVisitor extends DelegatingJsonElementVisitor {\n+  private final Escaper escaper;\n \n   /**\n    * Constructs a Visitor that will properly escape any JSON primitive values.\n    *\n    * @param delegate the JsonElementVisitor that this instance will use for delegation\n    */\n-  protected JsonEscapingVisitor(JsonElementVisitor delegate) {\n+  protected JsonEscapingVisitor(JsonElementVisitor delegate, boolean escapeHtmlChars) {\n+    this(delegate, new Escaper(escapeHtmlChars));\n+  }\n+  \n+  protected JsonEscapingVisitor(JsonElementVisitor delegate, Escaper escaper) {\n     super(delegate);\n+    this.escaper = escaper;\n   }\n \n   @Override\n   private JsonPrimitive escapeJsonPrimitive(JsonPrimitive member) {\n     if (member.isString()) {\n       String memberValue = member.getAsString();\n-      String escapedValue = Escaper.escapeJsonString(memberValue);\n+      String escapedValue = escaper.escapeJsonString(memberValue);\n       if (!escapedValue.equals(memberValue)) {\n         member.setValue(escapedValue);\n       }\n--- a/gson/src/main/java/com/google/gson/JsonPrintFormatter.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrintFormatter.java\n   private final int printMargin;\n   private final int indentationSize;\n   private final int rightMargin;\n+  private final boolean escapeHtmlChars;\n \n   public static final int DEFAULT_PRINT_MARGIN = 80;\n   public static final int DEFAULT_INDENTATION_SIZE = 2;\n   public static final int DEFAULT_RIGHT_MARGIN = 4;\n \n-  public JsonPrintFormatter() {\n-    this(DEFAULT_PRINT_MARGIN, DEFAULT_INDENTATION_SIZE, DEFAULT_RIGHT_MARGIN);\n-  }\n-\n-  public JsonPrintFormatter(int printMargin, int indentationSize, int rightMargin) {\n+  JsonPrintFormatter() {\n+    this(true);\n+  }\n+  \n+  JsonPrintFormatter(boolean escapeHtmlChars) {\n+    this(DEFAULT_PRINT_MARGIN, DEFAULT_INDENTATION_SIZE, DEFAULT_RIGHT_MARGIN, escapeHtmlChars);\n+  }\n+\n+  JsonPrintFormatter(int printMargin, int indentationSize, int rightMargin,\n+      boolean escapeHtmlChars) {\n     this.printMargin = printMargin;\n     this.indentationSize = indentationSize;\n     this.rightMargin = rightMargin;\n+    this.escapeHtmlChars = escapeHtmlChars;\n   }\n \n   private class JsonWriter {\n       return;\n     }\n     JsonWriter jsonWriter = new JsonWriter(writer);\n-    JsonElementVisitor visitor = \n-      new JsonEscapingVisitor(new PrintFormattingVisitor(jsonWriter, serializeNulls));    \n+    JsonElementVisitor visitor = new JsonEscapingVisitor(\n+        new PrintFormattingVisitor(jsonWriter, serializeNulls), escapeHtmlChars);    \n     JsonTreeNavigator navigator = new JsonTreeNavigator(visitor, serializeNulls);\n     navigator.navigate(root);\n     jsonWriter.finishLine();\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/TestCharacters.java\n+package com.google.gson;\n+\n+public class TestCharacters {\n+\n+  public static void main(String[] args) {\n+    System.out.println(\"\\\\b: \" + Character.codePointAt(\"\\b\", 0));\n+    System.out.println(\"\\\\r: \" + Character.codePointAt(\"\\r\", 0));\n+    System.out.println(\"\\\\n: \" + Character.codePointAt(\"\\n\", 0));\n+    System.out.println(\"\\\\t: \" + Character.codePointAt(\"\\t\", 0));\n+    System.out.println(\"': \" + Character.codePointAt(\"'\", 0));\n+  }\n+}\n--- a/gson/src/test/java/com/google/gson/EscaperTest.java\n+++ b/gson/src/test/java/com/google/gson/EscaperTest.java\n  */\n public class EscaperTest extends TestCase {\n \n+  private Escaper escapeHtmlChar;\n+  private Escaper noEscapeHtmlChar;\n+  \n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    escapeHtmlChar = new Escaper(true);\n+    noEscapeHtmlChar = new Escaper(false);\n+  }\n+\n   public void testNoSpecialCharacters() {\n     String value = \"Testing123\";\n-    String escapedString = Escaper.escapeJsonString(value);\n+    String escapedString = escapeHtmlChar.escapeJsonString(value);\n     assertEquals(value, escapedString);\n   }\n \n   public void testNewlineEscaping() throws Exception {\n     String containsNewline = \"123\\n456\";\n-    String escapedString = Escaper.escapeJsonString(containsNewline);\n+    String escapedString = escapeHtmlChar.escapeJsonString(containsNewline);\n     assertEquals(\"123\\\\n456\", escapedString);\n   }\n \n   public void testCarrageReturnEscaping() throws Exception {\n     String containsCarrageReturn = \"123\\r456\";\n-    String escapedString = Escaper.escapeJsonString(containsCarrageReturn);\n+    String escapedString = escapeHtmlChar.escapeJsonString(containsCarrageReturn);\n     assertEquals(\"123\\\\r456\", escapedString);\n   }\n \n   public void testTabEscaping() throws Exception {\n     String containsTab = \"123\\t456\";\n-    String escapedString = Escaper.escapeJsonString(containsTab);\n+    String escapedString = escapeHtmlChar.escapeJsonString(containsTab);\n     assertEquals(\"123\\\\t456\", escapedString);\n   }\n \n   public void testQuoteEscaping() throws Exception {\n     String containsQuote = \"123\\\"456\";\n-    String escapedString = Escaper.escapeJsonString(containsQuote);\n+    String escapedString = escapeHtmlChar.escapeJsonString(containsQuote);\n     assertEquals(\"123\\\\\\\"456\", escapedString);\n   }\n \n   public void testLineSeparatorEscaping() throws Exception {\n     String src = \"123\\u2028 456\";\n-    String escapedString = Escaper.escapeJsonString(src);\n+    String escapedString = escapeHtmlChar.escapeJsonString(src);\n     assertEquals(\"123\\\\u2028 456\", escapedString);\n   }\n \n   public void testParagraphSeparatorEscaping() throws Exception {\n     String src = \"123\\u2029 456\";\n-    String escapedString = Escaper.escapeJsonString(src);\n+    String escapedString = escapeHtmlChar.escapeJsonString(src);\n     assertEquals(\"123\\\\u2029 456\", escapedString);\n   }\n \n   public void testControlCharBlockEscaping() throws Exception {\n     for (char c = '\\u007f'; c <= '\\u009f'; ++c) {\n       String src = \"123 \" + c + \" 456\";\n-      String escapedString = Escaper.escapeJsonString(src);\n+      String escapedString = escapeHtmlChar.escapeJsonString(src);\n       assertFalse(src.equals(escapedString));\n     }\n   }\n     String containsEquals = \"123=456\";\n     int index = containsEquals.indexOf('=');\n     String unicodeValue = convertToUnicodeString(Character.codePointAt(containsEquals, index));\n-    String escapedString = Escaper.escapeJsonString(containsEquals);\n+    String escapedString = escapeHtmlChar.escapeJsonString(containsEquals);\n     assertEquals(\"123\" + unicodeValue + \"456\", escapedString);\n+    \n+    escapedString = noEscapeHtmlChar.escapeJsonString(containsEquals);\n+    assertEquals(containsEquals, escapedString);\n   }\n \n   public void testGreaterThanAndLessThanEscaping() throws Exception {\n     String gtAsUnicode = convertToUnicodeString(Character.codePointAt(containsLtGt, gtIndex));\n     String ltAsUnicode = convertToUnicodeString(Character.codePointAt(containsLtGt, ltIndex));\n \n-    String escapedString = Escaper.escapeJsonString(containsLtGt);\n+    String escapedString = escapeHtmlChar.escapeJsonString(containsLtGt);\n     assertEquals(\"123\" + gtAsUnicode + \"456\" + ltAsUnicode, escapedString);\n+    \n+    escapedString = noEscapeHtmlChar.escapeJsonString(containsLtGt);\n+    assertEquals(containsLtGt, escapedString);\n   }\n \n   public void testAmpersandEscaping() throws Exception {\n     int ampIndex = containsAmp.indexOf('&');\n     String ampAsUnicode = convertToUnicodeString(Character.codePointAt(containsAmp, ampIndex));\n \n-    String escapedString = Escaper.escapeJsonString(containsAmp);\n+    String escapedString = escapeHtmlChar.escapeJsonString(containsAmp);\n     assertEquals(\"123\" + ampAsUnicode + \"456\", escapedString);\n+    \n+    escapedString = noEscapeHtmlChar.escapeJsonString(containsAmp);\n+    assertEquals(containsAmp, escapedString);\n \n     char ampCharAsUnicode = '\\u0026';\n     String containsAmpUnicode = \"123\" + ampCharAsUnicode + \"456\";\n-    escapedString = Escaper.escapeJsonString(containsAmpUnicode);\n+    escapedString = escapeHtmlChar.escapeJsonString(containsAmpUnicode);\n     assertEquals(\"123\" + ampAsUnicode + \"456\", escapedString);\n+\n+    escapedString = noEscapeHtmlChar.escapeJsonString(containsAmpUnicode);\n+    assertEquals(containsAmp, escapedString);\n   }\n \n   public void testSlashEscaping() throws Exception {\n     String containsSlash = \"123\\\\456\";\n-    String escapedString = Escaper.escapeJsonString(containsSlash);\n+    String escapedString = escapeHtmlChar.escapeJsonString(containsSlash);\n     assertEquals(\"123\\\\\\\\456\", escapedString);\n   }\n \n   public void testSingleQuoteNotEscaped() throws Exception {\n     String containsSingleQuote = \"123'456\";\n-    String escapedString = Escaper.escapeJsonString(containsSingleQuote);\n+    String escapedString = escapeHtmlChar.escapeJsonString(containsSingleQuote);\n     assertEquals(containsSingleQuote, escapedString);\n   }\n \n     char unicodeChar = '\\u2028';\n     String unicodeString = \"Testing\" + unicodeChar;\n \n-    String escapedString = Escaper.escapeJsonString(unicodeString);\n+    String escapedString = escapeHtmlChar.escapeJsonString(unicodeString);\n     assertFalse(unicodeString.equals(escapedString));\n     assertEquals(\"Testing\\\\u2028\", escapedString);\n   }\n   public void testUnicodeCharacterStringNoEscaping() throws Exception {\n     String unicodeString = \"\\u0065\\u0066\";\n \n-    String escapedString = Escaper.escapeJsonString(unicodeString);\n+    String escapedString = escapeHtmlChar.escapeJsonString(unicodeString);\n     assertEquals(unicodeString, escapedString);\n   }\n \n--- a/gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java\n+++ b/gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java\n   }\n \n   public void testPrettyPrintList() {\n-    JsonFormatter formatter = new JsonPrintFormatter(PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN);\n+    JsonFormatter formatter = new JsonPrintFormatter(\n+        PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN, true);\n     Gson gson = builder.setFormatter(formatter).create();\n     BagOfPrimitives b = new BagOfPrimitives();\n     List<BagOfPrimitives> listOfB = new LinkedList<BagOfPrimitives>();\n   }\n \n   public void testPrettyPrintArrayOfObjects() {\n-    JsonFormatter formatter = new JsonPrintFormatter(PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN);\n+    JsonFormatter formatter = new JsonPrintFormatter(\n+        PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN, true);\n     Gson gson = builder.setFormatter(formatter).create();\n     ArrayOfObjects target = new ArrayOfObjects();\n     String json = gson.toJson(target);\n   }\n \n   public void testPrettyPrintArrayOfPrimitives() {\n-    JsonFormatter formatter = new JsonPrintFormatter(PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN);\n+    JsonFormatter formatter = new JsonPrintFormatter(\n+        PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN, true);\n     Gson gson = builder.setFormatter(formatter).create();\n     int[] ints = new int[] { 1, 2, 3, 4, 5 };\n     String json = gson.toJson(ints);\n   }\n \n   public void testPrettyPrintArrayOfPrimitiveArrays() {\n-    JsonFormatter formatter = new JsonPrintFormatter(PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN);\n+    JsonFormatter formatter = new JsonPrintFormatter(\n+        PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN, true);\n     Gson gson = builder.setFormatter(formatter).create();\n     int[][] ints = new int[][] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 }, { 9, 0 }, { 10 } };\n     String json = gson.toJson(ints);\n   }\n \n   public void testPrettyPrintListOfPrimitiveArrays() {\n-    JsonFormatter formatter = new JsonPrintFormatter(PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN);\n+    JsonFormatter formatter = new JsonPrintFormatter(\n+        PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN, true);\n     Gson gson = builder.setFormatter(formatter).create();\n     List<Integer[]> list = Arrays.asList(new Integer[][] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 },\n         { 9, 0 }, { 10 } });\n   }\n \n   public void testMultipleArrays() {\n-    JsonFormatter formatter = new JsonPrintFormatter(PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN);\n+    JsonFormatter formatter = new JsonPrintFormatter(\n+        PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN, true);\n     Gson gson = builder.setFormatter(formatter).create();\n     int[][][] ints = new int[][][] { {  { 1 }, { 2 } } };\n     String json = gson.toJson(ints);\n--- a/gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java\n public class JsonEscapingVisitorTest extends TestCase {\n   private StubbedJsonElementVisitor stubVisitor;\n   private JsonEscapingVisitor escapingVisitor;\n+  private Escaper escaper;\n \n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n     stubVisitor = new StubbedJsonElementVisitor();\n-    escapingVisitor = new JsonEscapingVisitor(stubVisitor);\n+    escaper = new Escaper(true);\n+    escapingVisitor = new JsonEscapingVisitor(stubVisitor, escaper);\n   }\n \n   public void testNonStringPrimitiveVisitation() throws Exception {\n     String value = \"Testing\\\"123\";\n     JsonPrimitive primitive = new JsonPrimitive(value);\n     escapingVisitor.visitPrimitive(primitive);\n-    assertEquals(Escaper.escapeJsonString(value), stubVisitor.primitiveReceived.getAsString());\n+    assertEquals(escaper.escapeJsonString(value), stubVisitor.primitiveReceived.getAsString());\n   }\n \n   public void testNonStringArrayVisitation() throws Exception {\n     JsonArray array = new JsonArray();\n     array.add(primitive);\n     escapingVisitor.visitArrayMember(array, primitive, true);\n-    assertEquals(Escaper.escapeJsonString(value), stubVisitor.primitiveReceived.getAsString());\n+    assertEquals(escaper.escapeJsonString(value), stubVisitor.primitiveReceived.getAsString());\n   }\n \n   public void testNonStringFieldVisitation() throws Exception {\n     object.addProperty(fieldName, value);\n \n     escapingVisitor.visitObjectMember(object, fieldName, primitive, true);\n-    assertEquals(Escaper.escapeJsonString(value), stubVisitor.primitiveReceived.getAsString());\n+    assertEquals(escaper.escapeJsonString(value), stubVisitor.primitiveReceived.getAsString());\n   }\n \n   private static class StubbedJsonElementVisitor implements JsonElementVisitor {\n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n   public void testUrlSerialization() throws Exception {\n     String urlValue = \"http://google.com/\";\n     URL url = new URL(urlValue);\n-    assertEquals(\"\\\"http:\\\\/\\\\/google.com\\\\/\\\"\", gson.toJson(url));\n+    assertEquals(\"\\\"http://google.com/\\\"\", gson.toJson(url));\n   }\n \n   public void testUrlDeserialization() {\n     String json = \"'http:\\\\/\\\\/google.com\\\\/'\";\n     URL target = gson.fromJson(json, URL.class);\n     assertEquals(urlValue, target.toExternalForm());\n+    \n+    gson.fromJson('\"' + urlValue + '\"', URL.class);\n+    assertEquals(urlValue, target.toExternalForm());\n   }\n \n   public void testUrlNullSerialization() throws Exception {\n   public void testUriSerialization() throws Exception {\n     String uriValue = \"http://google.com/\";\n     URI uri = new URI(uriValue);\n-    assertEquals(\"\\\"http:\\\\/\\\\/google.com\\\\/\\\"\", gson.toJson(uri));\n+    assertEquals(\"\\\"http://google.com/\\\"\", gson.toJson(uri));\n   }\n \n   public void testUriDeserialization() {\n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n     value = gson.fromJson(\"\\\"25\\\"\", long.class);\n     assertEquals(25, value);\n   }\n+  \n+  public void testHtmlCharacterSerialization() throws Exception {\n+    String target = \"<script>var a = 12;</script>\";\n+    String result = gson.toJson(target);\n+    assertFalse(result.equals('\"' + target + '\"'));\n+    \n+    gson = new GsonBuilder().setCompactPrinting(false).create();\n+    result = gson.toJson(target);\n+    assertTrue(result.equals('\"' + target + '\"'));\n+  }\n }", "timestamp": 1230505522, "metainfo": ""}