{"sha": "dc5922e703bf6aa0774150bc5e1286148e2a03d0", "log": "Addresses comments in r481 (except for the interface change....leaving FieldAttributes as a class).  Change the exclusion order in ObjectNavigator to exclude a top-level class (if exclusion strategy suggests class should be skipped) even if it is marked with a custom (de)serializer.", "commit": "\n--- a/gson/src/main/java/com/google/gson/ExclusionStrategy.java\n+++ b/gson/src/main/java/com/google/gson/ExclusionStrategy.java\n package com.google.gson;\n \n /**\n- * A strategy pattern (see \"Design Patterns\" written by GoF for some literature on this pattern)\n- * definition that is used to decide whether or not a field or top-level class should be serialized\n- * (or deserialized) as part of the JSON output/input.\n+ * A strategy (or policy) definition that is used to decide whether or not a field or top-level\n+ * class should be serialized or deserialized as part of the JSON output/input. For serialization,\n+ * if the {@link this#shouldSkipClass(Class)} method returns false then that class or field type\n+ * will not be part of the JSON output.  For deserialization, if {@link this#shouldSkipClass(Class)}\n+ * returns false, then it will not be set as part of the Java object structure.\n  *\n- * <p>The following example show an implementation of an {@code ExclusionStrategy} where a specific\n- * type will be excluded from the output.\n+ * <p>The following are a few examples that shows how you can use this exclusion mechanism.\n  *\n- * <p><pre class=\"code\">\n- * private static class UserDefinedExclusionStrategy implements ExclusionStrategy {\n+ * <p><strong>Exclude fields and objects based on a particular class type:<strong>\n+ * <pre class=\"code\">\n+ * private static class SpecificClassExclusionStrategy implements ExclusionStrategy {\n  *   private final Class&lt;?&gt; excludedThisClass;\n  *\n- *   UserDefinedExclusionStrategy(Class&lt;?&gt; excludedThisClass) {\n+ *   public pecificClassExclusionStrategy(Class&lt;?&gt; excludedThisClass) {\n  *     this.excludedThisClass = excludedThisClass;\n  *   }\n  *\n  *     return excludedThisClass.equals(f.getDeclaredClass());\n  *   }\n  * }\n+ * </pre>\n  *\n+ * <p><strong>Excludes fields and objects based on a particular annotation:</strong>\n+ * <pre class=\"code\">\n+ * public &#64interface FooAnnotation {\n+ *   // some implementation here\n+ * }\n+ *\n+ * // Excludes any field (or class) that is tagged with an \"&#64FooAnnotation\"\n+ * private static class FooAnnotationExclusionStrategy implements ExclusionStrategy {\n+ *   public boolean shouldSkipClass(Class&lt;?&gt; clazz) {\n+ *     return clazz.getAnnotation(FooAnnotation.class) != null;\n+ *   }\n+ *\n+ *   public boolean shouldSkipField(FieldAttributes f) {\n+ *     return f.getAnnotation(FooAnnotation.class) != null;\n+ *   }\n+ * }\n+ * </pre>\n+ *\n+ * <p>Now if you want to configure {@code Gson} to use a user defined exclusion strategy, then\n+ * the {@code GsonBuilder} is required. The following is an example of how you can use the\n+ * {@code GsonBuilder} to configure Gson to use one of the above sample\n  * ExclusionStrategy excludeStrings = new UserDefinedExclusionStrategy(String.class);\n  * Gson gson = new GsonBuilder()\n  *     .setExclusionStrategies(excludeStrings)\n--- a/gson/src/main/java/com/google/gson/FieldAttributes.java\n+++ b/gson/src/main/java/com/google/gson/FieldAttributes.java\n   }\n \n   /**\n-   * This is exposed internally only for the\n-   * @return\n+   * This is exposed internally only for the removing synthetic fields from the JSON output.\n+   *\n+   * @return true if the field is synthetic; otherwise false\n    */\n   boolean isSynthetic() {\n     return field.isSynthetic();\n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n    * If a field is null, it does not get visited.\n    */\n   public void accept(Visitor visitor) {\n+    TypeInfo objTypeInfo = new TypeInfo(objTypePair.getType());\n+    if (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {\n+      return;\n+    }\n     boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler(objTypePair);\n     if (!visitedWithCustomHandler) {\n       Object obj = objTypePair.getObject();\n       if (objectToVisit == null) {\n         return;\n       }\n-      TypeInfo objTypeInfo = new TypeInfo(objTypePair.getType());\n-      if (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {\n-        return;\n-      }\n+\n       visitor.start(objTypePair);\n       try {\n         if (objTypeInfo.isArray()) {\n     Field[] fields = clazz.getDeclaredFields();\n     AccessibleObject.setAccessible(fields, true);\n     for (Field f : fields) {\n-      if (exclusionStrategy.shouldSkipField(new FieldAttributes(f))) {\n+      FieldAttributes fieldAttributes = new FieldAttributes(f);\n+      if (exclusionStrategy.shouldSkipField(fieldAttributes)\n+          || exclusionStrategy.shouldSkipClass(fieldAttributes.getDeclaredClass())) {\n         continue; // skip\n       } else {\n         TypeInfo fieldTypeInfo = TypeInfoFactory.getTypeInfoForField(f, objTypePair.getType());\n--- a/gson/src/test/java/com/google/gson/FieldAttributesTest.java\n+++ b/gson/src/test/java/com/google/gson/FieldAttributesTest.java\n /*\n- * Copyright (C) 2008 Google Inc.\n+ * Copyright (C) 2009 Google Inc.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n--- a/gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java\n \n   public void testNeverSkipsField() throws Exception {\n     assertFalse(strategy.shouldSkipField(\n-        new FieldAttributes(\"\".getClass().getFields()[0])));\n+        new FieldAttributes(String.class.getFields()[0])));\n   }\n }", "timestamp": 1255035100, "metainfo": ""}