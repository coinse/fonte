{"sha": "93b0008486b3186f5a0113062dd566076a1df60a", "log": "Adding restrictions on the JsonElements to disallow Java \"null\"s.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonArray.java\n+++ b/gson/src/main/java/com/google/gson/JsonArray.java\n    * @param element the element that needs to be added to the array.\n    */\n   public void add(JsonElement element) {\n+    if (element == null) {\n+      element = JsonNull.createJsonNull();\n+    }\n     elements.add(element);\n   }\n \n     }\n     throw new IllegalStateException();\n   }\n-  \n+\n   @Override\n   public char getAsCharacter() {\n     if (elements.size() == 1) {\n--- a/gson/src/main/java/com/google/gson/JsonObject.java\n+++ b/gson/src/main/java/com/google/gson/JsonObject.java\n import java.util.Map.Entry;\n \n /**\n- * A class representing an object type in Json. An object consists of name-value pairs where names \n- * are strings, and values are any other type of {@link JsonElement}. This allows for a creating a \n- * tree of JsonElements. The member elements of this object are maintained in order they were added. \n- * \n+ * A class representing an object type in Json. An object consists of name-value pairs where names\n+ * are strings, and values are any other type of {@link JsonElement}. This allows for a creating a\n+ * tree of JsonElements. The member elements of this object are maintained in order they were added.\n+ *\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n public final class JsonObject extends JsonElement {\n   // We are using a linked hash map because it is important to preserve\n   // the order in which elements are inserted. This is needed to ensure\n-  // that the fields of an object are inserted in the order they were \n-  // defined in the class. \n+  // that the fields of an object are inserted in the order they were\n+  // defined in the class.\n   private final Map<String, JsonElement> members;\n \n   /**\n   public JsonObject() {\n     members = new LinkedHashMap<String, JsonElement>();\n   }\n-  \n+\n   /**\n    * Adds a member, which is a name-value pair, to self. The name must be a String, but the value\n    * can be an arbitrary JsonElement, thereby allowing you to build a full tree of JsonElements\n-   * rooted at this node. \n-   *   \n+   * rooted at this node.\n+   *\n    * @param property name of the member.\n    * @param value the member object.\n    */\n   public void add(String property, JsonElement value) {\n+    Preconditions.checkArgument(property != null && !\"\".equals(property.trim()));\n+    Preconditions.checkNotNull(property);\n+\n+    if (value == null) {\n+      value = JsonNull.createJsonNull();\n+    }\n     members.put(property, value);\n   }\n-  \n+\n   /**\n    * Removes the {@code property} from this {@link JsonObject}.\n-   *   \n+   *\n    * @param property name of the member that should be removed.\n    * @return the {@link JsonElement} object that is being removed.\n    * @since 1.3\n   public JsonElement remove(String property) {\n     return members.remove(property);\n   }\n-  \n-  /**\n-   * Convenience method to add a primitive member. The specified value is converted to a \n-   * JsonPrimitive of String. \n-   *  \n+\n+  /**\n+   * Convenience method to add a primitive member. The specified value is converted to a\n+   * JsonPrimitive of String.\n+   *\n    * @param property name of the member.\n    * @param value the string value associated with the member.\n    */\n   public void addProperty(String property, String value) {\n     add(property, createJsonElement(value));\n   }\n-  \n-  /**\n-   * Convenience method to add a primitive member. The specified value is converted to a \n-   * JsonPrimitive of Number. \n-   *  \n+\n+  /**\n+   * Convenience method to add a primitive member. The specified value is converted to a\n+   * JsonPrimitive of Number.\n+   *\n    * @param property name of the member.\n    * @param value the number value associated with the member.\n    */\n   public void addProperty(String property, Number value) {\n     add(property, createJsonElement(value));\n   }\n-  \n-  /**\n-   * Convenience method to add a boolean member. The specified value is converted to a \n-   * JsonPrimitive of Boolean. \n-   *  \n+\n+  /**\n+   * Convenience method to add a boolean member. The specified value is converted to a\n+   * JsonPrimitive of Boolean.\n+   *\n    * @param property name of the member.\n    * @param value the number value associated with the member.\n    */\n   public void addProperty(String property, Boolean value) {\n     add(property, createJsonElement(value));\n   }\n-  \n-  /**\n-   * Convenience method to add a char member. The specified value is converted to a \n-   * JsonPrimitive of Character. \n-   *  \n+\n+  /**\n+   * Convenience method to add a char member. The specified value is converted to a\n+   * JsonPrimitive of Character.\n+   *\n    * @param property name of the member.\n    * @param value the number value associated with the member.\n    */\n   }\n \n   /**\n-   * Returns a set of members of this object. The set is ordered, and the order is in which the \n-   * elements were added. \n-   *  \n-   * @return a set of members of this object. \n+   * Returns a set of members of this object. The set is ordered, and the order is in which the\n+   * elements were added.\n+   *\n+   * @return a set of members of this object.\n    */\n   public Set<Entry<String, JsonElement>> entrySet() {\n     return members.entrySet();\n   }\n-  \n-  /**\n-   * Convenience method to check if a member with the specified name is present in this object. \n-   * \n+\n+  /**\n+   * Convenience method to check if a member with the specified name is present in this object.\n+   *\n    * @param memberName name of the member that is being checked for presence.\n-   * @return true if there is a member with the specified name, false otherwise. \n+   * @return true if there is a member with the specified name, false otherwise.\n    */\n   public boolean has(String memberName) {\n     return members.containsKey(memberName);\n   }\n-  \n-  /**\n-   * Returns the member with the specified name. \n-   * \n+\n+  /**\n+   * Returns the member with the specified name.\n+   *\n    * @param memberName name of the member that is being requested.\n-   * @return the member matching the name. Null if no such member exists. \n+   * @return the member matching the name. Null if no such member exists.\n    */\n   public JsonElement get(String memberName) {\n     if (members.containsKey(memberName)) {\n       return null;\n     }\n   }\n-  \n-  /**\n-   * Convenience method to get the specified member as a JsonPrimitive element. \n-   * \n-   * @param memberName name of the member being requested. \n-   * @return the JsonPrimitive corresponding to the specified member. \n+\n+  /**\n+   * Convenience method to get the specified member as a JsonPrimitive element.\n+   *\n+   * @param memberName name of the member being requested.\n+   * @return the JsonPrimitive corresponding to the specified member.\n    */\n   public JsonPrimitive getAsJsonPrimitive(String memberName) {\n     return (JsonPrimitive) members.get(memberName);\n   }\n-  \n+\n   /**\n    * Convenience method to get the specified member as a JsonArray.\n-   * \n-   * @param memberName name of the member being requested. \n+   *\n+   * @param memberName name of the member being requested.\n    * @return the JsonArray corresponding to the specified member.\n    */\n   public JsonArray getAsJsonArray(String memberName) {\n \n   /**\n    * Convenience method to get the specified member as a JsonObject.\n-   * \n-   * @param memberName name of the member being requested. \n+   *\n+   * @param memberName name of the member being requested.\n    * @return the JsonObject corresponding to the specified member.\n    */\n   public JsonObject getAsJsonObject(String memberName) {\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n    * @param bool the value to create the primitive with.\n    */\n   public JsonPrimitive(Boolean bool) {\n-    this.value = bool;\n+    setValue(bool);\n   }\n \n   /**\n    * @param number the value to create the primitive with.\n    */\n   public JsonPrimitive(Number number) {\n-    this.value = number;\n+    setValue(number);\n   }\n \n   /**\n    * @param string the value to create the primitive with.\n    */\n   public JsonPrimitive(String string) {\n-    this.value = string;\n+    setValue(string);\n   }\n \n   /**\n    * @param c the value to create the primitive with.\n    */\n   public JsonPrimitive(Character c) {\n-    this.value = String.valueOf(c);\n+    setValue(c);\n   }\n \n   /**\n       return Integer.parseInt(getAsString());\n     }\n   }\n-  \n+\n   @Override\n   public byte getAsByte() {\n     if (isNumber()) {\n       return Byte.parseByte(getAsString());\n     }\n   }\n-  \n+\n   @Override\n   public char getAsCharacter() {\n     return getAsString().charAt(0);\n       sb.append(value.toString());\n     }\n   }\n-  \n+\n   private static boolean isPrimitiveOrString(Object target) {\n     if (target instanceof String) {\n       return true;\n     if (this == obj) {\n       return true;\n     }\n-    if (obj == null || getClass() != obj.getClass()) { \n+    if (obj == null || getClass() != obj.getClass()) {\n       return false;\n     }\n     JsonPrimitive other = (JsonPrimitive)obj;\n       return getAsNumber().doubleValue() == other.getAsNumber().doubleValue();\n     }\n     return value.equals(other.value);\n-  }  \n-  \n-  /**\n-   * Returns true if the specified number is an integral type \n-   * (Long, Integer, Short, Byte, BigInteger) \n+  }\n+\n+  /**\n+   * Returns true if the specified number is an integral type\n+   * (Long, Integer, Short, Byte, BigInteger)\n    */\n   private static boolean isIntegral(JsonPrimitive primitive) {\n     if (primitive.value instanceof Number) {\n       Number number = (Number) primitive.value;\n-      return number instanceof BigInteger || number instanceof Long || number instanceof Integer \n+      return number instanceof BigInteger || number instanceof Long || number instanceof Integer\n       || number instanceof Short || number instanceof Byte;\n     }\n     return false;\n   }\n \n   /**\n-   * Returns true if the specified number is a floating point type (BigDecimal, double, float) \n+   * Returns true if the specified number is a floating point type (BigDecimal, double, float)\n    */\n   private static boolean isFloatingPoint(JsonPrimitive primitive) {\n     if (primitive.value instanceof Number) {", "timestamp": 1255039388, "metainfo": ""}