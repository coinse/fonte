{"sha": "3920d95fac0520c288e6b5f626ae0724a32f49ca", "log": "rename peekedInteger to peekedLong", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n   private static final int PEEKED_SINGLE_QUOTED_NAME = 12;\n   private static final int PEEKED_DOUBLE_QUOTED_NAME = 13;\n   private static final int PEEKED_UNQUOTED_NAME = 14;\n-  /** When this is returned, the integer value is stored in peekedInteger. */\n-  private static final int PEEKED_INTEGER = 15;\n+  /** When this is returned, the integer value is stored in peekedLong. */\n+  private static final int PEEKED_LONG = 15;\n   private static final int PEEKED_NUMBER = 16;\n   private static final int PEEKED_EOF = 17;\n \n    * A peeked value that was composed entirely of digits with an optional\n    * leading dash. Positive values may not have a leading 0.\n    */\n-  private long peekedInteger;\n+  private long peekedLong;\n \n   /**\n    * The number of characters in a peeked number literal. Increment 'pos' by\n     case PEEKED_UNQUOTED:\n     case PEEKED_BUFFERED:\n       return JsonToken.STRING;\n-    case PEEKED_INTEGER:\n+    case PEEKED_LONG:\n     case PEEKED_NUMBER:\n       return JsonToken.NUMBER;\n     case PEEKED_EOF:\n   }\n \n   private int peekNumber() throws IOException {\n-    long integer = 0; // Negative to accommodate Long.MIN_VALUE more easily.\n+    long value = 0; // Negative to accommodate Long.MIN_VALUE more easily.\n     boolean negative = false;\n     boolean fitsInLong = true;\n     int i = 0;\n     if (c == '0') {\n       c = get(++i);\n     } else if (c >= '1' && c <= '9') {\n-      integer -= (c - '0');\n+      value -= (c - '0');\n       c = get(++i);\n       while (c >= '0' && c <= '9') {\n-        long newInteger = integer * 10 - (c - '0');\n-        fitsInLong &= integer > MIN_INCOMPLETE_INTEGER\n-            || (integer == MIN_INCOMPLETE_INTEGER && newInteger < integer);\n-        integer = newInteger;\n+        long newValue = value * 10 - (c - '0');\n+        fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n+            || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n+        value = newValue;\n         c = get(++i);\n       }\n     } else {\n     }\n \n     if (c == -1 || !isLiteral((char) c)) {\n-      if (fitsInLong && (integer != Long.MIN_VALUE || negative)) {\n-        peekedInteger = negative ? integer : -integer;\n+      if (fitsInLong && (value != Long.MIN_VALUE || negative)) {\n+        peekedLong = negative ? value : -value;\n         pos += i;\n-        return peeked = PEEKED_INTEGER;\n+        return peeked = PEEKED_LONG;\n       } else {\n         peekedNumberLength = i;\n         return peeked = PEEKED_NUMBER;\n     } else if (p == PEEKED_BUFFERED) {\n       result = peekedString;\n       peekedString = null;\n-    } else if (p == PEEKED_INTEGER) {\n-      result = Long.toString(peekedInteger);\n+    } else if (p == PEEKED_LONG) {\n+      result = Long.toString(peekedLong);\n     } else if (p == PEEKED_NUMBER) {\n       result = new String(buffer, pos, peekedNumberLength);\n       pos += peekedNumberLength;\n       p = doPeek();\n     }\n \n-    if (p == PEEKED_INTEGER) {\n+    if (p == PEEKED_LONG) {\n       peeked = PEEKED_NONE;\n-      return (double) peekedInteger;\n+      return (double) peekedLong;\n     }\n \n     if (p == PEEKED_NUMBER) {\n       p = doPeek();\n     }\n \n-    if (p == PEEKED_INTEGER) {\n+    if (p == PEEKED_LONG) {\n       peeked = PEEKED_NONE;\n-      return peekedInteger;\n+      return peekedLong;\n     }\n \n     if (p == PEEKED_NUMBER) {\n     }\n \n     int result;\n-    if (p == PEEKED_INTEGER) {\n-      result = (int) peekedInteger;\n-      if (peekedInteger != result) { // Make sure no precision was lost casting to 'int'.\n-        throw new NumberFormatException(\"Expected an int but was \" + peekedInteger\n+    if (p == PEEKED_LONG) {\n+      result = (int) peekedLong;\n+      if (peekedLong != result) { // Make sure no precision was lost casting to 'int'.\n+        throw new NumberFormatException(\"Expected an int but was \" + peekedLong\n             + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n       }\n       peeked = PEEKED_NONE;", "timestamp": 1346607962, "metainfo": ""}