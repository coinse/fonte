{"sha": "b96d2d983793ee6c70f059936cf95f325519ca7a", "log": "Support non-execute prefixes.", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader2.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader2.java\n \n package com.google.gson.stream;\n \n+import com.google.gson.internal.JsonReaderInternalAccess;\n+import com.google.gson.internal.bind.JsonTreeReader;\n import java.io.Closeable;\n import java.io.EOFException;\n import java.io.IOException;\n  * @since 1.6\n  */\n public class JsonReader2 implements Closeable {\n+  /** The only non-execute prefix this parser permits */\n+  private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\n+\n   private static final int PEEKED_NONE = 0;\n   private static final int PEEKED_BEGIN_OBJECT = 1;\n   private static final int PEEKED_END_OBJECT = 2;\n         throw syntaxError(\"Expected ':'\");\n       }\n     } else if (peekStack == JsonScope.EMPTY_DOCUMENT) {\n+      if (lenient) {\n+        consumeNonExecutePrefix();\n+      }\n       stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;\n     } else if (peekStack == JsonScope.NONEMPTY_DOCUMENT) {\n       int c = nextNonWhitespace(false);\n         + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n   }\n \n+  /**\n+   * Consumes the non-execute prefix if it exists.\n+   */\n+  private void consumeNonExecutePrefix() throws IOException {\n+    // fast forward through the leading whitespace\n+    nextNonWhitespace(true);\n+    pos--;\n+\n+    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n+      return;\n+    }\n+\n+    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\n+      if (buffer[pos + i] != NON_EXECUTE_PREFIX[i]) {\n+        return; // not a security token!\n+      }\n+    }\n+\n+    // we consumed a security token!\n+    pos += NON_EXECUTE_PREFIX.length;\n+  }\n+\n   /*static {\n     JsonReaderInternalAccess.INSTANCE = new JsonReaderInternalAccess() {\n       @Override public void promoteNameToValue(JsonReader reader) throws IOException {\n--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n \n package com.google.gson.stream;\n \n-import com.google.gson.JsonSyntaxException;\n-import com.google.gson.reflect.TypeToken;\n import java.io.EOFException;\n import java.io.IOException;\n import java.io.StringReader;\n-import java.lang.reflect.Type;\n import java.util.Arrays;\n-import java.util.Map;\n import junit.framework.TestCase;\n \n+import static com.google.gson.stream.JsonToken.BEGIN_ARRAY;\n+import static com.google.gson.stream.JsonToken.BEGIN_OBJECT;\n+import static com.google.gson.stream.JsonToken.BOOLEAN;\n+import static com.google.gson.stream.JsonToken.END_ARRAY;\n+import static com.google.gson.stream.JsonToken.END_OBJECT;\n+import static com.google.gson.stream.JsonToken.NAME;\n+import static com.google.gson.stream.JsonToken.NULL;\n+import static com.google.gson.stream.JsonToken.NUMBER;\n+import static com.google.gson.stream.JsonToken.STRING;\n+\n public final class JsonReaderTest extends TestCase {\n-\n   public void testReadArray() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\"[true, true]\"));\n     reader.beginArray();\n     JsonReader reader = new JsonReader(new StringReader(\"[truey]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n-    assertEquals(JsonToken.STRING, reader.peek());\n+    assertEquals(STRING, reader.peek());\n     try {\n       reader.nextBoolean();\n       fail();\n     JsonReader reader = new JsonReader(new StringReader(\"[12.34e5x]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n-    assertEquals(JsonToken.STRING, reader.peek());\n+    assertEquals(STRING, reader.peek());\n     try {\n       reader.nextInt();\n       fail();\n     JsonReader reader = new JsonReader(new StringReader(\"[-9223372036854775808]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n-    assertEquals(JsonToken.NUMBER, reader.peek());\n+    assertEquals(NUMBER, reader.peek());\n     assertEquals(-9223372036854775808L, reader.nextLong());\n   }\n \n     JsonReader reader = new JsonReader(new StringReader(\"[-9223372036854775809]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n-    assertEquals(JsonToken.NUMBER, reader.peek());\n+    assertEquals(NUMBER, reader.peek());\n     try {\n       reader.nextLong();\n       fail();\n     JsonReader reader = new JsonReader(new StringReader(\"[-92233720368547758080]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n-    assertEquals(JsonToken.NUMBER, reader.peek());\n+    assertEquals(NUMBER, reader.peek());\n     try {\n       reader.nextLong();\n       fail();\n     JsonReader reader = new JsonReader(new StringReader(\"[\\\"12\\u00334\\\"]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n-    assertEquals(JsonToken.STRING, reader.peek());\n+    assertEquals(STRING, reader.peek());\n     assertEquals(1234, reader.nextInt());\n   }\n \n     JsonReader reader = new JsonReader(new StringReader(\"[123e]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n-    assertEquals(JsonToken.STRING, reader.peek());\n+    assertEquals(STRING, reader.peek());\n   }\n \n   public void testStringAsNumberWithDigitAndNonDigitExponent() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\"[123e4b]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n-    assertEquals(JsonToken.STRING, reader.peek());\n+    assertEquals(STRING, reader.peek());\n   }\n \n   public void testStringAsNumberWithNonDigitExponent() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\"[123eb]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n-    assertEquals(JsonToken.STRING, reader.peek());\n+    assertEquals(STRING, reader.peek());\n   }\n \n   public void testEmptyStringName() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\"{\\\"\\\":true}\"));\n     reader.setLenient(true);\n-    assertEquals(JsonToken.BEGIN_OBJECT, reader.peek());\n-    reader.beginObject();\n-    assertEquals(JsonToken.NAME, reader.peek());\n+    assertEquals(BEGIN_OBJECT, reader.peek());\n+    reader.beginObject();\n+    assertEquals(NAME, reader.peek());\n     assertEquals(\"\", reader.nextName());\n     assertEquals(JsonToken.BOOLEAN, reader.peek());\n     assertEquals(true, reader.nextBoolean());\n     Arrays.fill(array, c);\n     return new String(array);\n   }\n+\n+  public void testMalformedDocuments() throws IOException {\n+    assertDocument(\"{]\", BEGIN_OBJECT, IOException.class);\n+    assertDocument(\"{,\", BEGIN_OBJECT, IOException.class);\n+    assertDocument(\"{{\", BEGIN_OBJECT, IOException.class);\n+    assertDocument(\"{[\", BEGIN_OBJECT, IOException.class);\n+    assertDocument(\"{:\", BEGIN_OBJECT, IOException.class);\n+    assertDocument(\"{\\\"name\\\",\", BEGIN_OBJECT, NAME, IOException.class);\n+    assertDocument(\"{\\\"name\\\",\", BEGIN_OBJECT, NAME, IOException.class);\n+    assertDocument(\"{\\\"name\\\":}\", BEGIN_OBJECT, NAME, IOException.class);\n+    assertDocument(\"{\\\"name\\\"::\", BEGIN_OBJECT, NAME, IOException.class);\n+    assertDocument(\"{\\\"name\\\":,\", BEGIN_OBJECT, NAME, IOException.class);\n+    assertDocument(\"{\\\"name\\\"=}\", BEGIN_OBJECT, NAME, IOException.class);\n+    assertDocument(\"{\\\"name\\\"=>}\", BEGIN_OBJECT, NAME, IOException.class);\n+    assertDocument(\"{\\\"name\\\"=>\\\"string\\\":\", BEGIN_OBJECT, NAME, STRING, IOException.class);\n+    assertDocument(\"{\\\"name\\\"=>\\\"string\\\"=\", BEGIN_OBJECT, NAME, STRING, IOException.class);\n+    assertDocument(\"{\\\"name\\\"=>\\\"string\\\"=>\", BEGIN_OBJECT, NAME, STRING, IOException.class);\n+    assertDocument(\"{\\\"name\\\"=>\\\"string\\\",\", BEGIN_OBJECT, NAME, STRING, IOException.class);\n+    assertDocument(\"{\\\"name\\\"=>\\\"string\\\",\\\"name\\\"\", BEGIN_OBJECT, NAME, STRING, NAME);\n+    assertDocument(\"[}\", BEGIN_ARRAY, IOException.class);\n+    assertDocument(\"[,]\", BEGIN_ARRAY, NULL, NULL, END_ARRAY);\n+    assertDocument(\"{\", BEGIN_OBJECT, IOException.class);\n+    assertDocument(\"{\\\"name\\\"\", BEGIN_OBJECT, NAME, IOException.class);\n+    assertDocument(\"{\\\"name\\\",\", BEGIN_OBJECT, NAME, IOException.class);\n+    assertDocument(\"{'name'\", BEGIN_OBJECT, NAME, IOException.class);\n+    assertDocument(\"{'name',\", BEGIN_OBJECT, NAME, IOException.class);\n+    assertDocument(\"{name\", BEGIN_OBJECT, NAME, IOException.class);\n+    assertDocument(\"[\", BEGIN_ARRAY, IOException.class);\n+    assertDocument(\"[string\", BEGIN_ARRAY, STRING, IOException.class);\n+    assertDocument(\"[\\\"string\\\"\", BEGIN_ARRAY, STRING, IOException.class);\n+    assertDocument(\"['string'\", BEGIN_ARRAY, STRING, IOException.class);\n+    assertDocument(\"[123\", BEGIN_ARRAY, NUMBER, IOException.class);\n+    assertDocument(\"[123,\", BEGIN_ARRAY, NUMBER, IOException.class);\n+    assertDocument(\"{\\\"name\\\":123\", BEGIN_OBJECT, NAME, NUMBER, IOException.class);\n+    assertDocument(\"{\\\"name\\\":123,\", BEGIN_OBJECT, NAME, NUMBER, IOException.class);\n+    assertDocument(\"{\\\"name\\\":\\\"string\\\"\", BEGIN_OBJECT, NAME, STRING, IOException.class);\n+    assertDocument(\"{\\\"name\\\":\\\"string\\\",\", BEGIN_OBJECT, NAME, STRING, IOException.class);\n+    assertDocument(\"{\\\"name\\\":'string'\", BEGIN_OBJECT, NAME, STRING, IOException.class);\n+    assertDocument(\"{\\\"name\\\":'string',\", BEGIN_OBJECT, NAME, STRING, IOException.class);\n+    assertDocument(\"{\\\"name\\\":false\", BEGIN_OBJECT, NAME, BOOLEAN, IOException.class);\n+    assertDocument(\"{\\\"name\\\":false,,\", BEGIN_OBJECT, NAME, BOOLEAN, IOException.class);\n+  }\n+\n+  /**\n+   * This test behave slightly differently in Gson 2.2 and earlier. It fails\n+   * during peek rather than during nextString().\n+   */\n+  public void testUnterminatedStringFailure() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"[\\\"string\"));\n+    reader.setLenient(true);\n+    reader.beginArray();\n+    assertEquals(JsonToken.STRING, reader.peek());\n+    try {\n+      reader.nextString();\n+      fail();\n+    } catch (MalformedJsonException expected) {\n+    }\n+  }\n+\n+  private void assertDocument(String document, Object... expectations) throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(document));\n+    reader.setLenient(true);\n+    for (Object expectation : expectations) {\n+      if (expectation == BEGIN_OBJECT) {\n+        reader.beginObject();\n+      } else if (expectation == BEGIN_ARRAY) {\n+        reader.beginArray();\n+      } else if (expectation == END_OBJECT) {\n+        reader.endObject();\n+      } else if (expectation == END_ARRAY) {\n+        reader.endArray();\n+      } else if (expectation == NAME) {\n+        assertEquals(\"name\", reader.nextName());\n+      } else if (expectation == BOOLEAN) {\n+        assertEquals(false, reader.nextBoolean());\n+      } else if (expectation == STRING) {\n+        assertEquals(\"string\", reader.nextString());\n+      } else if (expectation == NUMBER) {\n+        assertEquals(123, reader.nextInt());\n+      } else if (expectation == NULL) {\n+        reader.nextNull();\n+      } else if (expectation == IOException.class) {\n+        try {\n+          reader.peek();\n+          fail();\n+        } catch (IOException expected) {\n+        }\n+      } else {\n+        throw new AssertionError();\n+      }\n+    }\n+  }\n+\n+  // TODO: test character-by-character reads\n }", "timestamp": 1346009466, "metainfo": ""}