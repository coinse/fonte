{"sha": "66649a1a628bf84c6b2dcaa9312cbdb911c0b042", "log": "Moved ancestor tracking into the serialization visitor. Deserialization process doesn't need ancestor tracking since JSON does not allow self-referential structures.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n \n   protected abstract T constructTarget();\n \n+  public void start(Object node) {\n+  }\n+\n+  public void end(Object node) {\n+  }\n+\n   @SuppressWarnings(\"unchecked\")\n   public final boolean visitUsingCustomHandler(Object obj, Type objType) {\n     JsonDeserializer deserializer = deserializers.getHandlerFor(objType);\n--- a/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n   private final ObjectNavigatorFactory factory;\n   private final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;\n   private final boolean serializeNulls;\n+  private final MemoryRefStack<Object> ancestors;\n \n   JsonSerializationContextDefault(ObjectNavigatorFactory factory, boolean serializeNulls,\n       ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers) {\n     this.factory = factory;\n     this.serializeNulls = serializeNulls;\n     this.serializers = serializers;\n+    this.ancestors = new MemoryRefStack<Object>();\n   }\n \n   public JsonElement serialize(Object src) {\n   public JsonElement serialize(Object src, Type typeOfSrc) {\n     ObjectNavigator on = factory.create(src, typeOfSrc);\n     JsonSerializationVisitor visitor =\n-        new JsonSerializationVisitor(factory, serializeNulls, serializers, this);\n+        new JsonSerializationVisitor(factory, serializeNulls, serializers, this, ancestors);\n     on.accept(visitor);\n     return visitor.getJsonElement();\n   }\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n   private final ObjectNavigatorFactory factory;\n   private final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;\n   private final boolean serializeNulls;\n-\n   private final JsonSerializationContext context;\n-\n+  private final MemoryRefStack<Object> ancestors;\n   private JsonElement root;\n \n   JsonSerializationVisitor(ObjectNavigatorFactory factory, boolean serializeNulls,\n       ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,\n-      JsonSerializationContext context) {\n+      JsonSerializationContext context, MemoryRefStack<Object> ancestors) {\n     this.factory = factory;\n     this.serializeNulls = serializeNulls;\n     this.serializers = serializers;\n     this.context = context;\n+    this.ancestors = ancestors;\n   }\n   \n   public Object getTarget() {\n     return null;\n+  }\n+\n+  public void start(Object node) {\n+    if (node == null) {\n+      return;\n+    }\n+    if (ancestors.contains(node)) {\n+      throw new IllegalStateException(\"Circular reference found: \" + node);\n+    }\n+    ancestors.push(node);\n+  }\n+\n+  public void end(Object node) {\n+    if (node != null) {\n+      ancestors.pop();\n+    }\n   }\n \n   public void startVisitingObject(Object node) {\n   private JsonElement getJsonElementForChild(Type fieldType, Object fieldValue) {\n     ObjectNavigator on = factory.create(fieldValue, fieldType);\n     JsonSerializationVisitor childVisitor =\n-        new JsonSerializationVisitor(factory, serializeNulls, serializers, context);\n+        new JsonSerializationVisitor(factory, serializeNulls, serializers, context, ancestors);\n     on.accept(childVisitor);\n     return childVisitor.getJsonElement();\n   }\n--- a/gson/src/main/java/com/google/gson/MemoryRefStack.java\n+++ b/gson/src/main/java/com/google/gson/MemoryRefStack.java\n     return stack.pop();\n   }\n \n+  public boolean isEmpty() {\n+    return stack.isEmpty();\n+  }\n+\n   /**\n    * Retrieves the item from the top of the stack, but does not remove it.\n    *\n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n final class ObjectNavigator {\n \n   public interface Visitor {\n+    public void start(Object node);\n+    public void end(Object node);\n+\n     /**\n      * This is called before the object navigator starts visiting the current object\n      */\n   }\n \n   private final ExclusionStrategy exclusionStrategy;\n-  private final MemoryRefStack<Object> ancestors;\n   private final Object obj;\n   private final Type objType;\n \n    * @param exclusionStrategy the concrete strategy object to be used to\n    *        filter out fields of an object.\n    */\n-  ObjectNavigator(Object obj, Type objType, ExclusionStrategy exclusionStrategy,\n-      MemoryRefStack<Object> ancestors) {\n+  ObjectNavigator(Object obj, Type objType, ExclusionStrategy exclusionStrategy) {\n     Preconditions.checkNotNull(exclusionStrategy);\n-    Preconditions.checkNotNull(ancestors);\n \n     this.obj = obj;\n     this.objType = objType;\n     this.exclusionStrategy = exclusionStrategy;\n-    this.ancestors = ancestors;\n   }\n \n   /**\n       if (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {\n         return;\n       }\n-  \n-      if (ancestors.contains(objectToVisit)) {\n-        throw new IllegalStateException(\"Circular reference found: \" + objectToVisit);\n-      }\n-      ancestors.push(objectToVisit);\n-  \n+      visitor.start(obj);  \n       try {\n         if (objTypeInfo.isArray()) {\n           visitor.visitArray(objectToVisit, objType);\n           }\n         }\n       } finally {\n-        ancestors.pop();\n+        visitor.end(obj);\n       }\n     }\n   }\n--- a/gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java\n final class ObjectNavigatorFactory {\n   private final ExclusionStrategy strategy;\n   private final FieldNamingStrategy fieldNamingPolicy;\n-  private final MemoryRefStack<Object> stack;\n \n   /**\n    * Creates a factory object that will be able to create new\n     Preconditions.checkNotNull(fieldNamingPolicy);\n     this.strategy = (strategy == null ? new NullExclusionStrategy() : strategy);\n     this.fieldNamingPolicy = fieldNamingPolicy;\n-    this.stack = new MemoryRefStack<Object>();\n   }\n \n   /**\n    *         {@code type}.\n    */\n   public ObjectNavigator create(Object srcObject, Type type) {\n-    return new ObjectNavigator(srcObject, type, strategy, stack);\n+    return new ObjectNavigator(srcObject, type, strategy);\n   }\n \n   FieldNamingStrategy getFieldNamingPolicy() {", "timestamp": 1251736730, "metainfo": ""}