{"sha": "4a6c084ef73e5e8a3fca12f9bb829a218fad7a84", "log": "removed JDK 1.5 incompatible use of @Overrides annotation on overridden interface methods.", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java\n+++ b/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java\n         = (InstanceCreator<T>) instanceCreators.getHandlerFor(type, false);\n     if (creator != null) {\n       return new ObjectConstructor<T>() {\n-        @Override public T construct() {\n+        public T construct() {\n           return creator.createInstance(type);\n         }\n       };\n       }\n       return new ObjectConstructor<T>() {\n         @SuppressWarnings(\"unchecked\") // T is the same raw type as is requested\n-        @Override public T construct() {\n+        public T construct() {\n           try {\n             Object[] args = null;\n             return (T) constructor.newInstance(args);\n     if (Collection.class.isAssignableFrom(rawType)) {\n       if (SortedSet.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n-          @Override public T construct() {\n+          public T construct() {\n             return (T) new TreeSet<Object>();\n           }\n         };\n       } else if (Set.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n-          @Override public T construct() {\n+          public T construct() {\n             return (T) new LinkedHashSet<Object>();\n           }\n         };\n       } else if (Queue.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n-          @Override public T construct() {\n+          public T construct() {\n             return (T) new LinkedList<Object>();\n           }\n         };\n       } else {\n         return new ObjectConstructor<T>() {\n-          @Override public T construct() {\n+          public T construct() {\n             return (T) new ArrayList<Object>();\n           }\n         };\n \n     if (Map.class.isAssignableFrom(rawType)) {\n       return new ObjectConstructor<T>() {\n-        @Override public T construct() {\n+        public T construct() {\n           return (T) new LinkedHashMap<Object, Object>();\n         }\n       };\n       final Type type, final Class<? super T> rawType) {\n     return new ObjectConstructor<T>() {\n       private final UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n-      @Override public T construct() {\n+      public T construct() {\n         try {\n           return (T) unsafeAllocator.newInstance(rawType);\n         } catch (Exception e) {", "timestamp": 1316143668, "metainfo": ""}