{"sha": "f6a278018e663b56d1f6528dfc710adde76569cc", "log": "test for Issue 51 for inner classes serialization and deserialization.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n package com.google.gson.functional;\n \n import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.InstanceCreator;\n import com.google.gson.JsonParseException;\n import com.google.gson.common.TestTypes.ArrayOfObjects;\n import com.google.gson.common.TestTypes.BagOfPrimitiveWrappers;\n \n import junit.framework.TestCase;\n \n+import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.LinkedList;\n     assertEquals(target.getExpectedJson(), gson.toJson(target));\n   }\n \n+  public void testInnerClassSerialization() {    \n+    Parent p = new Parent();\n+    Parent.Child c = p.new Child();\n+    String json = gson.toJson(c);\n+    assertTrue(json.contains(\"value2\"));\n+    assertFalse(json.contains(\"value1\"));\n+  }\n+   \n+  public void testInnerClassDeserialization() {\n+    final Parent p = new Parent();\n+    Gson gson = new GsonBuilder().registerTypeAdapter(Parent.Child.class, new InstanceCreator<Parent.Child>() {\n+      public Parent.Child createInstance(Type type) {\n+        return p.new Child();\n+      }      \n+    }).create();\n+    String json = \"{'value2':3}\";\n+    Parent.Child c = gson.fromJson(json, Parent.Child.class);\n+    assertEquals(3, c.value2);\n+  }\n+   \n+  private static class Parent {\n+    int value1 = 1;\n+    private class Child {\n+      int value2 = 2;\n+    }\n+  }\n+  \n   public static class ClassWithSubInterfacesOfCollection {\n     private List<Integer> list;\n     private Queue<Long> queue;", "timestamp": 1223927345, "metainfo": ""}