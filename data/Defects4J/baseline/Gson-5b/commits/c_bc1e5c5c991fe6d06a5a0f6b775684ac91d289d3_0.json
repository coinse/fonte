{"sha": "bc1e5c5c991fe6d06a5a0f6b775684ac91d289d3", "log": "Ensured that custom deserializer is invoked with actual type returned for field values. Fixed a bug where a top-level object was constructed with default values even when the custom deserializer tried to set it to null.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n   protected final JsonElement json;\n   protected final Type targetType;\n   protected final JsonDeserializationContext context;\n+  protected boolean constructed;\n \n   public JsonDeserializationVisitor(JsonElement json, Type targetType,\n       ObjectNavigatorFactory factory, ObjectConstructor objectConstructor,\n     this.deserializers = deserializers;\n     this.json = json;\n     this.context = context;\n+    this.constructed = false;\n   }\n \n   public T getTarget() {\n-    if (target == null) {\n+    if (!constructed) {\n       target = constructTarget();\n+      constructed = true;\n     }\n     return target;\n   }\n     if (pair == null) {\n       return false;\n     }    \n-    if (!json.isJsonNull()) {\n-      JsonDeserializer deserializer = pair.getFirst();\n-      Type objType = pair.getSecond().getType();\n-      target = (T) deserializer.deserialize(json, objType, context);\n+    Object value = invokeCustomDeserializer(json, pair);\n+    target = (T) value;\n+    constructed = true;\n+    return true;\n+  }\n+\n+  protected Object invokeCustomDeserializer(JsonElement element, \n+      Pair<JsonDeserializer<?>, ObjectTypePair> pair) {\n+    if (element == null || element.isJsonNull()) {\n+      return null;\n     }\n-    return true;\n+    Type objType = pair.getSecond().getType();\n+    return (pair.getFirst()).deserialize(element, objType, context);\n   }\n \n   final Object visitChildAsObject(Type childType, JsonElement jsonChild) {\n--- a/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n     return namingPolicy.translateName(f);\n   }\n \n-  public boolean visitFieldUsingCustomHandler(Field f, Type actualTypeOfField, Object parent) {\n+  public boolean visitFieldUsingCustomHandler(Field f, Type declaredTypeOfField, Object parent) {\n     try {\n       String fName = getFieldName(f);\n       if (!json.isJsonObject()) {\n         throw new JsonParseException(\"Expecting object found: \" + json); \n       }\n       JsonElement child = json.getAsJsonObject().get(fName);\n-      if (child == null) {\n+      TypeInfo typeInfo = new TypeInfo(declaredTypeOfField);\n+      if (child == null) { // Child will be null if the field wasn't present in Json\n         return true;\n       } else if (child.isJsonNull()) {\n-        TypeInfo typeInfo = new TypeInfo(actualTypeOfField);\n         if (!typeInfo.isPrimitive()) {\n           f.set(parent, null);\n         }\n         return true;\n       }\n-      @SuppressWarnings(\"unchecked\")\n-      JsonDeserializer deserializer = deserializers.getHandlerFor(actualTypeOfField);\n-      if (deserializer != null) {\n-        if (!child.isJsonNull()) {\n-          Object value = deserializer.deserialize(child, actualTypeOfField, context);\n-          f.set(parent, value);\n-        }\n-        return true;\n+      ObjectTypePair objTypePair = new ObjectTypePair(null, declaredTypeOfField, false);\n+      Pair<JsonDeserializer<?>, ObjectTypePair> pair = objTypePair.getMatchingHandler(deserializers);\n+      if (pair == null) {\n+        return false;\n+      }      \n+      Object value = invokeCustomDeserializer(child, pair);\n+      if (value != null || !typeInfo.isPrimitive()) {\n+        f.set(parent, value);\n       }\n-      return false;\n+      return true;\n     } catch (IllegalAccessException e) {\n       throw new RuntimeException();\n     }\n--- a/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java\n import com.google.gson.JsonElement;\n import com.google.gson.JsonObject;\n import com.google.gson.JsonParseException;\n+import com.google.gson.common.TestTypes.Base;\n+import com.google.gson.common.TestTypes.ClassWithBaseField;\n \n import junit.framework.TestCase;\n \n     @SuppressWarnings(\"unused\")\n     String field2;    \n   }\n+  \n+  public void testCustomDeserializerReturnsNullForTopLevelObject() {\n+    Gson gson = new GsonBuilder()\n+      .registerTypeAdapter(Base.class, new JsonDeserializer<Base>() {\n+        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+          return null;\n+        }\n+      }).create();\n+    String json = \"{baseName:'Base',subName:'SubRevised'}\";\n+    Base target = gson.fromJson(json, Base.class);\n+    assertNull(target);\n+  }\n+\n+  public void testCustomDeserializerReturnsNull() {\n+    Gson gson = new GsonBuilder()\n+      .registerTypeAdapter(Base.class, new JsonDeserializer<Base>() {\n+        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+          return null;\n+        }\n+      }).create();\n+    String json = \"{base:{baseName:'Base',subName:'SubRevised'}}\";\n+    ClassWithBaseField target = gson.fromJson(json, ClassWithBaseField.class);\n+    assertNull(target.base);\n+  }\n+\n+  public void testCustomDeserializerReturnsNullForTopLevelPrimitives() {\n+    Gson gson = new GsonBuilder()\n+      .registerTypeAdapter(long.class, new JsonDeserializer<Long>() {\n+        public Long deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+          return null;\n+        }\n+      }).create();\n+    String json = \"10\";\n+    assertNull(gson.fromJson(json, long.class));\n+  }\n+\n+  public void testCustomDeserializerReturnsNullForPrimitiveFields() {\n+    Gson gson = new GsonBuilder()\n+      .registerTypeAdapter(long.class, new JsonDeserializer<Long>() {\n+        public Long deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+          return null;\n+        }\n+      }).create();\n+    String json = \"{field:10}\";\n+    ClassWithLong target = gson.fromJson(json, ClassWithLong.class);\n+    assertEquals(0, target.field);\n+  }\n+  private static class ClassWithLong {\n+    long field;\n+  }\n+ \n+  public void testCustomDeserializerReturnsNullForArrayElements() {\n+    Gson gson = new GsonBuilder()\n+      .registerTypeAdapter(Base.class, new JsonDeserializer<Base>() {\n+        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+          return null;\n+        }\n+      }).create();\n+    String json = \"[{baseName:'Base'},{baseName:'Base'}]\";\n+    Base[] target = gson.fromJson(json, Base[].class);\n+    assertNull(target[0]);\n+    assertNull(target[1]);\n+  }\n+\n+  public void testCustomDeserializerReturnsNullForArrayElementsForArrayField() {\n+    Gson gson = new GsonBuilder()\n+      .registerTypeAdapter(Base.class, new JsonDeserializer<Base>() {\n+        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+          return null;\n+        }\n+      }).create();\n+    String json = \"{bases:[{baseName:'Base'},{baseName:'Base'}]}\";\n+    ClassWithBaseArray target = gson.fromJson(json, ClassWithBaseArray.class);\n+    assertNull(target.bases[0]);\n+    assertNull(target.bases[1]);\n+  }\n+\n+  private static class ClassWithBaseArray {\n+    Base[] bases;\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java\n         }).create();\n     String json = \"{value:'value1'}\";\n     ObjectWithField target = gson.fromJson(json, ObjectWithField.class);\n-    assertFalse(\"value1\".equals(target.value));\n+    assertNull(target);\n   }\n \n   private static class ObjectWithField {", "timestamp": 1255117293, "metainfo": ""}