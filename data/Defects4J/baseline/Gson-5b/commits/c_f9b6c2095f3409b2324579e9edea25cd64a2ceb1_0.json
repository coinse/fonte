{"sha": "f9b6c2095f3409b2324579e9edea25cd64a2ceb1", "log": "Converted java.sql.Time type adapter to the new style.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n package com.google.gson;\n \n import java.lang.reflect.Type;\n-import java.sql.Time;\n import java.sql.Timestamp;\n import java.text.DateFormat;\n import java.text.ParseException;\n final class DefaultTypeAdapters {\n \n   private static final DefaultDateTypeAdapter DATE_TYPE_ADAPTER = new DefaultDateTypeAdapter();\n-  private static final DefaultTimeTypeAdapter TIME_TYPE_ADAPTER =\n-    new DefaultTimeTypeAdapter();\n   private static final DefaultTimestampDeserializer TIMESTAMP_DESERIALIZER =\n     new DefaultTimestampDeserializer();\n \n \n     map.register(Date.class, DATE_TYPE_ADAPTER, true);\n     map.register(Timestamp.class, DATE_TYPE_ADAPTER, true);\n-    map.register(Time.class, TIME_TYPE_ADAPTER, true);\n \n     map.makeUnmodifiable();\n     return map;\n         new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();\n     map.register(Date.class, wrapDeserializer(DATE_TYPE_ADAPTER), true);\n     map.register(Timestamp.class, wrapDeserializer(TIMESTAMP_DESERIALIZER), true);\n-    map.register(Time.class, wrapDeserializer(TIME_TYPE_ADAPTER), true);\n \n     map.makeUnmodifiable();\n     return map;\n       return new Timestamp(date.getTime());\n     }\n   }\n-\n-  static final class DefaultTimeTypeAdapter implements JsonSerializer<Time>, JsonDeserializer<Time> {\n-    private final DateFormat format;\n-    DefaultTimeTypeAdapter() {\n-      this.format = new SimpleDateFormat(\"hh:mm:ss a\");\n-    }\n-    public JsonElement serialize(Time src, Type typeOfSrc, JsonSerializationContext context) {\n-      synchronized (format) {\n-        String dateFormatAsString = format.format(src);\n-        return new JsonPrimitive(dateFormatAsString);\n-      }\n-    }\n-    public Time deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-        throws JsonParseException {\n-      if (!(json instanceof JsonPrimitive)) {\n-        throw new JsonParseException(\"The date should be a string value\");\n-      }\n-      try {\n-        synchronized (format) {\n-          Date date = format.parse(json.getAsString());\n-          return new Time(date.getTime());\n-        }\n-      } catch (ParseException e) {\n-        throw new JsonSyntaxException(e);\n-      }\n-    }\n-  }\n }\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n         .factory(TypeAdapters.INET_ADDRESS_FACTORY)\n         .factory(TypeAdapters.BIT_SET_FACTORY)\n         .factory(TypeAdapters.CALENDAR_FACTORY)\n+        .factory(TypeAdapters.SQL_TIME_FACTORY)\n         .factory(TypeAdapters.SQL_DATE_FACTORY)\n         .factory(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization))\n         .factory(ArrayTypeAdapter.FACTORY)\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.net.URL;\n+import java.sql.Time;\n import java.text.DateFormat;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n \n   public static final TypeAdapter.Factory UUID_FACTORY = newFactory(UUID.class, UUID);\n \n+  public static final TypeAdapter<Time> SQL_TIME = new TypeAdapter<Time>() {\n+    private final DateFormat format = new SimpleDateFormat(\"hh:mm:ss a\");\n+    @Override\n+    public Time read(JsonReader reader) throws IOException {\n+      try {\n+        synchronized (format) {\n+          Date date = format.parse(reader.nextString());\n+          return new java.sql.Time(date.getTime());\n+        }\n+      } catch (ParseException e) {\n+        throw new JsonSyntaxException(e);\n+      }\n+    }\n+    @Override\n+    public void write(JsonWriter writer, Time value) throws IOException {\n+      writer.value(format.format(value));\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory SQL_TIME_FACTORY = newFactory(Time.class, SQL_TIME);\n+\n   public static final TypeAdapter<java.sql.Date> SQL_DATE = new TypeAdapter<java.sql.Date>() {\n     private final DateFormat format = new SimpleDateFormat(\"MMM d, yyyy\");\n     @Override", "timestamp": 1316803365, "metainfo": ""}