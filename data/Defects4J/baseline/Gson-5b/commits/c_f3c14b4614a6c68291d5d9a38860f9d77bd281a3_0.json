{"sha": "f3c14b4614a6c68291d5d9a38860f9d77bd281a3", "log": "Added support for promoteNameToValue for JsonElementReader.", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java\n   @Override public String toString() {\n     return getClass().getSimpleName();\n   }\n+\n+  public void promoteNameToValue() throws IOException {\n+    expect(JsonToken.NAME);\n+    Iterator<?> i = (Iterator<?>) peekStack();\n+    Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();\n+    stack.add(entry.getValue());\n+    stack.add(new JsonPrimitive((String)entry.getKey()));\n+  }\n }\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n \n package com.google.gson.stream;\n \n-import com.google.gson.internal.JsonReaderInternalAccess;\n import java.io.Closeable;\n import java.io.EOFException;\n import java.io.IOException;\n import java.io.Reader;\n import java.util.ArrayList;\n import java.util.List;\n+\n+import com.google.gson.internal.JsonReaderInternalAccess;\n+import com.google.gson.internal.bind.JsonElementReader;\n \n /**\n  * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>)\n   static {\n     JsonReaderInternalAccess.INSTANCE = new JsonReaderInternalAccess() {\n       @Override public void promoteNameToValue(JsonReader reader) throws IOException {\n+        if (reader instanceof JsonElementReader) {\n+          ((JsonElementReader)reader).promoteNameToValue();\n+          return;\n+        }\n         reader.peek();\n         if (reader.token != JsonToken.NAME) {\n-          throw new IllegalStateException(\"Expected a name but was \" + reader.peek());\n+          throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + \" \"\n+              + reader.getSnippet());\n         }\n         reader.value = reader.name;\n         reader.name = null;\n--- a/gson/src/test/java/com/google/gson/functional/MapTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n \n package com.google.gson.functional;\n \n+import java.lang.reflect.Type;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import junit.framework.TestCase;\n+\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.InstanceCreator;\n import com.google.gson.JsonArray;\n import com.google.gson.JsonElement;\n import com.google.gson.JsonParseException;\n+import com.google.gson.JsonParser;\n import com.google.gson.JsonPrimitive;\n import com.google.gson.JsonSerializationContext;\n import com.google.gson.JsonSerializer;\n import com.google.gson.common.TestTypes;\n import com.google.gson.internal.$Gson$Types;\n import com.google.gson.reflect.TypeToken;\n-import java.lang.reflect.Type;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.TreeMap;\n-import junit.framework.TestCase;\n \n /**\n  * Functional test for Json serialization and deserialization for Maps\n     }\n   }\n \n+  public void testMapNamePromotionWithJsonElementReader() {\n+    String json = \"{'2.3':'a'}\";\n+    Map<Double, String> map = new LinkedHashMap<Double, String>();\n+    map.put(2.3, \"a\");\n+    JsonElement tree = new JsonParser().parse(json);\n+    assertEquals(map, gson.fromJson(tree, new TypeToken<Map<Double, String>>() {}.getType()));\n+  }\n+\n   static class Point {\n     private final int x;\n     private final int y;", "timestamp": 1322879746, "metainfo": ""}