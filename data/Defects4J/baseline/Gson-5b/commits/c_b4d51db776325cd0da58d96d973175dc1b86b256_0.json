{"sha": "b4d51db776325cd0da58d96d973175dc1b86b256", "log": "Add a test case for a problem reported on the group.  https://groups.google.com/d/topic/google-gson/EBmOCa8kJPE/discussion", "commit": "\n--- a/gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java\n \n package com.google.gson;\n \n-import junit.framework.TestCase;\n-\n import java.lang.reflect.Type;\n import java.math.BigInteger;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicLong;\n+import junit.framework.TestCase;\n \n /**\n  * Contains numerous tests involving registered type converters with a Gson instance.\n       return new AtomicInteger(--intValue);\n     }\n   }\n+\n+  static abstract class Abstract {\n+    String a;\n+  }\n+\n+  static class Concrete extends Abstract {\n+    String b;\n+  }\n+\n+  // https://groups.google.com/d/topic/google-gson/EBmOCa8kJPE/discussion\n+  public void testDeserializerForAbstractClass() {\n+    Concrete instance = new Concrete();\n+    instance.a = \"android\";\n+    instance.b = \"beep\";\n+    assertSerialized(\"{\\\"a\\\":\\\"android\\\"}\", Abstract.class, true, true, instance);\n+    assertSerialized(\"{\\\"a\\\":\\\"android\\\"}\", Abstract.class, true, false, instance);\n+    assertSerialized(\"{\\\"a\\\":\\\"android\\\"}\", Abstract.class, false, true, instance);\n+    assertSerialized(\"{\\\"a\\\":\\\"android\\\"}\", Abstract.class, false, false, instance);\n+    assertSerialized(\"{\\\"b\\\":\\\"beep\\\",\\\"a\\\":\\\"android\\\"}\", Concrete.class, true, true, instance);\n+    assertSerialized(\"{\\\"b\\\":\\\"beep\\\",\\\"a\\\":\\\"android\\\"}\", Concrete.class, true, false, instance);\n+    assertSerialized(\"{\\\"b\\\":\\\"beep\\\",\\\"a\\\":\\\"android\\\"}\", Concrete.class, false, true, instance);\n+    assertSerialized(\"{\\\"b\\\":\\\"beep\\\",\\\"a\\\":\\\"android\\\"}\", Concrete.class, false, false, instance);\n+  }\n+\n+  private void assertSerialized(String expected, Class<?> instanceType, boolean registerAbstractDeserializer,\n+      boolean registerAbstractHierarchyDeserializer, Object instance) {\n+    JsonDeserializer<Abstract> deserializer = new JsonDeserializer<Abstract>() {\n+      public Abstract deserialize(JsonElement json, Type typeOfT,\n+          JsonDeserializationContext context) throws JsonParseException {\n+        throw new AssertionError();\n+      }\n+    };\n+    GsonBuilder builder = new GsonBuilder();\n+    if (registerAbstractDeserializer) {\n+      builder.registerTypeAdapter(Abstract.class, deserializer);\n+    }\n+    if (registerAbstractHierarchyDeserializer) {\n+      builder.registerTypeHierarchyAdapter(Abstract.class, deserializer);\n+    }\n+    Gson gson = builder.create();\n+    assertEquals(expected, gson.toJson(instance, instanceType));\n+  }\n }", "timestamp": 1351528233, "metainfo": ""}