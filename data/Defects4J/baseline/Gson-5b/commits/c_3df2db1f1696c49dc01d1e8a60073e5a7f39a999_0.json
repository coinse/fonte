{"sha": "3df2db1f1696c49dc01d1e8a60073e5a7f39a999", "log": "Don't permit a type adapter for String to be registered.", "commit": "\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n         || typeAdapter instanceof JsonDeserializer<?>\n         || typeAdapter instanceof InstanceCreator<?>\n         || typeAdapter instanceof TypeAdapter<?>);\n-    if (Primitives.isPrimitive(type) || Primitives.isWrapperType(type)) {\n+    if (Primitives.isPrimitive(type) || Primitives.isWrapperType(type) || type == String.class) {\n       throw new IllegalArgumentException(\n           \"Cannot register type adapters for \" + type);\n     }\n    *\n    * @param baseType the class definition for the type adapter being registered for the base class\n    *        or interface\n-   * @param typeAdapter This object must implement at least one of {@link TypeAdapter}, \n+   * @param typeAdapter This object must implement at least one of {@link TypeAdapter},\n    *        {@link JsonSerializer} or {@link JsonDeserializer} interfaces.\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n    * @since 1.7\n--- a/gson/src/test/java/com/google/gson/GsonBuilderTest.java\n+++ b/gson/src/test/java/com/google/gson/GsonBuilderTest.java\n \n package com.google.gson;\n \n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+import java.io.IOException;\n import java.lang.reflect.Modifier;\n+import java.lang.reflect.Type;\n import junit.framework.TestCase;\n \n /**\n  * @author Inderjeet Singh\n  */\n public class GsonBuilderTest extends TestCase {\n+  private static final TypeAdapter<Object> NULL_TYPE_ADAPTER = new TypeAdapter<Object>() {\n+    @Override public void write(JsonWriter out, Object value) {\n+      throw new AssertionError();\n+    }\n+    @Override public Object read(JsonReader in) {\n+      throw new AssertionError();\n+    }\n+  };\n \n   public void testCreatingMoreThanOnce() {\n     GsonBuilder builder = new GsonBuilder();\n         .excludeFieldsWithModifiers(Modifier.VOLATILE, Modifier.PRIVATE)\n         .create();\n     assertEquals(\"{\\\"d\\\":\\\"d\\\"}\", gson.toJson(new HasModifiers()));\n+  }\n+\n+  public void testRegisterTypeAdapterForUnsupportedType() {\n+    Type[] types = {\n+        byte.class,\n+        int.class,\n+        double.class,\n+        Short.class,\n+        Long.class,\n+        String.class,\n+    };\n+    for (Type type : types) {\n+      try {\n+        new GsonBuilder().registerTypeAdapter(type, NULL_TYPE_ADAPTER);\n+        fail(type.toString());\n+      } catch (IllegalArgumentException e) {\n+      }\n+    }\n   }\n \n   @SuppressWarnings(\"unused\")", "timestamp": 1334255268, "metainfo": ""}