{"sha": "b0a172944afe21e6986bfddadc43daaa1127bd41", "log": "More number parsing improvements.", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n     }\n \n     if (c == -1 || !isLiteral((char) c)) {\n-      if (fitsInLong) {\n+      if (fitsInLong && (integer != Long.MIN_VALUE || negative)) {\n         peekedInteger = negative ? integer : -integer;\n         pos += i;\n         return peeked = PEEKED_INTEGER;\n--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n       reader.nextLong();\n       fail();\n     } catch (NumberFormatException expected) {\n+    }\n+  }\n+\n+  /**\n+   * This test fails because there's no double for 9223372036854775808, and our\n+   * long parsing uses Double.parseDouble() for fractional values.\n+   */\n+  public void testPeekLargerThanLongMaxValue() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"[9223372036854775808]\"));\n+    reader.setLenient(true);\n+    reader.beginArray();\n+    assertEquals(NUMBER, reader.peek());\n+    try {\n+      reader.nextLong();\n+      fail();\n+    } catch (NumberFormatException e) {\n     }\n   }\n ", "timestamp": 1346037461, "metainfo": ""}