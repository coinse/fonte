{"sha": "3d50a6b72aabd4f3eb4a309a0df51c6d0db619d9", "log": "New failing test for RuntimeTypeAdapters!", "commit": "\n--- a/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapter.java\n+++ b/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapter.java\n     return new RuntimeTypeAdapter<T>(c, typeFieldName);\n   }\n \n-  public void registerSubtype(Class<? extends T> type, String label) {\n+  public RuntimeTypeAdapter<T> registerSubtype(Class<? extends T> type, String label) {\n     if (subtypeToLabel.containsKey(type) || labelToSubtype.containsKey(label)) {\n       throw new IllegalArgumentException(\"types and labels must be unique\");\n     }\n     labelToSubtype.put(label, type);\n     subtypeToLabel.put(type, label);\n+    return this;\n   }\n \n-  public void registerSubtype(Class<? extends T> type) {\n-    registerSubtype(type, type.getSimpleName());\n+  public RuntimeTypeAdapter<T> registerSubtype(Class<? extends T> type) {\n+    return registerSubtype(type, type.getSimpleName());\n   }\n \n   public JsonElement serialize(T src, Type typeOfSrc, JsonSerializationContext context) {\n--- a/extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java\n+++ b/extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java\n public final class RuntimeTypeAdapterTest extends TestCase {\n \n   public void testRuntimeTypeAdapter() {\n-    RuntimeTypeAdapter<BillingInstrument> rta = RuntimeTypeAdapter.create(BillingInstrument.class);\n-    rta.registerSubtype(CreditCard.class);\n-\n-    CreditCard cc = new CreditCard(\"Jesse\", 234);\n+    RuntimeTypeAdapter<BillingInstrument> rta = RuntimeTypeAdapter.create(BillingInstrument.class)\n+        .registerSubtype(CreditCard.class);\n     Gson gson = new GsonBuilder()\n         .registerTypeAdapter(BillingInstrument.class, rta)\n         .create();\n-    String ccJson = gson.toJson(cc, BillingInstrument.class);\n-    assertEquals(\"{\\\"type\\\":\\\"CreditCard\\\",\\\"cvv\\\":234,\\\"ownerName\\\":\\\"Jesse\\\"}\", ccJson);\n \n-    BillingInstrument creditCard = gson.fromJson(\n+    CreditCard original = new CreditCard(\"Jesse\", 234);\n+    assertEquals(\"{\\\"type\\\":\\\"CreditCard\\\",\\\"cvv\\\":234,\\\"ownerName\\\":\\\"Jesse\\\"}\",\n+        gson.toJson(original, BillingInstrument.class));\n+    BillingInstrument deserialized = gson.fromJson(\n         \"{type:'CreditCard',cvv:234,ownerName:'Jesse'}\", BillingInstrument.class);\n-    assertTrue(creditCard instanceof CreditCard);\n+    assertEquals(\"Jesse\", deserialized.ownerName);\n+    assertTrue(deserialized instanceof CreditCard);\n+  }\n+\n+  public void testRuntimeTypeIsBaseType() {\n+    RuntimeTypeAdapter<BillingInstrument> rta = RuntimeTypeAdapter.create(BillingInstrument.class)\n+        .registerSubtype(BillingInstrument.class);\n+    Gson gson = new GsonBuilder()\n+        .registerTypeAdapter(BillingInstrument.class, rta)\n+        .create();\n+\n+    BillingInstrument original = new BillingInstrument(\"Jesse\");\n+    assertEquals(\"{\\\"type\\\":\\\"BillingInstrument\\\",\\\"ownerName\\\":\\\"Jesse\\\"}\",\n+        gson.toJson(original, BillingInstrument.class));\n+    BillingInstrument deserialized = gson.fromJson(\n+        \"{type:'CreditCard',ownerName:'Jesse'}\", BillingInstrument.class);\n+    assertEquals(\"Jesse\", deserialized.ownerName);\n   }\n \n   static class CreditCard extends BillingInstrument {", "timestamp": 1306522051, "metainfo": ""}