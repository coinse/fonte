{"sha": "0ff7d980c5430be317aca0405477dec74ab0390c", "log": "Adjust LruCacheTest to use the Map API", "commit": "\n--- a/gson/src/test/java/com/google/gson/LruCacheTest.java\n+++ b/gson/src/test/java/com/google/gson/LruCacheTest.java\n public class LruCacheTest extends TestCase {\n \n   public void testCacheHitAndMiss() throws Exception {\n-    Cache<String, Integer> cache = new LruCache<String, Integer>(3);\n+    LruCache<String, Integer> cache = new LruCache<String, Integer>(3);\n \n     String key = \"key1\";\n-    assertNull(cache.getElement(key));\n-    cache.addElement(key, 1);\n-    assertEquals(1, cache.getElement(key).intValue());\n+    assertNull(cache.get(key));\n+    cache.put(key, 1);\n+    assertEquals(1, cache.get(key).intValue());\n \n     String key2 = \"key2\";\n-    cache.addElement(key2, 2);\n-    assertEquals(1, cache.getElement(key).intValue());\n-    assertEquals(2, cache.getElement(key2).intValue());\n+    cache.put(key2, 2);\n+    assertEquals(1, cache.get(key).intValue());\n+    assertEquals(2, cache.get(key2).intValue());\n   }\n \n   public void testCacheKeyOverwrite() throws Exception {\n-    Cache<String, Integer> cache = new LruCache<String, Integer>(3);\n+    LruCache<String, Integer> cache = new LruCache<String, Integer>(3);\n \n     String key = \"key1\";\n-    assertNull(cache.getElement(key));\n-    cache.addElement(key, 1);\n-    assertEquals(1, cache.getElement(key).intValue());\n+    assertNull(cache.get(key));\n+    cache.put(key, 1);\n+    assertEquals(1, cache.get(key).intValue());\n \n-    cache.addElement(key, 5);\n-    assertEquals(5, cache.getElement(key).intValue());\n+    cache.put(key, 5);\n+    assertEquals(5, cache.get(key).intValue());\n   }\n \n   public void testCacheEviction() throws Exception {\n-    Cache<String, Integer> cache = new LruCache<String, Integer>(5);\n+    LruCache<String, Integer> cache = new LruCache<String, Integer>(5);\n \n-    cache.addElement(\"key1\", 1);\n-    cache.addElement(\"key2\", 2);\n-    cache.addElement(\"key3\", 3);\n-    cache.addElement(\"key4\", 4);\n-    cache.addElement(\"key5\", 5);\n-    assertEquals(1, cache.getElement(\"key1\").intValue());\n-    assertEquals(2, cache.getElement(\"key2\").intValue());\n-    assertEquals(3, cache.getElement(\"key3\").intValue());\n-    assertEquals(4, cache.getElement(\"key4\").intValue());\n-    assertEquals(5, cache.getElement(\"key5\").intValue());\n+    cache.put(\"key1\", 1);\n+    cache.put(\"key2\", 2);\n+    cache.put(\"key3\", 3);\n+    cache.put(\"key4\", 4);\n+    cache.put(\"key5\", 5);\n+    assertEquals(1, cache.get(\"key1\").intValue());\n+    assertEquals(2, cache.get(\"key2\").intValue());\n+    assertEquals(3, cache.get(\"key3\").intValue());\n+    assertEquals(4, cache.get(\"key4\").intValue());\n+    assertEquals(5, cache.get(\"key5\").intValue());\n \n     // Access key1 to show key2 will be evicted (shows not a FIFO cache)\n-    cache.getElement(\"key1\");\n-    cache.getElement(\"key3\");\n-    cache.addElement(\"key6\", 6);\n-    cache.addElement(\"key7\", 7);\n-    assertEquals(1, cache.getElement(\"key1\").intValue());\n-    assertNull(cache.getElement(\"key2\"));\n-    assertEquals(3, cache.getElement(\"key3\").intValue());\n-    assertNull(cache.getElement(\"key4\"));\n-    assertEquals(5, cache.getElement(\"key5\").intValue());\n-    assertEquals(6, cache.getElement(\"key6\").intValue());\n-    assertEquals(7, cache.getElement(\"key7\").intValue());\n+    cache.get(\"key1\");\n+    cache.get(\"key3\");\n+    cache.put(\"key6\", 6);\n+    cache.put(\"key7\", 7);\n+    assertEquals(1, cache.get(\"key1\").intValue());\n+    assertNull(cache.get(\"key2\"));\n+    assertEquals(3, cache.get(\"key3\").intValue());\n+    assertNull(cache.get(\"key4\"));\n+    assertEquals(5, cache.get(\"key5\").intValue());\n+    assertEquals(6, cache.get(\"key6\").intValue());\n+    assertEquals(7, cache.get(\"key7\").intValue());\n   }\n }", "timestamp": 1321856790, "metainfo": ""}