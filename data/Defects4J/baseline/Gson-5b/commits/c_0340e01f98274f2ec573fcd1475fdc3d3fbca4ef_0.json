{"sha": "0340e01f98274f2ec573fcd1475fdc3d3fbca4ef", "log": "Support booleans as strings in stream binding. Remove support for interpreting \"1\" as true.  Interpreting '1' as true was not backwards compatible.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n     if (isBoolean()) {\n       return getAsBooleanWrapper().booleanValue();\n     } else {\n-      // Check to see if the value (as a String) is either \"true\" (ignore case) or \"1\".\n-      // If so then we will assume that it is true; otherwise, false.\n-      // The \"1\" case is for parsing JSON that assume bits as booleans (i.e. 0 and 1).\n-      String stringValue = getAsString();\n-      return Boolean.parseBoolean(stringValue) || \"1\".equals(stringValue);\n+      // Check to see if the value as a String is \"true\" in any case.\n+      return Boolean.parseBoolean(getAsString());\n     }\n   }\n \n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n       if (reader.peek() == JsonToken.NULL) {\n         reader.nextNull();\n         return null;\n+      } else if (reader.peek() == JsonToken.STRING) {\n+        // support strings for compatibility with GSON 1.7\n+        return Boolean.parseBoolean(reader.nextString());\n       }\n       return reader.nextBoolean();\n     }\n--- a/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java\n \n     // Extra support for booleans\n     json = new JsonPrimitive(1);\n-    assertTrue(json.getAsBoolean());\n+    assertFalse(json.getAsBoolean());\n \n     json = new JsonPrimitive(\"1\");\n-    assertTrue(json.getAsBoolean());\n+    assertFalse(json.getAsBoolean());\n \n     json = new JsonPrimitive(\"true\");\n     assertTrue(json.getAsBoolean());\n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n import com.google.gson.JsonPrimitive;\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.LongSerializationPolicy;\n+import com.google.gson.reflect.TypeToken;\n import java.io.Serializable;\n import java.io.StringReader;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n+import java.util.Arrays;\n+import java.util.List;\n import junit.framework.TestCase;\n \n /**\n       gson.fromJson(\"12121211243123245845384534687435634558945453489543985435\", BigDecimal.class);\n     assertEquals(\"12121211243123245845384534687435634558945453489543985435\", actual.toPlainString());\n   }\n+\n+  public void testStringsAsBooleans() {\n+    String json = \"['true', 'false', 'TRUE', 'yes', '1']\";\n+    assertEquals(Arrays.asList(true, false, true, false, false),\n+        gson.<List<Boolean>>fromJson(json, new TypeToken<List<Boolean>>() {}.getType()));\n+  }\n }", "timestamp": 1319406090, "metainfo": ""}