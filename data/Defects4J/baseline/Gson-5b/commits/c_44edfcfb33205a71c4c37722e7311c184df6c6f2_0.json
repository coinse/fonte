{"sha": "44edfcfb33205a71c4c37722e7311c184df6c6f2", "log": "Added version support in RestClient. Revised CallPath to extract version number specified in the path. Moved version tests in CallPathProviderTest to CallPathTest.", "commit": "\n--- a/wsclient/src/main/java/com/google/gson/rest/client/RestClient.java\n+++ b/wsclient/src/main/java/com/google/gson/rest/client/RestClient.java\n   }\n   \n   private URL getWebServiceUrl(RestCallSpec callSpec) {\n-    String url = config.getServiceBaseUrl() + callSpec.getPath().get();\n+    double version = callSpec.getVersion();\n+    String versionPath = version == -1 ? \"\" : \"/\" + version;\n+    String url = config.getServiceBaseUrl() + versionPath + callSpec.getPath().get();\n     try {\n       return new URL(url);\n     } catch (MalformedURLException e) {\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/CallPath.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/CallPath.java\n public final class CallPath {\n \n   private final String path;\n+  private final double version;\n \n   public CallPath(String path) {\n-    this.path = path;\n+    if (path == null) {\n+      this.path = null;\n+      version = -1D;\n+    } else {\n+      int index1 = path.indexOf('/');\n+      int index2 = path.substring(index1+1).indexOf('/');\n+      String versionStr = path.substring(index1+1, index2+1);\n+      String callPathStr = path;\n+      double givenVersion = -1D;\n+      try {\n+        // Skip over the version number from the URL\n+        givenVersion = Double.parseDouble(versionStr);\n+        callPathStr = path.substring(index2+1);\n+      } catch (NumberFormatException e) {\n+        // Assume that version number wasn't specified\n+      }\n+      this.path = callPathStr;\n+      this.version = givenVersion;\n+    }\n   }\n \n   public String get() {\n     return path;\n   }\n-  \n+\n+  public double getVersion() {\n+    return version;\n+  }\n+\n   @Override\n   public int hashCode() {\n     return path.hashCode();\n     if (obj == null) {\n       return false;\n     }\n-    return getClass() == obj.getClass() && path == ((CallPath)obj).path;\n+    return getClass() == obj.getClass() && equal(path, ((CallPath)obj).path);\n   }\n-  \n+\n+  private static boolean equal(String s1, String s2) {\n+    return s1 == s2 || (s1 != null && s2 != null && s1.equals(s2));\n+  }\n+\n   @Override\n   public String toString() {\n     return path;\n--- /dev/null\n+++ b/wsdef/src/test/java/com/google/gson/webservice/definition/CallPathTest.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition;\n+\n+import junit.framework.TestCase;\n+\n+public class CallPathTest extends TestCase {\n+\n+  public void testVersionIsSkipped() {\n+    CallPath path = new CallPath(\"/1.0/rest/service1\");\n+    assertEquals(\"/rest/service1\", path.get());\n+    assertEquals(1D, path.getVersion());\n+  }\n+\n+  public void testVersionNotPresent() {\n+    CallPath path = new CallPath(\"/rest/service1\");\n+    assertEquals(\"/rest/service1\", path.get());\n+    assertEquals(-1D, path.getVersion());\n+  }\n+}\n--- a/wsf/src/main/java/com/google/gson/wsf/inject/CallPathProvider.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/inject/CallPathProvider.java\n   }\n   \n   public CallPathProvider(String pathInfo) {\n-    int index1 = pathInfo.indexOf('/');\n-    int index2 = pathInfo.substring(index1+1).indexOf('/');\n-    String versionStr = pathInfo.substring(index1+1, index2+1);\n-    String callPathStr = pathInfo;\n-    try {\n-      // Skip over the version number from the URL\n-      Double.parseDouble(versionStr);\n-      callPathStr = pathInfo.substring(index2+1);\n-    } catch (NumberFormatException e) {\n-      // Assume that version number wasn't specified\n-    }\n-    this.callPath = new CallPath(callPathStr);\n+    this.callPath = new CallPath(pathInfo);\n   }\n \n   @Override", "timestamp": 1288800977, "metainfo": ""}