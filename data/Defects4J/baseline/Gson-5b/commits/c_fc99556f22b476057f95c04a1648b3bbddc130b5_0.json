{"sha": "fc99556f22b476057f95c04a1648b3bbddc130b5", "log": "Support type exclusion strategies.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n         false, LongSerializationPolicy.DEFAULT);\n   }\n \n-  Gson(ExclusionStrategy deserializationExclusionStrategy,\n-      ExclusionStrategy serializationExclusionStrategy,\n+  Gson(final ExclusionStrategy deserializationExclusionStrategy,\n+      final ExclusionStrategy serializationExclusionStrategy,\n       final FieldNamingStrategy2 fieldNamingPolicy,\n       final MappedObjectConstructor objectConstructor, boolean serializeNulls,\n       final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,\n       }\n     };\n \n+    TypeAdapter.Factory excludedTypeFactory = new TypeAdapter.Factory() {\n+      @Override public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> type) {\n+        Class<?> rawType = type.getRawType();\n+        if (serializationExclusionStrategy.shouldSkipClass(rawType)\n+            || deserializationExclusionStrategy.shouldSkipClass(rawType)) {\n+          return TypeAdapters.EXCLUDED_TYPE_ADAPTER;\n+        } else {\n+          return null;\n+        }\n+      }\n+    };\n+\n     MiniGson.Builder builder = new MiniGson.Builder()\n         .withoutDefaultFactories()\n         .factory(TypeAdapters.BOOLEAN_FACTORY)\n         .factory(TypeAdapters.newFactory(long.class, Long.class,\n             longAdapter(longSerializationPolicy)))\n         .factory(TypeAdapters.STRING_FACTORY)\n+        .factory(excludedTypeFactory)\n         .factory(new GsonToMiniGsonTypeAdapter(serializers, deserializers, serializeNulls))\n         .factory(CollectionTypeAdapter.FACTORY)\n         .factory(StringToValueMapTypeAdapter.FACTORY)\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n \n   public static final TypeAdapter.Factory STRING_FACTORY = newFactory(String.class, STRING);\n \n+  public static final TypeAdapter EXCLUDED_TYPE_ADAPTER = new TypeAdapter<Object>() {\n+    @Override public Object read(JsonReader reader) throws IOException {\n+      reader.skipValue();\n+      return null;\n+    }\n+    @Override public void write(JsonWriter writer, Object value) throws IOException {\n+      writer.nullValue();\n+    }\n+  };\n+\n   public static <T> TypeAdapter.Factory newFactory(\n       final TypeToken<T> type, final TypeAdapter<T> typeAdapter) {\n     return new TypeAdapter.Factory() {", "timestamp": 1312503949, "metainfo": ""}