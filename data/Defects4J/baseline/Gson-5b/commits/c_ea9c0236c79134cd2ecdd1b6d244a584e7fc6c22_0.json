{"sha": "ea9c0236c79134cd2ecdd1b6d244a584e7fc6c22", "log": "Converted InetAddress type adapter to new style.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n   @SuppressWarnings(\"unchecked\")\n   private static final EnumTypeAdapter ENUM_TYPE_ADAPTER = new EnumTypeAdapter();\n   private static final BitSetTypeAdapter BIT_SET_ADAPTER = new BitSetTypeAdapter();\n-  private static final DefaultInetAddressAdapter INET_ADDRESS_ADAPTER =\n-      new DefaultInetAddressAdapter();\n-      private static final CollectionTypeAdapter COLLECTION_TYPE_ADAPTER = new CollectionTypeAdapter();\n+  private static final CollectionTypeAdapter COLLECTION_TYPE_ADAPTER = new CollectionTypeAdapter();\n   private static final MapTypeAdapter MAP_TYPE_ADAPTER = new MapTypeAdapter();\n \n   private static final ByteTypeAdapter BYTE_TYPE_ADAPTER = new ByteTypeAdapter();\n     ParameterizedTypeHandlerMap<JsonSerializer<?>> map =\n         new ParameterizedTypeHandlerMap<JsonSerializer<?>>();\n     map.registerForTypeHierarchy(Enum.class, ENUM_TYPE_ADAPTER, true);\n-    map.registerForTypeHierarchy(InetAddress.class, INET_ADDRESS_ADAPTER, true);\n     map.registerForTypeHierarchy(Collection.class, COLLECTION_TYPE_ADAPTER, true);\n     map.registerForTypeHierarchy(Map.class, MAP_TYPE_ADAPTER, true);\n     map.makeUnmodifiable();\n     ParameterizedTypeHandlerMap<JsonDeserializer<?>> map =\n         new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();\n     map.registerForTypeHierarchy(Enum.class, wrapDeserializer(ENUM_TYPE_ADAPTER), true);\n-    map.registerForTypeHierarchy(InetAddress.class, wrapDeserializer(INET_ADDRESS_ADAPTER), true);\n     map.registerForTypeHierarchy(Collection.class, wrapDeserializer(COLLECTION_TYPE_ADAPTER), true);\n     map.registerForTypeHierarchy(Map.class, wrapDeserializer(MAP_TYPE_ADAPTER), true);\n     map.makeUnmodifiable();\n     }\n   }\n \n-  static final class DefaultInetAddressAdapter\n-      implements JsonDeserializer<InetAddress>, JsonSerializer<InetAddress> {\n-\n-    public InetAddress deserialize(JsonElement json, Type typeOfT,\n-        JsonDeserializationContext context) throws JsonParseException {\n-      try {\n-        return InetAddress.getByName(json.getAsString());\n-      } catch (UnknownHostException e) {\n-        throw new JsonParseException(e);\n-      }\n-    }\n-\n-    public JsonElement serialize(InetAddress src, Type typeOfSrc,\n-        JsonSerializationContext context) {\n-      return new JsonPrimitive(src.getHostAddress());\n-    }\n-  }\n-\n   @SuppressWarnings(\"unchecked\")\n   private static final class EnumTypeAdapter<T extends Enum<T>>\n       implements JsonSerializer<T>, JsonDeserializer<T> {\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n         .factory(TypeAdapters.URI_FACTORY)\n         .factory(TypeAdapters.UUID_FACTORY)\n         .factory(TypeAdapters.LOCALE_FACTORY)\n+        .factory(TypeAdapters.INET_ADDRESS_FACTORY)\n         .typeAdapter(BigDecimal.class, new BigDecimalTypeAdapter())\n         .typeAdapter(BigInteger.class, new BigIntegerTypeAdapter())\n         .factory(excludedTypeFactory)\n--- a/gson/src/main/java/com/google/gson/internal/bind/MiniGson.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/MiniGson.java\n       return this;\n     }\n \n-    public <T> Builder typeHierarchyAdapter(TypeToken<T> type, TypeAdapter<T> typeAdapter) {\n-      factories.add(TypeAdapters.newTypeHierarchyFactory(type, typeAdapter));\n+    public <T> Builder typeHierarchyAdapter(Class<T> clazz, TypeAdapter<T> typeAdapter) {\n+      factories.add(TypeAdapters.newTypeHierarchyFactory(clazz, typeAdapter));\n       return this;\n     }\n \n--- a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java\n public final class ObjectTypeAdapter extends TypeAdapter<Object> {\n   public static final Factory FACTORY = new Factory() {\n     @SuppressWarnings(\"unchecked\")\n-    @Override public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> type) {\n+    public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> type) {\n       if (type.getRawType() == Object.class) {\n         return (TypeAdapter<T>) new ObjectTypeAdapter(context);\n       }\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n \n package com.google.gson.internal.bind;\n \n-import com.google.gson.reflect.TypeToken;\n-import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonToken;\n-import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n+import java.net.InetAddress;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.util.Locale;\n import java.util.StringTokenizer;\n import java.util.UUID;\n+\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n+import com.google.gson.stream.JsonWriter;\n \n /**\n  * Type adapters for basic types.\n   };\n \n   public static final TypeAdapter.Factory URI_FACTORY = newFactory(URI.class, URI);\n+\n+  public static final TypeAdapter<InetAddress> INET_ADDRESS = new TypeAdapter<InetAddress>() {\n+    public InetAddress read(JsonReader reader) throws IOException {\n+      return InetAddress.getByName(reader.nextString());\n+    }\n+    public void write(JsonWriter writer, InetAddress value) throws IOException {\n+      writer.value(value.getHostAddress());\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory INET_ADDRESS_FACTORY =\n+    newTypeHierarchyFactory(InetAddress.class, INET_ADDRESS);\n \n   public static final TypeAdapter<UUID> UUID = new TypeAdapter<UUID>() {\n     public UUID read(JsonReader reader) throws IOException {\n   }\n \n   public static <T> TypeAdapter.Factory newTypeHierarchyFactory(\n-      TypeToken<T> type, TypeAdapter<T> typeAdapter) {\n-    return new TypeAdapter.Factory() {\n-      public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {\n-        // TODO: use Inder's TypeHierarchyAdapter here\n-        throw new UnsupportedOperationException();\n+      final Class<T> clazz, final TypeAdapter<T> typeAdapter) {\n+    return new TypeAdapter.Factory() {\n+      public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {\n+        return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter<T>) typeAdapter : null;\n       }\n     };\n   }", "timestamp": 1315540932, "metainfo": ""}