{"sha": "1ad0489b845f3486b19a81b2182bc34ab97eccec", "log": "Initial version of Gson benchmark using Caliper", "commit": "\n--- /dev/null\n+++ b/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitives.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.metrics;\n+\n+/**\n+ * Class with a bunch of primitive fields\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class BagOfPrimitives {\n+  public static final long DEFAULT_VALUE = 0;\n+  public long longValue;\n+  public int intValue;\n+  public boolean booleanValue;\n+  public String stringValue;\n+\n+  public BagOfPrimitives() {\n+    this(DEFAULT_VALUE, 0, false, \"\");\n+  }\n+\n+  public BagOfPrimitives(long longValue, int intValue, boolean booleanValue, String stringValue) {\n+    this.longValue = longValue;\n+    this.intValue = intValue;\n+    this.booleanValue = booleanValue;\n+    this.stringValue = stringValue;\n+  }\n+\n+  public int getIntValue() {\n+    return intValue;\n+  }\n+\n+  public String getExpectedJson() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"{\");\n+    sb.append(\"\\\"longValue\\\":\").append(longValue).append(\",\");\n+    sb.append(\"\\\"intValue\\\":\").append(intValue).append(\",\");\n+    sb.append(\"\\\"booleanValue\\\":\").append(booleanValue).append(\",\");\n+    sb.append(\"\\\"stringValue\\\":\\\"\").append(stringValue).append(\"\\\"\");\n+    sb.append(\"}\");\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    final int prime = 31;\n+    int result = 1;\n+    result = prime * result + (booleanValue ? 1231 : 1237);\n+    result = prime * result + intValue;\n+    result = prime * result + (int) (longValue ^ (longValue >>> 32));\n+    result = prime * result + ((stringValue == null) ? 0 : stringValue.hashCode());\n+    return result;\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj)\n+      return true;\n+    if (obj == null)\n+      return false;\n+    if (getClass() != obj.getClass())\n+      return false;\n+    BagOfPrimitives other = (BagOfPrimitives) obj;\n+    if (booleanValue != other.booleanValue)\n+      return false;\n+    if (intValue != other.intValue)\n+      return false;\n+    if (longValue != other.longValue)\n+      return false;\n+    if (stringValue == null) {\n+      if (other.stringValue != null)\n+        return false;\n+    } else if (!stringValue.equals(other.stringValue))\n+      return false;\n+    return true;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"(longValue=%d,intValue=%d,booleanValue=%b,stringValue=%s)\",\n+        longValue, intValue, booleanValue, stringValue);\n+  }\n+}\n--- /dev/null\n+++ b/metrics/src/main/java/com/google/gson/metrics/GsonBenchmark.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.metrics;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+\n+import com.google.caliper.Param;\n+import com.google.caliper.Runner;\n+import com.google.caliper.SimpleBenchmark;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.stream.JsonReader;\n+\n+/**\n+ * Caliper based micro benchmarks for Gson\n+ *\n+ * @author Inderjeet Singh\n+ * @author Jesse Wilson\n+ * @author Joel Leitch\n+ */\n+public class GsonBenchmark extends SimpleBenchmark {\n+\n+  private Gson gson;\n+  private BagOfPrimitives bag;\n+  private String json;\n+  @Param\n+  private boolean pretty;\n+\n+  public static void main(String[] args) {\n+    Runner.main(GsonBenchmark.class, args);\n+  }\n+  \n+  @Override\n+  protected void setUp() throws Exception {\n+    this.gson = pretty ? new GsonBuilder().setPrettyPrinting().create() : new Gson();\n+    this.bag = new BagOfPrimitives(10L, 1, false, \"foo\");\n+    this.json = gson.toJson(bag);\n+  }\n+\n+  public void timeObjectSerialization(int reps) {\n+    for (int i=0; i<reps; ++i) {\n+      gson.toJson(bag);\n+    }\n+  }\n+\n+  public void timeObjectDeserialization(int reps) {\n+    for (int i=0; i<reps; ++i) {\n+      gson.fromJson(json, BagOfPrimitives.class);\n+    }\n+  }\n+\n+  public void timeStreamingParserDeserialization(int reps) throws IOException {\n+    for (int i=0; i<reps; ++i) {\n+      StringReader reader = new StringReader(json);\n+      JsonReader jr = new JsonReader(reader);\n+      jr.beginObject();\n+      long longValue = 0;\n+      int intValue = 0;\n+      boolean booleanValue = false;\n+      String stringValue = null;\n+      while(jr.hasNext()) {\n+        String name = jr.nextName();\n+        if (name.equals(\"longValue\")) {\n+          longValue = jr.nextLong();\n+        } else if (name.equals(\"intValue\")) {\n+          intValue = jr.nextInt();\n+        } else if (name.equals(\"booleanValue\")) {\n+          booleanValue = jr.nextBoolean();\n+        } else if (name.equals(\"stringValue\")) {\n+          stringValue = jr.nextString();\n+        } else {\n+          throw new IOException(\"Unexpected name: \" + name);\n+        }\n+      }\n+      jr.endObject();\n+      new BagOfPrimitives(longValue, intValue, booleanValue, stringValue);\n+    }\n+  }\n+}", "timestamp": 1295983220, "metainfo": ""}