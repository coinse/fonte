{"sha": "2780a2a9bf5b0bf7eb6b14fc6ec27916c1c867fc", "log": "Fixed eclipse warnings.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\n    * @since 1.3\n    */\n-  @SuppressWarnings(\"unchecked\")\n   public <T> T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException {\n     if (json == null) {\n       return null;\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationContext.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationContext.java\n   /**\n    * TODO: remove this from the public API\n    */\n-  @SuppressWarnings(\"unchecked\") @Deprecated\n+  @Deprecated\n   public <T> T construct(Type type) {\n     throw new UnsupportedOperationException();\n   }\n    * @return An object of type typeOfT.\n    * @throws JsonParseException if the parse tree does not contain expected data.\n    */\n-  @SuppressWarnings(\"unchecked\")\n   public <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\n     return gson.fromJson(json, typeOfT);\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n   public <T> T deserializeDefault(JsonElement json, Type typeOfT) throws JsonParseException {\n     throw new UnsupportedOperationException();\n   }\n--- a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java\n+++ b/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java\n       final Type type, final Class<? super T> rawType) {\n     return new ObjectConstructor<T>() {\n       private final UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n+      @SuppressWarnings(\"unchecked\")\n       public T construct() {\n         try {\n-          return (T) unsafeAllocator.newInstance(rawType);\n+          Object newInstance = unsafeAllocator.newInstance(rawType);\n+          return (T) newInstance;\n         } catch (Exception e) {\n           throw new RuntimeException((\"Unable to invoke no-args constructor for \" + type + \". \"\n               + \"Register an InstanceCreator with Gson for this type may fix this problem.\"), e);\n--- a/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java\n  */\n public final class ArrayTypeAdapter<E> extends TypeAdapter<Object> {\n   public static final Factory FACTORY = new Factory() {\n+    @SuppressWarnings(\"unchecked\")\n     public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {\n       Type type = typeToken.getType();\n       if (!(type instanceof GenericArrayType || type instanceof Class && ((Class<?>) type).isArray())) {\n     return array;\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n   @Override public void write(JsonWriter writer, Object array) throws IOException {\n     if (array == null) {\n       writer.nullValue(); // TODO: better policy here?\n--- a/gson/src/main/java/com/google/gson/internal/bind/Reflection.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/Reflection.java\n   /**\n    * Finds a compatible runtime type if it is more specific\n    */\n+  @SuppressWarnings(\"unchecked\")\n   public static Type getRuntimeTypeIfMoreSpecific(Type type, Object value) {\n     if (value != null\n         && (type == Object.class || type instanceof TypeVariable || type instanceof Class<?>)) {\n--- a/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java\n   private final MiniGson gson = new MiniGson.Builder().build();\n   private final TypeAdapter<Object> adapter = gson.getAdapter(Object.class);\n \n+  @SuppressWarnings(\"unchecked\")\n   public void testDeserialize() throws Exception {\n     Map<?, ?> map = (Map) adapter.fromJson(\"{a: 5, b: [1, 2, null], c: {x: y}}\");\n     assertEquals(5.0, map.get(\"a\"));\n     assertEquals(3, map.size());\n   }\n \n+  @SuppressWarnings(\"unused\")\n   public void testSerialize() throws Exception {\n     Object object = new Object() {\n       Object a = 5;\n--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n     assertTrue(json.contains(bag1.getExpectedJson()));\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n   public void testRawCollectionDeserializationNotAlllowed() {\n     String json = \"[0,1,2,3,4,5,6,7,8,9]\";\n     Collection integers = gson.fromJson(json, Collection.class);", "timestamp": 1316152996, "metainfo": ""}