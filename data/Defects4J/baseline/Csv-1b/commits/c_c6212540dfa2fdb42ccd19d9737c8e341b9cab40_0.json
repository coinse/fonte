{"sha": "c6212540dfa2fdb42ccd19d9737c8e341b9cab40", "log": "Use JUnit 4 assertions for arrays  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n import java.io.Reader;\n import java.io.StringReader;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Iterator;\n import java.util.List;\n import java.util.NoSuchElementException;\n     public void testGetLine() throws IOException {\n         CSVParser parser = new CSVParser(new StringReader(code), CSVFormat.DEFAULT.withSurroundingSpacesIgnored(true));\n         for (String[] re : res) {\n-            assertTrue(\"Failed to match: \"+Arrays.toString(re), Arrays.equals(re, parser.getRecord().values()));\n+            assertArrayEquals(re, parser.getRecord().values());\n         }\n         \n         assertNull(parser.getRecord());\n         assertEquals(res.length, records.size());\n         assertTrue(records.size() > 0);\n         for (int i = 0; i < res.length; i++) {\n-            assertTrue(Arrays.equals(res[i], records.get(i).values()));\n+            assertArrayEquals(res[i], records.get(i).values());\n         }\n     }\n \n         assertEquals(res.length, records.size());\n         assertTrue(records.size() > 0);\n         for (int i = 0; i < res.length; i++) {\n-            assertTrue(Arrays.equals(res[i], records.get(i).values()));\n+            assertArrayEquals(res[i], records.get(i).values());\n         }\n     }\n \n         assertEquals(res.length, records.size());\n         assertTrue(records.size() > 0);\n         for (int i = 0; i < res.length; i++) {\n-            assertTrue(Arrays.equals(res[i], records.get(i).values()));\n+            assertArrayEquals(res[i], records.get(i).values());\n         }\n     }\n \n             assertEquals(res.length, records.size());\n             assertTrue(records.size() > 0);\n             for (int i = 0; i < res.length; i++) {\n-                assertTrue(Arrays.equals(res[i], records.get(i).values()));\n+                assertArrayEquals(res[i], records.get(i).values());\n             }\n         }\n     }\n             assertEquals(res.length, records.size());\n             assertTrue(records.size() > 0);\n             for (int i = 0; i < res.length; i++) {\n-                assertTrue(Arrays.equals(res[i], records.get(i).values()));\n+                assertArrayEquals(res[i], records.get(i).values());\n             }\n         }\n     }\n             assertEquals(res.length, records.size());\n             assertTrue(records.size() > 0);\n             for (int i = 0; i < res.length; i++) {\n-                assertTrue(Arrays.equals(res[i], records.get(i).values()));\n+                assertArrayEquals(res[i], records.get(i).values());\n             }\n         }\n     }\n             assertEquals(res.length, records.size());\n             assertTrue(records.size() > 0);\n             for (int i = 0; i < res.length; i++) {\n-                assertTrue(Arrays.equals(res[i], records.get(i).values()));\n+                assertArrayEquals(res[i], records.get(i).values());\n             }\n         }\n     }\n         assertEquals(res.length, records.size());\n         assertTrue(records.size() > 0);\n         for (int i = 0; i < res.length; i++) {\n-            assertTrue(Arrays.equals(res[i], records.get(i).values()));\n+            assertArrayEquals(res[i], records.get(i).values());\n         }\n     }\n \n         List<CSVRecord> records = parser.getRecords();\n         assertTrue(records.size() > 0);\n         for (int i = 0; i < res.length; i++) {\n-            assertTrue(Arrays.equals(res[i], records.get(i).values()));\n+            assertArrayEquals(res[i], records.get(i).values());\n         }\n     }\n \n         }\n         \n         assertEquals(3, records.size());\n-        assertTrue(Arrays.equals(new String[]{\"a\", \"b\", \"c\"}, records.get(0).values()));\n-        assertTrue(Arrays.equals(new String[]{\"1\", \"2\", \"3\"}, records.get(1).values()));\n-        assertTrue(Arrays.equals(new String[]{\"x\", \"y\", \"z\"}, records.get(2).values()));\n+        assertArrayEquals(new String[]{\"a\", \"b\", \"c\"}, records.get(0).values());\n+        assertArrayEquals(new String[]{\"1\", \"2\", \"3\"}, records.get(1).values());\n+        assertArrayEquals(new String[]{\"x\", \"y\", \"z\"}, records.get(2).values());\n     }\n \n     @Test\n             fail(\"expected UnsupportedOperationException\");\n         } catch (UnsupportedOperationException expected) {\n         }\n-        assertTrue(Arrays.equals(new String[]{\"a\", \"b\", \"c\"}, iterator.next().values()));\n-        assertTrue(Arrays.equals(new String[]{\"1\", \"2\", \"3\"}, iterator.next().values()));\n+        assertArrayEquals(new String[]{\"a\", \"b\", \"c\"}, iterator.next().values());\n+        assertArrayEquals(new String[]{\"1\", \"2\", \"3\"}, iterator.next().values());\n         assertTrue(iterator.hasNext());\n         assertTrue(iterator.hasNext());\n         assertTrue(iterator.hasNext());\n-        assertTrue(Arrays.equals(new String[]{\"x\", \"y\", \"z\"}, iterator.next().values()));\n+        assertArrayEquals(new String[]{\"x\", \"y\", \"z\"}, iterator.next().values());\n         assertFalse(iterator.hasNext());\n         \n         try {\n--- a/src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java\n+++ b/src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java\n package org.apache.commons.csv;\n \n import java.io.StringReader;\n-import java.util.Arrays;\n \n import org.junit.Test;\n \n         ref[1] = 'b';\n         ref[2] = 'c';\n         assertEquals(3, br.read(res, 0, 3));\n-        assertTrue(Arrays.equals(res, ref));\n+        assertArrayEquals(ref, res);\n         assertEquals('c', br.readAgain());\n \n         assertEquals('d', br.lookAhead());\n         ref[4] = 'd';\n         assertEquals(1, br.read(res, 4, 1));\n-        assertTrue(Arrays.equals(res, ref));\n+        assertArrayEquals(ref, res);\n         assertEquals('d', br.readAgain());\n     }\n ", "timestamp": 1332805067, "metainfo": ""}