{"sha": "9cb66ca7fb213f8936f32749d23294b154fe5964", "log": "Reduced the constants in CSVFormat for disabling the features to only one  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n \n     private char delimiter = ',';\n     private char encapsulator = '\"';\n-    private char commentStart = COMMENTS_DISABLED;\n-    private char escape = ESCAPE_DISABLED;\n+    private char commentStart = DISABLED;\n+    private char escape = DISABLED;\n     private boolean leadingSpacesIgnored = true;\n     private boolean trailingSpacesIgnored = true;\n     private boolean unicodeEscapesInterpreted = false;\n     private boolean emptyLinesIgnored = true;\n     private String lineSeparator = \"\\n\";\n \n-    // -2 is used to signal disabled, because it won't be confused with\n-    // an EOF signal (-1), and because \\ufffe in UTF-16 would be\n-    // encoded as two chars (using surrogates) and thus there should never\n-    // be a collision with a real text char.\n-    public static final char COMMENTS_DISABLED = (char) -2;\n-    public static final char ESCAPE_DISABLED = (char) -2;\n-    public static final char ENCAPSULATOR_DISABLED = (char) -2;\n+\n+    /**\n+     * Constant char to be used for disabling comments, escapes and encapsulation.\n+     * The value -2 is used because it won't be confused with an EOF signal (-1),\n+     * and because the unicode value FFFE would be encoded as two chars (using surrogates)\n+     * and thus there should never be a collision with a real text char.\n+     */\n+    public static final char DISABLED = '\\ufffe';\n \n     /** Standard comma separated format. */\n-    public static final CSVFormat DEFAULT = new CSVFormat(',', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, true, true, false, true);\n-    \n+    public static final CSVFormat DEFAULT = new CSVFormat(',', '\"', DISABLED, DISABLED, true, true, false, true);\n+\n     /** Excel file format (using a comma as the value delimiter). */\n-    public static final CSVFormat EXCEL = new CSVFormat(',', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, false, false, false, false);\n-    \n+    public static final CSVFormat EXCEL = new CSVFormat(',', '\"', DISABLED, DISABLED, false, false, false, false);\n+\n     /** Tabulation delimited format. */\n-    public static final CSVFormat TDF = new CSVFormat('\\t', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, true, true, false, true);\n+    public static final CSVFormat TDF = new CSVFormat('\\t', '\"', DISABLED, DISABLED, true, true, false, true);\n \n \n     /**\n     }\n \n     public CSVFormat(char delimiter, char encapsulator, char commentStart) {\n-        this(delimiter, encapsulator, commentStart, ESCAPE_DISABLED, true, true, false, true);\n+        this(delimiter, encapsulator, commentStart, DISABLED, true, true, false, true);\n     }\n \n     /**\n         return format;\n     }\n \n+    boolean isEncapsulating() {\n+        return this.encapsulator != DISABLED;\n+    }\n+\n     public char getCommentStart() {\n         return commentStart;\n     }\n     }\n \n     public boolean isCommentingDisabled() {\n-        return this.commentStart == COMMENTS_DISABLED;\n+        return this.commentStart == DISABLED;\n     }\n \n     public char getEscape() {\n         CSVFormat format = (CSVFormat) clone();\n         format.escape = escape;\n         return format;\n+    }\n+\n+    boolean isEscaping() {\n+        return this.escape != DISABLED;\n     }\n \n     public boolean isLeadingSpacesIgnored() {\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n             out.write(value, offset, len);\n             return;\n         }\n-\n-        if (format.getEncapsulator() != CSVFormat.ENCAPSULATOR_DISABLED) {\n+        \n+        if (format.isEncapsulating()) {\n             printAndEncapsulate(value, offset, len);\n-        } else if (format.getEscape() != CSVFormat.ESCAPE_DISABLED) {\n+        } else if (format.isEscaping()) {\n             printAndEscape(value, offset, len);\n         } else {\n             printSep();\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n         };\n \n \n-        CSVFormat format = new CSVFormat(',', '\\'', CSVFormat.COMMENTS_DISABLED, '/', false, false, true, true);\n+        CSVFormat format = new CSVFormat(',', '\\'', CSVFormat.DISABLED, '/', false, false, true, true);\n \n         CSVParser parser = new CSVParser(new StringReader(code), format);\n         String[][] tmp = parser.getRecords();\n         };\n \n \n-        CSVFormat format = new CSVFormat(',', CSVFormat.ENCAPSULATOR_DISABLED, CSVFormat.COMMENTS_DISABLED, '/', false, false, true, true);\n+        CSVFormat format = new CSVFormat(',',  CSVFormat.DISABLED,  CSVFormat.DISABLED, '/', false, false, true, true);\n \n         CSVParser parser = new CSVParser(new StringReader(code), format);\n         String[][] tmp = parser.getRecords();\n         };\n \n         CSVFormat format = CSVFormat.DEFAULT;\n-        assertEquals(CSVFormat.COMMENTS_DISABLED, format.getCommentStart());\n+        assertEquals(CSVFormat.DISABLED, format.getCommentStart());\n \n         CSVParser parser = new CSVParser(new StringReader(code), format);\n         String[][] tmp = parser.getRecords();\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n         doRandom(iter);\n \n         // Format for MySQL\n-        format = new CSVFormat('\\t', CSVFormat.ENCAPSULATOR_DISABLED, CSVFormat.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n+        format = new CSVFormat('\\t',  CSVFormat.DISABLED,  CSVFormat.DISABLED, '\\\\', false, false, false, false);\n         doRandom(iter);\n     }\n ", "timestamp": 1320884769, "metainfo": ""}