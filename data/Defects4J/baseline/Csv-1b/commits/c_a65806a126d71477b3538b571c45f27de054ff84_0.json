{"sha": "a65806a126d71477b3538b571c45f27de054ff84", "log": "Validation of the format parameters (suggested by Bob Smith in SANDBOX-291)  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n     }\n \n     /**\n+     * Returns true if the given character is a line break character.\n+     * \n+     * @param c the character to check\n+     * \n+     * @return true if <code>c</code> is a line break character\n+     */\n+    private static boolean isLineBreak(char c) {\n+        return c == '\\n' || c == '\\r';\n+    }\n+\n+    /**\n+     * Verifies the consistency of the parameters and throws an IllegalArgumentException if necessary.\n+     */\n+    void validate() throws IllegalArgumentException {\n+        if (delimiter == encapsulator) {\n+            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n+        }\n+        \n+        if (delimiter == escape) {\n+            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n+        }\n+        \n+        if (delimiter == commentStart) {\n+            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n+        }\n+        \n+        if (encapsulator != DISABLED && encapsulator == commentStart) {\n+            throw new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n+        }\n+        \n+        if (escape != DISABLED && escape == commentStart) {\n+            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n+        }\n+    }\n+\n+    /**\n      * Returns the character delimiting the values (typically ';', ',' or '\\t').\n      * \n      * @return the delimiter character\n      * \n      * @param delimiter the delimiter character\n      * @return A copy of this format using the specified delimiter character\n+     * @throws IllegalArgumentException thrown if the specified character is a line break\n      */\n     public CSVFormat withDelimiter(char delimiter) {\n+        if (isLineBreak(delimiter)) {\n+            throw new IllegalArgumentException(\"The delimiter cannot be a line break\");\n+        }\n+        \n         CSVFormat format = clone();\n         format.delimiter = delimiter;\n         return format;\n      * \n      * @param encapsulator the encapsulator character\n      * @return A copy of this format using the specified encapsulator character\n+     * @throws IllegalArgumentException thrown if the specified character is a line break\n      */\n     public CSVFormat withEncapsulator(char encapsulator) {\n+        if (isLineBreak(encapsulator)) {\n+            throw new IllegalArgumentException(\"The encapsulator cannot be a line break\");\n+        }\n+        \n         CSVFormat format = clone();\n         format.encapsulator = encapsulator;\n         return format;\n      * \n      * @param commentStart the comment start marker\n      * @return A copy of this format using the specified character as the comment start marker\n+     * @throws IllegalArgumentException thrown if the specified character is a line break\n      */\n     public CSVFormat withCommentStart(char commentStart) {\n+        if (isLineBreak(commentStart)) {\n+            throw new IllegalArgumentException(\"The comment start character cannot be a line break\");\n+        }\n+        \n         CSVFormat format = clone();\n         format.commentStart = commentStart;\n         return format;\n      * \n      * @param escape the escape character\n      * @return A copy of this format using the specified escape character\n+     * @throws IllegalArgumentException thrown if the specified character is a line break\n      */\n     public CSVFormat withEscape(char escape) {\n+        if (isLineBreak(escape)) {\n+            throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n+        }\n+        \n         CSVFormat format = clone();\n         format.escape = escape;\n         return format;\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n      * CSV parser using the default {@link CSVFormat}.\n      *\n      * @param input a Reader containing \"csv-formatted\" input\n+     * @throws IllegalArgumentException thrown if the parameters of the format are inconsistent\n      */\n     public CSVParser(Reader input) {\n         this(input, CSVFormat.DEFAULT);\n      *\n      * @param input    a Reader containing \"csv-formatted\" input\n      * @param format the CSVFormat used for CSV parsing\n+     * @throws IllegalArgumentException thrown if the parameters of the format are inconsistent\n      */\n     public CSVParser(Reader input, CSVFormat format) {\n+        format.validate();\n+        \n         if (format.isUnicodeEscapesInterpreted()) {\n             input = new UnicodeUnescapeReader(input);\n         }\n      *\n      * @param input    a String containing \"csv-formatted\" input\n      * @param format the CSVFormat used for CSV parsing\n+     * @throws IllegalArgumentException thrown if the parameters of the format are inconsistent\n      */\n     public CSVParser(String input, CSVFormat format) {\n         this(new StringReader(input), format);\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n      * is supported. Hybrid formats (encapsulation and escaping with a different character) are not supported.\n      *\n      * @param out    stream to which to print.\n-     * @param format describes the CSV variation.\n+     * @param format the CSV format. If null the default format is used ({@link CSVFormat#DEFAULT})\n+     * @throws IllegalArgumentException thrown if the parameters of the format are inconsistent\n      */\n     public CSVPrinter(Appendable out, CSVFormat format) {\n         this.out = out;\n         this.format = format == null ? CSVFormat.DEFAULT : format;\n+        \n+        this.format.validate();\n     }\n \n     // ======================================================\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n         assertEquals(\"a,b,c\", format.format(\"a\", \"b\", \"c\"));\n         assertEquals(\"\\\"x,y\\\",z\", format.format(\"x,y\", \"z\"));\n     }\n+    \n+    public void testValidation() {\n+        CSVFormat format = CSVFormat.DEFAULT;\n+        \n+        try {\n+            format.withDelimiter('\\n');\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            format.withEscape('\\r');\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            format.withEncapsulator('\\n');\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            format.withCommentStart('\\r');\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            format.withDelimiter('!').withEscape('!').validate();\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            format.withDelimiter('!').withCommentStart('!').validate();\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            format.withEncapsulator('!').withCommentStart('!').validate();\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        format.withEncapsulator(CSVFormat.DISABLED).withCommentStart(CSVFormat.DISABLED).validate();\n+        \n+        try {\n+            format.withEscape('!').withCommentStart('!').validate();\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        format.withEscape(CSVFormat.DISABLED).withCommentStart(CSVFormat.DISABLED).validate();\n+        \n+        \n+        try {\n+            format.withEncapsulator('!').withDelimiter('!').validate();\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        \n+    }\n } ", "timestamp": 1331164842, "metainfo": ""}