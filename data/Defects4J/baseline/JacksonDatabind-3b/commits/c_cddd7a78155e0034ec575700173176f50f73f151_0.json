{"sha": "cddd7a78155e0034ec575700173176f50f73f151", "log": "Merge pull request #144 from fge/missingnodefix  MissingNode: fix bug in is{Value,Container,MissingNode}() contract", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n     public <T extends JsonNode> T deepCopy() { return (T) this; }\n     \n     public static MissingNode getInstance() { return instance; }\n+\n+    @Override\n+    public boolean isValueNode()\n+    {\n+        return false;\n+    }\n \n     @Override public JsonToken asToken() { return JsonToken.NOT_AVAILABLE; }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.core.util.*;\n import com.fasterxml.jackson.databind.cfg.BaseSettings;\n-import com.fasterxml.jackson.databind.cfg.DatabindVersion;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.deser.*;\n      * Method that will return version information stored in and read from jar\n      * that contains this class.\n      */\n-//  @Override\n+    @Override\n     public Version version() {\n-        return DatabindVersion.instance.version();\n+        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n import com.fasterxml.jackson.core.type.ResolvedType;\n import com.fasterxml.jackson.core.type.TypeReference;\n \n-import com.fasterxml.jackson.databind.cfg.DatabindVersion;\n import com.fasterxml.jackson.databind.deser.DataFormatReaders;\n import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;\n import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;\n      * Method that will return version information stored in and read from jar\n      * that contains this class.\n      */\n-//  @Override\n+    @Override\n     public Version version() {\n-        return DatabindVersion.instance.version();\n+        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n import com.fasterxml.jackson.core.util.Instantiatable;\n import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;\n-import com.fasterxml.jackson.databind.cfg.DatabindVersion;\n+\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n import com.fasterxml.jackson.databind.ser.FilterProvider;\n      * Method that will return version information stored in and read from jar\n      * that contains this class.\n      */\n-//  @Override\n+    @Override\n     public Version version() {\n-        return DatabindVersion.instance.version();\n+        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n import com.fasterxml.jackson.annotation.*;\n \n import com.fasterxml.jackson.core.Version;\n+\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.*;\n-import com.fasterxml.jackson.databind.cfg.DatabindVersion;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n \n     @Override\n     public Version version() {\n-        return DatabindVersion.instance.version();\n+        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/NopAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/NopAnnotationIntrospector.java\n package com.fasterxml.jackson.databind.introspect;\n \n import com.fasterxml.jackson.core.Version;\n+\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.DatabindVersion;\n \n /**\n  * Dummy, \"no-operation\" implementation of {@link AnnotationIntrospector}.\n \n         @Override\n         public Version version() {\n-            return DatabindVersion.instance.version();\n-        }\n+            return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n+       }\n     };\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java\n import com.fasterxml.jackson.core.base.ParserMinimalBase;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.cfg.DatabindVersion;\n \n /**\n  * Facade over {@link JsonNode} that implements {@link JsonParser} to allow\n \n     @Override\n     public Version version() {\n-        return DatabindVersion.instance.version();\n+        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n     }\n     \n     /*\n                 // this will convert it to base64\n                 return n.asText();\n             }\n-        }\n-\n-        return (_currToken == null) ? null : _currToken.asString();\n+        default:\n+        \treturn (_currToken == null) ? null : _currToken.asString();\n+        }\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n package com.fasterxml.jackson.databind.util;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n+import java.io.*;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n import com.fasterxml.jackson.core.json.JsonReadContext;\n import com.fasterxml.jackson.core.json.JsonWriteContext;\n import com.fasterxml.jackson.core.util.ByteArrayBuilder;\n-\n-import com.fasterxml.jackson.databind.cfg.DatabindVersion;\n \n /**\n  * Utility class used for efficient storage of {@link JsonToken}\n \n     @Override\n     public Version version() {\n-        return DatabindVersion.instance.version();\n+        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n     }\n \n     /**\n \n         @Override\n         public Version version() {\n-            return DatabindVersion.instance.version();\n-        }\n-        \n+            return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n+        }\n+\n         /*\n         /**********************************************************\n         /* Extended API beyond JsonParser\n             case VALUE_NUMBER_FLOAT:\n                 Object ob = _currentObject();\n                 return (ob == null) ? null : ob.toString();\n-            }\n-            return _currToken.asString();\n+            default:\n+            \treturn _currToken.asString();\n+            }\n         }\n \n         @Override\n             if (n instanceof BigInteger) {\n                 return (BigInteger) n;\n             }\n-            switch (getNumberType()) {\n-            case BIG_DECIMAL:\n+            if (getNumberType() == NumberType.BIG_DECIMAL) {\n                 return ((BigDecimal) n).toBigInteger();\n             }\n             // int/long is simple, but let's also just truncate float/double:\n                 return BigDecimal.valueOf(n.longValue());\n             case BIG_INTEGER:\n                 return new BigDecimal((BigInteger) n);\n+            default:\n             }\n             // float or double\n             return BigDecimal.valueOf(n.doubleValue());\n--- a/src/test/java/com/fasterxml/jackson/databind/TestVersions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestVersions.java\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n-import com.fasterxml.jackson.databind.cfg.DatabindVersion;\n import com.fasterxml.jackson.databind.cfg.PackageVersion;\n \n /**\n  */\n public class TestVersions extends com.fasterxml.jackson.test.BaseTest\n {\n-    private final static String GROUP_ID = \"com.fasterxml.jackson.core\";\n-    private final static String ARTIFACT_ID = \"jackson-databind\";\n-\n     public void testMapperVersions()\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         assertVersion(mapper.reader());\n         assertVersion(mapper.writer());\n         assertVersion(new JacksonAnnotationIntrospector());\n-    }\n-\n-    public void testDatabindVersion()\n-    {\n-        assertEquals(PackageVersion.VERSION, DatabindVersion.instance.version());\n     }\n \n     /*\n     {\n         Version v = vers.version();\n         assertFalse(\"Should find version information (got \"+v+\")\", v.isUknownVersion());\n-        assertEquals(PackageVersion.VERSION, v);\n+        Version exp = PackageVersion.VERSION;\n+        assertEquals(exp.toFullString(), v.toFullString());\n+        assertEquals(exp, v);\n     }\n }\n ", "timestamp": 1357933588, "metainfo": ""}