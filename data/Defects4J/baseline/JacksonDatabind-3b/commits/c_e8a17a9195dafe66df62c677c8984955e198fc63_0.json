{"sha": "e8a17a9195dafe66df62c677c8984955e198fc63", "log": "javadoc, other cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n      * @param ctxt Context that can be used to access information about\n      *   this deserialization activity.\n      *\n-     * @return Deserializer value\n+     * @return Deserialized value\n      */\n     public abstract T deserialize(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n     {\n         // 16-Feb-2012, tatu: ObjectId may be used as well... need to check that first\n         if (_objectIdReader != null) {\n-            JsonToken t = jp.getCurrentToken();\n-            // should be good enough check; we only care about Strings, integral numbers:\n-            if (t != null && t.isScalarValue()) {\n-                return deserializeFromObjectId(jp, ctxt);\n-            }\n-            // 05-Aug-2013, tatu: Further, may use native Object Id\n+            // 05-Aug-2013, tatu: May use native Object Id\n             if (jp.canReadObjectId()) {\n                 Object id = jp.getObjectId();\n                 if (id != null) {\n                     Object ob = typeDeserializer.deserializeTypedFromObject(jp, ctxt);\n                     return _handleTypedObjectId(jp, ctxt, ob, id);\n                 }\n+            }\n+            // or, Object Ids Jackson explicitly sets\n+            JsonToken t = jp.getCurrentToken();\n+            // for now (2.2.x) we only allow scalar types (Strings, integral numbers):\n+            // NOTE: may  need to allow handling of structured values in future for JSOG\n+            if (t != null && t.isScalarValue()) {\n+                return deserializeFromObjectId(jp, ctxt);\n             }\n         }\n         // In future could check current token... for now this should be enough:\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n      * not).\n      */\n     public abstract boolean hasSingleElement(T value);\n-    \n+\n     /**\n      * Method that needs to be implemented to allow construction of a new\n      * serializer object with given {@link TypeSerializer}, used when\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n         if (ser == null) {\n             ser = _valueSerializer;\n         }\n-        // #124: May have a content converter\n+        // [Issue#124]: May have a content converter\n         ser = findConvertingContentSerializer(provider, property, ser);\n         if (ser == null) {\n             // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,\n--- a/src/test/java/com/fasterxml/jackson/failing/TestPolymorphicDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestPolymorphicDeserialization.java\n /**\n  * Reproduction of [https://github.com/FasterXML/jackson-databind/issues/283],\n  * contributed by Eric T.\n+ *<p>\n+ * Problem here is that although explicit concrete class is indicated, polymorphic\n+ * deserializer comes to different conclusion (using default implementation class),\n+ * resulting in a <code>ClassCastException</code>.\n+ * Whether this is wrong, and if so, can we fix it, is unknown at this point\n+ * (2.3.0-SNAPSHOT): quite possibly this can not be changed.\n  */\n public class TestPolymorphicDeserialization extends BaseMapTest\n {", "timestamp": 1377041012, "metainfo": ""}