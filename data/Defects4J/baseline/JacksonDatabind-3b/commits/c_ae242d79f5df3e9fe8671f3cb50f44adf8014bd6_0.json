{"sha": "ae242d79f5df3e9fe8671f3cb50f44adf8014bd6", "log": "Fix #257", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java\n         throws IOException, JsonProcessingException\n     {\n         switch (jp.getCurrentToken()) {\n+        case FIELD_NAME:\n         case START_OBJECT:\n+            if (_mapDeserializer != null) {\n+                return _mapDeserializer.deserialize(jp, ctxt);\n+            }\n             return mapObject(jp, ctxt);\n         case START_ARRAY:\n+            if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\n+                return mapArrayToArray(jp, ctxt);\n+            }\n+            if (_listDeserializer != null) {\n+                return _listDeserializer.deserialize(jp, ctxt);\n+            }\n             return mapArray(jp, ctxt);\n-        case FIELD_NAME:\n-            return mapObject(jp, ctxt);\n         case VALUE_EMBEDDED_OBJECT:\n             return jp.getEmbeddedObject();\n         case VALUE_STRING:\n             return jp.getText();\n \n         case VALUE_NUMBER_INT:\n+            if (_numberDeserializer != null) {\n+                return _numberDeserializer.deserialize(jp, ctxt);\n+            }\n             /* [JACKSON-100]: caller may want to get all integral values\n              * returned as BigInteger, for consistency\n              */\n             return jp.getNumberValue(); // should be optimal, whatever it is\n \n         case VALUE_NUMBER_FLOAT:\n+            if (_numberDeserializer != null) {\n+                return _numberDeserializer.deserialize(jp, ctxt);\n+            }\n             /* [JACKSON-72]: need to allow overriding the behavior regarding\n              *   which type to use\n              */\n             return jp.getText();\n \n         case VALUE_NUMBER_INT:\n+            if (_numberDeserializer != null) {\n+                return _numberDeserializer.deserialize(jp, ctxt);\n+            }\n             // For [JACKSON-100], see above:\n             if (ctxt.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS)) {\n                 return jp.getBigIntegerValue();\n             return jp.getNumberValue();\n \n         case VALUE_NUMBER_FLOAT:\n+            if (_numberDeserializer != null) {\n+                return _numberDeserializer.deserialize(jp, ctxt);\n+            }\n             // For [JACKSON-72], see above\n             if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                 return jp.getDecimalValue();\n     protected Object mapArray(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n-        if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\n-            return mapArrayToArray(jp, ctxt);\n-        }\n         // Minor optimization to handle small lists (default size for ArrayList is 10)\n         if (jp.nextToken()  == JsonToken.END_ARRAY) {\n             return new ArrayList<Object>(4);\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestUntypedDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestUntypedDeserialization.java\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n+\n import com.fasterxml.jackson.core.*;\n+\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n \n             throws IOException, JsonProcessingException\n         {\n             return value;\n+        }\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    static class ListDeserializer extends StdDeserializer<List<Object>>\n+    {\n+        public ListDeserializer() { super(List.class); }\n+\n+        @Override\n+        public List<Object> deserialize(JsonParser jp, DeserializationContext ctxt)\n+            throws IOException\n+        {\n+            ArrayList<Object> list = new ArrayList<Object>();\n+            while (jp.nextValue() != JsonToken.END_ARRAY) {\n+                list.add(\"X\"+jp.getText());\n+            }\n+            return list;\n+        }\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    static class MapDeserializer extends StdDeserializer<Map<String,Object>>\n+    {\n+        public MapDeserializer() { super(Map.class); }\n+\n+        @Override\n+        public Map<String,Object> deserialize(JsonParser jp, DeserializationContext ctxt)\n+            throws IOException\n+        {\n+            Map<String,Object> map = new LinkedHashMap<String,Object>();\n+            while (jp.nextValue() != JsonToken.END_OBJECT) {\n+                map.put(jp.getCurrentName(), \"Y\"+jp.getText());\n+            }\n+            return map;\n         }\n     }\n     \n         assertEquals(Long.valueOf(VALUE), n);\n     }\n \n-    public void testUntypedWithCustomDesers() throws IOException\n+    public void testUntypedWithCustomScalarDesers() throws IOException\n     {\n         SimpleModule m = new SimpleModule(\"test-module\");\n         m.addDeserializer(String.class, new UCStringDeserializer());\n         assertTrue(value instanceof Number);\n         assertEquals(Integer.valueOf(13), value);\n     }\n+\n+    public void testUntypedWithListDeser() throws IOException\n+    {\n+        SimpleModule m = new SimpleModule(\"test-module\");\n+        m.addDeserializer(List.class, new ListDeserializer());\n+        final ObjectMapper mapper = new ObjectMapper()\n+            .registerModule(m);\n+\n+        // And then list...\n+        Object ob = mapper.readValue(\"[1, 2, true]\", Object.class);\n+        assertTrue(ob instanceof List<?>);\n+        List<?> l = (List<?>) ob;\n+        assertEquals(3, l.size());\n+        assertEquals(\"X1\", l.get(0));\n+        assertEquals(\"X2\", l.get(1));\n+        assertEquals(\"Xtrue\", l.get(2));\n+    }\n+\n+    public void testUntypedWithMapDeser() throws IOException\n+    {\n+        SimpleModule m = new SimpleModule(\"test-module\");\n+        m.addDeserializer(Map.class, new MapDeserializer());\n+        final ObjectMapper mapper = new ObjectMapper()\n+            .registerModule(m);\n+\n+        // And then list...\n+        Object ob = mapper.readValue(\"{\\\"a\\\":true}\", Object.class);\n+        assertTrue(ob instanceof Map<?,?>);\n+        Map<?,?> map = (Map<?,?>) ob;\n+        assertEquals(1, map.size());\n+        assertEquals(\"Ytrue\", map.get(\"a\"));\n+    }\n }", "timestamp": 1379734641, "metainfo": ""}