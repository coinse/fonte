{"sha": "137aa17e69865f896b48f5113e47ef3ee0794806", "log": "Bit more work for [JACKSON-798].. getting there", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n                     wrapAndThrow(e, bean, propName, ctxt);\n                 }\n                 continue;\n-            } else {\n-                // Unknown: let's call handler method\n-                handleUnknownProperty(jp, ctxt, bean, propName);         \n-            }\n+            }\n+            // Unknown: let's call handler method\n+            handleUnknownProperty(jp, ctxt, bean, propName);         \n         }\n         // and when we get this far, let's try finalizing the deal:\n         return ext.complete(jp, ctxt, bean);\n             // creator property?\n             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n             if (creatorProp != null) {\n+                // first things first: external type-ids are tricky, so:\n+                if (ext.handleToken(jp, ctxt, propName, null)) {\n+                    continue;\n+                }\n                 // Last creator property to set?\n                 Object value = creatorProp.deserialize(jp, ctxt);\n                 if (buffer.assignParameter(creatorProp.getPropertyIndex(), value)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n         // if ValueInstantiator can use \"creator\" approach, need to resolve it here...\n         if (_valueInstantiator.canCreateFromObjectWith()) {\n             SettableBeanProperty[] creatorProps = _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n+            _propertyBasedCreator = PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n             // also: need to try to resolve 'external' type ids...\n-            for (SettableBeanProperty prop : creatorProps) {\n+            for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n                 if (prop.hasValueTypeDeserializer()) {\n                     TypeDeserializer typeDeser = prop.getValueTypeDeserializer();\n                     if (typeDeser.getTypeInclusion() == JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     }\n                 }\n             }\n-            _propertyBasedCreator = PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         }\n \n         Iterator<SettableBeanProperty> it = _beanProperties.allProperties();\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n     }\n     \n     @Override\n-    public void set(Object instance, Object value)\n-        throws IOException\n+    public void set(Object instance, Object value) throws IOException\n     {\n         /* Hmmmh. Should we return quietly (NOP), or error?\n          * For now, let's just bail out without fuss.\n     }\n \n     @Override\n-    public Object setAndReturn(Object instance, Object value)\n-   \t\tthrows IOException\n-\t{\n-    \treturn instance;\n-\t}\n+    public Object setAndReturn(Object instance, Object value) throws IOException\n+    {\n+        return instance;\n+    }\n     \n     @Override\n     public Object getInjectableValueId() {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n      * @since 2.0\n      */\n     public abstract Object setAndReturn(Object instance, Object value)\n-\t\tthrows IOException;\n+            throws IOException;\n     \n     /**\n      * This method is needed by some specialized bean deserializers,", "timestamp": 1330835240, "metainfo": ""}