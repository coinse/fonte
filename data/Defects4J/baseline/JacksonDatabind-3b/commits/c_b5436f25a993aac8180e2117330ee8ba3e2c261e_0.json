{"sha": "b5436f25a993aac8180e2117330ee8ba3e2c261e", "log": "javadoc update", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java\n  * not having a registered listener at all. This allows for\n  * only implemented handler methods one is interested in, without\n  * handling other cases.\n- * \n- * @author tatu\n  */\n public abstract class DeserializationProblemHandler\n {\n     /**\n-     * Method called when a Json Map (\"Object\") entry with an unrecognized\n+     * Method called when a JSON Map (\"Object\") entry with an unrecognized\n      * name is encountered.\n      * Content (supposedly) matching the property are accessible via\n      * parser that can be obtained from passed deserialization context.\n      *   when bean uses non-default constructors)\n      * @param jp Parser to use for handling problematic content\n      * \n-     * @return True if the problem was succesfully resolved (and content available\n-     *    used or skipped); false if listen\n+     * @return True if the problem is resolved (and content available used or skipped);\n+     *  false if the handler did not anything and the problem is unresolved. Note that in\n+     *  latter case caller will either throw an exception or explicitly skip the content,\n+     *  depending on configuration.\n      */\n     public boolean handleUnknownProperty(DeserializationContext ctxt, JsonParser jp,\n             JsonDeserializer<?> deserializer, Object beanOrClass, String propertyName)", "timestamp": 1342896370, "metainfo": ""}