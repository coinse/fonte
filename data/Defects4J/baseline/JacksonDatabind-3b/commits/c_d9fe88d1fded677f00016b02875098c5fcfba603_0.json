{"sha": "d9fe88d1fded677f00016b02875098c5fcfba603", "log": "...", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCollectionDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCollectionDeserialization.java\n     /* Test methods\n     /**********************************************************\n      */\n+\n+    private final static ObjectMapper MAPPER = new ObjectMapper();\n     \n     public void testUntypedList() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         // to get \"untyped\" default List, pass Object.class\n         String JSON = \"[ \\\"text!\\\", true, null, 23 ]\";\n \n-        /* Not a guaranteed cast theoretically, but will work:\n-         * (since we know that Jackson will construct an ArrayList here...)\n-         */\n-        Object value = mapper.readValue(JSON, Object.class);\n+        // Not a guaranteed cast theoretically, but will work:\n+        // (since we know that Jackson will construct an ArrayList here...)\n+        Object value = MAPPER.readValue(JSON, Object.class);\n         assertNotNull(value);\n         assertTrue(value instanceof ArrayList<?>);\n         List<?> result = (List<?>) value;\n \n     public void testExactStringCollection() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         // to get typing, must use type reference\n         String JSON = \"[ \\\"a\\\", \\\"b\\\" ]\";\n-        List<String> result = mapper.readValue(JSON, new TypeReference<ArrayList<String>>() { });\n+        List<String> result = MAPPER.readValue(JSON, new TypeReference<ArrayList<String>>() { });\n \n         assertNotNull(result);\n         assertEquals(ArrayList.class, result.getClass());\n \n     public void testHashSet() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         String JSON = \"[ \\\"KEY1\\\", \\\"KEY2\\\" ]\";\n \n-        EnumSet<Key> result = mapper.readValue(JSON, new TypeReference<EnumSet<Key>>() { });\n+        EnumSet<Key> result = MAPPER.readValue(JSON, new TypeReference<EnumSet<Key>>() { });\n         assertNotNull(result);\n         assertTrue(EnumSet.class.isAssignableFrom(result.getClass()));\n         assertEquals(2, result.size());\n         assertFalse(result.contains(Key.WHATEVER));\n     }\n \n-    /**\n-     * Test to verify that @JsonDeserialize.using works as expected\n-     */\n+    /// Test to verify that @JsonDeserialize.using works as expected\n     public void testCustomDeserializer() throws IOException\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        CustomList result = mapper.readValue(quote(\"abc\"), CustomList.class);\n+        CustomList result = MAPPER.readValue(quote(\"abc\"), CustomList.class);\n         assertEquals(1, result.size());\n         assertEquals(\"abc\", result.get(0));\n     }\n \n-    /* Testing [JACKSON-526], \"implicit JSON array\" for single-element arrays,\n-     * mostly produced by Jettison, Badgerfish conversions (from XML)\n-     */\n+    // Testing [JACKSON-526], \"implicit JSON array\" for single-element arrays,\n+    // mostly produced by Jettison, Badgerfish conversions (from XML)\n     @SuppressWarnings(\"unchecked\")\n     public void testImplicitArrays() throws Exception\n     {\n+        // can't share mapper, custom configs (could create ObjectWriter tho)\n         ObjectMapper mapper = new ObjectMapper();\n         mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);\n \n     // [JACKSON-620]: allow \"\" to mean 'null' for Maps\n     public void testFromEmptyString() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);\n-        List<?> result = m.readValue(quote(\"\"), List.class);\n+        ObjectReader r = MAPPER.reader(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n+        List<?> result = r.withType(List.class).readValue(quote(\"\"));\n         assertNull(result);\n     }\n \n     // [JACKSON-822]: ensure that type can be coerced\n     public void testTypedLists() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         List<Issue822Interface> list = new ArrayList<Issue822Interface>();\n-        String singleJson = mapper.writerWithType(Issue822Interface.class).writeValueAsString(new Issue822Impl());\n+        String singleJson = MAPPER.writerWithType(Issue822Interface.class).writeValueAsString(new Issue822Impl());\n         // start with specific value case:\n         assertEquals(\"{\\\"a\\\":3}\", singleJson);\n         // then lists\n         list.add(new Issue822Impl());\n-        String listJson = mapper.writerWithType(new TypeReference<List<Issue822Interface>>(){})\n+        String listJson = MAPPER.writerWithType(new TypeReference<List<Issue822Interface>>(){})\n                 .writeValueAsString(list);\n         assertEquals(\"[{\\\"a\\\":3}]\", listJson);\n     }\n     // [JACKSON-822]: ensure that type can be coerced\n     public void testTypedArrays() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        assertEquals(\"[{\\\"a\\\":3}]\", mapper.writerWithType(Issue822Interface[].class).writeValueAsString(\n+        assertEquals(\"[{\\\"a\\\":3}]\", MAPPER.writerWithType(Issue822Interface[].class).writeValueAsString(\n                 new Issue822Interface[] { new Issue822Impl() }));\n     }\n }", "timestamp": 1338678073, "metainfo": ""}