{"sha": "3cd560a50f3e56fe4eeb336945c0b91640ae5c76", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n      * Declared return type of the method is also considered acceptable.\n      *\n      * @param baseType Assumed type before considering annotations\n-     * @param propName Logical property name of the property that uses\n-     *    type, if known; null for types not associated with property\n      *\n      * @return Class to use for deserialization instead of declared type\n      */\n-    public Class<?> findDeserializationType(Annotated am, JavaType baseType,\n-            String propName) {\n+    public Class<?> findDeserializationType(Annotated am, JavaType baseType) {\n         return null;\n     }\n \n      * It should be only be used with {@link java.util.Map} types.\n      * \n      * @param baseKeyType Assumed key type before considering annotations\n-     * @param propName Logical property name of the property that uses\n-     *    type, if known; null for types not associated with property\n      *\n      * @return Class specifying more specific type to use instead of\n      *   declared type, if annotation found; null if not\n      */\n-    public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType,\n-            String propName) {\n+    public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType) {\n         return null;\n     }\n \n      * It should be only be used with Map, Collection and array types.\n      * \n      * @param baseContentType Assumed content (value) type before considering annotations\n-     * @param propName Logical property name of the property that uses\n-     *    type, if known; null for types not associated with property\n      *\n      * @return Class specifying more specific type to use instead of\n      *   declared type, if annotation found; null if not\n      */\n-    public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType,\n-            String propName) {\n+    public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType) {\n         return null;\n     }\n \n         }\n         \n         @Override\n-        public Class<?> findDeserializationType(Annotated am, JavaType baseType,\n-                String propName)\n-        {\n-            Class<?> result = _primary.findDeserializationType(am, baseType, propName);\n-            if (result == null) {\n-                result = _secondary.findDeserializationType(am, baseType, propName);\n-            }\n-            return result;\n-        }\n-\n-        @Override\n-        public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType,\n-                String propName)\n-        {\n-            Class<?> result = _primary.findDeserializationKeyType(am, baseKeyType, propName);\n-            if (result == null) {\n-                result = _secondary.findDeserializationKeyType(am, baseKeyType, propName);\n-            }\n-            return result;\n-        }\n-\n-        @Override\n-        public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType,\n-                String propName)\n-        {\n-            Class<?> result = _primary.findDeserializationContentType(am, baseContentType, propName);\n-            if (result == null) {\n-                result = _secondary.findDeserializationContentType(am, baseContentType, propName);\n+        public Class<?> findDeserializationType(Annotated am, JavaType baseType)\n+        {\n+            Class<?> result = _primary.findDeserializationType(am, baseType);\n+            if (result == null) {\n+                result = _secondary.findDeserializationType(am, baseType);\n+            }\n+            return result;\n+        }\n+\n+        @Override\n+        public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType)\n+        {\n+            Class<?> result = _primary.findDeserializationKeyType(am, baseKeyType);\n+            if (result == null) {\n+                result = _secondary.findDeserializationKeyType(am, baseKeyType);\n+            }\n+            return result;\n+        }\n+\n+        @Override\n+        public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType)\n+        {\n+            Class<?> result = _primary.findDeserializationContentType(am, baseContentType);\n+            if (result == null) {\n+                result = _secondary.findDeserializationContentType(am, baseContentType);\n             }\n             return result;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     }\n \n     @Override\n-    public Class<?> findDeserializationType(Annotated am, JavaType baseType,\n-            String propName)\n+    public Class<?> findDeserializationType(Annotated am, JavaType baseType)\n     {\n         // Primary annotation, JsonDeserialize\n         JsonDeserialize ann = am.getAnnotation(JsonDeserialize.class);\n     }\n \n     @Override\n-    public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType,\n-            String propName)\n+    public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType)\n     {\n         // Primary annotation, JsonDeserialize\n         JsonDeserialize ann = am.getAnnotation(JsonDeserialize.class);\n     }\n \n     @Override\n-    public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType,\n-            String propName)\n+    public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType)\n     {\n         // Primary annotation, JsonDeserialize\n         JsonDeserialize ann = am.getAnnotation(JsonDeserialize.class);", "timestamp": 1327939162, "metainfo": ""}