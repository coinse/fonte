{"sha": "224a91a2b354e0fca160f1967f595e63467c4dc3", "log": "Add support for auto-detecting need for property ordering", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n     /* Life-cycle, factory methods from MapperConfig\n     /**********************************************************\n      */\n-\n+    \n     @Override\n     public DeserializationConfig with(MapperFeature... features)\n     {\n         return (newMapperFlags == _mapperFeatures) ? this :\n             new DeserializationConfig(this, newMapperFlags, _deserFeatures);\n     }\n-    \n+\n+    @Override\n+    public DeserializationConfig with(MapperFeature feature, boolean state)\n+    {\n+        int newMapperFlags;\n+        if (state) {\n+            newMapperFlags = _mapperFeatures | feature.getMask();\n+        } else {\n+            newMapperFlags = _mapperFeatures & ~feature.getMask();\n+        }\n+        return (newMapperFlags == _mapperFeatures) ? this :\n+            new DeserializationConfig(this, newMapperFlags, _deserFeatures);\n+    }\n+\n     @Override\n     public DeserializationConfig with(ClassIntrospector ci) {\n         return _withBase(_base.withClassIntrospector(ci));\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n         _rootNames = new RootNameLookup();\n         // and default type factory is shared one\n         _typeFactory = TypeFactory.defaultInstance();\n+        \n         _serializationConfig = new SerializationConfig(DEFAULT_BASE,\n                     _subtypeResolver, _mixInAnnotations);\n         _deserializationConfig = new DeserializationConfig(DEFAULT_BASE,\n                     _subtypeResolver, _mixInAnnotations);\n+\n+        // Some overrides we may need\n+        final boolean needOrder = _jsonFactory.requiresPropertyOrdering();\n+        if (needOrder ^ _serializationConfig.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)) {\n+            configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, needOrder);\n+        }\n+        \n         _serializerProvider = (sp == null) ? new DefaultSerializerProvider.Impl() : sp;\n         _deserializationContext = (dc == null) ?\n                 new DefaultDeserializationContext.Impl(BeanDeserializerFactory.instance) : dc;\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n \n     protected ObjectReader(ObjectReader base, JsonFactory f)\n     {\n-        _config = base._config;\n+        // may need to override ordering, based on data format capabilities\n+        _config = base._config\n+            .with(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, f.requiresPropertyOrdering());\n         _context = base._context;\n \n         _rootDeserializers = base._rootDeserializers;\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n         _rootSerializer = base._rootSerializer;\n         _prettyPrinter = base._prettyPrinter;\n     }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    protected ObjectWriter(ObjectWriter base, JsonFactory f)\n+    {\n+        // may need to override ordering, based on data format capabilities\n+        _config = base._config\n+            .with(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, f.requiresPropertyOrdering());\n+        _cfgBigDecimalAsPlain = base._cfgBigDecimalAsPlain;\n+\n+        _serializerProvider = base._serializerProvider;\n+        _serializerFactory = base._serializerFactory;\n+        _generatorFactory = base._generatorFactory;\n+        _schema = base._schema;\n+        _characterEscapes = base._characterEscapes;\n+\n+        _rootType = base._rootType;\n+        _rootSerializer = base._rootSerializer;\n+        _prettyPrinter = base._prettyPrinter;\n+    }\n     \n     /**\n      * Method that will return version information stored in and read from jar\n         return new ObjectWriter(this, _config, _rootType, _rootSerializer,\n                 _prettyPrinter, _schema, escapes);\n     }\n-    \n+\n+    /**\n+     * @since 2.3\n+     */\n+    public ObjectWriter with(JsonFactory f) {\n+        if (f == _generatorFactory) {\n+            return this;\n+        }\n+        return new ObjectWriter(this, f);\n+    }    \n     /*\n     /**********************************************************\n     /* Simple accessors\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n     }\n \n     @Override\n+    public SerializationConfig with(MapperFeature feature, boolean state)\n+    {\n+        int newMapperFlags;\n+        if (state) {\n+            newMapperFlags = _mapperFeatures | feature.getMask();\n+        } else {\n+            newMapperFlags = _mapperFeatures & ~feature.getMask();\n+        }\n+        return (newMapperFlags == _mapperFeatures) ? this :\n+            new SerializationConfig(this, newMapperFlags, _serFeatures);\n+    }\n+    \n+    @Override\n     public SerializationConfig with(AnnotationIntrospector ai) {\n         return _withBase(_base.withAnnotationIntrospector(ai));\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java\n      * mapper features disabled.\n      */\n     public abstract T without(MapperFeature... features);\n+\n+    /**\n+     * @since 2.3\n+     */\n+    public abstract T with(MapperFeature feature, boolean state);\n     \n     /*\n     /**********************************************************", "timestamp": 1377744120, "metainfo": ""}