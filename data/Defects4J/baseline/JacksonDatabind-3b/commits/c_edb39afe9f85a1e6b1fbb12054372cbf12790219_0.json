{"sha": "edb39afe9f85a1e6b1fbb12054372cbf12790219", "log": "Add support for modules to access ref back to ObjectMapper", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/Module.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/Module.java\n      * Interface Jackson exposes to modules for purpose of registering\n      * extended functionality.\n      */\n-    public interface SetupContext\n+    public static interface SetupContext\n     {\n         /*\n         /**********************************************************\n         public Version getMapperVersion();\n \n         /**\n-         * Method that returns current deserialization configuration\n-         * settings. Since modules may be interested in these settings,\n-         * caller should make sure to make changes to settings before\n-         * module registrations.\n-         */\n-        public DeserializationConfig getDeserializationConfig();\n-\n-        /**\n-         * Method that returns current serialization configuration\n-         * settings. Since modules may be interested in these settings,\n-         * caller should make sure to make changes to settings before\n-         * module registrations.\n-         * \n-         * @since 1.7.1 (1.7.0 unfortunately had a typo in method name!)\n-         */\n-        public SerializationConfig getSerializationConfig();\n-\n-        /**\n-         * @since 1.9.0\n-         */\n+         * Fallback access method that allows modules to refer to the\n+         * {@link ObjectMapper} that provided this context.\n+         * It should NOT be needed by most modules; and ideally should\n+         * not be used -- however, there may be cases where this may\n+         * be necessary due to various design constraints.\n+         *<p>\n+         * NOTE: use of this method is discouraged, as it allows access to\n+         * things Modules typically should not modify. It is included, however,\n+         * to allow access to new features in cases where Module API\n+         * has not yet been extended, or there are oversights.\n+         *<p>\n+         * Return value is chosen to not leak dependency to {@link ObjectMapper};\n+         * however, instance will always be of that type.\n+         * This is why return value is declared generic, to allow caller to\n+         * specify context to often avoid casting.\n+         * \n+         * @since 2.0\n+         */\n+        public <C extends ObjectCodec> C getOwner();\n+\n         public boolean isEnabled(DeserializationConfig.Feature f);\n \n-        /**\n-         * @since 1.9.0\n-         */\n         public boolean isEnabled(SerializationConfig.Feature f);\n \n-        /**\n-         * @since 1.9.0\n-         */\n         public boolean isEnabled(JsonParser.Feature f);\n \n-        /**\n-         * @since 1.9.0\n-         */\n         public boolean isEnabled(JsonGenerator.Feature f);\n         \n         /*\n          * Method that module can use to register additional deserializers to use for\n          * handling Map key values (which are separate from value deserializers because\n          * they are always serialized from String values)\n-         *\n-         * @since 1.8\n          */\n         public void addKeyDeserializers(KeyDeserializers s);\n         \n          * Method that module can use to register additional serializers to use for\n          * handling Map key values (which are separate from value serializers because\n          * they must write <code>JsonToken.FIELD_NAME</code> instead of String value).\n-         *\n-         * @since 1.8\n          */\n         public void addKeySerializers(Serializers s);\n \n          * abstract to concrete types (either by defaulting, or by materializing).\n          * \n          * @param resolver Resolver to add.\n-         * \n-         * @since 1.8\n          */\n         public void addAbstractTypeResolver(AbstractTypeResolver resolver);\n \n          * instances constructed by {@link com.fasterxml.jackson.databind.type.TypeFactory}.\n          * \n          * @param modifier to add\n-         * \n-         * @since 1.8\n          */\n         public void addTypeModifier(TypeModifier modifier);\n \n          * \n          * @param instantiators Object that can provide {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s for\n          *    constructing POJO values during deserialization\n-         * \n-         * @since 1.9\n          */\n         public void addValueInstantiators(ValueInstantiators instantiators);\n         \n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n                 return version();\n             }\n \n+            @SuppressWarnings(\"unchecked\")\n             @Override\n-            public DeserializationConfig getDeserializationConfig() {\n-                return mapper.getDeserializationConfig();\n-            }\n-\n-            @Override\n-            public SerializationConfig getSerializationConfig() {\n-                return mapper.getSerializationConfig();\n-            }\n-\n+            public <C extends ObjectCodec> C getOwner() {\n+                // why do we need the cast here?!?\n+                return (C) mapper;\n+            }\n+            \n             @Override\n             public boolean isEnabled(DeserializationConfig.Feature f) {\n                 return mapper.isEnabled(f);\n--- a/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n-\n /**\n  * Abstract base class common to all standard {@link JsonNode}\n  * implementations.\n  * The main addition here is that we declare that sub-classes must\n- * implement {@link JsonSerializableWithType}.\n- * This simplifies object mapping\n- * aspects a bit, as no external serializers are needed.\n+ * implement {@link JsonSerializable}.\n+ * This simplifies object mapping aspects a bit, as no external serializers are needed.\n  */\n public abstract class BaseJsonNode\n     extends JsonNode\n      * Will return the first {@link JsonToken} that equivalent\n      * stream event would produce (for most nodes there is just\n      * one token but for structured/container types multiple)\n-     *\n-     * @since 1.3\n      */\n     @Override\n     public abstract JsonToken asToken();\n \n     /**\n-     * @since 1.3\n+     * Returns code that identifies type of underlying numeric\n+     * value, if (and only if) node is a number node.\n      */\n     @Override\n     public JsonParser.NumberType getNumberType() {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyFilter.java\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.SerializerProvider;\n \n-\n /**\n  * Interface that defines API for filter objects use (as configured\n- * using {@link com.fasterxml.jackson.databind.annotate.JsonFilter})\n+ * using {@link com.fasterxml.jackson.annotation.JsonFilter})\n  * for filtering bean properties to serialize.\n- * \n- * @since 1.7\n  */\n public interface BeanPropertyFilter\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/StdSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/StdSerializers.java\n      */\n \n     /**\n-     * Compared to regular {@link UtilDateSerializer}, we do use String\n+     * Compared to regular {@link java.util.Date} serialization, we do use String\n      * representation here. Why? Basically to truncate of time part, since\n      * that should not be used by plain SQL date.\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/type/package-info.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/package-info.java\n /**\n  * Package that contains concrete implementations of\n- * {@link com.fasterxml.jackson.databind.type.JavaType}, as\n+ * {@link com.fasterxml.jackson.databind.JavaType}, as\n  * well as the factory ({@link com.fasterxml.jackson.databind.type.TypeFactory}) for\n  * constructing instances from various input data types\n  * (like {@link java.lang.Class}, {@link java.lang.reflect.Type})\n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java\n     @JsonPropertyOrder({\"c\", \"a\", \"b\"})\n     static class MixInForOrder { }\n     \n+    protected static class MySimpleSerializers extends SimpleSerializers { }\n+    protected static class MySimpleDeserializers extends SimpleDeserializers { }\n+\n+    /**\n+     * Test module which uses custom 'serializers' and 'deserializers' container; used\n+     * to trigger type problems.\n+     */\n+    protected static class MySimpleModule extends SimpleModule\n+    {\n+        public MySimpleModule(String name, Version version) {\n+            super(name, version);\n+            _deserializers = new MySimpleDeserializers();\n+            _serializers = new MySimpleSerializers();\n+        }\n+    }\n+\n+    protected static class ContextVerifierModule extends Module\n+    {\n+        @Override\n+        public String getModuleName() { return \"x\"; }\n+\n+        @Override\n+        public Version version() { return Version.unknownVersion(); }\n+\n+        @Override\n+        public void setupModule(SetupContext context)\n+        {\n+            ObjectCodec c = context.getOwner();\n+            assertNotNull(c);\n+            assertTrue(c instanceof ObjectMapper);\n+            ObjectMapper m = context.getOwner();\n+            assertNotNull(m);\n+        }\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Unit tests; first, verifying need for custom handlers\n             fail(\"Should have caused an exception\");\n         } catch (IOException e) {\n             verifyException(e, \"No suitable constructor found\");\n-        }\n-    }\n-\n-    protected static class MySimpleSerializers extends SimpleSerializers { }\n-    protected static class MySimpleDeserializers extends SimpleDeserializers { }\n-\n-    /**\n-     * Test module which uses custom 'serializers' and 'deserializers' container; used\n-     * to trigger type problems.\n-     */\n-    protected static class MySimpleModule extends SimpleModule\n-    {\n-        public MySimpleModule(String name, Version version) {\n-            super(name, version);\n-            _deserializers = new MySimpleDeserializers();\n-            _serializers = new MySimpleSerializers();\n         }\n     }\n     \n         assertEquals(Integer.valueOf(1), props.get(\"a\"));\n         assertEquals(Integer.valueOf(2), props.get(\"b\"));\n     }\n+\n+    // [JACKSON-686]\n+    public void testAccessToMapper() throws Exception\n+    {\n+        ContextVerifierModule module = new ContextVerifierModule();        \n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(module);\n+    }\n }\n ", "timestamp": 1326404521, "metainfo": ""}