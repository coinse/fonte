{"sha": "eafafffda5d43e4ae2b2d6eb3a06c89575224b94", "log": "Reorg things a bit: SerializationConfig, DeserializationConfig back at main level (so widely used), BeanPropertyDefinition moved under introspect", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AbstractTypeResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AbstractTypeResolver.java\n package com.fasterxml.jackson.databind;\n \n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n \n /**\n  * Defines interface for resolvers that can resolve abstract types into concrete\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n+import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n import com.fasterxml.jackson.databind.type.TypeBindings;\n import com.fasterxml.jackson.databind.util.Annotations;\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+package com.fasterxml.jackson.databind;\n+\n+import java.text.DateFormat;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.cfg.BaseSettings;\n+import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n+import com.fasterxml.jackson.databind.cfg.MapperConfigBase;\n+import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;\n+import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n+import com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector;\n+import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n+import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;\n+import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import com.fasterxml.jackson.databind.type.ClassKey;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.databind.util.LinkedNode;\n+\n+/**\n+ * Object that contains baseline configuration for deserialization\n+ * process. An instance is owned by {@link ObjectMapper}, which\n+ * passes an immutable instance to be used for deserialization process.\n+ *<p>\n+ * Note that instances are considered immutable and as such no copies\n+ * should need to be created (there are some implementation details\n+ * with respect to mix-in annotations; where this is guaranteed as\n+ * long as caller follow \"copy-then-use\" pattern)\n+ */\n+public final class DeserializationConfig\n+    extends MapperConfigBase<DeserializationFeature, DeserializationConfig>\n+{\n+    /**\n+     * Set of features enabled; actual type (kind of features)\n+     * depends on sub-classes.\n+     */\n+    protected final int _deserFeatures;\n+\n+    /**\n+     * Linked list that contains all registered problem handlers.\n+     * Implementation as front-added linked list allows for sharing\n+     * of the list (tail) without copying the list.\n+     */\n+    protected final LinkedNode<DeserializationProblemHandler> _problemHandlers;\n+    \n+    /**\n+     * Factory used for constructing {@link com.fasterxml.jackson.core.JsonNode} instances.\n+     */\n+    protected final JsonNodeFactory _nodeFactory;\n+    \n+    /*\n+    /**********************************************************\n+    /* Life-cycle, constructors\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Constructor used by ObjectMapper to create default configuration object instance.\n+     */\n+    public DeserializationConfig(BaseSettings base,\n+            SubtypeResolver str, Map<ClassKey,Class<?>> mixins)\n+    {\n+        super(base, str, mixins);\n+        _deserFeatures = collectFeatureDefaults(DeserializationFeature.class);\n+        _nodeFactory = JsonNodeFactory.instance;\n+        _problemHandlers = null;\n+    }\n+\n+    /**\n+     * Copy constructor used to create a non-shared instance with given mix-in\n+     * annotation definitions and subtype resolver.\n+     */\n+    private DeserializationConfig(DeserializationConfig src, SubtypeResolver str)\n+    {\n+        super(src, str);\n+        _deserFeatures = src._deserFeatures;\n+        _nodeFactory = src._nodeFactory;\n+        _problemHandlers = src._problemHandlers;\n+    }\n+\n+    private DeserializationConfig(DeserializationConfig src,\n+            int mapperFeatures, int deserFeatures)\n+    {\n+        super(src, mapperFeatures);\n+        _deserFeatures = deserFeatures;\n+        _nodeFactory = src._nodeFactory;\n+        _problemHandlers = src._problemHandlers;\n+    }\n+    \n+    private DeserializationConfig(DeserializationConfig src, BaseSettings base)\n+    {\n+        super(src, base);\n+        _deserFeatures = src._deserFeatures;\n+        _nodeFactory = src._nodeFactory;\n+        _problemHandlers = src._problemHandlers;\n+    }\n+    \n+    private DeserializationConfig(DeserializationConfig src, JsonNodeFactory f)\n+    {\n+        super(src);\n+        _deserFeatures = src._deserFeatures;\n+        _problemHandlers = src._problemHandlers;\n+        _nodeFactory = f;\n+    }\n+\n+    private DeserializationConfig(DeserializationConfig src,\n+            LinkedNode<DeserializationProblemHandler> problemHandlers)\n+    {\n+        super(src);\n+        _deserFeatures = src._deserFeatures;\n+        _problemHandlers = problemHandlers;\n+        _nodeFactory = src._nodeFactory;\n+    }\n+\n+    private DeserializationConfig(DeserializationConfig src, String rootName)\n+    {\n+        super(src, rootName);\n+        _deserFeatures = src._deserFeatures;\n+        _problemHandlers = src._problemHandlers;\n+        _nodeFactory = src._nodeFactory;\n+    }\n+\n+    private DeserializationConfig(DeserializationConfig src, Class<?> view)\n+    {\n+        super(src, view);\n+        _deserFeatures = src._deserFeatures;\n+        _problemHandlers = src._problemHandlers;\n+        _nodeFactory = src._nodeFactory;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Life-cycle, factory methods from MapperConfig\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public DeserializationConfig with(MapperFeature... features)\n+    {\n+        int newMapperFlags = _mapperFeatures;\n+        for (MapperFeature f : features) {\n+            newMapperFlags |= f.getMask();\n+        }\n+        return (newMapperFlags == _mapperFeatures) ? this :\n+            new DeserializationConfig(this, newMapperFlags, _deserFeatures);\n+    }\n+\n+    @Override\n+    public DeserializationConfig without(MapperFeature... features)\n+    {\n+        int newMapperFlags = _mapperFeatures;\n+        for (MapperFeature f : features) {\n+             newMapperFlags &= ~f.getMask();\n+        }\n+        return (newMapperFlags == _mapperFeatures) ? this :\n+            new DeserializationConfig(this, newMapperFlags, _deserFeatures);\n+    }\n+    \n+    @Override\n+    public DeserializationConfig withClassIntrospector(ClassIntrospector ci) {\n+        return _withBase(_base.withClassIntrospector(ci));\n+    }\n+\n+    @Override\n+    public DeserializationConfig withAnnotationIntrospector(AnnotationIntrospector ai) {\n+        return _withBase(_base.withAnnotationIntrospector(ai));\n+    }\n+\n+    @Override\n+    public DeserializationConfig withVisibilityChecker(VisibilityChecker<?> vc) {\n+        return _withBase(_base.withVisibilityChecker(vc));\n+    }\n+\n+    @Override\n+    public DeserializationConfig withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) {\n+        return _withBase( _base.withVisibility(forMethod, visibility));\n+    }\n+    \n+    @Override\n+    public DeserializationConfig withTypeResolverBuilder(TypeResolverBuilder<?> trb) {\n+        return _withBase(_base.withTypeResolverBuilder(trb));\n+    }\n+\n+    @Override\n+    public DeserializationConfig withSubtypeResolver(SubtypeResolver str) {\n+        return (_subtypeResolver == str) ? this : new DeserializationConfig(this, str);\n+    }\n+    \n+    @Override\n+    public DeserializationConfig withPropertyNamingStrategy(PropertyNamingStrategy pns) {\n+        return _withBase(_base.withPropertyNamingStrategy(pns));\n+    }\n+\n+    @Override\n+    public DeserializationConfig withRootName(String rootName) {\n+        if (rootName == null) {\n+            if (_rootName == null) {\n+                return this;\n+            }\n+        } else if (rootName.equals(_rootName)) {\n+            return this;\n+        }\n+        return new DeserializationConfig(this, rootName);\n+    }\n+    \n+    @Override\n+    public DeserializationConfig withTypeFactory(TypeFactory tf) {\n+        return _withBase( _base.withTypeFactory(tf));\n+    }\n+\n+    @Override\n+    public DeserializationConfig withDateFormat(DateFormat df) {\n+        return _withBase(_base.withDateFormat(df));\n+    }\n+    \n+    @Override\n+    public DeserializationConfig withHandlerInstantiator(HandlerInstantiator hi) {\n+        return _withBase(_base.withHandlerInstantiator(hi));\n+    }\n+\n+    @Override\n+    public DeserializationConfig withInsertedAnnotationIntrospector(AnnotationIntrospector ai) {\n+        return _withBase(_base.withInsertedAnnotationIntrospector(ai));\n+    }\n+\n+    @Override\n+    public DeserializationConfig withAppendedAnnotationIntrospector(AnnotationIntrospector ai) {\n+        return _withBase(_base.withAppendedAnnotationIntrospector(ai));\n+    }\n+\n+    @Override\n+    public DeserializationConfig withView(Class<?> view) {\n+        return (_view == view) ? this : new DeserializationConfig(this, view);\n+    }\n+    \n+    private final DeserializationConfig _withBase(BaseSettings newBase) {\n+        return (_base == newBase) ? this : new DeserializationConfig(this, newBase);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Life-cycle, deserialization-specific factory methods\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Fluent factory method that will construct a new instance with\n+     * specified {@link JsonNodeFactory}\n+     */\n+    public DeserializationConfig withNodeFactory(JsonNodeFactory f) {\n+        if (_nodeFactory == f) {\n+            return this;\n+        }\n+        return new DeserializationConfig(this, f);\n+    }\n+\n+    /**\n+     * Method that can be used to add a handler that can (try to)\n+     * resolve non-fatal deserialization problems.\n+     */\n+    public DeserializationConfig withHandler(DeserializationProblemHandler h)\n+    {\n+        // Sanity check: let's prevent adding same handler multiple times\n+        if (LinkedNode.contains(_problemHandlers, h)) {\n+            return this;\n+        }\n+        return new DeserializationConfig(this,\n+                new LinkedNode<DeserializationProblemHandler>(h, _problemHandlers));\n+    }\n+\n+    /**\n+     * Method for removing all configured problem handlers; usually done to replace\n+     * existing handler(s) with different one(s)\n+     */\n+    public DeserializationConfig withNoProblemHandlers() {\n+        if (_problemHandlers == null) {\n+            return this;\n+        }\n+        return new DeserializationConfig(this,\n+                (LinkedNode<DeserializationProblemHandler>) null);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features enabled.\n+     */\n+    public DeserializationConfig with(DeserializationFeature feature)\n+    {\n+        int newDeserFeatures = (_deserFeatures | feature.getMask());\n+        return (newDeserFeatures == _deserFeatures) ? this :\n+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features enabled.\n+     */\n+    public DeserializationConfig with(DeserializationFeature first,\n+            DeserializationFeature... features)\n+    {\n+        int newDeserFeatures = _deserFeatures | first.getMask();\n+        for (DeserializationFeature f : features) {\n+            newDeserFeatures |= f.getMask();\n+        }\n+        return (newDeserFeatures == _deserFeatures) ? this :\n+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features enabled.\n+     */\n+    public DeserializationConfig withFeatures(DeserializationFeature... features)\n+    {\n+        int newDeserFeatures = _deserFeatures;\n+        for (DeserializationFeature f : features) {\n+            newDeserFeatures |= f.getMask();\n+        }\n+        return (newDeserFeatures == _deserFeatures) ? this :\n+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures);\n+    }\n+    \n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified feature disabled.\n+     */\n+    public DeserializationConfig without(DeserializationFeature feature)\n+    {\n+        int newDeserFeatures = _deserFeatures & ~feature.getMask();\n+        return (newDeserFeatures == _deserFeatures) ? this :\n+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features disabled.\n+     */\n+    public DeserializationConfig without(DeserializationFeature first,\n+            DeserializationFeature... features)\n+    {\n+        int newDeserFeatures = _deserFeatures & ~first.getMask();\n+        for (DeserializationFeature f : features) {\n+            newDeserFeatures &= ~f.getMask();\n+        }\n+        return (newDeserFeatures == _deserFeatures) ? this :\n+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features disabled.\n+     */\n+    public DeserializationConfig withoutFeatures(DeserializationFeature... features)\n+    {\n+        int newDeserFeatures = _deserFeatures;\n+        for (DeserializationFeature f : features) {\n+            newDeserFeatures &= ~f.getMask();\n+        }\n+        return (newDeserFeatures == _deserFeatures) ? this :\n+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* MapperConfig implementation\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Method for getting {@link AnnotationIntrospector} configured\n+     * to introspect annotation values used for configuration.\n+     */\n+    @Override\n+    public AnnotationIntrospector getAnnotationIntrospector()\n+    {\n+        /* 29-Jul-2009, tatu: it's now possible to disable use of\n+         *   annotations; can be done using \"no-op\" introspector\n+         */\n+        if (isEnabled(MapperFeature.USE_ANNOTATIONS)) {\n+            return super.getAnnotationIntrospector();\n+        }\n+        return NopAnnotationIntrospector.instance;\n+    }\n+\n+    @Override\n+    public boolean useRootWrapping()\n+    {\n+        if (_rootName != null) { // empty String disables wrapping; non-empty enables\n+            return (_rootName.length() > 0);\n+        }\n+        return isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE);\n+    }\n+    \n+    /**\n+     * Accessor for getting bean description that only contains class\n+     * annotations: useful if no getter/setter/creator information is needed.\n+     */\n+    @Override\n+    public BeanDescription introspectClassAnnotations(JavaType type) {\n+        return getClassIntrospector().forClassAnnotations(this, type, this);\n+    }\n+\n+    /**\n+     * Accessor for getting bean description that only contains immediate class\n+     * annotations: ones from the class, and its direct mix-in, if any, but\n+     * not from super types.\n+     */\n+    @Override\n+    public BeanDescription introspectDirectClassAnnotations(JavaType type) {\n+        return getClassIntrospector().forDirectClassAnnotations(this, type, this);\n+    }\n+\n+    @Override\n+    public VisibilityChecker<?> getDefaultVisibilityChecker()\n+    {\n+        VisibilityChecker<?> vchecker = super.getDefaultVisibilityChecker();\n+        if (!isEnabled(MapperFeature.AUTO_DETECT_SETTERS)) {\n+            vchecker = vchecker.withSetterVisibility(Visibility.NONE);\n+        }\n+        if (!isEnabled(MapperFeature.AUTO_DETECT_CREATORS)) {\n+            vchecker = vchecker.withCreatorVisibility(Visibility.NONE);\n+        }\n+        if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS)) {\n+            vchecker = vchecker.withFieldVisibility(Visibility.NONE);\n+        }\n+        return vchecker;\n+    }\n+\n+    public final boolean isEnabled(DeserializationFeature f) {\n+        return (_deserFeatures & f.getMask()) != 0;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Other configuration\n+    /**********************************************************\n+     */\n+\n+    public final int getDeserializationFeatures() {\n+        return _deserFeatures;\n+    }\n+    \n+    /**\n+     * Method for getting head of the problem handler chain. May be null,\n+     * if no handlers have been added.\n+     */\n+    public LinkedNode<DeserializationProblemHandler> getProblemHandlers() {\n+        return _problemHandlers;\n+    }\n+    \n+    /**\n+     * Method called during deserialization if Base64 encoded content\n+     * needs to be decoded. Default version just returns default Jackson\n+     * uses, which is modified-mime which does not add linefeeds (because\n+     * those would have to be escaped in JSON strings).\n+     */\n+    public Base64Variant getBase64Variant() {\n+        return Base64Variants.getDefaultVariant();\n+    }\n+\n+    public final JsonNodeFactory getNodeFactory() {\n+        return _nodeFactory;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Introspection methods\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method that will introspect full bean properties for the purpose\n+     * of building a bean deserializer\n+     *\n+     * @param type Type of class to be introspected\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends BeanDescription> T introspect(JavaType type) {\n+        return (T) getClassIntrospector().forDeserialization(this, type, this);\n+    }\n+\n+    /**\n+     * Method that will introspect subset of bean properties needed to\n+     * construct bean instance.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends BeanDescription> T introspectForCreation(JavaType type) {\n+        return (T) getClassIntrospector().forCreation(this, type, this);\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.annotation.NoClass;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n      * if disabled, return value of <code>Enum.name()</code> is assumed to have been used.\n      *<p>\n      * Note: this feature should usually have same value\n-     * as {@link SerializationConfig.SerializationFeature#WRITE_ENUMS_USING_TO_STRING}.\n+     * as {@link SerializationFeature#WRITE_ENUMS_USING_TO_STRING}.\n      *<p>\n      * SerializationFeature is disabled by default.\n      */\n     \n     /**\n      * SerializationFeature to allow \"unwrapping\" root-level JSON value, to match setting of\n-     * {@link SerializationConfig.SerializationFeature#WRAP_ROOT_VALUE} used for serialization.\n+     * {@link SerializationFeature#WRAP_ROOT_VALUE} used for serialization.\n      * Will verify that the root JSON value is a JSON Object, and that it has\n      * a single property with expected root name. If not, a\n      * {@link JsonMappingException} is thrown; otherwise value of the wrapped property\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n import com.fasterxml.jackson.core.util.*;\n import com.fasterxml.jackson.databind.cfg.BaseSettings;\n import com.fasterxml.jackson.databind.cfg.DatabindVersion;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;\n import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n import com.fasterxml.jackson.core.type.TypeReference;\n \n import com.fasterxml.jackson.databind.cfg.DatabindVersion;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n import com.fasterxml.jackson.databind.node.NullNode;\n import com.fasterxml.jackson.databind.node.TreeTraversingParser;\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;\n import com.fasterxml.jackson.databind.cfg.DatabindVersion;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.ser.FilterProvider;\n import com.fasterxml.jackson.databind.ser.SerializerFactory;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+package com.fasterxml.jackson.databind;\n+\n+import java.text.DateFormat;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n+import com.fasterxml.jackson.databind.cfg.BaseSettings;\n+import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n+import com.fasterxml.jackson.databind.cfg.MapperConfigBase;\n+import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n+import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n+import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;\n+import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n+import com.fasterxml.jackson.databind.ser.FilterProvider;\n+import com.fasterxml.jackson.databind.ser.SerializerFactory;\n+import com.fasterxml.jackson.databind.type.ClassKey;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+\n+/**\n+ * Object that contains baseline configuration for serialization\n+ * process. An instance is owned by {@link ObjectMapper}, which\n+ * passes an immutable instance for serialization process to\n+ * {@link SerializerProvider} and {@link SerializerFactory}\n+ * (either directly, or through {@link ObjectWriter}.\n+ *<p>\n+ * Note that instances are considered immutable and as such no copies\n+ * should need to be created (there are some implementation details\n+ * with respect to mix-in annotations; where this is guaranteed as\n+ * long as caller follow \"copy-then-use\" pattern)\n+ */\n+public final class SerializationConfig\n+    extends MapperConfigBase<SerializationFeature, SerializationConfig>\n+{\n+    /**\n+     * Set of features enabled; actual type (kind of features)\n+     * depends on sub-classes.\n+     */\n+    protected final int _serFeatures;\n+    \n+    /**\n+     * Which Bean/Map properties are to be included in serialization?\n+     * Default settings is to include all regardless of value; can be\n+     * changed to only include non-null properties, or properties\n+     * with non-default values.\n+     */\n+    protected JsonInclude.Include _serializationInclusion = null;\n+    \n+    /**\n+     * Object used for resolving filter ids to filter instances.\n+     * Non-null if explicitly defined; null by default.\n+     */\n+    protected final FilterProvider _filterProvider;\n+    \n+    /*\n+    /**********************************************************\n+    /* Life-cycle, constructors\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Constructor used by ObjectMapper to create default configuration object instance.\n+     */\n+    public SerializationConfig(BaseSettings base,\n+            SubtypeResolver str, Map<ClassKey,Class<?>> mixins)\n+    {\n+        super(base, str, mixins);\n+        _serFeatures = collectFeatureDefaults(SerializationFeature.class);\n+        _filterProvider = null;\n+    }\n+    \n+    private SerializationConfig(SerializationConfig src, SubtypeResolver str)\n+    {\n+        super(src, str);\n+        _serFeatures = src._serFeatures;\n+        _serializationInclusion = src._serializationInclusion;\n+        _filterProvider = src._filterProvider;\n+    }\n+\n+    private SerializationConfig(SerializationConfig src,\n+            int mapperFeatures, int serFeatures)\n+    {\n+        super(src, mapperFeatures);\n+        _serFeatures = serFeatures;\n+        _serializationInclusion = src._serializationInclusion;\n+        _filterProvider = src._filterProvider;\n+    }\n+    \n+    private SerializationConfig(SerializationConfig src, BaseSettings base)\n+    {\n+        super(src, base);\n+        _serFeatures = src._serFeatures;\n+        _serializationInclusion = src._serializationInclusion;\n+        _filterProvider = src._filterProvider;\n+    }\n+\n+    private SerializationConfig(SerializationConfig src, FilterProvider filters)\n+    {\n+        super(src);\n+        _serFeatures = src._serFeatures;\n+        _serializationInclusion = src._serializationInclusion;\n+        _filterProvider = filters;\n+    }\n+\n+    private SerializationConfig(SerializationConfig src, Class<?> view)\n+    {\n+        super(src, view);\n+        _serFeatures = src._serFeatures;\n+        _serializationInclusion = src._serializationInclusion;\n+        _filterProvider = src._filterProvider;\n+    }\n+\n+    private SerializationConfig(SerializationConfig src, JsonInclude.Include incl)\n+    {\n+        super(src);\n+        _serFeatures = src._serFeatures;\n+        _serializationInclusion = incl;\n+        _filterProvider = src._filterProvider;\n+    }\n+\n+    private SerializationConfig(SerializationConfig src, String rootName)\n+    {\n+        super(src, rootName);\n+        _serFeatures = src._serFeatures;\n+        _serializationInclusion = src._serializationInclusion;\n+        _filterProvider = src._filterProvider;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Life-cycle, factory methods from MapperConfig\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features enabled.\n+     */\n+    @Override\n+    public SerializationConfig with(MapperFeature... features)\n+    {\n+        int newMapperFlags = _mapperFeatures;\n+        for (MapperFeature f : features) {\n+            newMapperFlags |= f.getMask();\n+        }\n+        return (newMapperFlags == _mapperFeatures) ? this\n+                : new SerializationConfig(this, newMapperFlags, _serFeatures);\n+    }\n+    \n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features disabled.\n+     */\n+    @Override\n+    public SerializationConfig without(MapperFeature... features)\n+    {\n+        int newMapperFlags = _mapperFeatures;\n+        for (MapperFeature f : features) {\n+             newMapperFlags &= ~f.getMask();\n+        }\n+        return (newMapperFlags == _mapperFeatures) ? this\n+                : new SerializationConfig(this, newMapperFlags, _serFeatures);\n+    }\n+\n+    @Override\n+    public SerializationConfig withAnnotationIntrospector(AnnotationIntrospector ai) {\n+        return _withBase(_base.withAnnotationIntrospector(ai));\n+    }\n+\n+    @Override\n+    public SerializationConfig withAppendedAnnotationIntrospector(AnnotationIntrospector ai) {\n+        return _withBase(_base.withAppendedAnnotationIntrospector(ai));\n+    }\n+\n+    @Override\n+    public SerializationConfig withInsertedAnnotationIntrospector(AnnotationIntrospector ai) {\n+        return _withBase(_base.withInsertedAnnotationIntrospector(ai));\n+    }\n+\n+    @Override\n+    public SerializationConfig withClassIntrospector(ClassIntrospector ci) {\n+        return _withBase(_base.withClassIntrospector(ci));\n+    }\n+    \n+    /**\n+     * In addition to constructing instance with specified date format,\n+     * will enable or disable <code>SerializationFeature.WRITE_DATES_AS_TIMESTAMPS</code>\n+     * (enable if format set as null; disable if non-null)\n+     */\n+    @Override\n+    public SerializationConfig withDateFormat(DateFormat df) {\n+        SerializationConfig cfg =  new SerializationConfig(this, _base.withDateFormat(df));\n+        // Also need to toggle this feature based on existence of date format:\n+        if (df == null) {\n+            cfg = cfg.with(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n+        } else {\n+            cfg = cfg.without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n+        }\n+        return cfg;\n+    }\n+    \n+    @Override\n+    public SerializationConfig withHandlerInstantiator(HandlerInstantiator hi) {\n+        return _withBase(_base.withHandlerInstantiator(hi));\n+    }\n+    \n+    @Override\n+    public SerializationConfig withPropertyNamingStrategy(PropertyNamingStrategy pns) {\n+        return _withBase(_base.withPropertyNamingStrategy(pns));\n+    }\n+\n+    @Override\n+    public SerializationConfig withRootName(String rootName) {\n+        if (rootName == null) {\n+            if (_rootName == null) {\n+                return this;\n+            }\n+        } else if (rootName.equals(_rootName)) {\n+            return this;\n+        }\n+        return new SerializationConfig(this, rootName);\n+    }\n+\n+    @Override\n+    public SerializationConfig withSubtypeResolver(SubtypeResolver str) {\n+        return (str == _subtypeResolver)? this : new SerializationConfig(this, str);\n+    }\n+\n+    @Override\n+    public SerializationConfig withTypeFactory(TypeFactory tf) {\n+        return _withBase(_base.withTypeFactory(tf));\n+    }\n+\n+    @Override\n+    public SerializationConfig withTypeResolverBuilder(TypeResolverBuilder<?> trb) {\n+        return _withBase(_base.withTypeResolverBuilder(trb));\n+    }\n+    \n+    public SerializationConfig withView(Class<?> view) {\n+        return (_view == view) ? this : new SerializationConfig(this, view);\n+    }\n+\n+    @Override\n+    public SerializationConfig withVisibilityChecker(VisibilityChecker<?> vc) {\n+        return _withBase(_base.withVisibilityChecker(vc));\n+    }\n+\n+    @Override\n+    public SerializationConfig withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) {\n+        return _withBase(_base.withVisibility(forMethod, visibility));\n+    }\n+    \n+    private final SerializationConfig _withBase(BaseSettings newBase) {\n+        return (_base == newBase) ? this : new SerializationConfig(this, newBase);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Life-cycle, SerializationConfig specific factory methods\n+    /**********************************************************\n+     */\n+        \n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified feature enabled.\n+     */\n+    public SerializationConfig with(SerializationFeature feature)\n+    {\n+        int newSerFeatures = _serFeatures | feature.getMask();\n+        return (newSerFeatures == _serFeatures) ? this\n+                : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features enabled.\n+     */\n+    public SerializationConfig with(SerializationFeature first, SerializationFeature... features)\n+    {\n+        int newSerFeatures = _serFeatures | first.getMask();\n+        for (SerializationFeature f : features) {\n+            newSerFeatures |= f.getMask();\n+        }\n+        return (newSerFeatures == _serFeatures) ? this\n+                : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n+    }\n+    \n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features enabled.\n+     */\n+    public SerializationConfig withFeatures(SerializationFeature... features)\n+    {\n+        int newSerFeatures = _serFeatures;\n+        for (SerializationFeature f : features) {\n+            newSerFeatures |= f.getMask();\n+        }\n+        return (newSerFeatures == _serFeatures) ? this\n+                : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified feature disabled.\n+     */\n+    public SerializationConfig without(SerializationFeature feature)\n+    {\n+        int newSerFeatures = _serFeatures & ~feature.getMask();\n+        return (newSerFeatures == _serFeatures) ? this\n+                : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features disabled.\n+     */\n+    public SerializationConfig without(SerializationFeature first, SerializationFeature... features)\n+    {\n+        int newSerFeatures = _serFeatures & ~first.getMask();\n+        for (SerializationFeature f : features) {\n+            newSerFeatures &= ~f.getMask();\n+        }\n+        return (newSerFeatures == _serFeatures) ? this\n+                : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features disabled.\n+     */\n+    public SerializationConfig withoutFeatures(SerializationFeature... features)\n+    {\n+        int newSerFeatures = _serFeatures;\n+        for (SerializationFeature f : features) {\n+            newSerFeatures &= ~f.getMask();\n+        }\n+        return (newSerFeatures == _serFeatures) ? this\n+                : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n+    }\n+    \n+    public SerializationConfig withFilters(FilterProvider filterProvider) {\n+        return (filterProvider == _filterProvider) ? this : new SerializationConfig(this, filterProvider);\n+    }\n+\n+    public SerializationConfig withSerializationInclusion(JsonInclude.Include incl) {\n+        return (_serializationInclusion == incl) ? this:  new SerializationConfig(this, incl);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* MapperConfig implementation/overrides\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public boolean useRootWrapping()\n+    {\n+        if (_rootName != null) { // empty String disables wrapping; non-empty enables\n+            return (_rootName.length() > 0);\n+        }\n+        return isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n+    }\n+    \n+    @Override\n+    public AnnotationIntrospector getAnnotationIntrospector()\n+    {\n+        /* 29-Jul-2009, tatu: it's now possible to disable use of\n+         *   annotations; can be done using \"no-op\" introspector\n+         */\n+        if (isEnabled(MapperFeature.USE_ANNOTATIONS)) {\n+            return super.getAnnotationIntrospector();\n+        }\n+        return AnnotationIntrospector.nopInstance();\n+    }\n+\n+    /**\n+     * Accessor for getting bean description that only contains class\n+     * annotations: useful if no getter/setter/creator information is needed.\n+     */\n+    @Override\n+    public BeanDescription introspectClassAnnotations(JavaType type) {\n+        return getClassIntrospector().forClassAnnotations(this, type, this);\n+    }\n+\n+    /**\n+     * Accessor for getting bean description that only contains immediate class\n+     * annotations: ones from the class, and its direct mix-in, if any, but\n+     * not from super types.\n+     */\n+    @Override\n+    public BeanDescription introspectDirectClassAnnotations(JavaType type) {\n+        return getClassIntrospector().forDirectClassAnnotations(this, type, this);\n+    }\n+    \n+    @Override\n+    public VisibilityChecker<?> getDefaultVisibilityChecker()\n+    {\n+        VisibilityChecker<?> vchecker = super.getDefaultVisibilityChecker();\n+        if (!isEnabled(MapperFeature.AUTO_DETECT_GETTERS)) {\n+            vchecker = vchecker.withGetterVisibility(Visibility.NONE);\n+        }\n+        // then global overrides (disabling)\n+        if (!isEnabled(MapperFeature.AUTO_DETECT_IS_GETTERS)) {\n+            vchecker = vchecker.withIsGetterVisibility(Visibility.NONE);\n+        }\n+        if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS)) {\n+            vchecker = vchecker.withFieldVisibility(Visibility.NONE);\n+        }\n+        return vchecker;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Configuration: other\n+    /**********************************************************\n+     */\n+\n+    public final boolean isEnabled(SerializationFeature f) {\n+        return (_serFeatures & f.getMask()) != 0;\n+    }\n+    \n+    public final int getSerializationFeatures() {\n+        return _serFeatures;\n+    }\n+    \n+    public JsonInclude.Include getSerializationInclusion()\n+    {\n+        if (_serializationInclusion != null) {\n+            return _serializationInclusion;\n+        }\n+        return JsonInclude.Include.ALWAYS;\n+    }\n+    \n+    /**\n+     * Method for getting provider used for locating filters given\n+     * id (which is usually provided with filter annotations).\n+     * Will be null if no provided was set for {@link ObjectWriter}\n+     * (or if serialization directly called from {@link ObjectMapper})\n+     */\n+    public FilterProvider getFilterProvider() {\n+        return _filterProvider;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Introspection methods\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method that will introspect full bean properties for the purpose\n+     * of building a bean serializer\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends BeanDescription> T introspect(JavaType type) {\n+        return (T) getClassIntrospector().forSerialization(this, type, this);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Debug support\n+    /**********************************************************\n+     */\n+    \n+    @Override public String toString()\n+    {\n+        return \"[SerializationConfig: flags=0x\"+Integer.toHexString(_serFeatures)+\"]\";\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n      * or as something else (usually textual representation).\n      * If textual representation is used, the actual format is\n      * one returned by a call to\n-     * {@link com.fasterxml.jackson.databind.cfg.SerializationConfig#getDateFormat}.\n+     * {@link com.fasterxml.jackson.databind.SerializationConfig#getDateFormat}.\n      *<p>\n      * Note: whether this feature affects handling of other date-related\n      * types depend on handlers of those types, although ideally they\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n \n import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/HandlerInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/HandlerInstantiator.java\n package com.fasterxml.jackson.databind.cfg;\n \n+import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.KeyDeserializer;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.NoClass;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.deser.impl.CreatorCollector;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n \n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;\n import com.fasterxml.jackson.databind.deser.impl.ValueInjector;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n import com.fasterxml.jackson.databind.util.Annotations;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n import java.util.concurrent.atomic.AtomicReference;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;\n import com.fasterxml.jackson.databind.deser.std.JdkDeserializers;\n import com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier.java\n import java.util.List;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.deser.BeanDeserializer;\n import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;\n+import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n \n /**\n  * Abstract class that defines API for objects that can be registered (for {@link BeanDeserializerFactory}\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java\n \n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n \n /**\n  * This is the class that can be registered (via\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.NoClass;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.type.*;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n package com.fasterxml.jackson.databind.deser;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.type.*;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n package com.fasterxml.jackson.databind.deser;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.type.*;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/KeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/KeyDeserializers.java\n package com.fasterxml.jackson.databind.deser;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n \n /**\n  * Interface that defines API for simple extensions that can provide additional deserializers\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n \n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiators.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiators.java\n package com.fasterxml.jackson.databind.deser;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n \n /**\n  * Interface for providers of {@link ValueInstantiator} instances.\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n \n \n import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.deser.CreatorProperty;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n \n import com.fasterxml.jackson.core.*;\n \n+import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.EnumResolver;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.JsonToken;\n import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.deser.CreatorProperty;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java\n import java.util.*;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n import com.fasterxml.jackson.databind.type.*;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.deser.CreatorProperty;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java\n import java.util.Map;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import com.fasterxml.jackson.databind.util.Provider;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n package com.fasterxml.jackson.databind.introspect;\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.type.SimpleType;\n \n public class BasicClassIntrospector\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+package com.fasterxml.jackson.databind.introspect;\n+\n+import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.util.Named;\n+\n+/**\n+ * Simple value classes that contain definitions of properties,\n+ * used during introspection of properties to use for\n+ * serialization and deserialization purposes.\n+ * These instances are created before actual {@link BeanProperty}\n+ * instances are created, i.e. they are used earlier in the process\n+ * flow, and are typically use to construct actual\n+ * {@link BeanProperty} instances.\n+ */\n+public abstract class BeanPropertyDefinition\n+    implements Named\n+{\n+    /*\n+    /*****************************************************\n+    /* Fluent factory methods for creating modified copies\n+    /*****************************************************\n+     */\n+\n+    /**\n+     * Method that can be used to create a definition with\n+     * same settings as this one, but with different\n+     * (external) name; that is, one for which\n+     * {@link #getName()} would return <code>newName</code>.\n+     */\n+    public abstract BeanPropertyDefinition withName(String newName);\n+    \n+    /*\n+    /*****************************************************\n+    /* Basic property information, name, type\n+    /*****************************************************\n+     */\n+\n+    /**\n+     * Accessor for name used for external representation (in JSON).\n+     */\n+    @Override // from Named\n+    public abstract String getName();\n+\n+    /**\n+     * Accessor that can be used to determine implicit name from underlying\n+     * element(s) before possible renaming. This is the \"internal\"\n+     * name derived from accessor (\"x\" from \"getX\"), and is not based on\n+     * annotations or naming strategy.\n+     */\n+    public abstract String getInternalName();\n+\n+    /*\n+    /*****************************************************\n+    /* Capabilities\n+    /*****************************************************\n+     */\n+\n+    public boolean couldDeserialize() {\n+        return getMutator() != null;\n+    }\n+    public boolean couldSerialize() {\n+        return getAccessor() != null;\n+    }\n+    \n+    /*\n+    /*****************************************************\n+    /* Access to accessors (fields, methods etc)\n+    /*****************************************************\n+     */\n+    \n+    public abstract boolean hasGetter();\n+    public abstract boolean hasSetter();\n+    public abstract boolean hasField();\n+    public abstract boolean hasConstructorParameter();\n+    \n+    public abstract AnnotatedMethod getGetter();\n+    public abstract AnnotatedMethod getSetter();\n+    public abstract AnnotatedField getField();\n+    public abstract AnnotatedParameter getConstructorParameter();\n+\n+    /**\n+     * Method used to find accessor (getter, field to access) to use for accessing\n+     * value of the property.\n+     * Null if no such member exists.\n+     */\n+    public abstract AnnotatedMember getAccessor();\n+\n+    /**\n+     * Method used to find mutator (constructor parameter, setter, field) to use for\n+     * changing value of the property.\n+     * Null if no such member exists.\n+     */\n+    public abstract AnnotatedMember getMutator();\n+\n+    /*\n+    /*****************************************************\n+    /* More refined access to configuration features\n+    /* (usually based on annotations)\n+    /*****************************************************\n+     */\n+    \n+    /**\n+     * Method used to find View-inclusion definitions for the property.\n+     */\n+    public Class<?>[] findViews() { return null; }\n+\n+    /**\n+     * Method used to find whether property is part of a bi-directional\n+     * reference.\n+     */\n+    public AnnotationIntrospector.ReferenceProperty findReferenceType() {\n+        return null;\n+    }\n+\n+    /**\n+     * Method used to check whether this logical property has marker(s)\n+     * to indicate it should be used as the type id for polymorphic type\n+     * handling.\n+     */\n+    public boolean isTypeId() {\n+        return false;\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java\n package com.fasterxml.jackson.databind.introspect;\n \n import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n \n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n package com.fasterxml.jackson.databind.introspect;\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n-import com.fasterxml.jackson.databind.BeanPropertyDefinition;\n \n /**\n  * Helper class used for aggregating information about a single\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n \n /**\n  * Interface that defines builders that are configured based on\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java\n \n \n import com.fasterxml.jackson.databind.AbstractTypeResolver;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.type.ClassKey;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n import java.util.*;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.deser.Deserializers;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.type.*;\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java\n \n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.deser.KeyDeserializers;\n import com.fasterxml.jackson.databind.type.ClassKey;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java\n \n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.Serializers;\n import com.fasterxml.jackson.databind.type.ArrayType;\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleValueInstantiators.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleValueInstantiators.java\n import java.util.HashMap;\n \n import com.fasterxml.jackson.databind.BeanDescription;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.deser.ValueInstantiators;\n import com.fasterxml.jackson.databind.type.ClassKey;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.annotation.NoClass;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;\n import com.fasterxml.jackson.databind.ext.OptionalHandlerFactory;\n import com.fasterxml.jackson.databind.introspect.*;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n import com.fasterxml.jackson.databind.introspect.AnnotatedField;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n+import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n import java.util.*;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifier.java\n \n import com.fasterxml.jackson.databind.BeanDescription;\n import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n \n /**\n  * Abstract class that defines API for objects that can be registered (for {@link BeanSerializerFactory}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.util.*;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java\n package com.fasterxml.jackson.databind.ser;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/Serializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/Serializers.java\n package com.fasterxml.jackson.databind.ser;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.type.*;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.node.ArrayNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.util.EnumValues;\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n  *<p>\n  * Instances of this class are accessible using {@link com.fasterxml.jackson.databind.ObjectMapper}\n  * as well as many objects it constructs (like\n-* {@link com.fasterxml.jackson.databind.cfg.DeserializationConfig} and\n- * {@link com.fasterxml.jackson.databind.cfg.SerializationConfig})),\n+* {@link com.fasterxml.jackson.databind.DeserializationConfig} and\n+ * {@link com.fasterxml.jackson.databind.SerializationConfig})),\n  * but usually those objects also \n  * expose convenience methods (<code>constructType</code>).\n  * So, you can do for example:\n--- a/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n package com.fasterxml.jackson.databind.util;\n \n-import com.fasterxml.jackson.databind.BeanPropertyDefinition;\n import com.fasterxml.jackson.databind.introspect.AnnotatedField;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;\n+import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n \n /**\n  * Simple immutable {@link BeanPropertyDefinition} implementation that can\n--- a/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation.java\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.*;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n--- a/src/test/java/com/fasterxml/jackson/databind/TestObjectMapper.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestObjectMapper.java\n import com.fasterxml.jackson.core.JsonFactory;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.node.*;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorNullValue.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorNullValue.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.deser.*;\n \n // Mostly for [JACSON-774]\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java\n import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonValueInstantiator;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n import com.fasterxml.jackson.databind.deser.BeanDeserializer;\n import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;\n import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestConfig.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestConfig.java\n import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n \n /**\n  * Unit tests for checking handling of DeserializationConfig.\n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n-import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.module.SimpleDeserializers;\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.introspect.AnnotatedField;\n import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java\n \n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n \n /**\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestNullSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestNullSerialization.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n \n public class TestNullSerialization\n     extends BaseMapTest\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestSerializerProvider.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestSerializerProvider.java\n package com.fasterxml.jackson.databind.ser;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.cfg.SerializationConfig;\n import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;\n \n public class TestSerializerProvider", "timestamp": 1328334614, "metainfo": ""}