{"sha": "10af6d3a3e816f9717c112e97a912fef9a4eeadd", "log": "Yet more refactorign", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java\n     \n     @Override\n     public TypeDeserializer forProperty(BeanProperty prop) {\n-        if (prop == _property) { // usually if it's null\n-            return this;\n-        }\n-        return new AsArrayTypeDeserializer(this, prop);\n+        // usually if it's null:\n+        return (prop == _property) ? this : new AsArrayTypeDeserializer(this, prop);\n     }\n     \n     @Override\n-    public As getTypeInclusion() {\n-        return As.WRAPPER_ARRAY;\n-    }\n+    public As getTypeInclusion() { return As.WRAPPER_ARRAY; }\n \n     /**\n      * Method called when actual object is serialized as JSON Array.\n      */\n     @Override\n-    public Object deserializeTypedFromArray(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n-    {\n+    public Object deserializeTypedFromArray(JsonParser jp, DeserializationContext ctxt) throws IOException {\n         return _deserialize(jp, ctxt);\n     }\n \n      * Method called when actual object is serialized as JSON Object\n      */\n     @Override\n-    public Object deserializeTypedFromObject(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n-    {\n+    public Object deserializeTypedFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException {\n         return _deserialize(jp, ctxt);\n     }\n     \n     @Override\n-    public Object deserializeTypedFromScalar(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n-    {\n+    public Object deserializeTypedFromScalar(JsonParser jp, DeserializationContext ctxt) throws IOException {\n         return _deserialize(jp, ctxt);\n     }    \n \n     @Override\n-    public Object deserializeTypedFromAny(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n-    {\n+    public Object deserializeTypedFromAny(JsonParser jp, DeserializationContext ctxt) throws IOException {\n         return _deserialize(jp, ctxt);\n     }    \n     \n      * deserialization.\n      */\n     @SuppressWarnings(\"resource\")\n-    private final Object _deserialize(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n+    private final Object _deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n     {\n         // 02-Aug-2013, tatu: May need to use native type ids\n         if (jp.canReadTypeId()) {\n         return value;\n     }    \n     \n-    protected final String _locateTypeId(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n+    protected final String _locateTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException\n     {\n         if (!jp.isExpectedStartArrayToken()) {\n             // [JACKSON-712] Need to allow even more customized handling, if something unexpected seen...\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java\n /**\n  * Type serializer that will embed type information in an array,\n  * as the first element, and actual value as the second element.\n- * \n- * @author tatu\n  */\n-public class AsArrayTypeSerializer\n-    extends TypeSerializerBase\n+public class AsArrayTypeSerializer extends TypeSerializerBase\n {\n-    public AsArrayTypeSerializer(TypeIdResolver idRes, BeanProperty property)\n-    {\n+    public AsArrayTypeSerializer(TypeIdResolver idRes, BeanProperty property) {\n         super(idRes, property);\n     }\n \n     @Override\n     public AsArrayTypeSerializer forProperty(BeanProperty prop) {\n-        if (_property == prop) return this;\n-        return new AsArrayTypeSerializer(this._idResolver, prop);\n+        return (_property == prop) ? this : new AsArrayTypeSerializer(this._idResolver, prop);\n     }\n     \n     @Override\n      */\n     \n     @Override\n-    public void writeTypePrefixForObject(Object value, JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeTypePrefixForObject(Object value, JsonGenerator jgen) throws IOException {\n         final String typeId = idFromValue(value);\n         if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n     }\n \n     @Override\n-    public void writeTypePrefixForObject(Object value, JsonGenerator jgen,\n-            Class<?> type)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeTypePrefixForObject(Object value, JsonGenerator jgen, Class<?> type) throws IOException {\n         final String typeId = idFromValueAndType(value, type);\n         if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n     }\n     \n     @Override\n-    public void writeTypePrefixForArray(Object value, JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeTypePrefixForArray(Object value, JsonGenerator jgen) throws IOException {\n         final String typeId = idFromValue(value);\n         if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n     }\n \n     @Override\n-    public void writeTypePrefixForArray(Object value, JsonGenerator jgen,\n-            Class<?> type)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeTypePrefixForArray(Object value, JsonGenerator jgen, Class<?> type) throws IOException {\n         final String typeId = idFromValueAndType(value, type);\n         if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n     }\n     \n     @Override\n-    public void writeTypePrefixForScalar(Object value, JsonGenerator jgen)\n-            throws IOException, JsonProcessingException\n-    {\n+    public void writeTypePrefixForScalar(Object value, JsonGenerator jgen) throws IOException {\n         final String typeId = idFromValue(value);\n         if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n     }\n \n     @Override\n-    public void writeTypePrefixForScalar(Object value, JsonGenerator jgen,\n-            Class<?> type)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeTypePrefixForScalar(Object value, JsonGenerator jgen, Class<?> type) throws IOException {\n         final String typeId = idFromValueAndType(value, type);\n         if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n      */\n     \n     @Override\n-    public void writeTypeSuffixForObject(Object value, JsonGenerator jgen)\n-            throws IOException, JsonProcessingException\n-    {\n+    public void writeTypeSuffixForObject(Object value, JsonGenerator jgen) throws IOException {\n         jgen.writeEndObject();\n         if (!jgen.canWriteTypeId()) {\n             jgen.writeEndArray();\n     }\n \n     @Override\n-    public void writeTypeSuffixForArray(Object value, JsonGenerator jgen)\n-            throws IOException, JsonProcessingException\n-    {\n+    public void writeTypeSuffixForArray(Object value, JsonGenerator jgen) throws IOException {\n         // first array caller needs to close, then wrapper array\n         jgen.writeEndArray();\n         if (!jgen.canWriteTypeId()) {\n     }\n \n     @Override\n-    public void writeTypeSuffixForScalar(Object value, JsonGenerator jgen)\n-            throws IOException, JsonProcessingException\n-    {\n+    public void writeTypeSuffixForScalar(Object value, JsonGenerator jgen) throws IOException {\n         if (!jgen.canWriteTypeId()) {\n             // just the wrapper array to close\n             jgen.writeEndArray();\n      */\n \n     @Override\n-    public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n         } else {\n     }\n     \n     @Override\n-    public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n         } else {\n     }\n \n     @Override\n-    public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n         } else {\n     }\n \n     @Override\n-    public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (!jgen.canWriteTypeId()) {\n             writeTypeSuffixForObject(value, jgen); // standard impl works fine\n         }\n     }\n \n     @Override\n-    public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId)\n-            throws IOException, JsonProcessingException\n-    {\n+    public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (!jgen.canWriteTypeId()) {\n             writeTypeSuffixForArray(value, jgen); // standard impl works fine\n         }\n     }\n \n     @Override\n-    public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (!jgen.canWriteTypeId()) {\n             writeTypeSuffixForScalar(value, jgen); // standard impl works fine\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeDeserializer.java\n     }\n     \n     @Override\n-    public TypeDeserializer forProperty(BeanProperty prop)\n-    {\n+    public TypeDeserializer forProperty(BeanProperty prop) {\n         if (prop == _property) { // usually if it's null\n             return this;\n         }\n     }\n     \n     @Override\n-    public As getTypeInclusion() {\n-        return As.EXTERNAL_PROPERTY;\n-    }\n+    public As getTypeInclusion() { return As.EXTERNAL_PROPERTY; }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java\n  * Also note that this type of type id inclusion will NOT try to make use\n  * of native Type Ids, even if those exist.\n  */\n-public class AsExternalTypeSerializer\n-   extends TypeSerializerBase\n+public class AsExternalTypeSerializer extends TypeSerializerBase\n {\n    protected final String _typePropertyName;\n \n-   public AsExternalTypeSerializer(TypeIdResolver idRes, BeanProperty property,\n-          String propName)\n-   {\n+   public AsExternalTypeSerializer(TypeIdResolver idRes, BeanProperty property, String propName) {\n        super(idRes, property);\n        _typePropertyName = propName;\n    }\n \n    @Override\n    public AsExternalTypeSerializer forProperty(BeanProperty prop) {\n-       if (_property == prop) return this;\n-       return new AsExternalTypeSerializer(_idResolver, prop, _typePropertyName);\n+       return (_property == prop) ? this : new AsExternalTypeSerializer(_idResolver, prop, _typePropertyName);\n    }\n    \n    @Override\n     */\n    \n    @Override\n-   public void writeTypePrefixForObject(Object value, JsonGenerator jgen)\n-       throws IOException, JsonProcessingException\n-   {\n+   public void writeTypePrefixForObject(Object value, JsonGenerator jgen) throws IOException {\n        _writeObjectPrefix(value, jgen);\n    }\n \n    @Override\n-   public void writeTypePrefixForObject(Object value, JsonGenerator jgen, Class<?> type)\n-       throws IOException, JsonProcessingException\n-   {\n+   public void writeTypePrefixForObject(Object value, JsonGenerator jgen, Class<?> type) throws IOException {\n        _writeObjectPrefix(value, jgen);\n    }\n    \n    @Override\n-   public void writeTypePrefixForArray(Object value, JsonGenerator jgen)\n-       throws IOException, JsonProcessingException\n-   {\n+   public void writeTypePrefixForArray(Object value, JsonGenerator jgen) throws IOException {\n        _writeArrayPrefix(value, jgen);\n    }\n \n    @Override\n-   public void writeTypePrefixForArray(Object value, JsonGenerator jgen, Class<?> type)\n-           throws IOException, JsonProcessingException\n-   {\n+   public void writeTypePrefixForArray(Object value, JsonGenerator jgen, Class<?> type) throws IOException {\n        _writeArrayPrefix(value, jgen);\n    }\n \n    @Override\n-   public void writeTypePrefixForScalar(Object value, JsonGenerator jgen)\n-           throws IOException, JsonProcessingException\n-   {\n+   public void writeTypePrefixForScalar(Object value, JsonGenerator jgen) throws IOException {\n        _writeScalarPrefix(value, jgen);\n    }\n \n    @Override\n-   public void writeTypePrefixForScalar(Object value, JsonGenerator jgen, Class<?> type)\n-           throws IOException, JsonProcessingException\n-   {\n+   public void writeTypePrefixForScalar(Object value, JsonGenerator jgen, Class<?> type) throws IOException {\n        _writeScalarPrefix(value, jgen);\n    }\n \n     */\n    \n    @Override\n-   public void writeTypeSuffixForObject(Object value, JsonGenerator jgen)\n-       throws IOException, JsonProcessingException\n-   {\n+   public void writeTypeSuffixForObject(Object value, JsonGenerator jgen) throws IOException {\n        _writeObjectSuffix(value, jgen, idFromValue(value));\n    }\n \n    @Override\n-   public void writeTypeSuffixForArray(Object value, JsonGenerator jgen)\n-       throws IOException, JsonProcessingException\n-   {\n+   public void writeTypeSuffixForArray(Object value, JsonGenerator jgen) throws IOException {\n        _writeArraySuffix(value, jgen, idFromValue(value));\n    }\n    \n    @Override\n-   public void writeTypeSuffixForScalar(Object value, JsonGenerator jgen)\n-       throws IOException, JsonProcessingException\n-   {\n+   public void writeTypeSuffixForScalar(Object value, JsonGenerator jgen) throws IOException {\n        _writeScalarSuffix(value, jgen, idFromValue(value));\n    }\n \n     */\n \n    @Override\n-   public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId)\n-       throws IOException, JsonProcessingException\n-   {\n+   public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId) throws IOException {\n        _writeScalarPrefix(value, jgen);\n    }\n    \n    @Override\n-   public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId)\n-       throws IOException, JsonProcessingException {\n+   public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId) throws IOException {\n        _writeObjectPrefix(value, jgen);\n    }\n    \n    @Override\n-   public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId)\n-       throws IOException, JsonProcessingException\n-   {\n+   public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId) throws IOException {\n        _writeArrayPrefix(value, jgen);\n    }\n \n    @Override\n-   public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId)\n-       throws IOException, JsonProcessingException {\n+   public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId) throws IOException {\n        _writeScalarSuffix(value, jgen, typeId);\n    }\n \n    @Override\n-   public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n-       throws IOException, JsonProcessingException {\n+   public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId) throws IOException {\n        _writeObjectSuffix(value, jgen, typeId);\n    }\n \n    @Override\n-   public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId)\n-           throws IOException, JsonProcessingException {\n+   public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId) throws IOException {\n        _writeArraySuffix(value, jgen, typeId);\n    }\n-   \n+\n    /*\n    /**********************************************************\n    /* Helper methods\n    /**********************************************************\n     */\n \n-   protected final void _writeScalarPrefix(Object value, JsonGenerator jgen)\n-       throws IOException, JsonProcessingException {\n-       // nothing to wrap it with\n-   }\n+   // nothing to wrap it with:\n+   protected final void _writeScalarPrefix(Object value, JsonGenerator jgen) throws IOException { }\n \n-   protected final void _writeObjectPrefix(Object value, JsonGenerator jgen)\n-       throws IOException, JsonProcessingException {\n+   protected final void _writeObjectPrefix(Object value, JsonGenerator jgen) throws IOException {\n        jgen.writeStartObject();\n    }\n \n-   protected final void _writeArrayPrefix(Object value, JsonGenerator jgen)\n-       throws IOException, JsonProcessingException {\n+   protected final void _writeArrayPrefix(Object value, JsonGenerator jgen) throws IOException {\n        jgen.writeStartArray();\n    }\n    \n-   protected final void _writeScalarSuffix(Object value, JsonGenerator jgen, String typeId)\n-       throws IOException, JsonProcessingException\n-   {\n+   protected final void _writeScalarSuffix(Object value, JsonGenerator jgen, String typeId) throws IOException {\n        jgen.writeStringField(_typePropertyName, typeId);\n    }\n    \n-   protected final void _writeObjectSuffix(Object value, JsonGenerator jgen, String typeId)\n-       throws IOException, JsonProcessingException\n-   {\n+   protected final void _writeObjectSuffix(Object value, JsonGenerator jgen, String typeId) throws IOException {\n        jgen.writeEndObject();\n        jgen.writeStringField(_typePropertyName, typeId);\n    }\n \n-   protected final void _writeArraySuffix(Object value, JsonGenerator jgen, String typeId)\n-       throws IOException, JsonProcessingException\n-   {\n+   protected final void _writeArraySuffix(Object value, JsonGenerator jgen, String typeId) throws IOException {\n        jgen.writeEndArray();\n        jgen.writeStringField(_typePropertyName, typeId);\n    }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n     \n     @Override\n     public TypeDeserializer forProperty(BeanProperty prop) {\n-        if (prop == _property) { // usually if it's null\n-            return this;\n-        }\n-        return new AsPropertyTypeDeserializer(this, prop);\n+        return (prop == _property) ? this : new AsPropertyTypeDeserializer(this, prop);\n     }\n     \n     @Override\n-    public As getTypeInclusion() {\n-        return As.PROPERTY;\n-    }\n+    public As getTypeInclusion() { return As.PROPERTY; }\n \n     /**\n      * This is the trickiest thing to handle, since property we are looking\n      */\n     @Override\n     @SuppressWarnings(\"resource\")\n-    public Object deserializeTypedFromObject(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n+    public Object deserializeTypedFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException\n     {\n         // 02-Aug-2013, tatu: May need to use native type ids\n         if (jp.canReadTypeId()) {\n     }\n \n     @SuppressWarnings(\"resource\")\n-    protected final Object _deserializeTypedForId(JsonParser jp, DeserializationContext ctxt,\n-            TokenBuffer tb)\n-        throws IOException, JsonProcessingException\n+    protected final Object _deserializeTypedForId(JsonParser jp, DeserializationContext ctxt, TokenBuffer tb) throws IOException\n     {\n         String typeId = jp.getText();\n         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n     \n     // off-lined to keep main method lean and mean...\n     @SuppressWarnings(\"resource\")\n-    protected Object _deserializeTypedUsingDefaultImpl(JsonParser jp,\n-            DeserializationContext ctxt, TokenBuffer tb)\n-        throws IOException, JsonProcessingException\n+    protected Object _deserializeTypedUsingDefaultImpl(JsonParser jp, DeserializationContext ctxt, TokenBuffer tb) throws IOException\n     {\n         // As per [JACKSON-614], may have default implementation to use\n         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n      * no negative side effects (at least within existing unit test suite).\n      */\n     @Override\n-    public Object deserializeTypedFromAny(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n-    {\n+    public Object deserializeTypedFromAny(JsonParser jp, DeserializationContext ctxt) throws IOException {\n         /* [JACKSON-387]: Sometimes, however, we get an array wrapper; specifically\n          *   when an array or list has been serialized with type information.\n          */\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.java\n {\n     protected final String _typePropertyName;\n \n-    public AsPropertyTypeSerializer(TypeIdResolver idRes, BeanProperty property,\n-            String propName)\n+    public AsPropertyTypeSerializer(TypeIdResolver idRes, BeanProperty property, String propName)\n     {\n         super(idRes, property);\n         _typePropertyName = propName;\n \n     @Override\n     public AsPropertyTypeSerializer forProperty(BeanProperty prop) {\n-        if (_property == prop) return this;\n-        return new AsPropertyTypeSerializer(this._idResolver, prop, this._typePropertyName);\n+        return (_property == prop) ? this : new AsPropertyTypeSerializer(this._idResolver, prop, this._typePropertyName);\n     }\n     \n     @Override\n     public As getTypeInclusion() { return As.PROPERTY; }\n     \n     @Override\n-    public void writeTypePrefixForObject(Object value, JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n+    public void writeTypePrefixForObject(Object value, JsonGenerator jgen) throws IOException\n     {\n         final String typeId = idFromValue(value);\n         if (jgen.canWriteTypeId()) {\n     }\n \n     @Override\n-    public void writeTypePrefixForObject(Object value, JsonGenerator jgen, Class<?> type)\n-        throws IOException, JsonProcessingException\n+    public void writeTypePrefixForObject(Object value, JsonGenerator jgen, Class<?> type) throws IOException\n     {\n         final String typeId = idFromValueAndType(value, type);\n         if (jgen.canWriteTypeId()) {\n     //public void writeTypePrefixForScalar(Object value, JsonGenerator jgen, Class<?> type)\n \n     @Override\n-    public void writeTypeSuffixForObject(Object value, JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeTypeSuffixForObject(Object value, JsonGenerator jgen) throws IOException {\n         // always need to close, regardless of whether its native type id or not\n         jgen.writeEndObject();\n     }\n     // Only need to override Object-variants\n     \n     @Override\n-    public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException\n+    public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId) throws IOException\n     {\n         if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n     }\n \n     @Override\n-    public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         jgen.writeEndObject();\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java\n     }\n     \n     @Override\n-    public TypeDeserializer forProperty(BeanProperty prop)\n-    {\n-        if (prop == _property) { // usually if it's null\n-            return this;\n-        }\n-        return new AsWrapperTypeDeserializer(this, prop);\n+    public TypeDeserializer forProperty(BeanProperty prop) {\n+        return (prop == _property) ? this : new AsWrapperTypeDeserializer(this, prop);\n     }\n     \n     @Override\n-    public As getTypeInclusion() {\n-        return As.WRAPPER_OBJECT;\n-    }\n+    public As getTypeInclusion() { return As.WRAPPER_OBJECT; }\n \n     /**\n      * Deserializing type id enclosed using WRAPPER_OBJECT style is straightforward\n      */\n     @Override\n-    public Object deserializeTypedFromObject(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n-    {\n+    public Object deserializeTypedFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException {\n         return _deserialize(jp, ctxt);\n     }    \n \n     @Override\n-    public Object deserializeTypedFromArray(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n-    {\n+    public Object deserializeTypedFromArray(JsonParser jp, DeserializationContext ctxt) throws IOException {\n         return _deserialize(jp, ctxt);\n     }\n \n     @Override\n-    public Object deserializeTypedFromScalar(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n-    {\n+    public Object deserializeTypedFromScalar(JsonParser jp, DeserializationContext ctxt) throws IOException {\n         return _deserialize(jp, ctxt);\n     }\n \n     @Override\n-    public Object deserializeTypedFromAny(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n-    {\n+    public Object deserializeTypedFromAny(JsonParser jp, DeserializationContext ctxt) throws IOException {\n         return _deserialize(jp, ctxt);\n     }\n     \n      * deserialization.\n      */\n     @SuppressWarnings(\"resource\")\n-    private final Object _deserialize(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n+    private final Object _deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n     {\n         // 02-Aug-2013, tatu: May need to use native type ids\n         if (jp.canReadTypeId()) {\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java\n  * just use a wrapping array with type information as the first element\n  * and value as second.\n  */\n-public class AsWrapperTypeSerializer\n-    extends TypeSerializerBase\n+public class AsWrapperTypeSerializer extends TypeSerializerBase\n {\n-    public AsWrapperTypeSerializer(TypeIdResolver idRes, BeanProperty property)\n-    {\n+    public AsWrapperTypeSerializer(TypeIdResolver idRes, BeanProperty property) {\n         super(idRes, property);\n     }\n \n     @Override\n     public AsWrapperTypeSerializer forProperty(BeanProperty prop) {\n-        if (_property == prop) return this;\n-        return new AsWrapperTypeSerializer(this._idResolver, prop);\n+        return (_property == prop) ? this : new AsWrapperTypeSerializer(this._idResolver, prop);\n     }\n     \n     @Override\n     public As getTypeInclusion() { return As.WRAPPER_OBJECT; }\n     \n     @Override\n-    public void writeTypePrefixForObject(Object value, JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n+    public void writeTypePrefixForObject(Object value, JsonGenerator jgen) throws IOException\n     {\n         final String typeId = idFromValue(value);\n         if (jgen.canWriteTypeId()) {\n     }\n \n     @Override\n-    public void writeTypePrefixForObject(Object value, JsonGenerator jgen,\n-            Class<?> type)\n-        throws IOException, JsonProcessingException\n+    public void writeTypePrefixForObject(Object value, JsonGenerator jgen, Class<?> type) throws IOException\n     {\n         final String typeId = idFromValueAndType(value, type);\n         if (jgen.canWriteTypeId()) {\n     }\n     \n     @Override\n-    public void writeTypePrefixForArray(Object value, JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n+    public void writeTypePrefixForArray(Object value, JsonGenerator jgen) throws IOException\n     {\n         final String typeId = idFromValue(value);\n         if (jgen.canWriteTypeId()) {\n     }\n \n     @Override\n-    public void writeTypePrefixForArray(Object value, JsonGenerator jgen,\n-            Class<?> type)\n-        throws IOException, JsonProcessingException\n+    public void writeTypePrefixForArray(Object value, JsonGenerator jgen, Class<?> type) throws IOException\n     {\n         final String typeId = idFromValueAndType(value, type);\n         if (jgen.canWriteTypeId()) {\n     }\n \n     @Override\n-    public void writeTypePrefixForScalar(Object value, JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeTypePrefixForScalar(Object value, JsonGenerator jgen) throws IOException {\n         final String typeId = idFromValue(value);\n         if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n     }\n \n     @Override\n-    public void writeTypePrefixForScalar(Object value, JsonGenerator jgen,\n-            Class<?> type)\n-        throws IOException, JsonProcessingException\n+    public void writeTypePrefixForScalar(Object value, JsonGenerator jgen, Class<?> type) throws IOException\n     {\n         final String typeId = idFromValueAndType(value, type);\n         if (jgen.canWriteTypeId()) {\n     }\n     \n     @Override\n-    public void writeTypeSuffixForObject(Object value, JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n+    public void writeTypeSuffixForObject(Object value, JsonGenerator jgen) throws IOException\n     {\n         // first close JSON Object caller used\n         jgen.writeEndObject();\n     }\n \n     @Override\n-    public void writeTypeSuffixForArray(Object value, JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n+    public void writeTypeSuffixForArray(Object value, JsonGenerator jgen) throws IOException\n     {\n         // first close array caller needed\n         jgen.writeEndArray();\n     }\n     \n     @Override\n-    public void writeTypeSuffixForScalar(Object value, JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeTypeSuffixForScalar(Object value, JsonGenerator jgen) throws IOException {\n         if (!jgen.canWriteTypeId()) {\n             // just need to close the wrapper object\n             jgen.writeEndObject();\n      */\n     \n     @Override\n-    public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n             jgen.writeStartObject();\n     }\n     \n     @Override\n-    public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n             jgen.writeStartArray();\n     }\n \n     @Override\n-    public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n         } else {\n     }\n \n     @Override\n-    public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n-            throws IOException, JsonProcessingException {\n+    public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (!jgen.canWriteTypeId()) {\n             writeTypeSuffixForObject(value, jgen); // standard impl works fine\n         }\n     }\n \n     @Override\n-    public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId)\n-            throws IOException, JsonProcessingException {\n+    public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (!jgen.canWriteTypeId()) {\n             writeTypeSuffixForArray(value, jgen); // standard impl works fine\n         }\n     }\n \n     @Override\n-    public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId)\n-            throws IOException, JsonProcessingException {\n+    public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (!jgen.canWriteTypeId()) {\n             writeTypeSuffixForScalar(value, jgen); // standard impl works fine\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java\n         this(null, null);\n     }\n     \n-    protected TypeIdResolverBase(JavaType baseType, TypeFactory typeFactory)\n-    {\n+    protected TypeIdResolverBase(JavaType baseType, TypeFactory typeFactory) {\n         _baseType = baseType;\n         _typeFactory = typeFactory;\n     }\n \n+    // Standard type id resolvers do not need this: only useful for custom ones.\n     @Override\n-    public void init(JavaType bt) {\n-        // Standard type id resolvers do not need this: only useful for custom ones.\n-    }\n+    public void init(JavaType bt) { }\n \n     @Override\n-    public String idFromBaseType()\n-    {\n+    public String idFromBaseType() {\n         /* By default we will just defer to regular handling, handing out the\n          * base type; and since there is no value, must just pass null here\n          * assuming that implementations can deal with it.\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n \n-public class TypeNameIdResolver\n-    extends TypeIdResolverBase\n+public class TypeNameIdResolver extends TypeIdResolverBase\n {\n     protected final MapperConfig<?> _config;\n     \n         _idToType = idToType;\n     }\n  \n-    public static TypeNameIdResolver construct(MapperConfig<?> config,\n-            JavaType baseType,\n+    public static TypeNameIdResolver construct(MapperConfig<?> config, JavaType baseType,\n             Collection<NamedType> subtypes, boolean forSer, boolean forDeser)\n     {\n         // sanity check\n     }\n \n     @Override\n-    public String idFromValueAndType(Object value, Class<?> type)\n-    {\n+    public String idFromValueAndType(Object value, Class<?> type) {\n         /* 18-Jan-2013, tatu: We may be called with null value occasionally\n          *   it seems; nothing much we can figure out that way.\n          */\n         return _typeFromId(id);\n     }\n     \n-    protected JavaType _typeFromId(String id)\n-    {\n+    protected JavaType _typeFromId(String id) {\n         /* Now: if no type is found, should we try to locate it by\n          * some other means? (specifically, if in same package as base type,\n          * could just try Class.forName)\n     }    \n     \n     @Override\n-    public String toString()\n-    {\n+    public String toString() {\n         StringBuilder sb = new StringBuilder();\n         sb.append('[').append(getClass().getName());\n         sb.append(\"; id-to-type=\").append(_idToType);\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeSerializerBase.java\n     protected final TypeIdResolver _idResolver;\n \n     protected final BeanProperty _property;\n-    \n+\n     protected TypeSerializerBase(TypeIdResolver idRes, BeanProperty property)\n     {\n         _idResolver = idRes;", "timestamp": 1388557677, "metainfo": ""}