{"sha": "bbebf468b54d59eab0993b6bbfdc02107193713e", "log": "Completed [JACKSON-762], custom type id for serialization, using @JsonTypeId", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java\n    public void writeTypeSuffixForObject(Object value, JsonGenerator jgen)\n        throws IOException, JsonProcessingException\n    {\n-       _writeSuffix(value, jgen);\n+       _writeSuffix(value, jgen, idFromValue(value));\n    }\n \n    @Override\n    public void writeTypeSuffixForArray(Object value, JsonGenerator jgen)\n        throws IOException, JsonProcessingException\n    {\n-       _writeSuffix(value, jgen);\n+       _writeSuffix(value, jgen, idFromValue(value));\n    }\n    \n    @Override\n    public void writeTypeSuffixForScalar(Object value, JsonGenerator jgen)\n        throws IOException, JsonProcessingException\n    {\n-       _writeSuffix(value, jgen);\n+       _writeSuffix(value, jgen, idFromValue(value));\n    }\n \n    /*\n \n    public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId)\n        throws IOException, JsonProcessingException {\n-       _writeSuffix(value, jgen);// here standard works fine\n+       _writeSuffix(value, jgen, typeId);// here standard works fine\n    }\n \n    public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n        throws IOException, JsonProcessingException {\n-       _writeSuffix(value, jgen);// here standard works fine\n+       _writeSuffix(value, jgen, typeId);// here standard works fine\n    }\n \n    public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId)\n            throws IOException, JsonProcessingException {\n-       _writeSuffix(value, jgen);// here standard works fine\n+       _writeSuffix(value, jgen, typeId);// here standard works fine\n    }\n    \n    /*\n        jgen.writeStartObject();\n    }\n    \n-   protected final void _writeSuffix(Object value, JsonGenerator jgen)\n+   protected final void _writeSuffix(Object value, JsonGenerator jgen, String typeId)\n        throws IOException, JsonProcessingException\n    {\n        jgen.writeEndObject();\n-       jgen.writeStringField(_typePropertyName, idFromValue(value));\n+       jgen.writeStringField(_typePropertyName, typeId);\n    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestVisibleTypeId.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestVisibleTypeId.java\n         @JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.EXTERNAL_PROPERTY,\n                 property=\"type\", visible=true)\n         public ExternalIdBean2 bean = new ExternalIdBean2();\n-\n-        @JsonTypeId\n-        public String getType() { return \"SomeType\"; }\n     }\n \n     static class ExternalIdBean2 {\n         public int a = 2;\n+\n+        /* Type id property itself can not be external, as it is conceptually\n+         * part of the bean for which info is written:\n+         */\n+        @JsonTypeId\n+        public String getType() { return \"SomeType\"; }\n     }\n     \n     /*\n \n     private final ObjectMapper mapper = new ObjectMapper();\n     \n-    /*\n     public void testVisibleWithProperty() throws Exception\n     {\n         String json = mapper.writeValueAsString(new PropertyBean());\n         assertEquals(\"ExternalType\", result.bean.type);\n         assertEquals(2, result.bean.a);\n     }\n-*/\n \n     // [JACKSON-762]\n \n \n     public void testTypeIdFromExternal() throws Exception\n     {\n-        assertEquals(\"{\\\"type\\\":\\\"SomeType\\\":\\\"bean\\\":{\\\"a\\\":2}}\",\n-                mapper.writeValueAsString(new ExternalIdWrapper2()));\n+        String json = mapper.writeValueAsString(new ExternalIdWrapper2());\n+        // Implementation detail: type id written AFTER value, due to constraints\n+        assertEquals(\"{\\\"bean\\\":{\\\"a\\\":2},\\\"type\\\":\\\"SomeType\\\"}\", json);\n         \n     }\n }", "timestamp": 1328319871, "metainfo": ""}