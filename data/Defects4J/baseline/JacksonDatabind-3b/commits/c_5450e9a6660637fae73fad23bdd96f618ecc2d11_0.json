{"sha": "5450e9a6660637fae73fad23bdd96f618ecc2d11", "log": "Fix [Issue#46]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/util/RootNameLookup.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/RootNameLookup.java\n         AnnotatedClass ac = beanDesc.getClassInfo();\n         String nameStr = intr.findRootName(ac);\n         // No answer so far? Let's just default to using simple class name\n-        if (nameStr == null) {\n+        if (nameStr == null || nameStr.length() == 0) {\n             // Should we strip out enclosing class tho? For now, nope:\n             nameStr = rootType.getSimpleName();\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/TestRootName.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestRootName.java\n         public int a = 3;\n     }\n     \n+    @JsonRootName(\"\")\n+    static class RootBeanWithEmpty {\n+        public int a = 2;\n+    }\n+\n     /*\n     /**********************************************************\n     /* Unit tests\n         assertEquals(\"{\\\"rudy\\\":{\\\"a\\\":3}}\", json);\n         Bean bean = mapper.readValue(json, Bean.class);\n         assertNotNull(bean);\n+\n+        // also same with explicitly \"not defined\"...\n+        json = mapper.writeValueAsString(new RootBeanWithEmpty());\n+        assertEquals(\"{\\\"RootBeanWithEmpty\\\":{\\\"a\\\":2}}\", json);\n+        RootBeanWithEmpty bean2 = mapper.readValue(json, RootBeanWithEmpty.class);\n+        assertNotNull(bean2);\n+        assertEquals(2, bean2.a);\n     }\n \n     public void testRootViaWriterAndReader() throws Exception", "timestamp": 1344440372, "metainfo": ""}