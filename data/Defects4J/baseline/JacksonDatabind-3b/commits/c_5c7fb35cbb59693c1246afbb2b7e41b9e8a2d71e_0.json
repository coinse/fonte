{"sha": "5c7fb35cbb59693c1246afbb2b7e41b9e8a2d71e", "log": "yet more work on #124", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n         }\n         return false;\n     }\n-\n-    /**\n-     * Helper method that can be used to see if specified property has annotation\n-     * indicating that a converter is to be used for contained values.\n-     * \n-     * @param existingSerializer (optional) configured content\n-     *    serializer if one already exists.\n-     * \n-     * @since 2.2\n-     */\n-    protected JsonSerializer<?> findConvertingContentSerializer(SerializerProvider provider,\n-            BeanProperty prop, JsonSerializer<?> existingSerializer)\n-        throws JsonMappingException\n-    {\n-        final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n-        if (intr != null && prop != null) {\n-            Object convDef = intr.findSerializationContentConverter(prop.getMember());\n-            if (convDef != null) {\n-                Converter<Object,Object> conv = provider.converterInstance(prop.getMember(), convDef);\n-                TypeFactory tf = provider.getTypeFactory();\n-                JavaType converterType = tf.constructType(conv.getClass());\n-                JavaType[] params = tf.findTypeParameters(converterType, Converter.class);\n-                if (params == null || params.length != 2) {\n-                    throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n-                            +converterType);\n-                }\n-                JavaType delegateType = params[1];\n-                if (existingSerializer == null) {\n-                    existingSerializer = provider.findValueSerializer(delegateType, prop);\n-                }\n-                return new StdDelegatingSerializer(conv, delegateType, existingSerializer);\n-            }\n-        }\n-        return existingSerializer;\n-    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n     /* Post-processing\n     /**********************************************************\n      */\n-    \n-//  @Override\n+\n+    @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n         if (ser == null) {\n             ser = _serializer;\n         }\n+        // #124: May have a content converter\n+        ser = findConvertingContentSerializer(provider, property, ser);\n         if (ser == null) {\n             ser = provider.findValueSerializer(String.class, property);\n         } else if (ser instanceof ContextualSerializer) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n         if (ser == null) {\n             ser = _elementSerializer;\n         }\n+        // #124: May have a content converter\n+        ser = findConvertingContentSerializer(provider, property, ser);\n         if (ser == null) {\n             ser = provider.findValueSerializer(String.class, property);\n         } else if (ser instanceof ContextualSerializer) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n     /* Post-processing\n     /**********************************************************\n      */\n-    \n-//  @Override\n+\n+    @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n         if (ser == null) {\n             ser = _serializer;\n         }\n+        // #124: May have a content converter\n+        ser = findConvertingContentSerializer(provider, property, ser);\n         if (ser == null) {\n             ser = provider.findValueSerializer(String.class, property);\n         } else if (ser instanceof ContextualSerializer) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n         }\n         return new EnumMapSerializer(this, prop, ser);\n     }\n-    \n-//  @Override\n+\n+    @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n         if (ser == null) {\n             ser = _valueSerializer;\n         }\n+        // #124: May have a content converter\n+        ser = findConvertingContentSerializer(provider, property, ser);\n         if (ser == null) {\n             if (_staticTyping) {\n                 return withValueSerializer(property, provider.findValueSerializer(_valueType, property));\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.databind.util.Converter;\n \n /**\n  * Base class used by all standard serializers, and can also\n     protected boolean isDefaultSerializer(JsonSerializer<?> serializer) {\n         return (serializer != null && serializer.getClass().getAnnotation(JacksonStdImpl.class) != null);\n     }\n+\n+    /**\n+     * Helper method that can be used to see if specified property has annotation\n+     * indicating that a converter is to be used for contained values (contents\n+     * of structured types; array/List/Map values)\n+     * \n+     * @param existingSerializer (optional) configured content\n+     *    serializer if one already exists.\n+     * \n+     * @since 2.2\n+     */\n+    protected JsonSerializer<?> findConvertingContentSerializer(SerializerProvider provider,\n+            BeanProperty prop, JsonSerializer<?> existingSerializer)\n+        throws JsonMappingException\n+    {\n+        final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n+        if (intr != null && prop != null) {\n+            Object convDef = intr.findSerializationContentConverter(prop.getMember());\n+            if (convDef != null) {\n+                Converter<Object,Object> conv = provider.converterInstance(prop.getMember(), convDef);\n+                TypeFactory tf = provider.getTypeFactory();\n+                JavaType converterType = tf.constructType(conv.getClass());\n+                JavaType[] params = tf.findTypeParameters(converterType, Converter.class);\n+                if (params == null || params.length != 2) {\n+                    throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n+                            +converterType);\n+                }\n+                JavaType delegateType = params[1];\n+                if (existingSerializer == null) {\n+                    existingSerializer = provider.findValueSerializer(delegateType, prop);\n+                }\n+                return new StdDelegatingSerializer(conv, delegateType, existingSerializer);\n+            }\n+        }\n+        return existingSerializer;\n+    }\n }", "timestamp": 1361252522, "metainfo": ""}