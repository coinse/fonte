{"sha": "4e387c241b7c92f2e4d862f6217189e55472125e", "log": "change 'findParameter", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n     public Integer findPropertyIndex(Annotated ann) { return null; }\n \n     /**\n-     * Method for finding parameter name used in source code, and typically\n-     * not indicated by an annotation (which is ironic considering the context).\n-     * The reason for including method here is that of convenience; while\n-     * it is not part of annotation handling, it is closely related to\n-     * property introspection project. {@link AnnotationIntrospector} handling\n-     * is also one of limited number of truly pluggable extension points, making\n-     * it ideal from developer perspective; even at the expense of strict\n-     * naming consistency.\n+     * Method for finding implicit name for a property that given annotated\n+     * member (field, method, creator parameter) may represent.\n+     * This is different from explicit, annotation-based property name, in that\n+     * it is \"weak\" and does not either proof that a property exists (for example,\n+     * if visibility is not high enough), or override explicit names.\n+     * In practice this method is used to introspect optional names for creator\n+     * parameters (which may or may not be available and can not be detected\n+     * by standard databind); or to provide alternate name mangling for\n+     * fields, getters and/or setters.\n      * \n      * @since 2.4\n      */\n-    public String findParameterSourceName(AnnotatedParameter param) { return null; }\n+    public String findImplicitPropertyName(AnnotatedMember member) { return null; }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n             /* 14-Apr-2014, tatu: Need to also consider possible implicit name\n             *   (for JDK8, or via paranamer)\n             */\n-            String str = intr.findParameterSourceName(param);\n+            String str = intr.findImplicitPropertyName(param);\n             if (str != null && !str.isEmpty()) {\n                 return new PropertyName(str);\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n     }\n     \n     @Override\n-    public String findParameterSourceName(AnnotatedParameter param) {\n-        String r = _primary.findParameterSourceName(param);\n-        return (r == null) ? _secondary.findParameterSourceName(param) : r;\n+    public String findImplicitPropertyName(AnnotatedMember param) {\n+        String r = _primary.findImplicitPropertyName(param);\n+        return (r == null) ? _secondary.findImplicitPropertyName(param) : r;\n     }\n \n     // // // Serialization: class annotations\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n     {\n     \tPropertyName name = _annotationIntrospector.findNameForDeserialization(param);\n     \tif (name == null || name.isEmpty()) {\n-    \t\tString str = _annotationIntrospector.findParameterSourceName(param);\n+    \t\tString str = _annotationIntrospector.findImplicitPropertyName(param);\n     \t\tif (str != null && !str.isEmpty()) {\n     \t\t\tname = new PropertyName(str);\n     \t\t}\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n      * to use; override is needed if a custom sub-class is to be used.\n      */\n     protected POJOPropertiesCollector constructPropertyCollector(MapperConfig<?> config,\n-            AnnotatedClass ac, JavaType type,\n-            boolean forSerialization, String mutatorPrefix)\n+            AnnotatedClass ac, JavaType type, boolean forSerialization, String mutatorPrefix)\n     {\n         return new POJOPropertiesCollector(config, forSerialization, type, ac, mutatorPrefix);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializationConfig;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n-\n \n /**\n  * Helper class used to introspect features of POJO value classes\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     }\n \n     @Override\n-    public String findParameterSourceName(AnnotatedParameter param) {\n-        // not known by default (until JDK8); but leave explicit:\n+    public String findImplicitPropertyName(AnnotatedMember param) {\n+        // not known by default (until JDK8) for creators; default \n+        //\n         return null;\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n     protected void _addCreatorParam(AnnotatedParameter param)\n     {\n         // JDK 8, paranamer can give implicit name\n-        String impl = _annotationIntrospector.findParameterSourceName(param);\n+        String impl = _annotationIntrospector.findImplicitPropertyName(param);\n         if (impl == null) {\n             impl = \"\";\n         }", "timestamp": 1399528316, "metainfo": ""}