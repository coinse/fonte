{"sha": "e4708eb9bb239da20b3038dec560efeaa0ed0486", "log": "Implemented #227", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n                 }\n                 if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n                     throw ctxt.weirdStringException(name, _resolver.getEnumClass(),\n-                            \"value not one of declared Enum instance names\");\n+                            \"value not one of declared Enum instance names: \"+_resolver.getEnums());\n                 }\n             }\n             return result;\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n \n     protected HashMap<ClassKey,JsonDeserializer<?>> _classMappings = null;\n \n+    /**\n+     * Flag to help find \"generic\" enum deserializer, if one has been registered.\n+     * \n+     * @since 2.3\n+     */\n+    protected boolean _hasEnumDeserializer = false;\n+    \n     /*\n     /**********************************************************\n     /* Life-cycle, construction and configuring\n             _classMappings = new HashMap<ClassKey,JsonDeserializer<?>>();\n         }\n         _classMappings.put(key, deser);\n+        // [Issue#227]: generic Enum deserializer?\n+        if (forClass == Enum.class) {\n+            _hasEnumDeserializer = true;\n+        }\n     }\n \n     /**\n             DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n-        return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type));\n+        if (_classMappings == null) {\n+            return null;\n+        }\n+        JsonDeserializer<?> deser = _classMappings.get(new ClassKey(type));\n+        if (deser == null) {\n+            if (_hasEnumDeserializer && type.isEnum()) {\n+                deser = _classMappings.get(new ClassKey(Enum.class));\n+            }\n+        }\n+        return deser;\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/util/EnumResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/EnumResolver.java\n         return _enums[index];\n     }\n \n+    public List<T> getEnums()\n+    {\n+        ArrayList<T> enums = new ArrayList<T>(_enums.length);\n+        for (T e : _enums) {\n+            enums.add(e);\n+        }\n+        return enums;\n+    }\n+    \n     public Class<T> getEnumClass() { return _enumClass; }\n \n     public int lastValidIndex() { return _enums.length-1; }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n package com.fasterxml.jackson.databind.deser;\n \n+import java.io.IOException;\n import java.util.EnumMap;\n import java.util.EnumSet;\n import java.util.Map;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n \n @SuppressWarnings(\"serial\")\n public class TestEnumDeserialization\n     /**\n      * Alternative version that annotates which deserializer to use\n      */\n-    @JsonDeserialize(using=DummySerializer.class)\n+    @JsonDeserialize(using=DummyDeserializer.class)\n     enum AnnotatedTestEnum {\n         JACKSON, RULES, OK;\n     }\n \n-    public static class DummySerializer extends StdDeserializer<Object>\n-    {\n-        public DummySerializer() { super(Object.class); }\n+    public static class DummyDeserializer extends StdDeserializer<Object>\n+    {\n+        public DummyDeserializer() { super(Object.class); }\n         @Override\n         public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n         {\n         }\n     }\n \n+    public static class LcEnumDeserializer extends StdDeserializer<TestEnum>\n+    {\n+        public LcEnumDeserializer() { super(TestEnum.class); }\n+        @Override\n+        public TestEnum deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n+        {\n+            return TestEnum.valueOf(jp.getText().toUpperCase());\n+        }\n+    }\n+    \n     protected enum EnumWithCreator {\n         A, B;\n \n     // [Issue#141]: allow mapping of empty String into null\n     public void testEnumsWithEmpty() throws Exception\n     {\n-       final ObjectMapper m = new ObjectMapper();\n-       m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);\n-       TestEnum result = m.readValue(\"\\\"\\\"\", TestEnum.class);\n+       final ObjectMapper mapper = new ObjectMapper();\n+       mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);\n+       TestEnum result = mapper.readValue(\"\\\"\\\"\", TestEnum.class);\n        assertNull(result);\n     }\n \n+    public void testGenericEnumDeserialization() throws Exception\n+    {\n+       final ObjectMapper mapper = new ObjectMapper();\n+       SimpleModule module = new SimpleModule(\"foobar\");\n+       module.addDeserializer(Enum.class, new LcEnumDeserializer());\n+       mapper.registerModule(module);\n+       // not sure this is totally safe but...\n+       assertEquals(TestEnum.JACKSON, mapper.readValue(quote(\"jackson\"), TestEnum.class));\n+    }\n }", "timestamp": 1370563630, "metainfo": ""}