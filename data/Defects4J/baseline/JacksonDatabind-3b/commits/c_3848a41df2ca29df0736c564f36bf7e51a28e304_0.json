{"sha": "3848a41df2ca29df0736c564f36bf7e51a28e304", "log": "Further changes to use PropertyName (with namespace support)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n      * for XML compatibility purposes) for given class, if one\n      * is defined. Returns null if no declaration found; can return\n      * explicit empty String, which is usually ignored as well as null.\n-     */\n-    public String findRootName(AnnotatedClass ac) {\n+     *<p> \n+     * NOTE: method signature changed in 2.1, to return {@link PropertyName}\n+     * instead of String.\n+     */\n+    public PropertyName findRootName(AnnotatedClass ac) {\n         return null;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/PropertyName.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/PropertyName.java\n \n     public PropertyName(String simpleName, String namespace)\n     {\n-        _simpleName = simpleName;\n+        _simpleName = (simpleName == null) ? \"\" : simpleName;\n         _namespace = namespace;\n     }\n \n     }\n \n     public String getNamespace() {\n-        return null;\n+        return _namespace;\n     }\n \n+    public boolean hasSimpleName() {\n+        return _simpleName.length() > 0;\n+    }\n+\n+    public boolean hasNamespace() {\n+        return _namespace != null;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Std method overrides\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n      */\n \n     @Override\n-    public String findRootName(AnnotatedClass ac)\n-    {\n-        String name1 = _primary.findRootName(ac);\n+    public PropertyName findRootName(AnnotatedClass ac)\n+    {\n+        PropertyName name1 = _primary.findRootName(ac);\n         if (name1 == null) {\n             return _secondary.findRootName(ac);\n-        } else if (name1.length() > 0) {\n+        }\n+        if (name1.hasSimpleName()) {\n             return name1;\n         }\n         // name1 is empty; how about secondary?\n-        String name2 = _secondary.findRootName(ac);\n+        PropertyName name2 = _secondary.findRootName(ac);\n         return (name2 == null) ? name1 : name2;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n      */\n \n     @Override\n-    public String findRootName(AnnotatedClass ac)\n+    public PropertyName findRootName(AnnotatedClass ac)\n     {\n         JsonRootName ann = ac.getAnnotation(JsonRootName.class);\n-        return (ann == null) ? null : ann.value();\n+        if (ann == null) {\n+            return null;\n+        }\n+        return new PropertyName(ann.value());\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/util/RootNameLookup.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/RootNameLookup.java\n         BeanDescription beanDesc = config.introspectClassAnnotations(rootType);\n         AnnotationIntrospector intr = config.getAnnotationIntrospector();\n         AnnotatedClass ac = beanDesc.getClassInfo();\n-        String nameStr = intr.findRootName(ac);\n+        PropertyName pname = intr.findRootName(ac);\n+        String nameStr;\n         // No answer so far? Let's just default to using simple class name\n-        if (nameStr == null || nameStr.length() == 0) {\n+        if (pname == null || !pname.hasSimpleName()) {\n             // Should we strip out enclosing class tho? For now, nope:\n             nameStr = rootType.getSimpleName();\n+        } else {\n+            nameStr = pname.getSimpleName();\n         }\n         SerializedString name = new SerializedString(nameStr);\n         _rootNames.put(key, name);", "timestamp": 1346876294, "metainfo": ""}