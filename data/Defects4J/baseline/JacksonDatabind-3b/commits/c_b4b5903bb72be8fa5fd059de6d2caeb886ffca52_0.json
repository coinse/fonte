{"sha": "b4b5903bb72be8fa5fd059de6d2caeb886ffca52", "log": "Realizing that [JACKSON-890] has been fixed (markes as such). Also, adding a failing unit test for Unwrapped+Creator combo", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n         }\n         JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n         SettableBeanProperty backProp = valueDeser.findBackReference(refName);\n-\n-        // 04-Jul-2013, tatu: Before 'findBackReference()' in 'JsonDeserializer' had to cast;\n-        //   became unwieldy with delegating deserializer etc\n-        /*\n-        if (valueDeser instanceof BeanDeserializerBase) {\n-            backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n-        } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n-            JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n-            if (!(contentDeser instanceof BeanDeserializerBase)) {\n-                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n-                throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n-                        +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n-                        +\" (instead it's of type \"+deserName+\")\");\n-            }\n-            backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n-            isContainer = true;\n-        } else if (valueDeser instanceof AbstractDeserializer) {\n-            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n-        } else {\n-            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n-                    +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n-                    +valueDeser.getClass().getName());\n-        }\n-        */\n         if (backProp == null) {\n             throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                     +prop.getType());\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestBackRefsWithPolymorphic.java\n+package com.fasterxml.jackson.databind.struct;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+// Unit test for [JACKSON-890]\n+public class TestBackRefsWithPolymorphic extends BaseMapTest\n+{\n+    private final String CLASS_NAME = getClass().getName();\n+\n+    // NOTE: order is arbitrary, test is fragile... has to work for now\n+    private final String JSON =\n+        \"{\\\"@class\\\":\\\"\"+CLASS_NAME+\"$PropertySheetImpl\\\",\\\"id\\\":0,\\\"properties\\\":{\\\"p1name\\\":{\\\"@class\\\":\"\n+            +\"\\\"\" +CLASS_NAME+ \"$StringPropertyImpl\\\",\\\"id\\\":0,\\\"name\\\":\\\"p1name\\\",\\\"value\\\":\\\"p1value\\\"},\"\n+            +\"\\\"p2name\\\":{\\\"@class\\\":\\\"\"+CLASS_NAME+\"$StringPropertyImpl\\\",\\\"id\\\":0,\"\n+            +\"\\\"name\\\":\\\"p2name\\\",\\\"value\\\":\\\"p2value\\\"}}}\";\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public void testDeserialize() throws IOException\n+    {\n+        PropertySheet input = MAPPER.readValue(JSON, PropertySheet.class);\n+        assertEquals(JSON, MAPPER.writeValueAsString(input));\n+    }\n+\n+    public void testSerialize() throws IOException\n+    {\n+        PropertySheet sheet = new PropertySheetImpl();\n+\n+        sheet.addProperty(new StringPropertyImpl(\"p1name\", \"p1value\"));\n+        sheet.addProperty(new StringPropertyImpl(\"p2name\", \"p2value\"));\n+        String actual = MAPPER.writeValueAsString(sheet);\n+        assertEquals(JSON, actual);\n+    }\n+\n+    @JsonPropertyOrder(alphabetic=true)\n+    interface Entity\n+    {\n+        @JsonIgnore String getEntityType();\n+        Long getId();\n+        void setId(Long id);\n+        @JsonIgnore void setPersistable();\n+    }\n+\n+    @JsonDeserialize(as = NestedPropertySheetImpl.class)\n+    interface NestedPropertySheet\n+        extends Property<PropertySheet>\n+    {\n+        @Override PropertySheet getValue();\n+        void setValue(PropertySheet propertySheet);\n+    }\n+\n+    @JsonDeserialize(as = AbstractProperty.class)\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS,\n+        include  = JsonTypeInfo.As.PROPERTY,\n+        property = \"@class\")\n+    interface Property<T> extends Entity\n+    {\n+        String getName();\n+        PropertySheet getParentSheet();\n+        T getValue();\n+        void setName(String name);\n+        void setParentSheet(PropertySheet parentSheet);\n+    }\n+\n+    @JsonDeserialize(as = PropertySheetImpl.class)\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS,\n+        include  = JsonTypeInfo.As.PROPERTY,\n+        property = \"@class\")\n+    @SuppressWarnings(\"rawtypes\")\n+    interface PropertySheet extends Entity\n+    {\n+        void addProperty(Property property);\n+        Map<String, Property> getProperties();\n+        void setProperties(Map<String, Property> properties);\n+    }\n+\n+    @JsonDeserialize(as = StringPropertyImpl.class)\n+    interface StringProperty\n+        extends Property<String>\n+    {\n+        @Override String getValue();\n+        void setValue(String value);\n+    }\n+\n+    static class AbstractEntity implements Entity\n+    {\n+        private long id;\n+\n+        @Override public String getEntityType() {\n+            return \"\";\n+        }\n+\n+        @Override public Long getId() {\n+            return id;\n+        }\n+\n+        @Override public void setId(Long id)\n+        {\n+            this.id = id;\n+        }\n+\n+        @Override public void setPersistable() { }\n+    }\n+\n+    abstract static class AbstractProperty<T>\n+        extends AbstractEntity\n+        implements Property<T>\n+    {\n+        private String        m_name;\n+        private PropertySheet m_parentSheet;\n+\n+        protected AbstractProperty() { }\n+\n+        protected AbstractProperty(String name) {\n+            m_name = name;\n+        }\n+\n+        @Override public String getName() {\n+            return m_name;\n+        }\n+\n+        @JsonBackReference(\"propertySheet-properties\")\n+        @Override public PropertySheet getParentSheet() {\n+            return m_parentSheet;\n+        }\n+\n+        @Override public void setName(String name) {\n+            m_name = name;\n+        }\n+\n+        @Override public void setParentSheet(PropertySheet parentSheet) {\n+            m_parentSheet = parentSheet;\n+        }\n+    }\n+\n+    @JsonPropertyOrder(alphabetic=true)\n+    static class NestedPropertySheetImpl\n+        extends AbstractProperty<PropertySheet>\n+        implements NestedPropertySheet\n+    {\n+        private PropertySheet m_propertySheet;\n+\n+        protected NestedPropertySheetImpl(String name,\n+                PropertySheet propertySheet)\n+        {\n+            super(name);\n+            m_propertySheet = propertySheet;\n+        }\n+\n+        NestedPropertySheetImpl() { }\n+\n+        @Override public PropertySheet getValue() {\n+            return m_propertySheet;\n+        }\n+\n+        @Override public void setValue(PropertySheet propertySheet) {\n+            m_propertySheet = propertySheet;\n+        }\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    static class PropertySheetImpl\n+        extends AbstractEntity\n+        implements PropertySheet\n+    {\n+        private Map<String, Property> m_properties;\n+\n+        @Override public void addProperty(Property property)\n+        {\n+            if (m_properties == null) {\n+                m_properties = new TreeMap<String, Property>();\n+            }\n+            property.setParentSheet(this);\n+            m_properties.put(property.getName(), property);\n+        }\n+\n+        @JsonDeserialize(as = TreeMap.class,\n+            keyAs     = String.class,\n+            contentAs = Property.class)\n+        @JsonManagedReference(\"propertySheet-properties\")\n+        @Override public Map<String, Property> getProperties() {\n+            return m_properties;\n+        }\n+\n+        @Override public void setProperties(Map<String, Property> properties) {\n+            m_properties = properties;\n+        }\n+    }\n+\n+    static class StringPropertyImpl\n+        extends AbstractProperty<String>\n+        implements StringProperty\n+    {\n+        private String m_value;\n+\n+        public StringPropertyImpl(String name, String value) {\n+            super(name);\n+            m_value = value;\n+        }\n+\n+        StringPropertyImpl() { }\n+\n+        @Override public String getValue() {\n+            return m_value;\n+        }\n+\n+        @Override public void setValue(String value) {\n+            m_value = value;\n+        }\n+    }\n+\n+    static class YetAnotherClass extends StringPropertyImpl { }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestUnwrappedWithCreator.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestUnwrappedWithCreator extends BaseMapTest\n+{\n+    class JAddress {\n+        private String address;\n+        private String city;\n+        private String state;\n+         \n+        @JsonCreator\n+        public JAddress(\n+                @JsonProperty(\"address1\") String address,\n+                @JsonProperty(\"city\") String city,\n+                @JsonProperty(\"state\") String state\n+        ){\n+            this.address = address;\n+            this.city = city;\n+            this.state = state;\n+        }\n+         \n+        public String getAddress1() { return address; }\n+        public String getCity() { return city; }\n+        public String getState() { return state; }\n+    }\n+\n+    class JPerson {\n+        private String name;\n+        private JAddress address;\n+        private String alias;\n+         \n+        @JsonCreator\n+        public JPerson(\n+        @JsonProperty(\"name\") String name,\n+        @JsonUnwrapped JAddress address,\n+        @JsonProperty(\"alias\") String alias\n+        ) {\n+            this.name = name;\n+            this.address = address;\n+            this.alias = alias;\n+        }\n+         \n+        public String getName() {\n+            return name;\n+        }\n+         \n+        @JsonUnwrapped public JAddress getAddress() {\n+            return address;\n+        }\n+         \n+        public String getAlias() {\n+            return alias;\n+        }\n+    }\n+         \n+    public void testReadWriteJson() throws Exception\n+    {\n+        JPerson person = new JPerson(\"MyName\", new JAddress(\"main street\", \"springfield\", null), null);\n+        ObjectMapper mapper = new ObjectMapper();\n+        String json = mapper.writeValueAsString(person);\n+        System.out.println(json);\n+        JPerson obj = mapper.readValue(json, JPerson.class);\n+        assertNotNull(obj);\n+    }\n+}", "timestamp": 1374010493, "metainfo": ""}