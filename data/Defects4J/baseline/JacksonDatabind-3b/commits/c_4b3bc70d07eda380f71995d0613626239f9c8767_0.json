{"sha": "4b3bc70d07eda380f71995d0613626239f9c8767", "log": "Adding more testing to [Issue#40]", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java\n         }\n \n         public Iterable<String> getValues() { return values; }\n-    }\n-\n-    // [issue#40]: Allow serialization 'as POJO' (resulting in JSON Object) \n-    @JsonPropertyOrder({ \"size\", \"value\" })\n-    @JsonFormat(shape=Shape.OBJECT)\n-    @JsonIgnoreProperties({ \"empty\" }) // from 'isEmpty()'\n-    static class CollectionAsPOJO\n-        extends ArrayList<String>\n-    {\n-        private static final long serialVersionUID = 1L;\n-\n-        @JsonProperty(\"size\")\n-        public int foo() { return size(); }\n-        \n-        public String[] getValues() {\n-            return toArray(new String[size()]);\n-        }\n     }\n \n     /*\n         assertEquals(\"{\\\"values\\\":[\\\"value\\\"]}\",\n                 MAPPER.writeValueAsString(new BeanWithIterable()));\n     }\n-\n-    // [Issue#40]\n-    public void testListAsObject() throws Exception\n-    {\n-        CollectionAsPOJO list = new CollectionAsPOJO();\n-        list.add(\"a\");\n-        list.add(\"b\");\n-        String json = MAPPER.writeValueAsString(list);\n-        assertEquals(\"{\\\"size\\\":2,\\\"values\\\":[\\\"a\\\",\\\"b\\\"]}\", json);\n-    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestFormatForCollections.java\n+package com.fasterxml.jackson.databind.struct;\n+\n+import java.util.ArrayList;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestFormatForCollections extends BaseMapTest\n+{\n+    // [issue#40]: Allow serialization 'as POJO' (resulting in JSON Object) \n+    @JsonPropertyOrder({ \"size\", \"value\" })\n+    @JsonFormat(shape=Shape.OBJECT)\n+    @JsonIgnoreProperties({ \"empty\" }) // from 'isEmpty()'\n+    static class CollectionAsPOJO\n+        extends ArrayList<String>\n+    {\n+        private static final long serialVersionUID = 1L;\n+\n+        @JsonProperty(\"size\")\n+        public int foo() { return size(); }\n+        \n+        public String[] getValues() {\n+            return toArray(new String[size()]);\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    private final static ObjectMapper MAPPER = new ObjectMapper();    \n+\n+\n+    // [Issue#40]\n+    public void testListAsObject() throws Exception\n+    {\n+        // First, serialize a \"POJO-List\"\n+        CollectionAsPOJO list = new CollectionAsPOJO();\n+        list.add(\"a\");\n+        list.add(\"b\");\n+        String json = MAPPER.writeValueAsString(list);\n+        assertEquals(\"{\\\"size\\\":2,\\\"values\\\":[\\\"a\\\",\\\"b\\\"]}\", json);\n+\n+        // and then bring it back!\n+        CollectionAsPOJO result = MAPPER.readValue(json, CollectionAsPOJO.class);\n+        assertEquals(2, result.size());\n+    }\n+\n+}", "timestamp": 1344047678, "metainfo": ""}