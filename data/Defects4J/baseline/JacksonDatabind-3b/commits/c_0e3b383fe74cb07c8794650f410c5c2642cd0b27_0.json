{"sha": "0e3b383fe74cb07c8794650f410c5c2642cd0b27", "log": "Removed last remaining unnecessary (pre-2.0) @since tags", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanPropertyDefinition.java\n  * These instances are created before actual {@link BeanProperty}\n  * instances are created, i.e. they are used earlier in the process\n  * flow.\n- *\n- * @since 1.9\n  */\n public abstract class BeanPropertyDefinition\n     implements Named\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n      * of an unrecognized property.\n      * \n      * @return True if there was a configured problem handler that was able to handle the\n-     *   proble\n-     * \n-     * @since 1.5\n+     *   problem\n      */\n     public abstract boolean handleUnknownProperty(JsonParser jp, JsonDeserializer<?> deser, Object instanceOrClass, String propName)\n         throws IOException, JsonProcessingException;\n      */\n     public abstract JsonMappingException mappingException(Class<?> targetClass);\n \n-    /**\n-     * @since 1.9\n-     */\n     public abstract JsonMappingException mappingException(Class<?> targetClass, JsonToken t);\n     \n     /**\n      * Helper method for constructing generic mapping exception with specified\n      * message and current location information\n-     * \n-     * @since 1.7\n      */\n     public JsonMappingException mappingException(String message)\n     {\n     /**\n      * Helper method for constructing exception to indicate that given\n      * type id (parsed from JSON) could not be converted to a Java type.\n-     * \n-     * @since 1.5\n      */\n     public abstract JsonMappingException unknownTypeException(JavaType baseType, String id);\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializerProvider.java\n \n     /**\n      * Method that can be used to try find expected root name for given type\n-     * \n-     * @since 1.9\n      */\n     public abstract SerializedString findExpectedRootName(DeserializationConfig config, JavaType type)\n         throws JsonMappingException;\n--- a/src/main/java/com/fasterxml/jackson/databind/HandlerInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/HandlerInstantiator.java\n  *<p>\n  * Care has to be taken to ensure that if instance returned is shared, it will\n  * be thread-safe; caller will not synchronize access to returned instances.\n- * \n- * @since 1.8\n  */\n public abstract class HandlerInstantiator\n {\n \n     /**\n      * Method called to construct an instance of ValueInstantiator of specified type.\n-     * \n-     * @since 1.9\n      */\n     public ValueInstantiator valueInstantiatorInstance(MapperConfig<?> config,\n             Annotated annotated, Class<? extends ValueInstantiator> resolverClass) {\n--- a/src/main/java/com/fasterxml/jackson/databind/InjectableValues.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/InjectableValues.java\n /**\n  * Abstract class that defines API for objects that provide value to\n  * \"inject\" during deserialization. An instance of this object\n- * \n- * @since 1.9\n  */\n public abstract class InjectableValues\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/KeyDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/KeyDeserializer.java\n      *<p>\n      * Specifically, this class is to be used as the marker for\n      * annotation {@link com.fasterxml.jackson.databind.annotation.JsonDeserialize}.\n-     *\n-     * @since 1.3\n      */\n     public abstract static class None\n         extends KeyDeserializer { }\n--- a/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n  * Iterator exposed by {@link ObjectMapper} when binding sequence of\n  * objects. Extension is done to allow more convenient exposing of\n  * {@link IOException} (which basic {@link Iterator} does not expose)\n- * \n- * @since 1.8\n  */\n public class MappingIterator<T> implements Iterator<T>\n {\n         this(type, jp, ctxt, deser, true, null);\n     }\n     \n-    /**\n-     * @since 1.9.3\n-     */\n     @SuppressWarnings(\"unchecked\")\n     protected MappingIterator(JavaType type, JsonParser jp, DeserializationContext ctxt, JsonDeserializer<?> deser,\n             boolean closeParser, Object valueToUpdate)\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n \n     /**\n      * Method for reading sequence of Objects from parser stream.\n-     * \n-     * @since 1.8\n      */\n     public <T> MappingIterator<T> readValues(Reader src)\n         throws IOException, JsonProcessingException\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier.java\n  * Default method implementations are \"no-op\"s, meaning that methods are implemented\n  * but have no effect; this is mostly so that new methods can be added in later\n  * versions.\n- * \n- * @since 1.7\n  */\n public abstract class BeanDeserializerModifier\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ContextualKeyDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ContextualKeyDeserializer.java\n  * handling Map keys of supported type. This can be useful\n  * for key deserializers that can be configured by annotations, or should otherwise\n  * have differing behavior depending on what kind of Map property keys are being deserialized.\n- * \n- * @since 1.8\n  */\n public interface ContextualKeyDeserializer\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n \n         public abstract boolean hasAbstractTypeResolvers();\n \n-        /**\n-         * @since 1.9\n-         */\n         public abstract boolean hasValueInstantiators();\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiators.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiators.java\n  * usually to support custom value types with alternate constructors, or\n  * which need specified post-processing after construction but before\n  * binding data.\n- * \n- * @since 1.9\n  */\n public interface ValueInstantiators\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n /**\n  * Deserializer that can build instances of {@link JsonNode} from any\n  * JSON content, using appropriate {@link JsonNode} type.\n- * \n- * @since 1.9 (moved from higher-level package)\n  */\n public class JsonNodeDeserializer\n     extends BaseNodeDeserializer<JsonNode>\n--- a/src/main/java/com/fasterxml/jackson/databind/exc/UnrecognizedPropertyException.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/exc/UnrecognizedPropertyException.java\n  * to indicate problems due to encountering a JSON property that could\n  * not be mapped to an Object property (via getter, constructor argument\n  * or field).\n- * \n- * @since 1.6\n  */\n public class UnrecognizedPropertyException\n     extends JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/JodaSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/JodaSerializers.java\n         }\n     }\n  \n-    /**\n-     * \n-     * @since 1.5\n-     */\n     public final static class LocalDateTimeSerializer\n         extends JodaSerializer<LocalDateTime>\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n     /**\n      * Method that constructs a new instance with settings (annotations, parameter annotations)\n      * of this instance, but with different physical {@link Method}.\n-     * \n-     * @since 1.7\n      */\n     public AnnotatedMethod withMethod(Method m)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n /**\n  * Helper class used for aggregating information about a single\n  * potential POJO property.\n- * \n- * @since 1.9\n  */\n public class POJOPropertyBuilder\n     extends BeanPropertyDefinition", "timestamp": 1327298900, "metainfo": ""}