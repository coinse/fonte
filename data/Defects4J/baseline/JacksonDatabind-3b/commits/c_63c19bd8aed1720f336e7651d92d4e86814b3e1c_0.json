{"sha": "63c19bd8aed1720f336e7651d92d4e86814b3e1c", "log": "Added test to verify that [JACKSON-882] does not occur with 2.1", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n import java.io.*;\n import java.util.*;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n import com.fasterxml.jackson.core.*;\n+\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n             y = y0;\n         }\n     }\n+\n+    // [JACKSON-882]\n+    public static class CustomKey {\n+        private final int id;\n+\n+        public CustomKey(int id) {this.id = id;}\n+\n+        public int getId() { return id; }\n+    }\n+    \n+    public static class Model\n+    {\n+        protected final Map<CustomKey, String> map;\n+\n+        @JsonCreator\n+        public Model(@JsonProperty(\"map\") @JsonDeserialize(keyUsing = CustomKeyDeserializer.class) Map<CustomKey, String> map)\n+        {\n+            this.map = new HashMap<CustomKey, String>(map);\n+        }\n+\n+        @JsonProperty\n+        @JsonSerialize(keyUsing = CustomKeySerializer.class)\n+        public Map<CustomKey, String> getMap() {\n+            return map;\n+        }\n+    }\n+     \n+    static class CustomKeySerializer extends JsonSerializer<CustomKey> {\n+        @Override\n+        public void serialize(CustomKey value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n+            jgen.writeFieldName(String.valueOf(value.getId()));\n+        }\n+    }\n+\n+    static class CustomKeyDeserializer extends KeyDeserializer {\n+        @Override\n+        public CustomKey deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+            return new CustomKey(Integer.valueOf(key));\n+        }\n+    }\n     \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n \n+    final ObjectMapper MAPPER = new ObjectMapper();\n+    \n     public void testCustomBeanDeserializer() throws Exception\n     {\n-\n-        final ObjectMapper map = new ObjectMapper();\n         String json = \"{\\\"beans\\\":[{\\\"c\\\":{\\\"a\\\":10,\\\"b\\\":20},\\\"d\\\":\\\"hello, tatu\\\"}]}\";\n-        TestBeans beans = map.readValue(json, TestBeans.class);\n+        TestBeans beans = MAPPER.readValue(json, TestBeans.class);\n \n         assertNotNull(beans);\n         List<TestBean> results = beans.beans;\n \n         json = \"{\\\"beans\\\":[{\\\"c\\\":{\\\"b\\\":3,\\\"a\\\":-4},\\\"d\\\":\\\"\\\"},\"\n             +\"{\\\"d\\\":\\\"abc\\\", \\\"c\\\":{\\\"b\\\":15}}]}\";\n-        beans = map.readValue(json, TestBeans.class);\n+        beans = MAPPER.readValue(json, TestBeans.class);\n \n         assertNotNull(beans);\n         results = beans.beans;\n         assertEquals(3, imm.x);\n         assertEquals(7, imm.y);\n     }\n+\n+    public void testIssue882() throws Exception\n+    {\n+        Model original = new Model(Collections.singletonMap(new CustomKey(123), \"test\"));\n+        String json = MAPPER.writeValueAsString(original);\n+        Model deserialized = MAPPER.readValue(json, Model.class);\n+        assertNotNull(deserialized);\n+        assertNotNull(deserialized.map);\n+        assertEquals(1, deserialized.map.size());\n+    }\n }", "timestamp": 1357688764, "metainfo": ""}