{"sha": "3ff534413a5cd24438082c49ccc062bc252a6009", "log": "cleanup of eclipse warnings", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DatabindContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DatabindContext.java\n import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+\n import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n     /**********************************************************\n      */\n \n-    public abstract ObjectIdGenerator<?> objectIdGeneratorInstance(Annotated annotated,\n+    public ObjectIdGenerator<?> objectIdGeneratorInstance(Annotated annotated,\n             ObjectIdInfo objectIdInfo)\n-        throws JsonMappingException;\n-\n+        throws JsonMappingException\n+    {\n+        Class<?> implClass = objectIdInfo.getGeneratorType();\n+        final MapperConfig<?> config = getConfig();\n+        HandlerInstantiator hi = config.getHandlerInstantiator();\n+        ObjectIdGenerator<?> gen = (hi == null) ? null : hi.objectIdGeneratorInstance(config, annotated, implClass);\n+        if (gen == null) {\n+            gen = (ObjectIdGenerator<?>) ClassUtil.createInstance(implClass,\n+                    config.canOverrideAccessModifiers());\n+        }\n+        return gen.forScope(objectIdInfo.getScope());\n+    }\n+    \n     /**\n      * Helper method to use to construct a {@link Converter}, given a definition\n      * that may be either actual converter instance, or Class for instantiating one.\n      * @since 2.2\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public final Converter<Object,Object> converterInstance(Annotated annotated,\n+    public Converter<Object,Object> converterInstance(Annotated annotated,\n             Object converterDef)\n         throws JsonMappingException\n     {\n             throw new IllegalStateException(\"AnnotationIntrospector returned Class \"\n                     +converterClass.getName()+\"; expected Class<Converter>\");\n         }\n-        MapperConfig<?> config = getConfig();\n+        final MapperConfig<?> config = getConfig();\n         HandlerInstantiator hi = config.getHandlerInstantiator();\n         Converter<?,?> conv = (hi == null) ? null : hi.converterInstance(config, annotated, converterClass);\n         if (conv == null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n-import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.introspect.Annotated;\n-import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.*;\n import com.fasterxml.jackson.databind.ser.impl.*;\n import com.fasterxml.jackson.databind.ser.std.NullSerializer;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n-import com.fasterxml.jackson.databind.util.Converter;\n import com.fasterxml.jackson.databind.util.RootNameLookup;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n      * We will also consider Shape transformations (read from Array) at this\n      * point, since it may come from either Class definition or property.\n      */\n-//  @Override\n+    @Override\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n      * General version used when handling needs more advanced\n      * features.\n      */\n+    @Override\n     public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n      * due to non-guaranteed ordering possibly some other properties\n      * as well.\n      */\n+    @Override\n     protected final Object _deserializeUsingPropertyBased(final JsonParser jp,\n             final DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n import java.util.LinkedHashMap;\n \n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+\n import com.fasterxml.jackson.core.JsonParser;\n+\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n-import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n-import com.fasterxml.jackson.databind.util.Converter;\n \n /**\n  * Complete {@link DeserializationContext} implementation that adds\n         _objectIds.put(key, entry);\n         return entry;\n     }\n-\n-    @Override\n-    public ObjectIdGenerator<?> objectIdGeneratorInstance(Annotated annotated,\n-            ObjectIdInfo objectIdInfo)\n-        throws JsonMappingException\n-    {\n-        Class<?> implClass = objectIdInfo.getGeneratorType();\n-        HandlerInstantiator hi = _config.getHandlerInstantiator();\n-        ObjectIdGenerator<?> gen = (hi == null) ? null : \n-            hi.objectIdGeneratorInstance(_config, annotated, implClass);\n-        if (gen == null) {\n-            gen = (ObjectIdGenerator<?>) ClassUtil.createInstance(implClass,\n-                    _config.canOverrideAccessModifiers());\n-        }\n-        return gen.forScope(objectIdInfo.getScope());\n-    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n      * when it is known for which property deserializer is needed\n      * for.\n      */\n-//    @Override\n+    @Override\n     public CollectionDeserializer createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java\n     /**\n      * @deprecated Since 2.2 -- use {@link #find} instead.\n      */\n+    @Deprecated\n     public static StdDeserializer<?>[] all()\n     {\n         return  new StdDeserializer[] {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n      * Method called to finalize setup of this deserializer,\n      * when it is known for which property deserializer is needed for.\n      */\n-//  @Override\n+    @Override\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n     @Override\n     public boolean isCachable() { return true; }\n     \n-//    @Override\n+    @Override\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n         _serializers.put(XMLGregorianCalendar.class, new XMLGregorianCalendarSerializer());\n         _serializers.put(QName.class, tss);\n     }\n-    \n-//    @Override\n+\n+    @Override\n     public Collection<Map.Entry<Class<?>,JsonSerializer<?>>> provide() {\n         return _serializers.entrySet();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n     /**\n      * Accessor for name used for external representation (in JSON).\n      */\n-//  @Override // from Named\n+    @Override // from Named\n     public abstract String getName();\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java\n          * \n          * @param ann Annotations to use for determining minimum visibility levels\n          */\n-\tpublic Std(JsonAutoDetect ann)\n-\t{\n-\t    // let's combine checks for enabled/disabled, with minimimum level checks:\n-\t    _getterMinLevel = ann.getterVisibility();\n+        public Std(JsonAutoDetect ann)\n+        {\n+            // let's combine checks for enabled/disabled, with minimimum level checks:\n+            _getterMinLevel = ann.getterVisibility();\n             _isGetterMinLevel = ann.isGetterVisibility();\n             _setterMinLevel = ann.setterVisibility();\n             _creatorMinLevel = ann.creatorVisibility();\n             _fieldMinLevel = ann.fieldVisibility();\n-\t}\n-\n-\t/**\n-\t * Constructor that allows directly specifying minimum visibility levels to use\n-\t */\n-\tpublic Std(Visibility getter, Visibility isGetter, Visibility setter, Visibility creator, Visibility field)\n+        }\n+\n+        /**\n+         * Constructor that allows directly specifying minimum visibility levels to use\n+         */\n+        public Std(Visibility getter, Visibility isGetter, Visibility setter, Visibility creator, Visibility field)\n         {\n-\t    _getterMinLevel = getter;\n-\t    _isGetterMinLevel = isGetter;\n-\t    _setterMinLevel = setter;\n-\t    _creatorMinLevel = creator;\n-\t    _fieldMinLevel = field;\n-        }\n-\t\t\n-\t/**\n-\t * Costructor that will assign given visibility value for all\n-\t * properties.\n-\t * \n-\t * @param v level to use for all property types\n-\t */\n+            _getterMinLevel = getter;\n+            _isGetterMinLevel = isGetter;\n+            _setterMinLevel = setter;\n+            _creatorMinLevel = creator;\n+            _fieldMinLevel = field;\n+        }\n+\n+        /**\n+         * Costructor that will assign given visibility value for all\n+         * properties.\n+         * \n+         * @param v level to use for all property types\n+         */\n         public Std(Visibility v)\n         {\n             // typically we shouldn't get this value; but let's handle it if we do:\n             }\n         }\n \n-\t/*\n+        /*\n         /********************************************************\n-\t/* Builder/fluent methods for instantiating configured\n-\t/* instances\n-\t/********************************************************\n-\t */\n-\n-//      @Override\n-\tpublic Std with(JsonAutoDetect ann)\n-\t{\n-            Std curr = this;\n-\t    if (ann != null) {\n+        /* Builder/fluent methods for instantiating configured\n+        /* instances\n+        /********************************************************\n+         */\n+\n+    @Override\n+    public Std with(JsonAutoDetect ann)\n+    {\n+        Std curr = this;\n+        if (ann != null) {\n     \t    curr = curr.withGetterVisibility(ann.getterVisibility());\n     \t    curr = curr.withIsGetterVisibility(ann.isGetterVisibility());\n                 curr  = curr.withSetterVisibility(ann.setterVisibility());\n \t    return curr;\n \t}\n \n-//      @Override\n-\tpublic Std with(Visibility v)\n-\t{\n-\t    if (v == Visibility.DEFAULT) {\n-\t        return DEFAULT;\n-\t    }\n-\t    return new Std(v);\n-\t}\n-\n-//      @Override\n-\tpublic Std withVisibility(PropertyAccessor method, Visibility v)\n-\t{\n+    @Override\n+    public Std with(Visibility v)\n+    {\n+        if (v == Visibility.DEFAULT) {\n+            return DEFAULT;\n+        }\n+        return new Std(v);\n+    }\n+\n+    @Override\n+    public Std withVisibility(PropertyAccessor method, Visibility v)\n+    {\n \t    switch (method) {\n \t    case GETTER:\n \t        return withGetterVisibility(v);\n \t    }\n \t}\n \t\n-//      @Override\n+    @Override\n \tpublic Std withGetterVisibility(Visibility v) {\n \t    if (v == Visibility.DEFAULT)  v = DEFAULT._getterMinLevel;\n             if (_getterMinLevel == v) return this;\n \t    return new Std(v, _isGetterMinLevel, _setterMinLevel, _creatorMinLevel, _fieldMinLevel);\n \t}\n \n-//      @Override\n+    @Override\n         public Std withIsGetterVisibility(Visibility v) {\n             if (v == Visibility.DEFAULT)  v = DEFAULT._isGetterMinLevel;\n             if (_isGetterMinLevel == v) return this;\n             return new Std(_getterMinLevel, v, _setterMinLevel, _creatorMinLevel, _fieldMinLevel);\n         }\n \t\t\n-//      @Override\n-\tpublic Std withSetterVisibility(Visibility v) {\n-            if (v == Visibility.DEFAULT)  v = DEFAULT._setterMinLevel;\n-            if (_setterMinLevel == v) return this;\n-            return new Std(_getterMinLevel, _isGetterMinLevel, v, _creatorMinLevel, _fieldMinLevel);\n-\t}\n-\n-//      @Override\n-\tpublic Std withCreatorVisibility(Visibility v) {\n-            if (v == Visibility.DEFAULT)  v = DEFAULT._creatorMinLevel;\n-            if (_creatorMinLevel == v) return this;\n-\t    return new Std(_getterMinLevel, _isGetterMinLevel, _setterMinLevel, v, _fieldMinLevel);\n-\t}\n-\n-//      @Override\n-\tpublic Std withFieldVisibility(Visibility v) {\n-            if (v == Visibility.DEFAULT)  v = DEFAULT._fieldMinLevel;\n-            if (_fieldMinLevel == v) return this;\n-\t    return new Std(_getterMinLevel, _isGetterMinLevel, _setterMinLevel, _creatorMinLevel, v);\n-\t}\n+    @Override\n+    public Std withSetterVisibility(Visibility v) {\n+        if (v == Visibility.DEFAULT)  v = DEFAULT._setterMinLevel;\n+        if (_setterMinLevel == v) return this;\n+        return new Std(_getterMinLevel, _isGetterMinLevel, v, _creatorMinLevel, _fieldMinLevel);\n+    }\n+\n+    @Override\n+    public Std withCreatorVisibility(Visibility v) {\n+        if (v == Visibility.DEFAULT)  v = DEFAULT._creatorMinLevel;\n+        if (_creatorMinLevel == v) return this;\n+        return new Std(_getterMinLevel, _isGetterMinLevel, _setterMinLevel, v, _fieldMinLevel);\n+    }\n+\n+    @Override\n+    public Std withFieldVisibility(Visibility v) {\n+        if (v == Visibility.DEFAULT)  v = DEFAULT._fieldMinLevel;\n+        if (_fieldMinLevel == v) return this;\n+        return new Std(_getterMinLevel, _isGetterMinLevel, _setterMinLevel, _creatorMinLevel, v);\n+    }\n \t\t\n-        /*\n-        /********************************************************\n-        /* Public API impl\n-        /********************************************************\n-         */\n-\n-//\t@Override\n-\tpublic boolean isCreatorVisible(Member m) {\n-\t    return _creatorMinLevel.isVisible(m);\n-    \t}\n-    \n-//      @Override\n-    \tpublic boolean isCreatorVisible(AnnotatedMember m) {\n-    \t    return isCreatorVisible(m.getMember());\n-    \t}\n-    \n-//      @Override\n-    \tpublic boolean isFieldVisible(Field f) {\n-    \t    return _fieldMinLevel.isVisible(f);\n-    \t}\n-    \n-//      @Override\n-    \tpublic boolean isFieldVisible(AnnotatedField f) {\n-    \t    return isFieldVisible(f.getAnnotated());\n-    \t}\n-    \n-//      @Override\n-    \tpublic boolean isGetterVisible(Method m) {\n-    \t    return _getterMinLevel.isVisible(m);\n-    \t}    \n-\n-//      @Override\n-        public boolean isGetterVisible(AnnotatedMethod m) {\n-    \t    return isGetterVisible(m.getAnnotated());\n-    \t}\n-\n-//      @Override\n-        public boolean isIsGetterVisible(Method m) {\n-            return _isGetterMinLevel.isVisible(m);\n-        }    \n-\n-//      @Override\n-        public boolean isIsGetterVisible(AnnotatedMethod m) {\n-            return isIsGetterVisible(m.getAnnotated());\n-        }\n-\n-//      @Override\n-        public boolean isSetterVisible(Method m) {\n-            return _setterMinLevel.isVisible(m);\n-        }\n-    \n-//      @Override\n-        public boolean isSetterVisible(AnnotatedMethod m) {\n-            return isSetterVisible(m.getAnnotated());\n-        }\n-\n-        /*\n-        /********************************************************\n-        /* Standard methods\n-        /********************************************************\n-         */\n-        @Override\n-        public String toString() {\n-            return new StringBuilder(\"[Visibility:\")\n-                .append(\" getter: \").append(_getterMinLevel)\n-                .append(\", isGetter: \").append(_isGetterMinLevel)\n-                .append(\", setter: \").append(_setterMinLevel)\n-                .append(\", creator: \").append(_creatorMinLevel)\n-                .append(\", field: \").append(_fieldMinLevel)\n-                .append(\"]\").toString();\n-        }\n+    /*\n+    /********************************************************\n+    /* Public API impl\n+    /********************************************************\n+     */\n+\n+    @Override\n+    public boolean isCreatorVisible(Member m) {\n+        return _creatorMinLevel.isVisible(m);\n+    }\n+\t\n+    @Override\n+    public boolean isCreatorVisible(AnnotatedMember m) {\n+        return isCreatorVisible(m.getMember());\n+    }\n+    \n+    @Override\n+    public boolean isFieldVisible(Field f) {\n+        return _fieldMinLevel.isVisible(f);\n+    }\n+    \n+    @Override\n+    public boolean isFieldVisible(AnnotatedField f) {\n+        return isFieldVisible(f.getAnnotated());\n+    }\n+    \n+    @Override\n+    public boolean isGetterVisible(Method m) {\n+        return _getterMinLevel.isVisible(m);\n+    }\n+\n+    @Override\n+    public boolean isGetterVisible(AnnotatedMethod m) {\n+         return isGetterVisible(m.getAnnotated());\n+    }\n+\n+    @Override\n+    public boolean isIsGetterVisible(Method m) {\n+        return _isGetterMinLevel.isVisible(m);\n+    }    \n+\n+    @Override\n+    public boolean isIsGetterVisible(AnnotatedMethod m) {\n+        return isIsGetterVisible(m.getAnnotated());\n+    }\n+\n+    @Override\n+    public boolean isSetterVisible(Method m) {\n+        return _setterMinLevel.isVisible(m);\n+    }\n+    \n+    @Override\n+    public boolean isSetterVisible(AnnotatedMethod m) {\n+        return isSetterVisible(m.getAnnotated());\n+    }\n+\n+    /*\n+    /********************************************************\n+    /* Standard methods\n+    /********************************************************\n+     */\n+\n+    @Override\n+    public String toString() {\n+        return new StringBuilder(\"[Visibility:\")\n+        .append(\" getter: \").append(_getterMinLevel)\n+        .append(\", isGetter: \").append(_isGetterMinLevel)\n+        .append(\", setter: \").append(_setterMinLevel)\n+        .append(\", creator: \").append(_creatorMinLevel)\n+        .append(\", field: \").append(_fieldMinLevel)\n+        .append(\"]\").toString();\n+    }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.java\n \n         public Base() { }\n         public Base(SerializerProvider p) { _provider = p; }\n-        \n+\n+        @Override\n         public SerializerProvider getProvider() { return _provider; }\n \n+        @Override\n         public void setProvider(SerializerProvider p) { _provider = p; }\n \n+        @Override\n         public void itemsFormat(JsonFormatVisitable handler, JavaType elementType)\n             throws JsonMappingException { }\n \n+        @Override\n         public void itemsFormat(JsonFormatTypes format)\n             throws JsonMappingException { }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonIntegerFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonIntegerFormatVisitor.java\n      */\n     public static class Base extends JsonValueFormatVisitor.Base\n         implements JsonIntegerFormatVisitor {\n-        //@Override\n+        @Override\n         public void numberType(JsonParser.NumberType type) { }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java\n         super(baseType, typeFactory);\n     }\n \n-//  @Override\n+    @Override\n     public JsonTypeInfo.Id getMechanism() { return JsonTypeInfo.Id.CLASS; }\n \n     public void registerSubtype(Class<?> type, String name) {\n         // not used with class name - based resolvers\n     }\n     \n-//  @Override\n+    @Override\n     public String idFromValue(Object value) {\n         return _idFrom(value, value.getClass());\n     }\n \n-//  @Override\n+    @Override\n     public String idFromValueAndType(Object value, Class<?> type) {\n         return _idFrom(value, type);\n     }\n \n-//  @Override\n+    @Override\n     public JavaType typeFromId(String id)\n     {\n         /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java\n         _typeFactory = typeFactory;\n     }\n \n-//  @Override\n+    @Override\n     public void init(JavaType bt) {\n         // Standard type id resolvers do not need this: only useful for custom ones.\n     }\n \n-//  @Override\n+    @Override\n     public String idFromBaseType()\n     {\n         /* By default we will just defer to regular handling, handing out the\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n         return new TypeNameIdResolver(config, baseType, typeToId, idToType);\n     }\n \n-//  @Override\n+    @Override\n     public JsonTypeInfo.Id getMechanism() { return JsonTypeInfo.Id.NAME; }\n \n-//  @Override\n+    @Override\n     public String idFromValue(Object value)\n     {\n         Class<?> cls = value.getClass();\n         return name;\n     }\n \n-//  @Override\n+    @Override\n     public String idFromValueAndType(Object value, Class<?> type)\n     {\n         /* 18-Jan-2013, tatu: We may be called with null value occasionally\n         return idFromValue(value);\n     }\n     \n-//  @Override\n+    @Override\n     public JavaType typeFromId(String id)\n         throws IllegalArgumentException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n     /**********************************************************\n      */\n     \n-//    @Override\n+    @Override\n     public String getName() {\n         return _name.getValue();\n     }\n \n-//    @Override\n+    @Override\n     public JavaType getType() {\n         return _declaredType;\n     }\n \n-//  @Override\n+    @Override\n     public boolean isRequired() {\n         return _isRequired;\n     }\n     \n-//  @Override\n+    @Override\n     public <A extends Annotation> A getAnnotation(Class<A> acls) {\n         return _member.getAnnotation(acls);\n     }\n \n-//  @Override\n+    @Override\n     public <A extends Annotation> A getContextAnnotation(Class<A> acls) {\n         return _contextAnnotations.get(acls);\n     }\n \n-//    @Override\n+    @Override\n     public AnnotatedMember getMember() {\n         return _member;\n     }\n \n \n-//  @Override\n+    @Override\n     public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)\n         throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n-import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n-import com.fasterxml.jackson.databind.util.Converter;\n \n /**\n  * Standard implementation used by {@link ObjectMapper}:\n         return (JsonSerializer<Object>) _handleResolvable(ser);\n     }\n \n-    @Override\n-    public ObjectIdGenerator<?> objectIdGeneratorInstance(Annotated annotated,\n-            ObjectIdInfo objectIdInfo)\n-        throws JsonMappingException\n-    {\n-        Class<?> implClass = objectIdInfo.getGeneratorType();\n-        HandlerInstantiator hi = _config.getHandlerInstantiator();\n-        ObjectIdGenerator<?> gen = (hi == null) ? null : hi.objectIdGeneratorInstance(_config, annotated, implClass);\n-        if (gen == null) {\n-            gen = (ObjectIdGenerator<?>) ClassUtil.createInstance(implClass,\n-                    _config.canOverrideAccessModifiers());\n-        }\n-        return gen.forScope(objectIdInfo.getScope());\n-    }\n-\n     /*\n     /**********************************************************\n     /* Helper classes\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n \n     public abstract DateTimeSerializerBase<T> withFormat(boolean timestamp, DateFormat customFormat);\n \n-//  @Override\n+    @Override\n     public JsonSerializer<?> createContextual(SerializerProvider prov,\n             BeanProperty property) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n      * to make things contextual. We are limited to \"textual vs index\"\n      * choice here, however.\n      */\n+    @Override\n     public JsonSerializer<?> createContextual(SerializerProvider prov,\n             BeanProperty property) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/util/EmptyIterator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/EmptyIterator.java\n         return (Iterator<T>) instance;\n     }\n     \n+    @Override\n     public boolean hasNext() { return false; }\n+    @Override\n     public T next() { throw new NoSuchElementException(); }\n \n-    // @Override\n+    @Override\n     public void remove() {\n         throw new UnsupportedOperationException();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/util/JSONPObject.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/JSONPObject.java\n     /* JsonSerializable(WithType) implementation\n     /**********************************************************\n      */\n-    \n-//  @Override\n+\n+    @Override\n     public void serializeWithType(JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer)\n             throws IOException, JsonProcessingException\n     {\n         serialize(jgen, provider);\n     }\n \n-//  @Override\n+    @Override\n     public void serialize(JsonGenerator jgen, SerializerProvider provider)\n             throws IOException, JsonProcessingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/util/JSONWrappedObject.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/JSONWrappedObject.java\n     /* JsonSerializable(WithType) implementation\n     /**************************************************************\n      */\n-    \n-//  @Override\n+\n+    @Override\n     public void serializeWithType(JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer)\n             throws IOException, JsonProcessingException\n     {\n         serialize(jgen, provider);\n     }\n \n-//  @Override\n+    @Override\n     public void serialize(JsonGenerator jgen, SerializerProvider provider)\n             throws IOException, JsonProcessingException\n     {\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java\n             beanSerializer.serializeWithType( value, jgen, provider, typeSer );\n         }\n \n-//      @Override\n+        @Override\n         public void resolve(SerializerProvider provider) throws JsonMappingException\n         {\n             if (beanSerializer instanceof ResolvableSerializer) {\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize.java\n     static class ValueClass\n         implements ValueInterface\n     {\n-//      @Override\n+        @Override\n         public int getX() { return 3; }\n         public int getY() { return 5; }\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestRootType.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestRootType.java\n     {\n         public String a = \"a\";\n \n+        @Override\n         public int getB() { return 3; }\n     }\n ", "timestamp": 1362260170, "metainfo": ""}