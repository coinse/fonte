{"sha": "0dfe53625bc555af187765d884f285e792d78f3b", "log": "More conversion (and one more transient unit test failure)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n         Class<?> elementRaw = type.getContentType().getRawClass();\n         if (isIndexedList(raw)) {\n             if (elementRaw == String.class) {\n-                return new IndexedStringListSerializer();\n+                return IndexedStringListSerializer.instance;\n             }\n             return StdContainerSerializers.indexedListSerializer(type.getContentType(), staticTyping,\n                     elementTypeSerializer, property, elementValueSerializer);\n         }\n         if (elementRaw == String.class) {\n-            return new StringCollectionSerializer();\n+            return StringCollectionSerializer.instance;\n         }\n         return StdContainerSerializers.collectionSerializer(type.getContentType(), staticTyping,\n                 elementTypeSerializer, property, elementValueSerializer);\n         // Important: do NOT use standard serializers if non-standard element value serializer specified\n         if (elementValueSerializer == null || ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n             if (String[].class == raw) {\n-                return new StringArraySerializer(property);\n-            } else {\n-                // other standard types?\n-                JsonSerializer<?> ser = _arraySerializers.get(raw.getName());\n-                if (ser != null) {\n-                    return ser;\n-                }\n+                return StringArraySerializer.instance;\n+            }\n+            // other standard types?\n+            JsonSerializer<?> ser = _arraySerializers.get(raw.getName());\n+            if (ser != null) {\n+                return ser;\n             }\n         }\n         return new ObjectArraySerializer(type.getContentType(), staticTyping, elementTypeSerializer,\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n     extends StaticListSerializerBase<List<String>>\n     implements ContextualSerializer\n {\n+    public final static IndexedStringListSerializer instance = new IndexedStringListSerializer();\n+    \n     protected final JsonSerializer<String> _serializer;\n \n     /*\n     /**********************************************************\n      */\n     \n-    public IndexedStringListSerializer() {\n+    protected IndexedStringListSerializer() {\n         this(null);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n-import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n+import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n import com.fasterxml.jackson.databind.ser.std.ArraySerializerBase;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n @JacksonStdImpl\n public class StringArraySerializer\n     extends ArraySerializerBase<String[]>\n-    implements ResolvableSerializer\n+    implements ContextualSerializer\n {\n     /* Note: not clean in general, but we are betting against\n      * anyone re-defining properties of String.class here...\n      */\n     private final static JavaType VALUE_TYPE = TypeFactory.defaultInstance().uncheckedSimpleType(String.class);\n-        \n+\n+    public final static StringArraySerializer instance = new StringArraySerializer();\n+    \n     /**\n      * Value serializer to use, if it's not the standard one\n      * (if it is we can optimize serialization a lot)\n      */\n-    protected JsonSerializer<Object> _elementSerializer;\n+    protected final JsonSerializer<Object> _elementSerializer;\n \n-    public StringArraySerializer(BeanProperty prop) {\n-        super(String[].class, null, prop);\n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+    \n+    protected StringArraySerializer() {\n+        super(String[].class, null, null);\n+        _elementSerializer = null;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    public StringArraySerializer(StringArraySerializer src,\n+            BeanProperty prop, JsonSerializer<?> ser) {\n+        super(src, prop);\n+        _elementSerializer = (JsonSerializer<Object>) ser;\n+    }\n+    \n     /**\n      * Strings never add type info; hence, even if type serializer is suggested,\n      * we'll ignore it...\n     public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n         return this;\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Post-processing\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public JsonSerializer<?> createContextual(SerializerProvider provider,\n+            BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        JsonSerializer<?> ser = _elementSerializer;\n+        if (ser == null) {\n+            ser = provider.findValueSerializer(String.class, _property);\n+        } else if (ser instanceof ContextualSerializer) {\n+            ser = ((ContextualSerializer) ser).createContextual(provider, property);\n+        }\n+        // Optimization: default serializer just writes String, so we can avoid a call:\n+        if (isDefaultSerializer(ser)) {\n+            ser = null;\n+        }\n+        // note: will never have TypeSerializer, because Strings are \"natural\" type\n+        if (ser == _elementSerializer) {\n+            return this;\n+        }\n+        return new StringArraySerializer(this, property, ser);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Simple accessors\n+    /**********************************************************\n+     */\n \n     @Override\n     public JavaType getContentType() {\n     public boolean isEmpty(String[] value) {\n         return (value == null) || (value.length == 0);\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Actual serialization\n+    /**********************************************************\n+     */\n     \n     @Override\n     public void serializeContents(String[] value, JsonGenerator jgen, SerializerProvider provider)\n         }\n     }\n \n-    /**\n-     * Need to get callback to resolve value serializer, which may\n-     * be overridden by custom serializer\n-     */\n-    @Override\n-    public void resolve(SerializerProvider provider)\n-        throws JsonMappingException\n-    {\n-        JsonSerializer<Object> ser = provider.findValueSerializer(String.class, _property);\n-        // Retain if not the standard implementation\n-        if (ser != null && ser.getClass().getAnnotation(JacksonStdImpl.class) == null) {\n-            _elementSerializer = ser;\n-        }\n-    }        \n-    \n     @Override\n     public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n     extends StaticListSerializerBase<Collection<String>>\n     implements ContextualSerializer\n {\n+    public final static StringCollectionSerializer instance = new StringCollectionSerializer();\n+    \n     protected final JsonSerializer<String> _serializer;\n     \n     /*\n     /**********************************************************\n      */\n     \n-    public StringCollectionSerializer() {\n+    protected StringCollectionSerializer() {\n         this(null);\n     }\n ", "timestamp": 1328061641, "metainfo": ""}