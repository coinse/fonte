{"sha": "6751d13d4e0da1af79b05937ad738728ba031f70", "log": "Refactoring to demote more stuff in DatabindContext", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DatabindContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DatabindContext.java\n \n import java.lang.reflect.Type;\n \n+import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+import com.fasterxml.jackson.databind.annotation.NoClass;\n+import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+import com.fasterxml.jackson.databind.introspect.Annotated;\n+import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.databind.util.ClassUtil;\n+import com.fasterxml.jackson.databind.util.Converter;\n \n /**\n  * Shared base class for {@link DeserializationContext} and\n     }\n \n     public abstract TypeFactory getTypeFactory();\n+\n+    /*\n+    /**********************************************************\n+    /* Helper object construction\n+    /**********************************************************\n+     */\n+\n+    public abstract ObjectIdGenerator<?> objectIdGeneratorInstance(Annotated annotated,\n+            ObjectIdInfo objectIdInfo)\n+        throws JsonMappingException;\n+\n+    /**\n+     * Helper method to use to construct a {@link Converter}, given a definition\n+     * that may be either actual converter instance, or Class for instantiating one.\n+     * \n+     * @since 2.2\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final Converter<Object,Object> converterInstance(Annotated annotated,\n+            Object converterDef)\n+        throws JsonMappingException\n+    {\n+        if (converterDef == null) {\n+            return null;\n+        }\n+        if (converterDef instanceof Converter<?,?>) {\n+            return (Converter<Object,Object>) converterDef;\n+        }\n+        if (!(converterDef instanceof Class)) {\n+            throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \"\n+                    +converterDef.getClass().getName()+\"; expected type Converter or Class<Converter> instead\");\n+        }\n+        Class<?> converterClass = (Class<?>)converterDef;\n+        // there are some known \"no class\" markers to consider too:\n+        if (converterClass == Converter.None.class || converterClass == NoClass.class) {\n+            return null;\n+        }\n+        if (!Converter.class.isAssignableFrom(converterClass)) {\n+            throw new IllegalStateException(\"AnnotationIntrospector returned Class \"\n+                    +converterClass.getName()+\"; expected Class<Converter>\");\n+        }\n+        MapperConfig<?> config = getConfig();\n+        HandlerInstantiator hi = config.getHandlerInstantiator();\n+        Converter<?,?> conv = (hi == null) ? null : hi.converterInstance(config, annotated, converterClass);\n+        if (conv == null) {\n+            conv = (Converter<?,?>) ClassUtil.createInstance(converterClass,\n+                    config.canOverrideAccessModifiers());\n+        }\n+        return (Converter<Object,Object>) conv;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n             Object deserDef)\n         throws JsonMappingException;\n \n-    public abstract ObjectIdGenerator<?> objectIdGeneratorInstance(Annotated annotated,\n-            ObjectIdInfo objectIdInfo)\n-        throws JsonMappingException;\n-\n-    /**\n-     * @since 2.2\n-     */\n-    public abstract Converter<Object,Object> converterInstance(Annotated annotated,\n-            Object converterDef)\n-        throws JsonMappingException;    \n-\n     /*\n     /**********************************************************\n     /* Public API, helper object recycling\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n             Object serDef)\n         throws JsonMappingException;\n \n-    public abstract ObjectIdGenerator<?> objectIdGeneratorInstance(Annotated annotated,\n-            ObjectIdInfo objectIdInfo)\n-        throws JsonMappingException;\n-    \n-    /**\n-     * @since 2.2\n-     */\n-    public abstract Converter<Object,Object> converterInstance(Annotated annotated,\n-            Object converterDef)\n-        throws JsonMappingException;\n-\n     /*\n     /********************************************************\n     /* Convenience methods\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n      * General version used when handling needs more advanced\n      * features.\n      */\n+    @Override\n     public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n      * due to non-guaranteed ordering possibly some other properties\n      * as well.\n      */\n+    @Override\n     protected Object _deserializeUsingPropertyBased(final JsonParser jp, final DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     { \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n         return deser;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    public Converter<Object,Object> converterInstance(Annotated annotated,\n-            Object converterDef)\n-        throws JsonMappingException\n-    {\n-        if (converterDef == null) {\n-            return null;\n-        }\n-        if (converterDef instanceof Converter<?,?>) {\n-            return (Converter<Object,Object>) converterDef;\n-        }\n-        if (!(converterDef instanceof Class)) {\n-            throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \"\n-                    +converterDef.getClass().getName()+\"; expected type Converter or Class<Converter> instead\");\n-        }\n-        Class<?> converterClass = (Class<?>)converterDef;\n-        // there are some known \"no class\" markers to consider too:\n-        if (converterClass == Converter.None.class || converterClass == NoClass.class) {\n-            return null;\n-        }\n-        if (!Converter.class.isAssignableFrom(converterClass)) {\n-            throw new IllegalStateException(\"AnnotationIntrospector returned Class \"\n-                    +converterClass.getName()+\"; expected Class<Converter>\");\n-        }\n-        HandlerInstantiator hi = _config.getHandlerInstantiator();\n-        Converter<?,?> conv = (hi == null) ? null : hi.converterInstance(_config, annotated, converterClass);\n-        if (conv == null) {\n-            conv = (Converter<?,?>) ClassUtil.createInstance(converterClass,\n-                    _config.canOverrideAccessModifiers());\n-        }\n-        return (Converter<Object,Object>) conv;\n-    }\n-\n     /*\n     /**********************************************************\n     /* Extended API\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.databind.util.Converter;\n \n /**\n  * Base class for common deserializers. Contains shared\n         throws JsonMappingException\n     {\n         return ctxt.findContextualValueDeserializer(type, property);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods for sub-classes, deserializer construction\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Helper method that can be used to see if specified property has annotation\n+     * indicating that a converter is to be used for contained values (contents\n+     * of structured types; array/List/Map values)\n+     * \n+     * @param existingSerializer (optional) configured content\n+     *    serializer if one already exists.\n+     * \n+     * @since 2.2\n+     */\n+    protected JsonDeserializer<?> findConvertingContentDeserializer(DeserializationContext ctxt,\n+            BeanProperty prop, JsonDeserializer<?> existingDeserializer)\n+        throws JsonMappingException\n+    {\n+        /*\n+        final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n+        if (intr != null && prop != null) {\n+            Object convDef = intr.findSerializationContentConverter(prop.getMember());\n+            if (convDef != null) {\n+                Converter<Object,Object> conv = ctxt.converterInstance(prop.getMember(), convDef);\n+                TypeFactory tf = ctxt.getTypeFactory();\n+                JavaType converterType = tf.constructType(conv.getClass());\n+                JavaType[] params = tf.findTypeParameters(converterType, Converter.class);\n+                if (params == null || params.length != 2) {\n+                    throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n+                            +converterType);\n+                }\n+                JavaType delegateType = params[1];\n+                if (existingDeserializer == null) {\n+                    existingDeserializer = ctxt.findValueSerializer(delegateType, prop);\n+                }\n+                return new StdDelegatingDeserializer<Object>(conv, delegateType, existingDeserializer);\n+            }\n+        }\n+        */\n+        return existingDeserializer;\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n         return gen.forScope(objectIdInfo.getScope());\n     }\n \n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public Converter<Object,Object> converterInstance(Annotated annotated,\n-            Object converterDef)\n-        throws JsonMappingException\n-    {\n-        if (converterDef == null) {\n-            return null;\n-        }\n-        if (converterDef instanceof Converter<?,?>) {\n-            return (Converter<Object,Object>) converterDef;\n-        }\n-        if (!(converterDef instanceof Class)) {\n-            throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \"\n-                    +converterDef.getClass().getName()+\"; expected type Converter or Class<Converter> instead\");\n-        }\n-        Class<?> converterClass = (Class<?>)converterDef;\n-        // there are some known \"no class\" markers to consider too:\n-        if (converterClass == Converter.None.class || converterClass == NoClass.class) {\n-            return null;\n-        }\n-        if (!Converter.class.isAssignableFrom(converterClass)) {\n-            throw new IllegalStateException(\"AnnotationIntrospector returned Class \"\n-                    +converterClass.getName()+\"; expected Class<Converter>\");\n-        }\n-        HandlerInstantiator hi = _config.getHandlerInstantiator();\n-        Converter<?,?> conv = (hi == null) ? null : hi.converterInstance(_config, annotated, converterClass);\n-        if (conv == null) {\n-            conv = (Converter<?,?>) ClassUtil.createInstance(converterClass,\n-                    _config.canOverrideAccessModifiers());\n-        }\n-        return (Converter<Object,Object>) conv;\n-    }\n-    \n     /*\n     /**********************************************************\n     /* Helper classes", "timestamp": 1362259418, "metainfo": ""}