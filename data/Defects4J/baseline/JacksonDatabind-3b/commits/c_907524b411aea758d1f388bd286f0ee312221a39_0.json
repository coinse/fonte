{"sha": "907524b411aea758d1f388bd286f0ee312221a39", "log": "Start working on passing full property names", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/PropertyName.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/PropertyName.java\n package com.fasterxml.jackson.databind;\n+\n+import com.fasterxml.jackson.core.util.InternCache;\n \n /**\n  * Simple value class used for containing names of properties as defined\n         }\n         return new PropertyName(simpleName, ns);\n     }\n+\n+    public PropertyName internSimpleName()\n+    {\n+        if (_simpleName.length() == 0) { // empty String is canonical already\n+            return this;\n+        }\n+        String interned = InternCache.instance.intern(_simpleName);\n+        if (interned == _simpleName) { // was already interned\n+            return this;\n+        }\n+        return new PropertyName(interned, _namespace);\n+    }\n+\n     \n     /**\n      * Fluent factory method for constructing an instance with different\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n      * Logical name of the property (often but not always derived\n      * from the setter method name)\n      */\n-    protected final String _propName;\n+    protected final PropertyName _propName;\n \n     /**\n      * Base type for property; may be a supertype of actual value.\n     protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n             TypeDeserializer typeDeser, Annotations contextAnnotations)\n     {\n-        this(propName, type, wrapper, typeDeser, contextAnnotations, false);\n-    }\n-\n+        this(new PropertyName(propName), type, wrapper, typeDeser, contextAnnotations, false);\n+    }\n+\n+    @Deprecated // since 2.3\n     protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n             TypeDeserializer typeDeser, Annotations contextAnnotations,\n             boolean isRequired)\n     {\n-        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n-         *   field names are (usually) interned too, hence lookups will be faster.\n-         */\n+        this(new PropertyName(propName), type, wrapper, typeDeser, contextAnnotations, isRequired);\n+    }\n+    \n+    protected SettableBeanProperty(PropertyName propName, JavaType type, PropertyName wrapper,\n+            TypeDeserializer typeDeser, Annotations contextAnnotations,\n+            boolean isRequired)\n+    {\n+        // 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n+        //  field names are (usually) interned too, hence lookups will be faster.\n         // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n-        /*   Probably need not, given that namespace of field/method names\n-         *   is not unbounded, unlike potential JSON names.\n-         */\n-        if (propName == null || propName.length() == 0) {\n-            _propName = \"\";\n+        //   Probably need not, given that namespace of field/method names\n+        //   is not unbounded, unlike potential JSON names.\n+        if (propName == null) {\n+            _propName = PropertyName.NO_NAME;\n         } else {\n-            _propName = InternCache.instance.intern(propName);\n+            _propName = propName.internSimpleName();\n         }\n         _type = type;\n         _wrapperName = wrapper;\n             boolean isRequired, JsonDeserializer<Object> valueDeser)\n     {\n         // as with above ctor, intern()ing probably fine\n-        if (propName == null || propName.length() == 0) {\n-            _propName = \"\";\n+        if (propName == null) {\n+            _propName = PropertyName.NO_NAME;\n         } else {\n-            _propName = InternCache.instance.intern(propName);\n+            _propName = new PropertyName(propName).internSimpleName();\n         }\n         _type = type;\n         _wrapperName = null;\n         _viewMatcher = src._viewMatcher;\n     }\n \n+    @Deprecated // since 2.3\n+    protected SettableBeanProperty(SettableBeanProperty src, String newName) {\n+        this(src, new PropertyName(newName));\n+    }\n+    \n     /**\n      * Copy-with-deserializer-change constructor for sub-classes to use.\n      */\n-    protected SettableBeanProperty(SettableBeanProperty src, String newName)\n+    protected SettableBeanProperty(SettableBeanProperty src, PropertyName newName)\n     {\n         _propName = newName;\n         _type = src._type;\n      */\n     \n     @Override\n-    public final String getName() { return _propName; }\n+    public final String getName() { return _propName.getSimpleName(); }\n \n     @Override\n     public PropertyName getFullName() {\n-        // !!! TODO: impl properly\n-        return new PropertyName(_propName);\n+        return _propName;\n     }\n     \n     @Override", "timestamp": 1374816159, "metainfo": ""}