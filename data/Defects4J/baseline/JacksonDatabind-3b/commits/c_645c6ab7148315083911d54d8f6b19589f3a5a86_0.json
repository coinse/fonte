{"sha": "645c6ab7148315083911d54d8f6b19589f3a5a86", "log": "ArrayNode: make it final  Take the opportunity to get rid of \"non-final-only\" methods along the way.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n package com.fasterxml.jackson.databind.node;\n \n-import java.io.IOException;\n-import java.math.BigDecimal;\n-import java.util.*;\n-\n-import com.fasterxml.jackson.core.*;\n-\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JsonToken;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n-import com.fasterxml.jackson.databind.util.EmptyIterator;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n \n /**\n  * Node class that represents Arrays mapped from Json content.\n  */\n-public class ArrayNode\n+public final class ArrayNode\n     extends ContainerNode<ArrayNode>\n {\n-    protected final List<JsonNode> _children = new ArrayList<JsonNode>();\n+    private final List<JsonNode> _children = new ArrayList<JsonNode>();\n \n     public ArrayNode(JsonNodeFactory nc) { super(nc); }\n \n     @Override\n     public ArrayNode deepCopy()\n     {\n-        /* 28-Sep-2012, tatu: Sub-classes really should override this method to\n-         *   produce compliant copies.\n-         */\n-        if (getClass() != ArrayNode.class) {\n-            throw new IllegalStateException(\"ArrayNode subtype (\"+getClass().getName()+\" does not override deepCopy(), needs to\");\n-        }\n-        return _defaultDeepCopy();\n-    }\n-\n-    /**\n-     * Default implementation for 'deepCopy()': can be delegated to by sub-classes\n-     * if necessary; but usually isn't.\n-     */\n-    protected ArrayNode _defaultDeepCopy()\n-    {\n-        final int len = _children.size();\n-        final ArrayNode ret = new ArrayNode(_nodeFactory);\n-\n-        for (JsonNode child : _children)\n-            ret._children.add(child.deepCopy());\n+        ArrayNode ret = new ArrayNode(_nodeFactory);\n+\n+        for (JsonNode element: _children)\n+            ret._children.add(element.deepCopy());\n \n         return ret;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Implementation of core JsonNode API\n      */\n \n     @Override\n-    public final JsonNodeType getNodeType()\n+    public JsonNodeType getNodeType()\n     {\n         return JsonNodeType.ARRAY;\n     }\n      */\n \n     @Override\n-    public final void serialize(JsonGenerator jg, SerializerProvider provider)\n+    public void serialize(JsonGenerator jg, SerializerProvider provider)\n         throws IOException, JsonProcessingException\n     {\n         jg.writeStartArray();\n \n     /*\n     /**********************************************************\n-    /* Package methods (for other node classes to use)\n-    /**********************************************************\n-     */\n-\n-    protected void addContentsTo(List<JsonNode> dst)\n-    {\n-        dst.addAll(_children);\n-    }\n-\n-    /*\n-    /**********************************************************\n-    /* Overridable methods\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Internal factory method for creating {@link Map} used for storing\n-     * child nodes. \n-     * Overridable by sub-classes, used when caller does not know what\n-     * optimal size would, used for example when constructing a Map when adding\n-     * the first one.\n-     * \n-     * @since 2.1\n-     */\n-    protected List<JsonNode> _createList() {\n-        return new ArrayList<JsonNode>();\n-    }\n-    \n-    /**\n-     * Internal factory method for creating {@link Map} used for storing\n-     * child nodes. \n-     * Overridable by sub-classes, used when caller has an idea of what\n-     * optimal size should be: used when copying contents of an existing node.\n-     * \n-     * @since 2.1\n-     */\n-    protected List<JsonNode> _createList(int defaultSize) {\n-        return new ArrayList<JsonNode>(defaultSize);\n-    }\n-    \n-    /*\n-    /**********************************************************\n     /* Standard methods\n     /**********************************************************\n      */\n \n     @Override\n-    public final boolean equals(Object o)\n+    public boolean equals(Object o)\n     {\n         if (o == this) return true;\n         if (o == null) return false;\n-        if (!(o instanceof ArrayNode)) {\n+        if (getClass() != o.getClass()) {\n             return false;\n         }\n         return _children.equals(((ArrayNode) o)._children);", "timestamp": 1359405557, "metainfo": ""}