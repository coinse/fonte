{"sha": "d20866f2a06d09b7656f073a081b34ffd07fb976", "log": "Minor tweaking for #81, changing exception used", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java\n             // empty map might work; but caller may want to modify... so better just give small modifiable\n             return new LinkedHashMap<String,Object>(2);\n         }\n-        String field1 = jp.getText();\n+        String field1 = jp.getCurrentName();\n         jp.nextToken();\n         Object value1 = deserialize(jp, ctxt);\n         if (jp.nextToken() == JsonToken.END_OBJECT) { // single entry; but we want modifiable\n             result.put(field1, value1);\n             return result;\n         }\n-        String field2 = jp.getText();\n+        String field2 = jp.getCurrentName();\n         jp.nextToken();\n         Object value2 = deserialize(jp, ctxt);\n         if (jp.nextToken() == JsonToken.END_OBJECT) {\n         result.put(field1, value1);\n         result.put(field2, value2);\n         do {\n-            String fieldName = jp.getText();\n+            String fieldName = jp.getCurrentName();\n             jp.nextToken();\n             result.put(fieldName, deserialize(jp, ctxt));\n         } while (jp.nextToken() != JsonToken.END_OBJECT);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java\n \n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n     public void serializeWithType(Object bean, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer)\n         throws IOException, JsonGenerationException\n     {\n-\t    if (provider.isEnabled(SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS)) {\n-\t\t    throw new JsonGenerationException(\"Unwrapped property contains type information.\");\n-\t    }\n+        if (provider.isEnabled(SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS)) {\n+            throw new JsonMappingException(\"Unwrapped property requires use of type information: can not serialize without disabling `SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS`\");\n+        }\n \n         if (_objectIdWriter != null) {\n             _serializeWithObjectId(bean, jgen, provider, typeSer);\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestUnwrappedWithTypeInfo.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestUnwrappedWithTypeInfo.java\n import com.fasterxml.jackson.annotation.JsonUnwrapped;\n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializationFeature;\n+\n import org.junit.Test;\n \n // Tests for [#81]\n     /**********************************************************\n      */\n \n-    public void testDefaultUnwrappedWithTypeInfo() throws Exception\n-    {\n+\t// [Issue#81]\n+\tpublic void testDefaultUnwrappedWithTypeInfo() throws Exception\n+\t{\n \t    Outer outer = new Outer();\n \t    outer.setP1(\"101\");\n \n \n \t    ObjectMapper mapper = new ObjectMapper();\n \n-        try {\n+\t    try {\n \t        mapper.writeValueAsString(outer);\n-        } catch (JsonGenerationException ex) {\n-\t        return; // expected\n-        }\n-\n-\t    fail(\"Expected exception to be thrown.\");\n-    }\n+\t         fail(\"Expected exception to be thrown.\");\n+\t    } catch (JsonMappingException ex) {\n+\t        verifyException(ex, \"requires use of type information\");\n+\t    }\n+\t}\n \n \tpublic void testUnwrappedWithTypeInfoAndFeatureDisabled() throws Exception\n \t{", "timestamp": 1400282125, "metainfo": ""}