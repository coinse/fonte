{"sha": "202567b625eef1a925e217a7e0145fff48298cf1", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java\n      */\n \n     /**\n-     * SerializationFeature that determines whether the type detection for\n+     * Feature that determines whether the type detection for\n      * serialization should be using actual dynamic runtime type,\n      * or declared static type.\n      * Note that deserialization always uses declared static types\n      */\n     \n     /**\n-     * SerializationFeature that determines whether properties that have no view\n+     * Feature that determines whether properties that have no view\n      * annotations are included in JSON serialization views (see\n      * {@link com.fasterxml.jackson.annotation.JsonView} for more\n      * details on JSON Views).\n      */\n \n     /**\n-     * SerializationFeature that defines default property serialization order used\n+     * Feature that defines default property serialization order used\n      * for POJO fields (note: does <b>not</b> apply to {@link java.util.Map}\n      * serialization!):\n      * if enabled, default ordering is alphabetic (similar to\n      *<p>\n      * Feature is disabled by default.\n      */\n-    SORT_PROPERTIES_ALPHABETICALLY(false)\n-\n+    SORT_PROPERTIES_ALPHABETICALLY(false),\n+\n+    /*\n+    /******************************************************\n+    /* Name-related features\n+    /******************************************************\n+     */\n+\n+    /**\n+     * Feature that can be enabled to make property names be\n+     * overridden by wrapper name (usually detected with annotations\n+     * as defined by {@link AnnotationIntrospector#findWrapperName}.\n+     * If enabled, all properties that have associated non-empty Wrapper\n+     * name will use that wrapper name instead of property name.\n+     * If disabled, wrapper name is only used for wrapping (if anything).\n+     *<p>\n+     * Feature is disabled by default.\n+     * \n+     * @since 2.1\n+     */\n+    USE_WRAPPER_NAME_AS_PROPERTY_NAME(false)\n+    \n     ;\n \n     private final boolean _defaultState;\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n             mapper.readValue(quote(\"\"), Bean.class);\n             fail(\"Should not accept Empty String for POJO\");\n         } catch (JsonProcessingException e) {\n-            verifyException(e, \"from JSON String\");\n+            verifyException(e, \"from String value\");\n         }\n \n         // should be ok to enable dynamically:\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectId.java\n+package com.fasterxml.jackson.databind.struct;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+// related to [JACKSON-847]\n+public class TestObjectId extends BaseMapTest\n+{\n+    @JsonPropertyOrder({\"a\", \"b\"})\n+    static class Wrapper {\n+        public ColumnMetadata a, b;\n+    }\n+    \n+    @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"@id\")\n+    static class ColumnMetadata {\n+      private final String name;\n+      private final String type;\n+      private final String comment;\n+\n+      @JsonCreator\n+      public ColumnMetadata(\n+        @JsonProperty(\"name\") String name,\n+        @JsonProperty(\"type\") String type,\n+        @JsonProperty(\"comment\") String comment\n+      ) {\n+        this.name = name;\n+        this.type = type;\n+        this.comment = comment;\n+      }\n+\n+      @JsonProperty(\"name\")\n+      public String getName() {\n+        return name;\n+      }\n+\n+      @JsonProperty(\"type\")\n+      public String getType() {\n+        return type;\n+      }\n+\n+      @JsonProperty(\"comment\")\n+      public String getComment() {\n+        return comment;\n+      }    \n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+    \n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+    \n+    public void testColumnMetadata() throws Exception\n+    {\n+        ColumnMetadata col = new ColumnMetadata(\"Billy\", \"employee\", \"comment\");\n+        Wrapper w = new Wrapper();\n+        w.a = col;\n+        w.b = col;\n+        String json = MAPPER.writeValueAsString(w);\n+        \n+        Wrapper deserialized = MAPPER.readValue(json, Wrapper.class);\n+        assertNotNull(deserialized);\n+        assertNotNull(deserialized.a);\n+        assertNotNull(deserialized.b);\n+        \n+        assertEquals(\"Billy\", deserialized.a.getName());\n+        assertEquals(\"employee\", deserialized.a.getType());\n+        assertEquals(\"comment\", deserialized.a.getComment());\n+\n+        assertSame(deserialized.a, deserialized.b);\n+    }\n+}", "timestamp": 1347417506, "metainfo": ""}