{"sha": "e8dc60358d2ebd71948ba261cb66146695871304", "log": "cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n \n     public abstract Object findInjectableValue(Object valueId,\n             BeanProperty forProperty, Object beanInstance);\n+\n+    /*\n+    /**********************************************************\n+    /* By-pass methods to DeserializerProvider\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Convenience method, functionally same as:\n+     *<pre>\n+     *  getDeserializerProvider().findValueDeserializer(getConfig(), propertyType, property);\n+     *</pre>\n+     */\n+    public abstract JsonDeserializer<Object> findValueDeserializer(JavaType propertyType,\n+            BeanProperty property)\n+        throws JsonMappingException;\n+    \n+    /**\n+     * Convenience method, functionally same as:\n+     *<pre>\n+     *  getDeserializerProvider().findTypedValueDeserializer(getConfig(), propertyType, property);\n+     *</pre>\n+     */\n+    public abstract JsonDeserializer<Object> findTypedValueDeserializer(JavaType type,\n+            BeanProperty property)\n+        throws JsonMappingException;\n+\n+    /**\n+     * Convenience method, functionally same as:\n+     *<pre>\n+     *  getDeserializerProvider().findKeyDeserializer(getConfig(), propertyType, property);\n+     *</pre>\n+     */\n+    public abstract KeyDeserializer findKeyDeserializer(JavaType keyType,\n+            BeanProperty property)\n+        throws JsonMappingException;\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializerProvider.java\n      * through fields or membership in an array or collection)\n      */\n     public abstract boolean hasValueDeserializerFor(DeserializationConfig config, JavaType type);\n-\n-    /*\n-    /**********************************************************\n-    /* Additional type handling methods, related\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Method that can be called to try to resolve an abstract type\n-     * (interface, abstract class) into a concrete type, or at least\n-     * something \"more concrete\" (abstract class instead of interface).\n-     * Will either return passed type, or a more specific type.\n-     */\n-    public abstract JavaType mapAbstractType(DeserializationConfig config, JavaType type)\n-        throws JsonMappingException;\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializationContext.java\n             throw new IllegalStateException(\"No 'injectableValues' configured, can not inject value with id [\"+valueId+\"]\");\n         }\n         return _injectableValues.findInjectableValue(valueId, this, forProperty, beanInstance);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, pass-through to DeserializerProvider\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public JsonDeserializer<Object> findValueDeserializer(JavaType type,\n+            BeanProperty property) throws JsonMappingException {\n+        return _deserProvider.findValueDeserializer(_config, type, property);\n+    }\n+    \n+    @Override\n+    public JsonDeserializer<Object> findTypedValueDeserializer(JavaType type,\n+            BeanProperty property) throws JsonMappingException {\n+        return _deserProvider.findTypedValueDeserializer(_config, type, property);\n+    }\n+\n+    @Override\n+    public KeyDeserializer findKeyDeserializer(JavaType keyType,\n+            BeanProperty property) throws JsonMappingException {\n+        return _deserProvider.findKeyDeserializer(_config, keyType, property);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java\n     /* Abstract methods impls\n     /**********************************************************\n      */\n-\n-    @Override\n-    public JavaType mapAbstractType(DeserializationConfig config, JavaType type)\n-            throws JsonMappingException\n-    {\n-        return _factory.mapAbstractType(config, type);\n-    }\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n      * @param property Actual property object (field, method, constuctor parameter) used\n      *     for passing deserialized values; provided so deserializer can be contextualized if necessary (since 1.7)\n      */\n-    protected JsonDeserializer<Object> findDeserializer(DeserializationConfig config, DeserializerProvider provider,\n-                                                        JavaType type, BeanProperty property)\n+    protected JsonDeserializer<Object> findDeserializer(DeserializationConfig config,\n+            DeserializerProvider provider,\n+            JavaType type, BeanProperty property)\n         throws JsonMappingException\n     {\n-        JsonDeserializer<Object> deser = provider.findValueDeserializer(config, type, property);\n-        return deser;\n+        return provider.findValueDeserializer(config, type, property);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n                     if (_baseType != null && _baseType.getClass() == type.getClass()) {\n                         type = _baseType.narrowBy(type.getRawClass());\n                     }\n-                    deser = ctxt.getDeserializerProvider().findValueDeserializer(ctxt.getConfig(), type, _property);\n+                    deser = ctxt.findValueDeserializer(type, _property);\n                 }\n                 _deserializers.put(typeId, deser);\n             }\n         }\n         synchronized (_defaultImpl) {\n             if (_defaultImplDeserializer == null) {\n-                _defaultImplDeserializer = ctxt.getDeserializerProvider().findValueDeserializer(ctxt.getConfig(),\n-                        _defaultImpl, _property);\n+                _defaultImplDeserializer = ctxt.findValueDeserializer(_defaultImpl, _property);\n             }\n             return _defaultImplDeserializer;\n         }", "timestamp": 1327387406, "metainfo": ""}