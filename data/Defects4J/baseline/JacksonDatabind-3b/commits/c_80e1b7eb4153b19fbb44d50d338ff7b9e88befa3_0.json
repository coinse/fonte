{"sha": "80e1b7eb4153b19fbb44d50d338ff7b9e88befa3", "log": "Add a (failing) test for #383", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n         return mappingException(targetClass, _parser.getCurrentToken());\n     }\n \n-    public JsonMappingException mappingException(Class<?> targetClass, JsonToken token)\n-    {\n-        String clsName = _calcName(targetClass);\n-        return JsonMappingException.from(_parser,\n-                \"Can not deserialize instance of \"+clsName+\" out of \"+token+\" token\");\n+    public JsonMappingException mappingException(Class<?> targetClass, JsonToken token) {\n+        return JsonMappingException.from(_parser, \"Can not deserialize instance of \"+_calcName(targetClass)+\" out of \"+token+\" token\");\n     }\n     \n     /**\n      * to indicate problem with physically constructing instance of\n      * specified class (missing constructor, exception from constructor)\n      */\n-    public JsonMappingException instantiationException(Class<?> instClass, Throwable t)\n-    {\n+    public JsonMappingException instantiationException(Class<?> instClass, Throwable t) {\n         return JsonMappingException.from(_parser,\n-                \"Can not construct instance of \"+instClass.getName()+\", problem: \"+t.getMessage(),\n-                t);\n+                \"Can not construct instance of \"+instClass.getName()+\", problem: \"+t.getMessage(), t);\n     }\n \n     public JsonMappingException instantiationException(Class<?> instClass, String msg) {\n      * Object field name was not in format to be able to deserialize specified\n      * key type.\n      */\n-    public JsonMappingException weirdKeyException(Class<?> keyClass, String keyValue, String msg)\n-    {\n+    public JsonMappingException weirdKeyException(Class<?> keyClass, String keyValue, String msg) {\n         return InvalidFormatException.from(_parser,\n                 \"Can not construct Map key of type \"+keyClass.getName()+\" from String \\\"\"+_desc(keyValue)+\"\\\": \"+msg,\n                 keyValue, keyClass);\n      * Helper method for indicating that the current token was expected to be another\n      * token.\n      */\n-    public JsonMappingException wrongTokenException(JsonParser jp, JsonToken expToken, String msg)\n-    {\n+    public JsonMappingException wrongTokenException(JsonParser jp, JsonToken expToken, String msg) {\n         return JsonMappingException.from(jp, \"Unexpected token (\"+jp.getCurrentToken()+\"), expected \"+expToken+\": \"+msg);\n     }\n \n      * Helper method for constructing exception to indicate that given\n      * type id (parsed from JSON) could not be converted to a Java type.\n      */\n-    public JsonMappingException unknownTypeException(JavaType type, String id)\n-    {\n+    public JsonMappingException unknownTypeException(JavaType type, String id) {\n         return JsonMappingException.from(_parser, \"Could not resolve type id '\"+id+\"' into a subtype of \"+type);\n     }\n \n-    public JsonMappingException endOfInputException(Class<?> instClass)\n-    {\n+    public JsonMappingException endOfInputException(Class<?> instClass) {\n         return JsonMappingException.from(_parser, \"Unexpected end-of-input when trying to deserialize a \"\n                 +instClass.getName());\n     }\n         return df;\n     }\n \n-    protected String determineClassName(Object instance)\n-    {\n+    protected String determineClassName(Object instance) {\n         return ClassUtil.getClassDescription(instance);\n     }\n     \n     /**********************************************************\n      */\n \n-    protected String _calcName(Class<?> cls)\n-    {\n+    protected String _calcName(Class<?> cls) {\n         if (cls.isArray()) {\n             return _calcName(cls.getComponentType())+\"[]\";\n         }\n         return cls.getName();\n     }\n     \n-    protected String _valueDesc()\n-    {\n+    protected String _valueDesc() {\n         try {\n             return _desc(_parser.getText());\n         } catch (Exception e) {\n             return \"[N/A]\";\n         }\n     }\n-    protected String _desc(String desc)\n-    {\n+\n+    protected String _desc(String desc) {\n         // !!! should we quote it? (in case there are control chars, linefeeds)\n         if (desc.length() > MAX_ERROR_STR_LEN) {\n             desc = desc.substring(0, MAX_ERROR_STR_LEN) + \"]...[\" + desc.substring(desc.length() - MAX_ERROR_STR_LEN);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n  * setter-backed properties, as well as a few more esoteric variations,\n  * can be handled.\n  */\n+@SuppressWarnings(\"serial\")\n public abstract class SettableBeanProperty\n     implements BeanProperty,\n         java.io.Serializable\n {\n-    private static final long serialVersionUID = -1026580169193933453L;\n-\n     /**\n      * To avoid nasty NPEs, let's use a placeholder for _valueDeserializer,\n      * if real deserializer is not (yet) available.\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/FailingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/FailingDeserializer.java\n     }\n     \n     @Override\n-    public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n-        throws JsonMappingException\n-    {\n+    public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws JsonMappingException{\n         throw ctxt.mappingException(_message);\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrapped.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrapped.java\n     /**********************************************************\n      */\n \n-    private final ObjectMapper mapper = new ObjectMapper();\n-    \n-    public void testSimpleUnwrappingSerialize() throws Exception\n-    {\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public void testSimpleUnwrappingSerialize() throws Exception {\n         assertEquals(\"{\\\"name\\\":\\\"Tatu\\\",\\\"x\\\":1,\\\"y\\\":2}\",\n-                mapper.writeValueAsString(new Unwrapping(\"Tatu\", 1, 2)));\n+                MAPPER.writeValueAsString(new Unwrapping(\"Tatu\", 1, 2)));\n     }\n-    public void testDeepUnwrappingSerialize() throws Exception\n-    {\n+\n+    public void testDeepUnwrappingSerialize() throws Exception {\n         assertEquals(\"{\\\"name\\\":\\\"Tatu\\\",\\\"x\\\":1,\\\"y\\\":2}\",\n-                mapper.writeValueAsString(new DeepUnwrapping(\"Tatu\", 1, 2)));\n+                MAPPER.writeValueAsString(new DeepUnwrapping(\"Tatu\", 1, 2)));\n     }\n \n     /*\n     /* Tests, deserialization\n     /**********************************************************\n      */\n-    \n+\n     public void testSimpleUnwrappedDeserialize() throws Exception\n     {\n-        Unwrapping bean = mapper.readValue(\"{\\\"name\\\":\\\"Tatu\\\",\\\"y\\\":7,\\\"x\\\":-13}\",\n+        Unwrapping bean = MAPPER.readValue(\"{\\\"name\\\":\\\"Tatu\\\",\\\"y\\\":7,\\\"x\\\":-13}\",\n                 Unwrapping.class);\n         assertEquals(\"Tatu\", bean.name);\n         Location loc = bean.location;\n         assertEquals(-13, loc.x);\n         assertEquals(7, loc.y);\n     }\n-    \n+\n     public void testDoubleUnwrapping() throws Exception\n     {\n-        TwoUnwrappedProperties bean = mapper.readValue(\"{\\\"first\\\":\\\"Joe\\\",\\\"y\\\":7,\\\"last\\\":\\\"Smith\\\",\\\"x\\\":-13}\",\n+        TwoUnwrappedProperties bean = MAPPER.readValue(\"{\\\"first\\\":\\\"Joe\\\",\\\"y\\\":7,\\\"last\\\":\\\"Smith\\\",\\\"x\\\":-13}\",\n                 TwoUnwrappedProperties.class);\n         Location loc = bean.location;\n         assertNotNull(loc);\n         assertEquals(\"Joe\", name.first);\n         assertEquals(\"Smith\", name.last);\n     }\n-    \n+\n     public void testDeepUnwrapping() throws Exception\n     {\n-        DeepUnwrapping bean = mapper.readValue(\"{\\\"x\\\":3,\\\"name\\\":\\\"Bob\\\",\\\"y\\\":27}\",\n+        DeepUnwrapping bean = MAPPER.readValue(\"{\\\"x\\\":3,\\\"name\\\":\\\"Bob\\\",\\\"y\\\":27}\",\n                 DeepUnwrapping.class);\n         Unwrapping uw = bean.unwrapped;\n         assertNotNull(uw);\n         assertEquals(3, loc.x);\n         assertEquals(27, loc.y);\n     }\n-    \n+\n     public void testUnwrappedDeserializeWithCreator() throws Exception\n     {\n-        UnwrappingWithCreator bean = mapper.readValue(\"{\\\"x\\\":1,\\\"y\\\":2,\\\"name\\\":\\\"Tatu\\\"}\",\n+        UnwrappingWithCreator bean = MAPPER.readValue(\"{\\\"x\\\":1,\\\"y\\\":2,\\\"name\\\":\\\"Tatu\\\"}\",\n                 UnwrappingWithCreator.class);\n         assertEquals(\"Tatu\", bean.name);\n         Location loc = bean.location;\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestUnwrappedIssue383.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestUnwrappedIssue383 extends BaseMapTest\n+{\n+    // [Issue#383]\n+    static class RecursivePerson {\n+        public String name;\n+        public int age;\n+        @JsonUnwrapped(prefix=\"child.\") public RecursivePerson child;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Tests, serialization\n+    /**********************************************************\n+     */\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public void testRecursiveUsage() throws Exception\n+    {\n+        final String JSON = \"{ 'name': 'Bob', 'age': 45, 'gender': 0, 'child.name': 'Bob jr', 'child.age': 15 }}\";\n+        RecursivePerson p = MAPPER.readValue(aposToQuotes(JSON), RecursivePerson.class);\n+        assertNotNull(p);\n+        assertEquals(\"Bob\", p.name);\n+        assertNotNull(p.child);\n+        assertEquals(\"Bob jr\", p.child.name);\n+    }\n+}", "timestamp": 1389499893, "metainfo": ""}