{"sha": "bb0e2b5edd644e9dd438c29675678a802bbe8f7a", "log": "Implement #306", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n     }\n \n     /**\n+     * @deprecated Since 2.3: use the one that takes generic {@link Annotated}\n+     */\n+    @Deprecated\n+    public Object findFilterId(AnnotatedClass ac) {\n+        return findFilterId((Annotated) ac);\n+    }\n+\n+    /**\n      * Method for finding if annotated class has associated filter; and if so,\n      * to return id that is used to locate filter.\n      * \n      * @return Id of the filter to use for filtering properties of annotated\n      *    class, if any; or null if none found.\n      */\n-    public Object findFilterId(AnnotatedClass ac) {\n+    public Object findFilterId(Annotated ann) {\n         return null;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n         return result;\n     }\n \n+    @Deprecated\n     @Override\n     public Object findFilterId(AnnotatedClass ac)\n     {\n         return id;\n     }\n \n+    @Override\n+    public Object findFilterId(Annotated ann)\n+    {\n+        Object id = _primary.findFilterId(ann);\n+        if (id == null) {\n+            id = _secondary.findFilterId(ann);\n+        }\n+        return id;\n+    }\n+    \n     @Override\n     public Object findNamingStrategy(AnnotatedClass ac)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n         return (ignore == null) ? null : ignore.value();\n     }\n \n-    @Override\n-    public Object findFilterId(AnnotatedClass ac)\n-    {\n-        JsonFilter ann = ac.getAnnotation(JsonFilter.class);\n+    /**\n+     * @deprecated Use {@link #findFilterId(Annotated)} instead\n+     */\n+    @Deprecated\n+    @Override\n+    public Object findFilterId(AnnotatedClass ac) {\n+        return _findFilterId(ac);\n+    }\n+    \n+    @Override\n+    public Object findFilterId(Annotated a) {\n+        return _findFilterId(a);\n+    }\n+\n+    protected final Object _findFilterId(Annotated a)\n+    {\n+        JsonFilter ann = a.getAnnotation(JsonFilter.class);\n         if (ann != null) {\n             String id = ann.value();\n             // Empty String is same as not having annotation, to allow overrides\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n \n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer;\n import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n         super(src);\n     }\n \n-    protected BeanSerializer(BeanSerializerBase src, ObjectIdWriter objectIdWriter) {\n-        super(src, objectIdWriter);\n+    protected BeanSerializer(BeanSerializerBase src,\n+            ObjectIdWriter objectIdWriter, Object filterId) {\n+        super(src, objectIdWriter, filterId);\n     }\n \n     protected BeanSerializer(BeanSerializerBase src, String[] toIgnore) {\n         super(src, toIgnore);\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Life-cycle: factory methods, fluent factories\n     }\n \n     @Override\n-    public BeanSerializer withObjectIdWriter(ObjectIdWriter objectIdWriter) {\n-        return new BeanSerializer(this, objectIdWriter);\n+    public BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter) {\n+        return new BeanSerializer(this, objectIdWriter, _propertyFilterId);\n     }\n \n     @Override\n-    protected BeanSerializer withIgnorals(String[] toIgnore) {\n+    protected BeanSerializerBase withFilterId(Object filterId) {\n+        return new BeanSerializer(this, _objectIdWriter, filterId);\n+    }\n+\n+    @Override\n+    protected BeanSerializerBase withIgnorals(String[] toIgnore) {\n         return new BeanSerializer(this, toIgnore);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java\n \n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n     /**********************************************************\n      */\n \n-\n     public BeanAsArraySerializer(BeanSerializerBase src) {    \n         super(src, (ObjectIdWriter) null);\n         _defaultSerializer = src;\n         _defaultSerializer = src;\n     }\n \n+    protected BeanAsArraySerializer(BeanSerializerBase src,\n+            ObjectIdWriter oiw, Object filterId) {\n+        super(src, oiw, filterId);\n+        _defaultSerializer = src;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Life-cycle: factory methods, fluent factories\n         return _defaultSerializer.withObjectIdWriter(objectIdWriter);\n     }\n \n+    @Override\n+    protected BeanSerializerBase withFilterId(Object filterId) {\n+        return new BeanAsArraySerializer(this, _objectIdWriter, filterId);\n+    }\n+    \n     @Override\n     protected BeanAsArraySerializer withIgnorals(String[] toIgnore) {\n         return new BeanAsArraySerializer(this, toIgnore);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java\n         _nameTransformer = transformer;\n     }\n \n-    public UnwrappingBeanSerializer(UnwrappingBeanSerializer src, ObjectIdWriter objectIdWriter) {    \n+    public UnwrappingBeanSerializer(UnwrappingBeanSerializer src,\n+            ObjectIdWriter objectIdWriter) {\n         super(src, objectIdWriter);\n         _nameTransformer = src._nameTransformer;\n     }\n \n+    public UnwrappingBeanSerializer(UnwrappingBeanSerializer src,\n+            ObjectIdWriter objectIdWriter, Object filterId) {\n+        super(src, objectIdWriter, filterId);\n+        _nameTransformer = src._nameTransformer;\n+    }\n+    \n     protected UnwrappingBeanSerializer(UnwrappingBeanSerializer src, String[] toIgnore) {\n         super(src, toIgnore);\n         _nameTransformer = src._nameTransformer;\n     }\n \n     @Override\n-    public UnwrappingBeanSerializer withObjectIdWriter(ObjectIdWriter objectIdWriter) {\n+    public BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter) {\n         return new UnwrappingBeanSerializer(this, objectIdWriter);\n     }\n \n     @Override\n-    protected UnwrappingBeanSerializer withIgnorals(String[] toIgnore) {\n+    protected BeanSerializerBase withFilterId(Object filterId) {\n+        return new UnwrappingBeanSerializer(this, _objectIdWriter, filterId);\n+    }\n+    \n+    @Override\n+    protected BeanSerializerBase withIgnorals(String[] toIgnore) {\n         return new UnwrappingBeanSerializer(this, toIgnore);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n         _serializationShape = src._serializationShape;\n     }\n \n-    protected BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter)\n+    protected BeanSerializerBase(BeanSerializerBase src,\n+            ObjectIdWriter objectIdWriter)\n+    {\n+        this(src, objectIdWriter, src._propertyFilterId);\n+    }\n+    \n+    /**\n+     * @since 2.3\n+     */\n+    protected BeanSerializerBase(BeanSerializerBase src,\n+            ObjectIdWriter objectIdWriter, Object filterId)\n     {\n         super(src._handledType);\n         _props = src._props;\n         _typeId = src._typeId;\n         _anyGetterWriter = src._anyGetterWriter;\n         _objectIdWriter = objectIdWriter;\n-        _propertyFilterId = src._propertyFilterId;\n+        _propertyFilterId = filterId;\n         _serializationShape = src._serializationShape;\n     }\n \n     }\n     \n     /**\n-     * Fluent factory used for creating a new instance with different\n+     * Mutant factory used for creating a new instance with different\n      * {@link ObjectIdWriter}.\n      * \n      * @since 2.0\n     public abstract BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter);\n \n     /**\n-     * Fluent factory used for creating a new instance with additional\n+     * Mutant factory used for creating a new instance with additional\n      * set of properties to ignore (from properties this instance otherwise has)\n      * \n      * @since 2.0\n     protected abstract BeanSerializerBase withIgnorals(String[] toIgnore);\n \n     /**\n-     * Fluent factory for creating a variant that output POJO as a\n+     * Mutant factory for creating a variant that output POJO as a\n      * JSON Array. Implementations may ignore this request if output\n      * as array is not possible (either at all, or reliably).\n      * \n      * @since 2.1\n      */\n     protected abstract BeanSerializerBase asArraySerializer();\n+\n+    /**\n+     * Mutant factory used for creating a new instance with different\n+     * {@link JsonFilter}.\n+     * \n+     * @since 2.3\n+     */\n+    protected abstract BeanSerializerBase withFilterId(Object filterId);\n     \n     /**\n      * Copy-constructor that is useful for sub-classes that just want to\n     {\n         ObjectIdWriter oiw = _objectIdWriter;\n         String[] ignorals = null;\n+        Object newFilterId = null;\n         final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n         final AnnotatedMember accessor = (property == null || intr == null)\n                 ? null : property.getMember();\n                             objectIdInfo.getAlwaysAsId());\n                 }\n             }\n+            \n+            // Or change Filter Id in use?\n+            Object filterId = intr.findFilterId(accessor);\n+            if (filterId != null) {\n+                // but only consider case of adding a new filter id (no removal via annotation)\n+                if (_propertyFilterId == null || !filterId.equals(_propertyFilterId)) {\n+                    newFilterId = filterId;\n+                }\n+            }\n         }\n         // either way, need to resolve serializer:\n         BeanSerializerBase contextual = this;\n         if (ignorals != null && ignorals.length != 0) {\n             contextual = contextual.withIgnorals(ignorals);\n         }\n+        if (newFilterId != null) {\n+            contextual = contextual.withFilterId(newFilterId);\n+        }\n+        \n         // One more thing: are we asked to serialize POJO as array?\n         JsonFormat.Shape shape = null;\n         if (accessor != null) {\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestFiltering.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestFiltering.java\n     {\n         FilterProvider prov = new SimpleFilterProvider()\n             .addFilter(\"RootFilter\", SimpleBeanPropertyFilter.filterOutAllExcept(\"a\"))\n-            .addFilter(\"minimal\", SimpleBeanPropertyFilter.filterOutAllExcept(\"b\"));\n+            .addFilter(\"b\", SimpleBeanPropertyFilter.filterOutAllExcept(\"b\"));\n \n         assertEquals(\"{\\\"first\\\":{\\\"a\\\":\\\"a\\\"},\\\"second\\\":{\\\"b\\\":\\\"b\\\"}}\",\n                 MAPPER.writer(prov).writeValueAsString(new FilteredProps()));", "timestamp": 1379045251, "metainfo": ""}