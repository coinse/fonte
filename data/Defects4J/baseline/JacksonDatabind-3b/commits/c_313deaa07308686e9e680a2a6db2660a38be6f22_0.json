{"sha": "313deaa07308686e9e680a2a6db2660a38be6f22", "log": "Start conversion of type id serialization to support use of native type ids (by YAML first)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n      */\n     public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)\n         throws JsonMappingException;\n-    \n+\n     /*\n     /**********************************************************\n     /* Helper classes\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java\n     public void writeTypePrefixForObject(Object value, JsonGenerator jgen)\n         throws IOException, JsonProcessingException\n     {\n-        jgen.writeStartArray();\n-        jgen.writeString(idFromValue(value));\n-        jgen.writeStartObject();\n+        final String typeId = idFromValue(value);\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            jgen.writeStartArray();\n+            jgen.writeString(typeId);\n+            jgen.writeStartObject();\n+        }\n     }\n \n     @Override\n             Class<?> type)\n         throws IOException, JsonProcessingException\n     {\n-        jgen.writeStartArray();\n-        jgen.writeString(idFromValueAndType(value, type));\n-        jgen.writeStartObject();\n+        final String typeId = idFromValueAndType(value, type);\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            jgen.writeStartArray();\n+            jgen.writeString(typeId);\n+            jgen.writeStartObject();\n+        }\n     }\n     \n     @Override\n     public void writeTypePrefixForArray(Object value, JsonGenerator jgen)\n         throws IOException, JsonProcessingException\n     {\n-        jgen.writeStartArray();\n-        jgen.writeString(idFromValue(value));\n-        jgen.writeStartArray();\n+        final String typeId = idFromValue(value);\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            jgen.writeStartArray();\n+            jgen.writeString(typeId);\n+            jgen.writeStartArray();\n+        }\n     }\n \n     @Override\n             Class<?> type)\n         throws IOException, JsonProcessingException\n     {\n-        jgen.writeStartArray();\n-        jgen.writeString(idFromValueAndType(value, type));\n-        jgen.writeStartArray();\n+        final String typeId = idFromValueAndType(value, type);\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            jgen.writeStartArray();\n+            jgen.writeString(typeId);\n+            jgen.writeStartArray();\n+        }\n     }\n     \n     @Override\n     public void writeTypePrefixForScalar(Object value, JsonGenerator jgen)\n             throws IOException, JsonProcessingException\n     {\n-        // only need the wrapper array\n-        jgen.writeStartArray();\n-        jgen.writeString(idFromValue(value));\n+        final String typeId = idFromValue(value);\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            // only need the wrapper array\n+            jgen.writeStartArray();\n+            jgen.writeString(typeId);\n+        }\n     }\n \n     @Override\n             Class<?> type)\n         throws IOException, JsonProcessingException\n     {\n-        // only need the wrapper array\n-        jgen.writeStartArray();\n-        jgen.writeString(idFromValueAndType(value, type));\n+        final String typeId = idFromValueAndType(value, type);\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            // only need the wrapper array\n+            jgen.writeStartArray();\n+            jgen.writeString(typeId);\n+        }\n     }\n \n     /*\n     public void writeTypeSuffixForObject(Object value, JsonGenerator jgen)\n             throws IOException, JsonProcessingException\n     {\n-        jgen.writeEndObject();\n-        jgen.writeEndArray();\n+        if (!jgen.canWriteTypeId()) {\n+            jgen.writeEndObject();\n+            jgen.writeEndArray();\n+        }\n     }\n \n     @Override\n     public void writeTypeSuffixForArray(Object value, JsonGenerator jgen)\n             throws IOException, JsonProcessingException\n     {\n-        // wrapper array first, and then array caller needs to close\n-        jgen.writeEndArray();\n-        jgen.writeEndArray();\n+        if (!jgen.canWriteTypeId()) {\n+            // wrapper array first, and then array caller needs to close\n+            jgen.writeEndArray();\n+            jgen.writeEndArray();\n+        }\n     }\n \n     @Override\n     public void writeTypeSuffixForScalar(Object value, JsonGenerator jgen)\n             throws IOException, JsonProcessingException\n     {\n-        // just the wrapper array to close\n-        jgen.writeEndArray();\n+        if (!jgen.canWriteTypeId()) {\n+            // just the wrapper array to close\n+            jgen.writeEndArray();\n+        }\n     }\n     \n     /*\n \n     @Override\n     public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException {\n-        jgen.writeStartArray();\n-        jgen.writeString(typeId);\n-        jgen.writeStartObject();\n+        throws IOException, JsonProcessingException\n+    {\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            jgen.writeStartArray();\n+            jgen.writeString(typeId);\n+            jgen.writeStartObject();\n+        }\n     }\n     \n     @Override\n     public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId)\n         throws IOException, JsonProcessingException\n     {\n-        jgen.writeStartArray();\n-        jgen.writeString(typeId);\n-        jgen.writeStartArray();\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            jgen.writeStartArray();\n+            jgen.writeString(typeId);\n+            jgen.writeStartArray();\n+        }\n     }\n \n     @Override\n     public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId)\n         throws IOException, JsonProcessingException\n     {\n-        jgen.writeStartArray();\n-        jgen.writeString(typeId);\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            jgen.writeStartArray();\n+            jgen.writeString(typeId);\n+        }\n     }\n \n     @Override\n     public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException {\n-        writeTypeSuffixForObject(value, jgen); // standard impl works fine\n+        throws IOException, JsonProcessingException\n+    {\n+        if (!jgen.canWriteTypeId()) {\n+            writeTypeSuffixForObject(value, jgen); // standard impl works fine\n+        }\n     }\n \n     @Override\n     public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId)\n-            throws IOException, JsonProcessingException {\n-        writeTypeSuffixForArray(value, jgen); // standard impl works fine\n+            throws IOException, JsonProcessingException\n+    {\n+        if (!jgen.canWriteTypeId()) {\n+            writeTypeSuffixForArray(value, jgen); // standard impl works fine\n+        }\n     }\n \n     @Override\n     public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException {\n-        writeTypeSuffixForScalar(value, jgen); // standard impl works fine\n+        throws IOException, JsonProcessingException\n+    {\n+        if (!jgen.canWriteTypeId()) {\n+            writeTypeSuffixForScalar(value, jgen); // standard impl works fine\n+        }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java\n  * Note that implementation of serialization is bit cumbersome as we must\n  * serialized external type id AFTER object; this because callback only\n  * occurs after field name has been written.\n+ *<p>\n+ * Also note that this type of type id inclusion will NOT try to make use\n+ * of native Type Ids, even if those exist.\n  */\n public class AsExternalTypeSerializer\n    extends TypeSerializerBase\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.java\n     public void writeTypePrefixForObject(Object value, JsonGenerator jgen)\n         throws IOException, JsonProcessingException\n     {\n-        jgen.writeStartObject();\n-        jgen.writeStringField(_typePropertyName, idFromValue(value));\n+        final String typeId = idFromValue(value);\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            jgen.writeStartObject();\n+            jgen.writeStringField(_typePropertyName, typeId);\n+        }\n     }\n \n     @Override\n     public void writeTypePrefixForObject(Object value, JsonGenerator jgen, Class<?> type)\n         throws IOException, JsonProcessingException\n     {\n-        jgen.writeStartObject();\n-        jgen.writeStringField(_typePropertyName, idFromValueAndType(value, type));\n+        final String typeId = idFromValueAndType(value, type);\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            jgen.writeStartObject();\n+            jgen.writeStringField(_typePropertyName, typeId);\n+        }\n     }\n     \n     //public void writeTypePrefixForArray(Object value, JsonGenerator jgen)\n     public void writeTypeSuffixForObject(Object value, JsonGenerator jgen)\n         throws IOException, JsonProcessingException\n     {\n-        jgen.writeEndObject();\n+        if (!jgen.canWriteTypeId()) {\n+            jgen.writeEndObject();\n+        }\n     }\n \n     //public void writeTypeSuffixForArray(Object value, JsonGenerator jgen)\n     \n     @Override\n     public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException {\n-        jgen.writeStartObject();\n-        jgen.writeStringField(_typePropertyName, typeId);\n+        throws IOException, JsonProcessingException\n+    {\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            jgen.writeStartObject();\n+            jgen.writeStringField(_typePropertyName, typeId);\n+        }\n     }\n \n     @Override\n     public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException {\n-        jgen.writeEndObject();\n+        throws IOException, JsonProcessingException\n+    {\n+        if (!jgen.canWriteTypeId()) {\n+            jgen.writeEndObject();\n+        }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java\n  * will use {@link As#WRAPPER_ARRAY} mechanism as fallback: that is,\n  * just use a wrapping array with type information as the first element\n  * and value as second.\n- * \n- * @author tatu\n  */\n public class AsWrapperTypeSerializer\n     extends TypeSerializerBase\n     public void writeTypePrefixForObject(Object value, JsonGenerator jgen)\n         throws IOException, JsonProcessingException\n     {\n-        // wrapper\n-        jgen.writeStartObject();\n-        // and then JSON Object start caller wants\n-        jgen.writeObjectFieldStart(idFromValue(value));\n+        final String typeId = idFromValue(value);\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            // wrapper\n+            jgen.writeStartObject();\n+            // and then JSON Object start caller wants\n+            jgen.writeObjectFieldStart(typeId);\n+        }\n     }\n \n     @Override\n             Class<?> type)\n         throws IOException, JsonProcessingException\n     {\n-        // wrapper\n-        jgen.writeStartObject();\n-        // and then JSON Object start caller wants\n-        jgen.writeObjectFieldStart(idFromValueAndType(value, type));\n+        final String typeId = idFromValueAndType(value, type);\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            // wrapper\n+            jgen.writeStartObject();\n+            // and then JSON Object start caller wants\n+            jgen.writeObjectFieldStart(typeId);\n+        }\n     }\n     \n     @Override\n     public void writeTypePrefixForArray(Object value, JsonGenerator jgen)\n         throws IOException, JsonProcessingException\n     {\n-        // can still wrap ok\n-        jgen.writeStartObject();\n-        // and then JSON Array start caller wants\n-        jgen.writeArrayFieldStart(idFromValue(value));\n+        final String typeId = idFromValue(value);\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            // can still wrap ok\n+            jgen.writeStartObject();\n+            // and then JSON Array start caller wants\n+            jgen.writeArrayFieldStart(typeId);\n+        }\n     }\n \n     @Override\n             Class<?> type)\n         throws IOException, JsonProcessingException\n     {\n-        // can still wrap ok\n-        jgen.writeStartObject();\n-        // and then JSON Array start caller wants\n-        jgen.writeArrayFieldStart(idFromValueAndType(value, type));\n+        final String typeId = idFromValueAndType(value, type);\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            // can still wrap ok\n+            jgen.writeStartObject();\n+            // and then JSON Array start caller wants\n+            jgen.writeArrayFieldStart(typeId);\n+        }\n     }\n \n     @Override\n     public void writeTypePrefixForScalar(Object value, JsonGenerator jgen)\n         throws IOException, JsonProcessingException\n     {\n-        // can still wrap ok\n-        jgen.writeStartObject();\n-        jgen.writeFieldName(idFromValue(value));\n+        final String typeId = idFromValue(value);\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            // can still wrap ok\n+            jgen.writeStartObject();\n+            jgen.writeFieldName(typeId);\n+        }\n     }\n \n     @Override\n             Class<?> type)\n         throws IOException, JsonProcessingException\n     {\n-        // can still wrap ok\n-        jgen.writeStartObject();\n-        jgen.writeFieldName(idFromValueAndType(value, type));\n+        final String typeId = idFromValueAndType(value, type);\n+        if (jgen.canWriteTypeId()) {\n+            jgen.writeTypeId(typeId);\n+        } else {\n+            // can still wrap ok\n+            jgen.writeStartObject();\n+            jgen.writeFieldName(typeId);\n+        }\n     }\n     \n     @Override\n     public void writeTypeSuffixForObject(Object value, JsonGenerator jgen)\n         throws IOException, JsonProcessingException\n     {\n-        // first close JSON Object caller used\n-        jgen.writeEndObject();\n-        // and then wrapper\n-        jgen.writeEndObject();\n+        if (!jgen.canWriteTypeId()) {\n+            // first close JSON Object caller used\n+            jgen.writeEndObject();\n+            // and then wrapper\n+            jgen.writeEndObject();\n+        }\n     }\n \n     @Override\n     public void writeTypeSuffixForArray(Object value, JsonGenerator jgen)\n         throws IOException, JsonProcessingException\n     {\n-        // first close array caller needed\n-        jgen.writeEndArray();\n-        // then wrapper object\n-        jgen.writeEndObject();\n+        if (!jgen.canWriteTypeId()) {\n+            // first close array caller needed\n+            jgen.writeEndArray();\n+            // then wrapper object\n+            jgen.writeEndObject();\n+        }\n     }\n     \n     @Override\n     public void writeTypeSuffixForScalar(Object value, JsonGenerator jgen)\n         throws IOException, JsonProcessingException\n     {\n-        // just need to close the wrapper object\n-        jgen.writeEndObject();\n+        if (!jgen.canWriteTypeId()) {\n+            // just need to close the wrapper object\n+            jgen.writeEndObject();\n+        }\n     }\n \n     /*\n     @Override\n     public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n             throws IOException, JsonProcessingException {\n-        writeTypeSuffixForObject(value, jgen); // standard impl works fine\n+        if (!jgen.canWriteTypeId()) {\n+            writeTypeSuffixForObject(value, jgen); // standard impl works fine\n+        }\n     }\n \n     @Override\n     public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId)\n             throws IOException, JsonProcessingException {\n-        writeTypeSuffixForArray(value, jgen); // standard impl works fine\n+        if (!jgen.canWriteTypeId()) {\n+            writeTypeSuffixForArray(value, jgen); // standard impl works fine\n+        }\n     }\n \n     @Override\n     public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId)\n             throws IOException, JsonProcessingException {\n-        writeTypeSuffixForScalar(value, jgen); // standard impl works fine\n+        if (!jgen.canWriteTypeId()) {\n+            writeTypeSuffixForScalar(value, jgen); // standard impl works fine\n+        }\n     }\n }", "timestamp": 1375067775, "metainfo": ""}