{"sha": "56ecb7e4840dab20b04df0bb60ee98c92bfe9b29", "log": "Improved support for shorts  * Relies on the existance of JsonParser.NumberType.SHORT * JSONGenerator writeNumber(short v)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ShortNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ShortNode.java\n     @Override public JsonToken asToken() { return JsonToken.VALUE_NUMBER_INT; }\n \n     @Override\n-    public JsonParser.NumberType numberType() { return JsonParser.NumberType.INT; }\t// TODO: should be SHORT\n+    public JsonParser.NumberType numberType() { return JsonParser.NumberType.SHORT; }\n \n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n         allDeserializers.put(Long.TYPE.getName(), LongSerializer.instance);\n         allDeserializers.put(Byte.class.getName(), IntLikeSerializer.instance);\n         allDeserializers.put(Byte.TYPE.getName(), IntLikeSerializer.instance);\n-        allDeserializers.put(Short.class.getName(), IntLikeSerializer.instance);\n-        allDeserializers.put(Short.TYPE.getName(), IntLikeSerializer.instance);\n+        allDeserializers.put(Short.class.getName(), ShortSerializer.instance);\n+        allDeserializers.put(Short.TYPE.getName(), ShortSerializer.instance);\n \n         // Numbers, limited length floating point\n         allDeserializers.put(Float.class.getName(), FloatSerializer.instance);\n     /**********************************************************\n      */\n \n+    @JacksonStdImpl\n+    public final static class ShortSerializer\n+        extends StdScalarSerializer<Short>\n+    {\n+        final static ShortSerializer instance = new ShortSerializer();\n+    \n+        public ShortSerializer() { super(Short.class); }\n+        \n+        @Override\n+        public void serialize(Short value, JsonGenerator jgen, SerializerProvider provider)\n+            throws IOException, JsonGenerationException\n+        {\n+            jgen.writeNumber(value.shortValue());\n+        }\n+    \n+        @Override\n+        public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n+        {\n+            return createSchemaNode(\"number\", true);\t\t// msteiger: maybe \"integer\" or \"short\" ?\n+        }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+                throws JsonMappingException\n+        {\n+            JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);\n+            if (v2 != null) {\n+                v2.numberType(JsonParser.NumberType.SHORT);\n+            }\n+        }\n+    }\n+    \n     /**\n      * This is the special serializer for regular {@link java.lang.Integer}s\n      * (and primitive ints)\n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n     /* JsonGenerator implementation: write methods, primitive types\n     /**********************************************************\n      */\n+\n+    @Override\n+    public void writeNumber(short i) throws IOException, JsonGenerationException {\n+        _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+    }\n \n     @Override\n     public void writeNumber(int i) throws IOException, JsonGenerationException {\n         public NumberType getNumberType() throws IOException, JsonParseException\n         {\n             Number n = getNumberValue();\n+            if (n instanceof Short) return NumberType.SHORT;\n             if (n instanceof Integer) return NumberType.INT;\n             if (n instanceof Long) return NumberType.LONG;\n             if (n instanceof Double) return NumberType.DOUBLE;\n--- a/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n \n         @Override\n         public void writeNull() throws IOException, JsonGenerationException { }\n+\n+        @Override\n+        public void writeNumber(short v) throws IOException { }\n \n         @Override\n         public void writeNumber(int v) throws IOException { }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n         ShortNode n = ShortNode.valueOf((short) 1);\n         assertStandardEquals(n);\n         assertTrue(0 != n.hashCode());\n-//        assertEquals(JsonToken.VALUE_NUMBER_SHORT, n.asToken());\t\t// TODO: fix when available\n-        assertEquals(JsonParser.NumberType.INT, n.numberType());\n+        assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken());\n+        assertEquals(JsonParser.NumberType.SHORT, n.numberType());\n         assertEquals(1, n.intValue());\n         assertEquals(1L, n.longValue());\n         assertEquals(BigDecimal.ONE, n.decimalValue());", "timestamp": 1365534867, "metainfo": ""}