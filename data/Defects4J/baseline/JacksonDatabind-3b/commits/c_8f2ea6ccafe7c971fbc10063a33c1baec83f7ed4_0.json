{"sha": "8f2ea6ccafe7c971fbc10063a33c1baec83f7ed4", "log": "Implemented #190", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java\n      * @since 2.2\n      */\n     INFER_PROPERTY_MUTATORS(true),\n+\n+    /**\n+     * Feature that determines whether member fields declared as 'final' may\n+     * be auto-detected to be used mutators (used to change value of the logical\n+     * property) or not. If enabled, 'final' access modifier has no effect, and\n+     * such fields may be detected according to usual visibility and inference\n+     * rules; if disabled, such fields are NOT used as mutators except if\n+     * explicitly annotated for such use.\n+     *<p>\n+     * Feature is enabled by default, for backwards compatibility reasons.\n+     */\n+    ALLOW_FINAL_FIELDS_AS_MUTATORS(true),\n     \n     /*\n     /******************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n package com.fasterxml.jackson.databind.introspect;\n \n+import java.lang.reflect.Modifier;\n import java.util.*;\n \n import com.fasterxml.jackson.databind.*;\n     protected void _addFields()\n     {\n         final AnnotationIntrospector ai = _annotationIntrospector;\n+        /* 28-Mar-2013, tatu: For deserialization we may also want to remove\n+         *   final fields, as often they won't make very good mutators...\n+         *   (although, maybe surprisingly, JVM _can_ force setting of such fields!)\n+         */\n+        final boolean pruneFinalFields = !_forSerialization && !_config.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS);\n         \n         for (AnnotatedField f : _classDef.fields()) {\n             String implName = f.getName();\n             }\n             // and finally, may also have explicit ignoral\n             boolean ignored = (ai != null) && ai.hasIgnoreMarker(f);\n+            /* [Issue#190]: this is the place to prune final fields, if they are not\n+             *  to be used as mutators. Must verify they are not explicitly included.\n+             *  Also: if 'ignored' is set, need to included until a later point, to\n+             *  avoid losing ignoral information.\n+             */\n+            if (pruneFinalFields && (explName == null) && !ignored && Modifier.isFinal(f.getModifiers())) {\n+                continue;\n+            }\n+            \n             _property(implName).addField(f, explName, visible, ignored);\n         }\n     }\n     {\n         Iterator<Map.Entry<String,POJOPropertyBuilder>> it = _properties.entrySet().iterator();\n         final boolean forceNonVisibleRemoval = !_config.isEnabled(MapperFeature.INFER_PROPERTY_MUTATORS);\n-        \n+\n         while (it.hasNext()) {\n             Map.Entry<String, POJOPropertyBuilder> entry = it.next();\n             POJOPropertyBuilder prop = entry.getValue();\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestInferredMutators.java\n+package com.fasterxml.jackson.databind.introspect;\n+\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class TestInferredMutators\n+    extends BaseMapTest\n+{\n+    public static class Point {\n+        private int x;\n+        \n+        public int getX() { return x; }\n+    }\n+\n+    public static class FixedPoint {\n+        private final int x;\n+\n+        public FixedPoint() { x = 0; }\n+\n+        public int getX() { return x; }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    // for #190\n+    public void testFinalFieldIgnoral() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        // default value is 'enabled', for backwards compatibility\n+        assertTrue(mapper.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS));\n+        mapper.disable(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS);\n+        try {\n+            /*p =*/ mapper.readValue(\"{\\\"x\\\":2}\", FixedPoint.class);\n+            fail(\"Should not try to use final field\");\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"unrecognized field \\\"x\\\"\");\n+        }\n+    }\n+    \n+    // for #195\n+    public void testDeserializationInference() throws Exception\n+    {\n+        final String JSON = \"{\\\"x\\\":2}\";\n+        ObjectMapper mapper = new ObjectMapper();\n+        // First: default case, inference enabled:\n+        assertTrue(mapper.isEnabled(MapperFeature.INFER_PROPERTY_MUTATORS));\n+        Point p = mapper.readValue(JSON,  Point.class);\n+        assertEquals(2, p.x);\n+\n+        // but without it, should fail:\n+        mapper = new ObjectMapper();\n+        mapper.disable(MapperFeature.INFER_PROPERTY_MUTATORS);\n+        try {\n+            p = mapper.readValue(JSON,  Point.class);\n+            fail(\"Should not succeeed\");\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"unrecognized field \\\"x\\\"\");\n+        }\n+    }\n+}", "timestamp": 1364510766, "metainfo": ""}