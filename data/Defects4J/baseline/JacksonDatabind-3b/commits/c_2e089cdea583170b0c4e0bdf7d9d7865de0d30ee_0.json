{"sha": "2e089cdea583170b0c4e0bdf7d9d7865de0d30ee", "log": "Fix a potential issue with ignored root name", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n         JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n \n         // Ok: should we wrap result in an additional property (\"root name\")?\n+        final boolean wrap;\n         String rootName = _config.getRootName();\n-        final boolean wrap;\n         if (rootName == null) { // not explicitly specified\n             // [JACKSON-163]\n             wrap = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n         }\n         // root value, not reached via property:\n         JsonSerializer<Object> ser = findTypedValueSerializer(rootType, true, null);\n-        // [JACKSON-163]\n-        final boolean wrap = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n-        if (wrap) {\n+\n+        // Ok: should we wrap result in an additional property (\"root name\")?\n+        final boolean wrap;\n+        String rootName = _config.getRootName();\n+        if (rootName == null) { // not explicitly specified\n+            // [JACKSON-163]\n+            wrap = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n+            if (wrap) {\n+                jgen.writeStartObject();\n+                jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n+            }\n+        } else if (rootName.length() == 0) {\n+            wrap = false;\n+        } else { // [JACKSON-764]\n+            // empty String means explicitly disabled; non-empty that it is enabled\n+            wrap = true;\n             jgen.writeStartObject();\n-            jgen.writeFieldName(_rootNames.findRootName(rootType, _config));\n+            jgen.writeFieldName(rootName);\n         }\n         try {\n             ser.serialize(value, jgen, this);\n             return;\n         }\n         // Let's ensure types are compatible at this point\n-        if (rootType != null) {\n-            if (!rootType.getRawClass().isAssignableFrom(value.getClass())) {\n-                _reportIncompatibleRootType(value, rootType);\n-            }\n+        if ((rootType != null) && !rootType.getRawClass().isAssignableFrom(value.getClass())) {\n+            _reportIncompatibleRootType(value, rootType);\n         }\n         // root value, not reached via property:\n         if (ser == null) {\n             ser = findTypedValueSerializer(rootType, true, null);\n         }\n-        final boolean wrap = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n-        if (wrap) {\n+        // Ok: should we wrap result in an additional property (\"root name\")?\n+        final boolean wrap;\n+        String rootName = _config.getRootName();\n+        if (rootName == null) { // not explicitly specified\n+            // [JACKSON-163]\n+            wrap = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n+            if (wrap) {\n+                jgen.writeStartObject();\n+                jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n+            }\n+        } else if (rootName.length() == 0) {\n+            wrap = false;\n+        } else { // [JACKSON-764]\n+            // empty String means explicitly disabled; non-empty that it is enabled\n+            wrap = true;\n             jgen.writeStartObject();\n-            jgen.writeFieldName(_rootNames.findRootName(rootType, _config));\n+            jgen.writeFieldName(rootName);\n         }\n         try {\n             ser.serialize(value, jgen, this);", "timestamp": 1376543593, "metainfo": ""}