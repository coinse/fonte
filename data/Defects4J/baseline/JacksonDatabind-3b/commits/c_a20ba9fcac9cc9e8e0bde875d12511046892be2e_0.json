{"sha": "a20ba9fcac9cc9e8e0bde875d12511046892be2e", "log": "demote 'deserializeFromNumber'", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n             }\n         }\n         return _valueInstantiator.createFromString(ctxt, jp.getText());\n-    }\n-\n-    public Object deserializeFromNumber(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n-    {\n-        // First things first: id Object Id is used, most likely that's it\n-        if (_objectIdReader != null) {\n-            return deserializeFromObjectId(jp, ctxt);\n-        }\n-\n-        switch (jp.getNumberType()) {\n-        case INT:\n-            if (_delegateDeserializer != null) {\n-                if (!_valueInstantiator.canCreateFromInt()) {\n-                    Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n-                    if (_injectables != null) {\n-                        injectValues(ctxt, bean);\n-                    }\n-                    return bean;\n-                }\n-            }\n-            return _valueInstantiator.createFromInt(ctxt, jp.getIntValue());\n-        case LONG:\n-            if (_delegateDeserializer != null) {\n-                if (!_valueInstantiator.canCreateFromInt()) {\n-                    Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n-                    if (_injectables != null) {\n-                        injectValues(ctxt, bean);\n-                    }\n-                    return bean;\n-                }\n-            }\n-            return _valueInstantiator.createFromLong(ctxt, jp.getLongValue());\n-    \t}\n-        // actually, could also be BigInteger, so:\n-        if (_delegateDeserializer != null) {\n-            Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n-            if (_injectables != null) {\n-                injectValues(ctxt, bean);\n-            }\n-            return bean;\n-        }\n-        throw ctxt.instantiationException(getBeanClass(), \"no suitable creator method found to deserialize from JSON integer number\");\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n     protected abstract Object _deserializeUsingPropertyBased(final JsonParser jp,\n             final DeserializationContext ctxt)\n         throws IOException, JsonProcessingException;\n+\n+    public Object deserializeFromNumber(JsonParser jp, DeserializationContext ctxt)\n+        throws IOException, JsonProcessingException\n+    {\n+        // First things first: id Object Id is used, most likely that's it\n+        if (_objectIdReader != null) {\n+            return deserializeFromObjectId(jp, ctxt);\n+        }\n+\n+        switch (jp.getNumberType()) {\n+        case INT:\n+            if (_delegateDeserializer != null) {\n+                if (!_valueInstantiator.canCreateFromInt()) {\n+                    Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n+                    if (_injectables != null) {\n+                        injectValues(ctxt, bean);\n+                    }\n+                    return bean;\n+                }\n+            }\n+            return _valueInstantiator.createFromInt(ctxt, jp.getIntValue());\n+        case LONG:\n+            if (_delegateDeserializer != null) {\n+                if (!_valueInstantiator.canCreateFromInt()) {\n+                    Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n+                    if (_injectables != null) {\n+                        injectValues(ctxt, bean);\n+                    }\n+                    return bean;\n+                }\n+            }\n+            return _valueInstantiator.createFromLong(ctxt, jp.getLongValue());\n+        }\n+        // actually, could also be BigInteger, so:\n+        if (_delegateDeserializer != null) {\n+            Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n+            if (_injectables != null) {\n+                injectValues(ctxt, bean);\n+            }\n+            return bean;\n+        }\n+        throw ctxt.instantiationException(getBeanClass(), \"no suitable creator method found to deserialize from JSON integer number\");\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n             }\n         }\n         return _valueInstantiator.createFromString(ctxt, jp.getText());\n-    }\n-\n-    public Object deserializeFromNumber(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n-    {\n-        // First things first: id Object Id is used, most likely that's it\n-        if (_objectIdReader != null) {\n-            return deserializeFromObjectId(jp, ctxt);\n-        }\n-\n-        switch (jp.getNumberType()) {\n-        case INT:\n-            if (_delegateDeserializer != null) {\n-                if (!_valueInstantiator.canCreateFromInt()) {\n-                    Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n-                    if (_injectables != null) {\n-                        injectValues(ctxt, bean);\n-                    }\n-                    return bean;\n-                }\n-            }\n-            return _valueInstantiator.createFromInt(ctxt, jp.getIntValue());\n-        case LONG:\n-            if (_delegateDeserializer != null) {\n-                if (!_valueInstantiator.canCreateFromInt()) {\n-                    Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n-                    if (_injectables != null) {\n-                        injectValues(ctxt, bean);\n-                    }\n-                    return bean;\n-                }\n-            }\n-            return _valueInstantiator.createFromLong(ctxt, jp.getLongValue());\n-    \t}\n-        // actually, could also be BigInteger, so:\n-        if (_delegateDeserializer != null) {\n-            Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n-            if (_injectables != null) {\n-                injectValues(ctxt, bean);\n-            }\n-            return bean;\n-        }\n-        throw ctxt.instantiationException(getBeanClass(), \"no suitable creator method found to deserialize from JSON integer number\");\n     }\n \n     /**", "timestamp": 1353179163, "metainfo": ""}