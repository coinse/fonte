{"sha": "d92c1ed454e8474103e7eb698b0a855e7850dbb5", "log": "More refactoring: moving JavaType to databind; other smaller clean up", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AbstractTypeResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AbstractTypeResolver.java\n package com.fasterxml.jackson.databind;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n /**\n  * Defines interface for resolvers that can resolve abstract types into concrete\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n import java.lang.annotation.Annotation;\n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.annotate.JsonSerialize;\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n \n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n \n import java.lang.annotation.Annotation;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.util.Annotations;\n import com.fasterxml.jackson.databind.util.Named;\n--- a/src/main/java/com/fasterxml/jackson/databind/ClassIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ClassIntrospector.java\n package com.fasterxml.jackson.databind;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n /**\n  * Helper class used to introspect features of POJO value classes\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector;\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n import com.fasterxml.jackson.databind.util.ObjectBuffer;\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializerFactory.java\n package com.fasterxml.jackson.databind;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.deser.ValueInstantiators;\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializerProvider.java\n package com.fasterxml.jackson.databind;\n \n import com.fasterxml.jackson.core.io.SerializedString;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;\n import com.fasterxml.jackson.databind.deser.ValueInstantiators;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/Deserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/Deserializers.java\n package com.fasterxml.jackson.databind;\n \n import com.fasterxml.jackson.core.JsonNode;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.type.*;\n \n \n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/JavaType.java\n+package com.fasterxml.jackson.databind;\n+\n+import java.lang.reflect.Modifier;\n+\n+import com.fasterxml.jackson.core.type.ResolvedType;\n+\n+/**\n+ * Base class for type token classes used both to contain information\n+ * and as keys for deserializers.\n+ *<p>\n+ * Instances can (only) be constructed by\n+ * <code>com.fasterxml.jackson.databind.TypeFactory</code>\n+ * (included in \"jackson-databind\")\n+ */\n+public abstract class JavaType\n+    extends ResolvedType\n+{\n+    /**\n+     * This is the nominal type-erased Class that would be close to the\n+     * type represented (but not exactly type, due to type erasure: type\n+     * instance may have more information on this).\n+     * May be an interface or abstract class, so instantiation\n+     * may not be possible.\n+     */\n+    protected final Class<?> _class;\n+\n+    protected final int _hashCode;\n+\n+    /**\n+     * Optional handler (codec) that can be attached to indicate \n+     * what to use for handling (serializing, deserializing) values of\n+     * this specific type.\n+     *<p>\n+     * Note: untyped (i.e. caller has to cast) because it is used for\n+     * different kinds of handlers, with unrelated types.\n+     *<p>\n+     * TODO: make final and possibly promote to sub-classes\n+     */\n+    protected /*final*/ Object _valueHandler;\n+\n+    /**\n+     * Optional handler that can be attached to indicate how to handle\n+     * additional type metadata associated with this type.\n+     *<p>\n+     * Note: untyped (i.e. caller has to cast) because it is used for\n+     * different kinds of handlers, with unrelated types.\n+     *<p>\n+     * TODO: make final and possibly promote to sub-classes\n+     */\n+    protected /*final*/ Object _typeHandler;\n+    \n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * @param raw \"Raw\" (type-erased) class for this type\n+     * @param additionalHash Additional hash code to use, in addition\n+     *   to hash code of the class name \n+     */\n+    protected JavaType(Class<?> raw, int additionalHash)\n+    {\n+        _class = raw;\n+        _hashCode = raw.getName().hashCode() + additionalHash;\n+        _valueHandler = null;\n+        _typeHandler = null;\n+    }\n+    \n+    /**\n+     * \"Copy method\" that will construct a new instance that is identical to\n+     * this instance, except that it will have specified type handler assigned.\n+     * \n+     * @return Newly created type instance\n+     */\n+    public abstract JavaType withTypeHandler(Object h);\n+\n+    /**\n+     * \"Copy method\" that will construct a new instance that is identical to\n+     * this instance, except that its content type will have specified\n+     * type handler assigned.\n+     * \n+     * @return Newly created type instance\n+     */\n+    public abstract JavaType withContentTypeHandler(Object h);\n+\n+    /**\n+     * \"Copy method\" that will construct a new instance that is identical to\n+     * this instance, except that it will have specified value handler assigned.\n+     * \n+     * @return Newly created type instance\n+     */\n+    public abstract JavaType withValueHandler(Object h);\n+\n+    /**\n+     * \"Copy method\" that will construct a new instance that is identical to\n+     * this instance, except that it will have specified content value handler assigned.\n+     * \n+     * @return Newly created type instance\n+     */\n+    public abstract JavaType withContentValueHandler(Object h);\n+    \n+    /*\n+    /**********************************************************\n+    /* Type coercion fluent factory methods\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Method that can be called to do a \"narrowing\" conversions; that is,\n+     * to return a type with a raw class that is assignable to the raw\n+     * class of this type. If this is not possible, an\n+     * {@link IllegalArgumentException} is thrown.\n+     * If class is same as the current raw class, instance itself is\n+     * returned.\n+     */\n+    public JavaType narrowBy(Class<?> subclass)\n+    {\n+        // First: if same raw class, just return this instance\n+        if (subclass == _class) {\n+            return this;\n+        }\n+        // Otherwise, ensure compatibility\n+        _assertSubclass(subclass, _class);\n+        JavaType result = _narrow(subclass);\n+\n+        // TODO: these checks should NOT actually be needed; above should suffice:\n+        if (_valueHandler != result.getValueHandler()) {\n+            result = result.withValueHandler(_valueHandler);\n+        }\n+        if (_typeHandler != result.getTypeHandler()) {\n+            result = result.withTypeHandler(_typeHandler);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * More efficient version of {@link #narrowBy}, called by\n+     * internal framework in cases where compatibility checks\n+     * are to be skipped.\n+     */\n+    public JavaType forcedNarrowBy(Class<?> subclass)\n+    {\n+        if (subclass == _class) { // can still optimize for simple case\n+            return this;\n+        }\n+        JavaType result = _narrow(subclass);\n+        // TODO: these checks should NOT actually be needed; above should suffice:\n+        if (_valueHandler != result.getValueHandler()) {\n+            result = result.withValueHandler(_valueHandler);\n+        }\n+        if (_typeHandler != result.getTypeHandler()) {\n+            result = result.withTypeHandler(_typeHandler);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Method that can be called to do a \"widening\" conversions; that is,\n+     * to return a type with a raw class that could be assigned from this\n+     * type.\n+     * If such conversion is not possible, an\n+     * {@link IllegalArgumentException} is thrown.\n+     * If class is same as the current raw class, instance itself is\n+     * returned.\n+     */\n+    public JavaType widenBy(Class<?> superclass)\n+    {\n+        // First: if same raw class, just return this instance\n+        if (superclass == _class) {\n+            return this;\n+        }\n+        // Otherwise, ensure compatibility\n+        _assertSubclass(_class, superclass);\n+        return _widen(superclass);\n+    }\n+\n+    protected abstract JavaType _narrow(Class<?> subclass);\n+\n+    /**\n+     *<p>\n+     * Default implementation is just to call {@link #_narrow}, since\n+     * underlying type construction is usually identical\n+     */\n+    protected JavaType _widen(Class<?> superclass) {\n+        return _narrow(superclass);\n+    }\n+\n+    public abstract JavaType narrowContentsBy(Class<?> contentClass);\n+\n+    public abstract JavaType widenContentsBy(Class<?> contentClass);\n+    \n+    /*\n+    /**********************************************************\n+    /* Implementation of ResolvedType API\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public final Class<?> getRawClass() { return _class; }\n+\n+    /**\n+     * Method that can be used to check whether this type has\n+     * specified Class as its type erasure. Put another way, returns\n+     * true if instantiation of this Type is given (type-erased) Class.\n+     */\n+    @Override\n+    public final boolean hasRawClass(Class<?> clz) {\n+        return _class == clz;\n+    }\n+\n+    @Override\n+    public boolean isAbstract() {\n+        return Modifier.isAbstract(_class.getModifiers());\n+    }\n+\n+    /**\n+     * Convenience method for checking whether underlying Java type\n+     * is a concrete class or not: abstract classes and interfaces\n+     * are not.\n+     */\n+    @Override\n+    public boolean isConcrete() {\n+        int mod = _class.getModifiers();\n+        if ((mod & (Modifier.INTERFACE | Modifier.ABSTRACT)) == 0) {\n+            return true;\n+        }\n+        /* 19-Feb-2010, tatus: Holy mackarel; primitive types\n+         *    have 'abstract' flag set...\n+         */\n+        if (_class.isPrimitive()) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isThrowable() {\n+        return Throwable.class.isAssignableFrom(_class);\n+    }\n+\n+    @Override\n+    public boolean isArrayType() { return false; }\n+\n+    @Override\n+    public final boolean isEnumType() { return _class.isEnum(); }\n+\n+    @Override\n+    public final boolean isInterface() { return _class.isInterface(); }\n+\n+    @Override\n+    public final boolean isPrimitive() { return _class.isPrimitive(); }\n+\n+    @Override\n+    public final boolean isFinal() { return Modifier.isFinal(_class.getModifiers()); }\n+\n+    /**\n+     * @return True if type represented is a container type; this includes\n+     *    array, Map and Collection types.\n+     */\n+    @Override\n+    public abstract boolean isContainerType();\n+\n+    /**\n+     * @return True if type is either true {@link java.util.Collection} type,\n+     *    or something similar (meaning it has at least one type parameter,\n+     *    which describes type of contents)\n+     */\n+    @Override\n+    public boolean isCollectionLikeType() { return false; }\n+\n+    /**\n+     * @return True if type is either true {@link java.util.Map} type,\n+     *    or something similar (meaning it has at least two type parameter;\n+     *    first one describing key type, second value type)\n+     */\n+    @Override\n+    public boolean isMapLikeType() { return false; }\n+    \n+    /*\n+    /**********************************************************\n+    /* Public API, type parameter access; pass-through\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public boolean hasGenericTypes() { return false; }\n+\n+    @Override\n+    public JavaType getKeyType() { return null; }\n+\n+    @Override\n+    public JavaType getContentType() { return null; }\n+\n+    @Override\n+    public int containedTypeCount() { return 0; }\n+\n+    @Override\n+    public JavaType containedType(int index) { return null; }\n+\n+    @Override\n+    public String containedTypeName(int index) { return null; }\n+\n+    /*\n+    /**********************************************************\n+    /* Semi-public API, accessing handlers\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Method for accessing value handler associated with this type, if any\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T getValueHandler() { return (T) _valueHandler; }\n+\n+    /**\n+     * Method for accessing type handler associated with this type, if any\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T getTypeHandler() { return (T) _typeHandler; }\n+\n+    /*\n+    /**********************************************************\n+    /* Support for producing signatures\n+    /**********************************************************\n+     */\n+    \n+    //public abstract String toCanonical();\n+\n+    /**\n+     * Method for accessing signature that contains generic\n+     * type information, in form compatible with JVM 1.5\n+     * as per JLS. It is a superset of {@link #getErasedSignature},\n+     * in that generic information can be automatically removed\n+     * if necessary (just remove outermost\n+     * angle brackets along with content inside)\n+     */\n+    public String getGenericSignature() {\n+        StringBuilder sb = new StringBuilder(40);\n+        getGenericSignature(sb);\n+        return sb.toString();        \n+    }\n+\n+    /**\n+     * \n+     * @param sb StringBuilder to append signature to\n+     * \n+     * @return StringBuilder that was passed in; returned to allow\n+     * call chaining\n+     */\n+    public abstract StringBuilder getGenericSignature(StringBuilder sb);\n+    \n+    /**\n+     * Method for accessing signature without generic\n+     * type information, in form compatible with all versions\n+     * of JVM, and specifically used for type descriptions\n+     * when generating byte code.\n+     */\n+    public String getErasedSignature() {\n+        StringBuilder sb = new StringBuilder(40);\n+        getErasedSignature(sb);\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Method for accessing signature without generic\n+     * type information, in form compatible with all versions\n+     * of JVM, and specifically used for type descriptions\n+     * when generating byte code.\n+     * \n+     * @param sb StringBuilder to append signature to\n+     * \n+     * @return StringBuilder that was passed in; returned to allow\n+     * call chaining\n+     */\n+    public abstract StringBuilder getErasedSignature(StringBuilder sb);\n+    \n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+\n+    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n+    {\n+        if (!_class.isAssignableFrom(subclass)) {\n+            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Standard methods; let's make them abstract to force override\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public abstract String toString();\n+\n+    @Override\n+    public abstract boolean equals(Object o);\n+\n+    @Override\n+    public final int hashCode() { return _hashCode; }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/KeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/KeyDeserializers.java\n package com.fasterxml.jackson.databind;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n /**\n  * Interface that defines API for simple extensions that can provide additional deserializers\n--- a/src/main/java/com/fasterxml/jackson/databind/MapperConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MapperConfig.java\n \n \n import com.fasterxml.jackson.annotation.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n--- a/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n /**\n  * Iterator exposed by {@link ObjectMapper} when binding sequence of\n--- a/src/main/java/com/fasterxml/jackson/databind/Module.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/Module.java\n \n         /**\n          * Method that module can use to register additional\n-         * {@link TypeModifier} instance, which can augment {@link org.codehaus.jackson.type.JavaType}\n+         * {@link TypeModifier} instance, which can augment {@link com.fasterxml.jackson.databind.type.JavaType}\n          * instances constructed by {@link com.fasterxml.jackson.databind.type.TypeFactory}.\n          * \n          * @param modifier to add\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.io.SegmentedStringWriter;\n import com.fasterxml.jackson.core.io.SerializedString;\n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.core.type.ResolvedType;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.core.util.*;\n import com.fasterxml.jackson.databind.annotate.JsonSerialize;\n      * {@link TypeFactory}.\n      */\n     @Override\n+    public final <T> T readValue(JsonParser jp, ResolvedType valueType)\n+        throws IOException, JsonParseException, JsonMappingException\n+    {\n+        return readValue(jp, (JavaType) valueType);\n+    }\n+\n+    /**\n+     * Type-safe overloaded method, basically alias for {@link #readValues(JsonParser, ResolvedType)}.\n+     */\n     @SuppressWarnings(\"unchecked\")\n     public <T> T readValue(JsonParser jp, JavaType valueType)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n         return (T) _readValue(copyDeserializationConfig(), jp, valueType);\n-    } \n-\n+    }\n+    \n     /**\n      * Method to deserialize JSON content as tree expressed\n      * using set of {@link JsonNode} instances. Returns\n      * Method for reading sequence of Objects from parser stream.\n      *<p>\n      * Note that {@link ObjectReader} has more complete set of variants.\n-     * \n-     * @since 1.8\n      */\n     @Override\n+    public <T> MappingIterator<T> readValues(JsonParser jp, ResolvedType valueType)\n+        throws IOException, JsonProcessingException\n+    {\n+        return readValues(jp, (JavaType) valueType);\n+    }\n+\n+    /**\n+     * Type-safe overloaded method, basically alias for {@link #readValues(JsonParser, ResolvedType)}.\n+     */\n     public <T> MappingIterator<T> readValues(JsonParser jp, JavaType valueType)\n-        throws IOException, JsonProcessingException\n+            throws IOException, JsonProcessingException\n     {\n         DeserializationConfig config = copyDeserializationConfig();\n         DeserializationContext ctxt = _createDeserializationContext(jp, config);\n \n     /**\n      * Method for reading sequence of Objects from parser stream.\n-     * \n-     * @since 1.8\n      */\n     @Override\n     public <T> MappingIterator<T> readValues(JsonParser jp, Class<T> valueType)\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.io.SerializedString;\n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.core.type.ResolvedType;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.core.util.VersionUtil;\n import com.fasterxml.jackson.databind.deser.StdDeserializationContext;\n  * reused.\n  * \n  * @author tatu\n- * @since 1.6\n  */\n public class ObjectReader\n     extends ObjectCodec\n      * Value return is either newly constructed, or root value that\n      * was specified with {@link #withValueToUpdate(Object)}.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n+    @Override\n+    public <T> T readValue(JsonParser jp, ResolvedType valueType) throws IOException, JsonProcessingException {\n+        return readValue(jp, (JavaType) valueType);\n+    }\n+\n+    /**\n+     * Type-safe overloaded method, basically alias for {@link #readValue(JsonParser, ResolvedType)}.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n     public <T> T readValue(JsonParser jp, JavaType valueType) throws IOException, JsonProcessingException {\n         return (T) withType(valueType).readValue(jp);\n     }\n      *</pre>\n      */\n     @Override\n+    public <T> Iterator<T> readValues(JsonParser jp, ResolvedType valueType)\n+        throws IOException, JsonProcessingException {\n+        return readValues(jp, (JavaType) valueType);\n+    }\n+\n+    /**\n+     * Type-safe overloaded method, basically alias for {@link #readValues(JsonParser, ResolvedType)}.\n+     */\n     public <T> Iterator<T> readValues(JsonParser jp, JavaType valueType)\n         throws IOException, JsonProcessingException {\n         return withType(valueType).readValues(jp);\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.io.SegmentedStringWriter;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.core.util.ByteArrayBuilder;\n import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n \n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.annotate.JsonSerialize;\n import com.fasterxml.jackson.databind.annotate.JsonSerialize.Inclusion;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerFactory.java\n package com.fasterxml.jackson.databind;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n \n \n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n import java.util.Date;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.ser.FilterProvider;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n--- a/src/main/java/com/fasterxml/jackson/databind/Serializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/Serializers.java\n package com.fasterxml.jackson.databind;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.type.*;\n \n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.*;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n import java.util.concurrent.atomic.AtomicReference;\n \n import com.fasterxml.jackson.core.JsonNode;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer;\n import com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JsonCachable;\n import com.fasterxml.jackson.databind.deser.impl.*;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n \n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.JsonNode;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.impl.CreatorCollector;\n import com.fasterxml.jackson.databind.deser.impl.CreatorProperty;\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java\n+package com.fasterxml.jackson.databind.deser;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * This is the class that can be registered (via\n+ * {@link DeserializationConfig} object owner by\n+ * {@link ObjectMapper}) to get calledn when a potentially\n+ * recoverable problem is encountered during deserialization\n+ * process. Handlers can try to resolve the problem, throw\n+ * an exception or do nothing.\n+ *<p>\n+ * Default implementations for all methods implemented minimal\n+ * \"do nothing\" functionality, which is roughly equivalent to\n+ * not having a registered listener at all. This allows for\n+ * only implemented handler methods one is interested in, without\n+ * handling other cases.\n+ * \n+ * @author tatu\n+ */\n+public abstract class DeserializationProblemHandler\n+{\n+    /**\n+     * Method called when a Json Map (\"Object\") entry with an unrecognized\n+     * name is encountered.\n+     * Content (supposedly) matching the property are accessible via\n+     * parser that can be obtained from passed deserialization context.\n+     * Handler can also choose to skip the content; if so, it MUST return\n+     * true to indicate it did handle property succesfully.\n+     * Skipping is usually done like so:\n+     *<pre>\n+     *  ctxt.getParser().skipChildren();\n+     *</pre>\n+     *<p>\n+     * Note: version 1.2 added new deserialization feature\n+     * (<code>DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES</code>).\n+     * It will only have effect <b>after</b> handler is called, and only\n+     * if handler did <b>not</b> handle the problem.\n+     *\n+     * @param beanOrClass Either bean instance being deserialized (if one\n+     *   has been instantiated so far); or Class that indicates type that\n+     *   will be instantiated (if no instantiation done yet: for example\n+     *   when bean uses non-default constructors)\n+     * \n+     * @return True if the problem was succesfully resolved (and content available\n+     *    used or skipped); false if listen\n+     */\n+    public boolean handleUnknownProperty(DeserializationContext ctxt, JsonDeserializer<?> deserializer,\n+                                         Object beanOrClass, String propertyName)\n+        throws IOException, JsonProcessingException\n+    {\n+        return false;\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java\n import java.lang.reflect.*;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.core.util.InternCache;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.AnnotatedField;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializationContext.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.io.SerializedString;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.BeanDeserializer;\n import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n import java.lang.reflect.Member;\n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.DeserializationConfig;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;\n import com.fasterxml.jackson.databind.introspect.*;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorProperty.java\n \n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.TypeDeserializer;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ValueInjector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ValueInjector.java\n \n import java.io.IOException;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.util.Annotations;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer.java\n import java.util.concurrent.atomic.AtomicReference;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java\n package com.fasterxml.jackson.databind.deser.std;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JavaTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JavaTypeDeserializer.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JavaType;\n \n /**\n  * @since 1.9\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n import java.lang.reflect.Array;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n import com.fasterxml.jackson.databind.type.*;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.io.NumberInput;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java\n import java.lang.reflect.Method;\n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.DeserializationConfig;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.KeyDeserializer;\n import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n import com.fasterxml.jackson.databind.type.*;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.TypeDeserializer;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.DeserializationConfig;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n import java.util.Collection;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java\n import java.util.Collection;\n import java.util.Map;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/Annotated.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/Annotated.java\n import java.lang.reflect.Modifier;\n import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.type.TypeBindings;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java\n import java.lang.reflect.Member;\n import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.type.TypeBindings;\n \n public final class AnnotatedConstructor\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n \n import java.lang.reflect.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.type.TypeBindings;\n \n public final class AnnotatedMethod\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java\n import java.lang.reflect.Member;\n import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java\n import java.lang.reflect.Type;\n import java.lang.reflect.TypeVariable;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.type.TypeBindings;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n import java.lang.reflect.Method;\n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JsonSerialize;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.ClassIntrospector;\n import com.fasterxml.jackson.databind.DeserializationConfig;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.MapperConfig;\n import com.fasterxml.jackson.databind.SerializationConfig;\n import com.fasterxml.jackson.databind.type.SimpleType;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n import java.util.List;\n \n import com.fasterxml.jackson.annotation.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.*;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/NopAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/NopAnnotationIntrospector.java\n \n import java.lang.annotation.Annotation;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.KeyDeserializer;\n import com.fasterxml.jackson.databind.annotate.JsonSerialize.Typing;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n \n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.util.BeanUtil;\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeIdResolver.java\n package com.fasterxml.jackson.databind.jsontype;\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.databind.JavaType;\n \n /**\n  * Interface that defines standard API for converting types\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.DeserializationConfig;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializationConfig;\n import com.fasterxml.jackson.databind.TypeDeserializer;\n import com.fasterxml.jackson.databind.TypeSerializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeDeserializer.java\n package com.fasterxml.jackson.databind.jsontype.impl;\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.core.util.JsonParserSequence;\n \n import com.fasterxml.jackson.databind.*;\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/MinimalClassNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/MinimalClassNameIdResolver.java\n package com.fasterxml.jackson.databind.jsontype.impl;\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n public class MinimalClassNameIdResolver\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java\n import java.util.Collection;\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java\n package com.fasterxml.jackson.databind.jsontype.impl;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.MapperConfig;\n import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java\n import java.lang.reflect.Modifier;\n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.AbstractTypeResolver;\n import com.fasterxml.jackson.databind.DeserializationConfig;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.type.ClassKey;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.JsonNode;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.type.*;\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java\n import java.util.HashMap;\n import java.util.Map;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.type.ClassKey;\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java\n \n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.type.ArrayType;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n import java.net.InetAddress;\n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JsonSerialize;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n \n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.io.SerializedString;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n \n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n \n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/CustomSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/CustomSerializerFactory.java\n import java.lang.reflect.Modifier;\n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.type.ClassKey;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n import java.util.Collection;\n import java.util.Map;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JsonSerialize;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java\n import java.util.Date;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap.java\n package com.fasterxml.jackson.databind.ser.impl;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.java\n \n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.ser.impl.SerializerCache.TypeKey;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/SerializerCache.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/SerializerCache.java\n \n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.ResolvableSerializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java\n package com.fasterxml.jackson.databind.ser.impl;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import org.codehaus.jackson.node.ObjectNode;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import org.codehaus.jackson.node.ObjectNode;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n import java.util.Iterator;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.TypeSerializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import org.codehaus.jackson.node.JsonNodeFactory;\n import org.codehaus.jackson.node.ObjectNode;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.io.SerializedString;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import org.codehaus.jackson.node.ObjectNode;\n import org.codehaus.jackson.node.ArrayNode;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java\n import java.util.EnumSet;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.TypeSerializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n import java.util.Iterator;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.TypeSerializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n \n import com.fasterxml.jackson.databind.*;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import org.codehaus.jackson.node.ObjectNode;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import org.codehaus.jackson.node.ObjectNode;\n \n import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.ResolvableSerializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializerBase.java\n import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n import java.util.Date;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/type/ArrayType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/ArrayType.java\n \n import java.lang.reflect.Array;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.databind.JavaType;\n \n /**\n  * Array types represent Java arrays, both primitive and object valued.\n--- a/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType.java\n \n import java.util.Collection;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.databind.JavaType;\n \n /**\n  * Type that represents things that act similar to {@link java.util.Collection};\n--- a/src/main/java/com/fasterxml/jackson/databind/type/CollectionType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/CollectionType.java\n package com.fasterxml.jackson.databind.type;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.databind.JavaType;\n \n /**\n  * Type that represents Java Collection types (Lists, Sets).\n--- a/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java\n \n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.databind.JavaType;\n \n /**\n  * Type that represents Map-like types; things that consist of key/value pairs but that\n--- a/src/main/java/com/fasterxml/jackson/databind/type/MapType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/MapType.java\n package com.fasterxml.jackson.databind.type;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.databind.JavaType;\n \n /**\n  * Type that represents \"true\" Java Map types.\n--- a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java\n \n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.databind.JavaType;\n \n /**\n  * Simple types are defined as anything other than one of recognized\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeBase.java\n \n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonSerializableWithType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.TypeSerializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java\n import java.lang.reflect.*;\n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.databind.JavaType;\n \n /**\n  * Helper class used for resolving type parameters for given class\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n import java.util.*;\n import java.lang.reflect.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n \n \n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeModifier.java\n \n import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.databind.JavaType;\n \n /**\n  * Class that defines API that can be used to modify details of\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeParser.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeParser.java\n \n import java.util.*;\n \n-import com.fasterxml.jackson.core.type.JavaType;\n+import com.fasterxml.jackson.databind.JavaType;\n \n /**\n  * Simple recursive-descent parser for parsing canonical {@link JavaType}\n--- a/src/main/java/com/fasterxml/jackson/databind/type/package-info.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/package-info.java\n /**\n  * Package that contains concrete implementations of\n- * {@link org.codehaus.jackson.type.JavaType}, as\n+ * {@link com.fasterxml.jackson.databind.type.JavaType}, as\n  * well as the factory ({@link com.fasterxml.jackson.databind.type.TypeFactory}) for\n  * constructing instances from various input data types\n  * (like {@link java.lang.Class}, {@link java.lang.reflect.Type})\n--- a/src/main/java/com/fasterxml/jackson/databind/util/JSONPObject.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/JSONPObject.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/util/JSONWrappedObject.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/JSONWrappedObject.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.*;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/util/RootNameLookup.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/RootNameLookup.java\n package com.fasterxml.jackson.databind.util;\n \n import com.fasterxml.jackson.core.io.SerializedString;\n-import com.fasterxml.jackson.core.type.JavaType;\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.MapperConfig;\n import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;", "timestamp": 1324693411, "metainfo": ""}