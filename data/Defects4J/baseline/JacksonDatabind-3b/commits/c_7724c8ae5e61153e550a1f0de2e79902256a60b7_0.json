{"sha": "7724c8ae5e61153e550a1f0de2e79902256a60b7", "log": "Improve default format schema compatibility testing/handling", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      * @param schema Schema to pass to generator\n      */\n     public ObjectWriter writer(FormatSchema schema) {\n+        _verifySchemaType(schema);\n         return new ObjectWriter(this, getSerializationConfig(), schema);\n     }\n \n      * @param schema Schema to pass to parser\n      */\n     public ObjectReader reader(FormatSchema schema) {\n+        _verifySchemaType(schema);\n         return new ObjectReader(this, getDeserializationConfig(), null, null,\n                 schema, _injectableValues);\n     }\n         _rootDeserializers.put(valueType, deser);\n         return deser;\n     }\n+\n+    /**\n+     * @since 2.2\n+     */\n+    protected void _verifySchemaType(FormatSchema schema)\n+    {\n+        if (schema != null) {\n+            if (!_jsonFactory.canUseSchema(schema)) {\n+                    throw new IllegalArgumentException(\"Can not use FormatSchema of type \"+schema.getClass().getName()\n+                            +\" for format \"+_jsonFactory.getFormatName());\n+            }\n+        }\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n     public ObjectReader withRootName(String rootName) {\n         return _with(_config.withRootName(rootName));\n     }\n-    \n+\n     /**\n      * Method for constructing a new instance with configuration that\n      * passes specified {@link FormatSchema} to {@link JsonParser} that\n         if (_schema == schema) {\n             return this;\n         }\n+        _verifySchemaType(schema);\n         return new ObjectReader(this, _config, _valueType, _rootDeserializer, _valueToUpdate,\n                 schema, _injectableValues, _dataFormatReaders);\n     }\n      */\n \n     /**\n+     * @since 2.2\n+     */\n+    protected void _verifySchemaType(FormatSchema schema)\n+    {\n+        if (schema != null) {\n+            if (!_jsonFactory.canUseSchema(schema)) {\n+                    throw new IllegalArgumentException(\"Can not use FormatSchema of type \"+schema.getClass().getName()\n+                            +\" for format \"+_jsonFactory.getFormatName());\n+            }\n+        }\n+    }\n+\n+    /**\n      * Internal helper method called to create an instance of {@link DeserializationContext}\n      * for deserializing a single root value.\n      * Can be overridden if a custom context is needed.\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n     \n     public ObjectWriter withSchema(FormatSchema schema)\n     {\n-        return (_schema == schema) ? this :\n-            new ObjectWriter(this, _config, _rootType, _rootSerializer, _prettyPrinter, schema);\n-    }\n-    \n+        if (_schema == schema) {\n+            return this;\n+        }\n+        _verifySchemaType(schema);\n+        return new ObjectWriter(this, _config, _rootType, _rootSerializer, _prettyPrinter, schema);\n+    }\n+\n     /**\n      * Method that will construct a new instance that uses specific type\n      * as the root type for serialization, instead of runtime dynamic\n     /* Internal methods\n     /**********************************************************\n      */\n-    \n+\n+    /**\n+     * @since 2.2\n+     */\n+    protected void _verifySchemaType(FormatSchema schema)\n+    {\n+        if (schema != null) {\n+            if (!_jsonFactory.canUseSchema(schema)) {\n+                    throw new IllegalArgumentException(\"Can not use FormatSchema of type \"+schema.getClass().getName()\n+                            +\" for format \"+_jsonFactory.getFormatName());\n+            }\n+        }\n+    }\n+\n     /**\n      * Method called to configure the generator as necessary and then\n      * call write functionality\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n         if (_valueTypeDeserializer != null) {\n             return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n         }\n+if (_valueDeserializer == null) throw new JsonMappingException(\"No Value deserializer for '\"+this._propName+\"', type \"+this._type);\n         return _valueDeserializer.deserialize(jp, ctxt);\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n     \n     static class FactoryWithSchema extends JsonFactory\n     {\n+        @Override\n+        public String getFormatName() { return \"test\"; }\n+\n+        @Override\n+        public boolean canUseSchema(FormatSchema schema) {\n+            return (schema instanceof MySchema);\n+        }\n+        \n         private static final long serialVersionUID = 1L;\n         @Override\n         protected JsonParser _createParser(Reader r, IOContext ctxt)", "timestamp": 1365300659, "metainfo": ""}