{"sha": "a9f2a3524162fcf49168cef6f16936707680bc21", "log": "Fix defaults for newly added features", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n \n     /**\n      * Feature that controls whether numeric timestamp values are expected\n-     * to be written using nanosecond timestamps (enabled) or not (disabled);\n-     * if disabled, standard millisecond timestamps are assumed.\n+     * to be written using nanosecond timestamps (enabled) or not (disabled),\n+     * <b>if and only if</b> datatype supports such resolution.\n+     * Only newer datatypes (such as Java8 Date/Time) support such resolution --\n+     * older types (pre-Java8 <b>java.util.Date</b> etc) and Joda do not --\n+     * and this setting <b>has no effect</b> on such types.\n+     *<p>\n+     * If disabled, standard millisecond timestamps are assumed.\n      * This is the counterpart to {@link SerializationFeature#WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS}.\n      *<p>\n-     * Feature is disabled by default.\n+     * Feature is enabled by default, to support most accurate time values possible.\n      * \n      * @since 2.2\n      */\n-    READ_DATE_TIMESTAMPS_AS_NANOSECONDS(false),\n+    READ_DATE_TIMESTAMPS_AS_NANOSECONDS(true),\n+\n+    /**\n+     * Feature that specifies whether context provided {@link java.util.TimeZone}\n+     * ({@link SerializerProvider#getTimeZone()} should be used to adjust Date/Time\n+     * values on deserialization, even if value itself contains timezone information.\n+     * If enabled, contextual <code>TimeZone</code> will essentially override any other\n+     * TimeZone information; if disabled, it will only be used if value itself does not\n+     * contain any TimeZone information.\n+     * \n+     * @since 2.2\n+     */\n+    ADJUST_DATES_TO_CONTEXT_TIME_ZONE(true),\n \n     /*\n     /******************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n     /**\n      * Feature that controls whether numeric timestamp values are\n      * to be written using nanosecond timestamps (enabled) or not (disabled);\n-     * if disabled, standard millisecond timestamps are assumed.\n-     * This is the counterpart to {@link DeserializationFeature#READ_DATE_TIMESTAMPS_AS_NANOSECONDS}.\n-     *<p>\n-     * Feature is disabled by default.\n+     * <b>if and only if</b> datatype supports such resolution.\n+     * Only newer datatypes (such as Java8 Date/Time) support such resolution --\n+     * older types (pre-Java8 <b>java.util.Date</b> etc) and Joda do not --\n+     * and this setting <b>has no effect</b> on such types.\n+     *<p>\n+     * If disabled, standard millisecond timestamps are assumed.\n+     * This is the counterpart to {@link SerializationFeature#WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS}.\n+     *<p>\n+     * Feature is enabled by default, to support most accurate time values possible.\n      * \n      * @since 2.2\n      */\n-    WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS(false),    \n+    WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS(true),    \n     \n     /**\n      * Feature that determines whether {@link java.util.Map} entries are first\n      * Feature is disabled by default.\n      */\n     ORDER_MAP_ENTRIES_BY_KEYS(false),\n-\n-    /**\n-     * Feature that specifies whether context provided {@link java.util.TimeZone}\n-     * ({@link SerializerProvider#getTimeZone()} should be used to adjust Date/Time\n-     * values on deserialization, even if value itself contains timezone information.\n-     * If enabled, contextual <code>TimeZone</code> will essentially override any other\n-     * TimeZone information; if disabled, it will only be used if value itself does not\n-     * contain any TimeZone information.\n-     * \n-     * @since 2.2\n-     */\n-    ADJUST_DATES_TO_CONTEXT_TIME_ZONE(true),\n \n     /*\n     /******************************************************", "timestamp": 1365617461, "metainfo": ""}