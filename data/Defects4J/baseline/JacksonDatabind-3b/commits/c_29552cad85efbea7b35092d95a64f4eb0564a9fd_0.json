{"sha": "29552cad85efbea7b35092d95a64f4eb0564a9fd", "log": "Fixed #220", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n                     return nodeFactory.binaryNode((byte[]) ob);\n                 }\n                 // any other special handling needed?\n-                return nodeFactory.POJONode(ob);\n+                return nodeFactory.pojoNode(ob);\n             }\n \n         case VALUE_STRING:\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n         if (value == null) {\n             addNull();\n         } else {\n-            _add(POJONode(value));\n+            _add(pojoNode(value));\n         }\n         return this;\n     }\n         if (value == null) {\n             return insertNull(index);\n         }\n-        return _insert(index, POJONode(value));\n+        return _insert(index, pojoNode(value));\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java\n package com.fasterxml.jackson.databind.node;\n \n import java.math.BigDecimal;\n+import java.math.BigInteger;\n \n import com.fasterxml.jackson.core.*;\n \n  */\n public abstract class ContainerNode<T extends ContainerNode<T>>\n     extends BaseJsonNode\n+    implements JsonNodeCreator\n {\n     /**\n      * We will keep a reference to the Object (usually TreeMapper)\n \n     /*\n     /**********************************************************\n-    /* NodeCreator implementation, just dispatch to\n+    /* JsonNodeCreator implementation, just dispatch to\n     /* the real creator\n     /**********************************************************\n      */\n      * Factory method that constructs and returns an empty {@link ArrayNode}\n      * Construction is done using registered {@link JsonNodeFactory}.\n      */\n+    @Override\n     public final ArrayNode arrayNode() { return _nodeFactory.arrayNode(); }\n \n     /**\n      * Factory method that constructs and returns an empty {@link ObjectNode}\n      * Construction is done using registered {@link JsonNodeFactory}.\n      */\n+    @Override\n     public final ObjectNode objectNode() { return _nodeFactory.objectNode(); }\n \n+    @Override\n     public final NullNode nullNode() { return _nodeFactory.nullNode(); }\n \n+    @Override\n     public final BooleanNode booleanNode(boolean v) { return _nodeFactory.booleanNode(v); }\n \n+    @Override\n     public final NumericNode numberNode(byte v) { return _nodeFactory.numberNode(v); }\n+    @Override\n     public final NumericNode numberNode(short v) { return _nodeFactory.numberNode(v); }\n+    @Override\n     public final NumericNode numberNode(int v) { return _nodeFactory.numberNode(v); }\n+    @Override\n     public final NumericNode numberNode(long v) { return _nodeFactory.numberNode(v); }\n+\n+    // was missing from 2.2 and before\n+    @Override\n+    public final NumericNode numberNode(BigInteger v) { return _nodeFactory.numberNode(v); }\n+\n+    @Override\n     public final NumericNode numberNode(float v) { return _nodeFactory.numberNode(v); }\n+    @Override\n     public final NumericNode numberNode(double v) { return _nodeFactory.numberNode(v); }\n+    @Override\n     public final NumericNode numberNode(BigDecimal v) { return (_nodeFactory.numberNode(v)); }\n \n+    // // Wrapper types, missing from 2.2 and before\n+    @Override\n+    public final ValueNode numberNode(Byte v) { return _nodeFactory.numberNode(v); }\n+    @Override\n+    public final ValueNode numberNode(Short v) { return _nodeFactory.numberNode(v); }\n+    @Override\n+    public final ValueNode numberNode(Integer v) { return _nodeFactory.numberNode(v); }\n+    @Override\n+    public final ValueNode numberNode(Long v) { return _nodeFactory.numberNode(v); }\n+\n+    @Override\n+    public final ValueNode numberNode(Float v) { return _nodeFactory.numberNode(v); }\n+    @Override\n+    public final ValueNode numberNode(Double v) { return _nodeFactory.numberNode(v); }\n+    \n+    @Override\n     public final TextNode textNode(String text) { return _nodeFactory.textNode(text); }\n \n+    @Override\n     public final BinaryNode binaryNode(byte[] data) { return _nodeFactory.binaryNode(data); }\n+    @Override\n     public final BinaryNode binaryNode(byte[] data, int offset, int length) { return _nodeFactory.binaryNode(data, offset, length); }\n \n-    public final POJONode POJONode(Object pojo) { return _nodeFactory.POJONode(pojo); }\n+    @Override\n+    public final ValueNode pojoNode(Object pojo) { return _nodeFactory.pojoNode(pojo); }\n \n+    /**\n+     * @deprecated Since 2.3 Use {@link #pojoNode} instead.\n+     */\n+    @Deprecated\n+    public final POJONode POJONode(Object pojo) { return (POJONode) _nodeFactory.pojoNode(pojo); }\n+    \n     /*\n     /**********************************************************\n     /* Common mutators\n      * @return Container node itself (to allow method call chaining)\n      */\n     public abstract T removeAll();\n-\n-    /*\n-    /**********************************************************\n-    /* Helper classes\n-    /**********************************************************\n-     */\n }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeCreator.java\n+package com.fasterxml.jackson.databind.node;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+\n+/**\n+ * Interface that defines common \"creator\" functionality implemented\n+ * both by {@link JsonNodeFactory} and {@link ContainerNode} (that is,\n+ * JSON Object and Array nodes).\n+ * \n+ * @since 2.3\n+ */\n+public interface JsonNodeCreator\n+{\n+    // Enumerated/singleton types\n+    \n+    public ValueNode booleanNode(boolean v);\n+    public ValueNode nullNode();\n+\n+    // Numeric types\n+\n+    public ValueNode numberNode(byte v);\n+    public ValueNode numberNode(Byte value);\n+    public ValueNode numberNode(short v);\n+    public ValueNode numberNode(Short value);\n+    public ValueNode numberNode(int v);\n+    public ValueNode numberNode(Integer value);\n+    public ValueNode numberNode(long v);\n+    public ValueNode numberNode(Long value);\n+    public ValueNode numberNode(BigInteger v);\n+    public ValueNode numberNode(float v);\n+    public ValueNode numberNode(Float value);\n+    public ValueNode numberNode(double v);\n+    public ValueNode numberNode(Double value);\n+    public ValueNode numberNode(BigDecimal v);\n+\n+    // Textual nodes, other value (non-structured) nodes\n+\n+    public ValueNode textNode(String text);\n+    public ValueNode binaryNode(byte[] data);\n+    public ValueNode binaryNode(byte[] data, int offset, int length);\n+    public ValueNode pojoNode(Object pojo);\n+\n+    // Structured nodes:\n+    // (bit unkosher, due to forward references... but has to do for now)\n+\n+    public ArrayNode arrayNode();\n+    public ObjectNode objectNode();\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java\n  */\n public class JsonNodeFactory\n     implements java.io.Serializable // since 2.1\n+        ,JsonNodeCreator // since 2.3\n {\n-    // for 2.1:\n-    private static final long serialVersionUID = 2323165117839546871L;\n+    // with 2.2\n+    private static final long serialVersionUID = -3271940633258788634L;\n \n     private final boolean _cfgBigDecimalExact;\n \n      * Factory method for getting an instance of JSON boolean value\n      * (either literal 'true' or 'false')\n      */\n+    @Override\n     public BooleanNode booleanNode(boolean v) {\n         return v ? BooleanNode.getTrue() : BooleanNode.getFalse();\n     }\n      * Factory method for getting an instance of JSON null node (which\n      * represents literal null value)\n      */\n+    @Override\n     public NullNode nullNode() { return NullNode.getInstance(); }\n \n     /*\n      * Factory method for getting an instance of JSON numeric value\n      * that expresses given 8-bit value\n      */\n+    @Override\n     public NumericNode numberNode(byte v) { return IntNode.valueOf(v); }\n \n     /**\n      * Due to possibility of null, returning type is not guaranteed to be\n      * {@link NumericNode}, but just {@link ValueNode}.\n      */\n+    @Override\n     public ValueNode numberNode(Byte value) {\n         return (value == null) ? nullNode() : IntNode.valueOf(value.intValue());\n     }\n      * Factory method for getting an instance of JSON numeric value\n      * that expresses given 16-bit integer value\n      */\n+    @Override\n     public NumericNode numberNode(short v) { return ShortNode.valueOf(v); }\n \n     /**\n      * Due to possibility of null, returning type is not guaranteed to be\n      * {@link NumericNode}, but just {@link ValueNode}.\n      */\n+    @Override\n     public ValueNode numberNode(Short value) {\n         return (value == null) ? nullNode() : ShortNode.valueOf(value);\n     }\n      * Factory method for getting an instance of JSON numeric value\n      * that expresses given 32-bit integer value\n      */\n+    @Override\n     public NumericNode numberNode(int v) { return IntNode.valueOf(v); }\n \n     /**\n      * Due to possibility of null, returning type is not guaranteed to be\n      * {@link NumericNode}, but just {@link ValueNode}.\n      */\n+    @Override\n     public ValueNode numberNode(Integer value) {\n         return (value == null) ? nullNode() : IntNode.valueOf(value.intValue());\n     }\n      * Factory method for getting an instance of JSON numeric value\n      * that expresses given 64-bit integer value\n      */\n+    @Override\n     public NumericNode numberNode(long v) { return LongNode.valueOf(v); }\n \n     /**\n      * Due to possibility of null, returning type is not guaranteed to be\n      * {@link NumericNode}, but just {@link ValueNode}.\n      */\n+    @Override\n     public ValueNode numberNode(Long value) {\n         return (value == null) ? nullNode() : LongNode.valueOf(value.longValue());\n     }\n      * Factory method for getting an instance of JSON numeric value\n      * that expresses given unlimited range integer value\n      */\n+    @Override\n     public NumericNode numberNode(BigInteger v) { return BigIntegerNode.valueOf(v); }\n \n     /**\n      * Factory method for getting an instance of JSON numeric value\n      * that expresses given 32-bit floating point value\n      */\n+    @Override\n     public NumericNode numberNode(float v) { return FloatNode.valueOf((float) v); }\n \n     /**\n      * Due to possibility of null, returning type is not guaranteed to be\n      * {@link NumericNode}, but just {@link ValueNode}.\n      */\n+    @Override\n     public ValueNode numberNode(Float value) {\n         return (value == null) ? nullNode() : FloatNode.valueOf(value.floatValue());\n     }\n      * Factory method for getting an instance of JSON numeric value\n      * that expresses given 64-bit floating point value\n      */\n+    @Override\n     public NumericNode numberNode(double v) { return DoubleNode.valueOf(v); }\n \n     /**\n      * Due to possibility of null, returning type is not guaranteed to be\n      * {@link NumericNode}, but just {@link ValueNode}.\n      */\n+    @Override\n     public ValueNode numberNode(Double value) {\n         return (value == null) ? nullNode() : DoubleNode.valueOf(value.doubleValue());\n     }\n      *\n      * @see #JsonNodeFactory(boolean)\n      */\n+    @Override\n     public NumericNode numberNode(BigDecimal v)\n     {\n         /*\n      * Factory method for constructing a node that represents JSON\n      * String value\n      */\n+    @Override\n     public TextNode textNode(String text) { return TextNode.valueOf(text); }\n \n     /**\n      * binary data, and will get serialized as equivalent base64-encoded\n      * String value\n      */\n+    @Override\n     public BinaryNode binaryNode(byte[] data) { return BinaryNode.valueOf(data); }\n \n     /**\n      * binary data, and will get serialized as equivalent base64-encoded\n      * String value\n      */\n+    @Override\n     public BinaryNode binaryNode(byte[] data, int offset, int length) {\n         return BinaryNode.valueOf(data, offset, length);\n     }\n     /**\n      * Factory method for constructing an empty JSON Array node\n      */\n+    @Override\n     public ArrayNode arrayNode() { return new ArrayNode(this); }\n \n     /**\n      * Factory method for constructing an empty JSON Object (\"struct\") node\n      */\n+    @Override\n     public ObjectNode objectNode() { return new ObjectNode(this); }\n \n     /**\n      * using data binding, usually as JSON Objects, but in some\n      * cases as JSON Strings or other node types.\n      */\n+    @Override\n+    public ValueNode pojoNode(Object pojo) { return new POJONode(pojo); }\n+\n+    /**\n+     * @deprecated Since 2.3 Use {@link #pojoNode} instead.\n+     */\n+    @Deprecated\n     public POJONode POJONode(Object pojo) { return new POJONode(pojo); }\n }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n      * @return This node (to allow chaining)\n      */\n     public ObjectNode putPOJO(String fieldName, Object pojo) {\n-        _children.put(fieldName, POJONode(pojo));\n+        _children.put(fieldName, pojoNode(pojo));\n         return this;\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestTreeSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestTreeSerialization.java\n         ObjectMapper mapper = new ObjectMapper();\n         // also need tree mapper to construct tree to serialize\n         ObjectNode n = mapper.getNodeFactory().objectNode();\n-        n.set(\"pojo\", mapper.getNodeFactory().POJONode(\"abc\"));\n+        n.set(\"pojo\", mapper.getNodeFactory().pojoNode(\"abc\"));\n         StringWriter sw = new StringWriter();\n         JsonGenerator jg = mapper.getFactory().createGenerator(sw);\n         mapper.writeTree(jg, n);\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         ObjectNode n = mapper.getNodeFactory().objectNode();\n-        n.set(\"pojo\", mapper.getNodeFactory().POJONode(new int[] { 1, 2, 3 }));\n+        n.set(\"pojo\", mapper.getNodeFactory().pojoNode(new int[] { 1, 2, 3 }));\n         StringWriter sw = new StringWriter();\n         JsonGenerator jg = mapper.getFactory().createGenerator(sw);\n         mapper.writeTree(jg, n);\n         ObjectMapper mapper = new ObjectMapper();\n         // also need tree mapper to construct tree to serialize\n         ObjectNode n = mapper.getNodeFactory().objectNode();\n-        n.set(\"pojo\", mapper.getNodeFactory().POJONode(new Bean()));\n+        n.set(\"pojo\", mapper.getNodeFactory().pojoNode(new Bean()));\n         StringWriter sw = new StringWriter();\n         JsonGenerator jg = mapper.getFactory().createGenerator(sw);\n         mapper.writeTree(jg, n);", "timestamp": 1368848167, "metainfo": ""}