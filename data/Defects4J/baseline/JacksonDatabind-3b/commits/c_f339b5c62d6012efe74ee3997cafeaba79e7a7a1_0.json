{"sha": "f339b5c62d6012efe74ee3997cafeaba79e7a7a1", "log": "Implement #461", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/PropertyNamingStrategy.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/PropertyNamingStrategy.java\n public abstract class PropertyNamingStrategy\n     implements java.io.Serializable\n {\n+    /**\n+     * See {@link LowerCaseWithUnderscoresStrategy} for details.\n+     */\n+    public static final PropertyNamingStrategy CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES =\n+        new LowerCaseWithUnderscoresStrategy();\n+\n+    /**\n+     * See {@link PascalCaseStrategy} for details.\n+     * \n+     * @since 2.1\n+     */\n+    public static final PropertyNamingStrategy PASCAL_CASE_TO_CAMEL_CASE =\n+        new PascalCaseStrategy();\n+\n+    /**\n+     * See {@link LowerCaseStrategy} for details.\n+     * \n+     * @since 2.4\n+     */\n+    public static final PropertyNamingStrategy LOWER_CASE = new LowerCaseStrategy();\n+    \n     /*\n     /**********************************************************\n     /* API\n \n     /*\n     /**********************************************************\n-    /* Standard implementations \n+    /* Public base class for simple implementations\n     /**********************************************************\n      */\n     \n     /* Standard implementations \n     /**********************************************************\n      */\n-\n-    /**\n-     * See {@link LowerCaseWithUnderscoresStrategy} for details.\n-     */\n-    public static final PropertyNamingStrategy CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES =\n-        new LowerCaseWithUnderscoresStrategy();\n     \n     /**\n      * A {@link PropertyNamingStrategy} that translates typical camel case Java \n             return resultLength > 0 ? result.toString() : input;\n         }\n     }\n-    \n-    /**\n-     * See {@link PascalCaseStrategy} for details.\n-     * \n-     * @since 2.1\n-     */\n-    public static final PropertyNamingStrategy PASCAL_CASE_TO_CAMEL_CASE =\n-        new PascalCaseStrategy();\n-    \n+\n     /**\n      * A {@link PropertyNamingStrategy} that translates typical camelCase Java \n      * property names to PascalCase JSON element names (i.e., with a capital\n      */\n     public static class PascalCaseStrategy extends PropertyNamingStrategyBase\n     {\n-    \t/**\n-    \t * Converts camelCase to PascalCase\n-    \t * \n-    \t * For example, \"userName\" would be converted to\n-    \t * \"UserName\".\n-      \t * \n-    \t * @param input formatted as camelCase string\n-    \t * @return input converted to PascalCase format\n-    \t */\n-    \t@Override\n-    \tpublic String translate(String input) {\n-    \t    if (input == null || input.length() == 0){\n-    \t        return input; // garbage in, garbage out\n-    \t    }\n-    \t    // Replace first lower-case letter with upper-case equivalent\n-    \t    char c = input.charAt(0);\n-    \t    if (Character.isUpperCase(c)) {\n-    \t        return input;\n-    \t    }\n-    \t    StringBuilder sb = new StringBuilder(input);\n-    \t    sb.setCharAt(0, Character.toUpperCase(c));\n-    \t    return sb.toString();\n-    \t}\t\n+        /**\n+         * Converts camelCase to PascalCase\n+         * \n+         * For example, \"userName\" would be converted to\n+         * \"UserName\".\n+         *\n+         * @param input formatted as camelCase string\n+         * @return input converted to PascalCase format\n+         */\n+        @Override\n+        public String translate(String input) {\n+            if (input == null || input.length() == 0){\n+                return input; // garbage in, garbage out\n+            }\n+            // Replace first lower-case letter with upper-case equivalent\n+            char c = input.charAt(0);\n+            char uc = Character.toUpperCase(c);\n+            if (c == uc) {\n+                return input;\n+            }\n+            StringBuilder sb = new StringBuilder(input);\n+            sb.setCharAt(0, uc);\n+            return sb.toString();\n+        }\n+    }\n+\n+    /**\n+     * Simple strategy where external name simply only uses lower-case characters,\n+     * and no separators.\n+     * Conversion from internal name like \"someOtherValue\" would be into external name\n+     * if \"someothervalue\".\n+     * \n+     * @since 2.4\n+     */\n+    public static class LowerCaseStrategy extends PropertyNamingStrategyBase\n+    {\n+        @Override\n+        public String translate(String input) {\n+            return input.toLowerCase();\n+        }\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyStd.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyStd.java\n import com.fasterxml.jackson.databind.BaseMapTest;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n+import com.fasterxml.jackson.databind.annotation.JsonNaming;\n import com.fasterxml.jackson.databind.introspect.TestNamingStrategyCustom.PersonBean;\n \n /**\n     static class Bean428 {\n         @JsonProperty(\"fooBar\")\n         public String whatever() {return \"\";}\n+    }\n+\n+    @JsonPropertyOrder({ \"firstName\", \"lastName\" })\n+    @JsonNaming(PropertyNamingStrategy.LowerCaseStrategy.class)\n+    static class BoringBean {\n+        public String firstName = \"Bob\";\n+        public String lastName = \"Burger\";\n     }\n     \n     /*\n             fail(\"Should use name 'fooBar', does not: \"+json);\n         }\n     }\n+\n+    /**\n+     * For [Issue#461]\n+     */\n+    public void testSimpleLowerCase() throws Exception\n+    {\n+        final BoringBean input = new BoringBean();\n+        ObjectMapper m = new ObjectMapper();\n+\n+        assertEquals(aposToQuotes(\"{'firstname':'Bob','lastname':'Burger'}\"),\n+                m.writeValueAsString(input));\n+    }\n }\n ", "timestamp": 1400472747, "metainfo": ""}