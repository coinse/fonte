{"sha": "c25a0aa7ca3eb44608839517568db03ebc57fa58", "log": "Added Base impls of visitors, to simplify usage", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonAnyFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonAnyFormatVisitor.java\n package com.fasterxml.jackson.databind.jsonFormatVisitors;\n \n-public interface JsonAnyFormatVisitor {\n+public interface JsonAnyFormatVisitor\n+{\n+    /**\n+     * Default \"empty\" implementation, useful as the base to start on;\n+     * especially as it is guaranteed to implement all the method\n+     * of the interface, even if new methods are getting added.\n+     */\n+    public static class Base implements JsonAnyFormatVisitor { }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.java\n \n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n \n public interface JsonArrayFormatVisitor extends JsonFormatVisitorWithSerializerProvider\n {\n      */\n     void itemsFormat(JsonFormatTypes format)\n         throws JsonMappingException;\n+\n+    /**\n+     * Default \"empty\" implementation, useful as the base to start on;\n+     * especially as it is guaranteed to implement all the method\n+     * of the interface, even if new methods are getting added.\n+     */\n+    public static class Base implements JsonArrayFormatVisitor {\n+        protected SerializerProvider provider;\n+\n+        public SerializerProvider getProvider() { return provider; }\n+\n+        public void setProvider(SerializerProvider p) { provider = p; }\n+\n+        public void itemsFormat(JsonFormatVisitable handler, JavaType elementType)\n+            throws JsonMappingException { }\n+\n+        public void itemsFormat(JsonFormatTypes format)\n+            throws JsonMappingException { }\n+    }\n+\n }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonBooleanFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonBooleanFormatVisitor.java\n package com.fasterxml.jackson.databind.jsonFormatVisitors;\n \n-public interface JsonBooleanFormatVisitor extends JsonValueFormatVisitor {\n-\n+public interface JsonBooleanFormatVisitor extends JsonValueFormatVisitor\n+{\n+    /**\n+     * Default \"empty\" implementation, useful as the base to start on;\n+     * especially as it is guaranteed to implement all the method\n+     * of the interface, even if new methods are getting added.\n+     */\n+    public static class Base extends JsonValueFormatVisitor.Base\n+        implements JsonBooleanFormatVisitor { }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitable.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitable.java\n import com.fasterxml.jackson.databind.JsonMappingException;\n \n /**\n- * Marker interface for schema-aware serializers.\n+ * Interface {@link com.fasterxml.jackson.databind.JsonSerializer} implements\n+ * to allow for visiting type hierarchy.\n  */\n public interface JsonFormatVisitable\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonIntegerFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonIntegerFormatVisitor.java\n package com.fasterxml.jackson.databind.jsonFormatVisitors;\n \n-public interface JsonIntegerFormatVisitor extends JsonValueFormatVisitor {\n-\n+public interface JsonIntegerFormatVisitor extends JsonValueFormatVisitor\n+{\n+    /**\n+     * Default \"empty\" implementation, useful as the base to start on;\n+     * especially as it is guaranteed to implement all the method\n+     * of the interface, even if new methods are getting added.\n+     */\n+    public static class Base extends JsonValueFormatVisitor.Base\n+        implements JsonIntegerFormatVisitor { }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonNullFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonNullFormatVisitor.java\n package com.fasterxml.jackson.databind.jsonFormatVisitors;\n \n public interface JsonNullFormatVisitor {\n-\n+    /**\n+     * Default \"empty\" implementation, useful as the base to start on;\n+     * especially as it is guaranteed to implement all the method\n+     * of the interface, even if new methods are getting added.\n+     */\n+    public static class Base implements JsonNullFormatVisitor { }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonNumberFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonNumberFormatVisitor.java\n package com.fasterxml.jackson.databind.jsonFormatVisitors;\n \n-public interface JsonNumberFormatVisitor extends JsonValueFormatVisitor{\n-\n+public interface JsonNumberFormatVisitor extends JsonValueFormatVisitor\n+{\n+    /**\n+     * Default \"empty\" implementation, useful as the base to start on;\n+     * especially as it is guaranteed to implement all the method\n+     * of the interface, even if new methods are getting added.\n+     */\n+    public static class Base extends JsonValueFormatVisitor.Base\n+        implements JsonNumberFormatVisitor { }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonObjectFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonObjectFormatVisitor.java\n import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n \n public interface JsonObjectFormatVisitor extends JsonFormatVisitorWithSerializerProvider\n {\n \n     @Deprecated\n     public void optionalProperty(String name) throws JsonMappingException;\n+\n+    /**\n+     * Default \"empty\" implementation, useful as the base to start on;\n+     * especially as it is guaranteed to implement all the method\n+     * of the interface, even if new methods are getting added.\n+     */\n+    public static class Base\n+        implements JsonObjectFormatVisitor\n+    {\n+        protected SerializerProvider provider;\n+\n+        public SerializerProvider getProvider() { return provider; }\n+\n+        public void setProvider(SerializerProvider p) { provider = p; }\n+\n+        public void property(BeanProperty writer) throws JsonMappingException {\n+            // TODO Auto-generated method stub\n+            \n+        }\n+\n+        public void property(String name, JsonFormatVisitable handler,\n+                JavaType propertyTypeHint) throws JsonMappingException { }\n+\n+        @Deprecated\n+        public void property(String name) throws JsonMappingException { }\n+\n+        public void optionalProperty(BeanProperty writer)\n+                throws JsonMappingException { }\n+\n+        public void optionalProperty(String name, JsonFormatVisitable handler,\n+                JavaType propertyTypeHint) throws JsonMappingException { }\n+\n+        @Deprecated\n+        public void optionalProperty(String name) throws JsonMappingException { }\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonStringFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonStringFormatVisitor.java\n package com.fasterxml.jackson.databind.jsonFormatVisitors;\n \n-public interface JsonStringFormatVisitor extends JsonValueFormatVisitor {\n+public interface JsonStringFormatVisitor extends JsonValueFormatVisitor\n+{\n+    /**\n+     * Default \"empty\" implementation, useful as the base to start on;\n+     * especially as it is guaranteed to implement all the method\n+     * of the interface, even if new methods are getting added.\n+     */\n+    public static class Base extends JsonValueFormatVisitor.Base\n+        implements JsonStringFormatVisitor { }\n \n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonValueFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonValueFormatVisitor.java\n import java.util.Set;\n \n public interface JsonValueFormatVisitor {\n+    /**\n+     * Method called to indicate configured format for value type being visited.\n+     */\n+    void format(JsonValueFormat format);\n \n-\tvoid format(JsonValueFormat format);\n+    /**\n+     * Method called to indicate enumerated (String) values type being visited\n+     * can take as values.\n+     */\n+    void enumTypes(Set<String> enums);\n \n-\tvoid enumTypes(Set<String> enums);\n+    /**\n+     * Default \"empty\" implementation, useful as the base to start on;\n+     * especially as it is guaranteed to implement all the method\n+     * of the interface, even if new methods are getting added.\n+     */\n+    public static class Base implements JsonValueFormatVisitor {\n+        public void format(JsonValueFormat format) { }\n+        public void enumTypes(Set<String> enums) { }\n+    }\n }", "timestamp": 1353563349, "metainfo": ""}