{"sha": "1b8244e28f75f2ef49fb5ffa8fb69c9c9838f858", "log": "Ensure that DecimalNodes with mathematically equal values are equal  And also ensure that .hashCode() works as well. For the latter, pick the hashCode() of the underlying BigDecimal's double value.  See also here: http://stackoverflow.com/a/14313302/1093528", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java\n         if (o == this) return true;\n         if (o == null) return false;\n         if (o instanceof DecimalNode) {\n-            return ((DecimalNode) o)._value.equals(_value);\n+            return ((DecimalNode) o)._value.compareTo(_value) == 0;\n         }\n         return false;\n     }\n \n     @Override\n-    public int hashCode() { return _value.hashCode(); }\n+    public int hashCode() { return Double.valueOf(doubleValue()).hashCode(); }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n         assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong());\n         assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong());\n         assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong());\n+    }\n+\n+    public void testDecimalNodeEqualsHashCode()\n+    {\n+        /*\n+         * We want DecimalNodes with equivalent _numeric_ values to be equal;\n+         * this is not the case for BigDecimal where \"1.0\" and \"1\" are not\n+         * equal!\n+         */\n+        BigDecimal b1 = BigDecimal.ONE;\n+        BigDecimal b2 = new BigDecimal(\"1.0\");\n+        BigDecimal b3 = new BigDecimal(\"0.01e2\");\n+        BigDecimal b4 = new BigDecimal(\"1000e-3\");\n+\n+        DecimalNode node1 = new DecimalNode(b1);\n+        DecimalNode node2 = new DecimalNode(b2);\n+        DecimalNode node3 = new DecimalNode(b3);\n+        DecimalNode node4 = new DecimalNode(b4);\n+\n+        assertEquals(node1.hashCode(), node2.hashCode());\n+        assertEquals(node2.hashCode(), node3.hashCode());\n+        assertEquals(node3.hashCode(), node4.hashCode());\n+\n+        assertEquals(node1, node2);\n+        assertEquals(node2, node1);\n+        assertEquals(node2, node3);\n+        assertEquals(node3, node4);\n     }\n \n     public void testBigIntegerNode() throws Exception", "timestamp": 1396847583, "metainfo": ""}