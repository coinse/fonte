{"sha": "0344ce08eb33d9d3aeb6478ce0391368596eac04", "log": "Remove separate 'isIgnoredXxx' methods; combined into 'hasIgnoralMarker' method in AnnotationIntrospector", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n \n     /**\n      * Method called to check whether given property is marked to\n-     * be ignored; but NOT to determine if it should necessarily\n-     * be ignored, since that may depend on other factors.\n-     *<p>\n-     * Default implementation calls existing 'isIgnored' methods\n-     * such as {@link #isIgnorableField(AnnotatedField)} and\n-     * {@link #isIgnorableMethod(AnnotatedMethod)}.\n+     * be ignored. This is used to determine whether to ignore\n+     * properties, on per-property basis, usually combining\n+     * annotations from multiple accessors (getters, setters, fields,\n+     * constructor parameters).\n      */\n     public boolean hasIgnoreMarker(AnnotatedMember m)\n     {\n-        /* For maximum backwards compatibility, we better call\n-         * existing methods.\n-         */\n-        /* TODO: For 2.0, replace with simple 'return false;'\n-         */\n-        if (m instanceof AnnotatedMethod) {\n-            return isIgnorableMethod((AnnotatedMethod) m);\n-        }\n-        if (m instanceof AnnotatedField) {\n-            return isIgnorableField((AnnotatedField) m);\n-        }\n-        if (m instanceof AnnotatedConstructor) {\n-            return isIgnorableConstructor((AnnotatedConstructor) m);\n-        }\n         return false;\n     }\n \n     public Object findInjectableValueId(AnnotatedMember m) {\n         return null;\n     }\n-    \n-    /*\n-    /**********************************************************\n-    /* General method annotations\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Method for checking whether there is an annotation that\n-     * indicates that given method should be ignored for all\n-     * operations (serialization, deserialization).\n-     *<p>\n-     * Note that this method should <b>ONLY</b> return true for such\n-     * explicit ignoral cases; and not if method just happens not to\n-     * be visible for annotation processor.\n-     *\n-     * @return True, if an annotation is found to indicate that the\n-     *    method should be ignored; false if not.\n-     */\n-    public abstract boolean isIgnorableMethod(AnnotatedMethod m);\n-\n-    public abstract boolean isIgnorableConstructor(AnnotatedConstructor c);\n-\n-    /*\n-    /**********************************************************\n-    /* General field annotations\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Method for checking whether there is an annotation that\n-     * indicates that given field should be ignored for all\n-     * operations (serialization, deserialization).\n-     *\n-     * @return True, if an annotation is found to indicate that the\n-     *    field should be ignored; false if not.\n-     */\n-    public abstract boolean isIgnorableField(AnnotatedField f);\n \n     /*\n     /**********************************************************\n             return _primary.hasIgnoreMarker(m) || _secondary.hasIgnoreMarker(m);\n         }\n         \n-        // // // General method annotations\n-\n-        @Override\n-        public boolean isIgnorableMethod(AnnotatedMethod m) {\n-            return _primary.isIgnorableMethod(m) || _secondary.isIgnorableMethod(m);\n-        }\n-        \n-        @Override\n-        public boolean isIgnorableConstructor(AnnotatedConstructor c) {\n-            return _primary.isIgnorableConstructor(c) || _secondary.isIgnorableConstructor(c);\n-        }\n-\n-        // // // General field annotations\n-\n-        @Override\n-        public boolean isIgnorableField(AnnotatedField f)\n-        {\n-            return _primary.isIgnorableField(f) || _secondary.isIgnorableField(f);\n-        }\n-\n         // // // Serialization: general annotations\n \n         @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n      * was created).\n      *<p>\n      * Note that cached instances are still resolved on per-property basis,\n-     * if instance implements {@link ResolvableDeserializer}: cached instance\n-     * is just as the base. This means that in most cases it is safe to\n+     * if instance implements {@link com.fasterxml.jackson.databind.deser.ResolvableDeserializer}:\n+     * cached instance is just as the base. This means that in most cases it is safe to\n      * cache instances; however, it only makes sense to cache instances\n      * if instantiation is expensive, or if instances are heavy-weight.\n      *<p>\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n         // 14-Feb-2011, tatu: AnnotationIntrospector is null if annotations not enabled; if so, can skip:\n         if (_annotationIntrospector != null) {\n             if (_defaultConstructor != null) {\n-                if (_annotationIntrospector.isIgnorableConstructor(_defaultConstructor)) {\n+                if (_annotationIntrospector.hasIgnoreMarker(_defaultConstructor)) {\n                     _defaultConstructor = null;\n                 }\n             }\n             if (_constructors != null) {\n                 // count down to allow safe removal\n                 for (int i = _constructors.size(); --i >= 0; ) {\n-                    if (_annotationIntrospector.isIgnorableConstructor(_constructors.get(i))) {\n+                    if (_annotationIntrospector.hasIgnoreMarker(_constructors.get(i))) {\n                         _constructors.remove(i);\n                     }\n                 }\n                 if (_creatorMethods != null) {\n                     // count down to allow safe removal\n                     for (int i = _creatorMethods.size(); --i >= 0; ) {\n-                        if (_annotationIntrospector.isIgnorableMethod(_creatorMethods.get(i))) {\n+                        if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n                             _creatorMethods.remove(i);\n                         }\n                     }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     {\n         JsonTypeName tn = ac.getAnnotation(JsonTypeName.class);\n         return (tn == null) ? null : tn.value();\n-    }\n-    \n-    /*\n-    /**********************************************************\n-    /* General method annotations\n-    /**********************************************************\n-    */\n-\n-    @Override\n-    public boolean isIgnorableMethod(AnnotatedMethod m) {\n-        return _isIgnorable(m);\n-    }\n-\n-    @Override\n-    public boolean isIgnorableConstructor(AnnotatedConstructor c) {\n-        return _isIgnorable(c);\n-    }\n-\n-    /*\n-    /**********************************************************\n-    /* General field annotations\n-    /**********************************************************\n-     */\n-\n-    @Override\n-    public boolean isIgnorableField(AnnotatedField f) {\n-        return _isIgnorable(f);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/NopAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/NopAnnotationIntrospector.java\n \n     @Override\n     public boolean hasIgnoreMarker(AnnotatedMember member) {\n-        return false;\n-    }\n-    \n-    /*\n-    /**********************************************************\n-    /* General Method annotations\n-    /**********************************************************\n-     */\n-\n-    @Override\n-    public boolean isIgnorableConstructor(AnnotatedConstructor c) {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean isIgnorableMethod(AnnotatedMethod m) {\n-        return false;\n-    }\n-    \n-    /*\n-    /**********************************************************\n-    /* General field annotations\n-    /**********************************************************\n-     */\n-\n-    @Override\n-    public boolean isIgnorableField(AnnotatedField f) {\n         return false;\n     }\n ", "timestamp": 1325200331, "metainfo": ""}