{"sha": "c698ae9d35451eaa5d98b2276ecb194f6a267a1f", "log": "#217 - JSON parse exceptions are not wrapped like others", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n             DeserializationContext ctxt)\n         throws IOException\n     {\n-        /* 05-Mar-2009, tatu: But one nasty edge is when we get\n+\t\tt = throwOrReturnThrowable(t, ctxt);\n+        // [JACKSON-55] Need to add reference information\n+        throw JsonMappingException.wrapWithPath(t, bean, fieldName);\n+    }\n+\n+    public void wrapAndThrow(Throwable t, Object bean, int index, DeserializationContext ctxt)\n+        throws IOException\n+    {\n+\t\tt = throwOrReturnThrowable(t, ctxt);\n+        // [JACKSON-55] Need to add reference information\n+        throw JsonMappingException.wrapWithPath(t, bean, index);\n+    }\n+\t\n+\tprivate Throwable throwOrReturnThrowable(Throwable t, DeserializationContext ctxt) \n+\t\tthrows IOException\n+\t{\n+\t    /* 05-Mar-2009, tatu: But one nasty edge is when we get\n          *   StackOverflow: usually due to infinite loop. But that\n          *   usually gets hidden within an InvocationTargetException...\n          */\n-        while (t instanceof InvocationTargetException && t.getCause() != null) {\n+\t\twhile (t instanceof InvocationTargetException && t.getCause() != null) {\n             t = t.getCause();\n         }\n         // Errors and \"plain\" IOExceptions to be passed as is\n             throw (Error) t;\n         }\n         boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\n-        // Ditto for IOExceptions; except we may want to wrap mapping exceptions\n+        // Ditto for IOExceptions; except we may want to wrap json exceptions\n         if (t instanceof IOException) {\n-            if (!wrap || !(t instanceof JsonMappingException)) {\n+            if (!wrap || !(t instanceof JsonProcessingException)) {\n                 throw (IOException) t;\n             }\n         } else if (!wrap) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions\n                 throw (RuntimeException) t;\n             }\n         }\n-        // [JACKSON-55] Need to add reference information\n-        throw JsonMappingException.wrapWithPath(t, bean, fieldName);\n-    }\n-\n-    public void wrapAndThrow(Throwable t, Object bean, int index, DeserializationContext ctxt)\n-        throws IOException\n-    {\n-        while (t instanceof InvocationTargetException && t.getCause() != null) {\n-            t = t.getCause();\n-        }\n-        // Errors and \"plain\" IOExceptions to be passed as is\n-        if (t instanceof Error) {\n-            throw (Error) t;\n-        }\n-        boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\n-        // Ditto for IOExceptions; except we may want to wrap mapping exceptions\n-        if (t instanceof IOException) {\n-            if (!wrap || !(t instanceof JsonMappingException)) {\n-                throw (IOException) t;\n-            }\n-        } else if (!wrap) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions\n-            if (t instanceof RuntimeException) {\n-                throw (RuntimeException) t;\n-            }\n-        }\n-        // [JACKSON-55] Need to add reference information\n-        throw JsonMappingException.wrapWithPath(t, bean, index);\n-    }\n+\t\treturn t;\n+\t}\n \n     protected void wrapInstantiationProblem(Throwable t, DeserializationContext ctxt)\n         throws IOException\n--- a/src/test/java/com/fasterxml/jackson/databind/convert/TestBeanConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestBeanConversions.java\n         try {\n             MAPPER.readValue(\"{\\\"boolProp\\\":\\\"foobar\\\"}\", BooleanBean.class);\n         } catch (JsonProcessingException e) {\n-            verifyException(e, \"boolProp\");\n+            verifyException(e, \"foobar\");\n         }\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestNumbers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestNumbers.java\n         try {\n             mapper.readValue(json, MyBeanHolder.class);\n             fail(\"should have raised exception\");\n-        } catch (JsonParseException e) {\n+        } catch (JsonProcessingException e) {\n             verifyException(e, \"not numeric\");\n         }\n     }\n         try {\n             MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class);\n             fail(\"should have raised exception instead value was set to \" + result.defaultValue.value.decimal.toString());\n-        } catch (JsonParseException e) {\n+        } catch (JsonProcessingException e) {\n             verifyException(e, \"not numeric\");\n         }\n     }", "timestamp": 1368091844, "metainfo": ""}