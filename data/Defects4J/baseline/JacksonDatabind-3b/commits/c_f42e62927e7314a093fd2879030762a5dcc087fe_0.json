{"sha": "f42e62927e7314a093fd2879030762a5dcc087fe", "log": "Starting to convert serializers similarly to use ContextualSerializer to get BeanProperty", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n                     elementTypeSerializer, property, elementValueSerializer);\n         }\n         if (elementRaw == String.class) {\n-            return new StringCollectionSerializer(property);\n+            return new StringCollectionSerializer();\n         }\n         return StdContainerSerializers.collectionSerializer(type.getContentType(), staticTyping,\n                 elementTypeSerializer, property, elementValueSerializer);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java\n  * resolution -- that is, implements both this interface and {@link ResolvableSerializer}\n  * -- resolution via {@link ResolvableSerializer} occurs first, and contextual\n  * resolution (via this interface) later on.\n- *\n- * @param <T> Type of serializer to contextualize\n  */\n-public interface ContextualSerializer<T>\n+public interface ContextualSerializer\n {\n     /**\n      * Method called to see if a different (or differently configured) serializer\n      * \n      * @throws JsonMappingException\n      */\n-    public JsonSerializer<T> createContextual(SerializerProvider prov,\n+    public JsonSerializer<?> createContextual(SerializerProvider prov,\n             BeanProperty property)\n         throws JsonMappingException;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java\n             BeanProperty property)\n         throws JsonMappingException\n     {\n-        if (ser instanceof ContextualSerializer<?>) {\n-            ser = ((ContextualSerializer<?>) ser).createContextual(this, property);\n+        if (ser instanceof ContextualSerializer) {\n+            ser = ((ContextualSerializer) ser).createContextual(this, property);\n         }\n         return (JsonSerializer<Object>) ser;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n      */\n     protected PropertySerializerMap _dynamicSerializers;\n     \n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+    \n     protected AsArraySerializerBase(Class<?> cls, JavaType et, boolean staticTyping,\n             TypeSerializer vts, BeanProperty property, JsonSerializer<Object> elementSerializer)\n     {\n         _dynamicSerializers = PropertySerializerMap.emptyMap();\n     }\n \n+    /**\n+     * Need to get callback to resolve value serializer, if static typing\n+     * is used (either being forced, or because value type is final)\n+     */\n+    @Override\n+    public void resolve(SerializerProvider provider)\n+        throws JsonMappingException\n+    {\n+        if (_staticTyping && _elementType != null && _elementSerializer == null) {\n+            _elementSerializer = provider.findValueSerializer(_elementType, _property);\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Accessors\n+    /**********************************************************\n+     */\n+    \n     @Override\n     public JavaType getContentType() {\n         return _elementType;\n     public JsonSerializer<?> getContentSerializer() {\n         return _elementSerializer;\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Serialization\n+    /**********************************************************\n+     */\n     \n     @Override\n     public final void serialize(T value, JsonGenerator jgen, SerializerProvider provider)\n         return o;\n     }\n \n-    /**\n-     * Need to get callback to resolve value serializer, if static typing\n-     * is used (either being forced, or because value type is final)\n-     */\n-    @Override\n-    public void resolve(SerializerProvider provider)\n-        throws JsonMappingException\n-    {\n-        if (_staticTyping && _elementType != null && _elementSerializer == null) {\n-            _elementSerializer = provider.findValueSerializer(_elementType, _property);\n-        }\n-    }\n-\n     protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,\n             Class<?> type, SerializerProvider provider) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n     /* Accessors\n     /**********************************************************\n      */\n-\n     \n     @Override\n     public final Class<T> handledType() { return _handledType; }\n         // [JACKSON-55] Need to add reference information\n         throw JsonMappingException.wrapWithPath(t, bean, index);\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods, other\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Method that can be called to determine if given serializer is the default\n+     * serializer Jackson uses; as opposed to a custom serializer installed by\n+     * a module or calling application. Determination is done using\n+     * {@link JacksonStdImpl} annotation on serializer class.\n+     */\n+    protected boolean isDefaultSerializer(JsonSerializer<?> serializer) {\n+        return (serializer != null && serializer.getClass().getAnnotation(JacksonStdImpl.class) != null);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StringCollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StringCollectionSerializer.java\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n-import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n-import com.fasterxml.jackson.databind.util.ClassUtil;\n+import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n \n /**\n  * Efficient implement for serializing {@link Collection}s that contain Strings.\n @JacksonStdImpl\n public class StringCollectionSerializer\n     extends StaticListSerializerBase<Collection<String>>\n-    implements ResolvableSerializer\n+    implements ContextualSerializer\n {\n-    protected JsonSerializer<String> _serializer;\n+    protected final JsonSerializer<String> _serializer;\n     \n-    public StringCollectionSerializer(BeanProperty property) {\n-        super(Collection.class, property);\n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+    \n+    public StringCollectionSerializer() {\n+        this(null);\n     }\n-        \n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected StringCollectionSerializer(JsonSerializer<?> ser)\n+    {\n+        super(Collection.class, null);\n+        _serializer = (JsonSerializer<String>) ser;\n+    }        \n+    \n     @Override protected JsonNode contentSchema() {\n         return createSchemaNode(\"string\", true);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n+    /*\n+    /**********************************************************\n+    /* Post-processing\n+    /**********************************************************\n+     */\n+    \n     @Override\n-    public void resolve(SerializerProvider provider) throws JsonMappingException\n+    public JsonSerializer<?> createContextual(SerializerProvider provider,\n+            BeanProperty property)\n+        throws JsonMappingException\n     {\n         JsonSerializer<?> ser = provider.findValueSerializer(String.class, _property);\n-        if (!ClassUtil.isJacksonStdImpl(ser)) {\n-            _serializer = (JsonSerializer<String>) ser;\n+        if (isDefaultSerializer(ser)) {\n+            ser = null;\n         }\n+        if (ser == _serializer) {\n+            return this;\n+        }\n+        return new StringCollectionSerializer(ser);\n     }\n \n+    /*\n+    /**********************************************************\n+    /* Actual serialization\n+    /**********************************************************\n+     */\n+    \n     @Override\n     public void serialize(Collection<String> value, JsonGenerator jgen, SerializerProvider provider)\n         throws IOException, JsonGenerationException\n             }\n        }\n     }\n-\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualKeyTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualKeyTypes.java\n \n     static class ContextualKeySerializer\n         extends JsonSerializer<String>\n-        implements ContextualSerializer<String>\n+        implements ContextualSerializer\n     {\n         protected final String _prefix;\n     \n         }\n     \n         @Override\n-        public JsonSerializer<String> createContextual(SerializerProvider prov, BeanProperty property)\n+        public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property)\n             throws JsonMappingException\n         {\n             return new ContextualKeySerializer(_prefix+\":\");\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualSerialization.java\n      */\n     static class AnnotatedContextualSerializer\n         extends JsonSerializer<String>\n-        implements ContextualSerializer<String>\n+        implements ContextualSerializer\n     {\n         protected final String _prefix;\n         \n         }\n \n         @Override\n-        public JsonSerializer<String> createContextual(SerializerProvider prov, BeanProperty property)\n+        public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property)\n                 throws JsonMappingException\n         {\n             String prefix = \"UNKNOWN\";\n \n     static class ContextualAndResolvable\n         extends JsonSerializer<String>\n-        implements ContextualSerializer<String>, ResolvableSerializer\n+        implements ContextualSerializer, ResolvableSerializer\n     {\n         protected int isContextual;\n         protected int isResolved;\n         }\n \n         @Override\n-        public JsonSerializer<String> createContextual(SerializerProvider prov, BeanProperty property)\n+        public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property)\n                 throws JsonMappingException\n         {\n             return new ContextualAndResolvable(isResolved, isContextual+1);", "timestamp": 1328055412, "metainfo": ""}