{"sha": "37914e65ce1dca8869d5e2baa53043cf0d725ce0", "log": "And bit of deserializer refactoring too", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n      * (that is things other than Collection, Map or array)\n      * types. These need not go through factory.\n      */\n-    final static HashMap<ClassKey, JsonDeserializer<Object>> _simpleDeserializers = StdDeserializers.constructAll();\n+    final protected static HashMap<ClassKey, JsonDeserializer<Object>> _simpleDeserializers\n+        = new HashMap<ClassKey, JsonDeserializer<Object>>();\n+\n+    /**\n+     * Also special array deserializers for primitive array types.\n+     */\n+    final protected static HashMap<JavaType,JsonDeserializer<Object>> _arrayDeserializers\n+        = PrimitiveArrayDeserializers.getAll();\n+\n+    /**\n+     * Set of available key deserializers is currently limited\n+     * to standard types; and all known instances are storing in this map.\n+     */\n+    final protected static HashMap<JavaType, KeyDeserializer> _keyDeserializers = StdKeyDeserializers.constructAll();\n+\n+    static {\n+        // First, add the fall-back \"untyped\" deserializer:\n+        _add(_simpleDeserializers, Object.class, new UntypedObjectDeserializer());\n+    \n+        // Then String and String-like converters:\n+        StdDeserializer<?> strDeser = new StringDeserializer();\n+        _add(_simpleDeserializers, String.class, strDeser);\n+        _add(_simpleDeserializers, CharSequence.class, strDeser);\n+    \n+        // Primitives/wrappers, other Numbers:\n+        _add(_simpleDeserializers, NumberDeserializers.all());\n+        // Date/time types\n+        _add(_simpleDeserializers, DateDeserializers.all());\n+        // other JDK types\n+        _add(_simpleDeserializers, JdkDeserializers.all());\n+        // and a few Jackson types as well:\n+        _add(_simpleDeserializers, JacksonDeserializers.all());\n+    }\n+\n+    private static void _add(Map<ClassKey, JsonDeserializer<Object>> desers,\n+            StdDeserializer<?>[] serializers) {\n+        for (StdDeserializer<?> ser : serializers) {\n+            _add(desers, ser.getValueClass(), ser);\n+        }\n+    }\n+\n+    private static void _add(Map<ClassKey, JsonDeserializer<Object>> desers,\n+            Class<?> valueClass, StdDeserializer<?> stdDeser)\n+    {\n+        @SuppressWarnings(\"unchecked\")\n+        JsonDeserializer<Object> deser = (JsonDeserializer<Object>) stdDeser;\n+        desers.put(new ClassKey(valueClass), deser);\n+    }\n     \n     /* We do some defaulting for abstract Map classes and\n      * interfaces, to avoid having to use exact types or annotations in\n     }\n \n     /**\n-     * Also special array deserializers for primitive array types.\n-     */\n-    protected final static HashMap<JavaType,JsonDeserializer<Object>> _arrayDeserializers\n-        = PrimitiveArrayDeserializers.getAll();\n-\n-    /**\n-     * Set of available key deserializers is currently limited\n-     * to standard types; and all known instances are storing in this map.\n-     */\n-    final static HashMap<JavaType, KeyDeserializer> _keyDeserializers = StdKeyDeserializers.constructAll();\n-    \n-    /**\n      * To support external/optional deserializers, we'll use a helper class\n      */\n     protected OptionalHandlerFactory optionalHandlers = OptionalHandlerFactory.instance;\n-\n+    \n     /*\n     /**********************************************************\n     /* Config\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n @JacksonStdImpl\n-public class StringDeserializer\n+public final class StringDeserializer\n     extends StdScalarDeserializer<String>\n {\n     public StringDeserializer() { super(String.class); }", "timestamp": 1327172616, "metainfo": ""}