{"sha": "79a126ba58df304da0e5c2eb7a7a4874fadea118", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n \n import com.fasterxml.jackson.core.JsonNode;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer;\n-import com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;\n-import com.fasterxml.jackson.databind.deser.std.EnumDeserializer;\n-import com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer;\n-import com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer;\n-import com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer;\n-import com.fasterxml.jackson.databind.deser.std.MapDeserializer;\n-import com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer;\n-import com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers;\n-import com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer;\n+import com.fasterxml.jackson.databind.deser.std.*;\n import com.fasterxml.jackson.databind.ext.OptionalHandlerFactory;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n                 referencedType = params[0];\n             }\n             \n-            JsonDeserializer<?> d2 = new AtomicReferenceDeserializer(referencedType, property);\n+            JsonDeserializer<?> d2 = new JdkDeserializers.AtomicReferenceDeserializer(referencedType, property);\n             return (JsonDeserializer<Object>)d2;\n         }\n         // [JACKSON-386]: External/optional type handlers are handled somewhat differently\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializers.java\n         // other JDK types\n         add(JdkDeserializers.all());\n \n-        // [JACKSON-283] need to support atomic types, too\n-        // (note: AtomicInteger/Long work due to single-arg constructor)\n-        add(new AtomicBooleanDeserializer());\n-\n         add(JacksonDeserializers.all());\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n     public static StdDeserializer<?>[] all()\n     {\n         return  new StdDeserializer[] {\n+            new JavaTypeDeserializer(),\n+//            new JsonLocationDeserializer(),\n             new TokenBufferDeserializer(),\n-            new JavaTypeDeserializer()\n         };\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n import java.net.URI;\n import java.net.URL;\n import java.util.*;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n import java.util.regex.Pattern;\n \n import com.fasterxml.jackson.core.Base64Variants;\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.DeserializerProvider;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n public class JdkDeserializers\n             new InetAddressDeserializer(),\n \n             // other types:\n+\n+            // (note: AtomicInteger/Long work due to single-arg constructor;\n+            new AtomicBooleanDeserializer(),\n             new ClassDeserializer(),\n             new StackTraceElementDeserializer()\n         };\n         }\n     }\n \n+    /*\n+    /**********************************************************\n+    /* AtomicXxx types\n+    /**********************************************************\n+     */\n+    \n+    public static class AtomicReferenceDeserializer\n+        extends StdScalarDeserializer<AtomicReference<?>>\n+        implements ResolvableDeserializer\n+    {\n+        /**\n+         * Type of value that we reference\n+         */\n+        protected final JavaType _referencedType;\n+        \n+        protected final BeanProperty _property;\n+        \n+        protected JsonDeserializer<?> _valueDeserializer;\n+        \n+        /**\n+         * @param referencedType Parameterization of this reference\n+         */\n+        public AtomicReferenceDeserializer(JavaType referencedType, BeanProperty property)\n+        {\n+            super(AtomicReference.class);\n+            _referencedType = referencedType;\n+            _property = property;\n+        }\n+        \n+        @Override\n+        public AtomicReference<?> deserialize(JsonParser jp, DeserializationContext ctxt)\n+            throws IOException, JsonProcessingException\n+        {\n+            return new AtomicReference<Object>(_valueDeserializer.deserialize(jp, ctxt));\n+        }\n+        \n+        @Override\n+        public void resolve(DeserializationConfig config, DeserializerProvider provider)\n+            throws JsonMappingException\n+        {\n+            if (_valueDeserializer == null) {\n+                _valueDeserializer = provider.findValueDeserializer(config, _referencedType, _property);\n+            }\n+        }\n+    }\n+\n+    public static class AtomicBooleanDeserializer\n+        extends StdScalarDeserializer<AtomicBoolean>\n+    {\n+        public AtomicBooleanDeserializer() { super(AtomicBoolean.class); }\n+        \n+        @Override\n+        public AtomicBoolean deserialize(JsonParser jp, DeserializationContext ctxt)\n+            throws IOException, JsonProcessingException\n+        {\n+            // 16-Dec-2010, tatu: Should we actually convert null to null AtomicBoolean?\n+            return new AtomicBoolean(_parseBooleanPrimitive(jp, ctxt));\n+        }\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Deserializers for other JDK types", "timestamp": 1325048032, "metainfo": ""}