{"sha": "0ffbca84ed9b068cb2e218b090baed84813ed925", "log": "Support type modifiers in type id name resolution.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n     @Override\n     public String idFromValue(Object value)\n     {\n-        Class<?> cls = value.getClass();\n+        Class<?> cls = _typeFactory.constructType(value.getClass()).getRawClass();\n         final String key = cls.getName();\n         String name;\n         synchronized (_typeToId) {\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifierNameResolution.java\n+package com.fasterxml.jackson.databind.module;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.type.TypeBindings;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.databind.type.TypeModifier;\n+import com.fasterxml.jackson.test.BaseTest;\n+\n+import java.lang.reflect.Type;\n+\n+public class TestTypeModifierNameResolution extends BaseTest {\n+\n+\tinterface MyType {\n+\t\tString getData();\n+\t\tvoid setData(String data);\n+\t}\n+\n+\tstatic class MyTypeImpl implements MyType {\n+\t\tprivate String data;\n+\n+\t\tpublic String getData() {\n+\t\t\treturn data;\n+\t\t}\n+\n+\t\tpublic void setData(String data) {\n+\t\t\tthis.data = data;\n+\t\t}\n+\t}\n+\n+\tstatic class CustomTypeModifier extends TypeModifier {\n+\t\t@Override\n+\t\tpublic JavaType modifyType(JavaType type, Type jdkType, TypeBindings context, TypeFactory typeFactory) {\n+\t\t\tif (type.getRawClass().equals(MyTypeImpl.class)) {\n+\t\t\t\treturn typeFactory.constructType(MyType.class);\n+\t\t\t}\n+\t\t\treturn type;\n+\t\t}\n+\t}\n+\n+\t@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.WRAPPER_OBJECT)\n+\tpublic interface Mixin { }\n+\n+\t// Expect that the TypeModifier kicks in when the type id is written.\n+\tpublic void testTypeModiferNameResolution() throws Exception\n+\t{\n+\t\tObjectMapper mapper = new ObjectMapper();\n+\t\tmapper.setTypeFactory(mapper.getTypeFactory().withModifier(new CustomTypeModifier()));\n+\t\tmapper.addMixInAnnotations(MyType.class, Mixin.class);\n+\n+\t\tMyType obj = new MyTypeImpl();\n+\t\tobj.setData(\"something\");\n+\n+\t\tString s = mapper.writer().writeValueAsString(obj);\n+\t\tassertTrue(s.startsWith(\"{\\\"TestTypeModifierNameResolution$MyType\\\":\"));\n+\t}\n+}", "timestamp": 1386991675, "metainfo": ""}