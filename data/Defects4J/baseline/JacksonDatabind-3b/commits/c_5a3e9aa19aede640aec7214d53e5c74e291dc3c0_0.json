{"sha": "5a3e9aa19aede640aec7214d53e5c74e291dc3c0", "log": "More refactoring to get rid of unneeded methods", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java\n         }\n     }\n \n-    /**\n-     * @deprecated Since 2.2 -- use {@link #find} instead.\n-     */\n-    @Deprecated\n-    public static StdDeserializer<?>[] all()\n-    {\n-        return new StdDeserializer<?>[] {\n-                // primitive-wrappers (simple):\n-                new BooleanDeserializer(Boolean.class, null),\n-                new ByteDeserializer(Byte.class, null),\n-                new ShortDeserializer(Short.class, null),\n-                new CharacterDeserializer(Character.class, null),\n-                new IntegerDeserializer(Integer.class, null),\n-                new LongDeserializer(Long.class, null),\n-                new FloatDeserializer(Float.class, null),\n-                new DoubleDeserializer(Double.class, null),\n-\n-                /* And actual primitives: difference is the way nulls are to be\n-                 * handled...\n-                 */\n-                new BooleanDeserializer(Boolean.TYPE, Boolean.FALSE),\n-                new ByteDeserializer(Byte.TYPE, Byte.valueOf((byte)(0))),\n-                new ShortDeserializer(Short.TYPE, Short.valueOf((short)0)),\n-                new CharacterDeserializer(Character.TYPE, Character.valueOf('\\0')),\n-                new IntegerDeserializer(Integer.TYPE, Integer.valueOf(0)),\n-                new LongDeserializer(Long.TYPE, Long.valueOf(0L)),\n-                new FloatDeserializer(Float.TYPE, Float.valueOf(0.0f)),\n-                new DoubleDeserializer(Double.TYPE, Double.valueOf(0.0)),\n-                \n-                // and related\n-                new NumberDeserializer(),\n-                new BigDecimalDeserializer(),\n-                new BigIntegerDeserializer()\n-        };\n-    }\n-    \n-    public static JsonDeserializer<?> find(Class<?> rawType, String clsName)\n-    {\n+    public static JsonDeserializer<?> find(Class<?> rawType, String clsName) {\n         if (rawType.isPrimitive()) {\n             if (rawType == Integer.TYPE) {\n                 return IntegerDeserializer.primitiveInstance;\n \n         protected final T _nullValue;\n         \n-        protected PrimitiveOrWrapperDeserializer(Class<T> vc, T nvl)\n-        {\n+        protected PrimitiveOrWrapperDeserializer(Class<T> vc, T nvl) {\n             super(vc);\n             _nullValue = nvl;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java\n     public abstract void registerSubtypes(NamedType... types);\n \n     public abstract void registerSubtypes(Class<?>... classes);\n-    \n-    /**\n-     * @deprecated Since 2.1: use variant that takes in property type.\n-     */\n-    @Deprecated\n-    public abstract Collection<NamedType> collectAndResolveSubtypes(AnnotatedMember property,\n-            MapperConfig<?> config, AnnotationIntrospector ai);\n \n     /**\n      * Method for finding out all reachable subtypes for a property specified\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java\n      */\n \n     @Override    \n-    public void registerSubtypes(NamedType... types)\n-    {\n+    public void registerSubtypes(NamedType... types) {\n         if (_registeredSubtypes == null) {\n             _registeredSubtypes = new LinkedHashSet<NamedType>();\n         }\n     }\n \n     @Override\n-    public void registerSubtypes(Class<?>... classes)\n-    {\n+    public void registerSubtypes(Class<?>... classes) {\n         NamedType[] types = new NamedType[classes.length];\n         for (int i = 0, len = classes.length; i < len; ++i) {\n             types[i] = new NamedType(classes[i]);\n         }\n         registerSubtypes(types);\n-    }\n-\n-    /**\n-     * @deprecated Since 2.1\n-     */\n-    @Deprecated\n-    @Override\n-    public Collection<NamedType> collectAndResolveSubtypes(AnnotatedMember property,\n-        MapperConfig<?> config, AnnotationIntrospector ai)\n-    {\n-        return collectAndResolveSubtypes(property, config, ai, null);\n     }\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n      */\n \n     /**\n-     * Deprecated method; final to help identify problems with sub-classes,\n-     * as this method will NOT be called any more in 2.1\n-     * \n-     * @deprecated Since 2.1 (use variant without 'property' argument).\n-     */\n-    @Deprecated\n-    public final JsonSerializer<Object> findBeanSerializer(SerializerProvider prov,\n-            JavaType type, BeanDescription beanDesc, BeanProperty property)\n-        throws JsonMappingException {\n-        return findBeanSerializer(prov, type, beanDesc);\n-    }\n-    \n-    /**\n      * Method that will try to construct a {@link BeanSerializer} for\n      * given class. Returns null if no properties are found.\n      */\n-    public JsonSerializer<Object> findBeanSerializer(SerializerProvider prov,\n-            JavaType type, BeanDescription beanDesc)\n+    public JsonSerializer<Object> findBeanSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         // First things first: we know some types are not beans...\n         return constructBeanSerializer(prov, beanDesc);\n     }\n \n-    /**\n-     * @deprecated Since 2.1\n-     */\n-    @Deprecated\n-    public final TypeSerializer findPropertyTypeSerializer(JavaType baseType,\n-            SerializationConfig config, AnnotatedMember accessor, BeanProperty property)\n-        throws JsonMappingException {\n-        return findPropertyTypeSerializer(baseType, config, accessor);\n-    }\n-    \n     /**\n      * Method called to create a type information serializer for values of given\n      * non-container property\n     /**********************************************************\n      */\n \n-    /**\n-     * Deprecated method; final to help identify problems with sub-classes,\n-     * as this method will NOT be called any more in 2.1\n-     * \n-     * @deprecated Since 2.1, do not pass 'property' argument\n-     */\n-    @Deprecated\n-    protected final JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov,\n-            BeanDescription beanDesc, BeanProperty property)\n-        throws JsonMappingException\n-    {\n-        return constructBeanSerializer(prov, beanDesc);\n-    }\n-    \n     /**\n      * Method called to construct serializer for serializing specified bean type.\n      * \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java\n      * @since 2.1\n      */\n     public static ContainerSerializer<?> indexedListSerializer(JavaType elemType,\n-            boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer)\n-    {\n+            boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer) {\n         return new IndexedListSerializer(elemType, staticTyping, vts, null, valueSerializer);\n     }\n \n      * @since 2.1\n      */\n     public static ContainerSerializer<?> collectionSerializer(JavaType elemType,\n-            boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer)\n-    {\n+            boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer) {\n         return new CollectionSerializer(elemType, staticTyping, vts, null, valueSerializer);\n     }\n \n     public static ContainerSerializer<?> iteratorSerializer(JavaType elemType,\n-            boolean staticTyping, TypeSerializer vts)\n-    {\n+            boolean staticTyping, TypeSerializer vts) {\n         return new IteratorSerializer(elemType, staticTyping, vts, null);\n     }\n \n     public static ContainerSerializer<?> iterableSerializer(JavaType elemType,\n-            boolean staticTyping, TypeSerializer vts)\n-    {\n+            boolean staticTyping, TypeSerializer vts) {\n         return new IterableSerializer(elemType, staticTyping, vts, null);\n     }\n \n-    public static JsonSerializer<?> enumSetSerializer(JavaType enumType)\n-    {\n+    public static JsonSerializer<?> enumSetSerializer(JavaType enumType) {\n         return new EnumSetSerializer(enumType, null);\n     }\n-\n-    /*\n-    /**********************************************************\n-    /* Deprecated methods\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * @deprecated Since 2.1; use variant that does not take 'property' argument\n-     */\n-    @Deprecated\n-    public static ContainerSerializer<?> indexedListSerializer(JavaType elemType,\n-            boolean staticTyping, TypeSerializer vts, BeanProperty property,\n-            JsonSerializer<Object> valueSerializer)\n-    {\n-        return indexedListSerializer(elemType, staticTyping, vts, valueSerializer);\n-    }\n-\n-    /**\n-     * @deprecated Since 2.1; use variant that does not take 'property' argument\n-     */\n-    @Deprecated\n-    public static ContainerSerializer<?> collectionSerializer(JavaType elemType,\n-            boolean staticTyping, TypeSerializer vts, BeanProperty property,\n-            JsonSerializer<Object> valueSerializer)\n-    {\n-        return collectionSerializer(elemType, staticTyping, vts, valueSerializer);\n-    }\n }", "timestamp": 1388462278, "metainfo": ""}