{"sha": "aa321ee8acf015d68a954b714f739b584936a8fd", "log": "Fix #271 (for in-built schema generation)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      * Convenience conversion method that will bind data given JSON tree\n      * contains into specific value (usually bean) type.\n      *<p>\n-     * Equivalent to:\n+     * Functionally equivalent to:\n      *<pre>\n      *   objectMapper.convertValue(n, valueClass);\n      *</pre>\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n import java.lang.reflect.Method;\n import java.lang.reflect.Type;\n import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map.Entry;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.io.SerializedString;\n         } else {  \n             schemaNode = com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode(); \n         }\n-        propertiesNode.put(getName(), schemaNode);\n+        if (isUnwrapping()) {\n+            JsonNode props = schemaNode.get(\"properties\");\n+            if (props != null) {\n+                Iterator<Entry<String, JsonNode>> it = props.fields();\n+                while (it.hasNext()) {\n+                    Entry<String,JsonNode> entry = it.next();\n+                    propertiesNode.put(entry.getKey(), entry.getValue());\n+                }\n+            }\n+        } else {\n+            propertiesNode.put(getName(), schemaNode);\n+        }\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n         throws JsonMappingException\n     {\n         //deposit your output format \n-        JsonObjectFormatVisitor objectVisitor = (visitor == null) ? null : visitor.expectObjectFormat(typeHint);\n-        if (objectVisitor != null) {\n-            if (_propertyFilterId != null) {\n-                BeanPropertyFilter filter = findFilter(visitor.getProvider());\n-                for (int i = 0; i < _props.length; i++) {\n-                    filter.depositSchemaProperty(_props[i], objectVisitor, visitor.getProvider());\n-                }\n-            } else {\n-                for (int i = 0; i < _props.length; i++) {\n-                    _props[i].depositSchemaProperty(objectVisitor);\n-                }\n+        if (visitor == null) {\n+            return;\n+        }\n+        JsonObjectFormatVisitor objectVisitor = visitor.expectObjectFormat(typeHint);\n+        if (objectVisitor == null) {\n+            return;\n+        }\n+        if (_propertyFilterId != null) {\n+            BeanPropertyFilter filter = findFilter(visitor.getProvider());\n+            for (int i = 0; i < _props.length; i++) {\n+                filter.depositSchemaProperty(_props[i], objectVisitor, visitor.getProvider());\n+            }\n+        } else {\n+            for (int i = 0; i < _props.length; i++) {\n+                _props[i].depositSchemaProperty(objectVisitor);\n             }\n         }\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n import java.util.Collection;\n import java.util.Map;\n \n-import com.fasterxml.jackson.annotation.JsonFilter;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.*;\n+\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n     @JsonSerializableSchema(id=\"myType\")\n     public class BeanWithId {\n         public String value;\n+    }\n+\n+    static class UnwrappingRoot\n+    {\n+        public int age;\n+\n+        @JsonUnwrapped\n+        public Name name;\n+    }\n+\n+    static class Name {\n+        public String firstName, lastName;\n     }\n     \n     /*\n         assertEquals(\"{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}\",\n                 json);\n     }\n+\n+    // [Issue#271]\n+    public void testUnwrapping()  throws Exception\n+    {\n+        JsonSchema jsonSchema = MAPPER.generateJsonSchema(UnwrappingRoot.class);\n+        String json = jsonSchema.toString().replaceAll(\"\\\"\", \"'\");\n+        String EXP = \"{'type':'object',\"\n+                +\"'properties':{'age':{'type':'integer'},\"\n+                +\"'firstName':{'type':'string'},'lastName':{'type':'string'}}}\";\n+        assertEquals(EXP, json);\n+    }\n+\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestMultipleExternalIds.java\n+package com.fasterxml.jackson.databind.jsontype;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestMultipleExternalIds extends BaseMapTest\n+{\n+    // For [Issue#291]\n+    interface F1 {}\n+\n+    static class A implements F1 {\n+        public String a;\n+    }\n+\n+    static class B implements F1 {\n+        public String b;\n+    }\n+\n+    static interface F2 {}\n+\n+    static class C implements F2 {\n+        public String c;\n+    }\n+\n+    static class D implements F2{\n+        public String d;\n+    }\n+\n+    static class Container {\n+        public String type;\n+\n+        @JsonTypeInfo(use = Id.NAME, property = \"type\", include = As.EXTERNAL_PROPERTY)\n+        @JsonSubTypes({\n+                @JsonSubTypes.Type(value = A.class, name = \"1\"),\n+                @JsonSubTypes.Type(value = B.class, name = \"2\")})\n+        public F1 field1;\n+\n+        @JsonTypeInfo(use = Id.NAME, property = \"type\", include = As.EXTERNAL_PROPERTY)\n+        @JsonSubTypes({\n+                @JsonSubTypes.Type(value = C.class, name = \"1\"),\n+                @JsonSubTypes.Type(value = D.class, name = \"2\")})\n+        public F2 field2;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    // [Issue#291]\n+    public void testMultiple() throws Exception\n+    {\n+        final ObjectMapper mapper = objectMapper();\n+        final String JSON =\n+\"{\\\"type\\\" : \\\"1\\\",\\n\"\n++\"\\\"field1\\\" : {\\n\"\n++\"  \\\"a\\\" : \\\"AAA\\\"\\n\"\n++\"}, \\\"field2\\\" : {\\n\"\n++\"  \\\"c\\\" : \\\"CCC\\\"\\n\"\n++\"}\\n\"\n++\"}\";\n+\n+        Container c = mapper.readValue(JSON, Container.class);\n+        assertNotNull(c);\n+        assertTrue(c.field1 instanceof A);\n+        assertTrue(c.field2 instanceof C);\n+    }\n+}", "timestamp": 1379645608, "metainfo": ""}