{"sha": "e134bf0cd0166ed7bef6004d53296139b85ae817", "log": "Implement [Issue#45]: @JsonNaming to support per-class naming strategy overrides", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n         return null;\n     }\n     \n+    /**\n+     * Method for finding {@link PropertyNamingStrategy} for given\n+     * class, if any specified by annotations; and if so, either return\n+     * a {@link PropertyNamingStrategy} instance, or Class to use for\n+     * creating instance\n+     * \n+     * @return Sub-class or instance of {@link PropertyNamingStrategy}, if one\n+     *   is specified for given class; null if not.\n+     * \n+     * @since 2.1\n+     */\n+    public Object findNamingStrategy(AnnotatedClass ac) {\n+        return null;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Property auto-detection\n                 id = _secondary.findFilterId(ac);\n             }\n             return id;\n+        }\n+\n+        @Override\n+        public Object findNamingStrategy(AnnotatedClass ac)\n+        {\n+            Object str = _primary.findNamingStrategy(ac);\n+            if (str == null) {\n+                str = _secondary.findNamingStrategy(ac);\n+            }\n+            return str;\n         }\n         \n         /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n     }\n     \n     /**\n-     * Helper method used when value to serialize is {@link Closeable} and its <code>close()</code>\n+     * Helper method used when value to serialize is {@link java.util.Closeable}\n+     * and its <code>close()</code>\n      * method is to be called right after serialization has been called\n      */\n     private final void _writeCloseableValue(JsonGenerator jgen, Object value, SerializationConfig cfg)\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotation/JsonNaming.java\n+package com.fasterxml.jackson.databind.annotation;\n+\n+import java.lang.annotation.*;\n+\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n+\n+/**\n+ * Annotation that can be used to indicate a {@link PropertyNamingStrategy}\n+ * to use for annotated class. Overrides the global (default) strategy.\n+ * \n+ * @since 2.1\n+ */\n+@Target({ElementType.ANNOTATION_TYPE, ElementType.TYPE})\n+@Retention(RetentionPolicy.RUNTIME)\n+@com.fasterxml.jackson.annotation.JacksonAnnotation\n+public @interface JsonNaming\n+{\n+    public Class<? extends PropertyNamingStrategy> value();\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/HandlerInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/HandlerInstantiator.java\n             Annotated annotated, Class<?> implClass) {\n         return null;\n     }\n+\n+    /**\n+     * Method called to construct a NamingStrategy instance used for specified\n+     * class.\n+     * \n+     * @since 2.1\n+     */\n+    public PropertyNamingStrategy namingStrategyInstance(MapperConfig<?> config,\n+            Annotated annotated, Class<?> implClass) {\n+        return null;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n     /**\n      * @deprecated since 2.1, use {@link #setDefaultCreator} instead.\n      */\n+    @Deprecated\n     public void setDefaultConstructor(AnnotatedConstructor ctor) {\n         _defaultConstructor = _fixAccess(ctor);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n         }\n         return null;\n     }\n+\n+    @Override\n+    public Object findNamingStrategy(AnnotatedClass ac)\n+    {\n+        JsonNaming ann = ac.getAnnotation(JsonNaming.class);\n+        return (ann == null) ? null : ann.value();\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n \n import java.util.*;\n \n-\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.util.BeanUtil;\n+import com.fasterxml.jackson.databind.util.ClassUtil;\n \n /**\n  * Helper class used for aggregating information about all possible\n \n         // Rename remaining properties\n         _renameProperties();\n+\n         // And use custom naming strategy, if applicable...\n-        PropertyNamingStrategy naming = _config.getPropertyNamingStrategy();\n+        PropertyNamingStrategy naming = _findNamingStrategy();\n         if (naming != null) {\n             _renameUsing(naming);\n         }\n         }\n         return prop;\n     }\n+\n+    private PropertyNamingStrategy _findNamingStrategy()\n+    {\n+        Object namingDef = (_annotationIntrospector == null)? null\n+                : _annotationIntrospector.findNamingStrategy(_classDef);\n+        if (namingDef == null) {\n+            return _config.getPropertyNamingStrategy();\n+        }\n+        if (namingDef instanceof PropertyNamingStrategy) {\n+            return (PropertyNamingStrategy) namingDef;\n+        }\n+        /* Alas, there's no way to force return type of \"either class\n+         * X or Y\" -- need to throw an exception after the fact\n+         */\n+        if (!(namingDef instanceof Class)) {\n+            throw new IllegalStateException(\"AnnotationIntrospector returned PropertyNamingStrategy definition of type \"\n+                    +namingDef.getClass().getName()+\"; expected type PropertyNamingStrategy or Class<PropertyNamingStrategy> instead\");\n+        }\n+        Class<?> namingClass = (Class<?>)namingDef;\n+        if (!PropertyNamingStrategy.class.isAssignableFrom(namingClass)) {\n+            throw new IllegalStateException(\"AnnotationIntrospector returned Class \"\n+                    +namingClass.getName()+\"; expected Class<PropertyNamingStrategy>\");\n+        }\n+        HandlerInstantiator hi = _config.getHandlerInstantiator();\n+        if (hi != null) {\n+            return hi.namingStrategyInstance(_config, _classDef, namingClass);\n+        }\n+        return (PropertyNamingStrategy) ClassUtil.createInstance(namingClass,\n+                    _config.canOverrideAccessModifiers());\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/TestNamingStrategy.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestNamingStrategy.java\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonNaming;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.introspect.AnnotatedField;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n \n /**\n- * Unit tests to verify functioning of {@link PropertyNamingStrategy} which\n- * was added in Jackson 1.8, as per [JACKSON-178].\n+ * Unit tests to verify functioning of {@link PropertyNamingStrategy}.\n  */\n public class TestNamingStrategy extends BaseMapTest\n {\n         // intentionally odd name, to be renamed by naming strategy\n         public List<String> getTheVALUEs() { return THEvalues; }\n     }\n+\n+    // [Issue#45]: Support @JsonNaming\n+    @JsonNaming(PrefixStrategy.class)\n+    static class BeanWithPrefixNames\n+    {\n+        protected int a = 3;\n+        \n+        public int getA() { return a; }\n+        public void setA(int value) { a = value; }\n+    }\n     \n     /*\n     /**********************************************************************\n         assertEquals(1, foo.getTheVALUEs().size());\n         assertEquals(\"a\", foo.getTheVALUEs().get(0));\n     }\n+\n+    // @JsonNaming / [Issue#45]\n+    public void testPerClassAnnotation() throws Exception\n+    {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.setPropertyNamingStrategy(new LcStrategy());\n+        BeanWithPrefixNames input = new BeanWithPrefixNames();\n+        String json = mapper.writeValueAsString(input);\n+        assertEquals(\"{\\\"Get-a\\\":3}\", json);\n+\n+        BeanWithPrefixNames output = mapper.readValue(\"{\\\"Set-a\\\":7}\",\n+                BeanWithPrefixNames.class);\n+        assertEquals(7, output.a);\n+    }\n }", "timestamp": 1344663579, "metainfo": ""}