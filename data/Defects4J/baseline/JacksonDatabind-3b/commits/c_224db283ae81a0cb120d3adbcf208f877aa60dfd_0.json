{"sha": "224db283ae81a0cb120d3adbcf208f877aa60dfd", "log": "Add a unit test for #287", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n public abstract class SerializerProvider\n     extends DatabindContext\n {\n+    @Deprecated // since 2.3, not used by anything it seems\n     protected final static JavaType TYPE_OBJECT = TypeFactory.defaultInstance().uncheckedSimpleType(Object.class);\n \n     /**\n     public final static JsonSerializer<Object> DEFAULT_NULL_KEY_SERIALIZER =\n         new FailingSerializer(\"Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)\");\n \n-    public final static JsonSerializer<Object> DEFAULT_UNKNOWN_SERIALIZER = new UnknownSerializer();\n+    /**\n+     * NOTE: changed to <code>protected</code> for 2.3; no need to be publicly available.\n+     */\n+    protected final static JsonSerializer<Object> DEFAULT_UNKNOWN_SERIALIZER = new UnknownSerializer();\n \n     /*\n     /**********************************************************\n--- a/src/test/java/com/fasterxml/jackson/databind/convert/TestMapConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestMapConversions.java\n \n import java.util.*;\n \n-\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.util.StdConverter;\n \n public class TestMapConversions\n     extends com.fasterxml.jackson.databind.BaseMapTest\n {\n-    final ObjectMapper mapper = new ObjectMapper();\n+    final ObjectMapper MAPPER = new ObjectMapper();\n \n     enum AB { A, B; }\n \n         public Integer A;\n         public String B;\n     }\n+\n+    // [Issue#287]\n     \n+    @JsonSerialize(converter=RequestConverter.class)\n+    static class Request {\n+        public int x() {\n+            return 1;\n+        }\n+    }\n+\n+    static class RequestConverter extends StdConverter<Request, Map<String,Object>> {\n+        @Override\n+        public Map<String,Object> convert(final Request value) {\n+            final Map<String, Object> test = new LinkedHashMap<String, Object>();\n+            final Map<String, Object> innerTest = new LinkedHashMap<String, Object>();\n+            innerTest.put(\"value\", value.x());\n+            test.put(\"hello\", innerTest);\n+            return test;\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n     /**\n      * Test that verifies that we can go between couple of types of Maps...\n      */\n         Map<String,Integer> input = new LinkedHashMap<String,Integer>();\n         input.put(\"A\", Integer.valueOf(3));\n         input.put(\"B\", Integer.valueOf(-4));\n-        Map<AB,String> output = mapper.convertValue(input,\n+        Map<AB,String> output = MAPPER.convertValue(input,\n                 new TypeReference<Map<AB,String>>() { });\n         assertEquals(2, output.size());\n         assertEquals(\"3\", output.get(AB.A));\n         assertEquals(\"-4\", output.get(AB.B));\n \n         // Let's try the other way too... and mix up types a bit\n-        Map<String,Integer> roundtrip = mapper.convertValue(input,\n+        Map<String,Integer> roundtrip = MAPPER.convertValue(input,\n                 new TypeReference<TreeMap<String,Integer>>() { });\n         assertEquals(2, roundtrip.size());\n         assertEquals(Integer.valueOf(3), roundtrip.get(\"A\"));\n         EnumMap<AB,String> map = new EnumMap<AB,String>(AB.class);\n         map.put(AB.A, \"   17\");\n         map.put(AB.B, \" -1\");\n-        Bean bean = mapper.convertValue(map, Bean.class);\n+        Bean bean = MAPPER.convertValue(map, Bean.class);\n         assertEquals(Integer.valueOf(17), bean.A);\n         assertEquals(\" -1\", bean.B);\n     }\n         Bean bean = new Bean();\n         bean.A = 129;\n         bean.B = \"13\";\n-        EnumMap<AB,String> result = mapper.convertValue(bean,\n+        EnumMap<AB,String> result = MAPPER.convertValue(bean,\n                 new TypeReference<EnumMap<AB,String>>() { });\n         assertEquals(\"129\", result.get(AB.A));\n         assertEquals(\"13\", result.get(AB.B));\n     }\n+\n+    // [Issue#287]: Odd problems with `Object` type, static typing\n+    public void testIssue287() throws Exception\n+    {\n+        // use local instance to ensure no caching affects it:\n+        final ObjectMapper mapper = new ObjectMapper();\n+        final Request request = new Request();\n+        final String retString = mapper.writeValueAsString(request);\n+        assertEquals(\"{\\\"hello\\\":{\\\"value\\\":1}}\",retString);\n+    }\n }", "timestamp": 1377033988, "metainfo": ""}