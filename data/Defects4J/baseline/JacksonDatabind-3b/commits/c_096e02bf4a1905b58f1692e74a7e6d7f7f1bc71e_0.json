{"sha": "096e02bf4a1905b58f1692e74a7e6d7f7f1bc71e", "log": "Added check at end of processing to ensure all object ids are resolved.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n     public abstract ReadableObjectId findObjectId(Object id,\n             ObjectIdGenerator<?> generator);\n \n+    /**\n+     * Method called to ensure that every object id encounter during processing\n+     * are resolved.\n+     * \n+     * @throws UnresolvedForwardReference\n+     */\n+    public abstract void checkUnresolvedObjectId()\n+        throws UnresolvedForwardReference;\n+\n     /*\n     /**********************************************************\n     /* Public API, type handling\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n                 } else {\n                     result = deser.deserialize(jp, ctxt);\n                 }\n+                ctxt.checkUnresolvedObjectId();\n             }\n             // Need to consume the token too\n             jp.clearCurrentToken();\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n package com.fasterxml.jackson.databind.deser;\n \n+import java.util.Iterator;\n import java.util.LinkedHashMap;\n+import java.util.Map.Entry;\n \n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n-\n+import com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;\n import com.fasterxml.jackson.core.JsonParser;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;\n+import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n \n         return entry;\n     }\n     \n+    @Override\n+    public void checkUnresolvedObjectId() throws UnresolvedForwardReference\n+    {\n+        if(_objectIds == null){\n+            return;\n+        }\n+\n+        UnresolvedForwardReference exception = null;\n+        for (Entry<IdKey,ReadableObjectId> entry : _objectIds.entrySet()) {\n+            ReadableObjectId roid = entry.getValue();\n+            if(roid.hasReferringProperties()){\n+                IdKey key = entry.getKey();\n+                if(exception == null){\n+                    exception = new UnresolvedForwardReference(\"Unresolved forward references for: \");\n+                }\n+                for (Iterator<Referring> iterator = roid.referringProperties(); iterator.hasNext();) {\n+                    Referring referring = iterator.next();\n+                    // TODO add proper info (class + json loc).\n+                    // Modify jackson-annotation to permit access to information of IdKey.\n+                    exception.addUnresolvedId(roid.id, null, null);\n+                }\n+            }\n+        }\n+        if(exception != null){\n+            throw exception;\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Abstract methods impls, other factory methods\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/UnresolvedForwardReference.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/UnresolvedForwardReference.java\n package com.fasterxml.jackson.databind.deser;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n \n import com.fasterxml.jackson.core.JsonLocation;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;\n \n+/**\n+ * Exception thrown during deserialization when there are object id that can't\n+ * be resolved.\n+ * \n+ * @author pgelinas\n+ */\n public final class UnresolvedForwardReference extends JsonMappingException {\n+\n     private static final long serialVersionUID = -5097969645059502061L;\n-    private final ReadableObjectId _roid;\n+    private ReadableObjectId _roid;\n+    private List<UnresolvedId> _unresolvedIds;\n \n     public UnresolvedForwardReference(String msg, JsonLocation loc, ReadableObjectId roid)\n     {\n         super(msg, loc);\n         _roid = roid;\n     }\n+\n+    public UnresolvedForwardReference(String msg)\n+    {\n+        super(msg);\n+        _unresolvedIds = new ArrayList<UnresolvedId>();\n+    }\n+\n+    // ******************************\n+    // ****** Accessor methods ******\n+    // ******************************\n \n     public ReadableObjectId getRoid()\n     {\n     {\n         return _roid.id;\n     }\n+\n+    /**\n+     * Helper class\n+     * \n+     * @author pgelinas\n+     */\n+    private static class UnresolvedId {\n+        private Object _id;\n+        private JsonLocation _location;\n+        private Class<?> _type;\n+\n+        public UnresolvedId(Object id, Class<?> type, JsonLocation where)\n+        {\n+            _id = id;\n+            _type = type;\n+            _location = where;\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return String.format(\"Object id [%s] (for %s) at %s\", _id, _type, _location);\n+        }\n+    }\n+\n+    public void addUnresolvedId(Object id, Class<?> type, JsonLocation where)\n+    {\n+        _unresolvedIds.add(new UnresolvedId(id, type, where));\n+    }\n+\n+    @Override\n+    public String getMessage()\n+    {\n+        String msg = super.getMessage();\n+        if (_unresolvedIds == null) {\n+            return msg;\n+        }\n+\n+        StringBuilder sb = new StringBuilder(msg);\n+        Iterator<UnresolvedId> iterator = _unresolvedIds.iterator();\n+        while (iterator.hasNext()) {\n+            UnresolvedId unresolvedId = iterator.next();\n+            sb.append(unresolvedId.toString());\n+            if (iterator.hasNext()) {\n+                sb.append(\", \");\n+            }\n+        }\n+        sb.append('.');\n+        return sb.toString();\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;\n import com.fasterxml.jackson.databind.struct.TestObjectId.Company;\n import com.fasterxml.jackson.databind.struct.TestObjectId.Employee;\n \n         assertSame(value.values.get(\"bar\"), value.values.get(\"foo\"));\n     }\n \n+    public void testUnresolvedForwardReference()\n+        throws Exception\n+    {\n+        String json = \"{\\\"employees\\\":[\" + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[3]},\"\n+                + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":3,\\\"reports\\\":[]}\" + \"]}\";\n+        try {\n+            mapper.readValue(json, Company.class);\n+            fail(\"Should have thrown.\");\n+        } catch (UnresolvedForwardReference exception) {\n+            // Expected\n+        }\n+    }\n+\n     /*\n     /*****************************************************\n     /* Unit tests, custom (property-based) id deserialization", "timestamp": 1389625653, "metainfo": ""}