{"sha": "61bef3f6d09bd4af0d29a9cd4d6552ceefdf36fc", "log": "Merge branch 'master' of github.com:FasterXML/jackson-databind", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n     @Override\n     public String idFromValue(Object value)\n     {\n-        Class<?> cls = value.getClass();\n+        Class<?> cls = _typeFactory.constructType(value.getClass()).getRawClass();\n         final String key = cls.getName();\n         String name;\n         synchronized (_typeToId) {\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifierNameResolution.java\n+package com.fasterxml.jackson.databind.module;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.type.TypeBindings;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.databind.type.TypeModifier;\n+import com.fasterxml.jackson.test.BaseTest;\n+\n+import java.lang.reflect.Type;\n+\n+public class TestTypeModifierNameResolution extends BaseTest {\n+\n+\tinterface MyType {\n+\t\tString getData();\n+\t\tvoid setData(String data);\n+\t}\n+\n+\tstatic class MyTypeImpl implements MyType {\n+\t\tprivate String data;\n+\n+\t\tpublic String getData() {\n+\t\t\treturn data;\n+\t\t}\n+\n+\t\tpublic void setData(String data) {\n+\t\t\tthis.data = data;\n+\t\t}\n+\t}\n+\n+\tstatic class CustomTypeModifier extends TypeModifier {\n+\t\t@Override\n+\t\tpublic JavaType modifyType(JavaType type, Type jdkType, TypeBindings context, TypeFactory typeFactory) {\n+\t\t\tif (type.getRawClass().equals(MyTypeImpl.class)) {\n+\t\t\t\treturn typeFactory.constructType(MyType.class);\n+\t\t\t}\n+\t\t\treturn type;\n+\t\t}\n+\t}\n+\n+\t@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.WRAPPER_OBJECT)\n+\tpublic interface Mixin { }\n+\n+\t// Expect that the TypeModifier kicks in when the type id is written.\n+\tpublic void testTypeModiferNameResolution() throws Exception\n+\t{\n+\t\tObjectMapper mapper = new ObjectMapper();\n+\t\tmapper.setTypeFactory(mapper.getTypeFactory().withModifier(new CustomTypeModifier()));\n+\t\tmapper.addMixInAnnotations(MyType.class, Mixin.class);\n+\n+\t\tMyType obj = new MyTypeImpl();\n+\t\tobj.setData(\"something\");\n+\n+\t\tString s = mapper.writer().writeValueAsString(obj);\n+\t\tassertTrue(s.startsWith(\"{\\\"TestTypeModifierNameResolution$MyType\\\":\"));\n+\t}\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java\n             verifyException(e, \"duplicate field 'a'\");\n         }\n     }\n+\n+    public void testEqualityWrtOrder() throws Exception\n+    {\n+        ObjectNode ob1 = MAPPER.createObjectNode();\n+        ObjectNode ob2 = MAPPER.createObjectNode();\n+\n+        // same contents, different insertion order; should not matter\n+        \n+        ob1.put(\"a\", 1);\n+        ob1.put(\"b\", 2);\n+        ob1.put(\"c\", 3);\n+\n+        ob2.put(\"b\", 2);\n+        ob2.put(\"c\", 3);\n+        ob2.put(\"a\", 1);\n+\n+        assertTrue(ob1.equals(ob2));\n+        assertTrue(ob2.equals(ob1));\n+    }\n }", "timestamp": 1386993715, "metainfo": ""}