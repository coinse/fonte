{"sha": "4c7bf29c2211db059e79ce2aaa5209933f7aefd9", "log": "test refactoring; all 3 failing cases now in 'failing' package (need to disable at some point)", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestGenericsBounded.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestGenericsBounded.java\n public class TestGenericsBounded\n     extends BaseMapTest\n {\n-    /*\n-    /*******************************************************\n-    /* Helper types\n-    /*******************************************************\n-     */\n-\n     @SuppressWarnings(\"serial\")\n     static class Range<E extends Comparable<E>> implements Serializable\n     {\n         public T wrapped;\n     }\n \n-    // Helper types for [JACKSON-743]\n-    \n-    public static abstract class Base<T> {\n-        public T inconsequential = null;\n-    }\n-\n-    public static abstract class BaseData<T> {\n-        public T dataObj;\n-    }\n-   \n-    public static class Child extends Base<Long> {\n-        public static class ChildData extends BaseData<List<String>> { }\n-    }\n-\n     /*\n     /*******************************************************\n     /* Unit tests\n         assertEquals(-0.5, out.start);\n         assertEquals(0.5, out.end);\n     }\n-\n-    // Reproducing issue 743\n-    public void testResolution743() throws Exception\n-    {\n-        String s3 = \"{\\\"dataObj\\\" : [ \\\"one\\\", \\\"two\\\", \\\"three\\\" ] }\";\n-        ObjectMapper m = new ObjectMapper();\n-   \n-        Child.ChildData d = m.readValue(s3, Child.ChildData.class);\n-        assertNotNull(d.dataObj);\n-        assertEquals(3, d.dataObj.size());\n-    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestTypeAliases.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestTypeAliases\n+    extends BaseMapTest\n+{\n+\n+    // Helper types for [JACKSON-743]\n+    \n+    public static abstract class Base<T> {\n+        public T inconsequential = null;\n+    }\n+\n+    public static abstract class BaseData<T> {\n+        public T dataObj;\n+    }\n+   \n+    public static class Child extends Base<Long> {\n+        public static class ChildData extends BaseData<List<String>> { }\n+    }\n+\n+    /*\n+    /*******************************************************\n+    /* Unit tests\n+    /*******************************************************\n+     */\n+\n+\n+    // Reproducing issue 743\n+    public void testResolution743() throws Exception\n+    {\n+        String s3 = \"{\\\"dataObj\\\" : [ \\\"one\\\", \\\"two\\\", \\\"three\\\" ] }\";\n+        ObjectMapper m = new ObjectMapper();\n+   \n+        Child.ChildData d = m.readValue(s3, Child.ChildData.class);\n+        assertNotNull(d.dataObj);\n+        assertEquals(3, d.dataObj.size());\n+    }\n+}", "timestamp": 1327022093, "metainfo": ""}