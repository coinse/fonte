{"sha": "b19cd2c74b1af18df1cc32a09b152851ed7a559a", "log": "Fix #444 for mainline", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n \n                 // 04-Feb-2013, tatu: Usually should become null; but not always\n                 return _deserializeFromEmptyString();\n             }\n+            Exception cause = null;\n             try {\n                 T result = _deserialize(text, ctxt);\n                 if (result != null) {\n                     return result;\n                 }\n             } catch (IllegalArgumentException iae) {\n-                // nothing to do here, yet? We'll fail anyway\n-            }\n-            throw ctxt.weirdStringException(text, _valueClass, \"not a valid textual representation\");\n+                cause = iae;\n+            }\n+            String msg = \"not a valid textual representation\";\n+            if (cause != null) {\n+                msg += \"problem: \"+cause.getMessage();\n+            }\n+            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);\n+            if (cause != null) {\n+                e.initCause(cause);\n+            }\n+            throw e;\n+            // nothing to do here, yet? We'll fail anyway\n         }\n         if (jp.getCurrentToken() == JsonToken.VALUE_EMBEDDED_OBJECT) {\n             // Trivial cases; null to null, instance of type itself returned as is\n \n                     int i = value.lastIndexOf(']');\n                     if (i == -1) {\n-                        throw new InvalidFormatException(\n-                                \"Bracketed IPv6 address must contain closing bracket.\",\n+                        throw new InvalidFormatException(\"Bracketed IPv6 address must contain closing bracket\",\n                                 value, InetSocketAddress.class);\n                     }\n \n                     int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;\n                     return new InetSocketAddress(value.substring(0, i + 1), port);\n                 } else {\n-                    int i = value.indexOf(':');\n-                    if (i != -1 && value.indexOf(':', i + 1) == -1) {\n+                    int ix = value.indexOf(':');\n+                    if (ix >= 0 && value.indexOf(':', ix + 1) < 0) {\n                         // host:port\n-                        int port = Integer.parseInt(value.substring(i));\n-                        return new InetSocketAddress(value.substring(0, i), port);\n-                    } else {\n-                        // host or unbracketed IPv6, without port number\n-                        return new InetSocketAddress(value, 0);\n-                    }\n+                        int port = Integer.parseInt(value.substring(ix+1));\n+                        return new InetSocketAddress(value.substring(0, ix), port);\n+                    }\n+                    // host or unbracketed IPv6, without port number\n+                    return new InetSocketAddress(value, 0);\n                 }\n             }\n             throw new IllegalArgumentException();\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n         assertEquals(443, ip6port.getPort());\n \n         // should we try resolving host names? That requires connectivity...\n-        final String HOST = \"www.ning.com\";\n+        final String HOST = \"www.google.com\";\n         address = MAPPER.readValue(quote(HOST), InetSocketAddress.class);\n         assertEquals(HOST, address.getHostName());\n+\n+        final String HOST_AND_PORT = HOST+\":80\";\n+        address = MAPPER.readValue(quote(HOST_AND_PORT), InetSocketAddress.class);\n+        assertEquals(HOST, address.getHostName());\n+        assertEquals(80, address.getPort());\n     }\n \n     // [JACKSON-597]", "timestamp": 1398401374, "metainfo": ""}