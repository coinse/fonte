{"sha": "c7901c4d38fc495f2801edbe305058eb8aaa66fb", "log": "Merge branch 'master' of https://github.com/FasterXML/jackson-databind", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n             _hasNextChecked = true;\n             if (t == null) { // un-initialized or cleared; find next\n                 t = _parser.nextToken();\n-                // If EOF, no more\n-                if (t == null) {\n+                // If EOF, no more, or if we hit END_ARRAY (although we don't clear the token).\n+                if (t == null || t == JsonToken.END_ARRAY) {\n                     JsonParser jp = _parser;\n                     _parser = null;\n                     if (_closeParser) {\n                         jp.close();\n                     }\n-                    return false;\n-                }\n-                /* And similarly if we hit END_ARRAY; except that we won't close parser\n-                 * (because it's not a root-level iterator)\n-                 */\n-                if (t == JsonToken.END_ARRAY) {\n                     return false;\n                 }\n             }\n--- a/src/test/java/com/fasterxml/jackson/databind/TestReadValues.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestReadValues.java\n         array = it.next();\n         assertEquals(1, array.length);\n         assertEquals(3, array[0]);\n+        assertFalse(it.hasNext());\n+    }\n+    \n+    public void testHasNextWithEndArray() throws Exception {\n+        final String JSON = \"[1,3]\";\n+        JsonParser jp = MAPPER.getFactory().createJsonParser(JSON);\n+\n+        // NOTE: We must point JsonParser to the first element; if we tried to\n+        // use \"managed\" accessor, it would try to advance past START_ARRAY.\n+        assertToken(JsonToken.START_ARRAY, jp.nextToken());\n+        jp.nextToken();\n+        \n+        Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(jp);\n+        assertTrue(it.hasNext());\n+        int value = it.next();\n+        assertEquals(1, value);\n+        assertTrue(it.hasNext());\n+        value = it.next();\n+        assertEquals(3, value);\n+        assertFalse(it.hasNext());\n+        assertFalse(it.hasNext());\n+    }\n+    \n+    public void testHasNextWithEndArrayManagedParser() throws Exception {\n+        final String JSON = \"[1,3]\";\n+\n+        Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON);\n+        assertTrue(it.hasNext());\n+        int value = it.next();\n+        assertEquals(1, value);\n+        assertTrue(it.hasNext());\n+        value = it.next();\n+        assertEquals(3, value);\n+        assertFalse(it.hasNext());\n         assertFalse(it.hasNext());\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n      * can be defined.\n      */\n     protected JsonSerializer<Object> _nullKeySerializer = DEFAULT_NULL_KEY_SERIALIZER;\n-    \n+\n     /*\n     /**********************************************************\n     /* State, for non-blueprint instances: generic\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestObjectId.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+// related to [JACKSON-847]\n+public class TestObjectId extends BaseMapTest\n+{\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"@id\")\n+    static class ColumnMetadata {\n+      private final String name;\n+      private final String type;\n+      private final String comment;\n+\n+      @JsonCreator\n+      public ColumnMetadata(\n+        @JsonProperty(\"name\") String name,\n+        @JsonProperty(\"type\") String type,\n+        @JsonProperty(\"comment\") String comment\n+      ) {\n+        this.name = name;\n+        this.type = type;\n+        this.comment = comment;\n+      }\n+\n+      @JsonProperty(\"name\")\n+      public String getName() {\n+        return name;\n+      }\n+\n+      @JsonProperty(\"type\")\n+      public String getType() {\n+        return type;\n+      }\n+\n+      @JsonProperty(\"comment\")\n+      public String getComment() {\n+        return comment;\n+      }    \n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+    \n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+    \n+    public void testColumnMetadata() throws Exception {\n+        ColumnMetadata columnMetadata = new ColumnMetadata(\"Billy\", \"employee\", \"comment\");\n+        String serialized = MAPPER.writeValueAsString(columnMetadata);\n+        System.out.println(serialized);\n+        ColumnMetadata deserialized = MAPPER.readValue(serialized, ColumnMetadata.class);\n+        assertNotNull(deserialized);\n+        assertEquals(\"Billy\", deserialized.getName());\n+        assertEquals(\"employee\", deserialized.getType());\n+        assertEquals(\"comment\", deserialized.getComment());\n+        \n+    }\n+}", "timestamp": 1346260195, "metainfo": ""}