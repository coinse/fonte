{"sha": "8be5ba0d47a94773a40619840fb6381f241757f3", "log": "Start work on [JACKSON-747], per-call changing of Ser/DeserConfig Features (like WRAP_ROOT_VALUE)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n      * Set of features enabled; actual type (kind of features)\n      * depends on sub-classes.\n      */\n-    protected final int _featureFlags;\n-    \n+    protected final int _deserFeatures;\n+\n     /**\n      * Linked list that contains all registered problem handlers.\n      * Implementation as front-added linked list allows for sharing\n             SubtypeResolver str, Map<ClassKey,Class<?>> mixins)\n     {\n         super(base, str, mixins);\n-        _featureFlags = collectFeatureDefaults(DeserializationConfig.Feature.class);\n+        _deserFeatures = collectFeatureDefaults(DeserializationConfig.Feature.class);\n         _nodeFactory = JsonNodeFactory.instance;\n         _problemHandlers = null;\n     }\n     private DeserializationConfig(DeserializationConfig src, SubtypeResolver str)\n     {\n         super(src, str);\n-        _featureFlags = src._featureFlags;\n+        _deserFeatures = src._deserFeatures;\n         _nodeFactory = src._nodeFactory;\n         _problemHandlers = src._problemHandlers;\n     }\n             int mapperFeatures, int deserFeatures)\n     {\n         super(src, mapperFeatures);\n-        _featureFlags = deserFeatures;\n+        _deserFeatures = deserFeatures;\n         _nodeFactory = src._nodeFactory;\n         _problemHandlers = src._problemHandlers;\n     }\n     private DeserializationConfig(DeserializationConfig src, BaseSettings base)\n     {\n         super(src, base);\n-        _featureFlags = src._featureFlags;\n+        _deserFeatures = src._deserFeatures;\n         _nodeFactory = src._nodeFactory;\n         _problemHandlers = src._problemHandlers;\n     }\n     private DeserializationConfig(DeserializationConfig src, JsonNodeFactory f)\n     {\n         super(src);\n-        _featureFlags = src._featureFlags;\n+        _deserFeatures = src._deserFeatures;\n         _problemHandlers = src._problemHandlers;\n         _nodeFactory = f;\n     }\n             LinkedNode<DeserializationProblemHandler> problemHandlers)\n     {\n         super(src);\n-        _featureFlags = src._featureFlags;\n+        _deserFeatures = src._deserFeatures;\n         _problemHandlers = problemHandlers;\n         _nodeFactory = src._nodeFactory;\n     }\n     /**********************************************************\n      */\n \n+    @Override\n+    public DeserializationConfig with(MapperConfig.Feature... features)\n+    {\n+        int newMapperFlags = _mapperFeatures;\n+        for (MapperConfig.Feature f : features) {\n+            newMapperFlags |= f.getMask();\n+        }\n+        return (newMapperFlags == _mapperFeatures) ? this :\n+            new DeserializationConfig(this, newMapperFlags, _deserFeatures);\n+    }\n+\n+    @Override\n+    public DeserializationConfig without(MapperConfig.Feature... features)\n+    {\n+        int newMapperFlags = _mapperFeatures;\n+        for (MapperConfig.Feature f : features) {\n+             newMapperFlags &= ~f.getMask();\n+        }\n+        return (newMapperFlags == _mapperFeatures) ? this :\n+            new DeserializationConfig(this, newMapperFlags, _deserFeatures);\n+    }\n+    \n     @Override\n     public DeserializationConfig withClassIntrospector(ClassIntrospector<? extends BeanDescription> ci) {\n         return new DeserializationConfig(this, _base.withClassIntrospector(ci));\n         return new DeserializationConfig(this,\n                 (LinkedNode<DeserializationProblemHandler>) null);\n     }\n-    \n+\n     /**\n      * Fluent factory method that will construct and return a new configuration\n      * object instance with specified features enabled.\n      */\n-    @Override\n-    public DeserializationConfig with(MapperConfig.Feature... features)\n-    {\n-        int newMapperFlags = _mapperFeatures;\n-        for (MapperConfig.Feature f : features) {\n-            newMapperFlags |= f.getMask();\n-        }\n-        return new DeserializationConfig(this, newMapperFlags, _featureFlags);\n-    }\n-    \n+    public DeserializationConfig with(DeserializationConfig.Feature feature)\n+    {\n+        int newDeserFeatures = (_deserFeatures | feature.getMask());\n+        return (newDeserFeatures == _deserFeatures) ? this :\n+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures);\n+    }\n+\n     /**\n      * Fluent factory method that will construct and return a new configuration\n      * object instance with specified features enabled.\n      */\n-    @Override\n-    public DeserializationConfig with(DeserializationConfig.Feature... features)\n-    {\n-        int flags = _featureFlags;\n+    public DeserializationConfig with(DeserializationConfig.Feature first,\n+            DeserializationConfig.Feature... features)\n+    {\n+        int newDeserFeatures = _deserFeatures | first.getMask();\n         for (Feature f : features) {\n-            flags |= f.getMask();\n-        }\n-        return new DeserializationConfig(this, _mapperFeatures, flags);\n+            newDeserFeatures |= f.getMask();\n+        }\n+        return (newDeserFeatures == _deserFeatures) ? this :\n+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified feature disabled.\n+     */\n+    public DeserializationConfig without(DeserializationConfig.Feature feature)\n+    {\n+        int newDeserFeatures = _deserFeatures & ~feature.getMask();\n+        return (newDeserFeatures == _deserFeatures) ? this :\n+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures);\n     }\n \n     /**\n      * Fluent factory method that will construct and return a new configuration\n      * object instance with specified features disabled.\n      */\n-    @Override\n-    public DeserializationConfig without(MapperConfig.Feature... features)\n-    {\n-        int newMapperFlags = _mapperFeatures;\n-        for (MapperConfig.Feature f : features) {\n-             newMapperFlags &= ~f.getMask();\n-        }\n-        return new DeserializationConfig(this, newMapperFlags, _featureFlags);\n-    }\n-    \n-    /**\n-     * Fluent factory method that will construct and return a new configuration\n-     * object instance with specified features disabled.\n-     */\n-    @Override\n-    public DeserializationConfig without(DeserializationConfig.Feature... features)\n-    {\n-        int flags = _featureFlags;\n+    public DeserializationConfig without(DeserializationConfig.Feature first,\n+            DeserializationConfig.Feature... features)\n+    {\n+        int newDeserFeatures = _deserFeatures & ~first.getMask();\n         for (Feature f : features) {\n-            flags &= ~f.getMask();\n-        }\n-        return new DeserializationConfig(this, _mapperFeatures, flags);\n+            newDeserFeatures &= ~f.getMask();\n+        }\n+        return (newDeserFeatures == _deserFeatures) ? this :\n+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures);\n     }\n     \n     /*\n \n     @Override\n     public final int getFeatureFlags() {\n-        return _featureFlags;\n+        return _deserFeatures;\n     }\n     \n     /**\n     }\n \n     public boolean isEnabled(DeserializationConfig.Feature f) {\n-        return (_featureFlags & f.getMask()) != 0;\n+        return (_deserFeatures & f.getMask()) != 0;\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      * Method for enabling specified {@link DeserializationConfig} features.\n      * Modifies and returns this instance; no new object is created.\n      */\n-    public ObjectMapper enable(DeserializationConfig.Feature... f) {\n-        _deserializationConfig = _deserializationConfig.with(f);\n+    public ObjectMapper enable(DeserializationConfig.Feature feature) {\n+        _deserializationConfig = _deserializationConfig.with(feature);\n         return this;\n     }\n \n      * Method for enabling specified {@link DeserializationConfig} features.\n      * Modifies and returns this instance; no new object is created.\n      */\n-    public ObjectMapper disable(DeserializationConfig.Feature... f) {\n-        _deserializationConfig = _deserializationConfig.without(f);\n-        return this;\n-    }\n-\n+    public ObjectMapper enable(DeserializationConfig.Feature first,\n+            DeserializationConfig.Feature... f) {\n+        _deserializationConfig = _deserializationConfig.with(first, f);\n+        return this;\n+    }\n+    \n     /**\n      * Method for enabling specified {@link DeserializationConfig} features.\n      * Modifies and returns this instance; no new object is created.\n      */\n-    public ObjectMapper enable(SerializationConfig.Feature... f) {\n-        _serializationConfig = _serializationConfig.with(f);\n+    public ObjectMapper disable(DeserializationConfig.Feature feature) {\n+        _deserializationConfig = _deserializationConfig.without(feature);\n         return this;\n     }\n \n      * Method for enabling specified {@link DeserializationConfig} features.\n      * Modifies and returns this instance; no new object is created.\n      */\n-    public ObjectMapper disable(SerializationConfig.Feature... f) {\n+    public ObjectMapper disable(DeserializationConfig.Feature first,\n+            DeserializationConfig.Feature... f) {\n+        _deserializationConfig = _deserializationConfig.without(first, f);\n+        return this;\n+    }\n+    \n+    /**\n+     * Method for enabling specified {@link DeserializationConfig} feature.\n+     * Modifies and returns this instance; no new object is created.\n+     */\n+    public ObjectMapper enable(SerializationConfig.Feature f) {\n+        _serializationConfig = _serializationConfig.with(f);\n+        return this;\n+    }\n+\n+    /**\n+     * Method for enabling specified {@link DeserializationConfig} features.\n+     * Modifies and returns this instance; no new object is created.\n+     */\n+    public ObjectMapper enable(SerializationConfig.Feature first,\n+            SerializationConfig.Feature... f) {\n+        _serializationConfig = _serializationConfig.with(first, f);\n+        return this;\n+    }\n+    \n+    /**\n+     * Method for enabling specified {@link DeserializationConfig} features.\n+     * Modifies and returns this instance; no new object is created.\n+     */\n+    public ObjectMapper disable(SerializationConfig.Feature f) {\n         _serializationConfig = _serializationConfig.without(f);\n         return this;\n     }\n-    \n+\n+    /**\n+     * Method for enabling specified {@link DeserializationConfig} features.\n+     * Modifies and returns this instance; no new object is created.\n+     */\n+    public ObjectMapper disable(SerializationConfig.Feature first,\n+            SerializationConfig.Feature... f) {\n+        _serializationConfig = _serializationConfig.without(first, f);\n+        return this;\n+    }\n+\n     /**\n      * Method for checking whether given Mapper\n      * feature is enabled.\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n  * new instances are constructed for different configurations.\n  * Instances are initially constructed by {@link ObjectMapper} and can be\n  * reused.\n- * \n- * @author tatu\n  */\n public class ObjectReader\n     extends ObjectCodec\n     \n     /*\n     /**********************************************************\n-    /* Life-cycle\n+    /* Life-cycle, construction\n     /**********************************************************\n      */\n \n     }\n \n     /**\n+     * Copy constructor used when modifying simple feature flags\n+     */\n+    protected ObjectReader(ObjectReader base, DeserializationConfig config)\n+    {\n+        _config = config;\n+\n+        _rootDeserializers = base._rootDeserializers;\n+        _provider = base._provider;\n+        _jsonFactory = base._jsonFactory;\n+\n+        _valueType = base._valueType;\n+        _valueToUpdate = base._valueToUpdate;\n+        _schema = base._schema;\n+        _injectableValues = base._injectableValues;\n+        _unwrapRoot = config.isEnabled(DeserializationConfig.Feature.UNWRAP_ROOT_VALUE);\n+    }\n+    \n+    /**\n      * Method that will return version information stored in and read from jar\n      * that contains this class.\n      */\n         return DatabindVersion.instance.version();\n     }\n \n+    /*\n+    /**********************************************************\n+    /* Life-cycle, fluent factory methods\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method for constructing a new reader instance that is configured\n+     * with specified feature enabled.\n+     */\n+    public ObjectReader with(DeserializationConfig.Feature feature) \n+    {\n+        DeserializationConfig newConfig = _config.with(feature);\n+        return (newConfig == _config) ? this : new ObjectReader(this, newConfig);\n+    }    \n+\n+    /**\n+     * Method for constructing a new reader instance that is configured\n+     * with specified features enabled.\n+     */\n+    public ObjectReader with(DeserializationConfig.Feature first,\n+            DeserializationConfig.Feature... other)\n+    {\n+        DeserializationConfig newConfig = _config.with(first, other);\n+        return (newConfig == _config) ? this : new ObjectReader(this, newConfig);\n+    }    \n+    \n     /**\n      * Method for constructing a new reader instance that is configured\n      * to data bind into specified type.\n      */\n     public ObjectReader withType(JavaType valueType)\n     {\n-        if (valueType == _valueType) return this;\n+        if (valueType != null && valueType.equals(_valueType)) return this;\n         // type is stored here, no need to make a copy of config\n         return new ObjectReader(this, _config, valueType, _valueToUpdate,\n                 _schema, _injectableValues);\n      * Note that the method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n      */\n-    public ObjectReader withType(Class<?> valueType)\n-    {\n+    public ObjectReader withType(Class<?> valueType) {\n         return withType(_config.constructType(valueType));\n     }    \n \n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n      * Set of features enabled; actual type (kind of features)\n      * depends on sub-classes.\n      */\n-    protected final int _featureFlags;\n+    protected final int _serFeatures;\n     \n     /**\n      * Which Bean/Map properties are to be included in serialization?\n             SubtypeResolver str, Map<ClassKey,Class<?>> mixins)\n     {\n         super(base, str, mixins);\n-        _featureFlags = collectFeatureDefaults(SerializationConfig.Feature.class);\n+        _serFeatures = collectFeatureDefaults(SerializationConfig.Feature.class);\n         _filterProvider = null;\n     }\n     \n     private SerializationConfig(SerializationConfig src, SubtypeResolver str)\n     {\n         super(src, str);\n-        _featureFlags = src._featureFlags;\n+        _serFeatures = src._serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n         _serializationView = src._serializationView;\n         _filterProvider = src._filterProvider;\n             int mapperFeatures, int serFeatures)\n     {\n         super(src, mapperFeatures);\n-        _featureFlags = serFeatures;\n+        _serFeatures = serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n         _serializationView = src._serializationView;\n         _filterProvider = src._filterProvider;\n     private SerializationConfig(SerializationConfig src, BaseSettings base)\n     {\n         super(src, base);\n-        _featureFlags = src._featureFlags;\n+        _serFeatures = src._serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n         _serializationView = src._serializationView;\n         _filterProvider = src._filterProvider;\n     private SerializationConfig(SerializationConfig src, FilterProvider filters)\n     {\n         super(src);\n-        _featureFlags = src._featureFlags;\n+        _serFeatures = src._serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n         _serializationView = src._serializationView;\n         _filterProvider = filters;\n     private SerializationConfig(SerializationConfig src, Class<?> view)\n     {\n         super(src);\n-        _featureFlags = src._featureFlags;\n+        _serFeatures = src._serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n         _serializationView = view;\n         _filterProvider = src._filterProvider;\n     private SerializationConfig(SerializationConfig src, JsonInclude.Include incl)\n     {\n         super(src);\n-        _featureFlags = src._featureFlags;\n+        _serFeatures = src._serFeatures;\n         _serializationInclusion = incl;\n         _serializationView = src._serializationView;\n         _filterProvider = src._filterProvider;\n     /**********************************************************\n      */\n \n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features enabled.\n+     */\n+    @Override\n+    public SerializationConfig with(MapperConfig.Feature... features)\n+    {\n+        int newMapperFlags = _mapperFeatures;\n+        for (MapperConfig.Feature f : features) {\n+            newMapperFlags |= f.getMask();\n+        }\n+        return (newMapperFlags == _mapperFeatures) ? this\n+                : new SerializationConfig(this, newMapperFlags, _serFeatures);\n+    }\n+    \n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features disabled.\n+     */\n+    @Override\n+    public SerializationConfig without(MapperConfig.Feature... features)\n+    {\n+        int newMapperFlags = _mapperFeatures;\n+        for (MapperConfig.Feature f : features) {\n+             newMapperFlags &= ~f.getMask();\n+        }\n+        return (newMapperFlags == _mapperFeatures) ? this\n+                : new SerializationConfig(this, newMapperFlags, _serFeatures);\n+    }\n+    \n     @Override\n     public SerializationConfig withClassIntrospector(ClassIntrospector<? extends BeanDescription> ci) {\n-        return new SerializationConfig(this, _base.withClassIntrospector(ci));\n+        return _withBase(_base.withClassIntrospector(ci));\n     }\n \n     @Override\n     public SerializationConfig withAnnotationIntrospector(AnnotationIntrospector ai) {\n-        return new SerializationConfig(this, _base.withAnnotationIntrospector(ai));\n+        return _withBase(_base.withAnnotationIntrospector(ai));\n     }\n \n     @Override\n     public SerializationConfig withInsertedAnnotationIntrospector(AnnotationIntrospector ai) {\n-        return new SerializationConfig(this, _base.withInsertedAnnotationIntrospector(ai));\n+        return _withBase(_base.withInsertedAnnotationIntrospector(ai));\n     }\n \n     @Override\n     public SerializationConfig withAppendedAnnotationIntrospector(AnnotationIntrospector ai) {\n-        return new SerializationConfig(this, _base.withAppendedAnnotationIntrospector(ai));\n+        return _withBase(_base.withAppendedAnnotationIntrospector(ai));\n     }\n     \n     @Override\n     public SerializationConfig withVisibilityChecker(VisibilityChecker<?> vc) {\n-        return new SerializationConfig(this, _base.withVisibilityChecker(vc));\n+        return _withBase(_base.withVisibilityChecker(vc));\n     }\n \n     @Override\n     public SerializationConfig withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) {\n-        return new SerializationConfig(this, _base.withVisibility(forMethod, visibility));\n+        return _withBase(_base.withVisibility(forMethod, visibility));\n     }\n     \n     @Override\n     public SerializationConfig withTypeResolverBuilder(TypeResolverBuilder<?> trb) {\n-        return new SerializationConfig(this, _base.withTypeResolverBuilder(trb));\n-    }\n-\n+        return _withBase(_base.withTypeResolverBuilder(trb));\n+    }\n+    \n     @Override\n     public SerializationConfig withSubtypeResolver(SubtypeResolver str) {\n-        return new SerializationConfig(this, str);\n+        return (str == _subtypeResolver)? this : new SerializationConfig(this, str);\n     }\n     \n     @Override\n     public SerializationConfig withPropertyNamingStrategy(PropertyNamingStrategy pns) {\n-        return new SerializationConfig(this, _base.withPropertyNamingStrategy(pns));\n+        return _withBase(_base.withPropertyNamingStrategy(pns));\n     }\n     \n     @Override\n     public SerializationConfig withTypeFactory(TypeFactory tf) {\n-        return new SerializationConfig(this, _base.withTypeFactory(tf));\n+        return _withBase(_base.withTypeFactory(tf));\n     }\n \n     /**\n     \n     @Override\n     public SerializationConfig withHandlerInstantiator(HandlerInstantiator hi) {\n-        return new SerializationConfig(this, _base.withHandlerInstantiator(hi));\n-    }\n-        \n+        return _withBase(_base.withHandlerInstantiator(hi));\n+    }\n+\n+    private final SerializationConfig _withBase(BaseSettings newBase) {\n+        return (_base == newBase) ? this : new SerializationConfig(this, newBase);\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Life-cycle, SerializationConfig specific factory methods\n      */\n     \n     public SerializationConfig withFilters(FilterProvider filterProvider) {\n-        return new SerializationConfig(this, filterProvider);\n+        return (filterProvider == _filterProvider) ? this : new SerializationConfig(this, filterProvider);\n     }\n \n     public SerializationConfig withView(Class<?> view) {\n-        return new SerializationConfig(this, view);\n+        return (_serializationView == view) ? this : new SerializationConfig(this, view);\n     }\n \n     public SerializationConfig withSerializationInclusion(JsonInclude.Include incl) {\n-        return new SerializationConfig(this, incl);\n+        return (_serializationInclusion == incl) ? this:  new SerializationConfig(this, incl);\n+    }\n+    \n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified feature enabled.\n+     */\n+    public SerializationConfig with(Feature feature)\n+    {\n+        int newSerFeatures = _serFeatures | feature.getMask();\n+        return (newSerFeatures == _serFeatures) ? this\n+                : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n     }\n \n     /**\n      * Fluent factory method that will construct and return a new configuration\n      * object instance with specified features enabled.\n      */\n-    @Override\n-    public SerializationConfig with(MapperConfig.Feature... features)\n-    {\n-        int newMapperFlags = _mapperFeatures;\n-        for (MapperConfig.Feature f : features) {\n-            newMapperFlags |= f.getMask();\n-        }\n-        return new SerializationConfig(this, newMapperFlags, _featureFlags);\n+    public SerializationConfig with(Feature first, Feature... features)\n+    {\n+        int newSerFeatures = _serFeatures | first.getMask();\n+        for (Feature f : features) {\n+            newSerFeatures |= f.getMask();\n+        }\n+        return (newSerFeatures == _serFeatures) ? this\n+                : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n     }\n     \n     /**\n      * Fluent factory method that will construct and return a new configuration\n-     * object instance with specified features enabled.\n-     */\n-    @Override\n-    public SerializationConfig with(Feature... features)\n-    {\n-        int flags = _featureFlags;\n-        for (Feature f : features) {\n-            flags |= f.getMask();\n-        }\n-        return new SerializationConfig(this, _mapperFeatures, flags);\n+     * object instance with specified feature disabled.\n+     */\n+    public SerializationConfig without(Feature feature)\n+    {\n+        int newSerFeatures = _serFeatures & ~feature.getMask();\n+        return (newSerFeatures == _serFeatures) ? this\n+                : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n     }\n \n     /**\n      * Fluent factory method that will construct and return a new configuration\n      * object instance with specified features disabled.\n      */\n-    @Override\n-    public SerializationConfig without(MapperConfig.Feature... features)\n-    {\n-        int newMapperFlags = _mapperFeatures;\n-        for (MapperConfig.Feature f : features) {\n-             newMapperFlags &= ~f.getMask();\n-        }\n-        return new SerializationConfig(this, newMapperFlags, _featureFlags);\n-    }\n-    \n-    /**\n-     * Fluent factory method that will construct and return a new configuration\n-     * object instance with specified features disabled.\n-     */\n-    @Override\n-    public SerializationConfig without(Feature... features)\n-    {\n-        int flags = _featureFlags;\n+    public SerializationConfig without(Feature first, Feature... features)\n+    {\n+        int newSerFeatures = _serFeatures & ~first.getMask();\n         for (Feature f : features) {\n-            flags &= ~f.getMask();\n-        }\n-        return new SerializationConfig(this, _mapperFeatures, flags);\n+            newSerFeatures &= ~f.getMask();\n+        }\n+        return (newSerFeatures == _serFeatures) ? this\n+                : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n     }\n     \n     /*\n \n     @Override\n     public final int getFeatureFlags() {\n-        return _featureFlags;\n+        return _serFeatures;\n     }\n     \n     @Override\n     }\n \n     public boolean isEnabled(SerializationConfig.Feature f) {\n-        return (_featureFlags & f.getMask()) != 0;\n+        return (_serFeatures & f.getMask()) != 0;\n     }\n     \n     /*\n     \n     @Override public String toString()\n     {\n-        return \"[SerializationConfig: flags=0x\"+Integer.toHexString(_featureFlags)+\"]\";\n+        return \"[SerializationConfig: flags=0x\"+Integer.toHexString(_serFeatures)+\"]\";\n     }\n }", "timestamp": 1327043603, "metainfo": ""}