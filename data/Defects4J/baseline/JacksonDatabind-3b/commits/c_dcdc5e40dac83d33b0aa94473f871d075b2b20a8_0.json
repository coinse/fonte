{"sha": "dcdc5e40dac83d33b0aa94473f871d075b2b20a8", "log": "Fix #398 for mainline (2.4)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n         String text = jp.getValueAsString();\n         if (text != null) { // has String representation\n             if (text.length() == 0 || (text = text.trim()).length() == 0) {\n-                // 15-Oct-2010, tatu: Empty String usually means null, so\n-                return null;\n+                // 04-Feb-2013, tatu: Usually should become null; but not always\n+                return _deserializeFromEmptyString();\n             }\n             try {\n                 T result = _deserialize(text, ctxt);\n     protected T _deserializeEmbedded(Object ob, DeserializationContext ctxt) throws IOException {\n         // default impl: error out\n         throw ctxt.mappingException(\"Don't know how to convert embedded Object of type \"+ob.getClass().getName()+\" into \"+_valueClass.getName());\n+    }\n+\n+    protected T _deserializeFromEmptyString() throws IOException {\n+        return null;\n     }\n \n     /*\n             }\n             throw new IllegalArgumentException();\n         }\n-        \n+\n+        @Override\n+        protected Object _deserializeFromEmptyString() throws IOException {\n+            // As per [#398], URI requires special handling\n+            if (_kind == STD_URI) {\n+                return URI.create(\"\");\n+            }\n+            return super._deserializeFromEmptyString();\n+        }\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n         \n         mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n         assertEquals(value, mapper.readValue(\"[\\\"\"+value.toString()+\"\\\"]\", URI.class));\n+\n+        // [#398]\n+        value = mapper.readValue(quote(\"\"), URI.class);\n+        assertNotNull(value);\n+        assertEquals(URI.create(\"\"), value);\n     }\n \n     /*", "timestamp": 1391579969, "metainfo": ""}