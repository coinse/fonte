{"sha": "991d17fe57a4a3de70aa832b1620c22017fa9406", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n         this(base, base._name);\n     }\n \n-    protected BeanPropertyWriter(BeanPropertyWriter base, SerializableString name)\n-    {\n+    protected BeanPropertyWriter(BeanPropertyWriter base, SerializableString name) {\n         _name = name;\n         _wrapperName = base._wrapperName;\n \n      * \n      * @since 2.0\n      */\n-    public void assignSerializer(JsonSerializer<Object> ser)\n-    {\n+    public void assignSerializer(JsonSerializer<Object> ser) {\n         // may need to disable check in future?\n         if (_serializer != null && _serializer != ser) {\n             throw new IllegalStateException(\"Can not override serializer\");\n      * \n      * @since 2.0\n      */\n-    public void assignNullSerializer(JsonSerializer<Object> nullSer)\n-    {\n+    public void assignNullSerializer(JsonSerializer<Object> nullSer) {\n         // may need to disable check in future?\n         if (_nullSerializer != null && _nullSerializer != nullSer) {\n             throw new IllegalStateException(\"Can not override null serializer\");\n      */\n \n     // Note: also part of 'PropertyWriter'\n-    @Override\n-    public String getName() {\n-        return _name.getValue();\n-    }\n+    @Override public String getName() { return _name.getValue(); }\n \n     // Note: also part of 'PropertyWriter'\n-    @Override\n-    public PropertyName getFullName() {\n-        // !!! TODO: impl properly\n+    @Override public PropertyName getFullName() { // !!! TODO: impl properly\n         return new PropertyName(_name.getValue());\n     }\n     \n-    @Override\n-    public JavaType getType() {\n-        return _declaredType;\n-    }\n-\n-    @Override\n-    public PropertyName getWrapperName() {\n-        return _wrapperName;\n-    }\n-\n-    @Override\n-    public boolean isRequired() {\n-        return _metadata.isRequired();\n-    }\n-\n-    @Override\n-    public PropertyMetadata getMetadata() {\n-        return _metadata;\n-    }\n+    @Override public JavaType getType() { return _declaredType; }\n+    @Override public PropertyName getWrapperName() { return _wrapperName; }\n+    @Override public boolean isRequired() { return _metadata.isRequired(); }\n+    @Override public PropertyMetadata getMetadata() { return _metadata; }\n     \n     @Override\n     public <A extends Annotation> A getAnnotation(Class<A> acls) {\n         return _contextAnnotations.get(acls);\n     }\n \n-    @Override\n-    public AnnotatedMember getMember() {\n-        return _member;\n-    }\n+    @Override public AnnotatedMember getMember() { return _member; }\n \n     // @since 2.3 -- needed so it can be overridden by unwrapping writer\n-    protected void _depositSchemaProperty(ObjectNode propertiesNode, JsonNode schemaNode)\n-    {\n+    protected void _depositSchemaProperty(ObjectNode propertiesNode, JsonNode schemaNode) {\n         propertiesNode.set(getName(), schemaNode);\n     }\n     \n      * \n      * @return Value of the setting, if any; null if none.\n      */\n-    public Object getInternalSetting(Object key)\n-    {\n-        if (_internalSettings == null) {\n-            return null;\n-        }\n-        return _internalSettings.get(key);\n+    public Object getInternalSetting(Object key)  {\n+        return (_internalSettings == null) ? null : _internalSettings.get(key);\n     }\n     \n     /**\n      * \n      * @return Old value of the setting, if any (null if none)\n      */\n-    public Object setInternalSetting(Object key, Object value)\n-    {\n+    public Object setInternalSetting(Object key, Object value) {\n         if (_internalSettings == null) {\n             _internalSettings = new HashMap<Object,Object>();\n         }\n      * \n      * @return Existing value of the setting, if any (null if none)\n      */\n-    public Object removeInternalSetting(Object key)\n-    {\n+    public Object removeInternalSetting(Object key) {\n         Object removed = null;\n         if (_internalSettings != null) {\n             removed = _internalSettings.remove(key);\n      * \n      * @since 2.3\n      */\n-    public boolean isUnwrapping() {\n-        return false;\n-    }\n+    public boolean isUnwrapping() { return false; }\n     \n     public boolean willSuppressNulls() { return _suppressNulls; }\n     \n     // Needed by BeanSerializer#getSchema\n-    public JsonSerializer<Object> getSerializer() {\n-        return _serializer;\n-    }\n-\n-    public JavaType getSerializationType() {\n-        return _cfgSerializationType;\n-    }\n+    public JsonSerializer<Object> getSerializer() { return _serializer; }\n+\n+    public JavaType getSerializationType() { return _cfgSerializationType; }\n \n     public Class<?> getRawSerializationType() {\n         return (_cfgSerializationType == null) ? null : _cfgSerializationType.getRawClass();\n     }\n     \n-    public Class<?> getPropertyType() \n-    {\n-        if (_accessorMethod != null) {\n-            return _accessorMethod.getReturnType();\n-        }\n-        return _field.getType();\n+    public Class<?> getPropertyType() {\n+        return (_accessorMethod != null) ? _accessorMethod.getReturnType() : _field.getType();\n     }\n \n     /**\n      *\n      * @return The property type, or null if not found.\n      */\n-    public Type getGenericPropertyType()\n-    {\n+    public Type getGenericPropertyType() {\n         if (_accessorMethod != null) {\n             return _accessorMethod.getGenericReturnType();\n         }\n      * @deprecated since 2.2, use {@link #isRequired()} instead.\n      */\n     @Deprecated\n-    protected boolean isRequired(AnnotationIntrospector intr) {\n-        return _metadata.isRequired();\n-    }\n+    protected boolean isRequired(AnnotationIntrospector intr) { return _metadata.isRequired(); }\n     \n     /*\n     /**********************************************************\n      * using appropriate serializer.\n      */\n     @Override\n-    public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov)\n-        throws Exception\n+    public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception\n     {\n         Object value = get(bean);\n         // Null handling is bit different, check that first\n         JsonSerializer<Object> ser = _serializer;\n         if (ser == null) {\n             Class<?> cls = value.getClass();\n-            PropertySerializerMap map = _dynamicSerializers;\n-            ser = map.serializerFor(cls);\n+            PropertySerializerMap m = _dynamicSerializers;\n+            ser = m.serializerFor(cls);\n             if (ser == null) {\n-                ser = _findAndAddDynamic(map, cls, prov);\n+                ser = _findAndAddDynamic(m, cls, prov);\n             }\n         }\n         // and then see if we must suppress certain values (default, empty)\n      * @since 2.3\n      */\n     @Override\n-    public void serializeAsOmittedField(Object bean, JsonGenerator jgen, SerializerProvider prov)\n-        throws Exception\n+    public void serializeAsOmittedField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception\n     {\n         if (!jgen.canOmitFields()) {\n             jgen.writeOmittedField(_name.getValue());\n         return _field.get(bean);\n     }\n \n-    protected void _handleSelfReference(Object bean, JsonSerializer<?> ser)\n-        throws JsonMappingException\n-    {\n+    protected void _handleSelfReference(Object bean, JsonSerializer<?> ser) throws JsonMappingException {\n         /* 05-Feb-2012, tatu: Usually a problem, but NOT if we are handling\n          *    object id; this may be the case for BeanSerializers at least.\n          */\n-        if (ser.usesObjectId()) {\n-            return;\n-        }\n+        if (ser.usesObjectId()) { return; }\n         throw new JsonMappingException(\"Direct self-reference leading to cycle\");\n     }\n ", "timestamp": 1390763202, "metainfo": ""}