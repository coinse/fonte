{"sha": "c3929f4eb8776c6a5774784a95e98de67c1af561", "log": "unit test refactorign", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestJavaType76.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+\n+/**\n+ * Failing test related to [Issue#76]\n+ */\n+public class TestJavaType76\n+    extends com.fasterxml.jackson.test.BaseTest\n+{\n+    @SuppressWarnings(\"serial\")\n+    static class HashTree<K, V> extends HashMap<K, HashTree<K, V>> { }\n+\n+    public void testRecursiveType()\n+    {\n+        TypeFactory tf = TypeFactory.defaultInstance();\n+        JavaType type = tf.constructType(HashTree.class);\n+        assertNotNull(type);\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestMapJsonValueKey47.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+// [Issue#47]\n+public class TestMapJsonValueKey47 extends BaseMapTest\n+{\n+    public static class Wat\n+    {\n+        private final String wat;\n+\n+        @JsonCreator\n+        Wat(String wat) {\n+            this.wat = wat;\n+        }\n+\n+        @JsonValue\n+        public String getWat() {\n+            return wat;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"(String)[Wat: \" + wat + \"]\";\n+        }\n+    }\n+\n+    public void testMapJsonValueKey()\n+    throws Exception\n+    {\n+        Map<Wat, Boolean> input = new HashMap<Wat, Boolean>();\n+        input.put(new Wat(\"3\"), true);\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String json = mapper.writeValueAsString(input);\n+        assertEquals(aposToQuotes(\"{'3':'true'}\"), json);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestNonStaticInnerClassInList32.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestNonStaticInnerClassInList32 extends BaseMapTest\n+{\n+    public static class Dog2\n+    {\n+        public String name;\n+        public List<Leg> legs;\n+\n+        // NOTE: non-static on purpose!\n+        public class Leg {\n+            public int length;\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Tests\n+    /**********************************************************\n+     */\n+    \n+    // core/[Issue#32]\n+    public void testInnerList() throws Exception\n+    {\n+        Dog2 dog = new Dog2();\n+        dog.name = \"Spike\";\n+        dog.legs = new ArrayList<Dog2.Leg>();\n+        dog.legs.add(dog.new Leg());\n+        dog.legs.add(dog.new Leg());\n+        dog.legs.get(0).length = 5;\n+        dog.legs.get(1).length = 4;\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        String dogJson = mapper.writeValueAsString(dog);\n+//        System.out.println(dogJson);\n+      // output: {\"name\":\"Spike\",\"legs\":[{length: 5}, {length: 4}]}\n+\n+        // currently throws JsonMappingException\n+        Dog2 dogCopy = mapper.readValue(dogJson, Dog2.class);\n+        assertEquals(dogCopy.legs.get(1).length, 4);\n+        // prefer fully populated Dog instance\n+    }\n+}\n+\n+", "timestamp": 1395282370, "metainfo": ""}