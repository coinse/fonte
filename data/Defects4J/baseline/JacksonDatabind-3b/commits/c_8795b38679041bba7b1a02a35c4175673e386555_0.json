{"sha": "8795b38679041bba7b1a02a35c4175673e386555", "log": "unit test refactoring", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestConstructFromMap.java\n+package com.fasterxml.jackson.databind.creators;\n+\n+import java.awt.Point; // just for convenience\n+import java.math.BigDecimal;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * This unit test suite that tests use of {@link JsonCreator}\n+ * with \"delegate\" constructors and factory methods: ones that\n+ * take a deserializable type that is bound from JSON content.\n+ * This is usually done to get two-phase data binding, often using\n+ * {@link java.util.Map} as the intermediate form.\n+ */\n+public class TestConstructFromMap\n+    extends BaseMapTest\n+{\n+    static class ConstructorFromMap\n+    {\n+        int _x;\n+        String _y;\n+\n+        @JsonCreator\n+        ConstructorFromMap(Map<?,?> arg)\n+        {\n+            _x = ((Number) arg.get(\"x\")).intValue();\n+            _y = (String) arg.get(\"y\");\n+        }\n+    }\n+\n+    static class FactoryFromPoint\n+    {\n+        int _x, _y;\n+\n+        private FactoryFromPoint(Point p) {\n+            _x = p.x;\n+            _y = p.y;\n+        }\n+\n+        @JsonCreator\n+        static FactoryFromPoint createIt(Point p)\n+        {\n+            return new FactoryFromPoint(p);\n+        }\n+    }\n+\n+    // Also: let's test BigDecimal-from-JSON-String factory\n+    static class FactoryFromDecimalString\n+    {\n+\tint _value;\n+\n+        private FactoryFromDecimalString(BigDecimal d) {\n+\t    _value = d.intValue();\n+        }\n+\n+        @JsonCreator\n+        static FactoryFromDecimalString whateverNameWontMatter(BigDecimal d)\n+        {\n+            return new FactoryFromDecimalString(d);\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    public void testViaConstructor() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        ConstructorFromMap result = m.readValue\n+            (\"{ \\\"x\\\":1, \\\"y\\\" : \\\"abc\\\" }\", ConstructorFromMap.class);\n+        assertEquals(1, result._x);\n+        assertEquals(\"abc\", result._y);\n+    }\n+\n+    public void testViaFactory() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        FactoryFromPoint result = m.readValue(\"{ \\\"x\\\" : 3, \\\"y\\\" : 4 }\", FactoryFromPoint.class);\n+        assertEquals(3, result._x);\n+        assertEquals(4, result._y);\n+    }\n+\n+    public void testViaFactoryUsingString() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        FactoryFromDecimalString result = m.readValue(\"\\\"12.57\\\"\", FactoryFromDecimalString.class);\n+        assertNotNull(result);\n+        assertEquals(12, result._value);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorsDelegating.java\n+package com.fasterxml.jackson.databind.creators;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestCreatorsDelegating extends BaseMapTest\n+{\n+    static class BooleanBean\n+    {\n+        protected Boolean value;\n+\n+        public BooleanBean(Boolean v) { value = v; }\n+        \n+        @JsonCreator\n+        protected static BooleanBean create(Boolean value) {\n+            return new BooleanBean(value);\n+        }\n+    }\n+\n+    // for [JACKSON-711]; should allow delegate-based one(s) too\n+    static class CtorBean711\n+    {\n+        protected String name;\n+        protected int age;\n+        \n+        @JsonCreator\n+        public CtorBean711(@JacksonInject String n, int a)\n+        {\n+            name = n;\n+            age = a;\n+        }\n+    }\n+\n+    // for [JACKSON-711]; should allow delegate-based one(s) too\n+    static class FactoryBean711\n+    {\n+        protected String name1;\n+        protected String name2;\n+        protected int age;\n+        \n+        private FactoryBean711(int a, String n1, String n2) {\n+            age = a;\n+            name1 = n1;\n+            name2 = n2;\n+        }\n+        \n+        @JsonCreator\n+        public static FactoryBean711 create(@JacksonInject String n1, int a, @JacksonInject String n2) {\n+            return new FactoryBean711(a, n1, n2);\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    public void testBooleanDelegate() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        // should obviously work with booleans...\n+        BooleanBean bb = m.readValue(\"true\", BooleanBean.class);\n+        assertEquals(Boolean.TRUE, bb.value);\n+\n+        // but also with value conversion from String\n+        bb = m.readValue(quote(\"true\"), BooleanBean.class);\n+        assertEquals(Boolean.TRUE, bb.value);\n+    }\n+    \n+    // As per [JACKSON-711]: should also work with delegate model (single non-annotated arg)\n+    public void testWithCtorAndDelegate() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.setInjectableValues(new InjectableValues.Std()\n+            .addValue(String.class, \"Pooka\")\n+            );\n+        CtorBean711 bean = null;\n+        try {\n+            bean = mapper.readValue(\"38\", CtorBean711.class);\n+        } catch (JsonMappingException e) {\n+            fail(\"Did not expect problems, got: \"+e.getMessage());\n+        }\n+        assertEquals(38, bean.age);\n+        assertEquals(\"Pooka\", bean.name);\n+    }\n+\n+    public void testWithFactoryAndDelegate() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.setInjectableValues(new InjectableValues.Std()\n+            .addValue(String.class, \"Fygar\")\n+            );\n+        FactoryBean711 bean = null;\n+        try {\n+            bean = mapper.readValue(\"38\", FactoryBean711.class);\n+        } catch (JsonMappingException e) {\n+            fail(\"Did not expect problems, got: \"+e.getMessage());\n+        }\n+        assertEquals(38, bean.age);\n+        assertEquals(\"Fygar\", bean.name1);\n+        assertEquals(\"Fygar\", bean.name2);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestPolymorphicCreators.java\n+package com.fasterxml.jackson.databind.creators;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Unit tests for verifying that it is possible to annotate\n+ * various kinds of things with {@link JsonCreator} annotation.\n+ */\n+public class TestPolymorphicCreators\n+    extends BaseMapTest\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper beans\n+    /**********************************************************\n+     */\n+\n+    static class Animal\n+    {\n+\t// All animals have names, for our demo purposes...\n+\tpublic String name;\n+\n+\tprotected Animal() { }\n+\n+\t/**\n+\t * Creator method that can instantiate instances of\n+\t * appropriate polymoprphic type\n+\t */\n+        @JsonCreator\n+\tpublic static Animal create(@JsonProperty(\"type\") String type)\n+\t{\n+\t    if (\"dog\".equals(type)) {\n+\t\treturn new Dog();\n+\t    }\n+\t    if (\"cat\".equals(type)) {\n+\t\treturn new Cat();\n+\t    }\n+\t    throw new IllegalArgumentException(\"No such animal type ('\"+type+\"')\");\n+\t}\n+    }\n+\n+    static class Dog extends Animal\n+    {\n+\tdouble barkVolume; // in decibels\n+\tpublic Dog() { }\n+\tpublic void setBarkVolume(double v) { barkVolume = v; }\n+    }\n+\n+    static class Cat extends Animal\n+    {\n+\tboolean likesCream;\n+\tpublic int lives;\n+\tpublic Cat() { }\n+\tpublic void setLikesCream(boolean likesCreamSurely) { likesCream = likesCreamSurely; }\n+    }\n+\n+    abstract static class AbstractRoot\n+    {\n+        private final String opt;\n+\n+        private AbstractRoot(String opt) {\n+            this.opt = opt;\n+        }\n+\n+        @JsonCreator\n+        public static final AbstractRoot make(@JsonProperty(\"which\") int which,\n+            @JsonProperty(\"opt\") String opt) {\n+            if(1 == which) {\n+                return new One(opt);\n+            }\n+            throw new RuntimeException(\"cannot instantiate \" + which);\n+        }\n+\n+        abstract public int getWhich();\n+\n+        public final String getOpt() {\n+                return opt;\n+        }\n+    }\n+\n+    static final class One extends AbstractRoot {\n+            private One(String opt) {\n+                    super(opt);\n+            }\n+\n+            @Override public int getWhich() {\n+                    return 1;\n+            }\n+    }\n+    \n+    /*\n+    **********************************************\n+    * Actual tests\n+    **********************************************\n+     */\n+\n+    /**\n+     * Simple test to verify that it is possible to implement polymorphic\n+     * deserialization manually.\n+     */\n+    public void testManualPolymorphicDog() throws Exception\n+    {\n+\tObjectMapper mapper = new ObjectMapper();\n+\t// first, a dog, start with type\n+\tAnimal animal = mapper.readValue(\"{ \\\"type\\\":\\\"dog\\\", \\\"name\\\":\\\"Fido\\\", \\\"barkVolume\\\" : 95.0 }\", Animal.class);\n+\tassertEquals(Dog.class, animal.getClass());\n+\tassertEquals(\"Fido\", animal.name);\n+\tassertEquals(95.0, ((Dog) animal).barkVolume);\n+    }\n+\n+    public void testManualPolymorphicCatBasic() throws Exception\n+    {\n+\tObjectMapper mapper = new ObjectMapper();\n+\t// and finally, lactose-intolerant, but otherwise robust super-cat:\n+\tAnimal animal = mapper.readValue(\"{ \\\"name\\\" : \\\"Macavity\\\", \\\"type\\\":\\\"cat\\\", \\\"lives\\\":18, \\\"likesCream\\\":false }\", Animal.class);\n+\tassertEquals(Cat.class, animal.getClass());\n+\tassertEquals(\"Macavity\", animal.name); // ... there's no one like Macavity!\n+\tCat cat = (Cat) animal;\n+\tassertEquals(18, cat.lives);\n+\t// ok, he can't drink dairy products. Let's verify:\n+\tassertEquals(false, cat.likesCream);\n+    }\n+\n+    public void testManualPolymorphicCatWithReorder() throws Exception\n+    {\n+\tObjectMapper mapper = new ObjectMapper();\n+\t// Then cat; shuffle order to mandate buffering\n+\tAnimal animal = mapper.readValue(\"{ \\\"likesCream\\\":true, \\\"name\\\" : \\\"Venla\\\", \\\"type\\\":\\\"cat\\\" }\", Animal.class);\n+\tassertEquals(Cat.class, animal.getClass());\n+\tassertEquals(\"Venla\", animal.name);\n+\t// bah, of course cats like cream. But let's ensure Jackson won't mess with laws of nature!\n+\tassertTrue(((Cat) animal).likesCream);\n+    }\n+\n+    public void testManualPolymorphicWithNumbered() throws Exception\n+    {\n+         final ObjectMapper m = new ObjectMapper();\n+         final ObjectWriter w = m.writerWithType(AbstractRoot.class);\n+         final ObjectReader r = m.reader(AbstractRoot.class);\n+\n+        AbstractRoot input = AbstractRoot.make(1, \"oh hai!\");\n+        String json = w.writeValueAsString(input);\n+        AbstractRoot result = r.readValue(json);\n+        assertNotNull(result);\n+        assertEquals(\"oh hai!\", result.getOpt());\n+    }\n+}", "timestamp": 1343013448, "metainfo": ""}