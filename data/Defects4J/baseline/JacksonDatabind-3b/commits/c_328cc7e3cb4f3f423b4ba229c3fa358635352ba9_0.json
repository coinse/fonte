{"sha": "328cc7e3cb4f3f423b4ba229c3fa358635352ba9", "log": "Connected `AnnotationIntrospector.findImplicitPropertyName()` from `POJOPropertiesCollector`; now some of `TestScalaLikeImplicitProperties` tests pass", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n         final boolean pruneFinalFields = !_forSerialization && !_config.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS);\n         \n         for (AnnotatedField f : _classDef.fields()) {\n-            String implName = f.getName();\n+            String implName = (ai == null) ? null : ai.findImplicitPropertyName(f);\n+            if (implName == null) {\n+                implName = f.getName();\n+            }\n+            \n             PropertyName pn;\n \n             if (ai == null) {\n         PropertyName pn = (ai == null) ? null : ai.findNameForSerialization(m);\n         boolean nameExplicit = (pn != null);\n \n-        if (!nameExplicit) { // no explicit name; must follow naming convention\n-            implName = BeanUtil.okNameForRegularGetter(m, m.getName());\n+        if (!nameExplicit) { // no explicit name; must consider implicit\n+            implName = (ai == null) ? null : ai.findImplicitPropertyName(m);\n+            if (implName == null) {\n+                implName = BeanUtil.okNameForRegularGetter(m, m.getName());\n+            }\n             if (implName == null) { // if not, must skip\n                 implName = BeanUtil.okNameForIsGetter(m, m.getName());\n                 if (implName == null) {\n             }\n         } else { // explicit indication of inclusion, but may be empty\n             // we still need implicit name to link with other pieces\n-            implName = BeanUtil.okNameForGetter(m);\n+            implName = (ai == null) ? null : ai.findImplicitPropertyName(m);\n+            if (implName == null) {\n+                implName = BeanUtil.okNameForGetter(m);\n+            }\n             // if not regular getter name, use method name as is\n             if (implName == null) {\n                 implName = m.getName();\n         PropertyName pn = (ai == null) ? null : ai.findNameForDeserialization(m);\n         boolean nameExplicit = (pn != null);\n         if (!nameExplicit) { // no explicit name; must follow naming convention\n-            implName = BeanUtil.okNameForMutator(m, _mutatorPrefix);\n+            implName = (ai == null) ? null : ai.findImplicitPropertyName(m);\n+            if (implName == null) {\n+                implName = BeanUtil.okNameForMutator(m, _mutatorPrefix);\n+            }\n             if (implName == null) { // if not, must skip\n             \treturn;\n             }\n             visible = _visibilityChecker.isSetterVisible(m);\n         } else { // explicit indication of inclusion, but may be empty\n             // we still need implicit name to link with other pieces\n-            implName = BeanUtil.okNameForMutator(m, _mutatorPrefix);\n+            implName = (ai == null) ? null : ai.findImplicitPropertyName(m);\n+            if (implName == null) {\n+                implName = BeanUtil.okNameForMutator(m, _mutatorPrefix);\n+            }\n             // if not regular getter name, use method name as is\n             if (implName == null) {\n                 implName = m.getName();\n--- a/src/test/java/com/fasterxml/jackson/failing/TestScalaLikeImplicitProperties.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestScalaLikeImplicitProperties.java\n package com.fasterxml.jackson.failing;\n \n-import com.fasterxml.jackson.databind.BaseMapTest;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.*;\n \n /**\n  * Tests Scala-style JVM naming patterns for properties.\n  */\n public class TestScalaLikeImplicitProperties extends BaseMapTest\n {\n+    static class NameMangler extends JacksonAnnotationIntrospector\n+    {\n+        private static final long serialVersionUID = 1L;\n+\n+        @Override\n+        public String findImplicitPropertyName(AnnotatedMember member) {\n+            String name = null;\n+            if (member instanceof AnnotatedField) {\n+                name = member.getName();\n+            }\n+            if (name != null) {\n+                if (name.endsWith(\"\u203f\")) {                    \n+                    return name.substring(0, name.length()-1);\n+                }\n+            }\n+            return null;\n+        }\n+    }\n+    \n     static class ValProperty\n     {\n         public final String prop\u203f;\n         // getProp/setProp pairs.\n     }\n \n-\n     public void testValProperty() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n+        ObjectMapper m = manglingMapper();\n \n         // TODO: Activate whatever handler implements the property detection style\n \n \n     public void testValWithBeanProperty() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n+        ObjectMapper m = manglingMapper();\n \n         // TODO: Activate whatever handler implements the property detection style\n \n \n     public void testVarProperty() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n+        ObjectMapper m = manglingMapper();\n \n         // TODO: Activate whatever handler implements the property detection style\n \n \n     public void testVarWithBeanProperty() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n+        ObjectMapper m = manglingMapper();\n \n         // TODO: Activate whatever handler implements the property detection style\n \n \n     public void testGetterSetterProperty() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n+        ObjectMapper m = manglingMapper();\n \n         // TODO: Activate whatever handler implements the property detection style\n \n         GetterSetterProperty result = m.readValue(\"{\\\"prop\\\":\\\"read\\\"}\", GetterSetterProperty.class);\n         assertEquals(\"read\", result.prop());\n     }\n+\n+    private ObjectMapper manglingMapper()\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        m.setAnnotationIntrospector(new NameMangler());\n+        return m;\n+    }\n }", "timestamp": 1399530345, "metainfo": ""}