{"sha": "e05e352f53245160fe761b88665f11f67cef9d43", "log": "Start making changes to support full PropertyName passing, not just String name", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n                 SettableBeanProperty idProp;\n                 ObjectIdGenerator<?> idGen;\n                 if (implClass == ObjectIdGenerators.PropertyGenerator.class) {\n-                    String propName = objectIdInfo.getPropertyName();\n+                    PropertyName propName = objectIdInfo.getPropertyName();\n                     idProp = findProperty(propName);\n                     if (idProp == null) {\n                         throw new IllegalArgumentException(\"Invalid Object Id definition for \"\n         return _propertyBasedCreator.properties().iterator();\n     }\n \n+    public SettableBeanProperty findProperty(PropertyName propertyName)\n+    {\n+        // TODO: start matching full name?\n+        return findProperty(propertyName.getSimpleName());\n+    }\n+    \n     /**\n      * Accessor for finding the property with given name, if POJO\n      * has one. Name used is the external name, i.e. name used\n     protected Object deserializeWithObjectId(JsonParser jp, DeserializationContext ctxt)\n             throws IOException, JsonProcessingException\n     {\n-        final String idPropName = _objectIdReader.propertyName;\n+        final String idPropName = _objectIdReader.propertyName.getSimpleName();\n         // First, the simple case: we point to the Object Id property\n         if (idPropName.equals(jp.getCurrentName())) {\n             return deserializeFromObject(jp, ctxt);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n         return _properties.values().iterator();\n     }\n \n+    /**\n+     * @since 2.3\n+     */\n+    public SettableBeanProperty findProperty(PropertyName propertyName) {\n+        return _properties.get(propertyName.getSimpleName());\n+    }\n+\n+    @Deprecated // since 2.3\n     public SettableBeanProperty findProperty(String propertyName) {\n-    \treturn _properties.get(propertyName);\n-    }\n-    \n+        return _properties.get(propertyName);\n+    }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    public boolean hasProperty(PropertyName propertyName) {\n+        return findProperty(propertyName) != null;\n+    }\n+    \n+    @Deprecated // since 2.3\n     public boolean hasProperty(String propertyName) {\n         return findProperty(propertyName) != null;\n     }\n-    \n+\n+    /**\n+     * @since 2.3\n+     */\n+    public SettableBeanProperty removeProperty(PropertyName name) {\n+        return _properties.remove(name.getSimpleName());\n+    }\n+    \n+    @Deprecated // since 2.3\n     public SettableBeanProperty removeProperty(String name) {\n         return _properties.remove(name);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n \n         // Just one special case: Property-based generator is trickier\n         if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work\n-            String propName = objectIdInfo.getPropertyName();\n+            PropertyName propName = objectIdInfo.getPropertyName();\n             idProp = builder.findProperty(propName);\n             if (idProp == null) {\n                 throw new IllegalArgumentException(\"Invalid Object Id definition for \"\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n import java.lang.annotation.Annotation;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.util.InternCache;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.impl.NullProvider;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n      * \n      * @since 2.3\n      */\n-    protected SettableBeanProperty(String propName, JavaType type, \n+    protected SettableBeanProperty(PropertyName propName, JavaType type, \n             boolean isRequired, JsonDeserializer<Object> valueDeser)\n     {\n         // as with above ctor, intern()ing probably fine\n         if (propName == null) {\n             _propName = PropertyName.NO_NAME;\n         } else {\n-            _propName = new PropertyName(propName).internSimpleName();\n+            _propName = propName.internSimpleName();\n         }\n         _type = type;\n         _wrapperName = null;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java\n \n     public final JavaType idType;\n \n-    public final String propertyName;\n+    public final PropertyName propertyName;\n     \n     /**\n      * Blueprint generator instance: actual instance will be\n      */\n     \n     @SuppressWarnings(\"unchecked\")\n-    protected ObjectIdReader(JavaType t, String propName, ObjectIdGenerator<?> gen,\n+    protected ObjectIdReader(JavaType t, PropertyName propName, ObjectIdGenerator<?> gen,\n             JsonDeserializer<?> deser, SettableBeanProperty idProp)\n     {\n         idType = t;\n         idProperty = idProp;\n     }\n \n+    @Deprecated // since 2.3\n+    protected ObjectIdReader(JavaType t, String propName, ObjectIdGenerator<?> gen,\n+            JsonDeserializer<?> deser, SettableBeanProperty idProp)\n+    {\n+        this(t, new PropertyName(propName), gen, deser, idProp);\n+    }\n+\n     /**\n      * Factory method called by {@link com.fasterxml.jackson.databind.ser.std.BeanSerializerBase}\n      * with the initial information based on standard settings for the type\n      * for which serializer is being built.\n      */\n-    public static ObjectIdReader construct(JavaType idType, String propName,\n+    public static ObjectIdReader construct(JavaType idType, PropertyName propName,\n             ObjectIdGenerator<?> generator, JsonDeserializer<?> deser,\n             SettableBeanProperty idProp)\n     {\n         return new ObjectIdReader(idType, propName, generator, deser, idProp);\n     }\n+    \n+    @Deprecated // since 2.3\n+    public static ObjectIdReader construct(JavaType idType, String propName,\n+            ObjectIdGenerator<?> generator, JsonDeserializer<?> deser,\n+            SettableBeanProperty idProp)\n+    {\n+        return construct(idType, new PropertyName(propName), generator, deser, idProp);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n         _objectIdReader = src._objectIdReader;\n     }\n \n-    protected ObjectIdValueProperty(ObjectIdValueProperty src, String newName) {\n+    @Deprecated // since 2.3\n+    protected ObjectIdValueProperty(ObjectIdValueProperty src, PropertyName newName) {\n         super(src, newName);\n         _objectIdReader = src._objectIdReader;\n+    }\n+    \n+    @Deprecated // since 2.3\n+    protected ObjectIdValueProperty(ObjectIdValueProperty src, String newName) {\n+        this(src, new PropertyName(newName));\n     }\n \n     @Override\n     public ObjectIdValueProperty withName(String newName) {\n-        return new ObjectIdValueProperty(this, newName);\n+        return new ObjectIdValueProperty(this, new PropertyName(newName));\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java\n      */\n     public boolean readIdProperty(String propName) throws IOException\n     {\n-        if ((_objectIdReader != null) && propName.equals(_objectIdReader.propertyName)) {\n+        if ((_objectIdReader != null) && propName.equals(_objectIdReader.propertyName.getSimpleName())) {\n             _idValue = _objectIdReader.deserializer.deserialize(_parser, _context);\n             return true;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/UnwrappedPropertyHandler.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/UnwrappedPropertyHandler.java\n         return new UnwrappedPropertyHandler(newProps);\n     }\n     \n+    @SuppressWarnings(\"resource\")\n     public Object processUnwrapped(JsonParser originalParser, DeserializationContext ctxt, Object bean,\n             TokenBuffer buffered)\n         throws IOException, JsonProcessingException\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n         if (info == null || info.generator() == ObjectIdGenerators.None.class) {\n             return null;\n         }\n-        return new ObjectIdInfo(info.property(), info.scope(), info.generator());\n+        // In future may need to allow passing namespace?\n+        PropertyName name = new PropertyName(info.property());\n+        return new ObjectIdInfo(name, info.scope(), info.generator());\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java\n \n import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+import com.fasterxml.jackson.databind.PropertyName;\n \n /**\n  * Container object that encapsulates information usually\n  */\n public class ObjectIdInfo\n {\n-    protected final String _propertyName;\n+    protected final PropertyName _propertyName;\n     protected final Class<? extends ObjectIdGenerator<?>> _generator;\n     protected final Class<?> _scope;\n     protected final boolean _alwaysAsId;\n \n-    public ObjectIdInfo(String prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen) {\n-        this(prop, scope, gen, false);\n+    public ObjectIdInfo(PropertyName name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen) {\n+        this(name, scope, gen, false);\n     }\n \n-    protected ObjectIdInfo(String prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen,\n+    @Deprecated // since 2.3\n+    public ObjectIdInfo(String name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen) {\n+        this(new PropertyName(name), scope, gen, false);\n+    }\n+    \n+    protected ObjectIdInfo(PropertyName prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen,\n             boolean alwaysAsId)\n     {\n         _propertyName = prop;\n         return new ObjectIdInfo(_propertyName, _scope, _generator, state);\n     }\n     \n-    public String getPropertyName() { return _propertyName; }\n+    public PropertyName getPropertyName() { return _propertyName; }\n     public Class<?> getScope() { return _scope; }\n     public Class<? extends ObjectIdGenerator<?>> getGeneratorType() { return _generator; }\n     public boolean getAlwaysAsId() { return _alwaysAsId; }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n \n         // Just one special case: Property-based generator is trickier\n         if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work\n-            String propName = objectIdInfo.getPropertyName();\n+            String propName = objectIdInfo.getPropertyName().getSimpleName();\n             BeanPropertyWriter idProp = null;\n \n             for (int i = 0, len = props.size() ;; ++i) {\n             JavaType idType = idProp.getType();\n             gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n             // one more thing: must ensure that ObjectIdWriter does not actually write the value:\n-            return ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getAlwaysAsId());\n+            return ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n             \n         } \n         // other types are simpler\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/ObjectIdWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/ObjectIdWriter.java\n      * other entity.\n      */\n     public final SerializedString propertyName;\n-    \n+\n     /**\n      * Blueprint generator instance: actual instance will be\n      * fetched from {@link SerializerProvider} using this as\n      * Factory method called by {@link com.fasterxml.jackson.databind.ser.std.BeanSerializerBase}\n      * with the initial information based on standard settings for the type\n      * for which serializer is being built.\n+     * \n+     * @since 2.3\n      */\n+    public static ObjectIdWriter construct(JavaType idType, PropertyName propName,\n+            ObjectIdGenerator<?> generator, boolean alwaysAsId)\n+    {\n+        String simpleName = (propName == null) ? null : propName.getSimpleName();\n+        return construct(idType, simpleName, generator, alwaysAsId);\n+    }\n+    \n+    @Deprecated // since 2.3\n     public static ObjectIdWriter construct(JavaType idType, String propName,\n             ObjectIdGenerator<?> generator, boolean alwaysAsId)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n             if (objectIdInfo == null) {\n                 // no ObjectId override, but maybe ObjectIdRef?\n                 if (oiw != null) {\n-                    objectIdInfo = intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(\"\", null, null));\n+                    objectIdInfo = intr.findObjectReferenceInfo(accessor,\n+                            new ObjectIdInfo(PropertyName.NO_NAME, null, null));\n                     oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n                 }\n             } else {\n                 JavaType idType = provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                 // Property-based generator is trickier\n                 if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work\n-                    String propName = objectIdInfo.getPropertyName();\n+                    String propName = objectIdInfo.getPropertyName().getSimpleName();\n                     BeanPropertyWriter idProp = null;\n \n                     for (int i = 0, len = _props.length ;; ++i) {\n                     }\n                     idType = idProp.getType();\n                     gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n-                    oiw = ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getAlwaysAsId());\n+                    oiw = ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n                 } else { // other types need to be simpler\n                     gen = provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                     oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen,", "timestamp": 1374818752, "metainfo": ""}