{"sha": "7fbc6598818b7362d0110fdf86ed53bc01533a86", "log": "Add a unit test for deserializing property-based (custom) object ids", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n  */\n public class TestObjectIdDeserialization extends BaseMapTest\n {\n+    // // Classes for external id use\n+    \n     @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"id\")\n     static class Identifiable\n     {\n         }\n     }\n \n+    @JsonIdentityInfo(generator=ObjectIdGenerators.UUIDGenerator.class, property=\"#\")\n+    static class UUIDNode\n+    {\n+        public int value;\n+        public UUIDNode parent;\n+        public UUIDNode first;\n+        public UUIDNode second;\n+\n+        public UUIDNode() { this(0); }\n+        public UUIDNode(int v) { value = v; }\n+    }\n+    \n+    // // Classes for external id from property annotations:\n+    \n     static class IdWrapper\n     {\n         @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"@id\")\n         public ValueNode(int v) { value = v; }\n     }\n \n-    @JsonIdentityInfo(generator=ObjectIdGenerators.UUIDGenerator.class, property=\"#\")\n-    static class UUIDNode\n+    // // Classes for external id use\n+\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.PropertyGenerator.class, property=\"customId\")\n+    static class IdentifiableCustom\n     {\n         public int value;\n-        public UUIDNode parent;\n-        public UUIDNode first;\n-        public UUIDNode second;\n \n-        public UUIDNode() { this(0); }\n-        public UUIDNode(int v) { value = v; }\n+        public int customId;\n+        \n+        public IdentifiableCustom next;\n+        \n+        public IdentifiableCustom() { this(-1, 0); }\n+        public IdentifiableCustom(int i, int v) {\n+            customId = i;\n+            value = v;\n+        }\n     }\n+\n+    private final ObjectMapper mapper = new ObjectMapper();\n     \n     /*\n     /*****************************************************\n-    /* Unit tests; simple class annotation\n+    /* Unit tests, external id deserialization\n     /*****************************************************\n      */\n \n     private final static String EXP_SIMPLE_INT_CLASS = \"{\\\"id\\\":1,\\\"value\\\":13,\\\"next\\\":1}\";\n-    \n-    private final ObjectMapper mapper = new ObjectMapper();\n \n     public void testSimpleDeserializationClass() throws Exception\n     {\n         assertSame(result, result3.parent);\n         assertSame(result3, result2.first);\n     }\n-    \n-    /*\n-    /*****************************************************\n-    /* Unit tests; simple property annotation\n-    /*****************************************************\n-     */\n \n     // Bit more complex, due to extra wrapping etc:\n     private final static String EXP_SIMPLE_INT_PROP = \"{\\\"node\\\":{\\\"@id\\\":1,\\\"value\\\":7,\\\"next\\\":{\\\"node\\\":1}}}\";\n         assertEquals(7, result.node.value);\n         assertSame(result.node, result.node.next.node);\n     }\n+\n+    /*\n+    /*****************************************************\n+    /* Unit tests, custom (property-based) id deserialization\n+    /*****************************************************\n+     */\n+\n+    private final static String EXP_CUSTOM_VIA_CLASS = \"{\\\"customId\\\":123,\\\"value\\\":-900,\\\"next\\\":123}\";\n+\n+    public void testCustomDeserializationClass() throws Exception\n+    {\n+        // then bring back...\n+        IdentifiableCustom result = mapper.readValue(EXP_CUSTOM_VIA_CLASS, IdentifiableCustom.class);\n+        assertEquals(-900, result.value);\n+        assertSame(result, result.next);\n+    }\n+\n }", "timestamp": 1328856669, "metainfo": ""}