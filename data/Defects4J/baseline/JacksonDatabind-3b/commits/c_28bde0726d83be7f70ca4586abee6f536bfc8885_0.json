{"sha": "28bde0726d83be7f70ca4586abee6f536bfc8885", "log": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n package com.fasterxml.jackson.databind;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n import java.util.*;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n \n     public abstract AnnotatedClass getClassInfo();\n     \n+    /**\n+     * Method for checking whether class being described has any\n+     * annotations recognized by registered annotation introspector.\n+     */\n     public abstract boolean hasKnownClassAnnotations();\n \n     /**\n     \n     /*\n     /**********************************************************\n-    /* Basic API for finding properties, related\n+    /* Basic API for finding properties\n     /**********************************************************\n      */\n     \n      *    matching getter method as value.\n      */\n     public abstract List<BeanPropertyDefinition> findProperties();\n+    \n+    /**\n+     * Method for locating all back-reference properties (setters, fields) bean has\n+     */\n+    public abstract Map<String,AnnotatedMember> findBackReferenceProperties();\n \n-    public abstract Map<Object, AnnotatedMember> findInjectables();\n+    public abstract Set<String> getIgnoredPropertyNames();\n+    \n+    /*\n+    /**********************************************************\n+    /* Basic API for finding creator members\n+    /**********************************************************\n+     */\n+    \n+    public abstract List<AnnotatedConstructor> getConstructors();\n+    \n+    public abstract List<AnnotatedMethod> getFactoryMethods();\n+    \n+    /**\n+     * Method that will locate the no-arg constructor for this class,\n+     * if it has one, and that constructor has not been marked as\n+     * ignorable.\n+     */\n+    public abstract AnnotatedConstructor findDefaultConstructor();\n+\n+    /**\n+     * Method that can be called to locate a single-arg constructor that\n+     * takes specified exact type (will not accept supertype constructors)\n+     *\n+     * @param argTypes Type(s) of the argument that we are looking for\n+     */\n+    public abstract Constructor<?> findSingleArgConstructor(Class<?>... argTypes);\n+\n+    /**\n+     * Method that can be called to find if introspected class declares\n+     * a static \"valueOf\" factory method that returns an instance of\n+     * introspected type, given one of acceptable types.\n+     *\n+     * @param expArgTypes Types that the matching single argument factory\n+     *   method can take: will also accept super types of these types\n+     *   (ie. arg just has to be assignable from expArgType)\n+     */\n+    public abstract Method findFactoryMethod(Class<?>... expArgTypes);\n+\n+    /*\n+    /**********************************************************\n+    /* Basic API for finding property accessors\n+    /**********************************************************\n+     */\n     \n     public abstract AnnotatedMethod findAnyGetter();\n \n+    /**\n+     * Method used to locate the method of introspected class that\n+     * implements {@link com.fasterxml.jackson.annotation.JsonAnySetter}. If no such method exists\n+     * null is returned. If more than one are found, an exception\n+     * is thrown.\n+     * Additional checks are also made to see that method signature\n+     * is acceptable: needs to take 2 arguments, first one String or\n+     * Object; second any can be any type.\n+     */\n     public abstract AnnotatedMethod findAnySetter();\n \n+    /**\n+     * Method for locating the getter method that is annotated with\n+     * {@link com.fasterxml.jackson.annotation.JsonValue} annotation,\n+     * if any. If multiple ones are found,\n+     * an error is reported by throwing {@link IllegalArgumentException}\n+     */\n     public abstract AnnotatedMethod findJsonValueMethod();\n \n-    public abstract AnnotatedConstructor findDefaultConstructor();\n+    public abstract AnnotatedMethod findMethod(String name, Class<?>[] paramTypes);\n     \n-    public abstract Set<String> getIgnoredPropertyNames();\n+    /*\n+    /**********************************************************\n+    /* Basic API, other\n+    /**********************************************************\n+     */\n+\n+    public abstract Map<Object, AnnotatedMember> findInjectables();\n+\n+    public abstract JsonInclude.Include findSerializationInclusion(JsonInclude.Include defValue);\n+    \n+    /**\n+     * Method called to create a \"default instance\" of the bean, currently\n+     * only needed for obtaining default field values which may be used for\n+     * suppressing serialization of fields that have \"not changed\".\n+     * \n+     * @param fixAccess If true, method is allowed to fix access to the\n+     *   default constructor (to be able to call non-public constructor);\n+     *   if false, has to use constructor as is.\n+     *\n+     * @return Instance of class represented by this descriptor, if\n+     *   suitable default constructor was found; null otherwise.\n+     */\n+    public abstract Object instantiateBean(boolean fixAccess);\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n     }\n     \n     @Override\n-    public DeserializationConfig withClassIntrospector(ClassIntrospector<? extends BeanDescription> ci) {\n+    public DeserializationConfig withClassIntrospector(ClassIntrospector ci) {\n         return _withBase(_base.withClassIntrospector(ci));\n     }\n \n      * Accessor for getting bean description that only contains class\n      * annotations: useful if no getter/setter/creator information is needed.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public <T extends BeanDescription> T introspectClassAnnotations(JavaType type) {\n-        return (T) getClassIntrospector().forClassAnnotations(this, type, this);\n+    @Override\n+    public BeanDescription introspectClassAnnotations(JavaType type) {\n+        return getClassIntrospector().forClassAnnotations(this, type, this);\n     }\n \n     /**\n      * not from super types.\n      */\n     @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends BeanDescription> T introspectDirectClassAnnotations(JavaType type) {\n-        return (T) getClassIntrospector().forDirectClassAnnotations(this, type, this);\n+    public BeanDescription introspectDirectClassAnnotations(JavaType type) {\n+        return getClassIntrospector().forDirectClassAnnotations(this, type, this);\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n     /* !!! 03-Apr-2009, tatu: Should try to avoid direct reference... but not\n      *   sure what'd be simple and elegant way. So until then:\n      */\n-    protected final static ClassIntrospector<? extends BeanDescription> DEFAULT_INTROSPECTOR = BasicClassIntrospector.instance;\n+    protected final static ClassIntrospector DEFAULT_INTROSPECTOR = BasicClassIntrospector.instance;\n \n     // 16-May-2009, tatu: Ditto ^^^\n     protected final static AnnotationIntrospector DEFAULT_ANNOTATION_INTROSPECTOR = new JacksonAnnotationIntrospector();\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n     }\n     \n     @Override\n-    public SerializationConfig withClassIntrospector(ClassIntrospector<? extends BeanDescription> ci) {\n+    public SerializationConfig withClassIntrospector(ClassIntrospector ci) {\n         return _withBase(_base.withClassIntrospector(ci));\n     }\n \n      * Accessor for getting bean description that only contains class\n      * annotations: useful if no getter/setter/creator information is needed.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public <T extends BeanDescription> T introspectClassAnnotations(JavaType type) {\n-        return (T) getClassIntrospector().forClassAnnotations(this, type, this);\n+    @Override\n+    public BeanDescription introspectClassAnnotations(JavaType type) {\n+        return getClassIntrospector().forClassAnnotations(this, type, this);\n     }\n \n     /**\n      * annotations: ones from the class, and its direct mix-in, if any, but\n      * not from super types.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public <T extends BeanDescription> T introspectDirectClassAnnotations(JavaType type) {\n-        return (T) getClassIntrospector().forDirectClassAnnotations(this, type, this);\n+    @Override\n+    public BeanDescription introspectDirectClassAnnotations(JavaType type) {\n+        return getClassIntrospector().forDirectClassAnnotations(this, type, this);\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java\n \n import com.fasterxml.jackson.annotation.JsonAutoDetect;\n import com.fasterxml.jackson.annotation.PropertyAccessor;\n-import com.fasterxml.jackson.databind.AnnotationIntrospector;\n-import com.fasterxml.jackson.databind.BeanDescription;\n-import com.fasterxml.jackson.databind.HandlerInstantiator;\n-import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n      * and deserialization. Overridable so that it is possible to change low-level\n      * details of introspection, like adding new annotation types.\n      */\n-    protected final ClassIntrospector<? extends BeanDescription> _classIntrospector;\n+    protected final ClassIntrospector _classIntrospector;\n \n     /**\n      * Introspector used for accessing annotation value based configuration.\n     /**********************************************************\n      */\n \n-    public BaseSettings(ClassIntrospector<? extends BeanDescription> ci, AnnotationIntrospector ai,\n+    public BaseSettings(ClassIntrospector ci, AnnotationIntrospector ai,\n             VisibilityChecker<?> vc, PropertyNamingStrategy pns, TypeFactory tf,\n             TypeResolverBuilder<?> typer, DateFormat dateFormat, HandlerInstantiator hi)\n     {\n     /**********************************************************\n      */\n     \n-    public BaseSettings withClassIntrospector(ClassIntrospector<? extends BeanDescription> ci) {\n+    public BaseSettings withClassIntrospector(ClassIntrospector ci) {\n         return new BaseSettings(ci, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                 _typeResolverBuilder, _dateFormat, _handlerInstantiator);\n     }\n     /**********************************************************\n      */\n \n-    public ClassIntrospector<? extends BeanDescription> getClassIntrospector() {\n+    public ClassIntrospector getClassIntrospector() {\n         return _classIntrospector;\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java\n     /**********************************************************\n      */\n     \n-    public ClassIntrospector<? extends BeanDescription> getClassIntrospector() {\n+    public ClassIntrospector getClassIntrospector() {\n         return _base.getClassIntrospector();\n     }\n \n      * Accessor for getting bean description that only contains class\n      * annotations: useful if no getter/setter/creator information is needed.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public <DESC extends BeanDescription> DESC introspectClassAnnotations(Class<?> cls) {\n-        return (DESC) introspectClassAnnotations(constructType(cls));\n+    public BeanDescription introspectClassAnnotations(Class<?> cls) {\n+        return introspectClassAnnotations(constructType(cls));\n     }\n     \n     /**\n      * Accessor for getting bean description that only contains class\n      * annotations: useful if no getter/setter/creator information is needed.\n      */\n-    public abstract <DESC extends BeanDescription> DESC introspectClassAnnotations(JavaType type);\n+    public abstract BeanDescription introspectClassAnnotations(JavaType type);\n \n     /**\n      * Accessor for getting bean description that only contains immediate class\n      * annotations: ones from the class, and its direct mix-in, if any, but\n      * not from super types.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public <DESC extends BeanDescription> DESC introspectDirectClassAnnotations(Class<?> cls) {\n-        return (DESC) introspectDirectClassAnnotations(constructType(cls));\n+    public BeanDescription introspectDirectClassAnnotations(Class<?> cls) {\n+        return introspectDirectClassAnnotations(constructType(cls));\n     }\n     /**\n      * Accessor for getting bean description that only contains immediate class\n      * annotations: ones from the class, and its direct mix-in, if any, but\n      * not from super types.\n      */\n-    public abstract <DESC extends BeanDescription> DESC introspectDirectClassAnnotations(JavaType type);\n+    public abstract BeanDescription introspectDirectClassAnnotations(JavaType type);\n         \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n import com.fasterxml.jackson.annotation.JsonAutoDetect;\n import com.fasterxml.jackson.annotation.PropertyAccessor;\n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n-import com.fasterxml.jackson.databind.BeanDescription;\n import com.fasterxml.jackson.databind.HandlerInstantiator;\n import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n      * NOTE: make sure to register new instance with <code>ObjectMapper</code>\n      * if directly calling this method.\n      */\n-    public abstract T withClassIntrospector(ClassIntrospector<? extends BeanDescription> ci);\n+    public abstract T withClassIntrospector(ClassIntrospector ci);\n \n     /**\n      * Method for constructing and returning a new instance with different\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n     /*\n     /**********************************************************\n     /* Methods for sub-classes to override to provide\n-    /* custom deserializers (since 1.7)\n-    /**********************************************************\n-     */\n-    \n-    protected abstract JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type, DeserializationConfig config,\n-            DeserializerProvider p, BeanProperty property,\n+    /* custom deserializers\n+    /**********************************************************\n+     */\n+    \n+    protected abstract JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type,\n+            DeserializationConfig config, DeserializerProvider p, BeanProperty property,\n             TypeDeserializer elementTypeDeser, JsonDeserializer<?> elementDeser)\n         throws JsonMappingException;\n     \n     protected abstract JsonDeserializer<?> _findCustomCollectionDeserializer(\n             CollectionType type, DeserializationConfig config,\n-            DeserializerProvider p, BasicBeanDescription beanDesc, BeanProperty property,\n+            DeserializerProvider p, BeanDescription beanDesc, BeanProperty property,\n             TypeDeserializer elementTypeDeser, JsonDeserializer<?> elementDeser)\n         throws JsonMappingException;\n \n     protected abstract JsonDeserializer<?> _findCustomCollectionLikeDeserializer(\n             CollectionLikeType type, DeserializationConfig config,\n-            DeserializerProvider p, BasicBeanDescription beanDesc, BeanProperty property,\n+            DeserializerProvider p, BeanDescription beanDesc, BeanProperty property,\n             TypeDeserializer elementTypeDeser, JsonDeserializer<?> elementDeser)\n         throws JsonMappingException;\n     \n     protected abstract JsonDeserializer<?> _findCustomEnumDeserializer(Class<?> type,\n-            DeserializationConfig config, BasicBeanDescription beanDesc, BeanProperty property)\n+            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property)\n         throws JsonMappingException;\n \n     protected abstract JsonDeserializer<?> _findCustomMapDeserializer(MapType type,\n             DeserializationConfig config,\n-            DeserializerProvider p, BasicBeanDescription beanDesc, BeanProperty property,\n+            DeserializerProvider p, BeanDescription beanDesc, BeanProperty property,\n             KeyDeserializer keyDeser,\n             TypeDeserializer elementTypeDeser, JsonDeserializer<?> elementDeser)\n         throws JsonMappingException;\n \n     protected abstract JsonDeserializer<?> _findCustomMapLikeDeserializer(MapLikeType type,\n             DeserializationConfig config,\n-            DeserializerProvider p, BasicBeanDescription beanDesc, BeanProperty property,\n+            DeserializerProvider p, BeanDescription beanDesc, BeanProperty property,\n             KeyDeserializer keyDeser,\n             TypeDeserializer elementTypeDeser, JsonDeserializer<?> elementDeser)\n         throws JsonMappingException;\n \n     @Override\n     public abstract ValueInstantiator findValueInstantiator(DeserializationConfig config,\n-            BasicBeanDescription beanDesc)\n+            BeanDescription beanDesc)\n         throws JsonMappingException;\n \n     @Override\n         type = (CollectionType) mapAbstractType(config, type);\n \n         Class<?> collectionClass = type.getRawClass();\n-        BasicBeanDescription beanDesc = config.introspectForCreation(type);\n+        BeanDescription beanDesc = config.introspectForCreation(type);\n         // Explicit deserializer to use? (@JsonDeserialize.using)\n         JsonDeserializer<Object> deser = findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n         if (deser != null) {\n         type = (CollectionLikeType) mapAbstractType(config, type);\n \n         Class<?> collectionClass = type.getRawClass();\n-        BasicBeanDescription beanDesc = config.introspectClassAnnotations(collectionClass);\n+        BeanDescription beanDesc = config.introspectClassAnnotations(collectionClass);\n         // Explicit deserializer to use? (@JsonDeserialize.using)\n         JsonDeserializer<Object> deser = findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n         if (deser != null) {\n         // First: global defaulting:\n         type = (MapType) mapAbstractType(config, type);\n \n-        BasicBeanDescription beanDesc = config.introspectForCreation(type);\n+        BeanDescription beanDesc = config.introspectForCreation(type);\n         // Explicit deserializer to use? (@JsonDeserialize.using)\n         JsonDeserializer<Object> deser = findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n         if (deser != null) {\n     {\n         // First: global defaulting:\n         type = (MapLikeType) mapAbstractType(config, type);\n-        BasicBeanDescription beanDesc = config.introspectForCreation(type);\n+        BeanDescription beanDesc = config.introspectForCreation(type);\n         // Explicit deserializer to use? (@JsonDeserialize.using)\n         JsonDeserializer<Object> deser = findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n         if (deser != null) {\n             JavaType type, BeanProperty property)\n         throws JsonMappingException\n     {\n-        BasicBeanDescription beanDesc = config.introspect(type);\n+        BeanDescription beanDesc = config.introspect(type);\n         JsonDeserializer<?> des = findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n         if (des != null) {\n             return des;\n         throws JsonMappingException\n     {\n         Class<?> cls = baseType.getRawClass();\n-        BasicBeanDescription bean = config.introspectClassAnnotations(cls);\n+        BeanDescription bean = config.introspectClassAnnotations(cls);\n         AnnotatedClass ac = bean.getClassInfo();\n         AnnotationIntrospector ai = config.getAnnotationIntrospector();\n         TypeResolverBuilder<?> b = ai.findTypeResolver(config, ac, baseType);\n         throws JsonMappingException\n     {\n         if (_factoryConfig.hasKeyDeserializers()) {\n-            BasicBeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n+            BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n             for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n                 KeyDeserializer deser = d.findKeyDeserializer(type, config, beanDesc, property);\n                 if (deser != null) {\n             BeanProperty property)\n         throws JsonMappingException\n     {\n-        BasicBeanDescription beanDesc = config.introspect(type);\n+        BeanDescription beanDesc = config.introspect(type);\n         JsonDeserializer<?> des = findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n         if (des != null) {\n             return StdKeyDeserializers.constructDelegatingKeyDeserializer(config, type, des);\n      * needed in some cases.\n      */\n     protected JavaType resolveType(DeserializationConfig config,\n-            BasicBeanDescription beanDesc, JavaType type, AnnotatedMember member,\n+            BeanDescription beanDesc, JavaType type, AnnotatedMember member,\n             BeanProperty property)                    \n         throws JsonMappingException\n     {\n         if (enumType == null) {\n             return null;\n         }\n-        BasicBeanDescription beanDesc = config.introspect(enumType);\n+        BeanDescription beanDesc = config.introspect(enumType);\n         return beanDesc.findJsonValueMethod();\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;\n import com.fasterxml.jackson.databind.deser.impl.ValueInjector;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n-import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n import com.fasterxml.jackson.databind.util.Annotations;\n \n /**\n     /**********************************************************\n      */\n \n-    final protected BasicBeanDescription _beanDesc;\n+    final protected BeanDescription _beanDesc;\n     \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n     \n-    public BeanDeserializerBuilder(BasicBeanDescription beanDesc)\n+    public BeanDeserializerBuilder(BeanDescription beanDesc)\n     { \n         _beanDesc = beanDesc;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n      */\n     \n     @Override\n-    protected JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type, DeserializationConfig config,\n-            DeserializerProvider provider,\n+    protected JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type,\n+            DeserializationConfig config, DeserializerProvider provider,\n             BeanProperty property,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     }\n \n     @Override\n-    protected JsonDeserializer<?> _findCustomCollectionDeserializer(CollectionType type, DeserializationConfig config,\n-            DeserializerProvider provider, BasicBeanDescription beanDesc,\n+    protected JsonDeserializer<?> _findCustomCollectionDeserializer(CollectionType type,\n+            DeserializationConfig config, DeserializerProvider provider, BeanDescription beanDesc,\n             BeanProperty property,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     }\n \n     @Override\n-    protected JsonDeserializer<?> _findCustomCollectionLikeDeserializer(CollectionLikeType type, DeserializationConfig config,\n-            DeserializerProvider provider, BasicBeanDescription beanDesc,\n+    protected JsonDeserializer<?> _findCustomCollectionLikeDeserializer(CollectionLikeType type,\n+            DeserializationConfig config, DeserializerProvider provider, BeanDescription beanDesc,\n             BeanProperty property,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     }\n     \n     @Override\n-    protected JsonDeserializer<?> _findCustomEnumDeserializer(Class<?> type, DeserializationConfig config,\n-            BasicBeanDescription beanDesc, BeanProperty property)\n+    protected JsonDeserializer<?> _findCustomEnumDeserializer(Class<?> type,\n+            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property)\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n \n     @Override\n     protected JsonDeserializer<?> _findCustomMapDeserializer(MapType type,\n-            DeserializationConfig config,\n-            DeserializerProvider provider, BasicBeanDescription beanDesc, BeanProperty property,\n+            DeserializationConfig config, DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n             KeyDeserializer keyDeserializer,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     @Override\n     protected JsonDeserializer<?> _findCustomMapLikeDeserializer(MapLikeType type,\n             DeserializationConfig config,\n-            DeserializerProvider provider, BasicBeanDescription beanDesc, BeanProperty property,\n+            DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n             KeyDeserializer keyDeserializer,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     // Note: NOT overriding, superclass has no matching method\n     @SuppressWarnings(\"unchecked\")\n     protected JsonDeserializer<Object> _findCustomBeanDeserializer(JavaType type, DeserializationConfig config,\n-            DeserializerProvider provider, BasicBeanDescription beanDesc, BeanProperty property)\n+            DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property)\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n      */\n     @Override\n     public ValueInstantiator findValueInstantiator(DeserializationConfig config,\n-            BasicBeanDescription beanDesc)\n+            BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         ValueInstantiator instantiator;\n         }\n         \n         // First things first: maybe explicit definition via annotations?\n-        BasicBeanDescription beanDesc = config.introspect(type);\n+        BeanDescription beanDesc = config.introspect(type);\n         JsonDeserializer<Object> ad = findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n         if (ad != null) {\n             return ad;\n     }\n     \n     protected JavaType materializeAbstractType(DeserializationConfig config,\n-            BasicBeanDescription beanDesc)\n+            BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         final JavaType abstractType = beanDesc.getType();\n      */\n     @SuppressWarnings(\"unchecked\")\n     public JsonDeserializer<Object> buildBeanDeserializer(DeserializationConfig config,\n-            JavaType type, BasicBeanDescription beanDesc, BeanProperty property)\n+            JavaType type, BeanDescription beanDesc, BeanProperty property)\n         throws JsonMappingException\n     {\n         // First: check what creators we can use, if any\n \n     @SuppressWarnings(\"unchecked\")\n     public JsonDeserializer<Object> buildThrowableDeserializer(DeserializationConfig config,\n-            JavaType type, BasicBeanDescription beanDesc, BeanProperty property)\n+            JavaType type, BeanDescription beanDesc, BeanProperty property)\n         throws JsonMappingException\n     {\n         // first: construct like a regular bean deserializer...\n      * which is used to accumulate information needed to create deserializer\n      * instance.\n      */\n-    protected BeanDeserializerBuilder constructBeanDeserializerBuilder(BasicBeanDescription beanDesc) {\n+    protected BeanDeserializerBuilder constructBeanDeserializerBuilder(BeanDescription beanDesc) {\n         return new BeanDeserializerBuilder(beanDesc);\n     }\n \n     protected ValueInstantiator findStdValueInstantiator(DeserializationConfig config,\n-            BasicBeanDescription beanDesc)\n+            BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         return JacksonDeserializers.findValueInstantiator(config, beanDesc);\n      * using annotations (like @JsonCreator) and visibility rules\n      */\n     protected ValueInstantiator constructDefaultValueInstantiator(DeserializationConfig config,\n-            BasicBeanDescription beanDesc)\n+            BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         boolean fixAccess = config.canOverrideAccessModifiers();\n     }\n \n     protected void _addDeserializerConstructors\n-        (DeserializationConfig config, BasicBeanDescription beanDesc, VisibilityChecker<?> vchecker,\n+        (DeserializationConfig config, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n          AnnotationIntrospector intr, CreatorCollector creators)\n         throws JsonMappingException\n     {\n     }\n \n     protected boolean _handleSingleArgumentConstructor(DeserializationConfig config,\n-            BasicBeanDescription beanDesc, VisibilityChecker<?> vchecker,\n+            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n             AnnotationIntrospector intr, CreatorCollector creators,\n             AnnotatedConstructor ctor, boolean isCreator, boolean isVisible)\n         throws JsonMappingException\n     }\n     \n     protected void _addDeserializerFactoryMethods\n-        (DeserializationConfig config, BasicBeanDescription beanDesc, VisibilityChecker<?> vchecker,\n+        (DeserializationConfig config, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n          AnnotationIntrospector intr, CreatorCollector creators)\n         throws JsonMappingException\n     {\n     }\n \n     protected boolean _handleSingleArgumentFactory(DeserializationConfig config,\n-            BasicBeanDescription beanDesc, VisibilityChecker<?> vchecker,\n+            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n             AnnotationIntrospector intr, CreatorCollector creators,\n             AnnotatedMethod factory, boolean isCreator)\n         throws JsonMappingException\n      * factory method)\n      */\n     protected CreatorProperty constructCreatorProperty(DeserializationConfig config,\n-            BasicBeanDescription beanDesc, String name, int index,\n+            BeanDescription beanDesc, String name, int index,\n             AnnotatedParameter param,\n             Object injectableValueId)\n         throws JsonMappingException\n      * similar between versions.\n      */\n     protected void addBeanProps(DeserializationConfig config,\n-            BasicBeanDescription beanDesc, BeanDeserializerBuilder builder)\n+            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n         throws JsonMappingException\n     {\n         List<BeanPropertyDefinition> props = beanDesc.findProperties();\n      * and if so add them to bean, to be linked during resolution phase.\n      */\n     protected void addReferenceProperties(DeserializationConfig config,\n-            BasicBeanDescription beanDesc, BeanDeserializerBuilder builder)\n+            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n         throws JsonMappingException\n     {\n         // and then back references, not necessarily found as regular properties\n      * constructor {@link com.fasterxml.jackson.databind.deser.impl.ValueInjector} instances, and add them to builder.\n      */\n     protected void addInjectables(DeserializationConfig config,\n-            BasicBeanDescription beanDesc, BeanDeserializerBuilder builder)\n+            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n         throws JsonMappingException\n     {\n         Map<Object, AnnotatedMember> raw = beanDesc.findInjectables();\n      * has been designated as such setter.\n      */\n     protected SettableAnyProperty constructAnySetter(DeserializationConfig config,\n-            BasicBeanDescription beanDesc, AnnotatedMethod setter)\n+            BeanDescription beanDesc, AnnotatedMethod setter)\n         throws JsonMappingException\n     {\n         if (config.canOverrideAccessModifiers()) {\n      *   there should be no property based on given definitions.\n      */\n     protected SettableBeanProperty constructSettableProperty(DeserializationConfig config,\n-            BasicBeanDescription beanDesc, String name,\n+            BeanDescription beanDesc, String name,\n             AnnotatedMethod setter)\n         throws JsonMappingException\n     {\n     }\n \n     protected SettableBeanProperty constructSettableProperty(DeserializationConfig config,\n-            BasicBeanDescription beanDesc, String name, AnnotatedField field)\n+            BeanDescription beanDesc, String name, AnnotatedField field)\n         throws JsonMappingException\n     {\n         // need to ensure method is callable (for non-public)\n      *    none. Non-null for \"setterless\" properties.\n      */\n     protected SettableBeanProperty constructSetterlessProperty(DeserializationConfig config,\n-            BasicBeanDescription beanDesc, String name, AnnotatedMethod getter)\n+            BeanDescription beanDesc, String name, AnnotatedMethod getter)\n         throws JsonMappingException\n     {\n         // need to ensure it is callable now:\n      * Helper method that will check whether given raw type is marked as always ignorable\n      * (for purpose of ignoring properties with type)\n      */\n-    protected boolean isIgnorableType(DeserializationConfig config, BasicBeanDescription beanDesc,\n+    protected boolean isIgnorableType(DeserializationConfig config, BeanDescription beanDesc,\n             Class<?> type, Map<Class<?>,Boolean> ignoredTypes)\n     {\n         Boolean status = ignoredTypes.get(type);\n         if (status == null) {\n-            BasicBeanDescription desc = config.introspectClassAnnotations(type);\n+            BeanDescription desc = config.introspectClassAnnotations(type);\n             status = config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo());\n             // We default to 'false', ie. not ignorable\n             if (status == null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier.java\n package com.fasterxml.jackson.databind.deser;\n \n-import com.fasterxml.jackson.databind.DeserializationConfig;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.BeanDeserializer;\n import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;\n-import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n \n /**\n  * Abstract class that defines API for objects that can be registered (for {@link BeanDeserializerFactory}\n      * deserializer). Typically changes mostly concern set of properties to deserialize.\n      */\n     public BeanDeserializerBuilder updateBuilder(DeserializationConfig config,\n-            BasicBeanDescription beanDesc, BeanDeserializerBuilder builder) {\n+            BeanDescription beanDesc, BeanDeserializerBuilder builder) {\n         return builder;\n     }\n \n      * and this is why implementations must check for type before casting.\n      */\n     public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n-            BasicBeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n+            BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n         return deserializer;\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n package com.fasterxml.jackson.databind.deser;\n \n-import com.fasterxml.jackson.databind.AbstractTypeResolver;\n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.DeserializationConfig;\n-import com.fasterxml.jackson.databind.DeserializerProvider;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.KeyDeserializer;\n-import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.type.*;\n-\n \n /**\n  * Abstract class that defines API used by {@link DeserializerProvider}\n      * for the bean type to deserialize.\n      */\n     public abstract ValueInstantiator findValueInstantiator(DeserializationConfig config,\n-            BasicBeanDescription beanDesc)\n+            BeanDescription beanDesc)\n         throws JsonMappingException;\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.ser.Serializers;\n import com.fasterxml.jackson.databind.type.*;\n-\n \n /**\n  * Interface that defines API for simple extensions that can provide additional deserializers\n      *   (but note that in many cases resolution must be deferred by using {@link ResolvableDeserializer} callback)\n      * @param property Property that contains array value  (null for root values)\n      * @param beanDesc Definition of the enumeration type that contains class annotations and\n-     *    other information typically needed for building deserializers (note: always instance\n-     *    of {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription})\n+     *    other information typically needed for building deserializers\n      * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n      *    the type information deserializer to use; should usually be used as is when constructing\n      *    array deserializer.\n      *   (but note that in many cases resolution must be deferred by using {@link ResolvableDeserializer} callback)\n      * @param property Property that contains array value  (null for root values)\n      * @param beanDesc Definition of the enumeration type that contains class annotations and\n-     *    other information typically needed for building deserializers (note: always instance\n-     *    of {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription})\n+     *    other information typically needed for building deserializers\n      * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n      *    the type information deserializer to use; should usually be used as is when constructing\n      *    array deserializer.\n      * @param type Type of {@link java.lang.Enum} instances to deserialize\n      * @param config Configuration in effect\n      * @param beanDesc Definition of the enumeration type that contains class annotations and\n-     *    other information typically needed for building deserializers (note: always instance\n-     *    of {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription})\n+     *    other information typically needed for building deserializers\n      * \n      * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n      */\n      * @param provider Provider that can be used to locate dependant deserializers if and as necessary\n      *   (but note that in many cases resolution must be deferred by using {@link ResolvableDeserializer} callback)\n      * @param beanDesc Definition of the enumeration type that contains class annotations and\n-     *    other information typically needed for building deserializers (note: always instance\n-     *    of {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription})\n+     *    other information typically needed for building deserializers\n      * @param keyDeserializer Key deserializer use, if it is defined via annotations or other configuration;\n      *    null if default key deserializer for key type can be used.\n      * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n      * @param provider Provider that can be used to locate dependant deserializers if and as necessary\n      *   (but note that in many cases resolution must be deferred by using {@link ResolvableDeserializer} callback)\n      * @param beanDesc Definition of the enumeration type that contains class annotations and\n-     *    other information typically needed for building deserializers (note: always instance\n-     *    of {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription})\n+     *    other information typically needed for building deserializers\n      * @param keyDeserializer Key deserializer use, if it is defined via annotations or other configuration;\n      *    null if default key deserializer for key type can be used.\n      * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n      * @param provider Provider that can be used to locate dependant deserializers if and as necessary\n      *   (but note that in many cases resolution must be deferred by using {@link ResolvableDeserializer} callback)\n      * @param beanDesc Definition of the enumeration type that contains class annotations and\n-     *    other information typically needed for building deserializers (note: always instance\n-     *    of {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription})\n+     *    other information typically needed for building deserializers\n      * \n      * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiators.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiators.java\n      * passed instance as is (returning null is an error)\n      * \n      * @param config Deserialization configuration in use\n-     * @param beanDesc Additional information about POJO type to be instantiated:\n-     *    description will always be of type\n-     *    {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription} (that is,\n-     *    safe to cast to this more specific type)\n+     * @param beanDesc Additional information about POJO type to be instantiated\n      * @param defaultInstantiator Instantiator that will be used if no changes are made;\n      *   passed to allow custom instances to use annotation-provided information\n      *   (note, however, that earlier {@link ValueInstantiators} may have changed it to\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n import java.util.*;\n \n \n+import com.fasterxml.jackson.databind.BeanDescription;\n import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.deser.CreatorProperty;\n public class CreatorCollector\n {\n     /// Type of bean being created\n-    final BasicBeanDescription _beanDesc;\n+    final BeanDescription _beanDesc;\n \n     final boolean _canFixAccess;\n \n     /**********************************************************\n      */\n     \n-    public CreatorCollector(BasicBeanDescription beanDesc, boolean canFixAccess)\n+    public CreatorCollector(BeanDescription beanDesc, boolean canFixAccess)\n     {\n         _beanDesc = beanDesc;\n         _canFixAccess = canFixAccess;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.databind.BeanDescription;\n import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.deser.CreatorProperty;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n-import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n /**\n     }\n \n     public static ValueInstantiator findValueInstantiator(DeserializationConfig config,\n-            BasicBeanDescription beanDesc)\n+            BeanDescription beanDesc)\n     {\n         if (beanDesc.getBeanClass() == JsonLocation.class) {\n             return new JsonLocationInstantiator();\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java\n import java.lang.reflect.Method;\n import java.util.*;\n \n-import com.fasterxml.jackson.databind.DeserializationConfig;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.KeyDeserializer;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n-import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n import com.fasterxml.jackson.databind.type.*;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.EnumResolver;\n         /* We don't need full deserialization information, just need to\n          * know creators.\n          */\n-    \tBasicBeanDescription beanDesc = config.introspect(type);\n+        BeanDescription beanDesc = config.introspect(type);\n         // Ok, so: can we find T(String) constructor?\n         Constructor<?> ctor = beanDesc.findSingleArgConstructor(String.class);\n         if (ctor != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n         return _properties;\n     }\n \n-    /**\n-     * Method for locating the getter method that is annotated with\n-     * {@link com.fasterxml.jackson.annotation.JsonValue} annotation,\n-     * if any. If multiple ones are found,\n-     * an error is reported by throwing {@link IllegalArgumentException}\n-     */\n-    @Override\n-    public AnnotatedMethod findJsonValueMethod()\n-    {\n+    @Override\n+    public AnnotatedMethod findJsonValueMethod() {\n         return _jsonValueMethod;\n     }\n \n         return _ignoredPropertyNames;\n     }\n     \n-    /**\n-     * Method for checking whether class being described has any\n-     * annotations recognized by registered annotation introspector.\n-     */\n     @Override\n     public boolean hasKnownClassAnnotations() {\n         return _classInfo.hasAnnotations();\n         return bindingsForBeanType().resolveType(jdkType);\n     }\n \n-    /**\n-     * Method that will locate the no-arg constructor for this class,\n-     * if it has one, and that constructor has not been marked as\n-     * ignorable.\n-     */\n-    @Override\n-    public AnnotatedConstructor findDefaultConstructor()\n-    {\n+    @Override\n+    public AnnotatedConstructor findDefaultConstructor() {\n         return _classInfo.getDefaultConstructor();\n     }\n \n-    /**\n-     * Method used to locate the method of introspected class that\n-     * implements {@link com.fasterxml.jackson.annotation.JsonAnySetter}. If no such method exists\n-     * null is returned. If more than one are found, an exception\n-     * is thrown.\n-     * Additional checks are also made to see that method signature\n-     * is acceptable: needs to take 2 arguments, first one String or\n-     * Object; second any can be any type.\n-     */\n     @Override\n     public AnnotatedMethod findAnySetter() throws IllegalArgumentException\n     {\n     }\n \n     @Override\n-    public Map<Object, AnnotatedMember> findInjectables()\n-    {\n+    public Map<Object, AnnotatedMember> findInjectables() {\n         return _injectables;\n     }\n-    \n-    public List<AnnotatedConstructor> getConstructors()\n-    {\n+\n+    @Override\n+    public List<AnnotatedConstructor> getConstructors() {\n         return _classInfo.getConstructors();\n     }\n-    \n-    /*\n-    /**********************************************************\n-    /* Simple accessors, extended\n-    /**********************************************************\n-     */\n-\n-    public AnnotatedMethod findMethod(String name, Class<?>[] paramTypes)\n-    {\n-        return _classInfo.findMethod(name, paramTypes);\n-    }\n-\n-    /**\n-     * Method called to create a \"default instance\" of the bean, currently\n-     * only needed for obtaining default field values which may be used for\n-     * suppressing serialization of fields that have \"not changed\".\n-     * \n-     * @param fixAccess If true, method is allowed to fix access to the\n-     *   default constructor (to be able to call non-public constructor);\n-     *   if false, has to use constructor as is.\n-     *\n-     * @return Instance of class represented by this descriptor, if\n-     *   suitable default constructor was found; null otherwise.\n-     */\n+\n+    @Override\n     public Object instantiateBean(boolean fixAccess)\n     {\n         AnnotatedConstructor ac = _classInfo.getDefaultConstructor();\n             throw new IllegalArgumentException(\"Failed to instantiate bean of type \"+_classInfo.getAnnotated().getName()+\": (\"+t.getClass().getName()+\") \"+t.getMessage(), t);\n         }\n     }\n+    \n+    /*\n+    /**********************************************************\n+    /* Simple accessors, extended\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public AnnotatedMethod findMethod(String name, Class<?>[] paramTypes) {\n+        return _classInfo.findMethod(name, paramTypes);\n+    }\n \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n \n+    @Override\n     public List<AnnotatedMethod> getFactoryMethods()\n     {\n         // must filter out anything that clearly is not a factory method\n         return result;\n     }\n \n-    /**\n-     * Method that can be called to locate a single-arg constructor that\n-     * takes specified exact type (will not accept supertype constructors)\n-     *\n-     * @param argTypes Type(s) of the argument that we are looking for\n-     */\n+    @Override\n     public Constructor<?> findSingleArgConstructor(Class<?>... argTypes)\n     {\n         for (AnnotatedConstructor ac : _classInfo.getConstructors()) {\n         return null;\n     }\n \n-    /**\n-     * Method that can be called to find if introspected class declares\n-     * a static \"valueOf\" factory method that returns an instance of\n-     * introspected type, given one of acceptable types.\n-     *\n-     * @param expArgTypes Types that the matching single argument factory\n-     *   method can take: will also accept super types of these types\n-     *   (ie. arg just has to be assignable from expArgType)\n-     */\n+    @Override\n     public Method findFactoryMethod(Class<?>... expArgTypes)\n     {\n         // So, of all single-arg static methods:\n      * feature (lowest priority, passed as argument)\n      * and per-class annotation (highest priority).\n      */\n+    @Override\n     public JsonInclude.Include findSerializationInclusion(JsonInclude.Include defValue)\n     {\n         if (_annotationIntrospector == null) {\n         return _anyGetterMethod;\n     }\n     \n-    /**\n-     * Method for locating all back-reference properties (setters, fields) bean has\n-     */\n+    @Override\n     public Map<String,AnnotatedMember> findBackReferenceProperties()\n     {\n         HashMap<String,AnnotatedMember> result = null;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n import com.fasterxml.jackson.databind.type.SimpleType;\n \n public class BasicClassIntrospector\n-    extends ClassIntrospector<BasicBeanDescription>\n+    extends ClassIntrospector\n {\n     /* We keep a small set of pre-constructed descriptions to use for\n      * common non-structured values, such as Numbers and Strings.\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java\n  * methods and annotations that define configuration of using\n  * those methods.\n  */\n-public abstract class ClassIntrospector<T extends BeanDescription>\n+public abstract class ClassIntrospector\n {\n     /*\n     /**********************************************************\n      * Factory method that constructs an introspector that has all\n      * information needed for serialization purposes.\n      */\n-    public abstract T forSerialization(SerializationConfig cfg, JavaType type,\n+    public abstract BeanDescription forSerialization(SerializationConfig cfg, JavaType type,\n             MixInResolver r);\n \n     /**\n      * Factory method that constructs an introspector that has all\n      * information needed for deserialization purposes.\n      */\n-    public abstract T forDeserialization(DeserializationConfig cfg, JavaType type,\n+    public abstract BeanDescription forDeserialization(DeserializationConfig cfg, JavaType type,\n             MixInResolver r);\n     \n     /**\n      * class (\"creator\"), as well as class annotations, but\n      * no information on member methods\n      */\n-    public abstract T forCreation(DeserializationConfig cfg, JavaType type,\n+    public abstract BeanDescription forCreation(DeserializationConfig cfg, JavaType type,\n             MixInResolver r);\n \n     /**\n      * information regarding annotations class itself (or its supertypes) has,\n      * but nothing on methods or constructors.\n      */\n-    public abstract T forClassAnnotations(MapperConfig<?> cfg, JavaType type,\n+    public abstract BeanDescription forClassAnnotations(MapperConfig<?> cfg, JavaType type,\n             MixInResolver r);\n \n     /**\n      * information regarding annotations class itself has (but NOT including\n      * its supertypes), but nothing on methods or constructors.\n      */\n-    public abstract T forDirectClassAnnotations(MapperConfig<?> cfg, JavaType type,\n+    public abstract BeanDescription forDirectClassAnnotations(MapperConfig<?> cfg, JavaType type,\n             MixInResolver r);\n }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n \n+import com.fasterxml.jackson.databind.BeanDescription;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n-import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n \n public class TypeNameIdResolver\n                 // 24-Feb-2011, tatu: As per [JACKSON-498], may need to dynamically look up name\n                 // can either throw an exception, or use default name...\n                 if (_config.isAnnotationProcessingEnabled()) {\n-                    BasicBeanDescription beanDesc = _config.introspectClassAnnotations(cls);\n+                    BeanDescription beanDesc = _config.introspectClassAnnotations(cls);\n                     name = _config.getAnnotationIntrospector().findTypeName(beanDesc.getClassInfo());\n                 }\n                 if (name == null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n         }\n         \n         // We should not need any member method info; at most class annotations for Map type\n-        BasicBeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n+        BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n         JsonSerializer<?> ser = null;\n         \n         // Only thing we have here are module-provided key serializers:\n     public TypeSerializer createTypeSerializer(SerializationConfig config,\n             JavaType baseType, BeanProperty property)\n     {\n-        BasicBeanDescription bean = config.introspectClassAnnotations(baseType.getRawClass());\n+        BeanDescription bean = config.introspectClassAnnotations(baseType.getRawClass());\n         AnnotatedClass ac = bean.getClassInfo();\n         AnnotationIntrospector ai = config.getAnnotationIntrospector();\n         TypeResolverBuilder<?> b = ai.findTypeResolver(config, ac, baseType);\n      * see if we know serializer to use for given type.\n      */\n     protected final JsonSerializer<?> findSerializerByLookup(JavaType type,\n-            SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property,\n+            SerializationConfig config, BeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping)\n     {\n         Class<?> raw = type.getRawClass();\n      * mostly concrete or abstract base classes.\n      */\n     protected final JsonSerializer<?> findSerializerByPrimaryType(JavaType type,\n-            SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property,\n+            SerializationConfig config, BeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping)\n         throws JsonMappingException\n     {\n      * function is usually something else. The reason for\n      */\n     protected final JsonSerializer<?> findSerializerByAddonType(SerializationConfig config, JavaType javaType,\n-            BasicBeanDescription beanDesc, BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping)\n         throws JsonMappingException\n     {\n      */\n     \n     protected JsonSerializer<?> buildContainerSerializer(SerializationConfig config, JavaType type,\n-            BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping)\n+            BeanDescription beanDesc, BeanProperty property, boolean staticTyping)\n         throws JsonMappingException\n     {\n         // Let's see what we can learn about element/content/value type, type serializer for it:\n      */\n     protected JsonSerializer<?> buildCollectionLikeSerializer(SerializationConfig config,\n             CollectionLikeType type,\n-            BasicBeanDescription beanDesc, BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) \n         throws JsonMappingException\n      */\n     protected JsonSerializer<?> buildCollectionSerializer(SerializationConfig config,\n             CollectionType type,\n-            BasicBeanDescription beanDesc, BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) \n         throws JsonMappingException\n     }\n \n     protected JsonSerializer<?> buildEnumSetSerializer(SerializationConfig config, JavaType type,\n-            BasicBeanDescription beanDesc, BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) \n     {\n      * ones that do not (but that have been indicated to behave like Maps).\n      */\n     protected JsonSerializer<?> buildMapLikeSerializer(SerializationConfig config, MapLikeType type,\n-            BasicBeanDescription beanDesc, BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping,\n             JsonSerializer<Object> keySerializer,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n      * {@link java.util.Map} types.\n      */\n     protected JsonSerializer<?> buildMapSerializer(SerializationConfig config, MapType type,\n-            BasicBeanDescription beanDesc, BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping,\n             JsonSerializer<Object> keySerializer,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n      * {@link java.util.EnumMap} types.\n      */\n     protected JsonSerializer<?> buildEnumMapSerializer(SerializationConfig config, JavaType type,\n-            BasicBeanDescription beanDesc, BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) \n         throws JsonMappingException\n      * <code>Object[]</code> (and subtypes, except for String).\n      */\n     protected JsonSerializer<?> buildArraySerializer(SerializationConfig config,\n-            ArrayType type, BasicBeanDescription beanDesc, BeanProperty property,\n+            ArrayType type, BeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n         throws JsonMappingException\n      */\n \n     protected JsonSerializer<?> buildIteratorSerializer(SerializationConfig config,\n-            JavaType type, BasicBeanDescription beanDesc, BeanProperty property,\n+            JavaType type, BeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping)\n         throws JsonMappingException\n     {\n     }\n     \n     protected JsonSerializer<?> buildIterableSerializer(SerializationConfig config,\n-            JavaType type, BasicBeanDescription beanDesc, BeanProperty property,\n+            JavaType type, BeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping)\n         throws JsonMappingException\n     {\n      * (declared types)  should be used for properties.\n      * (instead of dynamic runtime types).\n      */\n-    protected boolean usesStaticTyping(SerializationConfig config, BasicBeanDescription beanDesc,\n+    protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc,\n             TypeSerializer typeSer, BeanProperty property)\n     {\n         /* 16-Aug-2010, tatu: If there is a (value) type serializer, we can not force\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\n import java.util.*;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n \n /**\n  * Builder class used for aggregating deserialization information about\n     /**********************************************************\n      */\n \n-    final protected BasicBeanDescription _beanDesc;\n+    final protected BeanDescription _beanDesc;\n \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n     \n-    public BeanSerializerBuilder(BasicBeanDescription beanDesc) {\n+    public BeanSerializerBuilder(BeanDescription beanDesc) {\n         _beanDesc = beanDesc;\n     }\n \n         _filterId = src._filterId;\n     }\n     \n-    public BasicBeanDescription getBeanDescription() { return _beanDesc; }\n+    public BeanDescription getBeanDescription() { return _beanDesc; }\n     public List<BeanPropertyWriter> getProperties() { return _properties; }\n     public BeanPropertyWriter[] getFilteredProperties() { return _filteredProperties; }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         throws JsonMappingException\n     {\n         // Very first thing, let's check if there is explicit serializer annotation:\n-        BasicBeanDescription beanDesc = config.introspect(origType);\n+        BeanDescription beanDesc = config.introspect(origType);\n         JsonSerializer<?> ser = findSerializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n         if (ser != null) {\n             return (JsonSerializer<Object>) ser;\n      */\n     @SuppressWarnings(\"unchecked\")\n     public JsonSerializer<Object> findBeanSerializer(SerializationConfig config, JavaType type,\n-            BasicBeanDescription beanDesc, BeanProperty property)\n+            BeanDescription beanDesc, BeanProperty property)\n         throws JsonMappingException\n     {\n         // First things first: we know some types are not beans...\n      */\n     @SuppressWarnings(\"unchecked\")\n     protected JsonSerializer<Object> constructBeanSerializer(SerializationConfig config,\n-            BasicBeanDescription beanDesc, BeanProperty property)\n+            BeanDescription beanDesc, BeanProperty property)\n         throws JsonMappingException\n     {\n         // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n     }\n     \n     protected PropertyBuilder constructPropertyBuilder(SerializationConfig config,\n-                                                       BasicBeanDescription beanDesc)\n+                                                       BeanDescription beanDesc)\n     {\n         return new PropertyBuilder(config, beanDesc);\n     }\n \n-    protected BeanSerializerBuilder constructBeanSerializerBuilder(BasicBeanDescription beanDesc) {\n+    protected BeanSerializerBuilder constructBeanSerializerBuilder(BeanDescription beanDesc) {\n         return new BeanSerializerBuilder(beanDesc);\n     }\n \n      * Method called to find filter that is configured to be used with bean\n      * serializer being built, if any.\n      */\n-    protected Object findFilterId(SerializationConfig config, BasicBeanDescription beanDesc)\n+    protected Object findFilterId(SerializationConfig config, BeanDescription beanDesc)\n     {\n         return config.getAnnotationIntrospector().findFilterId(beanDesc.getClassInfo());\n     }\n      * Method used to collect all actual serializable properties.\n      * Can be overridden to implement custom detection schemes.\n      */\n-    protected List<BeanPropertyWriter> findBeanProperties(SerializationConfig config, BasicBeanDescription beanDesc)\n+    protected List<BeanPropertyWriter> findBeanProperties(SerializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         List<BeanPropertyDefinition> properties = beanDesc.findProperties();\n      * checks annotations class may have.\n      */\n     protected List<BeanPropertyWriter> filterBeanProperties(SerializationConfig config,\n-            BasicBeanDescription beanDesc, List<BeanPropertyWriter> props)\n+            BeanDescription beanDesc, List<BeanPropertyWriter> props)\n     {\n         AnnotationIntrospector intr = config.getAnnotationIntrospector();\n         AnnotatedClass ac = beanDesc.getClassInfo();\n      * by default this is based on {@link com.fasterxml.jackson.annotation.JsonIgnoreType} annotation but\n      * can be supplied by module-provided introspectors too.\n      */\n-    protected void removeIgnorableTypes(SerializationConfig config, BasicBeanDescription beanDesc,\n+    protected void removeIgnorableTypes(SerializationConfig config, BeanDescription beanDesc,\n             List<BeanPropertyDefinition> properties)\n     {\n         AnnotationIntrospector intr = config.getAnnotationIntrospector();\n             Class<?> type = accessor.getRawType();\n             Boolean result = ignores.get(type);\n             if (result == null) {\n-                BasicBeanDescription desc = config.introspectClassAnnotations(type);\n+                BeanDescription desc = config.introspectClassAnnotations(type);\n                 AnnotatedClass ac = desc.getClassInfo();\n                 result = intr.isIgnorableType(ac);\n                 // default to false, non-ignorable\n     /**\n      * Helper method that will remove all properties that do not have a mutator.\n      */\n-    protected void removeSetterlessGetters(SerializationConfig config, BasicBeanDescription beanDesc,\n+    protected void removeSetterlessGetters(SerializationConfig config, BeanDescription beanDesc,\n             List<BeanPropertyDefinition> properties)\n     {\n         Iterator<BeanPropertyDefinition> it = properties.iterator();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifier.java\n \n import java.util.List;\n \n+import com.fasterxml.jackson.databind.BeanDescription;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializationConfig;\n-import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n \n /**\n  * Abstract class that defines API for objects that can be registered (for {@link BeanSerializerFactory}\n      * modifiers.\n      */\n     public List<BeanPropertyWriter> changeProperties(SerializationConfig config,\n-            BasicBeanDescription beanDesc, List<BeanPropertyWriter> beanProperties) {\n+            BeanDescription beanDesc, List<BeanPropertyWriter> beanProperties) {\n         return beanProperties;\n     }\n \n      * modifiers.\n      */\n     public List<BeanPropertyWriter> orderProperties(SerializationConfig config,\n-            BasicBeanDescription beanDesc, List<BeanPropertyWriter> beanProperties) {\n+            BeanDescription beanDesc, List<BeanPropertyWriter> beanProperties) {\n         return beanProperties;\n     }\n \n      * some modifications.\n      */\n     public BeanSerializerBuilder updateBuilder(SerializationConfig config,\n-            BasicBeanDescription beanDesc, BeanSerializerBuilder builder) {\n+            BeanDescription beanDesc, BeanSerializerBuilder builder) {\n         return builder;\n     }\n     \n      * and this is why implementations must check for type before casting.\n      */\n     public JsonSerializer<?> modifySerializer(SerializationConfig config,\n-            BasicBeanDescription beanDesc, JsonSerializer<?> serializer) {\n+            BeanDescription beanDesc, JsonSerializer<?> serializer) {\n         return serializer;\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n public class PropertyBuilder\n {\n     final protected SerializationConfig _config;\n-    final protected BasicBeanDescription _beanDesc;\n+    final protected BeanDescription _beanDesc;\n     final protected JsonInclude.Include _outputProps;\n \n     final protected AnnotationIntrospector _annotationIntrospector;\n      */\n     protected Object _defaultBean;\n \n-    public PropertyBuilder(SerializationConfig config, BasicBeanDescription beanDesc)\n+    public PropertyBuilder(SerializationConfig config, BeanDescription beanDesc)\n     {\n         _config = config;\n         _beanDesc = beanDesc;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/Serializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/Serializers.java\n      * Method called by serialization framework first time a serializer is needed for\n      * specified type, which is not of a container type (for which other methods are\n      * called).\n-     *<p>\n-     * Note: in version 1.7, this method was called to find serializers for all\n-     * type, including container types.\n      * \n      * @param type Fully resolved type of instances to serialize\n      * @param config Serialization configuration in use\n-     * @param beanDesc Additional information about type; will always be of type\n-     *    {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription} (that is,\n-     *    safe to cast to this more specific type)\n+     * @param beanDesc Additional information about type\n      * @param property Property that contains values to serialize\n      *    \n      * @return Configured serializer to use for the type; or null if implementation\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n import com.fasterxml.jackson.databind.node.ArrayNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.util.EnumValues;\n     }\n \n     public static EnumSerializer construct(Class<Enum<?>> enumClass, SerializationConfig config,\n-            BasicBeanDescription beanDesc)\n+            BeanDescription beanDesc)\n     {\n         // [JACKSON-212]: If toString() is to be used instead, leave EnumValues null\n         AnnotationIntrospector intr = config.getAnnotationIntrospector();\n--- a/src/main/java/com/fasterxml/jackson/databind/util/RootNameLookup.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/RootNameLookup.java\n \n import com.fasterxml.jackson.core.io.SerializedString;\n \n-import com.fasterxml.jackson.databind.AnnotationIntrospector;\n-import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n-import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n import com.fasterxml.jackson.databind.type.ClassKey;\n \n /**\n                 return name;\n             }\n         }\n-        BasicBeanDescription beanDesc = (BasicBeanDescription) config.introspectClassAnnotations(rootType);\n+        BeanDescription beanDesc = config.introspectClassAnnotations(rootType);\n         AnnotationIntrospector intr = config.getAnnotationIntrospector();\n         AnnotatedClass ac = beanDesc.getClassInfo();\n         String nameStr = intr.findRootName(ac);\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n import com.fasterxml.jackson.databind.deser.BeanDeserializer;\n import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;\n import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;\n-import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n \n public class TestBeanDeserializer extends BaseMapTest\n         \n         @Override\n         public BeanDeserializerBuilder updateBuilder(DeserializationConfig config,\n-                BasicBeanDescription beanDesc, BeanDeserializerBuilder builder) {\n+                BeanDescription beanDesc, BeanDeserializerBuilder builder) {\n             builder.addIgnorable(_removedProperty);\n             return builder;\n         }\n         public ReplacingModifier(JsonDeserializer<?> s) { _deserializer = s; }\n         \n         @Override\n-        public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BasicBeanDescription beanDesc,\n-                JsonDeserializer<?> deserializer) {\n+        public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n             return _deserializer;\n         }\n     }\n     }\n     public class Issue476DeserializerModifier extends BeanDeserializerModifier {\n         @Override\n-        public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BasicBeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n+        public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n+                BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n             if (Issue476Type.class == beanDesc.getBeanClass()) {\n                 return new Issue476Deserializer((BeanDeserializer)deserializer);\n             }\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java\n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;\n import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n         public CustomJsonSerializerFactory() { super(null); }\n \n         @Override\n-        protected JsonSerializer<Object> constructBeanSerializer( SerializationConfig config, BasicBeanDescription beanDesc,\n+        protected JsonSerializer<Object> constructBeanSerializer( SerializationConfig config, BeanDescription beanDesc,\n                 BeanProperty property)\n             throws JsonMappingException\n         {                \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.databind.ser.BeanSerializer;\n /**\n  * Unit tests for verifying that it is possible to configure\n  * construction of {@link BeanSerializer} instances.\n- * \n- * @since 1.7\n  */\n public class TestBeanSerializer extends BaseMapTest\n {\n         public RemovingModifier(String remove) { _removedProperty = remove; }\n         \n         @Override\n-        public List<BeanPropertyWriter> changeProperties(SerializationConfig config, BasicBeanDescription beanDesc,\n+        public List<BeanPropertyWriter> changeProperties(SerializationConfig config, BeanDescription beanDesc,\n                 List<BeanPropertyWriter> beanProperties)\n         {\n             Iterator<BeanPropertyWriter> it = beanProperties.iterator();\n     static class ReorderingModifier extends BeanSerializerModifier\n     {\n         @Override\n-        public List<BeanPropertyWriter> orderProperties(SerializationConfig config, BasicBeanDescription beanDesc, List<BeanPropertyWriter> beanProperties)\n+        public List<BeanPropertyWriter> orderProperties(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyWriter> beanProperties)\n         {\n             TreeMap<String,BeanPropertyWriter> props = new TreeMap<String,BeanPropertyWriter>();\n             for (BeanPropertyWriter bpw : beanProperties) {\n         public ReplacingModifier(JsonSerializer<?> s) { _serializer = s; }\n         \n         @Override\n-        public JsonSerializer<?> modifySerializer(SerializationConfig config, BasicBeanDescription beanDesc,\n+        public JsonSerializer<?> modifySerializer(SerializationConfig config, BeanDescription beanDesc,\n                 JsonSerializer<?> serializer) {\n             return _serializer;\n         }\n         \n         @Override\n         public BeanSerializerBuilder updateBuilder(SerializationConfig config,\n-                BasicBeanDescription beanDesc, BeanSerializerBuilder builder) {\n+                BeanDescription beanDesc, BeanSerializerBuilder builder) {\n             return new BogusSerializerBuilder(builder, _serializer);\n         }\n     }\n     {\n         @Override\n         public List<BeanPropertyWriter> changeProperties(SerializationConfig config,\n-                BasicBeanDescription beanDesc, List<BeanPropertyWriter> beanProperties)\n+                BeanDescription beanDesc, List<BeanPropertyWriter> beanProperties)\n         {\n             JavaType strType = config.constructType(String.class);\n             try {", "timestamp": 1327301872, "metainfo": ""}