{"sha": "3745034e0883a9d0d22fd4eaf70aa4958fce525e", "log": "Fix #288", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n             staticTyping = false;\n         } else { // changes; assume static typing; plus, need to re-introspect if class differs\n             staticTyping = true;\n-            if (type.getRawClass() != origType.getRawClass()) {\n+            if (!type.hasRawClass(origType.getRawClass())) {\n                 beanDesc = config.introspect(type);\n             }\n         }\n             return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n         }\n         JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n+        // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n+        if (!delegateType.hasRawClass(type.getRawClass())) {\n+            beanDesc = config.introspect(delegateType);\n+        }\n         return new StdDelegatingSerializer(conv, delegateType,\n                 _createSerializer2(prov, delegateType, beanDesc, true));\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/convert/TestBeanConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestBeanConversions.java\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.TreeNode;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.util.StdConverter;\n \n public class TestBeanConversions\n     extends com.fasterxml.jackson.databind.BaseMapTest\n         public Leaf(int v) { value = v; }\n     }\n     \n+    // [Issue#288]\n+\n+    @JsonSerialize(converter = ConvertingBeanConverter.class)\n+    static class ConvertingBean { \n+       public int x, y; \n+       public ConvertingBean(int v1, int v2) {\n+          x = v1;\n+          y = v2;\n+       }\n+    }\n+\n+    public static class DummyBean {\n+       public final int a, b;\n+       public DummyBean(int v1, int v2) {\n+          a = v1 * 2;\n+          b = v2 * 2;\n+       }\n+    }\n+\n+    static class ConvertingBeanConverter extends StdConverter<ConvertingBean, DummyBean>\n+    {\n+       @Override\n+       public DummyBean convert(ConvertingBean cb) {\n+          return new DummyBean(cb.x, cb.y);\n+       }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Test methods\n         assertNotNull(m);\n         assertEquals(0, m.size());\n     }\n+\n+    public void testConversionIssue288() throws Exception\n+    {\n+        String json = MAPPER.writeValueAsString(new ConvertingBean(1, 2));\n+        // must be  {\"a\":2,\"b\":4}\n+        assertEquals(\"{\\\"a\\\":2,\\\"b\\\":4}\", json);\n+     }\n }", "timestamp": 1377145202, "metainfo": ""}