{"sha": "9109f37529ccc6595701c42a449ccc1a31415979", "log": "Fix test code usage of deprecated methods", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/TestGeneratorUsingMapper.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestGeneratorUsingMapper.java\n             }\n         };\n \n-        mapper.getJsonFactory().setCharacterEscapes(defaultCharacterEscapes);\n+        mapper.getFactory().setCharacterEscapes(defaultCharacterEscapes);\n         String jacksonJson = mapper.writeValueAsString(sampleText);\n         boolean hasLFs = jacksonJson.indexOf('\\n') > 0;\n         assertFalse(\"Should NOT contain linefeeds, should have been escaped\", hasLFs);\n--- a/src/test/java/com/fasterxml/jackson/databind/TestObjectMapper.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestObjectMapper.java\n     public void testJsonFactoryLinkage()\n     {\n         // first, implicit factory, giving implicit linkage\n-        assertSame(MAPPER, MAPPER.getJsonFactory().getCodec());\n+        assertSame(MAPPER, MAPPER.getFactory().getCodec());\n \n         // and then explicit factory, which should also be implicitly linked\n         JsonFactory f = new JsonFactory();\n         ObjectMapper m = new ObjectMapper(f);\n-        assertSame(f, m.getJsonFactory());\n+        assertSame(f, m.getFactory());\n         assertSame(m, f.getCodec());\n     }\n     \n \n         // // Also, underlying JsonFactory instances should be distinct\n         \n-        assertNotSame(m.getJsonFactory(), m2.getJsonFactory());\n+        assertNotSame(m.getFactory(), m2.getFactory());\n \n         // ... anything else? (probably should do more tests, add as needed)\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/TestReadValues.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestReadValues.java\n     public void testRootBeansWithParser() throws Exception\n     {\n         final String JSON = \"{\\\"a\\\":3}{\\\"a\\\":27}  \";\n-        JsonParser jp = MAPPER.getJsonFactory().createJsonParser(JSON);\n+        JsonParser jp = MAPPER.getFactory().createJsonParser(JSON);\n         \n         Iterator<Bean> it = jp.readValuesAs(Bean.class);\n \n     public void testRootArraysWithParser() throws Exception\n     {\n         final String JSON = \"[1][3]\";\n-        JsonParser jp = MAPPER.getJsonFactory().createJsonParser(JSON);\n+        JsonParser jp = MAPPER.getFactory().createJsonParser(JSON);\n \n         // NOTE: We must point JsonParser to the first element; if we tried to\n         // use \"managed\" accessor, it would try to advance past START_ARRAY.\n     public void testNonRootBeans() throws Exception\n     {\n         final String JSON = \"{\\\"leaf\\\":[{\\\"a\\\":3},{\\\"a\\\":27}]}\";\n-        JsonParser jp = MAPPER.getJsonFactory().createJsonParser(JSON);\n+        JsonParser jp = MAPPER.getFactory().createJsonParser(JSON);\n         assertToken(JsonToken.START_OBJECT, jp.nextToken());\n         assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n     public void testNonRootMapsWithParser() throws Exception\n     {\n         final String JSON = \"[{\\\"a\\\":3},{\\\"a\\\":27}]\";\n-        JsonParser jp = MAPPER.getJsonFactory().createJsonParser(JSON);\n+        JsonParser jp = MAPPER.getFactory().createJsonParser(JSON);\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n \n         // can either advance to first START_OBJECT, or clear current token;\n     public void testNonRootArraysUsingParser() throws Exception\n     {\n         final String JSON = \"[[1],[3]]\";\n-        JsonParser jp = MAPPER.getJsonFactory().createJsonParser(JSON);\n+        JsonParser jp = MAPPER.getFactory().createJsonParser(JSON);\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         \n         // Important: as of 2.1, START_ARRAY can only be skipped if the\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n         // First \"good\" case with Strings\n         String JSON = \"\\\"OK\\\" \\\"RULES\\\"  null\";\n         // multiple main-level mappings, need explicit parser:\n-        JsonParser jp = MAPPER.getJsonFactory().createJsonParser(JSON);\n+        JsonParser jp = MAPPER.getFactory().createJsonParser(JSON);\n \n         assertEquals(TestEnum.OK, MAPPER.readValue(jp, TestEnum.class));\n         assertEquals(TestEnum.RULES, MAPPER.readValue(jp, TestEnum.class));\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n             sb.append(\" \");\n             sb.append(i);\n         }\n-        JsonParser jp = MAPPER.getJsonFactory().createJsonParser(sb.toString());\n+        JsonParser jp = MAPPER.getFactory().createJsonParser(sb.toString());\n         for (int i = 0; i < NR_OF_INTS; ++i) {\n             Integer result = MAPPER.readValue(jp, Integer.class);\n             assertEquals(Integer.valueOf(i), result);\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestArraySerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestArraySerialization.java\n         }\n         String str = sb.toString();\n         byte[] data = MAPPER.writeValueAsBytes(new String[] { \"abc\", str, null, str });\n-        JsonParser jp = MAPPER.getJsonFactory().createJsonParser(data);\n+        JsonParser jp = MAPPER.getFactory().createJsonParser(data);\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n         assertEquals(\"abc\", jp.getText());\n         // Let's try couple of times, to ensure that state is handled\n         // correctly by ObjectMapper (wrt buffer recycling used\n         // with 'writeAsBytes()')\n-        JsonFactory f = MAPPER.getJsonFactory();\n+        JsonFactory f = MAPPER.getFactory();\n         for (int round = 0; round < 3; ++round) {\n             byte[] data = MAPPER.writeValueAsBytes(ints);\n             JsonParser jp = f.createJsonParser(data);\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java\n \n         // [Issue#12]\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jgen = MAPPER.getJsonFactory().createGenerator(sw);\n+        JsonGenerator jgen = MAPPER.getFactory().createGenerator(sw);\n         indentWriter.writeValue(jgen, input);\n         jgen.close();\n         assertEquals(INDENTED, sw.toString());\n         sw = new StringWriter();\n         ObjectMapper m2 = new ObjectMapper();\n         m2.enable(SerializationFeature.INDENT_OUTPUT);\n-        jgen = m2.getJsonFactory().createGenerator(sw);\n+        jgen = m2.getFactory().createGenerator(sw);\n         m2.writeValue(jgen, input);\n         jgen.close();\n         assertEquals(INDENTED, sw.toString());\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestFeatures.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestFeatures.java\n         assertTrue(mapper.getSerializationConfig().isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE));\n         // default is to flush after writeValue()\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jgen = mapper.getJsonFactory().createJsonGenerator(sw);\n+        JsonGenerator jgen = mapper.getFactory().createJsonGenerator(sw);\n         mapper.writeValue(jgen, Integer.valueOf(13));\n         assertEquals(\"13\", sw.toString());\n         jgen.close();\n \n         // ditto with ObjectWriter\n         sw = new StringWriter();\n-        jgen = mapper.getJsonFactory().createJsonGenerator(sw);\n+        jgen = mapper.getFactory().createJsonGenerator(sw);\n         ObjectWriter ow = mapper.writer();\n         ow.writeValue(jgen, Integer.valueOf(99));\n         assertEquals(\"99\", sw.toString());\n         ObjectMapper mapper = new ObjectMapper();\n         mapper.configure(SerializationFeature.FLUSH_AFTER_WRITE_VALUE, false);\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jgen = mapper.getJsonFactory().createJsonGenerator(sw);\n+        JsonGenerator jgen = mapper.getFactory().createJsonGenerator(sw);\n \n         mapper.writeValue(jgen, Integer.valueOf(13));\n         // no flushing now:\n         jgen.close();\n         // Also, same should happen with ObjectWriter\n         sw = new StringWriter();\n-        jgen = mapper.getJsonFactory().createJsonGenerator(sw);\n+        jgen = mapper.getFactory().createJsonGenerator(sw);\n         ObjectWriter ow = mapper.writer();\n         ow.writeValue(jgen, Integer.valueOf(99));\n         assertEquals(\"\", sw.toString());\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestTreeSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestTreeSerialization.java\n         ObjectNode n2 = n.putObject(\"ob\");\n         n2.putArray(\"arr\");\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = mapper.getJsonFactory().createJsonGenerator(sw);\n+        JsonGenerator jg = mapper.getFactory().createJsonGenerator(sw);\n         mapper.writeTree(jg, n);\n \n         Map<String,Object> result = (Map<String,Object>) mapper.readValue(sw.toString(), Map.class);\n         ObjectNode n = mapper.getNodeFactory().objectNode();\n         n.set(\"pojo\", mapper.getNodeFactory().POJONode(\"abc\"));\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = mapper.getJsonFactory().createJsonGenerator(sw);\n+        JsonGenerator jg = mapper.getFactory().createJsonGenerator(sw);\n         mapper.writeTree(jg, n);\n         Map<String,Object> result = (Map<String,Object>) mapper.readValue(sw.toString(), Map.class);\n         assertEquals(1, result.size());\n         ObjectNode n = mapper.getNodeFactory().objectNode();\n         n.set(\"pojo\", mapper.getNodeFactory().POJONode(new int[] { 1, 2, 3 }));\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = mapper.getJsonFactory().createJsonGenerator(sw);\n+        JsonGenerator jg = mapper.getFactory().createJsonGenerator(sw);\n         mapper.writeTree(jg, n);\n \n         Map<String,Object> result = (Map<String,Object>) mapper.readValue(sw.toString(), Map.class);\n         ObjectNode n = mapper.getNodeFactory().objectNode();\n         n.set(\"pojo\", mapper.getNodeFactory().POJONode(new Bean()));\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = mapper.getJsonFactory().createJsonGenerator(sw);\n+        JsonGenerator jg = mapper.getFactory().createJsonGenerator(sw);\n         mapper.writeTree(jg, n);\n \n         Map<String,Object> result = (Map<String,Object>) mapper.readValue(sw.toString(), Map.class);\n--- a/src/test/java/com/fasterxml/jackson/failing/TestCollectionSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestCollectionSerialization.java\n \n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.BaseMapTest;\n-import com.fasterxml.jackson.databind.MapperFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n public class TestCollectionSerialization extends BaseMapTest", "timestamp": 1345843159, "metainfo": ""}