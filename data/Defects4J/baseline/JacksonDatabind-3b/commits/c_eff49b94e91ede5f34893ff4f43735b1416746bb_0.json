{"sha": "eff49b94e91ede5f34893ff4f43735b1416746bb", "log": "warning cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n  * Simple {@link BeanPropertyFilter} implementation that only uses property name\n  * to determine whether to serialize property as is, or to filter it out.\n  */\n-public abstract class SimpleBeanPropertyFilter implements BeanPropertyFilter\n+public abstract class SimpleBeanPropertyFilter\n+    implements BeanPropertyFilter // sub-classes must also implement java.io.Serializable\n {\n     /*\n     /**********************************************************\n      */\n     public static class FilterExceptFilter\n         extends SimpleBeanPropertyFilter\n+        implements java.io.Serializable\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         /**\n          * Set of property names to serialize.\n          */\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n      * Default implementation specifies no format. This behavior is usually\n      * overriden by custom serializers.\n      */\n-//  @Override\n+    @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         throws JsonMappingException\n     {", "timestamp": 1349480081, "metainfo": ""}