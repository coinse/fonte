{"sha": "db413e18d7510edde71461f336bccf724e0d16f7", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.cfg.MapperConfigBase;\n import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;\n-import com.fasterxml.jackson.databind.deser.DeserializerFactory;\n-import com.fasterxml.jackson.databind.deser.DeserializerCache;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n /**\n  * Object that contains baseline configuration for deserialization\n  * process. An instance is owned by {@link ObjectMapper}, which\n- * passes an immutable instance for serialization process to\n- * {@link DeserializerCache} and {@link DeserializerFactory}\n- * (either directly, or through {@link ObjectReader}.\n+ * passes an immutable instance to be used for deserialization process.\n  *<p>\n  * Note that instances are considered immutable and as such no copies\n  * should need to be created (there are some implementation details\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n         return _serializerProvider;\n     }\n     \n-    /**\n-     * Method for setting specific {@link DeserializerCache} to use\n-     * for handling caching of {@link JsonDeserializer} instances.\n-     */\n-    public ObjectMapper setDeserializerProvider(DeserializerCache p) {\n-        _deserializerCache = p;\n-        return this;\n-    }\n-\n-    public DeserializerCache getDeserializerProvider() {\n-        return _deserializerCache;\n-    }\n-    \n     /*\n     /**********************************************************\n     /* Configuration: mix-in annotations\n--- a/src/test/java/com/fasterxml/jackson/databind/TestObjectMapper.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestObjectMapper.java\n \n import java.io.*;\n \n-\n import com.fasterxml.jackson.core.JsonFactory;\n import com.fasterxml.jackson.core.JsonNode;\n+\n import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializationConfig;\n \n public class TestObjectMapper extends BaseMapTest\n {\n+    static class Bean {\n+        int value = 3;\n+        \n+        public void setX(int v) { value = v; }\n+    }\n+    \n     public void testProps()\n     {\n         ObjectMapper m = new ObjectMapper();\n         assertSame(f, m.getJsonFactory());\n         assertSame(m, f.getCodec());\n     }\n+    \n+    /**\n+     * Test for verifying working of [JACKSON-191]\n+     */\n+    public void testProviderConfig() throws Exception   \n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        assertEquals(0, mapper._deserializerCache.cachedDeserializersCount());\n+        // and then should get one constructed for:\n+        Bean bean = mapper.readValue(\"{ \\\"c\\\" : 3 }\", Bean.class);\n+        assertNotNull(bean);\n+        assertEquals(1, mapper._deserializerCache.cachedDeserializersCount());\n+        mapper._deserializerCache.flushCachedDeserializers();\n+        assertEquals(0, mapper._deserializerCache.cachedDeserializersCount());\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestConfig.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestConfig.java\n         bean = m.readValue(\"{ \\\"x\\\" : 0 }\", AnnoBean.class);\n         assertEquals(0, bean.value);\n     }\n-\n-    /**\n-     * Test for verifying working of [JACKSON-191]\n-     */\n-    public void testProviderConfig() throws Exception   \n-    {\n-        ObjectMapper mapper = new ObjectMapper();\n-        assertEquals(0, mapper.getDeserializerProvider().cachedDeserializersCount());\n-        // and then should get one constructed for:\n-        AnnoBean bean = mapper.readValue(\"{ \\\"y\\\" : 3 }\", AnnoBean.class);\n-        assertNotNull(bean);\n-        assertEquals(1, mapper.getDeserializerProvider().cachedDeserializersCount());\n-        mapper.getDeserializerProvider().flushCachedDeserializers();\n-        assertEquals(0, mapper.getDeserializerProvider().cachedDeserializersCount());\n-    }\n }", "timestamp": 1327433591, "metainfo": ""}