{"sha": "05c82f22c49e3da03b0f8c5271f1ce6850111adc", "log": "Starting work on supporting custom (property-based) object ids.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n                     idGen = ctxt.objectIdGeneratorInstance(accessor, implClass);\n                 }\n                 JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType);\n-                oir = ObjectIdReader.construct(idType, objectIdInfo.getProperty(), idGen, deser);\n+                oir = ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser);\n             }\n         }\n         // either way, need to resolve serializer:\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n         } else { // other types need to be simpler\n             gen = ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n         }\n-        return ObjectIdReader.construct(idType, oidInfo.getProperty(), gen, deser);\n+        return ObjectIdReader.construct(idType, oidInfo.getPropertyName(), gen, deser);\n     }\n     \n     @SuppressWarnings(\"unchecked\")\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     @Override\n     public ObjectIdInfo findObjectIdInfo(Annotated ann) {\n         JsonIdentityInfo info = ann.getAnnotation(JsonIdentityInfo.class);\n-        if (info == null) {\n+        if (info == null || info.generator() == ObjectIdGenerators.None.class) {\n             return null;\n         }\n-        return new ObjectIdInfo(info.property(), info.generator());\n+        return new ObjectIdInfo(info.property(), info.scope(), info.generator());\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java\n  */\n public class ObjectIdInfo\n {\n-    protected final String _property;\n+    protected final String _propertyName;\n     protected final Class<? extends ObjectIdGenerator<?>> _generator;\n+    protected final Class<?> _scope;\n     \n-    public ObjectIdInfo(String prop, Class<? extends ObjectIdGenerator<?>> gen)\n+    public ObjectIdInfo(String prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen)\n     {\n-        _property = prop;\n+        _propertyName = prop;\n         _generator = gen;\n+        _scope = scope;\n     }\n \n-    public String getProperty() { return _property; }\n+    public String getPropertyName() { return _propertyName; }\n+    public Class<?> getScope() { return _scope; }\n     public Class<? extends ObjectIdGenerator<?>> getGenerator() { return _generator; }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter;\n import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n+import com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator;\n import com.fasterxml.jackson.databind.ser.std.MapSerializer;\n import com.fasterxml.jackson.databind.type.*;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n                 props = mod.orderProperties(config, beanDesc, props);\n             }\n         }\n+\n+        /* And if Object Id is needed, some preparation for that as well: better\n+         * do before view handling, mostly for the custom id case which needs\n+         * access to a property\n+         */\n+        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n         \n         builder.setProperties(props);\n         builder.setFilterId(findFilterId(config, beanDesc));\n         }\n         // Next: need to gather view information, if any:\n         processViews(config, builder);\n-\n-        // And if Object Id is needed, some preparation for that as well:\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc));\n         \n         // Finally: let interested parties mess with the result bit more...\n         if (_factoryConfig.hasSerializerModifiers()) {\n     }\n \n     protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov,\n-            BeanDescription beanDesc)\n+            BeanDescription beanDesc, List<BeanPropertyWriter> props)\n         throws JsonMappingException\n     {\n         ObjectIdInfo oidInfo = beanDesc.getObjectIdInfo();\n         }\n         ObjectIdGenerator<?> gen;\n         Class<?> implClass = oidInfo.getGenerator();\n-        JavaType type = prov.constructType(implClass);\n-        // Could require type to be passed explicitly, but we should be able to find it too:\n-        JavaType idType = prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+        JavaType idType;\n \n         // Just one special case: Property-based generator is trickier\n         if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work\n-            // !!! TODO\n-            gen = null;\n-            if (true) throw new IllegalStateException(\"Not yet implemented!\");\n+            String propName = oidInfo.getPropertyName();\n+            BeanPropertyWriter idProp = null;\n+            \n+            for (BeanPropertyWriter prop : props) {\n+                if (propName.equals(prop.getName())) {\n+                    idProp = prop;\n+                    break;\n+                }\n+            }\n+            if (idProp == null) {\n+                throw new IllegalArgumentException(\"Invalid Object Id definition for \"+beanDesc.getBeanClass().getName()\n+                        +\": can not find property with name '\"+propName+\"'\");\n+            }\n+            idType = idProp.getType();\n+            gen = new PropertyBasedObjectIdGenerator(oidInfo, idProp);\n         } else { // other types need to be simpler\n+            JavaType type = prov.constructType(implClass);\n+            // Could require type to be passed explicitly, but we should be able to find it too:\n+            idType = prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             gen = prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n         }\n-        return ObjectIdWriter.construct(idType, oidInfo.getProperty(), gen);\n+        return ObjectIdWriter.construct(idType, oidInfo.getPropertyName(), gen);\n     }\n \n     /**\n     }\n     \n     protected PropertyBuilder constructPropertyBuilder(SerializationConfig config,\n-                                                       BeanDescription beanDesc)\n+            BeanDescription beanDesc)\n     {\n         return new PropertyBuilder(config, beanDesc);\n     }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertyBasedObjectIdGenerator.java\n+package com.fasterxml.jackson.databind.ser.impl;\n+\n+import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n+\n+import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n+import com.fasterxml.jackson.databind.ser.*;\n+\n+public class PropertyBasedObjectIdGenerator extends ObjectIdGenerators.PropertyGenerator\n+{\n+    protected final BeanPropertyWriter _property;\n+    \n+    public PropertyBasedObjectIdGenerator(ObjectIdInfo oid, BeanPropertyWriter prop)\n+    {\n+        this(oid.getScope(), prop);\n+    }\n+\n+    protected PropertyBasedObjectIdGenerator(Class<?> scope, BeanPropertyWriter prop)\n+    {\n+        super(scope);\n+        _property = prop;\n+    }\n+    \n+    @Override\n+    public Object generateId(Object forPojo) {\n+        try {\n+            return _property.get(forPojo);\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Problem accessing property '\"\n+                    +_property.getName()+\"': \"+e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public ObjectIdGenerator<Object> forScope(Class<?> scope) {\n+        return (scope == _scope) ? this : new PropertyBasedObjectIdGenerator(scope, _property);\n+    }\n+\n+    @Override\n+    public ObjectIdGenerator<Object> newForSerialization() {\n+        // No state, can return this\n+        return this;\n+    }\n+\n+    @Override\n+    public com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey key(Object key) {\n+        // should we use general type for all; or type of property itself?\n+        return new IdKey(getClass(), _scope, key);\n+    }\n+\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n                 } else { // other types need to be simpler\n                     gen = provider.objectIdGeneratorInstance(accessor, implClass);\n                 }\n-                oiw = ObjectIdWriter.construct(idType, objectIdInfo.getProperty(), gen);\n+                oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n \n             }\n         }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n+package com.fasterxml.jackson.databind.struct;\n+\n+import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Unit test to verify handling of Object Id deserialization\n+ */\n+public class TestObjectIdDeserialization extends BaseMapTest\n+{\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"id\")\n+    static class Identifiable\n+    {\n+        public int value;\n+\n+        public Identifiable next;\n+        \n+        public Identifiable() { this(0); }\n+        public Identifiable(int v) {\n+            value = v;\n+        }\n+    }\n+\n+    static class IdWrapper\n+    {\n+        @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"@id\")\n+        public ValueNode node;\n+\n+        public IdWrapper() { }\n+        public IdWrapper(int v) {\n+            node = new ValueNode(v);\n+        }\n+    }\n+\n+    static class ValueNode {\n+        public int value;\n+        public IdWrapper next;\n+        \n+        public ValueNode() { this(0); }\n+        public ValueNode(int v) { value = v; }\n+    }\n+\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.UUIDGenerator.class, property=\"#\")\n+    static class UUIDNode\n+    {\n+        public int value;\n+        public UUIDNode parent;\n+        public UUIDNode first;\n+        public UUIDNode second;\n+\n+        public UUIDNode() { this(0); }\n+        public UUIDNode(int v) { value = v; }\n+    }\n+    \n+    /*\n+    /*****************************************************\n+    /* Unit tests; simple class annotation\n+    /*****************************************************\n+     */\n+\n+    private final static String EXP_SIMPLE_INT_CLASS = \"{\\\"id\\\":1,\\\"value\\\":13,\\\"next\\\":1}\";\n+    \n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    public void testSimpleDeserializationClass() throws Exception\n+    {\n+        // then bring back...\n+        Identifiable result = mapper.readValue(EXP_SIMPLE_INT_CLASS, Identifiable.class);\n+        assertEquals(13, result.value);\n+        assertSame(result, result.next);\n+    }\n+\n+    public void testSimpleUUIDForClassRoundTrip() throws Exception\n+    {\n+        UUIDNode root = new UUIDNode(1);\n+        UUIDNode child1 = new UUIDNode(2);\n+        UUIDNode child2 = new UUIDNode(3);\n+        root.first = child1;\n+        root.second = child2;\n+        child1.parent = root;\n+        child2.parent = root;\n+        child1.first = child2;\n+\n+        String json = mapper.writeValueAsString(root);\n+\n+        // and should come back the same too...\n+        UUIDNode result = mapper.readValue(json, UUIDNode.class);\n+        assertEquals(1, result.value);\n+        UUIDNode result2 = result.first;\n+        UUIDNode result3 = result.second;\n+        assertNotNull(result2);\n+        assertNotNull(result3);\n+        assertEquals(2, result2.value);\n+        assertEquals(3, result3.value);\n+\n+        assertSame(result, result2.parent);\n+        assertSame(result, result3.parent);\n+        assertSame(result3, result2.first);\n+    }\n+    \n+    /*\n+    /*****************************************************\n+    /* Unit tests; simple property annotation\n+    /*****************************************************\n+     */\n+\n+    // Bit more complex, due to extra wrapping etc:\n+    private final static String EXP_SIMPLE_INT_PROP = \"{\\\"node\\\":{\\\"@id\\\":1,\\\"value\\\":7,\\\"next\\\":{\\\"node\\\":1}}}\";\n+        \n+    public void testSimpleDeserializationProperty() throws Exception\n+    {\n+        // then bring back...\n+        IdWrapper result = mapper.readValue(EXP_SIMPLE_INT_PROP, IdWrapper.class);\n+        assertEquals(7, result.node.value);\n+        assertSame(result.node, result.node.next.node);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdSerialization.java\n+package com.fasterxml.jackson.databind.struct;\n+\n+import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Unit test to verify handling of Object Id deserialization\n+ */\n+public class TestObjectIdSerialization extends BaseMapTest\n+{\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"id\")\n+    static class Identifiable\n+    {\n+        public int value;\n+\n+        public Identifiable next;\n+        \n+        public Identifiable() { this(0); }\n+        public Identifiable(int v) {\n+            value = v;\n+        }\n+    }\n+\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.PropertyGenerator.class, property=\"customId\")\n+    static class IdentifiableWithProp\n+    {\n+        // Property that contains Object Id to use\n+        public int customId;\n+        \n+        public int value;\n+\n+        public IdentifiableWithProp next;\n+        \n+        public IdentifiableWithProp() { this(0, 0); }\n+        public IdentifiableWithProp(int id, int value) {\n+            this.customId = id;\n+            this.value = value;\n+        }\n+    }\n+    \n+    static class IdWrapper\n+    {\n+        @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"@id\")\n+        public ValueNode node;\n+\n+        public IdWrapper() { }\n+        public IdWrapper(int v) {\n+            node = new ValueNode(v);\n+        }\n+    }\n+\n+    static class ValueNode {\n+        public int value;\n+        public IdWrapper next;\n+        \n+        public ValueNode() { this(0); }\n+        public ValueNode(int v) { value = v; }\n+    }\n+\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.UUIDGenerator.class, property=\"#\")\n+    static class UUIDNode\n+    {\n+        public int value;\n+        public UUIDNode parent;\n+        public UUIDNode first;\n+        public UUIDNode second;\n+\n+        public UUIDNode() { this(0); }\n+        public UUIDNode(int v) { value = v; }\n+    }\n+    \n+    /*\n+    /*****************************************************\n+    /* Unit tests\n+    /*****************************************************\n+     */\n+\n+    private final static String EXP_SIMPLE_INT_CLASS = \"{\\\"id\\\":1,\\\"value\\\":13,\\\"next\\\":1}\";\n+    \n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    public void testSimpleSerializationClass() throws Exception\n+    {\n+        Identifiable src = new Identifiable(13);\n+        src.next = src;\n+        \n+        // First, serialize:\n+        String json = mapper.writeValueAsString(src);\n+        assertEquals(EXP_SIMPLE_INT_CLASS, json);\n+\n+        // and ensure that state is cleared in-between as well:\n+        json = mapper.writeValueAsString(src);\n+        assertEquals(EXP_SIMPLE_INT_CLASS, json);\n+    }\n+\n+    private final static String EXP_SIMPLE_PROP = \"{\\\"customId\\\":123,\\\"value\\\":-19,\\\"next\\\":123}\";\n+\n+    public void testSimpleFromPropertyOnClass() throws Exception\n+    {\n+        IdentifiableWithProp src = new IdentifiableWithProp(123, -19);\n+        src.next = src;\n+        \n+        // First, serialize:\n+        String json = mapper.writeValueAsString(src);\n+        assertEquals(EXP_SIMPLE_PROP, json);\n+\n+        // and ensure that state is cleared in-between as well:\n+        json = mapper.writeValueAsString(src);\n+        assertEquals(EXP_SIMPLE_PROP, json);\n+    }\n+    \n+    // Bit more complex, due to extra wrapping etc:\n+    private final static String EXP_SIMPLE_INT_PROP = \"{\\\"node\\\":{\\\"@id\\\":1,\\\"value\\\":7,\\\"next\\\":{\\\"node\\\":1}}}\";\n+\n+    public void testSimpleSerializationProperty() throws Exception\n+    {\n+        IdWrapper src = new IdWrapper(7);\n+        src.node.next = src;\n+        \n+        // First, serialize:\n+        String json = mapper.writeValueAsString(src);\n+        assertEquals(EXP_SIMPLE_INT_PROP, json);\n+        // and second time too, for a good measure\n+        json = mapper.writeValueAsString(src);\n+        assertEquals(EXP_SIMPLE_INT_PROP, json);\n+    }\n+}", "timestamp": 1328853490, "metainfo": ""}