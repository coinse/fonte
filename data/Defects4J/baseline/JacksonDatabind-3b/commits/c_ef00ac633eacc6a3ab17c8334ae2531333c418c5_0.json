{"sha": "ef00ac633eacc6a3ab17c8334ae2531333c418c5", "log": "Bit of cleanup, verifying what causes #338", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n         throws IllegalArgumentException\n     {\n         try {\n-            return getDateFormat().parse(dateStr);\n+            DateFormat df = getDateFormat();\n+            return df.parse(dateStr);\n         } catch (ParseException e) {\n             throw new IllegalArgumentException(\"Failed to parse Date value '\"+dateStr+\"': \"+e.getMessage());\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java\n         if (!_classNames.contains(clsName)) {\n             return null;\n         }\n-        // Start with most common types; int, boolean, long, double\n+        // Start with the most common type\n         if (rawType == Calendar.class) {\n             return CalendarDeserializer.instance;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/util/ISO8601DateFormat.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ISO8601DateFormat.java\n     {\n         // index must be set to other than 0, I would swear this requirement is not there in\n         // some version of jdk 6.\n+        /* 03-Nov-2013, tatu: I can't see this having any direct effect\n+         *   here... I am guessing it marks things as consumed but why?\n+         */\n         pos.setIndex(source.length());\n         return ISO8601Utils.parse(source);\n     }\n \n     @Override\n     public Object clone() {\n-        return this;    // jackson calls clone everytime. We are threadsafe so just returns the instance\n+        /* Jackson calls clone for every call. Since this instance is\n+         * immutable (and hence thread-safe)\n+         * we can just return this instance\n+         */\n+        return this;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return getClass().getName();\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java\n      * @return the parsed date\n      * @throws IllegalArgumentException if the date is not in the appropriate format\n      */\n-    public static Date parse(String date) {\n+    public static Date parse(String date)\n+    {\n+        Exception fail = null;\n         try {\n             int offset = 0;\n \n \n             return calendar.getTime();\n         } catch (IndexOutOfBoundsException e) {\n-            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n+            fail = e;\n         } catch (NumberFormatException e) {\n-            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n+            fail = e;\n         } catch (IllegalArgumentException e) {\n-            throw new IllegalArgumentException(\"Failed to parse date \" + date, e);\n-        }\n+            fail = e;\n+        }\n+        String input = (date == null) ? null : ('\"'+date+\"'\");\n+        throw new IllegalArgumentException(\"Failed to parse date [\"+input\n+                +\"]: \"+fail.getMessage(), fail);\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java\n \n     /*\n     /**********************************************************\n+    /* Std overrides\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public String toString() {\n+        String str = \"DateFormat \"+getClass().getName();\n+        TimeZone tz = _timezone;\n+        if (tz != null) {\n+            str += \" (timezone: \"+tz+\")\";\n+        }\n+        return str;\n+    }\n+    \n+    /*\n+    /**********************************************************\n     /* Helper methods\n     /**********************************************************\n      */\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestDateDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestDateDeserialization.java\n import java.text.SimpleDateFormat;\n import java.util.*;\n \n-\n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.util.ISO8601Utils;\n \n public class TestDateDeserialization\n     extends BaseMapTest\n     // [Issue#338]\n     public void testDateUtilISO8601NoMilliseconds() throws Exception\n     {\n-        String inputStr = \"2013-10-31T17:27:00\";\n-        Date inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n-        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n+        final String INPUT_STR = \"2013-10-31T17:27:00\";\n+        Date inputDate;\n+        Calendar c;\n+        \n+        inputDate = MAPPER.readValue(quote(INPUT_STR), java.util.Date.class);\n+        c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n         c.setTime(inputDate);\n         assertEquals(2013, c.get(Calendar.YEAR));\n         assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));\n         assertEquals(27, c.get(Calendar.MINUTE));\n         assertEquals(0, c.get(Calendar.SECOND));\n         assertEquals(0, c.get(Calendar.MILLISECOND));\n+\n+        // 03-Nov-2013, tatu: This wouldn't work, and is the nominal reason\n+        //    for #338 I thinl\n+        /*\n+        inputDate =  ISO8601Utils.parse(INPUT_STR);\n+        c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n+        c.setTime(inputDate);\n+        assertEquals(2013, c.get(Calendar.YEAR));\n+        assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));\n+        assertEquals(31, c.get(Calendar.DAY_OF_MONTH));\n+        assertEquals(17, c.get(Calendar.HOUR_OF_DAY));\n+        assertEquals(27, c.get(Calendar.MINUTE));\n+        assertEquals(0, c.get(Calendar.SECOND));\n+        assertEquals(0, c.get(Calendar.MILLISECOND));\n+        */\n     }\n     \n     public void testDateUtilISO8601JustDate() throws Exception", "timestamp": 1383501399, "metainfo": ""}