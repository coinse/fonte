{"sha": "6c03c65c98d7a93ef3c5bef06bbd42180af44334", "log": "Merge pull request #145 from fge/master  Make JsonNode implement all of .isXxx() methods (2.2 material)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonToken;\n import com.fasterxml.jackson.core.TreeNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n import com.fasterxml.jackson.databind.util.EmptyIterator;\n \n /**\n     // // First high-level division between values, containers and \"missing\"\n \n     /**\n+     * Return the type of this node\n+     *\n+     * @return the node type as a {@link JsonNodeType} enum value\n+     */\n+    public abstract JsonNodeType getNodeType();\n+\n+    /**\n      * Method that returns true for all value nodes: ones that \n      * are not containers, and that do not represent \"missing\" nodes\n      * in the path. Such value nodes represent String, Number, Boolean\n      * {@link #isContainerNode} and {@link #isMissingNode} ever\n      * returns true for any given node.\n      */\n-    public boolean isValueNode() { return false; }\n+    public final boolean isValueNode()\n+    {\n+        switch (getNodeType()) {\n+            case ARRAY: case OBJECT: case MISSING:\n+                return false;\n+            default:\n+                return true;\n+        }\n+    }\n \n     /**\n      * Method that returns true for container nodes: Arrays and Objects.\n      * {@link #isContainerNode} and {@link #isMissingNode} ever\n      * returns true for any given node.\n      */\n-    public boolean isContainerNode() { return false; }\n+    public final boolean isContainerNode()\n+    {\n+        final JsonNodeType type = getNodeType();\n+        return type == JsonNodeType.OBJECT || type == JsonNodeType.ARRAY;\n+    }\n \n     /**\n      * Method that returns true for \"virtual\" nodes which represent\n      * {@link #isContainerNode} and {@link #isMissingNode} ever\n      * returns true for any given node.\n      */\n-    public boolean isMissingNode() { return false; }\n+    public final boolean isMissingNode()\n+    {\n+        return getNodeType() == JsonNodeType.MISSING;\n+    }\n \n     // // Then more specific type introspection\n     // // (along with defaults to be overridden)\n     /**\n      * @return True if this node represents JSON Array\n      */\n-    public boolean isArray() { return false; }\n+    public final boolean isArray()\n+    {\n+        return getNodeType() == JsonNodeType.ARRAY;\n+    }\n \n     /**\n      * @return True if this node represents JSON Object\n      */\n-    public boolean isObject() { return false; }\n+    public final boolean isObject()\n+    {\n+        return getNodeType() == JsonNodeType.OBJECT;\n+    }\n \n     /**\n      * Method that can be used to check if the node is a wrapper\n      *\n      * @return True if this node wraps a POJO\n      */\n-    public boolean isPojo() { return false; }\n+    public final boolean isPojo()\n+    {\n+        return getNodeType() == JsonNodeType.POJO;\n+    }\n \n     /**\n      * @return True if this node represents a numeric JSON\n      *   value\n      */\n-    public boolean isNumber() { return false; }\n+    public final boolean isNumber()\n+    {\n+        return getNodeType() == JsonNodeType.NUMBER;\n+    }\n \n     /**\n      * \n     public boolean isBigDecimal() { return false; }\n     public boolean isBigInteger() { return false; }\n \n-    public boolean isTextual() { return false; }\n+    public final boolean isTextual()\n+    {\n+        return getNodeType() == JsonNodeType.STRING;\n+    }\n \n     /**\n      * Method that can be used to check if this node was created from\n      * JSON boolean value (literals \"true\" and \"false\").\n      */\n-    public boolean isBoolean() { return false; }\n+    public final boolean isBoolean()\n+    {\n+        return getNodeType() == JsonNodeType.BOOLEAN;\n+    }\n \n     /**\n      * Method that can be used to check if this node was created from\n      * JSON literal null value.\n      */\n-    public boolean isNull() { return false; }\n+    public final boolean isNull()\n+    {\n+        return getNodeType() == JsonNodeType.NULL;\n+    }\n \n     /**\n      * Method that can be used to check if this node represents\n      *\n      * @return True if this node represents base64 encoded binary data\n      */\n-    public boolean isBinary() { return false; }\n+    public final boolean isBinary()\n+    {\n+        return getNodeType() == JsonNodeType.BINARY;\n+    }\n \n     /**\n      * Method that can be used for efficient type detection\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n     /**********************************************************\n      */\n \n+    @Override\n+    public final JsonNodeType getNodeType()\n+    {\n+        return JsonNodeType.ARRAY;\n+    }\n+\n     @Override public JsonToken asToken() { return JsonToken.START_ARRAY; }\n-\n-    @Override\n-    public boolean isArray() { return true; }\n \n     @Override\n     public int size()\n--- a/src/main/java/com/fasterxml/jackson/databind/node/BinaryNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/BinaryNode.java\n     }\n \n     @Override\n+    public JsonNodeType getNodeType()\n+    {\n+        return JsonNodeType.BINARY;\n+    }\n+\n+    @Override\n     public JsonToken asToken() {\n         /* No distinct type; could use one for textual values,\n          * but given that it's not in text form at this point,\n          */\n         return JsonToken.VALUE_EMBEDDED_OBJECT;\n     }\n-\n-    @Override\n-    public boolean isBinary() { return true; }\n \n     /**\n      *<p>\n--- a/src/main/java/com/fasterxml/jackson/databind/node/BooleanNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/BooleanNode.java\n \n     public static BooleanNode valueOf(boolean b) { return b ? TRUE : FALSE; }\n \n+    @Override\n+    public JsonNodeType getNodeType()\n+    {\n+        return JsonNodeType.BOOLEAN;\n+    }\n+\n     // Interesting... two choices...\n     @Override public JsonToken asToken() {\n         return (this == TRUE) ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE;\n     }\n-\n-    @Override\n-    public boolean isBoolean() { return true; }\n \n     @Override\n     public boolean booleanValue() {\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java\n \n     // all containers are mutable: can't define:\n //    @Override public abstract <T extends JsonNode> T deepCopy();\n-    \n-    @Override\n-    public boolean isContainerNode() { return true; }\n \n     @Override\n     public abstract JsonToken asToken();\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeType.java\n+package com.fasterxml.jackson.databind.node;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+/**\n+ * Enumeration of all different {@link JsonNode} types\n+ *\n+ * <p>This covers all JSON types defined by <a\n+ * href=\"http://tools.ietf.org/html/rfc4627\">RFC 4627</a> (array, boolean,\n+ * null, number, object and string) but also Jackson-specific types: binary,\n+ * missing and POJO.</p>\n+ *\n+ * @see BinaryNode\n+ * @see MissingNode\n+ * @see POJONode\n+ */\n+public enum JsonNodeType\n+{\n+    ARRAY,\n+    BINARY,\n+    BOOLEAN,\n+    MISSING,\n+    NULL,\n+    NUMBER,\n+    OBJECT,\n+    POJO,\n+    STRING\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n     public static MissingNode getInstance() { return instance; }\n \n     @Override\n-    public boolean isValueNode()\n+    public JsonNodeType getNodeType()\n     {\n-        return false;\n+        return JsonNodeType.MISSING;\n     }\n \n     @Override public JsonToken asToken() { return JsonToken.NOT_AVAILABLE; }\n-\n-    @Override\n-    public boolean isMissingNode() { return true; }\n \n     @Override\n     public String asText() { return \"\"; }\n--- a/src/main/java/com/fasterxml/jackson/databind/node/NullNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/NullNode.java\n \n     public static NullNode getInstance() { return instance; }\n \n+    @Override\n+    public JsonNodeType getNodeType()\n+    {\n+        return JsonNodeType.NULL;\n+    }\n+\n     @Override public JsonToken asToken() { return JsonToken.VALUE_NULL; }\n-\n-    @Override\n-    public boolean isNull() { return true; }\n \n     @Override\n     public String asText() {\n--- a/src/main/java/com/fasterxml/jackson/databind/node/NumericNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/NumericNode.java\n     protected NumericNode() { }\n \n     @Override\n-    public final boolean isNumber() { return true; }\n+    public final JsonNodeType getNodeType()\n+    {\n+        return JsonNodeType.NUMBER;\n+    }\n \n     // // // Let's re-abstract so sub-classes handle them\n \n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n     /**********************************************************\n      */\n \n+    @Override\n+    public final JsonNodeType getNodeType()\n+    {\n+        return JsonNodeType.OBJECT;\n+    }\n+\n     @Override public JsonToken asToken() { return JsonToken.START_OBJECT; }\n-\n-    @Override\n-    public boolean isObject() { return true; }\n \n     @Override\n     public int size() {\n--- a/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java\n     /**********************************************************\n      */\n \n+    @Override\n+    public JsonNodeType getNodeType()\n+    {\n+        return JsonNodeType.POJO;\n+    }\n+\n     @Override public JsonToken asToken() { return JsonToken.VALUE_EMBEDDED_OBJECT; }\n-\n-    @Override\n-    public boolean isPojo() { return true; }\n \n     /**\n      * As it is possible that some implementations embed byte[] as POJONode\n--- a/src/main/java/com/fasterxml/jackson/databind/node/TextNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/TextNode.java\n         return new TextNode(v);\n     }\n \n+    @Override\n+    public JsonNodeType getNodeType()\n+    {\n+        return JsonNodeType.STRING;\n+    }\n+\n     @Override public JsonToken asToken() { return JsonToken.VALUE_STRING; }\n-\n-    /**\n-     * Yes indeed it is textual\n-     */\n-    @Override\n-    public boolean isTextual() { return true; }\n \n     @Override\n     public String textValue() {\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java\n     @Override\n     public <T extends JsonNode> T deepCopy() { return (T) this; }\n     \n-    @Override public boolean isValueNode() { return true; }\n-\n     @Override public abstract JsonToken asToken();\n \n     @Override", "timestamp": 1358537702, "metainfo": ""}