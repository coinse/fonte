{"sha": "1488cef12ee88e25dd0161f1b85c552a32775778", "log": "Completing conversion to using PropertyName instead of String in most parts of API", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n      */\n     public static class Std implements BeanProperty\n     {\n-        protected final String _name;\n+        protected final PropertyName _name;\n         protected final JavaType _type;\n         protected final PropertyName _wrapperName;\n         \n          * if no annotations were found\n          */\n         protected final Annotations _contextAnnotations;\n-        \n-        public Std(String name, JavaType type, PropertyName wrapperName,\n+\n+        public Std(PropertyName name, JavaType type, PropertyName wrapperName,\n                 Annotations contextAnnotations, AnnotatedMember member,\n                 boolean isRequired)\n         {\n             _member = member;\n             _contextAnnotations = contextAnnotations;\n         }\n+\n+        @Deprecated // since 2.3\n+        public Std(String name, JavaType type, PropertyName wrapperName,\n+                Annotations contextAnnotations, AnnotatedMember member,\n+                boolean isRequired)\n+        {\n+            this(new PropertyName(name), type, wrapperName, contextAnnotations,\n+                    member, isRequired);\n+        }\n         \n         public Std withType(JavaType type) {\n             return new Std(_name, type, _wrapperName, _contextAnnotations, _member, _isRequired);\n         \n         @Override\n         public String getName() {\n+            return _name.getSimpleName();\n+        }\n+\n+        @Override\n+        public PropertyName getFullName() {\n             return _name;\n-        }\n-\n-        @Override\n-        public PropertyName getFullName() {\n-            return new PropertyName(_name);\n         }\n         \n         @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/PropertyName.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/PropertyName.java\n     private static final long serialVersionUID = 7930806520033045126L;\n \n     private final static String _USE_DEFAULT = \"\";\n-    private final static String _NO_NAME = \"#disabled\";\n+    private final static String _NO_NAME = \"\";\n \n     /**\n      * Special placeholder value that indicates that name to use should be\n         if (_simpleName == null || _USE_DEFAULT.equals(_simpleName)) {\n             return USE_DEFAULT;\n         }\n-        if (_simpleName.equals(_NO_NAME)) {\n+        if (_simpleName.equals(_NO_NAME) && _namespace == null) {\n             return NO_NAME;\n         }\n         return this;\n         return _simpleName.length() > 0;\n     }\n \n+    /**\n+     * @since 2.3\n+     */\n+    public boolean hasSimpleName(String str) {\n+        if (str == null) {\n+            return _simpleName == null;\n+        }\n+        return str.equals(_simpleName);\n+    }\n+    \n     public boolean hasNamespace() {\n         return _namespace != null;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n      * We need a placeholder for creator properties that don't have name\n      * but are marked with `@JsonWrapped` annotation.\n      */\n-    protected final static String UNWRAPPED_CREATOR_PARAM_NAME = new String(\"@JsonUnwrapped\");\n+    protected final static PropertyName UNWRAPPED_CREATOR_PARAM_NAME = new PropertyName(\"@JsonUnwrapped\");\n     \n     /**\n      * Also special array deserializers for primitive array types.\n             }\n         }\n \n-        String[] ctorPropNames = null;\n+        PropertyName[] ctorPropNames = null;\n         AnnotatedConstructor propertyCtor = null;\n         for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n             if (propDef.getConstructorParameter() != null) {\n                 if (owner instanceof AnnotatedConstructor) {\n                     if (propertyCtor == null) {\n                         propertyCtor = (AnnotatedConstructor) owner;\n-                        ctorPropNames = new String[propertyCtor.getParameterCount()];\n+                        ctorPropNames = new PropertyName[propertyCtor.getParameterCount()];\n                     }\n-                    ctorPropNames[param.getIndex()] = propDef.getName();\n+                    ctorPropNames[param.getIndex()] = propDef.getFullName();\n                 }\n             }\n         }\n             boolean isVisible =  vchecker.isCreatorVisible(ctor);\n             // some single-arg constructors (String, number) are auto-detected\n             if (argCount == 1) {\n-                String name = ctor == propertyCtor ? ctorPropNames[0] : null;\n+                PropertyName name = (ctor == propertyCtor) ? ctorPropNames[0] : null;\n                 _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                         ctor, isCreator, isVisible, name);\n                 continue;\n             CreatorProperty[] properties = new CreatorProperty[argCount];\n             for (int i = 0; i < argCount; ++i) {\n                 AnnotatedParameter param = ctor.getParameter(i);\n-                String name = null;\n+                PropertyName name = null;\n                 if (ctor == propertyCtor) {\n                     name = ctorPropNames[i];\n                 }\n                 if (name == null) {\n-                    PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n-                    name = (pn == null) ? null : pn.getSimpleName();\n+                    name = (param == null) ? null : intr.findNameForDeserialization(param);\n                 }\n                 Object injectId = intr.findInjectableValueId(param);\n-                if (name != null && name.length() > 0) {\n+                if (name != null && name.hasSimpleName()) {\n                     ++namedCount;\n                     properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n-                } else if (injectId != null) {\n+                } else if (injectId != null) { // injectable\n                     ++injectCount;\n                     properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                 } else {\n     protected boolean _handleSingleArgumentConstructor(DeserializationContext ctxt,\n             BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n             AnnotationIntrospector intr, CreatorCollector creators,\n-            AnnotatedConstructor ctor, boolean isCreator, boolean isVisible, String name)\n+            AnnotatedConstructor ctor, boolean isCreator, boolean isVisible,\n+            PropertyName name)\n         throws JsonMappingException\n     {\n         // note: if we do have parameter name, it'll be \"property constructor\":\n         AnnotatedParameter param = ctor.getParameter(0);\n         if (name == null) {\n-            PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n-            name = (pn == null) ? null : pn.getSimpleName();\n+            name = (param == null) ? null : intr.findNameForDeserialization(param);\n         }\n         Object injectId = intr.findInjectableValueId(param);\n     \n-        if ((injectId != null) || (name != null && name.length() > 0)) { // property-based\n+        if ((injectId != null) || (name != null && name.hasSimpleName())) { // property-based\n             // We know there's a name and it's only 1 parameter.\n             CreatorProperty[] properties = new CreatorProperty[1];\n             properties[0] = constructCreatorProperty(ctxt, beanDesc, name, 0, param, injectId);\n             int injectCount = 0;            \n             for (int i = 0; i < argCount; ++i) {\n                 AnnotatedParameter param = factory.getParameter(i);\n-                PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n-                String name = (pn == null) ? null : pn.getSimpleName();\n+                PropertyName name = (param == null) ? null : intr.findNameForDeserialization(param);\n                 Object injectId = intr.findInjectableValueId(param);\n-                if (name != null && name.length() > 0) {\n+                if (name != null && name.hasSimpleName()) {\n                     ++namedCount;\n                     properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                 } else if (injectId != null) {\n      * factory method)\n      */\n     protected CreatorProperty constructCreatorProperty(DeserializationContext ctxt,\n-            BeanDescription beanDesc, String name, int index,\n+            BeanDescription beanDesc, PropertyName name, int index,\n             AnnotatedParameter param,\n             Object injectableValueId)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n {\n     private static final long serialVersionUID = -2038793552422727904L;\n \n+    protected final static PropertyName TEMP_PROPERTY_NAME = new PropertyName(\"#temporary-name\");\n+\n     /*\n     /**********************************************************\n     /* Information regarding type being deserialized\n             }\n             AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n             // Need to create a temporary property to allow contextual deserializers:\n-            BeanProperty.Std property = new BeanProperty.Std(null,\n+            BeanProperty.Std property = new BeanProperty.Std(TEMP_PROPERTY_NAME,\n                     delegateType, null, _classAnnotations, delegateCreator, false);\n             _delegateDeserializer = findDeserializer(ctxt, delegateType, property);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n         //   For now, won't add, since it is inferred, not explicit...\n     }\n \n-    public void addInjectable(String propertyName, JavaType propertyType,\n+    @Deprecated // since 2.3\n+    public void addInjectable(String propName, JavaType propType,\n             Annotations contextAnnotations, AnnotatedMember member,\n             Object valueId)\n     {\n+        addInjectable(new PropertyName(propName), propType, contextAnnotations, member, valueId);\n+    }\n+    \n+    public void addInjectable(PropertyName propName, JavaType propType,\n+            Annotations contextAnnotations, AnnotatedMember member,\n+            Object valueId)\n+    {\n         if (_injectables == null) {\n             _injectables = new ArrayList<ValueInjector>();\n         }\n-        _injectables.add(new ValueInjector(propertyName, propertyType,\n+        _injectables.add(new ValueInjector(propName, propType,\n                 contextAnnotations, member, valueId));\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n                 if (fixAccess) {\n                     m.fixAccess(); // to ensure we can call it\n                 }\n-                builder.addInjectable(m.getName(), beanDesc.resolveType(m.getGenericType()),\n+                builder.addInjectable(new PropertyName(m.getName()),\n+                        beanDesc.resolveType(m.getGenericType()),\n                         beanDesc.getClassAnnotations(), m, entry.getKey());\n             }\n         }\n         }\n         // we know it's a 2-arg method, second arg is the value\n         JavaType type = beanDesc.bindingsForBeanType().resolveType(setter.getGenericParameterType(1));\n-        BeanProperty.Std property = new BeanProperty.Std(setter.getName(), type, null,\n-                beanDesc.getClassAnnotations(), setter, false);\n+        BeanProperty.Std property = new BeanProperty.Std(new PropertyName(setter.getName()),\n+                type, null, beanDesc.getClassAnnotations(), setter, false);\n         type = resolveType(ctxt, beanDesc, type, setter);\n \n         /* AnySetter can be annotated with @JsonClass (etc) just like a\n         // note: this works since we know there's exactly one argument for methods\n         JavaType t0 = beanDesc.resolveType(jdkType);\n \n-        BeanProperty.Std property = new BeanProperty.Std(propDef.getName(), t0, propDef.getWrapperName(),\n+        BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),\n+                t0, propDef.getWrapperName(),\n                 beanDesc.getClassAnnotations(), mutator, propDef.isRequired());\n         JavaType type = resolveType(ctxt, beanDesc, t0, mutator);\n         // did type change?\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n      * @since 2.1\n      */\n     protected final int _creatorIndex;\n-\n-    /**\n-     * @deprecated Since 2.2: use the method that takes <code>isRequired</code> property\n-     */\n-    @Deprecated\n-    public CreatorProperty(String name, JavaType type, TypeDeserializer typeDeser,\n-            Annotations contextAnnotations, AnnotatedParameter param,\n-            int index, Object injectableValueId)\n-    {\n-        this(name, type, null, typeDeser, contextAnnotations, param, index,\n-                injectableValueId, true);\n-    }\n     \n     /**\n      * @param name Name of the logical property\n      *    this property)\n      * @param param Representation of property, constructor or factory\n      *    method parameter; used for accessing annotations of the property\n-     * @param index Index of this property within creator invocatino\n-     */\n+     * @param index Index of this property within creator invocation\n+     * \n+     * @since 2.3\n+     */\n+    public CreatorProperty(PropertyName name, JavaType type, PropertyName wrapperName,\n+            TypeDeserializer typeDeser,\n+            Annotations contextAnnotations, AnnotatedParameter param,\n+            int index, Object injectableValueId,\n+            boolean isRequired)\n+    {\n+        super(name, type, wrapperName, typeDeser, contextAnnotations, isRequired);\n+        _annotated = param;\n+        _creatorIndex = index;\n+        _injectableValueId = injectableValueId;\n+    }\n+\n+    @Deprecated // since 2.3\n     public CreatorProperty(String name, JavaType type, PropertyName wrapperName,\n             TypeDeserializer typeDeser,\n             Annotations contextAnnotations, AnnotatedParameter param,\n             int index, Object injectableValueId,\n             boolean isRequired)\n     {\n-        super(name, type, wrapperName, typeDeser, contextAnnotations, isRequired);\n-        _annotated = param;\n-        _creatorIndex = index;\n-        _injectableValueId = injectableValueId;\n-    }\n-\n-    protected CreatorProperty(CreatorProperty src, String newName) {\n+        this(new PropertyName(name), type, wrapperName, typeDeser,\n+                contextAnnotations, param, index, injectableValueId, isRequired);\n+    }\n+    \n+    /**\n+     * @since 2.3\n+     */\n+    protected CreatorProperty(CreatorProperty src, PropertyName newName) {\n         super(src, newName);\n         _annotated = src._annotated;\n         _creatorIndex = src._creatorIndex;\n         _injectableValueId = src._injectableValueId;\n+    }\n+\n+    @Deprecated // since 2.3\n+    protected CreatorProperty(CreatorProperty src, String newName) {\n+        this(src, new PropertyName(newName));\n     }\n     \n     protected CreatorProperty(CreatorProperty src, JsonDeserializer<?> deser) {\n     }\n \n     @Override\n-    public CreatorProperty withName(String newName) {\n+    public CreatorProperty withName(PropertyName newName) {\n         return new CreatorProperty(this, newName);\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n      * @return Newly constructed instance, if property name differs from the\n      *   one used for this instance; or 'this' if not.\n      */\n-    public abstract SettableBeanProperty withName(String newName);\n-    \n+    public abstract SettableBeanProperty withName(PropertyName newName);\n+\n+    /**\n+     * @since 2.3\n+     */\n+    public SettableBeanProperty withSimpleName(String simpleName) {\n+        PropertyName n = (_propName == null)\n+                ? new PropertyName(simpleName) : _propName.withSimpleName(simpleName);\n+        return (n == _propName) ? this : withName(n);\n+    }\n+    \n+    @Deprecated // since 2.3 -- use 'withSimpleName' instead if need be\n+    public SettableBeanProperty withName(String simpleName) {\n+        return withName(new PropertyName(simpleName));\n+    }\n+\n     public void setManagedReferenceName(String n) {\n         _managedReferenceName = n;\n     }\n      */\n     \n     @Override\n-    public final String getName() { return _propName.getSimpleName(); }\n+    public final String getName() {\n+        return _propName.getSimpleName();\n+    }\n \n     @Override\n     public PropertyName getFullName() {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n         while (it.hasNext()) {\n             SettableBeanProperty prop = it.next();\n             String newName = transformer.transform(prop.getName());\n-            prop = prop.withName(newName);\n+            prop = prop.withSimpleName(newName);\n             JsonDeserializer<?> deser = prop.getValueDeserializer();\n             if (deser != null) {\n                 @SuppressWarnings(\"unchecked\")\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.introspect.AnnotatedField;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n         _field = src._field;\n     }\n \n-    protected FieldProperty(FieldProperty src, String newName) {\n+    protected FieldProperty(FieldProperty src, PropertyName newName) {\n         super(src, newName);\n         _annotated = src._annotated;\n         _field = src._field;\n     }\n     \n     @Override\n-    public FieldProperty withName(String newName) {\n+    public FieldProperty withName(PropertyName newName) {\n         return new FieldProperty(this, newName);\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java\n import com.fasterxml.jackson.core.JsonToken;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n         _creator = src._creator;\n     }\n \n-    protected InnerClassProperty(InnerClassProperty src, String newName) {\n+    protected InnerClassProperty(InnerClassProperty src, PropertyName newName) {\n         super(src, newName);\n         _delegate = src._delegate.withName(newName);\n         _creator = src._creator;\n     }\n \n     @Override\n-    public InnerClassProperty withName(String newName) {\n+    public InnerClassProperty withName(PropertyName newName) {\n         return new InnerClassProperty(this, newName);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ManagedReferenceProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ManagedReferenceProperty.java\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.util.Annotations;\n             String refName, SettableBeanProperty backward,\n             Annotations contextAnnotations, boolean isContainer)\n     {\n-        super(forward.getName(), forward.getType(), forward.getWrapperName(),\n+        super(forward.getFullName(), forward.getType(), forward.getWrapperName(),\n                 forward.getValueTypeDeserializer(), contextAnnotations,\n                 forward.isRequired());\n         _referenceName = refName;\n         _backProperty = src._backProperty;\n     }\n \n-    protected ManagedReferenceProperty(ManagedReferenceProperty src, String newName) {\n+    protected ManagedReferenceProperty(ManagedReferenceProperty src, PropertyName newName) {\n         super(src, newName);\n         _referenceName = src._referenceName;\n         _isContainer = src._isContainer;\n     }\n \n     @Override\n-    public ManagedReferenceProperty withName(String newName) {\n+    public ManagedReferenceProperty withName(PropertyName newName) {\n         return new ManagedReferenceProperty(this, newName);\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n         _setter = src._setter;\n     }\n \n-    protected MethodProperty(MethodProperty src, String newName) {\n+    protected MethodProperty(MethodProperty src, PropertyName newName) {\n         super(src, newName);\n         _annotated = src._annotated;\n         _setter = src._setter;\n     }\n     \n     @Override\n-    public MethodProperty withName(String newName) {\n+    public MethodProperty withName(PropertyName newName) {\n         return new MethodProperty(this, newName);\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n     }\n \n     @Override\n-    public ObjectIdValueProperty withName(String newName) {\n-        return new ObjectIdValueProperty(this, new PropertyName(newName));\n+    public ObjectIdValueProperty withName(PropertyName newName) {\n+        return new ObjectIdValueProperty(this, newName);\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n         _getter = src._getter;\n     }\n \n-    protected SetterlessProperty(SetterlessProperty src, String newName) {\n+    protected SetterlessProperty(SetterlessProperty src, PropertyName newName) {\n         super(src, newName);\n         _annotated = src._annotated;\n         _getter = src._getter;\n     }\n \n     @Override\n-    public SetterlessProperty withName(String newName) {\n+    public SetterlessProperty withName(PropertyName newName) {\n         return new SetterlessProperty(this, newName);\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/UnwrappedPropertyHandler.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/UnwrappedPropertyHandler.java\n         ArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>(_properties.size());\n         for (SettableBeanProperty prop : _properties) {\n             String newName = transformer.transform(prop.getName());\n-            prop = prop.withName(newName);\n+            prop = prop.withSimpleName(newName);\n             JsonDeserializer<?> deser = prop.getValueDeserializer();\n             if (deser != null) {\n                 @SuppressWarnings(\"unchecked\")\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ValueInjector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ValueInjector.java\n \n import java.io.IOException;\n \n-\n import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.util.Annotations;\n \n      */\n     protected final Object _valueId;\n \n-    public ValueInjector(String propertyName, JavaType type,\n+    public ValueInjector(PropertyName propName, JavaType type,\n             Annotations contextAnnotations, AnnotatedMember mutator,\n             Object valueId)\n     {\n-        super(propertyName, type, null, contextAnnotations, mutator, false);\n+        super(propName, type, null, contextAnnotations, mutator, false);\n         _valueId = valueId;\n+    }\n+\n+    @Deprecated // since 2.3\n+    public ValueInjector(String propName, JavaType type,\n+            Annotations contextAnnotations, AnnotatedMember mutator,\n+            Object valueId)\n+    {\n+        this(new PropertyName(propName), type, contextAnnotations, mutator, valueId);\n     }\n \n     public Object findValue(DeserializationContext context, Object beanInstance)\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.deser.CreatorProperty;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n         }\n \n         private static CreatorProperty creatorProp(String name, JavaType type, int index) {\n-            return new CreatorProperty(name, type, null,\n+            return new CreatorProperty(new PropertyName(name), type, null,\n                     null, null, null, index, null, true);\n         }\n         \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n     /**********************************************************\n      */\n \n+    @Deprecated // since 2.3\n+    public BeanPropertyDefinition withName(String newName) {\n+        return withSimpleName(newName);\n+    }\n+    \n     /**\n      * Method that can be used to create a definition with\n      * same settings as this one, but with different\n      * (external) name; that is, one for which\n      * {@link #getName()} would return <code>newName</code>.\n+     * \n+     * @since 2.3\n      */\n-    public abstract BeanPropertyDefinition withName(String newName);\n+    public abstract BeanPropertyDefinition withName(PropertyName newName);\n+\n+    /**\n+     * Alternate \"mutant factory\" that will only change simple name, but\n+     * leave other optional parts (like namespace) as is.\n+     * \n+     * @since 2.3\n+     */\n+    public abstract BeanPropertyDefinition withSimpleName(String newSimpleName);\n     \n     /*\n     /**********************************************************\n     @Override // from Named\n     public abstract String getName();\n \n+    public abstract PropertyName getFullName();\n+    \n     /**\n      * Accessor that can be used to determine implicit name from underlying\n      * element(s) before possible renaming. This is the \"internal\"\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n                 if (renamed == null) {\n                     renamed = new LinkedList<POJOPropertyBuilder>();\n                 }\n-                prop = prop.withName(newName);\n+                prop = prop.withSimpleName(newName);\n                 renamed.add(prop);\n                 it.remove();\n             }\n         POJOPropertyBuilder[] props = _properties.values().toArray(new POJOPropertyBuilder[_properties.size()]);\n         _properties.clear();\n         for (POJOPropertyBuilder prop : props) {\n-            String name = prop.getName();\n+            PropertyName fullName = prop.getFullName();\n+            String rename = null;\n             if (_forSerialization) {\n                 if (prop.hasGetter()) {\n-                    name = naming.nameForGetterMethod(_config, prop.getGetter(), name);\n+                    rename = naming.nameForGetterMethod(_config, prop.getGetter(), fullName.getSimpleName());\n                 } else if (prop.hasField()) {\n-                    name = naming.nameForField(_config, prop.getField(), name);\n+                    rename = naming.nameForField(_config, prop.getField(), fullName.getSimpleName());\n                 }\n             } else {\n                 if (prop.hasSetter()) {\n-                    name = naming.nameForSetterMethod(_config, prop.getSetter(), name);\n+                    rename = naming.nameForSetterMethod(_config, prop.getSetter(), fullName.getSimpleName());\n                 } else if (prop.hasConstructorParameter()) {\n-                    name = naming.nameForConstructorParameter(_config, prop.getConstructorParameter(), name);\n+                    rename = naming.nameForConstructorParameter(_config, prop.getConstructorParameter(), fullName.getSimpleName());\n                 } else if (prop.hasField()) {\n-                    name = naming.nameForField(_config, prop.getField(), name);\n+                    rename = naming.nameForField(_config, prop.getField(), fullName.getSimpleName());\n                 } else if (prop.hasGetter()) {\n                     /* Plus, when getter-as-setter is used, need to convert that too..\n                      * (should we verify that's enabled? For now, assume it's ok always)\n                      */\n-                    name = naming.nameForGetterMethod(_config, prop.getGetter(), name);\n-                }\n-            }\n-            if (!name.equals(prop.getName())) {\n-                prop = prop.withName(name);\n+                    rename = naming.nameForGetterMethod(_config, prop.getGetter(), fullName.getSimpleName());\n+                }\n+            }\n+            final String simpleName;\n+            if (rename != null && !fullName.hasSimpleName(rename)) {\n+                prop = prop.withSimpleName(rename);\n+                simpleName = rename;\n+            } else {\n+                simpleName = fullName.getSimpleName();\n             }\n             /* As per [JACKSON-687], need to consider case where there may already be\n              * something in there...\n              */\n-            POJOPropertyBuilder old = _properties.get(name);\n+            POJOPropertyBuilder old = _properties.get(simpleName);\n             if (old == null) {\n-                _properties.put(name, prop);\n+                _properties.put(simpleName, prop);\n             } else {\n                 old.addAll(prop);\n             }\n             if (wrapperName == null || !wrapperName.hasSimpleName()) {\n                 continue;\n             }\n-            String name = wrapperName.getSimpleName();\n-            if (!name.equals(prop.getName())) {\n+            if (!wrapperName.equals(prop.getFullName())) {\n                 if (renamed == null) {\n                     renamed = new LinkedList<POJOPropertyBuilder>();\n                 }\n-                prop = prop.withName(name);\n+                prop = prop.withName(wrapperName);\n                 renamed.add(prop);\n                 it.remove();\n             }\n     {\n         POJOPropertyBuilder prop = _properties.get(implName);\n         if (prop == null) {\n-            prop = new POJOPropertyBuilder(implName, _annotationIntrospector,\n-                    _forSerialization);\n+            prop = new POJOPropertyBuilder(new PropertyName(implName),\n+                    _annotationIntrospector, _forSerialization);\n             _properties.put(implName, prop);\n         }\n         return prop;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n      * renaming (by new instance being constructed using\n      * a new name)\n      */\n-    protected final String _name;\n+    protected final PropertyName _name;\n \n     /**\n      * Original internal name, derived from accessor, of this\n      * property. Will not be changed by renaming.\n      */\n-    protected final String _internalName;\n+    protected final PropertyName _internalName;\n \n     protected Linked<AnnotatedField> _fields;\n     \n     protected Linked<AnnotatedMethod> _getters;\n \n     protected Linked<AnnotatedMethod> _setters;\n-    \n-    public POJOPropertyBuilder(String internalName,\n+\n+    public POJOPropertyBuilder(PropertyName internalName,\n             AnnotationIntrospector annotationIntrospector, boolean forSerialization)\n     {\n         _internalName = internalName;\n         _forSerialization = forSerialization;\n     }\n \n-    public POJOPropertyBuilder(POJOPropertyBuilder src, String newName)\n+    @Deprecated // since 2.3\n+    public POJOPropertyBuilder(String simpleInternalName,\n+            AnnotationIntrospector annotationIntrospector, boolean forSerialization)\n+    {\n+        this(new PropertyName(simpleInternalName), annotationIntrospector, forSerialization);\n+    }\n+    \n+    public POJOPropertyBuilder(POJOPropertyBuilder src, PropertyName newName)\n     {\n         _internalName = src._internalName;\n         _name = newName;\n      */\n \n     @Override\n-    public POJOPropertyBuilder withName(String newName) {\n+    public POJOPropertyBuilder withName(PropertyName newName) {\n         return new POJOPropertyBuilder(this, newName);\n+    }\n+\n+    @Override\n+    public POJOPropertyBuilder withSimpleName(String newSimpleName)\n+    {\n+        PropertyName newName = _name.withSimpleName(newSimpleName);\n+        return (newName == _name) ? this : new POJOPropertyBuilder(this, newName);\n     }\n     \n     /*\n      */\n \n     @Override\n-    public String getName() { return _name; }\n-\n-    @Override\n-    public String getInternalName() { return _internalName; }\n+    public String getName() {\n+        return (_name == null) ? null : _name.getSimpleName();\n+    }\n+\n+    @Override\n+    public PropertyName getFullName() {\n+        return _name;\n+    }\n+    \n+    @Override\n+    public String getInternalName() { return _internalName.getSimpleName(); }\n \n     @Override\n     public PropertyName getWrapperName() {\n         /* 13-Mar-2013, tatu: Accessing via primary member SHOULD work,\n          *   due to annotation merging. However, I have seen some problems\n-         *   with this access (for other annotations) so will leave full\n-         *   traversal code in place just in case.\n+         *   with this access (for other annotations)... so if this should\n+         *   occur, try commenting out full traversal code\n          */\n         AnnotatedMember member = getPrimaryMember();\n         return (member == null || _annotationIntrospector == null) ? null\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n             // last 2 nulls; don't know key, value serializers (yet)\n             MapSerializer mapSer = MapSerializer.construct(/* ignored props*/ null, type, staticTyping,\n                     typeSer, null, null);\n-            BeanProperty.Std anyProp = new BeanProperty.Std(anyGetter.getName(), valueType, null,\n+            // TODO: can we find full PropertyName?\n+            PropertyName name = new PropertyName(anyGetter.getName());\n+            BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null,\n                     beanDesc.getClassAnnotations(), anyGetter, false);\n             builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n         }\n             PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor)\n         throws JsonMappingException\n     {\n-        final String name = propDef.getName();\n+        final PropertyName name = propDef.getFullName();\n         if (prov.canOverrideAccessModifiers()) {\n             accessor.fixAccess();\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n     implements ContextualSerializer, ResolvableSerializer,\n         JsonFormatVisitable, SchemaAware\n {\n+    protected final static PropertyName NAME_FOR_OBJECT_REF = new PropertyName(\"#object-ref\");\n+    \n     final protected static BeanPropertyWriter[] NO_PROPS = new BeanPropertyWriter[0];\n \n     /*\n         }\n         return null;\n     }\n-    \n+\n     @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n                 // no ObjectId override, but maybe ObjectIdRef?\n                 if (oiw != null) {\n                     objectIdInfo = intr.findObjectReferenceInfo(accessor,\n-                            new ObjectIdInfo(PropertyName.NO_NAME, null, null));\n+                            new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null));\n                     oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n                 }\n             } else {\n--- a/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n      */\n     @Deprecated\n     public SimpleBeanPropertyDefinition(AnnotatedMember member) {\n-    \tthis(member, member.getName(), null);\n+        this(member, member.getName(), null);\n     }\n \n     /**\n      */\n     @Deprecated\n     public SimpleBeanPropertyDefinition(AnnotatedMember member, String name) {\n-    \tthis(member, name, null);\n+        this(member, name, null);\n     }\n     \n     private SimpleBeanPropertyDefinition(AnnotatedMember member, String name,\n      */\n \n     @Override\n-    public SimpleBeanPropertyDefinition withName(String newName) {\n+    public SimpleBeanPropertyDefinition withSimpleName(String newName) {\n         if (_name.equals(newName)) {\n             return this;\n         }\n         return new SimpleBeanPropertyDefinition(_member, newName, _introspector);\n     }\n+\n+    @Override\n+    public SimpleBeanPropertyDefinition withName(PropertyName newName) {\n+        return withSimpleName(newName.getSimpleName());\n+    }\n     \n     /*\n     /**********************************************************\n     public String getName() { return _name; }\n \n     @Override\n+    public PropertyName getFullName() { return new PropertyName(_name); }\n+    \n+    @Override\n     public String getInternalName() { return getName(); }\n \n     @Override\n     public PropertyName getWrapperName() {\n-    \treturn (_introspector == null) ? null : _introspector.findWrapperName(_member);\n+        return (_introspector == null) ? null : _introspector.findWrapperName(_member);\n     }\n     \n     // hmmh. what should we claim here?\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java\n         @Override\n         public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {\n             return  new CreatorProperty[] {\n-                    new CreatorProperty(\"type\", config.constructType(Class.class), null,\n+                    new CreatorProperty(new PropertyName(\"type\"), config.constructType(Class.class), null,\n                             null, null, null, 0, null, true)\n             };\n         }\n         @Override\n         public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {\n             return  new CreatorProperty[] {\n-                    new CreatorProperty(\"name\", config.constructType(String.class), null,\n+                    new CreatorProperty(new PropertyName(\"name\"), config.constructType(String.class), null,\n                             null, null, null, 0, null, true)\n             };\n         }\n                     @Override\n                     public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {\n                         return  new CreatorProperty[] {\n-                                new CreatorProperty(\"secret\", config.constructType(String.class), null,\n+                                new CreatorProperty(new PropertyName(\"secret\"), config.constructType(String.class), null,\n                                         null, null, null, 0, null, true)\n                         };\n                     }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n         {\n             JavaType strType = config.constructType(String.class);\n             // we need a valid BeanPropertyDefinition; this will do (just need name to match)\n-            POJOPropertyBuilder prop = new POJOPropertyBuilder(\"bogus\", null, true);\n+            POJOPropertyBuilder prop = new POJOPropertyBuilder(new PropertyName(\"bogus\"), null, true);\n             try {\n                 AnnotatedField f = new AnnotatedField(EmptyBean.class.getDeclaredField(\"name\"), null);\n                 beanProperties.add(new BeanPropertyWriter(prop, f, null,", "timestamp": 1374874937, "metainfo": ""}