{"sha": "955d1f9468e8cb312689c5b7377b848123587b23", "log": "Add support for coercion from String \"null\" (in addition to null token)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n                 return true;\n             }\n             if (\"false\".equals(text) || text.length() == 0) {\n-                return Boolean.FALSE;\n+                return false;\n+            }\n+            if (_hasTextualNull(text)) {\n+                return false;\n             }\n             throw ctxt.weirdStringException(text, _valueClass, \"only \\\"true\\\" or \\\"false\\\" recognized\");\n         }\n             if (text.length() == 0) {\n                 return (Boolean) getEmptyValue();\n             }\n+            if (_hasTextualNull(text)) {\n+                return (Boolean) getNullValue();\n+            }\n             throw ctxt.weirdStringException(text, _valueClass, \"only \\\"true\\\" or \\\"false\\\" recognized\");\n         }\n         // Otherwise, no can do:\n         }\n         if (t == JsonToken.VALUE_STRING) { // let's do implicit re-parse\n             String text = jp.getText().trim();\n+            if (_hasTextualNull(text)) {\n+                return (Byte) getNullValue();\n+            }\n             int value;\n             try {\n                 int len = text.length();\n                 int len = text.length();\n                 if (len == 0) {\n                     return (Short) getEmptyValue();\n+                }\n+                if (_hasTextualNull(text)) {\n+                    return (Short) getNullValue();\n                 }\n                 value = NumberInput.parseInt(text);\n             } catch (IllegalArgumentException iae) {\n             return jp.getIntValue();\n         }\n         if (t == JsonToken.VALUE_STRING) { // let's do implicit re-parse\n-            /* 31-Dec-2009, tatus: Should improve handling of overflow\n-             *   values... but this'll have to do for now\n-             */\n-            String text = jp.getText().trim();\n+            String text = jp.getText().trim();\n+            if (_hasTextualNull(text)) {\n+                return 0;\n+            }\n             try {\n                 int len = text.length();\n                 if (len > 9) {\n             String text = jp.getText().trim();\n             try {\n                 int len = text.length();\n+                if (_hasTextualNull(text)) {\n+                    return (Integer) getNullValue();\n+                }\n                 if (len > 9) {\n                     long l = Long.parseLong(text);\n                     if (l < Integer.MIN_VALUE || l > Integer.MAX_VALUE) {\n             if (text.length() == 0) {\n                 return (Long) getEmptyValue();\n             }\n+            if (_hasTextualNull(text)) {\n+                return (Long) getNullValue();\n+            }\n             try {\n                 return Long.valueOf(NumberInput.parseLong(text));\n             } catch (IllegalArgumentException iae) { }\n         }\n         if (t == JsonToken.VALUE_STRING) {\n             String text = jp.getText().trim();\n-            if (text.length() == 0) {\n+            if (text.length() == 0 || _hasTextualNull(text)) {\n                 return 0L;\n             }\n             try {\n             String text = jp.getText().trim();\n             if (text.length() == 0) {\n                 return (Float) getEmptyValue();\n+            }\n+            if (_hasTextualNull(text)) {\n+                return (Float) getNullValue();\n             }\n             switch (text.charAt(0)) {\n             case 'I':\n         }\n         if (t == JsonToken.VALUE_STRING) {\n             String text = jp.getText().trim();\n-            if (text.length() == 0) {\n+            if (text.length() == 0 || _hasTextualNull(text)) {\n                 return 0.0f;\n             }\n             switch (text.charAt(0)) {\n             if (text.length() == 0) {\n                 return (Double) getEmptyValue();\n             }\n+            if (_hasTextualNull(text)) {\n+                return (Double) getNullValue();\n+            }\n             switch (text.charAt(0)) {\n             case 'I':\n                 if (\"Infinity\".equals(text) || \"INF\".equals(text)) {\n         // And finally, let's allow Strings to be converted too\n         if (t == JsonToken.VALUE_STRING) {\n             String text = jp.getText().trim();\n-            if (text.length() == 0) {\n+            if (text.length() == 0 || _hasTextualNull(text)) {\n                 return 0.0;\n             }\n             switch (text.charAt(0)) {\n                 if (value.length() == 0) {\n                     return (Date) getEmptyValue();\n                 }\n+                if (_hasTextualNull(value)) {\n+                    return (java.util.Date) getNullValue();\n+                }\n                 return ctxt.parseDate(value);\n             } catch (IllegalArgumentException iae) {\n                 throw ctxt.weirdStringException(value, _valueClass,\n             return value;\n         }\n         throw ctxt.mappingException(String.class, jp.getCurrentToken());\n+    }\n+\n+    /**\n+     * Helper method called to determine if we are seeing String value of\n+     * \"null\", and, further, that it should be coerced to null just like\n+     * null token.\n+     * \n+     * @since 2.3\n+     */\n+    protected boolean _hasTextualNull(String value)\n+    {\n+        return \"null\".equals(value);\n     }\n     \n     /*", "timestamp": 1376188907, "metainfo": ""}