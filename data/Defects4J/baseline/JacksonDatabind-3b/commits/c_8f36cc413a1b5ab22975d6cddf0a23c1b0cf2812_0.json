{"sha": "8f36cc413a1b5ab22975d6cddf0a23c1b0cf2812", "log": "further work for #206, wrt ObjectReader", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n     /**\n      * Method called to locate deserializer for the passed root-level value.\n      */\n-    protected final JsonDeserializer<Object> _findRootDeserializer(DeserializationContext ctxt,\n+    protected JsonDeserializer<Object> _findRootDeserializer(DeserializationContext ctxt,\n             JavaType valueType)\n         throws JsonMappingException\n     {\n      * by configuration. Method also is NOT to throw an exception if\n      * access fails.\n      */\n-    protected final JsonDeserializer<Object> _prefetchRootDeserializer(\n+    protected JsonDeserializer<Object> _prefetchRootDeserializer(\n             DeserializationConfig config, JavaType valueType)\n     {\n         if (valueType == null || !_config.isEnabled(DeserializationFeature.EAGER_DESERIALIZER_FETCH)) {\n      * for deserializing a single root value.\n      * Can be overridden if a custom context is needed.\n      */\n-    protected final DefaultDeserializationContext createDeserializationContext(JsonParser jp,\n+    protected DefaultDeserializationContext createDeserializationContext(JsonParser jp,\n             DeserializationConfig cfg) {\n         // 04-Jan-2010, tatu: we do actually need the provider too... (for polymorphic deser)\n         return _context.createInstance(cfg, jp, _injectableValues);\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n      * by configuration. Method also is NOT to throw an exception if\n      * access fails.\n      */\n-    protected final JsonSerializer<Object> _prefetchRootSerializer(\n+    protected JsonSerializer<Object> _prefetchRootSerializer(\n             SerializationConfig config, JavaType valueType)\n     {\n         if (valueType == null || !_config.isEnabled(SerializationFeature.EAGER_SERIALIZER_FETCH)) {\n      * \n      * @since 2.1\n      */\n-    private final void _configureJsonGenerator(JsonGenerator jgen)\n+    private void _configureJsonGenerator(JsonGenerator jgen)\n     {\n         if (_prettyPrinter != null) {\n             PrettyPrinter pp = _prettyPrinter;", "timestamp": 1366047334, "metainfo": ""}