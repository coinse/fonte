{"sha": "591276479428336d44aed87e3a1022ce0e9e7bfb", "log": "fixing polymorphic updateValue", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n                          T intoValue)\n         throws IOException, JsonProcessingException\n     {\n-        throw new UnsupportedOperationException(\"Can not update object of type \"+intoValue.getClass().getName());\n+        throw new UnsupportedOperationException(\"Can not update object of type \"\n+                +intoValue.getClass().getName()+\" (by deserializer of type \"+getClass().getName()+\")\");\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/TypeWrappedDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/TypeWrappedDeserializer.java\n         // should never happen? (if it can, could call on that object)\n         throw new IllegalStateException(\"Type-wrapped deserializer's deserializeWithType should never get called\");\n     }\n+\n+    @Override\n+    public Object deserialize(JsonParser jp, DeserializationContext ctxt,\n+            Object intoValue)\n+        throws IOException, JsonProcessingException\n+    {\n+        /* 01-Mar-2013, tatu: Hmmh. Tough call as to what to do... need\n+         *   to delegate, but will this work reliably? Let's just hope so:\n+         */\n+        return _deserializer.deserialize(jp,  ctxt, intoValue);\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestPolymorphicUpdateValue.java\n+package com.fasterxml.jackson.databind.convert;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Unit tests for verifying handling of update value on polymorphic\n+ * objects.\n+ */\n+public class TestPolymorphicUpdateValue extends BaseMapTest\n+{\n+    @JsonTypeInfo(include=JsonTypeInfo.As.WRAPPER_ARRAY //PROPERTY\n+            ,use=JsonTypeInfo.Id.NAME, property=\"type\")\n+    @JsonSubTypes(value={ @JsonSubTypes.Type(value=Child.class)})\n+    abstract static class Parent {\n+        public int x;\n+        public int y;\n+    }\n+\n+    @JsonTypeName(\"child\")\n+    public static class Child extends Parent {\n+        public int w;\n+        public int h;\n+    }    \n+    \n+    /*\n+    /********************************************************\n+    /* Unit tests\n+    /********************************************************\n+     */\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public void testPolymorphicTest() throws Exception\n+    {\n+         Child c = new Child();\n+         c.w = 10;\n+         c.h = 11;\n+         MAPPER.readerForUpdating(c).readValue(\"{\\\"x\\\":3,\\\"y\\\":4,\\\"w\\\":111}\");\n+         assertEquals(3, c.x);\n+         assertEquals(4, c.y);\n+         assertEquals(111, c.w);\n+    }\n+}", "timestamp": 1362194492, "metainfo": ""}