{"sha": "a3faa88c1008a76a4045577116d2c14a758ab078", "log": "Merge pull request #247 from nicktelford/feature/inet-socket-address  Add support for InetSocketAddress", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n \n import java.io.*;\n import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n import java.net.URI;\n import java.net.URL;\n import java.nio.charset.Charset;\n import com.fasterxml.jackson.core.JsonToken;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n \n /**\n  * Container class that contains serializers for JDK types that\n                 Pattern.class,\n                 Locale.class,\n                 InetAddress.class,\n+                InetSocketAddress.class,\n                 Charset.class,\n                 AtomicBoolean.class,\n                 Class.class,\n             PatternDeserializer.instance,\n             LocaleDeserializer.instance,\n             InetAddressDeserializer.instance,\n+            InetSocketAddressDeserializer.instance,\n             CharsetDeserializer.instance,\n             \n             // other types:\n         }\n         if (rawType == InetAddress.class) {\n             return InetAddressDeserializer.instance;\n+        }\n+        if (rawType == InetSocketAddress.class) {\n+            return InetSocketAddressDeserializer.instance;\n         }\n         if (rawType == Charset.class) {\n             return CharsetDeserializer.instance;\n             throws IOException\n         {\n             return InetAddress.getByName(value);\n+        }\n+    }\n+\n+    /**\n+     * Deserializer for {@link InetSocketAddress}.\n+     *\n+     * @see <a href=\"https://github.com/FasterXML/jackson-databind/issues/48\">Issue 48</a>.\n+     */\n+    protected static class InetSocketAddressDeserializer\n+            extends FromStringDeserializer<InetSocketAddress>\n+    {\n+        public final static InetSocketAddressDeserializer instance = new InetSocketAddressDeserializer();\n+\n+        public InetSocketAddressDeserializer() { super(InetSocketAddress.class); }\n+\n+        @Override\n+        protected InetSocketAddress _deserialize(String value, DeserializationContext ctxt)\n+                throws IOException\n+        {\n+            if (value.startsWith(\"[\")) {\n+                // bracketed IPv6 (with port number)\n+\n+                int i = value.lastIndexOf(']');\n+                if (i == -1) {\n+                    throw new InvalidFormatException(\n+                            \"Bracketed IPv6 address must contain closing bracket.\",\n+                            value, InetSocketAddress.class);\n+                }\n+\n+                int j = value.indexOf(':', i);\n+                int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;\n+                return new InetSocketAddress(value.substring(0, i + 1), port);\n+            } else {\n+                int i = value.indexOf(':');\n+                if (i != -1 && value.indexOf(':', i + 1) == -1) {\n+                    // host:port\n+                    int port = Integer.parseInt(value.substring(i));\n+                    return new InetSocketAddress(value.substring(0, i), port);\n+                } else {\n+                    // host or unbracketed IPv6, without port number\n+                    return new InetSocketAddress(value, 0);\n+                }\n+            }\n         }\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n         // One unfortunate special case, as per [JACKSON-484]\n         if (InetAddress.class.isAssignableFrom(raw)) {\n             return InetAddressSerializer.instance;\n+        }\n+        if (InetSocketAddress.class.isAssignableFrom(raw)) {\n+            return InetSocketAddressSerializer.instance;\n         }\n         // ... and another one, [JACKSON-522], for TimeZone\n         if (TimeZone.class.isAssignableFrom(raw)) {\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/InetSocketAddressSerializer.java\n+package com.fasterxml.jackson.databind.ser.std;\n+\n+import com.fasterxml.jackson.core.JsonGenerationException;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+\n+import java.io.IOException;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * Simple serializer for {@link InetSocketAddress}.\n+ */\n+public class InetSocketAddressSerializer\n+    extends StdScalarSerializer<InetSocketAddress>\n+{\n+    public final static InetSocketAddressSerializer instance = new InetSocketAddressSerializer();\n+\n+    public InetSocketAddressSerializer() { super(InetSocketAddress.class); }\n+\n+    @Override\n+    public void serialize(InetSocketAddress value, JsonGenerator jgen, SerializerProvider provider)\n+        throws IOException, JsonGenerationException\n+    {\n+        InetAddress addr = value.getAddress();\n+        String str = addr == null ? value.getHostName() : addr.toString().trim();\n+        int ix = str.indexOf('/');\n+        if (ix >= 0) {\n+            if (ix == 0) { // missing host name; use address\n+                str = addr instanceof Inet6Address\n+                        ? \"[\" + str.substring(1) + \"]\" // bracket IPv6 addresses with\n+                        : str.substring(1);\n+\n+            } else { // otherwise use name\n+                str = str.substring(0, ix);\n+            }\n+        }\n+\n+        jgen.writeString(str + \":\" + value.getPort());\n+    }\n+\n+    @Override\n+    public void serializeWithType(InetSocketAddress value, JsonGenerator jgen, SerializerProvider provider,\n+            TypeSerializer typeSer)\n+        throws IOException, JsonGenerationException\n+    {\n+        // Better ensure we don't use specific sub-classes...\n+        typeSer.writeTypePrefixForScalar(value, jgen, InetSocketAddress.class);\n+        serialize(value, jgen, provider);\n+        typeSer.writeTypeSuffixForScalar(value, jgen);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n         // should we try resolving host names? That requires connectivity... \n         final String HOST = \"www.ning.com\";\n         address = mapper.readValue(quote(HOST), InetAddress.class);\n+        assertEquals(HOST, address.getHostName());\n+    }\n+\n+    public void testInetSocketAddress() throws IOException\n+    {\n+        InetSocketAddress address = mapper.readValue(quote(\"127.0.0.1\"), InetSocketAddress.class);\n+        assertEquals(\"127.0.0.1\", address.getAddress().getHostAddress());\n+\n+        InetSocketAddress ip6 = mapper.readValue(\n+                quote(\"2001:db8:85a3:8d3:1319:8a2e:370:7348\"), InetSocketAddress.class);\n+        assertEquals(\"2001:db8:85a3:8d3:1319:8a2e:370:7348\", ip6.getAddress().getHostAddress());\n+\n+        InetSocketAddress ip6port = mapper.readValue(\n+                quote(\"[2001:db8:85a3:8d3:1319:8a2e:370:7348]:443\"), InetSocketAddress.class);\n+        assertEquals(\"2001:db8:85a3:8d3:1319:8a2e:370:7348\", ip6port.getAddress().getHostAddress());\n+        assertEquals(443, ip6port.getPort());\n+\n+        // should we try resolving host names? That requires connectivity...\n+        final String HOST = \"www.ning.com\";\n+        address = mapper.readValue(quote(HOST), InetSocketAddress.class);\n         assertEquals(HOST, address.getHostName());\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java\n import java.io.*;\n import java.math.BigDecimal;\n import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n import java.nio.charset.Charset;\n import java.util.*;\n import java.util.regex.Pattern;\n         assertEquals(quote(\"ning.com\"), MAPPER.writeValueAsString(InetAddress.getByName(\"ning.com\")));\n     }\n \n+    public void testInetSocketAddress() throws IOException\n+    {\n+        assertEquals(\n+                quote(\"127.0.0.1:8080\"),\n+                MAPPER.writeValueAsString(new InetSocketAddress(\"127.0.0.1\", 8080)));\n+        assertEquals(\n+                quote(\"ning.com:6667\"),\n+                MAPPER.writeValueAsString(new InetSocketAddress(\"ning.com\", 6667)));\n+        assertEquals(\n+                quote(\"[2001:db8:85a3:8d3:1319:8a2e:370:7348]:443\"),\n+                MAPPER.writeValueAsString(new InetSocketAddress(\"2001:db8:85a3:8d3:1319:8a2e:370:7348\", 443)));\n+    }\n+\n     // [JACKSON-597]\n     public void testClass() throws IOException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n import java.util.Collection;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;\n+import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n     public JsonDeserializer<?> getDelegatee() {\n         return null;\n     }\n+\n+    \n+    /**\n+     * Method needed by {@link BeanDeserializerFactory} to properly link\n+     * managed- and back-reference pairs.\n+     * \n+     * @since 2.2 (was moved out of <code>BeanDeserializerBase</code>)\n+     */\n+    public SettableBeanProperty findBackReference(String refName)\n+    {\n+        throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n+                +\"': type: value deserializer of type \"+getClass().getName()+\" does not support them\");\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n      * Method called by <code>BeanDeserializer</code> to resolve back reference\n      * part of managed references.\n      */\n-    public SettableBeanProperty findBackReference(String logicalName)\n-    {\n+    @Override\n+    public SettableBeanProperty findBackReference(String logicalName) {\n         return (_backRefProperties == null) ? null : _backRefProperties.get(logicalName);\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.impl.*;\n-import com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase;\n import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import com.fasterxml.jackson.databind.introspect.*;\n             return prop;\n         }\n         JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n-        SettableBeanProperty backProp = null;\n-        boolean isContainer = false;\n+        SettableBeanProperty backProp = valueDeser.findBackReference(refName);\n+\n+        // 04-Jul-2013, tatu: Before 'findBackReference()' in 'JsonDeserializer' had to cast;\n+        //   became unwieldy with delegating deserializer etc\n+        /*\n         if (valueDeser instanceof BeanDeserializerBase) {\n             backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n         } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n                     +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                     +valueDeser.getClass().getName());\n         }\n+        */\n         if (backProp == null) {\n             throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                     +prop.getType());\n         // also: verify that type is compatible\n         JavaType referredType = _beanType;\n         JavaType backRefType = backProp.getType();\n+        boolean isContainer = prop.getType().isContainerType();\n         if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n             throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                     +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n         }\n         return prop;\n     }\n-    \n     /**\n      * Method needed by {@link BeanDeserializerFactory} to properly link\n      * managed- and back-reference pairs.\n      */\n+    @Override\n     public SettableBeanProperty findBackReference(String logicalName)\n     {\n         if (_backRefs == null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java\n \n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n \n /**\n  * Intermediate base deserializer class that adds more shared accessor\n \n     /*\n     /**********************************************************\n+    /* Overrides\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public SettableBeanProperty findBackReference(String refName) {\n+        JsonDeserializer<Object> valueDeser = getContentDeserializer();\n+        if (valueDeser == null) {\n+            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n+                    +\"': type: container deserializer of type \"+getClass().getName()+\" returned null for 'getContentDeserializer()'\");\n+        }\n+        return valueDeser.findBackReference(refName);\n+    }\n+    \n+    /*\n+    /**********************************************************\n     /* Extended API\n     /**********************************************************\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n         return newDelegatingInstance(newDelegatee);\n     }\n \n+    @Override\n+    public SettableBeanProperty findBackReference(String logicalName) {\n+        // [Issue#253]: Hope this works....\n+        return _delegatee.findBackReference(logicalName);\n+    }\n+    \n     /*\n     /**********************************************************************\n     /* Overridden deserialization methods\n--- a/src/test/java/com/fasterxml/jackson/databind/convert/TestStringConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestStringConversions.java\n \n import static org.junit.Assert.*;\n \n+import com.fasterxml.jackson.core.Base64Variants;\n import com.fasterxml.jackson.databind.*;\n \n public class TestStringConversions\n         byte[] input = new byte[] { 1, 2, 3, 4, 5, 6, 7 };\n         String encoded = MAPPER.convertValue(input, String.class);\n         assertNotNull(encoded);\n+\n+        assertEquals(\"AQIDBAUGBw==\", encoded);\n+\n+        // plus, ensure this is consistent:\n+        assertEquals(Base64Variants.MIME.encode(input), encoded);\n+\n         byte[] result = MAPPER.convertValue(encoded, byte[].class);\n         assertArrayEquals(input, result);\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonToken;\n \n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.*;\n \n /**\n  * Basic tests for {@link JsonNode} implementations that\n         assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong());\n     }\n \n+    public void testBigDecimalAsPlain() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper()\n+                .enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)\n+                .enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);\n+        final String JSON = \"{\\\"x\\\":1e2}\";\n+        final JsonNode node = mapper.readTree(JSON);\n+        String result = mapper.writeValueAsString(node);\n+        assertEquals(\"{\\\"x\\\":100}\", result);\n+    }\n }", "timestamp": 1373044127, "metainfo": ""}