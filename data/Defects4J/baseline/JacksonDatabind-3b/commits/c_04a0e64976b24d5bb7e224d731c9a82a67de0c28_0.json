{"sha": "04a0e64976b24d5bb7e224d731c9a82a67de0c28", "log": "Fixed [JACKSON-824]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n     @Override\n     public Object deserialize(JsonParser jp, DeserializationContext ctxt, Object bean)\n         throws IOException, JsonProcessingException\n-    {        \n+    {\n         if (_injectables != null) {\n             injectValues(ctxt, bean);\n         }\n         }\n         if (_externalTypeIdHandler != null) {\n             return deserializeWithExternalTypeId(jp, ctxt, bean);\n+        }\n+        JsonToken t = jp.getCurrentToken();\n+        // 23-Mar-2010, tatu: In some cases, we start with full JSON object too...\n+        if (t == JsonToken.START_OBJECT) {\n+            t = jp.nextToken();\n         }\n         if (_needViewProcesing) {\n             Class<?> view = ctxt.getActiveView();\n             if (view != null) {\n                 return deserializeWithView(jp, ctxt, bean, view);\n             }\n-        }\n-        JsonToken t = jp.getCurrentToken();\n-        // 23-Mar-2010, tatu: In some cases, we start with full JSON object too...\n-        if (t == JsonToken.START_OBJECT) {\n-            t = jp.nextToken();\n         }\n         for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) {\n             String propName = jp.getCurrentName();\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestUntypedDeserialization.java\n+package com.fasterxml.jackson.databind;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Unit tests for verifying \"old\" data binding from JSON to JDK objects;\n+ * one that only uses core JDK types; wrappers, Maps and Lists.\n+ */\n+public class TestUntypedDeserialization\n+    extends com.fasterxml.jackson.test.BaseTest\n+{\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSampleDoc()\n+        throws Exception\n+    {\n+        final String JSON = SAMPLE_DOC_JSON_SPEC;\n+\n+        JsonFactory jf = new JsonFactory();\n+\n+        /* To get \"untyped\" Mapping (to Maps, Lists, instead of beans etc),\n+         * we'll specify plain old Object.class as the target.\n+         */\n+        Object root = new ObjectMapper().readValue(jf.createJsonParser(new StringReader(JSON)), Object.class);\n+\n+        assertType(root, Map.class);\n+        Map<?,?> rootMap = (Map<?,?>) root;\n+        assertEquals(1, rootMap.size());\n+        Map.Entry<?,?> rootEntry =  rootMap.entrySet().iterator().next();\n+        assertEquals(\"Image\", rootEntry.getKey());\n+        Object image = rootEntry.getValue();\n+        assertType(image, Map.class);\n+        Map<?,?> imageMap = (Map<?,?>) image;\n+        assertEquals(5, imageMap.size());\n+\n+        Object value = imageMap.get(\"Width\");\n+        assertType(value, Integer.class);\n+        assertEquals(Integer.valueOf(SAMPLE_SPEC_VALUE_WIDTH), value);\n+\n+        value = imageMap.get(\"Height\");\n+        assertType(value, Integer.class);\n+        assertEquals(Integer.valueOf(SAMPLE_SPEC_VALUE_HEIGHT), value);\n+\n+        assertEquals(SAMPLE_SPEC_VALUE_TITLE, imageMap.get(\"Title\"));\n+\n+        // Another Object, \"thumbnail\"\n+        value = imageMap.get(\"Thumbnail\");\n+        assertType(value, Map.class);\n+        Map<?,?> tnMap = (Map<?,?>) value;\n+        assertEquals(3, tnMap.size());\n+\n+        assertEquals(Integer.valueOf(SAMPLE_SPEC_VALUE_TN_HEIGHT), tnMap.get(\"Height\"));\n+        // for some reason, width is textual, not numeric...\n+        assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, tnMap.get(\"Width\"));\n+        assertEquals(SAMPLE_SPEC_VALUE_TN_URL, tnMap.get(\"Url\"));\n+\n+        // And then number list, \"IDs\"\n+        value = imageMap.get(\"IDs\");\n+        assertType(value, List.class);\n+        List<Object> ids = (List<Object>) value;\n+        assertEquals(4, ids.size());\n+        assertEquals(Integer.valueOf(SAMPLE_SPEC_VALUE_TN_ID1), ids.get(0));\n+        assertEquals(Integer.valueOf(SAMPLE_SPEC_VALUE_TN_ID2), ids.get(1));\n+        assertEquals(Integer.valueOf(SAMPLE_SPEC_VALUE_TN_ID3), ids.get(2));\n+        assertEquals(Integer.valueOf(SAMPLE_SPEC_VALUE_TN_ID4), ids.get(3));\n+\n+        // and that's all folks!\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestUntypedSerialization.java\n+package com.fasterxml.jackson.databind;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * This unit test suite tries verify simplest aspects of\n+ * \"Native\" java type mapper; basically that is can properly serialize\n+ * core JDK objects to JSON.\n+ */\n+public class TestUntypedSerialization\n+    extends BaseMapTest\n+{\n+    public void testFromArray()\n+        throws Exception\n+    {\n+        ArrayList<Object> doc = new ArrayList<Object>();\n+        doc.add(\"Elem1\");\n+        doc.add(Integer.valueOf(3));\n+        Map<String,Object> struct = new LinkedHashMap<String, Object>();\n+        struct.put(\"first\", Boolean.TRUE);\n+        struct.put(\"Second\", new ArrayList<Object>());\n+        doc.add(struct);\n+        doc.add(Boolean.FALSE);\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonFactory f =  new JsonFactory();\n+\n+        // loop more than once, just to ensure caching works ok (during second round)\n+        for (int i = 0; i < 3; ++i) {\n+            String str = mapper.writeValueAsString(doc);\n+            \n+            JsonParser jp = f.createJsonParser(str);\n+            assertEquals(JsonToken.START_ARRAY, jp.nextToken());\n+            \n+            assertEquals(JsonToken.VALUE_STRING, jp.nextToken());\n+            assertEquals(\"Elem1\", getAndVerifyText(jp));\n+            \n+            assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+            assertEquals(3, jp.getIntValue());\n+            \n+            assertEquals(JsonToken.START_OBJECT, jp.nextToken());\n+            assertEquals(JsonToken.FIELD_NAME, jp.nextToken());\n+            assertEquals(\"first\", getAndVerifyText(jp));\n+            \n+            assertEquals(JsonToken.VALUE_TRUE, jp.nextToken());\n+            assertEquals(JsonToken.FIELD_NAME, jp.nextToken());\n+            assertEquals(\"Second\", getAndVerifyText(jp));\n+            \n+            if (jp.nextToken() != JsonToken.START_ARRAY) {\n+                fail(\"Expected START_ARRAY: JSON == '\"+str+\"'\");\n+            }\n+            assertEquals(JsonToken.END_ARRAY, jp.nextToken());\n+            assertEquals(JsonToken.END_OBJECT, jp.nextToken());\n+            \n+            assertEquals(JsonToken.VALUE_FALSE, jp.nextToken());\n+            \n+            assertEquals(JsonToken.END_ARRAY, jp.nextToken());\n+            assertNull(jp.nextToken());\n+        }\n+    }\n+\n+    public void testFromMap()\n+        throws Exception\n+    {\n+        LinkedHashMap<String,Object> doc = new LinkedHashMap<String,Object>();\n+        JsonFactory f =  new JsonFactory();\n+\n+        doc.put(\"a1\", \"\\\"text\\\"\");\n+        doc.put(\"int\", Integer.valueOf(137));\n+        doc.put(\"foo bar\", Long.valueOf(1234567890L));\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        for (int i = 0; i < 3; ++i) {\n+            String str = mapper.writeValueAsString(doc);\n+            JsonParser jp = f.createJsonParser(str);\n+            \n+            assertEquals(JsonToken.START_OBJECT, jp.nextToken());\n+            \n+            assertEquals(JsonToken.FIELD_NAME, jp.nextToken());\n+            assertEquals(\"a1\", getAndVerifyText(jp));\n+            assertEquals(JsonToken.VALUE_STRING, jp.nextToken());\n+            assertEquals(\"\\\"text\\\"\", getAndVerifyText(jp));\n+            \n+            assertEquals(JsonToken.FIELD_NAME, jp.nextToken());\n+            assertEquals(\"int\", getAndVerifyText(jp));\n+            assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+            assertEquals(137, jp.getIntValue());\n+            \n+            assertEquals(JsonToken.FIELD_NAME, jp.nextToken());\n+            assertEquals(\"foo bar\", getAndVerifyText(jp));\n+            assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+            assertEquals(1234567890L, jp.getLongValue());\n+            \n+            assertEquals(JsonToken.END_OBJECT, jp.nextToken());\n+\n+            assertNull(jp.nextToken());\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateValue.java\n+package com.fasterxml.jackson.databind.convert;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonView;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+/**\n+ * Unit tests for verifying that \"updating reader\" works as\n+ * expected.\n+ */\n+public class TestUpdateValue extends BaseMapTest\n+{\n+    /*\n+    /********************************************************\n+    /* Helper types\n+    /********************************************************\n+     */\n+\n+    static class Bean {\n+        public String a = \"a\";\n+        public String b = \"b\";\n+\n+        public int[] c = new int[] { 1, 2, 3 };\n+\n+        public Bean child = null;\n+    }\n+\n+    static class XYBean {\n+        public int x, y;\n+    }\n+\n+    // [JACKSON-824]\n+    public class TextView {}\n+    public class NumView {}\n+\n+    public class Updateable {\n+        @JsonView(NumView.class)\n+        public int num;\n+\n+        @JsonView(TextView.class)\n+        public String str;\n+    }\n+        \n+    /*\n+    /********************************************************\n+    /* Unit tests\n+    /********************************************************\n+     */\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public void testBeanUpdate() throws Exception\n+    {\n+        Bean bean = new Bean();\n+        assertEquals(\"b\", bean.b);\n+        assertEquals(3, bean.c.length);\n+        assertNull(bean.child);\n+\n+        Object ob = MAPPER.readerForUpdating(bean).readValue(\"{ \\\"b\\\":\\\"x\\\", \\\"c\\\":[4,5], \\\"child\\\":{ \\\"a\\\":\\\"y\\\"} }\");\n+        assertSame(ob, bean);\n+\n+        assertEquals(\"a\", bean.a);\n+        assertEquals(\"x\", bean.b);\n+        assertArrayEquals(new int[] { 4, 5 }, bean.c);\n+\n+        Bean child = bean.child;\n+        assertNotNull(child);\n+        assertEquals(\"y\", child.a);\n+        assertEquals(\"b\", child.b);\n+        assertArrayEquals(new int[] { 1, 2, 3 }, child.c);\n+        assertNull(child.child);\n+    }\n+\n+    public void testListUpdate() throws Exception\n+    {\n+        List<String> strs = new ArrayList<String>();\n+        strs.add(\"a\");\n+        // for lists, we will be appending entries\n+        Object ob = MAPPER.readerForUpdating(strs).readValue(\"[ \\\"b\\\", \\\"c\\\", \\\"d\\\" ]\");\n+        assertSame(strs, ob);\n+        assertEquals(4, strs.size());\n+        assertEquals(\"a\", strs.get(0));\n+        assertEquals(\"b\", strs.get(1));\n+        assertEquals(\"c\", strs.get(2));\n+        assertEquals(\"d\", strs.get(3));\n+    }\n+\n+    public void testMapUpdate() throws Exception\n+    {\n+        Map<String,String> strs = new HashMap<String,String>();\n+        strs.put(\"a\", \"a\");\n+        strs.put(\"b\", \"b\");\n+        // for maps, we will be adding and/or overwriting entries\n+        Object ob = MAPPER.readerForUpdating(strs).readValue(\"{ \\\"c\\\" : \\\"c\\\", \\\"a\\\" : \\\"z\\\" }\");\n+        assertSame(strs, ob);\n+        assertEquals(3, strs.size());\n+        assertEquals(\"z\", strs.get(\"a\"));\n+        assertEquals(\"b\", strs.get(\"b\"));\n+        assertEquals(\"c\", strs.get(\"c\"));\n+    }\n+\n+    // Test for [JACKSON-717] -- ensure 'readValues' also does update\n+    public void testUpdateSequence() throws Exception\n+    {\n+        XYBean toUpdate = new XYBean();\n+        Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues(\n+                \"{\\\"x\\\":1,\\\"y\\\":2}\\n{\\\"x\\\":16}{\\\"y\\\":37}\");\n+\n+        assertTrue(it.hasNext());\n+        XYBean value = it.next();\n+        assertSame(toUpdate, value);\n+        assertEquals(1, value.x);\n+        assertEquals(2, value.y);\n+\n+        assertTrue(it.hasNext());\n+        value = it.next();\n+        assertSame(toUpdate, value);\n+        assertEquals(16, value.x);\n+        assertEquals(2, value.y); // unchanged\n+\n+        assertTrue(it.hasNext());\n+        value = it.next();\n+        assertSame(toUpdate, value);\n+        assertEquals(16, value.x); // unchanged\n+        assertEquals(37, value.y);\n+        \n+        assertFalse(it.hasNext());\n+    }\n+\n+    // [JACKSON-824]\n+    public void testUpdatingWithViews() throws Exception\n+    {\n+        Updateable bean = new Updateable();\n+        bean.num = 100;\n+        bean.str = \"test\";\n+        Updateable result = MAPPER.readerForUpdating(bean)\n+                .withView(TextView.class)\n+                .readValue(\"{\\\"num\\\": 10, \\\"str\\\":\\\"foobar\\\"}\");    \n+        assertSame(bean, result);\n+\n+        assertEquals(100, bean.num);\n+        assertEquals(\"foobar\", bean.str);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java\n package com.fasterxml.jackson.databind.ser;\n \n import java.io.*;\n+import java.math.BigDecimal;\n import java.net.InetAddress;\n import java.nio.charset.Charset;\n import java.util.*;\n     extends com.fasterxml.jackson.databind.BaseMapTest\n {\n     private final ObjectMapper MAPPER = new ObjectMapper();\n+    \n+    /**\n+     * Unit test to catch bug [JACKSON-8].\n+     */\n+    public void testBigDecimal()\n+        throws Exception\n+    {\n+        Map<String, Object> map = new HashMap<String, Object>();\n+        String PI_STR = \"3.14159265\";\n+        map.put(\"pi\", new BigDecimal(PI_STR));\n+        String str = MAPPER.writeValueAsString(map);\n+        assertEquals(\"{\\\"pi\\\":3.14159265}\", str);\n+    }\n     \n     /**\n      * Unit test related to [JACKSON-155]", "timestamp": 1335850197, "metainfo": ""}