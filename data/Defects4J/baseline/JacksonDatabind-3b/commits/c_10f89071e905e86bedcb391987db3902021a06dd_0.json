{"sha": "10f89071e905e86bedcb391987db3902021a06dd", "log": "Added failing test about defensive copying with object id.", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n package com.fasterxml.jackson.databind.struct;\n \n+import java.util.ArrayList;\n import java.util.EnumMap;\n import java.util.HashMap;\n import java.util.Iterator;\n \n         static enum FooEnum {\n             A, B\n+        }\n+    }\n+\n+    static class DefensiveCompany {\n+        public List<DefensiveEmployee> employees;\n+\n+        static class DefensiveEmployee extends Employee {\n+\n+            public void setReports(List<DefensiveEmployee> reports)\n+            {\n+                this.reports = new ArrayList<TestObjectId.Employee>(reports);\n+            }\n         }\n     }\n \n         assertEmployees(firstEmployee, secondEmployee);\n     }\n \n+    public void testForwardReferenceWithDefensiveCopy()\n+        throws Exception\n+    {\n+        String json = \"{\\\"employees\\\":[\" + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n+                + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\" + \"]}\";\n+        DefensiveCompany company = mapper.readValue(json, DefensiveCompany.class);\n+        assertEquals(2, company.employees.size());\n+        Employee firstEmployee = company.employees.get(0);\n+        Employee secondEmployee = company.employees.get(1);\n+        assertEmployees(firstEmployee, secondEmployee);\n+    }\n+\n     private void assertEmployees(Employee firstEmployee, Employee secondEmployee)\n     {\n         assertEquals(1, firstEmployee.id);\n         assertEquals(2, secondEmployee.id);\n+        assertEquals(1, firstEmployee.reports.size());\n         assertSame(secondEmployee, firstEmployee.reports.get(0)); // Ensure that forward reference was properly resolved and in order.\n         assertSame(firstEmployee, secondEmployee.manager); // And that back reference is also properly resolved.\n     }", "timestamp": 1389625653, "metainfo": ""}