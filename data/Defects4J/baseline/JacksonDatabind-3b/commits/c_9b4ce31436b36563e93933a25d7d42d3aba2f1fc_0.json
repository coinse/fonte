{"sha": "9b4ce31436b36563e93933a25d7d42d3aba2f1fc", "log": "Commit ObjectArrayDeserializer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n         if (custom != null) {\n             return custom;\n         }\n-        return new ObjectArrayDeserializer(type, property, contentDeser, elemTypeDeser);\n+        return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n     }\n \n     protected JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type,\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.JsonToken;\n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n-import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n public class JdkDeserializers\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n+import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.type.ArrayType;\n import com.fasterxml.jackson.databind.util.ObjectBuffer;\n @JacksonStdImpl\n public class ObjectArrayDeserializer\n     extends ContainerDeserializerBase<Object[]>\n-    implements ResolvableDeserializer\n+    implements ContextualDeserializer\n {\n     // // Configuration\n \n     /**\n      * Full generic type of the array being deserialized\n      */\n-    protected final JavaType _arrayType;\n-\n-    /**\n-     * Bean property for which deserializer was created; null\n-     * for root-level deserializers.\n-     */\n-    protected final BeanProperty _property;\n+    protected final ArrayType _arrayType;\n     \n     /**\n      * Flag that indicates whether the component type is Object or not.\n      */\n     protected final TypeDeserializer _elementTypeDeserializer;\n \n-    public ObjectArrayDeserializer(ArrayType arrayType, BeanProperty prop,\n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+    \n+    public ObjectArrayDeserializer(ArrayType arrayType,\n             JsonDeserializer<Object> elemDeser, TypeDeserializer elemTypeDeser)\n     {\n         super(Object[].class);\n         _arrayType = arrayType;\n-        _property = prop;\n         _elementClass = arrayType.getContentType().getRawClass();\n         _untyped = (_elementClass == Object.class);\n         _elementDeserializer = elemDeser;\n         _elementTypeDeserializer = elemTypeDeser;\n     }\n \n+    /**\n+     * Overridable fluent-factory method used to create contextual instances\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    protected ObjectArrayDeserializer withDeserializer(JsonDeserializer<?> deser) {\n+        return new ObjectArrayDeserializer(_arrayType,\n+                (JsonDeserializer<Object>) deser, _elementTypeDeserializer);\n+    }\n+\n+    @Override\n+    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n+            BeanProperty property) throws JsonMappingException\n+    {\n+        JsonDeserializer<Object> deser = _elementDeserializer;\n+        if (deser != null) {\n+            return this;\n+        }\n+        return withDeserializer(ctxt.findValueDeserializer(_arrayType.getContentType(), property));\n+    }\n+    \n     /*\n     /**********************************************************\n     /* ContainerDeserializerBase API\n          */\n         return (Object[]) typeDeserializer.deserializeTypedFromArray(jp, ctxt);\n     }\n-\n-    @Override\n-    public void resolve(DeserializationContext ctxt) throws JsonMappingException\n-    {\n-        if (_elementDeserializer == null) {\n-            _elementDeserializer = ctxt.findValueDeserializer(_arrayType.getContentType(), _property);\n-        }\n-    }\n     \n     /*\n     /**********************************************************", "timestamp": 1327942756, "metainfo": ""}