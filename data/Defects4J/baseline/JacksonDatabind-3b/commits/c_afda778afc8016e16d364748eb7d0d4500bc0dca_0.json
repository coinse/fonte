{"sha": "afda778afc8016e16d364748eb7d0d4500bc0dca", "log": "More simplification, remove ref to optional handler factory", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.deser.impl.CreatorCollector;\n import com.fasterxml.jackson.databind.deser.std.*;\n-import com.fasterxml.jackson.databind.ext.OptionalHandlerFactory;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n         _collectionFallbacks.put(java.util.Deque.class.getName(), LinkedList.class);\n         _collectionFallbacks.put(java.util.NavigableSet.class.getName(), TreeSet.class);\n     }\n-\n-    /**\n-     * To support external/optional deserializers, we'll use a helper class\n-     */\n-    protected OptionalHandlerFactory optionalHandlers = OptionalHandlerFactory.instance;\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n import com.fasterxml.jackson.databind.deser.impl.*;\n import com.fasterxml.jackson.databind.deser.std.JdkDeserializers;\n import com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer;\n+import com.fasterxml.jackson.databind.ext.OptionalHandlerFactory;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n         }\n \n         // Otherwise, may want to check handlers for standard types, from superclass:\n-        JsonDeserializer<Object> deser = findStdDeserializer(ctxt, type, beanDesc);\n+        @SuppressWarnings(\"unchecked\")\n+        JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n         if (deser != null) {\n             return deser;\n         }\n      * Method called by {@link BeanDeserializerFactory} to see if there might be a standard\n      * deserializer registered for given type.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    protected JsonDeserializer<Object> findStdDeserializer(DeserializationContext ctxt,\n+    protected JsonDeserializer<?> findStdDeserializer(DeserializationContext ctxt,\n             JavaType type, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n-        // note: we do NOT check for custom deserializers here; that's for sub-class to do\n+        // note: we do NOT check for custom deserializers here, caller has already\n+        // done that\n         JsonDeserializer<?> deser = findDefaultDeserializer(ctxt, type, beanDesc);\n         if (deser != null) {\n-            return (JsonDeserializer<Object>) deser;\n+            return deser;\n         }\n         \n         Class<?> cls = type.getRawClass();\n             } else {\n                 referencedType = params[0];\n             }\n-            \n-            JsonDeserializer<?> d2 = new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n-            return (JsonDeserializer<Object>)d2;\n-        }\n-        // [JACKSON-386]: External/optional type handlers are handled somewhat differently\n-        JsonDeserializer<?> d = optionalHandlers.findDeserializer(type, ctxt.getConfig());\n-        if (d != null) {\n-            return (JsonDeserializer<Object>)d;\n-        }\n-        return null;\n+            return new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n+        }\n+        return findOptionalStdDeserializer(ctxt, type, beanDesc);\n+    }\n+\n+    /**\n+     * Overridable method called after checking all other types.\n+     * \n+     * @since 2.2\n+     */\n+    protected JsonDeserializer<?> findOptionalStdDeserializer(DeserializationContext ctxt,\n+            JavaType type, BeanDescription beanDesc)\n+        throws JsonMappingException\n+    {\n+        return OptionalHandlerFactory.instance.findDeserializer(type, ctxt.getConfig());\n     }\n     \n     protected JavaType materializeAbstractType(DeserializationContext ctxt,\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n  * no additional introspection or customizability of these types,\n  * this factory is essentially stateless.\n  */\n+@SuppressWarnings(\"serial\")\n public abstract class BasicSerializerFactory\n     extends SerializerFactory\n     implements java.io.Serializable\n {\n-    private static final long serialVersionUID = -8456593361776004077L;\n-\n     /*\n     /**********************************************************\n     /* Configuration, lookup tables/maps\n      * factory), new version created via copy-constructor (fluent-style)\n      */\n     protected final SerializerFactoryConfig _factoryConfig;\n-    \n-    /**\n-     * Helper object used to deal with serializers for optional JDK types (like ones\n-     * omitted from GAE, Android)\n-     */\n-    protected OptionalHandlerFactory optionalHandlers = OptionalHandlerFactory.instance;\n \n     /*\n     /**********************************************************\n         }\n         \n         // Then check for optional/external serializers [JACKSON-386]\n-        JsonSerializer<?> ser = optionalHandlers.findSerializer(prov.getConfig(), type);\n+        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n         if (ser != null) {\n             return ser;\n         }\n             return DateSerializer.instance;\n         }\n         return null;\n+    }\n+\n+    /**\n+     * Overridable method called after checking all other types.\n+     * \n+     * @since 2.2\n+     */\n+    protected JsonSerializer<?> findOptionalStdSerializer(SerializerProvider prov, \n+            JavaType type, BeanDescription beanDesc, boolean staticTyping)\n+        throws JsonMappingException\n+    {\n+        return OptionalHandlerFactory.instance.findSerializer(prov.getConfig(), type);\n     }\n         \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n     }\n \n     /*\n-     ********************************************************\n-     * Serializers for atomic types\n-     ********************************************************\n+    /**********************************************************\n+    /* Serializers for atomic types\n+    /**********************************************************\n      */\n \n     public final static class AtomicBooleanSerializer", "timestamp": 1366083388, "metainfo": ""}