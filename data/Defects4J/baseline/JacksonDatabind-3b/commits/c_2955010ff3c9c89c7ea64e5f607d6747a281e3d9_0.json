{"sha": "2955010ff3c9c89c7ea64e5f607d6747a281e3d9", "log": "Improve manual perf tests to compare as-array serialization", "commit": "\n--- a/src/test/java/perf/ManualObjectReaderPerf.java\n+++ b/src/test/java/perf/ManualObjectReaderPerf.java\n {\n     protected int hash;\n     \n-    private <T> void test(ObjectMapper mapper, T inputValue, Class<T> inputClass)\n+    private <T1, T2> void test(ObjectMapper mapper,\n+            T1 inputValue1, Class<T1> inputClass1,\n+            T2 inputValue2, Class<T2> inputClass2)\n         throws Exception\n     {\n-        final byte[] input = mapper.writeValueAsBytes(inputValue);\n+        final byte[] jsonInput = mapper.writeValueAsBytes(inputValue1);\n+        final byte[] arrayInput = mapper.writeValueAsBytes(inputValue2);\n         \n         // Let's try to guestimate suitable size... to get to N megs to process\n-        final int REPS = (int) ((double) (8 * 1000 * 1000) / (double) input.length);\n+        final int REPS = (int) ((double) (8 * 1000 * 1000) / (double) jsonInput.length);\n \n-        System.out.println(\"Read \"+input.length+\" bytes to hash; will do \"+REPS+\" repetitions\");\n+        System.out.printf(\"Read %d bytes to bind (%d as array); will do %d repetitions\\n\",\n+                jsonInput.length, arrayInput.length, REPS);\n \n-        final ObjectReader cachingReader = mapper.reader(inputClass);\n-        final ObjectReader nonCachingReader = mapper.reader()\n-                .without(DeserializationFeature.EAGER_DESERIALIZER_FETCH)\n-                .withType(inputClass);\n+        final ObjectReader reader0 = mapper.reader()\n+                .with(DeserializationFeature.EAGER_DESERIALIZER_FETCH);\n+\n+        final ObjectReader jsonReader = reader0.withType(inputClass1);\n+        final ObjectReader arrayReader = reader0.withType(inputClass2);\n         \n         int i = 0;\n         int roundsDone = 0;\n             \n             switch (round) {\n             case 0:\n-                msg = \"Pre-fetch\";\n-                msecs = testDeser(REPS, input, cachingReader);\n+                msg = \"JSON-as-Object\";\n+                msecs = testDeser(REPS, jsonInput, jsonReader);\n                 break;\n             case 1:\n-                msg = \"NO pre-fetch\";\n-                msecs = testDeser(REPS, input, nonCachingReader);\n+                msg = \"JSON-as-Array\";\n+                msecs = testDeser(REPS, arrayInput, arrayReader);\n                 break;\n             default:\n                 throw new Error();\n                 ++roundsDone;\n                 if ((roundsDone % 3) == 0 && roundsDone > WARMUP_ROUNDS) {\n                     double den = (double) (roundsDone - WARMUP_ROUNDS);\n-                    System.out.printf(\"Averages after %d rounds (pre / no): %.1f / %.1f msecs\\n\",\n+                    System.out.printf(\"Averages after %d rounds (Object / Array): %.1f / %.1f msecs\\n\",\n                             (int) den,\n                             times[0] / den, times[1] / den);\n                             \n             System.exit(1);\n         }\n         Record input = new Record(44, \"BillyBob\", \"Bumbler\", 'm', true);\n+        RecordAsArray input2 = new RecordAsArray(44, \"BillyBob\", \"Bumbler\", 'm', true);\n         ObjectMapper m = new ObjectMapper();\n-        new ManualObjectReaderPerf().test(m, input, Record.class);\n+        new ManualObjectReaderPerf().test(m,\n+                input, Record.class,\n+                input2, RecordAsArray.class);\n     }\n }\n--- a/src/test/java/perf/ManualObjectWriterPerf.java\n+++ b/src/test/java/perf/ManualObjectWriterPerf.java\n {\n     protected int hash;\n     \n-    private <T> void test(ObjectMapper mapper, T inputValue, Class<T> inputClass)\n+    private <T1, T2> void test(ObjectMapper mapper,\n+            T1 inputValue1, Class<T1> inputClass1,\n+            T2 inputValue2, Class<T2> inputClass2)\n         throws Exception\n     {\n         final int REPS;\n         {\n-            final byte[] input = mapper.writeValueAsBytes(inputValue);\n+            final byte[] input1 = mapper.writeValueAsBytes(inputValue1);\n+            final byte[] input2 = mapper.writeValueAsBytes(inputValue2);\n             \n             // Let's try to guestimate suitable size, N megs of output\n-            REPS = (int) ((double) (9 * 1000 * 1000) / (double) input.length);\n-            System.out.println(\"Read \"+input.length+\" bytes to hash; will do \"+REPS+\" repetitions\");\n+            REPS = (int) ((double) (9 * 1000 * 1000) / (double) input1.length);\n+            System.out.printf(\"Read %d bytes to bind (%d as array); will do %d repetitions\\n\",\n+                    input1.length, input2.length, REPS);\n         }\n \n-        final ObjectWriter prefetching = mapper.writerWithType(inputClass);\n-        final ObjectWriter nonPrefetching = mapper.writer()\n-                .without(SerializationFeature.EAGER_SERIALIZER_FETCH)\n-                .withType(inputClass);\n+        final ObjectWriter writer0 = mapper.writer().with(SerializationFeature.EAGER_SERIALIZER_FETCH);\n+        final ObjectWriter jsonWriter = writer0.withType(inputClass1);\n+        final ObjectWriter arrayWriter = writer0.withType(inputClass2);\n         \n         int i = 0;\n         int roundsDone = 0;\n \n             long msecs;\n             ObjectWriter writer;\n+            Object value;\n             \n             switch (round) {\n             case 0:\n-                msg = \"Pre-fetch\";\n-                writer = prefetching;\n+                msg = \"JSON-as-Object\";\n+                writer = jsonWriter;\n+                value = inputValue1;\n                 break;\n             case 1:\n-                msg = \"NO pre-fetch\";\n-                writer = nonPrefetching;\n+                msg = \"JSON-as-Array\";\n+                writer = arrayWriter;\n+                value = inputValue2;\n                 break;\n             default:\n                 throw new Error();\n             }\n-            msecs = testSer(REPS, inputValue, writer, out);\n+            msecs = testSer(REPS, value, writer, out);\n \n             // skip first 5 rounds to let results stabilize\n             if (roundsDone >= WARMUP_ROUNDS) {\n             System.err.println(\"Usage: java ...\");\n             System.exit(1);\n         }\n-        Record input = new Record(44, \"BillyBob\", \"Bumbler\", 'm', true);\n+        Record input1 = new Record(44, \"BillyBob\", \"Bumbler\", 'm', true);\n+        RecordAsArray input2 = new RecordAsArray(44, \"BillyBob\", \"Bumbler\", 'm', true);\n         ObjectMapper m = new ObjectMapper();\n-        new ManualObjectWriterPerf().test(m, input, Record.class);\n+        new ManualObjectWriterPerf().test(m,\n+                input1, Record.class, input2, RecordAsArray.class);\n     }\n }\n--- a/src/test/java/perf/Record.java\n+++ b/src/test/java/perf/Record.java\n /**\n  * Simple test class \n  */\n-final class Record\n+final class Record extends RecordBase\n {\n-    public int age;\n-    public String firstName, lastName;\n-    public char gender;\n-    public boolean insured;\n-\n-    public Record() { }\n+    protected Record() { super(); }\n+    \n     public Record(int a, String fn, String ln, char g, boolean ins)\n     {\n-        age = a;\n-        firstName = fn;\n-        lastName = ln;\n-        gender = g;\n-        insured = ins;\n+        super(a, fn, ln, g, ins);\n     }\n }\n--- /dev/null\n+++ b/src/test/java/perf/RecordAsArray.java\n+package perf;\n+\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+\n+@JsonFormat(shape=JsonFormat.Shape.ARRAY)\n+final class RecordAsArray extends RecordBase\n+{\n+    protected RecordAsArray() { super(); }\n+    \n+    public RecordAsArray(int a, String fn, String ln, char g, boolean ins)\n+    {\n+        super(a, fn, ln, g, ins);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/perf/RecordBase.java\n+package perf;\n+\n+public class RecordBase\n+{\n+    public int age;\n+    public String firstName, lastName;\n+    public char gender;\n+    public boolean insured;\n+\n+    protected RecordBase() { }\n+    protected RecordBase(int a, String fn, String ln, char g, boolean ins)\n+    {\n+        age = a;\n+        firstName = fn;\n+        lastName = ln;\n+        gender = g;\n+        insured = ins;\n+    }\n+}", "timestamp": 1342749166, "metainfo": ""}