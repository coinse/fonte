{"sha": "1dcce980954c9acef708aa9a0a128f04564bdd25", "log": "Bit more renaming for consistency", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n                     // usually should be class, but may be just plain Enum<?> (for Enum.valueOf()?)\n                     if (returnType.isAssignableFrom(enumClass)) {\n                         // note: mostly copied from 'EnumDeserializer.deserializerForCreator(...)'\n-                        if (factory.getParameterType(0) != String.class) {\n+                        if (factory.getGenericParameterType(0) != String.class) {\n                             throw new IllegalArgumentException(\"Parameter #0 type for factory method (\"+factory+\") not suitable, must be java.lang.String\");\n                         }\n                         if (config.canOverrideAccessModifiers()) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n         AnnotatedMethod am = beanDesc.findMethod(\"initCause\", INIT_CAUSE_PARAMS);\n         if (am != null) { // should never be null\n             SettableBeanProperty prop = constructSettableProperty(ctxt, beanDesc, \"cause\", am,\n-                    am.getParameterType(0));\n+                    am.getGenericParameterType(0));\n             if (prop != null) {\n                 /* 21-Aug-2011, tatus: We may actually have found 'cause' property\n                  *   to set (with new 1.9 code)... but let's replace it just in case,\n         }\n     \n         // otherwise either 'simple' number, String, or general delegate:\n-        Class<?> type = ctor.getParameterClass(0);\n+        Class<?> type = ctor.getRawParameterType(0);\n         if (type == String.class) {\n             if (isCreator || isVisible) {\n                 creators.addStringCreator(ctor);\n             AnnotatedMethod factory, boolean isCreator)\n         throws JsonMappingException\n     {\n-        Class<?> type = factory.getParameterClass(0);\n+        Class<?> type = factory.getRawParameterType(0);\n         \n         if (type == String.class) {\n             if (isCreator || vchecker.isCreatorVisible(factory)) {\n             Type propertyType;\n             if (property.hasSetter()) {\n                 AnnotatedMethod setter = property.getSetter();\n-                rawPropertyType = setter.getParameterClass(0);\n-                propertyType = setter.getParameterType(0);\n+                rawPropertyType = setter.getRawParameterType(0);\n+                propertyType = setter.getGenericParameterType(0);\n                 accessor = setter;\n             } else if (property.hasField()) {\n                 accessor = property.getField();\n                 AnnotatedMember m = en.getValue();\n                 Type genericType;\n                 if (m instanceof AnnotatedMethod) {\n-                    genericType = ((AnnotatedMethod) m).getParameterType(0);\n+                    genericType = ((AnnotatedMethod) m).getGenericParameterType(0);\n                 } else {\n                     genericType = m.getRawType();\n                 }\n             setter.fixAccess(); // to ensure we can call it\n         }\n         // we know it's a 2-arg method, second arg is the value\n-        JavaType type = beanDesc.bindingsForBeanType().resolveType(setter.getParameterType(1));\n+        JavaType type = beanDesc.bindingsForBeanType().resolveType(setter.getGenericParameterType(1));\n         BeanProperty.Std property = new BeanProperty.Std(setter.getName(), type, beanDesc.getClassAnnotations(), setter);\n         type = resolveType(ctxt, beanDesc, type, setter, property);\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n                 }\n             }\n             TypeBindings bindings = _beanDesc.bindingsForBeanType();\n-            delegateType = bindings.resolveType(_delegateCreator.getParameterType(ix));\n+            delegateType = bindings.resolveType(_delegateCreator.getGenericParameterType(ix));\n         }\n         \n         inst.configureFromObjectSettings(_defaultConstructor,\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n             Class<?> enumClass, AnnotatedMethod factory)\n     {\n         // note: caller has verified there's just one arg; but we must verify its type\n-        if (factory.getParameterType(0) != String.class) {\n+        if (factory.getGenericParameterType(0) != String.class) {\n             throw new IllegalArgumentException(\"Parameter #0 type for factory method (\"+factory+\") not suitable, must be java.lang.String\");\n         }\n         if (config.canOverrideAccessModifiers()) {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n                 while (it.hasNext()) {\n                     AnnotatedMethod mixIn = it.next();\n                     try {\n-                        Method m = Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getParameterClasses());\n+                        Method m = Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getRawParameterTypes());\n                         if (m != null) {\n                             AnnotatedMethod am = _constructMethod(m);\n                             _addMixOvers(mixIn.getAnnotated(), am, false);\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java\n     }\n \n     @Override\n-    public Class<?> getParameterClass(int index)\n+    public Class<?> getRawParameterType(int index)\n     {\n         Class<?>[] types = _constructor.getParameterTypes();\n         return (index >= types.length) ? null : types[index];\n     }\n \n     @Override\n-    public Type getParameterType(int index)\n+    public Type getGenericParameterType(int index)\n     {\n         Type[] types = _constructor.getGenericParameterTypes();\n         return (index >= types.length) ? null : types[index];\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n \n     @Override\n     public int getParameterCount() {\n-        return getParameterClasses().length;\n-    }\n-\n-    public Type[] getParameterTypes() {\n-        return _method.getGenericParameterTypes();\n-    }\n-\n-    @Override\n-    public Class<?> getParameterClass(int index)\n-    {\n-        Class<?>[] types = getParameterClasses();\n-        return (index >= types.length) ? null : types[index];\n-    }\n-\n-    @Override\n-    public Type getParameterType(int index)\n-    {\n-        Type[] types = _method.getGenericParameterTypes();\n-        return (index >= types.length) ? null : types[index];\n-    }\n-\n-    public Type getGenericReturnType() {\n-        return _method.getGenericReturnType();\n-    }\n-    \n-    public Class<?> getRawReturnType() {\n-        return _method.getReturnType();\n-    }\n-    \n-    public Class<?>[] getParameterClasses()\n+        return getRawParameterTypes().length;\n+    }\n+\n+    public String getFullName() {\n+        return getDeclaringClass().getName() + \"#\" + getName() + \"(\"\n+            +getParameterCount()+\" params)\";\n+    }\n+    \n+    public Class<?>[] getRawParameterTypes()\n     {\n         if (_paramClasses == null) {\n             _paramClasses = _method.getParameterTypes();\n         }\n         return _paramClasses;\n     }\n-\n-    //public Type getGenericReturnType() { return _method.getGenericReturnType(); }\n-\n-    //public Class<?> getReturnType() { return _method.getReturnType(); }\n-\n-    public String getFullName() {\n-        return getDeclaringClass().getName() + \"#\" + getName() + \"(\"\n-            +getParameterCount()+\" params)\";\n+    \n+    public Type[] getGenericParameterTypes() {\n+        return _method.getGenericParameterTypes();\n+    }\n+\n+    @Override\n+    public Class<?> getRawParameterType(int index)\n+    {\n+        Class<?>[] types = getRawParameterTypes();\n+        return (index >= types.length) ? null : types[index];\n+    }\n+\n+    @Override\n+    public Type getGenericParameterType(int index)\n+    {\n+        Type[] types = _method.getGenericParameterTypes();\n+        return (index >= types.length) ? null : types[index];\n+    }\n+\n+    public Class<?> getRawReturnType() {\n+        return _method.getReturnType();\n+    }\n+    \n+    public Type getGenericReturnType() {\n+        return _method.getGenericReturnType();\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java\n     }\n \n     public final AnnotatedParameter getParameter(int index) {\n-        return new AnnotatedParameter(this, getParameterType(index),\n+        return new AnnotatedParameter(this, getGenericParameterType(index),\n                 getParameterAnnotations(index), index);\n     }\n \n     public abstract int getParameterCount();\n \n-    public abstract Class<?> getParameterClass(int index);\n+    public abstract Class<?> getRawParameterType(int index);\n \n-    public abstract Type getParameterType(int index);\n+    public abstract Type getGenericParameterType(int index);\n \n     /**\n      * Method called to fully resolve type of one of parameters, given\n      * specified type variable bindings.\n      */\n     public final JavaType resolveParameterType(int index, TypeBindings bindings) {\n-        return bindings.resolveType(getParameterType(index));\n+        return bindings.resolveType(getGenericParameterType(index));\n     }\n     \n     public final int getAnnotationCount() { return _annotations.size(); }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n              *  requested; easy enough for devs to add support within\n              *  method.\n              */\n-            Class<?> type = _anySetterMethod.getParameterClass(0);\n+            Class<?> type = _anySetterMethod.getRawParameterType(0);\n             if (type != String.class && type != Object.class) {\n                 throw new IllegalArgumentException(\"Invalid 'any-setter' annotation on method \"+_anySetterMethod.getName()+\"(): first argument not of type String or Object, but \"+type.getName());\n             }\n              * that may change; thus leaving here for now)\n              */\n             if (ac.getParameterCount() == 1) {\n-                Class<?> actArg = ac.getParameterClass(0);\n+                Class<?> actArg = ac.getRawParameterType(0);\n                 for (Class<?> expArg : argTypes) {\n                     if (expArg == actArg) {\n                         return ac.getAnnotated();\n         for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n             if (isFactoryMethod(am)) {\n                 // And must take one of expected arg types (or supertype)\n-                Class<?> actualArgType = am.getParameterClass(0);\n+                Class<?> actualArgType = am.getRawParameterType(0);\n                 for (Class<?> expArgType : expArgTypes) {\n                     // And one that matches what we would pass in\n                     if (actualArgType.isAssignableFrom(expArgType)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n             if (am.getParameterCount() == 0) {\n                 return m.getRawType().getName();\n             }\n-            return am.getParameterClass(0).getName();\n+            return am.getRawParameterType(0).getName();\n         }\n         return id;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/util/BeanUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/BeanUtil.java\n      */\n     protected static boolean isGroovyMetaClassSetter(AnnotatedMethod am)\n     {\n-        Class<?> argType = am.getParameterClass(0);\n+        Class<?> argType = am.getRawParameterType(0);\n         Package pkg = argType.getPackage();\n         if (pkg != null && pkg.getName().startsWith(\"groovy.lang\")) {\n             return true;", "timestamp": 1327609996, "metainfo": ""}