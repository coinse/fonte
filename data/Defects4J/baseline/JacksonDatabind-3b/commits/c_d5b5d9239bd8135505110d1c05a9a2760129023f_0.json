{"sha": "d5b5d9239bd8135505110d1c05a9a2760129023f", "log": "Clean up for ArrayNode, to allow non-ArrayList Lists to be used", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n public class ArrayNode\n     extends ContainerNode<ArrayNode>\n {\n-    protected ArrayList<JsonNode> _children;\n+    // before 2.1, was explicitly `ArrayList`\n+    protected List<JsonNode> _children;\n \n     public ArrayNode(JsonNodeFactory nc) { super(nc); }\n \n-    protected ArrayNode(JsonNodeFactory nc,\n-            ArrayList<JsonNode> children) {\n+    protected ArrayNode(JsonNodeFactory nc, List<JsonNode> children) {\n         super(nc);\n         _children = children;\n     }\n     \n-    // note: co-variant for type safety\n+    // note: co-variant to allow caller-side type safety\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public ArrayNode deepCopy()\n+    {\n+        /* 28-Sep-2012, tatu: Sub-classes really should override this method to\n+         *   produce compliant copies.\n+         */\n+        if (getClass() != ArrayNode.class) {\n+            throw new IllegalStateException(\"ArrayNode subtype (\"+getClass().getName()+\" does not override deepCopy(), needs to\");\n+        }\n+        return _defaultDeepCopy();\n+    }\n+\n+    /**\n+     * Default implementation for 'deepCopy()': can be delegated to by sub-classes\n+     * if necessary; but usually isn't.\n+     */\n+    protected ArrayNode _defaultDeepCopy()\n     {\n         if (_children == null) {\n             return new ArrayNode(_nodeFactory);\n         }\n         final int len = _children.size();\n-        ArrayList<JsonNode> newKids = new ArrayList<JsonNode>(Math.max(4, len));\n+        List<JsonNode> newKids = _createList(Math.max(4, len));\n         for (int i = 0; i < len; ++i) {\n             newKids.add(_children.get(i).deepCopy());\n         }\n         int len = other.size();\n         if (len > 0) {\n             if (_children == null) {\n-                _children = new ArrayList<JsonNode>(len+2);\n+                _children = _createList(len+2);\n             }\n             other.addContentsTo(_children);\n         }\n         int len = nodes.size();\n         if (len > 0) {\n             if (_children == null) {\n-                _children = new ArrayList<JsonNode>(nodes);\n-            } else {\n-                _children.addAll(nodes);\n-            }\n+                _children = _createList(nodes.size());\n+            }\n+            _children.addAll(nodes);\n         }\n         return this;\n     }\n                 dst.add(n);\n             }\n         }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Overridable methods\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Internal factory method for creating {@link Map} used for storing\n+     * child nodes. \n+     * Overridable by sub-classes, used when caller does not know what\n+     * optimal size would, used for example when constructing a Map when adding\n+     * the first one.\n+     * \n+     * @since 2.1\n+     */\n+    protected List<JsonNode> _createList() {\n+        return new ArrayList<JsonNode>();\n+    }\n+    \n+    /**\n+     * Internal factory method for creating {@link Map} used for storing\n+     * child nodes. \n+     * Overridable by sub-classes, used when caller has an idea of what\n+     * optimal size should be: used when copying contents of an existing node.\n+     * \n+     * @since 2.1\n+     */\n+    protected List<JsonNode> _createList(int defaultSize) {\n+        return new ArrayList<JsonNode>(defaultSize);\n     }\n     \n     /*\n     private ArrayNode _add(JsonNode node)\n     {\n         if (_children == null) {\n-            _children = new ArrayList<JsonNode>();\n+            _children = _createList();\n         }\n         _children.add(node);\n         return this;\n     private ArrayNode _insert(int index, JsonNode node)\n     {\n         if (_children == null) {\n-            _children = new ArrayList<JsonNode>();\n+            _children = _createList();\n             _children.add(node);\n             return this;\n         }\n      * Note: this method gets called iff <code>otherChildren</code>\n      * is non-empty\n      */\n-    private boolean _sameChildren(ArrayList<JsonNode> otherChildren)\n+    private boolean _sameChildren(List<JsonNode> otherChildren)\n     {\n         int len = otherChildren.size();\n         if (this.size() != len) { // important: call size() to handle case of null list...\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n     {\n         /* 28-Sep-2012, tatu: Sub-classes really should override this method to\n          *   produce compliant copies.\n-         * \n          */\n         if (getClass() != ObjectNode.class) {\n             throw new IllegalStateException(\"ObjectNode subtype (\"+getClass().getName()+\" does not override deepCopy(), needs to\");\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n \n import java.io.IOException;\n \n-\n-import com.fasterxml.jackson.annotation.JsonFormat;\n-import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.BeanDeserializer;\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.*;\n-import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.introspect.AnnotatedField;\n import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;\n import com.fasterxml.jackson.databind.module.SimpleModule;", "timestamp": 1348852084, "metainfo": ""}