{"sha": "2380849de74c7160694989fbf206d3d7997e66c6", "log": "Merge branch 'master' of github.com:FasterXML/jackson-databind", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n      */\n     WRAP_EXCEPTIONS(true),\n \n+\t/**\n+\t * Feature that determines what happens when an object which\n+\t * normally has type information included by Jackson is used\n+\t * in conjunction with {@link com.fasterxml.jackson.annotation.JsonUnwrapped}.\n+\t * In the default (enabled) state, an error will be thrown when\n+\t * an unwrapped object has type information. When disabled, the\n+\t * object will be unwrapped and the type information discarded.\n+\t *<p>\n+\t * Feature is enabled by default.\n+\t *\n+\t * @since 2.4\n+\t */\n+\tFAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS(true),\n+\n+\n     /*\n     /******************************************************\n     /* Output life cycle features\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java\n package com.fasterxml.jackson.databind.ser.impl;\n \n-import java.io.IOException;\n-\n-import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.ser.*;\n+import com.fasterxml.jackson.core.JsonGenerationException;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n+\n+import java.io.IOException;\n \n public class UnwrappingBeanSerializer\n     extends BeanSerializerBase\n         }\n     }\n     \n+    @Override\n+    public void serializeWithType(Object bean, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer)\n+        throws IOException, JsonGenerationException\n+    {\n+\t    if (provider.isEnabled(SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS)) {\n+\t\t    throw new JsonGenerationException(\"Unwrapped property contains type information.\");\n+\t    }\n+\n+        if (_objectIdWriter != null) {\n+            _serializeWithObjectId(bean, jgen, provider, typeSer);\n+            return;\n+        }\n+\n+        if (_propertyFilterId != null) {\n+            serializeFieldsFiltered(bean, jgen, provider);\n+        } else {\n+            serializeFields(bean, jgen, provider);\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Standard methods\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestUnwrappedWithTypeInfo.java\n+package com.fasterxml.jackson.databind.ser;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.annotation.JsonTypeName;\n+import com.fasterxml.jackson.annotation.JsonUnwrapped;\n+import com.fasterxml.jackson.core.JsonGenerationException;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import org.junit.Test;\n+\n+// Tests for [#81]\n+public class TestUnwrappedWithTypeInfo extends BaseMapTest\n+{\n+\n+\t@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, property=\"@type\")\n+\t@JsonTypeName(\"OuterType\")\n+\tstatic class Outer {\n+\n+\t\tprivate @JsonProperty String p1;\n+\t\tpublic String getP1() { return p1; }\n+\t\tpublic void setP1(String p1) { this.p1 = p1; }\n+\n+\n+\t\tprivate Inner inner;\n+\t\tpublic void setInner(Inner inner) { this.inner = inner; }\n+\n+\t\t@JsonUnwrapped\n+\t\tpublic Inner getInner() {\n+\t\t\treturn inner;\n+\t\t}\n+\t}\n+\n+\t@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, property=\"@type\")\n+\t@JsonTypeName(\"InnerType\")\n+\tstatic class Inner {\n+\n+\t\tprivate @JsonProperty String p2;\n+\t\tpublic String getP2() { return p2; }\n+\t\tpublic void setP2(String p2) { this.p2 = p2; }\n+\n+\t}\n+    \n+    /*\n+    /**********************************************************\n+    /* Tests, serialization\n+    /**********************************************************\n+     */\n+\n+    public void testDefaultUnwrappedWithTypeInfo() throws Exception\n+    {\n+\t    Outer outer = new Outer();\n+\t    outer.setP1(\"101\");\n+\n+\t    Inner inner = new Inner();\n+\t    inner.setP2(\"202\");\n+\t    outer.setInner(inner);\n+\n+\t    ObjectMapper mapper = new ObjectMapper();\n+\n+        try {\n+\t        mapper.writeValueAsString(outer);\n+        } catch (JsonGenerationException ex) {\n+\t        return; // expected\n+        }\n+\n+\t    fail(\"Expected exception to be thrown.\");\n+    }\n+\n+\tpublic void testUnwrappedWithTypeInfoAndFeatureDisabled() throws Exception\n+\t{\n+\t\tOuter outer = new Outer();\n+\t\touter.setP1(\"101\");\n+\n+\t\tInner inner = new Inner();\n+\t\tinner.setP2(\"202\");\n+\t\touter.setInner(inner);\n+\n+\t\tObjectMapper mapper = new ObjectMapper();\n+\t\tmapper = mapper.disable(SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS);\n+\n+\t\tString json = mapper.writeValueAsString(outer);\n+\t\tassertEquals(\"{\\\"@type\\\":\\\"OuterType\\\",\\\"p1\\\":\\\"101\\\",\\\"p2\\\":\\\"202\\\"}\", json);\n+\t}\n+}", "timestamp": 1400281632, "metainfo": ""}