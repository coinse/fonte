{"sha": "7f5cc156dab558dd459bcbac789fd39b1b98f71e", "log": "javadoc improvements", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n \n     /**\n      * Configuration settings container class for bean deserializer factory\n-     * \n-     * @since 1.7\n      */\n     public abstract static class Config\n     {\n          * abstract type resolver.\n          * Added resolver has the highest priority (that is, it\n          * gets called before any already registered resolver).\n-         * \n-         * @since 1.8\n          */\n         public abstract Config withAbstractTypeResolver(AbstractTypeResolver resolver);\n \n          * \n          * @param instantiators Object that can provide {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s for\n          *    constructing POJO values during deserialization\n-         * \n-         * @since 1.9\n          */\n         public abstract Config withValueInstantiators(ValueInstantiators instantiators);\n         \n         public abstract Iterable<Deserializers> deserializers();\n \n-        /**\n-         * @since 1.8\n-         */\n         public abstract Iterable<KeyDeserializers> keyDeserializers();\n         \n         public abstract Iterable<BeanDeserializerModifier> deserializerModifiers();\n \n-        /**\n-         * @since 1.8\n-         */\n         public abstract Iterable<AbstractTypeResolver> abstractTypeResolvers();\n \n-        /**\n-         * @since 1.9\n-         */\n         public abstract Iterable<ValueInstantiators> valueInstantiators();\n         \n         public abstract boolean hasDeserializers();\n \n-        /**\n-         * @since 1.8\n-         */\n         public abstract boolean hasKeyDeserializers();\n         \n         public abstract boolean hasDeserializerModifiers();\n \n-        /**\n-         * @since 1.8\n-         */\n         public abstract boolean hasAbstractTypeResolvers();\n \n         /**\n      */\n \n     /**\n-     * @since 1.7\n+     * Method for accessing factory configuration (NOT the general\n+     * {@link DeserializationConfig}!)\n      */\n     public abstract Config getConfig();\n     \n      * of this method, as it usually requires instantiating a new instance of\n      * factory type. Check out javadocs for\n      * {@link com.fasterxml.jackson.databind.deser.BeanDeserializerFactory} for more details.\n-     * \n-     * @since 1.7\n      */\n     public abstract DeserializerFactory withConfig(Config config);\n \n     /**\n      * Convenience method for creating a new factory instance with additional deserializer\n      * provider.\n-     * \n-     * @since 1.7\n      */\n     public final DeserializerFactory withAdditionalDeserializers(Deserializers additional) {\n         return withConfig(getConfig().withAdditionalDeserializers(additional));\n     /**\n      * Convenience method for creating a new factory instance with additional\n      * {@link KeyDeserializers}.\n-     * \n-     * @since 1.8\n      */\n     public final DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers additional) {\n         return withConfig(getConfig().withAdditionalKeyDeserializers(additional));\n     /**\n      * Convenience method for creating a new factory instance with additional\n      * {@link BeanDeserializerModifier}.\n-     * \n-     * @since 1.7\n      */\n     public final DeserializerFactory withDeserializerModifier(BeanDeserializerModifier modifier) {\n         return withConfig(getConfig().withDeserializerModifier(modifier));\n     /**\n      * Convenience method for creating a new factory instance with additional\n      * {@link AbstractTypeResolver}.\n-     * \n-     * @since 1.7\n      */\n     public final DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver resolver) {\n         return withConfig(getConfig().withAbstractTypeResolver(resolver));\n     /**\n      * Convenience method for creating a new factory instance with additional\n      * {@link ValueInstantiators}.\n-     * \n-     * @since 1.9\n      */\n     public final DeserializerFactory withValueInstantiators(ValueInstantiators instantiators) {\n         return withConfig(getConfig().withValueInstantiators(instantiators));\n      * (interface, abstract class) into a concrete type, or at least\n      * something \"more concrete\" (abstract class instead of interface).\n      * Will either return passed type, or a more specific type.\n-     * \n-     * @since 1.9\n      */\n     public abstract JavaType mapAbstractType(DeserializationConfig config, JavaType type)\n         throws JsonMappingException;\n     /**\n      * Method that is to find all creators (constructors, factory methods)\n      * for the bean type to deserialize.\n-     * \n-     * @since 1.9\n      */\n     public abstract ValueInstantiator findValueInstantiator(DeserializationConfig config,\n             BasicBeanDescription beanDesc)\n             DeserializerProvider p, CollectionType type, BeanProperty property)\n         throws JsonMappingException;\n \n-    /**\n-     * @since 1.8\n-     */\n     public abstract JsonDeserializer<?> createCollectionLikeDeserializer(DeserializationConfig config,\n             DeserializerProvider p, CollectionLikeType type, BeanProperty property)\n         throws JsonMappingException;\n             DeserializerProvider p, MapType type, BeanProperty property)\n         throws JsonMappingException;\n \n-    /**\n-     * @since 1.8\n-     */\n     public abstract JsonDeserializer<?> createMapLikeDeserializer(DeserializationConfig config,\n             DeserializerProvider p, MapLikeType type, BeanProperty property)\n         throws JsonMappingException;\n      * \n      * @return Key deserializer to use for specified type, if one found; null if not\n      *   (and default key deserializer should be used)\n-     * \n-     * @since 1.8\n      */\n     public KeyDeserializer createKeyDeserializer(DeserializationConfig config, JavaType type,\n             BeanProperty property)\n      *    deserializer type will be this type or its subtype)\n      * \n      * @return Type deserializer to use for given base type, if one is needed; null if not.\n-     * \n-     * @since 1.5\n      */\n     public TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType,\n             BeanProperty property)", "timestamp": 1326650575, "metainfo": ""}