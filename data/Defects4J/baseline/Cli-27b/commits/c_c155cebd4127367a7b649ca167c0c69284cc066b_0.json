{"sha": "c155cebd4127367a7b649ca167c0c69284cc066b", "log": "Applying Brian Egge and my work from CLI-71 to fix a lingering data problem in the parser and to confirm that other bugs have already been fixed  ", "commit": "\n--- a/src/java/org/apache/commons/cli/Option.java\n+++ b/src/java/org/apache/commons/cli/Option.java\n         return result;\n     }\n \n+    /**\n+     * <p>Clear the Option values. After a \n+     * parse is complete, these are left with data in them \n+     * and they need clearing if another parse is done. </p>\n+     *\n+     * See: <a href=\"https://issues.apache.org/jira/browse/CLI-71\">CLI-71</a>\n+     */\n+    void clearValues() {\n+        this.values.clear();\n+    }\n+\n }\n--- a/src/java/org/apache/commons/cli/Parser.java\n+++ b/src/java/org/apache/commons/cli/Parser.java\n     {\n         // initialise members\n         this.options = options;\n+\n+        // clear out the data in options in case it's been used before (CLI-71)\n+        for (Iterator it = options.helpOptions().iterator(); it.hasNext();) {\n+            Option opt = (Option) it.next();\n+            opt.clearValues();\n+        }\n+\n         requiredOptions = options.getRequiredOptions();\n         cmd = new CommandLine();\n \n         // set the option on the command line\n         cmd.addOption(opt);\n     }\n-}\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli/OptionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.cli;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author brianegge\n+ */\n+public class OptionTest extends TestCase {\n+\n+   public void testClear() {\n+       Option option = new Option(\"x\", true, \"\");\n+       assertEquals(0, option.getValuesList().size());\n+       option.addValue(\"a\");\n+       assertEquals(1, option.getValuesList().size());\n+       option.clearValues();\n+       assertEquals(0, option.getValuesList().size());\n+   }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli/bug/BugCLI71Test.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.cli.bug;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.cli.*;\n+\n+public class BugCLI71Test extends TestCase {\n+\n+    private Options options;\n+    private CommandLineParser parser;\n+\n+    public void setUp() {\n+        options = new Options();\n+\n+        Option algorithm = new Option(\"a\" , \"algo\", true, \"the algorithm which it to perform executing\");\n+        algorithm.setArgName(\"algorithm name\");\n+        options.addOption(algorithm);\n+\n+        Option key = new Option(\"k\" , \"key\", true, \"the key the setted algorithm uses to process\");\n+        algorithm.setArgName(\"value\");\n+        options.addOption(key);\n+\n+        parser = new PosixParser();\n+    }\n+\n+    public void testBasic() throws Exception {\n+        String[] args = new String[] { \"-a\", \"Caesar\", \"-k\", \"A\" };\n+        CommandLine line = parser.parse( options, args);\n+        assertEquals( \"Caesar\", line.getOptionValue(\"a\") );\n+        assertEquals( \"A\", line.getOptionValue(\"k\") );\n+    }\n+\n+    public void testMistakenArgument() throws Exception {\n+        String[] args = new String[] { \"-a\", \"Caesar\", \"-k\", \"A\" };\n+        CommandLine line = parser.parse( options, args);\n+        args = new String[] { \"-a\", \"Caesar\", \"-k\", \"a\" };\n+        line = parser.parse( options, args);\n+        assertEquals( \"Caesar\", line.getOptionValue(\"a\") );\n+        assertEquals( \"a\", line.getOptionValue(\"k\") );\n+    }\n+\n+    public void testLackOfError() throws Exception {\n+        String[] args = new String[] { \"-k\", \"-a\",  \"Caesar\" };\n+        try {\n+            CommandLine line = parser.parse( options, args);\n+            fail(\"MissingArgumentException expected\");\n+        } catch(MissingArgumentException mae) {\n+            // expected\n+        }\n+    }\n+\n+    public void testGetsDefaultIfOptional() throws Exception {\n+        String[] args = new String[] { \"-k\", \"-a\", \"Caesar\" };\n+        options.getOption(\"k\").setOptionalArg(true);\n+        CommandLine line = parser.parse( options, args);\n+        \n+        assertEquals( \"Caesar\", line.getOptionValue(\"a\") );\n+        assertEquals( \"a\", line.getOptionValue(\"k\", \"a\") );\n+    }\n+\n+}", "timestamp": 1180037226, "metainfo": ""}