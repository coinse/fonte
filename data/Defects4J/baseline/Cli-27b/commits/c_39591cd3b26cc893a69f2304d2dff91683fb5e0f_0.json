{"sha": "39591cd3b26cc893a69f2304d2dff91683fb5e0f", "log": "Parser now keeps the normalised list of arguments. Added ParserTest  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/commandline/Parser.java\n+++ b/src/java/org/apache/commons/cli2/commandline/Parser.java\n package org.apache.commons.cli2.commandline;\n \n import java.io.IOException;\n-import java.util.ArrayList;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.ListIterator;\n         \n         // wet up a command line for this group\n         final WriteableCommandLine commandLine =\n-            new WriteableCommandLineImpl(group, new ArrayList());\n+            new WriteableCommandLineImpl(group, argumentList);\n         \n         // pick up any defaults from the model\n         group.defaults(commandLine);\n--- a/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java\n+++ b/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java\n             defaultSwitches.put(option, defaultSwitch);\n         }\n     }\n+    \n+    public List getNormalised() {\n+        return Collections.unmodifiableList(normalised);\n+    }\n+    \n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli2/commandline/ParserTest.java\n+package org.apache.commons.cli2.commandline;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import org.apache.commons.cli2.CommandLine;\n+import org.apache.commons.cli2.Group;\n+import org.apache.commons.cli2.OptionException;\n+import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n+import org.apache.commons.cli2.builder.GroupBuilder;\n+import org.apache.commons.cli2.option.DefaultOption;\n+import org.apache.commons.cli2.util.HelpFormatter;\n+\n+import junit.framework.TestCase;\n+\n+public class ParserTest extends TestCase {\n+    \n+    private Parser parser;\n+    private DefaultOption verboseOption;\n+    private DefaultOption helpOption;\n+    private Group options;\n+    private HelpFormatter helpFormatter;\n+    private StringWriter out;\n+    private BufferedReader in;\n+\n+    public void setUp() {\n+        parser = new Parser();\n+        \n+        final GroupBuilder gBuilder = new GroupBuilder();\n+        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\n+        \n+        helpOption = oBuilder.withLongName(\"help\").withShortName(\"h\").create();\n+        verboseOption = oBuilder.withLongName(\"verbose\").withShortName(\"v\").create();\n+        options = gBuilder.withOption(helpOption).withOption(verboseOption).create();\n+        parser.setGroup(options);\n+        \n+        helpFormatter = new HelpFormatter();\n+        out = new StringWriter();\n+        helpFormatter.setPrintWriter(new PrintWriter(out));\n+        parser.setHelpFormatter(helpFormatter);\n+    }\n+\n+    public void testParse_Successful() throws OptionException {\n+        final CommandLine cl = parser.parse(new String[]{\"-hv\"});\n+        \n+        assertTrue(cl.hasOption(helpOption));\n+        assertTrue(cl.hasOption(verboseOption));\n+        \n+        assertEquals(\"--help --verbose\",cl.toString());\n+        \n+        final WriteableCommandLineImpl wcli = (WriteableCommandLineImpl)cl;\n+        assertEquals(\"[--help, --verbose]\",wcli.getNormalised().toString());\n+    }\n+\n+    public void testParse_WithUnexpectedOption() {\n+        try {\n+            parser.parse(new String[]{\"--unexpected\"});\n+            fail(\"OptionException\");\n+        }\n+        catch(OptionException e) {\n+            assertEquals(options,e.getOption());\n+            assertEquals(\"Unexpected --unexpected while processing --help|--verbose\",e.getMessage());\n+        }\n+    }\n+\n+    public void testParseAndHelp_Successful() throws IOException {\n+        final CommandLine cl = parser.parseAndHelp(new String[]{\"-v\"});\n+        \n+        assertTrue(cl.hasOption(verboseOption));\n+        assertEquals(\"\",out.getBuffer().toString());\n+    }\n+\n+    public void testParseAndHelp_ByHelpOption() throws IOException {\n+        parser.setHelpOption(helpOption);\n+        \n+        assertNull(parser.parseAndHelp(new String[]{\"-hv\"}));\n+        \n+        inReader();\n+        assertInReaderUsage();\n+        assertInReaderEOF();\n+    }\n+\n+    public void testParseAndHelp_ByHelpTrigger() throws IOException {\n+        parser.setHelpTrigger(\"--help\");\n+        \n+        assertNull(parser.parseAndHelp(new String[]{\"-hv\"}));\n+        \n+        inReader();\n+        assertInReaderUsage();\n+        assertInReaderEOF();\n+    }\n+\n+    public void testParseAndHelp_WithUnexpectedOption() throws IOException {\n+        assertNull(parser.parseAndHelp(new String[]{\"--unexpected\"}));\n+        \n+        inReader();\n+        assertInReaderLine(\"Unexpected --unexpected while processing --help|--verbose\");\n+        assertInReaderUsage();\n+        assertInReaderEOF();\n+    }\n+\n+    private void assertInReaderUsage() throws IOException {\n+        assertInReaderLine(\"Usage:\");\n+        assertInReaderLine(\"[--help --verbose]\");\n+        assertInReaderLine(\"--help|--verbose\");\n+        assertInReaderLine(\"--help (-h)\");\n+        assertInReaderLine(\"--verbose (-v)\");\n+    }\n+\n+    private void assertInReaderLine(final String string) throws IOException {\n+        assertEquals(string,in.readLine().trim());\n+    }\n+\n+    private void assertInReaderEOF() throws IOException {\n+        assertNull(in.readLine());\n+    }\n+\n+    private void inReader() {\n+        in = new BufferedReader(new StringReader(out.getBuffer().toString()));\n+    }\n+}", "timestamp": 1118877074, "metainfo": ""}