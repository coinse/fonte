{"sha": "f104dd060c6c88450ac9ee9eb818b26374512440", "log": "CLI-123: Groups are now added to the command line if any of their child options are found. This makes it possible to test for the presence of a group and also validate minimum and maximum constraints when child groups are involved.  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/Option.java\n+++ b/src/java/org/apache/commons/cli2/Option.java\n      * @return true iff the CommandLine will be invalid without this Option\n      */\n     boolean isRequired();\n+\n+    /**\n+     * Returns the parent of this option. Options can be organized in a\n+     * hierarchical manner if they are added to groups. This method can be used\n+     * for obtaining the parent option of this option. The result may be\n+     * <b>null</b> if this option does not have a parent.\n+     *\n+     * @return the parent of this option\n+     */\n+    Option getParent();\n+\n+    /**\n+     * Sets the parent of this option. This method is called when the option is\n+     * added to a group. Storing the parent of an option makes it possible to\n+     * keep track of hierarchical relations between options. For instance, if an\n+     * option is identified while parsing a command line, the group this option\n+     * belongs to can also be added to the command line.\n+     *\n+     * @param parent the parent option\n+     */\n+    void setParent(Option parent);\n }\n--- a/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java\n+++ b/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java\n         for (Iterator i = option.getTriggers().iterator(); i.hasNext();) {\n             nameToOption.put(i.next(), option);\n         }\n+\n+        // ensure that all parent options are also added\n+        Option parent = option.getParent();\n+        while (parent != null && !options.contains(parent)) {\n+            options.add(parent);\n+            parent = parent.getParent();\n+        }\n     }\n \n     public void addValue(final Option option,\n--- a/src/java/org/apache/commons/cli2/option/GroupImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/GroupImpl.java\n         // process the options\n         for (final Iterator i = options.iterator(); i.hasNext();) {\n             final Option option = (Option) i.next();\n+            option.setParent(this);\n \n             if (option instanceof Argument) {\n                 i.remove();\n--- a/src/java/org/apache/commons/cli2/option/OptionImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/OptionImpl.java\n public abstract class OptionImpl implements Option {\n     private final int id;\n     private final boolean required;\n+    private Option parent;\n \n     /**\n      * Creates an OptionImpl with the specified id\n \n     public int hashCode() {\n         int hashCode = getId();\n-        hashCode = (hashCode * 37) + getPreferredName().hashCode();\n+        if (getPreferredName() != null) {\n+            hashCode = (hashCode * 37) + getPreferredName().hashCode();\n+        }\n \n         if (getDescription() != null) {\n             hashCode = (hashCode * 37) + getDescription().hashCode();\n \n     public void defaults(final WriteableCommandLine commandLine) {\n         // nothing to do normally\n+    }\n+\n+    public Option getParent() {\n+        return parent;\n+    }\n+\n+    public void setParent(Option parent) {\n+        this.parent = parent;\n     }\n \n     protected void checkPrefixes(final Set prefixes) {\n--- a/src/test/org/apache/commons/cli2/CommandLineTestCase.java\n+++ b/src/test/org/apache/commons/cli2/CommandLineTestCase.java\n         final Iterator i = cl.getOptions().iterator();\n \n         assertSame(login, i.next());\n+        assertSame(group, i.next());\n         assertSame(help, i.next());\n         assertSame(targets, i.next());\n         assertSame(targets, i.next());\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli2/bug/BugCLI123Test.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.cli2.bug;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.cli2.CommandLine;\n+import org.apache.commons.cli2.Group;\n+import org.apache.commons.cli2.Option;\n+import org.apache.commons.cli2.OptionException;\n+import org.apache.commons.cli2.builder.ArgumentBuilder;\n+import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n+import org.apache.commons.cli2.builder.GroupBuilder;\n+import org.apache.commons.cli2.commandline.Parser;\n+\n+/**\n+ * Group options are not added to the command line when child elements are\n+ * detected. This causes the validation of maximum and minimum to fail.\n+ *\n+ * @author Oliver Heger\n+ * @version $Id$\n+ */\n+public class BugCLI123Test extends TestCase {\n+    /** An option of the parent group. */\n+    private Option parentOption;\n+\n+    /** An option of the child group. */\n+    private Option childOption1;\n+\n+    /** Another option of the child group. */\n+    private Option childOption2;\n+\n+    /** The parent group. */\n+    private Group parentGroup;\n+\n+    /** The child group. */\n+    private Group childGroup;\n+\n+    /** The parser. */\n+    private Parser parser;\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n+        final ArgumentBuilder abuilder = new ArgumentBuilder();\n+        final GroupBuilder gbuilder = new GroupBuilder();\n+        parentOption = obuilder.withLongName(\"parent\").withShortName(\"p\")\n+                .withArgument(abuilder.withName(\"name\").create()).create();\n+        childOption1 = obuilder.withLongName(\"child\").withShortName(\"c\")\n+                .withArgument(abuilder.withName(\"c\").create()).create();\n+        childOption2 = obuilder.withLongName(\"sub\").withShortName(\"s\")\n+                .withArgument(abuilder.withName(\"s\").create()).create();\n+        childGroup = gbuilder.withName(\"childOptions\").withMinimum(0)\n+                .withMaximum(2).withOption(childOption1).withOption(\n+                        childOption2).create();\n+        parentGroup = gbuilder.withName(\"parentOptions\").withMinimum(1)\n+                .withMaximum(1).withOption(parentOption).withOption(childGroup)\n+                .create();\n+        parser = new Parser();\n+        parser.setGroup(parentGroup);\n+    }\n+\n+    /**\n+     * A single option of the child group is specified.\n+     */\n+    public void testSingleChildOption() throws OptionException {\n+        CommandLine cl = parser.parse(new String[] { \"--child\", \"test\" });\n+        assertTrue(\"Child option not found\", cl.hasOption(childOption1));\n+        assertEquals(\"Wrong value for option\", \"test\", cl\n+                .getValue(childOption1));\n+        assertTrue(\"Child group not found\", cl.hasOption(childGroup));\n+    }\n+\n+    /**\n+     * Two options of the child group are specified.\n+     */\n+    public void testMultipleChildOptions() throws OptionException {\n+        CommandLine cl = parser.parse(new String[] { \"--child\", \"test\",\n+                \"--sub\", \"anotherTest\" });\n+        assertTrue(\"Child option not found\", cl.hasOption(childOption1));\n+        assertEquals(\"Wrong value for option\", \"test\", cl\n+                .getValue(childOption1));\n+        assertTrue(\"Sub option not found\", cl.hasOption(childOption2));\n+        assertEquals(\"Wrong value for sub option\", \"anotherTest\", cl\n+                .getValue(childOption2));\n+        assertTrue(\"Child group not found\", cl.hasOption(childGroup));\n+    }\n+\n+    /**\n+     * The option defined for the parent group is specified.\n+     */\n+    public void testSingleParentOption() throws OptionException {\n+        CommandLine cl = parser.parse(new String[] { \"--parent\", \"yes\" });\n+        assertTrue(\"Parent option not found\", cl.hasOption(parentOption));\n+        assertEquals(\"Wrong value for option\", \"yes\", cl.getValue(parentOption));\n+        assertFalse(\"Found child group\", cl.hasOption(childGroup));\n+    }\n+\n+    /**\n+     * The parent option and an option of the child group is specified. This\n+     * should cause an exception.\n+     */\n+    public void testParentOptionAndChildOption() throws OptionException {\n+        try {\n+            parser.parse(new String[] { \"--parent\", \"error\", \"--child\",\n+                    \"exception\" });\n+            fail(\"Maximum restriction for parent not verified!\");\n+        } catch (OptionException oex) {\n+            // ok\n+        }\n+    }\n+}", "timestamp": 1216931296, "metainfo": ""}