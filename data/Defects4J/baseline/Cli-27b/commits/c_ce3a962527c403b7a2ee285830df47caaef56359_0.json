{"sha": "ce3a962527c403b7a2ee285830df47caaef56359", "log": "Moved the bursting tests from PosixParserTest to ParserTestCase  ", "commit": "\n--- a/src/test/org/apache/commons/cli/BasicParserTest.java\n+++ b/src/test/org/apache/commons/cli/BasicParserTest.java\n     {\n         // not supported by the BasicParser\n     }\n+\n+    public void testBursting() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testUnrecognizedOptionWithBursting() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testMissingArgWithBursting() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testStopBursting() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testStopBursting2() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n }\n--- a/src/test/org/apache/commons/cli/GnuParserTest.java\n+++ b/src/test/org/apache/commons/cli/GnuParserTest.java\n     {\n         // not supported by the GnuParser\n     }\n+\n+    public void testBursting() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testUnrecognizedOptionWithBursting() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testMissingArgWithBursting() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testStopBursting() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testStopBursting2() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n }\n--- a/src/test/org/apache/commons/cli/ParserTestCase.java\n+++ b/src/test/org/apache/commons/cli/ParserTestCase.java\n             // expected\n         }\n     }\n+\n+    public void testBursting() throws Exception\n+    {\n+        String[] args = new String[] { \"-acbtoast\", \"foo\", \"bar\" };\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n+        assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n+    }\n+\n+    public void testUnrecognizedOptionWithBursting() throws Exception\n+    {\n+        String[] args = new String[] { \"-adbtoast\", \"foo\", \"bar\" };\n+\n+        try\n+        {\n+            parser.parse(options, args);\n+            fail(\"UnrecognizedOptionException wasn't thrown\");\n+        }\n+        catch (UnrecognizedOptionException e)\n+        {\n+            assertEquals(\"-adbtoast\", e.getOption());\n+        }\n+    }\n+\n+    public void testMissingArgWithBursting() throws Exception\n+    {\n+        String[] args = new String[] { \"-acb\" };\n+\n+        boolean caught = false;\n+\n+        try\n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (MissingArgumentException e)\n+        {\n+            caught = true;\n+            assertEquals(\"option missing an argument\", \"b\", e.getOption().getOpt());\n+        }\n+\n+        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n+    }\n+\n+    public void testStopBursting() throws Exception\n+    {\n+        String[] args = new String[] { \"-azc\" };\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+        assertFalse( \"Confirm -c is not set\", cl.hasOption(\"c\") );\n+\n+        assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue(cl.getArgList().contains(\"zc\"));\n+    }\n+\n+    public void testStopBursting2() throws Exception\n+    {\n+        String[] args = new String[] { \"-c\", \"foobar\", \"-btoast\" };\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm  2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n+\n+        cl = parser.parse(options, cl.getArgs());\n+\n+        assertTrue(\"Confirm -c is not set\", !cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n+        assertTrue(\"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n+    }\n }\n--- a/src/test/org/apache/commons/cli/PosixParserTest.java\n+++ b/src/test/org/apache/commons/cli/PosixParserTest.java\n     {\n         super.setUp();\n         parser = new PosixParser();\n-    }\n-\n-    public void testBursting() throws Exception\n-    {\n-        String[] args = new String[] { \"-acbtoast\",\n-                                       \"foo\", \"bar\" };\n-\n-        CommandLine cl = parser.parse(options, args);\n-\n-        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n-        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n-        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n-        assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n-    }\n-\n-    public void testUnrecognizedOptionWithBursting() throws Exception\n-    {\n-        String[] args = new String[] { \"-adbtoast\", \"foo\", \"bar\" };\n-\n-        try\n-        {\n-            parser.parse(options, args);\n-            fail(\"UnrecognizedOptionException wasn't thrown\");\n-        }\n-        catch (UnrecognizedOptionException e)\n-        {\n-            assertEquals(\"-adbtoast\", e.getOption());\n-        }\n-    }\n-\n-    public void testMissingArgWithBursting() throws Exception\n-    {\n-        String[] args = new String[] { \"-acb\" };\n-\n-        boolean caught = false;\n-\n-        try\n-        {\n-            parser.parse(options, args);\n-        }\n-        catch (MissingArgumentException e)\n-        {\n-            caught = true;\n-            assertEquals(\"option missing an argument\", \"b\", e.getOption().getOpt());\n-        }\n-\n-        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n-    }\n-\n-    public void testStopBursting() throws Exception\n-    {\n-        String[] args = new String[] { \"-azc\" };\n-\n-        CommandLine cl = parser.parse(options, args, true);\n-        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n-        assertFalse( \"Confirm -c is not set\", cl.hasOption(\"c\") );\n-\n-        assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n-        assertTrue(cl.getArgList().contains(\"zc\"));\n-    }\n-\n-    public void testStopBursting2() throws Exception\n-    {\n-        String[] args = new String[] { \"-c\",\n-                                       \"foobar\",\n-                                       \"-btoast\" };\n-\n-        CommandLine cl = parser.parse(options, args, true);\n-        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n-        assertTrue(\"Confirm  2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n-\n-        cl = parser.parse(options, cl.getArgs());\n-\n-        assertTrue(\"Confirm -c is not set\", !cl.hasOption(\"c\"));\n-        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n-        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n-        assertTrue(\"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n-        assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n     }\n \n     /**", "timestamp": 1243519002, "metainfo": ""}