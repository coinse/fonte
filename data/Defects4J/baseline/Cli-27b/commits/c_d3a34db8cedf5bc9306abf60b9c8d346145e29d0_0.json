{"sha": "d3a34db8cedf5bc9306abf60b9c8d346145e29d0", "log": "Fixing the trailing whitespace with a proper regex this time  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/Argument.java\n+++ b/src/java/org/apache/commons/cli2/Argument.java\n     /**\n      * Returns the initial separator character or\n      * '\\0' if no character has been set.\n-     * \n+     *\n      * @return char the initial separator character\n      */\n     char getInitialSeparator();\n-    \n+\n     /**\n      * Processes the \"README\" style element of the argument.\n      *\n         final ListIterator args,\n         final Option option)\n             throws OptionException;\n-    \n+\n     /**\n      * Adds defaults to a CommandLine.\n-     * \n+     *\n      * @param commandLine\n      *            The CommandLine object to store defaults in.\n      * @param option\n      *\n      * @see #getMinimum()\n      * @see #getMaximum()\n-     * @return true iff the CommandLine will be invalid without at least one \n+     * @return true iff the CommandLine will be invalid without at least one\n      *         value\n      */\n     boolean isRequired();\n--- a/src/java/org/apache/commons/cli2/CommandLine.java\n+++ b/src/java/org/apache/commons/cli2/CommandLine.java\n  * according to the definition supplied to the parser.\n  */\n public interface CommandLine {\n-\t\n-    /**\n-     * Detects the presence of an option with the specified trigger in this \n+\n+    /**\n+     * Detects the presence of an option with the specified trigger in this\n      * CommandLine.\n-     * \n+     *\n      * @param trigger the trigger to search for\n      * @return true iff an option with this trigger is present\n      */\n     boolean hasOption(final String trigger);\n-    \n+\n     /**\n      * Detects the presence of an option in this CommandLine.\n-     * \n+     *\n      * @param option the Option to search for\n      * @return true iff the option is present\n      */\n     boolean hasOption(final Option option);\n-    \n+\n     /**\n      * Finds the Option with the specified trigger\n-     * \n+     *\n      * @param trigger the name of the option to retrieve\n      * @return the Option matching the trigger or null if none exists\n      */\n     Option getOption(final String trigger);\n-    \n-    /**\n-     * Retrieves the Argument values associated with the specified Option\n-     * \n+\n+    /**\n+     * Retrieves the Argument values associated with the specified Option\n+     *\n      * @param trigger a trigger used to lookup the Option\n      * @return a list of values or an empty List if none are found\n      */\n     List getValues(final String trigger);\n-    \n-    /**\n-     * Retrieves the Argument values associated with the specified Option\n-     * \n+\n+    /**\n+     * Retrieves the Argument values associated with the specified Option\n+     *\n      * @param trigger a trigger used to lookup the Option\n      * @param defaultValues the result to return if no values are found\n      * @return a list of values or defaultValues if none are found\n      */\n     List getValues(final String trigger, final List defaultValues);\n-    \n-    /**\n-     * Retrieves the Argument values associated with the specified Option\n-     * \n+\n+    /**\n+     * Retrieves the Argument values associated with the specified Option\n+     *\n      * @param option the Option associated with the values\n      * @return a list of values or an empty List if none are found\n      */\n     List getValues(final Option option);\n-    \n-    /**\n-     * Retrieves the Argument values associated with the specified Option\n-     * \n+\n+    /**\n+     * Retrieves the Argument values associated with the specified Option\n+     *\n      * @param option the Option associated with the values\n      * @param defaultValues the result to return if no values are found\n      * @return a list of values or defaultValues if none are found\n      */\n     List getValues(final Option option, final List defaultValues);\n-    \n-    /**\n-     * Retrieves the single Argument value associated with the specified Option\n-     * \n+\n+    /**\n+     * Retrieves the single Argument value associated with the specified Option\n+     *\n      * @param trigger a trigger used to lookup the Option\n      * @return the matching value or null if none exists\n      * @throws IllegalStateException if more than one values are found\n      */\n     Object getValue(final String trigger) throws IllegalStateException;\n-    \n-    /**\n-     * Retrieves the single Argument value associated with the specified Option\n-     * \n+\n+    /**\n+     * Retrieves the single Argument value associated with the specified Option\n+     *\n      * @param trigger a trigger used to lookup the Option\n      * @param defaultValue the result to use if no values are found\n      * @return the matching value or defaultValue if none exists\n      * @throws IllegalStateException if more than one values are found\n      */\n     Object getValue(final String trigger, final Object defaultValue) throws IllegalStateException;\n-    \n-    /**\n-     * Retrieves the single Argument value associated with the specified Option\n-     * \n+\n+    /**\n+     * Retrieves the single Argument value associated with the specified Option\n+     *\n      * @param option the Option associated with the value\n      * @return the matching value or null if none exists\n      * @throws IllegalStateException if more than one values are found\n      */\n     Object getValue(final Option option) throws IllegalStateException;\n-    \n-    /**\n-     * Retrieves the single Argument value associated with the specified Option\n-     * \n+\n+    /**\n+     * Retrieves the single Argument value associated with the specified Option\n+     *\n      * @param option the Option associated with the value\n      * @param defaultValue the result to use if no values are found\n      * @return the matching value or defaultValue if none exists\n      * @throws IllegalStateException if more than one values are found\n      */\n     Object getValue(final Option option, final Object defaultValue) throws IllegalStateException;\n-    \n-    /**\n-     * Retrieves the Boolean value associated with the specified Switch\n-     * \n+\n+    /**\n+     * Retrieves the Boolean value associated with the specified Switch\n+     *\n      * @param trigger a trigger used to lookup the Option\n      * @return the Boolean associated with trigger or null if none exists\n      */\n     Boolean getSwitch(final String trigger);\n-    \n-    /**\n-     * Retrieves the Boolean value associated with the specified Switch\n-     * \n+\n+    /**\n+     * Retrieves the Boolean value associated with the specified Switch\n+     *\n      * @param trigger a trigger used to lookup the Option\n      * @param defaultValue the Boolean to use if none match\n      * @return the Boolean associated with trigger or defaultValue if none exists\n      */\n     Boolean getSwitch(final String trigger, final Boolean defaultValue);\n-    \n-    /**\n-     * Retrieves the Boolean value associated with the specified Switch\n-     * \n+\n+    /**\n+     * Retrieves the Boolean value associated with the specified Switch\n+     *\n      * @param option the Option associated with the value\n      * @return the Boolean associated with option or null if none exists\n      */\n     Boolean getSwitch(final Option option);\n-    \n-    /**\n-     * Retrieves the Boolean value associated with the specified Switch\n-     * \n+\n+    /**\n+     * Retrieves the Boolean value associated with the specified Switch\n+     *\n      * @param option the Option associated with the value\n      * @param defaultValue the Boolean to use if none match\n      * @return the Boolean associated with option or defaultValue if none exists\n      */\n     Boolean getSwitch(final Option option, final Boolean defaultValue);\n-    \n-    \n-    /**\n-     * Retrieves the value associated with the specified property \n-     * \n+\n+\n+    /**\n+     * Retrieves the value associated with the specified property\n+     *\n      * @param property the property name to lookup\n      * @return the value of the property or null\n      */\n     String getProperty(final String property);\n-    \n-    /**\n-     * Retrieves the value associated with the specified property \n-     * \n+\n+    /**\n+     * Retrieves the value associated with the specified property\n+     *\n      * @param property the property name to lookup\n      * @param defaultValue the value to use if no other is found\n      * @return the value of the property or defaultValue\n      */\n     String getProperty(final String property, final String defaultValue);\n-    \n+\n     /**\n      * Retrieves the set of all property names associated with this CommandLine\n-     * \n-     * @return a none null set of property names \n+     *\n+     * @return a none null set of property names\n      */\n     Set getProperties();\n-    \n-    /**\n-     * Retrieves the number of times the specified Option appeared in this \n+\n+    /**\n+     * Retrieves the number of times the specified Option appeared in this\n      * CommandLine\n-     * \n+     *\n      * @param trigger a trigger used to lookup the Option\n      * @return the number of occurrences of the option\n      */\n     int getOptionCount(final String trigger);\n-    \n-    /**\n-     * Retrieves the number of times the specified Option appeared in this \n+\n+    /**\n+     * Retrieves the number of times the specified Option appeared in this\n      * CommandLine\n-     * \n+     *\n      * @param option the Option associated to check\n      * @return the number of occurrences of the option\n      */\n     int getOptionCount(final Option option);\n-    \n+\n     /**\n      * Retrieves a list of all Options found in this CommandLine\n-     * \n+     *\n      * @return a none null list of Options\n      */\n     List getOptions();\n-    \n+\n     /**\n      * Retrieves a list of all Option triggers found in this CommandLine\n-     * \n+     *\n      * @return a none null list of Option triggers\n      */\n     Set getOptionTriggers();\n--- a/src/java/org/apache/commons/cli2/DisplaySetting.java\n+++ b/src/java/org/apache/commons/cli2/DisplaySetting.java\n  * will be passed to a method that will lookup the presence of the values.\n  */\n public class DisplaySetting {\n-\t\n+\n     private static final Set all = new HashSet();\n \n     /**\n      * A Set guarenteed to contain all possible DisplaySetting values\n      */\n     public static final Set ALL = Collections.unmodifiableSet(all);\n-    \n+\n     /**\n      * A Set guarenteed to contain no DisplaySetting values\n      */\n     public static final Set NONE = Collections.EMPTY_SET;\n-    \n+\n     /**\n      * Indicates that aliases should be included\n      */\n     public static final DisplaySetting DISPLAY_ALIASES =\n         new DisplaySetting(\"DISPLAY_ALIASES\");\n-    \n+\n     /**\n      * Indicates that optionality should be included\n      */\n     public static final DisplaySetting DISPLAY_OPTIONAL =\n         new DisplaySetting(\"DISPLAY_OPTIONAL\");\n-    \n+\n     /**\n      * Indicates that property options should be included\n      */\n     public static final DisplaySetting DISPLAY_PROPERTY_OPTION =\n         new DisplaySetting(\"DISPLAY_PROPERTY_OPTION\");\n-    \n+\n     /**\n      * Indicates that switches should be included enabled\n      */\n     public static final DisplaySetting DISPLAY_SWITCH_ENABLED =\n         new DisplaySetting(\"DISPLAY_SWITCH_ENABLED\");\n-    \n+\n     /**\n      * Indicates that switches should be included disabled\n      */\n     public static final DisplaySetting DISPLAY_SWITCH_DISABLED =\n         new DisplaySetting(\"DISPLAY_SWITCH_DISABLED\");\n-    \n+\n     /**\n      * Indicates that group names should be included\n      */\n     public static final DisplaySetting DISPLAY_GROUP_NAME =\n         new DisplaySetting(\"DISPLAY_GROUP_NAME\");\n-    \n+\n     /**\n      * Indicates that groups should be included expanded\n      */\n     public static final DisplaySetting DISPLAY_GROUP_EXPANDED =\n         new DisplaySetting(\"DISPLAY_GROUP_EXPANDED\");\n-    \n+\n     /**\n      * Indicates that group arguments should be included\n      */\n     public static final DisplaySetting DISPLAY_GROUP_ARGUMENT =\n         new DisplaySetting(\"DISPLAY_GROUP_ARGUMENT\");\n-    \n+\n     /**\n      * Indicates that group outer brackets should be included\n      */\n     public static final DisplaySetting DISPLAY_GROUP_OUTER =\n         new DisplaySetting(\"DISPLAY_GROUP_OUTER\");\n-    \n+\n     /**\n      * Indicates that arguments should be included numbered\n      */\n     public static final DisplaySetting DISPLAY_ARGUMENT_NUMBERED =\n         new DisplaySetting(\"DISPLAY_ARGUMENT_NUMBERED\");\n-    \n+\n     /**\n      * Indicates that arguments should be included bracketed\n      */\n     public static final DisplaySetting DISPLAY_ARGUMENT_BRACKETED =\n         new DisplaySetting(\"DISPLAY_ARGUMENT_BRACKETED\");\n-    \n+\n     /**\n      * Indicates that arguments of Parents should be included\n      */\n     public static final DisplaySetting DISPLAY_PARENT_ARGUMENT =\n         new DisplaySetting(\"DISPLAY_PARENT_ARGUMENT\");\n-    \n+\n     /**\n      * Indicates that children of Parents should be included\n      */\n     public static final DisplaySetting DISPLAY_PARENT_CHILDREN =\n         new DisplaySetting(\"DISPLAY_PARENT_CHILDREN\");\n-    \n+\n     /**\n      * The name of the setting\n      */\n     private final String name;\n-    \n+\n     /**\n      * The hashCode of the setting\n      */\n--- a/src/java/org/apache/commons/cli2/Group.java\n+++ b/src/java/org/apache/commons/cli2/Group.java\n \n     /**\n      * Appends usage information to the specified StringBuffer\n-     * \n+     *\n      * @param buffer the buffer to append to\n      * @param helpSettings a set of display settings @see DisplaySetting\n      * @param comp a comparator used to sort the Options\n-     * @param separator the String used to separate member Options \n+     * @param separator the String used to separate member Options\n      */\n     void appendUsage(\n         final StringBuffer buffer,\n      *\n      * @see #getMinimum()\n      * @see #getMaximum()\n-     * @return true iff the CommandLine will be invalid without at least one \n+     * @return true iff the CommandLine will be invalid without at least one\n      *         member option\n      */\n     boolean isRequired();\n--- a/src/java/org/apache/commons/cli2/HelpLine.java\n+++ b/src/java/org/apache/commons/cli2/HelpLine.java\n     /**\n      * Builds a usage string for the option using the specified settings and\n      * comparator.\n-     * \n+     *\n      * @param helpSettings\n      *            the settings to apply\n      * @param comparator\n--- a/src/java/org/apache/commons/cli2/Option.java\n+++ b/src/java/org/apache/commons/cli2/Option.java\n \n     /**\n      * Processes String arguments into a CommandLine.\n-     * \n+     *\n      * The iterator will initially point at the first argument to be processed\n      * and at the end of the method should point to the first argument not\n      * processed. This method MUST process at least one argument from the\n      * ListIterator.\n-     * \n+     *\n      * @param commandLine\n      *            The CommandLine object to store results in\n      * @param args\n         final WriteableCommandLine commandLine,\n         final ListIterator args)\n         throws OptionException;\n-    \n+\n     /**\n      * Adds defaults to a CommandLine.\n-     * \n-     * Any defaults for this option are applied as well as the defaults for \n+     *\n+     * Any defaults for this option are applied as well as the defaults for\n      * any contained options\n-     * \n+     *\n      * @param commandLine\n      *            The CommandLine object to store defaults in\n      */\n     /**\n      * Indicates whether this Option will be able to process the particular\n      * argument.\n-     * \n+     *\n      * @param argument\n      *            The argument to be tested\n      * @return true if the argument can be processed by this Option\n      * Indicates whether this Option will be able to process the particular\n      * argument. The ListIterator must be restored to the initial state before\n      * returning the boolean.\n-     * \n+     *\n      * @see #canProcess(WriteableCommandLine,String)\n      * @param arguments\n      *            the ListIterator over String arguments\n      * Identifies the argument prefixes that should trigger this option. This\n      * is used to decide which of many Options should be tried when processing\n      * a given argument string.\n-     * \n+     *\n      * The returned Set must not be null.\n-     * \n+     *\n      * @return The set of triggers for this Option\n      */\n     Set getTriggers();\n      * is used to identify whether a given string looks like an option or an\n      * argument value. Typically an option would return the set [--,-] while\n      * switches might offer [-,+].\n-     * \n+     *\n      * The returned Set must not be null.\n-     * \n+     *\n      * @return The set of prefixes for this Option\n      */\n     Set getPrefixes();\n     /**\n      * Checks that the supplied CommandLine is valid with respect to this\n      * option.\n-     * \n+     *\n      * @param commandLine\n      *            The CommandLine to check.\n      * @throws OptionException\n \n     /**\n      * Builds up a list of HelpLineImpl instances to be presented by HelpFormatter.\n-     * \n+     *\n      * @see HelpLine\n      * @see org.apache.commons.cli2.util.HelpFormatter\n      * @param depth\n \n     /**\n      * Appends usage information to the specified StringBuffer\n-     * \n+     *\n      * @param buffer the buffer to append to\n      * @param helpSettings a set of display settings @see DisplaySetting\n      * @param comp a comparator used to sort the Options\n     /**\n      * The preferred name of an option is used for generating help and usage\n      * information.\n-     * \n+     *\n      * @return The preferred name of the option\n      */\n     String getPreferredName();\n     /**\n      * Returns a description of the option. This string is used to build help\n      * messages as in the HelpFormatter.\n-     * \n+     *\n      * @see org.apache.commons.cli2.util.HelpFormatter\n      * @return a description of the option.\n      */\n     String getDescription();\n \n     /**\n-     * Returns the id of the option.  This can be used in a loop and switch \n+     * Returns the id of the option.  This can be used in a loop and switch\n      * construct:\n-     * \n+     *\n      * <code>\n      * for(Option o : cmd.getOptions()){\n      *     switch(o.getId()){\n      *             ...\n      *     }\n      * }\n-     * </code> \n-     * \n+     * </code>\n+     *\n      * The returned value is not guarenteed to be unique.\n-     * \n+     *\n      * @return the id of the option.\n      */\n     int getId();\n--- a/src/java/org/apache/commons/cli2/Parent.java\n+++ b/src/java/org/apache/commons/cli2/Parent.java\n import java.util.ListIterator;\n \n /**\n- * An Option that can have an argument and/or group of child Options in the form \n+ * An Option that can have an argument and/or group of child Options in the form\n  * \"-f &lt;arg&gt; [-a|-b|-c]\".\n  */\n public interface Parent extends Option {\n      * Processes the parent part of the Option.  The combination of parent,\n      * argument and children is handled by the process method.\n      * @see Option#process(WriteableCommandLine, ListIterator)\n-     * \n+     *\n      * @param commandLine the CommandLine to write results to\n      * @param args a ListIterator over argument strings positioned at the next\n      *             argument to process\n--- a/src/java/org/apache/commons/cli2/WriteableCommandLine.java\n+++ b/src/java/org/apache/commons/cli2/WriteableCommandLine.java\n  * A CommandLine that detected values and options can be written to.\n  */\n public interface WriteableCommandLine extends CommandLine {\n-    \n+\n     /**\n      * Adds an Option to the CommandLine\n      * @param option the Option to add\n      */\n     void addOption(final Option option);\n-    \n+\n     /**\n      * Adds a value to an Option in the CommandLine.\n      * @param option the Option to add to\n      * @param defaultValues the defaults for the option\n      */\n     void setDefaultValues(final Option option, final List defaultValues);\n-    \n+\n     /**\n      * Adds a switch value to an Option in the CommandLine.\n      * @param option the Option to add to\n      * @throws IllegalStateException if the switch has already been added\n      */\n     void addSwitch(final Option option, final boolean value) throws IllegalStateException;\n-    \n+\n     /**\n      * Sets the default state for a Switch in the CommandLine.\n      * @param option the Option to add to\n      * @param defaultSwitch the defaults state for ths switch\n      */\n     void setDefaultSwitch(final Option option, final Boolean defaultSwitch);\n-    \n+\n     /**\n      * Adds a property value to a name in the CommandLine.\n      * Replaces any existing value for the property.\n-     * \n+     *\n      * @param property the name of the property\n      * @param value the value of the property\n      */\n     void addProperty(final String property, final String value);\n-    \n+\n     /**\n-     * Detects whether the argument looks like an Option trigger \n+     * Detects whether the argument looks like an Option trigger\n      * @param argument the argument to test\n      * @return true if the argument looks like an Option trigger\n      */\n--- a/src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java\n+++ b/src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java\n \n \t/** i18n */\n \tprivate final static ResourceHelper resources = ResourceHelper.getResourceHelper();\n-\t\n+\n     /** name of the argument. Used for display and lookups in CommandLine */\n     private String name;\n \n     /**\n      * Creates a new Argument instance using the options specified in this\n      * ArgumentBuilder.\n-     * \n+     *\n      * @return A new Argument instance using the options specified in this\n      * ArgumentBuilder.\n      */\n     /**\n      * Sets the name of the argument. The name is used when displaying usage\n      * information and to allow lookups in the CommandLine object.\n-     * \n+     *\n      * @see org.apache.commons.cli2.CommandLine#getValue(String)\n-     * \n+     *\n      * @param newName the name of the argument\n      * @return this ArgumentBuilder\n      */\n \n     /**\n      * Sets the description of the argument.\n-     * \n+     *\n      * The description is used when displaying online help.\n-     * \n+     *\n      * @param newDescription a description of the argument\n      * @return this ArgumentBuilder\n      */\n \n     /**\n      * Sets the minimum number of values needed for the argument to be valid.\n-     * \n+     *\n      * @param newMinimum the number of values needed\n      * @return this ArgumentBuilder\n      */\n \n     /**\n      * Sets the maximum number of values allowed for the argument to be valid.\n-     * \n+     *\n      * @param newMaximum the number of values allowed\n      * @return this ArgumentBuilder\n      */\n      * Sets the character used to separate the values from the option. When an\n      * argument is of the form -libs:dir1,dir2,dir3 the initialSeparator would\n      * be ':'.\n-     * \n-     * @param newInitialSeparator the character used to separate the values \n+     *\n+     * @param newInitialSeparator the character used to separate the values\n      * from the option\n      * @return this ArgumentBuilder\n      */\n      * Sets the character used to separate the values from each other. When an\n      * argument is of the form -libs:dir1,dir2,dir3 the subsequentSeparator\n      * would be ','.\n-     * \n-     * @param newSubsequentSeparator the character used to separate the values \n+     *\n+     * @param newSubsequentSeparator the character used to separate the values\n      * from each other\n      * @return this ArgumentBuilder\n      */\n     /**\n      * Sets the validator instance used to perform validation on the Argument\n      * values.\n-     * \n+     *\n      * @param newValidator a Validator instance\n      * @return this ArgumentBuilder\n      */\n     /**\n      * Sets the \"consume remaining\" option, defaults to \"--\". Use this if you\n      * want to allow values that might be confused with option strings.\n-     * \n-     * @param newConsumeRemaining the string to use for the consume \n+     *\n+     * @param newConsumeRemaining the string to use for the consume\n      * remaining option\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withConsumeRemaining(final String newConsumeRemaining) {\n     \tif (newConsumeRemaining == null) {\n     \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING));\n-    \t} \n+    \t}\n     \tif ( \"\".equals(newConsumeRemaining)) {\n     \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING));\n     \t}\n \n     /**\n      * Sets the default value.\n-     * \n+     *\n      * @param defaultValue the default value for the Argument\n      * @return this ArgumentBuilder\n      */\n     \tif (defaultValue == null) {\n     \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT));\n     \t}\n-    \t\n+\n         if (this.defaultValues == null) {\n             this.defaultValues = new ArrayList(1);\n         }\n \n     /**\n      * Sets the default values.\n-     * \n+     *\n      * @param newDefaultValues the default values for the Argument\n      * @return this ArgumentBuilder\n      */\n \n     /**\n      * Sets the id\n-     * \n+     *\n      * @param newId the id of the Argument\n      * @return this ArgumentBuilder\n      */\n--- a/src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java\n+++ b/src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java\n  * Manages a queue of default CommandLines. This CommandLine implementation is\n  * backed by a queue of CommandLine instances which are queried in turn until a\n  * suitable result is found.\n- * \n+ *\n  * CommandLine instances can either be added to the back of the queue or can be\n  * pushed in at a specific position.\n- * \n+ *\n  * @see #appendCommandLine(CommandLine)\n  * @see #insertCommandLine(int, CommandLine)\n  */\n      * Adds a CommandLine instance to the back of the queue. The supplied\n      * CommandLine will be used as defaults when all other CommandLines produce\n      * no result\n-     * \n+     *\n      * @param commandLine\n      *            the default values to use if all CommandLines\n      */\n     public void appendCommandLine(final CommandLine commandLine) {\n         commandLines.add(commandLine);\n     }\n-    \n+\n     /**\n      * Adds a CommandLine instance to a specified position in the queue.\n-     * \n+     *\n      * @param index ths position at which to insert\n      * @param commandLine the CommandLine to insert\n      */\n         final CommandLine commandLine) {\n         commandLines.add(index, commandLine);\n     }\n-    \n+\n     /**\n      * Builds an iterator over the build in CommandLines.\n-     * \n+     *\n      * @return an unmodifiable iterator\n      */\n     public Iterator commandLines(){\n--- a/src/java/org/apache/commons/cli2/commandline/Parser.java\n+++ b/src/java/org/apache/commons/cli2/commandline/Parser.java\n         for (int i = 0; i < arguments.length; i++) {\n             final String argument = arguments[i];\n \n-            // ensure non intern'd strings are used \n+            // ensure non intern'd strings are used\n             // so that == comparisons work as expected\n             argumentList.add(new String(argument));\n         }\n--- a/src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java\n+++ b/src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java\n  *\n  * @see java.util.prefs.Preferences\n  * @see org.apache.commons.cli2.commandline.DefaultingCommandLine\n- * @see org.apache.commons.cli2.Option#getPreferredName() \n+ * @see org.apache.commons.cli2.Option#getPreferredName()\n  */\n public class PreferencesCommandLine extends CommandLineImpl {\n-\t\n+\n \tprivate static final char NUL = '\\0';\n \tprivate final Preferences preferences;\n \tprivate final Option root;\n \tprivate final char separator;\n-\t\n+\n \t/**\n      * Creates a new PreferencesCommandLine using the specified root Option and\n      * Preferences node.  Argument values will be separated using the char 0.\n-     * \n+     *\n \t * @param root the CommandLine's root Option\n \t * @param preferences the Preferences node to get values from\n \t */\n \tpublic PreferencesCommandLine(final Option root, final Preferences preferences){\n \t\tthis(root,preferences,NUL);\n \t}\n-\t\n+\n     /**\n      * Creates a new PreferencesCommandLine using the specified root Option,\n      * Preferences node and value separator.\n-     * \n+     *\n      * @param root the CommandLine's root Option\n      * @param preferences the Preferences node to get values from\n      * @param separator the character to split argument values\n \t\tthis.preferences = preferences;\n \t\tthis.separator = separator;\n \t}\n-\t\n+\n \tpublic boolean hasOption(Option option) {\n \t\tif(option==null){\n \t\t\treturn false;\n \n \tpublic List getValues(final Option option, final List defaultValues) {\n \t\tfinal String value = preferences.get(option.getPreferredName(),null);\n-\t\t\n+\n \t\tif(value==null){\n \t\t\treturn defaultValues;\n \t\t}\n \t\telse if(separator>NUL){\n \t\t\tfinal List values = new ArrayList();\n \t\t\tfinal StringTokenizer tokens = new StringTokenizer(value,String.valueOf(separator));\n-\t\t\t\n+\n \t\t\twhile(tokens.hasMoreTokens()){\n \t\t\t\tvalues.add(tokens.nextToken());\n \t\t\t}\n-\t\t\t\n+\n \t\t\treturn values;\n \t\t}\n \t\telse{\n \t\t\treturn defaultValue;\n \t\t}\n \t}\n-\t\n+\n \tpublic String getProperty(final String property, final String defaultValue) {\n \t\treturn preferences.get(property, defaultValue);\n \t}\n--- a/src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java\n+++ b/src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java\n  *\n  * @see java.util.Properties\n  * @see org.apache.commons.cli2.commandline.DefaultingCommandLine\n- * @see org.apache.commons.cli2.Option#getPreferredName() \n+ * @see org.apache.commons.cli2.Option#getPreferredName()\n  */\n public class PropertiesCommandLine extends CommandLineImpl {\n-\t\n+\n \tprivate static final char NUL = '\\0';\n \tprivate final Properties properties;\n \tprivate final Option root;\n \tprivate final char separator;\n-\t\n+\n     /**\n      * Creates a new PropertiesCommandLine using the specified root Option,\n      * Properties instance.  The character 0 is used as the value separator.\n \tpublic PropertiesCommandLine(final Option root, final Properties properties){\n \t\tthis(root,properties,NUL);\n \t}\n-\t\n+\n     /**\n      * Creates a new PropertiesCommandLine using the specified root Option,\n      * Properties instance and value separator.\n \t\tthis.properties = properties;\n \t\tthis.separator = separator;\n \t}\n-\t\n+\n \n \tpublic boolean hasOption(Option option) {\n \t\tif(option==null){\n \n \tpublic List getValues(final Option option, final List defaultValues) {\n \t\tfinal String value = properties.getProperty(option.getPreferredName());\n-\t\t\n+\n \t\tif(value==null){\n \t\t\treturn defaultValues;\n \t\t}\n \t\telse if(separator>NUL){\n \t\t\tfinal List values = new ArrayList();\n \t\t\tfinal StringTokenizer tokens = new StringTokenizer(value,String.valueOf(separator));\n-\t\t\t\n+\n \t\t\twhile(tokens.hasMoreTokens()){\n \t\t\t\tvalues.add(tokens.nextToken());\n \t\t\t}\n-\t\t\t\n+\n \t\t\treturn values;\n \t\t}\n \t\telse{\n \t\t\treturn defaultValue;\n \t\t}\n \t}\n-\t\n+\n \tpublic String getProperty(final String property, final String defaultValue) {\n \t\treturn properties.getProperty(property,defaultValue);\n \t}\n--- a/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n     public String getConsumeRemaining() {\n     \treturn this.consumeRemaining;\n     }\n-    \n+\n     public List getDefaultValues() {\n     \treturn this.defaultValues;\n     }\n-    \n+\n     public Validator getValidator() {\n     \treturn this.validator;\n     }\n-    \n+\n     public void validate(final WriteableCommandLine commandLine)\n         throws OptionException {\n         validate(commandLine, this);\n--- a/src/java/org/apache/commons/cli2/option/GroupImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/GroupImpl.java\n         this.minimum = minimum;\n         this.maximum = maximum;\n \n-        // store a copy of the options to be used by the \n+        // store a copy of the options to be used by the\n         // help methods\n         this.options = Collections.unmodifiableList(options);\n \n--- a/src/java/org/apache/commons/cli2/option/HelpLineImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/HelpLineImpl.java\n \n     /** The help settings used to obtain the previous usage */\n     private transient Set cachedHelpSettings;\n-    \n+\n     /** The comparator used to obtain the previous usage */\n     private transient Comparator cachedComparator;\n-    \n+\n     /** The previously obtained usage */\n     private transient String cachedUsage;\n-    \n+\n     /**\n      * Creates a new HelpLineImpl to represent a particular Option in the online\n      * help.\n-     * \n+     *\n      * @param option\n      *            Option that the HelpLineImpl describes\n      * @param indent\n     public Option getOption() {\n         return option;\n     }\n-    \n+\n     /**\n-     * Builds a usage string for the option using the specified settings and \n+     * Builds a usage string for the option using the specified settings and\n      * comparator.\n-     * \n-     *  \n+     *\n+     *\n      * @param helpSettings the settings to apply\n      * @param comparator a comparator to sort options when applicable\n      * @return the usage string\n         if (cachedUsage == null\n             || cachedHelpSettings != helpSettings\n             || cachedComparator != comparator) {\n-            \n+\n             // cache the arguments to avoid redoing work\n             cachedHelpSettings = helpSettings;\n             cachedComparator = comparator;\n-            \n+\n             // build the new buffer\n             final StringBuffer buffer = new StringBuffer();\n             for (int i = 0; i < indent; ++i) {\n                 buffer.append(\"  \");\n             }\n             option.appendUsage(buffer, helpSettings, comparator);\n-            \n+\n             // cache the usage string\n             cachedUsage = buffer.toString();\n         }\n--- a/src/java/org/apache/commons/cli2/resource/ResourceHelper.java\n+++ b/src/java/org/apache/commons/cli2/resource/ResourceHelper.java\n     private ResourceBundle bundle;\n \n     private String prop;\n-    \n+\n     /**\n      * Create a new ResourceHelper for the current locale.\n      */\n         }\n \n         this.prop = bundleName;\n-        \n+\n         int firstUnderscore = bundleName.indexOf('_');\n         int secondUnderscore = bundleName.indexOf('_', firstUnderscore + 1);\n \n         Locale locale;\n-        if (firstUnderscore != -1) { \n+        if (firstUnderscore != -1) {\n         String language = bundleName.substring(firstUnderscore + 1, secondUnderscore);\n         String country = bundleName.substring(secondUnderscore + 1);\n         \tlocale = new Locale(language, country);\n     public String getBundleName() {\n     \treturn this.prop;\n     }\n-    \n+\n     /**\n      * Gets the ResourceHelper appropriate to the current locale.\n      * @return a ResourceHelper\n--- a/src/java/org/apache/commons/cli2/util/Comparators.java\n+++ b/src/java/org/apache/commons/cli2/util/Comparators.java\n  * A collection of Comparators suitable for use with Option instances.\n  */\n public class Comparators {\n-\t\n+\n \tprivate Comparators(){\n \t\t// constructor hiden from potential users\n \t}\n-\t\n+\n \n     /**\n      * Chains comparators together.\n-     * \n+     *\n      * @see #chain(Comparator[])\n      * @param c0\n      *            a comparator\n \n     /**\n      * Chains comparators together.\n-     * \n+     *\n      * @see #chain(Comparator[])\n      * @param c0\n      *            a comparator\n \n     /**\n      * Chains comparators together.\n-     * \n+     *\n      * @see #chain(Comparator[])\n      * @param c0\n      *            a comparator\n \n     /**\n      * Chains comparators together.\n-     * \n+     *\n      * @see #chain(Comparator[])\n      * @param c0\n      *            a comparator\n \n     /**\n      * Chains comparators together.\n-     * \n+     *\n      * @see #chain(Comparator[])\n      * @param comparators\n      *            a List of comparators to chain together\n      * Chains an array of comparators together. Each Comparator will be called\n      * in turn until one of them return a non-zero value, this value will be\n      * returned.\n-     * \n+     *\n      * @param comparators\n      *            the array of comparators\n      * @return a chained comparator\n \n     /**\n      * Reverses a comparator's logic.\n-     * \n+     *\n      * @param wrapped\n      *            the Comparator to reverse the logic of\n      * @return a comparator with reverse logic\n \n     /**\n      * Forces Group instances to appear at the beginning of lists\n-     * \n+     *\n      * @see Group\n      * @return a new comparator\n      */\n \n     /**\n      * Forces Group instances to appear at the end of lists\n-     * \n+     *\n      * @see Group\n      * @return a new comparator\n      */\n \n     /**\n      * Forces Switch instances to appear at the beginning of lists\n-     * \n+     *\n      * @see Switch\n      * @return a new comparator\n      */\n \n     /**\n      * Forces Switch instances to appear at the end of lists\n-     * \n+     *\n      * @see Switch\n      * @return a new comparator\n      */\n \n     /**\n      * Forces Command instances to appear at the beginning of lists\n-     * \n+     *\n      * @see Command\n      * @return a new comparator\n      */\n \n     /**\n      * Forces Command instances to appear at the end of lists\n-     * \n+     *\n      * @see Command\n      * @return a new comparator\n      */\n \n     /**\n      * Forces DefaultOption instances to appear at the beginning of lists\n-     * \n+     *\n      * @see DefaultOption\n      * @return a new comparator\n      */\n \n     /**\n      * Forces DefaultOption instances to appear at the end of lists\n-     * \n+     *\n      * @see DefaultOption\n      * @return a new comparator\n      */\n     /**\n      * Forces Comparators with a particular trigger to appear at the beginning\n      * of lists\n-     * \n+     *\n      * @param name\n      *            the trigger name to select\n      * @see Option#getTriggers()\n     /**\n      * Forces Comparators with a particular trigger to appear at the end of\n      * lists\n-     * \n+     *\n      * @param name\n      *            the trigger name to select\n      * @see Option#getTriggers()\n \n     private static class Named implements Comparator {\n         private final String name;\n-        \n+\n         /**\n          * Creates a Comparator that sorts a particular name high in order\n          * @param name the trigger name to select\n \n     /**\n      * Orders Options by preferredName\n-     * \n+     *\n      * @see Option#getPreferredName()\n      * @return a new comparator\n      */\n \n     /**\n      * Orders Options by preferredName, reversed\n-     * \n+     *\n      * @see Option#getPreferredName()\n      * @return a new comparator\n      */\n \n     /**\n      * Orders Options grouping required Options first\n-     * \n+     *\n      * @see Option#isRequired()\n      * @return a new comparator\n      */\n     public static Comparator requiredFirst() {\n         return new Required();\n     }\n-    \n+\n     /**\n      * Orders Options grouping required Options last\n-     * \n+     *\n      * @see Option#isRequired()\n      * @return a new comparator\n      */\n     public static Comparator requiredLast() {\n         return reverse(requiredFirst());\n     }\n-    \n+\n     private static class Required implements Comparator {\n         public int compare(final Object oleft, final Object oright) {\n             final Option left = (Option)oleft;\n             final Option right = (Option)oright;\n-            \n+\n             final boolean l = left.isRequired();\n             final boolean r = right.isRequired();\n \n--- a/src/java/org/apache/commons/cli2/util/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli2/util/HelpFormatter.java\n                 continue;\n             }\n \n-            // move to the next ideal wrap point \n+            // move to the next ideal wrap point\n             right = (left + width) - 1;\n \n             // if we have run out of characters\n--- a/src/java/org/apache/commons/cli2/validation/FileValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/FileValidator.java\n  * the {@link java.util.List} of values is replaced with the\n  * {@link java.io.File} instance.\n  *\n- * The following attributes can also be specified using the \n+ * The following attributes can also be specified using the\n  * appropriate settors:\n  * <ul>\n  *  <li>writable</li>\n  * FileValidator validator = FileValidator.getExistingFileInstance();\n  * validator.setReadable(true);\n  * validator.setWritable(true);\n- * \n- * Argument age = \n+ *\n+ * Argument age =\n  *     builder.withName(\"config\");\n  *            .withValidator(validator);\n  * </pre>\n- * \n+ *\n  * @author Rob Oxspring\n  * @author John Keyes\n  */\n \n     /** whether the argument value is readable */\n     private boolean readable = false;\n-    \n+\n     /** whether the argument value is writable */\n     private boolean writable = false;\n-    \n+\n     /** whether the argument value exists */\n     private boolean existing = false;\n-    \n+\n     /** whether the argument value is a directory */\n     private boolean directory = false;\n-    \n+\n     /** whether the argument value is a file */\n     private boolean file = false;\n \n      * Validate the list of values against the list of permitted values.\n      * If a value is valid, replace the string in the <code>values</code>\n      * {@link java.util.List} with the {@link java.io.File} instance.\n-     * \n+     *\n      * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)\n      */\n     public void validate(final List values) throws InvalidArgumentException {\n \n                 throw new InvalidArgumentException(name);\n             }\n-            \n+\n             i.set(f);\n         }\n     }\n     /**\n      * Specifies whether the argument values must represent directories.\n      *\n-     * @param directory specifies whether the argument values must \n+     * @param directory specifies whether the argument values must\n      * represent directories.\n      */\n     public void setDirectory(boolean directory) {\n     }\n \n     /**\n-     * Returns whether the argument values must represent existing \n-     * files/directories.\n-     *\n-     * @return whether the argument values must represent existing \n+     * Returns whether the argument values must represent existing\n+     * files/directories.\n+     *\n+     * @return whether the argument values must represent existing\n      * files/directories.\n      */\n     public boolean isExisting() {\n     }\n \n     /**\n-     * Specifies whether the argument values must represent existing \n-     * files/directories.\n-     *\n-     * @param existing specifies whether the argument values must \n+     * Specifies whether the argument values must represent existing\n+     * files/directories.\n+     *\n+     * @param existing specifies whether the argument values must\n      * represent existing files/directories.\n      */\n     public void setExisting(boolean existing) {\n     /**\n      * Specifies whether the argument values must represent files.\n      *\n-     * @param file specifies whether the argument values must \n+     * @param file specifies whether the argument values must\n      * represent files.\n      */\n     public void setFile(boolean file) {\n     }\n \n     /**\n-     * Returns whether the argument values must represent hidden \n-     * files/directories.\n-     *\n-     * @return whether the argument values must represent hidden \n+     * Returns whether the argument values must represent hidden\n+     * files/directories.\n+     *\n+     * @return whether the argument values must represent hidden\n      * files/directories.\n      */\n     public boolean isHidden() {\n     }\n \n     /**\n-     * Specifies whether the argument values must represent hidden \n-     * files/directories.\n-     *\n-     * @param hidden specifies whether the argument values must \n+     * Specifies whether the argument values must represent hidden\n+     * files/directories.\n+     *\n+     * @param hidden specifies whether the argument values must\n      * represent hidden files/directories.\n      */\n     public void setHidden(boolean hidden) {\n     }\n \n     /**\n-     * Returns whether the argument values must represent readable \n-     * files/directories.\n-     *\n-     * @return whether the argument values must represent readable \n+     * Returns whether the argument values must represent readable\n+     * files/directories.\n+     *\n+     * @return whether the argument values must represent readable\n      * files/directories.\n      */\n     public boolean isReadable() {\n     }\n \n     /**\n-     * Specifies whether the argument values must represent readable \n-     * files/directories.\n-     *\n-     * @param readable specifies whether the argument values must \n+     * Specifies whether the argument values must represent readable\n+     * files/directories.\n+     *\n+     * @param readable specifies whether the argument values must\n      * represent readable files/directories.\n      */\n     public void setReadable(boolean readable) {\n     }\n \n     /**\n-     * Returns whether the argument values must represent writable \n-     * files/directories.\n-     *\n-     * @return whether the argument values must represent writable \n+     * Returns whether the argument values must represent writable\n+     * files/directories.\n+     *\n+     * @return whether the argument values must represent writable\n      * files/directories.\n      */\n     public boolean isWritable() {\n     }\n \n     /**\n-     * Specifies whether the argument values must represent writable \n-     * files/directories.\n-     *\n-     * @param writable specifies whether the argument values must \n+     * Specifies whether the argument values must represent writable\n+     * files/directories.\n+     *\n+     * @param writable specifies whether the argument values must\n      * represent writable files/directories.\n      */\n     public void setWritable(boolean writable) {\n--- a/src/java/org/apache/commons/cli2/validation/Validator.java\n+++ b/src/java/org/apache/commons/cli2/validation/Validator.java\n \n     /**\n      * Validate the specified values (List of Strings).\n-     * \n+     *\n      * @param values The values to validate.\n-     * \n-     * @throws InvalidArgumentException If any of the \n+     *\n+     * @throws InvalidArgumentException If any of the\n      * specified values are not valid.\n      */\n     void validate(final List values) throws InvalidArgumentException;\n--- a/src/test/org/apache/commons/cli2/CLITestCase.java\n+++ b/src/test/org/apache/commons/cli2/CLITestCase.java\n \t}\n \n \tpublic static void assertListContentsEqual(final List expected, final List found) {\n-\t\n+\n \t    final Iterator e = expected.iterator();\n \t    final Iterator f = found.iterator();\n-\t\n+\n \t    while (e.hasNext() && f.hasNext()) {\n \t        assertEquals(e.next(), f.next());\n \t    }\n-\t\n+\n \t    if (e.hasNext()) {\n \t        fail(\"Expected more elements\");\n \t    }\n-\t\n+\n \t    if (f.hasNext()) {\n \t        fail(\"Found more elements\");\n \t    }\n--- a/src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java\n+++ b/src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java\n \n /**\n  * Tests the interaction of command line values and defaults supplied in different ways.\n- * \n+ *\n  * Tests marked _Parsed involve values parsed from a command line.\n- * \n+ *\n  * Tests marked _Method involve defaults supplied in the query method.\n- * \n+ *\n  * Tests marked _Option involce defaults specified in the model.\n- * \n+ *\n  * @author Rob Oxspring\n  */\n public class CommandLineDefaultsTest extends TestCase {\n-    \n-    /*\n-     * utils to grab the default from the method \n-     */\n-    \n+\n+    /*\n+     * utils to grab the default from the method\n+     */\n+\n     private Object methodSwitch(WriteableCommandLine cl, Option o, Boolean bool) {\n         return cl.getSwitch(o, bool);\n     }\n     }\n \n     /*\n-     * utils to grab the default from the option model \n-     */\n-    \n+     * utils to grab the default from the option model\n+     */\n+\n     private Option optionSwitch(Boolean bool) {\n         return new SwitchBuilder().withName(\"switch\").withSwitchDefault(bool)\n                 .create();\n     }\n \n     /*\n-     * utils to grab the input from the command line \n-     */\n-    \n+     * utils to grab the input from the command line\n+     */\n+\n     private WriteableCommandLine parsedSwitch(Option o, Boolean bool) {\n         final List args;\n         if (bool == null) {\n         cl.addValue(o, \"parsed\");\n         return cl;\n     }\n-    \n+\n     /*\n      * tests\n      */\n--- a/src/test/org/apache/commons/cli2/DocumentationTest.java\n+++ b/src/test/org/apache/commons/cli2/DocumentationTest.java\n         /*\n          * --version -? -h --help -log file -s|-q|-v|-d Bursting File/Num/Date\n          * validation Switches Commands Auto help Auto exception help\n-         *  \n+         *\n          */\n         DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n         Option version =\n                 uoe.getMessage());\n         }\n     }\n-    \n+\n     public void testManualIntroduction() {\n-        \n+\n         DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\n         ArgumentBuilder aBuilder = new ArgumentBuilder();\n         GroupBuilder gBuilder = new GroupBuilder();\n-        \n-        DefaultOption xmlOption = \n+\n+        DefaultOption xmlOption =\n             oBuilder\n                 .withLongName(\"xml\")\n                 .withDescription(\"Output using xml format\")\n                 .create();\n-        \n-        Argument pathArgument = \n+\n+        Argument pathArgument =\n             aBuilder\n                 .withName(\"path\")\n                 .withMinimum(1)\n                 .withMaximum(1)\n                 .create();\n-        \n-        Group outputChildren = \n+\n+        Group outputChildren =\n             gBuilder\n                 .withOption(xmlOption)\n                 .create();\n-        \n-        Option outputOption = \n+\n+        Option outputOption =\n             oBuilder\n                 .withLongName(\"output\")\n                 .withDescription(\"Outputs to a file\")\n                 .withArgument(pathArgument)\n                 .withChildren(outputChildren)\n                 .create();\n-        \n+\n         ///////////////////////////////////////////////////\n-        \n+\n         Group options = outputChildren;\n         HelpFormatter hf = new HelpFormatter();\n \n         if(cl==null) {\n             System.exit(-1);\n         }\n-        \n+\n         //////////////////////////////////////////////////\n-        \n+\n         cl = new WriteableCommandLineImpl(outputChildren,new ArrayList());\n-        \n+\n         // if we have --output option\n         if(cl.hasOption(\"--output\")) {\n             // grab the path\n             // configure the application's output\n             configureOutput(path,xml);\n         }\n-        \n-        \n-                \n-        \n+\n+\n+\n+\n     }\n \n     private void configureOutput(String path, boolean xml) {\n         // TODO Auto-generated method stub\n-        \n+\n     }\n \n     public void testExampleAnt() throws IOException, OptionException {\n                 .withOption(find)\n                 .withOption(targets)\n                 .create();\n-        \n+\n         /////////////////////////////////////\n         String[] args = new String[]{};\n-        \n+\n         Parser parser = new Parser();\n         parser.setGroup(options);\n         CommandLine cl = parser.parse(args);\n-        \n+\n         if(cl.hasOption(help)) {\n             //displayHelp();\n             return;\n             String target = (String) i.next();\n             //doTarget(target);\n         }\n-        \n+\n         /////////////////////////////////////\n \n         HelpFormatter hf = new HelpFormatter();\n--- a/src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java\n+++ b/src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java\n  * @author Rob Oxspring\n  */\n public abstract class WriteableCommandLineTestCase extends CommandLineTestCase {\n-\t\n+\n \tprivate WriteableCommandLine writeable;\n-\t\n+\n \tprotected abstract WriteableCommandLine createWriteableCommandLine();\n-\t\n+\n \t/* (non-Javadoc)\n \t * @see org.apache.commons.cli2.CommandLineTest#createCommandLine()\n \t */\n \t\tcl.addValue(multiple,\"value 3\");\n \t\treturn cl;\n \t}\n-\t\n+\n \t/*\n \t * @see CommandLineTest#setUp()\n \t */\n \t\tassertTrue(writeable.getValues(present).isEmpty());\n \t\twriteable.addValue(present,\"value\");\n \t\tassertContentsEqual(list(\"value\"),writeable.getValues(present));\n-\t\t\n+\n \t\t// most options shouldn't appear due to adding values\n \t\tassertFalse(writeable.hasOption(present));\n-\t\t\n+\n \t\tfinal Argument arg = ArgumentTest.buildHostArgument();\n-\t\t\n+\n \t\tassertFalse(writeable.hasOption(arg));\n \t\tassertTrue(writeable.getValues(arg).isEmpty());\n \t\twriteable.addValue(arg,\"value\");\n \t\tassertContentsEqual(list(\"value\"),writeable.getValues(arg));\n-\t\t\n+\n \t\t// Arguments should force the option present\n \t\tassertTrue(writeable.hasOption(arg));\n \t}\n--- a/src/test/org/apache/commons/cli2/application/CpTest.java\n+++ b/src/test/org/apache/commons/cli2/application/CpTest.java\n /**\n  * <p>Test the <code>cp</code> command. Duplicated Option types are not\n  * tested e.g. -a and -d are the same Option type.</p>\n- * \n+ *\n  * <p>The following is the man output for 'cp'. See\n  * <a href=\"http://www.rt.com/man/cp.1.html\">http://www.rt.com/man/cp.1.html</a>.</p>\n- * \n+ *\n  * <pre>\n  *  CP(1) FSF CP(1)\n- * \n+ *\n  *  NAME cp - copy files and directories\n- * \n+ *\n  *  SYNOPSIS cp [OPTION]... SOURCE DEST cp [OPTION]... SOURCE... DIRECTORY\n- * \n+ *\n  *  DESCRIPTION Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.\n- * \n+ *\n  *  -a, --archive same as -dpR\n- * \n+ *\n  *  -b, --backup make backup before removal\n- * \n+ *\n  *  -d, --no-dereference preserve links\n- * \n+ *\n  *  -f, --force remove existing destinations, never prompt\n- * \n+ *\n  *  -i, --interactive prompt before overwrite\n- * \n+ *\n  *  -l, --link link files instead of copying\n- * \n+ *\n  *  -p, --preserve preserve file attributes if possible\n- * \n+ *\n  *  -P, --parents append source path to DIRECTORY\n  * -r copy recursively, non-directories as files\n- * \n+ *\n  *  --sparse=WHEN control creation of sparse files\n- * \n+ *\n  *  -R, --recursive copy directories recursively\n- * \n+ *\n  *  -s, --symbolic-link make symbolic links instead of copying\n- * \n+ *\n  *  -S, --suffix=SUFFIX override the usual backup suffix\n- * \n+ *\n  *  -u, --update copy only when the SOURCE file is newer than the destination file or when the destination file is missing\n- * \n+ *\n  *  -v, --verbose explain what is being done\n- * \n+ *\n  *  -V, --version-control=WORD override the usual version control\n- * \n+ *\n  *  -x, --one-file-system stay on this file system\n- * \n+ *\n  *  --help display this help and exit\n- * \n+ *\n  *  --version output version information and exit\n- * \n+ *\n  *  By default, sparse SOURCE files are detected by a crude heuristic and the corresponding DEST file is made sparse as well. That is the behavior selected by --sparse=auto. Specify --sparse=always to create a sparse DEST file when- ever the SOURCE file contains a long enough sequence of zero bytes. Use --sparse=never to inhibit creation of sparse files.\n- * \n+ *\n  *  The backup suffix is ~, unless set with SIMPLE_BACKUP_SUF- FIX. The version control may be set with VERSION_CONTROL, values are:\n  * t, numbered make numbered backups\n- * \n+ *\n  *  nil, existing numbered if numbered backups exist, simple other- wise\n- * \n+ *\n  *  never, simple always make simple backups\n- * \n+ *\n  *  As a special case, cp makes a backup of SOURCE when the force and backup options are given and SOURCE and DEST are the same name for an existing, regular file. * </pre>\n  * </pre>\n- * \n+ *\n  * @author Rob Oxspring\n  * @author John Keyes\n  */\n--- a/src/test/org/apache/commons/cli2/application/LsTest.java\n+++ b/src/test/org/apache/commons/cli2/application/LsTest.java\n /**\n  * <p>Test the <code>ls</code> command. Duplicated Option types are not\n  * tested e.g. -a and -d are the same Option type.</p>\n- * \n+ *\n  * <p>The following is the man output for 'ls'. See\n  * <a href=\"http://www.rt.com/man/ls.1.html\">http://www.rt.com/man/ls.1.html</a>.</p>\n- * \n+ *\n  * <pre>\n  *  LS(1) FSF LS(1)\n- * \n+ *\n  *  NAME ls - list directory contents\n- * \n+ *\n  *  SYNOPSIS ls [OPTION]... [FILE]...\n- * \n+ *\n  *  DESCRIPTION List information about the FILEs (the current directory by default). Sort entries alphabetically if none of -cftuSUX nor --sort.\n- * \n+ *\n  *  -a, --all do not hide entries starting with .\n- * \n+ *\n  *  -A, --almost-all do not list implied . and ..\n- * \n+ *\n  *  -b, --escape print octal escapes for nongraphic characters\n- * \n+ *\n  *  --block-size=SIZE use SIZE-byte blocks\n- * \n+ *\n  *  -B, --ignore-backups do not list implied entries ending with ~ -c sort by change time; with -l: show ctime -C list entries by columns\n- * \n+ *\n  *  --color[=WHEN] control whether color is used to distinguish file types. WHEN may be `never', `always', or `auto'\n- * \n+ *\n  *  -d, --directory list directory entries instead of contents\n- * \n+ *\n  *  -D, --dired generate output designed for Emacs' dired mode -f do not sort, enable -aU, disable -lst\n- * \n+ *\n  *  -F, --classify append indicator (one of /=@|*) to entries\n- * \n+ *\n  *  --format=WORD across -x, commas -m, horizontal -x, long -l, sin- gle-column -1, verbose -l, vertical -C\n- * \n+ *\n  *  --full-time list both full date and full time -g (ignored)\n- * \n+ *\n  *  -G, --no-group inhibit display of group information\n- * \n+ *\n  *  -h, --human-readable print sizes in human readable format (e.g., 1K 234M 2G)\n- * \n+ *\n  *  -H, --si likewise, but use powers of 1000 not 1024\n- * \n+ *\n  *  --indicator-style=WORD append indicator with style WORD to entry names: none (default), classify (-F), file-type (-p)\n- * \n+ *\n  *  -i, --inode print index number of each file\n- * \n+ *\n  *  -I, --ignore=PATTERN do not list implied entries matching shell PATTERN\n- * \n+ *\n  *  -k, --kilobytes like --block-size=1024 -l use a long listing format\n- * \n+ *\n  *  -L, --dereference list entries pointed to by symbolic links -m fill width with a comma separated list of entries\n- * \n+ *\n  *  -n, --numeric-uid-gid list numeric UIDs and GIDs instead of names\n- * \n+ *\n  *  -N, --literal print raw entry names (don't treat e.g. control characters specially) -o use long listing format without group info\n- * \n+ *\n  *  -p, --file-type append indicator (one of /=@|) to entries\n- * \n+ *\n  *  -q, --hide-control-chars print ? instead of non graphic characters\n- * \n+ *\n  *  --show-control-chars show non graphic characters as-is (default)\n- * \n+ *\n  *  -Q, --quote-name enclose entry names in double quotes\n- * \n+ *\n  *  --quoting-style=WORD use quoting style WORD for entry names: literal, shell, shell-always, c, escape\n- * \n+ *\n  *  -r, --reverse reverse order while sorting\n- * \n+ *\n  *  -R, --recursive list subdirectories recursively\n- * \n+ *\n  *  -s, --size print size of each file, in blocks -S sort by file size\n- * \n+ *\n  *  --sort=WORD extension -X, none -U, size -S, time -t, version -v status -c, time -t, atime -u, access -u, use -u\n- * \n+ *\n  *  --time=WORD show time as WORD instead of modification time: atime, access, use, ctime or status; use specified time as sort key if --sort=time -t sort by modification time\n- * \n+ *\n  *  -T, --tabsize=COLS assume tab stops at each COLS instead of 8 -u sort by last access time; with -l: show atime -U do not sort; list entries in directory order -v sort by version\n- * \n+ *\n  *  -w, --width=COLS assume screen width instead of current value -x list entries by lines instead of by columns -X sort alphabetically by entry extension -1 list one file per line\n- * \n+ *\n  *  --help display this help and exit\n- * \n+ *\n  *  --version output version information and exit\n- * \n+ *\n  *  By default, color is not used to distinguish types of files. That is equivalent to using --color=none. Using the --color option without the optional WHEN argument is equivalent to using --color=always. With --color=auto, color codes are output only if standard output is con- nected to a terminal (tty).\n  * </pre>\n- * \n+ *\n  * @author Rob Oxspring\n  * @author John Keyes\n  */\n \n     /**\n      * Required ctor.\n-     * \n+     *\n      * @param name\n      *            the name of the TestCase\n      */\n--- a/src/test/org/apache/commons/cli2/bug/Bug27575Test.java\n+++ b/src/test/org/apache/commons/cli2/bug/Bug27575Test.java\n \t\tbuilder.withPattern(\"hc!<\");\n \t\tOption option = builder.create();\n \t\tassertTrue(option instanceof GroupImpl);\n-\t\t\n+\n \t\tGroupImpl group = (GroupImpl)option;\n \t\tIterator i = group.getOptions().iterator();\n \t\tassertEquals(\"[-h]\",i.next().toString());\n--- a/src/test/org/apache/commons/cli2/bug/Bug28005Test.java\n+++ b/src/test/org/apache/commons/cli2/bug/Bug28005Test.java\n         final ArgumentBuilder argumentBuilder = new ArgumentBuilder();\n         final GroupBuilder groupBuilder = new GroupBuilder();\n         final CommandBuilder commandBuilder = new CommandBuilder();\n-        \n-        final Option inputFormatOption = \n+\n+        final Option inputFormatOption =\n             optionBuilder\n                 .withLongName(\"input-format\")\n                 //.withArgument(argumentBuilder.create())\n                 .create();\n-                \n-        final Argument argument = \n+\n+        final Argument argument =\n             argumentBuilder\n                 .withName(\"file\")\n                 .create();\n-                \n-        final Group children = \n+\n+        final Group children =\n             groupBuilder\n                 .withName(\"options\")\n                 .withOption(inputFormatOption)\n                 .create();\n-                \n-        final Option command = \n+\n+        final Option command =\n             commandBuilder\n                 .withName(\"convert\")\n                 .withChildren(children)\n                 .withArgument(argument)\n                 .create();\n-                \n-        final Group root = \n+\n+        final Group root =\n             groupBuilder\n                 .withName(\"commands\")\n                 .withOption(command)\n                 .create();\n-                \n+\n         final Parser parser = new Parser();\n         parser.setGroup(root);\n         final String[] args = new String[]{\"convert\", \"test.txt\",\n                 \"--input-format\", \"a\"};\n-                \n+\n         try {\n             parser.parse(args);\n             fail(\"a isn't valid!!\");\n--- a/src/test/org/apache/commons/cli2/bug/Bug32533Test.java\n+++ b/src/test/org/apache/commons/cli2/bug/Bug32533Test.java\n  * @author roxspring\n  */\n public class Bug32533Test extends TestCase {\n-    \n+\n     public void testBlah() throws OptionException {\n-        \n+\n         Option a1 = new DefaultOptionBuilder().withLongName(\"a1\").create();\n         Option b1 = new DefaultOptionBuilder().withLongName(\"b1\").create();\n         Option c1 = new DefaultOptionBuilder().withLongName(\"c1\").create();\n-        \n+\n         Group b = new GroupBuilder().withOption(b1).create();\n         Group c = new GroupBuilder().withOption(c1).create();\n         Group a = new GroupBuilder().withOption(a1).withOption(b).withOption(c).create();\n-        \n-        Parser parser = new Parser();  \n+\n+        Parser parser = new Parser();\n         parser.setGroup(a);\n         parser.parse(new String[]{\"--a1\",\"--b1\"});\n     }\n--- a/src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java\n+++ b/src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java\n         assertSame(first, i.next());\n         assertFalse(i.hasNext());\n     }\n-    \n+\n     public void testTriggers() {\n         final DefaultingCommandLine defaults = new DefaultingCommandLine();\n         defaults.appendCommandLine(first);\n \n     public void testDefaults() {\n         final DefaultingCommandLine defaults = new DefaultingCommandLine();\n-        \n+\n         assertEquals(\"wrong # of defaults\", 0, defaults.getValues(\"--insecond\").size());\n         assertEquals(\"wrong Set of defaults\", Collections.EMPTY_LIST, defaults.getValues(\"--insecond\", null));\n     }\n--- a/src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java\n+++ b/src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java\n  * @author Rob Oxspring\n  */\n public class PreferencesCommandLineTest extends CommandLineTestCase {\n-\t\n+\n \t/* (non-Javadoc)\n \t * @see org.apache.commons.cli2.CommandLineTest#createCommandLine()\n \t */\n \t\tprops.put(\"--alsopresent\",\"\");\n \t\tprops.put(\"--multiple\",\"value 1|value 2|value 3\");\n \t\tprops.put(\"--bool\",\"true\");\n-\t\t\n+\n \t\tprops.put(\"present\",\"present property\");\n-\t\t\n+\n \t\treturn new PreferencesCommandLine(root,props,'|');\n \t}\n \n \t\tprops.put(\"--alsopresent\",\"\");\n \t\tprops.put(\"--multiple\",\"value 1|value 2|value 3\");\n \t\tprops.put(\"--bool\",\"false\");\n-\t\t\n+\n \t\tprops.put(\"present\",\"present property\");\n-\t\t\n+\n \t\treturn new PreferencesCommandLine(root,props);\n \t}\n-\t\n+\n     public void testPropertyValues() {\n         // nothing to test\n     \tCommandLine cmdline = createCommandLine();\n-    \t\n+\n     \tassertEquals(\"wrong value\", \"present value\", cmdline.getValue(\"--present\"));\n     \tassertEquals(\"wrong value\", \"present value\", cmdline.getValue(\"--alsopresent\"));\n     \tassertEquals(\"wrong # of values\", 3, cmdline.getValues(\"--multiple\").size());\n     \tassertEquals(\"wrong value 2\", \"value 2\", cmdline.getValues(\"--multiple\").get(1));\n     \tassertEquals(\"wrong value 3\", \"value 3\", cmdline.getValues(\"--multiple\").get(2));\n     }\n-    \n+\n     public void testNoSeparator() {\n         // nothing to test\n     \tCommandLine cmdline = createCommandLineNoSep();\n-    \t\n+\n     \tassertEquals(\"wrong value\", \"present value\", cmdline.getValue(\"--present\"));\n     \tassertEquals(\"wrong value\", \"present value\", cmdline.getValue(\"--alsopresent\"));\n     \tassertEquals(\"wrong # of values\", 1, cmdline.getValues(\"--multiple\").size());\n     \tassertEquals(\"wrong value\", \"value 1|value 2|value 3\", cmdline.getValue(\"--multiple\"));\n     \tassertFalse(\"expected a false\", cmdline.getSwitch(\"--bool\").booleanValue());\n     }\n-    \n+\n     public void testNullOption() {\n         // nothing to test\n     \tCommandLine cmdline = createCommandLine();\n         assertTrue(\"cannot find trigger\", triggers.contains(\"--present\"));\n         assertTrue(\"cannot find trigger\", triggers.contains(\"--multiple\"));\n         assertTrue(\"cannot find trigger\", triggers.contains(\"--alsopresent\"));\n-    \t\n+\n     \tassertFalse(\"should not find null option\", cmdline.hasOption((String) null));\n     \tassertTrue(\"expected a true\", cmdline.getSwitch(\"--bool\").booleanValue());\n     }\n--- a/src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java\n+++ b/src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java\n         props.setProperty(\"present\", \"present property\");\n     \treturn new PropertiesCommandLine(root, props);\n     }\n-    \n+\n     public void testPropertyValues() {\n         // nothing to test\n     \tCommandLine cmdline = createCommandLine();\n-    \t\n+\n     \tassertEquals(\"wrong value\", \"present value\", cmdline.getValue(\"--present\"));\n     \tassertEquals(\"wrong value\", \"present value\", cmdline.getValue(\"--alsopresent\"));\n     \tassertEquals(\"wrong # of values\", 3, cmdline.getValues(\"--multiple\").size());\n     \tassertEquals(\"wrong value 2\", \"value 2\", cmdline.getValues(\"--multiple\").get(1));\n     \tassertEquals(\"wrong value 3\", \"value 3\", cmdline.getValues(\"--multiple\").get(2));\n     }\n-    \n+\n     public void testNoSeparator() {\n         // nothing to test\n     \tCommandLine cmdline = createCommandLineNoSep();\n-    \t\n+\n     \tassertEquals(\"wrong value\", \"present value\", cmdline.getValue(\"--present\"));\n     \tassertEquals(\"wrong value\", \"present value\", cmdline.getValue(\"--alsopresent\"));\n     \tassertEquals(\"wrong # of values\", 1, cmdline.getValues(\"--multiple\").size());\n     \tassertEquals(\"wrong value\", \"value 1|value 2|value 3\", cmdline.getValue(\"--multiple\"));\n     \tassertFalse(\"expected a false\", cmdline.getSwitch(\"--bool\").booleanValue());\n     }\n-    \n+\n     public void testNullOption() {\n         // nothing to test\n     \tCommandLine cmdline = createCommandLine();\n         assertTrue(\"cannot find trigger\", triggers.contains(\"--present\"));\n         assertTrue(\"cannot find trigger\", triggers.contains(\"--multiple\"));\n         assertTrue(\"cannot find trigger\", triggers.contains(\"--alsopresent\"));\n-    \t\n+\n     \tassertFalse(\"should not find null option\", cmdline.hasOption((String) null));\n     \tassertTrue(\"expected a true\", cmdline.getSwitch(\"--bool\").booleanValue());\n     }\n--- a/src/test/org/apache/commons/cli2/jdepend/JDependTest.java\n+++ b/src/test/org/apache/commons/cli2/jdepend/JDependTest.java\n         final Collection dependsUpon = cli2Packages(apiPackage.getEfferents());\n \n         assertEquals(\"Api should depend on one package\", 1, dependsUpon.size());\n-        \n+\n         JavaPackage pkg = (JavaPackage) dependsUpon.iterator().next();\n         assertEquals(\n-                \"Wrong package name\", \n+                \"Wrong package name\",\n                 \"org.apache.commons.cli2.resource\",\n                 pkg.getName());\n     }\n--- a/src/test/org/apache/commons/cli2/option/DefaultOptionTest.java\n+++ b/src/test/org/apache/commons/cli2/option/DefaultOptionTest.java\n \n /**\n  * @author roberto\n- * \n+ *\n  * To change the template for this generated type comment go to\n  * Window>Preferences>Java>Code Generation>Code and Comments\n  */\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.ParentTestCase#testProcessParent()\n      */\n     public void testProcessParent() throws OptionException {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()\n      */\n     public void testCanProcess() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()\n      */\n     public void testPrefixes() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testProcess()\n      */\n     public void testProcess() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testTriggers()\n      */\n     public void testTriggers() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testValidate()\n      */\n     public void testValidate() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()\n      */\n     public void testAppendUsage() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()\n      */\n     public void testGetPreferredName() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()\n      */\n     public void testGetDescription() {\n     }\n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()\n      */\n     public void testHelpLines() {\n--- a/src/test/org/apache/commons/cli2/option/PropertyOptionTest.java\n+++ b/src/test/org/apache/commons/cli2/option/PropertyOptionTest.java\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()\n      */\n     public void testCanProcess() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()\n      */\n     public void testPrefixes() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testProcess()\n      */\n     public void testProcess() throws OptionException {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testTriggers()\n      */\n     public void testTriggers() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testValidate()\n      */\n     public void testValidate() throws OptionException {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()\n      */\n     public void testAppendUsage() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()\n      */\n     public void testGetPreferredName() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()\n      */\n     public void testGetDescription() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()\n      */\n     public void testHelpLines() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()\n      */\n     public void testHelpLines_NoDisplay() {\n--- a/src/test/org/apache/commons/cli2/util/ComparatorsTest.java\n+++ b/src/test/org/apache/commons/cli2/util/ComparatorsTest.java\n             CLITestCase.list(o1, o2),\n             list);\n     }\n-    \n+\n     public void testChained() {\n         final Option o1 = CommandTest.buildCommitCommand();\n         final Option o2 = SwitchTest.buildDisplaySwitch();\n         final Option o3 = DefaultOptionTest.buildHelpOption();\n         final List list = CLITestCase.list(o1, o2, o3);\n-        \n+\n         Collections.sort(\n-            list, \n+            list,\n             Comparators.chain(\n                 Comparators.namedFirst(\"--help\"),\n                 Comparators.commandFirst()));\n--- a/src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java\n         final List list = Arrays.asList(array);\n \n         validator.setInstance(true);\n-        \n+\n         try {\n             validator.validate(list);\n             fail(\"It's not possible to create a '\" + className + \"'\");\n         final List list = Arrays.asList(array);\n \n         validator.setInstance(true);\n-        \n+\n         try {\n             validator.validate(list);\n             fail(\"It's not possible to create a '\" + className + \"'\");\n                             ive.getMessage());\n         }\n     }\n-    \n+\n     public void testClassloader() {\n         assertEquals(\n             \"Wrong classloader found\",\n--- a/src/test/org/apache/commons/cli2/validation/DateValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/DateValidatorTest.java\n         validator.validate(list);\n \n         final Iterator i = list.iterator();\n-        // CLI-40: For some reason, the YYYY_MM_DD object gets quite \n-        // confused here and returns 2003-12-22. If we make a new one \n+        // CLI-40: For some reason, the YYYY_MM_DD object gets quite\n+        // confused here and returns 2003-12-22. If we make a new one\n         // there is no problem.\n         assertEquals(\"2003-12-23\", new SimpleDateFormat(\"yyyy-MM-dd\").format((Date) i.next()));\n         assertFalse(i.hasNext());\n--- a/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java\n \n /**\n  * JUnit test case for the FileValidator.\n- * \n+ *\n  * @author Rob Oxspring\n  * @author John Keyes\n  */", "timestamp": 1206155585, "metainfo": ""}