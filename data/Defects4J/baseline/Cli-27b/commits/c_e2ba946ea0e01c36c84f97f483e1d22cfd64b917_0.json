{"sha": "e2ba946ea0e01c36c84f97f483e1d22cfd64b917", "log": "Applying Brian Egge's patch to CLI-145, fixing things so the withMinimum/withMaximum works correctly  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/OptionException.java\n+++ b/src/java/org/apache/commons/cli2/OptionException.java\n     /** The message explaining the Exception */\n     private final String message;\n \n+    /** The id of the message */\n+    private final String messageKey;\n+\n     /**\n      * Creates a new OptionException.\n      *\n                            final String messageKey,\n                            final String value) {\n         this.option = option;\n+        this.messageKey = messageKey;\n \n         if (messageKey != null) {\n             final StringBuffer buffer = new StringBuffer();\n     public String getMessage() {\n         return message;\n     }\n+\n+    public String getMessageKey() {\n+        return messageKey;\n+    }\n }\n--- a/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n                               final ListIterator arguments,\n                               final Option option)\n         throws OptionException {\n-        int argumentCount = commandLine.getValues(option, Collections.EMPTY_LIST).size();\n+        // count of arguments processed for this option.\n+        int argumentCount = 0;\n \n         while (arguments.hasNext() && (argumentCount < maximum)) {\n             final String allValuesQuoted = (String) arguments.next();\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli2/bug/BugCLI145Test.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.cli2.bug;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.cli2.CommandLine;\n+import org.apache.commons.cli2.Group;\n+import org.apache.commons.cli2.builder.ArgumentBuilder;\n+import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n+import org.apache.commons.cli2.builder.GroupBuilder;\n+import org.apache.commons.cli2.commandline.Parser;\n+import org.apache.commons.cli2.option.DefaultOption;\n+\n+import java.util.List;\n+\n+/**\n+ * ArgumentBuilder.withMaximum causes parse errors: Unexpeced <value> while processing options\n+ *\n+ * @author David Biesack\n+ * @author brianegge\n+ */\n+public class BugCLI145Test extends TestCase {\n+    public void testWithMaximum() {\n+        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n+        final ArgumentBuilder abuilder = new ArgumentBuilder();\n+        final GroupBuilder gbuilder = new GroupBuilder();\n+        DefaultOption aOption = obuilder//\n+                .withShortName(\"a\")\n+                .withLongName(\"a\")\n+                .withArgument(abuilder\n+                        .withName(\"a\")\n+                        .withDefault(\"10\")\n+                        .create())\n+                .create();\n+        DefaultOption bOption = obuilder\n+                .withShortName(\"b\")\n+                .withLongName(\"b\")\n+                .withArgument(abuilder\n+                        .withName(\"b\")\n+                        .withMinimum(2)\n+                        .withMaximum(4)\n+                        .withDefault(\"100\")\n+                        .withDefault(\"1000\")\n+                        .withDefault(\"10000\")\n+                        .withDefault(\"1000000\")\n+                        .create())\n+                .create();\n+        Group options = gbuilder\n+                .withName(\"options\")\n+                .withOption(aOption)\n+                .withOption(bOption)\n+                .create();\n+        Parser parser = new Parser();\n+        parser.setHelpTrigger(\"--help\");\n+        parser.setGroup(options);\n+        CommandLine cl = parser.parseAndHelp(\"-a 0 -b 1 2 3 4\".split(\" \"));\n+        assertNotNull(cl);\n+        int a = Integer.parseInt(cl.getValue(aOption).toString());\n+        List b = cl.getValues(bOption);\n+        assertEquals(0, a);\n+        assertEquals(4, b.size());\n+    }\n+\n+    public void testWithMaximumUsingDefaultValues() {\n+        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n+        final ArgumentBuilder abuilder = new ArgumentBuilder();\n+        final GroupBuilder gbuilder = new GroupBuilder();\n+        DefaultOption aOption = obuilder//\n+                .withShortName(\"a\")\n+                .withLongName(\"a\")\n+                .withArgument(abuilder\n+                        .withName(\"a\")\n+                        .withDefault(\"10\")\n+                        .create())\n+                .create();\n+        DefaultOption bOption = obuilder\n+                .withShortName(\"b\")\n+                .withLongName(\"b\")\n+                .withArgument(abuilder\n+                        .withName(\"b\")\n+                        .withMinimum(2)\n+                        .withMaximum(4)\n+                        .withDefault(\"100\")\n+                        .withDefault(\"1000\")\n+                        .withDefault(\"10000\")\n+                        .create())\n+                .create();\n+        Group options = gbuilder\n+                .withName(\"options\")\n+                .withOption(aOption)\n+                .withOption(bOption)\n+                .create();\n+        Parser parser = new Parser();\n+        parser.setHelpTrigger(\"--help\");\n+        parser.setGroup(options);\n+        CommandLine cl = parser.parseAndHelp(\"-a -b\".split(\" \"));\n+        assertNotNull(cl);\n+        int a = Integer.parseInt(cl.getValue(aOption).toString());\n+        List b = cl.getValues(bOption);\n+        assertEquals(10, a);\n+        assertEquals(3, b.size());\n+        assertEquals(\"10000\", b.get(2));\n+    }\n+}\n--- a/src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java\n+++ b/src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java\n import org.apache.commons.cli2.Argument;\n import org.apache.commons.cli2.Group;\n import org.apache.commons.cli2.OptionException;\n+import org.apache.commons.cli2.resource.ResourceConstants;\n import org.apache.commons.cli2.builder.ArgumentBuilder;\n import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n import org.apache.commons.cli2.builder.GroupBuilder;\n \n /**\n  * The first is a loop in Parser.parse() if I set a non-declared option. This \n- * code goes into a loop in Parser.java method parse this while loop runs \n+ * code goes into a loop in Parser.java method parse this 'while' loop runs \n  * endless\n  * \n  * @author Steve Alberty\n             parser.parse(new String[] { \"testfile.txt\", \"testfile.txt\", \"testfile.txt\", \"testfile.txt\" });\n             fail(\"OptionException\");\n         } catch (OptionException e) {\n-            assertEquals(\"Unexpected testfile.txt while processing \", e.getMessage());\n+            assertEquals(ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, e.getMessageKey());\n         }\n     }    \n }", "timestamp": 1212996422, "metainfo": ""}