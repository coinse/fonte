{"sha": "0158f772b3ea94000054cd5b1fc0d0cda2f29a1b", "log": "Merged BuildTest into OptionsTest  ", "commit": "\n--- a/src/test/org/apache/commons/cli/OptionsTest.java\n+++ b/src/test/org/apache/commons/cli/OptionsTest.java\n  */\n public class OptionsTest extends TestCase\n {\n-    public void testHelpOptions(){\n-        \n+    public void testSimple()\n+    {\n+        Options opts = new Options();\n+\n+        opts.addOption(\"a\", false, \"toggle -a\");\n+        opts.addOption(\"b\", true, \"toggle -b\");\n+\n+        assertTrue(opts.hasOption(\"a\"));\n+        assertTrue(opts.hasOption(\"b\"));\n+    }\n+\n+    public void testDuplicateSimple()\n+    {\n+        Options opts = new Options();\n+        opts.addOption(\"a\", false, \"toggle -a\");\n+        opts.addOption(\"a\", true, \"toggle -a*\");\n+\n+        assertEquals(\"last one in wins\", \"toggle -a*\", opts.getOption(\"a\").getDescription());\n+    }\n+\n+    public void testLong()\n+    {\n+        Options opts = new Options();\n+\n+        opts.addOption(\"a\", \"--a\", false, \"toggle -a\");\n+        opts.addOption(\"b\", \"--b\", true, \"set -b\");\n+\n+        assertTrue(opts.hasOption(\"a\"));\n+        assertTrue(opts.hasOption(\"b\"));\n+    }\n+\n+    public void testDuplicateLong()\n+    {\n+        Options opts = new Options();\n+        opts.addOption(\"a\", \"--a\", false, \"toggle -a\");\n+        opts.addOption(\"a\", \"--a\", false, \"toggle -a*\");\n+        assertEquals(\"last one in wins\", \"toggle -a*\", opts.getOption(\"a\").getDescription());\n+    }\n+\n+    public void testHelpOptions()\n+    {\n         Option longOnly1 = OptionBuilder.withLongOpt(\"long-only1\").create();\n         Option longOnly2 = OptionBuilder.withLongOpt(\"long-only2\").create();\n         Option shortOnly1 = OptionBuilder.create(\"1\");\n         assertTrue(\"Everything in help should be in all\", allOptions.containsAll(helpOptions));        \n     }\n \n-    public void testMissingOptionException() throws ParseException {\n+    public void testMissingOptionException() throws ParseException\n+    {\n         Options options = new Options();\n         options.addOption(OptionBuilder.isRequired().create(\"f\"));\n-        try {\n+        try\n+        {\n             new PosixParser().parse(options, new String[0]);\n             fail(\"Expected MissingOptionException to be thrown\");\n-        } catch (MissingOptionException e) {\n+        }\n+        catch (MissingOptionException e)\n+        {\n             assertEquals(\"Missing required option: f\", e.getMessage());\n         }\n     }\n \n-    public void testMissingOptionsException() throws ParseException {\n+    public void testMissingOptionsException() throws ParseException\n+    {\n         Options options = new Options();\n         options.addOption(OptionBuilder.isRequired().create(\"f\"));\n         options.addOption(OptionBuilder.isRequired().create(\"x\"));\n-        try {\n+        try\n+        {\n             new PosixParser().parse(options, new String[0]);\n             fail(\"Expected MissingOptionException to be thrown\");\n-        } catch (MissingOptionException e) {\n+        }\n+        catch (MissingOptionException e)\n+        {\n             assertEquals(\"Missing required options: f, x\", e.getMessage());\n         }\n     }\n \n-    public void testToString() {\n+    public void testToString()\n+    {\n         Options options = new Options();\n         options.addOption(\"f\", \"foo\", true, \"Foo\");\n         options.addOption(\"b\", \"bar\", false, \"Bar\");", "timestamp": 1212172952, "metainfo": ""}