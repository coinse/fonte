{"sha": "5db7cc6d0dacef08622701220a562508f23624ae", "log": "Documented ant example   ", "commit": "\n--- a/src/test/org/apache/commons/cli2/DocumentationTest.java\n+++ b/src/test/org/apache/commons/cli2/DocumentationTest.java\n import java.io.IOException;\n import java.io.PrintWriter;\n import java.io.StringWriter;\n+import java.util.Iterator;\n+import java.util.List;\n \n import junit.framework.TestCase;\n \n         }\n     }\n \n-    public void testExampleAnt() throws IOException {\n-        // Based on Ant 1.5.3\n+    public void testExampleAnt() throws IOException, OptionException {\n+        // Apache Ant version 1.6.1 compiled on February 12 2004\n \n         final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n         final ArgumentBuilder abuilder = new ArgumentBuilder();\n         Option help =\n             obuilder\n                 .withShortName(\"help\")\n+                .withShortName(\"h\")\n                 .withDescription(\"print this message\")\n                 .create();\n         Option projecthelp =\n             obuilder\n                 .withShortName(\"projecthelp\")\n+                .withShortName(\"p\")\n                 .withDescription(\"print project help information\")\n                 .create();\n         Option version =\n         Option debug =\n             obuilder\n                 .withShortName(\"debug\")\n+                .withShortName(\"d\")\n                 .withDescription(\"print debugging information\")\n                 .create();\n         Option emacs =\n             obuilder\n                 .withShortName(\"emacs\")\n+                .withShortName(\"e\")\n                 .withDescription(\"produce logging information without adornments\")\n+                .create();\n+        Option lib =\n+            obuilder\n+                .withShortName(\"lib\")\n+                .withDescription(\"specifies a path to search for jars and classes\")\n+                .withArgument(\n+                    abuilder\n+                        .withName(\"path\")\n+                        .withMinimum(1)\n+                        .withMaximum(1)\n+                        .create())\n                 .create();\n         Option logfile =\n             obuilder\n                 .withShortName(\"logfile\")\n                 .withShortName(\"l\")\n-                .withDescription(\"produce logging information without adornments\")\n+                .withDescription(\"use given file for log\")\n                 .withArgument(\n                     abuilder\n                         .withName(\"file\")\n                         .withMaximum(1)\n                         .create())\n                 .create();\n+        Option noinput =\n+            obuilder\n+                .withShortName(\"noinput\")\n+                .withDescription(\"do not allow interactive input\")\n+                .create();\n         Option buildfile =\n             obuilder\n                 .withShortName(\"buildfile\")\n-                .withShortName(\"b\")\n                 .withShortName(\"file\")\n+                .withShortName(\"f\")\n                 .withDescription(\"use given buildfile\")\n                 .withArgument(\n                     abuilder\n         Option find =\n             obuilder\n                 .withShortName(\"find\")\n+                .withShortName(\"s\")\n                 .withDescription(\"search for buildfile towards the root of the filesystem and use it\")\n                 .withArgument(\n                     abuilder\n                 .withOption(verbose)\n                 .withOption(debug)\n                 .withOption(emacs)\n+                .withOption(lib)\n                 .withOption(logfile)\n                 .withOption(logger)\n                 .withOption(listener)\n+                .withOption(noinput)\n                 .withOption(buildfile)\n                 .withOption(property)\n                 .withOption(propertyfile)\n                 .withOption(find)\n                 .withOption(targets)\n                 .create();\n+        \n+        /////////////////////////////////////\n+        String[] args = new String[]{};\n+        \n+        Parser parser = new Parser();\n+        parser.setGroup(options);\n+        CommandLine cl = parser.parse(args);\n+        \n+        if(cl.hasOption(help)) {\n+            //displayHelp();\n+            return;\n+        }\n+        if(cl.hasOption(\"-version\")) {\n+            //displayVersion();\n+            return;\n+        }\n+        if(cl.hasOption(logfile)) {\n+            String file = (String)cl.getValue(logfile);\n+            //setLogFile();\n+        }\n+        List targetList = cl.getValues(targets);\n+        for (Iterator i = targetList.iterator(); i.hasNext();) {\n+            String target = (String) i.next();\n+            //doTarget(target);\n+        }\n+        \n+        /////////////////////////////////////\n \n         HelpFormatter hf = new HelpFormatter();\n         hf.setShellCommand(\"ant\");\n \n         hf.getLineUsageSettings().add(DisplaySetting.DISPLAY_PROPERTY_OPTION);\n         hf.getLineUsageSettings().add(DisplaySetting.DISPLAY_PARENT_ARGUMENT);\n+        hf.getLineUsageSettings().add(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);\n \n         hf.getDisplaySettings().remove(DisplaySetting.DISPLAY_GROUP_ARGUMENT);\n ", "timestamp": 1104169287, "metainfo": ""}