{"sha": "e366a69318c97c70bd3278ffd8c61fad3c4a4456", "log": "Implemented the partial matching for long options in the PosixParser (CLI-160)  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/cli/AmbiguousOptionException.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Exception thrown when an option can't be identified from a partial name.\n+ * \n+ * @author Emmanuel Bourg\n+ * @version $Revision$, $Date$\n+ * @since 1.3\n+ */\n+public class AmbiguousOptionException extends UnrecognizedOptionException\n+{\n+    /** The list of options matching the partial name specified */\n+    private Collection matchingOptions;\n+\n+    /**\n+     * Constructs a new AmbiguousOptionException.\n+     *\n+     * @param option          the partial option name\n+     * @param matchingOptions the options matching the name\n+     */\n+    public AmbiguousOptionException(String option, Collection matchingOptions)\n+    {\n+        super(\"Ambiguous option: \" + option, option);\n+        this.matchingOptions = matchingOptions;\n+    }\n+\n+    /**\n+     * Returns the options matching the partial name.\n+     */\n+    public Collection getMatchingOptions()\n+    {\n+        return matchingOptions;\n+    }\n+}\n--- a/src/java/org/apache/commons/cli/Options.java\n+++ b/src/java/org/apache/commons/cli/Options.java\n     }\n \n     /**\n+     * Returns the options with a long name starting with the name specified.\n+     * \n+     * @param opt the partial name of the option\n+     * @return the options matching the partial name specified, or an empty list if none matches\n+     * @since 1.3\n+     */\n+    public List getMatchingOptions(String opt)\n+    {\n+        opt = Util.stripLeadingHyphens(opt);\n+        \n+        List matchingOpts = new ArrayList();\n+        \n+        Iterator it = longOpts.keySet().iterator();\n+        while (it.hasNext())\n+        {\n+            String longOpt = (String) it.next();\n+            if (longOpt.startsWith(opt))\n+            {\n+                matchingOpts.add(longOpt);\n+            }\n+        }        \n+        \n+        return matchingOpts;\n+    }\n+\n+    /**\n      * Returns whether the named {@link Option} is a member of this {@link Options}.\n      *\n      * @param opt short or long name of the {@link Option}\n--- a/src/java/org/apache/commons/cli/Parser.java\n+++ b/src/java/org/apache/commons/cli/Parser.java\n      * flattening when a non option has been encountered\n      * @return a String array of the flattened arguments\n      */\n-    protected abstract String[] flatten(Options opts, String[] arguments, boolean stopAtNonOption);\n+    protected abstract String[] flatten(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException;\n \n     /**\n      * Parses the specified <code>arguments</code> based\n--- a/src/java/org/apache/commons/cli/PosixParser.java\n+++ b/src/java/org/apache/commons/cli/PosixParser.java\n      * when an non option is found.\n      * @return The flattened <code>arguments</code> String array.\n      */\n-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n+    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException\n     {\n         init();\n         this.options = options;\n             // get the next command line token\n             String token = (String) iter.next();\n \n+            // single or double hyphen\n+            if (\"-\".equals(token) || \"--\".equals(token))\n+            {\n+                tokens.add(token);\n+            }\n+            \n             // handle long option --foo or --foo=bar\n-            if (token.startsWith(\"--\"))\n+            else if (token.startsWith(\"--\"))\n             {\n                 int pos = token.indexOf('=');\n                 String opt = pos == -1 ? token : token.substring(0, pos); // --foo\n-\n-                if (!options.hasOption(opt))\n+                \n+                List matchingOpts = options.getMatchingOptions(opt);\n+\n+                if (matchingOpts.isEmpty())\n                 {\n                     processNonOptionToken(token, stopAtNonOption);\n                 }\n+                else if (matchingOpts.size() > 1)\n+                {\n+                    throw new AmbiguousOptionException(opt, matchingOpts);\n+                }\n                 else\n                 {\n-                    currentOption = options.getOption(opt);\n+                    currentOption = options.getOption((String) matchingOpts.get(0));\n                     \n-                    tokens.add(opt);\n+                    tokens.add(\"--\" + currentOption.getLongOpt());\n                     if (pos != -1)\n                     {\n                         tokens.add(token.substring(pos + 1));\n                 }\n             }\n \n-            // single hyphen\n-            else if (\"-\".equals(token))\n-            {\n-                tokens.add(token);\n-            }\n             else if (token.startsWith(\"-\"))\n             {\n                 if (token.length() == 2 || options.hasOption(token))\n                 {\n                     processOptionToken(token, stopAtNonOption);\n+                }\n+                else if (!options.getMatchingOptions(token).isEmpty())\n+                {\n+                    List matchingOpts = options.getMatchingOptions(token);\n+                    if (matchingOpts.size() > 1)\n+                    {\n+                        throw new AmbiguousOptionException(token, matchingOpts);\n+                    }\n+                    else\n+                    {\n+                        Option opt = options.getOption((String) matchingOpts.get(0));\n+                        processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\n+                    }\n                 }\n                 // requires bursting\n                 else\n--- a/src/test/org/apache/commons/cli/BasicParserTest.java\n+++ b/src/test/org/apache/commons/cli/BasicParserTest.java\n     {\n         // not supported by the BasicParser\n     }\n+    \n+    public void testUnambiguousPartialLongOption1() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testUnambiguousPartialLongOption2() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testAmbiguousPartialLongOption1() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testAmbiguousPartialLongOption2() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testPartialLongOptionWithShort() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n }\n--- a/src/test/org/apache/commons/cli/GnuParserTest.java\n+++ b/src/test/org/apache/commons/cli/GnuParserTest.java\n         super.setUp();\n         parser = new GnuParser();\n     }\n+\n+    public void testUnambiguousPartialLongOption1() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testUnambiguousPartialLongOption2() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testAmbiguousPartialLongOption1() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testAmbiguousPartialLongOption2() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testPartialLongOptionWithShort() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n }\n--- a/src/test/org/apache/commons/cli/OptionsTest.java\n+++ b/src/test/org/apache/commons/cli/OptionsTest.java\n         assertNotNull(options.getOptionGroups());\n         assertEquals(2, options.getOptionGroups().size());\n     }\n+    \n+    public void testGetMatchingOpts()\n+    {\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\n+        \n+        assertTrue(options.getMatchingOptions(\"foo\").isEmpty());\n+        assertEquals(1, options.getMatchingOptions(\"version\").size());\n+        assertEquals(2, options.getMatchingOptions(\"ver\").size());\n+    }\n }\n--- a/src/test/org/apache/commons/cli/ParserTestCase.java\n+++ b/src/test/org/apache/commons/cli/ParserTestCase.java\n         assertEquals(\"Should be 1 arg left\",1,argsleft.size());\n         assertEquals(\"Expecting foo\",\"foo\",argsleft.get(0));\n     }\n+    \n+    public void testUnambiguousPartialLongOption1() throws Exception\n+    {\n+        String[] args = new String[] { \"--ver\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n+        options.addOption(OptionBuilder.withLongOpt(\"help\").create());\n+        \n+        CommandLine cl = parser.parse(options, args);\n+        \n+        assertTrue(\"Confirm --version is set\", cl.hasOption(\"version\"));\n+    }\n+\n+    public void testUnambiguousPartialLongOption2() throws Exception\n+    {\n+        String[] args = new String[] { \"-ver\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n+        options.addOption(OptionBuilder.withLongOpt(\"help\").create());\n+        \n+        CommandLine cl = parser.parse(options, args);\n+        \n+        assertTrue(\"Confirm --version is set\", cl.hasOption(\"version\"));\n+    }\n+\n+    public void testAmbiguousPartialLongOption1() throws Exception\n+    {\n+        String[] args = new String[] { \"--ver\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\n+        \n+        boolean caught = false;\n+        \n+        try \n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (AmbiguousOptionException e) \n+        {\n+            caught = true;\n+            assertEquals(\"Partial option\", \"--ver\", e.getOption());\n+            assertNotNull(\"Matching options null\", e.getMatchingOptions());\n+            assertEquals(\"Matching options size\", 2, e.getMatchingOptions().size());\n+        }\n+        \n+        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n+    }\n+    \n+    public void testAmbiguousPartialLongOption2() throws Exception\n+    {\n+        String[] args = new String[] { \"-ver\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\n+        \n+        boolean caught = false;\n+        \n+        try \n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (AmbiguousOptionException e) \n+        {\n+            caught = true;\n+            assertEquals(\"Partial option\", \"-ver\", e.getOption());\n+            assertNotNull(\"Matching options null\", e.getMatchingOptions());\n+            assertEquals(\"Matching options size\", 2, e.getMatchingOptions().size());\n+        }\n+        \n+        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n+    }\n+    \n+    public void testPartialLongOptionWithShort() throws Exception\n+    {\n+        String[] args = new String[] { \"-ver\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n+        options.addOption(OptionBuilder.hasArg().create('v'));\n+        \n+        CommandLine cl = parser.parse(options, args);\n+        \n+        assertTrue(\"Confirm --version is set\", cl.hasOption(\"version\"));\n+        assertTrue(\"Confirm -v is not set\", !cl.hasOption(\"v\"));\n+    }\n }", "timestamp": 1243338524, "metainfo": ""}