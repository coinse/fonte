{"sha": "5b14c5cfb2f0a9e900b3e581212308db87112782", "log": "- tided javadoc  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java\n+++ b/src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java\n-/**\n- * Copyright 2003-2004 The Apache Software Foundation\n+/*\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n      * Creates a new Argument instance using the options specified in this\n      * ArgumentBuilder.\n      * \n-     * @return A new Argument instance.\n+     * @return A new Argument instance using the options specified in this\n+     * ArgumentBuilder.\n      */\n     public final Argument create() {\n         final Argument argument =\n \n     /**\n      * Resets the ArgumentBuilder to the defaults for a new Argument. The\n-     * method should be called automatically at the end of a create() call.\n+     * method is called automatically at the end of a create() call.\n      */\n     public final ArgumentBuilder reset() {\n         name = \"arg\";\n      * \n      * @see org.apache.commons.cli2.CommandLine#getValue(String)\n      * \n-     * @param newName\n-     *            the name of the argument\n+     * @param newName the name of the argument\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withName(final String newName) {\n      * \n      * The description is used when displaying online help.\n      * \n-     * @param newDescription\n-     *            a description of the argument\n+     * @param newDescription a description of the argument\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withDescription(final String newDescription) {\n     /**\n      * Sets the minimum number of values needed for the argument to be valid.\n      * \n-     * @param newMinimum\n-     *            the number of values needed\n+     * @param newMinimum the number of values needed\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withMinimum(final int newMinimum) {\n     /**\n      * Sets the maximum number of values allowed for the argument to be valid.\n      * \n-     * @param newMaximum\n-     *            the number of values allowed\n+     * @param newMaximum the number of values allowed\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withMaximum(final int newMaximum) {\n      * argument is of the form -libs:dir1,dir2,dir3 the initialSeparator would\n      * be ':'.\n      * \n-     * @param newInitialSeparator\n-     *            the character used to separate the values from the option\n-     * @return this ArgumentBuilder\n-     */\n-    public final ArgumentBuilder withInitialSeparator(final char newInitialSeparator) {\n+     * @param newInitialSeparator the character used to separate the values \n+     * from the option\n+     * @return this ArgumentBuilder\n+     */\n+    public final ArgumentBuilder withInitialSeparator(\n+        final char newInitialSeparator) {\n \n         this.initialSeparator = newInitialSeparator;\n         return this;\n      * argument is of the form -libs:dir1,dir2,dir3 the subsequentSeparator\n      * would be ','.\n      * \n-     * @param newSubsequentSeparator\n-     *            the character used to separate the values from each other\n-     * @return this ArgumentBuilder\n-     */\n-    public final ArgumentBuilder withSubsequentSeparator(final char newSubsequentSeparator) {\n+     * @param newSubsequentSeparator the character used to separate the values \n+     * from each other\n+     * @return this ArgumentBuilder\n+     */\n+    public final ArgumentBuilder withSubsequentSeparator(\n+        final char newSubsequentSeparator) {\n \n         this.subsequentSeparator = newSubsequentSeparator;\n         return this;\n      * Sets the validator instance used to perform validation on the Argument\n      * values.\n      * \n-     * @param newValidator\n-     *            a Validator instance\n+     * @param newValidator a Validator instance\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withValidator(final Validator newValidator) {\n      * Sets the \"consume remaining\" option, defaults to \"--\". Use this if you\n      * want to allow values that might be confused with option strings.\n      * \n-     * @param newConsumeRemaining\n-     *            the string to use for the consume remaining option\n+     * @param newConsumeRemaining the string to use for the consume \n+     * remaining option\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withConsumeRemaining(final String newConsumeRemaining) {\n     /**\n      * Sets the default value.\n      * \n-     * @param defaultValue\n-     *            the default value for the Argument\n-     * \n+     * @param defaultValue the default value for the Argument\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withDefault(final Object defaultValue) {\n     /**\n      * Sets the default values.\n      * \n-     * @param newDefaultValues\n-     *            the default values for the Argument\n-     * \n+     * @param newDefaultValues the default values for the Argument\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withDefaults(final List newDefaultValues) {\n     /**\n      * Sets the id\n      * \n-     * @param newId\n-     *            the id of the Argument\n-     * \n+     * @param newId the id of the Argument\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withId(final int newId) {", "timestamp": 1125768915, "metainfo": ""}