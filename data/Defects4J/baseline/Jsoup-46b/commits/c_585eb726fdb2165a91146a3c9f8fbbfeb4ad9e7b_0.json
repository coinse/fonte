{"sha": "585eb726fdb2165a91146a3c9f8fbbfeb4ad9e7b", "log": "Improve performance when selecting against multiple roots  Caches the parsed query  Fixes #518", "commit": "\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n         this.root = root;\n     }\n \n+    private Selector(Evaluator evaluator, Element root) {\n+        Validate.notNull(evaluator);\n+        Validate.notNull(root);\n+\n+        this.evaluator = evaluator;\n+        this.root = root;\n+    }\n+\n     /**\n      * Find elements matching selector.\n      *\n      * @param query CSS selector\n      * @param root  root element to descend into\n-     * @return matching elements, empty if not\n+     * @return matching elements, empty if none\n      */\n     public static Elements select(String query, Element root) {\n         return new Selector(query, root).select();\n     /**\n      * Find elements matching selector.\n      *\n+     * @param evaluator CSS selector\n+     * @param root root element to descend into\n+     * @return matching elements, empty if none\n+     */\n+    public static Elements select(Evaluator evaluator, Element root) {\n+        return new Selector(evaluator, root).select();\n+    }\n+\n+    /**\n+     * Find elements matching selector.\n+     *\n      * @param query CSS selector\n      * @param roots root elements to descend into\n-     * @return matching elements, empty if not\n+     * @return matching elements, empty if none\n      */\n     public static Elements select(String query, Iterable<Element> roots) {\n         Validate.notEmpty(query);\n         Validate.notNull(roots);\n+        Evaluator evaluator = QueryParser.parse(query);\n         LinkedHashSet<Element> elements = new LinkedHashSet<Element>();\n \n         for (Element root : roots) {\n-            elements.addAll(select(query, root));\n+            elements.addAll(select(evaluator, root));\n         }\n         return new Elements(elements);\n     }", "timestamp": 1427695445, "metainfo": ""}