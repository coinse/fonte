{"sha": "e613360fa4f0cd3bdfdece02d2bc1b58be640cac", "log": "Annotations added and some cleanup.", "commit": "\n--- a/src/main/java/org/jsoup/examples/HtmlToPlainText.java\n+++ b/src/main/java/org/jsoup/examples/HtmlToPlainText.java\n             }\n         }\n \n+        @Override\n         public String toString() {\n             return accum.toString();\n         }\n--- a/src/main/java/org/jsoup/helper/DescendableLinkedList.java\n+++ b/src/main/java/org/jsoup/helper/DescendableLinkedList.java\n      * Add a new element to the start of the list.\n      * @param e element to add\n      */\n+    @Override\n     public void push(E e) {\n         addFirst(e);\n     }\n      * Look at the last element, if there is one.\n      * @return the last element, or null\n      */\n+    @Override\n     public E peekLast() {\n         return size() == 0 ? null : getLast();\n     }\n      * Remove and return the last element, if there is one\n      * @return the last element, or null\n      */\n+    @Override\n     public E pollLast() {\n         return size() == 0 ? null : removeLast();\n     }\n      * Get an iterator that starts and the end of the list and works towards the start.\n      * @return an iterator that starts and the end of the list and works towards the start.\n      */\n+    @Override\n     public Iterator<E> descendingIterator() {\n         return new DescendingIterator<E>(size());\n     }\n--- a/src/main/java/org/jsoup/helper/W3CDom.java\n+++ b/src/main/java/org/jsoup/helper/W3CDom.java\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n import java.io.StringWriter;\n+import javax.xml.transform.TransformerException;\n \n /**\n  * Helper class to transform a {@link org.jsoup.nodes.Document} to a {@link org.w3c.dom.Document org.w3c.dom.Document},\n             Transformer transformer = tf.newTransformer();\n             transformer.transform(domSource, result);\n             return writer.toString();\n-        } catch (Exception e) {\n+        } catch (TransformerException e) {\n             throw new IllegalStateException(e);\n         }\n     }\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n      Get the string representation of this attribute, implemented as {@link #html()}.\n      @return string\n      */\n+    @Override\n     public String toString() {\n         return html();\n     }\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n         }\n     }\n     \n+    @Override\n     public String toString() {\n         return html();\n     }\n--- a/src/main/java/org/jsoup/nodes/Comment.java\n+++ b/src/main/java/org/jsoup/nodes/Comment.java\n \n     void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n \n+    @Override\n     public String toString() {\n         return outerHtml();\n     }\n--- a/src/main/java/org/jsoup/nodes/DataNode.java\n+++ b/src/main/java/org/jsoup/nodes/DataNode.java\n \n     void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n \n+    @Override\n     public String toString() {\n         return outerHtml();\n     }\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n import java.io.InputStream;\n import java.nio.charset.CharsetEncoder;\n import java.util.*;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n /**\n  * HTML entities, and escape routines.\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n \n     void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n \n+    @Override\n     public String toString() {\n         return outerHtml();\n     }\n--- a/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n+++ b/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n \n     void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n \n+    @Override\n     public String toString() {\n         return outerHtml();\n     }\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n \n         boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n             tb.error(this);\n-            boolean processed = true;\n+            boolean processed;\n             if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                 tb.setFosterInserts(true);\n                 processed = tb.process(t, InBody);\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n         return result;\n     }\n \n+    @Override\n     public String toString() {\n         return tagName;\n     }\n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n         return remainder;\n     }\n     \n+    @Override\n     public String toString() {\n         return queue.substring(pos);\n     }\n--- a/src/main/java/org/jsoup/parser/Tokeniser.java\n+++ b/src/main/java/org/jsoup/parser/Tokeniser.java\n import org.jsoup.helper.Validate;\n import org.jsoup.nodes.Entities;\n \n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n  * Readers the input stream into tokens.\n--- a/src/main/java/org/jsoup/safety/Cleaner.java\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n import org.jsoup.select.NodeTraversor;\n import org.jsoup.select.NodeVisitor;\n \n-import java.util.List;\n \n /**\n  The whitelist based HTML cleaner. Use to ensure that end-user provided HTML contains only the elements and attributes\n--- a/src/main/java/org/jsoup/select/CombiningEvaluator.java\n+++ b/src/main/java/org/jsoup/select/CombiningEvaluator.java\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.List;\n \n /**\n  * Base combining (and, or) evaluator.\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n      * @see #text()\n      * @see #html()\n      */\n+    @Override\n     public String toString() {\n         return outerHtml();\n     }\n \n     public void clear() {contents.clear();}\n \n+    @Override\n     public boolean equals(Object o) {return contents.equals(o);}\n \n+    @Override\n     public int hashCode() {return contents.hashCode();}\n \n     public Element get(int index) {return contents.get(index);}\n--- a/src/main/java/org/jsoup/select/StructuralEvaluator.java\n+++ b/src/main/java/org/jsoup/select/StructuralEvaluator.java\n             return false;\n         }\n \n+        @Override\n         public String toString() {\n             return String.format(\":has(%s)\", evaluator);\n         }\n             return !evaluator.matches(root, node);\n         }\n \n+        @Override\n         public String toString() {\n             return String.format(\":not%s\", evaluator);\n         }\n             return false;\n         }\n \n+        @Override\n         public String toString() {\n             return String.format(\":parent%s\", evaluator);\n         }\n             return parent != null && evaluator.matches(root, parent);\n         }\n \n+        @Override\n         public String toString() {\n             return String.format(\":ImmediateParent%s\", evaluator);\n         }\n             return false;\n         }\n \n+        @Override\n         public String toString() {\n             return String.format(\":prev*%s\", evaluator);\n         }\n             return prev != null && evaluator.matches(root, prev);\n         }\n \n+        @Override\n         public String toString() {\n             return String.format(\":prev%s\", evaluator);\n         }", "timestamp": 1413576685, "metainfo": ""}