{"sha": "2217137d9254f124e01aa935628a4076f7478995", "log": "Added support for selectors :containsOwn(text) and :matchesOwn(regex), to supplement Element.ownText().", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     /**\n      * Find elements that contain the specified string. The search is case insensitive. The text may appear directly\n      * in the element, or in any of its descendants.\n-     * @param searchText\n+     * @param searchText to look for in the element's text\n      * @return elements that contain the string, case insensitive.\n+     * @see Element#text()\n      */\n     public Elements getElementsContainingText(String searchText) {\n         return Collector.collect(new Evaluator.ContainsText(searchText), this);\n+    }\n+    \n+    /**\n+     * Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly\n+     * in the element, not in any of its descendants.\n+     * @param searchText to look for in the element's own text\n+     * @return elements that contain the string, case insensitive.\n+     * @see Element#ownText()\n+     */\n+    public Elements getElementsContainingOwnText(String searchText) {\n+        return Collector.collect(new Evaluator.ContainsOwnText(searchText), this);\n     }\n     \n     /**\n      * Find elements whose text matches the supplied regular expression.\n      * @param pattern regular expression to match text against\n      * @return elements matching the supplied regular expression.\n+     * @see Element#text()\n      */\n     public Elements getElementsMatchingText(Pattern pattern) {\n         return Collector.collect(new Evaluator.Matches(pattern), this);\n      * Find elements whose text matches the supplied regular expression.\n      * @param regex regular expression to match text against. You can use <a href=\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\">embedded flags</a> (such as (?i) and (?m) to control regex options.\n      * @return elements matching the supplied regular expression.\n+     * @see Element#text()\n      */\n     public Elements getElementsMatchingText(String regex) {\n         Pattern pattern;\n             throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n         }\n         return getElementsMatchingText(pattern);\n+    }\n+    \n+    /**\n+     * Find elements whose own text matches the supplied regular expression.\n+     * @param pattern regular expression to match text against\n+     * @return elements matching the supplied regular expression.\n+     * @see Element#ownText()\n+     */\n+    public Elements getElementsMatchingOwnText(Pattern pattern) {\n+        return Collector.collect(new Evaluator.MatchesOwn(pattern), this);\n+    }\n+    \n+    /**\n+     * Find elements whose text matches the supplied regular expression.\n+     * @param regex regular expression to match text against. You can use <a href=\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\">embedded flags</a> (such as (?i) and (?m) to control regex options.\n+     * @return elements matching the supplied regular expression.\n+     * @see Element#ownText()\n+     */\n+    public Elements getElementsMatchingOwnText(String regex) {\n+        Pattern pattern;\n+        try {\n+            pattern = Pattern.compile(regex);\n+        } catch (PatternSyntaxException e) {\n+            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n+        }\n+        return getElementsMatchingOwnText(pattern);\n     }\n     \n     /**\n--- a/src/main/java/org/jsoup/nodes/Evaluator.java\n+++ b/src/main/java/org/jsoup/nodes/Evaluator.java\n         }\n     }\n     \n+    static final class ContainsOwnText extends Evaluator {\n+        private String searchText;\n+        ContainsOwnText(String searchText) {\n+            this.searchText = searchText.toLowerCase();\n+        }\n+\n+        public boolean matches(Element element) {\n+            return (element.ownText().toLowerCase().contains(searchText));\n+        }\n+    }\n+    \n     static final class Matches extends Evaluator {\n         private Pattern pattern;\n         Matches(Pattern pattern) {\n             return m.find();\n         }\n     }\n+    \n+    static final class MatchesOwn extends Evaluator {\n+        private Pattern pattern;\n+        MatchesOwn(Pattern pattern) {\n+            this.pattern = pattern;\n+        }\n+\n+        public boolean matches(Element element) {\n+            Matcher m = pattern.matcher(element.ownText());\n+            return m.find();\n+        }\n+    }\n \n \n }\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n  <tr><td><code>E:has(<em>selector</em>)</code></td><td>an Element that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n  <tr><td><code>E:contains(<em>text</em>)</code></td><td>an Element that contains the specified text. The search is case insensitive. The text may appear in the found Element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n  <tr><td><code>E:matches(<em>regex</em>)</code></td><td>an Element whose text matches the specified regular expression. The text may appear in the found Element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n+ <tr><td><code>E:containsOwn(<em>text</em>)</code></td><td>an Element that directly contains the specified text. The search is case insensitive. The text must appear in the found Element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n+ <tr><td><code>E:matchesOwn(<em>regex</em>)</code></td><td>an Element whose own text matches the specified regular expression. The text must appear in the found Element, not any of its descendants.</td><td><code>td:matchesOwn(\\\\d+)</code> finds table cells directly containing digits. <code>div:matchesOwn((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n  </table>\n \n  @see Element#select(String)\n         } else if (tq.matches(\":has(\")) {\n             return has();\n         } else if (tq.matches(\":contains(\")) {\n-            return contains();\n+            return contains(false);\n+        } else if (tq.matches(\":containsOwn(\")) {\n+            return contains(true);\n         } else if (tq.matches(\":matches(\")) {\n-            return matches();\n+            return matches(false);\n+        } else if (tq.matches(\":matchesOwn(\")) {\n+            return matches(true);\n         } else { // unhandled\n             throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n         }\n         return filterForParentsOfDescendants(elements, select(subQuery, elements));\n     }\n     \n-    // pseudo selector :contains(text)\n-    private Elements contains() {\n-        tq.consume(\":contains\");\n+    // pseudo selector :contains(text), containsOwn(text)\n+    private Elements contains(boolean own) {\n+        tq.consume(own ? \":containsOwn\" : \":contains\");\n         String searchText = TokenQueue.unescape(tq.chompBalanced('(',')'));\n         Validate.notEmpty(searchText, \":contains(text) query must not be empty\");\n         \n-        return root.getElementsContainingText(searchText);\n-    }\n-    \n-    // :matches(regex)\n-    private Elements matches() {\n-        tq.consume(\":matches\");\n+        return own ? root.getElementsContainingOwnText(searchText) : root.getElementsContainingText(searchText);\n+    }\n+    \n+    // :matches(regex), matchesOwn(regex)\n+    private Elements matches(boolean own) {\n+        tq.consume(own? \":matchesOwn\" : \":matches\");\n         String regex = tq.chompBalanced('(', ')'); // don't unescape, as regex bits will be escaped\n         Validate.notEmpty(regex, \":matches(regex) query must not be empty\");\n         \n-        return root.getElementsMatchingText(regex);\n+        return own ? root.getElementsMatchingOwnText(regex) : root.getElementsMatchingText(regex);\n     }\n \n     // direct child descendants\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(\"2\", ps2.first().id());\n     }\n     \n+    @Test public void containsOwn() {\n+        Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b> now</p>\");\n+        Elements ps = doc.select(\"p:containsOwn(Hello now)\");\n+        assertEquals(1, ps.size());\n+        assertEquals(\"1\", ps.first().id());\n+        \n+        assertEquals(0, doc.select(\"p:containsOwn(there)\").size());\n+    }\n+    \n     @Test public void testMatches() {       \n         Document doc = Jsoup.parse(\"<p id=1>The <i>Rain</i></p> <p id=2>There are 99 bottles.</p> <p id=3>Harder (this)</p> <p id=4>Rain</p>\");\n         \n         assertEquals(\"1\", p7.first().id());\n     }\n     \n+    @Test public void matchesOwn() {\n+        Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b> now</p>\");\n+        \n+        Elements p1 = doc.select(\"p:matchesOwn((?i)hello now)\");\n+        assertEquals(1, p1.size());\n+        assertEquals(\"1\", p1.first().id());\n+        \n+        assertEquals(0, doc.select(\"p:matchesOwn(there)\").size());\n+    }\n+    \n     @Test public void testRelaxedTags() {\n         Document doc = Jsoup.parse(\"<abc_def id=1>Hello</abc_def> <abc-def id=2>There</abc-def>\");\n         ", "timestamp": 1309605119, "metainfo": ""}