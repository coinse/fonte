{"sha": "c1ee93355ba4bc6a430aed0ea8db7369f7d0895f", "log": "Use a regular expression pattern to parse various xml content types  and simplify the boolean expression to use less nesting, ie just checking and not this, and not that, etcetera.", "commit": "\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n import java.util.*;\n+import java.util.regex.Pattern;\n import java.util.zip.GZIPInputStream;\n \n /**\n  * Implementation of {@link Connection}.\n- * @see org.jsoup.Jsoup#connect(String) \n+ * @see org.jsoup.Jsoup#connect(String)\n  */\n public class HttpConnection implements Connection {\n     public static Connection connect(String url) {\n         public Collection<Connection.KeyVal> data() {\n             return data;\n         }\n-        \n+\n         public Request parser(Parser parser) {\n             this.parser = parser;\n             return this;\n         }\n-        \n+\n         public Parser parser() {\n             return parser;\n         }\n         private int numRedirects = 0;\n         private Connection.Request req;\n \n+        /**\n+         * For example {@code application/atom+xml;charset=utf-8}.\n+         * Stepping through it: start with {@code \"application/\"}, follow with word\n+         * characters up to a {@code \"+xml\"}, and then maybe more ({@code .*}).\n+         */\n+        public static final Pattern xmlContentTypeRxp = Pattern.compile(\"application/\\\\w+\\\\+xml.*\");\n+\n         Response() {\n             super();\n         }\n                     throw new IOException(String.format(\"Too many redirects occurred trying to load URL %s\", previousResponse.url()));\n             }\n         }\n-        \n+\n         static Response execute(Connection.Request req) throws IOException {\n             return execute(req, null);\n         }\n \n                 // check that we can handle the returned content type; if not, abort before fetching it\n                 String contentType = res.contentType();\n-                if (contentType != null && !req.ignoreContentType()\n-                        && (!(contentType.startsWith(\"text/\")\n-                            || contentType.startsWith(\"application/xml\")\n-                            || contentType.startsWith(\"application/xhtml+xml\")\n-                            || (contentType.startsWith(\"application/\") && contentType.endsWith(\"+xml\"))\n-                            ))\n+                if (contentType != null\n+                        && !req.ignoreContentType()\n+                        && !contentType.startsWith(\"text/\")\n+                        && !contentType.startsWith(\"application/xml\")\n+                        && !xmlContentTypeRxp.matcher(contentType).matches()\n                         )\n                     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml\",\n                             contentType, req.url().toString());\n             OutputStreamWriter w = new OutputStreamWriter(outputStream, DataUtil.defaultCharset);\n             boolean first = true;\n             for (Connection.KeyVal keyVal : data) {\n-                if (!first) \n+                if (!first)\n                     w.append('&');\n                 else\n                     first = false;\n-                \n+\n                 w.write(URLEncoder.encode(keyVal.key(), DataUtil.defaultCharset));\n                 w.write('=');\n                 w.write(URLEncoder.encode(keyVal.value(), DataUtil.defaultCharset));\n             }\n             w.close();\n         }\n-        \n+\n         private static String getRequestCookieString(Connection.Request req) {\n             StringBuilder sb = new StringBuilder();\n             boolean first = true;\n         @Override\n         public String toString() {\n             return key + \"=\" + value;\n-        }      \n+        }\n     }\n }", "timestamp": 1406914297, "metainfo": ""}