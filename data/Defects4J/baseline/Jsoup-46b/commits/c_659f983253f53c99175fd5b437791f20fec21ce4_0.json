{"sha": "659f983253f53c99175fd5b437791f20fec21ce4", "log": "Update to allow for specification of form post data charset.   Updates to Connection and Request interfaces and HttpConnection implementation", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n     public Connection parser(Parser parser);\n \n     /**\n+     * Sets the default post data character set for x-www-form-urlencoded post data\n+     * @param charset character set to encode post data\n+     * @return this Connection, for chaining\n+     */\n+    public Connection postDataCharset(String charset);\n+\n+    /**\n      * Execute the request as a GET, and parse the result.\n      * @return parsed Document\n      * @throws java.net.MalformedURLException if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed\n          * @return current Parser\n          */\n         public Parser parser();\n+\n+        /**\n+         * Sets the post data character set for x-www-form-urlencoded post data\n+         * @param charset character set to encode post data\n+         * @return this Request, for chaining\n+         */\n+        public Request postDataCharset(String charset);\n+\n+        /**\n+         * Gets the post data character set for x-www-form-urlencoded post data\n+         * @return character set to encode post data\n+         */\n+        public String postDataCharset();\n+\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n import java.net.URLEncoder;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n import java.security.KeyManagementException;\n import java.security.NoSuchAlgorithmException;\n import java.security.cert.X509Certificate;\n \n     public Connection response(Connection.Response response) {\n         res = response;\n+        return this;\n+    }\n+\n+    public Connection postDataCharset(String charset) {\n+        req.postDataCharset(charset);\n         return this;\n     }\n \n         private boolean ignoreContentType = false;\n         private Parser parser;\n         private boolean validateTSLCertificates = true;\n+        private String postDataCharset = DataUtil.defaultCharset;\n \n         private Request() {\n             timeoutMilliseconds = 3000;\n \n         public Parser parser() {\n             return parser;\n+        }\n+\n+        public Connection.Request postDataCharset(String charset) {\n+            Validate.notNull(charset, \"Charset must not be null\");\n+            if (!Charset.isSupported(charset)) throw new IllegalCharsetNameException(charset);\n+            this.postDataCharset = charset;\n+            return this;\n+        }\n+\n+        public String postDataCharset() {\n+            return postDataCharset;\n         }\n     }\n \n                 bound = DataUtil.mimeBoundary();\n                 req.header(CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bound);\n             } else {\n-                req.header(CONTENT_TYPE, FORM_URL_ENCODED);\n+                req.header(CONTENT_TYPE, FORM_URL_ENCODED + \"; charset=\" + req.postDataCharset());\n             }\n             return bound;\n         }\n                     else\n                         first = false;\n \n-                    w.write(URLEncoder.encode(keyVal.key(), DataUtil.defaultCharset));\n+                    w.write(URLEncoder.encode(keyVal.key(), req.postDataCharset()));\n                     w.write('=');\n-                    w.write(URLEncoder.encode(keyVal.value(), DataUtil.defaultCharset));\n+                    w.write(URLEncoder.encode(keyVal.value(), req.postDataCharset()));\n                 }\n             }\n             w.close();", "timestamp": 1415123442, "metainfo": ""}