{"sha": "b9c174056fa44d575e23b5759d13610eae685beb", "log": "Refactor the Elements collection to extend instead of delegate", "commit": "\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n  To get an {@code Elements} object, use the {@link Element#select(String)} method.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n-public class Elements implements List<Element>, Cloneable {\n-    private List<Element> contents;\n-\n+public class Elements extends ArrayList<Element> {\n     public Elements() {\n-        contents = new ArrayList<Element>();\n     }\n \n     public Elements(int initialCapacity) {\n-        contents = new ArrayList<Element>(initialCapacity);\n+        super(initialCapacity);\n     }\n \n     public Elements(Collection<Element> elements) {\n-        contents = new ArrayList<Element>(elements);\n+        super(elements);\n     }\n     \n     public Elements(List<Element> elements) {\n-        contents = elements;\n+        super(elements);\n     }\n     \n     public Elements(Element... elements) {\n-        this(Arrays.asList(elements));\n+    \tsuper(Arrays.asList(elements));\n     }\n \n     /**\n      */\n     @Override\n \tpublic Elements clone() {\n-        Elements clone;\n-        try {\n-            clone = (Elements) super.clone();\n-        } catch (CloneNotSupportedException e) {\n-            throw new RuntimeException(e);\n-        }\n-    \tList<Element> elements = new ArrayList<Element>();\n-        clone.contents = elements;\n-    \t\n-    \tfor(Element e : contents)\n-    \t\telements.add(e.clone());\n-\t\t\n+        Elements clone = new Elements(size());\n+\n+        for(Element e : this)\n+    \t\tclone.add(e.clone());\n     \t\n     \treturn clone;\n \t}\n      @see #hasAttr(String)\n      */\n     public String attr(String attributeKey) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             if (element.hasAttr(attributeKey))\n                 return element.attr(attributeKey);\n         }\n      @return true if any of the elements have the attribute; false if none do.\n      */\n     public boolean hasAttr(String attributeKey) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             if (element.hasAttr(attributeKey))\n                 return true;\n         }\n      * @return this\n      */\n     public Elements attr(String attributeKey, String attributeValue) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.attr(attributeKey, attributeValue);\n         }\n         return this;\n      * @return this (for chaining)\n      */\n     public Elements removeAttr(String attributeKey) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.removeAttr(attributeKey);\n         }\n         return this;\n      @return this\n      */\n     public Elements addClass(String className) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.addClass(className);\n         }\n         return this;\n      @return this\n      */\n     public Elements removeClass(String className) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.removeClass(className);\n         }\n         return this;\n      @return this\n      */\n     public Elements toggleClass(String className) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.toggleClass(className);\n         }\n         return this;\n      @return true if any do, false if none do\n      */\n     public boolean hasClass(String className) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             if (element.hasClass(className))\n                 return true;\n         }\n      * @return this (for chaining)\n      */\n     public Elements val(String value) {\n-        for (Element element : contents)\n+        for (Element element : this)\n             element.val(value);\n         return this;\n     }\n      */\n     public String text() {\n         StringBuilder sb = new StringBuilder();\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             if (sb.length() != 0)\n                 sb.append(\" \");\n             sb.append(element.text());\n     }\n \n     public boolean hasText() {\n-        for (Element element: contents) {\n+        for (Element element: this) {\n             if (element.hasText())\n                 return true;\n         }\n      */\n     public String html() {\n         StringBuilder sb = new StringBuilder();\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             if (sb.length() != 0)\n                 sb.append(\"\\n\");\n             sb.append(element.html());\n      */\n     public String outerHtml() {\n         StringBuilder sb = new StringBuilder();\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             if (sb.length() != 0)\n                 sb.append(\"\\n\");\n             sb.append(element.outerHtml());\n      * @see Element#tagName(String)\n      */\n     public Elements tagName(String tagName) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.tagName(tagName);\n         }\n         return this;\n      * @see Element#html(String)\n      */\n     public Elements html(String html) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.html(html);\n         }\n         return this;\n      * @see Element#prepend(String)\n      */\n     public Elements prepend(String html) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.prepend(html);\n         }\n         return this;\n      * @see Element#append(String)\n      */\n     public Elements append(String html) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.append(html);\n         }\n         return this;\n      * @see Element#before(String)\n      */\n     public Elements before(String html) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.before(html);\n         }\n         return this;\n      * @see Element#after(String)\n      */\n     public Elements after(String html) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.after(html);\n         }\n         return this;\n      */\n     public Elements wrap(String html) {\n         Validate.notEmpty(html);\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.wrap(html);\n         }\n         return this;\n      * @see Node#unwrap\n      */\n     public Elements unwrap() {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.unwrap();\n         }\n         return this;\n      * @see #remove()\n      */\n     public Elements empty() {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.empty();\n         }\n         return this;\n      * @see #empty()\n      */\n     public Elements remove() {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.remove();\n         }\n         return this;\n      * @return Elements containing only the specified element, or, if that element did not exist, an empty list.\n      */\n     public Elements eq(int index) {\n-        return contents.size() > index ? new Elements(get(index)) : new Elements();\n+        return size() > index ? new Elements(get(index)) : new Elements();\n     }\n     \n     /**\n      */\n     public Elements parents() {\n         HashSet<Element> combo = new LinkedHashSet<Element>();\n-        for (Element e: contents) {\n+        for (Element e: this) {\n             combo.addAll(e.parents());\n         }\n         return new Elements(combo);\n      @return The first matched element, or <code>null</code> if contents is empty.\n      */\n     public Element first() {\n-        return contents.isEmpty() ? null : contents.get(0);\n+        return isEmpty() ? null : get(0);\n     }\n \n     /**\n      @return The last matched element, or <code>null</code> if contents is empty.\n      */\n     public Element last() {\n-        return contents.isEmpty() ? null : contents.get(contents.size() - 1);\n+        return isEmpty() ? null : get(size() - 1);\n     }\n \n     /**\n     public Elements traverse(NodeVisitor nodeVisitor) {\n         Validate.notNull(nodeVisitor);\n         NodeTraversor traversor = new NodeTraversor(nodeVisitor);\n-        for (Element el: contents) {\n+        for (Element el: this) {\n             traversor.traverse(el);\n         }\n         return this;\n      */\n     public List<FormElement> forms() {\n         ArrayList<FormElement> forms = new ArrayList<FormElement>();\n-        for (Element el: contents)\n+        for (Element el: this)\n             if (el instanceof FormElement)\n                 forms.add((FormElement) el);\n         return forms;\n     }\n \n-    // implements List<Element> delegates:\n-    public int size() {return contents.size();}\n-\n-    public boolean isEmpty() {return contents.isEmpty();}\n-\n-    public boolean contains(Object o) {return contents.contains(o);}\n-\n-    public Iterator<Element> iterator() {return contents.iterator();}\n-\n-    public Object[] toArray() {return contents.toArray();}\n-\n-    public <T> T[] toArray(T[] a) {return contents.toArray(a);}\n-\n-    public boolean add(Element element) {return contents.add(element);}\n-\n-    public boolean remove(Object o) {return contents.remove(o);}\n-\n-    public boolean containsAll(Collection<?> c) {return contents.containsAll(c);}\n-\n-    public boolean addAll(Collection<? extends Element> c) {return contents.addAll(c);}\n-\n-    public boolean addAll(int index, Collection<? extends Element> c) {return contents.addAll(index, c);}\n-\n-    public boolean removeAll(Collection<?> c) {return contents.removeAll(c);}\n-\n-    public boolean retainAll(Collection<?> c) {return contents.retainAll(c);}\n-\n-    public void clear() {contents.clear();}\n-\n-    @Override\n-    public boolean equals(Object o) {return contents.equals(o);}\n-\n-    @Override\n-    public int hashCode() {return contents.hashCode();}\n-\n-    public Element get(int index) {return contents.get(index);}\n-\n-    public Element set(int index, Element element) {return contents.set(index, element);}\n-\n-    public void add(int index, Element element) {contents.add(index, element);}\n-\n-    public Element remove(int index) {return contents.remove(index);}\n-\n-    public int indexOf(Object o) {return contents.indexOf(o);}\n-\n-    public int lastIndexOf(Object o) {return contents.lastIndexOf(o);}\n-\n-    public ListIterator<Element> listIterator() {return contents.listIterator();}\n-\n-    public ListIterator<Element> listIterator(int index) {return contents.listIterator(index);}\n-\n-    public List<Element> subList(int fromIndex, int toIndex) {return contents.subList(fromIndex, toIndex);}\n }", "timestamp": 1414513616, "metainfo": ""}