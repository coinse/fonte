{"sha": "b9f9860f43834de80d6acacad6dc76bd93140957", "log": "changes wrt existing Evaluator class", "commit": "\n--- a/src/main/java/org/jsoup/select/ng/AndSelector.java\n+++ b/src/main/java/org/jsoup/select/ng/AndSelector.java\n import java.util.List;\n \n import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Evaluator;\n import org.jsoup.nodes.Node;\n \n-public class AndSelector implements Selector {\n-\tList<Selector> selectors;\n+public class AndSelector extends Evaluator {\n+\tList<Evaluator> selectors;\n \n-\tpublic AndSelector(List<Selector> selectors) {\n+\tpublic AndSelector(List<Evaluator> selectors) {\n+\t\tsuper();\n \t\tthis.selectors = selectors;\n \t}\n \n \t@Override\n-\tpublic boolean select(Element node) {\n-\t\tfor(Selector s : selectors) {\n-\t\t\tif(!s.select(node))\n+\tpublic boolean matches(Element node) {\n+\t\tfor(Evaluator s : selectors) {\n+\t\t\tif(!s.matches(node))\n \t\t\t\treturn false;\n \t\t}\n \t\t\n--- a/src/main/java/org/jsoup/select/ng/BasicSelector.java\n+++ b/src/main/java/org/jsoup/select/ng/BasicSelector.java\n \n import java.util.Arrays;\n \n+import org.jsoup.nodes.Evaluator;\n+\n public class BasicSelector {\n \t\n-\tpublic static ListSelector list(Selector... sels) {\n+\tpublic static ListSelector list(Evaluator... sels) {\n \t\treturn new ListSelector(Arrays.asList(sels));\n \t}\n \t\n-\tpublic static AndSelector and(Selector... sels) {\n+\tpublic static AndSelector and(Evaluator... sels) {\n \t\treturn new AndSelector(Arrays.asList(sels));\n \t}\n \t\n-\tpublic static NotSelector not(Selector sel) {\n+\tpublic static NotSelector not(Evaluator sel) {\n \t\treturn new NotSelector(sel);\n \t}\n-\t\n-\tpublic static TagSelector tag(String tag) {\n-\t\treturn new TagSelector(tag);\n-\t}\n-\t\n-\tpublic static IdSelector id(String id) {\n-\t\treturn new IdSelector(id);\n-\t}\n-\t\n-\tpublic static ClassSelector cls(String cls) {\n-\t\treturn new ClassSelector(cls);\n-\t}\n }\n--- a/src/main/java/org/jsoup/select/ng/ElementSelector.java\n+++ b/src/main/java/org/jsoup/select/ng/ElementSelector.java\n package org.jsoup.select.ng;\n \n import org.jsoup.nodes.Element;\n-import org.jsoup.nodes.Node;\n+import org.jsoup.nodes.Evaluator;\n \n-public class ElementSelector implements Selector {\n+public class ElementSelector extends Evaluator {\n \tString tag;\n \tString cls;\n \tString id;\n \t}\n \n \t@Override\n-\tpublic boolean select(Element node) {\n+\tpublic boolean matches(Element node) {\n \t\t\tElement el = (Element) node;\n \t\t\t\n \t\t\tif(tag != null && !el.tagName().equals(tag))\n--- /dev/null\n+++ b/src/main/java/org/jsoup/select/ng/ImmediateParentSelector.java\n+package org.jsoup.select.ng;\n+\n+import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Evaluator;\n+\n+public class ImmediateParentSelector extends Evaluator {\n+\tEvaluator sel;\n+\t\n+\tpublic ImmediateParentSelector(Evaluator sel) {\n+\t\tthis.sel = sel;\n+\t}\n+\n+\t@Override\n+\tpublic boolean matches(Element element) {\n+\t\t\n+\t\tElement parent = element.parent();\n+\n+\t\tif(parent != null)\n+\t\t\treturn sel.matches(parent);\n+\n+\t\treturn false;\n+\t}\n+\n+\n+}\n--- a/src/main/java/org/jsoup/select/ng/ListSelector.java\n+++ b/src/main/java/org/jsoup/select/ng/ListSelector.java\n import java.util.List;\n \n import org.jsoup.nodes.Element;\n-import org.jsoup.nodes.Node;\n+import org.jsoup.nodes.Evaluator;\n \n-public class ListSelector implements Selector {\n-\tList<Selector> selectors;\n+public class ListSelector extends Evaluator {\n+\tList<Evaluator> selectors;\n \n-\tpublic ListSelector(List<Selector> selectors) {\n+\tpublic ListSelector(List<Evaluator> selectors) {\n \t\tsuper();\n \t\tthis.selectors = selectors;\n \t}\n \n \t@Override\n-\tpublic boolean select(Element node) {\n-\t\tfor(Selector s : selectors) {\n-\t\t\tif(s.select(node))\n+\tpublic boolean matches(Element node) {\n+\t\tfor(Evaluator s : selectors) {\n+\t\t\tif(s.matches(node))\n \t\t\t\treturn true;\n \t\t}\n \t\t\n--- /dev/null\n+++ b/src/main/java/org/jsoup/select/ng/NextSiblingSelector.java\n+package org.jsoup.select.ng;\n+\n+import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Evaluator;\n+\n+public class NextSiblingSelector extends Evaluator {\n+\tEvaluator sel;\n+\t\n+\tpublic NextSiblingSelector(Evaluator sel) {\n+\t\tthis.sel = sel;\n+\t}\n+\n+\t@Override\n+\tpublic boolean matches(Element element) {\n+\t\tElement next = element.nextElementSibling();\n+\t\t\n+\t\tif(next != null && sel.matches(next))\n+\t\t\treturn true;\n+\t\t\n+\t\treturn false;\n+\t}\n+\n+}\n--- a/src/main/java/org/jsoup/select/ng/NotSelector.java\n+++ b/src/main/java/org/jsoup/select/ng/NotSelector.java\n package org.jsoup.select.ng;\n \n import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Evaluator;\n import org.jsoup.nodes.Node;\n \n-public class NotSelector implements Selector {\n-\tSelector sel;\n+public class NotSelector extends Evaluator {\n+\tEvaluator sel;\n \t\n \t\n \n-\tpublic NotSelector(Selector sel) {\n+\tpublic NotSelector(Evaluator sel) {\n \t\tsuper();\n \t\tthis.sel = sel;\n \t}\n \n \n \t@Override\n-\tpublic boolean select(Element node) {\n-\t\treturn !sel.select(node);\n+\tpublic boolean matches(Element node) {\n+\t\treturn !sel.matches(node);\n \t}\n \n }\n--- /dev/null\n+++ b/src/main/java/org/jsoup/select/ng/ParentSelector.java\n+package org.jsoup.select.ng;\n+\n+import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Evaluator;\n+\n+public class ParentSelector extends Evaluator {\n+\tEvaluator sel;\n+\t\n+\tpublic ParentSelector(Evaluator sel) {\n+\t\tthis.sel = sel;\n+\t}\n+\n+\t@Override\n+\tpublic boolean matches(Element element) {\n+\t\t\n+\t\tElement parent = element.parent();\n+\t\t\n+\t\twhile(parent != null) {\n+\t\t\tif(sel.matches(parent))\n+\t\t\t\treturn true;\n+\t\t\t\n+\t\t\tparent = parent.parent();\n+\t\t}\n+\n+\t\treturn false;\n+\t}\n+\n+}\n--- a/src/main/java/org/jsoup/select/ng/SelectMatch.java\n+++ b/src/main/java/org/jsoup/select/ng/SelectMatch.java\n package org.jsoup.select.ng;\n \n-import java.util.ArrayDeque;\n import java.util.ArrayList;\n-import java.util.Deque;\n import java.util.List;\n \n import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Evaluator;\n import org.jsoup.nodes.Node;\n import org.jsoup.select.Elements;\n \n public class SelectMatch {\n-\tSelector sel;\n+\tEvaluator sel;\n \t\n-\tpublic SelectMatch(Selector sel) {\n+\tpublic SelectMatch(Evaluator sel) {\n \t\tthis.sel = sel;\n \t}\n \t\n \t\treturn new Elements(match(root, new ArrayList<Element>()));\n \t}\n \t\n-\tpublic List<Element> match(Node start, List<Element> matched) {\n-\t\tif((start instanceof Element) && sel.select((Element)start))\n-\t\t\tmatched.add((Element)start);\n+\tpublic Elements match(Elements elements) {\n+\t\tList<Element> matched = new ArrayList<Element>();\n \t\t\n-\t\tfor(Node n : start.childNodes())\n+\t\tfor(Element el : elements) {\n+\t\t\tmatch(el, matched);\n+\t\t}\n+\t\t\n+\t\treturn new Elements(matched);\n+\t}\n+\t\n+\tpublic List<Element> match(Node root, List<Element> matched) {\n+\t\tif((root instanceof Element) && sel.matches((Element)root))\n+\t\t\tmatched.add((Element)root);\n+\t\t\n+\t\tfor(Node n : root.childNodes())\n \t\t\tif(n instanceof Element)\n \t\t\t\tmatch(n, matched);\n \t\t\n \t\t\n \t\treturn matched;\n \t}*/\n+\t\n+\tpublic static Elements match(Node root, Evaluator sel) {\n+\t\tSelectMatch sm = new SelectMatch(sel);\n+\t\t\n+\t\treturn sm.match(root);\n+\t}\n+\t\n+\tpublic static Elements match(Elements elements, Evaluator sel) {\n+\t\tSelectMatch sm = new SelectMatch(sel);\n+\t\t\n+\t\treturn sm.match(elements);\n+\t}\n+\n \n \t\n \n--- /dev/null\n+++ b/src/main/java/org/jsoup/select/ng/SequentSiblingSelector.java\n+package org.jsoup.select.ng;\n+\n+import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Evaluator;\n+\n+public class SequentSiblingSelector extends Evaluator {\n+\tEvaluator sel;\n+\t\n+\t\n+\n+\tpublic SequentSiblingSelector(Evaluator sel) {\n+\t\tthis.sel = sel;\n+\t}\n+\n+\n+\n+\t@Override\n+\tpublic boolean matches(Element element) {\n+\t\tElement next = element.nextElementSibling();\n+\t\t\n+\t\twhile(next != null) {\n+\t\t\tif(sel.matches(next))\n+\t\t\t\treturn true;\n+\t\t\t\n+\t\t\tnext = next.nextElementSibling();\n+\t\t}\n+\t\t\n+\t\treturn false;\n+\t}\n+\n+}", "timestamp": 1309605123, "metainfo": ""}