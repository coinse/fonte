{"sha": "20088820f17e190db7d68c13d3f1b99fc1cecc5f", "log": "Merge pull request #316 from Shepard/patch-1  Made test method for attribute protected so it can be overridden", "commit": "\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n      * @param attr attribute under test\n      * @return true if allowed\n      */\n-    boolean isSafeAttribute(String tagName, Element el, Attribute attr) {\n+    protected boolean isSafeAttribute(String tagName, Element el, Attribute attr) {\n         TagName tag = TagName.valueOf(tagName);\n         AttributeKey key = AttributeKey.valueOf(attr.getKey());\n \n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n import java.io.*;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.Locale;\n  *\n  */\n public class DataUtil {\n-    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*\\\"?([^\\\\s;\\\"]*)\");\n+    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");\n     static final String defaultCharset = \"UTF-8\"; // used if not found in header or meta charset\n     private static final int bufferSize = 0x20000; // ~130K.\n \n             doc = parser.parseInput(docData, baseUri);\n             Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n             if (meta != null) { // if not found, will keep utf-8 as best attempt\n-                String foundCharset = meta.hasAttr(\"http-equiv\") ? getCharsetFromContentType(meta.attr(\"content\")) : meta.attr(\"charset\");\n+\n+                String foundCharset;\n+                if (meta.hasAttr(\"http-equiv\")) {\n+                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n+                    if (foundCharset == null && meta.hasAttr(\"charset\")) {\n+                        try {\n+                            if (Charset.isSupported(meta.attr(\"charset\"))) {\n+                                foundCharset = meta.attr(\"charset\");\n+                            }\n+                        } catch (IllegalCharsetNameException e) {\n+                            foundCharset = null;\n+                        }\n+                    }\n+                } else {\n+                    foundCharset = meta.attr(\"charset\");\n+                }\n+\n                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n+                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                     charsetName = foundCharset;\n                     byteData.rewind();\n                     docData = Charset.forName(foundCharset).decode(byteData).toString();\n         Matcher m = charsetPattern.matcher(contentType);\n         if (m.find()) {\n             String charset = m.group(1).trim();\n-            if (Charset.isSupported(charset)) return charset;\n-            charset = charset.toUpperCase(Locale.ENGLISH);\n-            if (Charset.isSupported(charset)) return charset;\n+            charset = charset.replace(\"charset=\", \"\");\n+            if (charset.isEmpty()) return null;\n+            try {\n+                if (Charset.isSupported(charset)) return charset;\n+                charset = charset.toUpperCase(Locale.ENGLISH);\n+                if (Charset.isSupported(charset)) return charset;\n+            } catch (IllegalCharsetNameException e) {\n+                // if our advanced charset matching fails.... we just take the default\n+                return null;\n+            }\n         }\n         return null;\n     }\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n         return con;\n     }\n \n+\tprivate static String encodeUrl(String url) {\n+\t\tif(url == null)\n+\t\t\treturn null;\n+    \treturn url.replaceAll(\" \", \"%20\");\n+\t}\n+\n     private Connection.Request req;\n     private Connection.Response res;\n \n     public Connection url(String url) {\n         Validate.notEmpty(url, \"Must supply a valid URL\");\n         try {\n-            req.url(new URL(url));\n+            req.url(new URL(encodeUrl(url)));\n         } catch (MalformedURLException e) {\n             throw new IllegalArgumentException(\"Malformed URL: \" + url, e);\n         }\n                 if (needsRedirect && req.followRedirects()) {\n                     req.method(Method.GET); // always redirect with a get. any data param from original req are dropped.\n                     req.data().clear();\n-                    req.url(new URL(req.url(), res.header(\"Location\")));\n+\n+                    String location = res.header(\"Location\");\n+                    if (location != null && location.startsWith(\"http:/\") && location.charAt(6) != '/') // fix broken Location: http:/temp/AAG_New/en/index.php\n+                        location = location.substring(6);\n+                    req.url(new URL(req.url(), encodeUrl(location)));\n+\n                     for (Map.Entry<String, String> cookie : res.cookies.entrySet()) { // add response cookies to request (for e.g. login posts)\n                         req.cookie(cookie.getKey(), cookie.getValue());\n                     }\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n         this.quirksMode = quirksMode;\n         return this;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        return super.equals(o);\n+    }\n }\n \n--- a/src/main/java/org/jsoup/nodes/FormElement.java\n+++ b/src/main/java/org/jsoup/nodes/FormElement.java\n         }\n         return data;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        return super.equals(o);\n+    }\n }\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.LinkedList;\n import java.util.List;\n \n /**\n     public boolean hasAttr(String attributeKey) {\n         Validate.notNull(attributeKey);\n \n-        if (attributeKey.toLowerCase().startsWith(\"abs:\")) {\n+        if (attributeKey.startsWith(\"abs:\")) {\n             String key = attributeKey.substring(\"abs:\".length());\n             if (attributes.hasKey(key) && !absUrl(key).equals(\"\"))\n                 return true;\n     public Node parent() {\n         return parentNode;\n     }\n+\n+    /**\n+     Gets this node's parent node. Node overridable by extending classes, so useful if you really just need the Node type.\n+     @return parent node; or null if no parent.\n+     */\n+    public final Node parentNode() {\n+        return parentNode;\n+    }\n     \n     /**\n      * Gets the Document associated with this Node. \n      */\n     @Override\n     public Node clone() {\n-        return doClone(null); // splits for orphan\n-    }\n-\n+        Node thisClone = doClone(null); // splits for orphan\n+\n+        // Queue up nodes that need their children cloned (BFS).\n+        LinkedList<Node> nodesToProcess = new LinkedList<Node>();\n+        nodesToProcess.add(thisClone);\n+\n+        while (!nodesToProcess.isEmpty()) {\n+            Node currParent = nodesToProcess.remove();\n+\n+            for (int i = 0; i < currParent.childNodes.size(); i++) {\n+                Node childClone = currParent.childNodes.get(i).doClone(currParent);\n+                currParent.childNodes.set(i, childClone);\n+                nodesToProcess.add(childClone);\n+            }\n+        }\n+\n+        return thisClone;\n+    }\n+\n+    /*\n+     * Return a clone of the node using the given parent (which can be null).\n+     * Not a deep copy of children.\n+     */\n     protected Node doClone(Node parent) {\n         Node clone;\n+\n         try {\n             clone = (Node) super.clone();\n         } catch (CloneNotSupportedException e) {\n         clone.attributes = attributes != null ? attributes.clone() : null;\n         clone.baseUri = baseUri;\n         clone.childNodes = new ArrayList<Node>(childNodes.size());\n+\n         for (Node child: childNodes)\n-            clone.childNodes.add(child.doClone(clone)); // clone() creates orphans, doClone() keeps parent\n+            clone.childNodes.add(child);\n \n         return clone;\n     }\n--- a/src/main/java/org/jsoup/parser/CharacterReader.java\n+++ b/src/main/java/org/jsoup/parser/CharacterReader.java\n             // scan to first instance of startchar:\n             if (startChar != input[offset])\n                 while(++offset < length && startChar != input[offset]);\n-            if (offset < length) {\n-                int i = offset + 1;\n-                int last = i + seq.length()-1;\n+            int i = offset + 1;\n+            int last = i + seq.length()-1;\n+            if (offset < length && last <= length) {\n                 for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);\n                 if (i == last) // found full sequence\n                     return offset - pos;\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n  * HTML Tree Builder; creates a DOM from Tokens.\n  */\n class HtmlTreeBuilder extends TreeBuilder {\n+    // tag searches\n+    private static final String[] TagsScriptStyle = new String[]{\"script\", \"style\"};\n+    public static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"};\n+    private static final String[] TagSearchList = new String[]{\"ol\", \"ul\"};\n+    private static final String[] TagSearchButton = new String[]{\"button\"};\n+    private static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"};\n+    private static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"};\n+    private static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"};\n+    private static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\",\n+            \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\",\n+            \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\",\n+            \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\",\n+            \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\",\n+            \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\",\n+            \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\",\n+            \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"};\n \n     private HtmlTreeBuilderState state; // the current state\n     private HtmlTreeBuilderState originalState; // original / marked state\n         if (startTag.isSelfClosing()) {\n             Element el = insertEmpty(startTag);\n             stack.add(el);\n+            tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data\n             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing\n             return el;\n         }\n     void insert(Token.Character characterToken) {\n         Node node;\n         // characters in script and style go in as datanodes, not text nodes\n-        if (StringUtil.in(currentElement().tagName(), \"script\", \"style\"))\n+        if (StringUtil.in(currentElement().tagName(), TagsScriptStyle))\n             node = new DataNode(characterToken.getData(), baseUri);\n         else\n             node = new TextNode(characterToken.getData(), baseUri);\n     }\n \n     boolean inScope(String[] targetNames) {\n-        return inSpecificScope(targetNames, new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"}, null);\n+        return inSpecificScope(targetNames, TagsSearchInScope, null);\n     }\n \n     boolean inScope(String targetName) {\n     }\n \n     boolean inScope(String targetName, String[] extras) {\n-        return inSpecificScope(targetName, new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"}, extras);\n+        return inSpecificScope(targetName, TagsSearchInScope , extras);\n         // todo: in mathml namespace: mi, mo, mn, ms, mtext annotation-xml\n         // todo: in svg namespace: forignOjbect, desc, title\n     }\n \n     boolean inListItemScope(String targetName) {\n-        return inScope(targetName, new String[]{\"ol\", \"ul\"});\n+        return inScope(targetName, TagSearchList);\n     }\n \n     boolean inButtonScope(String targetName) {\n-        return inScope(targetName, new String[]{\"button\"});\n+        return inScope(targetName, TagSearchButton);\n     }\n \n     boolean inTableScope(String targetName) {\n-        return inSpecificScope(targetName, new String[]{\"html\", \"table\"}, null);\n+        return inSpecificScope(targetName, TagSearchTableScope, null);\n     }\n \n     boolean inSelectScope(String targetName) {\n             String elName = el.nodeName();\n             if (elName.equals(targetName))\n                 return true;\n-            if (!StringUtil.in(elName, \"optgroup\", \"option\")) // all elements except\n+            if (!StringUtil.in(elName, TagSearchSelectScope)) // all elements except\n                 return false;\n         }\n         Validate.fail(\"Should not be reachable\");\n      */\n     void generateImpliedEndTags(String excludeTag) {\n         while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) &&\n-                StringUtil.in(currentElement().nodeName(), \"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"))\n+                StringUtil.in(currentElement().nodeName(), TagSearchEndTags))\n             pop();\n     }\n \n         // todo: mathml's mi, mo, mn\n         // todo: svg's foreigObject, desc, title\n         String name = el.nodeName();\n-        return StringUtil.in(name, \"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\",\n-                \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\",\n-                \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\",\n-                \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\",\n-                \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\",\n-                \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\",\n-                \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\",\n-                \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\");\n+        return StringUtil.in(name, TagSearchSpecial);\n     }\n \n     // active formatting elements\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n                         tb.transition(InHeadNoscript);\n                     } else if (name.equals(\"script\")) {\n                         // skips some script rules as won't execute them\n-                        tb.insert(start);\n+\n                         tb.tokeniser.transition(TokeniserState.ScriptData);\n                         tb.markInsertionMode();\n                         tb.transition(Text);\n+                        tb.insert(start);\n                     } else if (name.equals(\"head\")) {\n                         tb.error(this);\n                         return false;\n                             if (!html.hasAttr(attribute.getKey()))\n                                 html.attributes().put(attribute);\n                         }\n-                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartToHead)) {\n                         return tb.process(t, InHead);\n                     } else if (name.equals(\"body\")) {\n                         tb.error(this);\n                             tb.insert(startTag);\n                             tb.transition(InFrameset);\n                         }\n-                    } else if (StringUtil.in(name,\n-                            \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n-                            \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n-                            \"p\", \"section\", \"summary\", \"ul\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartPClosers)) {\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.process(new Token.EndTag(\"p\"));\n                         }\n                         tb.insert(startTag);\n-                    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n+                    } else if (StringUtil.in(name, Constants.Headings)) {\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.process(new Token.EndTag(\"p\"));\n                         }\n-                        if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n+                        if (StringUtil.in(tb.currentElement().nodeName(), Constants.Headings)) {\n                             tb.error(this);\n                             tb.pop();\n                         }\n                         tb.insert(startTag);\n-                    } else if (StringUtil.in(name, \"pre\", \"listing\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartPreListing)) {\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.process(new Token.EndTag(\"p\"));\n                         }\n                                 tb.process(new Token.EndTag(\"li\"));\n                                 break;\n                             }\n-                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n+                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                 break;\n                         }\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.process(new Token.EndTag(\"p\"));\n                         }\n                         tb.insert(startTag);\n-                    } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n+                    } else if (StringUtil.in(name, Constants.DdDt)) {\n                         tb.framesetOk(false);\n                         LinkedList<Element> stack = tb.getStack();\n                         for (int i = stack.size() - 1; i > 0; i--) {\n                             Element el = stack.get(i);\n-                            if (StringUtil.in(el.nodeName(), \"dd\", \"dt\")) {\n+                            if (StringUtil.in(el.nodeName(), Constants.DdDt)) {\n                                 tb.process(new Token.EndTag(el.nodeName()));\n                                 break;\n                             }\n-                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n+                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                 break;\n                         }\n                         if (tb.inButtonScope(\"p\")) {\n                         tb.reconstructFormattingElements();\n                         Element a = tb.insert(startTag);\n                         tb.pushActiveFormattingElements(a);\n-                    } else if (StringUtil.in(name,\n-                            \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n+                    } else if (StringUtil.in(name, Constants.Formatters)) {\n                         tb.reconstructFormattingElements();\n                         Element el = tb.insert(startTag);\n                         tb.pushActiveFormattingElements(el);\n                         }\n                         Element el = tb.insert(startTag);\n                         tb.pushActiveFormattingElements(el);\n-                    } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartApplets)) {\n                         tb.reconstructFormattingElements();\n                         tb.insert(startTag);\n                         tb.insertMarkerToFormattingElements();\n                         tb.insert(startTag);\n                         tb.framesetOk(false);\n                         tb.transition(InTable);\n-                    } else if (StringUtil.in(name, \"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartEmptyFormatters)) {\n                         tb.reconstructFormattingElements();\n                         tb.insertEmpty(startTag);\n                         tb.framesetOk(false);\n                         Element el = tb.insertEmpty(startTag);\n                         if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                             tb.framesetOk(false);\n-                    } else if (StringUtil.in(name, \"param\", \"source\", \"track\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartMedia)) {\n                         tb.insertEmpty(startTag);\n                     } else if (name.equals(\"hr\")) {\n                         if (tb.inButtonScope(\"p\")) {\n                         // input\n                         Attributes inputAttribs = new Attributes();\n                         for (Attribute attr : startTag.attributes) {\n-                            if (!StringUtil.in(attr.getKey(), \"name\", \"action\", \"prompt\"))\n+                            if (!StringUtil.in(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                 inputAttribs.put(attr);\n                         }\n                         inputAttribs.put(\"name\", \"isindex\");\n                             tb.transition(InSelectInTable);\n                         else\n                             tb.transition(InSelect);\n-                    } else if (StringUtil.in(\"optgroup\", \"option\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartOptions)) {\n                         if (tb.currentElement().nodeName().equals(\"option\"))\n                             tb.process(new Token.EndTag(\"option\"));\n                         tb.reconstructFormattingElements();\n                         tb.insert(startTag);\n-                    } else if (StringUtil.in(\"rp\", \"rt\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartRuby)) {\n                         if (tb.inScope(\"ruby\")) {\n                             tb.generateImpliedEndTags();\n                             if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                         // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                         tb.insert(startTag);\n                         tb.tokeniser.acknowledgeSelfClosingFlag();\n-                    } else if (StringUtil.in(name,\n-                            \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartDrop)) {\n                         tb.error(this);\n                         return false;\n                     } else {\n                         boolean notIgnored = tb.process(new Token.EndTag(\"body\"));\n                         if (notIgnored)\n                             return tb.process(endTag);\n-                    } else if (StringUtil.in(name,\n-                            \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n-                            \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n-                            \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\")) {\n-                        // todo: refactor these lookups\n+                    } else if (StringUtil.in(name, Constants.InBodyEndClosers)) {\n                         if (!tb.inScope(name)) {\n                             // nothing to close\n                             tb.error(this);\n                                 tb.error(this);\n                             tb.popStackToClose(name);\n                         }\n-                    } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n+                    } else if (StringUtil.in(name, Constants.DdDt)) {\n                         if (!tb.inScope(name)) {\n                             tb.error(this);\n                             return false;\n                                 tb.error(this);\n                             tb.popStackToClose(name);\n                         }\n-                    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n-                        if (!tb.inScope(new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"})) {\n+                    } else if (StringUtil.in(name, Constants.Headings)) {\n+                        if (!tb.inScope(Constants.Headings)) {\n                             tb.error(this);\n                             return false;\n                         } else {\n                             tb.generateImpliedEndTags(name);\n                             if (!tb.currentElement().nodeName().equals(name))\n                                 tb.error(this);\n-                            tb.popStackToClose(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\");\n+                            tb.popStackToClose(Constants.Headings);\n                         }\n                     } else if (name.equals(\"sarcasm\")) {\n                         // *sigh*\n                         return anyOtherEndTag(t, tb);\n-                    } else if (StringUtil.in(name,\n-                            \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyEndAdoptionFormatters)) {\n                         // Adoption Agency Algorithm.\n                         OUTER:\n                         for (int i = 0; i < 8; i++) {\n                             LinkedList<Element> stack = tb.getStack();\n                             // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                             // run-aways\n-                            for (int si = 0; si < stack.size() && si < 64; si++) {\n+                            final int stackSize = stack.size();\n+                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                 Element el = stack.get(si);\n                                 if (el == formatEl) {\n                                     commonAncestor = stack.get(si - 1);\n                                 lastNode = node;\n                             }\n \n-                            if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+                            if (StringUtil.in(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                 if (lastNode.parent() != null)\n                                     lastNode.remove();\n                                 tb.insertInFosterParent(lastNode);\n                                 commonAncestor.appendChild(lastNode);\n                             }\n \n-                            Element adopter = new Element(Tag.valueOf(name), tb.getBaseUri());\n+                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n+                            adopter.attributes().addAll(formatEl.attributes());\n                             Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                             for (Node childNode : childNodes) {\n                                 adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                             tb.removeFromStack(formatEl);\n                             tb.insertOnStackAfter(furthestBlock, adopter);\n                         }\n-                    } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartApplets)) {\n                         if (!tb.inScope(\"name\")) {\n                             if (!tb.inScope(name)) {\n                                 tb.error(this);\n         tb.markInsertionMode();\n         tb.transition(Text);\n     }\n+\n+    // lists of tags to search through. A little harder to read here, but causes less GC than dynamic varargs.\n+    // was contributing around 10% of parse GC load.\n+    private static final class Constants {\n+        private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};\n+        private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n+                \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n+                \"p\", \"section\", \"summary\", \"ul\"};\n+        private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};\n+        private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"};\n+        private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};\n+        private static final String[] DdDt = new String[]{\"dd\", \"dt\"};\n+        private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};\n+        private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};\n+        private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};\n+        private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"};\n+        private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"};\n+        private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};\n+        private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};\n+        private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};\n+        private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n+                \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n+                \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};\n+        private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};\n+        private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};\n+    }\n }\n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n      * @return data matched from the queue\n      */\n     public String chompBalanced(char open, char close) {\n-        StringBuilder accum = new StringBuilder();\n+        int start = -1;\n+        int end = -1;\n         int depth = 0;\n         char last = 0;\n \n             if (isEmpty()) break;\n             Character c = consume();\n             if (last == 0 || last != ESC) {\n-                if (c.equals(open))\n+                if (c.equals(open)) {\n                     depth++;\n+                    if (start == -1)\n+                        start = pos;\n+                }\n                 else if (c.equals(close))\n                     depth--;\n             }\n \n             if (depth > 0 && last != 0)\n-                accum.append(c); // don't include the outer match pair in the return\n+                end = pos; // don't include the outer match pair in the return\n             last = c;\n         } while (depth > 0);\n-        return accum.toString();\n+        return (end >= 0) ? queue.substring(start, end) : \"\";\n     }\n     \n     /**\n      @return remained of queue.\n      */\n     public String remainder() {\n-        StringBuilder accum = new StringBuilder();\n-        while (!isEmpty()) {\n-            accum.append(consume());\n-        }\n-        return accum.toString();\n+        final String remainder = queue.substring(pos, queue.length());\n+        pos = queue.length();\n+        return remainder;\n     }\n     \n     public String toString() {\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n \n                 .addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\")\n                 .addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")\n+                .addProtocols(\"cite\", \"cite\", \"http\", \"https\")\n                 .addProtocols(\"img\", \"src\", \"http\", \"https\")\n                 .addProtocols(\"q\", \"cite\", \"http\", \"https\")\n                 ;\n--- a/src/main/java/org/jsoup/select/CombiningEvaluator.java\n+++ b/src/main/java/org/jsoup/select/CombiningEvaluator.java\n  * Base combining (and, or) evaluator.\n  */\n abstract class CombiningEvaluator extends Evaluator {\n-    final List<Evaluator> evaluators;\n+    final ArrayList<Evaluator> evaluators;\n+    int num = 0;\n \n     CombiningEvaluator() {\n         super();\n     CombiningEvaluator(Collection<Evaluator> evaluators) {\n         this();\n         this.evaluators.addAll(evaluators);\n+        updateNumEvaluators();\n     }\n \n     Evaluator rightMostEvaluator() {\n-        return evaluators.size() > 0 ? evaluators.get(evaluators.size() - 1) : null;\n+        return num > 0 ? evaluators.get(num - 1) : null;\n     }\n     \n     void replaceRightMostEvaluator(Evaluator replacement) {\n-        evaluators.set(evaluators.size() - 1, replacement);\n+        evaluators.set(num - 1, replacement);\n+    }\n+\n+    void updateNumEvaluators() {\n+        // used so we don't need to bash on size() for every match test\n+        num = evaluators.size();\n     }\n \n     static final class And extends CombiningEvaluator {\n \n         @Override\n         public boolean matches(Element root, Element node) {\n-            for (int i = 0; i < evaluators.size(); i++) {\n+            for (int i = 0; i < num; i++) {\n                 Evaluator s = evaluators.get(i);\n                 if (!s.matches(root, node))\n                     return false;\n          */\n         Or(Collection<Evaluator> evaluators) {\n             super();\n-            if (evaluators.size() > 1)\n+            if (num > 1)\n                 this.evaluators.add(new And(evaluators));\n             else // 0 or 1\n                 this.evaluators.addAll(evaluators);\n+            updateNumEvaluators();\n         }\n \n         Or() {\n \n         public void add(Evaluator e) {\n             evaluators.add(e);\n+            updateNumEvaluators();\n         }\n \n         @Override\n         public boolean matches(Element root, Element node) {\n-            for (int i = 0; i < evaluators.size(); i++) {\n+            for (int i = 0; i < num; i++) {\n                 Evaluator s = evaluators.get(i);\n                 if (s.matches(root, node))\n                     return true;\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n      */\n     @Override\n \tpublic Elements clone() {\n+        Elements clone;\n+        try {\n+            clone = (Elements) super.clone();\n+        } catch (CloneNotSupportedException e) {\n+            throw new RuntimeException(e);\n+        }\n     \tList<Element> elements = new ArrayList<Element>();\n+        clone.contents = elements;\n     \t\n     \tfor(Element e : contents)\n     \t\telements.add(e.clone());\n \t\t\n     \t\n-    \treturn new Elements(elements);\n+    \treturn clone;\n \t}\n \n \t// attribute methods\n--- a/src/main/java/org/jsoup/select/NodeTraversor.java\n+++ b/src/main/java/org/jsoup/select/NodeTraversor.java\n             } else {\n                 while (node.nextSibling() == null && depth > 0) {\n                     visitor.tail(node, depth);\n-                    node = node.parent();\n+                    node = node.parentNode();\n                     depth--;\n                 }\n                 visitor.tail(node, depth);\n--- a/src/main/java/org/jsoup/select/QueryParser.java\n+++ b/src/main/java/org/jsoup/select/QueryParser.java\n  */\n class QueryParser {\n     private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};\n+    private static final String[] AttributeEvals = new String[]{\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"};\n \n     private TokenQueue tq;\n     private String query;\n \n     private void byAttribute() {\n         TokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']')); // content queue\n-        String key = cq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"); // eq, not, start, end, contain, match, (no val)\n+        String key = cq.consumeToAny(AttributeEvals); // eq, not, start, end, contain, match, (no val)\n         Validate.notEmpty(key);\n         cq.consumeWhitespace();\n \n--- a/src/test/java/org/jsoup/helper/DataUtilTest.java\n+++ b/src/test/java/org/jsoup/helper/DataUtilTest.java\n package org.jsoup.helper;\n-\n-import static org.junit.Assert.assertEquals;\n \n import org.jsoup.nodes.Document;\n import org.jsoup.parser.Parser;\n \n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n+\n+import static org.junit.Assert.assertEquals;\n \n public class DataUtilTest {\n     @Test\n         assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html;charset=\\\"UTF-8\\\"\"));\n         assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=\\\"ISO-8859-1\\\"\"));\n         assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html; charset=\\\"Unsupported\\\"\"));\n+        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html; charset='UTF-8'\"));\n     }\n-    \n+\n     @Test public void discardsSpuriousByteOrderMark() {\n         String html = \"\\uFEFF<html><head><title>One</title></head><body>Two</body></html>\";\n         ByteBuffer buffer = Charset.forName(\"UTF-8\").encode(html);\n         Document doc = DataUtil.parseByteData(buffer, \"UTF-8\", \"http://foo.com/\", Parser.htmlParser());\n         assertEquals(\"One\", doc.head().text());\n     }\n+\n+    @Test\n+    public void shouldNotThrowExceptionOnEmptyCharset() {\n+        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html; charset=\"));\n+        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html; charset=;\"));\n+    }\n+\n+    @Test\n+    public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags() {\n+        assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=ISO-8859-1, charset=1251\"));\n+    }\n+\n+    @Test\n+    public void shouldCorrectCharsetForDuplicateCharsetString() {\n+        assertEquals(\"iso-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=charset=iso-8859-1\"));\n+    }\n+\n+    @Test\n+    public void shouldReturnNullForIllegalCharsetNames() {\n+        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html; charset=$HJKDF\u00a7$/(\"));\n+    }\n+\n }\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n import org.jsoup.select.Elements;\n-import static org.junit.Assert.*;\n import org.junit.Test;\n \n-import java.io.File;\n-import java.io.IOException;\n+import java.io.*;\n import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.*;\n \n /**\n  * Integration test: parses from real-world example HTML.\n     public void testSmhBizArticle() throws IOException {\n         File in = getFile(\"/htmltests/smh-biz-article-1.html\");\n         Document doc = Jsoup.parse(in, \"UTF-8\",\n-            \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\");\n+                \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\");\n         assertEquals(\"The board\u2019s next fear: the female quota\",\n-            doc.title()); // note that the apos in the source is a literal \u2019 (8217), not escaped or '\n+                doc.title()); // note that the apos in the source is a literal \u2019 (8217), not escaped or '\n         assertEquals(\"en\", doc.select(\"html\").attr(\"xml:lang\"));\n \n         Elements articleBody = doc.select(\".articleBody > *\");\n \n         Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first();\n         assertEquals(\n-            \"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\",\n-            hs.attr(\"href\"));\n+                \"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\",\n+                hs.attr(\"href\"));\n         assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\"));\n     }\n \n         Elements results = doc.select(\"h3.r > a\");\n         assertEquals(12, results.size());\n         assertEquals(\n-            \"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\",\n-            results.get(0).attr(\"href\"));\n+                \"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\",\n+                results.get(0).attr(\"href\"));\n         assertEquals(\"http://www.apple.com/itunes/\",\n-            results.get(1).attr(\"href\"));\n+                results.get(1).attr(\"href\"));\n     }\n \n     @Test\n         assertEquals(\"Yahoo! JAPAN\", doc.title());\n         Element a = doc.select(\"a[href=t/2322m2]\").first();\n         assertEquals(\"http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2\",\n-            a.attr(\"abs:href\")); // session put into <base>\n+                a.attr(\"abs:href\")); // session put into <base>\n         assertEquals(\"\u5168\u56fd\u3001\u4eba\u6c17\u306e\u99c5\u30e9\u30f3\u30ad\u30f3\u30b0\", a.text());\n     }\n \n         // tests <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\">\n         File in = getFile(\"/htmltests/baidu-cn-home.html\");\n         Document doc = Jsoup.parse(in, null,\n-            \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n+                \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n         Element submit = doc.select(\"#su\").first();\n         assertEquals(\"\u767e\u5ea6\u4e00\u4e0b\", submit.attr(\"value\"));\n \n \n         doc.outputSettings().charset(\"ascii\");\n         assertEquals(\"<title>&#x767e;&#x5ea6;&#x4e00;&#x4e0b;&#xff0c;&#x4f60;&#x5c31;&#x77e5;&#x9053;      </title>\",\n-            doc.select(\"title\").outerHtml());\n+                doc.select(\"title\").outerHtml());\n     }\n \n     @Test\n         // tests <meta charset> when preceded by another <meta>\n         File in = getFile(\"/htmltests/baidu-variant.html\");\n         Document doc = Jsoup.parse(in, null,\n-            \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n+                \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n         // check auto-detect from meta\n         assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n         assertEquals(\"<title>\u767e\u5ea6\u4e00\u4e0b\uff0c\u4f60\u5c31\u77e5\u9053</title>\", doc.select(\"title\").outerHtml());\n     }\n \n     @Test\n+    public void testBrokenHtml5CharsetWithASingleDoubleQuote() throws IOException {\n+        InputStream in = inputStreamFrom(\"<html>\\n\" +\n+                \"<head><meta charset=UTF-8\\\"></head>\\n\" +\n+                \"<body></body>\\n\" +\n+                \"</html>\");\n+        Document doc = Jsoup.parse(in, null, \"http://example.com/\");\n+        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n+    }\n+\n+    @Test\n     public void testNytArticle() throws IOException {\n         // has tags like <nyt_text>\n         File in = getFile(\"/htmltests/nyt-article-1.html\");\n         Element headline = doc.select(\"nyt_headline[version=1.0]\").first();\n         assertEquals(\"As BP Lays Out Future, It Will Not Include Hayward\", headline.text());\n     }\n-    \n+\n     @Test\n     public void testYahooArticle() throws IOException {\n         File in = getFile(\"/htmltests/yahoo-article-1.html\");\n         try {\n             File file = new File(ParseTest.class.getResource(resourceName).toURI());\n             return file;\n-        }\n-        catch (URISyntaxException e) {\n+        } catch (URISyntaxException e) {\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private InputStream inputStreamFrom(String s) {\n+        try {\n+            return new ByteArrayInputStream(s.getBytes(\"UTF-8\"));\n+        } catch (UnsupportedEncodingException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n }\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n package org.jsoup.integration;\n \n+import org.jsoup.Connection;\n import org.jsoup.HttpStatusException;\n+import org.jsoup.Jsoup;\n import org.jsoup.UnsupportedMimeTypeException;\n+import org.jsoup.nodes.Document;\n+import org.junit.Ignore;\n import org.junit.Test;\n-import org.junit.Ignore;\n-import static org.junit.Assert.*;\n-import org.jsoup.nodes.Document;\n-import org.jsoup.Jsoup;\n-import org.jsoup.Connection;\n-\n+\n+import java.io.IOException;\n import java.net.MalformedURLException;\n import java.net.URL;\n-import java.io.IOException;\n import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n /**\n  Tests the URL connection. Not enabled by default, so tests don't require network connection.\n         String url = \"http://www.google.com\"; // no trailing / to force redir\n         Document doc = Jsoup.parse(new URL(url), 10*1000);\n         assertTrue(doc.title().contains(\"Google\"));\n+    }\n+\n+    @Test\n+    public void fetchURIWithWihtespace() throws IOException {\n+        Connection con = Jsoup.connect(\"http://try.jsoup.org/#with whitespaces\");\n+        Document doc = con.get();\n+        assertTrue(doc.title().contains(\"jsoup\"));\n     }\n \n     @Test\n         Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302-rel.pl\"); // to ./ - /tools/\n         Document doc = con.post();\n         assertTrue(doc.title().contains(\"HTML Tidy Online\"));\n+    }\n+\n+    @Test\n+    public void followsRedirectsWithWithespaces() throws IOException {\n+        Connection con = Jsoup.connect(\"http://tinyurl.com/kgofxl8\"); // to http://www.google.com/?q=white spaces\n+        Document doc = con.get();\n+        assertTrue(doc.title().contains(\"Google\"));\n+    }\n+\n+    @Test\n+    public void gracefullyHandleBrokenLocationRedirect() throws IOException {\n+        Connection con = Jsoup.connect(\"http://aag-ye.com\"); // has Location: http:/temp/AAG_New/en/index.php\n+        con.get(); // would throw exception on error\n+        assertTrue(true);\n     }\n \n     @Test\n         assertEquals(actualDocText, largeRes.parse().text().length());\n         assertEquals(actualDocText, unlimitedRes.parse().text().length());\n     }\n+\n+    @Test\n+    public void shouldWorkForCharsetInExtraAttribute() throws IOException {\n+        Connection.Response res = Jsoup.connect(\"https://www.creditmutuel.com/groupe/fr/\").execute();\n+        Document doc = res.parse(); // would throw an error if charset unsupported\n+        assertEquals(\"ISO-8859-1\", res.charset());\n+    }\n+\n+    // The following tests were added to test specific domains if they work. All code paths\n+    // which make the following test green are tested in other unit or integration tests, so the following lines\n+    // could be deleted\n+\n+    @Test\n+    public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags() throws IOException {\n+        Connection.Response res = Jsoup.connect(\"http://aamo.info/\").execute();\n+        res.parse(); // would throw an error if charset unsupported\n+        assertEquals(\"ISO-8859-1\", res.charset());\n+    }\n+\n+    @Test\n+    public void shouldParseBrokenHtml5MetaCharsetTagCorrectly() throws IOException {\n+        Connection.Response res = Jsoup.connect(\"http://9kuhkep.net\").execute();\n+        res.parse(); // would throw an error if charset unsupported\n+        assertEquals(\"UTF-8\", res.charset());\n+    }\n+\n+    @Test\n+    public void shouldEmptyMetaCharsetCorrectly() throws IOException {\n+        Connection.Response res = Jsoup.connect(\"http://aastmultimedia.com\").execute();\n+        res.parse(); // would throw an error if charset unsupported\n+        assertEquals(\"UTF-8\", res.charset());\n+    }\n+\n+    @Test\n+    public void shouldWorkForDuplicateCharsetInTag() throws IOException {\n+        Connection.Response res = Jsoup.connect(\"http://aaptsdassn.org\").execute();\n+        Document doc = res.parse(); // would throw an error if charset unsupported\n+        assertEquals(\"ISO-8859-1\", res.charset());\n+    }\n+\n }\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n import org.junit.Test;\n+import org.junit.Ignore;\n \n import static org.junit.Assert.*;\n \n                 TextUtil.stripNewlines(clone.html()));\n     }\n \n+    // Ignored since this test can take awhile to run.\n+    @Ignore\n+    @Test public void testOverflowClone() {\n+        StringBuilder builder = new StringBuilder();\n+        for (int i = 0; i < 100000; i++) {\n+            builder.insert(0, \"<i>\");\n+            builder.append(\"</i>\");\n+        }\n+\n+        Document doc = Jsoup.parse(builder.toString());\n+        doc.clone();\n+    }\n }\n--- a/src/test/java/org/jsoup/parser/CharacterReaderTest.java\n+++ b/src/test/java/org/jsoup/parser/CharacterReaderTest.java\n         assertEquals(10, r.nextIndexOf(\"Two\"));\n         assertEquals(\"something Two Three Four\", r.consumeToEnd());\n         assertEquals(-1, r.nextIndexOf(\"Two\"));\n+    }\n+\n+    @Test public void nextIndexOfUnmatched() {\n+        CharacterReader r = new CharacterReader(\"<[[one]]\");\n+        assertEquals(-1, r.nextIndexOf(\"]]>\"));\n     }\n \n     @Test public void consumeToChar() {\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         assertEquals(1, div.childNodeSize()); // no elements, one text node\n     }\n \n+    @Test public void handlesUnclosedCdataAtEOF() {\n+        // https://github.com/jhy/jsoup/issues/349 would crash, as character reader would try to seek past EOF\n+        String h = \"<![CDATA[]]\";\n+        Document doc = Jsoup.parse(h);\n+        assertEquals(1, doc.body().childNodeSize());\n+    }\n+\n     @Test public void handlesInvalidStartTags() {\n         String h = \"<div>Hello < There <&amp;></div>\"; // parse to <div {#text=Hello < There <&>}>\n         Document doc = Jsoup.parse(h);\n \n     @Test public void handlesKnownEmptyBlocks() {\n         // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.\n-        String h = \"<div id='1' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two\";\n-        Document doc = Jsoup.parse(h);\n-        assertEquals(\"<div id=\\\"1\\\"></div><div id=\\\"2\\\"><img /><img /></div><a id=\\\"3\\\"></a><i></i><foo /><foo>One</foo> <hr /> hr text <hr /> hr text two\", TextUtil.stripNewlines(doc.body().html()));\n+        String h = \"<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two\";\n+        Document doc = Jsoup.parse(h);\n+        assertEquals(\"<div id=\\\"1\\\"></div><script src=\\\"/foo\\\"></script><div id=\\\"2\\\"><img /><img /></div><a id=\\\"3\\\"></a><i></i><foo /><foo>One</foo> <hr /> hr text <hr /> hr text two\", TextUtil.stripNewlines(doc.body().html()));\n     }\n \n     @Test public void handlesSolidusAtAttributeEnd() {\n                 \"</body>\\n\" +\n                 \"</html>\";\n         assertEquals(want, doc.html());\n+    }\n+\n+    @Test public void handlesUnclosedAnchors() {\n+        String h = \"<a href='http://example.com/'>Link<p>Error link</a>\";\n+        Document doc = Jsoup.parse(h);\n+        String want = \"<a href=\\\"http://example.com/\\\">Link</a>\\n<p><a href=\\\"http://example.com/\\\">Error link</a></p>\";\n+        assertEquals(want, doc.body().html());\n     }\n \n     @Test public void reconstructFormattingElements() {\n \n         assertEquals(\"<table><tbody><tr><form></form><input type=\\\"hidden\\\" id=\\\"1\\\" /><td><input type=\\\"text\\\" id=\\\"2\\\" /></td></tr><tr></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n     }\n+\n+    @Test public void handlesInputInTable() {\n+        String h = \"<body>\\n\" +\n+                \"<input type=\\\"hidden\\\" name=\\\"a\\\" value=\\\"\\\">\\n\" +\n+                \"<table>\\n\" +\n+                \"<input type=\\\"hidden\\\" name=\\\"b\\\" value=\\\"\\\" />\\n\" +\n+                \"</table>\\n\" +\n+                \"</body>\";\n+        Document doc = Jsoup.parse(h);\n+        assertEquals(1, doc.select(\"table input\").size());\n+        assertEquals(2, doc.select(\"input\").size());\n+    }\n }", "timestamp": 1384133883, "metainfo": ""}