{"sha": "8bb732b7ccb51f4006fa7fa221762755eed949c7", "log": "Initial test suite from real world html", "commit": "\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n \n     private Attribute parseAttribute() {\n         tq.consumeWhitespace();\n-        String key = tq.consumeWord();\n+        String key = tq.consumeWord(); // todo (Must): allow \":\" in key for namespaced attr (e.g. xml:lang)\n         String value = \"\";\n         tq.consumeWhitespace();\n         if (tq.matchChomp(\"=\")) {\n--- /dev/null\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n+package org.jsoup.integration;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.select.Elements;\n+import org.junit.Test;\n+\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+\n+ Integration test: parses from real-world example HTML.\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class ParseTest {\n+\n+    @Test public void testSmhBizArticle() {\n+        String h = loadFile(\"/htmltests/smh-biz-article-1.html\");\n+        Document doc = Jsoup.parse(h, \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\");\n+        assertEquals(\"The board\u2019s next fear: the female quota\", doc.getTitle()); // note that the apos in the source is a literal \u2019 (8217), not escaped or '\n+        Elements articleBody = doc.select(\".articleBody > *\");\n+        assertEquals(17, articleBody.size());\n+        // todo: more tests!\n+        \n+    }\n+\n+    private String loadFile(String filename) {\n+        InputStream is = ParseTest.class.getResourceAsStream(filename);\n+\n+        try {\n+            char[] buffer = new char[0x10000];\n+            StringBuilder out = new StringBuilder();\n+            Reader in = new InputStreamReader(is, \"UTF-8\");\n+            int read;\n+            do {\n+                read = in.read(buffer, 0, buffer.length);\n+                if (read > 0) {\n+                    out.append(buffer, 0, read);\n+                }\n+\n+            } while (read >= 0);\n+\n+            return out.toString();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Exception loading file\", e);\n+        }\n+    }\n+}", "timestamp": 1309605102, "metainfo": ""}