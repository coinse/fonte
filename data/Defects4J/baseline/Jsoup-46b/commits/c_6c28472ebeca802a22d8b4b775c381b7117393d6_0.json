{"sha": "6c28472ebeca802a22d8b4b775c381b7117393d6", "log": "Documented Connection interface methods", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n import java.io.IOException;\n \n /**\n- * DRAFT interface to support HTTP connections.\n+ * A Connection provides a convenient interface to fetch content from the web, and parse them into Documents.\n+ * <p>\n+ * To get a new Connection, use {@link org.jsoup.Jsoup#connect(String)}. Connections contain {@link Connection.Request}\n+ * and {@link Connection.Response} objects. The request objects are reusable as prototype requests.\n+ * <p>\n+ * Request configuration can be made using either the shortcut methods in Connection (e.g. {@link #userAgent(String)}),\n+ * or by methods in the Connection.Request object directly. All request configuration must be made before the request\n+ * is executed.\n+ * <p>\n+ * The Connection interface is <b>currently in beta</b> and subject to change. Comments, suggestions, and bug reports are welcome.\n  */\n public interface Connection {\n+\n+    /**\n+     * GET and POST http methods.\n+     */\n     public enum Method {\n         GET, POST\n     }\n \n+    /**\n+     * Set the request URL to fetch. The protocol must be HTTP or HTTPS.\n+     * @param url URL to connect to\n+     * @return this Connection, for chaining\n+     */\n     public Connection url(URL url);\n \n+    /**\n+     * Set the request URL to fetch. The protocol must be HTTP or HTTPS.\n+     * @param url URL to connect to\n+     * @return this Connection, for chaining\n+     */\n     public Connection url(String url);\n \n+    /**\n+     * Set the request user-agent header.\n+     * @param userAgent user-agent to use\n+     * @return this Connection, for chaining\n+     */\n     public Connection userAgent(String userAgent);\n \n+    /**\n+     * Set the request timeouts (connect and read). If a timeout occurs, an IOException will be thrown. The default\n+     * timeout is 3 seconds (3000 millis).\n+     * @param millis number of milliseconds (thousandths of a second) before timing out connects or reads.\n+     * @return this Connection, for chaining\n+     */\n     public Connection timeout(int millis);\n \n+    /**\n+     * Set the request referrer (aka \"referer\") header.\n+     * @param referrer referrer to use\n+     * @return this Connection, for chaining\n+     */\n     public Connection referrer(String referrer);\n \n+    /**\n+     * Set the request method to use, GET or POST. Default is GET.\n+     * @param method HTTP request method\n+     * @return this Connection, for chaining\n+     */\n     public Connection method(Method method);\n \n+    /**\n+     * Add a request data parameter. Request parameters are sent in the request query string for GETs, and in the request\n+     * body for POSTs. A request may have multiple values of the same name.\n+     * @param key data key\n+     * @param value data value\n+     * @return this Connection, for chaining\n+     */\n     public Connection data(String key, String value);\n \n+    /**\n+     * Adds all of the supplied data to the request data parameters\n+     * @param data map of data parameters\n+     * @return this Connection, for chaining\n+     */\n     public Connection data(Map<String, String> data);\n \n+    /**\n+     * Add a number of request data parameters. Multiple parameters may be set at once, e.g.:\n+     * <code>.data(\"name\", \"jsoup\", \"language\", \"Java\", \"language\", \"English\");</code> creates a query string like:\n+     * <code>?name=jsoup&language=Java&language=English</code>\n+     * @param keyvals a set of key value pairs.\n+     * @return this Connection, for chaining\n+     */\n     public Connection data(String... keyvals);\n \n+    /**\n+     * Set a request header.\n+     * @param name header name\n+     * @param value header value\n+     * @return this Connection, for chaining\n+     * @see org.jsoup.Connection.Request#headers()\n+     */\n     public Connection header(String name, String value);\n \n+    /**\n+     * Set a cookie to be sent in the request\n+     * @param name name of cookie\n+     * @param value value of cookie\n+     * @return this Connection, for chaining\n+     */\n     public Connection cookie(String name, String value);\n \n+    /**\n+     * Execute the request as a GET, and parse the result.\n+     * @return parsed Document\n+     * @throws IOException on error\n+     */\n     public Document get() throws IOException;\n \n+    /**\n+     * Execute the request as a POST, and parse the result.\n+     * @return parsed Document\n+     * @throws IOException on error\n+     */\n     public Document post() throws IOException;\n \n+    /**\n+     * Execute the request.\n+     * @return a response object\n+     * @throws IOException on error\n+     */\n     public Response execute() throws IOException;\n \n+    /**\n+     * Get the request object associatated with this connection\n+     * @return request\n+     */\n     public Request request();\n \n+    /**\n+     * Set the connection's request\n+     * @param request new request object\n+     * @return this Connection, for chaining\n+     */\n     public Connection request(Request request);\n \n+    /**\n+     * Get the response, once the request has been executed\n+     * @return response\n+     */\n     public Response response();\n \n+    /**\n+     * Set the conenction's response\n+     * @param response new response\n+     * @return this Connection, for chaining\n+     */\n     public Connection response(Response response);\n \n \n-    interface Base<T extends Base> { // todo: better name for request / response base.\n-\n+    /**\n+     * Common methods for Requests and Responses\n+     * @param <T> Type of Base, either Request or Response\n+     */\n+    interface Base<T extends Base> {\n+\n+        /**\n+         * Get the URL\n+         * @return URL\n+         */\n         public URL url();\n \n+        /**\n+         * Set the URL\n+         * @param url new URL\n+         * @return this, for chaining\n+         */\n         public T url(URL url);\n \n+        /**\n+         * Get the request method\n+         * @return method\n+         */\n         public Method method();\n \n+        /**\n+         * Set the request method\n+         * @param method new method\n+         * @return this, for chaining\n+         */\n         public T method(Method method);\n \n+        /**\n+         * Get the value of a header. This is a simplified header model, where a header may only have one value.\n+         * @param name name of header\n+         * @return value of header, or null if not set.\n+         * @see #hasHeader(String)\n+         * @see #cookie(String)\n+         */\n         public String header(String name);\n \n+        /**\n+         * Set a header.\n+         * @param name Name of header\n+         * @param value Value of header\n+         * @return this, for chaining\n+         */\n         public T header(String name, String value);\n \n+        /**\n+         * Check if a header is present\n+         * @param name name of header\n+         * @return if the header is present in this request/response\n+         */\n         public boolean hasHeader(String name);\n \n+        /**\n+         * Remove a header by name\n+         * @param name name of header to remove\n+         * @return this, for chianing\n+         */\n         public T removeHeader(String name);\n \n+        /**\n+         * Retrieve all of the request/response headers as a map\n+         * @return headers\n+         */\n         public Map<String, String> headers();\n \n+        /**\n+         * Get a cookie value by name from this request/response.\n+         * <p>\n+         * Response objects have a simplified cookie model. Each cookie set in the response is added to the response\n+         * object's cookie key=value map. The cookie's path, domain, and expiry date are ignored.\n+         * @param name name of cookie to retrieve.\n+         * @return value of cookie, or null if not set\n+         */\n         public String cookie(String name);\n \n+        /**\n+         * Set a cookie in this request/response.\n+         * @param name name of cookie\n+         * @param value value of cookie\n+         * @return this, for chianing\n+         */\n         public T cookie(String name, String value);\n \n+        /**\n+         * Check if a cookie is present\n+         * @param name name of cookie\n+         * @return if the cookie is present in this request/response\n+         */\n         public boolean hasCookie(String name);\n \n+        /**\n+         * Remove a cookie by name\n+         * @param name name of cookie to remove\n+         * @return this, for chianing\n+         */\n         public T removeCookie(String name);\n \n+        /**\n+         * Retrieve all of the request/response cookies as a map\n+         * @return cookies\n+         */\n         public Map<String, String> cookies();\n \n     }\n \n+    /**\n+     * Represents a HTTP request.\n+     */\n     public interface Request extends Base<Request> {\n+\n+        /**\n+         * Get the request timeout, in milliseconds.\n+         * @return the timeout in milliseconds.\n+         */\n         public int timeout();\n \n+        /**\n+         * Update the request timeout.\n+         * @param millis timeout, in milliseconds\n+         * @return this Request, for chaining\n+         */\n         public Request timeout(int millis);\n \n+        /**\n+         * Add a data parameter to the request\n+         * @param keyval data to add.\n+         * @return this Request, for chaining\n+         */\n         public Request data(KeyVal keyval);\n \n+        /**\n+         * Get all of the request's data parameters\n+         * @return collection of keyvals\n+         */\n         public Collection<KeyVal> data();\n \n     }\n \n+    /**\n+     * Represents a HTTP response.\n+     */\n     public interface Response extends Base<Response> {\n+\n+        /**\n+         * Get the status code of the response.\n+         * @return status code\n+         */\n         public int statusCode();\n \n+        /**\n+         * Get the status message of the response.\n+         * @return status message\n+         */\n         public String statusMessage();\n \n+        /**\n+         * Get the character set name of the response.\n+         * @return character set name\n+         */\n         public String charset();\n \n+        /**\n+         * Parse the body of the response as a Document.\n+         * @return a parsed Document\n+         */\n         public Document parse();\n \n+        /**\n+         * Get the body of the response as a plain string.\n+         * @return body\n+         */\n         public String body();\n \n+        /**\n+         * Get the body of the response as an array of bytes.\n+         * @return body bytes\n+         */\n         public byte[] bodyAsBytes();\n     }\n \n+    /**\n+     * A Key Value tuple.\n+     */\n     public interface KeyVal {\n+\n+        /**\n+         * Update the key of a keyval\n+         * @param key new key\n+         * @return this KeyVal, for chaining\n+         */\n         public KeyVal key(String key);\n+\n+        /**\n+         * Get the key of a keyval\n+         * @return the key\n+         */\n         public String key();\n \n+        /**\n+         * Update the value of a keyval\n+         * @param value the new value\n+         * @return this KeyVal, for chaining\n+         */\n         public KeyVal value(String value);\n+\n+        /**\n+         * Get the value of a keyval\n+         * @return the value\n+         */\n         public String value();\n     }\n }", "timestamp": 1309605119, "metainfo": ""}