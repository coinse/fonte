{"sha": "f5b1a2ab1294970be9b4fc6abefe38ac7e5039be", "log": "Implemented Element.getElementById", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n     public void put(String key, String value) {\n         Validate.notEmpty(key);\n         Validate.notNull(value);\n-        attributes.put(key.toLowerCase(), value);\n+        attributes.put(key.toLowerCase().trim(), value.trim());\n     }\n \n     public void put(Attribute attribute) {\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n     private String title;\n \n     public Document() {\n-        super(new StartTag(Tag.valueOf(\"html\"), null));\n+        super(new StartTag(Tag.valueOf(\"html\")));\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n \n     public String id() {\n-        return attr(\"id\");\n+        String id = attr(\"id\");\n+        return id == null ? \"\" : id;\n     }\n \n     @Override\n         return null;\n     }\n \n+    // DOM type methods\n+\n+    /**\n+     * Finds elements, including and recursively under this element, with the specified tag name.\n+     * @param tagName The tag name to search for (case insensitively).\n+     * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.\n+     */\n     public List<Element> getElementsByTag(String tagName) {\n         Validate.notEmpty(tagName);\n         tagName = tagName.toLowerCase().trim();\n \n         List<Element> elements = new ArrayList<Element>();\n-        if (tag.getName().equals(tagName))\n+        if (this.tag.getName().equals(tagName))\n             elements.add(this);\n         for (Element child : elementChildren) {\n             elements.addAll(child.getElementsByTag(tagName));\n         }\n-        return elements;\n+        return Collections.unmodifiableList(elements);\n+    }\n+\n+    /**\n+     * Find an element by ID, including or under this element.\n+     * <p>\n+     * Note that this finds the first matching ID, starting with this element. If you search down from a different\n+     * starting point, it is possible to find a different element by ID. For unique element by ID withing a Document,\n+     * use Document.getElementById.\n+     * @param id The ID to search for.\n+     * @return The first matching element by ID, starting with this element, or null if none found.\n+     */\n+    public Element getElementById(String id) {\n+        Validate.notEmpty(id);\n+        \n+        if (this.id().equals(id))\n+            return this;\n+        for (Element child : elementChildren) {\n+            Element byId = child.getElementById(id);\n+            if (byId != null)\n+                return byId;\n+        }\n+        return null;\n     }\n \n \n--- a/src/main/java/org/jsoup/parser/StartTag.java\n+++ b/src/main/java/org/jsoup/parser/StartTag.java\n package org.jsoup.parser;\n \n+import org.apache.commons.lang.Validate;\n import org.jsoup.nodes.Attributes;\n \n /**\n     Attributes attributes;\n \n     public StartTag(Tag tag, Attributes attributes) {\n+        Validate.notNull(attributes);\n         this.tag = tag;\n         this.attributes = attributes;\n+    }\n+\n+    public StartTag(Tag tag) {\n+        this(tag, new Attributes());\n     }\n \n     public Tag getTag() {\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n  * @author Jonathan Hedley\n  */\n public class ElementTest {\n-    @Test\n-    public void getElementsByTagName() {\n-        Document doc = JSoup.parse(\"<div id=div1><p>Hello</p><p>Another</p><div id=div2><img src=foo.png></div></div>\");\n+    private String reference = \"<div id=div1><p>Hello</p><p>Another</p><div id=div2><img src=foo.png></div></div>\";\n+\n+    @Test public void getElementsByTagName() {\n+        Document doc = JSoup.parse(reference);\n         List<Element> divs = doc.getElementsByTag(\"div\");\n         assertEquals(2, divs.size());\n         assertEquals(\"div1\", divs.get(0).id());\n         assertEquals(2, ps.size());\n         assertEquals(\"Hello\", ((TextNode) ps.get(0).childNode(0)).getWholeText());\n         assertEquals(\"Another\", ((TextNode) ps.get(1).childNode(0)).getWholeText());\n+        List<Element> ps2 = doc.getElementsByTag(\"P\");\n+        assertEquals(ps, ps2);\n \n         List<Element> imgs = doc.getElementsByTag(\"img\");\n         assertEquals(\"foo.png\", imgs.get(0).attr(\"src\"));\n         assertEquals(0, empty.size());\n     }\n \n+    @Test public void testGetElementById() {\n+        Document doc = JSoup.parse(reference);\n+        Element div = doc.getElementById(\"div1\");\n+        assertEquals(\"div1\", div.id());\n+        assertNull(doc.getElementById(\"none\"));\n+\n+        Document doc2 = JSoup.parse(\"<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>\");\n+        Element div2 = doc2.getElementById(\"2\");\n+        assertEquals(\"div\", div2.tagName()); // not the span\n+        Element span = div2.child(0).getElementById(\"2\"); // called from <p> context should be span\n+        assertEquals(\"span\", span.tagName());\n+    }\n+\n }", "timestamp": 1309605100, "metainfo": ""}