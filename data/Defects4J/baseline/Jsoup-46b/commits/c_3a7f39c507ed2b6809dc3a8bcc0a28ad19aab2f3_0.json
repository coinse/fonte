{"sha": "3a7f39c507ed2b6809dc3a8bcc0a28ad19aab2f3", "log": "Fixed an issue where unexpected elements in a badly nested table could be moved to the wrong location in the document.  Fixes #552 Closes #591", "commit": "\n--- a/src/main/java/org/jsoup/parser/TreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/TreeBuilder.java\n     protected abstract boolean process(Token token);\n \n     protected boolean processStartTag(String name) {\n+        if (currentToken == start) { // don't recycle an in-use token\n+            return process(new Token.StartTag().name(name));\n+        }\n         return process(start.reset().name(name));\n     }\n \n     public boolean processStartTag(String name, Attributes attrs) {\n+        if (currentToken == start) { // don't recycle an in-use token\n+            return process(new Token.StartTag().nameAttr(name, attrs));\n+        }\n         start.reset();\n         start.nameAttr(name, attrs);\n         return process(start);\n     }\n \n     protected boolean processEndTag(String name) {\n+        if (currentToken == end) { // don't recycle an in-use token\n+            return process(new Token.EndTag().name(name));\n+        }\n         return process(end.reset().name(name));\n     }\n \n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n import org.jsoup.helper.StringUtil;\n+import org.jsoup.integration.ParseTest;\n import org.jsoup.nodes.*;\n import org.jsoup.select.Elements;\n import org.junit.Test;\n \n+import java.io.File;\n+import java.io.IOException;\n import java.util.List;\n \n import static org.junit.Assert.assertEquals;\n         assertEquals(50000, doc.body().childNodeSize());\n         assertTrue(System.currentTimeMillis() - start < 1000);\n     }\n+\n+    @Test\n+    public void testInvalidTableContents() throws IOException {\n+        File in = ParseTest.getFile(\"/htmltests/table-invalid-elements.html\");\n+        Document doc = Jsoup.parse(in, \"UTF-8\");\n+        doc.outputSettings().prettyPrint(true);\n+        String rendered = doc.toString();\n+        int endOfEmail = rendered.indexOf(\"Comment\");\n+        int guarantee = rendered.indexOf(\"Why am I here?\");\n+        assertTrue(\"Comment not found\", endOfEmail > -1);\n+        assertTrue(\"Search text not found\", guarantee > -1);\n+        assertTrue(\"Search text did not come after comment\", guarantee > endOfEmail);\n+    }\n+\n+    @Test public void testNormalisesIsIndex() {\n+        Document doc = Jsoup.parse(\"<body><isindex action='/submit'></body>\");\n+        String html = doc.outerHtml();\n+        assertEquals(\"<form action=\\\"/submit\\\"> <hr> <label>This is a searchable index. Enter search keywords: <input name=\\\"isindex\\\"></label> <hr> </form>\",\n+                StringUtil.normaliseWhitespace(doc.body().html()));\n+    }\n }", "timestamp": 1436133533, "metainfo": ""}