{"sha": "28567508ea50e15f63807277d1a72ec9060eb5ad", "log": "Corrected Javadocs to indicate that NumberFormatException gets thrown instead of ClassCastException while attempting to convert a JsonPrimitive to a number.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n    * convenience method to get this element as a {@link Boolean}.\n    *\n    * @return get this element as a {@link Boolean}.\n-   * @throws ClassCastException if the value contained is not a valid boolean value.\n    */\n   @Override\n   Boolean getAsBooleanWrapper() {\n    * convenience method to get this element as a boolean value.\n    *\n    * @return get this element as a primitive boolean value.\n-   * @throws ClassCastException if the value contained is not a valid boolean value.\n    */\n   @Override\n   public boolean getAsBoolean() {\n    * convenience method to get this element as a Number.\n    *\n    * @return get this element as a Number.\n-   * @throws ClassCastException if the value contained is not a valid Number.\n+   * @throws NumberFormatException if the value contained is not a valid Number.\n    */\n   @Override\n   public Number getAsNumber() {\n    * convenience method to get this element as a String.\n    *\n    * @return get this element as a String.\n-   * @throws ClassCastException if the value contained is not a valid String.\n    */\n   @Override\n   public String getAsString() {\n    * convenience method to get this element as a primitive double.\n    *\n    * @return get this element as a primitive double.\n-   * @throws ClassCastException if the value contained is not a valid double.\n+   * @throws NumberFormatException if the value contained is not a valid double.\n    */\n   @Override\n   public double getAsDouble() {\n    * convenience method to get this element as a float.\n    *\n    * @return get this element as a float.\n-   * @throws ClassCastException if the value contained is not a valid float.\n+   * @throws NumberFormatException if the value contained is not a valid float.\n    */\n   @Override\n   public float getAsFloat() {\n    * convenience method to get this element as a primitive long.\n    *\n    * @return get this element as a primitive long.\n-   * @throws ClassCastException if the value contained is not a valid long.\n+   * @throws NumberFormatException if the value contained is not a valid long.\n    */\n   @Override\n   public long getAsLong() {\n    * convenience method to get this element as a primitive short.\n    *\n    * @return get this element as a primitive short.\n-   * @throws ClassCastException if the value contained is not a valid short value.\n+   * @throws NumberFormatException if the value contained is not a valid short value.\n    */\n   @Override\n   public short getAsShort() {\n   * convenience method to get this element as a primitive integer.\n   *\n   * @return get this element as a primitive integer.\n-  * @throws ClassCastException if the value contained is not a valid integer.\n+  * @throws NumberFormatException if the value contained is not a valid integer.\n   */\n   @Override\n   public int getAsInt() {", "timestamp": 1299802489, "metainfo": ""}