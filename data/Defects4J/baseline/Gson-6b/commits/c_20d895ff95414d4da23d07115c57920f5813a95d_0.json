{"sha": "20d895ff95414d4da23d07115c57920f5813a95d", "log": "Fix primitive wrapping and casting.  Issue: 235", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n    */\n   @SuppressWarnings(\"unchecked\")\n   public <T> T fromJson(String json, Class<T> classOfT) throws JsonParseException {\n-    T target = (T) fromJson(json, (Type) classOfT);\n-    return target;\n+    Class<T> wrapped = Primitives.wrap(classOfT);\n+    Object object = fromJson(json, (Type) wrapped);\n+    return wrapped.cast(object);\n   }\n \n   /**\n    * @since 1.2\n    */\n   public <T> T fromJson(Reader json, Class<T> classOfT) throws JsonParseException {\n-    T target = classOfT.cast(fromJson(new JsonReader(json), classOfT));\n-    return target;\n+    Class<T> wrapped = Primitives.wrap(classOfT);\n+    Object object = fromJson(new JsonReader(json), wrapped);\n+    return wrapped.cast(object);\n   }\n \n   /**\n    * @since 1.3\n    */\n   public <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonParseException {\n-    T target = classOfT.cast(fromJson(json, (Type) classOfT));\n-    return target;\n+    Class<T> wrapped = Primitives.wrap(classOfT);\n+    Object object = fromJson(json, (Type) wrapped);\n+    return wrapped.cast(object);\n   }\n \n   /**\n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n \n package com.google.gson.functional;\n \n+import java.io.StringReader;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n+import com.google.gson.*;\n import junit.framework.TestCase;\n \n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n-import com.google.gson.JsonParseException;\n-import com.google.gson.LongSerializationPolicy;\n import com.google.gson.common.TestTypes.CrazyLongTypeAdapter;\n \n /**\n   private static class ClassWithIntegerField {\n     Integer i;\n   }\n+  \n+  public void testPrimitiveClassLiteral() {\n+    assertEquals(1, gson.fromJson(\"1\", int.class).intValue());\n+    assertEquals(1, gson.fromJson(new StringReader(\"1\"), int.class).intValue());\n+    assertEquals(1, gson.fromJson(new JsonPrimitive(1), int.class).intValue());\n+  }\n }", "timestamp": 1288650990, "metainfo": ""}