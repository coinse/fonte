{"sha": "6d3e0e92a5695f47628d2f7d3fcff207c22c1825", "log": "Added a cache for no-args constructors to avoid expensive reflection everytime an object needs to be instantiated.", "commit": "\n--- a/gson/src/main/java/com/google/gson/MappedObjectConstructor.java\n+++ b/gson/src/main/java/com/google/gson/MappedObjectConstructor.java\n \n package com.google.gson;\n \n+import com.google.gson.internal.LruCache;\n import com.google.gson.internal.Types;\n import com.google.gson.internal.UnsafeAllocator;\n \n final class MappedObjectConstructor implements ObjectConstructor {\n   private static final UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n \n+  private static final LruCache<Class<?>, Constructor<?>> noArgsConstructorsCache =\n+      new LruCache<Class<?>, Constructor<?>>(500);\n   private final ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreatorMap;\n+  /**\n+   * We need a special null value to indicate that the class does not have a no-args constructor.\n+   * This helps avoid using reflection over and over again for such classes. For convenience, we\n+   * use the no-args constructor of this class itself since this class would never be\n+   * deserialized using Gson.\n+   */\n+  private static final Constructor<MappedObjectConstructor> NULL_VALUE =\n+    getNoArgsConstructorUsingReflection(MappedObjectConstructor.class);\n+  \n+  @SuppressWarnings(\"unused\")\n+  private MappedObjectConstructor() {\n+    this(null);\n+  }\n \n   public MappedObjectConstructor(\n       ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators) {\n   }\n \n   private <T> Constructor<T> getNoArgsConstructor(Class<T> clazz) {\n+    @SuppressWarnings(\"unchecked\")\n+    Constructor<T> constructor = (Constructor<T>)noArgsConstructorsCache.getElement(clazz);\n+    if (constructor == NULL_VALUE) {\n+      return null;\n+    }\n+    if (constructor == null) {\n+      constructor = getNoArgsConstructorUsingReflection(clazz);\n+      noArgsConstructorsCache.addElement(clazz, constructor);\n+    }\n+    return constructor == NULL_VALUE ? null : constructor;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static <T> Constructor<T> getNoArgsConstructorUsingReflection(Class<T> clazz) {\n     try {\n-      Constructor<T> declaredConstructor = clazz.getDeclaredConstructor();\n-      declaredConstructor.setAccessible(true);\n-      return declaredConstructor;\n+      Constructor<T> constructor = clazz.getDeclaredConstructor();\n+      constructor.setAccessible(true);\n+      return constructor;\n     } catch (Exception e) {\n-      return null;\n+      return (Constructor<T>) NULL_VALUE;\n     }\n   }\n ", "timestamp": 1300905099, "metainfo": ""}