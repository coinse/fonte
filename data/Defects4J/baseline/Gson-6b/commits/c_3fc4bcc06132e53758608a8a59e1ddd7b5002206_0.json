{"sha": "3fc4bcc06132e53758608a8a59e1ddd7b5002206", "log": "Minor test fixes.  Explicitly fail test if the expected exception was not thrown.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/ArrayTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ArrayTest.java\n import java.math.BigDecimal;\n import java.util.ArrayList;\n import java.util.Collection;\n-\n /**\n  * Functional tests for Json serialization and deserialization of arrays.\n  *\n     try {\n       gson.fromJson(json, int[].class);\n       fail(\"Gson should not deserialize array elements with missing ,\");\n-    } catch (JsonParseException expected) {      \n+    } catch (JsonParseException expected) {\n     }\n   }\n \n \n     actualObject = gson.fromJson(\"[ ]\", int[].class);\n     assertTrue(actualObject.length == 0);\n-}\n+  }\n \n   public void testNullsInArraySerialization() {\n     String[] array = {\"foo\", null, \"bar\"};\n       assertEquals(expected[i], target[i]);\n     }\n   }\n-  \n-  public void testSingleNullInArraySerialization() {    \n+\n+  public void testSingleNullInArraySerialization() {\n     BagOfPrimitives[] array = new BagOfPrimitives[1];\n     array[0] = null;\n     String json = gson.toJson(array);\n     assertEquals(\"[null]\", json);\n   }\n-  \n+\n   public void testSingleNullInArrayDeserialization() {\n     BagOfPrimitives[] array = gson.fromJson(\"[null]\", BagOfPrimitives[].class);\n     assertNull(array[0]);\n   }\n-  \n+\n   public void testNullsInArrayWithSerializeNullPropertySetSerialization() {\n     gson = new GsonBuilder().serializeNulls().create();\n     String[] array = {\"foo\", null, \"bar\"};\n     String output = gson.toJson(s);\n     assertEquals(\"[\\\"hello\\\"]\", output);\n   }\n-  \n+\n   public void testSingleStringArrayDeserialization() throws Exception {\n     String json = \"[\\\"hello\\\"]\";\n     String[] arrayType = gson.fromJson(json, String[].class);\n     assertEquals(1, arrayType.length);\n     assertEquals(\"hello\", arrayType[0]);\n-    \n+\n     String type = gson.fromJson(json, String.class);\n     assertEquals(\"hello\", type);\n   }\n     MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0]));\n     MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0]));\n   }\n-  \n+\n   public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception {\n     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter();\n     gson = new GsonBuilder()\n     String serializedValue = gson.toJson(value);\n     String expected = \"[\" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + \"]\";\n     assertEquals(expected, serializedValue);\n-    \n+\n     long[] deserializedValue = gson.fromJson(serializedValue, long[].class);\n     assertEquals(1, deserializedValue.length);\n     assertEquals(value[0], deserializedValue[0]);\n   }\n-  \n+\n   public void testArrayOfPrimitivesAsObjectsSerialization() throws Exception {\n     Object[] objs = new Object[]{1, \"abc\", 0.3f, 5L};\n     String json = gson.toJson(objs);\n     String json = \"[1,'abc',{a:1},5]\";\n     try {\n       gson.fromJson(json, Object[].class);\n+      fail(\"This is crazy....how did we deserialize it!!!\");\n     } catch (JsonParseException expected) {\n     }\n   }\n-  \n+\n   public void testArrayWithoutTypeInfoDeserialization() throws Exception {\n     String json = \"[1,'abc',[1,2],5]\";\n     try {\n       gson.fromJson(json, Object[].class);\n+      fail(\"This is crazy....how did we deserialize it!!!\");\n     } catch (JsonParseException expected) {\n     }\n   }\n-  \n+\n   public void testObjectArrayWithNonPrimitivesSerialization() throws Exception {\n     ClassWithObjects classWithObjects = new ClassWithObjects();\n     BagOfPrimitives bagOfPrimitives = new BagOfPrimitives();\n \n     Object[] objects = new Object[] { classWithObjects, bagOfPrimitives };\n     String json = gson.toJson(objects);\n-    \n+\n     assertTrue(json.contains(classWithObjectsJson));\n     assertTrue(json.contains(bagOfPrimitivesJson));\n   }", "timestamp": 1282360757, "metainfo": ""}