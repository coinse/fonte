{"sha": "bcaf56079c25d1bef89394ed1b2e1bdd5aaa392f", "log": "Register runtime type adapters using the proper factory-specific APIs.", "commit": "\n--- a/extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactoryTest.java\n+++ b/extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactoryTest.java\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonParseException;\n+import com.google.gson.TypeAdapterFactory;\n import junit.framework.TestCase;\n \n public final class RuntimeTypeAdapterFactoryTest extends TestCase {\n         BillingInstrument.class)\n         .registerSubtype(CreditCard.class);\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(BillingInstrument.class, rta)\n+        .registerTypeAdapterFactory(rta)\n         .create();\n \n     CreditCard original = new CreditCard(\"Jesse\", 234);\n   }\n \n   public void testRuntimeTypeIsBaseType() {\n-    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(\n+    TypeAdapterFactory rta = RuntimeTypeAdapterFactory.of(\n         BillingInstrument.class)\n         .registerSubtype(BillingInstrument.class);\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(BillingInstrument.class, rta)\n+        .registerTypeAdapterFactory(rta)\n         .create();\n \n     BillingInstrument original = new BillingInstrument(\"Jesse\");\n   }\n \n   public void testDeserializeMissingTypeField() {\n-    Object billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)\n+    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)\n         .registerSubtype(CreditCard.class);\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(BillingInstrument.class, billingAdapter)\n+        .registerTypeAdapterFactory(billingAdapter)\n         .create();\n     try {\n       gson.fromJson(\"{ownerName:'Jesse'}\", BillingInstrument.class);\n   }\n \n   public void testDeserializeMissingSubtype() {\n-    Object billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)\n+    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)\n         .registerSubtype(BankTransfer.class);\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(BillingInstrument.class, billingAdapter)\n+        .registerTypeAdapterFactory(billingAdapter)\n         .create();\n     try {\n       gson.fromJson(\"{type:'CreditCard',ownerName:'Jesse'}\", BillingInstrument.class);\n   }\n \n   public void testSerializeMissingSubtype() {\n-    Object billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)\n+    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)\n         .registerSubtype(BankTransfer.class);\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(BillingInstrument.class, billingAdapter)\n+        .registerTypeAdapterFactory(billingAdapter)\n         .create();\n     try {\n       gson.toJson(new CreditCard(\"Jesse\", 456), BillingInstrument.class);\n   }\n \n   public void testSerializeCollidingTypeFieldName() {\n-    Object billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class, \"cvv\")\n+    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class, \"cvv\")\n         .registerSubtype(CreditCard.class);\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(BillingInstrument.class, billingAdapter)\n+        .registerTypeAdapterFactory(billingAdapter)\n         .create();\n     try {\n       gson.toJson(new CreditCard(\"Jesse\", 456), BillingInstrument.class);", "timestamp": 1325228156, "metainfo": ""}