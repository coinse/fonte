{"sha": "15e7819e9ae424a33aa747030320a268f62b1d28", "log": "Fix testStringEndingInSlash by fixing nextNonWhitespace to always return the character at buffer[pos-1].", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n     return result;\n   }\n \n+  /**\n+   * Returns the next character in the stream that is neither whitespace nor a\n+   * part of a comment. When this returns, the returned character is always at\n+   * {@code buffer[pos-1]}; this means the caller can always push back the\n+   * returned character by decrementing {@code pos}.\n+   */\n   private int nextNonWhitespace(boolean throwOnEof) throws IOException {\n     /*\n      * This code uses ugly local variables 'p' and 'l' representing the 'pos'\n \n       case '/':\n         pos = p;\n-        if (p == l && !fillBuffer(1)) {\n-          return c;\n+        if (p == l) {\n+          pos--; // push back '/' so it's still in the buffer when this method returns\n+          boolean charsLoaded = fillBuffer(2);\n+          pos++; // consume the '/' again\n+          if (!charsLoaded) {\n+            return c;\n+          }\n         }\n \n         checkLenient();\n--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n   public void testStringEndingInSlash() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\"/\"));\n     reader.setLenient(true);\n-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n+    try {\n+      reader.peek();\n+      fail();\n+    } catch (MalformedJsonException expected) {\n+    }\n+  }\n+\n+  public void testDocumentWithCommentEndingInSlash() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"/* foo *//\"));\n+    reader.setLenient(true);\n+    try {\n+      reader.peek();\n+      fail();\n+    } catch (MalformedJsonException expected) {\n+    }\n   }\n \n   public void testStringWithLeadingSlash() throws IOException {", "timestamp": 1329432593, "metainfo": ""}