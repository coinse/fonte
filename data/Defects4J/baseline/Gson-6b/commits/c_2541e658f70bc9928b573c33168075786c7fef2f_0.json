{"sha": "2541e658f70bc9928b573c33168075786c7fef2f", "log": "Fixed com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization by changing Gson behavior incompatibly (but more consistent). GSON 1.x applies different rules for versioning for classes vs fields. So, if you deserialize a    JSON into a field that is supposed to be skipped, the field is set to null (or default value).     However, if you deserialize it to a top-level class, a default instance is returned. GSON 2.x returns null for the top-level class.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/VersioningTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/VersioningTest.java\n   public void testIgnoreLaterVersionClassDeserialization() {\n     Gson gson = builder.setVersion(1.0).create();\n     String json = \"{\\\"a\\\":3,\\\"b\\\":4,\\\"c\\\":5,\\\"d\\\":6}\";\n-    Version1_2 version1_2 = gson.fromJson(json, Version1_2.class);\n-    // Since the class is versioned to be after 1.0, all fields should get set to\n-    // their default values.\n-    assertEquals(A, version1_2.a);\n-    assertEquals(B, version1_2.b);\n-    assertEquals(C, version1_2.c);\n-    assertEquals(D, version1_2.d);\n+    Version1_2 version1_2  = gson.fromJson(json, Version1_2.class);\n+    // Since the class is versioned to be after 1.0, we expect null\n+    // This is the new behavior in Gson 2.0\n+    assertNull(version1_2);\n   }\n \n   public void testVersionedGsonWithUnversionedClassesSerialization() {", "timestamp": 1317334537, "metainfo": ""}