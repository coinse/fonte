{"sha": "ef7bd4c999c6d4d3d418138a03bd98e2efe4ca63", "log": "Don't document an API that we don't offer!", "commit": "\n--- a/gson/src/main/java/com/google/gson/reflect/TypeToken.java\n+++ b/gson/src/main/java/com/google/gson/reflect/TypeToken.java\n  * Such type literals must be constructed programatically, either by {@link\n  * Method#getGenericReturnType extracting types from members} or by using the\n  * {@link Types} factory class.\n- *\n- * <p>Along with modeling generic types, this class can resolve type parameters.\n- * For example, to figure out what type {@code keySet()} returns on a {@code\n- * Map<Integer, String>}, use this code:<pre>   {@code\n- *\n- *   TypeLiteral<Map<Integer, String>> mapType\n- *       = new TypeToken<Map<Integer, String>>() {};\n- *   TypeToken<?> keySetType\n- *       = mapType.getReturnType(Map.class.getMethod(\"keySet\"));\n- *   System.out.println(keySetType); // prints \"Set<Integer>\"}</pre>\n  *\n  * @author Bob Lee\n  * @author Sven Mawson", "timestamp": 1300139414, "metainfo": ""}