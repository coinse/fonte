{"sha": "e340801d258e18f733620b0fd03d65fffb8df6c3", "log": "Moved enum-related tests under EnumTest class.", "commit": "\n--- a/gson/src/test/java/com/google/gson/common/TestTypes.java\n+++ b/gson/src/test/java/com/google/gson/common/TestTypes.java\n     }\n   }\n \n-  public static enum MyEnum {\n-    VALUE1, VALUE2;\n-\n-    public String getExpectedJson() {\n-      return \"\\\"\" + toString() + \"\\\"\";\n-    }\n-  }\n-\n   public static class ClassOverridingEquals {\n     public ClassOverridingEquals ref;\n \n--- a/gson/src/test/java/com/google/gson/functional/ArrayTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ArrayTest.java\n import com.google.gson.GsonBuilder;\n import com.google.gson.common.MoreAsserts;\n import com.google.gson.common.TestTypes.CrazyLongTypeAdapter;\n-import com.google.gson.common.TestTypes.MyEnum;\n import com.google.gson.reflect.TypeToken;\n \n import junit.framework.TestCase;\n     assertEquals(\"World\", target[1]);\n   }\n \n-  public void testTopLevelEnumInASingleElementArrayDeserialization() {\n-    String json = \"[\" + MyEnum.VALUE1.getExpectedJson() + \"]\";\n-    MyEnum target = gson.fromJson(json, MyEnum.class);\n-    assertEquals(json, \"[\" + target.getExpectedJson() + \"]\");\n-  }\n-\n   @SuppressWarnings(\"unchecked\")\n   public void testArrayOfCollectionSerialization() throws Exception {\n     StringBuilder sb = new StringBuilder(\"[\");\n--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n import com.google.gson.JsonParseException;\n import com.google.gson.common.MoreAsserts;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n-import com.google.gson.common.TestTypes.MyEnum;\n import com.google.gson.reflect.TypeToken;\n \n import junit.framework.TestCase;\n     for (BagOfPrimitives obj : target) {\n       assertTrue(result.contains(obj.getExpectedJson()));\n     }\n-  }\n-\n-  public void testCollectionOfEnumsSerialization() {\n-    Type type = new TypeToken<Collection<MyEnum>>() {}.getType();\n-    Collection<MyEnum> target = new ArrayList<MyEnum>();\n-    target.add(MyEnum.VALUE1);\n-    target.add(MyEnum.VALUE2);\n-    String expectedJson = \"[\\\"VALUE1\\\",\\\"VALUE2\\\"]\";\n-    String actualJson = gson.toJson(target);\n-    assertEquals(expectedJson, actualJson);\n-    actualJson = gson.toJson(target, type);\n-    assertEquals(expectedJson, actualJson);\n-  }\n-\n-  public void testCollectionOfEnumsDeserialization() {\n-    Type type = new TypeToken<Collection<MyEnum>>() {}.getType();\n-    String json = \"[\\\"VALUE1\\\",\\\"VALUE2\\\"]\";\n-    Collection<MyEnum> target = gson.fromJson(json, type);\n-    MoreAsserts.assertContains(target, MyEnum.VALUE1);\n-    MoreAsserts.assertContains(target, MyEnum.VALUE2);\n   }\n \n   public void testCollectionOfStringsDeserialization() {\n--- a/gson/src/test/java/com/google/gson/functional/EnumTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/EnumTest.java\n package com.google.gson.functional;\n \n import com.google.gson.Gson;\n+import com.google.gson.common.MoreAsserts;\n+import com.google.gson.reflect.TypeToken;\n \n import junit.framework.TestCase;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n \n /**\n  * Functional tests for Java 5.0 enums.\n     gson = new Gson();\n   }\n   \n-  public void testEnumSerialization() throws Exception {\n-    String result = gson.toJson(TestEnum.TEST_1);\n-    assertEquals('\"' + TestEnum.TEST_1.toString() + '\"', result);\n+  public void testTopLevelEnumSerialization() throws Exception {\n+    String result = gson.toJson(MyEnum.VALUE1);\n+    assertEquals('\"' + MyEnum.VALUE1.toString() + '\"', result);\n   }\n   \n-  public void testEnumDeserialization() throws Exception {\n-    TestEnum result = gson.fromJson('\"' + TestEnum.TEST_1.toString() + '\"', TestEnum.class);\n-    assertEquals(TestEnum.TEST_1, result);\n+  public void testTopLevelEnumDeserialization() throws Exception {\n+    MyEnum result = gson.fromJson('\"' + MyEnum.VALUE1.toString() + '\"', MyEnum.class);\n+    assertEquals(MyEnum.VALUE1, result);\n   }\n   \n-  public void testEnumFieldSerialization() throws Exception {\n-    String result = gson.toJson(TestEnum.TEST_1);\n-    assertEquals('\"' + TestEnum.TEST_1.toString() + '\"', result);\n+  public void testTopLevelEnumInASingleElementArrayDeserialization() {\n+    String json = \"[\" + MyEnum.VALUE1.getExpectedJson() + \"]\";\n+    MyEnum target = gson.fromJson(json, MyEnum.class);\n+    assertEquals(json, \"[\" + target.getExpectedJson() + \"]\");\n+  }\n+\n+  public void testCollectionOfEnumsSerialization() {\n+    Type type = new TypeToken<Collection<MyEnum>>() {}.getType();\n+    Collection<MyEnum> target = new ArrayList<MyEnum>();\n+    target.add(MyEnum.VALUE1);\n+    target.add(MyEnum.VALUE2);\n+    String expectedJson = \"[\\\"VALUE1\\\",\\\"VALUE2\\\"]\";\n+    String actualJson = gson.toJson(target);\n+    assertEquals(expectedJson, actualJson);\n+    actualJson = gson.toJson(target, type);\n+    assertEquals(expectedJson, actualJson);\n+  }\n+\n+  public void testCollectionOfEnumsDeserialization() {\n+    Type type = new TypeToken<Collection<MyEnum>>() {}.getType();\n+    String json = \"[\\\"VALUE1\\\",\\\"VALUE2\\\"]\";\n+    Collection<MyEnum> target = gson.fromJson(json, type);\n+    MoreAsserts.assertContains(target, MyEnum.VALUE1);\n+    MoreAsserts.assertContains(target, MyEnum.VALUE2);\n+  }\n+\n+  public void testClassWithEnumFieldSerialization() throws Exception {\n+    ClassWithEnumFields target = new ClassWithEnumFields();\n+    assertEquals(target.getExpectedJson(), gson.toJson(target));\n+  }\n+\n+  public void testClassWithEnumFieldDeserialization() throws Exception {\n+    String json = \"{value1:'VALUE1',value2:'VALUE2'}\";\n+    ClassWithEnumFields target = gson.fromJson(json, ClassWithEnumFields.class);\n+    assertEquals(MyEnum.VALUE1,target.value1);\n+    assertEquals(MyEnum.VALUE2,target.value2);\n   }\n   \n-  public void testEnumFieldDeserialization() throws Exception {\n-    Foo result = gson.fromJson(\"{\\\"f\\\":\\\"TEST_1\\\"}\", Foo.class);\n-    assertEquals(TestEnum.TEST_1, result.f);\n+  private static enum MyEnum {\n+    VALUE1, VALUE2;\n+\n+    public String getExpectedJson() {\n+      return \"\\\"\" + toString() + \"\\\"\";\n+    }\n   }\n \n-  private static enum TestEnum {\n-    TEST_1,\n-    TEST_2;\n-  }\n-  \n-  private static class Foo {\n-    private TestEnum f;\n-    \n-    public Foo() {\n-      this(TestEnum.TEST_1);\n-    }\n-    \n-    public Foo(TestEnum f) {\n-      this.f = f;\n+  private static class ClassWithEnumFields {\n+    private final MyEnum value1 = MyEnum.VALUE1;\n+    private final MyEnum value2 = MyEnum.VALUE2;\n+    public String getExpectedJson() {\n+      return \"{\\\"value1\\\":\\\"\" + value1 + \"\\\",\\\"value2\\\":\\\"\" + value2 + \"\\\"}\";\n     }\n   }\n }\n--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n import com.google.gson.common.TestTypes.ClassWithNoFields;\n import com.google.gson.common.TestTypes.ClassWithObjects;\n import com.google.gson.common.TestTypes.ClassWithTransientFields;\n-import com.google.gson.common.TestTypes.MyEnum;\n import com.google.gson.common.TestTypes.Nested;\n import com.google.gson.common.TestTypes.PrimitiveArray;\n \n   public void testArrayOfArraysDeserialization() throws Exception {\n     String json = new ArrayOfArrays().getExpectedJson();\n     ArrayOfArrays target = gson.fromJson(json, ArrayOfArrays.class);\n-    assertEquals(json, target.getExpectedJson());\n-  }\n-\n-  public void testClassWithEnumFieldSerialization() throws Exception {\n-    ClassWithEnumFields target = new ClassWithEnumFields();\n-    assertEquals(target.getExpectedJson(), gson.toJson(target));\n-  }\n-\n-  public void testClassWithEnumFieldDeserialization() throws Exception {\n-    String json = new ClassWithEnumFields().getExpectedJson();\n-    ClassWithEnumFields target = gson.fromJson(json, ClassWithEnumFields.class);\n-    assertEquals(json, target.getExpectedJson());\n-  }\n-\n-  public void testTopLevelEnumSerialization() throws Exception {\n-    MyEnum target = MyEnum.VALUE1;\n-    assertEquals(target.getExpectedJson(), gson.toJson(target));\n-  }\n-\n-  public void testTopLevelEnumDeserialization() throws Exception {\n-    String json = MyEnum.VALUE1.getExpectedJson();\n-    MyEnum target = gson.fromJson(json, MyEnum.class);\n     assertEquals(json, target.getExpectedJson());\n   }\n \n     }\n   }\n \n-  private static class ClassWithEnumFields {\n-    private final MyEnum value1 = MyEnum.VALUE1;\n-    private final MyEnum value2 = MyEnum.VALUE2;\n-    public String getExpectedJson() {\n-      return \"{\\\"value1\\\":\\\"\" + value1 + \"\\\",\\\"value2\\\":\\\"\" + value2 + \"\\\"}\";\n-    }\n-  }\n-\n   private static class ClassWithPrivateNoArgsConstructor {\n     public int a;\n     private ClassWithPrivateNoArgsConstructor() {", "timestamp": 1238438215, "metainfo": ""}