{"sha": "9b0e7f8b84298b284fe79aaa317ed36394921a24", "log": "initial check-in for implementing support for protocol buffers in Gson", "commit": "\n--- /dev/null\n+++ b/proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.protobuf;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.protobuf.Descriptors.FieldDescriptor;\n+import com.google.protobuf.Descriptors.FieldDescriptor.JavaType;\n+import com.google.protobuf.Message;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+public class ProtoTypeAdapter implements JsonSerializer<Message> {\n+\n+  @Override\n+  public JsonElement serialize(Message msg, Type typeOfMsg, JsonSerializationContext context) {\n+    JsonObject obj = new JsonObject();\n+    Map<FieldDescriptor, Object> allFields = msg.getAllFields();\n+    for (Map.Entry<FieldDescriptor, Object> entry : allFields.entrySet()) {\n+      FieldDescriptor key = entry.getKey();\n+      Object value = entry.getValue();\n+      JavaType javaType = key.getJavaType();\n+      Class<?> type = toJavaType(javaType);\n+      JsonElement element = context.serialize(value, type);\n+      obj.add(key.getName(), element);\n+    }\n+    return obj;\n+  }\n+\n+  private Class<?> toJavaType(JavaType javaType) {\n+    switch (javaType) {\n+    case BOOLEAN:\n+      return Boolean.class;\n+    case BYTE_STRING:\n+      return String.class;\n+    case DOUBLE:\n+      return double.class;\n+    case ENUM:\n+      return Enum.class;\n+    case FLOAT:\n+      return float.class;\n+    case INT:\n+      return int.class;\n+    case LONG:\n+      return long.class;\n+    case MESSAGE:\n+      return Message.class;\n+    case STRING:\n+      return String.class;\n+    }\n+    return Object.class;\n+  }\n+}\n--- /dev/null\n+++ b/proto/src/test/java/com/google/gson/protobuf/FunctionalTest.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.protobuf;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.protobuf.generated.Bag.SimpleProto;\n+import com.google.protobuf.Message;\n+import com.google.protobuf.Descriptors.Descriptor;\n+\n+import junit.framework.TestCase;\n+\n+public class FunctionalTest extends TestCase {\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new GsonBuilder()\n+//      .registerTypeHierarchyAdapter(Message.class, new ProtoTypeAdapter())\n+      .create();\n+  }\n+\n+  public void testSerializeEmptyProto() {\n+    SimpleProto proto = SimpleProto.newBuilder().build();\n+    String json = gson.toJson(proto);\n+    assertEquals(\"{}\", json);\n+  }\n+\n+  public void testSerializeProto() {\n+    Descriptor descriptor = SimpleProto.getDescriptor();\n+    SimpleProto proto = SimpleProto.newBuilder()\n+      .setField(descriptor.findFieldByNumber(1), \"foo\")\n+      .setField(descriptor.findFieldByNumber(2), 3)\n+      .build();\n+    String json = gson.toJson(proto);\n+    System.out.println(json);\n+    assertTrue(json.contains(\"\\\"msg\\\":\\\"foo\\\"\"));\n+    assertTrue(json.contains(\"\\\"count\\\":3\"));\n+  }\n+}", "timestamp": 1284487144, "metainfo": ""}