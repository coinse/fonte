{"sha": "7b75efd09ecc1aeb0b5c7a020d9cf17b5dad8bad", "log": "Write some tests prescribed by missing code coverage. I found a bug where our nonexecute prefix code causes a problem.", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n    * Consumes the non-execute prefix if it exists.\n    */\n   private void consumeNonExecutePrefix() throws IOException {\n+    // TODO: there's a bug here. We're going to call nextNonWhitespace and we have a character that\n+    //       we can't necessarily push back (because pos could be 0)\n+\n     // fast forward through the leading whitespace\n     nextNonWhitespace(true);\n     pos--;\n   }\n \n   @Override public String toString() {\n-    return getClass().getSimpleName() + \" near \" + getSnippet();\n+    return getClass().getSimpleName()\n+        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber();\n   }\n \n   /**\n         + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n   }\n \n-  private CharSequence getSnippet() {\n-    StringBuilder snippet = new StringBuilder();\n-    int beforePos = Math.min(pos, 20);\n-    snippet.append(buffer, pos - beforePos, beforePos);\n-    int afterPos = Math.min(limit - pos, 20);\n-    snippet.append(buffer, pos, afterPos);\n-    return snippet;\n-  }\n-\n   static {\n     JsonReaderInternalAccess.INSTANCE = new JsonReaderInternalAccess() {\n       @Override public void promoteNameToValue(JsonReader reader) throws IOException {\n--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n \n package com.google.gson.stream;\n \n+import java.io.EOFException;\n import java.io.IOException;\n import java.io.StringReader;\n import java.util.Arrays;\n     }\n   }\n \n+  public void testUnescapingTruncatedSequence() throws IOException {\n+    String json = \"[\\\"\\\\\";\n+    JsonReader reader = new JsonReader(new StringReader(json));\n+    reader.beginArray();\n+    try {\n+      reader.nextString();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+  }\n+\n   public void testIntegersWithFractionalPartSpecified() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\"[1.0,1.0,1.0]\"));\n     reader.beginArray();\n     }\n   }\n \n+  public void testStrictQuotedNonFiniteDoubles() throws IOException {\n+    String json = \"[\\\"NaN\\\"]\";\n+    JsonReader reader = new JsonReader(new StringReader(json));\n+    reader.beginArray();\n+    try {\n+      reader.nextDouble();\n+      fail();\n+    } catch (MalformedJsonException expected) {\n+    }\n+  }\n+\n   public void testLenientNonFiniteDoubles() throws IOException {\n     String json = \"[NaN, -Infinity, Infinity]\";\n+    JsonReader reader = new JsonReader(new StringReader(json));\n+    reader.setLenient(true);\n+    reader.beginArray();\n+    assertTrue(Double.isNaN(reader.nextDouble()));\n+    assertEquals(Double.NEGATIVE_INFINITY, reader.nextDouble());\n+    assertEquals(Double.POSITIVE_INFINITY, reader.nextDouble());\n+    reader.endArray();\n+  }\n+\n+  public void testLenientQuotedNonFiniteDoubles() throws IOException {\n+    String json = \"[\\\"NaN\\\", \\\"-Infinity\\\", \\\"Infinity\\\"]\";\n     JsonReader reader = new JsonReader(new StringReader(json));\n     reader.setLenient(true);\n     reader.beginArray();\n     testFailWithPosition(\"Expected literal value at line 1 column 4\",\n         \"\\ufeff[0,}]\");\n   }\n-\n+  \n   private void testFailWithPosition(String message, String json) throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(json));\n     reader.beginArray();\n     } catch (IOException expected) {\n       assertEquals(message, expected.getMessage());\n     }\n+  }\n+  \n+  public void testDeeplyNestedArrays() throws IOException {\n+    // this is nested 40 levels deep; Gson is tuned for nesting is 30 levels deep or fewer\n+    JsonReader reader = new JsonReader(new StringReader(\n+        \"[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\"));\n+    for (int i = 0; i < 40; i++) {\n+      reader.beginArray();\n+    }\n+    for (int i = 0; i < 40; i++) {\n+      reader.endArray();\n+    }\n+    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n+  }\n+\n+  public void testDeeplyNestedObjects() throws IOException {\n+    // Build a JSON document structured like {\"a\":{\"a\":{\"a\":{\"a\":true}}}}, but 40 levels deep\n+    String array = \"{\\\"a\\\":%s}\";\n+    String json = \"true\";\n+    for (int i = 0; i < 40; i++) {\n+      json = String.format(array, json);\n+    }\n+\n+    JsonReader reader = new JsonReader(new StringReader(json));\n+    for (int i = 0; i < 40; i++) {\n+      reader.beginObject();\n+      assertEquals(\"a\", reader.nextName());\n+    }\n+    assertEquals(true, reader.nextBoolean());\n+    for (int i = 0; i < 40; i++) {\n+      reader.endObject();\n+    }\n+    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n+  }\n+\n+  // http://code.google.com/p/google-gson/issues/detail?id=409\n+  public void testStringEndingInSlash() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"/\"));\n+    reader.setLenient(true);\n+    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n+  }\n+\n+  public void testStringWithLeadingSlash() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"/x\"));\n+    reader.setLenient(true);\n+    try {\n+      reader.peek();\n+      fail();\n+    } catch (MalformedJsonException expected) {\n+    }\n+  }\n+\n+  public void testUnterminatedObject() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":\\\"android\\\"x\"));\n+    reader.setLenient(true);\n+    reader.beginObject();\n+    assertEquals(\"a\", reader.nextName());\n+    assertEquals(\"android\", reader.nextString());\n+    try {\n+      reader.peek();\n+      fail();\n+    } catch (MalformedJsonException expected) {\n+    }\n+  }\n+  \n+  public void testVeryLongQuotedString() throws IOException {\n+    char[] stringChars = new char[1024 * 16];\n+    Arrays.fill(stringChars, 'x');\n+    String string = new String(stringChars);\n+    String json = \"[\\\"\" + string + \"\\\"]\";\n+    JsonReader reader = new JsonReader(new StringReader(json));\n+    reader.beginArray();\n+    assertEquals(string, reader.nextString());\n+    reader.endArray();\n+  }\n+\n+  public void testVeryLongUnquotedString() throws IOException {\n+    char[] stringChars = new char[1024 * 16];\n+    Arrays.fill(stringChars, 'x');\n+    String string = new String(stringChars);\n+    String json = \"[\" + string + \"]\";\n+    JsonReader reader = new JsonReader(new StringReader(json));\n+    reader.setLenient(true);\n+    reader.beginArray();\n+    assertEquals(string, reader.nextString());\n+    reader.endArray();\n+  }\n+\n+  public void testVeryLongUnterminatedString() throws IOException {\n+    char[] stringChars = new char[1024 * 16];\n+    Arrays.fill(stringChars, 'x');\n+    String string = new String(stringChars);\n+    String json = \"[\" + string;\n+    JsonReader reader = new JsonReader(new StringReader(json));\n+    reader.setLenient(true);\n+    reader.beginArray();\n+    assertEquals(string, reader.nextString());\n+    try {\n+      reader.peek();\n+      fail();\n+    } catch (EOFException expected) {\n+    }\n+  }\n+\n+  public void testSkipVeryLongUnquotedString() throws IOException {\n+    char[] stringChars = new char[1024 * 16];\n+    Arrays.fill(stringChars, 'x');\n+    String string = new String(stringChars);\n+    String json = \"[\" + string + \"]\";\n+    JsonReader reader = new JsonReader(new StringReader(json));\n+    reader.setLenient(true);\n+    reader.beginArray();\n+    reader.skipValue();\n+    reader.endArray();\n+  }\n+\n+  public void testStringAsNumberWithTruncatedExponent() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"[123e]\"));\n+    reader.setLenient(true);\n+    reader.beginArray();\n+    assertEquals(JsonToken.STRING, reader.peek());\n+  }\n+\n+  public void testStringAsNumberWithDigitAndNonDigitExponent() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"[123e4b]\"));\n+    reader.setLenient(true);\n+    reader.beginArray();\n+    assertEquals(JsonToken.STRING, reader.peek());\n+  }\n+\n+  public void testStringAsNumberWithNonDigitExponent() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"[123eb]\"));\n+    reader.setLenient(true);\n+    reader.beginArray();\n+    assertEquals(JsonToken.STRING, reader.peek());\n   }\n \n   private String repeat(char c, int count) {", "timestamp": 1328991339, "metainfo": ""}