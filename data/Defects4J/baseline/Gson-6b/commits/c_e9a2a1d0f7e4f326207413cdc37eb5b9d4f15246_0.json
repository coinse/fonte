{"sha": "e9a2a1d0f7e4f326207413cdc37eb5b9d4f15246", "log": "Fixed Issue 153 by using a stack to keep track of first elements at any level.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonPrintFormatter.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrintFormatter.java\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Stack;\n \n /**\n  * Formats Json in a nicely indented way with a specified print margin.\n   }\n \n   private class PrintFormattingVisitor implements JsonElementVisitor {\n-    private final Map<Integer, Boolean> firstArrayElement;\n-    private final Map<Integer, Boolean> firstObjectMember;\n+    private final Stack<Boolean> firstElementInLevel;\n     private final JsonWriter writer;\n     private final Escaper escaper;\n     private final boolean serializeNulls;\n-    private int level = 0;\n \n     PrintFormattingVisitor(JsonWriter writer, Escaper escaper, boolean serializeNulls) {\n       this.writer = writer;\n       this.escaper = escaper;\n       this.serializeNulls = serializeNulls;\n-      this.firstArrayElement = new HashMap<Integer, Boolean>();\n-      this.firstObjectMember = new HashMap<Integer, Boolean>();\n-    }\n-\n-    private void addCommaCheckingFirst(Map<Integer, Boolean> first) throws IOException {\n-      if (first.get(level) != Boolean.FALSE) {\n-        first.put(level, false);\n+      this.firstElementInLevel = new Stack<Boolean>();\n+    }\n+\n+    private void addCommaCheckingFirst() throws IOException {\n+      if (firstElementInLevel.peek()) {\n+        // No longer first\n+        firstElementInLevel.pop();\n+        firstElementInLevel.push(false);\n       } else {\n         writer.elementSeparator();\n       }\n     }\n \n     public void startArray(JsonArray array) throws IOException {\n-      firstArrayElement.put(++level, true);\n+      firstElementInLevel.push(true);\n       writer.beginArray();\n     }\n \n     public void visitArrayMember(JsonArray parent, JsonPrimitive member, \n         boolean isFirst) throws IOException {\n-      addCommaCheckingFirst(firstArrayElement);\n+      addCommaCheckingFirst();\n       writer.value(escapeJsonPrimitive(member));\n     }\n \n     public void visitArrayMember(JsonArray parent, JsonArray member, \n         boolean first) throws IOException {\n-      addCommaCheckingFirst(firstArrayElement);\n+      addCommaCheckingFirst();\n     }\n \n     public void visitArrayMember(JsonArray parent, JsonObject member, \n         boolean first) throws IOException {\n-      addCommaCheckingFirst(firstArrayElement);\n+      addCommaCheckingFirst();\n     }\n \n     public void visitNullArrayMember(JsonArray parent, boolean isFirst) throws IOException {\n-      addCommaCheckingFirst(firstArrayElement);\n+      addCommaCheckingFirst();\n     }\n \n     public void endArray(JsonArray array) {\n-      level--;\n       writer.endArray();\n+      firstElementInLevel.pop();\n     }\n \n     public void startObject(JsonObject object) throws IOException {\n-      firstObjectMember.put(level, true);\n+      firstElementInLevel.push(true);\n       writer.beginObject();\n     }\n \n     public void visitObjectMember(JsonObject parent, String memberName, JsonPrimitive member, \n         boolean isFirst) throws IOException {\n-      addCommaCheckingFirst(firstObjectMember);\n+      addCommaCheckingFirst();\n       writer.key(memberName);\n       writer.fieldSeparator();\n       writer.value(escapeJsonPrimitive(member));\n \n     public void visitObjectMember(JsonObject parent, String memberName, JsonArray member, \n         boolean isFirst) throws IOException {\n-      addCommaCheckingFirst(firstObjectMember);\n+      addCommaCheckingFirst();\n       writer.key(memberName);\n       writer.fieldSeparator();\n     }\n \n     public void visitObjectMember(JsonObject parent, String memberName, JsonObject member, \n         boolean isFirst) throws IOException {\n-      addCommaCheckingFirst(firstObjectMember);\n+      addCommaCheckingFirst();\n       writer.key(memberName);\n       writer.fieldSeparator();\n     }\n     \n     public void endObject(JsonObject object) {\n       writer.endObject();\n+      firstElementInLevel.pop();\n     }\n \n     public void visitPrimitive(JsonPrimitive primitive) throws IOException {\n--- a/gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java\n     assertEquals(\"{\\\"abc\\\":1,\\\"def\\\":5}\\n\", json);\n   }\n \n+  // In response to bug 153\n+  public void testEmptyMapField() {\n+    ClassWithMap obj = new ClassWithMap();\n+    obj.map = new LinkedHashMap<String, Integer>();\n+    String json = gson.toJson(obj);\n+    assertTrue(json.contains(\"{\\\"map\\\":{},\\\"value\\\":2}\"));\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class ClassWithMap {\n+    Map<String, Integer> map;\n+    int value = 2;\n+  }\n+\n   public void testMultipleArrays() {\n     int[][][] ints = new int[][][] { { { 1 }, { 2 } } };\n     String json = gson.toJson(ints);", "timestamp": 1254246769, "metainfo": ""}