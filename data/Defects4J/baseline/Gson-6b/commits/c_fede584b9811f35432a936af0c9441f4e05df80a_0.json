{"sha": "fede584b9811f35432a936af0c9441f4e05df80a", "log": "Gson 2.0 converts JSON with type Object.class into something meaningful such as a Collection of primitives or Maps. Updated tests for the new behavior. Changed $Gson$Types.getCollectionElementType to handle wild-card sub-classes of collections and raw collections.", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java\n+++ b/gson/src/main/java/com/google/gson/internal/$Gson$Types.java\n \n import static com.google.gson.internal.$Gson$Preconditions.checkArgument;\n import static com.google.gson.internal.$Gson$Preconditions.checkNotNull;\n+\n import java.io.Serializable;\n import java.lang.reflect.Array;\n import java.lang.reflect.GenericArrayType;\n    */\n   public static Type getCollectionElementType(Type context, Class<?> contextRawType) {\n     Type collectionType = getSupertype(context, contextRawType, Collection.class);\n-    return ((ParameterizedType) collectionType).getActualTypeArguments()[0];\n+    \n+    if (collectionType instanceof WildcardType) {\n+      collectionType = ((WildcardType)collectionType).getUpperBounds()[0];\n+    }\n+    if (collectionType instanceof ParameterizedType) {\n+      return ((ParameterizedType) collectionType).getActualTypeArguments()[0];\n+    }\n+    return Object.class;\n   }\n \n   /**\n--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n \n package com.google.gson.functional;\n \n-import com.google.gson.Gson;\n-import com.google.gson.JsonParseException;\n-import com.google.gson.common.MoreAsserts;\n-import com.google.gson.common.TestTypes.BagOfPrimitives;\n-import com.google.gson.reflect.TypeToken;\n-\n-import junit.framework.TestCase;\n-\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.Map;\n import java.util.Queue;\n import java.util.Set;\n+\n+import junit.framework.TestCase;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.common.MoreAsserts;\n+import com.google.gson.common.TestTypes.BagOfPrimitives;\n+import com.google.gson.reflect.TypeToken;\n \n /**\n  * Functional tests for Json serialization and deserialization of collections.\n \n   public void testRawCollectionDeserializationNotAlllowed() {\n     String json = \"[0,1,2,3,4,5,6,7,8,9]\";\n-    try {\n-        gson.fromJson(json, Collection.class);\n-        fail(\"Can not deserialize a non-genericized collection.\");\n-    } catch (JsonParseException expected) { }\n+    Collection integers = gson.fromJson(json, Collection.class);\n+    // JsonReader converts numbers to double by default so we need a floating point comparison\n+    assertEquals(Arrays.asList(0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0), integers);\n \n     json = \"[\\\"Hello\\\", \\\"World\\\"]\";\n-    try {\n-      gson.fromJson(json, Collection.class);\n-      fail(\"Can not deserialize a non-genericized collection.\");\n-    } catch (JsonParseException expected) { }\n+    Collection strings = gson.fromJson(json, Collection.class);\n+    assertTrue(strings.contains(\"Hello\"));\n+    assertTrue(strings.contains(\"World\"));\n   }\n \n   @SuppressWarnings(\"unchecked\")\n   public void testRawCollectionOfBagOfPrimitivesNotAllowed() {\n-    try {\n-      BagOfPrimitives bag = new BagOfPrimitives(10, 20, false, \"stringValue\");\n-      String json = '[' + bag.getExpectedJson() + ',' + bag.getExpectedJson() + ']';\n-      Collection target = gson.fromJson(json, Collection.class);\n-      assertEquals(2, target.size());\n-      for (BagOfPrimitives bag1 : (Collection<BagOfPrimitives>) target) {\n-        assertEquals(bag.getExpectedJson(), bag1.getExpectedJson());\n-      }\n-      fail(\"Raw collection of objects should not work\");\n-    } catch (JsonParseException expected) {\n+    BagOfPrimitives bag = new BagOfPrimitives(10, 20, false, \"stringValue\");\n+    String json = '[' + bag.getExpectedJson() + ',' + bag.getExpectedJson() + ']';\n+    Collection target = gson.fromJson(json, Collection.class);\n+    assertEquals(2, target.size());\n+    for (Object bag1 : target) {\n+      // Gson 2.0 converts raw objects into maps\n+      Map<String, Object> values = (Map<String, Object>) bag1;\n+      assertTrue(values.containsValue(10.0));\n+      assertTrue(values.containsValue(20.0));\n+      assertTrue(values.containsValue(\"stringValue\"));\n     }\n   }\n ", "timestamp": 1315549397, "metainfo": ""}