{"sha": "50b4e3f4b9fda3494c07221547eac505deb6f7eb", "log": "Using getElement() instead of get() to get proper synchronization.", "commit": "\n--- a/gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java\n  */\n package com.google.gson;\n \n-import com.google.gson.ObjectNavigator.Visitor;\n-import com.google.gson.internal.$Types;\n-import com.google.gson.internal.$Preconditions;\n-\n import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Field;\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.List;\n+\n+import com.google.gson.ObjectNavigator.Visitor;\n+import com.google.gson.internal.$Preconditions;\n+import com.google.gson.internal.$Types;\n \n /**\n  * Visits each of the fields of the specified class using reflection\n  */\n final class ReflectingFieldNavigator {\n \n-  private static final LruCache<Type, List<FieldAttributes>> fieldsCache =\n+  private static final Cache<Type, List<FieldAttributes>> fieldsCache =\n     new LruCache<Type, List<FieldAttributes>>(500);\n \n   private final ExclusionStrategy exclusionStrategy;\n   }\n \n   private List<FieldAttributes> getAllFields(Type type, Type declaredType) {\n-    List<FieldAttributes> fields = fieldsCache.get(type);\n+    List<FieldAttributes> fields = fieldsCache.getElement(type);\n     if (fields == null) {\n       fields = new ArrayList<FieldAttributes>();\n       for (Class<?> curr : getInheritanceHierarchy(type)) {", "timestamp": 1301958019, "metainfo": ""}