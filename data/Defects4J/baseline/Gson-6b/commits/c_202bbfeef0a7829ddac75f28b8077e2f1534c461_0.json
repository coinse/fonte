{"sha": "202bbfeef0a7829ddac75f28b8077e2f1534c461", "log": "Fixing the Java 1.5 build.", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n       checkLenient();\n       pos--;\n       name = nextLiteral();\n-      if (name.isEmpty()) {\n+      if (name.length() == 0) {\n         throw syntaxError(\"Expected name\");\n       }\n     }\n    */\n   private JsonToken readLiteral() throws IOException {\n     String literal = nextLiteral();\n-    if (literal.isEmpty()) {\n+    if (literal.length() == 0) {\n       throw syntaxError(\"Expected literal value\");\n     }\n     value = literal;\n--- a/gson/src/main/java/com/google/gson/stream/JsonWriter.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonWriter.java\n    * @param indent a string containing only whitespace.\n    */\n   public void setIndent(String indent) {\n-    if (indent.isEmpty()) {\n+    if (indent.length() == 0) {\n       this.indent = null;\n       this.separator = \":\";\n     } else {\n--- a/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java\n     jsonWriter.value(Double.MIN_VALUE);\n     jsonWriter.value(0.0);\n     jsonWriter.value(-0.5);\n-    jsonWriter.value(Double.MIN_NORMAL);\n+    jsonWriter.value(2.2250738585072014E-308);\n     jsonWriter.value(Math.PI);\n     jsonWriter.value(Math.E);\n     jsonWriter.endArray();", "timestamp": 1283419766, "metainfo": ""}