{"sha": "9ce9c62b4452f6cc9fbb89058a28abd8cddbafe9", "log": "Tests for JsonElementReader", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java\n import java.util.Map;\n \n /**\n- *\n+ * This reader walks the elements of a JsonElement as if it was coming from a\n+ * character stream.\n  */\n public final class JsonElementReader extends JsonReader {\n   private static final Reader UNREADABLE_READER = new Reader() {\n \n   private final List<Object> stack = new ArrayList<Object>();\n \n-  /**\n-   * Creates a new instance that reads a JSON-encoded stream from {@code in}.\n-   */\n   public JsonElementReader(JsonElement element) {\n     super(UNREADABLE_READER);\n     stack.add(element);\n   }\n \n   @Override public String nextString() throws IOException {\n-    expect(JsonToken.STRING);\n+    JsonToken token = peek();\n+    if (token != JsonToken.STRING && token != JsonToken.NUMBER) {\n+      throw new IllegalStateException(\"Expected \" + JsonToken.STRING + \" but was \" + token);\n+    }\n     return ((JsonPrimitive) popStack()).getAsString();\n   }\n \n   }\n \n   @Override public double nextDouble() throws IOException {\n-    expect(JsonToken.NUMBER);\n-    return ((JsonPrimitive) popStack()).getAsDouble();\n+    JsonToken token = peek();\n+    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n+      throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token);\n+    }\n+    double result = ((JsonPrimitive) peekStack()).getAsDouble();\n+    popStack();\n+    return result;\n   }\n \n   @Override public long nextLong() throws IOException {\n-    expect(JsonToken.NUMBER);\n-    return ((JsonPrimitive) popStack()).getAsLong();\n+    JsonToken token = peek();\n+    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n+      throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token);\n+    }\n+    long result = ((JsonPrimitive) peekStack()).getAsLong();\n+    popStack();\n+    return result;\n   }\n \n   @Override public int nextInt() throws IOException {\n-    expect(JsonToken.NUMBER);\n-    return ((JsonPrimitive) popStack()).getAsInt();\n+    JsonToken token = peek();\n+    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n+      throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token);\n+    }\n+    int result = ((JsonPrimitive) peekStack()).getAsInt();\n+    popStack();\n+    return result;\n   }\n \n   @Override public void close() throws IOException {\n--- a/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java\n \n public final class JsonElementReaderTest extends TestCase {\n \n+  public void testNumbers() throws IOException {\n+    JsonElement array = new JsonParser().parse(\"[1, 2, 3]\");\n+    JsonElementReader reader = new JsonElementReader(array);\n+    reader.beginArray();\n+    assertEquals(1, reader.nextInt());\n+    assertEquals(2L, reader.nextLong());\n+    assertEquals(3.0, reader.nextDouble());\n+    reader.endArray();\n+  }\n+\n+  public void testNumbersFromStrings() throws IOException {\n+    JsonElement array = new JsonParser().parse(\"[\\\"1\\\", \\\"2\\\", \\\"3\\\"]\");\n+    JsonElementReader reader = new JsonElementReader(array);\n+    reader.beginArray();\n+    assertEquals(1, reader.nextInt());\n+    assertEquals(2L, reader.nextLong());\n+    assertEquals(3.0, reader.nextDouble());\n+    reader.endArray();\n+  }\n+\n+  public void testStringsFromNumbers() throws IOException {\n+    JsonElement array = new JsonParser().parse(\"[1]\");\n+    JsonElementReader reader = new JsonElementReader(array);\n+    reader.beginArray();\n+    assertEquals(\"1\", reader.nextString());\n+    reader.endArray();\n+  }\n+\n+  public void testBooleans() throws IOException {\n+    JsonElement array = new JsonParser().parse(\"[true, false]\");\n+    JsonElementReader reader = new JsonElementReader(array);\n+    reader.beginArray();\n+    assertEquals(true, reader.nextBoolean());\n+    assertEquals(false, reader.nextBoolean());\n+    reader.endArray();\n+  }\n+\n+  public void testNulls() throws IOException {\n+    JsonElement array = new JsonParser().parse(\"[null,null]\");\n+    JsonElementReader reader = new JsonElementReader(array);\n+    reader.beginArray();\n+    reader.nextNull();\n+    reader.nextNull();\n+    reader.endArray();\n+  }\n+\n+  public void testStrings() throws IOException {\n+    JsonElement array = new JsonParser().parse(\"[\\\"A\\\",\\\"B\\\"]\");\n+    JsonElementReader reader = new JsonElementReader(array);\n+    reader.beginArray();\n+    assertEquals(\"A\", reader.nextString());\n+    assertEquals(\"B\", reader.nextString());\n+    reader.endArray();\n+  }\n+\n   public void testArray() throws IOException {\n     JsonElement array = new JsonParser().parse(\"[1, 2, 3]\");\n     JsonElementReader reader = new JsonElementReader(array);\n     reader.endArray();\n   }\n \n+  public void testNestedArrays() throws IOException {\n+    JsonElement array = new JsonParser().parse(\"[[],[[]]]\");\n+    JsonElementReader reader = new JsonElementReader(array);\n+    reader.beginArray();\n+    reader.beginArray();\n+    reader.endArray();\n+    reader.beginArray();\n+    reader.beginArray();\n+    reader.endArray();\n+    reader.endArray();\n+    reader.endArray();\n+  }\n+\n+  public void testNestedObjects() throws IOException {\n+    JsonElement array = new JsonParser().parse(\"{\\\"A\\\":{},\\\"B\\\":{\\\"C\\\":{}}}\");\n+    JsonElementReader reader = new JsonElementReader(array);\n+    reader.beginObject();\n+    assertEquals(\"A\", reader.nextName());\n+    reader.beginObject();\n+    reader.endObject();\n+    assertEquals(\"B\", reader.nextName());\n+    reader.beginObject();\n+    assertEquals(\"C\", reader.nextName());\n+    reader.beginObject();\n+    reader.endObject();\n+    reader.endObject();\n+    reader.endObject();\n+  }\n+\n   public void testEmptyObject() throws IOException {\n     JsonElement array = new JsonParser().parse(\"{}\");\n     JsonElementReader reader = new JsonElementReader(array);\n     reader.endObject();\n   }\n \n-  // TODO: more test coverage\n+  public void testSkipValue() throws IOException {\n+    JsonElement array = new JsonParser().parse(\"[\\\"A\\\",{\\\"B\\\":[[]]},\\\"C\\\",[[]],\\\"D\\\",null]\");\n+    JsonElementReader reader = new JsonElementReader(array);\n+    reader.beginArray();\n+    assertEquals(\"A\", reader.nextString());\n+    reader.skipValue();\n+    assertEquals(\"C\", reader.nextString());\n+    reader.skipValue();\n+    assertEquals(\"D\", reader.nextString());\n+    reader.skipValue();\n+    reader.endArray();\n+  }\n+\n+  public void testWrongType() throws IOException {\n+    JsonElement array = new JsonParser().parse(\"[[],\\\"A\\\"]\");\n+    JsonElementReader reader = new JsonElementReader(array);\n+    reader.beginArray();\n+    try {\n+      reader.nextBoolean();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+    try {\n+      reader.nextNull();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+    try {\n+      reader.nextString();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+    try {\n+      reader.nextInt();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+    try {\n+      reader.nextLong();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+    try {\n+      reader.nextDouble();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+    try {\n+      reader.nextName();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+    try {\n+      reader.beginObject();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+    try {\n+      reader.endArray();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+    try {\n+      reader.endObject();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+    reader.beginArray();\n+    reader.endArray();\n+\n+    try {\n+      reader.nextBoolean();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+    try {\n+      reader.nextNull();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+    try {\n+      reader.nextInt();\n+      fail();\n+    } catch (NumberFormatException expected) {\n+    }\n+    try {\n+      reader.nextLong();\n+      fail();\n+    } catch (NumberFormatException expected) {\n+    }\n+    try {\n+      reader.nextDouble();\n+      fail();\n+    } catch (NumberFormatException expected) {\n+    }\n+    try {\n+      reader.nextName();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+    assertEquals(\"A\", reader.nextString());\n+    reader.endArray();\n+  }\n }", "timestamp": 1317353141, "metainfo": ""}