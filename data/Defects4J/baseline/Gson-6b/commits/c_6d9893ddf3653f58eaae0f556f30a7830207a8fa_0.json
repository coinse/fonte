{"sha": "6d9893ddf3653f58eaae0f556f30a7830207a8fa", "log": "Added a transient map in Metadata since metadata is often of two kinds: transient and persistent. persistent part is serialized/deserialized to JSON. Fixed imports in RepositoryInMemory.", "commit": "\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/rest/MetaData.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/MetaData.java\n import com.google.gson.reflect.TypeToken;\n \n /**\n- * Metadata associated with a repository for a rest resource\n+ * Metadata associated with a repository for a rest resource. Metadata is of two types: persistent\n+ * and transient. All metadata is persistent by default, and must be a name-value pair of strings.\n+ * Transient metadata can be an arbitrary key-value pair of objects and is available through\n+ * {@link #getFromTransient(Object)}, {@link #putInTransient(Object, Object)},\n+ * and {@link #removeFromTransient(Object)} methods.\n  *\n  * @author inder\n  *\n public final class MetaData<R extends RestResource<R>> {\n \n   private final Map<String, String> map;\n+  private final transient Map<Object, Object> mapTransient;\n \n   public static <RS extends RestResource<RS>> MetaData<RS> create() {\n     return new MetaData<RS>();\n \n   private MetaData(Map<String, String> values) {\n     this.map = values;\n+    this.mapTransient = new HashMap<Object, Object>();\n   }\n \n   public String getString(String key) {\n     map.remove(key);\n   }\n \n+  public Object getFromTransient(Object key) {\n+    return (String) mapTransient.get(key);\n+  }\n+\n+  public void putInTransient(Object key, Object value) {\n+    mapTransient.put(key, value);\n+  }\n+\n+  public void removeFromTransient(Object key) {\n+    mapTransient.remove(key);\n+  }\n+\n   @Override\n   public String toString() {\n-    return String.format(\"%s\", map);\n+    return String.format(\"map:%s, mapTransient:%s\", map, mapTransient);\n   }\n+\n   /**\n    * Gson Type adapter for {@link MetaData}. The serialized representation on wire is just a\n    * Map<String, String>\n       return context.serialize(src.map, MAP_TYPE);\n     }\n   }\n-}\n+}\n--- a/wsf/src/main/java/com/google/gson/wsf/server/rest/RepositoryInMemory.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/rest/RepositoryInMemory.java\n  */\n package com.google.gson.wsf.server.rest;\n \n-import java.util.Map;\n-\n+import com.google.common.base.Preconditions;\n import com.google.gson.webservice.definition.rest.Id;\n import com.google.gson.webservice.definition.rest.MetaData;\n import com.google.gson.webservice.definition.rest.RestResource;\n-import com.google.inject.internal.Maps;\n-import com.google.inject.internal.Preconditions;\n \n /**\n  * An in-memory map of rest resources", "timestamp": 1287848733, "metainfo": ""}