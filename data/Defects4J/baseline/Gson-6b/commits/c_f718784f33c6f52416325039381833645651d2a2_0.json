{"sha": "f718784f33c6f52416325039381833645651d2a2", "log": "Use the date format for java.sql.Date and java.sql.Timestamp.  Fixes issue 230.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n package com.google.gson;\n \n import com.google.gson.internal.$Types;\n-\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n     return DEFAULT_INSTANCE_CREATORS;\n   }\n \n+  /**\n+   * This type adapter supports three subclasses of date: Date, Timestamp, and\n+   * java.sql.Date.\n+   */\n   static final class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n     private final DateFormat enUsFormat;\n     private final DateFormat localFormat;\n       if (!(json instanceof JsonPrimitive)) {\n         throw new JsonParseException(\"The date should be a string value\");\n       }\n+      Date date = deserializeToDate(json);\n+      if (typeOfT == Date.class) {\n+        return date;\n+      } else if (typeOfT == Timestamp.class) {\n+        return new Timestamp(date.getTime());\n+      } else if (typeOfT == java.sql.Date.class) {\n+        return new java.sql.Date(date.getTime());\n+      } else {\n+        throw new IllegalArgumentException(getClass() + \" cannot deserialize to \" + typeOfT);\n+      }\n+    }\n+\n+    private Date deserializeToDate(JsonElement json) {\n       synchronized (localFormat) {\n         try {\n           return localFormat.parse(json.getAsString());\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n \n import com.google.gson.internal.$Preconditions;\n import java.lang.reflect.Type;\n+import java.sql.Timestamp;\n import java.text.DateFormat;\n import java.util.Arrays;\n import java.util.Date;\n    * call this method or {@link #setDateFormat(int)} multiple times, but only the last invocation\n    * will be used to decide the serialization format.\n    *\n+   * <p>The date format will be used to serialize and deserialize {@link java.util.Date}, {@link\n+   * java.sql.Timestamp} and {@link java.sql.Date}.\n+   *\n    * <p>Note that this pattern must abide by the convention provided by {@code SimpleDateFormat}\n    * class. See the documentation in {@link java.text.SimpleDateFormat} for more information on\n    * valid date and time patterns.</p>\n     }\n \n     if (dateTypeAdapter != null) {\n-      if (!serializers.hasSpecificHandlerFor(Date.class)) {\n-        serializers.register(Date.class, dateTypeAdapter);\n-      }\n-      if (!deserializers.hasSpecificHandlerFor(Date.class)) {\n-        deserializers.register(Date.class, dateTypeAdapter);\n-      }\n+      registerIfAbsent(Date.class, serializers, dateTypeAdapter);\n+      registerIfAbsent(Date.class, deserializers, dateTypeAdapter);\n+      registerIfAbsent(Timestamp.class, serializers, dateTypeAdapter);\n+      registerIfAbsent(Timestamp.class, deserializers, dateTypeAdapter);\n+      registerIfAbsent(java.sql.Date.class, serializers, dateTypeAdapter);\n+      registerIfAbsent(java.sql.Date.class, deserializers, dateTypeAdapter);\n+    }\n+  }\n+\n+  private static <T> void registerIfAbsent(Class<?> type,\n+      ParameterizedTypeHandlerMap<T> adapters, T adapter) {\n+    if (!adapters.hasSpecificHandlerFor(type)) {\n+      adapters.register(type, adapter);\n     }\n   }\n }\n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n  */\n package com.google.gson.functional;\n \n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.reflect.TypeToken;\n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.util.TimeZone;\n import java.util.TreeSet;\n import java.util.UUID;\n-\n import junit.framework.TestCase;\n-\n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n-import com.google.gson.JsonDeserializationContext;\n-import com.google.gson.JsonDeserializer;\n-import com.google.gson.JsonElement;\n-import com.google.gson.JsonParseException;\n-import com.google.gson.reflect.TypeToken;\n \n /**\n  * Functional test for Json serialization and deserialization for common classes for which default\n \n   // http://code.google.com/p/google-gson/issues/detail?id=230\n   public void testDateSerializationInCollection() throws Exception {\n+    Type listOfDates = new TypeToken<List<Date>>() {}.getType();\n     TimeZone defaultTimeZone = TimeZone.getDefault();\n-    TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));\n+    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n     Locale defaultLocale = Locale.getDefault();\n     Locale.setDefault(Locale.US);\n     try {\n       Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd\").create();\n       List<Date> dates = Arrays.asList(new Date(0));\n-      String json = gson.toJson(dates, new TypeToken<List<Date>>() {}.getType());\n-      assertEquals(\"[\\\"1969-12-31\\\"]\", json);\n+      String json = gson.toJson(dates, listOfDates);\n+      assertEquals(\"[\\\"1970-01-01\\\"]\", json);\n+      assertEquals(0L, gson.<List<Date>>fromJson(\"[\\\"1970-01-01\\\"]\", listOfDates).get(0).getTime());\n+    } finally {\n+      TimeZone.setDefault(defaultTimeZone);\n+      Locale.setDefault(defaultLocale);\n+    }\n+  }\n+\n+  // http://code.google.com/p/google-gson/issues/detail?id=230\n+  public void testTimestampSerialization() throws Exception {\n+    TimeZone defaultTimeZone = TimeZone.getDefault();\n+    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n+    Locale defaultLocale = Locale.getDefault();\n+    Locale.setDefault(Locale.US);\n+    try {\n+      Timestamp timestamp = new Timestamp(0L);\n+      Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd\").create();\n+      String json = gson.toJson(timestamp, Timestamp.class);\n+      assertEquals(\"\\\"1970-01-01\\\"\", json);\n+      assertEquals(0, gson.fromJson(\"\\\"1970-01-01\\\"\", Timestamp.class).getTime());\n+    } finally {\n+      TimeZone.setDefault(defaultTimeZone);\n+      Locale.setDefault(defaultLocale);\n+    }\n+  }\n+\n+  // http://code.google.com/p/google-gson/issues/detail?id=230\n+  public void testSqlDateSerialization() throws Exception {\n+    TimeZone defaultTimeZone = TimeZone.getDefault();\n+    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n+    Locale defaultLocale = Locale.getDefault();\n+    Locale.setDefault(Locale.US);\n+    try {\n+      java.sql.Date sqlDate = new java.sql.Date(0L);\n+      Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd\").create();\n+      String json = gson.toJson(sqlDate, Timestamp.class);\n+      assertEquals(\"\\\"1970-01-01\\\"\", json);\n+      assertEquals(0, gson.fromJson(\"\\\"1970-01-01\\\"\", java.sql.Date.class).getTime());\n     } finally {\n       TimeZone.setDefault(defaultTimeZone);\n       Locale.setDefault(defaultLocale);", "timestamp": 1301434579, "metainfo": ""}