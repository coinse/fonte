{"sha": "f89e92aa9fd4c705655dbc0b0584defc996d796f", "log": "Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.  One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.", "commit": "\n--- a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java\n+++ b/gson/src/main/java/com/google/gson/FieldNamingPolicy.java\n \n package com.google.gson;\n \n+import java.lang.reflect.Field;\n+\n /**\n  * An enumeration that defines a few standard naming conventions for JSON field names.\n  * This enumeration should be used in conjunction with {@link com.google.gson.GsonBuilder}\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n-public enum FieldNamingPolicy {\n+public enum FieldNamingPolicy implements FieldNamingStrategy {\n+\n+  /**\n+   * Using this naming policy with Gson will ensure that the field name is\n+   * unchanged.\n+   */\n+  IDENTITY() {\n+    public String translateName(Field f) {\n+      return f.getName();\n+    }\n+  },\n+\n   /**\n    * Using this naming policy with Gson will ensure that the first \"letter\" of the Java\n    * field name is capitalized when serialized to its JSON form.\n    *   <li>_someFieldName ---> _SomeFieldName</li>\n    * </ul>\n    */\n-  UPPER_CAMEL_CASE(new ModifyFirstLetterNamingPolicy(\n-      ModifyFirstLetterNamingPolicy.LetterModifier.UPPER)),\n+  UPPER_CAMEL_CASE() {\n+    public String translateName(Field f) {\n+      return upperCaseFirstLetter(f.getName());\n+    }\n+  },\n \n   /**\n    * Using this naming policy with Gson will ensure that the first \"letter\" of the Java\n    *   <li>someFieldName ---> Some Field Name</li>\n    *   <li>_someFieldName ---> _Some Field Name</li>\n    * </ul>\n-   * \n+   *\n    * @since 1.4\n    */\n-  UPPER_CAMEL_CASE_WITH_SPACES(new UpperCamelCaseSeparatorNamingPolicy(\" \")),\n-          \n+  UPPER_CAMEL_CASE_WITH_SPACES() {\n+    public String translateName(Field f) {\n+      return upperCaseFirstLetter(separateCamelCase(f.getName(), \" \"));\n+    }\n+  },\n+\n   /**\n    * Using this naming policy with Gson will modify the Java Field name from its camel cased\n    * form to a lower case field name where each word is separated by an underscore (_).\n    *   <li>aURL ---> a_u_r_l</li>\n    * </ul>\n    */\n-  LOWER_CASE_WITH_UNDERSCORES(new LowerCamelCaseSeparatorNamingPolicy(\"_\")),\n-  \n+  LOWER_CASE_WITH_UNDERSCORES() {\n+    public String translateName(Field f) {\n+      return separateCamelCase(f.getName(), \"_\").toLowerCase();\n+    }\n+  },\n+\n   /**\n    * Using this naming policy with Gson will modify the Java Field name from its camel cased\n    * form to a lower case field name where each word is separated by a dash (-).\n    * {@code myobject.my-field} will result in an unintended javascript expression.\n    * @since 1.4\n    */\n-  LOWER_CASE_WITH_DASHES(new LowerCamelCaseSeparatorNamingPolicy(\"-\"));\n+  LOWER_CASE_WITH_DASHES() {\n+    public String translateName(Field f) {\n+      return separateCamelCase(f.getName(), \"-\").toLowerCase();\n+    }\n+  };\n \n-  private final FieldNamingStrategy2 namingPolicy;\n-\n-  private FieldNamingPolicy(FieldNamingStrategy2 namingPolicy) {\n-    this.namingPolicy = namingPolicy;\n+  /**\n+   * Converts the field name that uses camel-case define word separation into\n+   * separate words that are separated by the provided {@code separatorString}.\n+   */\n+  private static String separateCamelCase(String name, String separator) {\n+    StringBuilder translation = new StringBuilder();\n+    for (int i = 0; i < name.length(); i++) {\n+      char character = name.charAt(i);\n+      if (Character.isUpperCase(character) && translation.length() != 0) {\n+        translation.append(separator);\n+      }\n+      translation.append(character);\n+    }\n+    return translation.toString();\n   }\n \n-  FieldNamingStrategy2 getFieldNamingPolicy() {\n-    return namingPolicy;\n+  /**\n+   * Ensures the JSON field names begins with an upper case letter.\n+   */\n+  private static String upperCaseFirstLetter(String name) {\n+    StringBuilder fieldNameBuilder = new StringBuilder();\n+    int index = 0;\n+    char firstCharacter = name.charAt(index);\n+\n+    while (index < name.length() - 1) {\n+      if (Character.isLetter(firstCharacter)) {\n+        break;\n+      }\n+\n+      fieldNameBuilder.append(firstCharacter);\n+      firstCharacter = name.charAt(++index);\n+    }\n+\n+    if (index == name.length()) {\n+      return fieldNameBuilder.toString();\n+    }\n+\n+    if (!Character.isUpperCase(firstCharacter)) {\n+      String modifiedTarget = modifyString(Character.toUpperCase(firstCharacter), name, ++index);\n+      return fieldNameBuilder.append(modifiedTarget).toString();\n+    } else {\n+      return name;\n+    }\n   }\n-}\n+\n+  private static String modifyString(char firstCharacter, String srcString, int indexOfSubstring) {\n+    return (indexOfSubstring < srcString.length())\n+        ? firstCharacter + srcString.substring(indexOfSubstring)\n+        : String.valueOf(firstCharacter);\n+  }\n+}\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n \n package com.google.gson;\n \n+import com.google.gson.annotations.SerializedName;\n import com.google.gson.internal.ConstructorConstructor;\n import com.google.gson.internal.Primitives;\n import com.google.gson.internal.Streams;\n       new SyntheticFieldExclusionStrategy(true);\n   static final ModifierBasedExclusionStrategy DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY =\n       new ModifierBasedExclusionStrategy(Modifier.TRANSIENT, Modifier.STATIC);\n-  static final FieldNamingStrategy2 DEFAULT_NAMING_POLICY =\n-      new SerializedNameAnnotationInterceptingNamingPolicy(new JavaFieldNamingPolicy());\n \n   private static final ExclusionStrategy DEFAULT_EXCLUSION_STRATEGY = createExclusionStrategy();\n \n    */\n   @SuppressWarnings(\"unchecked\")\n   public Gson() {\n-    this(DEFAULT_EXCLUSION_STRATEGY, DEFAULT_EXCLUSION_STRATEGY, DEFAULT_NAMING_POLICY,\n+    this(DEFAULT_EXCLUSION_STRATEGY, DEFAULT_EXCLUSION_STRATEGY, FieldNamingPolicy.IDENTITY,\n         EMPTY_MAP, false, EMPTY_MAP, EMPTY_MAP, false, DEFAULT_JSON_NON_EXECUTABLE, true,\n         false, false, LongSerializationPolicy.DEFAULT,\n         Collections.<TypeAdapter.Factory>emptyList());\n \n   Gson(final ExclusionStrategy deserializationExclusionStrategy,\n       final ExclusionStrategy serializationExclusionStrategy,\n-      final FieldNamingStrategy2 fieldNamingPolicy,\n+      final FieldNamingStrategy fieldNamingPolicy,\n       final TypeMap<InstanceCreator<?>> instanceCreators, boolean serializeNulls,\n       final TypeMap<JsonSerializer<?>> serializers,\n       final TypeMap<JsonDeserializer<?>> deserializers,\n     this.htmlSafe = htmlSafe;\n     this.prettyPrinting = prettyPrinting;\n \n-    /*\n-      TODO: for serialization, honor:\n-        serializationExclusionStrategy\n-        fieldNamingPolicy\n-        serializeNulls\n-        serializers\n-     */\n     TypeAdapter.Factory reflectiveTypeAdapterFactory\n         = new ReflectiveTypeAdapterFactory(constructorConstructor) {\n       @Override\n       public String getFieldName(Class<?> declaringClazz, Field f, Type declaredType) {\n-        return fieldNamingPolicy.translateName(new FieldAttributes(declaringClazz, f));\n+        SerializedName serializedName = f.getAnnotation(SerializedName.class);\n+        return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n       }\n       @Override\n       public boolean serializeField(Class<?> declaringClazz, Field f, Type declaredType) {\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n   private boolean serializeInnerClasses;\n   private boolean excludeFieldsWithoutExposeAnnotation;\n   private LongSerializationPolicy longSerializationPolicy;\n-  private FieldNamingStrategy2 fieldNamingPolicy;\n+  private FieldNamingStrategy fieldNamingPolicy;\n   private final TypeMap<InstanceCreator<?>> instanceCreators;\n   private final TypeMap<JsonSerializer<?>> serializers;\n   private final TypeMap<JsonDeserializer<?>> deserializers;\n     modifierBasedExclusionStrategy = Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY;\n     excludeFieldsWithoutExposeAnnotation = false;\n     longSerializationPolicy = LongSerializationPolicy.DEFAULT;\n-    fieldNamingPolicy = Gson.DEFAULT_NAMING_POLICY;\n+    fieldNamingPolicy = FieldNamingPolicy.IDENTITY;\n     instanceCreators = new TypeMap<InstanceCreator<?>>();\n     serializers = new TypeMap<JsonSerializer<?>>();\n     deserializers = new TypeMap<JsonDeserializer<?>>();\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n    */\n   public GsonBuilder setFieldNamingPolicy(FieldNamingPolicy namingConvention) {\n-    return setFieldNamingStrategy(namingConvention.getFieldNamingPolicy());\n+    this.fieldNamingPolicy = namingConvention;\n+    return this;\n   }\n \n   /**\n    * @since 1.3\n    */\n   public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy) {\n-    return setFieldNamingStrategy(new FieldNamingStrategy2Adapter(fieldNamingStrategy));\n-  }\n-\n-  /**\n-   * Configures Gson to apply a specific naming policy strategy to an object's field during\n-   * serialization and deserialization.\n-   *\n-   * @param fieldNamingStrategy the actual naming strategy to apply to the fields\n-   * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n-   */\n-  GsonBuilder setFieldNamingStrategy(FieldNamingStrategy2 fieldNamingStrategy) {\n-    this.fieldNamingPolicy =\n-        new SerializedNameAnnotationInterceptingNamingPolicy(fieldNamingStrategy);\n+    this.fieldNamingPolicy = fieldNamingStrategy;\n     return this;\n   }\n \n--- a/gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java\n+++ b/gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java\n     strategies.add(new SyntheticFieldExclusionStrategy(true));\n     strategies.add(new ModifierBasedExclusionStrategy(Modifier.TRANSIENT, Modifier.STATIC));\n     ExclusionStrategy exclusionStrategy = new DisjunctionExclusionStrategy(strategies);\n-    Gson gson = new Gson(exclusionStrategy, exclusionStrategy, Gson.DEFAULT_NAMING_POLICY,\n+    Gson gson = new Gson(exclusionStrategy, exclusionStrategy, FieldNamingPolicy.IDENTITY,\n         Gson.EMPTY_MAP, false, Gson.EMPTY_MAP, Gson.EMPTY_MAP, false,\n         Gson.DEFAULT_JSON_NON_EXECUTABLE,\n         true, false, false, LongSerializationPolicy.DEFAULT,\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/FieldNamingTest.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import static com.google.gson.FieldNamingPolicy.IDENTITY;\n+import static com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;\n+import static com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;\n+import static com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;\n+import static com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.SerializedName;\n+import junit.framework.TestCase;\n+\n+public final class FieldNamingTest extends TestCase {\n+  public void testIdentity() {\n+    Gson gson = new GsonBuilder().setFieldNamingPolicy(IDENTITY).create();\n+    assertEquals(\"{'lowerCamel':1,'UpperCamel':2,'_lowerCamelLeadingUnderscore':3,\" +\n+        \"'_UpperCamelLeadingUnderscore':4,'lower_words':5,'UPPER_WORDS':6,\" +\n+        \"'annotatedName':7}\",\n+        gson.toJson(new TestNames()).replace('\\\"', '\\''));\n+  }\n+\n+  public void testUpperCamelCase() {\n+    Gson gson = new GsonBuilder().setFieldNamingPolicy(UPPER_CAMEL_CASE).create();\n+    assertEquals(\"{'LowerCamel':1,'UpperCamel':2,'_LowerCamelLeadingUnderscore':3,\" +\n+        \"'_UpperCamelLeadingUnderscore':4,'Lower_words':5,'UPPER_WORDS':6,\" +\n+        \"'annotatedName':7}\",\n+        gson.toJson(new TestNames()).replace('\\\"', '\\''));\n+  }\n+\n+  public void testUpperCamelCaseWithSpaces() {\n+    Gson gson = new GsonBuilder().setFieldNamingPolicy(UPPER_CAMEL_CASE_WITH_SPACES).create();\n+    assertEquals(\"{'Lower Camel':1,'Upper Camel':2,'_Lower Camel Leading Underscore':3,\" +\n+        \"'_ Upper Camel Leading Underscore':4,'Lower_words':5,'U P P E R_ W O R D S':6,\" +\n+        \"'annotatedName':7}\",\n+        gson.toJson(new TestNames()).replace('\\\"', '\\''));\n+  }\n+\n+  public void testLowerCaseWithUnderscores() {\n+    Gson gson = new GsonBuilder().setFieldNamingPolicy(LOWER_CASE_WITH_UNDERSCORES).create();\n+    assertEquals(\"{'lower_camel':1,'upper_camel':2,'_lower_camel_leading_underscore':3,\" +\n+        \"'__upper_camel_leading_underscore':4,'lower_words':5,'u_p_p_e_r__w_o_r_d_s':6,\" +\n+        \"'annotatedName':7}\",\n+        gson.toJson(new TestNames()).replace('\\\"', '\\''));\n+  }\n+\n+  public void testLowerCaseWithDashes() {\n+    Gson gson = new GsonBuilder().setFieldNamingPolicy(LOWER_CASE_WITH_DASHES).create();\n+    assertEquals(\"{'lower-camel':1,'upper-camel':2,'_lower-camel-leading-underscore':3,\" +\n+        \"'_-upper-camel-leading-underscore':4,'lower_words':5,'u-p-p-e-r_-w-o-r-d-s':6,\" +\n+        \"'annotatedName':7}\",\n+        gson.toJson(new TestNames()).replace('\\\"', '\\''));\n+  }\n+\n+  @SuppressWarnings(\"unused\") // fields are used reflectively\n+  private static class TestNames {\n+    int lowerCamel = 1;\n+    int UpperCamel = 2;\n+    int _lowerCamelLeadingUnderscore = 3;\n+    int _UpperCamelLeadingUnderscore = 4;\n+    int lower_words = 5;\n+    int UPPER_WORDS = 6;\n+    @SerializedName(\"annotatedName\") int annotated = 7;\n+  }\n+}", "timestamp": 1321852103, "metainfo": ""}