{"sha": "60ef777efcf683f28b33497995d6746bfe13bf45", "log": "Fixed custom serilization invocation to correctly handle nulls returned by custom serializer.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n     objTypePair = pair.getSecond();\n     start(objTypePair);\n     try {\n-      return serializer.serialize(objTypePair.getObject(), objTypePair.getType(), context);\n+      JsonElement element = \n+        serializer.serialize(objTypePair.getObject(), objTypePair.getType(), context);\n+      return element == null ? JsonNull.createJsonNull() : element;\n     } finally {\n       end(objTypePair);\n     }\n--- a/gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java\n \n package com.google.gson.functional;\n \n+import java.lang.reflect.Type;\n+\n+import junit.framework.TestCase;\n+\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonArray;\n import com.google.gson.JsonElement;\n import com.google.gson.JsonObject;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n import com.google.gson.common.TestTypes.Base;\n import com.google.gson.common.TestTypes.BaseSerializer;\n import com.google.gson.common.TestTypes.ClassWithBaseArrayField;\n import com.google.gson.common.TestTypes.ClassWithBaseField;\n import com.google.gson.common.TestTypes.Sub;\n import com.google.gson.common.TestTypes.SubSerializer;\n-\n-import junit.framework.TestCase;\n \n /**\n  * Functional Test exercising custom serialization only.  When test applies to both \n      JsonObject base = json.get(\"base\").getAsJsonObject();\n      assertEquals(BaseSerializer.NAME, base.get(Base.SERIALIZER_KEY).getAsString());\n    }\n+   \n+   public void testSerializerReturnsNull() {\n+     Gson gson = new GsonBuilder()\n+       .registerTypeAdapter(Base.class, new JsonSerializer<Base>() {\n+         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {\n+           return null;\n+         }         \n+       })\n+       .create();\n+       JsonElement json = gson.toJsonTree(new Base());       \n+       System.out.println(json);\n+       assertTrue(json.isJsonNull());\n+   }\n }", "timestamp": 1255102085, "metainfo": ""}