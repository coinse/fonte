{"sha": "de6af4411ba1179bcbaec48fdbbbcfadf7f8d04d", "log": "Minor fixes.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n \n /**\n  * A visitor that adds JSON elements corresponding to each field of an object\n- * \n+ *\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n     objTypePair = pair.getSecond();\n     start(objTypePair);\n     try {\n-      JsonElement element = \n-        serializer.serialize(objTypePair.getObject(), objTypePair.getType(), context);\n+      JsonElement element =\n+          serializer.serialize(objTypePair.getObject(), objTypePair.getType(), context);\n       return element == null ? JsonNull.createJsonNull() : element;\n     } finally {\n       end(objTypePair);\n--- a/gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java\n \n package com.google.gson.functional;\n \n-import java.lang.reflect.Type;\n-\n-import junit.framework.TestCase;\n-\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonArray;\n import com.google.gson.common.TestTypes.Sub;\n import com.google.gson.common.TestTypes.SubSerializer;\n \n+import junit.framework.TestCase;\n+\n+import java.lang.reflect.Type;\n+\n /**\n- * Functional Test exercising custom serialization only.  When test applies to both \n+ * Functional Test exercising custom serialization only.  When test applies to both\n  * serialization and deserialization then add it to CustomTypeAdapterTest.\n  *\n  * @author Inderjeet Singh\n  */\n public class CustomSerializerTest extends TestCase {\n-  \n+\n    public void testBaseClassSerializerInvokedForBaseClassFields() {\n      Gson gson = new GsonBuilder()\n-       .registerTypeAdapter(Base.class, new BaseSerializer())\n-       .registerTypeAdapter(Sub.class, new SubSerializer())\n-       .create();\n+         .registerTypeAdapter(Base.class, new BaseSerializer())\n+         .registerTypeAdapter(Sub.class, new SubSerializer())\n+         .create();\n      ClassWithBaseField target = new ClassWithBaseField(new Base());\n      JsonObject json = (JsonObject) gson.toJsonTree(target);\n      JsonObject base = json.get(\"base\").getAsJsonObject();\n \n    public void testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances() {\n      Gson gson = new GsonBuilder()\n-       .registerTypeAdapter(Base.class, new BaseSerializer())\n-       .registerTypeAdapter(Sub.class, new SubSerializer())\n-       .create();\n+         .registerTypeAdapter(Base.class, new BaseSerializer())\n+         .registerTypeAdapter(Sub.class, new SubSerializer())\n+         .create();\n      ClassWithBaseField target = new ClassWithBaseField(new Sub());\n      JsonObject json = (JsonObject) gson.toJsonTree(target);\n      JsonObject base = json.get(\"base\").getAsJsonObject();\n \n    public void testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances() {\n      Gson gson = new GsonBuilder()\n-       .registerTypeAdapter(Base.class, new BaseSerializer())\n-       .registerTypeAdapter(Sub.class, new SubSerializer())\n-       .create();\n+         .registerTypeAdapter(Base.class, new BaseSerializer())\n+         .registerTypeAdapter(Sub.class, new SubSerializer())\n+         .create();\n      ClassWithBaseArrayField target = new ClassWithBaseArrayField(new Base[] {new Sub(), new Sub()});\n      JsonObject json = (JsonObject) gson.toJsonTree(target);\n      JsonArray array = json.get(\"base\").getAsJsonArray();\n       assertEquals(SubSerializer.NAME, serializerKey.getAsString());\n      }\n    }\n-    \n+\n    public void testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances() {\n      Gson gson = new GsonBuilder()\n-       .registerTypeAdapter(Base.class, new BaseSerializer())\n-       .create();\n+         .registerTypeAdapter(Base.class, new BaseSerializer())\n+         .create();\n      ClassWithBaseField target = new ClassWithBaseField(new Sub());\n      JsonObject json = (JsonObject) gson.toJsonTree(target);\n      JsonObject base = json.get(\"base\").getAsJsonObject();\n      assertEquals(BaseSerializer.NAME, base.get(Base.SERIALIZER_KEY).getAsString());\n    }\n-   \n+\n    public void testSerializerReturnsNull() {\n      Gson gson = new GsonBuilder()\n        .registerTypeAdapter(Base.class, new JsonSerializer<Base>() {\n          public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {\n            return null;\n-         }         \n+         }\n        })\n        .create();\n-       JsonElement json = gson.toJsonTree(new Base());       \n-       System.out.println(json);\n+       JsonElement json = gson.toJsonTree(new Base());\n        assertTrue(json.isJsonNull());\n    }\n }", "timestamp": 1255103030, "metainfo": ""}