{"sha": "efde6674e19612241740f8775ad5011f84b84c24", "log": "Test that GraphAdapterBuilder works with collections.", "commit": "\n--- a/extras/src/main/java/com/google/gson/graph/GraphAdapterBuilder.java\n+++ b/extras/src/main/java/com/google/gson/graph/GraphAdapterBuilder.java\n \n     void read(Graph graph) throws IOException {\n       if (graph.nextCreate != null) {\n-        throw new IllegalStateException(\"Unexpected recursive call to read()\");\n+        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\n       }\n       graph.nextCreate = this;\n       value = typeAdapter.fromJsonTree(element);\n--- a/extras/src/test/java/com/google/gson/graph/GraphAdapterBuilderTest.java\n+++ b/extras/src/test/java/com/google/gson/graph/GraphAdapterBuilderTest.java\n \n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n import junit.framework.TestCase;\n \n public final class GraphAdapterBuilderTest extends TestCase {\n     assertEquals(\"{'0x1':{'name':'ROCK','beats':'0x2'},\" +\n         \"'0x2':{'name':'SCISSORS','beats':'0x3'},\" +\n         \"'0x3':{'name':'PAPER','beats':'0x1'}}\",\n-        gson.toJson(rock).replace('\\\"', '\\''));\n+        gson.toJson(rock).replace('\"', '\\''));\n   }\n \n   public void testDeserialization() {\n     Gson gson = gsonBuilder.create();\n \n     assertEquals(\"{'0x1':{'name':'SUICIDE','beats':'0x1'}}\",\n-        gson.toJson(suicide).replace('\\\"', '\\''));\n+        gson.toJson(suicide).replace('\"', '\\''));\n   }\n \n   public void testDeserializationDirectSelfReference() {\n     assertSame(suicide, suicide.beats);\n   }\n \n+  public void testSerializeListOfLists() {\n+    Type listOfListsType = new TypeToken<List<List<?>>>() {}.getType();\n+    Type listOfAnyType = new TypeToken<List<?>>() {}.getType();\n+\n+    List<List<?>> listOfLists = new ArrayList<List<?>>();\n+    listOfLists.add(listOfLists);\n+    listOfLists.add(new ArrayList<Object>());\n+\n+    GsonBuilder gsonBuilder = new GsonBuilder();\n+    new GraphAdapterBuilder()\n+        .addType(listOfListsType)\n+        .addType(listOfAnyType)\n+        .registerOn(gsonBuilder);\n+    Gson gson = gsonBuilder.create();\n+\n+    String json = gson.toJson(listOfLists, listOfListsType);\n+    assertEquals(\"{'0x1':['0x1','0x2'],'0x2':[]}\", json.replace('\"', '\\''));\n+  }\n+\n+  public void testDeserializeListOfLists() {\n+    Type listOfAnyType = new TypeToken<List<?>>() {}.getType();\n+    Type listOfListsType = new TypeToken<List<List<?>>>() {}.getType();\n+\n+    GsonBuilder gsonBuilder = new GsonBuilder();\n+    new GraphAdapterBuilder()\n+        .addType(listOfListsType)\n+        .addType(listOfAnyType)\n+        .registerOn(gsonBuilder);\n+    Gson gson = gsonBuilder.create();\n+\n+    List<List<?>> listOfLists = gson.fromJson(\"{'0x1':['0x1','0x2'],'0x2':[]}\", listOfListsType);\n+    assertEquals(2, listOfLists.size());\n+    assertSame(listOfLists, listOfLists.get(0));\n+    assertEquals(Collections.emptyList(), listOfLists.get(1));\n+  }\n+\n   static class Roshambo {\n     String name;\n     Roshambo beats;", "timestamp": 1325432881, "metainfo": ""}