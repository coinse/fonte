{"sha": "b19e187bdda7765f008e0fcdcb4fd184bdd87e00", "log": "Minor improvements to TypeAdapter javadocs to promote the use of nullSafe.", "commit": "\n--- a/gson/src/main/java/com/google/gson/TypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/TypeAdapter.java\n  * too many values may cause the application to crash.\n  *\n  * <p>Type adapters should be prepared to read null from the stream and write it\n- * to the stream. If your {@code Gson} instance has been configured to {@link\n- * GsonBuilder#serializeNulls()}, these will be written to the final document.\n- * Otherwise the value (and the corresponding name when writing to a JSON\n- * object) will be omitted automatically. In either case your type adapter must\n- * handle null.\n+ * to the stream. Alternatively, they should use {@link #nullSafe()} method while\n+ * registering the type adapter with Gson. If your {@code Gson} instance\n+ * has been configured to {@link GsonBuilder#serializeNulls()}, these nulls will be\n+ * written to the final document. Otherwise the value (and the corresponding name\n+ * when writing to a JSON object) will be omitted automatically. In either case\n+ * your type adapter must handle null.\n  *\n  * <p>To use a custom type adapter with Gson, you must <i>register</i> it with a\n  * {@link GsonBuilder}: <pre>   {@code\n  *\n  *   GsonBuilder builder = new GsonBuilder();\n  *   builder.registerTypeAdapter(Point.class, new PointAdapter());\n+ *   // if PointAdapter didn't check for nulls in its read/write methods, you should instead use\n+ *   // builder.registerTypeAdapter(Point.class, new PointAdapter().nullSafe());\n  *   ...\n  *   Gson gson = builder.create();\n  * }</pre>\n  *\n  * <h3>JSON Conversion</h3>\n- * <p>Retrieve a type adapter from a {@code Gson} instance to deserialize a JSON\n- * document into a Java object: <pre>   {@code\n+ * <p>A type adapter registered with Gson is automatically invoked while serializing\n+ * or deserializing JSON. However, you can also use type adapters directly to serialize\n+ * and deserialize JSON. Here is an example for deserialization: <pre>   {@code\n  *\n  *   String json = \"{'origin':'0,0','points':['1,2','3,4']}\";\n  *   TypeAdapter<Graph> graphAdapter = gson.getAdapter(Graph.class);", "timestamp": 1323160339, "metainfo": ""}