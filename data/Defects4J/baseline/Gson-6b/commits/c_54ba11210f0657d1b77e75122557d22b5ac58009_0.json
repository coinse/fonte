{"sha": "54ba11210f0657d1b77e75122557d22b5ac58009", "log": "Added server-side dispatchers for REST and procedural calls Implemented the REST dispatcher.", "commit": "\n--- /dev/null\n+++ b/wsexample/definition/src/main/java/com/google/gson/example/service/ServicePaths.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.example.service;\n+\n+import com.google.gson.webservice.definition.CallPath;\n+\n+/**\n+ * An enum describing all paths for this service\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public enum ServicePaths {\n+  NULL_REQUEST(null),\n+  CART(\"/rest/cart\"),\n+  ORDER(\"/rest/order\");\n+  \n+  private final CallPath path;\n+\n+  private ServicePaths(String pathInfo) {\n+    this.path = new CallPath(pathInfo);\n+  }\n+\n+  public CallPath getCallPath() {\n+    return path;\n+  }\n+\n+  public static CallPath getCallPath(CallPath invokedPath) {\n+    for (ServicePaths path : values()) {\n+      CallPath callPath = path.path;\n+      String callPathInfo = callPath.get();\n+      // A rest path can end with a resource-id too.\n+      // For example, /rest/cart/1234 should match with /rest/cart\n+      if (callPathInfo != null && invokedPath.matches(callPath)) {\n+        return callPath;\n+      }\n+    }\n+    return null;\n+  }\n+}\n--- a/wsexample/server/src/main/java/com/google/gson/wsexample/server/MainServlet.java\n+++ b/wsexample/server/src/main/java/com/google/gson/wsexample/server/MainServlet.java\n  */\n package com.google.gson.wsexample.server;\n \n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n-import com.google.gson.example.model.Cart;\n-import com.google.gson.example.model.Order;\n-import com.google.gson.example.model.TypedKeys;\n-import com.google.gson.example.service.SampleJsonService;\n-import com.google.gson.webservice.definition.HeaderMap;\n-import com.google.gson.webservice.definition.procedural.RequestBody;\n-import com.google.gson.webservice.definition.procedural.RequestBodyGsonConverter;\n-import com.google.gson.webservice.definition.procedural.RequestSpec;\n-import com.google.gson.webservice.definition.procedural.ResponseBody;\n-import com.google.gson.webservice.definition.procedural.ResponseBodyGsonConverter;\n-import com.google.gson.webservice.definition.procedural.ResponseSpec;\n-import com.google.gson.webservice.definition.procedural.WebServiceCallSpec;\n-import com.google.gson.webservice.definition.procedural.WebServiceRequest;\n-import com.google.gson.webservice.definition.procedural.WebServiceResponse;\n-import com.google.gson.wsf.server.procedural.RequestReceiver;\n-import com.google.gson.wsf.server.procedural.ResponseSender;\n-\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+\n+import com.google.gson.webservice.definition.CallPath;\n \n /**\n  * An example servlet that receives JSON web-service requests\n  */\n @SuppressWarnings(\"serial\")\n public class MainServlet extends HttpServlet {\n+  private final RestDispatcher restDispatcher;\n+  private final ProcedureDispatcher procedureDispatcher;\n+\n+  public MainServlet() {\n+    this.restDispatcher = new RestDispatcher();\n+    this.procedureDispatcher = new ProcedureDispatcher();\n+  }\n+\n   @Override\n   public void service(HttpServletRequest req, HttpServletResponse res) {\n-    WebServiceCallSpec spec = SampleJsonService.PLACE_ORDER;\n-    RequestSpec requestSpec = spec.getRequestSpec();\n-    ResponseSpec responseSpec = spec.getResponseSpec();\n-    Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(RequestBody.class,\n-            new RequestBodyGsonConverter(requestSpec.getBodySpec()))\n-        .registerTypeAdapter(ResponseBody.class, \n-            new ResponseBodyGsonConverter(responseSpec.getBodySpec()))\n-        .create();\n-    RequestReceiver requestReceiver = new RequestReceiver(gson, requestSpec);\n-    WebServiceRequest webServiceRequest = requestReceiver.receive(req);\n-\n-    Cart cart = webServiceRequest.getBody().get(TypedKeys.RequestBody.CART);\n-    String authToken = webServiceRequest.getHeader(TypedKeys.Request.AUTH_TOKEN);\n-\n-    Order order = placeOrder(cart, authToken);\n-\n-    // Empty headers per the spec\n-    HeaderMap responseHeaders = new HeaderMap.Builder(responseSpec.getHeadersSpec()).build();\n-    ResponseBody responseBody = new ResponseBody.Builder(responseSpec.getBodySpec())\n-        .put(TypedKeys.ResponseBody.ORDER, order)\n-        .build();\n-    WebServiceResponse response = new WebServiceResponse(responseHeaders, responseBody);\n-    ResponseSender responseSender = new ResponseSender(gson);\n-    responseSender.send(res, response);\n-  }\n-  \n-  private Order placeOrder(Cart cart, String authToken) {\n-    // Create an order, in this case a dummy one.\n-    return new Order(cart, \"Order123\");\n+    String servletPath = req.getServletPath();\n+    int index = \"/wsexampleserver\".length();\n+    CallPath callPath = new CallPath(servletPath.substring(index));\n+    String path = callPath.get();\n+    if (path.startsWith(\"/rest\")) {\n+      restDispatcher.service(req, res, callPath);\n+    } else if (path.startsWith(\"/procedure\")) {\n+      procedureDispatcher.service(req, res);\n+    }\n   }\n }\n--- /dev/null\n+++ b/wsexample/server/src/main/java/com/google/gson/wsexample/server/ProcedureDispatcher.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.wsexample.server;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.example.model.Cart;\n+import com.google.gson.example.model.Order;\n+import com.google.gson.example.model.TypedKeys;\n+import com.google.gson.example.service.SampleJsonService;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.procedural.RequestBody;\n+import com.google.gson.webservice.definition.procedural.RequestBodyGsonConverter;\n+import com.google.gson.webservice.definition.procedural.RequestSpec;\n+import com.google.gson.webservice.definition.procedural.ResponseBody;\n+import com.google.gson.webservice.definition.procedural.ResponseBodyGsonConverter;\n+import com.google.gson.webservice.definition.procedural.ResponseSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceRequest;\n+import com.google.gson.webservice.definition.procedural.WebServiceResponse;\n+import com.google.gson.wsf.server.procedural.RequestReceiver;\n+import com.google.gson.wsf.server.procedural.ResponseSender;\n+\n+/**\n+ * A dispatcher for all the procedural calls\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public final class ProcedureDispatcher {\n+  public void service(HttpServletRequest req, HttpServletResponse res) {\n+    WebServiceCallSpec spec = SampleJsonService.PLACE_ORDER;\n+    RequestSpec requestSpec = spec.getRequestSpec();\n+    ResponseSpec responseSpec = spec.getResponseSpec();\n+    Gson gson = new GsonBuilder()\n+        .registerTypeAdapter(RequestBody.class,\n+            new RequestBodyGsonConverter(requestSpec.getBodySpec()))\n+        .registerTypeAdapter(ResponseBody.class, \n+            new ResponseBodyGsonConverter(responseSpec.getBodySpec()))\n+        .create();\n+    RequestReceiver requestReceiver = new RequestReceiver(gson, requestSpec);\n+    WebServiceRequest webServiceRequest = requestReceiver.receive(req);\n+\n+    Cart cart = webServiceRequest.getBody().get(TypedKeys.RequestBody.CART);\n+    String authToken = webServiceRequest.getHeader(TypedKeys.Request.AUTH_TOKEN);\n+\n+    Order order = placeOrder(cart, authToken);\n+\n+    // Empty headers per the spec\n+    HeaderMap responseHeaders = new HeaderMap.Builder(responseSpec.getHeadersSpec()).build();\n+    ResponseBody responseBody = new ResponseBody.Builder(responseSpec.getBodySpec())\n+        .put(TypedKeys.ResponseBody.ORDER, order)\n+        .build();\n+    WebServiceResponse response = new WebServiceResponse(responseHeaders, responseBody);\n+    ResponseSender responseSender = new ResponseSender(gson);\n+    responseSender.send(res, response);\n+  }\n+  \n+  private Order placeOrder(Cart cart, String authToken) {\n+    // Create an order, in this case a dummy one.\n+    return new Order(cart, \"Order123\");\n+  }\n+}\n--- /dev/null\n+++ b/wsexample/server/src/main/java/com/google/gson/wsexample/server/RestDispatcher.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.wsexample.server;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.example.model.Cart;\n+import com.google.gson.example.model.Order;\n+import com.google.gson.example.service.ServicePaths;\n+import com.google.gson.rest.definition.IDFactory;\n+import com.google.gson.rest.definition.MetaData;\n+import com.google.gson.rest.definition.ResourceMap;\n+import com.google.gson.rest.definition.RestCallSpec;\n+import com.google.gson.rest.definition.RestRequest;\n+import com.google.gson.rest.definition.RestResponse;\n+import com.google.gson.rest.definition.ValueBasedId;\n+import com.google.gson.rest.server.Repository;\n+import com.google.gson.rest.server.RepositoryInMemory;\n+import com.google.gson.rest.server.ResponseBuilderMap;\n+import com.google.gson.rest.server.RestRequestReceiver;\n+import com.google.gson.rest.server.RestResponseBuilder;\n+import com.google.gson.rest.server.RestResponseSender;\n+import com.google.gson.webservice.definition.CallPath;\n+\n+/**\n+ * A dispatcher for all the REST requests\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public final class RestDispatcher {\n+  private static final double CURRENT_VERSION = 1D;\n+  private final ResourceMap resourceMap;\n+  private final ResponseBuilderMap responseBuilders;\n+  private final RestCallSpec cartSpec;\n+  private final RestCallSpec orderSpec;\n+  private final Gson gson;\n+\n+  public RestDispatcher() {\n+    this.cartSpec = new RestCallSpec.Builder(ServicePaths.CART.getCallPath(), Cart.class)\n+      .setVersion(CURRENT_VERSION)\n+      .build();\n+    this.orderSpec = new RestCallSpec.Builder(ServicePaths.CART.getCallPath(), Cart.class)\n+      .setVersion(CURRENT_VERSION)\n+      .build(); \n+    this.resourceMap = new ResourceMap.Builder()\n+      .set(ServicePaths.CART.getCallPath(), cartSpec)\n+      .set(ServicePaths.ORDER.getCallPath(), orderSpec)\n+      .build();\n+    gson = new GsonBuilder()\n+      .setVersion(CURRENT_VERSION)\n+      .registerTypeAdapter(ValueBasedId.class, new ValueBasedId.GsonTypeAdapter())\n+      .registerTypeAdapter(MetaData.class, new MetaData.GsonTypeAdapter())\n+      .create();\n+    Repository<ValueBasedId<Cart>, Cart> carts =\n+      new RepositoryInMemory<ValueBasedId<Cart>, Cart>(ValueBasedId.class, Cart.class);\n+    Repository<ValueBasedId<Order>, Order> orders =\n+      new RepositoryInMemory<ValueBasedId<Order>, Order>(ValueBasedId.class, Order.class);\n+    responseBuilders = new ResponseBuilderMap.Builder()\n+        .set(cartSpec.getResourceType(), new RestResponseBuilder<ValueBasedId<Cart>, Cart>(carts))\n+        .set(orderSpec.getResourceType(), new RestResponseBuilder<ValueBasedId<Order>, Order>(orders))\n+        .build();\n+  }\n+\n+  public IDFactory<ValueBasedId<?>> getIDFactory(RestCallSpec callSpec) {\n+    return new IDFactory<ValueBasedId<?>>(ValueBasedId.class, callSpec.getResourceType());\n+  }\n+\n+  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+  public RestRequest getRestRequest(Gson gson, RestCallSpec callSpec, CallPath callPath,\n+      HttpServletRequest request, IDFactory<ValueBasedId<?>> idFactory) {\n+    RestRequestReceiver requestReceiver = new RestRequestReceiver(gson, callSpec.getRequestSpec());\n+    return requestReceiver.receive(request, idFactory.createId(callPath.getResourceId()));\n+  }\n+\n+  public void service(HttpServletRequest req, HttpServletResponse res, CallPath callPath) {\n+    RestCallSpec callSpec = resourceMap.get(callPath).createCopy(callPath);\n+    @SuppressWarnings(\"rawtypes\")\n+    RestRequestReceiver requestReceiver = new RestRequestReceiver(gson, callSpec.getRequestSpec());\n+    IDFactory<ValueBasedId<?>> idFactory = getIDFactory(callSpec);\n+    RestRequest<?, ?> restRequest = getRestRequest(gson, callSpec, callPath, req, idFactory);\n+    RestResponse.Builder response = new RestResponse.Builder(callSpec.getResponseSpec());\n+    RestResponseBuilder responseBuilder = responseBuilders.get(callSpec.getResourceType());\n+    responseBuilder.buildResponse(callSpec, restRequest, response);\n+    RestResponse restResponse = response.build();\n+    RestResponseSender responseSender = new RestResponseSender(gson);\n+    responseSender.send(res, restResponse);\n+  }\n+}\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/rest/server/ResponseBuilderMap.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.server;\n+\n+import java.lang.reflect.Type;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.gson.rest.definition.ID;\n+import com.google.gson.rest.definition.RestCallSpec;\n+import com.google.gson.rest.definition.RestResource;\n+\n+/**\n+ * A map of {@link RestCallSpec}, {@link RestResponseBuilder} to help figure out which\n+ * {@link RestResponseBuilder} to use for a {@link RestCallSpec}.\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public final class ResponseBuilderMap {\n+  public static final class Builder {\n+    private final Map<Type, RestResponseBuilder<?, ?>> map =\n+      new HashMap<Type, RestResponseBuilder<?, ?>>();\n+    \n+    public <I extends ID, R extends RestResource<I, R>> Builder set(\n+        Type resourceType, RestResponseBuilder<I, R> responseBuilder) {\n+      map.put(resourceType, responseBuilder);\n+      return this;\n+    }\n+\n+    public ResponseBuilderMap build() {\n+      return new ResponseBuilderMap(map);\n+    }\n+  }\n+\n+  private final Map<Type, RestResponseBuilder<?, ?>> map;\n+\n+  public ResponseBuilderMap(Map<Type, RestResponseBuilder<?, ?>> map) {\n+    this.map = map;\n+  }\n+  \n+  public RestResponseBuilder<?, ?> get(Type resourceType) {\n+    return (RestResponseBuilder<?, ?>)map.get(resourceType);\n+  }\n+}\n--- a/wsf/src/main/java/com/google/gson/rest/server/RestResponseBuilder.java\n+++ b/wsf/src/main/java/com/google/gson/rest/server/RestResponseBuilder.java\n import com.google.gson.rest.definition.RestResponse;\n import com.google.gson.webservice.definition.HttpMethod;\n \n-public abstract class RestResponseBuilder<I extends ID, R extends RestResource<I, R>> {\n+public class RestResponseBuilder<I extends ID, R extends RestResource<I, R>> {\n   protected final Repository<I, R> resources;\n \n   public RestResponseBuilder(Repository<I, R> resources) {", "timestamp": 1289496092, "metainfo": ""}