{"sha": "882c14a36782889b54fc284c43e386252ae2de23", "log": "Added support in Gson for serializing/deserializing from primitive char. Created a new class for character/char tests, PrimitiveCharacterTest. This is the start of breaking down PrimitiveTest into smaller chunks. When MiniGson can not find a type adapter for a type, revised the message to say can't handle instead of can't serialize.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n     map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n \n     // Add primitive serializers\n+    map.register(char.class, CHARACTER_TYPE_ADAPTER, true);\n     map.register(Character.class, CHARACTER_TYPE_ADAPTER, true);\n     map.register(Number.class, NUMBER_TYPE_ADAPTER, true);\n \n     map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n \n     // Add primitive deserializers\n+    map.register(char.class, wrapDeserializer(CHARACTER_TYPE_ADAPTER), true);\n     map.register(Character.class, wrapDeserializer(CHARACTER_TYPE_ADAPTER), true);\n     map.register(Number.class, NUMBER_TYPE_ADAPTER, true);\n \n--- a/gson/src/main/java/com/google/gson/internal/bind/MiniGson.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/MiniGson.java\n           return candidate;\n         }\n       }\n-      throw new IllegalArgumentException(\"This MiniGSON cannot serialize \" + type);\n+      throw new IllegalArgumentException(\"This MiniGSON cannot handle \" + type);\n     } finally {\n       threadCalls.remove(type);\n     }\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import junit.framework.TestCase;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Functional tests for Java Character values.\n+ *\n+ * @author Inderjeet Singh\n+ * @author Joel Leitch\n+ */\n+public class PrimitiveCharacterTest extends TestCase {\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new Gson();\n+  }\n+\n+  public void testPrimitiveCharacterAutoboxedSerialization() {\n+    assertEquals(\"\\\"A\\\"\", gson.toJson('A'));\n+    assertEquals(\"\\\"A\\\"\", gson.toJson('A', char.class));\n+    assertEquals(\"\\\"A\\\"\", gson.toJson('A', Character.class));\n+  }\n+\n+  public void testPrimitiveCharacterAutoboxedDeserialization() {\n+    char expected = 'a';\n+    char actual = gson.fromJson(\"a\", char.class);\n+    assertEquals(expected, actual);\n+\n+    actual = gson.fromJson(\"\\\"a\\\"\", char.class);\n+    assertEquals(expected, actual);\n+\n+    actual = gson.fromJson(\"a\", Character.class);\n+    assertEquals(expected, actual);\n+  }\n+}", "timestamp": 1316152352, "metainfo": ""}