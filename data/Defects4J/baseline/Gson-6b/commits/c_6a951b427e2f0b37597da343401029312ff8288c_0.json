{"sha": "6a951b427e2f0b37597da343401029312ff8288c", "log": "Adding new tests (two of which are disabled, but prepping for 1.7).", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/EnumTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/EnumTest.java\n \n package com.google.gson.functional;\n \n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.common.MoreAsserts;\n+import com.google.gson.reflect.TypeToken;\n+\n+import junit.framework.TestCase;\n+\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.EnumSet;\n import java.util.Set;\n-\n-import junit.framework.TestCase;\n-\n-import com.google.gson.Gson;\n-import com.google.gson.common.MoreAsserts;\n-import com.google.gson.reflect.TypeToken;\n \n /**\n  * Functional tests for Java 5.0 enums.\n  * @author Joel Leitch\n  */\n public class EnumTest extends TestCase {\n-  \n+\n   private Gson gson;\n-  \n+\n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n     gson = new Gson();\n   }\n-  \n+\n   public void testTopLevelEnumSerialization() throws Exception {\n     String result = gson.toJson(MyEnum.VALUE1);\n     assertEquals('\"' + MyEnum.VALUE1.toString() + '\"', result);\n   }\n-  \n+\n   public void testTopLevelEnumDeserialization() throws Exception {\n     MyEnum result = gson.fromJson('\"' + MyEnum.VALUE1.toString() + '\"', MyEnum.class);\n     assertEquals(MyEnum.VALUE1, result);\n   }\n-  \n+\n   public void testTopLevelEnumInASingleElementArrayDeserialization() {\n     String json = \"[\" + MyEnum.VALUE1.getExpectedJson() + \"]\";\n     MyEnum target = gson.fromJson(json, MyEnum.class);\n     assertEquals(MyEnum.VALUE1,target.value1);\n     assertEquals(MyEnum.VALUE2,target.value2);\n   }\n-  \n+\n   private static enum MyEnum {\n     VALUE1, VALUE2;\n \n    * Test for issue 226.\n    */\n   public void testEnumSubclass() {\n+    assertRoshambo();\n+  }\n+\n+  public void disabled_testEnumSubclassWithRegisteredTypeAdapter() {\n+    gson = new GsonBuilder()\n+        .registerTypeHierarchyAdapter(Roshambo.class, new MyEnumTypeAdapter())\n+        .create();\n+    assertRoshambo();\n+  }\n+\n+  private void assertRoshambo() {\n     assertFalse(Roshambo.class == Roshambo.ROCK.getClass());\n     assertEquals(\"\\\"ROCK\\\"\", gson.toJson(Roshambo.ROCK));\n     assertEquals(\"[\\\"ROCK\\\",\\\"PAPER\\\",\\\"SCISSORS\\\"]\", gson.toJson(EnumSet.allOf(Roshambo.class)));\n         gson.fromJson(\"[\\\"ROCK\\\",\\\"PAPER\\\",\\\"SCISSORS\\\"]\", new TypeToken<Set<Roshambo>>() {}.getType()));\n   }\n \n-  private enum Roshambo {\n+  public enum Roshambo {\n     ROCK {\n       @Override Roshambo defeats() {\n         return SCISSORS;\n \n     abstract Roshambo defeats();\n   }\n+\n+  private static class MyEnumTypeAdapter\n+      implements JsonSerializer<Roshambo>, JsonDeserializer<Roshambo> {\n+    public JsonElement serialize(Roshambo src, Type typeOfSrc, JsonSerializationContext context) {\n+      return new JsonPrimitive(\"123\" + src.name());\n+    }\n+\n+    public Roshambo deserialize(JsonElement json, Type classOfT, JsonDeserializationContext context)\n+        throws JsonParseException {\n+      return Roshambo.valueOf(json.getAsString().substring(3));\n+    }\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java\n \n /**\n  * Functional test for Gson serialization and deserialization of\n+ * classes with type variables.\n+ *\n  * @author Joel Leitch\n  */\n public class TypeVariableTest extends TestCase {\n \n-  public void testSingle() throws Exception {\n+  public void disabled_testAdvancedTypeVariables() throws Exception {\n     Gson gson = new Gson();\n-    Bar bar1 = new Bar(\"someString\", 1);\n+    Bar bar1 = new Bar(\"someString\", 1, true);\n     ArrayList<Integer> arrayList = new ArrayList<Integer>();\n     arrayList.add(1);\n     arrayList.add(2);\n+    arrayList.add(3);\n     bar1.map.put(\"key1\", arrayList);\n     bar1.map.put(\"key2\", new ArrayList<Integer>());\n     String json = gson.toJson(bar1);\n     assertEquals(bar1, bar2);\n   }\n \n-  public static class Foo<S, T> {\n+  public void testBasicTypeVariables() throws Exception {\n+    Gson gson = new Gson();\n+    Blue blue1 = new Blue(true);\n+    String json = gson.toJson(blue1);\n+\n+    Blue blue2 = gson.fromJson(json, Blue.class);\n+    assertEquals(blue1, blue2);\n+  }\n+\n+  public static class Blue extends Red<Boolean> {\n+    public Blue() {\n+      super(false);\n+    }\n+\n+    public Blue(boolean value) {\n+      super(value);\n+    }\n+\n+    // Technically, we should implement hashcode too\n+    @Override\n+    public boolean equals(Object o) {\n+      if (!(o instanceof Blue)) {\n+        return false;\n+      } else {\n+        Blue blue = (Blue) o;\n+        return redField.equals(blue.redField);\n+\n+      }\n+    }\n+  }\n+\n+  public static class Red<S> {\n+    protected final S redField;\n+\n+    public Red(S redField) {\n+      this.redField = redField;\n+    }\n+  }\n+\n+  public static class Foo<S, T> extends Red<Boolean> {\n     private final S someSField;\n     private final T someTField;\n     public final Map<S, List<T>> map = new HashMap<S, List<T>>();\n \n-    public Foo(S sValue, T tValue) {\n+    public Foo(S sValue, T tValue, Boolean redField) {\n+      super(redField);\n       this.someSField = sValue;\n       this.someTField = tValue;\n     }\n \n+    // Technically, we should implement hashcode too\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n-    @Override\n     public boolean equals(Object o) {\n-      if (!(o instanceof Foo)) {\n+      if (!(o instanceof Foo<?, ?>)) {\n         return false;\n+      } else {\n+        Foo<S, T> realFoo = (Foo<S, T>) o;\n+        return redField.equals(realFoo.redField)\n+            && someTField.equals(realFoo.someTField)\n+            && someSField.equals(realFoo.someSField)\n+            && map.equals(realFoo.map);\n+\n       }\n-      Foo<S, T> realFoo = (Foo<S, T>) o;\n-      return someTField.equals(realFoo.someTField)\n-        && someSField.equals(realFoo.someSField)\n-        && map.equals(realFoo.map);\n     }\n   }\n \n   public static class Bar extends Foo<String, Integer> {\n     public Bar() {\n-      this(\"\", 0);\n+      this(\"\", 0, false);\n     }\n \n-    public Bar(String s, Integer i) {\n-      super(s, i);\n+    public Bar(String s, Integer i, boolean b) {\n+      super(s, i, b);\n     }\n   }\n }", "timestamp": 1288997864, "metainfo": ""}