{"sha": "c8c3a6965c5a1a01951452a25291e5a5944fa59a", "log": "Fix a regression that expects different type adapters for long.class and Long.class. This is a temporary fix; later we may want to always use the canonical wrapped class.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n    */\n   @SuppressWarnings(\"unchecked\")\n   public <T> T fromJson(String json, Class<T> classOfT) throws JsonParseException {\n-    Class<T> wrapped = Primitives.wrap(classOfT);\n-    Object object = fromJson(json, (Type) wrapped);\n-    return wrapped.cast(object);\n+    Object object = fromJson(json, (Type) classOfT);\n+    return Primitives.wrap(classOfT).cast(object);\n   }\n \n   /**\n    * @since 1.2\n    */\n   public <T> T fromJson(Reader json, Class<T> classOfT) throws JsonParseException {\n-    Class<T> wrapped = Primitives.wrap(classOfT);\n-    Object object = fromJson(new JsonReader(json), wrapped);\n-    return wrapped.cast(object);\n+    Object object = fromJson(new JsonReader(json), classOfT);\n+    return Primitives.wrap(classOfT).cast(object);\n   }\n \n   /**\n    * @since 1.3\n    */\n   public <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonParseException {\n-    Class<T> wrapped = Primitives.wrap(classOfT);\n-    Object object = fromJson(json, (Type) wrapped);\n-    return wrapped.cast(object);\n+    Object object = fromJson(json, (Type) classOfT);\n+    return Primitives.wrap(classOfT).cast(object);\n   }\n \n   /**", "timestamp": 1288651580, "metainfo": ""}