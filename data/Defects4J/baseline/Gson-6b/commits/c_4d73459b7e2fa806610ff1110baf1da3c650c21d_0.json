{"sha": "4d73459b7e2fa806610ff1110baf1da3c650c21d", "log": "moved performance tests under the metrics package and replaced the invalid JSON string with \\n with a valid one.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/StringTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/StringTest.java\n package com.google.gson.functional;\n \n import com.google.gson.Gson;\n-import com.google.gson.JsonParseException;\n \n import junit.framework.TestCase;\n \n     String actual = gson.fromJson(\"[\\\"\" + value + \"\\\"]\", String.class);\n     assertEquals(value, actual);\n   }\n-\n-  public void testReallyLongStringsDeserialization() throws Exception {\n-    StringBuilder sb = new StringBuilder(8096);\n-    sb.append(\"Once upon a time there was a really long string that caused a StackOverFlowError\\n\");\n-    sb.append(\"and now it is fixed and instead throws a JsonParserException.....Yippie!!!\\n\");\n-    sb.append(\"Wow....that is a really long string that is meant to be an exception stack trace, \");\n-    sb.append(\"but is not :( \\n\\n\\n\\n\\n\\n.\");\n-    sb.append(\"lalalalala \\n\\n\\n.\");\n-    sb.append(\"C'est la vie!!! \\n\\n\\n\\n\\n\");\n-\n-    for (int i = 0; i < 10; i++) {\n-      sb.append(sb.toString());\n-    }\n-\n-    while (true) {\n-      try {\n-        String stackTrace = sb.toString();\n-        sb.append(stackTrace);\n-        String json = \"{\\\"message\\\":\\\"Error message.\\\",\"\n-          + \"\\\"stackTrace\\\":\\\"\" + stackTrace + \"\\\"}\";\n-        parseLongJson(json);\n-      } catch (JsonParseException expected) {\n-        break;\n-      }\n-    }\n-  }\n-  \n-  private void parseLongJson(String json) throws JsonParseException {\n-    ExceptionHolder target = gson.fromJson(json, ExceptionHolder.class);\n-    assertTrue(target.message.contains(\"Error\"));\n-    assertTrue(target.stackTrace.contains(\"Yippie\"));\n-  }\n-\n-  private static class ExceptionHolder {\n-    public final String message;\n-    public final String stackTrace;\n-    public ExceptionHolder() {\n-      this(\"\", \"\");\n-    }\n-    public ExceptionHolder(String message, String stackTrace) {\n-      this.message = message;\n-      this.stackTrace = stackTrace;\n-    }\n-  }\n }\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java\n+package com.google.gson.metrics;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests to measure performance for Gson. All tests in this file will be disabled in code. To run\n+ * them remove disabled_ prefix from the tests and run them.\n+ * \n+ * @author Inderjeet Singh\n+ * @author Joel Leitch\n+ */\n+public class PerformanceTest extends TestCase {\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new Gson();\n+  }\n+  \n+  public void testDummy() {    \n+    // This is here to prevent Junit for complaining when we disable all tests.\n+  }\n+\n+  public void disabled_testStringDeserializationPerformance() {    \n+    StringBuilder sb = new StringBuilder(8096);\n+    sb.append(\"Error Yippie\");\n+\n+    while (true) {\n+      try {\n+        String stackTrace = sb.toString();\n+        sb.append(stackTrace);\n+        String json = \"{\\\"message\\\":\\\"Error message.\\\",\" + \"\\\"stackTrace\\\":\\\"\" + stackTrace + \"\\\"}\";\n+        parseLongJson(json);\n+        System.out.println(\"Gson could handle a string of size: \" + stackTrace.length());\n+      } catch (JsonParseException expected) {\n+        break;\n+      }\n+    }\n+  }\n+  \n+  private void parseLongJson(String json) throws JsonParseException {\n+    ExceptionHolder target = gson.fromJson(json, ExceptionHolder.class);\n+    assertTrue(target.message.contains(\"Error\"));\n+    assertTrue(target.stackTrace.contains(\"Yippie\"));\n+  }\n+\n+  private static class ExceptionHolder {\n+    public final String message;\n+    public final String stackTrace;\n+    public ExceptionHolder() {\n+      this(\"\", \"\");\n+    }\n+    public ExceptionHolder(String message, String stackTrace) {\n+      this.message = message;\n+      this.stackTrace = stackTrace;\n+    }\n+  }\n+}", "timestamp": 1223680947, "metainfo": ""}