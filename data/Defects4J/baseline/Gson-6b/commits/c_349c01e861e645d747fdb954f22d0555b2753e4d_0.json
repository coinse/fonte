{"sha": "349c01e861e645d747fdb954f22d0555b2753e4d", "log": "JsonElementWriter NaN, -Infinity, Infinity", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/JsonElementWriter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonElementWriter.java\n   }\n \n   @Override public JsonWriter value(double value) throws IOException {\n+    if (!isLenient() && (Double.isNaN(value) || Double.isInfinite(value))) {\n+      throw new IllegalArgumentException(\"JSON forbids NaN and infinities: \" + value);\n+    }\n     put(new JsonPrimitive(value));\n     return this;\n   }\n     if (value == null) {\n       return nullValue();\n     }\n+\n+    if (!isLenient()) {\n+      double d = value.doubleValue();\n+      if (Double.isNaN(d) || Double.isInfinite(d)) {\n+        throw new IllegalArgumentException(\"JSON forbids NaN and infinities: \" + value);\n+      }\n+    }\n+\n     put(new JsonPrimitive(value));\n     return this;\n   }\n--- a/gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java\n+++ b/gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java\n \n package com.google.gson.internal.bind;\n \n+import com.google.gson.JsonNull;\n import java.io.IOException;\n import junit.framework.TestCase;\n \n public final class JsonElementWriterTest extends TestCase {\n \n-  // TODO: more tests\n   // TODO: figure out what should be returned by an empty writer\n \n   public void testArray() throws IOException {\n     writer.endObject();\n     assertEquals(\"{\\\"A\\\":null}\", writer.get().toString());\n   }\n+\n+  public void testEmptyWriter() {\n+    JsonElementWriter writer = new JsonElementWriter();\n+    assertEquals(JsonNull.INSTANCE, writer.get());\n+  }\n+\n+  public void testLenientNansAndInfinities() throws IOException {\n+    JsonElementWriter writer = new JsonElementWriter();\n+    writer.setLenient(true);\n+    writer.beginArray();\n+    writer.value(Double.NaN);\n+    writer.value(Double.NEGATIVE_INFINITY);\n+    writer.value(Double.POSITIVE_INFINITY);\n+    writer.endArray();\n+    assertEquals(\"[NaN,-Infinity,Infinity]\", writer.get().toString());\n+  }\n+\n+  public void testStrictNansAndInfinities() throws IOException {\n+    JsonElementWriter writer = new JsonElementWriter();\n+    writer.setLenient(false);\n+    writer.beginArray();\n+    try {\n+      writer.value(Double.NaN);\n+      fail();\n+    } catch (IllegalArgumentException expected) {\n+    }\n+    try {\n+      writer.value(Double.NEGATIVE_INFINITY);\n+      fail();\n+    } catch (IllegalArgumentException expected) {\n+    }\n+    try {\n+      writer.value(Double.POSITIVE_INFINITY);\n+      fail();\n+    } catch (IllegalArgumentException expected) {\n+    }\n+  }\n+\n+  public void testStrictBoxedNansAndInfinities() throws IOException {\n+    JsonElementWriter writer = new JsonElementWriter();\n+    writer.setLenient(false);\n+    writer.beginArray();\n+    try {\n+      writer.value(new Double(Double.NaN));\n+      fail();\n+    } catch (IllegalArgumentException expected) {\n+    }\n+    try {\n+      writer.value(new Double(Double.NEGATIVE_INFINITY));\n+      fail();\n+    } catch (IllegalArgumentException expected) {\n+    }\n+    try {\n+      writer.value(new Double(Double.POSITIVE_INFINITY));\n+      fail();\n+    } catch (IllegalArgumentException expected) {\n+    }\n+  }\n }", "timestamp": 1317429351, "metainfo": ""}