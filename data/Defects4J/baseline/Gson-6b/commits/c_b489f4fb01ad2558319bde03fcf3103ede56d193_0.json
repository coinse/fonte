{"sha": "b489f4fb01ad2558319bde03fcf3103ede56d193", "log": "marked default type adapters as final classes", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n     return DEFAULT_INSTANCE_CREATORS;\n   }\n \n-  static class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n+  static final class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n     private final DateFormat enUsFormat;\n     private final DateFormat localFormat;\n     private final DateFormat iso8601Format;\n           DateFormat.getDateTimeInstance(dateStyle, timeStyle));\n     }\n \n-    public DefaultDateTypeAdapter(DateFormat enUsFormat, DateFormat localFormat) {\n+    DefaultDateTypeAdapter(DateFormat enUsFormat, DateFormat localFormat) {\n       this.enUsFormat = enUsFormat;\n       this.localFormat = localFormat;\n       this.iso8601Format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.US);\n     }\n   }\n \n-  static class DefaultJavaSqlDateTypeAdapter implements JsonSerializer<java.sql.Date>,\n+  static final class DefaultJavaSqlDateTypeAdapter implements JsonSerializer<java.sql.Date>,\n       JsonDeserializer<java.sql.Date> {\n     private final DateFormat format;\n     DefaultJavaSqlDateTypeAdapter() {\n     }\n   }\n \n-  static class DefaultTimestampDeserializer implements JsonDeserializer<Timestamp> {\n+  static final class DefaultTimestampDeserializer implements JsonDeserializer<Timestamp> {\n     public Timestamp deserialize(JsonElement json, Type typeOfT,\n         JsonDeserializationContext context) throws JsonParseException {\n       Date date = context.deserialize(json, Date.class);\n     }\n   }\n \n-  static class DefaultTimeTypeAdapter implements JsonSerializer<Time>, JsonDeserializer<Time> {\n+  static final class DefaultTimeTypeAdapter implements JsonSerializer<Time>, JsonDeserializer<Time> {\n     private final DateFormat format;\n     DefaultTimeTypeAdapter() {\n       this.format = new SimpleDateFormat(\"hh:mm:ss a\");\n     }\n   }\n \n-  private static class GregorianCalendarTypeAdapter\n+  private static final class GregorianCalendarTypeAdapter\n       implements JsonSerializer<GregorianCalendar>, JsonDeserializer<GregorianCalendar> {\n \n     private static final String YEAR = \"year\";\n     }\n   }\n \n-  static class DefaultInetAddressAdapter\n+  static final class DefaultInetAddressAdapter\n       implements JsonDeserializer<InetAddress>, JsonSerializer<InetAddress> {\n \n     public InetAddress deserialize(JsonElement json, Type typeOfT,\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  private static class EnumTypeAdapter<T extends Enum<T>>\n+  private static final class EnumTypeAdapter<T extends Enum<T>>\n       implements JsonSerializer<T>, JsonDeserializer<T> {\n     public JsonElement serialize(T src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.name());\n     }\n   }\n \n-  private static class UrlTypeAdapter implements JsonSerializer<URL>, JsonDeserializer<URL> {\n+  private static final class UrlTypeAdapter implements JsonSerializer<URL>, JsonDeserializer<URL> {\n     public JsonElement serialize(URL src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.toExternalForm());\n     }\n     }\n   }\n \n-  private static class UriTypeAdapter implements JsonSerializer<URI>, JsonDeserializer<URI> {\n+  private static final class UriTypeAdapter implements JsonSerializer<URI>, JsonDeserializer<URI> {\n     public JsonElement serialize(URI src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.toASCIIString());\n     }\n     }\n   }\n \n-  private static class UuidTypeAdapter implements JsonSerializer<UUID>, JsonDeserializer<UUID> {\n+  private static final class UuidTypeAdapter implements JsonSerializer<UUID>, JsonDeserializer<UUID> {\n     public JsonElement serialize(UUID src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.toString());\n     }\n     }\n   }\n \n-  private static class LocaleTypeAdapter\n+  private static final class LocaleTypeAdapter\n       implements JsonSerializer<Locale>, JsonDeserializer<Locale> {\n     public JsonElement serialize(Locale src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.toString());\n   }\n \n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-  private static class CollectionTypeAdapter implements JsonSerializer<Collection>,\n+  private static final class CollectionTypeAdapter implements JsonSerializer<Collection>,\n       JsonDeserializer<Collection>, InstanceCreator<Collection> {\n     public JsonElement serialize(Collection src, Type typeOfSrc, JsonSerializationContext context) {\n       if (src == null) {\n   }\n \n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-  static class MapTypeAdapter implements JsonSerializer<Map>, JsonDeserializer<Map>,\n+  static final class MapTypeAdapter implements JsonSerializer<Map>, JsonDeserializer<Map>,\n       InstanceCreator<Map> {\n \n     public JsonElement serialize(Map src, Type typeOfSrc, JsonSerializationContext context) {\n     }\n   }\n \n-  private static class BigDecimalTypeAdapter\n+  private static final class BigDecimalTypeAdapter\n       implements JsonSerializer<BigDecimal>, JsonDeserializer<BigDecimal> {\n     public JsonElement serialize(BigDecimal src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n   }\n \n-  private static class BigIntegerTypeAdapter\n+  private static final class BigIntegerTypeAdapter\n       implements JsonSerializer<BigInteger>, JsonDeserializer<BigInteger> {\n \n     public JsonElement serialize(BigInteger src, Type typeOfSrc, JsonSerializationContext context) {\n     }\n   }\n \n-  private static class NumberTypeAdapter\n+  private static final class NumberTypeAdapter\n       implements JsonSerializer<Number>, JsonDeserializer<Number> {\n     public JsonElement serialize(Number src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n   }\n \n-  private static class LongSerializer implements JsonSerializer<Long> {\n+  private static final class LongSerializer implements JsonSerializer<Long> {\n     private final LongSerializationPolicy longSerializationPolicy;\n \n     private LongSerializer(LongSerializationPolicy longSerializationPolicy) {\n     }\n   }\n \n-  private static class LongDeserializer implements JsonDeserializer<Long> {\n+  private static final class LongDeserializer implements JsonDeserializer<Long> {\n     public Long deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       try {\n     }\n   }\n \n-  private static class IntegerTypeAdapter\n+  private static final class IntegerTypeAdapter\n       implements JsonSerializer<Integer>, JsonDeserializer<Integer> {\n     public JsonElement serialize(Integer src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n   }\n \n-  private static class ShortTypeAdapter\n+  private static final class ShortTypeAdapter\n       implements JsonSerializer<Short>, JsonDeserializer<Short> {\n     public JsonElement serialize(Short src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n   }\n \n-  private static class ByteTypeAdapter implements JsonSerializer<Byte>, JsonDeserializer<Byte> {\n+  private static final class ByteTypeAdapter implements JsonSerializer<Byte>, JsonDeserializer<Byte> {\n     public JsonElement serialize(Byte src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n     }\n   }\n \n-  static class FloatSerializer implements JsonSerializer<Float> {\n+  static final class FloatSerializer implements JsonSerializer<Float> {\n     private final boolean serializeSpecialFloatingPointValues;\n \n     FloatSerializer(boolean serializeSpecialDoubleValues) {\n     }\n   }\n \n-  private static class FloatDeserializer implements JsonDeserializer<Float> {\n+  private static final class FloatDeserializer implements JsonDeserializer<Float> {\n     public Float deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       try {\n     }\n   }\n \n-  static class DoubleSerializer implements JsonSerializer<Double> {\n+  static final class DoubleSerializer implements JsonSerializer<Double> {\n     private final boolean serializeSpecialFloatingPointValues;\n \n     DoubleSerializer(boolean serializeSpecialDoubleValues) {\n     }\n   }\n \n-  private static class DoubleDeserializer implements JsonDeserializer<Double> {\n+  private static final class DoubleDeserializer implements JsonDeserializer<Double> {\n     public Double deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       try {\n     }\n   }\n \n-  private static class CharacterTypeAdapter\n+  private static final class CharacterTypeAdapter\n       implements JsonSerializer<Character>, JsonDeserializer<Character> {\n     public JsonElement serialize(Character src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n   }\n \n-  private static class StringTypeAdapter\n+  private static final class StringTypeAdapter\n       implements JsonSerializer<String>, JsonDeserializer<String> {\n     public JsonElement serialize(String src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n   }\n \n-  private static class StringBuilderTypeAdapter\n+  private static final class StringBuilderTypeAdapter\n       implements JsonSerializer<StringBuilder>, JsonDeserializer<StringBuilder> {\n     public JsonElement serialize(StringBuilder src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.toString());\n     }\n   }\n \n-  private static class StringBufferTypeAdapter\n+  private static final class StringBufferTypeAdapter\n       implements JsonSerializer<StringBuffer>, JsonDeserializer<StringBuffer> {\n     public JsonElement serialize(StringBuffer src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.toString());\n     }\n   }\n \n-  private static class BooleanTypeAdapter\n+  private static final class BooleanTypeAdapter\n       implements JsonSerializer<Boolean>, JsonDeserializer<Boolean> {\n     public JsonElement serialize(Boolean src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n   }\n \n-  private static class TreeSetCreator implements InstanceCreator<TreeSet<?>> {\n+  private static final class TreeSetCreator implements InstanceCreator<TreeSet<?>> {\n     public TreeSet<?> createInstance(Type type) {\n       return new TreeSet<Object>();\n     }\n     }\n   }\n \n-  private static class HashSetCreator implements InstanceCreator<HashSet<?>> {\n+  private static final class HashSetCreator implements InstanceCreator<HashSet<?>> {\n     public HashSet<?> createInstance(Type type) {\n       return new HashSet<Object>();\n     }", "timestamp": 1299882039, "metainfo": ""}