{"sha": "14ba59fa8858126dbe0c3e645a84c7de3bf2361a", "log": "code review fixes. Moved getFirstArgument() method from $Gson$Types to GsonTypesTest.", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java\n+++ b/gson/src/main/java/com/google/gson/internal/$Gson$Types.java\n     }\n   }\n \n-  /**\n-   * Given a parameterized type A&lt;B,C&gt;, returns B. If the specified type is not\n-   * a generic type, returns null.\n-   */\n-  public static Type getFirstTypeArgument(Type type) {\n-    try {\n-      if (!(type instanceof ParameterizedType)) return null;\n-      ParameterizedType ptype = (ParameterizedType) type;\n-      Type[] actualTypeArguments = ptype.getActualTypeArguments();\n-      if (actualTypeArguments.length == 0) return null;\n-      return canonicalize(actualTypeArguments[0]);\n-    } catch (Exception e) {\n-      return null;\n-    }\n-  }\n-\n   static Type resolveTypeVariable(Type context, Class<?> contextRawType, TypeVariable<?> unknown) {\n     Class<?> declaredByRaw = declaringClassOf(unknown);\n \n--- a/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java\n+++ b/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java\n     }\n   }\n \n-  class EntrySet extends AbstractSet<Entry<K, V>> {\n+  final class EntrySet extends AbstractSet<Entry<K, V>> {\n     @Override public int size() {\n       return size;\n     }\n     }\n   }\n \n-  class KeySet extends AbstractSet<K> {\n+  final class KeySet extends AbstractSet<K> {\n     @Override public int size() {\n       return size;\n     }\n--- a/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java\n+++ b/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java\n     }\n   }\n \n-  class KeySet extends AbstractSet<K> {\n+  final class KeySet extends AbstractSet<K> {\n     @Override public int size() {\n       return size;\n     }\n--- a/gson/src/test/java/com/google/gson/internal/GsonTypesTest.java\n+++ b/gson/src/test/java/com/google/gson/internal/GsonTypesTest.java\n \n package com.google.gson.internal;\n \n+import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n import java.util.List;\n \n   public void testNewParameterizedTypeWithoutOwner() {\n     // List<A>. List is a top-level class\n     Type type = $Gson$Types.newParameterizedTypeWithOwner(null, List.class, A.class);\n-    assertEquals(A.class, $Gson$Types.getFirstTypeArgument(type));\n+    assertEquals(A.class, getFirstTypeArgument(type));\n \n     // A<B>. A is a static inner class.\n     type = $Gson$Types.newParameterizedTypeWithOwner(null, A.class, B.class);\n-    assertEquals(B.class, $Gson$Types.getFirstTypeArgument(type));\n+    assertEquals(B.class, getFirstTypeArgument(type));\n \n     final class D {\n     }\n \n     // A<D> is allowed.\n     type = $Gson$Types.newParameterizedTypeWithOwner(null, A.class, D.class);\n-    assertEquals(D.class, $Gson$Types.getFirstTypeArgument(type));\n+    assertEquals(D.class, getFirstTypeArgument(type));\n   }\n \n   public void testGetFirstTypeArgument() {\n-    assertNull($Gson$Types.getFirstTypeArgument(A.class));\n+    assertNull(getFirstTypeArgument(A.class));\n \n     Type type = $Gson$Types.newParameterizedTypeWithOwner(null, A.class, B.class, C.class);\n-    assertEquals(B.class, $Gson$Types.getFirstTypeArgument(type));\n+    assertEquals(B.class, getFirstTypeArgument(type));\n   }\n \n   private static final class A {\n   }\n   private static final class C {\n   }\n+\n+  /**\n+   * Given a parameterized type A&lt;B,C&gt;, returns B. If the specified type is not\n+   * a generic type, returns null.\n+   */\n+  public static Type getFirstTypeArgument(Type type) {\n+    try {\n+      if (!(type instanceof ParameterizedType)) return null;\n+      ParameterizedType ptype = (ParameterizedType) type;\n+      Type[] actualTypeArguments = ptype.getActualTypeArguments();\n+      if (actualTypeArguments.length == 0) return null;\n+      return $Gson$Types.canonicalize(actualTypeArguments[0]);\n+    } catch (Exception e) {\n+      return null;\n+    }\n+  }\n+\n }", "timestamp": 1400520865, "metainfo": ""}