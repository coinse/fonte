{"sha": "ebf24fbda51cd8391791fb89499a6d732a36d835", "log": "Fixed issue 134 by adding support for java.sql Date and Timestamp classses.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.net.URL;\n+import java.sql.Timestamp;\n import java.text.DateFormat;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n final class DefaultTypeAdapters {\n \n   private static final DefaultDateTypeAdapter DATE_TYPE_ADAPTER = new DefaultDateTypeAdapter();\n+  private static final DefaultJavaSqlDateDeserializer JAVA_SQL_DATE_DESERIALIZER =\n+    new DefaultJavaSqlDateDeserializer();\n+  private static final DefaultTimestampDeserializer TIMESTAMP_DESERIALIZER =\n+    new DefaultTimestampDeserializer();\n \n   @SuppressWarnings(\"unchecked\")\n   private static final EnumTypeAdapter ENUM_TYPE_ADAPTER = new EnumTypeAdapter();\n     map.register(Collection.class, COLLECTION_TYPE_ADAPTER);\n     map.register(Map.class, MAP_TYPE_ADAPTER);\n     map.register(Date.class, DATE_TYPE_ADAPTER);\n+    map.register(Timestamp.class, DATE_TYPE_ADAPTER);\n+    map.register(java.sql.Date.class, DATE_TYPE_ADAPTER);\n     map.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\n     map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\n     map.register(BigDecimal.class, BIG_DECIMAL_TYPE_ADAPTER);\n     map.register(Collection.class, wrapDeserializer(COLLECTION_TYPE_ADAPTER));\n     map.register(Map.class, wrapDeserializer(MAP_TYPE_ADAPTER));\n     map.register(Date.class, wrapDeserializer(DATE_TYPE_ADAPTER));\n+    map.register(java.sql.Date.class, wrapDeserializer(JAVA_SQL_DATE_DESERIALIZER));\n+    map.register(Timestamp.class, wrapDeserializer(TIMESTAMP_DESERIALIZER));\n     map.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\n     map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\n     map.register(BigDecimal.class, wrapDeserializer(BIG_DECIMAL_TYPE_ADAPTER));\n     }\n   }\n \n+  static class DefaultJavaSqlDateDeserializer implements JsonDeserializer<java.sql.Date> {\n+    public java.sql.Date deserialize(JsonElement json, Type typeOfT,\n+        JsonDeserializationContext context) throws JsonParseException {\n+      Date date = context.deserialize(json, Date.class);\n+      return new java.sql.Date(date.getTime());\n+    }    \n+  }\n+\n+  static class DefaultTimestampDeserializer implements JsonDeserializer<Timestamp> {\n+    public Timestamp deserialize(JsonElement json, Type typeOfT,\n+        JsonDeserializationContext context) throws JsonParseException {\n+      Date date = context.deserialize(json, Date.class);\n+      return new Timestamp(date.getTime());\n+    }    \n+  }\n+\n   private static class GregorianCalendarTypeAdapter \n       implements JsonSerializer<GregorianCalendar>, JsonDeserializer<GregorianCalendar> {\n \n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n  */\n package com.google.gson.functional;\n \n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonParseException;\n+\n+import junit.framework.TestCase;\n+\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.net.URI;\n import java.net.URL;\n+import java.sql.Timestamp;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.Set;\n import java.util.UUID;\n \n-import junit.framework.TestCase;\n-\n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n-import com.google.gson.JsonParseException;\n-\n /**\n  * Functional test for Json serialization and deserialization for common classes for which default\n  * support is provided in Gson. The tests for Map types are available in {@link MapTest}.\n   }\n \n   public void testDefaultDateDeserialization() {\n-    Date date = new Date();\n-    String json = gson.toJson(date);\n+    String json = \"'Dec 13, 2009 07:18:02 AM'\";\n     Date extracted = gson.fromJson(json, Date.class);\n-    // Using comparison of string forms since the extracted date has lost the millisecond portion.\n-    assertEquals(date.toString(), extracted.toString());    \n+    assertEquals(extracted, 2009, 11, 13, 7, 18, 02);\n+  }\n+\n+  // Date can not directly be compared with another instance since the deserialization loses the\n+  // millisecond portion.\n+  @SuppressWarnings(\"deprecation\")\n+  private void assertEquals(Date date, int year, int month, int day, int hours, int minutes,\n+      int seconds) {\n+    assertEquals(year-1900, date.getYear());    \n+    assertEquals(month, date.getMonth());    \n+    assertEquals(day, date.getDate());\n+    if (!(date instanceof java.sql.Date)) { \n+      assertEquals(hours, date.getHours());    \n+      assertEquals(minutes, date.getMinutes());        \n+      assertEquals(seconds, date.getSeconds());\n+    }\n+  }\n+\n+  public void testDefaultJavaSqlDateSerialization() {\n+    long currentTimeMillis = System.currentTimeMillis();\n+    java.sql.Date now = new java.sql.Date(currentTimeMillis);\n+    String json = gson.toJson(now);\n+    assertEquals(\"\\\"\" + DateFormat.getDateTimeInstance().format(now) + \"\\\"\", json);\n+  }\n+\n+  @SuppressWarnings(\"deprecation\")\n+  public void testDefaultJavaSqlDateDeserialization() {\n+    String json = \"'Dec 3, 2009 1:18:02 PM'\";\n+    java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class);\n+    assertEquals(extracted, 2009, 11, 3, 13, 18, 02);\n+  }\n+  \n+  public void testDefaultJavaSqlTimestampSerialization() {\n+    long currentTimeMillis = System.currentTimeMillis();\n+    Timestamp now = new java.sql.Timestamp(currentTimeMillis);\n+    String json = gson.toJson(now);\n+    assertEquals(\"\\\"\" + DateFormat.getDateTimeInstance().format(now) + \"\\\"\", json);\n+  }\n+\n+  @SuppressWarnings(\"deprecation\")\n+  public void testDefaultJavaSqlTimestampDeserialization() {\n+    String json = \"'Dec 3, 2009 1:18:02 PM'\";\n+    Timestamp extracted = gson.fromJson(json, Timestamp.class);\n+    assertEquals(extracted, 2009, 11, 3, 13, 18, 02);\n   }\n   \n   public void testDefaultDateSerializationUsingBuilder() throws Exception {", "timestamp": 1259889673, "metainfo": ""}