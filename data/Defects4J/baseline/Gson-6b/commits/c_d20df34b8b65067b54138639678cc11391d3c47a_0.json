{"sha": "d20df34b8b65067b54138639678cc11391d3c47a", "log": "Converted Calendar/GregorianCalendar type adapters to the new style.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n   private static final DefaultTimestampDeserializer TIMESTAMP_DESERIALIZER =\n     new DefaultTimestampDeserializer();\n \n-  private static final GregorianCalendarTypeAdapter GREGORIAN_CALENDAR_TYPE_ADAPTER =\n-      new GregorianCalendarTypeAdapter();\n-\n   // The constants DEFAULT_SERIALIZERS, DEFAULT_DESERIALIZERS, and DEFAULT_INSTANCE_CREATORS\n   // must be defined after the constants for the type adapters. Otherwise, the type adapter\n   // constants will appear as nulls.\n     map.register(java.sql.Date.class, JAVA_SQL_DATE_TYPE_ADAPTER, true);\n     map.register(Timestamp.class, DATE_TYPE_ADAPTER, true);\n     map.register(Time.class, TIME_TYPE_ADAPTER, true);\n-    map.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n-    map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n \n     map.makeUnmodifiable();\n     return map;\n     map.register(java.sql.Date.class, wrapDeserializer(JAVA_SQL_DATE_TYPE_ADAPTER), true);\n     map.register(Timestamp.class, wrapDeserializer(TIMESTAMP_DESERIALIZER), true);\n     map.register(Time.class, wrapDeserializer(TIME_TYPE_ADAPTER), true);\n-    map.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n-    map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n \n     map.makeUnmodifiable();\n     return map;\n       }\n     }\n   }\n-\n-  private static final class GregorianCalendarTypeAdapter\n-      implements JsonSerializer<GregorianCalendar>, JsonDeserializer<GregorianCalendar> {\n-\n-    private static final String YEAR = \"year\";\n-    private static final String MONTH = \"month\";\n-    private static final String DAY_OF_MONTH = \"dayOfMonth\";\n-    private static final String HOUR_OF_DAY = \"hourOfDay\";\n-    private static final String MINUTE = \"minute\";\n-    private static final String SECOND = \"second\";\n-\n-    public JsonElement serialize(GregorianCalendar src, Type typeOfSrc,\n-        JsonSerializationContext context) {\n-      JsonObject obj = new JsonObject();\n-      obj.addProperty(YEAR, src.get(Calendar.YEAR));\n-      obj.addProperty(MONTH, src.get(Calendar.MONTH));\n-      obj.addProperty(DAY_OF_MONTH, src.get(Calendar.DAY_OF_MONTH));\n-      obj.addProperty(HOUR_OF_DAY, src.get(Calendar.HOUR_OF_DAY));\n-      obj.addProperty(MINUTE, src.get(Calendar.MINUTE));\n-      obj.addProperty(SECOND, src.get(Calendar.SECOND));\n-      return obj;\n-    }\n-\n-    public GregorianCalendar deserialize(JsonElement json, Type typeOfT,\n-        JsonDeserializationContext context) throws JsonParseException {\n-      JsonObject obj = json.getAsJsonObject();\n-      int year = obj.get(YEAR).getAsInt();\n-      int month = obj.get(MONTH).getAsInt();\n-      int dayOfMonth = obj.get(DAY_OF_MONTH).getAsInt();\n-      int hourOfDay = obj.get(HOUR_OF_DAY).getAsInt();\n-      int minute = obj.get(MINUTE).getAsInt();\n-      int second = obj.get(SECOND).getAsInt();\n-      return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return GregorianCalendarTypeAdapter.class.getSimpleName();\n-    }\n-  }\n }\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n         .factory(TypeAdapters.LOCALE_FACTORY)\n         .factory(TypeAdapters.INET_ADDRESS_FACTORY)\n         .factory(TypeAdapters.BIT_SET_FACTORY)\n+        .factory(TypeAdapters.CALENDAR_FACTORY)\n         .typeAdapter(BigDecimal.class, new BigDecimalTypeAdapter())\n         .typeAdapter(BigInteger.class, new BigIntegerTypeAdapter())\n         .factory(new CollectionTypeAdapterFactory(constructorConstructor))\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.util.BitSet;\n+import java.util.Calendar;\n+import java.util.GregorianCalendar;\n import java.util.Locale;\n import java.util.StringTokenizer;\n import java.util.UUID;\n \n   public static final TypeAdapter.Factory UUID_FACTORY = newFactory(UUID.class, UUID);\n \n+  public static final TypeAdapter<Calendar> CALENDAR = new TypeAdapter<Calendar>() {\n+    private static final String YEAR = \"year\";\n+    private static final String MONTH = \"month\";\n+    private static final String DAY_OF_MONTH = \"dayOfMonth\";\n+    private static final String HOUR_OF_DAY = \"hourOfDay\";\n+    private static final String MINUTE = \"minute\";\n+    private static final String SECOND = \"second\";\n+\n+    @Override\n+    public Calendar read(JsonReader reader) throws IOException {\n+      reader.beginObject();\n+      int year = 0;\n+      int month = 0;\n+      int dayOfMonth = 0;\n+      int hourOfDay = 0;\n+      int minute = 0;\n+      int second = 0;\n+      while (reader.peek() != JsonToken.END_OBJECT) {\n+        String name = reader.nextName();\n+        int value = reader.nextInt();\n+        if (YEAR.equals(name)) {\n+          year = value;\n+        } else if (MONTH.equals(name)) {\n+          month = value;\n+        } else if (DAY_OF_MONTH.equals(name)) {\n+          dayOfMonth = value;\n+        } else if (HOUR_OF_DAY.equals(name)) {\n+          hourOfDay = value;\n+        } else if (MINUTE.equals(name)) {\n+          minute = value;\n+        } else if (SECOND.equals(name)) {\n+          second = value;\n+        }\n+      }\n+      reader.endObject();\n+      return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);\n+    }\n+\n+    @Override\n+    public void write(JsonWriter writer, Calendar value) throws IOException {\n+      writer.beginObject();\n+      writer.name(YEAR);\n+      writer.value(value.get(Calendar.YEAR));\n+      writer.name(MONTH);\n+      writer.value(value.get(Calendar.MONTH));\n+      writer.name(DAY_OF_MONTH);\n+      writer.value(value.get(Calendar.DAY_OF_MONTH));\n+      writer.name(HOUR_OF_DAY);\n+      writer.value(value.get(Calendar.HOUR_OF_DAY));\n+      writer.name(MINUTE);\n+      writer.value(value.get(Calendar.MINUTE));\n+      writer.name(SECOND);\n+      writer.value(value.get(Calendar.SECOND));\n+      writer.endObject();\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory CALENDAR_FACTORY =\n+    newFactoryForMultipleTypes(Calendar.class, GregorianCalendar.class, CALENDAR);\n+\n   public static final TypeAdapter<Locale> LOCALE = new TypeAdapter<Locale>() {\n     @Override\n     public Locale read(JsonReader reader) throws IOException {\n     };\n   }\n \n+  public static <TT> TypeAdapter.Factory newFactoryForMultipleTypes(\n+      final Class<TT> base, final Class<? extends TT> sub, final TypeAdapter<? super TT> typeAdapter) {\n+    return new TypeAdapter.Factory() {\n+      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n+      public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {\n+        Class<? super T> rawType = typeToken.getRawType();\n+        return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;\n+      }\n+    };\n+  }\n+\n   public static <TT> TypeAdapter.Factory newTypeHierarchyFactory(\n       final Class<TT> clazz, final TypeAdapter<TT> typeAdapter) {\n     return new TypeAdapter.Factory() {", "timestamp": 1316477313, "metainfo": ""}