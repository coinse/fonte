{"sha": "dea7ab89fe3e4c5b71c41a9733b102ccdc30b902", "log": "Restore pretty printing. The pretty printing format isn't as compact as the previous format - for example arrays of integers are printed one-per-line, whereas the previous format compacted these to all sit on the same line.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n \n   private final boolean serializeNulls;\n   private final boolean htmlSafe;\n-\n   private final boolean generateNonExecutableJson;\n+  private final boolean prettyPrinting;\n \n   /**\n    * Constructs a Gson object with default configuration. The default configuration has the\n     this(DEFAULT_EXCLUSION_STRATEGY, DEFAULT_EXCLUSION_STRATEGY, DEFAULT_NAMING_POLICY,\n     new MappedObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()),\n     false, DefaultTypeAdapters.getDefaultSerializers(),\n-    DefaultTypeAdapters.getDefaultDeserializers(), DEFAULT_JSON_NON_EXECUTABLE, true);\n+    DefaultTypeAdapters.getDefaultDeserializers(), DEFAULT_JSON_NON_EXECUTABLE, true, false);\n   }\n \n   Gson(ExclusionStrategy serializationStrategy, ExclusionStrategy deserializationStrategy,\n-      FieldNamingStrategy2 fieldNamingPolicy, MappedObjectConstructor objectConstructor,\n-      boolean serializeNulls, ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,\n-      ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n-      boolean generateNonExecutableGson, boolean htmlSafe) {\n+       FieldNamingStrategy2 fieldNamingPolicy, MappedObjectConstructor objectConstructor,\n+       boolean serializeNulls, ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,\n+       ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n+       boolean generateNonExecutableGson, boolean htmlSafe, boolean prettyPrinting) {\n     this.serializationStrategy = serializationStrategy;\n     this.deserializationStrategy = deserializationStrategy;\n     this.fieldNamingPolicy = fieldNamingPolicy;\n     this.deserializers = deserializers;\n     this.generateNonExecutableJson = generateNonExecutableGson;\n     this.htmlSafe = htmlSafe;\n+    this.prettyPrinting = prettyPrinting;\n   }\n \n   private ObjectNavigatorFactory createDefaultObjectNavigatorFactory(ExclusionStrategy strategy) {\n       if (generateNonExecutableJson) {\n         writer.append(JSON_NON_EXECUTABLE_PREFIX);\n       }\n-      toJson(jsonElement, new JsonWriter(Streams.writerForAppendable(writer)));\n+      JsonWriter jsonWriter = new JsonWriter(Streams.writerForAppendable(writer));\n+      if (prettyPrinting) {\n+        jsonWriter.setIndent(\"  \");\n+      }\n+      toJson(jsonElement, jsonWriter);\n     } catch (IOException e) {\n       throw new RuntimeException(e);\n     }\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n \n     Gson gson = new Gson(serializationExclusionStrategy, deserializationExclusionStrategy,\n         fieldNamingPolicy, objConstructor, serializeNulls, customSerializers,\n-        customDeserializers, generateNonExecutableJson, escapeHtmlChars);\n+        customDeserializers, generateNonExecutableJson, escapeHtmlChars, prettyPrinting);\n     return gson;\n   }\n \n--- a/gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java\n+++ b/gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java\n     Gson gson = new Gson(exclusionStrategy, exclusionStrategy, Gson.DEFAULT_NAMING_POLICY,\n         new MappedObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()),\n         false, DefaultTypeAdapters.getDefaultSerializers(),\n-        DefaultTypeAdapters.getDefaultDeserializers(), Gson.DEFAULT_JSON_NON_EXECUTABLE, true);\n+        DefaultTypeAdapters.getDefaultDeserializers(), Gson.DEFAULT_JSON_NON_EXECUTABLE, true,\n+        false);\n     assertEquals(\"{}\", gson.toJson(new ClassWithNoFields() {\n       // empty anonymous class\n     }));\n--- a/gson/src/test/java/com/google/gson/functional/MapTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n     map.put(\"c\", new HashMap<String, Object>());\n \n     assertEquals(\"{\\\"a\\\":12,\\\"b\\\":null,\\\"c\\\":{}}\",\n-        new GsonBuilder().serializeNulls().setPrettyPrinting().create().toJson(map));\n+        new GsonBuilder().serializeNulls().create().toJson(map));\n     assertEquals(\"{\\\"a\\\":12,\\\"b\\\":null,\\\"c\\\":{}}\",\n         new GsonBuilder().serializeNulls().create().toJson(map));\n     assertEquals(\"{\\\"a\\\":12,\\\"c\\\":{}}\",\n-        new GsonBuilder().setPrettyPrinting().create().toJson(map));\n+        new GsonBuilder().create().toJson(map));\n     assertEquals(\"{\\\"a\\\":12,\\\"c\\\":{}}\",\n         new GsonBuilder().create().toJson(map));\n   }\n--- a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java\n   \n   public void testPrintPrintingObjectWithNulls() throws Exception {\n     gsonBuilder = new GsonBuilder();\n-    Gson gson = gsonBuilder.setPrettyPrinting().create();\n+    Gson gson = gsonBuilder.create();\n     String result = gson.toJson(new ClassWithMembers());\n     assertEquals(\"{}\", result);\n \n   \n   public void testPrintPrintingArraysWithNulls() throws Exception {\n     gsonBuilder = new GsonBuilder();\n-    Gson gson = gsonBuilder.setPrettyPrinting().create();\n+    Gson gson = gsonBuilder.create();\n     String result = gson.toJson(new String[] { \"1\", null, \"3\" });\n     assertEquals(\"[\\\"1\\\",null,\\\"3\\\"]\", result);\n \n--- a/gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java\n   public void testPrettyPrintArrayOfPrimitives() {\n     int[] ints = new int[] { 1, 2, 3, 4, 5 };\n     String json = gson.toJson(ints);\n-    assertEquals(\"[1,2,3,4,5]\", json);\n+    assertEquals(\"[\\n  1,\\n  2,\\n  3,\\n  4,\\n  5\\n]\", json);\n   }\n \n   public void testPrettyPrintArrayOfPrimitiveArrays() {\n     int[][] ints = new int[][] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 },\n         { 9, 0 }, { 10 } };\n     String json = gson.toJson(ints);\n-    assertEquals(\"[[1,2],[3,4],[5,6],[7,8],[9,0],[10]]\", json);\n+    assertEquals(\"[\\n  [\\n    1,\\n    2\\n  ],\\n  [\\n    3,\\n    4\\n  ],\\n  [\\n    5,\\n    6\\n  ],\"\n+        + \"\\n  [\\n    7,\\n    8\\n  ],\\n  [\\n    9,\\n    0\\n  ],\\n  [\\n    10\\n  ]\\n]\", json);\n   }\n \n   public void testPrettyPrintListOfPrimitiveArrays() {\n     List<Integer[]> list = Arrays.asList(new Integer[][] { { 1, 2 }, { 3, 4 },\n         { 5, 6 }, { 7, 8 }, { 9, 0 }, { 10 } });\n     String json = gson.toJson(list);\n-    assertEquals(\"[[1,2],[3,4],[5,6],[7,8],[9,0],[10]]\", json);\n+    assertEquals(\"[\\n  [\\n    1,\\n    2\\n  ],\\n  [\\n    3,\\n    4\\n  ],\\n  [\\n    5,\\n    6\\n  ],\"\n+        + \"\\n  [\\n    7,\\n    8\\n  ],\\n  [\\n    9,\\n    0\\n  ],\\n  [\\n    10\\n  ]\\n]\", json);\n   }\n   \n   public void testMap() {\n     map.put(\"abc\", 1);\n     map.put(\"def\", 5);\n     String json = gson.toJson(map);\n-    assertEquals(\"{\\\"abc\\\":1,\\\"def\\\":5}\", json);\n+    assertEquals(\"{\\n  \\\"abc\\\": 1,\\n  \\\"def\\\": 5\\n}\", json);\n   }\n \n   // In response to bug 153\n     ClassWithMap obj = new ClassWithMap();\n     obj.map = new LinkedHashMap<String, Integer>();\n     String json = gson.toJson(obj);\n-    assertTrue(json.contains(\"{\\\"map\\\":{},\\\"value\\\":2}\"));\n+    assertTrue(json.contains(\"{\\n  \\\"map\\\": {},\\n  \\\"value\\\": 2\\n}\"));\n   }\n \n   @SuppressWarnings(\"unused\")\n   public void testMultipleArrays() {\n     int[][][] ints = new int[][][] { { { 1 }, { 2 } } };\n     String json = gson.toJson(ints);\n-    assertEquals(\"[[[1],[2]]]\", json);\n+    assertEquals(\"[\\n  [\\n    [\\n      1\\n    ],\\n    [\\n      2\\n    ]\\n  ]\\n]\", json);\n   }\n \n   private void print(String msg) {", "timestamp": 1288652621, "metainfo": ""}