{"sha": "6c0566bd220e342364facc29078c6c3f325d5276", "log": "Start using JsonElementReader in TypeAdapter.  Also fix strict handling of NaN and Infinity", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java\n       throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token);\n     }\n     double result = ((JsonPrimitive) peekStack()).getAsDouble();\n+    if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) {\n+      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + result);\n+    }\n     popStack();\n     return result;\n   }\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapter.java\n \n   public T fromJsonElement(JsonElement json) {\n     try {\n-      JsonReader jsonReader = new JsonReader(new StringReader(json.toString()));\n+      JsonReader jsonReader = new JsonElementReader(json);\n       jsonReader.setLenient(true);\n       return read(jsonReader);\n     } catch (IOException e) {\n--- a/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java\n     reader.endArray();\n   }\n \n+  public void testLenientNansAndInfinities() throws IOException {\n+    JsonElement element = new JsonParser().parse(\"[NaN, -Infinity, Infinity]\");\n+    JsonElementReader reader = new JsonElementReader(element);\n+    reader.setLenient(true);\n+    reader.beginArray();\n+    assertTrue(Double.isNaN(reader.nextDouble()));\n+    assertEquals(Double.NEGATIVE_INFINITY, reader.nextDouble());\n+    assertEquals(Double.POSITIVE_INFINITY, reader.nextDouble());\n+    reader.endArray();\n+  }\n+\n+  public void testStrictNansAndInfinities() throws IOException {\n+    JsonElement element = new JsonParser().parse(\"[NaN, -Infinity, Infinity]\");\n+    JsonElementReader reader = new JsonElementReader(element);\n+    reader.setLenient(false);\n+    reader.beginArray();\n+    try {\n+      reader.nextDouble();\n+      fail();\n+    } catch (NumberFormatException e) {\n+    }\n+    assertEquals(\"NaN\", reader.nextString());\n+    try {\n+      reader.nextDouble();\n+      fail();\n+    } catch (NumberFormatException e) {\n+    }\n+    assertEquals(\"-Infinity\", reader.nextString());\n+    try {\n+      reader.nextDouble();\n+      fail();\n+    } catch (NumberFormatException e) {\n+    }\n+    assertEquals(\"Infinity\", reader.nextString());\n+    reader.endArray();\n+  }\n+\n   public void testNumbersFromStrings() throws IOException {\n     JsonElement element = new JsonParser().parse(\"[\\\"1\\\", \\\"2\\\", \\\"3\\\"]\");\n     JsonElementReader reader = new JsonElementReader(element);", "timestamp": 1317354450, "metainfo": ""}