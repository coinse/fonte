{"sha": "90a461903438c1810588c94863cc5b50e3c75877", "log": "Minor fixes for pretty printing.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonPrintFormatter.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrintFormatter.java\n       line = new StringBuilder();\n     }\n \n-    void key(String key) {\n+    void key(String key) throws IOException {\n+      breakLineIfThisToNextExceedsLimit(key.length() + 2);\n       getLine().append('\"');\n       getLine().append(key);\n       getLine().append('\"');\n     }\n \n-    void value(String value) {\n-      getLine().append(value);\n+    void value(String value) throws IOException {\n+    \tbreakLineIfThisToNextExceedsLimit(value.length() + 2);\n+        getLine().append(value);\n     }\n \n     void fieldSeparator() throws IOException {\n     }\n \n     void beginObject() throws IOException {\n+      breakLineIfNeeded();\n+      getLine().append('{');\n       ++level;\n-      breakLineIfNeeded();\n-      getLine().append('{');\n     }\n \n     void endObject() {\n     }\n \n     void beginArray() throws IOException {\n+      breakLineIfNeeded();\n+      getLine().append('[');\n       ++level;\n-      breakLineIfNeeded();\n-      getLine().append('[');\n     }\n \n     void endArray() {\n     }\n \n     private void breakLineIfNeeded() throws IOException {\n-      if (getLine().length() > printMargin - rightMargin) {\n-        finishLine();\n-      }\n-    }\n+      breakLineIfThisToNextExceedsLimit(0);\n+    }\n+    \n+    private void breakLineIfThisToNextExceedsLimit(int nextLength) throws IOException {\n+        if (getLine().length() + nextLength > printMargin - rightMargin) {\n+          finishLine();\n+        }\n+      }\n \n     private void finishLine() throws IOException {\n       if (line != null) {\n       }\n     }\n     \n-    public void endObject(JsonObject object) {\n+    public void endObject(JsonObject object) throws IOException {\n       writer.endObject();\n     }\n \n-    public void visitPrimitive(JsonPrimitive primitive) {\n+    public void visitPrimitive(JsonPrimitive primitive) throws IOException {\n       writer.value(primitive.toString());\n     }\n \n-    public void visitNull() {\n+    public void visitNull() throws IOException {\n       writer.value(\"null\");\n     }\n   }\n--- a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java\n     assertNull(target.value);\n   }\n   \n-  private static class ClassWithNullWrappedPrimitive {\n-    private Long value;\n-  }\n-  \n   public void testExplicitSerializationOfNullCollectionMembers() {\n     Gson gson = gsonBuilder.create();\n     ClassWithMembers target = new ClassWithMembers();\n     String json = gson.toJson(target);\n     assertTrue(json.contains(\"\\\"str\\\":null\"));\n   }\n-  \n-  static class ClassWithMembers {\n-    String str;\n-    int[] array;\n-    Collection<String> col;\n-  }\n \n   public void testCustomSerializationOfNulls() {\n     gsonBuilder.registerTypeAdapter(ClassWithObjects.class, new ClassWithObjectsSerializer());\n     String expected = \"{\\\"bag\\\":null}\";\n     assertEquals(expected, actual);\n   }\n+  \n+  public void testPrintPrintingObjectWithNulls() throws Exception {\n+    gsonBuilder = new GsonBuilder();\n+    Gson gson = gsonBuilder.setPrettyPrinting().create();\n+    String result = gson.toJson(new ClassWithMembers());\n+    assertEquals(\"{}\\n\", result);\n \n+    gson = gsonBuilder.serializeNulls().create();\n+    result = gson.toJson(new ClassWithMembers());\n+    assertTrue(result.contains(\"\\\"str\\\":null\"));\n+  }\n+  \n+  public void testPrintPrintingArraysWithNulls() throws Exception {\n+    gsonBuilder = new GsonBuilder();\n+    Gson gson = gsonBuilder.setPrettyPrinting().create();\n+    String result = gson.toJson(new String[] { \"1\", null, \"3\" });\n+    assertEquals(\"[\\\"1\\\",null,\\\"3\\\"]\\n\", result);\n+\n+    gson = gsonBuilder.serializeNulls().create();\n+    result = gson.toJson(new String[] { \"1\", null, \"3\" });\n+    assertEquals(\"[\\\"1\\\",null,\\\"3\\\"]\\n\", result);\n+  }\n+\n+  private static class ClassWithNullWrappedPrimitive {\n+    private Long value;\n+  }\n+\n+  private static class ClassWithMembers {\n+    String str;\n+    int[] array;\n+    Collection<String> col;\n+  }\n+  \n   private static class ClassWithObjectsSerializer implements JsonSerializer<ClassWithObjects> {\n     public JsonElement serialize(ClassWithObjects src, Type typeOfSrc,\n         JsonSerializationContext context) {\n--- a/gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java\n  * @author Joel Leitch\n  */\n public class PrettyPrintingTest extends TestCase {\n-  private static int PRINT_MARGIN = 100;\n+  private static int PRINT_MARGIN = 80;\n   private static int RIGHT_MARGIN = 4;\n \n   private static boolean DEBUG = false;\n   }\n \n   public void testPrettyPrintArrayOfPrimitiveArrays() {\n-    int[][] ints = new int[][] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 }, { 9, 0 }, { 10 } };\n+    int[][] ints = new int[][] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 },\n+        { 9, 0 }, { 10 } };\n     String json = gson.toJson(ints);\n     assertEquals(\"[[1,2],[3,4],[5,6],[7,8],[9,0],[10]]\\n\", json);\n   }\n \n   public void testPrettyPrintListOfPrimitiveArrays() {\n-    List<Integer[]> list = Arrays.asList(new Integer[][] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 },\n-        { 9, 0 }, { 10 } });\n+    List<Integer[]> list = Arrays.asList(new Integer[][] { { 1, 2 }, { 3, 4 },\n+        { 5, 6 }, { 7, 8 }, { 9, 0 }, { 10 } });\n     String json = gson.toJson(list);\n     assertEquals(\"[[1,2],[3,4],[5,6],[7,8],[9,0],[10]]\\n\", json);\n   }\n \n   public void testMultipleArrays() {\n-    int[][][] ints = new int[][][] { {  { 1 }, { 2 } } };\n+    int[][][] ints = new int[][][] { { { 1 }, { 2 } } };\n     String json = gson.toJson(ints);\n     assertEquals(\"[[[1],[2]]]\\n\", json);\n   }\n       if (c == '\\n') {\n         position = 0;\n       }\n-      assertTrue(position < PRINT_MARGIN + RIGHT_MARGIN);\n+      assertTrue(position <= PRINT_MARGIN - RIGHT_MARGIN + 1);\n     }\n   }\n }", "timestamp": 1231650083, "metainfo": ""}