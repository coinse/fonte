{"sha": "0c98c2f8d153c818e12e693afce576b19edbf2b8", "log": "More lenient parsing of Numbers and Booleans.  Basically, can deserialize properly formatted stringr representations of numbers and booleans.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n    */\n   @Override\n   public boolean getAsBoolean() {\n-    return ((Boolean) value).booleanValue();\n+    if (isBoolean()) {\n+      return getAsBooleanWrapper().booleanValue();\n+    } else {\n+      return Boolean.parseBoolean(getAsString());\n+    }\n   }\n \n   /**\n    */\n   @Override\n   public double getAsDouble() {\n-    return ((Number) value).doubleValue();\n+    if (isNumber()) {\n+      return getAsNumber().doubleValue();\n+    } else {\n+      return Double.parseDouble(getAsString());\n+    }\n   }\n \n   /**\n    */\n   @Override\n   public float getAsFloat() {\n-    return ((Number) value).floatValue();\n+    if (isNumber()) {\n+      return getAsNumber().floatValue();\n+    } else {\n+      return Float.parseFloat(getAsString());\n+    }\n   }\n \n   /**\n    */\n   @Override\n   public long getAsLong() {\n-    return ((Number) value).longValue();\n+    if (isNumber()) {\n+      return getAsNumber().longValue();\n+    } else {\n+      return Long.parseLong(getAsString());\n+    }\n   }\n \n   /**\n    * @return get this element as a primitive short.\n    * @throws ClassCastException if the value contained is not a valid short value.\n    */\n- @Override\n+  @Override\n   public short getAsShort() {\n-    return ((Number) value).shortValue();\n+    if (isNumber()) {\n+      return getAsNumber().shortValue();\n+    } else {\n+      return Short.parseShort(getAsString());\n+    }\n   }\n \n  /**\n   */\n   @Override\n   public int getAsInt() {\n-    return ((Number) value).intValue();\n+    if (isNumber()) {\n+      return getAsNumber().intValue();\n+    } else {\n+      return Integer.parseInt(getAsString());\n+    }\n   }\n   \n   @Override\n   public byte getAsByte() {\n-    return ((Number) value).byteValue();\n+    if (isNumber()) {\n+      return getAsNumber().byteValue();\n+    } else {\n+      return Byte.parseByte(getAsString());\n+    }\n   }\n   \n   @Override\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit test for the {@link JsonPrimitive} class.\n+ * \n+ * @author Joel Leitch\n+ */\n+public class JsonPrimitiveTest extends TestCase {\n+\n+  public void testBoolean() throws Exception {\n+    JsonPrimitive json = new JsonPrimitive(Boolean.TRUE);\n+    \n+    assertTrue(json.isBoolean());\n+    assertTrue(json.getAsBoolean());\n+  }\n+  \n+  public void testParsingStringAsBoolean() throws Exception {\n+    JsonPrimitive json = new JsonPrimitive(\"true\");\n+    \n+    assertFalse(json.isBoolean());\n+    assertTrue(json.getAsBoolean());\n+  }\n+  \n+  public void testParsingStringAsNumber() throws Exception {\n+    JsonPrimitive json = new JsonPrimitive(\"1\");\n+\n+    assertFalse(json.isNumber());\n+    assertEquals(1D, json.getAsDouble(), 0.00001);\n+    assertEquals(1F, json.getAsFloat(), 0.00001);\n+    assertEquals(1, json.getAsInt());\n+    assertEquals(1L, json.getAsLong());\n+    assertEquals((short) 1, json.getAsShort());\n+    assertEquals((byte) 1, json.getAsByte());\n+    assertEquals(new BigInteger(\"1\"), json.getAsBigInteger());\n+    assertEquals(new BigDecimal(\"1\"), json.getAsBigDecimal());\n+  }\n+  \n+  public void testStringsAndChar() throws Exception {\n+    JsonPrimitive json = new JsonPrimitive(\"abc\");\n+    \n+    assertTrue(json.isString());\n+    assertEquals('a', json.getAsCharacter());\n+    assertEquals(\"abc\", json.getAsString());\n+  }\n+  \n+  public void testExponential() throws Exception {\n+    JsonPrimitive json = new JsonPrimitive(\"1E+7\");\n+\n+    assertEquals(new BigDecimal(\"1E+7\"), json.getAsBigDecimal());\n+    assertEquals(new Double(\"1E+7\"), json.getAsDouble(), 0.00001);\n+    assertEquals(new Float(\"1E+7\"), json.getAsDouble(), 0.00001);\n+    \n+    try {\n+      json.getAsInt();\n+      fail(\"Integers can not handle exponents like this.\");\n+    } catch (NumberFormatException expected) { }\n+  }\n+}", "timestamp": 1227210012, "metainfo": ""}