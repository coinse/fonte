{"sha": "7b99419aead602bb7c6c9fc08a5556deaaf77d77", "log": "Removed compiler warnings.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonSyntaxException.java\n+++ b/gson/src/main/java/com/google/gson/JsonSyntaxException.java\n \n   /**\n    * Creates exception with the specified cause. Consider using\n-   * {@link #JsonIOException(String, Throwable)} instead if you can describe what happened.\n+   * {@link #JsonSyntaxException(String, Throwable)} instead if you can describe what happened.\n    *\n    * @param cause root exception that caused this exception to be thrown.\n    */\n--- a/gson/src/main/java/com/google/gson/LruCache.java\n+++ b/gson/src/main/java/com/google/gson/LruCache.java\n     put(key, value);\n   }\n \n+  @Override\n   public void clear() {\n     super.clear();\n   }\n     return remove(key);\n   }\n \n+  @Override\n   public int size() {\n     return super.size();\n   }\n--- a/gson/src/main/java/com/google/gson/Streams.java\n+++ b/gson/src/main/java/com/google/gson/Streams.java\n       appendable.append((char) i);\n     }\n \n-    @Override public void flush() throws IOException {}\n-    @Override public void close() throws IOException {}\n+    @Override public void flush() {}\n+    @Override public void close() {}\n \n     /**\n      * A mutable char sequence pointing at a single char[].\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n     } catch (NumberFormatException ignored) {\n       double asDouble = Double.parseDouble(value); // don't catch this NumberFormatException\n       result = (long) asDouble;\n-      if ((double) result != asDouble) {\n+      if (result != asDouble) {\n         throw new NumberFormatException(value);\n       }\n     }\n     } catch (NumberFormatException ignored) {\n       double asDouble = Double.parseDouble(value); // don't catch this NumberFormatException\n       result = (int) asDouble;\n-      if ((double) result != asDouble) {\n+      if (result != asDouble) {\n         throw new NumberFormatException(value);\n       }\n     }\n     stack.set(stack.size() - 1, newTop);\n   }\n \n+  @SuppressWarnings(\"fallthrough\")\n   private JsonToken nextInArray(boolean firstElement) throws IOException {\n     if (firstElement) {\n       replaceTop(JsonScope.NONEMPTY_ARRAY);\n     }\n   }\n \n+  @SuppressWarnings(\"fallthrough\")\n   private JsonToken nextInObject(boolean firstElement) throws IOException {\n     /*\n      * Read delimiters. Either a comma/semicolon separating this and the\n     return nextValue();\n   }\n \n+  @SuppressWarnings(\"fallthrough\")\n   private JsonToken nextValue() throws IOException {\n     int c = nextNonWhitespace();\n     switch (c) {\n    * Returns the string up to but not including any delimiter characters. This\n    * does not consume the delimiter character.\n    */\n+  @SuppressWarnings(\"fallthrough\")\n   private String nextLiteral() throws IOException {\n     StringBuilder builder = null;\n     do {\n--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n     }\n   }\n \n-  public void testEmptyString() throws IOException {\n+  public void testEmptyString() {\n     try {\n       new JsonReader(new StringReader(\"\")).beginArray();\n     } catch (IOException expected) {\n     }\n   }\n \n-  public void testNoTopLevelObject() throws IOException {\n+  public void testNoTopLevelObject() {\n     try {\n       new JsonReader(new StringReader(\"true\")).nextBoolean();\n     } catch (IOException expected) {", "timestamp": 1288826082, "metainfo": ""}