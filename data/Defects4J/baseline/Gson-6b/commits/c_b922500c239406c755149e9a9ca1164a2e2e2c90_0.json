{"sha": "b922500c239406c755149e9a9ca1164a2e2e2c90", "log": "For efficiency, calling setAccessible on all fields of a class in one method call instead of doing it individually.", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n+import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.Type;\n       Map<String, BoundField> result = new LinkedHashMap<String, BoundField>();\n       Type declaredType = type.getType();\n       while (raw != Object.class) {\n-        for (Field field : raw.getDeclaredFields()) {\n+        Field[] fields = raw.getDeclaredFields();\n+        AccessibleObject.setAccessible(fields, true);\n+        for (Field field : fields) {\n           boolean serialize = serializeField(raw, field, declaredType);\n           boolean deserialize = deserializeField(raw, field, declaredType);\n           if (serialize || deserialize) {\n-            field.setAccessible(true); // TODO: don't call setAccessible unless necessary\n             Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n             BoundField boundField = createBoundField(context, field, TypeToken.get(fieldType), serialize, deserialize);\n             result.put(boundField.name, boundField);", "timestamp": 1312334702, "metainfo": ""}