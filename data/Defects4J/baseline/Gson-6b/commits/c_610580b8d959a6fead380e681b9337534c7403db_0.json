{"sha": "610580b8d959a6fead380e681b9337534c7403db", "log": "exposed final fields of Pair for fast access. Pair is used quite a bit during serialization because of its use in ref stack.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n     if (element == null || element.isJsonNull()) {\n       return null;\n     }\n-    Type objType = pair.getSecond().getType();\n-    return (pair.getFirst()).deserialize(element, objType, context);\n+    Type objType = pair.second.type;\n+    return (pair.first).deserialize(element, objType, context);\n   }\n \n   final Object visitChildAsObject(Type childType, JsonElement jsonChild) {\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n     if (pair == null) {\n       return null;\n     }\n-    JsonSerializer serializer = pair.getFirst();\n-    objTypePair = pair.getSecond();\n+    JsonSerializer serializer = pair.first;\n+    objTypePair = pair.second;\n     start(objTypePair);\n     try {\n       JsonElement element =\n--- a/gson/src/main/java/com/google/gson/MemoryRefStack.java\n+++ b/gson/src/main/java/com/google/gson/MemoryRefStack.java\n \n     for (ObjectTypePair stackObject : stack) {\n       if (stackObject.getObject() == obj.getObject()\n-          && stackObject.getType().equals(obj.getType()) ) {\n+          && stackObject.type.equals(obj.type) ) {\n         return true;\n       }\n     }\n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n    * If a field is null, it does not get visited.\n    */\n   public void accept(Visitor visitor) {\n-    TypeInfo objTypeInfo = new TypeInfo(objTypePair.getType());\n+    TypeInfo objTypeInfo = new TypeInfo(objTypePair.type);\n     if (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {\n       return;\n     }\n       visitor.start(objTypePair);\n       try {\n         if (objTypeInfo.isArray()) {\n-          visitor.visitArray(objectToVisit, objTypePair.getType());\n+          visitor.visitArray(objectToVisit, objTypePair.type);\n         } else if (objTypeInfo.getActualType() == Object.class\n             && isPrimitiveOrString(objectToVisit)) {\n           // TODO(Joel): this is only used for deserialization of \"primitives\"\n         } else {\n           visitor.startVisitingObject(objectToVisit);\n           ObjectTypePair currObjTypePair = objTypePair.toMoreSpecificType();\n-          Class<?> topLevelClass = new TypeInfo(currObjTypePair.getType()).getRawClass();\n+          Class<?> topLevelClass = new TypeInfo(currObjTypePair.type).getRawClass();\n           for (Class<?> curr = topLevelClass; curr != null && !curr.equals(Object.class);\n               curr = curr.getSuperclass()) {\n             if (!curr.isSynthetic()) {\n           || exclusionStrategy.shouldSkipClass(fieldAttributes.getDeclaredClass())) {\n         continue; // skip\n       } else {\n-        TypeInfo fieldTypeInfo = TypeInfoFactory.getTypeInfoForField(f, objTypePair.getType());\n+        TypeInfo fieldTypeInfo = TypeInfoFactory.getTypeInfoForField(f, objTypePair.type);\n         Type declaredTypeOfField = fieldTypeInfo.getActualType();\n         boolean visitedWithCustomHandler =\n             visitor.visitFieldUsingCustomHandler(f, declaredTypeOfField, obj);\n--- a/gson/src/main/java/com/google/gson/ObjectTypePair.java\n+++ b/gson/src/main/java/com/google/gson/ObjectTypePair.java\n  */\n final class ObjectTypePair {\n   private Object obj;\n-  private final Type type;\n+  final Type type;\n   private final boolean preserveType;\n \n   ObjectTypePair(Object obj, Type type, boolean preserveType) {\n--- a/gson/src/main/java/com/google/gson/Pair.java\n+++ b/gson/src/main/java/com/google/gson/Pair.java\n \n final class Pair<FIRST, SECOND> {\n \n-  private final FIRST first;\n-  private final SECOND second;\n+  final FIRST first;\n+  final SECOND second;\n \n   Pair(FIRST first, SECOND second) {\n     this.first = first;\n     this.second = second;\n   }\n-\n-  public FIRST getFirst() {\n-    return first;\n-  }\n-\n-  public SECOND getSecond() {\n-    return second;\n-  }\n }\n--- a/gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java\n+++ b/gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java\n  *\n  * @author Joel Leitch\n  */\n-class SerializedNameAnnotationInterceptingNamingPolicy implements FieldNamingStrategy {\n+final class SerializedNameAnnotationInterceptingNamingPolicy implements FieldNamingStrategy {\n   private static final JsonFieldNameValidator fieldNameValidator = new JsonFieldNameValidator();\n   private final FieldNamingStrategy delegate;\n ", "timestamp": 1259873902, "metainfo": ""}