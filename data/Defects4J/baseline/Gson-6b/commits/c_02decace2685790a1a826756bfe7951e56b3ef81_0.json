{"sha": "02decace2685790a1a826756bfe7951e56b3ef81", "log": "Added the ability to deserialize a Map \"key\" object from a String into a complex Java type.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n         throws JsonParseException {\n       // Use ObjectConstructor to create instance instead of hard-coding a specific type. \n       // This handles cases where users are using their own subclass of Map.\n-      Map<String, Object> map = constructMapType(typeOfT, context);\n-      Type childType = new TypeInfoMap(typeOfT).getValueType();\n+      Map<Object, Object> map = constructMapType(typeOfT, context);\n+      TypeInfoMap mapTypeInfo = new TypeInfoMap(typeOfT);\n       for (Map.Entry<String, JsonElement> entry : json.getAsJsonObject().entrySet()) {\n-        Object value = context.deserialize(entry.getValue(), childType);\n-        map.put(entry.getKey(), value);\n+        Object key = context.deserialize(new JsonPrimitive(entry.getKey()), mapTypeInfo.getKeyType());\n+        Object value = context.deserialize(entry.getValue(), mapTypeInfo.getValueType());\n+        map.put(key, value);\n       }\n       return map;\n     }\n--- a/gson/src/test/java/com/google/gson/functional/MapTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.google.gson.functional;\n \n import java.lang.reflect.Type;\n     Map<String, Integer> map = gson.fromJson(\"{\\\"null\\\":123}\", typeOfMap);\n     assertEquals(1, map.size());\n     assertNull(map.get(null));\n+  }\n+  \n+  public void testMapSerializationWithIntegerKeys() {\n+    Map<Integer, String> map = new LinkedHashMap<Integer, String>();\n+    map.put(123, \"456\");\n+    Type typeOfMap = new TypeToken<Map<Integer, String>>() {}.getType();\n+    String json = gson.toJson(map, typeOfMap);\n+\n+    assertEquals(\"{\\\"123\\\":\\\"456\\\"}\", json);\n+  }\n+  \n+  public void testMapDeserializationWithIntegerKeys() {\n+    Type typeOfMap = new TypeToken<Map<Integer, String>>() {}.getType();\n+    Map<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(123));\n+    assertEquals(\"456\", map.get(123));\n   }\n \n   public void testParameterizedMapSubclassSerialization() {", "timestamp": 1231225759, "metainfo": ""}