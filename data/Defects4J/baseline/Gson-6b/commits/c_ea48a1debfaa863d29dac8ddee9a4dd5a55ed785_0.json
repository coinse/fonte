{"sha": "ea48a1debfaa863d29dac8ddee9a4dd5a55ed785", "log": "Fixed issue 175 by adding default type adapters for StringBuilder and StringBuffer.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n   private static final NumberTypeAdapter NUMBER_TYPE_ADAPTER = new NumberTypeAdapter();\n   private static final ShortTypeAdapter SHORT_TYPE_ADAPTER = new ShortTypeAdapter();\n   private static final StringTypeAdapter STRING_TYPE_ADAPTER = new StringTypeAdapter();\n+  private static final StringBuilderTypeAdapter STRING_BUILDER_TYPE_ADAPTER =\n+    new StringBuilderTypeAdapter();\n+  private static final StringBufferTypeAdapter STRING_BUFFER_TYPE_ADAPTER =\n+    new StringBufferTypeAdapter();\n \n   private static final PropertiesCreator PROPERTIES_CREATOR = new PropertiesCreator();\n   private static final TreeSetCreator TREE_SET_CREATOR = new TreeSetCreator();\n     map.register(Short.class, SHORT_TYPE_ADAPTER);\n     map.register(short.class, SHORT_TYPE_ADAPTER);\n     map.register(String.class, STRING_TYPE_ADAPTER);\n+    map.register(StringBuilder.class, STRING_BUILDER_TYPE_ADAPTER);\n+    map.register(StringBuffer.class, STRING_BUFFER_TYPE_ADAPTER);\n \n     map.makeUnmodifiable();\n     return map;\n     map.register(Short.class, wrapDeserializer(SHORT_TYPE_ADAPTER));\n     map.register(short.class, wrapDeserializer(SHORT_TYPE_ADAPTER));\n     map.register(String.class, wrapDeserializer(STRING_TYPE_ADAPTER));\n+    map.register(StringBuilder.class, wrapDeserializer(STRING_BUILDER_TYPE_ADAPTER));\n+    map.register(StringBuffer.class, wrapDeserializer(STRING_BUFFER_TYPE_ADAPTER));\n \n     map.makeUnmodifiable();\n     return map;\n     }\n   }\n \n+  private static class StringBuilderTypeAdapter\n+      implements JsonSerializer<StringBuilder>, JsonDeserializer<StringBuilder> {\n+    public JsonElement serialize(StringBuilder src, Type typeOfSrc, JsonSerializationContext context) {\n+      return new JsonPrimitive(src.toString());\n+    }\n+\n+    public StringBuilder deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+    throws JsonParseException {\n+      return new StringBuilder(json.getAsString());\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return StringBuilderTypeAdapter.class.getSimpleName();\n+    }\n+  }\n+\n+  private static class StringBufferTypeAdapter\n+      implements JsonSerializer<StringBuffer>, JsonDeserializer<StringBuffer> {\n+    public JsonElement serialize(StringBuffer src, Type typeOfSrc, JsonSerializationContext context) {\n+      return new JsonPrimitive(src.toString());\n+    }\n+\n+    public StringBuffer deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+    throws JsonParseException {\n+      return new StringBuffer(json.getAsString());\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return StringBufferTypeAdapter.class.getSimpleName();\n+    }\n+  }\n+\n   private static class BooleanTypeAdapter\n       implements JsonSerializer<Boolean>, JsonDeserializer<Boolean> {\n     public JsonElement serialize(Boolean src, Type typeOfSrc, JsonSerializationContext context) {\n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n     TreeSet<String> treeSet = gson.fromJson(json, type);\n     assertTrue(treeSet.contains(\"Value1\"));\n   }\n+\n+  public void testStringBuilderSerialization() {\n+    StringBuilder sb = new StringBuilder(\"abc\");\n+    String json = gson.toJson(sb);\n+    assertEquals(\"\\\"abc\\\"\", json);\n+  }\n+\n+  public void testStringBuilderDeserialization() {\n+    StringBuilder sb = gson.fromJson(\"'abc'\", StringBuilder.class);\n+    assertEquals(\"abc\", sb.toString());\n+  }\n+\n+  public void testStringBufferSerialization() {\n+    StringBuffer sb = new StringBuffer(\"abc\");\n+    String json = gson.toJson(sb);\n+    assertEquals(\"\\\"abc\\\"\", json);\n+  }\n+\n+  public void testStringBufferDeserialization() {\n+    StringBuffer sb = gson.fromJson(\"'abc'\", StringBuffer.class);\n+    assertEquals(\"abc\", sb.toString());\n+  }\n }", "timestamp": 1296515642, "metainfo": ""}