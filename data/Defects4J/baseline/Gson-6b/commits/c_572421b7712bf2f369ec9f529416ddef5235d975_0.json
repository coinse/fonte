{"sha": "572421b7712bf2f369ec9f529416ddef5235d975", "log": "Open object construction in JsonDeserializationContext to leverage the same object construction as default gson deserialization.", "commit": "\n--- a/gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java\n \n   protected static final JsonElement serialize(JsonSerializationContext context,\n       Object src, Type srcType) {\n-    JsonSerializationContextDefault contextImpl = (JsonSerializationContextDefault) context;\n-    return contextImpl.serialize(src, srcType, false);\n+    return context.serialize(src, srcType, false);\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n   protected static final Map<Object, Object> constructMapType(\n       Type mapType, JsonDeserializationContext context) {\n-    JsonDeserializationContextDefault contextImpl = (JsonDeserializationContextDefault) context;\n-    ObjectConstructor objectConstructor = contextImpl.getObjectConstructor();\n-    return (Map<Object, Object>) objectConstructor.construct(mapType);\n+    return context.construct(mapType);\n   }\n }\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n         } else {\n           Type childType = (childGenericType == null || childGenericType == Object.class)\n               ? child.getClass() : childGenericType;\n-          JsonSerializationContextDefault contextImpl = (JsonSerializationContextDefault) context;\n-          JsonElement element = contextImpl.serialize(child, childType, false);\n+          JsonElement element = context.serialize(child, childType, false);\n           array.add(element);\n         }\n       }\n \n     private Collection constructCollectionType(Type collectionType,\n         JsonDeserializationContext context) {\n-      JsonDeserializationContextDefault contextImpl = (JsonDeserializationContextDefault) context;\n-      ObjectConstructor objectConstructor = contextImpl.getObjectConstructor();\n-      return (Collection) objectConstructor.construct(collectionType);\n+      return context.construct(collectionType);\n     }\n   }\n \n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n import com.google.gson.stream.MalformedJsonException;\n+\n import java.io.IOException;\n import java.io.Reader;\n import java.io.StringReader;\n    * @since 1.4\n    */\n   public JsonElement toJsonTree(Object src, Type typeOfSrc) {\n-    JsonSerializationContextDefault context = new JsonSerializationContextDefault(\n+    JsonSerializationContext context = new JsonSerializationContext(\n         new ObjectNavigator(serializationExclusionStrategy), fieldNamingPolicy,\n         serializeNulls, serializers);\n     return context.serialize(src, typeOfSrc);\n     if (json == null) {\n       return null;\n     }\n-    JsonDeserializationContext context = new JsonDeserializationContextDefault(\n+    JsonDeserializationContext context = new JsonDeserializationContext(\n         new ObjectNavigator(deserializationExclusionStrategy), fieldNamingPolicy,\n         deserializers, objectConstructor);\n     T target = (T) context.deserialize(json, typeOfT);\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationContext.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationContext.java\n import java.lang.reflect.Type;\n \n /**\n- * Context for deserialization that is passed to a custom deserializer during invocation of its \n+ * Context for deserialization that is passed to a custom deserializer during invocation of its\n  * {@link JsonDeserializer#deserialize(JsonElement, Type, JsonDeserializationContext)}\n- * method. \n- * \n+ * method.\n+ *\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n-public interface JsonDeserializationContext {\n-  \n+public final class JsonDeserializationContext {\n+  private final ObjectNavigator objectNavigator;\n+  private final FieldNamingStrategy2 fieldNamingPolicy;\n+  private final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;\n+  private final MappedObjectConstructor objectConstructor;\n+\n+  JsonDeserializationContext(ObjectNavigator objectNavigator,\n+      FieldNamingStrategy2 fieldNamingPolicy,\n+      ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n+      MappedObjectConstructor objectConstructor) {\n+    this.objectNavigator = objectNavigator;\n+    this.fieldNamingPolicy = fieldNamingPolicy;\n+    this.deserializers = deserializers;\n+    this.objectConstructor = objectConstructor;\n+  }\n+\n+\n+  public <T> T construct(Type type) {\n+    return objectConstructor.construct(type);\n+  }\n+\n+  public Object constructArray(Type type, int length) {\n+    return objectConstructor.constructArray(type, length);\n+  }\n+\n+\n+  private <T> T fromJsonArray(Type arrayType, JsonArray jsonArray,\n+      JsonDeserializationContext context) throws JsonParseException {\n+    JsonArrayDeserializationVisitor<T> visitor = new JsonArrayDeserializationVisitor<T>(\n+        jsonArray, arrayType, objectNavigator, fieldNamingPolicy,\n+        objectConstructor, deserializers, context);\n+    objectNavigator.accept(new ObjectTypePair(null, arrayType, true), visitor);\n+    return visitor.getTarget();\n+  }\n+\n+  private <T> T fromJsonObject(Type typeOfT, JsonObject jsonObject,\n+      JsonDeserializationContext context) throws JsonParseException {\n+    JsonObjectDeserializationVisitor<T> visitor = new JsonObjectDeserializationVisitor<T>(\n+        jsonObject, typeOfT, objectNavigator, fieldNamingPolicy,\n+        objectConstructor, deserializers, context);\n+    objectNavigator.accept(new ObjectTypePair(null, typeOfT, true), visitor);\n+    return visitor.getTarget();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private <T> T fromJsonPrimitive(Type typeOfT, JsonPrimitive json,\n+      JsonDeserializationContext context) throws JsonParseException {\n+    JsonObjectDeserializationVisitor<T> visitor = new JsonObjectDeserializationVisitor<T>(\n+        json, typeOfT, objectNavigator, fieldNamingPolicy, objectConstructor, deserializers, context);\n+    objectNavigator.accept(new ObjectTypePair(json.getAsObject(), typeOfT, true), visitor);\n+    Object target = visitor.getTarget();\n+    return (T) target;\n+  }\n+\n   /**\n-   * Invokes default deserialization on the specified object. It should never be invoked on \n-   * the element received as a parameter of the \n+   * Invokes default deserialization on the specified object. It should never be invoked on\n+   * the element received as a parameter of the\n    * {@link JsonDeserializer#deserialize(JsonElement, Type, JsonDeserializationContext)} method. Doing\n-   * so will result in an infinite loop since Gson will in-turn call the custom deserializer again. \n+   * so will result in an infinite loop since Gson will in-turn call the custom deserializer again.\n \n    * @param json the parse tree.\n    * @param typeOfT type of the expected return value.\n    * @return An object of type typeOfT.\n    * @throws JsonParseException if the parse tree does not contain expected data.\n    */\n-  public <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException;\n+  public <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\n+    if (json == null || json.isJsonNull()) {\n+      return null;\n+    } else if (json.isJsonArray()) {\n+      return fromJsonArray(typeOfT, json.getAsJsonArray(), this);\n+    } else if (json.isJsonObject()) {\n+      return fromJsonObject(typeOfT, json.getAsJsonObject(), this);\n+    } else if (json.isJsonPrimitive()) {\n+      return fromJsonPrimitive(typeOfT, json.getAsJsonPrimitive(), this);\n+    } else {\n+      throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\");\n+    }\n+  }\n }\n--- a/gson/src/main/java/com/google/gson/JsonSerializationContext.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationContext.java\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n-public interface JsonSerializationContext {\n+public final class JsonSerializationContext {\n+\n+  private final ObjectNavigator objectNavigator;\n+  private final FieldNamingStrategy2 fieldNamingPolicy;\n+  private final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;\n+  private final boolean serializeNulls;\n+  private final MemoryRefStack ancestors;\n+\n+  JsonSerializationContext(ObjectNavigator objectNavigator,\n+      FieldNamingStrategy2 fieldNamingPolicy, boolean serializeNulls,\n+      ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers) {\n+    this.objectNavigator = objectNavigator;\n+    this.fieldNamingPolicy = fieldNamingPolicy;\n+    this.serializeNulls = serializeNulls;\n+    this.serializers = serializers;\n+    this.ancestors = new MemoryRefStack();\n+  }\n \n   /**\n    * Invokes default serialization on the specified object.\n    * @param src the object that needs to be serialized.\n    * @return a tree of {@link JsonElement}s corresponding to the serialized form of {@code src}.\n    */\n-  public JsonElement serialize(Object src);\n+  public JsonElement serialize(Object src) {\n+    if (src == null) {\n+      return JsonNull.createJsonNull();\n+    }\n+    return serialize(src, src.getClass(), false);\n+  }\n \n   /**\n    * Invokes default serialization on the specified object passing the specific type information.\n    * @param typeOfSrc the actual genericized type of src object.\n    * @return a tree of {@link JsonElement}s corresponding to the serialized form of {@code src}.\n    */\n-  public JsonElement serialize(Object src, Type typeOfSrc);\n+  public JsonElement serialize(Object src, Type typeOfSrc) {\n+    return serialize(src, typeOfSrc, true);\n+  }\n+\n+  JsonElement serialize(Object src, Type typeOfSrc, boolean preserveType) {\n+    if (src == null) {\n+      return JsonNull.createJsonNull();\n+    }\n+    JsonSerializationVisitor visitor = new JsonSerializationVisitor(\n+        objectNavigator, fieldNamingPolicy, serializeNulls, serializers, this, ancestors);\n+    ObjectTypePair objTypePair = new ObjectTypePair(src, typeOfSrc, preserveType);\n+    objectNavigator.accept(objTypePair, visitor);\n+    return visitor.getJsonElement();\n+  }\n }", "timestamp": 1305928239, "metainfo": ""}