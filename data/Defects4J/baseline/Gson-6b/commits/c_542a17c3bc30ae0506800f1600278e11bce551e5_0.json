{"sha": "542a17c3bc30ae0506800f1600278e11bce551e5", "log": "Incorporated comments from r710", "commit": "\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n   }\n \n   /**\n-   * Configures Gson to apply a set of exclusion strategies during either serialization or\n-   * deserialization. Each of the {@code strategies} will be applied as a disjunction rule.\n+   * Configures Gson to apply a set of exclusion strategies during either serialization.\n+   * Each of the {@code strategies} will be applied as a disjunction rule.\n    * This means that if one of the {@code strategies} suggests that a field (or class) should be\n-   * skipped then that field (or object) is skipped during either serialization or deserialization\n+   * skipped then that field (or object) is skipped during either serialization\n    * depending on the {@code mode} that is passed into this method.\n    *\n    * @param strategies the set of strategy object to apply during the {@code mode}.\n-   * @param mode the mode of Gson (either serialization or deserialization) as to when the\n-   *   {@code strategies} should be applied.\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n    * @since 1.7\n    */\n-  public GsonBuilder setExclusionStrategies(Mode mode, ExclusionStrategy... strategies) {\n-    Set<ExclusionStrategy> strategySet =\n-        ($Preconditions.checkNotNull(mode) == Mode.SERIALIZE)\n-        ? serializeExclusionStrategies : deserializeExclusionStrategies;\n-    strategySet.addAll(Arrays.asList(strategies));\n-    return this;\n-  }\n-\n+  public GsonBuilder addSerializationExclusionStrategies(ExclusionStrategy... strategies) {\n+    serializeExclusionStrategies.addAll(Arrays.asList(strategies));\n+    return this;\n+  }\n+\n+\n+  /**\n+   * Configures Gson to apply a set of exclusion strategies during deserialization.\n+   * Each of the {@code strategies} will be applied as a disjunction rule.\n+   * This means that if one of the {@code strategies} suggests that a field (or class) should be\n+   * skipped then that field (or object) is skipped during deserialization\n+   * depending on the {@code mode} that is passed into this method.\n+   *\n+   * @param strategies the set of strategy object to apply during the {@code mode}.\n+   * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n+   * @since 1.7\n+   */\n+  public GsonBuilder addDeserializationExclusionStrategies(ExclusionStrategy... strategies) {\n+    deserializeExclusionStrategies.addAll(Arrays.asList(strategies));\n+    return this;\n+  }\n   /**\n    * Configures Gson to output Json that fits in a page for pretty printing. This option only\n    * affects Json serialization.\n--- a/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java\n \n package com.google.gson.functional;\n \n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import junit.framework.TestCase;\n+\n import com.google.gson.ExclusionStrategy;\n import com.google.gson.FieldAttributes;\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonObject;\n import com.google.gson.JsonPrimitive;\n-import com.google.gson.Mode;\n-\n-import junit.framework.TestCase;\n-\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n \n /**\n  * Performs some functional tests when Gson is instantiated with some common user defined\n   }\n \n   public void testExclusionStrategySerialization() throws Exception {\n-    Gson gson = createGson(new MyExclusionStrategy(String.class), null);\n+    Gson gson = createGson(new MyExclusionStrategy(String.class), true);\n     String json = gson.toJson(src);\n     assertFalse(json.contains(\"\\\"stringField\\\"\"));\n     assertFalse(json.contains(\"\\\"annotatedField\\\"\"));\n   }\n   \n   public void testExclusionStrategyDeserialization() throws Exception {\n-    Gson gson = createGson(new MyExclusionStrategy(String.class), null);\n+    Gson gson = createGson(new MyExclusionStrategy(String.class), false);\n     JsonObject json = new JsonObject();\n     json.add(\"annotatedField\", new JsonPrimitive(src.annotatedField + 5));\n     json.add(\"stringField\", new JsonPrimitive(src.stringField + \"blah,blah\"));\n         src.annotatedField + 5, src.stringField + \"blah,blah\",\n         src.longField + 655L);\n \n-    Gson gson = createGson(new MyExclusionStrategy(String.class), Mode.DESERIALIZE);    \n+    Gson gson = createGson(new MyExclusionStrategy(String.class), false);    \n     JsonObject json = gson.toJsonTree(testObj).getAsJsonObject();\n     assertEquals(testObj.annotatedField, json.get(\"annotatedField\").getAsInt());\n     assertEquals(testObj.stringField, json.get(\"stringField\").getAsString());\n     assertEquals(src.stringField, target.stringField);\n   }\n \n-  private static Gson createGson(ExclusionStrategy exclusionStrategy, Mode mode) {\n+  private static Gson createGson(ExclusionStrategy exclusionStrategy, boolean serialization) {\n     GsonBuilder gsonBuilder = new GsonBuilder();\n-    if (mode == null) {\n-      gsonBuilder.setExclusionStrategies(exclusionStrategy);\n+    if (serialization) {\n+      gsonBuilder.addSerializationExclusionStrategies(exclusionStrategy);\n     } else {\n-      gsonBuilder.setExclusionStrategies(mode, exclusionStrategy);\n+      gsonBuilder.addDeserializationExclusionStrategies(exclusionStrategy);\n     }\n     return gsonBuilder\n         .serializeNulls()", "timestamp": 1301957314, "metainfo": ""}