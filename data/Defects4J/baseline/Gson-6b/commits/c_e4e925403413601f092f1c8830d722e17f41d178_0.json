{"sha": "e4e925403413601f092f1c8830d722e17f41d178", "log": "Added an asynchronous client for invoking Web-services. This client uses a queue to hold web-service requests and returns the control back to the caller. A separate thread executes these web-service requests and invokes a caller-suplied callback with the results. Made WebServiceClient reusable across different type of Web-service calls. Added configurable logging support in RequestSender, ResponseReceiver and WebServiceClients. Added some logging. Throwing WebServiceSystemException instead of RuntimException.", "commit": "\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/QueueConsumer.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+import java.util.concurrent.BlockingQueue;\n+\n+import com.google.gson.webservice.definition.WebServiceCall;\n+import com.google.gson.webservice.definition.WebServiceResponse;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n+\n+/**\n+ * A consumer that executes in its own thread consuming queue entries and invoking web-service calls\n+ *\n+ * @author inder\n+ */\n+final class QueueConsumer implements Runnable {\n+\n+  private final BlockingQueue<QueueEntry> queue;\n+  private WebServiceClient client;\n+\n+  QueueConsumer(BlockingQueue<QueueEntry> queue, WebServiceClient client) {\n+    this.queue = queue;\n+    this.client = client;\n+  }\n+\n+  @Override\n+  public void run() {\n+    try {\n+      while(true) {\n+        consume(queue.take());\n+      }\n+    } catch (InterruptedException e) {\n+      // exit\n+    }\n+  }\n+\n+  private void consume(QueueEntry entry) {\n+    try {\n+      WebServiceResponse response = client.getResponse(entry.callSpec, entry.request);\n+      WebServiceCall call = new WebServiceCall(entry.callSpec, entry.request, response);\n+      entry.responseCallback.handleResponse(call);\n+    } catch (WebServiceSystemException e) {\n+      entry.responseCallback.handleError(e, entry.request, entry.callSpec);\n+    }\n+  }  \n+}\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/QueueEntry.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+import com.google.gson.webservice.definition.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.WebServiceRequest;\n+\n+/**\n+ * A holder class for an entry stored in queue. It contains references to the request, callspec,\n+ * and the client-supplied callback to provide sufficient information to execute a web-service call.\n+ *\n+ * @author inder\n+ */\n+final class QueueEntry {\n+  final WebServiceCallSpec callSpec;\n+  final WebServiceRequest request;\n+  final ResponseCallback responseCallback;\n+\n+  QueueEntry(WebServiceCallSpec callSpec, WebServiceRequest request,\n+      ResponseCallback responseCallback) {\n+    this.callSpec = callSpec;\n+    this.request = request;\n+    this.responseCallback = responseCallback;\n+  }\n+}\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/RequestSender.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/RequestSender.java\n import java.lang.reflect.Type;\n import java.net.HttpURLConnection;\n import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n import com.google.gson.Gson;\n import com.google.gson.webservice.definition.HeaderMap;\n import com.google.gson.webservice.definition.HeaderMapSpec;\n import com.google.gson.webservice.definition.RequestBody;\n import com.google.gson.webservice.definition.WebServiceRequest;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n \n /**\n  * Class to send Web service requests on a {@link HttpURLConnection}.\n  */\n public final class RequestSender {\n   private final Gson gson;\n+  private final Logger logger;\n+  private final Level logLevel;\n \n   public RequestSender(Gson gson) {\n+    this(gson, null);\n+  }\n+    public RequestSender(Gson gson, Level logLevel) {\n     this.gson = gson;\n+    logger = logLevel == null ? null : Logger.getLogger(RequestSender.class.getName());\n+    this.logLevel = logLevel;\n   }\n   \n   public void send(HttpURLConnection conn, WebServiceRequest request) {    \n       // Initiate the sending of the request.\n       conn.connect();\n     } catch (IOException e) {\n-      throw new RuntimeException(e);\n+      throw new WebServiceSystemException(e);\n     }\n   }\n \n       Object value = entry.getValue();\n       String json = gson.toJson(value, type);\n       conn.addRequestProperty(paramName, json);\n+      if (logger != null) {\n+        logger.log(logLevel, String.format(\"Request param: %s:%s\", paramName, json));\n+      }\n     }\n   }\n   \n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/ResponseCallback.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+import com.google.gson.webservice.definition.WebServiceCall;\n+import com.google.gson.webservice.definition.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.WebServiceRequest;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n+\n+/**\n+ * A client-supplied callback to be used with {@link WebServiceClientAsync}. When a web-service\n+ * call is executed asynchronously, this callback is invoked with the results.\n+ *\n+ * @author inder\n+ */\n+public interface ResponseCallback {\n+  public void handleResponse(WebServiceCall call);\n+  public void handleError(WebServiceSystemException e, WebServiceRequest request,\n+      WebServiceCallSpec callSpec);\n+}\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/ResponseReceiver.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/ResponseReceiver.java\n import java.lang.reflect.Type;\n import java.net.HttpURLConnection;\n import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n import com.google.gson.Gson;\n import com.google.gson.webservice.definition.HeaderMap;\n public final class ResponseReceiver {\n   private final Gson gson;\n   private final ResponseSpec spec;\n+  private final Logger logger;\n+  private final Level logLevel;\n \n   public ResponseReceiver(Gson gson, ResponseSpec spec) {\n+    this(gson, spec, null);\n+  }\n+  public ResponseReceiver(Gson gson, ResponseSpec spec, Level logLevel) {\n     this.gson = gson;\n     this.spec = spec;\n+    this.logger = logLevel == null ? null : Logger.getLogger(ResponseReceiver.class.getName());\n+    this.logLevel = logLevel;\n   }\n   \n   public WebServiceResponse receive(HttpURLConnection conn) {\n       String paramName = entry.getKey();\n       String json = conn.getHeaderField(paramName);\n       if (json != null) {\n+        if (logger != null) {\n+          logger.log(logLevel, String.format(\"Response Header: %s:%s\\n\", paramName, json));\n+        }\n         Type typeOfT = paramsSpec.getTypeFor(paramName);\n         Object value = gson.fromJson(json, typeOfT);\n         paramsBuilder.put(paramName, value, typeOfT);\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/SingleThreadExecutor.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * An executor that uses a single thread to execute all calls\n+ *\n+ * @author inder\n+ */\n+final class SingleThreadExecutor implements TaskExecutor {\n+  private ExecutorService executor;\n+  public void execute(final Runnable r) {\n+    executor = Executors.newSingleThreadExecutor();\n+    executor.execute(r);\n+  }\n+\n+  @Override\n+  public void shutdownNow() {\n+    executor.shutdownNow();\n+  }\n+}\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/TaskExecutor.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * An {@link Executor} with an additional method for shutdown. We could have just used\n+ * {@link java.util.concurent.ExecutorService}, however, that requires too many methods to be\n+ * implemented.\n+ *  \n+ * @author inder\n+ */\n+interface TaskExecutor extends Executor {\n+  public void shutdownNow();\n+}\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/ThreadPerTaskExecutor.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+/**\n+ * An executor that uses a new thread to execute each call\n+ *\n+ * @author inder\n+ */\n+final class ThreadPerTaskExecutor implements TaskExecutor {\n+  private Thread thread;\n+  public void execute(final Runnable r) {\n+    thread = new Thread(r);\n+    thread.start();\n+  }\n+\n+  @Override\n+  public void shutdownNow() {\n+    if (thread != null) {\n+      thread.interrupt();\n+    }\n+  }\n+}\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/WebServiceClient.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/WebServiceClient.java\n import java.net.HttpURLConnection;\n import java.net.MalformedURLException;\n import java.net.URL;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.webservice.definition.ResponseBody;\n import com.google.gson.webservice.definition.WebServiceCallSpec;\n import com.google.gson.webservice.definition.WebServiceRequest;\n import com.google.gson.webservice.definition.WebServiceResponse;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n+import com.google.gson.webservice.typeadapters.ResponseBodyGsonConverter;\n \n /**\n  * Main class used by clients to access a Gson Web service.\n  */\n public final class WebServiceClient {\n   private final WebServiceConfig config;\n-  private final WebServiceCallSpec callSpec;\n-  private final Gson gson;\n+  private final Logger logger;\n+  private final Level logLevel;\n \n-  public WebServiceClient(Gson gson, WebServiceConfig serverConfig, WebServiceCallSpec callSpec) {\n-    this.gson = gson;\n+  public WebServiceClient(WebServiceConfig serverConfig) {\n+    this(serverConfig, null);\n+  }\n+\n+  public WebServiceClient(WebServiceConfig serverConfig, Level logLevel) {\n     this.config = serverConfig;\n-    this.callSpec = callSpec;\n+    this.logger = logLevel == null ? null : Logger.getLogger(WebServiceClient.class.getName());\n+    this.logLevel = logLevel;\n   }\n   \n-  private URL getWebServiceUrl() {\n+  private URL getWebServiceUrl(WebServiceCallSpec callSpec) {\n     String url = config.getServiceBaseUrl() + callSpec.getPath().get();\n     try {\n       return new URL(url);\n     }\n   }\n   \n-  public WebServiceResponse getResponse(WebServiceRequest request) {\n+  public WebServiceResponse getResponse(WebServiceCallSpec callSpec, WebServiceRequest request) {\n     try {\n-      HttpURLConnection conn = (HttpURLConnection) getWebServiceUrl().openConnection();\n+      URL webServiceUrl = getWebServiceUrl(callSpec);\n+      if (logger != null) {\n+        logger.log(logLevel, \"Opening connection to \" + webServiceUrl);\n+      }\n+      HttpURLConnection conn = (HttpURLConnection) webServiceUrl.openConnection();\n+      Gson gson = new GsonBuilder()\n+        .registerTypeAdapter(ResponseBody.class,\n+            new ResponseBodyGsonConverter(callSpec.getResponseSpec().getBodySpec()))\n+        .create();\n       RequestSender requestSender = new RequestSender(gson);\n       requestSender.send(conn, request);\n-      ResponseReceiver responseReceiver = new ResponseReceiver(gson, callSpec.getResponseSpec());\n+      ResponseReceiver responseReceiver =\n+        new ResponseReceiver(gson, callSpec.getResponseSpec(), logLevel);\n       return responseReceiver.receive(conn);\n     } catch (IOException e) {\n-      throw new RuntimeException(e);\n+      throw new WebServiceSystemException(e);\n+    } catch (IllegalArgumentException e) {\n+      throw new WebServiceSystemException(e);\n     }\n   }\n   \n   @Override\n   public String toString() {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"{config:\").append(config).append(\",callSpec:\").append(callSpec);\n-    sb.append(\"gson:\").append(gson).append(\"}\");\n-    return sb.toString();\n+    return String.format(\"config:%s\", config);\n   }\n }\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/WebServiceClientAsync.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.logging.Level;\n+\n+import com.google.gson.webservice.definition.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.WebServiceRequest;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n+\n+/**\n+ * A client for invoking a JSON-based Web-service in an asynchronous manner. The call is queued,\n+ * and control returns to the caller. A separate thread executes the call, and invokes the\n+ * client-supplied callback with results.\n+ *  \n+ * @author inder\n+ */\n+public final class WebServiceClientAsync {\n+\n+  private final BlockingQueue<QueueEntry> queue;\n+  private final boolean threadPerTask;\n+  private final TaskExecutor executor;\n+\n+  public WebServiceClientAsync(WebServiceConfig serverConfig) {\n+    this(serverConfig, null);\n+  }\n+  public WebServiceClientAsync(WebServiceConfig serverConfig, Level logLevel) {\n+    this(new WebServiceClient(serverConfig, logLevel));\n+  }\n+\n+  public WebServiceClientAsync(WebServiceClient client) {\n+    queue = new LinkedBlockingQueue<QueueEntry>();\n+    this.threadPerTask = true;\n+    QueueConsumer consumer = new QueueConsumer(queue, client);\n+    executor = getExecutor();\n+    executor.execute(consumer);\n+  }\n+\n+  private TaskExecutor getExecutor() {\n+    return threadPerTask ? new ThreadPerTaskExecutor() : new SingleThreadExecutor();\n+  }\n+\n+  public void callAsync(WebServiceCallSpec callSpec, WebServiceRequest request,\n+      ResponseCallback responseCallback) {\n+    try {\n+      queue.put(new QueueEntry(callSpec, request, responseCallback));\n+    } catch (InterruptedException e) {\n+      throw new WebServiceSystemException(e);\n+    }\n+  }\n+  \n+  public void shutdownNow() {\n+    executor.shutdownNow();\n+  }\n+}", "timestamp": 1263995999, "metainfo": ""}