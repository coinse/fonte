{"sha": "1da3ef98916a360f6af703da0ac0a26b3a459ddb", "log": "Ensured that a custom handler is not visited during deserialization.  Ensured that JsonTreeNavigator can handle null values as children of JsonObject. This is now possible since Gson exposes toJson(JsonElement) method to which the user can pass a JsonElement with null values.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n     Type objType = objTypePair.getType();\n     JsonDeserializer deserializer = deserializers.getHandlerFor(objType);\n     if (deserializer != null) {\n-      target = (T) deserializer.deserialize(json, objType, context);\n+      if (json != null && !json.isJsonNull()) {\n+        target = (T) deserializer.deserialize(json, objType, context);\n+      }\n       return true;\n     }\n     return false;\n--- a/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n       @SuppressWarnings(\"unchecked\")\n       JsonDeserializer deserializer = deserializers.getHandlerFor(actualTypeOfField);\n       if (deserializer != null) {\n-        Object value = deserializer.deserialize(child, actualTypeOfField, context);\n-        f.set(parent, value);\n+        if (child != null && !child.isJsonNull()) {\n+          Object value = deserializer.deserialize(child, actualTypeOfField, context);\n+          f.set(parent, value);\n+        }\n         return true;\n       }\n       return false;\n--- a/gson/src/main/java/com/google/gson/JsonTreeNavigator.java\n+++ b/gson/src/main/java/com/google/gson/JsonTreeNavigator.java\n   }\n   \n   public void navigate(JsonElement element) throws IOException {\n-    if (element.isJsonNull()) {\n+    if (element == null || element.isJsonNull()) {\n       visitor.visitNull();\n     } else if (element.isJsonArray()) {\n       JsonArray array = element.getAsJsonArray();\n    */\n   private boolean visitChild(JsonObject parent, String childName, JsonElement child, \n       boolean isFirst) throws IOException {\n-    if (child.isJsonNull()) {\n+    if (child == null || child.isJsonNull()) {\n       if (visitNulls) {\n         visitor.visitNullObjectMember(parent, childName, isFirst);\n         navigate(child.getAsJsonNull());\n    * Returns true if the child was visited, false if it was skipped.\n    */\n   private void visitChild(JsonArray parent, JsonElement child, boolean isFirst) throws IOException {\n-    if (child.isJsonNull()) {\n+    if (child == null || child.isJsonNull()) {\n       visitor.visitNullArrayMember(parent, isFirst);\n       navigate(child);\n \t  } else if (child.isJsonArray()) {\n--- a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n     assertEquals(\"Jacob\", foo.part1);\n     assertEquals(\"Tomaw\", foo.part2);\n   }\n+\n+  public void testEnsureCustomSerializerNotInvokedForNullValues() {\n+    Gson gson = new GsonBuilder()\n+        .registerTypeAdapter(DataHolder.class, new DataHolderSerializer())\n+        .create();\n+    DataHolderWrapper target = new DataHolderWrapper(new DataHolder(\"abc\"));\n+    String json = gson.toJson(target);\n+    assertEquals(\"{\\\"wrappedData\\\":{\\\"myData\\\":\\\"abc\\\"}}\", json);\n+  }\n+\n+  public void testEnsureCustomDeserializerNotInvokedForNullValues() {\n+    Gson gson = new GsonBuilder()\n+        .registerTypeAdapter(DataHolder.class, new DataHolderDeserializer())\n+        .create();\n+    String json = \"{wrappedData:null}\";\n+    DataHolderWrapper actual = gson.fromJson(json, DataHolderWrapper.class);\n+    assertNull(actual.wrappedData);\n+  }\n+\n+  private static class DataHolder {\n+    @SuppressWarnings(\"unused\")\n+    final String data;\n+\n+    // For use by Gson\n+    @SuppressWarnings(\"unused\")\n+    private DataHolder() {\n+      this(\"\");\n+    }\n+    \n+    public DataHolder(String data) {\n+      this.data = data;\n+    }\n+  }\n+  \n+  private static class DataHolderWrapper {\n+    final DataHolder wrappedData;\n+    \n+    // For use by Gson\n+    @SuppressWarnings(\"unused\")\n+    private DataHolderWrapper() {\n+      this(null);\n+    }\n+    \n+    public DataHolderWrapper(DataHolder data) {\n+      this.wrappedData = data;\n+    }\n+  }\n+  \n+  private static class DataHolderSerializer implements JsonSerializer<DataHolder> {\n+    public JsonElement serialize(DataHolder src, Type typeOfSrc, JsonSerializationContext context) {\n+      JsonObject obj = new JsonObject();\n+      obj.addProperty(\"myData\", src.data);\n+      return obj;\n+    }\n+  }\n+\n+  private static class DataHolderDeserializer implements JsonDeserializer<DataHolder> {\n+    public DataHolder deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+        throws JsonParseException {\n+      JsonObject jsonObj = json.getAsJsonObject();\n+      JsonElement jsonElement = jsonObj.get(\"data\");\n+      if (jsonElement == null || jsonElement.isJsonNull()) {\n+        return new DataHolder(null);\n+      }\n+      return new DataHolder(jsonElement.getAsString());\n+    }\n+  }\n+\n }\n--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n \n package com.google.gson.functional;\n \n-import java.lang.reflect.Type;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-\n-import junit.framework.TestCase;\n-\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.InstanceCreator;\n+import com.google.gson.JsonObject;\n import com.google.gson.common.TestTypes.ArrayOfObjects;\n import com.google.gson.common.TestTypes.BagOfPrimitiveWrappers;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n import com.google.gson.common.TestTypes.ClassWithTransientFields;\n import com.google.gson.common.TestTypes.Nested;\n import com.google.gson.common.TestTypes.PrimitiveArray;\n+\n+import junit.framework.TestCase;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n \n /**\n  * Functional tests for Json serialization and deserialization of regular classes.\n     String b = \"\";\n     String c = \"\";\n   }\n+  \n+  public void testJsonObjectSerialization() {\n+    Gson gson = new GsonBuilder().serializeNulls().create();\n+    JsonObject obj = new JsonObject();\n+    String json = gson.toJson(obj);\n+    assertEquals(\"{}\", json);\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java\n package com.google.gson.functional;\n \n import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonObject;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n import com.google.gson.common.TestTypes.ClassWithTransientFields;\n import com.google.gson.common.TestTypes.Nested;\n  */\n public class PrintFormattingTest extends TestCase {\n \n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new Gson();\n+  }\n+\n   @SuppressWarnings(\"unchecked\")\n   public void testCompactFormattingLeavesNoWhiteSpace() {\n-    Gson gson = new Gson();\n     List list = new ArrayList();\n     list.add(new BagOfPrimitives());\n     list.add(new Nested());\n     assertContainsNoWhiteSpace(json);\n   }\n \n+  public void testJsonObjectWithNullValues() {\n+    JsonObject obj = new JsonObject();\n+    obj.addProperty(\"field1\", \"value1\");\n+    obj.addProperty(\"field2\", (String) null);\n+    String json = gson.toJson(obj);\n+    assertTrue(json.contains(\"field1\"));\n+    assertFalse(json.contains(\"field2\"));\n+  }\n+\n+  public void testJsonObjectWithNullValuesSerialized() {\n+    gson = new GsonBuilder().serializeNulls().create();\n+    JsonObject obj = new JsonObject();\n+    obj.addProperty(\"field1\", \"value1\");\n+    obj.addProperty(\"field2\", (String) null);\n+    String json = gson.toJson(obj);\n+    assertTrue(json.contains(\"field1\"));\n+    assertTrue(json.contains(\"field2\"));\n+  }\n+\n   private static void assertContainsNoWhiteSpace(String str) {\n     for (char c : str.toCharArray()) {\n       assertFalse(Character.isWhitespace(c));", "timestamp": 1254791728, "metainfo": ""}