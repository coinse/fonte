{"sha": "b64f69cb00a5f39cc7fe93b082ddbd2e2ca4087e", "log": "Added efficient equals and isValid static methods.", "commit": "\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/rest/Id.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/Id.java\n     return (int) value;\n   }\n \n-  @Override\n+  public static boolean isValid(Id<?> id) {\n+    return id != null && id.value != NULL_VALUE;\n+  }\n+\n+  /**\n+   * A more efficient comparison method for ids that take into account of ids being nullable.\n+   * Since the method is parameterized and both ids are of the same type, this method compares\n+   * only id values, not their types. Note that this shortcut doesn't work if you pass raw ids\n+   * to this method\n+   */\n+  public static <T> boolean equals(/* @Nullable */ Id<T> id1, /* @Nullable */ Id<T> id2) {\n+    if ((id1 == null && id2 != null) || (id1 != null && id2 == null)) {\n+      return false;\n+    }\n+    if (id1 == null && id2 == null) {\n+      return true;\n+    }\n+    return id1.value == id2.value;\n+  }\n+\n+  @Override  \n   public boolean equals(Object obj) {\n     if (this == obj) return true;\n     if (obj == null) return false;\n--- a/wsdef/src/test/java/com/google/gson/webservice/definition/rest/IdTest.java\n+++ b/wsdef/src/test/java/com/google/gson/webservice/definition/rest/IdTest.java\n     assertTrue(Id.areEquivalentTypes(fooType, Id.class));\n   }\n \n+  public void testStaticEquals() {\n+    Id<Foo> id1 = Id.get(3L, Foo.class);\n+    Id<Foo> id2 = Id.get(3L, Foo.class);\n+    Id<Foo> id3 = Id.get(4L, Foo.class);\n+    assertTrue(Id.equals(id1, id2));\n+    assertFalse(Id.equals(null, id2));\n+    assertFalse(Id.equals(id1, null));\n+    assertTrue(Id.equals(null, null));\n+    assertFalse(Id.equals(id1, id3));\n+  }\n+\n   private static class Foo {\n   }\n }", "timestamp": 1288627201, "metainfo": ""}