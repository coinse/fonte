{"sha": "c9e48097ece2f2e3b16c6bb726218c7967af4e8c", "log": "Do not overwrite a duplicate field value during seriailzation if one those fields is null.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n       Preconditions.checkState(root.isJsonObject());\n       Object obj = f.get(parent);\n       if (obj == null) {\n-        addChildAsElement(f, JsonNull.INSTANCE);\n+        if (serializeNulls) {\n+          addChildAsElement(f, JsonNull.INSTANCE);\n+        }\n         return true;\n       }\n       JsonSerializer serializer = serializers.getHandlerFor(actualTypeOfField);\n--- a/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java\n import com.google.gson.FieldNamingPolicy;\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.SerializedName;\n import com.google.gson.common.TestTypes.ClassWithSerializedNameFields;\n import com.google.gson.common.TestTypes.StringWrapper;\n \n         gson.fromJson(expected.getExpectedJson(), ClassWithSerializedNameFields.class);\n     assertEquals(expected.f, actual.f);\n   }\n+  \n+  public void testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization() {\n+    Gson gson = builder.create();\n+    ClassWithDuplicateFields target = new ClassWithDuplicateFields();\n+    target.a = 10;\n+    String actual = gson.toJson(target);\n+    assertEquals(\"{\\\"a\\\":10}\", actual);\n+    \n+    target.a = null;\n+    target.b = 3.0D;\n+    actual = gson.toJson(target);\n+    assertEquals(\"{\\\"a\\\":3.0}\", actual);\n+  }\n+  \n+  private static class ClassWithDuplicateFields {\n+    private Integer a;\n+    @SerializedName(\"a\") private Double b;\n+  }\n }", "timestamp": 1227747050, "metainfo": ""}