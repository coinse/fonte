{"sha": "6feb325044240ba6ff15aceee2b3b091fa278d4f", "log": "Added a type adapter for serializing and deserializing protobufs", "commit": "\n--- a/proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java\n+++ b/proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java\n-/*\n- * Copyright (C) 2010 Google Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n+// Copyright 2010 Google Inc. All Rights Reserved.\n+\n package com.google.gson.protobuf;\n \n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n import com.google.gson.JsonElement;\n import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n import com.google.gson.JsonSerializationContext;\n import com.google.gson.JsonSerializer;\n+import com.google.protobuf.Descriptors.Descriptor;\n import com.google.protobuf.Descriptors.FieldDescriptor;\n-import com.google.protobuf.Descriptors.FieldDescriptor.JavaType;\n-import com.google.protobuf.Message;\n+import com.google.protobuf.GeneratedMessage;\n \n+import java.lang.reflect.AccessibleObject;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n import java.lang.reflect.Type;\n+import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n-public class ProtoTypeAdapter implements JsonSerializer<Message> {\n+/**\n+ * Gson type adapter for protocol buffers\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class ProtoTypeAdapter implements JsonSerializer<GeneratedMessage>,\n+    JsonDeserializer<GeneratedMessage> {\n \n   @Override\n-  public JsonElement serialize(Message msg, Type typeOfMsg, JsonSerializationContext context) {\n-    JsonObject obj = new JsonObject();\n-    Map<FieldDescriptor, Object> allFields = msg.getAllFields();\n-    for (Map.Entry<FieldDescriptor, Object> entry : allFields.entrySet()) {\n-      FieldDescriptor key = entry.getKey();\n-      Object value = entry.getValue();\n-      JavaType javaType = key.getJavaType();\n-      Class<?> type = toJavaType(javaType);\n-      JsonElement element = context.serialize(value, type);\n-      obj.add(key.getName(), element);\n+  public JsonElement serialize(GeneratedMessage src, Type typeOfSrc,\n+      JsonSerializationContext context) {\n+    JsonObject ret = new JsonObject();\n+    final Map<FieldDescriptor, Object> fields = src.getAllFields();\n+\n+    for (Map.Entry<FieldDescriptor, Object> fieldPair : fields.entrySet()) {\n+      final FieldDescriptor desc = fieldPair.getKey();\n+      if (desc.isRepeated()) {\n+        List<?> fieldList = (List<?>) fieldPair.getValue();\n+        if (fieldList.size() != 0) {\n+          JsonArray array = new JsonArray();\n+          for (Object o : fieldList) {\n+            array.add(context.serialize(o));\n+          }\n+          ret.add(desc.getName(), array);\n+        }\n+      } else {\n+        ret.add(desc.getName(), context.serialize(fieldPair.getValue()));\n+      }\n     }\n-    return obj;\n+    return ret;\n   }\n \n-  private Class<?> toJavaType(JavaType javaType) {\n-    switch (javaType) {\n-    case BOOLEAN:\n-      return Boolean.class;\n-    case BYTE_STRING:\n-      return String.class;\n-    case DOUBLE:\n-      return double.class;\n-    case ENUM:\n-      return Enum.class;\n-    case FLOAT:\n-      return float.class;\n-    case INT:\n-      return int.class;\n-    case LONG:\n-      return long.class;\n-    case MESSAGE:\n-      return Message.class;\n-    case STRING:\n-      return String.class;\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public GeneratedMessage deserialize(JsonElement json, Type typeOfT,\n+      JsonDeserializationContext context) throws JsonParseException {\n+    try {\n+      JsonObject jsonObject = json.getAsJsonObject();\n+      Class<? extends GeneratedMessage> protoClass =\n+        (Class<? extends GeneratedMessage>) typeOfT; \n+      try {\n+        // Invoke the ProtoClass.newBuilder() method\n+        Object protoBuilder = getCachedMethod(protoClass, \"newBuilder\")\n+          .invoke(null);\n+        Class<?> builderClass = protoBuilder.getClass();\n+\n+        Descriptor protoDescriptor = (Descriptor) getCachedMethod(\n+            protoClass, \"getDescriptor\").invoke(null);\n+        // Call setters on all of the available fields\n+        for (FieldDescriptor fieldDescriptor : protoDescriptor.getFields()) {\n+          String name = fieldDescriptor.getName();\n+          if (jsonObject.has(name)) {\n+            JsonElement jsonElement = jsonObject.get(name);\n+            String fieldName = name + \"_\";\n+            Field field = protoClass.getDeclaredField(fieldName);\n+            Type fieldType = field.getGenericType();\n+            Object fieldValue = context.deserialize(jsonElement, fieldType);\n+            Method method = getCachedMethod(\n+              builderClass, \"setField\", FieldDescriptor.class, Object.class);\n+            method.invoke(protoBuilder, fieldDescriptor, fieldValue);\n+          }\n+        }\n+        \n+        // Invoke the build method to return the final proto\n+        return (GeneratedMessage) getCachedMethod(builderClass, \"build\")\n+            .invoke(protoBuilder);\n+      } catch (SecurityException e) {\n+        throw new JsonParseException(e);\n+      } catch (NoSuchMethodException e) {\n+        throw new JsonParseException(e);\n+      } catch (IllegalArgumentException e) {\n+        throw new JsonParseException(e);\n+      } catch (IllegalAccessException e) {\n+        throw new JsonParseException(e);\n+      } catch (InvocationTargetException e) {\n+        throw new JsonParseException(e);\n+      }\n+    } catch (Exception e) {\n+      throw new JsonParseException(\"Error while parsing proto: \", e);\n     }\n-    return Object.class;\n   }\n-}\n+\n+  private static Method getCachedMethod(Class<?> clazz, String methodName,\n+      Class<?>... methodParamTypes) throws NoSuchMethodException {\n+    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\n+    if (mapOfMethods == null) {\n+      mapOfMethods = new HashMap<Class<?>, Method>();\n+      mapOfMapOfMethods.put(methodName, mapOfMethods);\n+    }\n+    Method method = mapOfMethods.get(clazz);\n+    if (method == null) {\n+      method = clazz.getMethod(methodName, methodParamTypes);\n+      mapOfMethods.put(clazz, method);\n+    }\n+    return method;\n+  }\n+\n+  private static Map<String, Map<Class<?>, Method>> mapOfMapOfMethods =\n+    new HashMap<String, Map<Class<?>, Method>>();\n+}\n--- a/proto/src/test/java/com/google/gson/protobuf/FunctionalTest.java\n+++ b/proto/src/test/java/com/google/gson/protobuf/FunctionalTest.java\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.protobuf.generated.Bag.SimpleProto;\n-import com.google.protobuf.Message;\n import com.google.protobuf.Descriptors.Descriptor;\n+import com.google.protobuf.GeneratedMessage;\n \n import junit.framework.TestCase;\n \n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n-    gson = new GsonBuilder()\n-//      .registerTypeHierarchyAdapter(Message.class, new ProtoTypeAdapter())\n-      .create();\n+    gson = new GsonBuilder().registerTypeHierarchyAdapter(\n+      GeneratedMessage.class, new ProtoTypeAdapter()).create();\n   }\n \n   public void testSerializeEmptyProto() {\n     assertEquals(\"{}\", json);\n   }\n \n+  public void testDeserializeEmptyProto() {\n+    SimpleProto proto = gson.fromJson(\"{}\", SimpleProto.class);\n+    assertFalse(proto.hasCount());\n+    assertFalse(proto.hasMsg());\n+  }\n+\n   public void testSerializeProto() {\n     Descriptor descriptor = SimpleProto.getDescriptor();\n     SimpleProto proto = SimpleProto.newBuilder()\n-      .setField(descriptor.findFieldByNumber(1), \"foo\")\n-      .setField(descriptor.findFieldByNumber(2), 3)\n+      .setField(descriptor.findFieldByName(\"count\"), 3)\n+      .setField(descriptor.findFieldByName(\"msg\"), \"foo\")\n       .build();\n     String json = gson.toJson(proto);\n-    System.out.println(json);\n     assertTrue(json.contains(\"\\\"msg\\\":\\\"foo\\\"\"));\n     assertTrue(json.contains(\"\\\"count\\\":3\"));\n   }\n+\n+  public void testDeserializeProto() {\n+    SimpleProto proto = gson.fromJson(\"{msg:'foo',count:3}\", SimpleProto.class);\n+    assertEquals(\"foo\", proto.getMsg());\n+    assertEquals(3, proto.getCount());\n+  }\n }", "timestamp": 1288220786, "metainfo": ""}