{"sha": "915c5d4d6f46ca65f60430b7a9b403be87453243", "log": "Converted BitSetTypeAdapter to the new style.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n \n package com.google.gson;\n \n-import com.google.gson.internal.ParameterizedTypeHandlerMap;\n-\n import java.lang.reflect.Type;\n import java.sql.Time;\n import java.sql.Timestamp;\n import java.text.DateFormat;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n-import java.util.BitSet;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.Locale;\n import java.util.TimeZone;\n+\n+import com.google.gson.internal.ParameterizedTypeHandlerMap;\n \n /**\n  * List of all the default type adapters ({@link JsonSerializer}s, {@link JsonDeserializer}s,\n \n   @SuppressWarnings(\"unchecked\")\n   private static final EnumTypeAdapter ENUM_TYPE_ADAPTER = new EnumTypeAdapter();\n-  private static final BitSetTypeAdapter BIT_SET_ADAPTER = new BitSetTypeAdapter();\n \n   private static final CharacterTypeAdapter CHARACTER_TYPE_ADAPTER = new CharacterTypeAdapter();\n   private static final NumberTypeAdapter NUMBER_TYPE_ADAPTER = new NumberTypeAdapter();\n     map.register(Time.class, TIME_TYPE_ADAPTER, true);\n     map.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n     map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n-    map.register(BitSet.class, BIT_SET_ADAPTER, true);\n \n     // Add primitive serializers\n     map.register(Character.class, CHARACTER_TYPE_ADAPTER, true);\n     map.register(Time.class, wrapDeserializer(TIME_TYPE_ADAPTER), true);\n     map.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n     map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n-    map.register(BitSet.class, BIT_SET_ADAPTER, true);\n \n     // Add primitive deserializers\n     map.register(Character.class, wrapDeserializer(CHARACTER_TYPE_ADAPTER), true);\n     }\n   }\n \n-  private static final class BitSetTypeAdapter implements JsonSerializer<BitSet>, JsonDeserializer<BitSet> {\n-    public JsonElement serialize(BitSet src, Type typeOfSrc, JsonSerializationContext context) {\n-      JsonArray array = new JsonArray();\n-      for (int i = 0; i < src.length(); i++) {\n-        int value = (src.get(i)) ? 1 : 0;\n-        array.add(new JsonPrimitive(value));\n-      }\n-      return array;\n-    }\n-\n-    public BitSet deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-        throws JsonParseException {\n-      if (!json.isJsonArray()) {\n-        throw new JsonParseException(\"Expected an array of bits.\");\n-      }\n-      BitSet result = new BitSet();\n-      JsonArray array = json.getAsJsonArray();\n-      for (int i = 0; i < array.size(); i++) {\n-        JsonElement element = array.get(i);\n-        if (element.getAsBoolean()) {\n-           result.set(i);\n-        }\n-      }\n-      return result;\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return BitSetTypeAdapter.class.getSimpleName();\n-    }\n-  }\n-\n   private static final class NumberTypeAdapter\n       implements JsonSerializer<Number>, JsonDeserializer<Number> {\n     public JsonElement serialize(Number src, Type typeOfSrc, JsonSerializationContext context) {\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n         .factory(TypeAdapters.UUID_FACTORY)\n         .factory(TypeAdapters.LOCALE_FACTORY)\n         .factory(TypeAdapters.INET_ADDRESS_FACTORY)\n+        .factory(TypeAdapters.BIT_SET_FACTORY)\n         .typeAdapter(BigDecimal.class, new BigDecimalTypeAdapter())\n         .typeAdapter(BigInteger.class, new BigIntegerTypeAdapter())\n         .factory(new CollectionTypeAdapterFactory(constructorConstructor))\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n \n package com.google.gson.internal.bind;\n \n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.BitSet;\n+import java.util.Locale;\n+import java.util.StringTokenizer;\n+import java.util.UUID;\n+\n import com.google.gson.JsonIOException;\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n \n-import java.io.IOException;\n-import java.net.InetAddress;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.net.URL;\n-import java.util.Locale;\n-import java.util.StringTokenizer;\n-import java.util.UUID;\n-\n /**\n  * Type adapters for basic types.\n  */\n public final class TypeAdapters {\n   private TypeAdapters() {}\n+\n+  public static final TypeAdapter<BitSet> BIT_SET = new TypeAdapter<BitSet>() {\n+    public BitSet read(JsonReader reader) throws IOException {\n+      BitSet bitset = new BitSet();\n+      reader.beginArray();\n+      int i = 0;\n+      JsonToken tokenType = reader.peek();\n+      while (tokenType != JsonToken.END_ARRAY) {\n+        boolean set = false;\n+        switch (tokenType) {\n+        case NUMBER:\n+          set = reader.nextInt() != 0;\n+          break;\n+        case BOOLEAN:\n+          set = reader.nextBoolean();\n+          break;\n+        case STRING:\n+          String stringValue = reader.nextString();\n+          try {\n+            set = Integer.parseInt(stringValue) != 0;\n+          } catch (NumberFormatException e) {\n+            throw new JsonSyntaxException(\n+                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n+          }\n+          break;\n+        default:\n+          throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n+        }\n+        if (set) {\n+          bitset.set(i);\n+        }\n+        ++i;\n+        tokenType = reader.peek();\n+      }\n+      reader.endArray();\n+      return bitset;\n+    }\n+\n+    public void write(JsonWriter writer, BitSet src) throws IOException {\n+      writer.beginArray();\n+      for (int i = 0; i < src.length(); i++) {\n+        int value = (src.get(i)) ? 1 : 0;\n+        writer.value(value);\n+      }\n+      writer.endArray();\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory BIT_SET_FACTORY = newFactory(BitSet.class, BIT_SET);\n \n   public static final TypeAdapter<Boolean> BOOLEAN = new TypeAdapter<Boolean>() {\n     @Override", "timestamp": 1316149350, "metainfo": ""}