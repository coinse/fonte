{"sha": "70965eae0397636368dbfcc606a1319722c4a3dd", "log": "Adding new type adapters for BigInteger and BigDecimal types.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n \n import com.google.gson.internal.Streams;\n import com.google.gson.internal.bind.ArrayTypeAdapter;\n+import com.google.gson.internal.bind.BigDecimalTypeAdapter;\n+import com.google.gson.internal.bind.BigIntegerTypeAdapter;\n import com.google.gson.internal.bind.CollectionTypeAdapter;\n import com.google.gson.internal.bind.MiniGson;\n import com.google.gson.internal.bind.ReflectiveTypeAdapter;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n import com.google.gson.stream.MalformedJsonException;\n+\n import java.io.IOException;\n import java.io.Reader;\n import java.io.StringReader;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n import java.lang.reflect.Type;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n         .factory(TypeAdapters.newFactory(long.class, Long.class,\n             longAdapter(longSerializationPolicy)))\n         .factory(TypeAdapters.STRING_FACTORY)\n+        .typeAdapter(BigDecimal.class, new BigDecimalTypeAdapter())\n+        .typeAdapter(BigInteger.class, new BigIntegerTypeAdapter())\n         .factory(excludedTypeFactory)\n         .factory(new GsonToMiniGsonTypeAdapter(serializers, deserializers, serializeNulls))\n         .factory(CollectionTypeAdapter.FACTORY)\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.internal.bind;\n+\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+\n+/**\n+ * Adapts a BigDecimal type to and from its JSON representation.\n+ *\n+ * @author Joel Leitch\n+ */\n+public class BigDecimalTypeAdapter extends TypeAdapter<BigDecimal> {\n+\n+  @Override\n+  public BigDecimal read(JsonReader reader) throws IOException {\n+    return new BigDecimal(reader.nextString());\n+  }\n+\n+  @Override\n+  public void write(JsonWriter writer, BigDecimal value) throws IOException {\n+    writer.value(value);\n+  }\n+}\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.internal.bind;\n+\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+\n+/**\n+ * Adapts a BigInteger type to and from its JSON representation.\n+ *\n+ * @author Joel Leitch\n+ */\n+public class BigIntegerTypeAdapter extends TypeAdapter<BigInteger> {\n+\n+  @Override\n+  public BigInteger read(JsonReader reader) throws IOException {\n+    return new BigInteger(reader.nextString());\n+  }\n+\n+  @Override\n+  public void write(JsonWriter writer, BigInteger value) throws IOException {\n+    writer.value(value);\n+  }\n+}", "timestamp": 1313115648, "metainfo": ""}