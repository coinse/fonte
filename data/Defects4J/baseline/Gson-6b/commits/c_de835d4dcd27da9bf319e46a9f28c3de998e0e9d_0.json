{"sha": "de835d4dcd27da9bf319e46a9f28c3de998e0e9d", "log": "Roll back JsonSerializationContext and JsonDeserializationContext to their 1.7.2 API.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n  */\n public final class Gson {\n   @SuppressWarnings(\"unchecked\")\n-  static final ParameterizedTypeHandlerMap EMPTY_MAP = \n+  static final ParameterizedTypeHandlerMap EMPTY_MAP =\n     new ParameterizedTypeHandlerMap().makeUnmodifiable();\n \n    static final boolean DEFAULT_JSON_NON_EXECUTABLE = false;\n       builder.factory(factory);\n     }\n \n-    builder.factory(new GsonToMiniGsonTypeAdapterFactory(serializers, deserializers,\n-        new JsonDeserializationContext(this), new JsonSerializationContext(this), serializeNulls))\n+    builder.factory(new GsonToMiniGsonTypeAdapterFactory(this, serializers, deserializers, serializeNulls))\n         .factory(TypeAdapters.URL_FACTORY)\n         .factory(TypeAdapters.URI_FACTORY)\n         .factory(TypeAdapters.UUID_FACTORY)\n--- a/gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java\n   private final JsonSerializationContext serializationContext;\n   private final boolean serializeNulls;\n \n-  GsonToMiniGsonTypeAdapterFactory(ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,\n+  public GsonToMiniGsonTypeAdapterFactory(final Gson gson,\n+      ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,\n       ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n-      JsonDeserializationContext deserializationContext,\n-      JsonSerializationContext serializationContext, boolean serializeNulls) {\n+      boolean serializeNulls) {\n     this.serializers = serializers;\n     this.deserializers = deserializers;\n     this.serializeNulls = serializeNulls;\n-    this.deserializationContext = deserializationContext;\n-    this.serializationContext = serializationContext;\n+\n+    this.deserializationContext = new JsonDeserializationContext() {\n+      public <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\n+        return gson.fromJson(json, typeOfT);\n+      }\n+    };\n+\n+    this.serializationContext = new JsonSerializationContext() {\n+      public JsonElement serialize(Object src) {\n+        return gson.toJsonTree(src);\n+      }\n+      public JsonElement serialize(Object src, Type typeOfSrc) {\n+        return gson.toJsonTree(src, typeOfSrc);\n+      }\n+    };\n   }\n \n   public <T> TypeAdapter<T> create(final MiniGson context, final TypeToken<T> typeToken) {\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationContext.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationContext.java\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n-public class JsonDeserializationContext {\n-  private final Gson gson;\n-\n-  JsonDeserializationContext(Gson gson) {\n-    this.gson = gson;\n-  }\n-\n-  /**\n-   * TODO: remove this from the public API\n-   */\n-  @Deprecated\n-  public <T> T construct(Type type) {\n-    throw new UnsupportedOperationException();\n-  }\n-\n-  public Object constructArray(Type type, int length) {\n-    throw new UnsupportedOperationException();\n-  }\n+public interface JsonDeserializationContext {\n \n   /**\n    * Invokes default deserialization on the specified object. It should never be invoked on\n    * the element received as a parameter of the\n    * {@link JsonDeserializer#deserialize(JsonElement, Type, JsonDeserializationContext)} method. Doing\n    * so will result in an infinite loop since Gson will in-turn call the custom deserializer again.\n-\n+   *\n    * @param json the parse tree.\n    * @param typeOfT type of the expected return value.\n    * @param <T> The type of the deserialized object.\n    * @return An object of type typeOfT.\n    * @throws JsonParseException if the parse tree does not contain expected data.\n    */\n-  public <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\n-    return gson.fromJson(json, typeOfT);\n-  }\n+  public <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException;\n }\n--- a/gson/src/main/java/com/google/gson/JsonSerializationContext.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationContext.java\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n-public class JsonSerializationContext {\n-\n-  private final Gson gson;\n-\n-  JsonSerializationContext(Gson gson) {\n-    this.gson = gson;\n-  }\n+public interface JsonSerializationContext {\n \n   /**\n    * Invokes default serialization on the specified object.\n    * @param src the object that needs to be serialized.\n    * @return a tree of {@link JsonElement}s corresponding to the serialized form of {@code src}.\n    */\n-  public JsonElement serialize(Object src) {\n-    return gson.toJsonTree(src);\n-  }\n+  public JsonElement serialize(Object src);\n \n   /**\n    * Invokes default serialization on the specified object passing the specific type information.\n    * @param typeOfSrc the actual genericized type of src object.\n    * @return a tree of {@link JsonElement}s corresponding to the serialized form of {@code src}.\n    */\n-  public JsonElement serialize(Object src, Type typeOfSrc) {\n-    return gson.toJsonTree(src, typeOfSrc);\n-  }\n-}\n+  public JsonElement serialize(Object src, Type typeOfSrc);\n+}", "timestamp": 1317430705, "metainfo": ""}