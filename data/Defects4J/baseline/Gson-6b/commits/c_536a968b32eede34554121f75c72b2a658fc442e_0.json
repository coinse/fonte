{"sha": "536a968b32eede34554121f75c72b2a658fc442e", "log": "Disabled escaping of single quote since it is valid for JSON (though invalid for JavaScript). Added null checks in contexts since the custom type adapter can pass nulls.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Escaper.java\n+++ b/gson/src/main/java/com/google/gson/Escaper.java\n     htmlEscapeSet.add('>');\n     htmlEscapeSet.add('&');\n     htmlEscapeSet.add('=');\n-    htmlEscapeSet.add('\\'');\n- //   htmlEscapeSet.add('/');  -- Removing slash for now since it causes some incompatibilities\n+    // Removing ' for now since it is a valid character in JSON, but not javascript\n+    // When enabling this, remember to enable the test EscaperTest.disable_testSingleQuoteEscaping\n+//    htmlEscapeSet.add('\\''); \n+//    htmlEscapeSet.add('/');  -- Removing slash for now since it causes some incompatibilities\n     HTML_ESCAPE_CHARS = Collections.unmodifiableSet(htmlEscapeSet);\n   }\n \n--- a/gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java\n \n   @SuppressWarnings(\"unchecked\")\n   public <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\n-    if (json.isJsonArray()) {\n+    if (json == null || json.isJsonNull()) {\n+      return null;\n+    } else if (json.isJsonArray()) {\n       return (T) fromJsonArray(typeOfT, json.getAsJsonArray(), this);\n     } else if (json.isJsonObject()) {\n       return (T) fromJsonObject(typeOfT, json.getAsJsonObject(), this);\n     } else if (json.isJsonPrimitive()) {\n       return (T) fromJsonPrimitive(typeOfT, json.getAsJsonPrimitive(), this);\n-    } else if (json.isJsonNull()) {\n-      return null;\n     } else {\n       throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\");\n     }\n--- a/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n   }\n \n   public JsonElement serialize(Object src) {\n+    if (src == null) {\n+      return JsonNull.createJsonNull();\n+    }\n     return serialize(src, src.getClass());\n   }\n \n--- a/gson/src/test/java/com/google/gson/EscaperTest.java\n+++ b/gson/src/test/java/com/google/gson/EscaperTest.java\n     assertEquals(\"123\\\\\\\"456\", escapedString);\n   }\n   \n-  public void testSingleQuoteEscaping() throws Exception {\n+  public void disable_testSingleQuoteEscaping() throws Exception {\n     String containsQuote = \"123'456\";\n     String escapedString = escapeHtmlChar.escapeJsonString(containsQuote);\n     assertEquals(\"123\\\\'456\", escapedString);\n--- a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java\n import com.google.gson.JsonElement;\n import com.google.gson.JsonNull;\n import com.google.gson.JsonObject;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n import com.google.gson.JsonSerializationContext;\n import com.google.gson.JsonSerializer;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class);\n     assertNull(obj.value);    \n   }\n-  \n+\n+  public void testCustomTypeAdapterPassesNullSerialization() {\n+    Gson gson = new GsonBuilder()\n+        .registerTypeAdapter(ObjectWithField.class, new JsonSerializer<ObjectWithField>() {\n+          public JsonElement serialize(ObjectWithField src, Type typeOfSrc,\n+              JsonSerializationContext context) {\n+            return context.serialize(null);\n+          }\n+        }).create();\n+    ObjectWithField target = new ObjectWithField();\n+    target.value = \"value1\";\n+    String json = gson.toJson(target);\n+    assertFalse(json.contains(\"value1\"));\n+  }\n+\n+  public void testCustomTypeAdapterPassesNullDesrialization() {\n+    Gson gson = new GsonBuilder()\n+        .registerTypeAdapter(ObjectWithField.class, new JsonDeserializer<ObjectWithField>() {\n+          public ObjectWithField deserialize(JsonElement json, Type type,\n+              JsonDeserializationContext context) {\n+            return context.deserialize(null, type);\n+          }\n+        }).create();\n+    String json = \"{value:'value1'}\";\n+    ObjectWithField target = gson.fromJson(json, ObjectWithField.class);\n+    assertFalse(\"value1\".equals(target.value));\n+  }\n+\n   private static class ObjectWithField {\n     String value = \"\";\n   }", "timestamp": 1254849052, "metainfo": ""}