{"sha": "3b8404dac56c365cbf77034ec7d96588d89e9798", "log": "refactored String related functional tests out in a separate test class.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n     assertEquals(BagOfPrimitives.DEFAULT_VALUE, target.longValue);\n   }\n \n-  public void testReallyLongStringsDeserialization() throws Exception {\n-    StringBuilder sb = new StringBuilder(8096);\n-    sb.append(\"Once upon a time there was a really long string that caused a StackOverFlowError\\n\");\n-    sb.append(\"and now it is fixed and instead throws a JsonParserException.....Yippie!!!\\n\");\n-    sb.append(\"Wow....that is a really long string that is meant to be an exception stack trace, \");\n-    sb.append(\"but is not :( \\n\\n\\n\\n\\n\\n.\");\n-    sb.append(\"lalalalala \\n\\n\\n.\");\n-    sb.append(\"C'est la vie!!! \\n\\n\\n\\n\\n\");\n-\n-    for (int i = 0; i < 10; i++) {\n-      sb.append(sb.toString());\n-    }\n-\n-    while (true) {\n-      try {\n-        String stackTrace = sb.toString();\n-        sb.append(stackTrace);\n-        String json = \"{\\\"message\\\":\\\"Error message.\\\",\"\n-          + \"\\\"stackTrace\\\":\\\"\" + stackTrace + \"\\\"}\";\n-        parseLongJson(json);\n-      } catch (JsonParseException expected) {\n-        break;\n-      }\n-    }\n-  }\n-\n   public void testEmptyCollectionInAnObjectSerialization() throws Exception {\n     ContainsReferenceToSelfType target = new ContainsReferenceToSelfType();\n     assertEquals(\"{\\\"children\\\":[]}\", gson.toJson(target));\n-  }\n-\n-  private void parseLongJson(String json) throws JsonParseException {\n-    ExceptionHolder target = gson.fromJson(json, ExceptionHolder.class);\n-    assertTrue(target.message.contains(\"Error\"));\n-    assertTrue(target.stackTrace.contains(\"Yippie\"));\n   }\n \n   public void testCircularSerialization() throws Exception {\n       a = 10;\n     }\n   }\n-\n-  private static class ExceptionHolder {\n-    public final String message;\n-    public final String stackTrace;\n-    public ExceptionHolder() {\n-      this(\"\", \"\");\n-    }\n-    public ExceptionHolder(String message, String stackTrace) {\n-      this.message = message;\n-      this.stackTrace = stackTrace;\n-    }\n-  }\n }\n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n import java.math.BigInteger;\n \n /**\n- * Functional tests for Json primitive values: String, integers, and floating point numbers.\n+ * Functional tests for Json primitive values: integers, and floating point numbers.\n  *\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n     gson = new Gson();\n   }\n \n-  public void testStringValueSerialization() throws Exception {\n-    String value = \"someRandomStringValue\";\n-    assertEquals('\"' + value + '\"', gson.toJson(value));\n-  }\n-\n-  public void testStringValueDeserialization() throws Exception {\n-    String value = \"someRandomStringValue\";\n-    String actual = gson.fromJson(\"\\\"\" + value + \"\\\"\", String.class);\n-    assertEquals(value, actual);\n-  }\n-\n-  public void testSingleQuoteInStringSerialization() throws Exception {\n-    String valueWithQuotes = \"beforeQuote'afterQuote\";\n-    String jsonRepresentation = gson.toJson(valueWithQuotes);\n-    assertEquals(valueWithQuotes, gson.fromJson(jsonRepresentation, String.class));\n-  }\n-\n-  public void testSingleQuoteInStringDeserialization() throws Exception {\n-    String value = \"beforeQuote'afterQuote\";\n-    String actual = gson.fromJson(\"\\\"\" + value + \"\\\"\", String.class);\n-    assertEquals(value, actual);\n-  }\n-\n-  public void testEscapingQuotesInStringSerialization() throws Exception {\n-    String valueWithQuotes = \"beforeQuote\\\"afterQuote\";\n-    String jsonRepresentation = gson.toJson(valueWithQuotes);\n-    String target = gson.fromJson(jsonRepresentation, String.class);\n-    assertEquals(valueWithQuotes, target);\n-  }\n-\n-  public void testEscapingQuotesInStringDeserialization() throws Exception {\n-    String value = \"beforeQuote\\\\\\\"afterQuote\";\n-    String actual = gson.fromJson(\"\\\"\" + value + \"\\\"\", String.class);\n-    String expected = \"beforeQuote\\\"afterQuote\";\n-    assertEquals(expected, actual);\n-  }\n-\n-  public void testStringValueAsSingleElementArraySerialization() throws Exception {\n-    String[] target = {\"abc\"};\n-    assertEquals(\"[\\\"abc\\\"]\", gson.toJson(target));\n-    assertEquals(\"[\\\"abc\\\"]\", gson.toJson(target, String[].class));\n-  }\n-\n-  public void testStringValueAsSingleElementArrayDeserialization() throws Exception {\n-    String value = \"someRandomStringValue\";\n-    String actual = gson.fromJson(\"[\\\"\" + value + \"\\\"]\", String.class);\n-    assertEquals(value, actual);\n-  }\n-\n   public void testPrimitiveIntegerAutoboxedSerialization() {\n     assertEquals(\"1\", gson.toJson(1));\n   }\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/StringTest.java\n+package com.google.gson.functional;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Functional tests for Json serialization and deserialization of strings.\n+ *\n+ * @author Inderjeet Singh\n+ * @author Joel Leitch\n+ */\n+public class StringTest extends TestCase {\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new Gson();\n+  }\n+  \n+  public void testStringValueSerialization() throws Exception {\n+    String value = \"someRandomStringValue\";\n+    assertEquals('\"' + value + '\"', gson.toJson(value));\n+  }\n+\n+  public void testStringValueDeserialization() throws Exception {\n+    String value = \"someRandomStringValue\";\n+    String actual = gson.fromJson(\"\\\"\" + value + \"\\\"\", String.class);\n+    assertEquals(value, actual);\n+  }\n+\n+  public void testSingleQuoteInStringSerialization() throws Exception {\n+    String valueWithQuotes = \"beforeQuote'afterQuote\";\n+    String jsonRepresentation = gson.toJson(valueWithQuotes);\n+    assertEquals(valueWithQuotes, gson.fromJson(jsonRepresentation, String.class));\n+  }\n+\n+  public void testSingleQuoteInStringDeserialization() throws Exception {\n+    String value = \"beforeQuote'afterQuote\";\n+    String actual = gson.fromJson(\"\\\"\" + value + \"\\\"\", String.class);\n+    assertEquals(value, actual);\n+  }\n+\n+  public void testEscapingQuotesInStringSerialization() throws Exception {\n+    String valueWithQuotes = \"beforeQuote\\\"afterQuote\";\n+    String jsonRepresentation = gson.toJson(valueWithQuotes);\n+    String target = gson.fromJson(jsonRepresentation, String.class);\n+    assertEquals(valueWithQuotes, target);\n+  }\n+\n+  public void testEscapingQuotesInStringDeserialization() throws Exception {\n+    String value = \"beforeQuote\\\\\\\"afterQuote\";\n+    String actual = gson.fromJson(\"\\\"\" + value + \"\\\"\", String.class);\n+    String expected = \"beforeQuote\\\"afterQuote\";\n+    assertEquals(expected, actual);\n+  }\n+\n+  public void testStringValueAsSingleElementArraySerialization() throws Exception {\n+    String[] target = {\"abc\"};\n+    assertEquals(\"[\\\"abc\\\"]\", gson.toJson(target));\n+    assertEquals(\"[\\\"abc\\\"]\", gson.toJson(target, String[].class));\n+  }\n+\n+  public void testStringValueAsSingleElementArrayDeserialization() throws Exception {\n+    String value = \"someRandomStringValue\";\n+    String actual = gson.fromJson(\"[\\\"\" + value + \"\\\"]\", String.class);\n+    assertEquals(value, actual);\n+  }\n+\n+  public void testReallyLongStringsDeserialization() throws Exception {\n+    StringBuilder sb = new StringBuilder(8096);\n+    sb.append(\"Once upon a time there was a really long string that caused a StackOverFlowError\\n\");\n+    sb.append(\"and now it is fixed and instead throws a JsonParserException.....Yippie!!!\\n\");\n+    sb.append(\"Wow....that is a really long string that is meant to be an exception stack trace, \");\n+    sb.append(\"but is not :( \\n\\n\\n\\n\\n\\n.\");\n+    sb.append(\"lalalalala \\n\\n\\n.\");\n+    sb.append(\"C'est la vie!!! \\n\\n\\n\\n\\n\");\n+\n+    for (int i = 0; i < 10; i++) {\n+      sb.append(sb.toString());\n+    }\n+\n+    while (true) {\n+      try {\n+        String stackTrace = sb.toString();\n+        sb.append(stackTrace);\n+        String json = \"{\\\"message\\\":\\\"Error message.\\\",\"\n+          + \"\\\"stackTrace\\\":\\\"\" + stackTrace + \"\\\"}\";\n+        parseLongJson(json);\n+      } catch (JsonParseException expected) {\n+        break;\n+      }\n+    }\n+  }\n+  \n+  private void parseLongJson(String json) throws JsonParseException {\n+    ExceptionHolder target = gson.fromJson(json, ExceptionHolder.class);\n+    assertTrue(target.message.contains(\"Error\"));\n+    assertTrue(target.stackTrace.contains(\"Yippie\"));\n+  }\n+\n+  private static class ExceptionHolder {\n+    public final String message;\n+    public final String stackTrace;\n+    public ExceptionHolder() {\n+      this(\"\", \"\");\n+    }\n+    public ExceptionHolder(String message, String stackTrace) {\n+      this.message = message;\n+      this.stackTrace = stackTrace;\n+    }\n+  }\n+}", "timestamp": 1223605746, "metainfo": ""}