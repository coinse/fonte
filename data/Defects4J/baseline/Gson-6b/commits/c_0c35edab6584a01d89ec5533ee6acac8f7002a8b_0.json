{"sha": "0c35edab6584a01d89ec5533ee6acac8f7002a8b", "log": "Fixed the bug where copyOf() for a ParameterizedTypeHandlerMap was failing when hierarchical type adapters for a sub class and its base class were present.  Fixed previously broken tests to verify the behavior that a hierarchical type adapter for a sub-class can be registered after registering a hierarchical type adapter for the base-class. The vice-versa is not allowed as it would result in hiding the sub-class hierarchical type adapter.", "commit": "\n--- a/gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java\n+++ b/gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java\n \n   public synchronized ParameterizedTypeHandlerMap<T> copyOf() {\n     ParameterizedTypeHandlerMap<T> copy = new ParameterizedTypeHandlerMap<T>();\n-    for (Map.Entry<Type, T> entry : map.entrySet()) {\n-      copy.register(entry.getKey(), entry.getValue());\n-    }\n-    for (Pair<Class<?>, T> entry : typeHierarchyList) {\n-      copy.registerForTypeHierarchy(entry);\n-    }\n+    // Instead of individually registering entries in the map, make an efficient copy\n+    // of the list and map\n+    copy.map.putAll(map);\n+    copy.typeHierarchyList.addAll(typeHierarchyList);\n     return copy;\n   }\n \n--- a/gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java\n         ((Manager) company.ceo.minions[2]).minions[1].userid);\n   }\n \n-  public void testRegisterSubtypeFirst() {\n+  public void testRegisterSuperTypeFirst() {\n     Gson gson = new GsonBuilder()\n         .registerTypeHierarchyAdapter(Employee.class, new EmployeeAdapter())\n         .registerTypeHierarchyAdapter(Manager.class, new ManagerAdapter())\n     assertEquals(manager.userid, copied.userid);\n   }\n \n-  public void testRegisterSupertypeFirst() {\n-    GsonBuilder builder = new GsonBuilder()\n+  public void testRegisterSubTypeFirstNotAllowed() {\n+    try {\n+      Gson gson = new GsonBuilder()\n         .registerTypeHierarchyAdapter(Manager.class, new ManagerAdapter())\n-        .registerTypeHierarchyAdapter(Employee.class, new EmployeeAdapter());\n-    try {\n-      builder.create();\n+        .registerTypeHierarchyAdapter(Employee.class, new EmployeeAdapter())\n+        .create();\n       fail();\n     } catch (IllegalArgumentException expected) {\n     }", "timestamp": 1300144970, "metainfo": ""}