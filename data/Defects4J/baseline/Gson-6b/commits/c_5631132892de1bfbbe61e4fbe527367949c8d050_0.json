{"sha": "5631132892de1bfbbe61e4fbe527367949c8d050", "log": "Fixed Issue 54 to enable serialization of fields that are declared of type Object.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n       }\n     } else {\n       Object fieldValue = getFieldValue(f, obj);\n+      // See if the fieldValue has better type information than the specified typeOfF\n+      // This takes care of situations where the field was declared as an Object, but the\n+      // actual value contains something more specific. See Issue 54.\n+      if (fieldValue != null && typeOfF instanceof Class) {\n+        Class<?> classOfF = (Class<?>) typeOfF;\n+        Class<?> actualClassOfF = fieldValue.getClass();\n+        if (classOfF.isAssignableFrom(actualClassOfF)) {\n+          typeOfF = actualClassOfF;\n+        }\n+      }\n       addAsChildOfObject(f, typeOfF, fieldValue);\n     }\n   }\n--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n     assertEquals(target.getExpectedJson(), gson.toJson(target));\n   }\n \n+  /**\n+   * Tests that a class field with type Object can be serialized properly. \n+   * See issue 54\n+   */\n+  public void testClassWithObjectFieldSerialization() {\n+    ClassWithObjectField obj = new ClassWithObjectField();\n+    obj.member = \"abc\";\n+    String json = gson.toJson(obj);\n+    assertTrue(json.contains(\"abc\"));\n+  }\n+  \n+  private static class ClassWithObjectField {\n+    Object member;\n+  }\n+  \n   public void testInnerClassSerialization() {    \n     Parent p = new Parent();\n     Parent.Child c = p.new Child();\n    \n   public void testInnerClassDeserialization() {\n     final Parent p = new Parent();\n-    Gson gson = new GsonBuilder().registerTypeAdapter(Parent.Child.class, new InstanceCreator<Parent.Child>() {\n+    Gson gson = new GsonBuilder().registerTypeAdapter(\n+        Parent.Child.class, new InstanceCreator<Parent.Child>() {\n       public Parent.Child createInstance(Type type) {\n         return p.new Child();\n       }      ", "timestamp": 1223932361, "metainfo": ""}