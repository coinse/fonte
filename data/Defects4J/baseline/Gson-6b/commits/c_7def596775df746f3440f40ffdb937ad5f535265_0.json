{"sha": "7def596775df746f3440f40ffdb937ad5f535265", "log": "Begin to tighten the ExclusionStrategy code. This replaces named classes with anonymous classes wherever we have a single instance of a type.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n import java.io.StringReader;\n import java.io.StringWriter;\n import java.io.Writer;\n-import java.lang.reflect.Modifier;\n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n   static final TypeMap EMPTY_MAP = new TypeMap().makeUnmodifiable();\n \n   static final boolean DEFAULT_JSON_NON_EXECUTABLE = false;\n-\n-  // Default instances of plug-ins\n-  static final AnonymousAndLocalClassExclusionStrategy DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY =\n-      new AnonymousAndLocalClassExclusionStrategy();\n-  static final SyntheticFieldExclusionStrategy DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY =\n-      new SyntheticFieldExclusionStrategy(true);\n-  static final ModifierBasedExclusionStrategy DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY =\n-      new ModifierBasedExclusionStrategy(Modifier.TRANSIENT, Modifier.STATIC);\n \n   private static final ExclusionStrategy DEFAULT_EXCLUSION_STRATEGY = createExclusionStrategy();\n \n \n   private static ExclusionStrategy createExclusionStrategy() {\n     List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>();\n-    strategies.add(DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY);\n-    strategies.add(DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY);\n-    strategies.add(DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY);\n+    strategies.add(GsonBuilder.EXCLUDE_ANONYMOUS_AND_LOCAL);\n+    strategies.add(GsonBuilder.EXCLUDE_SYNTHETIC_FIELDS);\n+    strategies.add(GsonBuilder.EXCLUDE_TRANSIENT_AND_STATIC);\n     return new DisjunctionExclusionStrategy(strategies);\n   }\n \n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n package com.google.gson;\n \n import com.google.gson.DefaultTypeAdapters.DefaultDateTypeAdapter;\n+import com.google.gson.annotations.Expose;\n import com.google.gson.internal.$Gson$Preconditions;\n import com.google.gson.internal.Primitives;\n import com.google.gson.internal.TypeMap;\n import com.google.gson.internal.bind.TypeAdapters;\n import com.google.gson.reflect.TypeToken;\n+import java.lang.reflect.Modifier;\n import java.lang.reflect.Type;\n import java.sql.Timestamp;\n import java.text.DateFormat;\n  * @author Joel Leitch\n  */\n public final class GsonBuilder {\n-  private static final InnerClassExclusionStrategy innerClassExclusionStrategy =\n-      new InnerClassExclusionStrategy();\n-  private static final ExposeAnnotationDeserializationExclusionStrategy\n-  exposeAnnotationDeserializationExclusionStrategy =\n-      new ExposeAnnotationDeserializationExclusionStrategy();\n-  private static final ExposeAnnotationSerializationExclusionStrategy\n-  exposeAnnotationSerializationExclusionStrategy =\n-      new ExposeAnnotationSerializationExclusionStrategy();\n+  /** Strategy for excluding inner classes. */\n+  static final ExclusionStrategy EXCLUDE_INNER_CLASSES = new ExclusionStrategy() {\n+    public boolean shouldSkipField(FieldAttributes f) {\n+      return isInnerClass(f.getDeclaredClass());\n+    }\n+    public boolean shouldSkipClass(Class<?> clazz) {\n+      return isInnerClass(clazz);\n+    }\n+    private boolean isInnerClass(Class<?> clazz) {\n+      return clazz.isMemberClass() && !isStatic(clazz);\n+    }\n+    private boolean isStatic(Class<?> clazz) {\n+      return (clazz.getModifiers() & Modifier.STATIC) != 0;\n+    }\n+  };\n+\n+  /** Excludes fields that do not have the {@link Expose} annotation */\n+  static final ExclusionStrategy REQUIRE_EXPOSE_DESERIALIZE = new ExclusionStrategy() {\n+    public boolean shouldSkipClass(Class<?> clazz) {\n+      return false;\n+    }\n+    public boolean shouldSkipField(FieldAttributes f) {\n+      Expose annotation = f.getAnnotation(Expose.class);\n+      return annotation == null || !annotation.deserialize();\n+    }\n+  };\n+\n+  /** Excludes fields that do not have the {@link Expose} annotation */\n+  static final ExclusionStrategy REQUIRE_EXPOSE_SERIALIZE = new ExclusionStrategy() {\n+    public boolean shouldSkipClass(Class<?> clazz) {\n+      return false;\n+    }\n+    public boolean shouldSkipField(FieldAttributes f) {\n+      Expose annotation = f.getAnnotation(Expose.class);\n+      return annotation == null || !annotation.serialize();\n+    }\n+  };\n+\n+  static final ExclusionStrategy EXCLUDE_ANONYMOUS_AND_LOCAL = new ExclusionStrategy() {\n+    public boolean shouldSkipField(FieldAttributes f) {\n+      return isAnonymousOrLocal(f.getDeclaredClass());\n+    }\n+    public boolean shouldSkipClass(Class<?> clazz) {\n+      return isAnonymousOrLocal(clazz);\n+    }\n+    private boolean isAnonymousOrLocal(Class<?> clazz) {\n+      return !Enum.class.isAssignableFrom(clazz)\n+          && (clazz.isAnonymousClass() || clazz.isLocalClass());\n+    }\n+  };\n+\n+  static final ExclusionStrategy EXCLUDE_SYNTHETIC_FIELDS = new ExclusionStrategy() {\n+    public boolean shouldSkipClass(Class<?> clazz) {\n+      return false;\n+    }\n+    public boolean shouldSkipField(FieldAttributes f) {\n+      return f.isSynthetic();\n+    }\n+  };\n+\n+  static final ModifierBasedExclusionStrategy EXCLUDE_TRANSIENT_AND_STATIC\n+      = new ModifierBasedExclusionStrategy(Modifier.TRANSIENT, Modifier.STATIC);\n \n   private final Set<ExclusionStrategy> serializeExclusionStrategies =\n       new HashSet<ExclusionStrategy>();\n    */\n   public GsonBuilder() {\n     // add default exclusion strategies\n-    deserializeExclusionStrategies.add(Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY);\n-    deserializeExclusionStrategies.add(Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY);\n-    serializeExclusionStrategies.add(Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY);\n-    serializeExclusionStrategies.add(Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY);\n+    deserializeExclusionStrategies.add(EXCLUDE_ANONYMOUS_AND_LOCAL);\n+    deserializeExclusionStrategies.add(EXCLUDE_SYNTHETIC_FIELDS);\n+    serializeExclusionStrategies.add(EXCLUDE_ANONYMOUS_AND_LOCAL);\n+    serializeExclusionStrategies.add(EXCLUDE_SYNTHETIC_FIELDS);\n \n     // setup default values\n     ignoreVersionsAfter = VersionExclusionStrategy.IGNORE_VERSIONS;\n     serializeInnerClasses = true;\n     prettyPrinting = false;\n     escapeHtmlChars = true;\n-    modifierBasedExclusionStrategy = Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY;\n+    modifierBasedExclusionStrategy = EXCLUDE_TRANSIENT_AND_STATIC;\n     excludeFieldsWithoutExposeAnnotation = false;\n     longSerializationPolicy = LongSerializationPolicy.DEFAULT;\n     fieldNamingPolicy = FieldNamingPolicy.IDENTITY;\n     serializationStrategies.add(modifierBasedExclusionStrategy);\n \n     if (!serializeInnerClasses) {\n-      deserializationStrategies.add(innerClassExclusionStrategy);\n-      serializationStrategies.add(innerClassExclusionStrategy);\n+      deserializationStrategies.add(EXCLUDE_INNER_CLASSES);\n+      serializationStrategies.add(EXCLUDE_INNER_CLASSES);\n     }\n     if (ignoreVersionsAfter != VersionExclusionStrategy.IGNORE_VERSIONS) {\n       VersionExclusionStrategy versionExclusionStrategy =\n       serializationStrategies.add(versionExclusionStrategy);\n     }\n     if (excludeFieldsWithoutExposeAnnotation) {\n-      deserializationStrategies.add(exposeAnnotationDeserializationExclusionStrategy);\n-      serializationStrategies.add(exposeAnnotationSerializationExclusionStrategy);\n+      deserializationStrategies.add(REQUIRE_EXPOSE_DESERIALIZE);\n+      serializationStrategies.add(REQUIRE_EXPOSE_SERIALIZE);\n     }\n     addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, serializers, deserializers);\n \n--- a/gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java\n import java.lang.reflect.Field;\n \n /**\n- * Unit tests for the {@link ExposeAnnotationSerializationExclusionStrategy} class.\n+ * Unit tests for GsonBuilder.REQUIRE_EXPOSE_DESERIALIZE.\n  *\n  * @author Joel Leitch\n  */\n public class ExposeAnnotationExclusionStrategyTest extends TestCase {\n-  private ExposeAnnotationDeserializationExclusionStrategy deserializationStrategy;\n-  private ExposeAnnotationSerializationExclusionStrategy serializationStrategy;\n-\n-  @Override\n-  protected void setUp() throws Exception {\n-    super.setUp();\n-    deserializationStrategy = new ExposeAnnotationDeserializationExclusionStrategy();\n-    serializationStrategy = new ExposeAnnotationSerializationExclusionStrategy();\n-  }\n+  private ExclusionStrategy deserializationStrategy = GsonBuilder.REQUIRE_EXPOSE_DESERIALIZE;\n+  private ExclusionStrategy serializationStrategy = GsonBuilder.REQUIRE_EXPOSE_SERIALIZE;\n \n   public void testNeverSkipClasses() throws Exception {\n     assertFalse(deserializationStrategy.shouldSkipClass(MockObject.class));\n--- a/gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java\n+++ b/gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java\n   @SuppressWarnings(\"unchecked\")\n   public void testAnonymousLocalClassesSerialization() throws Exception {\n     LinkedList<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>();\n-    strategies.add(new SyntheticFieldExclusionStrategy(true));\n+    strategies.add(GsonBuilder.EXCLUDE_SYNTHETIC_FIELDS);\n     strategies.add(new ModifierBasedExclusionStrategy(Modifier.TRANSIENT, Modifier.STATIC));\n     ExclusionStrategy exclusionStrategy = new DisjunctionExclusionStrategy(strategies);\n     Gson gson = new Gson(exclusionStrategy, exclusionStrategy, FieldNamingPolicy.IDENTITY,\n--- a/gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java\n import java.lang.reflect.Field;\n \n /**\n- * Unit test for the {@link InnerClassExclusionStrategy} class.\n+ * Unit test for GsonBuilder.EXCLUDE_INNER_CLASSES.\n  *\n  * @author Joel Leitch\n  */\n   public InnerClass innerClass;\n   public StaticNestedClass staticNestedClass;\n \n-  private InnerClassExclusionStrategy strategy;\n+  private ExclusionStrategy strategy;\n \n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n     innerClass = new InnerClass();\n     staticNestedClass = new StaticNestedClass();\n-    strategy = new InnerClassExclusionStrategy();\n+    strategy = GsonBuilder.EXCLUDE_INNER_CLASSES;\n   }\n \n   public void testExcludeInnerClassObject() throws Exception {", "timestamp": 1321856063, "metainfo": ""}