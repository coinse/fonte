{"sha": "edaf59e178301fc2cdc5523cd703121cfcd4c009", "log": "Fix RuntimeTypeAdapterFactory javadoc", "commit": "\n--- a/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java\n+++ b/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java\n  * \"Rectangle\"}) are configurable.\n  *\n  * <h3>Registering Types</h3>\n- * Create a {@code RuntimeTypeAdapter} by passing the base type and type field\n+ * Create a {@code RuntimeTypeAdapterFactory} by passing the base type and type field\n  * name to the {@link #of} factory method. If you don't supply an explicit type\n  * field name, {@code \"type\"} will be used. <pre>   {@code\n- *   RuntimeTypeAdapter<Shape> shapeAdapter\n- *       = RuntimeTypeAdapter.of(Shape.class, \"type\");\n+ *   RuntimeTypeAdapterFactory<Shape> shapeAdapter\n+ *       = RuntimeTypeAdapterFactory.of(Shape.class, \"type\");\n  * }</pre>\n  * Next register all of your subtypes. Every subtype must be explicitly\n  * registered. This protects your application from injection attacks. If you\n  *       .create();\n  * }</pre>\n  * Like {@code GsonBuilder}, this API supports chaining: <pre>   {@code\n- *   RuntimeTypeAdapter<Shape> shapeAdapter = RuntimeTypeAdapterFactory.of(Shape.class)\n+ *   RuntimeTypeAdapterFactory<Shape> shapeAdapter = RuntimeTypeAdapterFactory.of(Shape.class)\n  *       .registerSubtype(Rectangle.class)\n  *       .registerSubtype(Circle.class)\n  *       .registerSubtype(Diamond.class);", "timestamp": 1455891295, "metainfo": ""}