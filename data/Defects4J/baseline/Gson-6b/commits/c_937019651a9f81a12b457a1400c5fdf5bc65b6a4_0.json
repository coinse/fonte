{"sha": "937019651a9f81a12b457a1400c5fdf5bc65b6a4", "log": "Trailing comma tests", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/JsonParserTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonParserTest.java\n \n package com.google.gson.functional;\n \n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n import java.io.StringReader;\n \n+import java.lang.reflect.Type;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n import junit.framework.TestCase;\n \n import com.google.gson.Gson;\n     super.setUp();\n     gson = new Gson();\n   }\n-  \n+\n   public void testDeserializingCustomTree() {\n     JsonObject obj = new JsonObject();\n     obj.addProperty(\"stringValue\", \"foo\");\n     assertEquals(11, target.intValue);\n     assertEquals(\"foo\", target.stringValue);\n   }\n-  \n+\n   public void testBadTypeForDeserializingCustomTree() {\n     JsonObject obj = new JsonObject();\n     obj.addProperty(\"stringValue\", \"foo\");\n       fail(\"BagOfPrimitives is not an array\");\n     } catch (JsonParseException expected) { }\n   }\n-  \n+\n   public void testBadFieldTypeForCustomDeserializerCustomTree() {\n     JsonArray array = new JsonArray();\n     array.add(new JsonPrimitive(\"blah\"));\n     JsonObject obj = new JsonObject();\n     obj.add(\"primitive1\", primitive1);\n     obj.add(\"primitive2\", array);\n-    \n+\n     try {\n       gson.fromJson(obj, Nested.class);\n       fail(\"Nested has field BagOfPrimitives which is not an array\");\n   }\n \n   public void testChangingCustomTreeAndDeserializing() {\n-    StringReader json = \n+    StringReader json =\n       new StringReader(\"{'stringValue':'no message','intValue':10,'longValue':20}\");\n     JsonObject obj = (JsonObject) new JsonParser().parse(json);\n     obj.remove(\"stringValue\");\n     assertEquals(20, target.longValue);\n     assertEquals(\"fooBar\", target.stringValue);\n   }\n+\n+  public void testExtraCommasInArrays() {\n+    Type type = new TypeToken<List<String>>() {}.getType();\n+    assertEquals(list(\"a\", null, \"b\", null, null), gson.fromJson(\"[a,,b,,]\", type));\n+    assertEquals(list(null, null), gson.fromJson(\"[,]\", type));\n+    assertEquals(list(\"a\", null), gson.fromJson(\"[a,]\", type));\n+  }\n+\n+  public void testExtraCommasInMaps() {\n+    Type type = new TypeToken<Map<String, String>>() {}.getType();\n+    try {\n+      gson.fromJson(\"{a:b,}\", type);\n+      fail();\n+    } catch (JsonSyntaxException expected) {\n+    }\n+  }\n+\n+  private <T> List<T> list(T... elements) {\n+    return Arrays.asList(elements);\n+  }\n }", "timestamp": 1309556165, "metainfo": ""}