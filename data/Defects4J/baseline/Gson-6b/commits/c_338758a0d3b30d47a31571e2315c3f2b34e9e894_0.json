{"sha": "338758a0d3b30d47a31571e2315c3f2b34e9e894", "log": "implemented support for deserialization to deserialize to more specific type if an instance creator returns a sub-class.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java\n       JsonDeserializationContext context) throws JsonParseException {\n     JsonObjectDeserializationVisitor<T> visitor = new JsonObjectDeserializationVisitor<T>(\n         json, typeOfT, navigatorFactory, objectConstructor, deserializers, context);\n-    ObjectNavigator on = navigatorFactory.create(new ObjectTypePair(json.getAsObject(), typeOfT, true));\n+    ObjectNavigator on = \n+      navigatorFactory.create(new ObjectTypePair(json.getAsObject(), typeOfT, true));\n     on.accept(visitor);\n     Object target = visitor.getTarget();\n     return (T) target;\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n \n   @SuppressWarnings(\"unchecked\")\n   public final boolean visitUsingCustomHandler(ObjectTypePair objTypePair) {\n-    Type objType = objTypePair.getType();\n-    JsonDeserializer deserializer = deserializers.getHandlerFor(objType);\n-    if (deserializer != null) {\n-      if (!json.isJsonNull()) {\n-        target = (T) deserializer.deserialize(json, objType, context);\n-      }\n-      return true;\n+    Pair<JsonDeserializer<?>, ObjectTypePair> pair = objTypePair.getMatchingHandler(deserializers);\n+    if (pair == null) {\n+      return false;\n+    }    \n+    if (!json.isJsonNull()) {\n+      JsonDeserializer deserializer = pair.getFirst();\n+      Type objType = pair.getSecond().getType();\n+      target = (T) deserializer.deserialize(json, objType, context);\n     }\n-    return false;\n+    return true;\n   }\n \n   final Object visitChildAsObject(Type childType, JsonElement jsonChild) {\n   }\n \n   private Object visitChild(Type type, JsonDeserializationVisitor<?> childVisitor) {\n-    ObjectNavigator on = factory.create(new ObjectTypePair(null, type, true));\n+    ObjectNavigator on = factory.create(new ObjectTypePair(null, type, false));\n     on.accept(childVisitor);\n     // the underlying object may have changed during the construction phase\n     // This happens primarily because of custom deserializers\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n     return childVisitor.getJsonElement();\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n   public boolean visitUsingCustomHandler(ObjectTypePair objTypePair) {\n     try {\n       Object obj = objTypePair.getObject();\n    */\n   @SuppressWarnings(\"unchecked\")\n   private JsonElement findAndInvokeCustomSerializer(ObjectTypePair objTypePair) {\n-    Pair<JsonSerializer, ObjectTypePair> pair = objTypePair.getMatchingSerializer(serializers);\n+    Pair<JsonSerializer<?>,ObjectTypePair> pair = objTypePair.getMatchingHandler(serializers);\n     if (pair == null) {\n       return null;\n     }\n     }\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n   public boolean visitFieldUsingCustomHandler(Field f, Type declaredTypeOfField, Object parent) {\n     try {\n       Preconditions.checkState(root.isJsonObject());\n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n       if (objectToVisit == null) {\n         return;\n       }\n-\n+      objTypePair.setObject(objectToVisit);\n       visitor.start(objTypePair);\n       try {\n         if (objTypeInfo.isArray()) {\n           visitor.visitArray(objectToVisit, objTypePair.getType());\n         } else if (objTypeInfo.getActualType() == Object.class\n             && isPrimitiveOrString(objectToVisit)) {\n-          // TODO(Joel): this is only used for deserialization of \"primitves\"\n+          // TODO(Joel): this is only used for deserialization of \"primitives\"\n           //             we should rethink this!!!\n           visitor.visitPrimitive(objectToVisit);\n           objectToVisit = visitor.getTarget();\n--- a/gson/src/main/java/com/google/gson/ObjectTypePair.java\n+++ b/gson/src/main/java/com/google/gson/ObjectTypePair.java\n  * @author Inderjeet Singh\n  */\n final class ObjectTypePair {\n-  private final Object obj;\n+  private Object obj;\n   private final Type type;\n   private final boolean preserveType;\n \n     return obj;\n   }\n \n+  void setObject(Object obj) {\n+    this.obj = obj;\n+  }\n+\n   Type getType() {\n     return type;\n   }\n   \n-  @SuppressWarnings(\"unchecked\")\n-  Pair<JsonSerializer, ObjectTypePair> getMatchingSerializer(\n-      ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers) {\n-    Preconditions.checkNotNull(obj);\n-    JsonSerializer serializer = null;\n-    if (!preserveType) {\n-      // First try looking up the serializer for the actual type\n+  <HANDLER> Pair<HANDLER, ObjectTypePair> getMatchingHandler(\n+      ParameterizedTypeHandlerMap<HANDLER> handlers) {\n+    HANDLER handler = null;\n+    if (!preserveType && obj != null) {\n+      // First try looking up the handler for the actual type\n       ObjectTypePair moreSpecificType = toMoreSpecificType();    \n-      serializer = serializers.getHandlerFor(moreSpecificType.type);\n-      if (serializer != null) {\n-        return new Pair<JsonSerializer, ObjectTypePair>(serializer, moreSpecificType);\n+      handler = handlers.getHandlerFor(moreSpecificType.type);\n+      if (handler != null) {\n+        return new Pair<HANDLER, ObjectTypePair>(handler, moreSpecificType);\n       }\n     }\n     // Try the specified type\n-    serializer = serializers.getHandlerFor(type);\n-    return serializer == null ? null : new Pair<JsonSerializer, ObjectTypePair>(serializer, this);\n+    handler = handlers.getHandlerFor(type);\n+    return handler == null ? null : new Pair<HANDLER, ObjectTypePair>(handler, this);\n   }\n \n   ObjectTypePair toMoreSpecificType() {    \n     }\n     return preserveType == other.preserveType;\n   }\n+\n+  public boolean isPreserveType() {\n+    return preserveType;\n+  }\n }\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java\n+/*\n+ * Copyright (C) 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import java.lang.reflect.Type;\n+\n+import junit.framework.TestCase;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.InstanceCreator;\n+import com.google.gson.common.TestTypes.Base;\n+import com.google.gson.common.TestTypes.ClassWithBaseField;\n+import com.google.gson.common.TestTypes.Sub;\n+\n+/**\n+ * Functional Test exercising custom serialization only.  When test applies to both \n+ * serialization and deserialization then add it to CustomTypeAdapterTest.\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class InstanceCreatorTest extends TestCase {\n+  \n+  public void testInstanceCreatorReturnsBaseType() {\n+    Gson gson = new GsonBuilder()\n+      .registerTypeAdapter(Base.class, new InstanceCreator<Base>() {\n+       public Base createInstance(Type type) {\n+         return new Base();\n+       }\n+      })\n+      .create();\n+    String json = \"{baseName:'BaseRevised',subName:'Sub'}\";\n+    Base base = gson.fromJson(json, Base.class);\n+    assertEquals(\"BaseRevised\", base.baseName);\n+  }\n+  \n+  public void testInstanceCreatorReturnsSubTypeForTopLevelObject() {\n+    Gson gson = new GsonBuilder()\n+    .registerTypeAdapter(Base.class, new InstanceCreator<Base>() {\n+      public Base createInstance(Type type) {\n+        return new Sub();\n+      }\n+    })\n+    .create();\n+    String json = \"{baseName:'Base',subName:'SubRevised'}\";\n+    Base base = gson.fromJson(json, Base.class);\n+    assertFalse(\"SubRevised\".equals(((Sub)base).subName));\n+  }\n+  \n+  public void testInstanceCreatorReturnsSubTypeForField() {\n+    Gson gson = new GsonBuilder()\n+    .registerTypeAdapter(Base.class, new InstanceCreator<Base>() {\n+      public Base createInstance(Type type) {\n+        return new Sub();\n+      }\n+    })\n+    .create();\n+    String json = \"{base:{baseName:'Base',subName:'SubRevised'}}\";\n+    ClassWithBaseField target = gson.fromJson(json, ClassWithBaseField.class);\n+    assertTrue(target.base instanceof Sub);\n+    assertEquals(\"SubRevised\", ((Sub)target.base).subName);\n+  }\n+}", "timestamp": 1255112176, "metainfo": ""}