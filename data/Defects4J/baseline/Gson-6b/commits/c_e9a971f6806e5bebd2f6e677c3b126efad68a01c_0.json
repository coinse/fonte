{"sha": "e9a971f6806e5bebd2f6e677c3b126efad68a01c", "log": "Revised getRuntimeTypeIfMoreSpecific to ignore the parent and just focus on the value. All uses of this method have already made a determination about the parent.", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java\n     writer.beginArray();\n     for (int i = 0, length = Array.getLength(array); i < length; i++) {\n       final E value = (E) Array.get(array, i);\n-      Type runtimeType = Reflection.getRuntimeTypeIfMoreSpecific(componentType, array, value);\n+      Type runtimeType = Reflection.getRuntimeTypeIfMoreSpecific(componentType, value);\n       TypeAdapter t = runtimeType != componentType ?\n           context.getAdapter(TypeToken.get(runtimeType)) : componentTypeAdapter;\n       t.write(writer, value);\n--- a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java\n \n     writer.beginArray();\n     for (E element : collection) {\n-      Type runtimeType = Reflection.getRuntimeTypeIfMoreSpecific(elementType, collection, element);\n+      Type runtimeType = Reflection.getRuntimeTypeIfMoreSpecific(elementType, element);\n       TypeAdapter t = runtimeType != elementType ?\n           context.getAdapter(TypeToken.get(runtimeType)) : elementTypeAdapter;\n       t.write(writer, element);\n--- a/gson/src/main/java/com/google/gson/internal/bind/Reflection.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/Reflection.java\n final class Reflection {\n   /**\n    * Finds a compatible runtime type if it is more specific\n-   * In case of a field of an object, parent is the object instance, and child is the field value.\n-   * In case of an Array, parent is the array instance, and the child is the array element.\n    */\n-  public static Type getRuntimeTypeIfMoreSpecific(Type type, Object parent, Object child) {\n-    if (parent == null || child == null) {\n-      return type;\n-    }\n-    if (type == Object.class || type instanceof TypeVariable || type instanceof Class<?>) {\n-      type = (Class<?>) child.getClass();\n+  public static Type getRuntimeTypeIfMoreSpecific(Type type, Object value) {\n+    if (value != null\n+        && (type == Object.class || type instanceof TypeVariable || type instanceof Class<?>)) {\n+      type = (Class<?>) value.getClass();\n     }\n     return type;\n   }\n--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java\n           throws IOException, IllegalAccessException {\n         Object fieldValue = field.get(value);\n         Type declaredTypeOfField = fieldType.getType();\n-        Type resolvedTypeOfField = Reflection.getRuntimeTypeIfMoreSpecific(declaredTypeOfField, value, fieldValue);\n+        Type resolvedTypeOfField = Reflection.getRuntimeTypeIfMoreSpecific(declaredTypeOfField, fieldValue);\n         TypeAdapter t = resolvedTypeOfField != declaredTypeOfField ?\n             context.getAdapter(TypeToken.get(resolvedTypeOfField)) : this.typeAdapter;\n         t.write(writer, fieldValue);", "timestamp": 1312503181, "metainfo": ""}