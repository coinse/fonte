{"sha": "9ad4b2bc7ee14cb2004d25a65cc31e22ce293504", "log": "Made request/response classes immutable and using builder patterns to build them.", "commit": "\n--- a/wsf/src/main/java/com/google/gson/wsf/ContentBody.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/ContentBody.java\n  */\n package com.google.gson.wsf;\n \n-import java.lang.reflect.Type;\n import java.util.Map;\n-import java.util.Set;\n-\n-import com.google.common.base.Preconditions;\n-import com.google.common.collect.Maps;\n \n /**\n  * Body of a request or response. The body contains a map of name-value pairs.\n  * \n  * @author inder\n  */\n-class ContentBody {\n-  \n-  protected final ContentBodySpec spec;\n-  protected final Map<String, Object> contents;\n-  \n-  ContentBody(ContentBodySpec spec) {\n-    this.spec = spec;\n-    this.contents = Maps.newLinkedHashMap();\n-  }\n+class ContentBody extends ParamMap {\n   \n   ContentBody(ContentBodySpec spec, Map<String, Object> contents) {\n-    this.spec = spec;\n-    this.contents = contents;\n+    super(spec, contents);\n   }\n   \n   public ContentBodySpec getSpec() {\n-    return spec;\n+    return (ContentBodySpec) spec;\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n-  public <T> T get(String key, Class<T> classOfValue) {\n-    Preconditions.checkArgument(spec.isCompatible(key, classOfValue));\n-    return (T) contents.get(key);\n-  }\n-  \n-  @SuppressWarnings(\"unchecked\")\n-  public <T> T get(String key, Type typeOfValue) {\n-    Preconditions.checkArgument(spec.isCompatible(key, typeOfValue));\n-    return (T) contents.get(key);\n-  }\n-  \n-  public Set<Map.Entry<String, Object>> entrySet() {\n-    return contents.entrySet();\n-  }\n-  \n-  public int size() {\n-    return contents.size();\n-  }\n-  \n   public String getContentType() {\n-    return spec.getContentType();\n+    return getSpec().getContentType();\n   }\n   \n   public String getCharacterEncoding() {\n-    return spec.getCharacterEncoding();\n-  }\n-  \n-  @Override\n-  public String toString() {\n-    return Util.toStringMap(contents);\n+    return getSpec().getCharacterEncoding();\n   }\n }\n--- a/wsf/src/main/java/com/google/gson/wsf/ContentBodySpec.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/ContentBodySpec.java\n     return paramsSpec.get(paramName);\n   }\n   \n-  public boolean isCompatible(String paramName, Type type) {\n+  public boolean checkIfCompatible(String paramName, Type type) {\n     return type.equals(getTypeFor(paramName));\n   }\n   \n-  public boolean isCompatible(String paramName, Object object) {\n-    return isCompatible(paramName, object.getClass());\n+  public boolean checkIfCompatible(String paramName, Object object) {\n+    return checkIfCompatible(paramName, object.getClass());\n   }\n   \n   public Set<Map.Entry<String, Type>> entrySet() {\n--- a/wsf/src/main/java/com/google/gson/wsf/HeaderMap.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/HeaderMap.java\n \n import java.lang.reflect.Type;\n import java.util.Map;\n-import java.util.Set;\n \n-import com.google.common.base.Preconditions;\n-import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n \n /**\n  * Map of request or response header objects. There is a {@link HeaderMapSpec} associated with the\n  * \n  * @author inder\n  */\n-public final class HeaderMap {\n+public final class HeaderMap extends ParamMap {\n \n-  private final Map<String, Object> contents;\n-  private final HeaderMapSpec spec;\n-  \n-  public HeaderMap(HeaderMapSpec spec) {\n-    this.spec = spec;\n-    contents = Maps.newHashMap();\n-  }  \n-  \n-  /**\n-   * If paramValue is a generic type, use {@link #put(String, Object, Type)} instead.\n-   * \n-   * @param headerName\n-   * @param headerValue\n-   */\n-  public void put(String headerName, Object headerValue) {\n-    Preconditions.checkArgument(spec.isCompatible(headerName, headerValue));\n-    contents.put(headerName, headerValue);\n+  public static class Builder extends ParamMap.Builder<HeaderMapSpec> {\n+    @Inject\n+    public Builder(HeaderMapSpec spec) {\n+      super(spec);\n+    }\n+    \n+    @Override\n+    public Builder put(String paramName, Object content) {\n+      return (Builder) super.put(paramName, content);\n+    }\n+\n+    @Override\n+    public Builder put(String paramName, Object content, Type typeOfContent) {\n+      return (Builder) super.put(paramName, content, typeOfContent);\n+    }\n+    \n+    public HeaderMap create() {\n+      return new HeaderMap(spec, contents);\n+    }\n   }\n   \n-  public void put(String headerName, Object headerValue, Type typeOfHeaderValue) {\n-    Preconditions.checkArgument(spec.isCompatible(headerName, typeOfHeaderValue));\n-    contents.put(headerName, headerValue);\n-  }\n-  \n+  private HeaderMap(HeaderMapSpec spec, Map<String, Object> contents) {\n+    super(spec, contents);\n+  }  \n+\n+  @Override\n   public HeaderMapSpec getSpec() {\n-    return spec;\n-  }\n-\n-  public Object get(String headerName) {\n-    return contents.get(headerName);\n-  }\n-  \n-  public Type getSpec(String headerName) {\n-    return spec.getTypeFor(headerName);\n-  }\n-  \n-  public Set<Map.Entry<String, Object>> entrySet() {\n-    return contents.entrySet();\n-  }\n-  \n-  public int size() {\n-    return contents.size();\n-  }\n-  \n-  @Override\n-  public String toString() {\n-    return Util.toStringMap(contents);\n+    return (HeaderMapSpec) super.getSpec();\n   }\n }\n--- a/wsf/src/main/java/com/google/gson/wsf/HeaderMapSpec.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/HeaderMapSpec.java\n   }\n   \n   @Override\n-  public boolean isCompatible(String headerName, Type targetType) {\n+  public boolean checkIfCompatible(String headerName, Type targetType) {\n     Type typeOfHeader = getTypeFor(headerName);\n     if (typeOfHeader == null) {\n       return false;\n     return rawClassOfHeader.isAssignableFrom(rawClassOfTargetType);\n   }\n \n-  public boolean isCompatible(String headerName, Object headerValue) {\n-    return isCompatible(headerName, headerValue.getClass());\n+  public boolean checkIfCompatible(String headerName, Object headerValue) {\n+    return checkIfCompatible(headerName, headerValue.getClass());\n   }\n   \n   @Override\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/wsf/ParamMap.java\n+package com.google.gson.wsf;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Maps;\n+\n+class ParamMap {\n+\n+  public static class Builder<T extends ParamMapSpec> {    \n+    protected final Map<String, Object> contents = Maps.newLinkedHashMap();\n+    protected final T spec;\n+\n+    public Builder(T spec) {\n+      this.spec = spec;\n+    }\n+\n+    /**\n+     * If value is a generic type, use {@link #put(String, Object, Type)} instead.\n+     * \n+     * @param key\n+     * @param value\n+     */\n+    public Builder<T> put(String paramName, Object content) {\n+      return put(paramName, content, content.getClass());\n+    }\n+\n+    public Builder<T> put(String paramName, Object content, Type typeOfContent) {\n+      spec.checkIfCompatible(paramName, typeOfContent);\n+      contents.put(paramName, content);\n+      return this;\n+    }\n+  }\n+  \n+  protected final Map<String, Object> contents;\n+  protected final ParamMapSpec spec;\n+\n+  protected ParamMap(ParamMapSpec spec, Map<String, Object> contents) {\n+    this.spec = spec;\n+    this.contents = contents;\n+  }\n+\n+  public ParamMapSpec getSpec() {\n+    return spec;\n+  }\n+\n+  public Object get(String paramName) {\n+    return contents.get(paramName);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> T get(String key, Type typeOfValue) {\n+    Preconditions.checkArgument(spec.checkIfCompatible(key, typeOfValue));\n+    return (T) contents.get(key);\n+  }\n+  \n+  public Type getSpec(String headerName) {\n+    return spec.getTypeFor(headerName);\n+  }\n+\n+  public Set<Map.Entry<String, Object>> entrySet() {\n+    return contents.entrySet();\n+  }\n+\n+  public int size() {\n+    return contents.size();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return Util.toStringMap(contents);\n+  }\n+}\n--- a/wsf/src/main/java/com/google/gson/wsf/ParamMapSpec.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/ParamMapSpec.java\n \n   Type getTypeFor(String paramName);\n \n-  boolean isCompatible(String paramName, Type type);\n+  boolean checkIfCompatible(String paramName, Type type);\n \n-  boolean isCompatible(String paramName, Object object);\n+  boolean checkIfCompatible(String paramName, Object object);\n   \n   public Set<Map.Entry<String, Type>> entrySet();\n \n--- a/wsf/src/main/java/com/google/gson/wsf/RequestBody.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/RequestBody.java\n import java.lang.reflect.Type;\n import java.util.Map;\n \n-import com.google.common.collect.Maps;\n import com.google.inject.Inject;\n \n /**\n  */\n public final class RequestBody extends ContentBody {\n \n-  public static class Builder {    \n-    private final Map<String, Object> contents = Maps.newLinkedHashMap();\n-    private final RequestBodySpec spec;\n+  public static class Builder extends ParamMap.Builder<RequestBodySpec> {    \n     \n     @Inject\n     public Builder(RequestBodySpec spec) {\n-      this.spec = spec;\n+      super(spec);\n     }\n     \n-    public Builder add(String paramName, Object content) {\n-      return add(paramName, content, content.getClass());\n+    @Override\n+    public Builder put(String paramName, Object content) {\n+      return (Builder) super.put(paramName, content);\n     }\n-    \n-    public Builder add(String paramName, Object content, Type typeOfContent) {\n-      spec.isCompatible(paramName, typeOfContent);\n-      contents.put(paramName, content);\n-      return this;\n+\n+    @Override\n+    public Builder put(String paramName, Object content, Type typeOfContent) {\n+      return (Builder) super.put(paramName, content, typeOfContent);\n     }\n     \n     public RequestBody create() {\n-      RequestBody requestBody = new RequestBody(spec, contents);\n-      return requestBody;\n+      return new RequestBody(spec, contents);\n     }    \n   }\n \n-  public RequestBody(RequestBodySpec spec, Map<String, Object> contents) {\n+  private RequestBody(RequestBodySpec spec, Map<String, Object> contents) {\n     super(spec, contents);\n   }\n   \n--- a/wsf/src/main/java/com/google/gson/wsf/ResponseBody.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/ResponseBody.java\n package com.google.gson.wsf;\n \n import java.lang.reflect.Type;\n+import java.util.Map;\n \n-import com.google.common.base.Preconditions;\n+import com.google.inject.Inject;\n \n /**\n  * body of the response. This is written out as JSON to be sent out to the client. \n  */\n public final class ResponseBody extends ContentBody {\n \n-  public ResponseBody(ResponseBodySpec spec) {\n-    super(spec);\n+  public static class Builder extends ParamMap.Builder<ResponseBodySpec> {    \n+\n+    @Inject\n+    public Builder(ResponseBodySpec spec) {\n+      super(spec);\n+    }\n+\n+    @Override\n+    public Builder put(String paramName, Object content) {\n+      return (Builder) super.put(paramName, content);\n+    }\n+\n+    @Override\n+    public Builder put(String paramName, Object content, Type typeOfContent) {\n+      return (Builder) super.put(paramName, content, typeOfContent);\n+    }\n+    \n+    public ResponseBody create() {\n+      return new ResponseBody(spec, contents);\n+    }    \n+  }\n+\n+\n+  private ResponseBody(ResponseBodySpec spec, Map<String, Object> contents) {\n+    super(spec, contents);\n   }\n   \n   @Override\n   public ResponseBodySpec getSpec() {\n     return (ResponseBodySpec) spec;\n   }\n-  \n-  /**\n-   * If value is a generic type, use {@link #put(String, Object, Type)} instead.\n-   * \n-   * @param key\n-   * @param value\n-   */\n-  public void put(String key, Object value) {\n-    put(key, value, value.getClass());\n-  }\n-    \n-  public void put(String key, Object value, Type typeOfValue) {\n-    Type expectedType = spec.getTypeFor(key);\n-    Preconditions.checkArgument(Util.isAssignableFrom(typeOfValue, expectedType));\n-    contents.put(key, value);\n-  }  \n }\n--- a/wsf/src/main/java/com/google/gson/wsf/WebServiceResponse.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/WebServiceResponse.java\n  */\n package com.google.gson.wsf;\n \n+import java.lang.reflect.Type;\n+\n /**\n  * The data associated with a Web service response. This includes http response header parameters, \n  * and {@link ResponseBody}. \n   private final ResponseBody body;\n   private final ResponseSpec spec;\n   \n-  public WebServiceResponse(ResponseSpec spec) {\n+  public static class Builder {\n+    private final HeaderMap.Builder headers;\n+    private final ResponseBody.Builder body;\n+    private final ResponseSpec spec;\n+    \n+    public Builder(ResponseSpec spec) {\n+      this.spec = spec;\n+      headers = new HeaderMap.Builder(spec.getHeadersSpec());\n+      body = new ResponseBody.Builder(spec.getBodySpec());      \n+    }\n+    \n+    public Builder putHeader(String paramName, Object content) {\n+      headers.put(paramName, content);\n+      return this;\n+    }\n+    \n+    public Builder putHeader(String paramName, Object content, Type typeOfContent) {\n+      headers.put(paramName, content, typeOfContent);\n+      return this;\n+    }\n+    \n+    public Builder putBody(String paramName, Object content) {\n+      body.put(paramName, content);\n+      return this;\n+    }\n+\n+    public Builder put(String paramName, Object content, Type typeOfContent) {\n+      body.put(paramName, content, typeOfContent);\n+      return this;\n+    }\n+    \n+    public WebServiceResponse create() {\n+      return new WebServiceResponse(spec, headers.create(), body.create());\n+    }\n+  }\n+  \n+  private WebServiceResponse(ResponseSpec spec, HeaderMap headers, ResponseBody body) {\n     this.spec = spec;\n-    headers = new HeaderMap(spec.getHeadersSpec());\n-    body = new ResponseBody(spec.getBodySpec());\n+    this.headers = headers;\n+    this.body = body;\n   }\n   \n   public WebServiceResponse(HeaderMap responseHeaders, ResponseBody responseBody) {\n--- a/wsf/src/main/java/com/google/gson/wsf/client/ResponseReceiver.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/client/ResponseReceiver.java\n   }\n \n   private HeaderMap readResponseHeaders(HttpURLConnection conn, HeaderMapSpec paramsSpec) {    \n-    HeaderMap params = new HeaderMap(paramsSpec);    \n+    HeaderMap.Builder paramsBuilder = new HeaderMap.Builder(paramsSpec);    \n     for (Map.Entry<String, Type> entry : paramsSpec.entrySet()) {\n       String paramName = entry.getKey();\n       String json = conn.getHeaderField(paramName);\n       if (json != null) {\n         Type typeOfT = paramsSpec.getTypeFor(paramName);\n         Object value = gson.fromJson(json, typeOfT);\n-        params.put(paramName, value, typeOfT);\n+        paramsBuilder.put(paramName, value, typeOfT);\n       }\n     }\n-    return params;\n+    return paramsBuilder.create();\n   }\n \n   private ResponseBody readResponseBody(HttpURLConnection conn, ResponseBodySpec bodySpec) \n       throws IOException {\n     if (bodySpec.size() == 0) {\n-      return new ResponseBody(bodySpec);\n+      return new ResponseBody.Builder(bodySpec).create();\n     }\n     String connContentType = conn.getContentType();\n     Preconditions.checkArgument(connContentType.contains(bodySpec.getContentType()));\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/wsf/inject/server/WebServiceCallServerProvider.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.wsf.inject.server;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.wsf.WebServiceCall;\n+import com.google.gson.wsf.WebServiceCallSpec;\n+import com.google.gson.wsf.WebServiceRequest;\n+import com.google.gson.wsf.WebServiceResponse;\n+import com.google.gson.wsf.server.RequestReceiver;\n+import com.google.gson.wsf.server.WebServiceCallServerBuilder;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+/**\n+ * Guice provider for {@link WebServiceCall} to be used by a server-side implementation.\n+ *\n+ * @author inder\n+ */\n+public final class WebServiceCallServerProvider implements Provider<WebServiceCallServerBuilder> {\n+  private final Gson gson;\n+  private final WebServiceCallSpec callSpec;\n+  private final HttpServletRequest request;\n+\n+  @Inject\n+  public WebServiceCallServerProvider(Gson gson, HttpServletRequest request, \n+      WebServiceCallSpec callSpec) {\n+    this.callSpec = callSpec;\n+    this.gson = gson;\n+    this.request = request;\n+  }\n+\n+  @Override\n+  public WebServiceCallServerBuilder get() {\n+    RequestReceiver receiver = new RequestReceiver(gson, callSpec.getRequestSpec());\n+    WebServiceRequest wsRequest = receiver.receive(request);           \n+    \n+    WebServiceResponse.Builder responseBuilder = \n+      new WebServiceResponse.Builder(callSpec.getResponseSpec());\n+    return new WebServiceCallServerBuilder(callSpec, wsRequest, responseBuilder);\n+  }\n+}\n--- a/wsf/src/main/java/com/google/gson/wsf/server/RequestReceiver.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/RequestReceiver.java\n import java.io.InputStreamReader;\n import java.io.Reader;\n import java.lang.reflect.Type;\n-import java.util.HashMap;\n import java.util.Map;\n \n import javax.servlet.http.HttpServletRequest;\n   \n   private HeaderMap buildRequestParams(HttpServletRequest request) {\n     HeaderMapSpec paramsSpec = this.spec.getHeadersSpec();\n-    HeaderMap params = new HeaderMap(paramsSpec);\n+    HeaderMap.Builder paramsBuilder = new HeaderMap.Builder(paramsSpec);\n     for (Map.Entry<String, Type> param : paramsSpec.entrySet()) {\n       String name = param.getKey();\n       Type type = param.getValue();\n       }\n       if (header != null && !header.equals(\"\")) { \n         Object value = gson.fromJson(header, type);\n-        params.put(name, value);\n+        paramsBuilder.put(name, value);\n       }\n     }\n-    return params;\n+    return paramsBuilder.create();\n   }\n   \n   private RequestBody buildRequestBody(HttpServletRequest request) throws IOException {\n   }\n \n   private RequestBody createEmptyRequestBody(RequestBodySpec bodySpec) {\n-    return new RequestBody(bodySpec, new HashMap<String, Object>());\n+    return new RequestBody.Builder(bodySpec).create();\n   }\n }\n--- a/wsf/src/main/java/com/google/gson/wsf/typeadapters/RequestBodyGsonConverter.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/typeadapters/RequestBodyGsonConverter.java\n package com.google.gson.wsf.typeadapters;\n \n import java.lang.reflect.Type;\n-import java.util.HashMap;\n import java.util.Map;\n \n import com.google.gson.InstanceCreator;\n       String key = entry.getKey();\n       Type entryType = spec.getTypeFor(key);\n       Object value = context.deserialize(entry.getValue(), entryType);\n-      builder.add(key, value);\n+      builder.put(key, value);\n     }\n     return builder.create();\n   }\n \n   @Override\n   public RequestBody createInstance(Type type) {\n-    return new RequestBody(spec, new HashMap<String, Object>());\n+    return new RequestBody.Builder(spec).create();\n   }\n }\n--- a/wsf/src/main/java/com/google/gson/wsf/typeadapters/ResponseBodyGsonConverter.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/typeadapters/ResponseBodyGsonConverter.java\n   @Override\n   public ResponseBody deserialize(JsonElement json, Type typeOfT, \n       JsonDeserializationContext context) throws JsonParseException {\n-    ResponseBody responseBody = new ResponseBody(spec);\n+    ResponseBody.Builder responseBodyBuilder = new ResponseBody.Builder(spec);\n     for (Map.Entry<String, JsonElement> entry : json.getAsJsonObject().entrySet()) {\n       String key = entry.getKey();\n       Type entryType = spec.getTypeFor(key);\n       Object value = context.deserialize(entry.getValue(), entryType);\n-      responseBody.put(key, value, entryType);\n+      responseBodyBuilder.put(key, value, entryType);\n     }\n-    return responseBody;\n+    return responseBodyBuilder.create();\n   }\n \n   @Override\n   public ResponseBody createInstance(Type type) {\n-    return new ResponseBody(spec);\n+    return new ResponseBody.Builder(spec).create();\n   }\n }", "timestamp": 1221918952, "metainfo": ""}