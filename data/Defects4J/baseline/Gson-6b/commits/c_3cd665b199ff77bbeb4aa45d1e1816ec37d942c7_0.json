{"sha": "3cd665b199ff77bbeb4aa45d1e1816ec37d942c7", "log": "Added support for serialization of raw maps. Also, refactored tests for maps in MapTest class.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n \n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n       InstanceCreator<Map> {\n     public JsonElement serialize(Map src, Type typeOfSrc, JsonSerializationContext context) {\n       JsonObject map = new JsonObject();\n-      Type childType = new TypeInfoMap(typeOfSrc).getValueType();\n+      Type childGenericType = null;\n+      if (typeOfSrc instanceof ParameterizedType) {\n+        childGenericType = new TypeInfoMap(typeOfSrc).getValueType();        \n+      }\n       for (Iterator iterator = src.entrySet().iterator(); iterator.hasNext(); ) {\n         Map.Entry entry = (Map.Entry) iterator.next();\n-        JsonElement valueElement = context.serialize(entry.getValue(), childType);\n+        Object value = entry.getValue();\n+        Type childType = (childGenericType == null) ? \n+            childType = value.getClass() : childGenericType;\n+        JsonElement valueElement = context.serialize(value, childType);\n         map.add(entry.getKey().toString(), valueElement);\n       }\n       return map;\n--- a/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java\n+++ b/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java\n \n   public void testEmptyMapNoTypeSerialization() {\n     Map<String, String> emptyMap = new HashMap<String, String>();\n-    try {\n-      mapSerializer.serialize(emptyMap, emptyMap.getClass(), null);\n-      fail(\"Parameterized types need to have a ParameterizedType passed in, not a Class.\");\n-    } catch (IllegalArgumentException expected) { }\n+    JsonElement element = mapSerializer.serialize(emptyMap, emptyMap.getClass(), null);\n+    assertTrue(element instanceof JsonObject);\n+    JsonObject emptyMapJsonObject = (JsonObject) element;\n+    assertTrue(emptyMapJsonObject.entrySet().isEmpty());\n   }\n \n   public void testEmptyMapSerialization() {\n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n  */\n package com.google.gson.functional;\n \n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n-import com.google.gson.JsonParseException;\n-import com.google.gson.reflect.TypeToken;\n-\n-import junit.framework.TestCase;\n-\n-import java.lang.reflect.Type;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.net.URI;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n import java.util.HashSet;\n-import java.util.LinkedHashMap;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n+\n+import junit.framework.TestCase;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonParseException;\n \n /**\n  * Functional test for Json serialization and deserialization for common classes for which default\n- * support is provided in Gson.\n+ * support is provided in Gson. The tests for Map types are available in {@link MapTest}.\n  *\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n     assertEquals(\"EURO\", locale.getVariant());\n   }\n \n-  public void testMapSerialization() {\n-    Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n-    map.put(\"a\", 1);\n-    map.put(\"b\", 2);\n-    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n-    String json = gson.toJson(map, typeOfMap);\n-    assertTrue(json.contains(\"\\\"a\\\":1\"));\n-    assertTrue(json.contains(\"\\\"b\\\":2\"));\n-  }\n-\n-  public void testMapDeserialization() {\n-    String json = \"{\\\"a\\\":1,\\\"b\\\":2}\";\n-    Type typeOfMap = new TypeToken<Map<String,Integer>>(){}.getType();\n-    Map<String, Integer> target = gson.fromJson(json, typeOfMap);\n-    assertEquals(1, target.get(\"a\").intValue());\n-    assertEquals(2, target.get(\"b\").intValue());\n-  }\n-\n-  public void testMapSerializationEmpty() {\n-    Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n-    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n-    String json = gson.toJson(map, typeOfMap);\n-    assertEquals(\"{}\", json);\n-  }\n-\n   public void testBigDecimalFieldSerialization() {\n     ClassWithBigDecimal target = new ClassWithBigDecimal(\"-122.01e-21\");\n     String json = gson.toJson(target);\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.functional;\n+\n+import java.lang.reflect.Type;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Functional test for Json serialization and deserialization for Maps\n+ *\n+ * @author Inderjeet Singh\n+ * @author Joel Leitch\n+ */\n+public class MapTest extends TestCase {\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new Gson();\n+  }\n+\n+  public void testMapSerialization() {\n+    Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n+    map.put(\"a\", 1);\n+    map.put(\"b\", 2);\n+    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n+    String json = gson.toJson(map, typeOfMap);\n+    assertTrue(json.contains(\"\\\"a\\\":1\"));\n+    assertTrue(json.contains(\"\\\"b\\\":2\"));\n+  }\n+\n+  public void testMapDeserialization() {\n+    String json = \"{\\\"a\\\":1,\\\"b\\\":2}\";\n+    Type typeOfMap = new TypeToken<Map<String,Integer>>(){}.getType();\n+    Map<String, Integer> target = gson.fromJson(json, typeOfMap);\n+    assertEquals(1, target.get(\"a\").intValue());\n+    assertEquals(2, target.get(\"b\").intValue());\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public void testRawMapSerialization() {\n+    Map map = new LinkedHashMap();\n+    map.put(\"a\", 1);\n+    map.put(\"b\", \"string\");\n+    String json = gson.toJson(map);\n+    assertTrue(json.contains(\"\\\"a\\\":1\"));\n+    assertTrue(json.contains(\"\\\"b\\\":\\\"string\\\"\"));    \n+  }\n+  \n+  public void testMapSerializationEmpty() {\n+    Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n+    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n+    String json = gson.toJson(map, typeOfMap);\n+    assertEquals(\"{}\", json);\n+  }\n+}", "timestamp": 1224628661, "metainfo": ""}