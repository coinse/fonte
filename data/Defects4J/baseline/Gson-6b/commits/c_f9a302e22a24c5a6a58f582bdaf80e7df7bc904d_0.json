{"sha": "f9a302e22a24c5a6a58f582bdaf80e7df7bc904d", "log": "incorporated code review feedback. Added a test to ensure JsonAdapter validation doesn't carry side-effects to other fields", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonArray.java\n+++ b/gson/src/main/java/com/google/gson/JsonArray.java\n    *   Element can be null.\n    * @param index index of the element to replace\n    * @param element element to be stored at the specified position\n-   * @return \n    * @return the element previously at the specified position\n    * @throws IndexOutOfBoundsException if the specified index is outside the array bounds\n    */\n--- a/gson/src/main/java/com/google/gson/annotations/JsonAdapter.java\n+++ b/gson/src/main/java/com/google/gson/annotations/JsonAdapter.java\n  *   }\n  * }\n  * </pre>\n- * The above annotation will ensure UserJsonAdapter2 supersedes UserJsonAdapter for the user\n- * field of the Gadget class.\n+ * The above annotation will ensure UserJsonAdapter2 takes precedence over UserJsonAdapter\n+ * for the user field of the Gadget class.\n  *\n  * @since 2.3\n  *\n--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java\n       return new User(in.nextString());\n     }\n   }\n+\n+  public void testJsonAdapterInvokedOnlyForAnnotatedFields() {\n+    Gson gson = new Gson();\n+    String json = \"{'part1':'name','part2':{'name':'name2'}}\";\n+    GadgetWithTwoParts gadget = gson.fromJson(json, GadgetWithTwoParts.class);\n+    assertEquals(\"partJsonAdapter\", gadget.part1.name);\n+    assertEquals(\"name2\", gadget.part2.name);\n+  }\n+\n+  private static final class GadgetWithTwoParts {\n+    @JsonAdapter(PartJsonAdapter.class) final Part part1;\n+    final Part part2; // Doesn't have the JsonAdapter annotation\n+    @SuppressWarnings(\"unused\") GadgetWithTwoParts(Part part1, Part part2) {\n+      this.part1 = part1;\n+      this.part2 = part2;\n+    }\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/internal/GsonTypesTest.java\n+++ b/gson/src/test/java/com/google/gson/internal/GsonTypesTest.java\n \n public final class GsonTypesTest extends TestCase {\n \n-  public void testNewParameterizedTypeWithoutOwner() {\n+  public void testNewParameterizedTypeWithoutOwner() throws Exception {\n     // List<A>. List is a top-level class\n     Type type = $Gson$Types.newParameterizedTypeWithOwner(null, List.class, A.class);\n     assertEquals(A.class, getFirstTypeArgument(type));\n     assertEquals(D.class, getFirstTypeArgument(type));\n   }\n \n-  public void testGetFirstTypeArgument() {\n+  public void testGetFirstTypeArgument() throws Exception {\n     assertNull(getFirstTypeArgument(A.class));\n \n     Type type = $Gson$Types.newParameterizedTypeWithOwner(null, A.class, B.class, C.class);\n    * Given a parameterized type A&lt;B,C&gt;, returns B. If the specified type is not\n    * a generic type, returns null.\n    */\n-  public static Type getFirstTypeArgument(Type type) {\n-    try {\n-      if (!(type instanceof ParameterizedType)) return null;\n-      ParameterizedType ptype = (ParameterizedType) type;\n-      Type[] actualTypeArguments = ptype.getActualTypeArguments();\n-      if (actualTypeArguments.length == 0) return null;\n-      return $Gson$Types.canonicalize(actualTypeArguments[0]);\n-    } catch (Exception e) {\n-      return null;\n-    }\n+  public static Type getFirstTypeArgument(Type type) throws Exception {\n+    if (!(type instanceof ParameterizedType)) return null;\n+    ParameterizedType ptype = (ParameterizedType) type;\n+    Type[] actualTypeArguments = ptype.getActualTypeArguments();\n+    if (actualTypeArguments.length == 0) return null;\n+    return $Gson$Types.canonicalize(actualTypeArguments[0]);\n   }\n-\n }", "timestamp": 1406859402, "metainfo": ""}