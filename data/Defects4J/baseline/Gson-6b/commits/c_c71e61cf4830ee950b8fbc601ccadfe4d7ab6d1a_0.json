{"sha": "c71e61cf4830ee950b8fbc601ccadfe4d7ab6d1a", "log": "Converted EnumTypeAdapter to new style. Got rid of default Hierarchy Serializer/Deserializers from DefaultTypeAdapters. Got rid of methods for gettting default serializers/deserializers/instance creators. Instead we reuse the static final instances. Fixed warnings in TypeAdapters where a parameterized type T was hiding the parameterized T in methods. Removed support to unwrap single element array of enums into enum values. Also removed the test that verifies this behavior.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n   private static final DefaultTimestampDeserializer TIMESTAMP_DESERIALIZER =\n     new DefaultTimestampDeserializer();\n \n-  @SuppressWarnings(\"unchecked\")\n-  private static final EnumTypeAdapter ENUM_TYPE_ADAPTER = new EnumTypeAdapter();\n-\n   private static final CharacterTypeAdapter CHARACTER_TYPE_ADAPTER = new CharacterTypeAdapter();\n   private static final NumberTypeAdapter NUMBER_TYPE_ADAPTER = new NumberTypeAdapter();\n \n   // The constants DEFAULT_SERIALIZERS, DEFAULT_DESERIALIZERS, and DEFAULT_INSTANCE_CREATORS\n   // must be defined after the constants for the type adapters. Otherwise, the type adapter\n   // constants will appear as nulls.\n-  private static final ParameterizedTypeHandlerMap<JsonSerializer<?>> DEFAULT_SERIALIZERS =\n+  static final ParameterizedTypeHandlerMap<JsonSerializer<?>> DEFAULT_SERIALIZERS =\n       createDefaultSerializers();\n-  static final ParameterizedTypeHandlerMap<JsonSerializer<?>> DEFAULT_HIERARCHY_SERIALIZERS =\n-      createDefaultHierarchySerializers();\n-  private static final ParameterizedTypeHandlerMap<JsonDeserializer<?>> DEFAULT_DESERIALIZERS =\n+  static final ParameterizedTypeHandlerMap<JsonDeserializer<?>> DEFAULT_DESERIALIZERS =\n       createDefaultDeserializers();\n-  static final ParameterizedTypeHandlerMap<JsonDeserializer<?>> DEFAULT_HIERARCHY_DESERIALIZERS =\n-      createDefaultHierarchyDeserializers();\n-  private static final ParameterizedTypeHandlerMap<InstanceCreator<?>> DEFAULT_INSTANCE_CREATORS =\n+  static final ParameterizedTypeHandlerMap<InstanceCreator<?>> DEFAULT_INSTANCE_CREATORS =\n       createDefaultInstanceCreators();\n \n   private static ParameterizedTypeHandlerMap<JsonSerializer<?>> createDefaultSerializers() {\n     map.register(Character.class, CHARACTER_TYPE_ADAPTER, true);\n     map.register(Number.class, NUMBER_TYPE_ADAPTER, true);\n \n-    map.makeUnmodifiable();\n-    return map;\n-  }\n-\n-  private static ParameterizedTypeHandlerMap<JsonSerializer<?>> createDefaultHierarchySerializers() {\n-    ParameterizedTypeHandlerMap<JsonSerializer<?>> map =\n-        new ParameterizedTypeHandlerMap<JsonSerializer<?>>();\n-    map.registerForTypeHierarchy(Enum.class, ENUM_TYPE_ADAPTER, true);\n     map.makeUnmodifiable();\n     return map;\n   }\n     return map;\n   }\n \n-  private static ParameterizedTypeHandlerMap<JsonDeserializer<?>> createDefaultHierarchyDeserializers() {\n-    ParameterizedTypeHandlerMap<JsonDeserializer<?>> map =\n-        new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();\n-    map.registerForTypeHierarchy(Enum.class, wrapDeserializer(ENUM_TYPE_ADAPTER), true);\n-    map.makeUnmodifiable();\n-    return map;\n-  }\n-\n   private static ParameterizedTypeHandlerMap<InstanceCreator<?>> createDefaultInstanceCreators() {\n     ParameterizedTypeHandlerMap<InstanceCreator<?>> map\n         = new ParameterizedTypeHandlerMap<InstanceCreator<?>>();\n   @SuppressWarnings(\"unchecked\")\n   private static JsonDeserializer<?> wrapDeserializer(JsonDeserializer<?> deserializer) {\n     return new JsonDeserializerExceptionWrapper(deserializer);\n-  }\n-\n-  static ParameterizedTypeHandlerMap<JsonSerializer<?>> getDefaultSerializers() {\n-    return DEFAULT_SERIALIZERS.copyOf();\n-  }\n-\n-  static ParameterizedTypeHandlerMap<JsonSerializer<?>> getAllDefaultSerializers() {\n-    ParameterizedTypeHandlerMap<JsonSerializer<?>> defaultSerializers =\n-      DEFAULT_SERIALIZERS.copyOf();\n-    defaultSerializers.register(DEFAULT_HIERARCHY_SERIALIZERS);\n-    return defaultSerializers;\n-  }\n-\n-  static ParameterizedTypeHandlerMap<JsonDeserializer<?>> getAllDefaultDeserializers() {\n-    ParameterizedTypeHandlerMap<JsonDeserializer<?>> defaultDeserializers =\n-      getDefaultDeserializers().copyOf();\n-    defaultDeserializers.register(DEFAULT_HIERARCHY_DESERIALIZERS);\n-    return defaultDeserializers;\n-  }\n-\n-  static ParameterizedTypeHandlerMap<JsonDeserializer<?>> getDefaultDeserializers() {\n-    return DEFAULT_DESERIALIZERS;\n-  }\n-\n-  static ParameterizedTypeHandlerMap<InstanceCreator<?>> getDefaultInstanceCreators() {\n-    return DEFAULT_INSTANCE_CREATORS;\n   }\n \n   /**\n     }\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n-  private static final class EnumTypeAdapter<T extends Enum<T>>\n-      implements JsonSerializer<T>, JsonDeserializer<T> {\n-    public JsonElement serialize(T src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src.name());\n-    }\n-\n-    @SuppressWarnings(\"cast\")\n-    public T deserialize(JsonElement json, Type classOfT, JsonDeserializationContext context)\n-        throws JsonParseException {\n-      return (T) Enum.valueOf((Class<T>) classOfT, json.getAsString());\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return EnumTypeAdapter.class.getSimpleName();\n-    }\n-  }\n-\n   private static final class NumberTypeAdapter\n       implements JsonSerializer<Number>, JsonDeserializer<Number> {\n     public JsonElement serialize(Number src, Type typeOfSrc, JsonSerializationContext context) {\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n    */\n   public Gson() {\n     this(DEFAULT_EXCLUSION_STRATEGY, DEFAULT_EXCLUSION_STRATEGY, DEFAULT_NAMING_POLICY,\n-        DefaultTypeAdapters.getDefaultInstanceCreators(),\n-        false, DefaultTypeAdapters.getAllDefaultSerializers(),\n-        DefaultTypeAdapters.getAllDefaultDeserializers(), false, DEFAULT_JSON_NON_EXECUTABLE, true,\n+        DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS,\n+        false, DefaultTypeAdapters.DEFAULT_SERIALIZERS,\n+        DefaultTypeAdapters.DEFAULT_DESERIALIZERS, false, DEFAULT_JSON_NON_EXECUTABLE, true,\n         false, false, LongSerializationPolicy.DEFAULT);\n   }\n \n         ))\n         .factory(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization))\n         .factory(ArrayTypeAdapter.FACTORY)\n+        .factory(TypeAdapters.ENUM_FACTORY)\n         .factory(reflectiveTypeAdapterFactory);\n \n     this.miniGson = builder.build();\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n       serializationStrategies.add(exposeAnnotationSerializationExclusionStrategy);\n     }\n \n-    ParameterizedTypeHandlerMap<JsonSerializer<?>> customSerializers =\n-        DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.copyOf();\n-    customSerializers.register(serializers.copyOf());\n-    ParameterizedTypeHandlerMap<JsonDeserializer<?>> customDeserializers =\n-        DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.copyOf();\n-    customDeserializers.register(deserializers.copyOf());\n+    ParameterizedTypeHandlerMap<JsonSerializer<?>> customSerializers = serializers.copyOf();\n+    ParameterizedTypeHandlerMap<JsonDeserializer<?>> customDeserializers = deserializers.copyOf();\n     addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, customSerializers,\n         customDeserializers);\n \n-    customSerializers.registerIfAbsent(DefaultTypeAdapters.getDefaultSerializers());\n-    customDeserializers.registerIfAbsent(DefaultTypeAdapters.getDefaultDeserializers());\n+    customSerializers.registerIfAbsent(DefaultTypeAdapters.DEFAULT_SERIALIZERS);\n+    customDeserializers.registerIfAbsent(DefaultTypeAdapters.DEFAULT_DESERIALIZERS);\n \n     ParameterizedTypeHandlerMap<InstanceCreator<?>> customInstanceCreators =\n         instanceCreators.copyOf();\n-    customInstanceCreators.registerIfAbsent(DefaultTypeAdapters.getDefaultInstanceCreators());\n+    customInstanceCreators.registerIfAbsent(DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS);\n \n     customSerializers.makeUnmodifiable();\n     customDeserializers.makeUnmodifiable();\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n \n   public static final TypeAdapter.Factory LOCALE_FACTORY = newFactory(Locale.class, LOCALE);\n \n-  public static <T> TypeAdapter.Factory newFactory(\n-      final TypeToken<T> type, final TypeAdapter<T> typeAdapter) {\n+  private static final class EnumTypeAdapter<T extends Enum<T>> extends TypeAdapter<T> {\n+    private final Class<T> classOfT;\n+\n+    public EnumTypeAdapter(Class<T> classOfT) {\n+      this.classOfT = classOfT;\n+    }\n+    public T read(JsonReader reader) throws IOException {\n+      return (T) Enum.valueOf((Class<T>) classOfT, reader.nextString());\n+    }\n+\n+    public void write(JsonWriter writer, T src) throws IOException {\n+      writer.value(src.name());\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory ENUM_FACTORY = newEnumTypeHierarchyFactory(Enum.class);\n+\n+  public static <TT> TypeAdapter.Factory newEnumTypeHierarchyFactory(final Class<TT> clazz) {\n+    return new TypeAdapter.Factory() {\n+      @SuppressWarnings(\"unchecked\")\n+      public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {\n+        Class<? super T> rawType = typeToken.getRawType();\n+        return clazz.isAssignableFrom(rawType)\n+          ? (TypeAdapter<T>) new EnumTypeAdapter(rawType) : null;\n+      }\n+    };\n+  }\n+\n+  public static <TT> TypeAdapter.Factory newFactory(\n+      final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter) {\n     return new TypeAdapter.Factory() {\n       @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n       public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {\n     };\n   }\n \n-  public static <T> TypeAdapter.Factory newFactory(\n-      final Class<T> type, final TypeAdapter<T> typeAdapter) {\n+  public static <TT> TypeAdapter.Factory newFactory(\n+      final Class<TT> type, final TypeAdapter<TT> typeAdapter) {\n     return new TypeAdapter.Factory() {\n       @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n       public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {\n     };\n   }\n \n-  public static <T> TypeAdapter.Factory newFactory(\n-      final Class<T> unboxed, final Class<T> boxed, final TypeAdapter<? super T> typeAdapter) {\n+  public static <TT> TypeAdapter.Factory newFactory(\n+      final Class<TT> unboxed, final Class<TT> boxed, final TypeAdapter<? super TT> typeAdapter) {\n     return new TypeAdapter.Factory() {\n       @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n       public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {\n     };\n   }\n \n-  public static <T> TypeAdapter.Factory newTypeHierarchyFactory(\n-      final Class<T> clazz, final TypeAdapter<T> typeAdapter) {\n+  public static <TT> TypeAdapter.Factory newTypeHierarchyFactory(\n+      final Class<TT> clazz, final TypeAdapter<TT> typeAdapter) {\n     return new TypeAdapter.Factory() {\n+      @SuppressWarnings(\"unchecked\")\n       public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {\n         return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter<T>) typeAdapter : null;\n       }\n--- a/gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java\n+++ b/gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java\n     strategies.add(new ModifierBasedExclusionStrategy(Modifier.TRANSIENT, Modifier.STATIC));\n     ExclusionStrategy exclusionStrategy = new DisjunctionExclusionStrategy(strategies);\n     Gson gson = new Gson(exclusionStrategy, exclusionStrategy, Gson.DEFAULT_NAMING_POLICY,\n-        DefaultTypeAdapters.getDefaultInstanceCreators(),\n-        false, DefaultTypeAdapters.getDefaultSerializers(),\n-        DefaultTypeAdapters.getDefaultDeserializers(), false, Gson.DEFAULT_JSON_NON_EXECUTABLE,\n+        DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS,\n+        false, DefaultTypeAdapters.DEFAULT_SERIALIZERS,\n+        DefaultTypeAdapters.DEFAULT_DESERIALIZERS, false, Gson.DEFAULT_JSON_NON_EXECUTABLE,\n         true, false, false, LongSerializationPolicy.DEFAULT);\n     assertEquals(\"{}\", gson.toJson(new ClassWithNoFields() {\n       // empty anonymous class\n--- a/gson/src/test/java/com/google/gson/functional/EnumTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/EnumTest.java\n   public void testTopLevelEnumDeserialization() throws Exception {\n     MyEnum result = gson.fromJson('\"' + MyEnum.VALUE1.toString() + '\"', MyEnum.class);\n     assertEquals(MyEnum.VALUE1, result);\n-  }\n-\n-  public void testTopLevelEnumInASingleElementArrayDeserialization() {\n-    String json = \"[\" + MyEnum.VALUE1.getExpectedJson() + \"]\";\n-    MyEnum target = gson.fromJson(json, MyEnum.class);\n-    assertEquals(json, \"[\" + target.getExpectedJson() + \"]\");\n   }\n \n   public void testCollectionOfEnumsSerialization() {", "timestamp": 1316151605, "metainfo": ""}