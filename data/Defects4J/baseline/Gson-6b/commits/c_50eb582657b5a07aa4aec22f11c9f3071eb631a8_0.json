{"sha": "50eb582657b5a07aa4aec22f11c9f3071eb631a8", "log": "Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n       new SerializedNameAnnotationInterceptingNamingPolicy(new JavaFieldNamingPolicy());\n \n   private static final String JSON_NON_EXECUTABLE_PREFIX = \")]}'\\n\";\n-\n \n   private final ExclusionStrategy serializationStrategy;\n \n--- a/gson/src/main/java/com/google/gson/JsonArray.java\n+++ b/gson/src/main/java/com/google/gson/JsonArray.java\n   }\n \n   @Override\n-  protected void toString(Appendable sb) throws IOException {\n+  protected void toString(Appendable sb, Escaper escaper) throws IOException {\n     sb.append('[');\n     boolean first = true;\n     for (JsonElement element : elements) {\n       } else {\n         sb.append(',');\n       }\n-      element.toString(sb);\n+      element.toString(sb, escaper);\n     }\n     sb.append(']');\n   }\n--- a/gson/src/main/java/com/google/gson/JsonCompactFormatter.java\n+++ b/gson/src/main/java/com/google/gson/JsonCompactFormatter.java\n \n   private static class FormattingVisitor implements JsonElementVisitor {\n     private final Appendable writer;\n+    private final Escaper escaper;\n     private final boolean serializeNulls;\n \n-    FormattingVisitor(Appendable writer, boolean serializeNulls) {\n+    FormattingVisitor(Appendable writer, Escaper escaper, boolean serializeNulls) {\n       this.writer = writer;\n+      this.escaper = escaper;\n       this.serializeNulls = serializeNulls;\n     }\n \n     public void visitPrimitive(JsonPrimitive primitive) throws IOException {\n-      primitive.toString(writer);\n+      primitive.toString(writer, escaper);\n     }\n \n     public void visitNull() throws IOException {\n       if (!isFirst) {\n         writer.append(',');\n       }\n-      member.toString(writer);\n+      member.toString(writer, escaper);\n     }\n \n     public void visitArrayMember(JsonArray parent, JsonArray member, \n       writer.append('\"');\n       writer.append(memberName);\n       writer.append(\"\\\":\");\n-      member.toString(writer);\n+      member.toString(writer, escaper);\n     }\n \n     public void visitObjectMember(JsonObject parent, String memberName, JsonArray member,\n     if (root == null) {\n       return;\n     }\n-    JsonElementVisitor visitor = new JsonEscapingVisitor(\n-        new FormattingVisitor(writer, serializeNulls), escapeHtmlChars);\n+    JsonElementVisitor visitor = new FormattingVisitor(\n+        writer, new Escaper(escapeHtmlChars), serializeNulls);\n     JsonTreeNavigator navigator = new JsonTreeNavigator(visitor, serializeNulls);\n     navigator.navigate(root);\n   }\n--- a/gson/src/main/java/com/google/gson/JsonElement.java\n+++ b/gson/src/main/java/com/google/gson/JsonElement.java\n  * @author Joel Leitch\n  */\n public abstract class JsonElement {\n+  private static final Escaper BASIC_ESCAPER = new Escaper(false);\n \n   /**\n    * provides check for verifying if this element is an array or not.\n   public String toString() {\n     try {\n       StringBuilder sb = new StringBuilder();\n-      toString(sb);\n+      toString(sb, BASIC_ESCAPER);\n       return sb.toString();\n     } catch (IOException e) {\n       throw new RuntimeException(e);\n     }\n   }\n \n-  protected abstract void toString(Appendable sb) throws IOException;\n+  protected abstract void toString(Appendable sb, Escaper escaper) throws IOException;\n }\n--- a/gson/src/main/java/com/google/gson/JsonNull.java\n+++ b/gson/src/main/java/com/google/gson/JsonNull.java\n   }\n   \n   @Override\n-  protected void toString(Appendable sb) throws IOException {\n+  protected void toString(Appendable sb, Escaper escaper) throws IOException {\n     sb.append(\"null\");\n   }\n   \n--- a/gson/src/main/java/com/google/gson/JsonObject.java\n+++ b/gson/src/main/java/com/google/gson/JsonObject.java\n   }\n \n   @Override\n-  protected void toString(Appendable sb) throws IOException {\n+  protected void toString(Appendable sb, Escaper escaper) throws IOException {\n     sb.append('{');\n     boolean first = true;\n     for (Map.Entry<String, JsonElement> entry : members.entrySet()) {\n       sb.append('\\\"');\n       sb.append(entry.getKey());\n       sb.append(\"\\\":\");\n-      entry.getValue().toString(sb);\n+      entry.getValue().toString(sb, escaper);\n     }\n     sb.append('}');\n   }\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n  * @author Joel Leitch\n  */\n public final class JsonPrimitive extends JsonElement {\n-\n   private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class,\n       float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class,\n       Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };\n \n   private static final BigInteger INTEGER_MAX = BigInteger.valueOf(Integer.MAX_VALUE);\n-\n   private static final BigInteger LONG_MAX = BigInteger.valueOf(Long.MAX_VALUE);\n \n   private Object value;\n   }\n \n   @Override\n-  protected void toString(Appendable sb) throws IOException {\n-    if (value instanceof String) {\n+  protected void toString(Appendable sb, Escaper escaper) throws IOException {\n+    if (isString()) {\n       sb.append('\"');\n-      sb.append((String) value);\n+      sb.append(escaper.escapeJsonString(value.toString()));\n       sb.append('\"');\n     } else {\n       sb.append(value.toString());\n--- a/gson/src/main/java/com/google/gson/JsonPrintFormatter.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrintFormatter.java\n     private final Map<Integer, Boolean> firstArrayElement;\n     private final Map<Integer, Boolean> firstObjectMember;\n     private final JsonWriter writer;\n+    private final Escaper escaper;\n     private final boolean serializeNulls;\n     private int level = 0;\n \n-    PrintFormattingVisitor(JsonWriter writer, boolean serializeNulls) {\n+    PrintFormattingVisitor(JsonWriter writer, Escaper escaper, boolean serializeNulls) {\n       this.writer = writer;\n+      this.escaper = escaper;\n       this.serializeNulls = serializeNulls;\n       this.firstArrayElement = new HashMap<Integer, Boolean>();\n       this.firstObjectMember = new HashMap<Integer, Boolean>();\n     public void visitArrayMember(JsonArray parent, JsonPrimitive member, \n         boolean isFirst) throws IOException {\n       addCommaCheckingFirst(firstArrayElement);\n-      writer.value(member.toString());\n+      writer.value(escapeJsonPrimitive(member));\n     }\n \n     public void visitArrayMember(JsonArray parent, JsonArray member, \n       addCommaCheckingFirst(firstObjectMember);\n       writer.key(memberName);\n       writer.fieldSeparator();\n-      writer.value(member.toString());\n+      writer.value(escapeJsonPrimitive(member));\n     }\n \n     public void visitObjectMember(JsonObject parent, String memberName, JsonArray member, \n     }\n \n     public void visitPrimitive(JsonPrimitive primitive) throws IOException {\n-      writer.value(primitive.toString());\n+      writer.value(escapeJsonPrimitive(primitive));\n     }\n \n     public void visitNull() throws IOException {\n       writer.value(\"null\");\n+    }\n+    \n+    private String escapeJsonPrimitive(JsonPrimitive member) throws IOException {\n+      StringBuilder builder = new StringBuilder();\n+      member.toString(builder, escaper);\n+      return builder.toString();\n     }\n   }\n \n       return;\n     }\n     JsonWriter jsonWriter = new JsonWriter(writer);\n-    JsonElementVisitor visitor = new JsonEscapingVisitor(\n-        new PrintFormattingVisitor(jsonWriter, serializeNulls), escapeHtmlChars);    \n+    JsonElementVisitor visitor = new PrintFormattingVisitor(\n+        jsonWriter, new Escaper(escapeHtmlChars), serializeNulls);    \n     JsonTreeNavigator navigator = new JsonTreeNavigator(visitor, serializeNulls);\n     navigator.navigate(root);\n     jsonWriter.finishLine();\n--- a/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java\n       fail(\"Integers can not handle exponents like this.\");\n     } catch (NumberFormatException expected) { }\n   }\n+  \n+  public void testValidJsonOnToString() throws Exception {\n+    JsonPrimitive json = new JsonPrimitive(\"Some\\nEscaped\\nValue\");\n+    assertEquals(\"\\\"Some\\\\nEscaped\\\\nValue\\\"\", json.toString());\n+    \n+    json = new JsonPrimitive(new BigDecimal(\"1.333\"));\n+    assertEquals(\"1.333\", json.toString());\n+  }\n }", "timestamp": 1253730483, "metainfo": ""}