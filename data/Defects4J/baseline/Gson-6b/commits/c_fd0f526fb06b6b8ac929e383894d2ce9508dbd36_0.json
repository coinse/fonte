{"sha": "fd0f526fb06b6b8ac929e383894d2ce9508dbd36", "log": "Basic functional test for type hierarchy adapter.", "commit": "\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import java.lang.reflect.Type;\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test that the hierarchy adapter works when subtypes are used.\n+ */\n+public final class TypeHierarchyAdapterTest extends TestCase {\n+\n+  public void testTypeHierarchy() {\n+    Manager andy = new Manager();\n+    andy.userid = \"andy\";\n+    andy.startDate = 2005;\n+    andy.minions = new Employee[] {\n+        new Employee(\"inder\", 2007),\n+        new Employee(\"joel\", 2006),\n+        new Employee(\"jesse\", 2006),\n+    };\n+\n+    CEO eric = new CEO();\n+    eric.userid = \"eric\";\n+    eric.startDate = 2001;\n+    eric.assistant = new Employee(\"jerome\", 2006);\n+\n+    eric.minions = new Employee[] {\n+        new Employee(\"larry\", 1998),\n+        new Employee(\"sergey\", 1998),\n+        andy,\n+    };\n+\n+    Gson gson = new GsonBuilder()\n+        .registerTypeHierarchyAdapter(Employee.class, new EmployeeAdapter())\n+        .setPrettyPrinting()\n+        .create();\n+\n+    Company company = new Company();\n+    company.ceo = eric;\n+\n+    String json = gson.toJson(company, Company.class);\n+    assertEquals(\"{\\n\" +\n+        \"  \\\"ceo\\\": {\\n\" +\n+        \"    \\\"userid\\\": \\\"eric\\\",\\n\" +\n+        \"    \\\"startDate\\\": 2001,\\n\" +\n+        \"    \\\"minions\\\": [\\n\" +\n+        \"      {\\n\" +\n+        \"        \\\"userid\\\": \\\"larry\\\",\\n\" +\n+        \"        \\\"startDate\\\": 1998\\n\" +\n+        \"      },\\n\" +\n+        \"      {\\n\" +\n+        \"        \\\"userid\\\": \\\"sergey\\\",\\n\" +\n+        \"        \\\"startDate\\\": 1998\\n\" +\n+        \"      },\\n\" +\n+        \"      {\\n\" +\n+        \"        \\\"userid\\\": \\\"andy\\\",\\n\" +\n+        \"        \\\"startDate\\\": 2005,\\n\" +\n+        \"        \\\"minions\\\": [\\n\" +\n+        \"          {\\n\" +\n+        \"            \\\"userid\\\": \\\"inder\\\",\\n\" +\n+        \"            \\\"startDate\\\": 2007\\n\" +\n+        \"          },\\n\" +\n+        \"          {\\n\" +\n+        \"            \\\"userid\\\": \\\"joel\\\",\\n\" +\n+        \"            \\\"startDate\\\": 2006\\n\" +\n+        \"          },\\n\" +\n+        \"          {\\n\" +\n+        \"            \\\"userid\\\": \\\"jesse\\\",\\n\" +\n+        \"            \\\"startDate\\\": 2006\\n\" +\n+        \"          }\\n\" +\n+        \"        ]\\n\" +\n+        \"      }\\n\" +\n+        \"    ],\\n\" +\n+        \"    \\\"assistant\\\": {\\n\" +\n+        \"      \\\"userid\\\": \\\"jerome\\\",\\n\" +\n+        \"      \\\"startDate\\\": 2006\\n\" +\n+        \"    }\\n\" +\n+        \"  }\\n\" +\n+        \"}\", json);\n+\n+    Company copied = gson.fromJson(json, Company.class);\n+    assertEquals(json, gson.toJson(copied, Company.class));\n+    assertEquals(copied.ceo.userid, company.ceo.userid);\n+    assertEquals(copied.ceo.assistant.userid, company.ceo.assistant.userid);\n+    assertEquals(copied.ceo.minions[0].userid, company.ceo.minions[0].userid);\n+    assertEquals(copied.ceo.minions[1].userid, company.ceo.minions[1].userid);\n+    assertEquals(copied.ceo.minions[2].userid, company.ceo.minions[2].userid);\n+    assertEquals(((Manager) copied.ceo.minions[2]).minions[0].userid,\n+        ((Manager) company.ceo.minions[2]).minions[0].userid);\n+    assertEquals(((Manager) copied.ceo.minions[2]).minions[1].userid,\n+        ((Manager) company.ceo.minions[2]).minions[1].userid);\n+  }\n+\n+  static class EmployeeAdapter implements JsonSerializer<Employee>, JsonDeserializer<Employee> {\n+    public JsonElement serialize(Employee employee, Type typeOfSrc,\n+        JsonSerializationContext context) {\n+      JsonObject result = new JsonObject();\n+      result.add(\"userid\", context.serialize(employee.userid, String.class));\n+      result.add(\"startDate\", context.serialize(employee.startDate, long.class));\n+      if (employee instanceof Manager) {\n+        result.add(\"minions\", context.serialize(((Manager) employee).minions, Employee[].class));\n+        if (employee instanceof CEO) {\n+          result.add(\"assistant\", context.serialize(((CEO) employee).assistant, Employee.class));\n+        }\n+      }\n+      return result;\n+    }\n+\n+    public Employee deserialize(JsonElement json, Type typeOfT,\n+        JsonDeserializationContext context) throws JsonParseException {\n+      JsonObject object = json.getAsJsonObject();\n+      Employee result = null;\n+\n+      // if the employee has an assistant, she must be the CEO\n+      JsonElement assistant = object.get(\"assistant\");\n+      if (assistant != null) {\n+        result = new CEO();\n+        ((CEO) result).assistant = context.deserialize(assistant, Employee.class);\n+      }\n+\n+      // only managers have minions\n+      JsonElement minons = object.get(\"minions\");\n+      if (minons != null) {\n+        if (result == null) {\n+          result = new Manager();\n+        }\n+        ((Manager) result).minions = context.deserialize(minons, Employee[].class);\n+      }\n+\n+      if (result == null) {\n+        result = new Employee();\n+      }\n+      result.userid = context.deserialize(object.get(\"userid\"), String.class);\n+      result.startDate = context.<Long>deserialize(object.get(\"startDate\"), long.class);\n+      return result;\n+    }\n+  }\n+\n+  static class Employee {\n+    String userid;\n+    long startDate;\n+\n+    Employee(String userid, long startDate) {\n+      this.userid = userid;\n+      this.startDate = startDate;\n+    }\n+\n+    Employee() {}\n+  }\n+\n+  static class Manager extends Employee {\n+    Employee[] minions;\n+  }\n+\n+  static class CEO extends Manager {\n+    Employee assistant;\n+  }\n+\n+  static class Company {\n+    CEO ceo;\n+  }\n+}", "timestamp": 1295479527, "metainfo": ""}