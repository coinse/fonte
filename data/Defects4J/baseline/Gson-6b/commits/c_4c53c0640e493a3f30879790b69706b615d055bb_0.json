{"sha": "4c53c0640e493a3f30879790b69706b615d055bb", "log": "Exhaustive test coverage for mixed streaming & binding.", "commit": "\n--- a/gson/src/test/java/com/google/gson/MixedStreamTest.java\n+++ b/gson/src/test/java/com/google/gson/MixedStreamTest.java\n \n package com.google.gson;\n \n+import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n import java.io.StringReader;\n import java.io.StringWriter;\n+import java.lang.reflect.Type;\n+import java.util.Arrays;\n+import java.util.List;\n import junit.framework.TestCase;\n \n public final class MixedStreamTest extends TestCase {\n     assertEquals(RED_MIATA, gson.fromJson(jsonReader, Car.class));\n     jsonReader.endArray();\n   }\n+  \n+  public void testReaderDoesNotMutateState() throws IOException {\n+    Gson gson = new Gson();\n+    JsonReader jsonReader = new JsonReader(new StringReader(CARS_JSON));\n+    jsonReader.beginArray();\n+\n+    jsonReader.setLenient(false);\n+    gson.fromJson(jsonReader, Car.class);\n+    assertFalse(jsonReader.isLenient());\n+\n+    jsonReader.setLenient(true);\n+    gson.fromJson(jsonReader, Car.class);\n+    assertTrue(jsonReader.isLenient());\n+  }\n+\n+  public void testWriteDoesNotMutateState() throws IOException {\n+    Gson gson = new Gson();\n+    JsonWriter jsonWriter = new JsonWriter(new StringWriter());\n+    jsonWriter.beginArray();\n+\n+    jsonWriter.setHtmlSafe(true);\n+    jsonWriter.setLenient(true);\n+    gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);\n+    assertTrue(jsonWriter.isHtmlSafe());\n+    assertTrue(jsonWriter.isLenient());\n+\n+    jsonWriter.setHtmlSafe(false);\n+    jsonWriter.setLenient(false);\n+    gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);\n+    assertFalse(jsonWriter.isHtmlSafe());\n+    assertFalse(jsonWriter.isLenient());\n+  }\n+\n+  public void testReadInvalidState() throws IOException {\n+    Gson gson = new Gson();\n+    JsonReader jsonReader = new JsonReader(new StringReader(CARS_JSON));\n+    jsonReader.beginArray();\n+    jsonReader.beginObject();\n+    try {\n+      gson.fromJson(jsonReader, String.class);\n+      fail();\n+    } catch (IllegalArgumentException expected) {\n+    }\n+  }\n+\n+  public void testReadClosed() throws IOException {\n+    Gson gson = new Gson();\n+    JsonReader jsonReader = new JsonReader(new StringReader(CARS_JSON));\n+    jsonReader.close();\n+    try {\n+      gson.fromJson(jsonReader, new TypeToken<List<Car>>() {}.getType());\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+  }\n+\n+  public void testWriteInvalidState() throws IOException {\n+    Gson gson = new Gson();\n+    JsonWriter jsonWriter = new JsonWriter(new StringWriter());\n+    jsonWriter.beginObject();\n+    try {\n+      gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+  }\n+\n+  public void testWriteClosed() throws IOException {\n+    Gson gson = new Gson();\n+    JsonWriter jsonWriter = new JsonWriter(new StringWriter());\n+    jsonWriter.beginArray();\n+    jsonWriter.endArray();\n+    jsonWriter.close();\n+    try {\n+      gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+  }\n+  \n+  public void testWriteNulls() {\n+    Gson gson = new Gson();\n+    try {\n+      gson.toJson(new JsonPrimitive(\"hello\"), (JsonWriter) null);\n+      fail();\n+    } catch (NullPointerException expected) {\n+    }\n+\n+    StringWriter stringWriter = new StringWriter();\n+    gson.toJson(null, new JsonWriter(stringWriter));\n+    assertEquals(\"\", stringWriter.toString());\n+  }\n+  \n+  public void testReadNulls() {\n+    Gson gson = new Gson();\n+    try {\n+      gson.fromJson((JsonReader) null, Integer.class);\n+      fail();\n+    } catch (NullPointerException expected) {\n+    }\n+    try {\n+      gson.fromJson(new JsonReader(new StringReader(\"true\")), null);\n+      fail();\n+    } catch (IllegalArgumentException expected) {\n+    }\n+  }\n+\n+  public void testWriteHtmlSafe() {\n+    List<String> contents = Arrays.asList(\"<\", \">\", \"&\", \"=\", \"'\");\n+    Type type = new TypeToken<List<String>>() {}.getType();\n+\n+    StringWriter writer = new StringWriter();\n+    new Gson().toJson(contents, type, new JsonWriter(writer));\n+    assertEquals(\"[\\\"\\\\u003c\\\",\\\"\\\\u003e\\\",\\\"\\\\u0026\\\",\\\"\\\\u003d\\\",\\\"\\\\u0027\\\"]\",\n+        writer.toString());\n+\n+    writer = new StringWriter();\n+    new GsonBuilder().disableHtmlEscaping().create()\n+        .toJson(contents, type, new JsonWriter(writer));\n+    assertEquals(\"[\\\"<\\\",\\\">\\\",\\\"&\\\",\\\"=\\\",\\\"'\\\"]\",\n+        writer.toString());\n+  }\n+  \n+  public void testWriteLenient() {\n+    List<Double> doubles = Arrays.asList(Double.NaN, Double.NEGATIVE_INFINITY,\n+        Double.POSITIVE_INFINITY, -0.0d, 0.5d, 0.0d);\n+    Type type = new TypeToken<List<Double>>() {}.getType();\n+\n+    StringWriter writer = new StringWriter();\n+    JsonWriter jsonWriter = new JsonWriter(writer);\n+    new GsonBuilder().serializeSpecialFloatingPointValues().create()\n+        .toJson(doubles, type, jsonWriter);\n+    assertEquals(\"[NaN,-Infinity,Infinity,-0.0,0.5,0.0]\", writer.toString());\n+\n+    try {\n+      new Gson().toJson(doubles, type, new JsonWriter(new StringWriter()));\n+      fail();\n+    } catch (IllegalArgumentException expected) {\n+    }\n+  }\n \n   static final class Car {\n     String name;\n       this.color = color;\n     }\n \n-    Car() {} // for Gson\n+    @SuppressWarnings(\"unused\") // used by Gson\n+    Car() {}\n \n     @Override public int hashCode() {\n       return name.hashCode() ^ color;", "timestamp": 1283498699, "metainfo": ""}