{"sha": "7d1973e6c5e270c0c94eaf6a3e81f4f2c5b2a699", "log": "Fix type hierarchy adapters to do a runtime check.  Otherwise if we have a type hierarchy adapter for Vehicle, and we attempt to decode a JSON string as a Car, we get the right exception if the JSON string is actually decoded as a Truck.", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n \n package com.google.gson.internal.bind;\n \n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonIOException;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.TypeAdapterFactory;\n+import com.google.gson.annotations.SerializedName;\n+import com.google.gson.internal.LazilyParsedNumber;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n+import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.util.Map;\n import java.util.StringTokenizer;\n import java.util.UUID;\n-\n-import com.google.gson.Gson;\n-import com.google.gson.JsonArray;\n-import com.google.gson.JsonElement;\n-import com.google.gson.JsonIOException;\n-import com.google.gson.JsonNull;\n-import com.google.gson.JsonObject;\n-import com.google.gson.JsonPrimitive;\n-import com.google.gson.JsonSyntaxException;\n-import com.google.gson.TypeAdapter;\n-import com.google.gson.TypeAdapterFactory;\n-import com.google.gson.annotations.SerializedName;\n-import com.google.gson.internal.LazilyParsedNumber;\n-import com.google.gson.reflect.TypeToken;\n-import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonToken;\n-import com.google.gson.stream.JsonWriter;\n \n /**\n  * Type adapters for basic types.\n     };\n   }\n \n-  public static <TT> TypeAdapterFactory newTypeHierarchyFactory(\n-      final Class<TT> clazz, final TypeAdapter<TT> typeAdapter) {\n+  /**\n+   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n+   * that the deserialized type matches the type requested.\n+   */\n+  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n+      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n     return new TypeAdapterFactory() {\n       @SuppressWarnings(\"unchecked\")\n-      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n-        return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter<T>) typeAdapter : null;\n+      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n+        final Class<? super T2> requestedType = typeToken.getRawType();\n+        if (!clazz.isAssignableFrom(requestedType)) {\n+          return null;\n+        }\n+        return (TypeAdapter<T2>) new TypeAdapter<T1>() {\n+          @Override public void write(JsonWriter out, T1 value) throws IOException {\n+            typeAdapter.write(out, value);\n+          }\n+\n+          @Override public T1 read(JsonReader in) throws IOException {\n+            T1 result = typeAdapter.read(in);\n+            if (result != null && !requestedType.isInstance(result)) {\n+              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n+                  + \" but was \" + result.getClass().getName());\n+            }\n+            return result;\n+          }\n+        };\n       }\n       @Override public String toString() {\n         return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n  */\n package com.google.gson.functional;\n \n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Type;\n import java.util.TimeZone;\n import java.util.TreeSet;\n import java.util.UUID;\n-\n import junit.framework.TestCase;\n-\n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n-import com.google.gson.JsonArray;\n-import com.google.gson.JsonDeserializationContext;\n-import com.google.gson.JsonDeserializer;\n-import com.google.gson.JsonElement;\n-import com.google.gson.JsonNull;\n-import com.google.gson.JsonObject;\n-import com.google.gson.JsonParseException;\n-import com.google.gson.JsonPrimitive;\n-import com.google.gson.TypeAdapter;\n-import com.google.gson.reflect.TypeToken;\n-import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonWriter;\n \n /**\n  * Functional test for Json serialization and deserialization for common classes for which default\n     Gson gson = new GsonBuilder()\n         .setDateFormat(pattern)\n         .registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {\n-          public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+          public Date deserialize(JsonElement json, Type typeOfT,\n+              JsonDeserializationContext context)\n               throws JsonParseException {\n             return new Date(1315806903103L);\n           }\n     assertEquals(JsonNull.INSTANCE, gson.fromJson(\"null\", JsonNull.class));\n   }\n \n+  public void testJsonElementTypeMismatch() {\n+    try {\n+      gson.fromJson(\"\\\"abc\\\"\", JsonObject.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {\n+      assertEquals(\"Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive\",\n+          expected.getMessage());\n+    }\n+  }\n+\n   private static class ClassWithBigDecimal {\n     BigDecimal value;\n     ClassWithBigDecimal(String value) {", "timestamp": 1445442150, "metainfo": ""}