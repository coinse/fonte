{"sha": "f1e278c4c018c72efeabbde122bdd4c645d12070", "log": "Revised CallPath to handle null or empty paths correctly. Updated ResourceQuery callspec to accept a list in the response body.", "commit": "\n--- a/wsclient/src/main/java/com/google/gson/rest/query/client/ResourceQueryClient.java\n+++ b/wsclient/src/main/java/com/google/gson/rest/query/client/ResourceQueryClient.java\n   }\n \n   private static <T> WebServiceCallSpec generateCallSpec(CallPath callPath) {\n-    return new WebServiceCallSpec.Builder(callPath).supportsHttpMethod(HttpMethod.GET).build();\n+    return new WebServiceCallSpec.Builder(callPath)\n+        .supportsHttpMethod(HttpMethod.GET)\n+        .addResponseBodyParam(TypedKeysQuery.RESOURCE_LIST)\n+        .build();\n   }\n \n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/CallPath.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/CallPath.java\n  */\n public final class CallPath {\n \n-  private static final double IGNORE_VERSION = -1D;\n+  /** Visible for testing only */\n+  static final double IGNORE_VERSION = -1D;\n   private final String path;\n   private final double version;\n   private final long resourceId;\n \n   public CallPath(String path) {\n-    if (path == null) {\n-      this.path = null;\n+    if (path == null || path.trim().equals(\"\")) {\n+      this.path = path;\n       version = IGNORE_VERSION;\n       resourceId = ID.INVALID_ID;\n     } else {\n--- a/wsdef/src/test/java/com/google/gson/webservice/definition/CallPathTest.java\n+++ b/wsdef/src/test/java/com/google/gson/webservice/definition/CallPathTest.java\n  */\n package com.google.gson.webservice.definition;\n \n+import com.google.gson.rest.definition.ID;\n+\n import junit.framework.TestCase;\n \n /**\n     CallPath path = new CallPath(\"/1.0/rest/service1\");\n     assertEquals(\"/rest/service1\", path.get());\n     assertEquals(1D, path.getVersion());\n-    assertEquals(-1L, path.getResourceId());\n+    assertEquals(ID.INVALID_ID, path.getResourceId());\n   }\n \n   public void testVersionNotPresent() {\n     CallPath path = new CallPath(\"/rest/service1\");\n     assertEquals(\"/rest/service1\", path.get());\n-    assertEquals(-1D, path.getVersion());\n-    assertEquals(-1L, path.getResourceId());\n+    assertEquals(CallPath.IGNORE_VERSION, path.getVersion());\n+    assertEquals(ID.INVALID_ID, path.getResourceId());\n   }\n   \n   public void testResourceIdPresent() {\n     assertEquals(\"/rest/service53\", path.get());\n     assertEquals(323222L, path.getResourceId());\n   }\n+\n+  public void testNullPath() {\n+    CallPath path = new CallPath(null);\n+    assertEquals(CallPath.IGNORE_VERSION, path.getVersion());\n+    assertEquals(ID.INVALID_ID, path.getResourceId());\n+    assertNull(path.get());\n+  }\n+\n+  public void testEmptyPath() {\n+    CallPath path = new CallPath(\"\");\n+    assertEquals(CallPath.IGNORE_VERSION, path.getVersion());\n+    assertEquals(ID.INVALID_ID, path.getResourceId());\n+    assertEquals(\"\", path.get());\n+  }\n+\n+  public void testWhiteSpacePath() {\n+    CallPath path = new CallPath(\"\\r\\n\");\n+    assertEquals(CallPath.IGNORE_VERSION, path.getVersion());\n+    assertEquals(ID.INVALID_ID, path.getResourceId());\n+    assertEquals(\"\\r\\n\", path.get());\n+  }\n }", "timestamp": 1289463460, "metainfo": ""}