{"sha": "91be944022883646433237e4c1001747fa0ba955", "log": "Added a new API method nullSafe() in TypeAdapter that can be used to avoid boilerplate handling of nulls in a type adapter.", "commit": "\n--- a/gson/src/main/java/com/google/gson/TypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/TypeAdapter.java\n \n package com.google.gson;\n \n-import com.google.gson.internal.bind.JsonElementWriter;\n-import com.google.gson.internal.bind.JsonTreeReader;\n-import com.google.gson.reflect.TypeToken;\n-import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n import java.io.Reader;\n import java.io.StringReader;\n import java.io.StringWriter;\n import java.io.Writer;\n+\n+import com.google.gson.internal.bind.JsonElementWriter;\n+import com.google.gson.internal.bind.JsonTreeReader;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n+import com.google.gson.stream.JsonWriter;\n \n /**\n  * Converts between Java objects and JSON. Applications use type adapters both\n   }\n \n   /**\n+   * This wrapper method is used to make a type adapter null tolerant. In general, a\n+   * type adapter is required to handle nulls in write and read methods. Here is how this\n+   * is typically done:<br>\n+   * <pre>{@code\n+   Gson gson = new GsonBuilder().registerTypeAdapter(Foo.class,\n+    new TypeAdapter<Foo>() {\n+      public Foo read(JsonReader in) throws IOException {\n+        if (in.peek() == JsonToken.NULL) {\n+          in.nextNull();\n+          return null;\n+        }\n+        // read a Foo from in and return it\n+      }\n+      public void write(JsonWriter out, Foo src) throws IOException {\n+        if (src == null) {\n+          out.nullValue();\n+          return;\n+        }\n+        // write src as JSON to out\n+      }\n+    ).create();\n+   * }</pre>\n+   * You can avoid this boilerplate handling of nulls by wrapping your type adapter with\n+   * {@link #nullSafe(TypeAdapter)} method. Here is how we will rewrite the above example:\n+   * <pre>{@code\n+   Gson gson = new GsonBuilder().registerTypeAdapter(Foo.class,\n+    TypeAdapter.nullSafe(new TypeAdapter<Foo>() {\n+      public Foo read(JsonReader in) throws IOException {\n+        // read a Foo from in and return it\n+      }\n+      public void write(JsonWriter out, Foo src) throws IOException {\n+        // write src as JSON to out\n+      }\n+    )).create();\n+   * }</pre>\n+   * Note that we didn't need to check for nulls in our type adapter after we used nullSafe. \n+   */\n+  public static <T> TypeAdapter<T> nullSafe(final TypeAdapter<T> typeAdapter) {\n+    return new TypeAdapter<T>() {\n+      @Override public void write(JsonWriter out, T value) throws IOException {\n+        if (value == null) {\n+          out.nullValue();\n+        } else {\n+          typeAdapter.write(out, value);\n+        }\n+      }\n+      @Override public T read(JsonReader reader) throws IOException {\n+        if (reader.peek() == JsonToken.NULL) {\n+          reader.nextNull();\n+          return null;\n+        }\n+        return typeAdapter.read(reader);\n+      }\n+    };\n+  }\n+\n+  /**\n    * Converts {@code value} to a JSON document. Unlike Gson's similar {@link\n    * Gson#toJson(Object) toJson} method, this write is strict. Create a {@link\n    * JsonWriter#setLenient(boolean) lenient} {@code JsonWriter} and call\n--- a/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java\n \n package com.google.gson.functional;\n \n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n-import com.google.gson.TypeAdapter;\n-import com.google.gson.reflect.TypeToken;\n-import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+\n import junit.framework.TestCase;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n \n public final class StreamingTypeAdaptersTest extends TestCase {\n   private Gson miniGson = new GsonBuilder().create();\n     double[][] array = arrayAdapter.fromJson(\"[[1.0,2.0],[3.0]]\");\n     double[][] expected = { {1.0, 2.0 }, { 3.0 } };\n     assertTrue(Arrays.toString(array), Arrays.deepEquals(expected, array));\n+  }\n+\n+  public void testNullSafe() {\n+    TypeAdapter<Person> typeAdapter = new TypeAdapter<Person>() {\n+      @Override public Person read(JsonReader in) throws IOException {\n+        String[] values = in.nextString().split(\",\");\n+        return new Person(values[0], Integer.parseInt(values[1]));\n+      }\n+      public void write(JsonWriter out, Person person) throws IOException {\n+        out.value(person.name + \",\" + person.age);\n+      }\n+    };\n+    Gson gson = new GsonBuilder().registerTypeAdapter(\n+        Person.class, typeAdapter).create();\n+    Truck truck = new Truck();\n+    truck.horsePower = 1.0D;\n+    truck.passengers = new ArrayList<Person>();\n+    truck.passengers.add(null);\n+    try {\n+      gson.toJson(truck, Truck.class);\n+      fail();\n+    } catch (NullPointerException expected) {}\n+    String json = \"{horsePower:1.0,passengers:[null,null]}\";\n+    try {\n+      gson.fromJson(json, Truck.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {}\n+    gson = new GsonBuilder().registerTypeAdapter(\n+        Person.class, TypeAdapter.nullSafe(typeAdapter)).create();\n+    assertEquals(\"{\\\"horsePower\\\":1.0,\\\"passengers\\\":[null]}\", gson.toJson(truck, Truck.class));\n+    truck = gson.fromJson(json, Truck.class);\n+    assertEquals(1.0D, truck.horsePower);\n+    assertNull(truck.passengers.get(0));\n   }\n \n   public void testSerializeRecursive() throws IOException {", "timestamp": 1323114649, "metainfo": ""}