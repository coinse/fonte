{"sha": "af6aa5f782dcfc38a060d2de9476337e14ffedcb", "log": "Use the LinkedHashTreeMap instead of LinkedTreeMap and delete the LinkedTreeMap version.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonObject.java\n+++ b/gson/src/main/java/com/google/gson/JsonObject.java\n \n package com.google.gson;\n \n-import com.google.gson.internal.LinkedTreeMap;\n+import com.google.gson.internal.LinkedHashTreeMap;\n \n import java.util.Map;\n import java.util.Set;\n  * @author Joel Leitch\n  */\n public final class JsonObject extends JsonElement {\n-  private final LinkedTreeMap<String, JsonElement> members =\n-      new LinkedTreeMap<String, JsonElement>();\n+  private final LinkedHashTreeMap<String, JsonElement> members =\n+      new LinkedHashTreeMap<String, JsonElement>();\n \n   @Override\n   JsonObject deepCopy() {\n--- a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java\n+++ b/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java\n       } else {\n         return new ObjectConstructor<T>() {\n           public T construct() {\n-            return (T) new LinkedTreeMap<String, Object>();\n+            return (T) new LinkedHashTreeMap<String, Object>();\n           }\n         };\n       }\n--- a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java\n import com.google.gson.Gson;\n import com.google.gson.TypeAdapter;\n import com.google.gson.TypeAdapterFactory;\n-import com.google.gson.internal.LinkedTreeMap;\n+import com.google.gson.internal.LinkedHashTreeMap;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n       return list;\n \n     case BEGIN_OBJECT:\n-      Map<String, Object> map = new LinkedTreeMap<String, Object>();\n+      Map<String, Object> map = new LinkedHashTreeMap<String, Object>();\n       in.beginObject();\n       while (in.hasNext()) {\n         map.put(in.nextName(), read(in));\n--- a/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java\n+++ b/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java\n \n package com.google.gson.internal;\n \n+import com.google.gson.common.MoreAsserts;\n import com.google.gson.internal.LinkedHashTreeMap.AvlBuilder;\n import com.google.gson.internal.LinkedHashTreeMap.AvlIterator;\n import com.google.gson.internal.LinkedHashTreeMap.Node;\n+import junit.framework.TestCase;\n+\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Iterator;\n import java.util.Map;\n-import junit.framework.TestCase;\n \n public final class LinkedHashTreeMapTest extends TestCase {\n   public void testIterationOrder() {\n     map.clear();\n     assertIterationOrder(map.keySet());\n     assertEquals(0, map.size());\n+  }\n+\n+  public void testEqualsAndHashCode() throws Exception {\n+    LinkedHashTreeMap<String, Integer> map1 = new LinkedHashTreeMap<String, Integer>();\n+    map1.put(\"A\", 1);\n+    map1.put(\"B\", 2);\n+    map1.put(\"C\", 3);\n+    map1.put(\"D\", 4);\n+\n+    LinkedHashTreeMap<String, Integer> map2 = new LinkedHashTreeMap<String, Integer>();\n+    map2.put(\"C\", 3);\n+    map2.put(\"B\", 2);\n+    map2.put(\"D\", 4);\n+    map2.put(\"A\", 1);\n+\n+    MoreAsserts.assertEqualsAndHashCode(map1, map2);\n   }\n \n   public void testAvlWalker() {", "timestamp": 1365111083, "metainfo": ""}