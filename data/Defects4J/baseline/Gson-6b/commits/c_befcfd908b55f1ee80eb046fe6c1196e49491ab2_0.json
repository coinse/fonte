{"sha": "befcfd908b55f1ee80eb046fe6c1196e49491ab2", "log": "Skip a byte order mark (BOM) if it exists. http://code.google.com/p/android/issues/detail?id=18508", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n   private int limit = 0;\n \n   /*\n-   * Track the number of newlines and columns preceding the current buffer. To\n-   * compute the line and column of a position in the buffer, compute the line\n-   * and column in the buffer and add the preceding values.\n-   */\n-  private int bufferStartLine;\n-  private int bufferStartColumn;\n+   * The offset of the first character in the buffer.\n+   */\n+  private int bufferStartLine = 1;\n+  private int bufferStartColumn = 1;\n \n   private final List<JsonScope> stack = new ArrayList<JsonScope>();\n   {\n     for (int i = 0; i < pos; i++) {\n       if (buffer[i] == '\\n') {\n         bufferStartLine++;\n-        bufferStartColumn = 0;\n+        bufferStartColumn = 1;\n       } else {\n         bufferStartColumn++;\n       }\n     int total;\n     while ((total = in.read(buffer, limit, buffer.length - limit)) != -1) {\n       limit += total;\n+\n+      // if this is the first read, consume an optional byte order mark (BOM) if it exists\n+      if (bufferStartLine == 1 && bufferStartColumn == 1 && limit > 1 && buffer[0] == '\\ufeff') {\n+        pos++;\n+        bufferStartColumn--;\n+      }\n+\n       if (limit >= minimum) {\n         return true;\n       }\n         result++;\n       }\n     }\n-    return result + 1; // the first line is '1'\n+    return result;\n   }\n \n   private int getColumnNumber() {\n     int result = bufferStartColumn;\n     for (int i = 0; i < pos; i++) {\n       if (buffer[i] == '\\n') {\n-        result = 0;\n+        result = 1;\n       } else {\n         result++;\n       }\n     }\n-    return result + 1; // the first column is '1'\n+    return result;\n   }\n \n   private int nextNonWhitespace() throws IOException {\n    * with this reader's content.\n    */\n   private IOException syntaxError(String message) throws IOException {\n-    throw new MalformedJsonException(message + \" @\" + getLineNumber() + \":\" + getColumnNumber());\n+    throw new MalformedJsonException(message\n+        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n   }\n \n   private CharSequence getSnippet() {\n--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n     }\n   }\n \n+  public void testBomIgnoredAsFirstCharacterOfDocument() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"\\ufeff[]\"));\n+    reader.beginArray();\n+    reader.endArray();\n+  }\n+\n+  public void testBomForbiddenAsOtherCharacterInDocument() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"[\\ufeff]\"));\n+    reader.beginArray();\n+    try {\n+      reader.endArray();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+  }\n+\n   public void testFailWithPosition() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[\\n\\n\\n\\n\\n0,}]\"));\n-    reader.beginArray();\n-    reader.nextInt();\n-    try {\n-      reader.peek();\n-      fail();\n-    } catch (IOException expected) {\n-      assertEquals(\"Expected literal value @6:3\", expected.getMessage());\n-    }\n+    testFailWithPosition(\"Expected literal value at line 6 column 3\",\n+        \"[\\n\\n\\n\\n\\n0,}]\");\n   }\n \n   public void testFailWithPositionGreaterThanBufferSize() throws IOException {\n     String spaces = repeat(' ', 8192);\n-    JsonReader reader = new JsonReader(new StringReader(\"[\\n\\n\" + spaces + \"\\n\\n\\n0,}]\"));\n+    testFailWithPosition(\"Expected literal value at line 6 column 3\",\n+        \"[\\n\\n\" + spaces + \"\\n\\n\\n0,}]\");\n+  }\n+\n+  public void testFailWithPositionIsOffsetByBom() throws IOException {\n+    testFailWithPosition(\"Expected literal value at line 1 column 4\",\n+        \"\\ufeff[0,}]\");\n+  }\n+\n+  private void testFailWithPosition(String message, String json) throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(json));\n     reader.beginArray();\n     reader.nextInt();\n     try {\n       reader.peek();\n       fail();\n     } catch (IOException expected) {\n-      assertEquals(\"Expected literal value @6:3\", expected.getMessage());\n+      assertEquals(message, expected.getMessage());\n     }\n   }\n ", "timestamp": 1311188250, "metainfo": ""}