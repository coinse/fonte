{"sha": "6dbdb272c0950d1bd17c3e3b5e38b385d1373eb2", "log": "Added checks to ensure that we do not serialize NaN or postiive or negative infinity for floats.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n   private static class FloatTypeAdapter\n       implements InstanceCreator<Float>, JsonSerializer<Float>, JsonDeserializer<Float> {\n     public JsonElement serialize(Float src, Type typeOfSrc, JsonSerializationContext context) {\n+      if (Float.isNaN(src) || Float.isInfinite(src)) {\n+        throw new IllegalArgumentException(src + \" is not a valid double value as per JavaScript specification.\");\n+      }\n       return new JsonPrimitive(src);\n     }\n \n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n     return json.substring(json.indexOf('[') + 1, json.indexOf(']'));\n   }\n   \n-  public void testNaNSerializationNotSupported() {\n+  public void testDoubleNaNSerializationNotSupported() {\n     try {\n       double d = Double.NaN;\n       gson.toJson(d);\n+      Double dw = Double.NaN;\n+      gson.toJson(dw);\n       fail(\"Gson should not accept NaN for serialization\");\n     } catch (IllegalArgumentException expected) {      \n     }\n   }\n   \n-  public void testNaNDeserializationNotSupported() {\n+  public void testDoubleNaNDeserializationNotSupported() {\n     try {\n       String json = \"NaN\";\n       assertEquals(Double.NaN, gson.fromJson(json, Double.class));\n-    } catch (JsonParseException expected) {      \n-    }\n-   }\n-\n-  public void testInfinitySerializationNotSupported() {\n+      assertEquals(Double.NaN, gson.fromJson(json, double.class));\n+      fail(\"Gson should not accept NaN for deserialization\");\n+    } catch (JsonParseException expected) {      \n+    }\n+  }\n+\n+  public void testFloatNaNSerializationNotSupported() {\n+    try {\n+      float f = Float.NaN;\n+      gson.toJson(f);\n+      Float fw = Float.NaN;\n+      gson.toJson(fw);\n+      fail(\"Gson should not accept NaN for serialization\");\n+    } catch (IllegalArgumentException expected) {      \n+    }\n+  }\n+  \n+  public void testFloatNaNDeserializationNotSupported() {\n+    try {\n+      String json = \"NaN\";\n+      assertEquals(Float.NaN, gson.fromJson(json, Float.class));\n+      assertEquals(Float.NaN, gson.fromJson(json, float.class));\n+      fail(\"Gson should not accept NaN for deserialization\");\n+    } catch (JsonParseException expected) {      \n+    }\n+  }\n+\n+  public void testDoubleInfinitySerializationNotSupported() {\n     try {\n       double d = Double.POSITIVE_INFINITY;\n       gson.toJson(d);\n-      fail(\"Gson should not accept positive infinity for serialization\");\n-    } catch (IllegalArgumentException expected) {      \n-    }\n-  }\n-  \n-  public void testInfinityDeserializationNotSupported() {\n+      Double dw = Double.POSITIVE_INFINITY;\n+      gson.toJson(dw);\n+      fail(\"Gson should not accept positive infinity for serialization\");\n+    } catch (IllegalArgumentException expected) {      \n+    }\n+  }\n+  \n+  public void testDoubleInfinityDeserializationNotSupported() {\n     try {\n       String json = \"Infinity\";\n       assertEquals(Double.POSITIVE_INFINITY, gson.fromJson(json, Double.class));\n-    } catch (JsonParseException expected) {      \n-    }\n- }\n+      assertEquals(Double.POSITIVE_INFINITY, gson.fromJson(json, double.class));\n+      fail(\"Gson should not accept positive infinity for deserialization\");\n+    } catch (JsonParseException expected) {      \n+    }\n+  }\n+  \n+  public void testFloatInfinitySerializationNotSupported() {\n+    try {\n+      float f = Float.POSITIVE_INFINITY;\n+      gson.toJson(f);\n+      Float fw = Float.POSITIVE_INFINITY;\n+      gson.toJson(fw);\n+      fail(\"Gson should not accept positive infinity for serialization\");\n+    } catch (IllegalArgumentException expected) {      \n+    }\n+  }\n+  \n+  public void testFloatInfinityDeserializationNotSupported() {\n+    try {\n+      String json = \"Infinity\";\n+      assertEquals(Float.POSITIVE_INFINITY, gson.fromJson(json, Float.class));\n+      assertEquals(Float.POSITIVE_INFINITY, gson.fromJson(json, float.class));\n+      fail(\"Gson should not accept positive infinity for deserialization\");\n+    } catch (JsonParseException expected) {      \n+    }\n+  }\n   \n   public void testNegativeInfinitySerializationNotSupported() {\n     try {\n       double d = Double.NEGATIVE_INFINITY;\n       gson.toJson(d);\n+      Double dw = Double.NEGATIVE_INFINITY;\n+      gson.toJson(dw);\n       fail(\"Gson should not accept positive infinity for serialization\");\n     } catch (IllegalArgumentException expected) {      \n     }\n   public void testNegativeInfinityDeserializationNotSupported() {\n     try {\n       String json = \"-Infinity\";\n+      assertEquals(Double.NEGATIVE_INFINITY, gson.fromJson(json, double.class));\n       assertEquals(Double.NEGATIVE_INFINITY, gson.fromJson(json, Double.class));\n+      fail(\"Gson should not accept positive infinity for serialization\");\n+    } catch (JsonParseException expected) {      \n+    }\n+  }\n+  \n+  public void testNegativeInfinityFloatSerializationNotSupported() {\n+    try {\n+      float f = Float.NEGATIVE_INFINITY;\n+      gson.toJson(f);\n+      Float fw = Float.NEGATIVE_INFINITY;\n+      gson.toJson(fw);\n+      fail(\"Gson should not accept positive infinity for serialization\");\n+    } catch (IllegalArgumentException expected) {      \n+    }\n+  }\n+  \n+  public void testNegativeInfinityFloatDeserializationNotSupported() {\n+    try {\n+      String json = \"-Infinity\";\n+      assertEquals(Float.NEGATIVE_INFINITY, gson.fromJson(json, float.class));\n+      assertEquals(Float.NEGATIVE_INFINITY, gson.fromJson(json, Float.class));\n+      fail(\"Gson should not accept positive infinity for serialization\");\n     } catch (JsonParseException expected) {      \n     }\n   }", "timestamp": 1229643704, "metainfo": ""}