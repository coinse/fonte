{"sha": "6b2c275b5caa122bc25797cc71d154a598431a16", "log": "Deleted Long, Float and Double serializers from legacy DefaultTypeAdapters. This stuff is not invoked anymore as the MiniGson takes care of it.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n   }\n \n   static ParameterizedTypeHandlerMap<JsonSerializer<?>> getDefaultSerializers() {\n-    return getDefaultSerializers(false, LongSerializationPolicy.DEFAULT);\n+    return DEFAULT_SERIALIZERS.copyOf();\n   }\n \n   static ParameterizedTypeHandlerMap<JsonSerializer<?>> getAllDefaultSerializers() {\n     ParameterizedTypeHandlerMap<JsonSerializer<?>> defaultSerializers =\n-      getDefaultSerializers(false, LongSerializationPolicy.DEFAULT);\n+      DEFAULT_SERIALIZERS.copyOf();\n     defaultSerializers.register(DEFAULT_HIERARCHY_SERIALIZERS);\n     return defaultSerializers;\n   }\n       getDefaultDeserializers().copyOf();\n     defaultDeserializers.register(DEFAULT_HIERARCHY_DESERIALIZERS);\n     return defaultDeserializers;\n-  }\n-\n-  static ParameterizedTypeHandlerMap<JsonSerializer<?>> getDefaultSerializers(\n-      boolean serializeSpecialFloatingPointValues, LongSerializationPolicy longSerializationPolicy) {\n-    ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers =\n-        new ParameterizedTypeHandlerMap<JsonSerializer<?>>();\n-\n-    // Double primitive\n-    DefaultTypeAdapters.DoubleSerializer doubleSerializer =\n-        new DefaultTypeAdapters.DoubleSerializer(serializeSpecialFloatingPointValues);\n-    serializers.registerIfAbsent(Double.class, doubleSerializer);\n-    serializers.registerIfAbsent(double.class, doubleSerializer);\n-\n-    // Float primitive\n-    DefaultTypeAdapters.FloatSerializer floatSerializer =\n-        new DefaultTypeAdapters.FloatSerializer(serializeSpecialFloatingPointValues);\n-    serializers.registerIfAbsent(Float.class, floatSerializer);\n-    serializers.registerIfAbsent(float.class, floatSerializer);\n-\n-    // Long primitive\n-    DefaultTypeAdapters.LongSerializer longSerializer =\n-        new DefaultTypeAdapters.LongSerializer(longSerializationPolicy);\n-    serializers.registerIfAbsent(Long.class, longSerializer);\n-    serializers.registerIfAbsent(long.class, longSerializer);\n-\n-    serializers.registerIfAbsent(DEFAULT_SERIALIZERS);\n-    return serializers;\n   }\n \n   static ParameterizedTypeHandlerMap<JsonDeserializer<?>> getDefaultDeserializers() {\n     }\n   }\n \n-  private static final class LongSerializer implements JsonSerializer<Long> {\n-    private final LongSerializationPolicy longSerializationPolicy;\n-\n-    private LongSerializer(LongSerializationPolicy longSerializationPolicy) {\n-      this.longSerializationPolicy = longSerializationPolicy;\n-    }\n-\n-    public JsonElement serialize(Long src, Type typeOfSrc, JsonSerializationContext context) {\n-      return longSerializationPolicy.serialize(src);\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return LongSerializer.class.getSimpleName();\n-    }\n-  }\n-\n-  static final class FloatSerializer implements JsonSerializer<Float> {\n-    private final boolean serializeSpecialFloatingPointValues;\n-\n-    FloatSerializer(boolean serializeSpecialDoubleValues) {\n-      this.serializeSpecialFloatingPointValues = serializeSpecialDoubleValues;\n-    }\n-\n-    public JsonElement serialize(Float src, Type typeOfSrc, JsonSerializationContext context) {\n-      if (!serializeSpecialFloatingPointValues) {\n-        if (Float.isNaN(src) || Float.isInfinite(src)) {\n-          throw new IllegalArgumentException(src\n-              + \" is not a valid float value as per JSON specification. To override this\"\n-              + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\");\n-        }\n-      }\n-      return new JsonPrimitive(src);\n-    }\n-  }\n-\n-  static final class DoubleSerializer implements JsonSerializer<Double> {\n-    private final boolean serializeSpecialFloatingPointValues;\n-\n-    DoubleSerializer(boolean serializeSpecialDoubleValues) {\n-      this.serializeSpecialFloatingPointValues = serializeSpecialDoubleValues;\n-    }\n-\n-    public JsonElement serialize(Double src, Type typeOfSrc, JsonSerializationContext context) {\n-      if (!serializeSpecialFloatingPointValues) {\n-        if (Double.isNaN(src) || Double.isInfinite(src)) {\n-          throw new IllegalArgumentException(src\n-              + \" is not a valid double value as per JSON specification. To override this\"\n-              + \" behavior, use GsonBuilder.serializeSpecialDoubleValues() method.\");\n-        }\n-      }\n-      return new JsonPrimitive(src);\n-    }\n-  }\n-\n   private static final class CharacterTypeAdapter\n       implements JsonSerializer<Character>, JsonDeserializer<Character> {\n     public JsonElement serialize(Character src, Type typeOfSrc, JsonSerializationContext context) {\n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n  * @author Joel Leitch\n  */\n public class PrimitiveTest extends TestCase {\n-  private static final BigInteger MAX_INT_VALUE = new BigInteger(\"2147483647\");\n-  private static final BigInteger MAX_LONG_VALUE = new BigInteger(\"9223372036854775807\");\n-\n   private Gson gson;\n \n   @Override", "timestamp": 1316145993, "metainfo": ""}