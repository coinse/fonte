{"sha": "973696cbf5d261d313b17930a5e2e19378c085c5", "log": "Tests exposing bug 43 and 44.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n     ClassWithCustomTypeConverter target = gson.fromJson(json, ClassWithCustomTypeConverter.class);\n     assertEquals(5, target.getBag().getIntValue());\n   }\n+  \n+  public void testCustomSerializersOfSelf() {\n+    Gson gson = createGsonObjectWithFooTypeAdapter();\n+    Gson basicGson = new Gson();\n+    Foo newFooObject = new Foo(1, 2L);\n+    String jsonFromCustomSerializer = gson.toJson(newFooObject);\n+    String jsonFromGson = basicGson.toJson(newFooObject);\n+    \n+    assertEquals(jsonFromGson, jsonFromCustomSerializer);\n+  }\n+\n+  public void testCustomDeserializersOfSelf() {\n+    Gson gson = createGsonObjectWithFooTypeAdapter();\n+    Gson basicGson = new Gson();\n+    Foo expectedFoo = new Foo(1, 2L);\n+    String json = basicGson.toJson(expectedFoo);\n+    Foo newFooObject = gson.fromJson(json, Foo.class);\n+    \n+    assertEquals(expectedFoo.key, newFooObject.key);\n+    assertEquals(expectedFoo.value, newFooObject.value);\n+  }\n \n   public void testCustomNestedSerializers() {\n     Gson gson = new GsonBuilder().registerTypeAdapter(\n     ClassWithCustomTypeConverter target = gson.fromJson(json, ClassWithCustomTypeConverter.class);\n     assertEquals(7, target.getBag().getIntValue());\n   }\n+  \n+  private Gson createGsonObjectWithFooTypeAdapter() {\n+    return new GsonBuilder().registerTypeAdapter(Foo.class, new FooTypeAdapter()).create();\n+  }\n+  \n+  public static class Foo {\n+    private final int key;\n+    private final long value;\n+    \n+    public Foo() {\n+      this(0, 0L);\n+    }\n+\n+    public Foo(int key, long value) {\n+      this.key = key;\n+      this.value = value;\n+    }\n+  }\n+  \n+  public static class FooTypeAdapter implements JsonSerializer<Foo>, JsonDeserializer<Foo> {\n+    public Foo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+        throws JsonParseException {\n+      return context.deserialize(json, typeOfT);\n+    }\n+\n+    public JsonElement serialize(Foo src, Type typeOfSrc, JsonSerializationContext context) {\n+      return context.serialize(src, typeOfSrc);\n+    }\n+  }\n }", "timestamp": 1221587623, "metainfo": ""}