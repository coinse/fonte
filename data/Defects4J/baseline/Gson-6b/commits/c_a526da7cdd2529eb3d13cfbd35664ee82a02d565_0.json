{"sha": "a526da7cdd2529eb3d13cfbd35664ee82a02d565", "log": "Tests that demonstrate that type variables work.  Fixes issue 168.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java\n \n import com.google.gson.Gson;\n \n+import com.google.gson.reflect.TypeToken;\n+import java.lang.reflect.Type;\n+import java.util.Arrays;\n import junit.framework.TestCase;\n \n import java.util.ArrayList;\n  */\n public class TypeVariableTest extends TestCase {\n \n-  public void disabled_testAdvancedTypeVariables() throws Exception {\n+  public void testAdvancedTypeVariables() throws Exception {\n     Gson gson = new Gson();\n     Bar bar1 = new Bar(\"someString\", 1, true);\n     ArrayList<Integer> arrayList = new ArrayList<Integer>();\n \n     Bar bar2 = gson.fromJson(json, Bar.class);\n     assertEquals(bar1, bar2);\n+  }\n+\n+  public void testTypeVariablesViaTypeParameter() throws Exception {\n+    Gson gson = new Gson();\n+    Foo<String, Integer> original = new Foo<String, Integer>(\"e\", 5, false);\n+    original.map.put(\"f\", Arrays.asList(6, 7));\n+    Type type = new TypeToken<Foo<String, Integer>>() {}.getType();\n+    String json = gson.toJson(original, type);\n+    assertEquals(\"{\\\"someSField\\\":\\\"e\\\",\\\"someTField\\\":5,\\\"map\\\":{\\\"f\\\":[6,7]},\\\"redField\\\":false}\",\n+        json);\n+    assertEquals(original, gson.<Foo<String, Integer>>fromJson(json, type));\n   }\n \n   public void testBasicTypeVariables() throws Exception {\n   }\n \n   public static class Red<S> {\n-    protected final S redField;\n+    protected S redField;\n+\n+    public Red() {}\n \n     public Red(S redField) {\n       this.redField = redField;\n   }\n \n   public static class Foo<S, T> extends Red<Boolean> {\n-    private final S someSField;\n-    private final T someTField;\n+    private S someSField;\n+    private T someTField;\n     public final Map<S, List<T>> map = new HashMap<S, List<T>>();\n+\n+    public Foo() {}\n \n     public Foo(S sValue, T tValue, Boolean redField) {\n       super(redField);", "timestamp": 1295475850, "metainfo": ""}