{"sha": "e96b241556feb92977f7ca274ef59204258227a6", "log": "Test that we can serialize classes whose fields are concrete collections.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n import com.google.gson.common.MoreAsserts;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n import com.google.gson.reflect.TypeToken;\n-\n-import junit.framework.TestCase;\n-\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Queue;\n import java.util.Set;\n+import junit.framework.TestCase;\n \n /**\n  * Functional tests for Json serialization and deserialization of collections.\n       MoreAsserts.assertEquals(expected[i], toIntArray(target.get(i)));\n     }\n   }\n-  \n+\n   public void testLinkedListSerialization() {\n     List<String> list = new LinkedList<String>();\n     list.add(\"a1\");\n     String json = \"['a1','a2']\";\n     Type queueType = new TypeToken<Queue<String>>() {}.getType();\n     Queue<String> queue = gson.fromJson(json, queueType);\n-    assertEquals(\"a1\", queue.element()); \n+    assertEquals(\"a1\", queue.element());\n     queue.remove();\n     assertEquals(\"a2\", queue.element());\n   }\n     target.add(\"Hello\");\n     target.add(\"World\");\n     assertEquals(\"[\\\"Hello\\\",\\\"World\\\"]\", gson.toJson(target));\n-    \n+\n     Type type = new TypeToken<List<Object>>() {}.getType();\n     assertEquals(\"[\\\"Hello\\\",\\\"World\\\"]\", gson.toJson(target, type));\n   }\n-  \n+\n   public void testCollectionOfObjectWithNullSerialization() {\n     List<Object> target = new ArrayList<Object>();\n     target.add(\"Hello\");\n     target.add(null);\n     target.add(\"World\");\n     assertEquals(\"[\\\"Hello\\\",null,\\\"World\\\"]\", gson.toJson(target));\n-    \n+\n     Type type = new TypeToken<List<Object>>() {}.getType();\n     assertEquals(\"[\\\"Hello\\\",null,\\\"World\\\"]\", gson.toJson(target, type));\n   }\n     } catch (JsonParseException expected) {\n     }\n   }\n-  \n+\n   public void testWildcardPrimitiveCollectionSerilaization() throws Exception {\n     Collection<? extends Integer> target = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\n     Type collectionType = new TypeToken<Collection<? extends Integer>>() { }.getType();\n     String json = gson.toJson(target, collectionType);\n     assertEquals(\"[1,2,3,4,5,6,7,8,9]\", json);\n-    \n+\n     json = gson.toJson(target);\n     assertEquals(\"[1,2,3,4,5,6,7,8,9]\", json);\n   }\n-  \n+\n   public void testWildcardPrimitiveCollectionDeserilaization() throws Exception {\n     String json = \"[1,2,3,4,5,6,7,8,9]\";\n     Type collectionType = new TypeToken<Collection<? extends Integer>>() { }.getType();\n     assertTrue(target.contains(1));\n     assertTrue(target.contains(9));\n   }\n-  \n+\n   public void testWildcardCollectionField() throws Exception {\n     Collection<BagOfPrimitives> collection = new ArrayList<BagOfPrimitives>();\n     BagOfPrimitives objA = new BagOfPrimitives(3L, 1, true, \"blah\");\n     BagOfPrimitives objB = new BagOfPrimitives(2L, 6, false, \"blahB\");\n     collection.add(objA);\n     collection.add(objB);\n-    \n+\n     ObjectWithWildcardCollection target = new ObjectWithWildcardCollection(collection);\n     String json = gson.toJson(target);\n     assertTrue(json.contains(objA.getExpectedJson()));\n     assertTrue(json.contains(objB.getExpectedJson()));\n-    \n+\n     target = gson.fromJson(json, ObjectWithWildcardCollection.class);\n     Collection<? extends BagOfPrimitives> deserializedCollection = target.getCollection();\n     assertEquals(2, deserializedCollection.size());\n     assertTrue(deserializedCollection.contains(objA));\n     assertTrue(deserializedCollection.contains(objB));\n+  }\n+\n+  public void testFieldIsArrayList() {\n+    HasArrayListField object = new HasArrayListField();\n+    object.longs.add(1L);\n+    object.longs.add(3L);\n+    String json = gson.toJson(object, HasArrayListField.class);\n+    assertEquals(\"{\\\"longs\\\":[1,3]}\", json);\n+    HasArrayListField copy = gson.fromJson(\"{\\\"longs\\\":[1,3]}\", HasArrayListField.class);\n+    assertEquals(Arrays.asList(1L, 3L), copy.longs);\n+  }\n+\n+  static class HasArrayListField {\n+    ArrayList<Long> longs = new ArrayList<Long>();\n   }\n \n   @SuppressWarnings(\"unchecked\")\n     public ObjectWithWildcardCollection() {\n       this(Collections.EMPTY_LIST);\n     }\n-    \n+\n     public ObjectWithWildcardCollection(Collection<? extends BagOfPrimitives> collection) {\n       this.collection = collection;\n     }\n-    \n+\n     public Collection<? extends BagOfPrimitives> getCollection() {\n       return collection;\n     }\n   }\n-  \n+\n   private static class Entry {\n     int value;\n     // For use by Gson\n     }\n   }\n   public void testSetSerialization() {\n-    Set<Entry> set = new HashSet<Entry>(); \n+    Set<Entry> set = new HashSet<Entry>();\n     set.add(new Entry(1));\n-    set.add(new Entry(2));    \n+    set.add(new Entry(2));\n     String json = gson.toJson(set);\n     assertTrue(json.contains(\"1\"));\n     assertTrue(json.contains(\"2\"));\n   }\n   public void testSetDeserialization() {\n     String json = \"[{value:1},{value:2}]\";\n-    Type type = new TypeToken<Set<Entry>>() {}.getType();        \n+    Type type = new TypeToken<Set<Entry>>() {}.getType();\n     Set<Entry> set = gson.fromJson(json, type);\n     assertEquals(2, set.size());\n     for (Entry entry : set) {", "timestamp": 1300744178, "metainfo": ""}