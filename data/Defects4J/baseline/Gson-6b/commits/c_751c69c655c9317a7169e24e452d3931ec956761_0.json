{"sha": "751c69c655c9317a7169e24e452d3931ec956761", "log": "Support null values in StringMap", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/StringMap.java\n+++ b/gson/src/main/java/com/google/gson/internal/StringMap.java\n \n /**\n  * A map of strings to values. Like LinkedHashMap, this map's iteration order is\n- * well defined: it is the order that elements were inserted into the map.\n+ * well defined: it is the order that elements were inserted into the map. This\n+ * map does not support null keys.\n  * \n  * <p>This implementation was derived from Android 4.0's LinkedHashMap.\n  */\n   }\n \n   @Override public boolean containsKey(Object key) {\n-    return get(key) != null;\n+    return getEntry(key) != null;\n   }\n \n   @Override public V get(Object key) {\n+    LinkedEntry<K, V> entry = getEntry(key);\n+    return entry != null ? entry.value : null;\n+  }\n+\n+  private LinkedEntry<K, V> getEntry(Object key) {\n     if (key == null) {\n       return null;\n     }\n \n-    // Doug Lea's supplemental secondaryHash function (inlined)\n-    int hash = key.hashCode();\n-    hash ^= (hash >>> 20) ^ (hash >>> 12);\n-    hash ^= (hash >>> 7) ^ (hash >>> 4);\n-\n+    int hash = secondaryHash(key.hashCode());\n     LinkedEntry<K, V>[] tab = table;\n     for (LinkedEntry<K, V> e = tab[hash & (tab.length - 1)]; e != null; e = e.next) {\n       K eKey = e.key;\n       if (eKey == key || (e.hash == hash && key.equals(eKey))) {\n-        return e.value;\n+        return e;\n       }\n     }\n     return null;\n   }\n \n   @Override public V put(K key, V value) {\n-    if (key == null || value == null) {\n-      throw new IllegalArgumentException();\n+    if (key == null) {\n+      throw new NullPointerException(\"key == null\");\n     }\n \n     int hash = secondaryHash(key.hashCode());\n     }\n \n     public final V setValue(V value) {\n-      if (value == null) {\n-        throw new IllegalArgumentException();\n-      }\n       V oldValue = this.value;\n       this.value = value;\n       return oldValue;\n         return false;\n       }\n       Entry<?, ?> e = (Entry<?, ?>) o;\n-      return key.equals(e.getKey()) && value.equals(e.getValue());\n+      Object eValue = e.getValue();\n+      return key.equals(e.getKey())\n+          && (value == null ? eValue == null : value.equals(eValue));\n     }\n \n     @Override public final int hashCode() {\n    * exists; otherwise, returns does nothing and returns false.\n    */\n   private boolean removeMapping(Object key, Object value) {\n-    if (key == null || value == null) {\n+    if (key == null) {\n       return false;\n     }\n \n     int index = hash & (tab.length - 1);\n     for (LinkedEntry<K, V> e = tab[index], prev = null; e != null; prev = e, e = e.next) {\n       if (e.hash == hash && key.equals(e.key)) {\n-        if (!value.equals(e.value)) {\n+        if (value == null ? e.value != null : !value.equals(e.value)) {\n           return false;  // Map has wrong value for key\n         }\n         if (prev == null) {\n--- a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java\n       return list;\n \n     case BEGIN_OBJECT:\n+      // TODO: string map doesn't support null values\n       Map<String, Object> map = new StringMap<String, Object>();\n       in.beginObject();\n       while (in.hasNext()) {\n--- a/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java\n \n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.LinkedHashMap;\n import java.util.Map;\n import junit.framework.TestCase;\n \n     Object object = new RuntimeType();\n     assertEquals(\"{'a':5,'b':[1,2,null]}\", adapter.toJson(object).replace(\"\\\"\", \"'\"));\n   }\n+  \n+  public void testSerializeNullValue() throws Exception {\n+    Map<String, Object> map = new LinkedHashMap<String, Object>();\n+    map.put(\"a\", null);\n+    assertEquals(\"{'a':null}\", adapter.toJson(map).replace('\"', '\\''));\n+  }\n+\n+  public void testDeserializeNullValue() throws Exception {\n+    Map<String, Object> map = new LinkedHashMap<String, Object>();\n+    map.put(\"a\", null);\n+    assertEquals(map, adapter.fromJson(\"{\\\"a\\\":null}\"));\n+  }\n \n   public void testSerializeObject() throws Exception {\n     assertEquals(\"{}\", adapter.toJson(new Object()));", "timestamp": 1331479141, "metainfo": ""}