{"sha": "399d49c0e83987252f22a18c5ee8629095c9ae57", "log": "Revised RestClient to provide easy access to RestMethods. Updated Order and Cart to be rest resources. Added a Queryable interface that can be used to indicate that a Rest Resource supports querying. Added getValueAsString() method to Id. Removed spurious warnings.", "commit": "\n--- a/wsclient/src/main/java/com/google/gson/rest/client/RestClient.java\n+++ b/wsclient/src/main/java/com/google/gson/rest/client/RestClient.java\n /*\n- * Copyright (C) 2008 Google Inc.\n+ * Copyright (C) 2010 Google Inc.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  */\n package com.google.gson.rest.client;\n \n-import java.io.IOException;\n-import java.net.HttpURLConnection;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-\n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n import com.google.gson.rest.definition.ID;\n import com.google.gson.rest.definition.RestCallSpec;\n import com.google.gson.rest.definition.RestRequest;\n import com.google.gson.rest.definition.RestResource;\n import com.google.gson.rest.definition.RestResponse;\n-import com.google.gson.webservice.definition.WebServiceSystemException;\n+import com.google.gson.webservice.definition.CallPath;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HttpMethod;\n+\n+import java.lang.reflect.Type;\n \n /**\n- * Main class used by clients to access a Gson Web service.\n- * \n- * @author inder\n+ * A client class to access a rest resource\n+ *\n+ * @author Inderjeet Singh\n  */\n-public class RestClient {\n-  private final RestServerConfig config;\n-  private final Logger logger;\n-  private final Level logLevel;\n+public class RestClient<I extends ID, R extends RestResource<I, R>> {\n+  private final RestClientStub stub;\n+  private final RestCallSpec callSpec;\n+  private final Type resourceType;\n \n-  public RestClient(RestServerConfig serverConfig) {\n-    this(serverConfig, null);\n+  public RestClient(RestClientStub stub, CallPath callPath, Type resourceType) {\n+    this(stub, resourceType, generateRestCallSpec(callPath, resourceType));\n   }\n \n-  public RestClient(RestServerConfig serverConfig, Level logLevel) {\n-    this.config = serverConfig;\n-    this.logger = logLevel == null ? null : Logger.getLogger(RestClient.class.getName());\n-    this.logLevel = logLevel;\n-  }\n-  \n-  private URL getWebServiceUrl(RestCallSpec callSpec) {\n-    double version = callSpec.getVersion();\n-    String versionPath = version == -1 ? \"\" : \"/\" + version;\n-    String url = config.getServiceBaseUrl() + versionPath + callSpec.getPath().get();\n-    try {\n-      return new URL(url);\n-    } catch (MalformedURLException e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n-  \n-  public <I extends ID, R extends RestResource<I, R>> RestResponse<I, R> getResponse(\n-      RestCallSpec callSpec, RestRequest<I, R> request) {\n-    Gson gson = new GsonBuilder().setVersion(callSpec.getVersion()).create();\n-    return getResponse(callSpec, request, gson);\n+  protected RestClient(RestClientStub stub, Type resourceType, RestCallSpec callSpec) {\n+    this.stub = stub;\n+    this.callSpec = callSpec;\n+    this.resourceType = resourceType;\n   }\n \n-  public <I extends ID, R extends RestResource<I, R>> RestResponse<I, R> getResponse(\n-      RestCallSpec callSpec, RestRequest<I, R> request, Gson gson) {\n-    HttpURLConnection conn = null;\n-    try {\n-      URL webServiceUrl = getWebServiceUrl(callSpec);\n-      if (logger != null) {\n-        logger.log(logLevel, \"Opening connection to \" + webServiceUrl);\n-      }\n-      conn = (HttpURLConnection) webServiceUrl.openConnection();\n-      return getResponse(callSpec, request, gson, conn);\n-    } catch (IOException e) {\n-      throw new WebServiceSystemException(e);\n-    } finally {\n-      closeIgnoringErrors(conn);\n-    }\n+  private static <T> RestCallSpec generateRestCallSpec(CallPath callPath, Type resourceType) {\n+    return new RestCallSpec.Builder(callPath, resourceType).build();\n   }\n \n-  /**\n-   * Use this method if you want to mange the HTTP Connection yourself. This is useful when you\n-   * want to use HTTP pipelining.\n-   */\n-  public <I extends ID, R extends RestResource<I, R>> RestResponse<I, R> getResponse(\n-      RestCallSpec callSpec, RestRequest<I, R> request, Gson gson, HttpURLConnection conn) {\n-    try {\n-      if (logger != null) {\n-        URL webServiceUrl = getWebServiceUrl(callSpec);\n-        logger.log(logLevel, \"Opening connection to \" + webServiceUrl);\n-      }\n-      RestRequestSender requestSender = new RestRequestSender(gson, logLevel);\n-      requestSender.send(conn, request);\n-      RestResponseReceiver<I, R> responseReceiver =\n-        new RestResponseReceiver<I, R>(gson, callSpec.getResponseSpec(), logLevel);\n-      return responseReceiver.receive(conn);\n-    } catch (IllegalArgumentException e) {\n-      throw new WebServiceSystemException(e);\n-    }\n-  }\n-  \n-  private static void closeIgnoringErrors(HttpURLConnection conn) {\n-    if (conn != null) {\n-      conn.disconnect();\n-    }\n+  public R get(I resourceId) {\n+    HeaderMap requestHeaders =\n+      new HeaderMap.Builder(callSpec.getRequestSpec().getHeadersSpec()).build();\n+    RestRequest<I, R> request =\n+      new RestRequest<I, R>(HttpMethod.GET, requestHeaders, null, resourceType);\n+    RestResponse<I, R> response = stub.getResponse(callSpec, request);\n+    return response.getBody();\n   }\n \n-  @Override\n-  public String toString() {\n-    return String.format(\"config:%s\", config);\n+  public R post(R resource) {\n+    HeaderMap requestHeaders =\n+      new HeaderMap.Builder(callSpec.getRequestSpec().getHeadersSpec()).build();\n+    RestRequest<I, R> request =\n+      new RestRequest<I, R>(HttpMethod.POST, requestHeaders, resource, resourceType);\n+    RestResponse<I, R> response = stub.getResponse(callSpec, request);\n+    return response.getBody();\n+  }\n+\n+  public R put(R resource) {\n+    HeaderMap requestHeaders =\n+      new HeaderMap.Builder(callSpec.getRequestSpec().getHeadersSpec()).build();\n+    RestRequest<I, R> request =\n+      new RestRequest<I, R>(HttpMethod.PUT, requestHeaders, resource, resourceType);\n+    RestResponse<I, R> response = stub.getResponse(callSpec, request);\n+    return response.getBody();\n+  }\n+\n+  public void delete(I resourceId) {\n+    HeaderMap requestHeaders =\n+      new HeaderMap.Builder(callSpec.getRequestSpec().getHeadersSpec()).build();\n+    RestRequest<I, R> request =\n+      new RestRequest<I, R>(HttpMethod.DELETE, requestHeaders, null, resourceType);\n+    stub.getResponse(callSpec, request);\n   }\n }\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/rest/client/RestClientStub.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.rest.client;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.rest.definition.ID;\n+import com.google.gson.rest.definition.RestCallSpec;\n+import com.google.gson.rest.definition.RestRequest;\n+import com.google.gson.rest.definition.RestResource;\n+import com.google.gson.rest.definition.RestResponse;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A stub to access the rest service\n+ * \n+ * @author inder\n+ */\n+public class RestClientStub {\n+  private final RestServerConfig config;\n+  private final Logger logger;\n+  private final Level logLevel;\n+\n+  public RestClientStub(RestServerConfig serverConfig) {\n+    this(serverConfig, null);\n+  }\n+\n+  public RestClientStub(RestServerConfig serverConfig, Level logLevel) {\n+    this.config = serverConfig;\n+    this.logger = logLevel == null ? null : Logger.getLogger(RestClientStub.class.getName());\n+    this.logLevel = logLevel;\n+  }\n+  \n+  private <I extends ID> URL getWebServiceUrl(\n+      RestCallSpec callSpec, ID id) {\n+    double version = callSpec.getVersion();\n+    StringBuilder url = new StringBuilder(config.getServiceBaseUrl());\n+    if (version != -1D) {\n+      url.append('/').append(version);\n+    }\n+    url.append(callSpec.getPath().get());\n+    if (id != null) {\n+      url.append('/').append(id.getValue());\n+    }\n+    try {\n+      return new URL(url.toString());\n+    } catch (MalformedURLException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+  \n+  public <I extends ID, R extends RestResource<I, R>> RestResponse<I, R> getResponse(\n+      RestCallSpec callSpec, RestRequest<I, R> request) {\n+    Gson gson = new GsonBuilder().setVersion(callSpec.getVersion()).create();\n+    return getResponse(callSpec, request, gson);\n+  }\n+\n+  public <I extends ID, R extends RestResource<I, R>> RestResponse<I, R> getResponse(\n+      RestCallSpec callSpec, RestRequest<I, R> request, Gson gson) {\n+    HttpURLConnection conn = null;\n+    try {\n+      URL webServiceUrl = getWebServiceUrl(callSpec, getId(request.getBody()));\n+      if (logger != null) {\n+        logger.log(logLevel, \"Opening connection to \" + webServiceUrl);\n+      }\n+      conn = (HttpURLConnection) webServiceUrl.openConnection();\n+      return getResponse(callSpec, request, gson, conn);\n+    } catch (IOException e) {\n+      throw new WebServiceSystemException(e);\n+    } finally {\n+      closeIgnoringErrors(conn);\n+    }\n+  }\n+\n+  /**\n+   * Use this method if you want to mange the HTTP Connection yourself. This is useful when you\n+   * want to use HTTP pipelining.\n+   */\n+  public <I extends ID, R extends RestResource<I, R>> RestResponse<I, R> getResponse(\n+      RestCallSpec callSpec, RestRequest<I, R> request, Gson gson, HttpURLConnection conn) {\n+    try {\n+      if (logger != null) {\n+        URL webServiceUrl = getWebServiceUrl(callSpec, getId(request.getBody()));\n+        logger.log(logLevel, \"Opening connection to \" + webServiceUrl);\n+      }\n+      RestRequestSender requestSender = new RestRequestSender(gson, logLevel);\n+      requestSender.send(conn, request);\n+      RestResponseReceiver<I, R> responseReceiver =\n+        new RestResponseReceiver<I, R>(gson, callSpec.getResponseSpec(), logLevel);\n+      return responseReceiver.receive(conn);\n+    } catch (IllegalArgumentException e) {\n+      throw new WebServiceSystemException(e);\n+    }\n+  }\n+  \n+  private static void closeIgnoringErrors(HttpURLConnection conn) {\n+    if (conn != null) {\n+      conn.disconnect();\n+    }\n+  }\n+\n+  private static <I extends ID, R extends RestResource<I, R>> I getId(R resource) {\n+    return (resource == null || !resource.hasId()) ? null : resource.getId(); \n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"config:%s\", config);\n+  }\n+}\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/SingleThreadExecutor.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/SingleThreadExecutor.java\n  */\n final class SingleThreadExecutor implements TaskExecutor {\n   private ExecutorService executor;\n-  public void execute(final Runnable r) {\n+\n+  @Override\n+  public void execute(Runnable r) {\n     executor = Executors.newSingleThreadExecutor();\n     executor.execute(r);\n   }\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/ThreadPerTaskExecutor.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/ThreadPerTaskExecutor.java\n  */\n final class ThreadPerTaskExecutor implements TaskExecutor {\n   private Thread thread;\n-  public void execute(final Runnable r) {\n+\n+  @Override\n+  public void execute(Runnable r) {\n     thread = new Thread(r);\n     thread.start();\n   }\n--- a/wsdef/src/main/java/com/google/gson/rest/definition/Id.java\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/Id.java\n   public static long getValue(Id<?> id) {\n     return id == null ? NULL_VALUE : id.getValue();\n   }\n+\n+  public String getValueAsString() {\n+    return String.valueOf(value);\n+  }\n+\n   public Type getTypeOfId() {\n     return typeOfId;\n   }\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/Queryable.java\n+// Copyright 2010 Google Inc. All Rights Reserved.\n+\n+package com.google.gson.rest.definition;\n+\n+/**\n+ * Implement this interface in a service to indicate that it allows querying\n+ * by this type\n+ * \n+ * @author Inderjeet Singh\n+ */\n+public interface Queryable<QUERY, RESULTS> {\n+  public RESULTS query(QUERY query);\n+}\n--- a/wsdef/src/test/java/com/google/gson/rest/definition/IdTypeAdapterTest.java\n+++ b/wsdef/src/test/java/com/google/gson/rest/definition/IdTypeAdapterTest.java\n import com.google.gson.rest.definition.Id;\n \n /**\n- * Unit tests for {@link IdTypeAdapter}\n+ * Unit tests for {@link Id.GsonTypeAdapter}\n  *\n  * @author inder\n  */\n--- /dev/null\n+++ b/wsexample/client/src/main/java/com/google/gson/example/rest/client/OrderClient.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */package com.google.gson.example.rest.client;\n+\n+import com.google.gson.example.model.Cart;\n+import com.google.gson.example.model.LineItem;\n+import com.google.gson.example.model.Order;\n+import com.google.gson.rest.client.RestClient;\n+import com.google.gson.rest.client.RestClientStub;\n+import com.google.gson.rest.client.RestServerConfig;\n+import com.google.gson.rest.definition.Id;\n+import com.google.gson.webservice.definition.CallPath;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+\n+/**\n+ * A sample client for the rest resource for {@link Order}\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class OrderClient {\n+  public static final CallPath CALL_PATH = new CallPath(\"/rest/order\");\n+  private final RestClient<Id<Order>, Order> restClient;\n+  public OrderClient() {\n+    RestServerConfig serverConfig = new RestServerConfig(\"http://localhost\");\n+    RestClientStub stub = new RestClientStub(serverConfig, Level.INFO);\n+    restClient = new RestClient<Id<Order>, Order>(stub, CALL_PATH, Order.class);\n+  }\n+\n+  public Order placeOrder(Cart cart) {\n+    Order order = new Order(cart, cart.getId().getValueAsString());\n+    return restClient.post(order);\n+  }\n+\n+  public static void main(String[] args) {\n+    OrderClient client = new OrderClient();\n+    List<LineItem> lineItems = new ArrayList<LineItem>();\n+    lineItems.add(new LineItem(\"item1\", 2, 1000000L, \"USD\"));\n+    Cart cart = new Cart(lineItems, \"first last\", \"4111-1111-1111-1111\");\n+    client.placeOrder(cart);\n+  }\n+}\n--- a/wsexample/definition/src/main/java/com/google/gson/example/model/Cart.java\n+++ b/wsexample/definition/src/main/java/com/google/gson/example/model/Cart.java\n  */\n package com.google.gson.example.model;\n \n+import com.google.gson.rest.definition.Id;\n+import com.google.gson.rest.definition.RestResource;\n+\n import java.util.List;\n \n /**\n  * \n  * @author inder\n  */\n-public class Cart {\n+public class Cart implements RestResource<Id<Cart>, Cart> {\n   private final List<LineItem> lineItems;\n   private final String buyerName;\n   private final String creditCard;\n+  private Id<Cart> id;\n \n   public Cart(List<LineItem> lineItems, String buyerName, String creditCard) {\n     this.lineItems = lineItems;\n   public String getCreditCard() {\n     return creditCard;\n   }\n+\n+  @Override\n+  public Id<Cart> getId() {\n+    return id;\n+  }\n+\n+  @Override\n+  public void setId(Id<Cart> id) {\n+    this.id = id;\n+  }\n+\n+  @Override\n+  public boolean hasId() {\n+    return Id.isValid(id);\n+  }\n }\n--- a/wsexample/definition/src/main/java/com/google/gson/example/model/Order.java\n+++ b/wsexample/definition/src/main/java/com/google/gson/example/model/Order.java\n  */\n package com.google.gson.example.model;\n \n+import com.google.gson.rest.definition.Id;\n+import com.google.gson.rest.definition.RestResource;\n+\n /**\n  * An order\n  *\n  * @author inder\n  */\n-public class Order {\n+public class Order implements RestResource<Id<Order>, Order> {\n   public final Cart postedCart;\n   public final String orderNumber;\n-\n+  private Id<Order> id;\n+ \n   public Order(Cart postedCart, String orderNumber) {\n     this.postedCart = postedCart;\n     this.orderNumber = orderNumber;\n     return orderNumber;\n   }\n \n+  @Override\n+  public Id<Order> getId() {\n+    return id;\n+  }\n+\n+  @Override\n+  public void setId(Id<Order> id) {\n+    this.id = id;\n+  }\n+\n+  @Override\n+  public boolean hasId() {\n+    return Id.isValid(id);\n+  }\n }", "timestamp": 1288901465, "metainfo": ""}