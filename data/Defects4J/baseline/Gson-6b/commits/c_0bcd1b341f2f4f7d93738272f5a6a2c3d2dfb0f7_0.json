{"sha": "0bcd1b341f2f4f7d93738272f5a6a2c3d2dfb0f7", "log": "Revised Gson to refuse to deserialize floating point numbers into integer types. This is probably a break from the past: previous versions of Gson allowed truncating a floating point into a long or int. However, it wasn't consistent in this behavior. It disallowed converting a BigDecimal value into BigInteger, int or long. Refusing to deserialize such values is aligned with fail-fast approach of uncovering bugs.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n    */\n   @Override\n   public BigInteger getAsBigInteger() {\n-    return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString());\n+    return value instanceof BigInteger ?\n+        (BigInteger) value : new BigInteger(value.toString());\n   }\n \n   /**\n--- a/gson/src/main/java/com/google/gson/LazilyParsedNumber.java\n+++ b/gson/src/main/java/com/google/gson/LazilyParsedNumber.java\n  */\n package com.google.gson;\n \n+import java.math.BigInteger;\n+\n /**\n  * This class holds a number value that is lazily converted to a specific number type\n  *\n \n   @Override\n   public int intValue() {\n-    return Integer.parseInt(value);\n+    try {\n+      return Integer.parseInt(value);\n+    } catch (NumberFormatException e) {\n+      try {\n+        return (int) Long.parseLong(value);\n+      } catch (NumberFormatException nfe) {\n+        return new BigInteger(value).intValue(); \n+      }\n+    }\n   }\n \n   @Override\n   public long longValue() {\n-    return Long.parseLong(value);\n+    try {\n+      return Long.parseLong(value);\n+    } catch (NumberFormatException e) {\n+      return new BigInteger(value).longValue(); \n+    }\n   }\n \n   @Override\n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n  * @author Joel Leitch\n  */\n public class PrimitiveTest extends TestCase {\n+  private static final BigInteger MAX_INT_VALUE = new BigInteger(\"2147483647\");\n+  private static final BigInteger MAX_LONG_VALUE = new BigInteger(\"9223372036854775807\");\n+\n   private Gson gson;\n \n   @Override\n       fail();\n     } catch (JsonSyntaxException expected) {}\n   }\n+\n+  public void testDeserializingDecimalPointValuesAsIntegerFails() {\n+    try {\n+      gson.fromJson(\"1.0\", Integer.class);\n+      fail();\n+    } catch (JsonParseException expected) {\n+    }\n+  }\n+\n+  public void testDeserializingBigDecimalAsIntegerFails() {\n+    try {\n+      gson.fromJson(\"-122.08e-213\", Integer.class);\n+      fail();\n+    } catch (JsonParseException expected) {\n+    }\n+  }\n+\n+  public void testDeserializingBigIntegerAsInteger() {\n+    String bigIntegerValue = \"12121211243123245845384534687435634558945453489543985435\";\n+    int actual = gson.fromJson(bigIntegerValue, Integer.class);\n+    int expected = new BigInteger(bigIntegerValue).and(MAX_INT_VALUE).intValue();\n+    assertEquals(expected, actual);\n+  }\n+\n+  public void testDeserializingBigIntegerAsLong() {\n+    String bigIntegerValue = \"12121211243123245845384534687435634558945453489543985435\";\n+    long actual = gson.fromJson(bigIntegerValue, long.class);\n+    long expected = new BigInteger(bigIntegerValue).and(MAX_LONG_VALUE).longValue();\n+    assertEquals(expected, actual);\n+  }\n+\n+  public void testDeserializingBigDecimalAsLongFails() {\n+    try {\n+      gson.fromJson(\"-122.08e-2132\", long.class);\n+      fail();\n+    } catch (JsonParseException expected) {\n+    }\n+  }\n+\n+  public void testDeserializingBigDecimalAsFloat() {\n+    String json = \"-122.08e-2132332\";\n+    float actual = gson.fromJson(json, float.class);\n+    assertEquals(-0.0f, actual);\n+  }\n+\n+  public void testDeserializingBigDecimalAsDouble() {\n+    String json = \"-122.08e-2132332\";\n+    double actual = gson.fromJson(json, double.class);\n+    assertEquals(-0.0d, actual);\n+  }\n+\n+  public void testDeserializingBigDecimalAsBigIntegerFails() {\n+    try {\n+      gson.fromJson(\"-122.08e-213\", BigInteger.class);\n+      fail();\n+    } catch (JsonParseException expected) {\n+    }\n+  }\n+\n+  public void testDeserializingBigIntegerAsBigDecimal() {\n+    BigDecimal actual =\n+      gson.fromJson(\"12121211243123245845384534687435634558945453489543985435\", BigDecimal.class);\n+    assertEquals(\"12121211243123245845384534687435634558945453489543985435\", actual.toPlainString());\n+  }\n }", "timestamp": 1304551582, "metainfo": ""}