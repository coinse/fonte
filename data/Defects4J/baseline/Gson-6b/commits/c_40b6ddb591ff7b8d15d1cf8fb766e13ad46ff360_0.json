{"sha": "40b6ddb591ff7b8d15d1cf8fb766e13ad46ff360", "log": "Added support for parsing out version numbers from the URLs while constructing a callpath.", "commit": "\n--- a/wsf/src/main/java/com/google/gson/wsf/inject/CallPathProvider.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/inject/CallPathProvider.java\n  * @author inder\n  */\n public final class CallPathProvider implements Provider<CallPath> {\n-  private final HttpServletRequest request;\n+  private final CallPath callPath;\n \n   @Inject \n   public CallPathProvider(HttpServletRequest request) {\n-    this.request = request;\n+    this(request.getPathInfo());\n+  }\n+  \n+  public CallPathProvider(String pathInfo) {\n+    int index1 = pathInfo.indexOf('/');\n+    int index2 = pathInfo.substring(index1+1).indexOf('/');\n+    String versionStr = pathInfo.substring(index1+1, index2+1);\n+    String callPathStr = pathInfo;\n+    try {\n+      // Skip over the version number from the URL\n+      Double.parseDouble(versionStr);\n+      callPathStr = pathInfo.substring(index2+1);\n+    } catch (NumberFormatException e) {\n+      // Assume that version number wasn't specified\n+    }\n+    this.callPath = new CallPath(callPathStr);\n   }\n \n   @Override\n   public CallPath get() {\n-    String pathInfo = request.getPathInfo();\n-    System.out.println(\"Incoming request with pathInfo: \" + pathInfo);\n-    String callPath = pathInfo;\n-    return new CallPath(callPath);\n+    return callPath;\n   }\n }\n--- /dev/null\n+++ b/wsf/src/test/java/com/google/gson/wsf/inject/CallPathProviderTest.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.wsf.inject;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit test for {@link CallPathProvider}\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class CallPathProviderTest extends TestCase {\n+\n+  public void testVersionIsSkipped() {\n+    CallPathProvider provider = new CallPathProvider(\"/1.0/rest/service1\");\n+    assertEquals(\"/rest/service1\", provider.get().get());\n+  }\n+\n+  public void testVersionNotPresent() {\n+    CallPathProvider provider = new CallPathProvider(\"/rest/service1\");\n+    assertEquals(\"/rest/service1\", provider.get().get());\n+  }\n+}", "timestamp": 1288748604, "metainfo": ""}