{"sha": "b5f8ef6e16d615f48c35ed3c6826db0616e1fb53", "log": "Converted CharacterTypeAdapter to the new style.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n   private static final DefaultTimestampDeserializer TIMESTAMP_DESERIALIZER =\n     new DefaultTimestampDeserializer();\n \n-  private static final CharacterTypeAdapter CHARACTER_TYPE_ADAPTER = new CharacterTypeAdapter();\n   private static final NumberTypeAdapter NUMBER_TYPE_ADAPTER = new NumberTypeAdapter();\n \n   private static final GregorianCalendarTypeAdapter GREGORIAN_CALENDAR_TYPE_ADAPTER =\n     map.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n     map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n \n-    // Add primitive serializers\n-    map.register(char.class, CHARACTER_TYPE_ADAPTER, true);\n-    map.register(Character.class, CHARACTER_TYPE_ADAPTER, true);\n     map.register(Number.class, NUMBER_TYPE_ADAPTER, true);\n \n     map.makeUnmodifiable();\n     map.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n     map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n \n-    // Add primitive deserializers\n-    map.register(char.class, wrapDeserializer(CHARACTER_TYPE_ADAPTER), true);\n-    map.register(Character.class, wrapDeserializer(CHARACTER_TYPE_ADAPTER), true);\n     map.register(Number.class, NUMBER_TYPE_ADAPTER, true);\n \n     map.makeUnmodifiable();\n       return NumberTypeAdapter.class.getSimpleName();\n     }\n   }\n-\n-  private static final class CharacterTypeAdapter\n-      implements JsonSerializer<Character>, JsonDeserializer<Character> {\n-    public JsonElement serialize(Character src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src);\n-    }\n-\n-    public Character deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-        throws JsonParseException {\n-      return json.getAsCharacter();\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return CharacterTypeAdapter.class.getSimpleName();\n-    }\n-  }\n }\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n             floatAdapter(serializeSpecialFloatingPointValues)))\n         .factory(new ExcludedTypeAdapterFactory(\n             serializationExclusionStrategy, deserializationExclusionStrategy))\n+        .factory(TypeAdapters.CHARACTER_FACTORY)\n         .factory(TypeAdapters.STRING_FACTORY)\n         .factory(TypeAdapters.STRING_BUILDER_FACTORY)\n         .factory(TypeAdapters.STRING_BUFFER_FACTORY)\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n   public static final TypeAdapter.Factory DOUBLE_FACTORY\n       = newFactory(double.class, Double.class, DOUBLE);\n \n+  public static final TypeAdapter<Character> CHARACTER = new TypeAdapter<Character>() {\n+    @Override\n+    public Character read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull(); // TODO: does this belong here?\n+        return null;\n+      }\n+      return reader.nextString().charAt(0);\n+    }\n+    @Override\n+    public void write(JsonWriter writer, Character value) throws IOException {\n+      writer.value(String.valueOf(value));\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory CHARACTER_FACTORY\n+      = newFactory(char.class, Character.class, CHARACTER);\n+\n   public static final TypeAdapter<String> STRING = new TypeAdapter<String>() {\n     @Override\n     public String read(JsonReader reader) throws IOException {", "timestamp": 1316152721, "metainfo": ""}