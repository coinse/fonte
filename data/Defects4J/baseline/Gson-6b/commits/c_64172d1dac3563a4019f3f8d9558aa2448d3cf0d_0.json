{"sha": "64172d1dac3563a4019f3f8d9558aa2448d3cf0d", "log": "Added support to serialize and deserialize array of java.lang.Object when the content is a primitive type.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java\n     throw new JsonParseException(\"Expecting array but found field \" + f.getName() + \": \" \n         + parent);\n   }\n+\n+  public void visitPrimitive(Object primitive) {\n+    throw new JsonParseException(\n+        \"Type information is unavailable, and the target is not a primitive: \" + json);\n+  }\n }\n--- a/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n       throw new RuntimeException();\n     }\n   }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public void visitPrimitive(Object primitive) {\n+    if (!json.isJsonPrimitive()) {\n+      throw new JsonParseException(\n+          \"Type information is unavailable, and the target object is not a primitive: \" + json);\n+    }\n+    JsonPrimitive prim = json.getAsJsonPrimitive();\n+    target = (T) prim.getAsObject();\n+  }\n }\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n       float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class,\n       Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };\n \n+  private static final BigInteger INTEGER_MAX = BigInteger.valueOf(Integer.MAX_VALUE);\n+\n+  private static final BigInteger LONG_MAX = BigInteger.valueOf(Long.MAX_VALUE);\n+\n   private Object value;\n \n   /**\n    */\n   @Override\n   Object getAsObject() {\n+    if (value instanceof BigInteger) {\n+      BigInteger big = (BigInteger) value;\n+      if (big.compareTo(INTEGER_MAX) < 0) {\n+        return big.intValue();\n+      } else if (big.compareTo(LONG_MAX) < 0) {\n+        return big.longValue();\n+      }\n+    }\n+    // No need to convert to float or double since those lose precision\n     return value;\n   }\n \n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n     }\n   }\n \n+  public void visitPrimitive(Object obj) {\n+    if (obj != null) {\n+      JsonElement json = new JsonPrimitive(obj);\n+      assignToRoot(json);\n+    }\n+  }\n+\n   private void addAsChildOfObject(Field f, Type fieldType, Object fieldValue) {\n     JsonElement childElement = getJsonElementForChild(fieldType, fieldValue);\n     addChildAsElement(f, childElement);\n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n      * Retrieve the current target\n      */\n     Object getTarget();\n+\n+    void visitPrimitive(Object primitive);\n   }\n \n   private final ExclusionStrategy exclusionStrategy;\n       try {\n         if (objTypeInfo.isArray()) {\n           visitor.visitArray(objectToVisit, objType);\n+        } else if (objTypeInfo.getActualType() == Object.class) {\n+          visitor.visitPrimitive(objectToVisit);\n+          objectToVisit = visitor.getTarget();\n         } else {\n           visitor.startVisitingObject(objectToVisit);\n           // For all classes in the inheritance hierarchy (including the current class),\n--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.InstanceCreator;\n+import com.google.gson.JsonParseException;\n import com.google.gson.common.TestTypes.ArrayOfObjects;\n import com.google.gson.common.TestTypes.BagOfPrimitiveWrappers;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n import junit.framework.TestCase;\n \n import java.lang.reflect.Type;\n+import java.math.BigDecimal;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.LinkedList;\n     bag = gson.fromJson(json, BagOfPrimitives.class);\n     assertEquals(\"true\", bag.stringValue);\n   }\n+  \n+  public void testArrayOfPrimitivesAsObjectsSerialization() {\n+    Object[] objs = new Object[]{1, \"abc\", 0.3f, 5L};\n+    String json = gson.toJson(objs);\n+    assertTrue(json.contains(\"abc\"));\n+    assertTrue(json.contains(\"0.3\"));\n+    assertTrue(json.contains(\"5\"));\n+  }\n+\n+  public void testArrayOfPrimitivesAsObjectsDeserialization() {\n+    String json = \"[1,'abc',0.3,5]\";\n+    Object[] objs = gson.fromJson(json, Object[].class);\n+    assertEquals(1, objs[0]);\n+    assertEquals(\"abc\", objs[1]);\n+    assertEquals(new BigDecimal(\"0.3\"), objs[2]);\n+    assertEquals(5, objs[3]);\n+  }\n+\n+  public void testArrayOfObjectsWithoutTypeInfoDeserialization() {\n+    String json = \"[1,'abc',{a:1},5]\";\n+    try {\n+      Object[] objs = gson.fromJson(json, Object[].class);\n+    } catch (JsonParseException expected) {\n+    }\n+  }\n+  \n+  public void testArrayWithoutTypeInfoDeserialization() {\n+    String json = \"[1,'abc',[1,2],5]\";\n+    try {\n+      Object[] objs = gson.fromJson(json, Object[].class);\n+    } catch (JsonParseException expected) {\n+    }\n+  }\n }", "timestamp": 1248737063, "metainfo": ""}