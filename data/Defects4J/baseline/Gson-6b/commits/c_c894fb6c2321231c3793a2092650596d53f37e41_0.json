{"sha": "c894fb6c2321231c3793a2092650596d53f37e41", "log": "Default support for BitSet. As well, provide more flexibility on getAsBoolean for a JsonPrimitive.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n package com.google.gson;\n \n import com.google.gson.internal.$Gson$Types;\n+\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n+import java.util.BitSet;\n import java.util.Calendar;\n import java.util.Collection;\n import java.util.Date;\n   private static final UriTypeAdapter URI_TYPE_ADAPTER = new UriTypeAdapter();\n   private static final UuidTypeAdapter UUUID_TYPE_ADAPTER = new UuidTypeAdapter();\n   private static final LocaleTypeAdapter LOCALE_TYPE_ADAPTER = new LocaleTypeAdapter();\n+  private static final BitSetTypeAdapter BIT_SET_ADAPTER = new BitSetTypeAdapter();\n   private static final DefaultInetAddressAdapter INET_ADDRESS_ADAPTER =\n       new DefaultInetAddressAdapter();\n       private static final CollectionTypeAdapter COLLECTION_TYPE_ADAPTER = new CollectionTypeAdapter();\n     map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\n     map.register(BigDecimal.class, BIG_DECIMAL_TYPE_ADAPTER);\n     map.register(BigInteger.class, BIG_INTEGER_TYPE_ADAPTER);\n+    map.register(BitSet.class, BIT_SET_ADAPTER);\n \n     // Add primitive serializers\n     map.register(Boolean.class, BOOLEAN_TYPE_ADAPTER);\n     map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\n     map.register(BigDecimal.class, BIG_DECIMAL_TYPE_ADAPTER);\n     map.register(BigInteger.class, BIG_INTEGER_TYPE_ADAPTER);\n+    map.register(BitSet.class, BIT_SET_ADAPTER);\n \n     // Add primitive deserializers\n     map.register(Boolean.class, BOOLEAN_TYPE_ADAPTER);\n     }\n   }\n \n+  private static final class BitSetTypeAdapter implements JsonSerializer<BitSet>, JsonDeserializer<BitSet> {\n+    public JsonElement serialize(BitSet src, Type typeOfSrc, JsonSerializationContext context) {\n+      JsonArray array = new JsonArray();\n+      for (int i = 0; i < src.length(); i++) {\n+        int value = (src.get(i)) ? 1 : 0;\n+        array.add(new JsonPrimitive(value));\n+      }\n+      return array;\n+    }\n+\n+    public BitSet deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+        throws JsonParseException {\n+      if (!json.isJsonArray()) {\n+        throw new JsonParseException(\"Expected an array of bits.\");\n+      }\n+      BitSet result = new BitSet();\n+      JsonArray array = json.getAsJsonArray();\n+      for (int i = 0; i < array.size(); i++) {\n+        JsonElement element = array.get(i);\n+        if (element.getAsBoolean()) {\n+           result.set(i);\n+        }\n+      }\n+      return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return BitSetTypeAdapter.class.getSimpleName();\n+    }\n+  }\n+\n   private static final class UrlTypeAdapter implements JsonSerializer<URL>, JsonDeserializer<URL> {\n     public JsonElement serialize(URL src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.toExternalForm());\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n    */\n   @Override\n   public boolean getAsBoolean() {\n-    return isBoolean() ? getAsBooleanWrapper().booleanValue() : Boolean.parseBoolean(getAsString());\n+    if (isBoolean()) {\n+      return getAsBooleanWrapper().booleanValue();\n+    } else {\n+      String stringValue = getAsString();\n+      return Boolean.parseBoolean(stringValue) || \"1\".equals(stringValue);\n+    }\n   }\n \n   /**\n     if (primitive.value instanceof Number) {\n       Number number = (Number) primitive.value;\n       return number instanceof BigInteger || number instanceof Long || number instanceof Integer\n-      || number instanceof Short || number instanceof Byte;\n+          || number instanceof Short || number instanceof Byte;\n     }\n     return false;\n   }\n--- a/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java\n package com.google.gson;\n \n import com.google.gson.common.MoreAsserts;\n+\n+import junit.framework.TestCase;\n+\n import java.math.BigDecimal;\n import java.math.BigInteger;\n-import junit.framework.TestCase;\n \n /**\n  * Unit test for the {@link JsonPrimitive} class.\n \n     assertTrue(json.isBoolean());\n     assertTrue(json.getAsBoolean());\n+\n+    // Extra support for booleans\n+    json = new JsonPrimitive(1);\n+    assertTrue(json.getAsBoolean());\n+\n+    json = new JsonPrimitive(\"1\");\n+    assertTrue(json.getAsBoolean());\n+\n+    json = new JsonPrimitive(\"true\");\n+    assertTrue(json.getAsBoolean());\n+\n+    json = new JsonPrimitive(\"TrUe\");\n+    assertTrue(json.getAsBoolean());\n+\n+    json = new JsonPrimitive(\"1.3\");\n+    assertFalse(json.getAsBoolean());\n   }\n \n   public void testParsingStringAsBoolean() throws Exception {\n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n import com.google.gson.JsonElement;\n import com.google.gson.JsonParseException;\n import com.google.gson.reflect.TypeToken;\n+\n+import junit.framework.TestCase;\n+\n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.Arrays;\n+import java.util.BitSet;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.TimeZone;\n import java.util.TreeSet;\n import java.util.UUID;\n-import junit.framework.TestCase;\n \n /**\n  * Functional test for Json serialization and deserialization for common classes for which default\n \n     json = gson.toJson(s, Set.class);\n     assertEquals(\"[\\\"blah\\\"]\", json);\n+  }\n+\n+  public void testBitSetSerialization() throws Exception {\n+    Gson gson = new Gson();\n+    BitSet bits = new BitSet();\n+    bits.set(1);\n+    bits.set(3, 6);\n+    bits.set(9);\n+    String json = gson.toJson(bits);\n+    assertEquals(\"[0,1,0,1,1,1,0,0,0,1]\", json);\n+  }\n+\n+  public void testBitSetDeserialization() throws Exception {\n+    BitSet expected = new BitSet();\n+    expected.set(0);\n+    expected.set(2, 6);\n+    expected.set(8);\n+\n+    Gson gson = new Gson();\n+    String json = gson.toJson(expected);\n+    assertEquals(expected, gson.fromJson(json, BitSet.class));\n+\n+    json = \"[1,0,1,1,1,1,0,0,1,0,0,0]\";\n+    assertEquals(expected, gson.fromJson(json, BitSet.class));\n+\n+    json = \"[\\\"1\\\",\\\"0\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"0\\\",\\\"0\\\",\\\"1\\\"]\";\n+    assertEquals(expected, gson.fromJson(json, BitSet.class));\n+\n+    json = \"[true,false,true,true,true,true,false,false,true,false,false]\";\n+    assertEquals(expected, gson.fromJson(json, BitSet.class));\n   }\n \n   public void testDefaultDateSerialization() {", "timestamp": 1302748967, "metainfo": ""}