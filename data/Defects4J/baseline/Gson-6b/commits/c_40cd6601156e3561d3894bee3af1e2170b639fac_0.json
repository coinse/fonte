{"sha": "40cd6601156e3561d3894bee3af1e2170b639fac", "log": "Always provide line and column information when a parse fails.", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n   private void expect(JsonToken expected) throws IOException {\n     peek();\n     if (token != expected) {\n-      throw new IllegalStateException(\"Expected \" + expected + \" but was \" + peek());\n+      throw new IllegalStateException(\"Expected \" + expected + \" but was \" + peek()\n+          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n     }\n     advance();\n   }\n       stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;\n       JsonToken firstToken = nextValue();\n       if (!lenient && token != JsonToken.BEGIN_ARRAY && token != JsonToken.BEGIN_OBJECT) {\n-        throw new IOException(\n-            \"Expected JSON document to start with '[' or '{' but was \" + token);\n+        throw new IOException(\"Expected JSON document to start with '[' or '{' but was \" + token\n+            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n       }\n       return firstToken;\n     case EMPTY_ARRAY:\n   public String nextName() throws IOException {\n     peek();\n     if (token != JsonToken.NAME) {\n-      throw new IllegalStateException(\"Expected a name but was \" + peek());\n+      throw new IllegalStateException(\"Expected a name but was \" + peek()\n+          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n     }\n     String result = name;\n     advance();\n   public String nextString() throws IOException {\n     peek();\n     if (token != JsonToken.STRING && token != JsonToken.NUMBER) {\n-      throw new IllegalStateException(\"Expected a string but was \" + peek());\n+      throw new IllegalStateException(\"Expected a string but was \" + peek()\n+          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n     }\n \n     String result = value;\n   public boolean nextBoolean() throws IOException {\n     peek();\n     if (token != JsonToken.BOOLEAN) {\n-        throw new IllegalStateException(\"Expected a boolean but was \" + token);\n+        throw new IllegalStateException(\"Expected a boolean but was \" + token\n+            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n     }\n \n     boolean result = (value == TRUE);\n   public void nextNull() throws IOException {\n     peek();\n     if (token != JsonToken.NULL) {\n-      throw new IllegalStateException(\"Expected null but was \" + token);\n+      throw new IllegalStateException(\"Expected null but was \" + token\n+          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n     }\n \n     advance();\n   public double nextDouble() throws IOException {\n     peek();\n     if (token != JsonToken.STRING && token != JsonToken.NUMBER) {\n-      throw new IllegalStateException(\"Expected a double but was \" + token);\n+      throw new IllegalStateException(\"Expected a double but was \" + token\n+          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n     }\n \n     double result = Double.parseDouble(value);\n \n     if ((result >= 1.0d && value.startsWith(\"0\"))) {\n-      throw new MalformedJsonException(\"JSON forbids octal prefixes: \" + value);\n+      throw new MalformedJsonException(\"JSON forbids octal prefixes: \" + value\n+          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n     }\n     if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n-      throw new MalformedJsonException(\"JSON forbids NaN and infinities: \" + value);\n+      throw new MalformedJsonException(\"JSON forbids NaN and infinities: \" + value\n+          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n     }\n \n     advance();\n   public long nextLong() throws IOException {\n     peek();\n     if (token != JsonToken.STRING && token != JsonToken.NUMBER) {\n-      throw new IllegalStateException(\"Expected a long but was \" + token);\n+      throw new IllegalStateException(\"Expected a long but was \" + token\n+          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n     }\n \n     long result;\n       double asDouble = Double.parseDouble(value); // don't catch this NumberFormatException\n       result = (long) asDouble;\n       if (result != asDouble) {\n-        throw new NumberFormatException(value);\n+        throw new NumberFormatException(\"Expected a long but was \" + value\n+            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n       }\n     }\n \n     if (result >= 1L && value.startsWith(\"0\")) {\n-      throw new MalformedJsonException(\"JSON forbids octal prefixes: \" + value);\n+      throw new MalformedJsonException(\"JSON forbids octal prefixes: \" + value\n+          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n     }\n \n     advance();\n   public int nextInt() throws IOException {\n     peek();\n     if (token != JsonToken.STRING && token != JsonToken.NUMBER) {\n-      throw new IllegalStateException(\"Expected an int but was \" + token);\n+      throw new IllegalStateException(\"Expected an int but was \" + token\n+          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n     }\n \n     int result;\n       double asDouble = Double.parseDouble(value); // don't catch this NumberFormatException\n       result = (int) asDouble;\n       if (result != asDouble) {\n-        throw new NumberFormatException(value);\n+        throw new NumberFormatException(\"Expected an int but was \" + value\n+            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n       }\n     }\n \n     if (result >= 1L && value.startsWith(\"0\")) {\n-      throw new MalformedJsonException(\"JSON forbids octal prefixes: \" + value);\n+      throw new MalformedJsonException(\"JSON forbids octal prefixes: \" + value\n+          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n     }\n \n     advance();\n       }\n     }\n     if (throwOnEof) {\n-      throw new EOFException(\"End of input\");\n+      throw new EOFException(\"End of input\"\n+          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n     } else {\n       return -1;\n     }\n         reader.peek();\n         if (reader.token != JsonToken.NAME) {\n           throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + \" \"\n-              + reader.getSnippet());\n+              + \" at line \" + reader.getLineNumber() + \" column \" + reader.getColumnNumber());\n         }\n         reader.value = reader.name;\n         reader.name = null;", "timestamp": 1323819730, "metainfo": ""}