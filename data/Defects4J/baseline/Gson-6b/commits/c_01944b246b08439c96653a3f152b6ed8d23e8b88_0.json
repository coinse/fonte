{"sha": "01944b246b08439c96653a3f152b6ed8d23e8b88", "log": "additional tests for PriorityQueue, Vector and Stack.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n \n package com.google.gson.functional;\n \n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import java.util.Queue;\n+import java.util.Set;\n+import java.util.Stack;\n+import java.util.Vector;\n+\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonElement;\n import com.google.gson.reflect.TypeToken;\n \n import junit.framework.TestCase;\n-\n-import java.lang.reflect.Type;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Queue;\n-import java.util.Set;\n \n /**\n  * Functional tests for Json serialization and deserialization of collections.\n     assertEquals(\"a1\", queue.element());\n     queue.remove();\n     assertEquals(\"a2\", queue.element());\n+  }\n+\n+  public void testPriorityQueue() throws Exception {\n+    Type type = new TypeToken<PriorityQueue<Integer>>(){}.getType();\n+    PriorityQueue<Integer> queue = gson.fromJson(\"[10, 20, 22]\", type);\n+    assertEquals(3, queue.size());\n+    String json = gson.toJson(queue);\n+    assertEquals(10, queue.remove().intValue());\n+    assertEquals(20, queue.remove().intValue());\n+    assertEquals(22, queue.remove().intValue());\n+    assertEquals(\"[10,20,22]\", json);\n+  }\n+\n+  public void testVector() {\n+    Type type = new TypeToken<Vector<Integer>>(){}.getType();\n+    Vector<Integer> target = gson.fromJson(\"[10, 20, 31]\", type);\n+    assertEquals(3, target.size());\n+    assertEquals(10, target.get(0).intValue());\n+    assertEquals(20, target.get(1).intValue());\n+    assertEquals(31, target.get(2).intValue());\n+    String json = gson.toJson(target);\n+    assertEquals(\"[10,20,31]\", json);\n+  }\n+\n+  public void testStack() {\n+    Type type = new TypeToken<Stack<Integer>>(){}.getType();\n+    Stack<Integer> target = gson.fromJson(\"[11, 13, 17]\", type);\n+    assertEquals(3, target.size());\n+    String json = gson.toJson(target);\n+    assertEquals(17, target.pop().intValue());\n+    assertEquals(13, target.pop().intValue());\n+    assertEquals(11, target.pop().intValue());\n+    assertEquals(\"[11,13,17]\", json);\n   }\n \n   public void testNullsInListSerialization() {", "timestamp": 1446855416, "metainfo": ""}