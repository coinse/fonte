{"sha": "c64b79c0f9e81ebeeec18fa27e2be7468916f078", "log": "Implemented suggestions from the code review of r436: throwing NoSuchElementException in case the stream hits EOF.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonStreamParser.java\n+++ b/gson/src/main/java/com/google/gson/JsonStreamParser.java\n import java.io.Reader;\n import java.io.StringReader;\n import java.util.Iterator;\n+import java.util.NoSuchElementException;\n \n /**\n  * A streaming parser that allows reading of multiple {@link JsonElement}s from the specified reader\n public final class JsonStreamParser implements Iterator<JsonElement> {\n \n   private final JsonParserJavacc parser;\n-  private boolean eof;\n   private JsonElement nextElement;\n \n   /**\n    */\n   public JsonStreamParser(Reader reader) {\n     parser = new JsonParserJavacc(reader);      \n-    eof = false;\n     nextElement = null;\n   }\n   \n    * @since 1.4\n    */\n   public JsonElement next() throws JsonParseException {\n-    if (eof) {\n-      return null;\n-    }\n     if (nextElement != null) {\n       JsonElement returnValue = nextElement;\n       nextElement = null;\n       return returnValue;\n     }\n     try {\n-      JsonElement element = parser.parse();\n-      return element;\n+      return parser.parse();\n     } catch (TokenMgrError e) {\n       throw new JsonParseException(\"Failed parsing JSON source to Json\", e);\n     } catch (ParseException e) {\n       throw new JsonParseException(\"Failed parsing JSON source to Json\", e);\n     } catch (JsonParseException e) {\n       if (e.getCause() instanceof EOFException) {\n-        eof = true;\n-        return null;\n+        throw new NoSuchElementException();\n       } else {\n         throw e;\n       }\n   }\n \n   public boolean hasNext() {\n-    nextElement = next();\n-    return nextElement != null;\n+    try {\n+      nextElement = next();\n+      return true;\n+    } catch (NoSuchElementException e) {\n+      nextElement = null;\n+      return false;\n+    }\n   }\n \n   public void remove() {\n--- a/gson/src/test/java/com/google/gson/JsonStreamParserTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonStreamParserTest.java\n package com.google.gson;\n \n+import junit.framework.TestCase;\n+\n import java.util.Iterator;\n-\n-import junit.framework.TestCase;\n+import java.util.NoSuchElementException;\n \n /**\n  * Unit tests for {@link JsonStreamParser}\n     assertEquals(\"two\", parser.next().getAsString());\n     assertFalse(parser.hasNext());\n   }\n+  \n+  public void testCallingNextBeyondAvailableInput() {\n+    Iterator<JsonElement> parser = new JsonStreamParser(\"'one' 'two'\");\n+    parser.next();\n+    parser.next();\n+    try {\n+      parser.next();\n+      fail(\"Parser should not go beyond available input\");\n+    } catch (NoSuchElementException expected) {\n+    }\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java\n \n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n-import com.google.gson.JsonElement;\n import com.google.gson.JsonStreamParser;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n \n     assertEquals(\"one\", actualOne.stringValue);\n     BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class);\n     assertEquals(\"two\", actualTwo.stringValue);\n-    JsonElement jsonElement = parser.next();\n-    assertNull(jsonElement);\n+    assertFalse(parser.hasNext());\n   }\n }", "timestamp": 1254422051, "metainfo": ""}