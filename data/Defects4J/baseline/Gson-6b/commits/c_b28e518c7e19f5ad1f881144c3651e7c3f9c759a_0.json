{"sha": "b28e518c7e19f5ad1f881144c3651e7c3f9c759a", "log": "Hide toJson/fromJson APIs for the 2.1 release.", "commit": "\n--- a/gson/src/main/java/com/google/gson/TypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/TypeAdapter.java\n \n package com.google.gson;\n \n-import java.io.IOException;\n-import java.io.Reader;\n-import java.io.StringReader;\n-import java.io.StringWriter;\n-import java.io.Writer;\n-\n import com.google.gson.internal.bind.JsonElementWriter;\n import com.google.gson.internal.bind.JsonTreeReader;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n \n /**\n  * Converts Java objects to and from JSON.\n  *   Gson gson = builder.create();\n  * }</pre>\n  *\n- * <h3>JSON Conversion</h3>\n- * <p>A type adapter registered with Gson is automatically invoked while serializing\n- * or deserializing JSON. However, you can also use type adapters directly to serialize\n- * and deserialize JSON. Here is an example for deserialization: <pre>   {@code\n- *\n- *   String json = \"{'origin':'0,0','points':['1,2','3,4']}\";\n- *   TypeAdapter<Graph> graphAdapter = gson.getAdapter(Graph.class);\n- *   Graph graph = graphAdapter.fromJson(json);\n- * }</pre>\n- * And an example for serialization: <pre>   {@code\n- *\n- *   Graph graph = new Graph(...);\n- *   TypeAdapter<Graph> graphAdapter = gson.getAdapter(Graph.class);\n- *   String json = graphAdapter.toJson(graph);\n- * }</pre>\n- *\n- * <p>Type adapters are <strong>type-specific</strong>. For example, a {@code\n- * TypeAdapter<Date>} can convert {@code Date} instances to JSON and JSON to\n- * instances of {@code Date}, but cannot convert any other types.\n- *\n  * @since 2.1\n  */\n+// non-Javadoc:\n+//\n+// <h3>JSON Conversion</h3>\n+// <p>A type adapter registered with Gson is automatically invoked while serializing\n+// or deserializing JSON. However, you can also use type adapters directly to serialize\n+// and deserialize JSON. Here is an example for deserialization: <pre>   {@code\n+//\n+//   String json = \"{'origin':'0,0','points':['1,2','3,4']}\";\n+//   TypeAdapter<Graph> graphAdapter = gson.getAdapter(Graph.class);\n+//   Graph graph = graphAdapter.fromJson(json);\n+// }</pre>\n+// And an example for serialization: <pre>   {@code\n+//\n+//   Graph graph = new Graph(...);\n+//   TypeAdapter<Graph> graphAdapter = gson.getAdapter(Graph.class);\n+//   String json = graphAdapter.toJson(graph);\n+// }</pre>\n+//\n+// <p>Type adapters are <strong>type-specific</strong>. For example, a {@code\n+// TypeAdapter<Date>} can convert {@code Date} instances to JSON and JSON to\n+// instances of {@code Date}, but cannot convert any other types.\n+//\n public abstract class TypeAdapter<T> {\n \n   /**\n    *\n    * @param value the Java object to convert. May be null.\n    */\n-  public final void toJson(Writer out, T value) throws IOException {\n+  /*public*/ final void toJson(Writer out, T value) throws IOException {\n     JsonWriter writer = new JsonWriter(out);\n     write(writer, value);\n   }\n    * }</pre>\n    * Note that we didn't need to check for nulls in our type adapter after we used nullSafe.\n    */\n-  public TypeAdapter<T> nullSafe() {\n+  public final TypeAdapter<T> nullSafe() {\n     return new TypeAdapter<T>() {\n       @Override public void write(JsonWriter out, T value) throws IOException {\n         if (value == null) {\n    *\n    * @param value the Java object to convert. May be null.\n    */\n-  public final String toJson(T value) throws IOException {\n+  /*public*/ final String toJson(T value) throws IOException {\n     StringWriter stringWriter = new StringWriter();\n     toJson(stringWriter, value);\n     return stringWriter.toString();\n    * @param value the Java object to convert. May be null.\n    * @return the converted JSON tree. May be {@link JsonNull}.\n    */\n-  public JsonElement toJsonTree(T value) {\n+  /*public*/ final JsonElement toJsonTree(T value) {\n     try {\n       JsonElementWriter jsonWriter = new JsonElementWriter();\n       jsonWriter.setLenient(true);\n    *\n    * @return the converted Java object. May be null.\n    */\n-  public final T fromJson(Reader in) throws IOException {\n+  /*public*/ final T fromJson(Reader in) throws IOException {\n     JsonReader reader = new JsonReader(in);\n     reader.setLenient(true); // TODO: non-lenient?\n     return read(reader);\n    *\n    * @return the converted Java object. May be null.\n    */\n-  public final T fromJson(String json) throws IOException {\n+  /*public*/ final T fromJson(String json) throws IOException {\n     return fromJson(new StringReader(json));\n   }\n \n    *\n    * @param jsonTree the Java object to convert. May be {@link JsonNull}.\n    */\n-  public T fromJsonTree(JsonElement jsonTree) {\n+  /*public*/ final T fromJsonTree(JsonElement jsonTree) {\n     try {\n       JsonReader jsonReader = new JsonTreeReader(jsonTree);\n       jsonReader.setLenient(true);\n--- a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java\n \n import com.google.gson.Gson;\n import com.google.gson.JsonElement;\n+import com.google.gson.JsonIOException;\n import com.google.gson.JsonPrimitive;\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.TypeAdapter;\n \n       List<V> values = new ArrayList<V>(map.size());\n       for (Map.Entry<K, V> entry : map.entrySet()) {\n-        JsonElement keyElement = keyTypeAdapter.toJsonTree(entry.getKey());\n+        JsonElement keyElement = toJsonTree(keyTypeAdapter, entry.getKey());\n         keys.add(keyElement);\n         values.add(entry.getValue());\n         hasComplexKeys |= keyElement.isJsonArray() || keyElement.isJsonObject();\n       }\n     }\n   }\n+\n+  // TODO: remove this when TypeAdapter.toJsonTree() is public\n+  private static <T> JsonElement toJsonTree(TypeAdapter<T> typeAdapter, T value) {\n+    try {\n+      JsonElementWriter jsonWriter = new JsonElementWriter();\n+      jsonWriter.setLenient(true);\n+      typeAdapter.write(jsonWriter, value);\n+      return jsonWriter.get();\n+    } catch (IOException e) {\n+      throw new JsonIOException(e);\n+    }\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java\n \n package com.google.gson.functional;\n \n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import junit.framework.TestCase;\n-\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import junit.framework.TestCase;\n \n public final class StreamingTypeAdaptersTest extends TestCase {\n   private Gson miniGson = new GsonBuilder().create();\n \n     assertEquals(\"{'horsePower':300.0,\"\n         + \"'passengers':[{'age':29,'name':'Jesse'},{'age':29,'name':'Jodie'}]}\",\n-        truckAdapter.toJson(truck).replace('\\\"', '\\''));\n+        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n   }\n \n   public void testDeserialize() throws IOException {\n     String json = \"{'horsePower':300.0,\"\n         + \"'passengers':[{'age':29,'name':'Jesse'},{'age':29,'name':'Jodie'}]}\";\n-    Truck truck = truckAdapter.fromJson(json);\n+    Truck truck = fromJson(truckAdapter, json);\n     assertEquals(300.0, truck.horsePower);\n     assertEquals(Arrays.asList(new Person(\"Jesse\", 29), new Person(\"Jodie\", 29)), truck.passengers);\n   }\n     Truck truck = new Truck();\n     truck.passengers = null;\n     assertEquals(\"{'horsePower':0.0,'passengers':null}\",\n-        truckAdapter.toJson(truck).replace('\\\"', '\\''));\n+        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n   }\n \n   public void testDeserializeNullField() throws IOException {\n-    Truck truck = truckAdapter.fromJson(\"{'horsePower':0.0,'passengers':null}\");\n+    Truck truck = fromJson(truckAdapter, \"{'horsePower':0.0,'passengers':null}\");\n     assertNull(truck.passengers);\n   }\n \n     Truck truck = new Truck();\n     truck.passengers = Arrays.asList((Person) null);\n     assertEquals(\"{'horsePower':0.0,'passengers':[null]}\",\n-        truckAdapter.toJson(truck).replace('\\\"', '\\''));\n+        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n   }\n \n   public void testDeserializeNullObject() throws IOException {\n-    Truck truck = truckAdapter.fromJson(\"{'horsePower':0.0,'passengers':[null]}\");\n+    Truck truck = fromJson(truckAdapter, \"{'horsePower':0.0,'passengers':[null]}\");\n     assertEquals(Arrays.asList((Person) null), truck.passengers);\n   }\n \n     Truck truck = new Truck();\n     truck.passengers = Arrays.asList(new Person(\"Jesse\", 29), new Person(\"Jodie\", 29));\n     assertEquals(\"{'horsePower':0.0,'passengers':['Jesse','Jodie']}\",\n-        truckAdapter.toJson(truck).replace('\\\"', '\\''));\n+        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n   }\n \n   public void testDeserializeWithCustomTypeAdapter() throws IOException {\n     usePersonNameAdapter();\n-    Truck truck = truckAdapter.fromJson(\"{'horsePower':0.0,'passengers':['Jesse','Jodie']}\");\n+    Truck truck = fromJson(truckAdapter, \"{'horsePower':0.0,'passengers':['Jesse','Jodie']}\");\n     assertEquals(Arrays.asList(new Person(\"Jesse\", -1), new Person(\"Jodie\", -1)), truck.passengers);\n   }\n \n     Map<String, Double> map = new LinkedHashMap<String, Double>();\n     map.put(\"a\", 5.0);\n     map.put(\"b\", 10.0);\n-    assertEquals(\"{'a':5.0,'b':10.0}\", mapAdapter.toJson(map).replace('\"', '\\''));\n+    assertEquals(\"{'a':5.0,'b':10.0}\", toJson(mapAdapter, map).replace('\"', '\\''));\n   }\n \n   public void testDeserializeMap() throws IOException {\n     Map<String, Double> map = new LinkedHashMap<String, Double>();\n     map.put(\"a\", 5.0);\n     map.put(\"b\", 10.0);\n-    assertEquals(map, mapAdapter.fromJson(\"{'a':5.0,'b':10.0}\"));\n+    assertEquals(map, fromJson(mapAdapter, \"{'a':5.0,'b':10.0}\"));\n   }\n \n   public void testSerialize1dArray() throws IOException {\n     TypeAdapter<double[]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[]>() {});\n-    assertEquals(\"[1.0,2.0,3.0]\", arrayAdapter.toJson(new double[]{1.0, 2.0, 3.0}));\n+    assertEquals(\"[1.0,2.0,3.0]\", toJson(arrayAdapter, new double[]{1.0, 2.0, 3.0}));\n   }\n \n   public void testDeserialize1dArray() throws IOException {\n     TypeAdapter<double[]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[]>() {});\n-    double[] array = arrayAdapter.fromJson(\"[1.0,2.0,3.0]\");\n+    double[] array = fromJson(arrayAdapter, \"[1.0,2.0,3.0]\");\n     assertTrue(Arrays.toString(array), Arrays.equals(new double[]{1.0, 2.0, 3.0}, array));\n   }\n \n   public void testSerialize2dArray() throws IOException {\n     TypeAdapter<double[][]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[][]>() {});\n     double[][] array = { {1.0, 2.0 }, { 3.0 } };\n-    assertEquals(\"[[1.0,2.0],[3.0]]\", arrayAdapter.toJson(array));\n+    assertEquals(\"[[1.0,2.0],[3.0]]\", toJson(arrayAdapter, array));\n   }\n \n   public void testDeserialize2dArray() throws IOException {\n     TypeAdapter<double[][]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[][]>() {});\n-    double[][] array = arrayAdapter.fromJson(\"[[1.0,2.0],[3.0]]\");\n+    double[][] array = fromJson(arrayAdapter, \"[[1.0,2.0],[3.0]]\");\n     double[][] expected = { {1.0, 2.0 }, { 3.0 } };\n     assertTrue(Arrays.toString(array), Arrays.deepEquals(expected, array));\n   }\n     assertEquals(\"{'label':'root',\"\n         + \"'left':{'label':'left','left':null,'right':null},\"\n         + \"'right':{'label':'right','left':null,'right':null}}\",\n-        nodeAdapter.toJson(root).replace('\"', '\\''));\n+        toJson(nodeAdapter, root).replace('\"', '\\''));\n   }\n \n   static class Truck {\n       this.age = age;\n     }\n \n-    public Person() {} // TODO: use Joel's constructor code so we don't need this\n-\n     @Override public boolean equals(Object o) {\n       return o instanceof Person\n           && ((Person) o).name.equals(name)\n     Node(String label) {\n       this.label = label;\n     }\n-    public Node() {} // TODO: use Joel's constructor code so we don't need this\n+  }\n+\n+  // TODO: remove this when TypeAdapter.toJson() is public\n+  private static <T> String toJson(TypeAdapter<T> typeAdapter, T value) throws IOException {\n+    StringWriter stringWriter = new StringWriter();\n+    JsonWriter writer = new JsonWriter(stringWriter);\n+    typeAdapter.write(writer, value);\n+    return stringWriter.toString();\n+  }\n+\n+  // TODO: remove this when TypeAdapter.fromJson() is public\n+  private <T> T fromJson(TypeAdapter<T> typeAdapter, String json) throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(json));\n+    reader.setLenient(true); // TODO: non-lenient?\n+    return typeAdapter.read(reader);\n   }\n }", "timestamp": 1324503018, "metainfo": ""}