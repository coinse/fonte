{"sha": "415437810a6341576c60693237fd514500abf209", "log": "Include line and column position in error messages.", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n   private final char[] buffer = new char[1024];\n   private int pos = 0;\n   private int limit = 0;\n+\n+  /*\n+   * Track the number of newlines and columns preceding the current buffer. To\n+   * compute the line and column of a position in the buffer, compute the line\n+   * and column in the buffer and add the preceding values.\n+   */\n+  private int bufferStartLine;\n+  private int bufferStartColumn;\n \n   private final List<JsonScope> stack = new ArrayList<JsonScope>();\n   {\n    * false.\n    */\n   private boolean fillBuffer(int minimum) throws IOException {\n+    // Before clobbering the old characters, update where buffer starts\n+    for (int i = 0; i < pos; i++) {\n+      if (buffer[i] == '\\n') {\n+        bufferStartLine++;\n+        bufferStartColumn = 0;\n+      } else {\n+        bufferStartColumn++;\n+      }\n+    }\n+\n     if (limit != pos) {\n       limit -= pos;\n       System.arraycopy(buffer, pos, buffer, 0, limit);\n       }\n     }\n     return false;\n+  }\n+\n+  private int getLineNumber() {\n+    int result = bufferStartLine;\n+    for (int i = 0; i < pos; i++) {\n+      if (buffer[i] == '\\n') {\n+        result++;\n+      }\n+    }\n+    return result + 1; // the first line is '1'\n+  }\n+\n+  private int getColumnNumber() {\n+    int result = bufferStartColumn;\n+    for (int i = 0; i < pos; i++) {\n+      if (buffer[i] == '\\n') {\n+        result = 0;\n+      } else {\n+        result++;\n+      }\n+    }\n+    return result + 1; // the first column is '1'\n   }\n \n   private int nextNonWhitespace() throws IOException {\n    * with this reader's content.\n    */\n   private IOException syntaxError(String message) throws IOException {\n-    throw new MalformedJsonException(message + \" near \" + getSnippet());\n+    throw new MalformedJsonException(message + \" @\" + getLineNumber() + \":\" + getColumnNumber());\n   }\n \n   private CharSequence getSnippet() {\n--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n \n import java.io.IOException;\n import java.io.StringReader;\n+import java.util.Arrays;\n import junit.framework.TestCase;\n \n public final class JsonReaderTest extends TestCase {\n     } catch (IOException expected) {\n     }\n   }\n+\n+  public void testFailWithPosition() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"[\\n\\n\\n\\n\\n0,}]\"));\n+    reader.beginArray();\n+    reader.nextInt();\n+    try {\n+      reader.peek();\n+      fail();\n+    } catch (IOException expected) {\n+      assertEquals(\"Expected literal value @6:3\", expected.getMessage());\n+    }\n+  }\n+\n+  public void testFailWithPositionGreaterThanBufferSize() throws IOException {\n+    String spaces = repeat(' ', 8192);\n+    JsonReader reader = new JsonReader(new StringReader(\"[\\n\\n\" + spaces + \"\\n\\n\\n0,}]\"));\n+    reader.beginArray();\n+    reader.nextInt();\n+    try {\n+      reader.peek();\n+      fail();\n+    } catch (IOException expected) {\n+      assertEquals(\"Expected literal value @6:3\", expected.getMessage());\n+    }\n+  }\n+\n+  private String repeat(char c, int count) {\n+    char[] array = new char[count];\n+    Arrays.fill(array, c);\n+    return new String(array);\n+  }\n }", "timestamp": 1311017162, "metainfo": ""}