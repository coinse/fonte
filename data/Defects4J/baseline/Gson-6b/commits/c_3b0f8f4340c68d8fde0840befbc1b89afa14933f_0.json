{"sha": "3b0f8f4340c68d8fde0840befbc1b89afa14933f", "log": "Removed all the JDK warnings about unused fields in test classes or unused constructors for use by Gson or instanceof calls on parameterized types.", "commit": "\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n    */\n   public GsonBuilder registerTypeAdapter(Type type, Object typeAdapter) {\n-    Preconditions.checkArgument(typeAdapter instanceof JsonSerializer\n-        || typeAdapter instanceof JsonDeserializer || typeAdapter instanceof InstanceCreator);\n-    if (typeAdapter instanceof InstanceCreator) {\n+    Preconditions.checkArgument(typeAdapter instanceof JsonSerializer<?>\n+        || typeAdapter instanceof JsonDeserializer<?> || typeAdapter instanceof InstanceCreator<?>);\n+    if (typeAdapter instanceof InstanceCreator<?>) {\n       registerInstanceCreator(type, (InstanceCreator<?>) typeAdapter);\n     }\n-    if (typeAdapter instanceof JsonSerializer) {\n+    if (typeAdapter instanceof JsonSerializer<?>) {\n       registerSerializer(type, (JsonSerializer<?>) typeAdapter);\n     }\n-    if (typeAdapter instanceof JsonDeserializer) {\n+    if (typeAdapter instanceof JsonDeserializer<?>) {\n       registerDeserializer(type, (JsonDeserializer<?>) typeAdapter);\n     }\n     return this;\n--- a/gson/src/main/java/com/google/gson/TypeInfoFactory.java\n+++ b/gson/src/main/java/com/google/gson/TypeInfoFactory.java\n \n   private static Type getActualType(\n       Type typeToEvaluate, Type parentType, Class<?> rawParentClass) {\n-    if (typeToEvaluate instanceof Class) {\n+    if (typeToEvaluate instanceof Class<?>) {\n       return typeToEvaluate;\n     } else if (typeToEvaluate instanceof ParameterizedType) {\n       ParameterizedType castedType = (ParameterizedType) typeToEvaluate;\n       if (componentType.equals(actualType)) {\n         return castedType;\n       } else {\n-        if (actualType instanceof Class) {\n+        if (actualType instanceof Class<?>) {\n           return TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType));\n         } else {\n           return new GenericArrayTypeImpl(actualType);\n         }\n       }\n-    } else if (typeToEvaluate instanceof TypeVariable) {\n+    } else if (typeToEvaluate instanceof TypeVariable<?>) {\n       if (parentType instanceof ParameterizedType) {\n         // The class definition has the actual types used for the type variables.\n         // Find the matching actual type for the Type Variable used for the field.\n--- a/gson/src/main/java/com/google/gson/TypeInfoMap.java\n+++ b/gson/src/main/java/com/google/gson/TypeInfoMap.java\n   private final Type valueType;\n   \n   public TypeInfoMap(Type mapType) {\n-    if (mapType instanceof Class && Properties.class.isAssignableFrom((Class<?>) mapType)) {\n+    if (mapType instanceof Class<?> && Properties.class.isAssignableFrom((Class<?>) mapType)) {\n       keyType = String.class;\n       valueType = String.class;\n     } else if (mapType instanceof ParameterizedType) {\n--- a/gson/src/main/java/com/google/gson/TypeUtils.java\n+++ b/gson/src/main/java/com/google/gson/TypeUtils.java\n    * <code>TypeUtils.getActualTypeForFirstTypeVariable(fooType)</code> will return Integer.class.\n    */\n   static Type getActualTypeForFirstTypeVariable(Type type) {\n-    if (type instanceof Class) {\n+    if (type instanceof Class<?>) {\n       return Object.class;\n     } else if (type instanceof ParameterizedType) {\n       return ((ParameterizedType)type).getActualTypeArguments()[0];\n   }\n \n   static boolean isArray(Type type) {\n-    if (type instanceof Class) {\n+    if (type instanceof Class<?>) {\n       return ((Class<?>)type).isArray();\n     } else if (type instanceof GenericArrayType) {\n       return true;\n    * This method returns the actual raw class associated with the specified type.\n    */\n   static Class<?> toRawClass(Type type) {\n-    if (type instanceof Class) {\n+    if (type instanceof Class<?>) {\n       return (Class<?>) type;\n     } else if (type instanceof ParameterizedType) {\n       ParameterizedType actualType = (ParameterizedType)type;\n--- a/gson/src/main/java/com/google/gson/reflect/TypeToken.java\n+++ b/gson/src/main/java/com/google/gson/reflect/TypeToken.java\n    */\n   static Type getSuperclassTypeParameter(Class<?> subclass) {\n     Type superclass = subclass.getGenericSuperclass();\n-    if (superclass instanceof Class) {\n+    if (superclass instanceof Class<?>) {\n       throw new RuntimeException(\"Missing type parameter.\");\n     }\n     return ((ParameterizedType) superclass).getActualTypeArguments()[0];\n       return true;\n     }\n \n-    if (type instanceof Class) {\n+    if (type instanceof Class<?>) {\n       return rawType.isAssignableFrom(getRawType(from));\n     } else if (type instanceof ParameterizedType) {\n       return isAssignableFrom(from, (ParameterizedType) type,\n       Type t = from;\n       if (from instanceof GenericArrayType) {\n         t = ((GenericArrayType) from).getGenericComponentType();\n-      } else if (from instanceof Class) {\n+      } else if (from instanceof Class<?>) {\n         Class<?> classType = (Class<?>) from;\n         while (classType.isArray()) {\n           classType = classType.getComponentType();\n       for (int i = 0; i < tArgs.length; i++) {\n         Type arg = tArgs[i];\n         TypeVariable<?> var = tParams[i];\n-        while (arg instanceof TypeVariable) {\n+        while (arg instanceof TypeVariable<?>) {\n           TypeVariable<?> v = (TypeVariable<?>) arg;\n           arg = typeVarMap.get(v.getName());\n         }\n       Map<String, Type> typeMap) {\n     if (to.equals(from)) return true;\n \n-    if (from instanceof TypeVariable) {\n+    if (from instanceof TypeVariable<?>) {\n       return to.equals(typeMap.get(((TypeVariable<?>)from).getName()));\n     }\n \n--- a/gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java\n     assertFalse(strategy.shouldSkipField(f));\n   }\n \n+  @SuppressWarnings(\"unused\")\n   private static class MockObject {\n     @Expose\n     public final int exposedField = 0;\n--- a/gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java\n+++ b/gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java\n     assertEquals(fieldName, policy.translateName(f));\n   }\n \n+  @SuppressWarnings(\"unused\")\n   private static class SomeObject {\n     @SerializedName(ANNOTATED_FIELD_NAME) public final int fieldWithAnnotation = 1;\n     public final int fieldWithoutAnnotation = 1;\n--- a/gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java\n+++ b/gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java\n     assertEquals(List[].class, typeInfo.getRawClass());\n   }\n \n+  @SuppressWarnings(\"unused\")\n   private static class ObjectWithDifferentFields<T> {\n     public static enum TestEnum {\n       TEST_1, TEST_2;\n--- a/gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java\n   @Since(VERSION)\n   private static class MockObject {\n \n+    @SuppressWarnings(\"unused\")\n     @Since(VERSION)\n     public final int someField = 0;\n   }\n--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n   private static class ObjectWithWildcardCollection {\n     private final Collection<? extends BagOfPrimitives> collection;\n \n-    @SuppressWarnings(\"unchecked\")\n+    // For use by Gson\n+    @SuppressWarnings({ \"unchecked\", \"unused\" })\n     public ObjectWithWildcardCollection() {\n       this(Collections.EMPTY_LIST);\n     }\n   private static class Entry {\n     int value;\n     // For use by Gson\n-    Entry() {\n+    @SuppressWarnings(\"unused\")\n+    private Entry() {\n       this(10);\n     }\n     Entry(int value) {\n--- a/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java\n     finishedLatch.await();\n     assertFalse(failed.get());\n   }\n-\n+  \n+  @SuppressWarnings(\"unused\")\n   private static class MyObject {\n     String a;\n     String b;\n--- a/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java\n   private static class DataHolder {\n     private final String data;\n \n-    public DataHolder() {\n+    // For use by Gson\n+    @SuppressWarnings(\"unused\")\n+    private DataHolder() {\n       throw new IllegalStateException();\n     }\n     \n   private static class DataHolderWrapper {\n     private final DataHolder wrappedData;\n     \n-    public DataHolderWrapper() {\n+    // For use by Gson\n+    @SuppressWarnings(\"unused\")\n+    private DataHolderWrapper() {\n       this(new DataHolder(DEFAULT_VALUE));\n     }\n     \n--- a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n   }\n   \n   private static class Derived extends Base {\n+    @SuppressWarnings(\"unused\")\n     int derivedValue = 3;\n   }\n   \n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n   \n   private static class ClassWithBigDecimal {\n     BigDecimal value;\n-    ClassWithBigDecimal() { }\n+    // For use by Gson\n+    @SuppressWarnings(\"unused\")\n+    private ClassWithBigDecimal() { }\n     ClassWithBigDecimal(String value) {\n       this.value = new BigDecimal(value);\n     }\n \n   private static class ClassWithBigInteger {\n     BigInteger value;\n-    ClassWithBigInteger() { }\n+    // For use by Gson\n+    @SuppressWarnings(\"unused\")\n+    private ClassWithBigInteger() { }\n     ClassWithBigInteger(String value) {\n       this.value = new BigInteger(value);\n     }\n--- a/gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java\n     assertNotNull(obj.interfaceField);\n   }\n \n+  @SuppressWarnings(\"unused\")\n   private static class ClassWithExposedFields {\n     @Expose private final Integer a;\n     private final Integer b;\n     @Expose(deserialize = false) final double d;\n     @Expose(serialize = false, deserialize = false) final char e;\n \n-    ClassWithExposedFields() {\n+    // For use by Gson\n+    private ClassWithExposedFields() {\n       this(null, null);\n     }\n \n     @Expose\n     private final SomeInterface interfaceField;\n \n-    public ClassWithInterfaceField() {\n+    // For use by Gson\n+    @SuppressWarnings(\"unused\")\n+    private ClassWithInterfaceField() {\n       this(null);\n     }\n \n--- a/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java\n   }\n   \n   private static class SubTypeOfBagOfPrimitives extends BagOfPrimitives {\n+    @SuppressWarnings(\"unused\")\n     float f = 1.2F;\n     public SubTypeOfBagOfPrimitives(long l, int i, boolean b, String string, float f) {\n       super(l, i, b, string);\n--- a/gson/src/test/java/com/google/gson/functional/MapTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n   private static class MyParameterizedMap<K, V> extends LinkedHashMap<K, V> {\n     private static final long serialVersionUID = 1L;\n \n+    @SuppressWarnings(\"unused\")\n     int foo = 10;\n   }\n   \n   private static class MyMap extends LinkedHashMap<String, String> {\n     private static final long serialVersionUID = 1L;\n \n+    @SuppressWarnings(\"unused\")\n     int foo = 10;\n   }\n   \n--- a/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java\n     assertEquals(\"{\\\"a\\\":3.0}\", actual);\n   }\n \n+  @SuppressWarnings(\"unused\")\n   private static class ClassWithDuplicateFields {\n     public Integer a;\n     @SerializedName(\"a\") public Double b;\n--- a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java\n     private Long value;\n   }\n \n+  @SuppressWarnings(\"unused\")\n   private static class ClassWithMembers {\n     String str;\n     int[] array;\n--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n   }\n \n   private static class ClassWithObjectField {\n+    @SuppressWarnings(\"unused\")\n     Object member;\n   }\n   \n   }\n    \n   private static class Parent {\n+    @SuppressWarnings(\"unused\")\n     int value1 = 1;\n     private class Child {\n       int value2 = 2;\n     private SortedSet<Character> sortedSet;\n \n     // For use by Gson\n-    ClassWithSubInterfacesOfCollection() {\n+    @SuppressWarnings(\"unused\")\n+    private ClassWithSubInterfacesOfCollection() {\n     }\n \n     public ClassWithSubInterfacesOfCollection(List<Integer> list, Queue<Long> queue, Set<Float> set,\n   private static class SubTypeOfNested extends Nested {\n     private final long value = 5;\n \n-    public SubTypeOfNested() {\n+    // Used by Gson\n+    @SuppressWarnings(\"unused\")\n+    private SubTypeOfNested() {\n       this(null, null);\n     }\n \n--- a/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java\n     private final List<? extends T> listOfWildcardTypeParameters;\n     private final List<? extends T>[] arrayOfListOfWildcardTypeParameters;\n \n-    public ObjectWithTypeVariables() {\n+    // For use by Gson\n+    @SuppressWarnings(\"unused\")\n+    private ObjectWithTypeVariables() {\n       this(null, null, null, null, null, null);\n     }\n \n     C c;\n     D d;\n     E e;\n-    MultiParameters() {\n+    // For use by Gson\n+    @SuppressWarnings(\"unused\")\n+    private MultiParameters() {\n     }\n     MultiParameters(A a, B b, C c, D d, E e) {\n       super();\n   \n   // Begin: tests to reproduce issue 103\n   private static class Quantity {\n+    @SuppressWarnings(\"unused\")\n     int q = 10;\n   }\n   private static class MyQuantity extends Quantity {\n+    @SuppressWarnings(\"unused\")\n     int q2 = 20;\n   }\n   private interface Measurable<T> {    \n--- a/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java\n+++ b/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java\n   private static class ExceptionHolder {\n     public final String message;\n     public final String stackTrace;\n-    public ExceptionHolder() {\n+    \n+    // For use by Gson\n+    @SuppressWarnings(\"unused\")\n+    private ExceptionHolder() {\n       this(\"\", \"\");\n     }\n     public ExceptionHolder(String message, String stackTrace) {\n     }\n   }\n \n+  @SuppressWarnings(\"unused\")\n   private static class CollectionEntry {\n     final String name;\n     final String value;\n \n-    CollectionEntry() {\n+    // For use by Gson\n+    private CollectionEntry() {\n       this(null, null);\n     }\n ", "timestamp": 1253727916, "metainfo": ""}