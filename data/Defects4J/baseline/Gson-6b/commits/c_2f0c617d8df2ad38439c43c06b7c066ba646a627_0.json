{"sha": "2f0c617d8df2ad38439c43c06b7c066ba646a627", "log": "Use floating point comparison for all non-integral Number types (such as LazilyParsedNumber)", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n       long value = getAsNumber().longValue();\n       return (int) (value ^ (value >>> 32));\n     }\n-    if (isFloatingPoint(this)) {\n+    if (value instanceof Number) {\n       long value = Double.doubleToLongBits(getAsNumber().doubleValue());\n       return (int) (value ^ (value >>> 32));\n     }\n     if (isIntegral(this) && isIntegral(other)) {\n       return getAsNumber().longValue() == other.getAsNumber().longValue();\n     }\n-    if (isFloatingPoint(this) && isFloatingPoint(other)) {\n+    if (value instanceof Number && other.value instanceof Number) {\n       double a = getAsNumber().doubleValue();\n       // Java standard types other than double return true for two NaN. So, need\n       // special handling for double.\n     }\n     return false;\n   }\n-\n-  /**\n-   * Returns true if the specified number is a floating point type (BigDecimal, double, float)\n-   */\n-  private static boolean isFloatingPoint(JsonPrimitive primitive) {\n-    if (primitive.value instanceof Number) {\n-      Number number = (Number) primitive.value;\n-      return number instanceof BigDecimal || number instanceof Double || number instanceof Float;\n-    }\n-    return false;\n-  }\n }", "timestamp": 1315555311, "metainfo": ""}