{"sha": "c892738fbb6f6e433921ca82234ea2c77b189f68", "log": "Re-enabling the ' (apostrophe) escaping with valid JSON escaping.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Escaper.java\n+++ b/gson/src/main/java/com/google/gson/Escaper.java\n     htmlEscapeSet.add('>');\n     htmlEscapeSet.add('&');\n     htmlEscapeSet.add('=');\n-    // Removing ' for now since it is a valid character in JSON, but not javascript\n-    // When enabling this, remember to enable the test EscaperTest.disable_testSingleQuoteEscaping\n-//    htmlEscapeSet.add('\\''); \n+    htmlEscapeSet.add('\\''); \n //    htmlEscapeSet.add('/');  -- Removing slash for now since it causes some incompatibilities\n     HTML_ESCAPE_CHARS = Collections.unmodifiableSet(htmlEscapeSet);\n   }\n            out.append(\"\\\\/\");\n            break;\n          case '\"':\n-           out.append('\\\\').append((char) codePoint);\n-           break;\n-         case '\\'':\n-           out.append('\\\\').append((char) codePoint);\n+           out.append(\"\\\\\\\"\");\n            break;\n          default:\n            appendHexJavaScriptRepresentation(codePoint, out);\n--- a/gson/src/test/java/com/google/gson/EscaperTest.java\n+++ b/gson/src/test/java/com/google/gson/EscaperTest.java\n     assertEquals(\"123\\\\\\\"456\", escapedString);\n   }\n   \n-  public void disable_testSingleQuoteEscaping() throws Exception {\n+  public void testSingleQuoteEscaping() throws Exception {\n     String containsQuote = \"123'456\";\n     String escapedString = escapeHtmlChar.escapeJsonString(containsQuote);\n-    assertEquals(\"123\\\\'456\", escapedString);\n+    assertEquals(\"123\\\\u0027456\", escapedString);\n   }\n \n   public void testLineSeparatorEscaping() throws Exception {", "timestamp": 1254887309, "metainfo": ""}