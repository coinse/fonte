{"sha": "1e2fbd81f500671670885b7fc110d3c6a160aa78", "log": "Adding default type adapter for InetAddress.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n+import java.net.InetAddress;\n import java.net.MalformedURLException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.net.URL;\n+import java.net.UnknownHostException;\n import java.sql.Time;\n import java.sql.Timestamp;\n import java.text.DateFormat;\n   private static final UriTypeAdapter URI_TYPE_ADAPTER = new UriTypeAdapter();\n   private static final UuidTypeAdapter UUUID_TYPE_ADAPTER = new UuidTypeAdapter();\n   private static final LocaleTypeAdapter LOCALE_TYPE_ADAPTER = new LocaleTypeAdapter();\n+  private static final DefaultInetAddressAdapter INET_ADDRESS_ADAPTER =\n+      new DefaultInetAddressAdapter();\n   private static final CollectionTypeAdapter COLLECTION_TYPE_ADAPTER = new CollectionTypeAdapter();\n   private static final MapTypeAdapter MAP_TYPE_ADAPTER = new MapTypeAdapter();\n   private static final BigDecimalTypeAdapter BIG_DECIMAL_TYPE_ADAPTER = new BigDecimalTypeAdapter();\n   private static final TreeSetCreator TREE_SET_CREATOR = new TreeSetCreator();\n   private static final HashSetCreator HASH_SET_CREATOR = new HashSetCreator();\n   private static final GregorianCalendarTypeAdapter GREGORIAN_CALENDAR_TYPE_ADAPTER =\n-    new GregorianCalendarTypeAdapter();\n+      new GregorianCalendarTypeAdapter();\n \n   // The constants DEFAULT_SERIALIZERS, DEFAULT_DESERIALIZERS, and DEFAULT_INSTANCE_CREATORS\n   // must be defined after the constants for the type adapters. Otherwise, the type adapter\n         new ParameterizedTypeHandlerMap<JsonSerializer<?>>();\n \n     map.registerForTypeHierarchy(Enum.class, ENUM_TYPE_ADAPTER);\n+    map.registerForTypeHierarchy(InetAddress.class, INET_ADDRESS_ADAPTER);\n     map.register(URL.class, URL_TYPE_ADAPTER);\n     map.register(URI.class, URI_TYPE_ADAPTER);\n     map.register(UUID.class, UUUID_TYPE_ADAPTER);\n     ParameterizedTypeHandlerMap<JsonDeserializer<?>> map =\n         new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();\n     map.registerForTypeHierarchy(Enum.class, wrapDeserializer(ENUM_TYPE_ADAPTER));\n+    map.registerForTypeHierarchy(InetAddress.class, wrapDeserializer(INET_ADDRESS_ADAPTER));\n     map.register(URL.class, wrapDeserializer(URL_TYPE_ADAPTER));\n     map.register(URI.class, wrapDeserializer(URI_TYPE_ADAPTER));\n     map.register(UUID.class, wrapDeserializer(UUUID_TYPE_ADAPTER));\n     }\n   }\n \n+  static class DefaultInetAddressAdapter\n+      implements JsonDeserializer<InetAddress>, JsonSerializer<InetAddress> {\n+\n+    public InetAddress deserialize(JsonElement json, Type typeOfT,\n+        JsonDeserializationContext context) throws JsonParseException {\n+      try {\n+        return InetAddress.getByName(json.getAsString());\n+      } catch (UnknownHostException e) {\n+        throw new JsonParseException(e);\n+      }\n+    }\n+    \n+    public JsonElement serialize(InetAddress src, Type typeOfSrc,\n+        JsonSerializationContext context) {\n+      return new JsonPrimitive(src.getHostAddress());\n+    }\n+  }\n+\n   @SuppressWarnings(\"unchecked\")\n   private static class EnumTypeAdapter<T extends Enum<T>>\n       implements JsonSerializer<T>, JsonDeserializer<T> {\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import java.net.InetAddress;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests for the default serializer/deserializer for the {@code InetAddress} type.\n+ * \n+ * @author Joel Leitch\n+ */\n+public class DefaultInetAddressTypeAdapterTest extends TestCase {\n+  private Gson gson;\n+  \n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new Gson();\n+  }\n+  \n+  public void testInetAddressSerializationAndDeserialization() throws Exception {\n+    InetAddress localhost = InetAddress.getLocalHost();\n+    String localInetAddress = gson.toJson(localhost);\n+    assertEquals(\"\\\"\" + localhost.getHostAddress() + \"\\\"\", localInetAddress);\n+    \n+    InetAddress value = gson.fromJson(localInetAddress, InetAddress.class);\n+    assertEquals(localhost, value);\n+  } \n+}", "timestamp": 1294700628, "metainfo": ""}