{"sha": "117d8ea68ff953a271c492736ba3eed3bb209da2", "log": "Add TypeAdapterFactory support to @JsonAdapter.", "commit": "\n--- a/gson/src/main/java/com/google/gson/annotations/JsonAdapter.java\n+++ b/gson/src/main/java/com/google/gson/annotations/JsonAdapter.java\n \n package com.google.gson.annotations;\n \n+import com.google.gson.TypeAdapter;\n+import com.google.gson.TypeAdapterFactory;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n-\n-import com.google.gson.TypeAdapter;\n \n /**\n  * An annotation that indicates the Gson {@link TypeAdapter} to use with a class\n @Target({ElementType.TYPE, ElementType.FIELD})\n public @interface JsonAdapter {\n \n-  Class<? extends TypeAdapter<?>> value();\n+  /** Either a {@link TypeAdapter} or {@link TypeAdapterFactory}. */\n+  Class<?> value();\n \n }\n--- a/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java\n import com.google.gson.TypeAdapterFactory;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.internal.ConstructorConstructor;\n-import com.google.gson.internal.ObjectConstructor;\n import com.google.gson.reflect.TypeToken;\n \n /**\n   @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n   public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> targetType) {\n     JsonAdapter annotation = targetType.getRawType().getAnnotation(JsonAdapter.class);\n-    return annotation != null\n-        ? (TypeAdapter<T>) constructorConstructor.get(TypeToken.get(annotation.value())).construct()\n-        : null;\n+    if (annotation == null) {\n+      return null;\n+    }\n+    return (TypeAdapter<T>) getTypeAdapter(constructorConstructor, gson, targetType, annotation);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\n+  static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n+      TypeToken<?> fieldType, JsonAdapter annotation) {\n+    Class<?> value = annotation.value();\n+    if (TypeAdapter.class.isAssignableFrom(value)) {\n+          Class<TypeAdapter<?>> typeAdapter = (Class<TypeAdapter<?>>) value;\n+      return constructorConstructor.get(TypeToken.get(typeAdapter)).construct();\n+    }\n+    if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n+          Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n+      return constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n+          .construct()\n+          .create(gson, fieldType);\n+    }\n+\n+    throw new IllegalArgumentException(\n+        \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n   }\n }\n--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n+import static com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter;\n+\n /**\n  * Type adapter that reflects over the fields and methods of a class.\n  */\n \n   private TypeAdapter<?> getFieldAdapter(Gson gson, Field field, TypeToken<?> fieldType) {\n     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n-    return (annotation != null)\n-        ? constructorConstructor.get(TypeToken.get(annotation.value())).construct()\n-        : gson.getAdapter(fieldType);\n+    if (annotation != null) {\n+      TypeAdapter<?> adapter = getTypeAdapter(constructorConstructor, gson, fieldType, annotation);\n+      if (adapter != null) return adapter;\n+    }\n+    return gson.getAdapter(fieldType);\n   }\n \n   private Map<String, BoundField> getBoundFields(Gson context, TypeToken<?> type, Class<?> raw) {\n--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java\n \n package com.google.gson.functional;\n \n-import java.io.IOException;\n-import java.lang.reflect.Type;\n-\n-import junit.framework.TestCase;\n-\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonDeserializationContext;\n import com.google.gson.JsonSerializationContext;\n import com.google.gson.JsonSerializer;\n import com.google.gson.TypeAdapter;\n+import com.google.gson.TypeAdapterFactory;\n import com.google.gson.annotations.JsonAdapter;\n+import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+import java.io.IOException;\n+import java.lang.reflect.Type;\n+import junit.framework.TestCase;\n \n /**\n  * Functional tests for the {@link com.google.gson.annotations.JsonAdapter} annotation on classes.\n     User user = gson.fromJson(\"{'name':'Joel Leitch'}\", User.class);\n     assertEquals(\"Joel\", user.firstName);\n     assertEquals(\"Leitch\", user.lastName);\n+  }\n+\n+  public void testJsonAdapterFactoryInvoked() {\n+    Gson gson = new Gson();\n+    String json = gson.toJson(new C(\"bar\"));\n+    assertEquals(\"\\\"jsonAdapterFactory\\\"\", json);\n+    C c = gson.fromJson(\"\\\"bar\\\"\", C.class);\n+    assertEquals(\"jsonAdapterFactory\", c.value);\n   }\n \n   public void testRegisteredAdapterOverridesJsonAdapter() {\n     A(String value) {\n       this.value = value;\n     }\n-    private static final class JsonAdapter extends TypeAdapter<A> { \n+    static final class JsonAdapter extends TypeAdapter<A> {\n       @Override public void write(JsonWriter out, A value) throws IOException {\n         out.value(\"jsonAdapter\");\n       }\n       @Override public A read(JsonReader in) throws IOException {\n         in.nextString();\n         return new A(\"jsonAdapter\");\n+      }\n+    }\n+  }\n+\n+  @JsonAdapter(C.JsonAdapterFactory.class)\n+  private static class C {\n+    final String value;\n+    C(String value) {\n+      this.value = value;\n+    }\n+    static final class JsonAdapterFactory implements TypeAdapterFactory {\n+      public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\n+        return new TypeAdapter<T>() {\n+          @Override public void write(JsonWriter out, T value) throws IOException {\n+            out.value(\"jsonAdapterFactory\");\n+          }\n+          @Override public T read(JsonReader in) throws IOException {\n+            in.nextString();\n+            return (T) new C(\"jsonAdapterFactory\");\n+          }\n+        };\n       }\n     }\n   }\n--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.TypeAdapter;\n+import com.google.gson.TypeAdapterFactory;\n import com.google.gson.annotations.JsonAdapter;\n+import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n     assertEquals(\"{\\\"user\\\":\\\"UserClassAnnotationAdapter\\\"}\", json);\n     Computer computer = gson.fromJson(\"{'user':'Inderjeet Singh'}\", Computer.class);\n     assertEquals(\"UserClassAnnotationAdapter\", computer.user.name);\n+  }\n+\n+  public void testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault() {\n+    Gson gson = new Gson();\n+    String json = gson.toJson(new Gizmo(new Part(\"Part\")));\n+    assertEquals(\"{\\\"part\\\":\\\"GizmoPartTypeAdapterFactory\\\"}\", json);\n+    Gizmo computer = gson.fromJson(\"{'part':'Part'}\", Gizmo.class);\n+    assertEquals(\"GizmoPartTypeAdapterFactory\", computer.part.name);\n   }\n \n   public void testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter() {\n     }\n   }\n \n+  private static final class Gizmo {\n+    @JsonAdapter(GizmoPartTypeAdapterFactory.class)\n+    final Part part;\n+    Gizmo(Part part) {\n+      this.part = part;\n+    }\n+  }\n+\n   private static final class Part {\n     final String name;\n-    Part(String name) {\n+    public Part(String name) {\n       this.name = name;\n     }\n   }\n     @Override public Part read(JsonReader in) throws IOException {\n       in.nextString();\n       return new Part(\"PartJsonFieldAnnotationAdapter\");\n+    }\n+  }\n+\n+  private static class GizmoPartTypeAdapterFactory implements TypeAdapterFactory {\n+    public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\n+      return new TypeAdapter<T>() {\n+        @Override public void write(JsonWriter out, T value) throws IOException {\n+          out.value(\"GizmoPartTypeAdapterFactory\");\n+        }\n+        @SuppressWarnings(\"unchecked\")\n+        @Override public T read(JsonReader in) throws IOException {\n+          in.nextString();\n+          return (T) new Part(\"GizmoPartTypeAdapterFactory\");\n+        }\n+      };\n     }\n   }\n ", "timestamp": 1407171521, "metainfo": ""}