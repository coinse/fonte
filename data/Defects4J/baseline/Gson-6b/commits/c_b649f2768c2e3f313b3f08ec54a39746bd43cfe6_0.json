{"sha": "b649f2768c2e3f313b3f08ec54a39746bd43cfe6", "log": "Support unquoted single word strings in lenient mode!  Fixes issue 282.", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n         token = JsonToken.NUMBER;\n       } catch (NumberFormatException ignored) {\n         // this must be an unquoted string\n-        throw syntaxError(\"invalid number or unquoted string\");\n+        checkLenient();\n+        token = JsonToken.STRING;\n       }\n     }\n   }\n--- a/gson/src/test/java/com/google/gson/JsonParserTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonParserTest.java\n \n import com.google.gson.common.TestTypes.BagOfPrimitives;\n import com.google.gson.stream.JsonReader;\n-\n-import junit.framework.TestCase;\n-\n import java.io.CharArrayReader;\n import java.io.CharArrayWriter;\n import java.io.StringReader;\n+import junit.framework.TestCase;\n \n /**\n  * Unit test for {@link JsonParser}\n   }\n \n   public void testParseUnquotedStringArrayFails() {\n-    try {\n-      parser.parse(\"[a,b,c]\");\n-      fail();\n-    } catch (JsonSyntaxException expected) {}\n+    JsonElement element = parser.parse(\"[a,b,c]\");\n+    assertEquals(\"a\", element.getAsJsonArray().get(0).getAsString());\n+    assertEquals(\"b\", element.getAsJsonArray().get(1).getAsString());\n+    assertEquals(\"c\", element.getAsJsonArray().get(2).getAsString());\n+    assertEquals(3, element.getAsJsonArray().size());\n   }\n \n   public void testParseString() {\n   }\n \n   public void testParseUnquotedSingleWordStringFails() {\n-    try {\n-      parser.parse(\"Test\");\n-      fail();\n-    } catch (JsonSyntaxException expected) { }\n+    assertEquals(\"Test\", parser.parse(\"Test\").getAsString());\n   }\n \n   public void testParseUnquotedMultiWordStringFails() {\n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n   }\n \n   public void testUnquotedStringDeserializationFails() throws Exception {\n-    try {\n-      gson.fromJson(\"UnquotedSingleWord\", String.class);\n-      fail();\n-    } catch (JsonSyntaxException expected) { }\n+    assertEquals(\"UnquotedSingleWord\", gson.fromJson(\"UnquotedSingleWord\", String.class));\n \n     String value = \"String Blah Blah Blah...1, 2, 3\";\n     try {\n--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n \n package com.google.gson.stream;\n \n-import junit.framework.TestCase;\n-\n import java.io.IOException;\n import java.io.StringReader;\n+import junit.framework.TestCase;\n \n public final class JsonReaderTest extends TestCase {\n \n     JsonReader reader = new JsonReader(new StringReader(\"[a]\"));\n     reader.setLenient(true);\n     reader.beginArray();\n-    try {\n-      reader.nextString();\n-      fail();\n-    } catch (MalformedJsonException expected) { }\n+    assertEquals(\"a\", reader.nextString());\n   }\n \n   public void testStrictSingleQuotedStrings() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\")]}' []\"));\n     reader.setLenient(true);\n     try {\n-      reader.beginArray();\n+      assertEquals(\")\", reader.nextString());\n+      reader.nextString();\n       fail();\n     } catch (IOException expected) {\n     }", "timestamp": 1297301787, "metainfo": ""}