{"sha": "f3c0a96f444bd553b137144141ad20434e545322", "log": "Support incoming nulls in all default type adapters", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n \n   public static final TypeAdapter<Boolean> BOOLEAN = new TypeAdapter<Boolean>() {\n     public Boolean read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull(); // TODO: does this belong here?\n+        return null;\n+      }\n       return reader.nextBoolean();\n     }\n     public void write(JsonWriter writer, Boolean value) throws IOException {\n \n   public static final TypeAdapter<Number> BYTE = new TypeAdapter<Number>() {\n     public Number read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull(); // TODO: does this belong here?\n+        return null;\n+      }\n       try {\n         int intValue = reader.nextInt();\n         return (byte) intValue;\n \n   public static final TypeAdapter<Number> SHORT = new TypeAdapter<Number>() {\n     public Number read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull(); // TODO: does this belong here?\n+        return null;\n+      }\n       try {\n         return (short) reader.nextInt();\n       } catch (NumberFormatException e) {\n \n   public static final TypeAdapter<Number> INTEGER = new TypeAdapter<Number>() {\n     public Number read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull(); // TODO: does this belong here?\n+        return null;\n+      }\n       try {\n         return reader.nextInt();\n       } catch (NumberFormatException e) {\n \n   public static final TypeAdapter<Number> LONG = new TypeAdapter<Number>() {\n     public Number read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull(); // TODO: does this belong here?\n+        return null;\n+      }\n       try {\n         return reader.nextLong();\n       } catch (NumberFormatException e) {\n \n   public static final TypeAdapter<Number> FLOAT = new TypeAdapter<Number>() {\n     public Number read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull(); // TODO: does this belong here?\n+        return null;\n+      }\n       return (float) reader.nextDouble();\n     }\n     public void write(JsonWriter writer, Number value) throws IOException {\n \n   public static final TypeAdapter<Number> DOUBLE = new TypeAdapter<Number>() {\n     public Number read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull(); // TODO: does this belong here?\n+        return null;\n+      }\n       return reader.nextDouble();\n     }\n     public void write(JsonWriter writer, Number value) throws IOException {\n \n   public static final TypeAdapter<StringBuilder> STRING_BUILDER = new TypeAdapter<StringBuilder>() {\n     public StringBuilder read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull(); // TODO: does this belong here?\n+        return null;\n+      }\n       return new StringBuilder(reader.nextString());\n     }\n     public void write(JsonWriter writer, StringBuilder value) throws IOException {\n \n   public static final TypeAdapter<StringBuffer> STRING_BUFFER = new TypeAdapter<StringBuffer>() {\n     public StringBuffer read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull(); // TODO: does this belong here?\n+        return null;\n+      }\n       return new StringBuffer(reader.nextString());\n     }\n     public void write(JsonWriter writer, StringBuffer value) throws IOException {\n \n   public static final TypeAdapter<URL> URL = new TypeAdapter<URL>() {\n     public URL read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull(); // TODO: does this belong here?\n+        return null;\n+      }\n       String nextString = reader.nextString();\n       return \"null\".equals(nextString) ? null : new URL(nextString);\n     }\n \n   public static final TypeAdapter<URI> URI = new TypeAdapter<URI>() {\n     public URI read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull(); // TODO: does this belong here?\n+        return null;\n+      }\n       try {\n         String nextString = reader.nextString();\n         return \"null\".equals(nextString) ? null : new URI(nextString);\n \n   public static final TypeAdapter<InetAddress> INET_ADDRESS = new TypeAdapter<InetAddress>() {\n     public InetAddress read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull(); // TODO: does this belong here?\n+        return null;\n+      }\n       return InetAddress.getByName(reader.nextString());\n     }\n     public void write(JsonWriter writer, InetAddress value) throws IOException {\n \n   public static final TypeAdapter<UUID> UUID = new TypeAdapter<UUID>() {\n     public UUID read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull(); // TODO: does this belong here?\n+        return null;\n+      }\n       return java.util.UUID.fromString(reader.nextString());\n     }\n     public void write(JsonWriter writer, UUID value) throws IOException {\n \n   public static final TypeAdapter<Locale> LOCALE = new TypeAdapter<Locale>() {\n     public Locale read(JsonReader reader) throws IOException {\n+      if (reader.peek() == JsonToken.NULL) {\n+        reader.nextNull(); // TODO: does this belong here?\n+        return null;\n+      }\n       String locale = reader.nextString();\n       StringTokenizer tokenizer = new StringTokenizer(locale, \"_\");\n       String language = null;", "timestamp": 1315547210, "metainfo": ""}