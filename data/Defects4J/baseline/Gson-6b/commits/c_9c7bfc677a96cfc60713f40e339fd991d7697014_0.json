{"sha": "9c7bfc677a96cfc60713f40e339fd991d7697014", "log": "Allow cache size to be configured.", "commit": "\n--- a/gson/src/main/java/com/google/gson/FieldAttributes.java\n+++ b/gson/src/main/java/com/google/gson/FieldAttributes.java\n  * @since 1.4\n  */\n public final class FieldAttributes {\n-  // TODO(Joel): Fix how we configure this cache in a follow-up CL.\n+  private static final String MAX_CACHE_PROPERTY_NAME =\n+      \"com.google.gson.annotation_cache_size_hint\";\n+  \n   private static final Cache<Pair<Class<?>, String>, Collection<Annotation>> ANNOTATION_CACHE =\n-      new LruCache<Pair<Class<?>,String>, Collection<Annotation>>(1500);\n+      new LruCache<Pair<Class<?>,String>, Collection<Annotation>>(getMaxCacheSize());\n \n   private final Class<?> parentClazz;\n   private final Field field;\n     isSynthetic = f.isSynthetic();\n     modifiers = f.getModifiers();\n     field = f;\n+  }\n+\n+  private static int getMaxCacheSize() {\n+    final int defaultMaxCacheSize = 2000;\n+    try {\n+      String propertyValue = System.getProperty(\n+          MAX_CACHE_PROPERTY_NAME, String.valueOf(defaultMaxCacheSize));\n+      return Integer.parseInt(propertyValue);\n+    } catch (NumberFormatException e) {\n+      return defaultMaxCacheSize;\n+    }\n   }\n \n   /**\n--- a/gson/src/test/java/com/google/gson/LruCacheTest.java\n+++ b/gson/src/test/java/com/google/gson/LruCacheTest.java\n   }\n   \n   public void testCacheEviction() throws Exception {\n-    Cache<String, Integer> cache = new LruCache<String, Integer>(3);\n+    Cache<String, Integer> cache = new LruCache<String, Integer>(5);\n \n     cache.addElement(\"key1\", 1);\n     cache.addElement(\"key2\", 2);\n     cache.addElement(\"key3\", 3);\n+    cache.addElement(\"key4\", 4);\n+    cache.addElement(\"key5\", 5);\n     assertEquals(1, cache.getElement(\"key1\").intValue());\n     assertEquals(2, cache.getElement(\"key2\").intValue());\n     assertEquals(3, cache.getElement(\"key3\").intValue());\n+    assertEquals(4, cache.getElement(\"key4\").intValue());\n+    assertEquals(5, cache.getElement(\"key5\").intValue());\n \n     // Access key1 to show key2 will be evicted (shows not a FIFO cache)\n     cache.getElement(\"key1\");\n-    cache.addElement(\"key4\", 4);\n+    cache.getElement(\"key3\");\n+    cache.addElement(\"key6\", 6);\n+    cache.addElement(\"key7\", 7);\n     assertEquals(1, cache.getElement(\"key1\").intValue());\n     assertNull(cache.getElement(\"key2\"));\n     assertEquals(3, cache.getElement(\"key3\").intValue());\n-    assertEquals(4, cache.getElement(\"key4\").intValue());\n+    assertNull(cache.getElement(\"key4\"));\n+    assertEquals(5, cache.getElement(\"key5\").intValue());\n+    assertEquals(6, cache.getElement(\"key6\").intValue());\n+    assertEquals(7, cache.getElement(\"key7\").intValue());\n   }\n }", "timestamp": 1274302047, "metainfo": ""}