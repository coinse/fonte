{"sha": "7e05cde8131a04e418d42c41db37ca4a5e5c6b5e", "log": "Added ability to specify a different ID than the Id class for a RestResource.", "commit": "\n--- a/wsclient/src/main/java/com/google/gson/rest/client/RestClient.java\n+++ b/wsclient/src/main/java/com/google/gson/rest/client/RestClient.java\n \n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n+import com.google.gson.rest.definition.ID;\n import com.google.gson.rest.definition.RestCallSpec;\n import com.google.gson.rest.definition.RestRequest;\n import com.google.gson.rest.definition.RestResource;\n     }\n   }\n   \n-  public <R extends RestResource<R>> RestResponse<R> getResponse(\n-      RestCallSpec callSpec, RestRequest<R> request) {\n+  public <I extends ID, R extends RestResource<I, R>> RestResponse<I, R> getResponse(\n+      RestCallSpec callSpec, RestRequest<I, R> request) {\n     Gson gson = new GsonBuilder().setVersion(callSpec.getVersion()).create();\n     return getResponse(callSpec, request, gson);\n   }\n \n-  public <R extends RestResource<R>> RestResponse<R> getResponse(\n-      RestCallSpec callSpec, RestRequest<R> request, Gson gson) {\n+  public <I extends ID, R extends RestResource<I, R>> RestResponse<I, R> getResponse(\n+      RestCallSpec callSpec, RestRequest<I, R> request, Gson gson) {\n     HttpURLConnection conn = null;\n     try {\n       URL webServiceUrl = getWebServiceUrl(callSpec);\n    * Use this method if you want to mange the HTTP Connection yourself. This is useful when you\n    * want to use HTTP pipelining.\n    */\n-  public <R extends RestResource<R>> RestResponse<R> getResponse(\n-      RestCallSpec callSpec, RestRequest<R> request, Gson gson, HttpURLConnection conn) {\n+  public <I extends ID, R extends RestResource<I, R>> RestResponse<I, R> getResponse(\n+      RestCallSpec callSpec, RestRequest<I, R> request, Gson gson, HttpURLConnection conn) {\n     try {\n       if (logger != null) {\n         URL webServiceUrl = getWebServiceUrl(callSpec);\n       }\n       RestRequestSender requestSender = new RestRequestSender(gson, logLevel);\n       requestSender.send(conn, request);\n-      RestResponseReceiver<R> responseReceiver =\n-        new RestResponseReceiver<R>(gson, callSpec.getResponseSpec(), logLevel);\n+      RestResponseReceiver<I, R> responseReceiver =\n+        new RestResponseReceiver<I, R>(gson, callSpec.getResponseSpec(), logLevel);\n       return responseReceiver.receive(conn);\n     } catch (IllegalArgumentException e) {\n       throw new WebServiceSystemException(e);\n--- a/wsclient/src/main/java/com/google/gson/rest/client/RestRequestSender.java\n+++ b/wsclient/src/main/java/com/google/gson/rest/client/RestRequestSender.java\n import java.util.logging.Logger;\n \n import com.google.gson.Gson;\n+import com.google.gson.rest.definition.ID;\n import com.google.gson.rest.definition.RestRequest;\n import com.google.gson.rest.definition.RestResource;\n import com.google.gson.webservice.definition.HeaderMap;\n     this.logLevel = logLevel;\n   }\n   \n-  public <R extends RestResource<R>> void send(HttpURLConnection conn, RestRequest<R> request) {    \n+  public <I extends ID, R extends RestResource<I, R>> void send(HttpURLConnection conn, RestRequest<I, R> request) {    \n     try {\n       conn.setRequestMethod(request.getHttpMethod().toString());\n       setHeader(conn, \"Content-Type\", request.getContentType(), true);\n--- a/wsclient/src/main/java/com/google/gson/rest/client/RestResponseReceiver.java\n+++ b/wsclient/src/main/java/com/google/gson/rest/client/RestResponseReceiver.java\n  */\n package com.google.gson.rest.client;\n \n-import com.google.gson.Gson;\n-import com.google.gson.rest.definition.RestResource;\n-import com.google.gson.rest.definition.RestResponse;\n-import com.google.gson.rest.definition.RestResponseSpec;\n-import com.google.gson.webservice.definition.ContentBodySpec;\n-import com.google.gson.webservice.definition.HeaderMap;\n-import com.google.gson.webservice.definition.HeaderMapSpec;\n-import com.google.gson.webservice.definition.WebServiceSystemException;\n-import com.google.gson.wsclient.internal.utils.ConnectionPreconditions;\n-\n import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.InputStreamReader;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n+import com.google.gson.Gson;\n+import com.google.gson.rest.definition.ID;\n+import com.google.gson.rest.definition.RestResource;\n+import com.google.gson.rest.definition.RestResponse;\n+import com.google.gson.rest.definition.RestResponseSpec;\n+import com.google.gson.webservice.definition.ContentBodySpec;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n+import com.google.gson.wsclient.internal.utils.ConnectionPreconditions;\n+\n /**\n  * Receives a response coming on an {@link HttpURLConnection}.\n  * \n  * @author inder\n  */\n-public final class RestResponseReceiver<R extends RestResource<R>> {\n+public final class RestResponseReceiver<I extends ID, R extends RestResource<I, R>> {\n   private final Gson gson;\n   private final RestResponseSpec spec;\n   private final Logger logger;\n     this.logLevel = logLevel;\n   }\n   \n-  public RestResponse<R> receive(HttpURLConnection conn) {\n+  public RestResponse<I, R> receive(HttpURLConnection conn) {\n     try {\n       HeaderMapSpec paramSpec = spec.getHeadersSpec();\n       Type bodyType = spec.getResourceType();\n       // read response\n       HeaderMap responseParams = readResponseHeaders(conn, paramSpec);\n       R responseBody = readResponseBody(conn, bodyType);\n-      return new RestResponse<R>(responseParams, responseBody, bodyType);\n+      return new RestResponse<I, R>(responseParams, responseBody, bodyType);\n     } catch (IOException e) {\n       throw new WebServiceSystemException(e);\n     }\n--- a/wsdef/src/main/java/com/google/gson/rest/definition/HasId.java\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/HasId.java\n  *\n  * @param <R> type of object\n  */\n-public interface HasId<R> {\n-  public Id<R> getId();\n-  public void setId(Id<R> id);\n+public interface HasId<I extends ID> {\n+  public I getId();\n+  public void setId(I id);\n   public boolean hasId();\n }\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/ID.java\n+package com.google.gson.rest.definition;\n+\n+public interface ID {\n+  public static final long INVALID_ID = 0L;\n+\n+  public long getValue();\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/IDFactory.java\n+package com.google.gson.rest.definition;\n+\n+import java.lang.reflect.Type;\n+\n+public class IDFactory<I extends ID> {\n+  private final Class<? super I> classOfI;\n+  private final Type typeOfId;\n+\n+  public IDFactory(Class<? super I> classOfI, Type typeOfId) {\n+    this.classOfI = classOfI;\n+    this.typeOfId = typeOfId;\n+  }\n+\n+  public I createId(long value) {\n+    if (classOfI.isAssignableFrom(Id.class)) {\n+      return (I)Id.get(value, typeOfId);\n+    } \n+    throw new UnsupportedOperationException();\n+  }\n+}\n--- a/wsdef/src/main/java/com/google/gson/rest/definition/Id.java\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/Id.java\n  *\n  * @param <R> type variable for the rest resource\n  */\n-public final class Id<R> {\n+public final class Id<R> implements ID {\n   private static final long NULL_VALUE = -1;\n   private final long value;\n   private final Type typeOfId;\n     this.typeOfId = typeOfId;\n   }\n \n+  @Override\n   public long getValue() {\n     return value;\n   }\n--- a/wsdef/src/main/java/com/google/gson/rest/definition/MetaData.java\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/MetaData.java\n  *\n  * @param <R> The resource\n  */\n-public final class MetaData<R extends RestResource<R>> {\n+public final class MetaData<I extends ID, R extends RestResource<I, R>> {\n \n   private final Map<String, String> map;\n   private final transient Map<Object, Object> mapTransient;\n \n-  public static <RS extends RestResource<RS>> MetaData<RS> create() {\n-    return new MetaData<RS>();\n+  public static <II extends ID, RS extends RestResource<II, RS>> MetaData<II, RS> create() {\n+    return new MetaData<II, RS>();\n   }\n \n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-  private static MetaData<?> createTypeUnsafe(Map<String, String> values) {\n+  private static MetaData<?, ?> createTypeUnsafe(Map<String, String> values) {\n     return new MetaData(values);\n   }\n \n    * Gson Type adapter for {@link MetaData}. The serialized representation on wire is just a\n    * Map<String, String>\n    */\n-  public static final class GsonTypeAdapter implements JsonSerializer<MetaData<?>>,\n-    JsonDeserializer<MetaData<?>>{\n+  public static final class GsonTypeAdapter implements JsonSerializer<MetaData<?, ?>>,\n+    JsonDeserializer<MetaData<?, ?>>{\n \n     private static final Type MAP_TYPE = new TypeToken<Map<String, String>>(){}.getType();\n \n     @Override\n-    public MetaData<?> deserialize(JsonElement json, Type typeOfT,\n+    public MetaData<?, ?> deserialize(JsonElement json, Type typeOfT,\n         JsonDeserializationContext context) throws JsonParseException {\n       Map<String, String> map = context.deserialize(json, MAP_TYPE);\n       return MetaData.createTypeUnsafe(map);\n     }\n \n     @Override\n-    public JsonElement serialize(MetaData<?> src, Type typeOfSrc,\n+    public JsonElement serialize(MetaData<?, ?> src, Type typeOfSrc,\n         JsonSerializationContext context) {\n       return context.serialize(src.map, MAP_TYPE);\n     }\n--- a/wsdef/src/main/java/com/google/gson/rest/definition/RestCall.java\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/RestCall.java\n  * \n  * @author inder\n  */\n-public final class RestCall<R extends RestResource<R>> {\n+public final class RestCall<I extends ID, R extends RestResource<I, R>> {\n   \n   private final RestCallSpec callSpec;\n-  private final RestRequest<R> request;\n-  private final RestResponse<R> response;\n+  private final RestRequest<I, R> request;\n+  private final RestResponse<I, R> response;\n   \n-  public RestCall(RestCallSpec callSpec, RestRequest<R> request, RestResponse<R> response) {\n+  public RestCall(RestCallSpec callSpec, RestRequest<I, R> request, RestResponse<I, R> response) {\n     this.callSpec = callSpec;\n     this.request = request;\n     this.response = response;\n     return callSpec;\n   }\n   \n-  public RestRequest<R> getRequest() {\n+  public RestRequest<I, R> getRequest() {\n     return request;\n   }\n \n-  public RestResponse<R> getResponse() {\n+  public RestResponse<I, R> getResponse() {\n     return response;\n   }\n }\n--- a/wsdef/src/main/java/com/google/gson/rest/definition/RestRequest.java\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/RestRequest.java\n  */\n package com.google.gson.rest.definition;\n \n+import java.lang.reflect.Type;\n+\n import com.google.gson.webservice.definition.HeaderMap;\n import com.google.gson.webservice.definition.HttpMethod;\n import com.google.gson.webservice.definition.TypedKey;\n-\n-import java.lang.reflect.Type;\n \n /**\n  * The data associated with a Web service request. This includes HTTP request header parameters \n  * \n  * @author inder\n  */\n-public final class RestRequest<R extends RestResource<R>> {\n+public final class RestRequest<I extends ID, R extends RestResource<I, R>> {\n   public static final String JSON_CONTENT_TYPE = \"application/json\";\n \n   private final HttpMethod method;\n     this.spec = new RestRequestSpec(requestHeaders.getSpec(), resourceType);\n   }\n \n-  public Id<R> getId() {\n+  public I getId() {\n     return body.getId();\n   }\n \n--- a/wsdef/src/main/java/com/google/gson/rest/definition/RestResource.java\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/RestResource.java\n  *\n  * @param <R> the rest resource type\n  */\n-public interface RestResource<R> extends HasId<R> {\n+public interface RestResource<I extends ID, R> extends HasId<I> {\n }\n--- a/wsdef/src/main/java/com/google/gson/rest/definition/RestResponse.java\n+++ b/wsdef/src/main/java/com/google/gson/rest/definition/RestResponse.java\n  * \n  * @author inder\n  */\n-public final class RestResponse<R extends RestResource<R>> {\n+public final class RestResponse<I extends ID, R extends RestResource<I, R>> {\n   \n   private final HeaderMap headers;\n   private final R body;\n   private final RestResponseSpec spec;\n   \n-  public static class Builder<RS extends RestResource<RS>> {\n+  public static class Builder<II extends ID, RS extends RestResource<II, RS>> {\n     private final HeaderMap.Builder headers;\n     private RS body;\n     private final RestResponseSpec spec;\n       headers = new HeaderMap.Builder(spec.getHeadersSpec());\n     }\n     \n-    public <T> Builder<RS> putHeader(TypedKey<T> paramName, T content) {\n+    public <T> Builder<II, RS> putHeader(TypedKey<T> paramName, T content) {\n       headers.put(paramName.getName(), content, paramName.getClassOfT());\n       return this;\n     }\n     \n-    public Builder<RS> setBody(RS body) {\n+    public Builder<II, RS> setBody(RS body) {\n       this.body = body;\n       return this;\n     }\n \n-    public RestResponse<RS> build() {\n-      return new RestResponse<RS>(spec, headers.build(), body);\n+    public RestResponse<II, RS> build() {\n+      return new RestResponse<II, RS>(spec, headers.build(), body);\n     }\n   }\n   \n--- a/wsf/src/main/java/com/google/gson/rest/server/IdMap.java\n+++ b/wsf/src/main/java/com/google/gson/rest/server/IdMap.java\n import java.util.logging.Logger;\n \n import com.google.gson.rest.definition.HasId;\n-import com.google.gson.rest.definition.Id;\n+import com.google.gson.rest.definition.ID;\n+import com.google.gson.rest.definition.IDFactory;\n \n /**\n  * This class provides a type-safe map to access values associated with Ids\n  *\n  * @param <T> the type of the objects being kept in the map\n  */\n-public class IdMap<T extends HasId<T>> {\n+public class IdMap<I extends ID, T extends HasId<I>> {\n   public static final Logger LOG = Logger.getLogger(IdMap.class.getName());\n-  protected final Map<Id<T>, T> map;\n+  protected final Map<I, T> map;\n   private volatile long nextAvailableId;\n-  private final Type typeOfId;\n+  private final IDFactory<I> idFactory;\n \n   /**\n    * Use {@link #create(Type)} instead of constructor\n    */\n-  protected IdMap(Type typeOfId) {\n-    this.typeOfId = typeOfId;\n-    map = new ConcurrentHashMap<Id<T>, T>();\n+  protected IdMap(Class<? super I> classOfI, Type typeOfId) {\n+    map = new ConcurrentHashMap<I, T>();\n     nextAvailableId = 0;\n+    this.idFactory = new IDFactory<I>(classOfI, typeOfId);\n   }\n \n-  public T get(Id<T> id) {\n+  public T get(I id) {\n     return map.get(id);\n   }\n \n     return obj;\n   }\n \n-  public void delete(Id<T> id) {\n+  public void delete(I id) {\n     T removed = map.remove(id);\n     if (removed == null) {\n       LOG.log(Level.WARNING, \"Attempted to delete non-existent id: {0}\", id);\n     }\n   }\n \n-  public boolean exists(Id<T> id) {\n+  public boolean exists(I id) {\n     return map.containsKey(id);\n   }\n \n-  public synchronized Id<T> getNextId() {\n+  public synchronized I getNextId() {\n     long id = nextAvailableId++;\n-    return Id.get(id, typeOfId);\n+    return idFactory.createId(id);\n   }\n \n-  public static <S extends HasId<S>> IdMap<S> create(Type typeOfId) {\n-    return new IdMap<S>(typeOfId);\n+  public static <II extends ID, S extends HasId<II>> IdMap<II, S> create(Class<? super II> classOfII, Type typeOfId) {\n+    return new IdMap<II, S>(classOfII, typeOfId);\n   }\n }\n--- a/wsf/src/main/java/com/google/gson/rest/server/MetaDataMap.java\n+++ b/wsf/src/main/java/com/google/gson/rest/server/MetaDataMap.java\n import java.util.HashMap;\n import java.util.Map;\n \n-import com.google.gson.rest.definition.Id;\n+import com.google.gson.rest.definition.ID;\n import com.google.gson.rest.definition.MetaData;\n import com.google.gson.rest.definition.RestResource;\n \n  *\n  * @param <R> the rest resource for whic the metadata is being stored\n  */\n-public class MetaDataMap<R extends RestResource<R>> {\n-  private final Map<Id<R>, MetaData<R>> map;\n+public class MetaDataMap<I extends ID, R extends RestResource<I, R>> {\n+  private final Map<I, MetaData<I, R>> map;\n \n   public MetaDataMap() {\n-    this.map = new HashMap<Id<R>, MetaData<R>>();\n+    this.map = new HashMap<I, MetaData<I, R>>();\n   }\n \n-  public MetaData<R> get(Id<R> resourceId) {\n-    MetaData<R> metaData = map.get(resourceId);\n+  public MetaData<I, R> get(I resourceId) {\n+    MetaData<I, R> metaData = map.get(resourceId);\n     if (metaData == null) {\n       metaData = MetaData.create();\n       map.put(resourceId, metaData);\n--- a/wsf/src/main/java/com/google/gson/rest/server/Repository.java\n+++ b/wsf/src/main/java/com/google/gson/rest/server/Repository.java\n package com.google.gson.rest.server;\n \n import com.google.gson.rest.definition.HasId;\n-import com.google.gson.rest.definition.Id;\n+import com.google.gson.rest.definition.ID;\n \n /**\n  * An interface for a repository of rest resources. Meant for abstracting the server-side\n  *\n  * @param <R> the type of rest resource\n  */\n-public interface Repository<R extends HasId<R>> {\n-  public R get(Id<R> resourceId);\n+public interface Repository<I extends ID, R extends HasId<I>> {\n+  public R get(I resourceId);\n \n   /**\n    * if resource.getId() == null, inserts the resource after assigning it a new id.\n    */\n   public R put(R resource);\n \n-  public void delete(Id<R> resourceId);\n+  public void delete(I resourceId);\n   \n-  public boolean exists(Id<R> resourceId);\n+  public boolean exists(I resourceId);\n \n   /**\n    * Ensures that the specified resource has a valid id that will be used when it is saved\n    */\n-  public Id<R> assignId(R resource);\n+  public I assignId(R resource);\n \n-  public Id<R> getNextId();\n+  public I getNextId();\n }\n--- a/wsf/src/main/java/com/google/gson/rest/server/RepositoryInMemory.java\n+++ b/wsf/src/main/java/com/google/gson/rest/server/RepositoryInMemory.java\n package com.google.gson.rest.server;\n \n import com.google.common.base.Preconditions;\n-import com.google.gson.rest.definition.Id;\n+import com.google.gson.rest.definition.ID;\n import com.google.gson.rest.definition.MetaData;\n import com.google.gson.rest.definition.RestResource;\n \n  *\n  * @param <R> Type variable for the resource\n  */\n-public class RepositoryInMemory<R extends RestResource<R>> implements Repository<R> {\n+public class RepositoryInMemory<I extends ID, R extends RestResource<I, R>> implements Repository<I, R> {\n   private static final String METADATA_KEY_IS_FRESHLY_ASSIGNED_ID = \"isFreshlyAssignedId\";\n \n-  private final IdMap<R> resources;\n-  private final MetaDataMap<R> metaDataMap;\n+  private final IdMap<I, R> resources;\n+  private final MetaDataMap<I, R> metaDataMap;\n \n-  public RepositoryInMemory(Class<? super R> classOfResource) {\n-    this.resources = IdMap.create(classOfResource);\n-    this.metaDataMap = new MetaDataMap<R>();\n+  public RepositoryInMemory(Class<? super I> classOfI, Class<? super R> classOfResource) {\n+    this.resources = IdMap.create(classOfI, classOfResource);\n+    this.metaDataMap = new MetaDataMap<I, R>();\n   }\n \n   @Override\n-  public R get(Id<R> resourceId) {\n+  public R get(I resourceId) {\n     return resources.get(resourceId);\n   }\n \n-  public boolean isFreshlyAssignedId(Id<R> resourceId) {\n-    MetaData<R> metaData = metaDataMap.get(resourceId);\n+  public boolean isFreshlyAssignedId(I resourceId) {\n+    MetaData<I, R> metaData = metaDataMap.get(resourceId);\n     if (metaData == null) {\n       return false;\n     }\n       // insert semantics\n       assignId(resource);\n     } else {\n-      Id<R> id = resource.getId();\n+      I id = resource.getId();\n       if (!isFreshlyAssignedId(id)) {\n         // update semantics\n         Preconditions.checkState(resources.exists(resource.getId()));\n   }\n \n   @Override\n-  public void delete(Id<R> resourceId) {\n+  public void delete(I resourceId) {\n     resources.delete(resourceId);\n   }\n \n   @Override\n-  public boolean exists(Id<R> resourceId) {\n+  public boolean exists(I resourceId) {\n     return resources.exists(resourceId);\n   }\n \n   @Override\n-  public Id<R> getNextId() {\n+  public I getNextId() {\n     return resources.getNextId();\n   }\n \n   @Override\n-  public Id<R> assignId(R resource) {\n+  public I assignId(R resource) {\n     if (resource.getId() == null) {\n-      Id<R> id = resources.getNextId();\n+      I id = resources.getNextId();\n       resource.setId(id);\n       metaDataMap.get(id).putBoolean(METADATA_KEY_IS_FRESHLY_ASSIGNED_ID, true);\n     }\n--- a/wsf/src/main/java/com/google/gson/rest/server/RestRequestReceiver.java\n+++ b/wsf/src/main/java/com/google/gson/rest/server/RestRequestReceiver.java\n \n import com.google.gson.Gson;\n import com.google.gson.JsonParseException;\n+import com.google.gson.rest.definition.ID;\n import com.google.gson.rest.definition.RestRequest;\n import com.google.gson.rest.definition.RestRequestSpec;\n import com.google.gson.rest.definition.RestResource;\n  * \n  * @author inder\n  */\n-public final class RestRequestReceiver<R extends RestResource<R>> {\n+public final class RestRequestReceiver<I extends ID, R extends RestResource<I, R>> {\n \n   private final Gson gson;\n   private final RestRequestSpec spec;\n     this.spec = spec;\n   }\n   \n-  public RestRequest<R> receive(HttpServletRequest request) {\n+  public RestRequest<I, R> receive(HttpServletRequest request) {\n     try {\n       HeaderMap requestParams = buildRequestParams(request);\n       R requestBody = buildRequestBody(request);\n       \n       HttpMethod method = HttpMethod.getMethod(request.getMethod());\n-      return new RestRequest<R>(method, requestParams, requestBody, spec.getResourceType());\n+      return new RestRequest<I, R>(method, requestParams, requestBody, spec.getResourceType());\n     } catch (IOException e) {\n       throw new WebServiceSystemException(e);\n     } catch (JsonParseException e) {\n--- a/wsf/src/main/java/com/google/gson/rest/server/RestResponseBuilder.java\n+++ b/wsf/src/main/java/com/google/gson/rest/server/RestResponseBuilder.java\n  */\n package com.google.gson.rest.server;\n \n-import com.google.gson.rest.definition.Id;\n+import com.google.gson.rest.definition.ID;\n import com.google.gson.rest.definition.RestCallSpec;\n import com.google.gson.rest.definition.RestRequest;\n import com.google.gson.rest.definition.RestResource;\n import com.google.gson.rest.definition.RestResponse;\n import com.google.gson.webservice.definition.HttpMethod;\n \n-public abstract class RestResponseBuilder<R extends RestResource<R>> {\n-  protected final Repository<R> resources;\n+public abstract class RestResponseBuilder<I extends ID, R extends RestResource<I, R>> {\n+  protected final Repository<I, R> resources;\n \n-  public RestResponseBuilder(Repository<R> resources) {\n+  public RestResponseBuilder(Repository<I, R> resources) {\n     this.resources = resources;\n   }\n \n-  public void buildResponse(RestCallSpec callSpec, RestRequest<R> request,\n-      RestResponse.Builder<R> responseBuilder) {\n+  public void buildResponse(RestCallSpec callSpec, RestRequest<I, R> request,\n+      RestResponse.Builder<I, R> responseBuilder) {\n     HttpMethod method = request.getMethod();\n     R responseBody = null;\n     switch (method) {\n     responseBuilder.setBody(responseBody);\n   }\n \n-  public R get(Id<R> resourceId) {\n+  public R get(I resourceId) {\n     return resources.get(resourceId);\n   }\n \n     return resources.put(resource);\n   }\n \n-  public void delete(Id<R> resourceId) {\n+  public void delete(I resourceId) {\n     resources.delete(resourceId);\n   }\n \n--- a/wsf/src/main/java/com/google/gson/rest/server/RestResponseSender.java\n+++ b/wsf/src/main/java/com/google/gson/rest/server/RestResponseSender.java\n import javax.servlet.http.HttpServletResponse;\n \n import com.google.gson.Gson;\n+import com.google.gson.rest.definition.ID;\n import com.google.gson.rest.definition.RestResource;\n import com.google.gson.rest.definition.RestResponse;\n import com.google.gson.webservice.definition.ContentBodySpec;\n  * \n  * @author inder\n  */\n-public final class RestResponseSender<R extends RestResource<R>> {\n+public final class RestResponseSender<I extends ID, R extends RestResource<I, R>> {\n   private static final Logger logger = Logger.getLogger(RestResponseSender.class.getCanonicalName());\n \n   private Gson gson;\n     this.gson = gson;\n   }\n   \n-  public void send(HttpServletResponse conn, RestResponse<R> response) {\n+  public void send(HttpServletResponse conn, RestResponse<I, R> response) {\n     try {\n       sendHeaders(conn, response.getHeaders());\n       sendBody(conn, response.getBody());", "timestamp": 1288884343, "metainfo": ""}