{"sha": "5af0b16641ffd0422ea495b8e542ad1e29cc1735", "log": "Updating Map tests.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/MapTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n     map.put(\"b\", \"string\");\n     String json = gson.toJson(map);\n     assertTrue(json.contains(\"\\\"a\\\":1\"));\n-    assertTrue(json.contains(\"\\\"b\\\":\\\"string\\\"\"));    \n-  }\n-  \n+    assertTrue(json.contains(\"\\\"b\\\":\\\"string\\\"\"));\n+  }\n+\n   public void testMapSerializationEmpty() {\n     Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n     Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n     String json = gson.toJson(map, typeOfMap);\n     assertEquals(\"{}\", json);\n   }\n-  \n+\n   public void testMapDeserializationEmpty() {\n     Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n     Map<String, Integer> map = gson.fromJson(\"{}\", typeOfMap);\n     assertTrue(map.isEmpty());\n   }\n-  \n+\n   public void testMapSerializationWithNullValue() {\n     Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n     map.put(\"abc\", null);\n     Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n     String json = gson.toJson(map, typeOfMap);\n-    \n+\n     // Maps are represented as JSON objects, so ignoring null field\n     assertEquals(\"{}\", json);\n   }\n-  \n+\n   public void testMapDeserializationWithNullValue() {\n     Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n     Map<String, Integer> map = gson.fromJson(\"{\\\"abc\\\":null}\", typeOfMap);\n     assertEquals(1, map.size());\n     assertNull(map.get(\"abc\"));\n   }\n-  \n+\n   public void testMapSerializationWithNullValueButSerializeNulls() {\n     gson = new GsonBuilder().serializeNulls().create();\n     Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n \n     assertEquals(\"{\\\"abc\\\":null}\", json);\n   }\n-  \n+\n   public void testMapSerializationWithNullKey() {\n     Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n     map.put(null, 123);\n \n     assertEquals(\"{\\\"null\\\":123}\", json);\n   }\n-  \n+\n   public void testMapDeserializationWithNullKey() {\n     Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n     Map<String, Integer> map = gson.fromJson(\"{\\\"null\\\":123}\", typeOfMap);\n     assertEquals(1, map.size());\n     assertNull(map.get(null));\n   }\n-  \n+\n   public void testMapSerializationWithIntegerKeys() {\n     Map<Integer, String> map = new LinkedHashMap<Integer, String>();\n     map.put(123, \"456\");\n \n     assertEquals(\"{\\\"123\\\":\\\"456\\\"}\", json);\n   }\n-  \n+\n   public void testMapDeserializationWithIntegerKeys() {\n     Type typeOfMap = new TypeToken<Map<Integer, String>>() {}.getType();\n     Map<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n   @SuppressWarnings(\"unchecked\")\n   public void testParameterizedMapSubclassDeserialization() {\n     Type type = new TypeToken<MyParameterizedMap<String, Integer>>() {}.getType();\n-    Gson gson = new GsonBuilder().registerTypeAdapter(type, \n-        new InstanceCreator<MyParameterizedMap>() {\n-      public MyParameterizedMap createInstance(Type type) {\n-        return new MyParameterizedMap();\n-      }      \n-    }).create();\n+    Gson gson = new Gson();\n     String json = \"{\\\"a\\\":1,\\\"b\\\":2}\";\n     MyParameterizedMap<String, Integer> map = gson.fromJson(json, type);\n-    assertEquals(1, map.get(\"a\").intValue()); \n-    assertEquals(2, map.get(\"b\").intValue()); \n+    assertEquals(1, map.get(\"a\").intValue());\n+    assertEquals(2, map.get(\"b\").intValue());\n   }\n \n   private static class MyParameterizedMap<K, V> extends LinkedHashMap<K, V> {\n     @SuppressWarnings(\"unused\")\n     int foo = 10;\n   }\n-  \n+\n   public void testMapSubclassSerialization() {\n     MyMap map = new MyMap();\n     map.put(\"a\", \"b\");\n     String json = gson.toJson(map, MyMap.class);\n     assertTrue(json.contains(\"\\\"a\\\":\\\"b\\\"\"));\n   }\n-  \n+\n   public void testMapStandardSubclassDeserialization() {\n     String json = \"{a:'1',b:'2'}\";\n     Type type = new TypeToken<LinkedHashMap<String, String>>() {}.getType();\n     LinkedHashMap<String, Integer> map = gson.fromJson(json, type);\n-    assertEquals(\"1\", map.get(\"a\")); \n-    assertEquals(\"2\", map.get(\"b\")); \n-  }\n-  \n-  public void disable_testMapSubclassDeserialization() {\n+    assertEquals(\"1\", map.get(\"a\"));\n+    assertEquals(\"2\", map.get(\"b\"));\n+  }\n+\n+  public void testMapSubclassDeserialization() {\n     Gson gson = new GsonBuilder().registerTypeAdapter(MyMap.class, new InstanceCreator<MyMap>() {\n       public MyMap createInstance(Type type) {\n         return new MyMap();\n-      }      \n+      }\n     }).create();\n     String json = \"{\\\"a\\\":1,\\\"b\\\":2}\";\n     MyMap map = gson.fromJson(json, MyMap.class);\n-    assertEquals(\"1\", map.get(\"a\")); \n-    assertEquals(\"2\", map.get(\"b\")); \n-  }\n-  \n+    assertEquals(\"1\", map.get(\"a\"));\n+    assertEquals(\"2\", map.get(\"b\"));\n+  }\n+\n   /**\n    * Created in response to http://code.google.com/p/google-gson/issues/detail?id=99\n    */\n   private static class ClassWithAMap {\n     Map<String, String> map = new TreeMap<String, String>();\n   }\n-  \n+\n   /**\n    * Created in response to http://code.google.com/p/google-gson/issues/detail?id=99\n    */\n     assertFalse(json.contains(\"name1\"));\n     assertTrue(json.contains(\"name2\"));\n   }\n-  \n+\n   /**\n    * Created in response to http://code.google.com/p/google-gson/issues/detail?id=99\n    */\n     assertTrue(json.contains(\"name1\"));\n     assertTrue(json.contains(\"name2\"));\n   }\n-  \n+\n   public void testMapSerializationWithWildcardValues() {\n     Map<String, ? extends Collection<? extends Integer>> map =\n         new LinkedHashMap<String, Collection<Integer>>();\n     map.put(\"test\", null);\n-    Type typeOfMap = \n+    Type typeOfMap =\n         new TypeToken<Map<String, ? extends Collection<? extends Integer>>>() {}.getType();\n     String json = gson.toJson(map, typeOfMap);\n \n     assertEquals(\"{}\", json);\n   }\n-  \n+\n   public void testMapDeserializationWithWildcardValues() {\n     Type typeOfMap = new TypeToken<Map<String, ? extends Long>>() {}.getType();\n     Map<String, ? extends Long> map = gson.fromJson(\"{\\\"test\\\":123}\", typeOfMap);\n     assertEquals(new Long(123L), map.get(\"test\"));\n   }\n \n-  \n+\n   private static class MyMap extends LinkedHashMap<String, String> {\n     private static final long serialVersionUID = 1L;\n \n     @SuppressWarnings(\"unused\")\n     int foo = 10;\n   }\n-  \n+\n   /**\n    * From bug report http://code.google.com/p/google-gson/issues/detail?id=95\n    */\n     assertTrue(json.contains(\"\\\"1\\\":\\\"1\\\"\"));\n     assertTrue(json.contains(\"\\\"2\\\":\\\"2\\\"\"));\n   }\n-  \n+\n   /**\n    * From bug report http://code.google.com/p/google-gson/issues/detail?id=95\n    */\n     String json = gson.toJson(map);\n     assertEquals(\"{\\\"a\\\\\\\"b\\\":\\\"c\\\\\\\"d\\\"}\", json);\n   }\n-  \n+\n   /**\n    * From issue 227.\n    */", "timestamp": 1301944040, "metainfo": ""}