{"sha": "2813385c33c34c3758f4bba863526551add0c58e", "log": "Parity with Gson behavior where we use runtime type of an object while serializing instead of the declared type of the field.", "commit": "\n--- a/gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  private Type getMoreSpecificType(Type type, Object obj, FieldAttributes fieldAttributes) {\n+  private static Type getMoreSpecificType(Type type, Object obj, FieldAttributes fieldAttributes) {\n     try {\n       if (obj != null && (Object.class == type || type instanceof TypeVariable)) {\n         Object fieldValue = fieldAttributes.get(obj);\n--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.Type;\n+import java.lang.reflect.TypeVariable;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n       @Override void write(JsonWriter writer, Object value)\n           throws IOException, IllegalAccessException {\n         Object fieldValue = field.get(value);\n-        ((TypeAdapter) typeAdapter).write(writer, fieldValue);\n+        Type declaredTypeOfField = fieldType.getType();\n+        Type resolvedTypeOfField = getMoreSpecificType(declaredTypeOfField, value, fieldValue);\n+        TypeAdapter t = resolvedTypeOfField != declaredTypeOfField ?\n+            context.getAdapter(TypeToken.get(resolvedTypeOfField)) : this.typeAdapter;\n+        t.write(writer, fieldValue);\n       }\n       @Override void read(JsonReader reader, Object value)\n           throws IOException, IllegalAccessException {\n         field.set(value, fieldValue);\n       }\n     };\n+  }\n+\n+  private static Type getMoreSpecificType(Type type, Object obj, Object fieldValue) {\n+    if (obj != null && (Object.class == type || type instanceof TypeVariable)) {\n+      if (fieldValue != null) {\n+        type = fieldValue.getClass();\n+      }\n+    }\n+    return type;\n   }\n \n   public static class FactoryImpl implements Factory {", "timestamp": 1312341583, "metainfo": ""}