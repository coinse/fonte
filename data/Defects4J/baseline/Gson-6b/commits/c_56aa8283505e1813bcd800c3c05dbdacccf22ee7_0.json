{"sha": "56aa8283505e1813bcd800c3c05dbdacccf22ee7", "log": "Minor clean-up in Gson class.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n \n   //TODO(inder): get rid of all the registerXXX methods and take all such parameters in the\n   // constructor instead. At the minimum, mark those methods private.\n-\n-  private static final String NULL_STRING = \"null\";\n \n   static final boolean DEFAULT_JSON_NON_EXECUTABLE = false;\n \n    */\n   public String toJson(Object src) {\n     if (src == null) {\n-      return serializeNulls ? NULL_STRING : \"\";\n+      return toJson(JsonNull.createJsonNull());\n     }\n     return toJson(src, src.getClass());\n   }\n    * @since 1.2\n    */\n   public void toJson(Object src, Appendable writer) throws JsonIOException {\n-    try {\n-      if (src != null) {\n-        toJson(src, src.getClass(), writer);\n-      } else if (serializeNulls) {\n-        writeOutNullString(writer);\n-      }\n-    } catch (IOException ioe) {\n-      throw new RuntimeException(ioe);\n+    if (src != null) {\n+      toJson(src, src.getClass(), writer);\n+    } else {\n+      toJson(JsonNull.createJsonNull(), writer);\n     }\n   }\n \n     return target;\n   }\n \n-  /**\n-   * Appends the {@link #NULL_STRING} to the {@code writer} object.\n-   *\n-   * @param writer the object to append the null value to\n-   */\n-  private void writeOutNullString(Appendable writer) throws IOException {\n-    writer.append(NULL_STRING);\n-  }\n-\n   @Override\n   public String toString() {\n   \tStringBuilder sb = new StringBuilder(\"{\")", "timestamp": 1295736223, "metainfo": ""}