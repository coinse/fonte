{"sha": "3690d362b9e3007e390d38092ce339e8a1145781", "log": "incorporated feedback from r358", "commit": "\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n   private final AnonymousAndLocalClassExclusionStrategy anonAndLocalClassExclusionStrategy;\n   private final InnerClassExclusionStrategy innerClassExclusionStrategy;\n   private boolean excludeFieldsWithoutExposeAnnotation;\n-  private JsonFormatter formatter;\n   private FieldNamingStrategy fieldNamingPolicy;\n   private final ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators;\n   private final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;\n   private int timeStyle;\n   private boolean serializeSpecialFloatingPointValues;\n   private boolean escapeHtmlChars;\n+  private boolean prettyPrinting;\n \n   /**\n    * Creates a GsonBuilder instance that can be used to build Gson with various configuration\n     ignoreVersionsAfter = VersionConstants.IGNORE_VERSIONS;\n     serializeLongAsString = false;\n     serializeInnerClasses = true;\n+    prettyPrinting = false;\n     escapeHtmlChars = true;\n     anonAndLocalClassExclusionStrategy = new AnonymousAndLocalClassExclusionStrategy();\n     innerClassExclusionStrategy = new InnerClassExclusionStrategy();\n     modifierBasedExclusionStrategy = Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY;\n     excludeFieldsWithoutExposeAnnotation = false;\n-    formatter = Gson.DEFAULT_JSON_FORMATTER;\n     fieldNamingPolicy = Gson.DEFAULT_NAMING_POLICY;\n     instanceCreators = new ParameterizedTypeHandlerMap<InstanceCreator<?>>();\n     serializers = new ParameterizedTypeHandlerMap<JsonSerializer<?>>();\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n    */\n   public GsonBuilder setPrettyPrinting() {\n-    setFormatter(new JsonPrintFormatter(escapeHtmlChars));\n+    prettyPrinting = true;\n     return this;\n   }\n   \n    */\n   public GsonBuilder disableHtmlEscaping() {\n     this.escapeHtmlChars = false;\n-    return this;\n-  }\n-\n-  /**\n-   * Configures Gson with a new formatting strategy other than the default strategy. The default\n-   * strategy is to provide a compact representation that eliminates all unneeded white-space.\n-   *\n-   * @param formatter the new formatter to use.\n-   * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n-   * @see JsonPrintFormatter\n-   */\n-  GsonBuilder setFormatter(JsonFormatter formatter) {\n-    this.formatter = formatter;\n     return this;\n   }\n \n     customInstanceCreators.registerIfAbsent(DefaultTypeAdapters.getDefaultInstanceCreators());\n     MappedObjectConstructor objConstructor = Gson.createObjectConstructor(customInstanceCreators);\n \n+    JsonFormatter formatter =  prettyPrinting ? \n+        new JsonPrintFormatter(escapeHtmlChars) : new JsonCompactFormatter(escapeHtmlChars); \n     Gson gson = new Gson(exclusionStrategy, fieldNamingPolicy, objConstructor, \n         formatter, serializeNulls, customSerializers, customDeserializers);\n     return gson;\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java\n+package com.google.gson;\n+\n+import com.google.gson.common.TestTypes.ClassWithNoFields;\n+\n+import junit.framework.TestCase;\n+\n+import java.lang.reflect.Modifier;\n+\n+/**\n+ * Functional tests for Gson that depend on some internal package-protected elements of\n+ * com.google.gson package and hence must be placed in the same package. We should make every\n+ * attempt to migrate tests out of this class.\n+ *\n+ * @author Inderjeet Singh\n+ * @author Joel Leitch\n+ */\n+public class FunctionWithInternalDependenciesTest extends TestCase {\n+\n+  public void testAnonymousLocalClassesSerialization() {\n+    Gson gson = new Gson(new ModifierBasedExclusionStrategy(\n+        true, Modifier.TRANSIENT, Modifier.STATIC), Gson.DEFAULT_NAMING_POLICY);\n+    assertEquals(\"{}\", gson.toJson(new ClassWithNoFields() {\n+      // empty anonymous class\n+    }));\n+  }\n+}\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.functional;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.common.TestTypes.ArrayOfObjects;\n+import com.google.gson.common.TestTypes.BagOfPrimitives;\n+import com.google.gson.reflect.TypeToken;\n+\n+import junit.framework.TestCase;\n+\n+import java.lang.reflect.Type;\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * Functional tests for pretty printing option.\n+ *\n+ * @author Inderjeet Singh\n+ * @author Joel Leitch\n+ */\n+public class PrettyPrintingTest extends TestCase {\n+  private static int PRINT_MARGIN = 100;\n+  private static int RIGHT_MARGIN = 4;\n+\n+  private static boolean DEBUG = false;\n+\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new GsonBuilder().setPrettyPrinting().create();\n+  }\n+\n+  public void testPrettyPrintList() {\n+    BagOfPrimitives b = new BagOfPrimitives();\n+    List<BagOfPrimitives> listOfB = new LinkedList<BagOfPrimitives>();\n+    for (int i = 0; i < 15; ++i) {\n+      listOfB.add(b);\n+    }\n+    Type typeOfSrc = new TypeToken<List<BagOfPrimitives>>() {}.getType();\n+    String json = gson.toJson(listOfB, typeOfSrc);\n+    print(json);\n+    assertPrintMargin(json);\n+  }\n+\n+  public void testPrettyPrintArrayOfObjects() {\n+    ArrayOfObjects target = new ArrayOfObjects();\n+    String json = gson.toJson(target);\n+    print(json);\n+    assertPrintMargin(json);\n+  }\n+\n+  public void testPrettyPrintArrayOfPrimitives() {\n+    int[] ints = new int[] { 1, 2, 3, 4, 5 };\n+    String json = gson.toJson(ints);\n+    assertEquals(\"[1,2,3,4,5]\\n\", json);\n+  }\n+\n+  public void testPrettyPrintArrayOfPrimitiveArrays() {\n+    int[][] ints = new int[][] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 }, { 9, 0 }, { 10 } };\n+    String json = gson.toJson(ints);\n+    assertEquals(\"[[1,2],[3,4],[5,6],[7,8],[9,0],[10]]\\n\", json);\n+  }\n+\n+  public void testPrettyPrintListOfPrimitiveArrays() {\n+    List<Integer[]> list = Arrays.asList(new Integer[][] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 },\n+        { 9, 0 }, { 10 } });\n+    String json = gson.toJson(list);\n+    assertEquals(\"[[1,2],[3,4],[5,6],[7,8],[9,0],[10]]\\n\", json);\n+  }\n+\n+  public void testMultipleArrays() {\n+    int[][][] ints = new int[][][] { {  { 1 }, { 2 } } };\n+    String json = gson.toJson(ints);\n+    assertEquals(\"[[[1],[2]]]\\n\", json);\n+  }\n+\n+  private void print(String msg) {\n+    if (DEBUG) {\n+      System.out.println(msg);\n+    }\n+  }\n+\n+  private void assertPrintMargin(String str) {\n+    int position = 0;\n+    char[] chars = str.toCharArray();\n+    for (int i = 0; i < chars.length; ++i, ++position) {\n+      char c = chars[i];\n+      if (c == '\\n') {\n+        position = 0;\n+      }\n+      assertTrue(position < PRINT_MARGIN + RIGHT_MARGIN);\n+    }\n+  }\n+}", "timestamp": 1230676956, "metainfo": ""}