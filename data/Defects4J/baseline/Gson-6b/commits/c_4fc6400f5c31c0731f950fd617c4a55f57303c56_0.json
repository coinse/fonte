{"sha": "4fc6400f5c31c0731f950fd617c4a55f57303c56", "log": "Fixed the test that broke while fixing issue 100 in r394 by using a TreeSet for SortedSets and HashSet for other kind of sets.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n   private static final StringTypeAdapter STRING_TYPE_ADAPTER = new StringTypeAdapter();\n \n   private static final PropertiesCreator PROPERTIES_CREATOR = new PropertiesCreator();\n+  private static final TreeSetCreator TREE_SET_CREATOR = new TreeSetCreator();\n   private static final HashSetCreator HASH_SET_CREATOR = new HashSetCreator();\n   private static final GregorianCalendarTypeAdapter GREGORIAN_CALENDAR_TYPE_ADAPTER = \n     new GregorianCalendarTypeAdapter();\n     map.register(Queue.class, COLLECTION_TYPE_ADAPTER);\n \n     map.register(Set.class, HASH_SET_CREATOR);\n-    map.register(SortedSet.class, HASH_SET_CREATOR);\n+    map.register(SortedSet.class, TREE_SET_CREATOR);\n     map.register(Properties.class, PROPERTIES_CREATOR);\n     map.makeUnmodifiable();\n     return map;\n     }\n   }\n \n+  private static class TreeSetCreator implements InstanceCreator<TreeSet<?>> {\n+    public TreeSet<?> createInstance(Type type) {\n+      return new TreeSet<Object>();\n+    }\n+    @Override\n+    public String toString() {\n+      return TreeSetCreator.class.getSimpleName();\n+    }\n+  }\n+\n   private static class HashSetCreator implements InstanceCreator<HashSet<?>> {\n     public HashSet<?> createInstance(Type type) {\n       return new HashSet<Object>();\n--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n     String json = \"{\\\"list\\\":[0,1,2,3],\\\"queue\\\":[0,1,2,3],\\\"set\\\":[0.1,0.2,0.3,0.4],\"\n         + \"\\\"sortedSet\\\":[\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\"]\"\n         + \"}\";\n-    ClassWithSubInterfacesOfCollection target = gson.fromJson(\n-        json, ClassWithSubInterfacesOfCollection.class);\n-    assertEquals(json, target.getExpectedJson());\n+    ClassWithSubInterfacesOfCollection target = \n+      gson.fromJson(json, ClassWithSubInterfacesOfCollection.class);\n+    assertTrue(target.listContains(0, 1, 2, 3));\n+    assertTrue(target.queueContains(0, 1, 2, 3));\n+    assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F));\n+    assertTrue(target.sortedSetContains('a', 'b', 'c', 'd'));\n   }\n \n   /**\n     }\n   }\n   \n-  public static class ClassWithSubInterfacesOfCollection {\n+  private static class ClassWithSubInterfacesOfCollection {\n     private List<Integer> list;\n     private Queue<Long> queue;\n     private Set<Float> set;\n       this.sortedSet = sortedSet;\n     }\n \n+    boolean listContains(int... values) {\n+      for (int value : values) {\n+        if (!list.contains(value)) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    }\n+    \n+    boolean queueContains(long... values) {\n+      for (long value : values) {\n+        if (!queue.contains(value)) {\n+          return false;\n+        }\n+      }\n+      return true;      \n+    }\n+    \n+    boolean setContains(float... values) {\n+      for (float value : values) {\n+        if (!set.contains(value)) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    }\n+\n+    boolean sortedSetContains(char... values) {\n+      for (char value : values) {\n+        if (!sortedSet.contains(value)) {\n+          return false;\n+        }\n+      }\n+      return true;      \n+    }\n+    \n     public String getExpectedJson() {\n       StringBuilder sb = new StringBuilder();\n       sb.append(\"{\");", "timestamp": 1236881834, "metainfo": ""}