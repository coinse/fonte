{"sha": "281ed6f86671d4c74e41a2f632757c8096db938d", "log": "Created a generalized key-value store,MetaDataMap, for a map of MetaData. Moved MetaData to wsdef from wsf. Added a Gson type adapter for Id type.", "commit": "\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/MetaData.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.rest;\n+\n+import java.lang.reflect.Type;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Metadata associated with a repository for a rest resource\n+ *\n+ * @author inder\n+ *\n+ * @param <R> The resource\n+ */\n+public final class MetaData<R extends RestResource<R>> {\n+\n+  private final Map<String, String> map;\n+\n+  public static <RS extends RestResource<RS>> MetaData<RS> create() {\n+    return new MetaData<RS>();\n+  }\n+\n+  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+  private static MetaData<?> createTypeUnsafe(Map<String, String> values) {\n+    return new MetaData(values);\n+  }\n+\n+  public MetaData() {\n+    this(new HashMap<String, String>());\n+  }\n+\n+  private MetaData(Map<String, String> values) {\n+    this.map = values;\n+  }\n+\n+  public String getString(String key) {\n+    return (String) map.get(key);\n+  }\n+\n+  public void putString(String key, String value) {\n+    map.put(key, value);\n+  }\n+\n+  public boolean getBoolean(String key) {\n+    String value = map.get(key);\n+    return value == null ? false : Boolean.parseBoolean(value);\n+  }\n+\n+  public void putBoolean(String key, boolean value) {\n+    map.put(key, String.valueOf(value));\n+  }\n+\n+  public void remove(String key) {\n+    map.remove(key);\n+  }\n+\n+  /**\n+   * Gson Type adapter for {@link MetaData}. The serialized representation on wire is just a\n+   * Map<String, String>\n+   */\n+  public static final class GsonTypeAdapter implements JsonSerializer<MetaData<?>>,\n+    JsonDeserializer<MetaData<?>>{\n+\n+    private static final Type MAP_TYPE = new TypeToken<Map<String, String>>(){}.getType();\n+\n+    @Override\n+    public MetaData<?> deserialize(JsonElement json, Type typeOfT,\n+        JsonDeserializationContext context) throws JsonParseException {\n+      Map<String, String> map = context.deserialize(json, MAP_TYPE);\n+      return MetaData.createTypeUnsafe(map);\n+    }\n+\n+    @Override\n+    public JsonElement serialize(MetaData<?> src, Type typeOfSrc,\n+        JsonSerializationContext context) {\n+      return context.serialize(src.map, MAP_TYPE);\n+    }\n+  }\n+}\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestResource.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestResource.java\n  * @param <R> the rest resource type\n  */\n public interface RestResource<R> extends HasId<R> {\n-\n }\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/typeadapters/IdTypeAdapter.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.typeadapters;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.webservice.definition.rest.Id;\n+\n+/**\n+ * Type adapter for converting an Id to its serialized form\n+ *\n+ * @author inder\n+ *\n+ */\n+public final class IdTypeAdapter implements JsonSerializer<Id<?>>, JsonDeserializer<Id<?>> {\n+\n+  @Override\n+  public JsonElement serialize(Id<?> src, Type typeOfSrc, JsonSerializationContext context) {\n+    return new JsonPrimitive(src.getValue());\n+  }\n+\n+  @Override\n+  public Id<?> deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+      throws JsonParseException {\n+    if (!(typeOfT instanceof ParameterizedType)) {\n+      throw new JsonParseException(\"Id of unknown type: \" + typeOfT);\n+    }\n+    ParameterizedType parameterizedType = (ParameterizedType) typeOfT;\n+    // Since Id takes only one TypeVariable, the actual type corresponding to the first\n+    // TypeVariable is the Type we are looking for\n+    Type typeOfId = parameterizedType.getActualTypeArguments()[0];\n+    return Id.get(json.getAsLong(), typeOfId);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/test/java/com/google/gson/webservice/typeadapters/IdTypeAdapterTest.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.typeadapters;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import junit.framework.TestCase;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.webservice.definition.rest.Id;\n+\n+/**\n+ * Unit tests for {@link IdTypeAdapter}\n+ *\n+ * @author inder\n+ */\n+public class IdTypeAdapterTest extends TestCase {\n+  private static final Id<Student> STUDENT1_ID = Id.get(5L, Student.class);\n+  private static final Id<Student> STUDENT2_ID = Id.get(6L, Student.class);\n+  private static final Student STUDENT1 = new Student(STUDENT1_ID, \"first\");\n+  private static final Student STUDENT2 = new Student(STUDENT2_ID, \"second\");\n+  private static final Type TYPE_COURSE_HISTORY =\n+    new TypeToken<Course<HistoryCourse>>(){}.getType(); \n+  private static final Id<Course<HistoryCourse>> COURSE_ID = Id.get(10L, TYPE_COURSE_HISTORY);\n+\n+  private Gson gson;\n+  private Course<HistoryCourse> course;\n+\n+  @Override\n+  protected void setUp() {\n+    gson = new GsonBuilder()\n+        .registerTypeAdapter(Id.class, new IdTypeAdapter())\n+        .create();\n+    course = new Course<HistoryCourse>(COURSE_ID, 4,\n+        new Assignment<HistoryCourse>(null, null), createList(STUDENT1, STUDENT2));\n+  }\n+\n+  public void testSerializeId() {\n+    String json = gson.toJson(course, TYPE_COURSE_HISTORY);\n+    System.out.println(json);\n+    assertTrue(json.contains(String.valueOf(COURSE_ID.getValue())));\n+    assertTrue(json.contains(String.valueOf(STUDENT1_ID.getValue())));\n+    assertTrue(json.contains(String.valueOf(STUDENT2_ID.getValue())));\n+  }\n+\n+  public void testDeserializeId() {\n+    String json = \"{courseId:1,students:[{id:1,name:'first'},{id:6,name:'second'}],\"\n+      + \"numAssignments:4,assignment:{}}\";\n+    Course<HistoryCourse> target = gson.fromJson(json, TYPE_COURSE_HISTORY);\n+    assertEquals(1, target.getStudents().get(0).id.getValue());\n+    assertEquals(6, target.getStudents().get(1).id.getValue());\n+    assertEquals(1, target.getId().getValue());\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class Student {\n+    Id<Student> id;\n+    String name;\n+\n+    private Student() {\n+      this(null, null);\n+    }\n+    public Student(Id<Student> id, String name) {\n+      this.id = id;\n+      this.name = name;\n+    }\n+  }\n+  @SuppressWarnings(\"unused\")\n+  private static class Course<T> {\n+    final List<Student> students;\n+    private final Id<Course<T>> courseId;\n+    private final int numAssignments;\n+    private final Assignment<T> assignment;\n+\n+    private Course() {\n+      this(null, 0, null, new ArrayList<Student>());\n+    }\n+\n+    public Course(Id<Course<T>> courseId, int numAssignments,\n+        Assignment<T> assignment, List<Student> players) {\n+      this.courseId = courseId;\n+      this.numAssignments = numAssignments;\n+      this.assignment = assignment;\n+      this.students = players;\n+    }\n+    public Id<Course<T>> getId() {\n+      return courseId;\n+    }\n+    List<Student> getStudents() {\n+      return students;\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class Assignment<T> {\n+    private final Id<Assignment<T>> id;\n+    private final T data;\n+\n+    private Assignment() {\n+      this(null, null);\n+    }\n+    public Assignment(Id<Assignment<T>> id, T data) {\n+      this.id = id;\n+      this.data = data;\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class HistoryCourse {\n+    int numClasses;\n+  }\n+\n+  private static <T> List<T> createList(T ...items) {\n+    return Arrays.asList(items);\n+  }\n+}\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/rest/MetaDataMap.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.wsf.server.rest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.gson.webservice.definition.rest.Id;\n+import com.google.gson.webservice.definition.rest.MetaData;\n+import com.google.gson.webservice.definition.rest.RestResource;\n+\n+/**\n+ * A map of resources to their MetaData\n+ *\n+ * @author inder\n+ *\n+ * @param <R> the rest resource for whic the metadata is being stored\n+ */\n+public class MetaDataMap<R extends RestResource<R>> {\n+  private final Map<Id<R>, MetaData<R>> map;\n+\n+  public MetaDataMap() {\n+    this.map = new HashMap<Id<R>, MetaData<R>>();\n+  }\n+\n+  public MetaData<R> get(Id<R> resourceId) {\n+    MetaData<R> metaData = map.get(resourceId);\n+    if (metaData == null) {\n+      metaData = MetaData.create();\n+      map.put(resourceId, metaData);\n+    }\n+    return metaData;\n+  }\n+}\n--- a/wsf/src/main/java/com/google/gson/wsf/server/rest/RepositoryInMemory.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/rest/RepositoryInMemory.java\n import java.util.Map;\n \n import com.google.gson.webservice.definition.rest.Id;\n+import com.google.gson.webservice.definition.rest.MetaData;\n import com.google.gson.webservice.definition.rest.RestResource;\n import com.google.inject.internal.Maps;\n import com.google.inject.internal.Preconditions;\n  * @param <R> Type variable for the resource\n  */\n public class RepositoryInMemory<R extends RestResource<R>> implements Repository<R> {\n+  private static final String METADATA_KEY_IS_FRESHLY_ASSIGNED_ID = \"isFreshlyAssignedId\";\n+\n   private final IdMap<R> resources;\n-  private final Map<Id<R>, MetaData<R>> metaDataMap;\n+  private final MetaDataMap<R> metaDataMap;\n \n   public RepositoryInMemory(Class<? super R> classOfResource) {\n     this.resources = IdMap.create(classOfResource);\n-    this.metaDataMap = Maps.newHashMap();\n+    this.metaDataMap = new MetaDataMap<R>();\n   }\n \n   @Override\n     if (metaData == null) {\n       return false;\n     }\n-    return metaData.isFreshlyAssignedId();\n+    return metaData.getBoolean(METADATA_KEY_IS_FRESHLY_ASSIGNED_ID);\n   }\n \n   @Override\n       }\n     }\n     resource = resources.put(resource);\n-    metaDataMap.remove(resource.getId());\n+    metaDataMap.get(resource.getId()).remove(METADATA_KEY_IS_FRESHLY_ASSIGNED_ID);\n     return resource;\n   }\n \n     if (resource.getId() == null) {\n       Id<R> id = resources.getNextId();\n       resource.setId(id);\n-      metaDataMap.put(id, new MetaData<R>(true));\n+      metaDataMap.get(id).putBoolean(METADATA_KEY_IS_FRESHLY_ASSIGNED_ID, true);\n     }\n     return resource.getId();\n   }", "timestamp": 1287416735, "metainfo": ""}