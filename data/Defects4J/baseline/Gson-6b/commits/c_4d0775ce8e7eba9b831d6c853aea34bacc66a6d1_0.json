{"sha": "4d0775ce8e7eba9b831d6c853aea34bacc66a6d1", "log": "Let the runtime throw on circular references", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java\n     try {\n       gson.toJson(a);\n       fail(\"Circular types should not get printed!\");\n-    } catch (IllegalStateException expected) {\n-      assertTrue(expected.getMessage().contains(\"children\"));\n+    } catch (StackOverflowError expected) {\n     }\n   }\n \n     try {\n       gson.toJson(objA);\n       fail(\"Circular reference to self can not be serialized!\");\n-    } catch (IllegalStateException expected) { }\n+    } catch (StackOverflowError expected) {\n+    }\n   }\n \n   public void testSelfReferenceArrayFieldSerialization() throws Exception {\n     try {\n       gson.toJson(objA);\n       fail(\"Circular reference to self can not be serialized!\");\n-    } catch (IllegalStateException expected) {\n-      assertTrue(expected.getMessage().contains(\"children\"));\n+    } catch (StackOverflowError expected) {\n     }\n   }\n \n     try {\n       gson.toJson(obj);\n       fail(\"Circular reference to self can not be serialized!\");\n-    } catch (IllegalStateException expected) {\n-      assertTrue(expected.getMessage().contains(\"Offending\"));\n+    } catch (StackOverflowError expected) {\n     }\n   }\n ", "timestamp": 1317238723, "metainfo": ""}