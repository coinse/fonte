{"sha": "cc334475b0ab3fdcff3061f58474775bd09cbe4f", "log": "Fixed issue 87 by adding support for deserialization of java.util.Properties", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n+import java.util.Properties;\n import java.util.Queue;\n import java.util.Set;\n import java.util.SortedSet;\n   private static final ShortTypeAdapter SHORT_TYPE_ADAPTER = new ShortTypeAdapter();\n   private static final StringTypeAdapter STRING_TYPE_ADAPTER = new StringTypeAdapter();\n \n+  private static final PropertiesCreator PROPERTIES_CREATOR = new PropertiesCreator();\n   private static final TreeSetCreator TREE_SET_CREATOR = new TreeSetCreator();\n \n   // The constants DEFAULT_SERIALIZERS, DEFAULT_DESERIALIZERS, and DEFAULT_INSTANCE_CREATORS\n \n     map.register(Set.class, TREE_SET_CREATOR);\n     map.register(SortedSet.class, TREE_SET_CREATOR);\n+    map.register(Properties.class, PROPERTIES_CREATOR);\n     map.makeUnmodifiable();\n     return map;\n   }\n     }    \n   }\n   \n+  static class PropertiesCreator implements InstanceCreator<Properties> {\n+    public Properties createInstance(Type type) {\n+      return new Properties();\n+    }    \n+  }\n+  \n   @SuppressWarnings(\"unchecked\")\n   static class MapTypeAdapter implements JsonSerializer<Map>, JsonDeserializer<Map>,\n       InstanceCreator<Map> {\n--- a/gson/src/main/java/com/google/gson/TypeInfoMap.java\n+++ b/gson/src/main/java/com/google/gson/TypeInfoMap.java\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n import java.util.Map;\n+import java.util.Properties;\n \n /**\n  * A convenience object for retrieving the map type information.\n  * @author Joel Leitch\n  */\n final class TypeInfoMap {\n-  private final ParameterizedType mapType;\n-\n+  private final Type keyType;\n+  private final Type valueType;\n+  \n   public TypeInfoMap(Type mapType) {\n-    if (!(mapType instanceof ParameterizedType)) {\n+    if (mapType instanceof Class && Properties.class.isAssignableFrom((Class<?>) mapType)) {\n+      keyType = String.class;\n+      valueType = String.class;\n+    } else if (mapType instanceof ParameterizedType) {\n+      TypeInfo rawType = new TypeInfo(mapType);\n+      Preconditions.checkArgument(Map.class.isAssignableFrom(rawType.getRawClass()));\n+      ParameterizedType paramType = (ParameterizedType) mapType;\n+      keyType = paramType.getActualTypeArguments()[0];\n+      valueType = paramType.getActualTypeArguments()[1];      \n+    } else {\n       throw new IllegalArgumentException(\n           \"Map objects need to be parameterized unless you use a custom serializer. \"\n               + \"Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType.\");\n     }\n-    TypeInfo rawType = new TypeInfo(mapType);\n-    Preconditions.checkArgument(Map.class.isAssignableFrom(rawType.getRawClass()));\n-    this.mapType = (ParameterizedType) mapType;\n   }\n \n   public Type getKeyType() {\n-    return mapType.getActualTypeArguments()[0];\n+    return keyType;\n   }\n \n   public Type getValueType() {\n-    return mapType.getActualTypeArguments()[1];\n+    return valueType;\n   }\n }\n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n   \n   public void testPropertiesSerialization() {\n     Properties props = new Properties();\n-    props.put(\"foo\", \"bar\");\n+    props.setProperty(\"foo\", \"bar\");\n     String json = gson.toJson(props);\n     System.out.println(json);\n   }\n   public void testPropertiesDeserialization() {\n     String json = \"{foo:'bar'}\";\n     Properties props = gson.fromJson(json, Properties.class);\n-    assertEquals(\"bar\", props.get(\"foo\"));\n+    assertEquals(\"bar\", props.getProperty(\"foo\"));\n   }\n }", "timestamp": 1230685317, "metainfo": ""}