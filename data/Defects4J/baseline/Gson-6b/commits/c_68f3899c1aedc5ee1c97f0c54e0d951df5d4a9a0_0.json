{"sha": "68f3899c1aedc5ee1c97f0c54e0d951df5d4a9a0", "log": "Updated the security token to make generated Json non-executable. Removed the unneeded <data> element at the end.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n   static final FieldNamingStrategy DEFAULT_NAMING_POLICY =\n       new SerializedNameAnnotationInterceptingNamingPolicy(new JavaFieldNamingPolicy());\n \n-  private static final String JSON_NON_EXECUTABLE_PREFIX = \")]}'\\n<data>\";\n+  private static final String JSON_NON_EXECUTABLE_PREFIX = \")]}'\\n\";\n \n   private final ExclusionStrategy strategy;\n   private final FieldNamingStrategy fieldNamingPolicy;\n--- a/gson/src/main/java/com/google/gson/JsonParserImplConstants.java\n+++ b/gson/src/main/java/com/google/gson/JsonParserImplConstants.java\n /* Generated By:JavaCC: Do not edit this line. JsonParserImplConstants.java */\n package com.google.gson;\n+\n \n /**\n  * Token literal values and constants.\n     \"\\\"u\\\"\",\n     \"<HEX>\",\n     \"<HEX_ESC>\",\n-    \"\\\")]}\\\\\\'\\\\n<data>\\\"\",\n+    \"\\\")]}\\\\\\'\\\\n\\\"\",\n     \"\\\"{\\\"\",\n     \"\\\"}\\\"\",\n     \"\\\",\\\"\",\n--- a/gson/src/main/java/com/google/gson/JsonParserImplTokenManager.java\n+++ b/gson/src/main/java/com/google/gson/JsonParserImplTokenManager.java\n             jjmatchedPos = 6;\n             return 10;\n          }\n-         return -1;\n-      case 7:\n-         if ((active0 & 0x200L) != 0L)\n-            return 10;\n          return -1;\n       default :\n          return -1;\n    switch(curChar)\n    {\n       case 10:\n-         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);\n+         if ((active0 & 0x4000000L) != 0L)\n+            return jjStopAtPos(4, 26);\n+         break;\n       case 110:\n          return jjMoveStringLiteralDfa5_0(active0, 0x200L);\n       default :\n    }\n    switch(curChar)\n    {\n-      case 60:\n-         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);\n       case 105:\n          return jjMoveStringLiteralDfa6_0(active0, 0x200L);\n       default :\n    }\n    switch(curChar)\n    {\n-      case 100:\n-         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);\n       case 116:\n          return jjMoveStringLiteralDfa7_0(active0, 0x200L);\n       default :\n    }\n    switch(curChar)\n    {\n-      case 97:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);\n       case 121:\n          if ((active0 & 0x200L) != 0L)\n             return jjStartNfaWithStates_0(7, 9, 10);\n          break;\n    }\n    return jjStartNfa_0(6, active0);\n-}\n-private int jjMoveStringLiteralDfa8_0(long old0, long active0)\n-{\n-   if (((active0 &= old0)) == 0L)\n-      return jjStartNfa_0(6, old0);\n-   try { curChar = input_stream.readChar(); }\n-   catch(java.io.IOException e) {\n-      jjStopStringLiteralDfa_0(7, active0);\n-      return 8;\n-   }\n-   switch(curChar)\n-   {\n-      case 116:\n-         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);\n-      default :\n-         break;\n-   }\n-   return jjStartNfa_0(7, active0);\n-}\n-private int jjMoveStringLiteralDfa9_0(long old0, long active0)\n-{\n-   if (((active0 &= old0)) == 0L)\n-      return jjStartNfa_0(7, old0);\n-   try { curChar = input_stream.readChar(); }\n-   catch(java.io.IOException e) {\n-      jjStopStringLiteralDfa_0(8, active0);\n-      return 9;\n-   }\n-   switch(curChar)\n-   {\n-      case 97:\n-         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);\n-      default :\n-         break;\n-   }\n-   return jjStartNfa_0(8, active0);\n-}\n-private int jjMoveStringLiteralDfa10_0(long old0, long active0)\n-{\n-   if (((active0 &= old0)) == 0L)\n-      return jjStartNfa_0(8, old0);\n-   try { curChar = input_stream.readChar(); }\n-   catch(java.io.IOException e) {\n-      jjStopStringLiteralDfa_0(9, active0);\n-      return 10;\n-   }\n-   switch(curChar)\n-   {\n-      case 62:\n-         if ((active0 & 0x4000000L) != 0L)\n-            return jjStopAtPos(10, 26);\n-         break;\n-      default :\n-         break;\n-   }\n-   return jjStartNfa_0(9, active0);\n }\n private int jjStartNfaWithStates_0(int pos, int kind, int state)\n {\n public static final String[] jjstrLiteralImages = {\n \"\", null, null, null, null, null, null, \"\\156\\165\\154\\154\", \"\\116\\141\\116\", \n \"\\111\\156\\146\\151\\156\\151\\164\\171\", null, null, null, null, null, null, null, null, \"\\42\", null, null, null, null, \n-null, null, null, \"\\51\\135\\175\\47\\12\\74\\144\\141\\164\\141\\76\", \"\\173\", \"\\175\", \"\\54\", \n-\"\\72\", \"\\133\", \"\\135\", \"\\55\", \"\\56\", };\n+null, null, null, \"\\51\\135\\175\\47\\12\", \"\\173\", \"\\175\", \"\\54\", \"\\72\", \"\\133\", \"\\135\", \n+\"\\55\", \"\\56\", };\n \n /** Lexer state names. */\n public static final String[] lexStateNames = {\n--- a/gson/src/test/java/com/google/gson/functional/SecurityTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/SecurityTest.java\n   /**\n    * Keep this in sync with Gson.JSON_NON_EXECUTABLE_PREFIX\n    */\n-  private static final String JSON_NON_EXECUTABLE_PREFIX = \")]}'\\n<data>\";\n+  private static final String JSON_NON_EXECUTABLE_PREFIX = \")]}'\\n\";\n \n   private GsonBuilder gsonBuilder;\n \n   public void testJsonWithNonExectuableTokenSerialization() {\n     Gson gson = gsonBuilder.generateNonExecutableJson().create();\n     String json = gson.toJson(JSON_NON_EXECUTABLE_PREFIX);\n-    assertTrue(json.contains(\")]}'\\n\\u003cdata\\u003e\"));\n+    assertTrue(json.contains(\")]}'\\n\"));\n   }\n   \n   /**\n    */\n   public void testJsonWithNonExectuableTokenWithRegularGsonDeserialization() {\n     Gson gson = gsonBuilder.create();\n-    String json = JSON_NON_EXECUTABLE_PREFIX + \"{stringValue:')]}\\\\u0027\\\\n<data>'}\";\n+    String json = JSON_NON_EXECUTABLE_PREFIX + \"{stringValue:')]}\\\\u0027\\\\n'}\";\n     BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);\n-    assertEquals(\")]}'\\n<data>\", target.stringValue);\n+    assertEquals(\")]}'\\n\", target.stringValue);\n   }  \n   \n   /**\n   public void testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization() {\n     // Gson should be able to deserialize a stream with non-exectuable token even if it is created \n     Gson gson = gsonBuilder.generateNonExecutableJson().create();\n-    String json = JSON_NON_EXECUTABLE_PREFIX + \"{intValue:2,stringValue:')]}\\\\u0027\\\\n<data>'}\";\n+    String json = JSON_NON_EXECUTABLE_PREFIX + \"{intValue:2,stringValue:')]}\\\\u0027\\\\n'}\";\n     BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);\n-    assertEquals(\")]}'\\n<data>\", target.stringValue);\n+    assertEquals(\")]}'\\n\", target.stringValue);\n     assertEquals(2, target.intValue);\n   }  \n }", "timestamp": 1237572155, "metainfo": ""}