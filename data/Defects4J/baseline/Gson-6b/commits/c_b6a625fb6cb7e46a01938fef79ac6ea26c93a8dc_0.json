{"sha": "b6a625fb6cb7e46a01938fef79ac6ea26c93a8dc", "log": "fixed issue 469 by adding a TypeAdapterFactory for throwables that ignores cause if it is self-referencing", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n import com.google.gson.internal.bind.ArrayTypeAdapter;\n import com.google.gson.internal.bind.CollectionTypeAdapterFactory;\n import com.google.gson.internal.bind.DateTypeAdapter;\n+import com.google.gson.internal.bind.ThrowableTypeAdapterFactory;\n import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;\n import com.google.gson.internal.bind.JsonTreeReader;\n import com.google.gson.internal.bind.JsonTreeWriter;\n     factories.add(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization));\n     factories.add(new JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor));\n     factories.add(TypeAdapters.ENUM_FACTORY);\n+    factories.add(new ThrowableTypeAdapterFactory(fieldNamingPolicy, excluder));\n     factories.add(new ReflectiveTypeAdapterFactory(\n         constructorConstructor, fieldNamingPolicy, excluder));\n \n--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n   }\n \n   public boolean excludeField(Field f, boolean serialize) {\n+    return excludeField(f, serialize, excluder);\n+  }\n+\n+  static boolean excludeField(Field f, boolean serialize, Excluder excluder) {\n     return !excluder.excludeClass(f.getType(), serialize) && !excluder.excludeField(f, serialize);\n   }\n \n   private String getFieldName(Field f) {\n+    return getFieldName(fieldNamingPolicy, f);\n+  }\n+\n+  static String getFieldName(FieldNamingStrategy fieldNamingPolicy, Field f) {\n     SerializedName serializedName = f.getAnnotation(SerializedName.class);\n     return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n   }\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n \n package com.google.gson.internal.bind;\n \n-import com.google.gson.TypeAdapterFactory;\n import java.io.IOException;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import com.google.gson.JsonPrimitive;\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.TypeAdapter;\n+import com.google.gson.TypeAdapterFactory;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.internal.LazilyParsedNumber;\n import com.google.gson.reflect.TypeToken;\n     }\n   }\n \n-  public static final TypeAdapterFactory ENUM_FACTORY = newEnumTypeHierarchyFactory();\n-\n-  public static TypeAdapterFactory newEnumTypeHierarchyFactory() {\n-    return new TypeAdapterFactory() {\n-      @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n-      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n-        Class<? super T> rawType = typeToken.getRawType();\n-        if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class) {\n-          return null;\n-        }\n-        if (!rawType.isEnum()) {\n-          rawType = rawType.getSuperclass(); // handle anonymous subclasses\n-        }\n-        return (TypeAdapter<T>) new EnumTypeAdapter(rawType);\n-      }\n-    };\n-  }\n+  public static final TypeAdapterFactory ENUM_FACTORY = new TypeAdapterFactory() {\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n+      Class<? super T> rawType = typeToken.getRawType();\n+      if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class) {\n+        return null;\n+      }\n+      if (!rawType.isEnum()) {\n+        rawType = rawType.getSuperclass(); // handle anonymous subclasses\n+      }\n+      return (TypeAdapter<T>) new EnumTypeAdapter(rawType);\n+    }\n+  };\n \n   public static <TT> TypeAdapterFactory newFactory(\n       final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter) {", "timestamp": 1416176723, "metainfo": ""}