{"sha": "756131d869465ac70abb9595653ea967e6812231", "log": "removed Eclipse 3.7 warnings.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n   private final boolean prettyPrinting;\n \n   final JsonDeserializationContext deserializationContext = new JsonDeserializationContext() {\n-    public <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\n+    @SuppressWarnings(\"unchecked\")\n+\tpublic <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\n       return (T) fromJson(json, typeOfT);\n     }\n   };\n    *   {@link GsonBuilder#excludeFieldsWithModifiers(int...)}.</li>\n    * </ul>\n    */\n-  @SuppressWarnings(\"unchecked\")\n   public Gson() {\n     this(Excluder.DEFAULT, FieldNamingPolicy.IDENTITY,\n         Collections.<Type, InstanceCreator<?>>emptyMap(), false, false, DEFAULT_JSON_NON_EXECUTABLE,\n    * @throws IllegalArgumentException if this GSON cannot serialize and\n    *     deserialize {@code type}.\n    */\n+  @SuppressWarnings(\"unchecked\")\n   public <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {\n     TypeAdapter<?> cached = typeTokenCache.get(type);\n     if (cached != null) {\n     }\n \n     Map<TypeToken<?>, FutureTypeAdapter<?>> threadCalls = calls.get();\n-    @SuppressWarnings(\"unchecked\") // the key and value type parameters always agree\n+    // the key and value type parameters always agree\n     FutureTypeAdapter<T> ongoingCall = (FutureTypeAdapter<T>) threadCalls.get(type);\n     if (ongoingCall != null) {\n       return ongoingCall;\n    * @return Json representation of {@code src}\n    * @since 1.4\n    */\n-  @SuppressWarnings({\"unchecked\", \"rawtypes\"}) // the caller is required to make src and typeOfSrc consistent\n   public JsonElement toJsonTree(Object src, Type typeOfSrc) {\n     JsonElementWriter writer = new JsonElementWriter();\n     toJson(src, typeOfSrc, writer);\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type\n    * @since 1.2\n    */\n+  @SuppressWarnings(\"unchecked\")\n   public <T> T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n     JsonReader jsonReader = new JsonReader(json);\n     T object = (T) fromJson(jsonReader, typeOfT);\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\n    * @since 1.3\n    */\n+  @SuppressWarnings(\"unchecked\")\n   public <T> T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException {\n     if (json == null) {\n       return null;\n--- a/gson/src/main/java/com/google/gson/TreeTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/TreeTypeAdapter.java\n     private SingleTypeFactory(Object typeAdapter, TypeToken<?> exactType, boolean matchRawType,\n         Class<?> hierarchyType) {\n       serializer = typeAdapter instanceof JsonSerializer\n-          ? (JsonSerializer) typeAdapter\n+          ? (JsonSerializer<?>) typeAdapter\n           : null;\n       deserializer = typeAdapter instanceof JsonDeserializer\n-          ? (JsonDeserializer) typeAdapter\n+          ? (JsonDeserializer<?>) typeAdapter\n           : null;\n       $Gson$Preconditions.checkArgument(serializer != null || deserializer != null);\n       this.exactType = exactType;\n--- a/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java\n     assertEquals(3, map.size());\n   }\n \n-  @SuppressWarnings(\"unused\")\n   public void testSerialize() throws Exception {\n     Object object = new RuntimeType();\n     assertEquals(\"{'a':5,'b':[1,2,null]}\", adapter.toJson(object).replace(\"\\\"\", \"'\"));\n     assertEquals(\"{}\", adapter.toJson(new Object()));\n   }\n \n+  @SuppressWarnings(\"unused\")\n   private class RuntimeType {\n     Object a = 5;\n     Object b = Arrays.asList(1, 2, null);", "timestamp": 1322994247, "metainfo": ""}