{"sha": "cc90a68241aa3ab849c0886b479da3a6449ba210", "log": "Fixed issue 68 by providing support to override default type adapters for primitive types. Added a visitFieldUsingCustomHandler method to handle this in the visitors.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n   /**\n    * Constructs a Gson object with the specified version and the mode of operation while\n    * encountering inner class references.\n-   *\n-   * @param factory the object navigator factory to use when creating a new {@link ObjectNavigator}\n-   * instance\n    */\n   Gson(ExclusionStrategy strategy, FieldNamingStrategy fieldNamingPolicy) {\n     this(strategy, fieldNamingPolicy, createObjectConstructor(DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS),\n--- a/gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java\n   public void visitPrimitiveField(Field f, Type typeOfF, Object obj) {\n     throw new UnsupportedOperationException();\n   }\n+\n+  public boolean visitFieldUsingCustomHandler(Field f, Type actualTypeOfField, Object parent) {\n+    throw new UnsupportedOperationException();\n+  }\n }\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n   protected T target;\n   protected final JsonElement json;\n   protected final Type targetType;\n-  private final JsonDeserializationContext context;\n+  protected final JsonDeserializationContext context;\n \n   public JsonDeserializationVisitor(JsonElement json, Type targetType,\n       ObjectNavigatorFactory factory, ObjectConstructor objectConstructor, TypeAdapter typeAdapter,\n--- a/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n     FieldNamingStrategy namingPolicy = factory.getFieldNamingPolicy();\n     return namingPolicy.translateName(f);\n   }\n+\n+  public boolean visitFieldUsingCustomHandler(Field f, Type actualTypeOfField, Object parent) {\n+    try {\n+      @SuppressWarnings(\"unchecked\")\n+      JsonDeserializer deserializer = deserializers.getHandlerFor(actualTypeOfField);\n+      if (deserializer != null) {\n+        String fName = getFieldName(f);\n+        JsonElement child = json.getAsJsonObject().get(fName);\n+        if (child == null) {\n+          child = JsonNull.INSTANCE;\n+        }\n+        Object value = deserializer.deserialize(child, actualTypeOfField, context);\n+        f.set(parent, value);\n+        return true;\n+      }\n+      return false;\n+    } catch (IllegalAccessException e) {\n+      throw new RuntimeException();\n+    }\n+  }\n }\n--- a/gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java\n     // should not be called since this case should invoke JsonArrayDeserializationVisitor\n     throw new IllegalStateException();\n   }\n+\n+  public boolean visitFieldUsingCustomHandler(Field f, Type actualTypeOfField, Object parent) {\n+    // should not be called since this case should invoke JsonObjectDeserializationVisitor\n+    throw new IllegalStateException();\n+  }\n }\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n       serializer = serializers.getHandlerFor(Map.class);\n     }\n     if (serializer != null) {\n-      assignToRoot(serializer.serialize(obj, objType, context));\n+      if (obj == null) {\n+        assignToRoot(JsonNull.INSTANCE);\n+      } else {\n+        assignToRoot(serializer.serialize(obj, objType, context));\n+      }\n       return true;\n     }\n     return false;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public boolean visitFieldUsingCustomHandler(Field f, Type actualTypeOfField, Object parent) {\n+    try {\n+      Preconditions.checkState(root.isJsonObject());\n+      Object obj = f.get(parent);\n+      JsonSerializer serializer = serializers.getHandlerFor(actualTypeOfField);\n+      if (serializer == null && obj instanceof Map) {\n+        serializer = serializers.getHandlerFor(Map.class);\n+      }\n+      if (serializer != null) {\n+        JsonElement child = serializer.serialize(obj, actualTypeOfField, context);\n+        addChildAsElement(f, child);\n+        return true;\n+      }\n+      return false;\n+    } catch (IllegalAccessException e) {\n+      throw new RuntimeException();\n+    }\n   }\n \n   private void assignToRoot(JsonElement newRoot) {\n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n      * @return true if a custom handler exists, false otherwise\n      */\n     public boolean visitUsingCustomHandler(Object obj, Type objType);\n+\n+    /**\n+     * This is called to visit a field of the current object using a custom handler\n+     */\n+    public boolean visitFieldUsingCustomHandler(Field f, Type actualTypeOfField, Object parent);\n   }\n \n   private final ExclusionStrategy exclusionStrategy;\n     ancestors.push(obj);\n \n     try {\n-      if (objTypeInfo.isCollectionOrArray()) {\n-        if (objTypeInfo.isArray()) {\n-          visitor.visitArray(obj, objType);\n-        } else { // must be a collection\n-          visitor.visitCollection((Collection<?>) obj, objType);\n-        }\n-      } else if (objTypeInfo.isEnum()) {\n-        visitor.visitEnum(obj, objType);\n-      } else if (objTypeInfo.isPrimitiveOrStringAndNotAnArray()) {\n-        visitor.visitPrimitiveValue(obj);\n-      } else {\n-        if (!visitor.visitUsingCustomHandler(obj, objType)) {\n+      boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler(obj, objType);\n+      if (!visitedWithCustomHandler) {\n+        if (objTypeInfo.isCollectionOrArray()) {\n+          if (objTypeInfo.isArray()) {\n+            visitor.visitArray(obj, objType);\n+          } else { // must be a collection\n+            visitor.visitCollection((Collection<?>) obj, objType);\n+          }\n+        } else if (objTypeInfo.isEnum()) {\n+          visitor.visitEnum(obj, objType);\n+        } else if (objTypeInfo.isPrimitiveOrStringAndNotAnArray()) {\n+          visitor.visitPrimitiveValue(obj);\n+        } else {\n           visitor.startVisitingObject(obj);\n           // For all classes in the inheritance hierarchy (including the current class),\n           // visit all fields\n           for (Class<?> curr = objTypeInfo.getRawClass();\n-              curr != null && !curr.equals(Object.class); curr = curr.getSuperclass()) {\n+          curr != null && !curr.equals(Object.class); curr = curr.getSuperclass()) {\n             if (!curr.isSynthetic()) {\n               navigateClassFields(obj, curr, visitor);\n             }\n       Type actualTypeOfField = fieldTypeInfo.getActualType();\n       if (exclusionStrategy.shouldSkipField(f)) {\n         continue; // skip\n-      } else if (fieldTypeInfo.isCollectionOrArray()) {\n-        if (fieldTypeInfo.isArray()) {\n-          visitor.visitArrayField(f, actualTypeOfField, obj);\n-        } else { // must be Collection\n-          visitor.visitCollectionField(f, actualTypeOfField, obj);\n+      } else {\n+        boolean visitedWithCustomHandler = \n+          visitor.visitFieldUsingCustomHandler(f, actualTypeOfField, obj);\n+        if (!visitedWithCustomHandler) {\n+          if (fieldTypeInfo.isCollectionOrArray()) {\n+            if (fieldTypeInfo.isArray()) {\n+              visitor.visitArrayField(f, actualTypeOfField, obj);\n+            } else { // must be Collection\n+              visitor.visitCollectionField(f, actualTypeOfField, obj);\n+            }\n+          } else if (fieldTypeInfo.isPrimitiveOrStringAndNotAnArray()) {\n+            visitor.visitPrimitiveField(f, actualTypeOfField, obj);\n+          } else {\n+            visitor.visitObjectField(f, actualTypeOfField, obj);\n+          }\n         }\n-      } else if (fieldTypeInfo.isPrimitiveOrStringAndNotAnArray()) {\n-        visitor.visitPrimitiveField(f, actualTypeOfField, obj);\n-      } else {\n-        visitor.visitObjectField(f, actualTypeOfField, obj);\n       }\n     }\n   }\n--- a/gson/src/main/java/com/google/gson/Preconditions.java\n+++ b/gson/src/main/java/com/google/gson/Preconditions.java\n       throw new IllegalArgumentException(\"condition failed: \" + condition);\n     }\n   }\n+  \n+  public static void checkState(boolean condition) {\n+    if (!condition) {\n+      throw new IllegalArgumentException(\"condition failed: \" + condition);\n+    }\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n import com.google.gson.JsonDeserializationContext;\n import com.google.gson.JsonDeserializer;\n import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n import com.google.gson.JsonObject;\n import com.google.gson.JsonParseException;\n import com.google.gson.JsonPrimitive;\n     }\n   }\n   \n+  public void testCustomSerializerForLong() {\n+    final ClassWithBooleanField customSerializerInvoked = new ClassWithBooleanField();\n+    customSerializerInvoked.value = false;\n+    Gson gson = new GsonBuilder().registerTypeAdapter(Long.class, new JsonSerializer<Long>() {\n+      public JsonElement serialize(Long src, Type typeOfSrc, JsonSerializationContext context) {\n+        customSerializerInvoked.value = true;\n+        return src == null ? new JsonNull() : new JsonPrimitive(src);\n+      }      \n+    }).serializeNulls().create();\n+    ClassWithWrapperLongField src = new ClassWithWrapperLongField();\n+    String json = gson.toJson(src);\n+    assertTrue(json.contains(\"\\\"value\\\":null\"));\n+    assertTrue(customSerializerInvoked.value);\n+    \n+    customSerializerInvoked.value = false;\n+    src.value = 10L;\n+    json = gson.toJson(src);\n+    assertTrue(json.contains(\"\\\"value\\\":10\"));\n+    assertTrue(customSerializerInvoked.value);\n+  }\n+  \n   public void testCustomDeserializerForLong() {\n     final ClassWithBooleanField customDeserializerInvoked = new ClassWithBooleanField();\n     customDeserializerInvoked.value = false;\n       public Long deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n           throws JsonParseException {\n         customDeserializerInvoked.value = true;\n-        String str = json.getAsJsonPrimitive().getAsString();\n-        return str.length() == 0 ? null : Long.parseLong(str);\n+        if (json == null || json.isJsonNull()) {\n+          return null;\n+        } else {\n+          Number number = json.getAsJsonPrimitive().getAsNumber();\n+          return number == null ? null : number.longValue();\n+        }\n       }      \n     }).create();\n     String json = \"{'value':null}\";\n     ClassWithWrapperLongField target = gson.fromJson(json, ClassWithWrapperLongField.class);\n     assertNull(target.value);\n     assertTrue(customDeserializerInvoked.value);\n+    \n+    customDeserializerInvoked.value = false;\n+    json = \"{'value':10}\";\n+    target = gson.fromJson(json, ClassWithWrapperLongField.class);\n+    assertEquals(10L, target.value.longValue());\n+    assertTrue(customDeserializerInvoked.value);\n   }\n   \n   private static class ClassWithWrapperLongField {", "timestamp": 1225412398, "metainfo": ""}