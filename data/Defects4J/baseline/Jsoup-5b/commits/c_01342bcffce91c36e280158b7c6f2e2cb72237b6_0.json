{"sha": "01342bcffce91c36e280158b7c6f2e2cb72237b6", "log": "Flipped integration test to use Parse(File)", "commit": "\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n import org.jsoup.select.Elements;\n import org.junit.Test;\n \n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.Reader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n \n import static org.junit.Assert.*;\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class ParseTest {\n \n-    @Test public void testSmhBizArticle() {\n-        String h = loadFile(\"/htmltests/smh-biz-article-1.html\");\n-        Document doc = Jsoup.parse(h, \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\");\n+    @Test public void testSmhBizArticle() throws IOException {\n+        File in = getFile(\"/htmltests/smh-biz-article-1.html\");\n+        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\");\n         assertEquals(\"The board\u2019s next fear: the female quota\", doc.title()); // note that the apos in the source is a literal \u2019 (8217), not escaped or '\n         assertEquals(\"en\", doc.select(\"html\").attr(\"xml:lang\"));\n \n         \n     }\n     \n-    @Test public void testNewsHomepage() {\n-        String h = loadFile(\"/htmltests/news-com-au-home.html\");\n-        Document doc = Jsoup.parse(h, \"http://www.news.com.au/\");\n+    @Test public void testNewsHomepage() throws IOException {\n+        File in = getFile(\"/htmltests/news-com-au-home.html\");\n+        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\");\n         assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title());\n         assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim());\n         \n         assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\"));\n     }\n     \n-    @Test public void testGoogleSearchIpod() {\n-        String h = loadFile(\"/htmltests/google-ipod.html\");\n-        Document doc = Jsoup.parse(h, \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\");\n+    @Test public void testGoogleSearchIpod() throws IOException {\n+        File in = getFile(\"/htmltests/google-ipod.html\");\n+        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\");\n         assertEquals(\"ipod - Google Search\", doc.title());\n         Elements results = doc.select(\"h3.r > a\");\n         assertEquals(12, results.size());\n                 results.get(1).attr(\"href\"));\n     }\n     \n-    @Test public void testBinary() {\n-        String h = loadFile(\"/htmltests/thumb.jpg\");\n-        Document doc = Jsoup.parse(h);\n+    @Test public void testBinary() throws IOException {\n+        File in = getFile(\"/htmltests/thumb.jpg\");\n+        Document doc = Jsoup.parse(in, \"UTF-8\");\n         // nothing useful, but did not blow up\n         assertTrue(doc.text().contains(\"gd-jpeg\"));\n     }\n     \n-    @Test public void testYahooJp() {\n-        String h = loadFile(\"/htmltests/yahoo-jp.html\");\n-        Document doc = Jsoup.parse(h, \"http://www.yahoo.co.jp/index.html\"); // http charset is utf-8.\n+    @Test public void testYahooJp() throws IOException {\n+        File in = getFile(\"/htmltests/yahoo-jp.html\");\n+        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.yahoo.co.jp/index.html\"); // http charset is utf-8.\n         assertEquals(\"Yahoo! JAPAN\", doc.title());\n         Element a = doc.select(\"a[href=t/2322m2]\").first();\n         assertEquals(\"http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2\", \n                 a.attr(\"abs:href\")); // session put into <base>\n         assertEquals(\"\u5168\u56fd\u3001\u4eba\u6c17\u306e\u99c5\u30e9\u30f3\u30ad\u30f3\u30b0\", a.text());\n     }\n-\n-    private String loadFile(String filename) {\n-        InputStream is = ParseTest.class.getResourceAsStream(filename);\n-\n+    \n+    File getFile(String resourceName) {\n         try {\n-            char[] buffer = new char[0x10000];\n-            StringBuilder out = new StringBuilder();\n-            Reader in = new InputStreamReader(is, \"UTF-8\");\n-            int read;\n-            do {\n-                read = in.read(buffer, 0, buffer.length);\n-                if (read > 0) {\n-                    out.append(buffer, 0, read);\n-                }\n-\n-            } while (read >= 0);\n-\n-            return out.toString();\n-        } catch (Exception e) {\n-            throw new IllegalStateException(\"Exception loading file\", e);\n+            File file = new File(ParseTest.class.getResource(resourceName).toURI());\n+            return file;\n+        }\n+        catch (URISyntaxException e) {\n+            throw new IllegalStateException(e);\n         }\n     }\n }", "timestamp": 1309605107, "metainfo": ""}