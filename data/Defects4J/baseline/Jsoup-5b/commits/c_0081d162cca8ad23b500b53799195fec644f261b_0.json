{"sha": "0081d162cca8ad23b500b53799195fec644f261b", "log": "Improved implicit close tag heuristic detection when parsing malformed HTML.  Fixes an issue where appending / prepending rows to a table (or  to similar implicit element structures) would create a redundant wrapping elements.  Fixes #21", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     public Element append(String html) {\n         Validate.notNull(html);\n         \n-        Element fragment = Parser.parseBodyFragment(html, baseUri).body();\n-        // TODO: must parse without implicit elements, so you can e.g. add <td> to a <tr> (without creating a whole new table)\n+        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n         for (Node node : fragment.childNodes()) {\n             node.parentNode = null;\n             appendChild(node);\n     public Element prepend(String html) {\n         Validate.notNull(html);\n         \n-        Element fragment = Parser.parseBodyFragment(html, baseUri).body();\n-        // TODO: must parse without implicit elements, so you can e.g. add <td> to a <tr> (without creating a whole new table)\n+        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n         List<Node> nodes = fragment.childNodes();\n         for (int i = nodes.size() - 1; i >= 0; i--) {\n             Node node = nodes.get(i);\n     public Element wrap(String html) {\n         Validate.notEmpty(html);\n \n-        Element wrapBody = Parser.parseBodyFragment(html, baseUri).body();\n+        Element wrapBody = Parser.parseBodyFragmentRelaxed(html, baseUri).body();\n         Elements wrapChildren = wrapBody.children();\n         Element wrap = wrapChildren.first();\n         if (wrap == null) // nothing to wrap with; noop\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n     private final TokenQueue tq;\n     private final Document doc;\n     private String baseUri;\n+    private boolean relaxed = false;\n \n     private Parser(String html, String baseUri, boolean isBodyFragment) {\n         Validate.notNull(html);\n      */\n     public static Document parseBodyFragment(String bodyHtml, String baseUri) {\n         Parser parser = new Parser(bodyHtml, baseUri, true);\n+        return parser.parse();\n+    }\n+\n+    /**\n+     Parse a fragment of HTML into the {@code body} of a Document, with relaxed parsing enabled. Relaxed, in this\n+     context, means that implicit tags are not automatically created when missing.\n+     @param bodyHtml fragment of HTML\n+     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n+     @return Document, with empty head, and HTML parsed into body\n+     */\n+    public static Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {\n+        Parser parser = new Parser(bodyHtml, baseUri, true);\n+        parser.relaxed = true;\n         return parser.parse();\n     }\n \n         Tag childTag = child.tag();\n         boolean validAncestor = stackHasValidParent(childTag);\n \n-        if (!validAncestor) {\n+        if (!validAncestor && !relaxed) {\n             // create implicit parent around this child\n             Tag parentTag = childTag.getImplicitParent();\n             Element implicit = new Element(parentTag, baseUri);\n     private boolean stackHasValidParent(Tag childTag) {\n         if (stack.size() == 1 && childTag.equals(htmlTag))\n             return true; // root is valid for html node\n-        \n+\n+        if (childTag.requiresSpecificParent())\n+            return stack.getLast().tag().isValidParent(childTag);\n+\n+        // otherwise, look up the stack for valid ancestors\n         for (int i = stack.size() -1; i >= 0; i--) {\n             Element el = stack.get(i);\n             Tag parent2 = el.tag();\n-            if (parent2.isValidParent(childTag)) {\n+            if (parent2.isValidAncestor(childTag)) {\n                 return true;\n             }\n         }\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n     private boolean optionalClosing = false; // If tag is open, and another seen, close previous tag\n     private boolean empty = false; // can hold nothing; e.g. img\n     private boolean preserveWhitespace = false; // for pre, textarea, script etc\n-    private List<Tag> ancestors;\n+    private List<Tag> ancestors; // elements must be a descendant of one of these ancestors\n+    private Tag parent; // if not null, elements must be a direct child of parent\n \n     private Tag(String tagName) {\n         this.tagName = tagName.toLowerCase();\n         if (this.tagName.equals(\"dd\") && child.tagName.equals(\"dt\"))\n             return false;\n \n+        // don't allow children to contain their parent (directly)\n+        if (this.requiresSpecificParent() && this.getImplicitParent().equals(child))\n+            return false;\n+        \n         return true;\n     }\n \n         return (!ancestors.isEmpty()) ? ancestors.get(0) : null;\n     }\n \n+    boolean requiresSpecificParent() {\n+        return this.parent != null;\n+    }\n+\n     boolean isValidParent(Tag child) {\n+        return this.equals(child.parent);\n+    }\n+\n+    boolean isValidAncestor(Tag child) {\n         if (child.ancestors.isEmpty())\n             return true; // HTML tag\n \n         createBlock(\"TITLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n         createInline(\"BASE\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n \n-        createBlock(\"FRAME\").setAncestor(\"FRAMESET\").setEmpty();\n-        createBlock(\"NOFRAMES\").setAncestor(\"FRAMESET\").setContainDataOnly();\n+        createBlock(\"FRAME\").setParent(\"FRAMESET\").setEmpty();\n+        createBlock(\"NOFRAMES\").setParent(\"FRAMESET\").setContainDataOnly();\n \n \n \n         createInline(\"TEXTAREA\").setAncestor(\"FORM\").setContainDataOnly();\n         createInline(\"LABEL\").setAncestor(\"FORM\").setOptionalClosing(); // not self\n         createInline(\"BUTTON\").setAncestor(\"FORM\"); // bunch of excludes not defined\n-        createInline(\"OPTGROUP\").setAncestor(\"SELECT\"); //  only contain option\n-        createInline(\"OPTION\").setAncestor(\"SELECT\").setContainDataOnly();\n+        createInline(\"OPTGROUP\").setParent(\"SELECT\"); //  only contain option\n+        createInline(\"OPTION\").setParent(\"SELECT\").setContainDataOnly();\n         createBlock(\"FIELDSET\").setAncestor(\"FORM\");\n         createInline(\"LEGEND\").setAncestor(\"FIELDSET\");\n \n         // other\n         createInline(\"AREA\").setEmpty(); // not an inline per-se\n-        createInline(\"PARAM\").setAncestor(\"OBJECT\").setEmpty();\n+        createInline(\"PARAM\").setParent(\"OBJECT\").setEmpty();\n         createBlock(\"INS\"); // only within body\n         createBlock(\"DEL\"); // only within body\n \n         createBlock(\"DL\");\n-        createInline(\"DT\").setAncestor(\"DL\").setOptionalClosing(); // only within DL.\n-        createInline(\"DD\").setAncestor(\"DL\").setOptionalClosing(); // only within DL.\n+        createInline(\"DT\").setParent(\"DL\").setOptionalClosing(); // only within DL.\n+        createInline(\"DD\").setParent(\"DL\").setOptionalClosing(); // only within DL.\n \n         createBlock(\"LI\").setAncestor(\"UL\", \"OL\").setOptionalClosing(); // only within OL or UL.\n \n         // tables\n         createBlock(\"TABLE\"); // specific list of only includes (tr, td, thead etc) not implemented\n-        createBlock(\"CAPTION\").setAncestor(\"TABLE\");\n-        createBlock(\"THEAD\").setAncestor(\"TABLE\").setOptionalClosing(); // just TR\n-        createBlock(\"TFOOT\").setAncestor(\"TABLE\").setOptionalClosing(); // just TR\n-        createBlock(\"TBODY\").setAncestor(\"TABLE\").setOptionalClosing(); // optional / implicit open too. just TR\n-        createBlock(\"COLGROUP\").setAncestor(\"TABLE\").setOptionalClosing(); // just COL\n-        createBlock(\"COL\").setAncestor(\"COLGROUP\").setEmpty();\n-        createBlock(\"TR\").setAncestor(\"TABLE\").setOptionalClosing(); // just TH, TD\n-        createBlock(\"TH\").setAncestor(\"TR\").setOptionalClosing();\n-        createBlock(\"TD\").setAncestor(\"TR\").setOptionalClosing();\n+        createBlock(\"CAPTION\").setParent(\"TABLE\");\n+        createBlock(\"THEAD\").setParent(\"TABLE\").setOptionalClosing(); // just TR\n+        createBlock(\"TFOOT\").setParent(\"TABLE\").setOptionalClosing(); // just TR\n+        createBlock(\"TBODY\").setParent(\"TABLE\").setOptionalClosing(); // optional / implicit open too. just TR\n+        createBlock(\"COLGROUP\").setParent(\"TABLE\").setOptionalClosing(); // just COL\n+        createBlock(\"COL\").setParent(\"COLGROUP\").setEmpty();\n+        createBlock(\"TR\").setParent(\"TABLE\").setOptionalClosing(); // just TH, TD\n+        createBlock(\"TH\").setParent(\"TR\").setOptionalClosing();\n+        createBlock(\"TD\").setParent(\"TR\").setOptionalClosing();\n     }\n \n     private static Tag createBlock(String tagName) {\n         }\n         return this;\n     }\n+\n+    private Tag setParent(String tagName) {\n+        parent = Tag.valueOf(tagName);\n+        setAncestor(tagName);\n+        return this;\n+    }\n }\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(\"<html><head></head><body><div id=\\\"1\\\"><p>Hello</p><p>there</p><p class=\\\"second\\\">now</p></div></body></html>\",\n                 TextUtil.stripNewlines(doc.html()));\n     }\n+\n+    @Test public void testAppendRowToTable() {\n+        Document doc = Jsoup.parse(\"<table><tr><td>1</td></tr></table>\");\n+        Element table = doc.select(\"table\").first();\n+        table.append(\"<tr><td>2</td></tr>\");\n+\n+        assertEquals(\"<table><tr><td>1</td></tr><tr><td>2</td></tr></table>\", TextUtil.stripNewlines(doc.body().html()));\n+    }\n+\n+        @Test public void testPrependRowToTable() {\n+        Document doc = Jsoup.parse(\"<table><tr><td>1</td></tr></table>\");\n+        Element table = doc.select(\"table\").first();\n+        table.prepend(\"<tr><td>2</td></tr>\");\n+\n+        assertEquals(\"<table><tr><td>2</td></tr><tr><td>1</td></tr></table>\", TextUtil.stripNewlines(doc.body().html()));\n+    }\n     \n     @Test public void testPrependElement() {\n         Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n         assertEquals(\"<table><tr><td>Hello</td><td><p>There</p><p>now</p></td></tr></table>\", TextUtil.stripNewlines(doc.body().html()));\n     }\n \n+    @Test public void handlesNestedImplicitTable() {\n+        Document doc = Jsoup.parse(\"<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>\");\n+        assertEquals(\"<table><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tr><td>3</td> <td>4</td></tr></table> </td></tr><tr><td>5</td></tr></table>\", TextUtil.stripNewlines(doc.body().html()));\n+    }\n+\n     @Test public void handlesBaseTags() {\n         String h = \"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>\";\n         Document doc = Jsoup.parse(h, \"http://foo/\");", "timestamp": 1309605113, "metainfo": ""}