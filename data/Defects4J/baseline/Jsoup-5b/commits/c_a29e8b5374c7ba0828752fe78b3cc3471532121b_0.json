{"sha": "a29e8b5374c7ba0828752fe78b3cc3471532121b", "log": "Initial implementation of AttributeParser.", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n+package org.jsoup.nodes;\n+\n+import org.apache.commons.lang.Validate;\n+\n+/**\n+ A single key + value attribute.\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class Attribute {\n+    private String key;\n+    private String value;\n+\n+    public Attribute(String key, String value) {\n+        Validate.notEmpty(key);\n+        Validate.notNull(value);\n+        this.key = key;\n+        this.value = value;\n+    }\n+\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(String key) {\n+        Validate.notEmpty(key);\n+        this.key = key;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        Validate.notNull(value);\n+        this.value = value;\n+    }\n+}\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n package org.jsoup.nodes;\n+\n+import org.apache.commons.lang.Validate;\n+\n+import java.util.LinkedHashMap;\n \n /**\n  Element attribute list.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class Attributes {\n+    private LinkedHashMap<String, String> attributes = new LinkedHashMap<String, String>(); // linked hash map to preserve insertion order.\n+\n+    public String get(String key) {\n+        Validate.notEmpty(key);\n+        return attributes.get(key.toLowerCase());\n+    }\n+\n+    public void put(String key, String value) {\n+        Validate.notEmpty(key);\n+        Validate.notNull(value);\n+        attributes.put(key.toLowerCase(), value);\n+    }\n+\n+    public void put(Attribute attribute) {\n+        Validate.notNull(attribute);\n+        put(attribute.getKey(), attribute.getValue());\n+    }\n+\n+    public void remove(String key) {\n+        Validate.notEmpty(key);\n+        attributes.remove(key.toLowerCase());\n+    }\n+\n+    public int size() {\n+        return attributes.size();\n+    }\n+\n+    // todo: toString, list (as List<Attribute>)\n+\n+\n }\n--- a/src/main/java/org/jsoup/parser/AttributeParser.java\n+++ b/src/main/java/org/jsoup/parser/AttributeParser.java\n package org.jsoup.parser;\n \n+import org.jsoup.nodes.Attribute;\n import org.jsoup.nodes.Attributes;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.regex.Pattern;\n \n /**\n  Parse attribute strings into attributes.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class AttributeParser {\n+    private static final char SQ = '\\'';\n+    private static final char DQ = '\"';\n+    private static final char EQ = '=';\n+    private static final Pattern keyOk = Pattern.compile(\"[^\\\\s'\\\"=]\");\n+    private static final Pattern space = Pattern.compile(\"[\\\\s]\");\n \n     public Attributes parse(String attributeString) {\n-        return null;\n-        // TODO: implement\n+        Attributes attributes = new Attributes();\n+        if (attributeString == null || attributeString.trim().isEmpty())\n+            return attributes;\n+\n+        char[] charArray = attributeString.trim().toCharArray();\n+        Queue<Character> chars = new LinkedList<Character>();\n+        for (char c : charArray) {\n+            chars.add(c);\n+        }\n+\n+        while (chars.size() > 0) {\n+            Attribute attribute = nextAttribute(chars);\n+            if (attribute != null)\n+                attributes.put(attribute);\n+        }\n+        return attributes;\n+    }\n+\n+    private Attribute nextAttribute(Queue<Character> chars) {\n+        StringBuilder key = new StringBuilder();\n+        StringBuilder value = new StringBuilder();\n+        boolean seenEquals = false;\n+        Character quoteChar = null;\n+\n+        // From: foo=\"bar\" foo = 'bar \"qux\" zap' foo = bar foo foo foo=\"data = something\"\n+        // To: <foo=bar>, <foo=bar \"qux\" zap>, <foo=bar>, <foo=>, <foo=>, <foo=data = something>\n+        while (chars.size() > 0) {\n+            Character c = chars.remove();\n+            String s = c.toString();\n+\n+            // this is a bit gnarly. ideas on rewrite with expect + consume. Doesn't seem like a regular expression though.\n+\n+            if (!seenEquals && keyOk.matcher(s).matches()) {\n+                // accum the key\n+                key.append(s);\n+            } else if (!seenEquals && key.length() > 0 && space.matcher(s).matches()) {\n+                // if we have a key, then a run of space, then a key-like char: that's a new key and we need to break before\n+                Character nextC = chars.peek();\n+                if (nextC != null && keyOk.matcher(nextC.toString()).matches())\n+                    break;\n+            } else if (!seenEquals && c == EQ) { //\n+                seenEquals = true;\n+            } else if (seenEquals) {\n+                // working on the value\n+                if (quoteChar == null && (c == SQ || c == DQ)) {\n+                    // match until closing quote\n+                    quoteChar = c;\n+                } else if (c == quoteChar) {\n+                    // closing quote\n+                    break;\n+                } else if (quoteChar == null && value.length() > 0 && space.matcher(s).matches()) {\n+                    // we have found a space in a naked value (foo=bar): end of the line\n+                    break;\n+                } else {\n+                    // accum the value\n+                    value.append(s);\n+                }\n+            }\n+        }\n+\n+        // TODO[must] de-entify / unescape attribute values (and keys too I guess)\n+\n+        // return an attribute if we have a key (val can be empty)\n+        if (key.length() > 0)\n+            return new Attribute(key.toString().trim(), value.toString().trim());\n+        else\n+            return null;\n     }\n }\n--- /dev/null\n+++ b/src/test/java/org/jsoup/parser/AttributeParserTest.java\n+package org.jsoup.parser;\n+\n+import org.jsoup.nodes.Attributes;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ Test suite for attribute parser.\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class AttributeParserTest {\n+\n+    @Test public void parsesRoughAttributeString() {\n+        String a = \"id=\\\"123\\\" class=\\\"baz = 'bar'\\\" style = 'border: 2px'qux zim foo = 12 mux.=18 \";\n+        // should be: <id=123>, <class=baz = 'bar'>, <qux=>, <zim=>, <foo=12>, <mux.=18>\n+\n+        AttributeParser ap = new AttributeParser();\n+        Attributes attr = ap.parse(a);\n+        assertEquals(7, attr.size());\n+        assertEquals(\"123\", attr.get(\"id\"));\n+        assertEquals(\"baz = 'bar'\", attr.get(\"class\"));\n+        assertEquals(\"border: 2px\", attr.get(\"style\"));\n+        assertEquals(\"\", attr.get(\"qux\"));\n+        assertEquals(\"\", attr.get(\"zim\"));\n+        assertEquals(\"12\", attr.get(\"foo\"));\n+        assertEquals(\"18\", attr.get(\"mux.\"));\n+    }\n+\n+    @Test public void parsesEmptyString() {\n+        AttributeParser ap = new AttributeParser();\n+        Attributes attr = ap.parse(\"\");\n+        assertEquals(0, attr.size());\n+    }\n+\n+    @Test public void emptyOnNoKey() {\n+        AttributeParser ap = new AttributeParser();\n+        Attributes attr = ap.parse(\"=empty\");\n+        assertEquals(0, attr.size());\n+    }\n+\n+    @Test public void parserIsReusable() {\n+        AttributeParser ap = new AttributeParser();\n+        Attributes attr = ap.parse(\"id=bar\");\n+        assertEquals(1, attr.size());\n+        assertEquals(\"bar\", attr.get(\"id\"));\n+\n+        attr = ap.parse(\"id=qux\");\n+        assertEquals(1, attr.size());\n+        assertEquals(\"qux\", attr.get(\"id\"));\n+    }\n+}", "timestamp": 1309605100, "metainfo": ""}