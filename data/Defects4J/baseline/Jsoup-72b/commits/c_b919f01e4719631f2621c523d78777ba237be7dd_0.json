{"sha": "b919f01e4719631f2621c523d78777ba237be7dd", "log": "In Whitelists, validate that removed protocol exists before removing.", "commit": "\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n      </p>\n \n      @param tag  The tag the attributes are for. The tag will be added to the allowed tag list if necessary.\n-     @param keys List of valid attributes for the tag\n+     @param attributes List of valid attributes for the tag\n      @return this (for chaining)\n      */\n-    public Whitelist addAttributes(String tag, String... keys) {\n+    public Whitelist addAttributes(String tag, String... attributes) {\n         Validate.notEmpty(tag);\n-        Validate.notNull(keys);\n-        Validate.isTrue(keys.length > 0, \"No attributes supplied.\");\n+        Validate.notNull(attributes);\n+        Validate.isTrue(attributes.length > 0, \"No attribute names supplied.\");\n \n         TagName tagName = TagName.valueOf(tag);\n         if (!tagNames.contains(tagName))\n             tagNames.add(tagName);\n         Set<AttributeKey> attributeSet = new HashSet<AttributeKey>();\n-        for (String key : keys) {\n+        for (String key : attributes) {\n             Validate.notEmpty(key);\n             attributeSet.add(AttributeKey.valueOf(key));\n         }\n-        if (attributes.containsKey(tagName)) {\n-            Set<AttributeKey> currentSet = attributes.get(tagName);\n+        if (this.attributes.containsKey(tagName)) {\n+            Set<AttributeKey> currentSet = this.attributes.get(tagName);\n             currentSet.addAll(attributeSet);\n         } else {\n-            attributes.put(tagName, attributeSet);\n+            this.attributes.put(tagName, attributeSet);\n         }\n         return this;\n     }\n      </p>\n \n      @param tag  The tag the attributes are for.\n-     @param keys List of invalid attributes for the tag\n+     @param attributes List of invalid attributes for the tag\n      @return this (for chaining)\n      */\n-    public Whitelist removeAttributes(String tag, String... keys) {\n+    public Whitelist removeAttributes(String tag, String... attributes) {\n         Validate.notEmpty(tag);\n-        Validate.notNull(keys);\n-        Validate.isTrue(keys.length > 0, \"No attributes supplied.\");\n+        Validate.notNull(attributes);\n+        Validate.isTrue(attributes.length > 0, \"No attribute names supplied.\");\n \n         TagName tagName = TagName.valueOf(tag);\n         Set<AttributeKey> attributeSet = new HashSet<AttributeKey>();\n-        for (String key : keys) {\n+        for (String key : attributes) {\n             Validate.notEmpty(key);\n             attributeSet.add(AttributeKey.valueOf(key));\n         }\n-        if(tagNames.contains(tagName) && attributes.containsKey(tagName)) { // Only look in sub-maps if tag was allowed\n-            Set<AttributeKey> currentSet = attributes.get(tagName);\n+        if(tagNames.contains(tagName) && this.attributes.containsKey(tagName)) { // Only look in sub-maps if tag was allowed\n+            Set<AttributeKey> currentSet = this.attributes.get(tagName);\n             currentSet.removeAll(attributeSet);\n \n             if(currentSet.isEmpty()) // Remove tag from attribute map if no attributes are allowed for tag\n-                attributes.remove(tagName);\n+                this.attributes.remove(tagName);\n         }\n         if(tag.equals(\":all\")) // Attribute needs to be removed from all individually set tags\n-            for(TagName name: attributes.keySet()) {\n-                Set<AttributeKey> currentSet = attributes.get(name);\n+            for(TagName name: this.attributes.keySet()) {\n+                Set<AttributeKey> currentSet = this.attributes.get(name);\n                 currentSet.removeAll(attributeSet);\n \n                 if(currentSet.isEmpty()) // Remove tag from attribute map if no attributes are allowed for tag\n-                    attributes.remove(name);\n+                    this.attributes.remove(name);\n             }\n         return this;\n     }\n \n     /**\n      Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element\n-     already has the attribute set, it will be overridden.\n+     already has the attribute set, it will be overridden with this value.\n      <p>\n      E.g.: <code>addEnforcedAttribute(\"a\", \"rel\", \"nofollow\")</code> will make all <code>a</code> tags output as\n      <code>&lt;a href=\"...\" rel=\"nofollow\"&gt;</code>\n      </p>\n \n      @param tag   The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary.\n-     @param key   The attribute key\n+     @param attribute   The attribute name\n      @param value The enforced attribute value\n      @return this (for chaining)\n      */\n-    public Whitelist addEnforcedAttribute(String tag, String key, String value) {\n+    public Whitelist addEnforcedAttribute(String tag, String attribute, String value) {\n         Validate.notEmpty(tag);\n-        Validate.notEmpty(key);\n+        Validate.notEmpty(attribute);\n         Validate.notEmpty(value);\n \n         TagName tagName = TagName.valueOf(tag);\n         if (!tagNames.contains(tagName))\n             tagNames.add(tagName);\n-        AttributeKey attrKey = AttributeKey.valueOf(key);\n+        AttributeKey attrKey = AttributeKey.valueOf(attribute);\n         AttributeValue attrVal = AttributeValue.valueOf(value);\n \n         if (enforcedAttributes.containsKey(tagName)) {\n      Remove a previously configured enforced attribute from a tag.\n \n      @param tag   The tag the enforced attribute is for.\n-     @param key   The attribute key\n+     @param attribute   The attribute name\n      @return this (for chaining)\n      */\n-    public Whitelist removeEnforcedAttribute(String tag, String key) {\n+    public Whitelist removeEnforcedAttribute(String tag, String attribute) {\n         Validate.notEmpty(tag);\n-        Validate.notEmpty(key);\n+        Validate.notEmpty(attribute);\n \n         TagName tagName = TagName.valueOf(tag);\n         if(tagNames.contains(tagName) && enforcedAttributes.containsKey(tagName)) {\n-            AttributeKey attrKey = AttributeKey.valueOf(key);\n+            AttributeKey attrKey = AttributeKey.valueOf(attribute);\n             Map<AttributeKey, AttributeValue> attrMap = enforcedAttributes.get(tagName);\n             attrMap.remove(attrKey);\n \n      </p>\n \n      @param tag       Tag the URL protocol is for\n-     @param key       Attribute key\n+     @param attribute       Attribute name\n      @param protocols List of valid protocols\n      @return this, for chaining\n      */\n-    public Whitelist addProtocols(String tag, String key, String... protocols) {\n+    public Whitelist addProtocols(String tag, String attribute, String... protocols) {\n         Validate.notEmpty(tag);\n-        Validate.notEmpty(key);\n+        Validate.notEmpty(attribute);\n         Validate.notNull(protocols);\n \n         TagName tagName = TagName.valueOf(tag);\n-        AttributeKey attrKey = AttributeKey.valueOf(key);\n+        AttributeKey attrKey = AttributeKey.valueOf(attribute);\n         Map<AttributeKey, Set<Protocol>> attrMap;\n         Set<Protocol> protSet;\n \n     }\n \n     /**\n-     Remove allowed URL protocols for an element's URL attribute.\n+     Remove allowed URL protocols for an element's URL attribute. If you remove all protocols for an attribute, that\n+     attribute will allow any protocol.\n      <p>\n      E.g.: <code>removeProtocols(\"a\", \"href\", \"ftp\")</code>\n      </p>\n \n-     @param tag       Tag the URL protocol is for\n-     @param key       Attribute key\n-     @param protocols List of invalid protocols\n+     @param tag Tag the URL protocol is for\n+     @param attribute Attribute name\n+     @param removeProtocols List of invalid protocols\n      @return this, for chaining\n      */\n-    public Whitelist removeProtocols(String tag, String key, String... protocols) {\n+    public Whitelist removeProtocols(String tag, String attribute, String... removeProtocols) {\n         Validate.notEmpty(tag);\n-        Validate.notEmpty(key);\n-        Validate.notNull(protocols);\n+        Validate.notEmpty(attribute);\n+        Validate.notNull(removeProtocols);\n \n         TagName tagName = TagName.valueOf(tag);\n-        AttributeKey attrKey = AttributeKey.valueOf(key);\n-\n-        if(this.protocols.containsKey(tagName)) {\n-            Map<AttributeKey, Set<Protocol>> attrMap = this.protocols.get(tagName);\n-            if(attrMap.containsKey(attrKey)) {\n-                Set<Protocol> protSet = attrMap.get(attrKey);\n-                for (String protocol : protocols) {\n-                    Validate.notEmpty(protocol);\n-                    Protocol prot = Protocol.valueOf(protocol);\n-                    protSet.remove(prot);\n-                }\n-\n-                if(protSet.isEmpty()) { // Remove protocol set if empty\n-                    attrMap.remove(attrKey);\n-                    if(attrMap.isEmpty()) // Remove entry for tag if empty\n-                        this.protocols.remove(tagName);\n-                }\n-            }\n+        AttributeKey attr = AttributeKey.valueOf(attribute);\n+\n+        // make sure that what we're removing actually exists; otherwise can open the tag to any data and that can\n+        // be surprising\n+        Validate.isTrue(protocols.containsKey(tagName), \"Cannot remove a protocol that is not set.\");\n+        Map<AttributeKey, Set<Protocol>> tagProtocols = protocols.get(tagName);\n+        Validate.isTrue(tagProtocols.containsKey(attr), \"Cannot remove a protocol that is not set.\");\n+\n+        Set<Protocol> attrProtocols = tagProtocols.get(attr);\n+        for (String protocol : removeProtocols) {\n+            Validate.notEmpty(protocol);\n+            attrProtocols.remove(Protocol.valueOf(protocol));\n+        }\n+\n+        if (attrProtocols.isEmpty()) { // Remove protocol set if empty\n+            tagProtocols.remove(attr);\n+            if (tagProtocols.isEmpty()) // Remove entry for tag if empty\n+                protocols.remove(tagName);\n         }\n         return this;\n     }\n--- a/src/test/java/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/safety/CleanerTest.java\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Entities;\n import org.junit.Test;\n+\n import static org.junit.Assert.*;\n \n /**\n         whitelist.addTags( \"script\" );\n         assertTrue( Jsoup.isValid(\"Hello<script>alert('Doh')</script>World !\", whitelist ) );\n     }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void bailsIfRemovingProtocolThatsNotSet() {\n+        // a case that came up on the email list\n+        Whitelist w = Whitelist.none();\n+\n+        // note no add tag, and removing protocol without adding first\n+        w.addAttributes(\"a\", \"href\");\n+        w.removeProtocols(\"a\", \"href\", \"javascript\"); // with no protocols enforced, this was a noop. Now validates.\n+    }\n }", "timestamp": 1480018396, "metainfo": ""}