{"sha": "0d714da40f8d13156025d3bec7daa9746d276490", "log": "Add unit test.", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/jsoup/select/TraversorTest.java\n+package org.jsoup.select;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Node;\n+import org.junit.Test;\n+\n+public class TraversorTest {\n+    // Note: NodeTraversor.traverse(new NodeVisitor) is tested in\n+    // ElementsTest#traverse()\n+\n+    @Test\n+    public void filterVisit() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n+        final StringBuilder accum = new StringBuilder();\n+        NodeTraversor.filter(new NodeFilter() {\n+            public FilterResult head(Node node, int depth) {\n+                accum.append(\"<\" + node.nodeName() + \">\");\n+                return FilterResult.CONTINUE;\n+            }\n+\n+            public FilterResult tail(Node node, int depth) {\n+                accum.append(\"</\" + node.nodeName() + \">\");\n+                return FilterResult.CONTINUE;\n+            }\n+        }, doc.select(\"div\"));\n+        assertEquals(\"<div><p><#text></#text></p></div><div><#text></#text></div>\", accum.toString());\n+    }\n+\n+    @Test\n+    public void filterSkipChildren() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n+        final StringBuilder accum = new StringBuilder();\n+        NodeTraversor.filter(new NodeFilter() {\n+            public FilterResult head(Node node, int depth) {\n+                accum.append(\"<\" + node.nodeName() + \">\");\n+                // OMIT contents of p:\n+                return (\"p\".equals(node.nodeName())) ? FilterResult.SKIP_CHILDREN : FilterResult.CONTINUE;\n+            }\n+\n+            public FilterResult tail(Node node, int depth) {\n+                accum.append(\"</\" + node.nodeName() + \">\");\n+                return FilterResult.CONTINUE;\n+            }\n+        }, doc.select(\"div\"));\n+        assertEquals(\"<div><p></p></div><div><#text></#text></div>\", accum.toString());\n+    }\n+\n+    @Test\n+    public void filterSkipEntirely() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n+        final StringBuilder accum = new StringBuilder();\n+        NodeTraversor.filter(new NodeFilter() {\n+            public FilterResult head(Node node, int depth) {\n+                // OMIT p:\n+                if (\"p\".equals(node.nodeName()))\n+                    return FilterResult.SKIP_ENTIRELY;\n+                accum.append(\"<\" + node.nodeName() + \">\");\n+                return FilterResult.CONTINUE;\n+            }\n+\n+            public FilterResult tail(Node node, int depth) {\n+                accum.append(\"</\" + node.nodeName() + \">\");\n+                return FilterResult.CONTINUE;\n+            }\n+        }, doc.select(\"div\"));\n+        assertEquals(\"<div></div><div><#text></#text></div>\", accum.toString());\n+    }\n+\n+    @Test\n+    public void filterRemove() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There be <b>bold</b></div>\");\n+        NodeTraversor.filter(new NodeFilter() {\n+            public FilterResult head(Node node, int depth) {\n+                // Delete \"p\" in head:\n+                return (\"p\".equals(node.nodeName())) ? FilterResult.REMOVE : FilterResult.CONTINUE;\n+            }\n+\n+            public FilterResult tail(Node node, int depth) {\n+                // Delete \"b\" in tail:\n+                return (\"b\".equals(node.nodeName())) ? FilterResult.REMOVE : FilterResult.CONTINUE;\n+            }\n+        }, doc.select(\"div\"));\n+        assertEquals(\"<div></div>\\n<div>\\n There be \\n</div>\", doc.select(\"body\").html());\n+    }\n+\n+    @Test\n+    public void filterStop() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n+        final StringBuilder accum = new StringBuilder();\n+        NodeTraversor.filter(new NodeFilter() {\n+            public FilterResult head(Node node, int depth) {\n+                accum.append(\"<\" + node.nodeName() + \">\");\n+                return FilterResult.CONTINUE;\n+            }\n+\n+            public FilterResult tail(Node node, int depth) {\n+                accum.append(\"</\" + node.nodeName() + \">\");\n+                // Stop after p.\n+                return (\"p\".equals(node.nodeName())) ? FilterResult.STOP : FilterResult.CONTINUE;\n+            }\n+        }, doc.select(\"div\"));\n+        assertEquals(\"<div><p><#text></#text></p>\", accum.toString());\n+    }\n+}", "timestamp": 1507503484, "metainfo": ""}