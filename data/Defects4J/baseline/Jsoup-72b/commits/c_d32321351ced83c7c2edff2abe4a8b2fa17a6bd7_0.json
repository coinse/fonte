{"sha": "d32321351ced83c7c2edff2abe4a8b2fa17a6bd7", "log": "Other buffer underrun tests", "commit": "\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n         void read(Tokeniser t, CharacterReader r) {\n             String data = r.consumeTo(\"]]>\");\n             t.emit(data);\n-            r.matchConsume(\"]]>\");\n-            t.transition(Data);\n+            if (r.matchConsume(\"]]>\") || r.isEmpty()) {\n+                t.transition(Data);\n+            }// otherwise, buffer underrun, stay in data section\n         }\n     };\n \n--- a/src/test/java/org/jsoup/parser/TokeniserTest.java\n+++ b/src/test/java/org/jsoup/parser/TokeniserTest.java\n \n import org.jsoup.Jsoup;\n import org.jsoup.nodes.Attribute;\n+import org.jsoup.nodes.Comment;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.TextNode;\n import org.jsoup.select.Elements;\n import org.junit.Test;\n \n         assertEquals(attrName.toLowerCase(), attribute.getKey());\n         assertEquals(\"foo\", attribute.getValue());\n     }\n+\n+    @Test public void handleLargeText() {\n+        StringBuilder sb = new StringBuilder(maxBufferLen);\n+        do {\n+            sb.append(\"A Large Amount of Text\");\n+        } while (sb.length() < maxBufferLen);\n+        String text = sb.toString();\n+        String html = \"<p>\" + text + \"</p>\";\n+\n+        Document doc = Jsoup.parse(html);\n+        Elements els = doc.select(\"p\");\n+        assertEquals(1, els.size());\n+        Element el = els.first();\n+\n+        assertNotNull(el);\n+        assertEquals(text, el.text());\n+    }\n+\n+    @Test public void handleLargeComment() {\n+        StringBuilder sb = new StringBuilder(maxBufferLen);\n+        do {\n+            sb.append(\"Quite a comment \");\n+        } while (sb.length() < maxBufferLen);\n+        String comment = sb.toString();\n+        String html = \"<p><!-- \" + comment + \" --></p>\";\n+\n+        Document doc = Jsoup.parse(html);\n+        Elements els = doc.select(\"p\");\n+        assertEquals(1, els.size());\n+        Element el = els.first();\n+\n+        assertNotNull(el);\n+        Comment child = (Comment) el.childNode(0);\n+        assertEquals(\" \" + comment + \" \", child.getData());\n+    }\n+\n+    @Test public void handleLargeCdata() {\n+        StringBuilder sb = new StringBuilder(maxBufferLen);\n+        do {\n+            sb.append(\"Quite a lot of CDATA <><><><>\");\n+        } while (sb.length() < maxBufferLen);\n+        String cdata = sb.toString();\n+        String html = \"<p><![CDATA[\" + cdata + \"]]></p>\";\n+\n+        Document doc = Jsoup.parse(html);\n+        Elements els = doc.select(\"p\");\n+        assertEquals(1, els.size());\n+        Element el = els.first();\n+\n+        assertNotNull(el);\n+        TextNode child = (TextNode) el.childNode(0);\n+        assertEquals(cdata, el.text());\n+        assertEquals(cdata, child.getWholeText());\n+    }\n+\n+    @Test public void handleLargeTitle() {\n+        StringBuilder sb = new StringBuilder(maxBufferLen);\n+        do {\n+            sb.append(\"Quite a long title\");\n+        } while (sb.length() < maxBufferLen);\n+        String title = sb.toString();\n+        String html = \"<title>\" + title + \"</title>\";\n+\n+        Document doc = Jsoup.parse(html);\n+        Elements els = doc.select(\"title\");\n+        assertEquals(1, els.size());\n+        Element el = els.first();\n+\n+        assertNotNull(el);\n+        TextNode child = (TextNode) el.childNode(0);\n+        assertEquals(title, el.text());\n+        assertEquals(title, child.getWholeText());\n+        assertEquals(title, doc.title());\n+    }\n }", "timestamp": 1510356597, "metainfo": ""}