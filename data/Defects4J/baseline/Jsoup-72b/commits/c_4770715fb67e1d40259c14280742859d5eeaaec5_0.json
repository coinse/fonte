{"sha": "4770715fb67e1d40259c14280742859d5eeaaec5", "log": "1. restructure tests 2. autostyle methods", "commit": "\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n             if (conn instanceof HttpsURLConnection) {\n                 if (!req.isValidateSSLCertificates()) {\n                     initUnSecureSSL();\n-                }\n-\n-                ((HttpsURLConnection)conn).setSSLSocketFactory(sslSocketFactory);\n+                    ((HttpsURLConnection)conn).setSSLSocketFactory(sslSocketFactory);\n+                }\n             }\n \n             if (req.method() == Method.POST)\n          * @throws IOException\n          */\n         private static synchronized void initUnSecureSSL() throws IOException {\n-            if ( sslSocketFactory == null) {\n+            if (sslSocketFactory == null) {\n                 // Create a trust manager that does not validate certificate chains\n-                final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {\n-\n-                    public void checkClientTrusted( final X509Certificate[] chain, final String authType ) {\n+                final TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {\n+\n+                    public void checkClientTrusted(final X509Certificate[] chain, final String authType) {\n                     }\n \n-                    public void checkServerTrusted( final X509Certificate[] chain, final String authType ) {\n+                    public void checkServerTrusted(final X509Certificate[] chain, final String authType) {\n                     }\n \n                     public X509Certificate[] getAcceptedIssuers() {\n                         return null;\n                     }\n-                } };\n+                }};\n \n                 // Install the all-trusting trust manager\n                 final SSLContext sslContext;\n                 try {\n                     sslContext = SSLContext.getInstance(\"SSL\");\n-                    sslContext.init( null, trustAllCerts, new java.security.SecureRandom() );\n+                    sslContext.init(null, trustAllCerts, new java.security.SecureRandom());\n                     // Create an ssl socket factory with our all-trusting manager\n                     sslSocketFactory = sslContext.getSocketFactory();\n                 } catch (NoSuchAlgorithmException e) {\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n import org.jsoup.nodes.FormElement;\n import org.junit.Ignore;\n import org.junit.Test;\n+import org.junit.internal.runners.statements.ExpectException;\n \n import java.io.File;\n import java.io.FileInputStream;\n  @author Jonathan Hedley, jonathan@hedley.net */\n @Ignore // ignored by default so tests don't require network access. comment out to enable.\n public class UrlConnectTest {\n+    private static final String WEBSITE_WITH_INVALID_CERTIFICATE = \"https://certs.cac.washington.edu/CAtest/\";\n     private static String echoURL = \"http://direct.infohound.net/tools/q.pl\";\n \n     @Test\n \n     /**\n      * Verify that security disabling feature works properly.\n-     *\n+     * <p/>\n      * 1. try to hit url with invalid certificate and evaluate that exception is thrown\n-     * 2. disable security checks and call the same url to verify that content is consumed correctly\n      *\n      * @throws Exception\n      */\n-    @Test\n-    public void testUnsafe() throws Exception {\n-        String url = \"https://certs.cac.washington.edu/CAtest/\";\n-\n-        try {\n-            Jsoup.connect(url).execute();\n-        } catch (IOException e) {\n-//          that's expected exception\n-        }\n-        Connection.Response  defaultRes = Jsoup.connect(url).setValidateSSLCertificates(false).execute();\n-        assertThat(defaultRes.statusCode(),is(200));\n+    @Test(expected = IOException.class)\n+    public void testUnsafeFail() throws Exception {\n+        String url = WEBSITE_WITH_INVALID_CERTIFICATE;\n+        Jsoup.connect(url).execute();\n+    }\n+\n+    /**\n+     * Verify that security disabling feature works properly.\n+     * <p/>\n+     * 1. disable security checks and call the same url to verify that content is consumed correctly\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testUnsafePass() throws Exception {\n+        String url = WEBSITE_WITH_INVALID_CERTIFICATE;\n+        Connection.Response defaultRes = Jsoup.connect(url).setValidateSSLCertificates(false).execute();\n+        assertThat(defaultRes.statusCode(), is(200));\n     }\n \n     @Test", "timestamp": 1412751903, "metainfo": ""}