{"sha": "35bceca331e07938a9c4cd62d68e08740cd39575", "log": "Cleaned up self-closing ack and error track  Fixes #868", "commit": "\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n         insertNode(el);\n         if (startTag.isSelfClosing()) {\n             if (tag.isKnownTag()) {\n-                if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); // if not acked, promulagates error\n-            } else {\n-                // unknown tag, remember this is self closing for output\n+                if (!tag.isEmpty())\n+                    tokeniser.error(\"Tag cannot be self closing; not a void tag\");\n+            }\n+            else // unknown tag, remember this is self closing for output\n                 tag.setSelfClosing();\n-                tokeniser.acknowledgeSelfClosingFlag(); // not an distinct error\n-            }\n         }\n         return el;\n     }\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n                         if (tb.getFormElement() != null)\n                             return false;\n \n-                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                         tb.processStartTag(\"form\");\n                         if (startTag.attributes.hasKey(\"action\")) {\n                             Element form = tb.getFormElement();\n                         tb.reconstructFormattingElements();\n                         // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                         tb.insert(startTag);\n-                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                     } else if (name.equals(\"svg\")) {\n                         tb.reconstructFormattingElements();\n                         // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                         tb.insert(startTag);\n-                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                     } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                         tb.error(this);\n                         return false;\n--- a/src/main/java/org/jsoup/parser/Tokeniser.java\n+++ b/src/main/java/org/jsoup/parser/Tokeniser.java\n     Token.Doctype doctypePending = new Token.Doctype(); // doctype building up\n     Token.Comment commentPending = new Token.Comment(); // comment building up\n     private String lastStartTag; // the last start tag emitted, to test appropriate end tag\n-    private boolean selfClosingFlagAcknowledged = true;\n \n     Tokeniser(CharacterReader reader, ParseErrorList errors) {\n         this.reader = reader;\n     }\n \n     Token read() {\n-        if (!selfClosingFlagAcknowledged) {\n-            error(\"Self closing flag not acknowledged\");\n-            selfClosingFlagAcknowledged = true;\n-        }\n-\n         while (!isEmitPending)\n             state.read(this, reader);\n \n         if (token.type == Token.TokenType.StartTag) {\n             Token.StartTag startTag = (Token.StartTag) token;\n             lastStartTag = startTag.tagName;\n-            if (startTag.selfClosing)\n-                selfClosingFlagAcknowledged = false;\n         } else if (token.type == Token.TokenType.EndTag) {\n             Token.EndTag endTag = (Token.EndTag) token;\n             if (endTag.attributes != null)\n     void advanceTransition(TokeniserState state) {\n         reader.advance();\n         this.state = state;\n-    }\n-\n-    void acknowledgeSelfClosingFlag() {\n-        selfClosingFlagAcknowledged = true;\n     }\n \n     final private int[] codepointHolder = new int[1]; // holder to not have to keep creating arrays\n             errors.add(new ParseError(reader.pos(), \"Invalid character reference: %s\", message));\n     }\n \n-    private void error(String errorMsg) {\n+    void error(String errorMsg) {\n         if (errors.canAddError())\n             errors.add(new ParseError(reader.pos(), errorMsg));\n     }\n--- a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n         Element el = new Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes));\n         insertNode(el);\n         if (startTag.isSelfClosing()) {\n-            tokeniser.acknowledgeSelfClosingFlag();\n             if (!tag.isKnownTag()) // unknown tag, remember this is self closing for output. see above.\n                 tag.setSelfClosing();\n         } else {\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n import org.jsoup.helper.StringUtil;\n import org.jsoup.integration.ParseTest;\n import org.jsoup.nodes.*;\n+import org.jsoup.safety.Whitelist;\n import org.jsoup.select.Elements;\n import org.junit.Test;\n \n import java.util.List;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n /**\n         assertEquals(\"20: Attributes incorrectly present on end tag\", errors.get(0).toString());\n         assertEquals(\"35: Unexpected token [Doctype] when in state [InBody]\", errors.get(1).toString());\n         assertEquals(\"36: Invalid character reference: invalid named referenece 'arrgh'\", errors.get(2).toString());\n-        assertEquals(\"50: Self closing flag not acknowledged\", errors.get(3).toString());\n+        assertEquals(\"50: Tag cannot be self closing; not a void tag\", errors.get(3).toString());\n         assertEquals(\"61: Unexpectedly reached end of file (EOF) in input state [TagName]\", errors.get(4).toString());\n     }\n \n         parser.settings(ParseSettings.preserveCase);\n         Document doc = parser.parseInput(html, \"\");\n         assertEquals(\"<r> <X> A </X> <y> B </y> </r>\", StringUtil.normaliseWhitespace(doc.body().html()));\n-\n+    }\n+\n+    @Test public void selfClosingVoidIsNotAnError() {\n+        String html = \"<p>test<br/>test<br/></p>\";\n+        Parser parser = Parser.htmlParser().setTrackErrors(5);\n+        parser.parseInput(html, \"\");\n+        assertEquals(0, parser.getErrors().size());\n+\n+        assertTrue(Jsoup.isValid(html, Whitelist.basic()));\n+        String clean = Jsoup.clean(html, Whitelist.basic());\n+        assertEquals(\"<p>test<br>test<br></p>\", clean);\n+    }\n+\n+    @Test public void selfClosingOnNonvoidIsError() {\n+        String html = \"<p>test</p><div /><div>Two</div>\";\n+        Parser parser = Parser.htmlParser().setTrackErrors(5);\n+        parser.parseInput(html, \"\");\n+        assertEquals(1, parser.getErrors().size());\n+        assertEquals(\"18: Tag cannot be self closing; not a void tag\", parser.getErrors().get(0).toString());\n+\n+        assertFalse(Jsoup.isValid(html, Whitelist.relaxed()));\n+        String clean = Jsoup.clean(html, Whitelist.relaxed());\n+        assertEquals(\"<p>test</p> <div></div> <div> Two </div>\", StringUtil.normaliseWhitespace(clean));\n     }\n }", "timestamp": 1498412695, "metainfo": ""}