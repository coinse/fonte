{"sha": "bd789b079038c1b3f41d05f869c244b54840dbca", "log": "Moved some tests to ConnectTest  So that they run locally, and actually do run (vs @ ignored).  Need to implement the rest too.", "commit": "\n--- a/src/main/java/org/jsoup/helper/StringUtil.java\n+++ b/src/main/java/org/jsoup/helper/StringUtil.java\n             sb.append(strings.next());\n         }\n         return sb.toString();\n+    }\n+\n+    /**\n+     * Join an array of strings by a separator\n+     * @param strings collection of string objects\n+     * @param sep string to place between strings\n+     * @return joined string\n+     */\n+    public static String join(String[] strings, String sep) {\n+        return join(Arrays.asList(strings), sep);\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n     private static final String emptyName = \"\";\n     static final int codepointRadix = 36;\n     private static final Charset ASCII = Charset.forName(\"ascii\");\n+    private static final char[] codeDelims = {',', ';'};\n+    private static final HashMap<String, String> multipoints = new HashMap<>(); // name -> multiple character references\n+    private static final Document.OutputSettings DefaultOutput = new Document.OutputSettings();\n \n     public enum EscapeMode {\n         /**\n         }\n     }\n \n-    private static final HashMap<String, String> multipoints = new HashMap<>(); // name -> multiple character references\n-\n     private Entities() {\n     }\n \n         return 0;\n     }\n \n-    static String escape(String string, Document.OutputSettings out) {\n+    /**\n+     * HTML escape an input string. That is, {@code <} is returned as\n+     * {@code &lt;}\n+     * @param string the un-escaped string to escape\n+     * @param out the output settings to use\n+     * @return the escaped string\n+     */\n+    public static String escape(String string, Document.OutputSettings out) {\n+        if (string == null)\n+            return \"\";\n         StringBuilder accum = new StringBuilder(string.length() * 2);\n         try {\n             escape(accum, string, out, false, false, false);\n             throw new SerializationException(e); // doesn't happen\n         }\n         return accum.toString();\n+    }\n+\n+    /**\n+     * HTML escape an input string, using the default settings (UTF-8, base entities). That is, {@code <} is returned as\n+     * {@code &lt;}\n+     * @param string the un-escaped string to escape\n+     * @return the escaped string\n+     */\n+    public static String escape(String string) {\n+        return escape(string, DefaultOutput);\n     }\n \n     // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations\n             accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n     }\n \n-    static String unescape(String string) {\n+    /**\n+     * Un-escape an HTML escaped string. That is, {@code &lt;} is returned as {@code <}.\n+     * @param string the HTML string to un-escape\n+     * @return the unescaped string\n+     */\n+    public static String unescape(String string) {\n         return unescape(string, false);\n     }\n \n             return fallback;\n         }\n     }\n-\n-    private static final char[] codeDelims = {',', ';'};\n \n     private static void load(EscapeMode e, String file, int size) {\n         e.nameKeys = new String[size];\n--- a/src/test/java/org/jsoup/integration/ConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/ConnectTest.java\n package org.jsoup.integration;\n \n+import org.jsoup.Connection;\n import org.jsoup.Jsoup;\n+import org.jsoup.integration.servlets.EchoServlet;\n import org.jsoup.integration.servlets.HelloServlet;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n import org.junit.Test;\n \n import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n \n+import static org.jsoup.integration.UrlConnectTest.browserUa;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n+/**\n+ * Tests Jsoup.connect against a local server.\n+ */\n public class ConnectTest {\n+    private static String echoUrl;\n \n-    @BeforeClass public static void setUp() throws Exception {\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n         TestServer.start();\n+        echoUrl = EchoServlet.Url;\n     }\n \n-    @AfterClass public static void tearDown() throws Exception {\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n         TestServer.stop();\n     }\n \n-    @Test public void canConnectToLocalServer() throws IOException {\n+    @Test\n+    public void canConnectToLocalServer() throws IOException {\n         String url = HelloServlet.Url;\n         Document doc = Jsoup.connect(url).get();\n         Element p = doc.selectFirst(\"p\");\n         assertEquals(\"Hello, World!\", p.text());\n     }\n+\n+    @Test\n+    public void fetchURl() throws IOException {\n+        Document doc = Jsoup.parse(new URL(echoUrl), 10 * 1000);\n+        assertTrue(doc.title().contains(\"Environment Variables\"));\n+    }\n+\n+    @Test\n+    public void fetchURIWithWihtespace() throws IOException {\n+        Connection con = Jsoup.connect(echoUrl + \"#with whitespaces\");\n+        Document doc = con.get();\n+        assertTrue(doc.title().contains(\"Environment Variables\"));\n+    }\n+\n+    @Test\n+    public void exceptOnUnsupportedProtocol() {\n+        String url = \"file://etc/passwd\";\n+        boolean threw = false;\n+        try {\n+            Document doc = Jsoup.connect(url).get();\n+        } catch (MalformedURLException e) {\n+            threw = true;\n+            assertEquals(\"java.net.MalformedURLException: Only http & https protocols supported\", e.toString());\n+        } catch (IOException e) {\n+        }\n+        assertTrue(threw);\n+    }\n+\n+    private static String ihVal(String key, Document doc) {\n+        return doc.select(\"th:contains(\" + key + \") + td\").first().text();\n+    }\n+\n+    @Test\n+    public void doesPost() throws IOException {\n+        Document doc = Jsoup.connect(echoUrl)\n+            .data(\"uname\", \"Jsoup\", \"uname\", \"Jonathan\", \"\u767e\", \"\u5ea6\u4e00\u4e0b\")\n+            .cookie(\"auth\", \"token\")\n+            .post();\n+\n+        assertEquals(\"POST\", ihVal(\"Method\", doc));\n+        assertEquals(\"gzip\", ihVal(\"Accept-Encoding\", doc));\n+        assertEquals(\"auth=token\", ihVal(\"Cookie\", doc));\n+        assertEquals(\"\u5ea6\u4e00\u4e0b\", ihVal(\"\u767e\", doc));\n+        assertEquals(\"Jsoup, Jonathan\", ihVal(\"uname\", doc));\n+        assertEquals(\"application/x-www-form-urlencoded; charset=UTF-8\", ihVal(\"Content-Type\", doc));\n+    }\n+\n+    @Test\n+    public void sendsRequestBodyJsonWithData() throws IOException {\n+        final String body = \"{key:value}\";\n+        Document doc = Jsoup.connect(echoUrl)\n+            .requestBody(body)\n+            .header(\"Content-Type\", \"application/json\")\n+            .userAgent(browserUa)\n+            .data(\"foo\", \"true\")\n+            .post();\n+        assertEquals(\"POST\", ihVal(\"Method\", doc));\n+        assertEquals(\"application/json\", ihVal(\"Content-Type\", doc));\n+        assertEquals(\"foo=true\", ihVal(\"Query String\", doc));\n+        assertEquals(body, ihVal(\"Post Data\", doc));\n+    }\n+\n+    @Test\n+    public void sendsRequestBodyJsonWithoutData() throws IOException {\n+        final String body = \"{key:value}\";\n+        Document doc = Jsoup.connect(echoUrl)\n+            .requestBody(body)\n+            .header(\"Content-Type\", \"application/json\")\n+            .userAgent(browserUa)\n+            .post();\n+        assertEquals(\"POST\", ihVal(\"Method\", doc));\n+        assertEquals(\"application/json\", ihVal(\"Content-Type\", doc));\n+        assertEquals(body, ihVal(\"Post Data\", doc));\n+    }\n+\n+    @Test\n+    public void sendsRequestBody() throws IOException {\n+        final String body = \"{key:value}\";\n+        Document doc = Jsoup.connect(echoUrl)\n+            .requestBody(body)\n+            .header(\"Content-Type\", \"text/plain\")\n+            .userAgent(browserUa)\n+            .post();\n+        assertEquals(\"POST\", ihVal(\"Method\", doc));\n+        assertEquals(\"text/plain\", ihVal(\"Content-Type\", doc));\n+        assertEquals(body, ihVal(\"Post Data\", doc));\n+    }\n+\n+    @Test\n+    public void sendsRequestBodyWithUrlParams() throws IOException {\n+        final String body = \"{key:value}\";\n+        Document doc = Jsoup.connect(echoUrl)\n+            .requestBody(body)\n+            .data(\"uname\", \"Jsoup\", \"uname\", \"Jonathan\", \"\u767e\", \"\u5ea6\u4e00\u4e0b\")\n+            .header(\"Content-Type\", \"text/plain\") // todo - if user sets content-type, we should append postcharset\n+            .userAgent(browserUa)\n+            .post();\n+        assertEquals(\"POST\", ihVal(\"Method\", doc));\n+        assertEquals(\"uname=Jsoup&uname=Jonathan&%E7%99%BE=%E5%BA%A6%E4%B8%80%E4%B8%8B\", ihVal(\"Query String\", doc));\n+        assertEquals(body, ihVal(\"Post Data\", doc));\n+    }\n+\n+    @Test\n+    public void doesGet() throws IOException {\n+        Connection con = Jsoup.connect(echoUrl + \"?what=the\")\n+            .userAgent(\"Mozilla\")\n+            .referrer(\"http://example.com\")\n+            .data(\"what\", \"about & me?\");\n+\n+        Document doc = con.get();\n+        assertEquals(\"what=the&what=about+%26+me%3F\", ihVal(\"Query String\", doc));\n+        assertEquals(\"the, about & me?\", ihVal(\"what\", doc));\n+        assertEquals(\"Mozilla\", ihVal(\"User-Agent\", doc));\n+        assertEquals(\"http://example.com\", ihVal(\"Referer\", doc));\n+    }\n+\n+    @Test\n+    public void doesPut() throws IOException {\n+        Connection.Response res = Jsoup.connect(echoUrl)\n+            .data(\"uname\", \"Jsoup\", \"uname\", \"Jonathan\", \"\u767e\", \"\u5ea6\u4e00\u4e0b\")\n+            .cookie(\"auth\", \"token\")\n+            .method(Connection.Method.PUT)\n+            .execute();\n+\n+        Document doc = res.parse();\n+        assertEquals(\"PUT\", ihVal(\"Method\", doc));\n+        assertEquals(\"gzip\", ihVal(\"Accept-Encoding\", doc));\n+        assertEquals(\"auth=token\", ihVal(\"Cookie\", doc));\n+    }\n }\n--- a/src/test/java/org/jsoup/integration/TestServer.java\n+++ b/src/test/java/org/jsoup/integration/TestServer.java\n     private TestServer() {\n     }\n \n-    static void start() {\n+    public static void start() {\n         synchronized (jetty) {\n             int count = latch.getAndIncrement();\n             if (count == 0) {\n         }\n     }\n \n-    static void stop() {\n+    public static void stop() {\n         synchronized (jetty) {\n             int count = latch.decrementAndGet();\n             if (count == 0) {\n \n     public static String map(Class<? extends BaseServlet> servletClass) {\n         synchronized (jetty) {\n+            if (!jetty.isStarted())\n+                start(); // if running out of the test cases\n+\n             String path = \"/\" + servletClass.getSimpleName();\n             handler.addServletWithMapping(servletClass, path);\n             int port = ((ServerConnector) jetty.getConnectors()[0]).getLocalPort();\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n import java.io.IOException;\n import java.net.ConnectException;\n import java.net.InetSocketAddress;\n-import java.net.MalformedURLException;\n import java.net.Proxy;\n import java.net.URL;\n import java.util.List;\n     private static final String WEBSITE_WITH_SNI = \"https://jsoup.org/\";\n     private static String echoURL = \"http://direct.infohound.net/tools/q.pl\";\n     public static String browserUa = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.112 Safari/537.36\";\n-\n-    @Test\n-    public void fetchURl() throws IOException {\n-        String url = \"https://jsoup.org\"; // no trailing / to force redir\n-        Document doc = Jsoup.parse(new URL(url), 10*1000);\n-        assertTrue(doc.title().contains(\"jsoup\"));\n-    }\n-\n-    @Test\n-    public void fetchURIWithWihtespace() throws IOException {\n-        Connection con = Jsoup.connect(\"http://try.jsoup.org/#with whitespaces\");\n-        Document doc = con.get();\n-        assertTrue(doc.title().contains(\"jsoup\"));\n-    }\n \n     @Test\n     public void fetchBaidu() throws IOException {\n     }\n \n     @Test\n-    public void exceptOnUnsupportedProtocol(){\n-        String url = \"file://etc/passwd\";\n-        boolean threw = false;\n-        try {\n-            Document doc = Jsoup.connect(url).get();\n-        } catch (MalformedURLException e) {\n-            threw = true;\n-            assertEquals(\"java.net.MalformedURLException: Only http & https protocols supported\", e.toString());\n-        } catch (IOException e) {\n-        }\n-        assertTrue(threw);\n-    }\n-\n-    @Test\n     public void ignoresContentTypeIfSoConfigured() throws IOException {\n         Document doc = Jsoup.connect(\"https://jsoup.org/rez/osi_logo.png\").ignoreContentType(true).get();\n         assertEquals(\"\", doc.title()); // this will cause an ugly parse tree\n     }\n-\n-    @Test\n-    public void doesPost() throws IOException {\n-        Document doc = Jsoup.connect(echoURL)\n-            .data(\"uname\", \"Jsoup\", \"uname\", \"Jonathan\", \"\u767e\", \"\u5ea6\u4e00\u4e0b\")\n-            .cookie(\"auth\", \"token\")\n-            .post();\n-\n-        assertEquals(\"POST\", ihVal(\"REQUEST_METHOD\", doc));\n-        //assertEquals(\"gzip\", ihVal(\"HTTP_ACCEPT_ENCODING\", doc)); // current proxy removes gzip on post\n-        assertEquals(\"auth=token\", ihVal(\"HTTP_COOKIE\", doc));\n-        assertEquals(\"\u5ea6\u4e00\u4e0b\", ihVal(\"\u767e\", doc));\n-        assertEquals(\"Jsoup, Jonathan\", ihVal(\"uname\", doc));\n-    }\n-\n-    @Test\n-    public void sendsRequestBodyJsonWithData() throws IOException {\n-        final String body = \"{key:value}\";\n-        Document doc = Jsoup.connect(echoURL)\n-            .requestBody(body)\n-            .header(\"Content-Type\", \"application/json\")\n-            .userAgent(browserUa)\n-            .data(\"foo\", \"true\")\n-            .post();\n-        assertEquals(\"POST\", ihVal(\"REQUEST_METHOD\", doc));\n-        assertEquals(\"application/json\", ihVal(\"CONTENT_TYPE\", doc));\n-        assertEquals(\"foo=true\", ihVal(\"QUERY_STRING\", doc));\n-        assertEquals(body, doc.select(\"th:contains(POSTDATA) ~ td\").text());\n-    }\n-\n-    @Test\n-    public void sendsRequestBodyJsonWithoutData() throws IOException {\n-        final String body = \"{key:value}\";\n-        Document doc = Jsoup.connect(echoURL)\n-            .requestBody(body)\n-            .header(\"Content-Type\", \"application/json\")\n-            .userAgent(browserUa)\n-            .post();\n-        assertEquals(\"POST\", ihVal(\"REQUEST_METHOD\", doc));\n-        assertEquals(\"application/json\", ihVal(\"CONTENT_TYPE\", doc));\n-        assertEquals(body, doc.select(\"th:contains(POSTDATA) ~ td\").text());\n-    }\n-\n-    @Test\n-    public void sendsRequestBody() throws IOException {\n-        final String body = \"{key:value}\";\n-        Document doc = Jsoup.connect(echoURL)\n-            .requestBody(body)\n-            .header(\"Content-Type\", \"text/plain\")\n-            .userAgent(browserUa)\n-            .post();\n-        assertEquals(\"POST\", ihVal(\"REQUEST_METHOD\", doc));\n-        assertEquals(\"text/plain\", ihVal(\"CONTENT_TYPE\", doc));\n-        assertEquals(body, doc.select(\"th:contains(POSTDATA) ~ td\").text());\n-    }\n-\n-    @Test\n-    public void sendsRequestBodyWithUrlParams() throws IOException {\n-        final String body = \"{key:value}\";\n-        Document doc = Jsoup.connect(echoURL)\n-            .requestBody(body)\n-            .data(\"uname\", \"Jsoup\", \"uname\", \"Jonathan\", \"\u767e\", \"\u5ea6\u4e00\u4e0b\")\n-            .header(\"Content-Type\", \"text/plain\") // todo - if user sets content-type, we should append postcharset\n-            .userAgent(browserUa)\n-            .post();\n-        assertEquals(\"POST\", ihVal(\"REQUEST_METHOD\", doc));\n-        assertEquals(\"uname=Jsoup&uname=Jonathan&%E7%99%BE=%E5%BA%A6%E4%B8%80%E4%B8%8B\", ihVal(\"QUERY_STRING\", doc));\n-        assertEquals(body, ihVal(\"POSTDATA\", doc));\n-    }\n-\n-    @Test\n-    public void doesGet() throws IOException {\n-        Connection con = Jsoup.connect(echoURL + \"?what=the\")\n-            .userAgent(\"Mozilla\")\n-            .referrer(\"http://example.com\")\n-            .data(\"what\", \"about & me?\");\n-\n-        Document doc = con.get();\n-        assertEquals(\"what=the&what=about+%26+me%3F\", ihVal(\"QUERY_STRING\", doc));\n-        assertEquals(\"the, about & me?\", ihVal(\"what\", doc));\n-        assertEquals(\"Mozilla\", ihVal(\"HTTP_USER_AGENT\", doc));\n-        assertEquals(\"http://example.com\", ihVal(\"HTTP_REFERER\", doc));\n-    }\n-\n-    @Test\n-    public void doesPut() throws IOException {\n-        Connection.Response res = Jsoup.connect(echoURL)\n-                .data(\"uname\", \"Jsoup\", \"uname\", \"Jonathan\", \"\u767e\", \"\u5ea6\u4e00\u4e0b\")\n-                .cookie(\"auth\", \"token\")\n-                .method(Connection.Method.PUT)\n-                .execute();\n-\n-        Document doc = res.parse();\n-        assertEquals(\"PUT\", ihVal(\"REQUEST_METHOD\", doc));\n-        //assertEquals(\"gzip\", ihVal(\"HTTP_ACCEPT_ENCODING\", doc)); // current proxy removes gzip on post\n-        assertEquals(\"auth=token\", ihVal(\"HTTP_COOKIE\", doc));\n-    }\n-\n \n     private static String ihVal(String key, Document doc) {\n         return doc.select(\"th:contains(\"+key+\") + td\").first().text();\n--- a/src/test/java/org/jsoup/integration/servlets/BaseServlet.java\n+++ b/src/test/java/org/jsoup/integration/servlets/BaseServlet.java\n import java.io.IOException;\n \n public abstract class BaseServlet extends HttpServlet {\n-    static final String TextHtml = \"text/html\";\n+    static final String TextHtml = \"text/html; charset=UTF-8\";\n \n+    // these are overridden just to get the response name to be 'res' not 'resp'\n     @Override\n     protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n         super.doGet(req, res);\n     }\n+\n+    @Override\n+    protected void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n+        super.doPost(req, res);\n+    }\n+\n+    @Override\n+    protected void doPut(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n+        super.doPut(req, res);\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/org/jsoup/integration/servlets/EchoServlet.java\n+package org.jsoup.integration.servlets;\n+\n+import org.jsoup.helper.DataUtil;\n+import org.jsoup.helper.StringUtil;\n+import org.jsoup.integration.TestServer;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.nio.ByteBuffer;\n+import java.util.Enumeration;\n+\n+import static org.jsoup.nodes.Entities.escape;\n+\n+public class EchoServlet extends BaseServlet {\n+    public static final String Url = TestServer.map(EchoServlet.class);\n+\n+    @Override\n+    protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n+        doIt(req, res);\n+    }\n+\n+    @Override\n+    protected void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n+        doIt(req, res);\n+    }\n+\n+    @Override\n+    protected void doPut(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n+        doIt(req, res);\n+    }\n+\n+    private void doIt(HttpServletRequest req, HttpServletResponse res) throws IOException {\n+        res.setContentType(TextHtml);\n+        res.setStatus(HttpServletResponse.SC_OK);\n+        PrintWriter w = res.getWriter();\n+\n+        w.write(\"<title>Webserver Environment Variables</title>\\n\" +\n+            \"    <style type=\\\"text/css\\\">\\n\" +\n+            \"      body, td, th {font: 10pt Verdana, Arial, sans-serif; text-align: left}\\n\" +\n+            \"      th {font-weight: bold}        \\n\" +\n+            \"    </style>\\n\" +\n+            \"    <body>\\n\" +\n+            \"    <table border=\\\"0\\\">\");\n+\n+        // some get items\n+        write(w, \"Method\", req.getMethod());\n+        write(w, \"Request URI\", req.getRequestURI());\n+        write(w, \"Query String\", req.getQueryString());\n+\n+        // request headers (why is it an enumeration?)\n+        Enumeration<String> headerNames = req.getHeaderNames();\n+        while (headerNames.hasMoreElements()) {\n+            String header = headerNames.nextElement();\n+            Enumeration<String> headers = req.getHeaders(header);\n+            while (headers.hasMoreElements()) {\n+                write(w, header, headers.nextElement());\n+            }\n+        }\n+\n+        // the request params\n+        Enumeration<String> parameterNames = req.getParameterNames();\n+        while (parameterNames.hasMoreElements()) {\n+            String name = parameterNames.nextElement();\n+            String[] values = req.getParameterValues(name);\n+            write(w, name, StringUtil.join(values, \", \"));\n+        }\n+\n+        // rest body\n+        ByteBuffer byteBuffer = DataUtil.readToByteBuffer(req.getInputStream(), 0);\n+        String postData = new String(byteBuffer.array(), \"UTF-8\");\n+        if (!StringUtil.isBlank(postData)) {\n+            write(w, \"Post Data\", postData);\n+        }\n+\n+        w.println(\"</table>\");\n+    }\n+\n+    private static void write(PrintWriter w, String key, String val) {\n+        w.println(\"<tr><th>\" + escape(key) + \"</th><td>\" + escape(val) + \"</td></tr>\");\n+    }\n+\n+    // allow the servlet to run as a main program, for local test\n+    public static void main(String[] args) {\n+        TestServer.start();\n+        System.out.println(Url);\n+    }\n+}", "timestamp": 1508025400, "metainfo": ""}