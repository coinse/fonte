{"sha": "1ece207d4d14336c405e9e3c2edee3f1cf88d14d", "log": "Handle empty buffer in attribute value read  Fixes #967", "commit": "\n--- a/src/main/java/org/jsoup/parser/CharacterReader.java\n+++ b/src/main/java/org/jsoup/parser/CharacterReader.java\n public final class CharacterReader {\n     static final char EOF = (char) -1;\n     private static final int maxStringCacheLen = 12;\n-    private static final int maxBufferLen = 1024 * 32;\n+    static final int maxBufferLen = 1024 * 32; // visible for testing\n     private static final int readAheadLimit = (int) (maxBufferLen * 0.75);\n \n     private final char[] charBuf;\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n                     t.eofError(this);\n                     t.transition(Data);\n                     break;\n-                // no default, handled in consume to any above\n+                default: // hit end of buffer in first read, still in attribute\n+                    t.tagPending.appendAttributeValue(c);\n             }\n         }\n     },\n                     t.eofError(this);\n                     t.transition(Data);\n                     break;\n-                // no default, handled in consume to any above\n+                default: // hit end of buffer in first read, still in attribute\n+                    t.tagPending.appendAttributeValue(c);\n             }\n         }\n     },\n                     t.error(this);\n                     t.tagPending.appendAttributeValue(c);\n                     break;\n-                // no default, handled in consume to any above\n+                default: // hit end of buffer in first read, still in attribute\n+                    t.tagPending.appendAttributeValue(c);\n             }\n \n         }\n--- /dev/null\n+++ b/src/test/java/org/jsoup/parser/TokeniserTest.java\n+package org.jsoup.parser;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class TokeniserTest {\n+    @Test\n+    public void bufferUpInAttributeVal() {\n+        // https://github.com/jhy/jsoup/issues/967\n+\n+        // check each double, singlem, unquoted impls\n+        String[] quotes = {\"\\\"\", \"'\", \"\"};\n+        for (String quote : quotes) {\n+            String preamble = \"<img src=\" + quote;\n+            String tail = \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\";\n+            StringBuilder sb = new StringBuilder(preamble);\n+\n+            final int charsToFillBuffer = CharacterReader.maxBufferLen - preamble.length();\n+            for (int i = 0; i < charsToFillBuffer; i++) {\n+                sb.append('a');\n+            }\n+\n+            sb.append('X'); // First character to cross character buffer boundary\n+            sb.append(tail + quote + \">\\n\");\n+\n+            String html = sb.toString();\n+            Document doc = Jsoup.parse(html);\n+            String src = doc.select(\"img\").attr(\"src\");\n+\n+            assertTrue(\"Handles for quote \" + quote, src.contains(\"X\"));\n+            assertTrue(src.contains(tail));\n+        }\n+    }\n+}", "timestamp": 1510334540, "metainfo": ""}