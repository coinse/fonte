{"sha": "22a17d24279450e7e214b57beb4c0bda5f3698e5", "log": "Small code cleanup", "commit": "\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n          * please not that this method will only perform action if sslSocketFactory is not yet\n          * instantiated.\n          *\n-         * @throws IOException\n+         * @throws IOException on SSL init errors\n          */\n         private static synchronized void initUnSecureTSL() throws IOException {\n             if (sslSocketFactory == null) {\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n     }\n \n     // we track boolean attributes as null in values - they're just keys. so returns empty for consumers\n-    static final String checkNotNull(String val) {\n+    static String checkNotNull(String val) {\n         return val == null ? EmptyString : val;\n     }\n \n--- a/src/main/java/org/jsoup/nodes/DataNode.java\n+++ b/src/main/java/org/jsoup/nodes/DataNode.java\n      Create a new DataNode.\n      @param data data contents\n      @param baseUri Unused, Leaf Nodes do not hold base URis\n-     @deprecated\n+     @deprecated use {@link #DataNode(String)} instead\n      */\n     public DataNode(String data, String baseUri) {\n         this(data);\n      */\n     public static DataNode createFromEncoded(String encodedData, String baseUri) {\n         String data = Entities.unescape(encodedData);\n-        return new DataNode(data, baseUri);\n+        return new DataNode(data);\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n \n     /**\n      * Set the baseUri for just this node (not its descendants), if this Node tracks base URIs.\n-     * @param baseUri\n+     * @param baseUri new URI\n      */\n     protected abstract void doSetBaseUri(String baseUri);\n \n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n      @param text raw text\n      @param baseUri base uri - ignored for this node type\n      @see #createFromEncoded(String, String)\n-     @deprecated use {@link TextNode(String)}\n+     @deprecated use {@link TextNode#TextNode(String)}\n      */\n     public TextNode(String text, String baseUri) {\n         this(text);\n         String head = text.substring(0, offset);\n         String tail = text.substring(offset);\n         text(head);\n-        TextNode tailNode = new TextNode(tail, this.baseUri());\n+        TextNode tailNode = new TextNode(tail);\n         if (parent() != null)\n             parent().addChildren(siblingIndex()+1, tailNode);\n \n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n     }\n     \n     /**\n-     * Unescaped a \\ escaped string.\n+     * Unescape a \\ escaped string.\n      * @param in backslash escaped string\n      * @return unescaped string\n      */\n--- a/src/main/java/org/jsoup/parser/Tokeniser.java\n+++ b/src/main/java/org/jsoup/parser/Tokeniser.java\n \n     /**\n      * Utility method to consume reader and unescape entities found within.\n-     * @param inAttribute\n+     * @param inAttribute if the text to be unescaped is in an attribute\n      * @return unescaped string from reader\n      */\n     String unescapeEntities(boolean inAttribute) {\n--- a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n      * If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence. If not\n      * found, skips.\n      *\n-     * @param endTag\n+     * @param endTag tag to close\n      */\n     private void popStackToClose(Token.EndTag endTag) {\n         String elName = endTag.name();\n--- a/src/main/java/org/jsoup/select/NodeFilter.java\n+++ b/src/main/java/org/jsoup/select/NodeFilter.java\n     /**\n      * Filter decision.\n      */\n-    public enum FilterResult {\n+    enum FilterResult {\n         /** Continue processing the tree */\n         CONTINUE,\n         /** Skip the child nodes, but do call {@link NodeFilter#tail(Node, int)} next. */\n--- a/src/test/java/org/jsoup/helper/HttpConnectionTest.java\n+++ b/src/test/java/org/jsoup/helper/HttpConnectionTest.java\n \n     @Test public void headers() {\n         Connection con = HttpConnection.connect(\"http://example.com\");\n-        Map<String, String> headers = new HashMap<String, String>();\n+        Map<String, String> headers = new HashMap<>();\n         headers.put(\"content-type\", \"text/html\");\n         headers.put(\"Connection\", \"keep-alive\");\n         headers.put(\"Host\", \"http://example.com\");\n     }\n \n     @Test public void sameHeadersCombineWithComma() {\n-        Map<String, List<String>> headers = new HashMap<String, List<String>>();\n-        List<String> values = new ArrayList<String>();\n+        Map<String, List<String>> headers = new HashMap<>();\n+        List<String> values = new ArrayList<>();\n         values.add(\"no-cache\");\n         values.add(\"no-store\");\n         headers.put(\"Cache-Control\", values);\n \n     @Test public void ignoresEmptySetCookies() {\n         // prep http response header map\n-        Map<String, List<String>> headers = new HashMap<String, List<String>>();\n+        Map<String, List<String>> headers = new HashMap<>();\n         headers.put(\"Set-Cookie\", Collections.<String>emptyList());\n         HttpConnection.Response res = new HttpConnection.Response();\n         res.processResponseHeaders(headers);\n \n     @Test public void ignoresEmptyCookieNameAndVals() {\n         // prep http response header map\n-        Map<String, List<String>> headers = new HashMap<String, List<String>>();\n-        List<String> cookieStrings = new ArrayList<String>();\n+        Map<String, List<String>> headers = new HashMap<>();\n+        List<String> cookieStrings = new ArrayList<>();\n         cookieStrings.add(null);\n         cookieStrings.add(\"\");\n         cookieStrings.add(\"one\");\n--- a/src/test/java/org/jsoup/nodes/BuildEntities.java\n+++ b/src/test/java/org/jsoup/nodes/BuildEntities.java\n import org.jsoup.Connection;\n import org.jsoup.Jsoup;\n import org.jsoup.integration.UrlConnectTest;\n-import org.jsoup.nodes.Entities;\n \n import java.io.File;\n import java.io.FileWriter;\n \n \n         // build name sorted base and full character lists:\n-        ArrayList<CharacterRef> base = new ArrayList<CharacterRef>();\n-        ArrayList<CharacterRef> full = new ArrayList<CharacterRef>();\n+        ArrayList<CharacterRef> base = new ArrayList<>();\n+        ArrayList<CharacterRef> full = new ArrayList<>();\n \n         for (Map.Entry<String, CharacterRef> entry : input.entrySet()) {\n             String name = entry.getKey().substring(1); // name is like &acute or &acute; , trim &\n         Collections.sort(full, byName);\n \n         // now determine code point order\n-        ArrayList<CharacterRef> baseByCode = new ArrayList<CharacterRef>(base);\n-        ArrayList<CharacterRef> fullByCode = new ArrayList<CharacterRef>(full);\n+        ArrayList<CharacterRef> baseByCode = new ArrayList<>(base);\n+        ArrayList<CharacterRef> fullByCode = new ArrayList<>(full);\n         Collections.sort(baseByCode, byCode);\n         Collections.sort(fullByCode, byCode);\n \n-        // and update their codepoint index. Don't\n-        ArrayList<CharacterRef>[] codelists = new ArrayList[]{baseByCode, fullByCode};\n+        // and update their codepoint index.\n+        @SuppressWarnings(\"unchecked\") ArrayList<CharacterRef>[] codelists = new ArrayList[]{baseByCode, fullByCode};\n         for (ArrayList<CharacterRef> codelist : codelists) {\n             for (int i = 0; i < codelist.size(); i++) {\n                 codelist.get(i).codeIndex = i;\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n         doc.appendElement(\"root\").text(\"node\");\n         doc.outputSettings().syntax(Syntax.xml);\n         \n-        if( addDecl == true ) {\n+        if(addDecl) {\n             XmlDeclaration decl = new XmlDeclaration(\"xml\", false);\n             decl.attr(\"version\", version);\n             decl.attr(\"encoding\", charset);\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(4, div2.childNodeSize());\n         assertEquals(3, p1s.get(1).siblingIndex()); // should be last\n \n-        List<Node> els = new ArrayList<Node>();\n+        List<Node> els = new ArrayList<>();\n         Element el1 = new Element(Tag.valueOf(\"span\"), \"\").text(\"Span1\");\n         Element el2 = new Element(Tag.valueOf(\"span\"), \"\").text(\"Span2\");\n         TextNode tn1 = new TextNode(\"Text4\");\n         assertEquals(\"c1 c2\", div.className());\n \n         // Update the class names to a fresh set\n-        final Set<String> newSet = new LinkedHashSet<String>(3);\n+        final Set<String> newSet = new LinkedHashSet<>(3);\n         newSet.addAll(set1);\n         newSet.add(\"c3\");\n         \n         div3.text(\"Check\");\n         final Element div4 = body.appendElement(\"div4\");\n \n-        ArrayList<Element> toMove = new ArrayList<Element>();\n+        ArrayList<Element> toMove = new ArrayList<>();\n         toMove.add(div3);\n         toMove.add(div4);\n \n     public void testHashcodeIsStableWithContentChanges() {\n         Element root = new Element(Tag.valueOf(\"root\"), \"\");\n \n-        HashSet<Element> set = new HashSet<Element>();\n+        HashSet<Element> set = new HashSet<>();\n         // Add root node:\n         set.add(root);\n ", "timestamp": 1507577715, "metainfo": ""}