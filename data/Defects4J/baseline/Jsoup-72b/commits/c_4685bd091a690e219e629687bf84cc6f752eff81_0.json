{"sha": "4685bd091a690e219e629687bf84cc6f752eff81", "log": "Add option to set mimetype on uploads", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n      * @param inputStream the input stream to upload, that you probably obtained from a {@link java.io.FileInputStream}.\n      * You must close the InputStream in a {@code finally} block.\n      * @return this Connections, for chaining\n+     * @see #data(String, String, InputStream, String) if you want to set the uploaded file's mimetype.\n      */\n     Connection data(String key, String filename, InputStream inputStream);\n+\n+    /**\n+     * Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the\n+     * input stream.\n+     * @param key data key (form item name)\n+     * @param filename the name of the file to present to the remove server. Typically just the name, not path,\n+     * component.\n+     * @param inputStream the input stream to upload, that you probably obtained from a {@link java.io.FileInputStream}.\n+     * @param contentType the Content Type (aka mimetype) to specify for this file.\n+     * You must close the InputStream in a {@code finally} block.\n+     * @return this Connections, for chaining\n+     */\n+    Connection data(String key, String filename, InputStream inputStream, String contentType);\n \n     /**\n      * Adds all of the supplied data to the request data parameters\n     }\n \n     /**\n-     * A Key Value tuple.\n+     * A Key:Value tuple(+), used for form data.\n      */\n     interface KeyVal {\n \n          * @return true if this keyval does indeed have an input stream\n          */\n         boolean hasInputStream();\n+\n+        /**\n+         * Set the Content Type header used in the MIME body (aka mimetype) when uploading files.\n+         * Only useful if {@link #inputStream(InputStream)} is set.\n+         * <p>Will default to {@code application/octet-stream}.</p>\n+         * @param contentType the new content type\n+         * @return this KeyVal\n+         */\n+        KeyVal contentType(String contentType);\n+\n+        /**\n+         * Get the current Content Type, or {@code null} if not set.\n+         * @return the current Content Type.\n+         */\n+        String contentType();\n     }\n }\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n     private static final String FORM_URL_ENCODED = \"application/x-www-form-urlencoded\";\n     private static final int HTTP_TEMP_REDIR = 307; // http/1.1 temporary redirect, not in Java's set.\n     private static final int ReadTimeoutMillis = 800; // max time between reads - only throws if exceeds total request timeout\n+    private static final String DefaultUploadType = \"application/octet-stream\";\n \n     public static Connection connect(String url) {\n         Connection con = new HttpConnection();\n \n     public Connection data(String key, String filename, InputStream inputStream) {\n         req.data(KeyVal.create(key, filename, inputStream));\n+        return this;\n+    }\n+\n+    @Override\n+    public Connection data(String key, String filename, InputStream inputStream, String contentType) {\n+        req.data(KeyVal.create(key, filename, inputStream).contentType(contentType));\n         return this;\n     }\n \n                     if (keyVal.hasInputStream()) {\n                         w.write(\"; filename=\\\"\");\n                         w.write(encodeMimeName(keyVal.value()));\n-                        w.write(\"\\\"\\r\\nContent-Type: application/octet-stream\\r\\n\\r\\n\");\n+                        w.write(\"\\\"\\r\\nContent-Type: \");\n+                        w.write(keyVal.contentType() != null ? keyVal.contentType() : DefaultUploadType);\n+                        w.write(\"\\r\\n\\r\\n\");\n                         w.flush(); // flush\n                         DataUtil.crossStreams(keyVal.inputStream(), outputStream);\n                         outputStream.flush();\n         private String key;\n         private String value;\n         private InputStream stream;\n+        private String contentType;\n \n         public static KeyVal create(String key, String value) {\n             return new KeyVal().key(key).value(value);\n         }\n \n         @Override\n+        public Connection.KeyVal contentType(String contentType) {\n+            Validate.notEmpty(contentType);\n+            this.contentType = contentType;\n+            return this;\n+        }\n+\n+        @Override\n+        public String contentType() {\n+            return contentType;\n+        }\n+\n+        @Override\n         public String toString() {\n             return key + \"=\" + value;\n         }\n--- a/src/test/java/org/jsoup/integration/ConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/ConnectTest.java\n import org.junit.Ignore;\n import org.junit.Test;\n \n+import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n import java.net.MalformedURLException;\n import java.net.SocketTimeoutException;\n         Element h1 = doc.selectFirst(\"h1\");\n         assertEquals(\"outatime\", h1.text());\n     }\n+\n+    /**\n+     * Tests upload of content to a remote service.\n+     */\n+    @Test\n+    public void postFiles() throws IOException {\n+        File thumb = ParseTest.getFile(\"/htmltests/thumb.jpg\");\n+        File html = ParseTest.getFile(\"/htmltests/google-ipod.html\");\n+\n+        Document res = Jsoup\n+            .connect(EchoServlet.Url)\n+            .data(\"firstPart\", thumb.getName(), new FileInputStream(thumb), \"image/jpeg\")\n+            .data(\"secondPart\", html.getName(), new FileInputStream(html)) // defaults to \"application-octetstream\";\n+            .proxy(\"localhost\", 8888)\n+            .post();\n+\n+        assertEquals(\"2\", ihVal(\"Parts\", res));\n+\n+        assertEquals(\"application/octet-stream\", ihVal(\"Part secondPart ContentType\", res));\n+        assertEquals(\"secondPart\", ihVal(\"Part secondPart Name\", res));\n+        assertEquals(\"google-ipod.html\", ihVal(\"Part secondPart Filename\", res));\n+        assertEquals(\"43972\", ihVal(\"Part secondPart Size\", res));\n+\n+        assertEquals(\"image/jpeg\", ihVal(\"Part firstPart ContentType\", res));\n+        assertEquals(\"firstPart\", ihVal(\"Part firstPart Name\", res));\n+        assertEquals(\"thumb.jpg\", ihVal(\"Part firstPart Filename\", res));\n+        assertEquals(\"1052\", ihVal(\"Part firstPart Size\", res));\n+\n+        /*\n+        <tr><th>Part secondPart ContentType</th><td>application/octet-stream</td></tr>\n+        <tr><th>Part secondPart Name</th><td>secondPart</td></tr>\n+        <tr><th>Part secondPart Filename</th><td>google-ipod.html</td></tr>\n+        <tr><th>Part secondPart Size</th><td>43972</td></tr>\n+        <tr><th>Part firstPart ContentType</th><td>image/jpeg</td></tr>\n+        <tr><th>Part firstPart Name</th><td>firstPart</td></tr>\n+        <tr><th>Part firstPart Filename</th><td>thumb.jpg</td></tr>\n+        <tr><th>Part firstPart Size</th><td>1052</td></tr>\n+         */\n+    }\n }\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n \n         File uploadFile = ParseTest.getFile(\"/htmltests/google-ipod.html\");\n         FileInputStream stream = new FileInputStream(uploadFile);\n-        \n+\n         Connection.KeyVal fileData = post.data(\"_file\");\n         fileData.value(\"check.html\");\n         fileData.inputStream(stream);\n \n         Document out = res.parse();\n         assertTrue(out.text().contains(\"HTML Tidy Complete\"));\n-    }\n-\n-    /**\n-     * Tests upload of binary content to a remote service.\n-     */\n-    @Test\n-    public void postJpeg() throws IOException {\n-        File thumb = ParseTest.getFile(\"/htmltests/thumb.jpg\");\n-        Document result = Jsoup\n-            .connect(\"http://regex.info/exif.cgi\")\n-            .data(\"f\", thumb.getName(), new FileInputStream(thumb))\n-            .userAgent(browserUa)\n-            .post();\n-\n-        assertEquals(\"Baseline DCT, Huffman coding\", result.select(\"td:contains(Process) + td\").text());\n-        assertEquals(\"1052 bytes 30 \u00d7 30\", result.select(\"td:contains(Size) + td\").text());\n     }\n \n     @Test\n--- a/src/test/java/org/jsoup/integration/servlets/EchoServlet.java\n+++ b/src/test/java/org/jsoup/integration/servlets/EchoServlet.java\n package org.jsoup.integration.servlets;\n \n+import org.eclipse.jetty.server.Request;\n import org.jsoup.helper.DataUtil;\n import org.jsoup.helper.StringUtil;\n import org.jsoup.integration.TestServer;\n \n+import javax.servlet.MultipartConfigElement;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.Part;\n import java.io.IOException;\n import java.io.PrintWriter;\n import java.nio.ByteBuffer;\n+import java.util.Collection;\n import java.util.Enumeration;\n \n import static org.jsoup.nodes.Entities.escape;\n         doIt(req, res);\n     }\n \n-    private void doIt(HttpServletRequest req, HttpServletResponse res) throws IOException {\n+    private void doIt(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {\n+        boolean isMulti = maybeEnableMultipart(req);\n+\n         res.setContentType(TextHtml);\n         res.setStatus(HttpServletResponse.SC_OK);\n         PrintWriter w = res.getWriter();\n             write(w, name, StringUtil.join(values, \", \"));\n         }\n \n-        // rest body\n+        // post body\n         ByteBuffer byteBuffer = DataUtil.readToByteBuffer(req.getInputStream(), 0);\n         String postData = new String(byteBuffer.array(), \"UTF-8\");\n         if (!StringUtil.isBlank(postData)) {\n             write(w, \"Post Data\", postData);\n+        }\n+\n+        // file uploads\n+        if (isMulti) {\n+            Collection<Part> parts = req.getParts();\n+            write(w, \"Parts\", String.valueOf(parts.size()));\n+\n+            for (Part part : parts) {\n+                String name = part.getName();\n+                write(w, \"Part \" + name + \" ContentType\", part.getContentType());\n+                write(w, \"Part \" + name + \" Name\", name);\n+                write(w, \"Part \" + name + \" Filename\", part.getSubmittedFileName());\n+                write(w, \"Part \" + name + \" Size\", String.valueOf(part.getSize()));\n+                part.delete();\n+            }\n         }\n \n         w.println(\"</table>\");\n         TestServer.start();\n         System.out.println(Url);\n     }\n+\n+    private static boolean maybeEnableMultipart(HttpServletRequest req) {\n+        boolean isMulti = req.getContentType() != null\n+            && req.getContentType().startsWith(\"multipart/form-data\");\n+\n+        if (isMulti) {\n+            req.setAttribute(Request.__MULTIPART_CONFIG_ELEMENT, new MultipartConfigElement(\n+                System.getProperty(\"java.io.tmpdir\")));\n+        }\n+        return isMulti;\n+    }\n }", "timestamp": 1508630012, "metainfo": ""}