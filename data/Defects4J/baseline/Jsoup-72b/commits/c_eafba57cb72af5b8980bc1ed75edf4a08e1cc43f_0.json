{"sha": "eafba57cb72af5b8980bc1ed75edf4a08e1cc43f", "log": "Add custom boolean attribute support #503  * Adds BooleanAttribute that writes out itself without a value * Adds API in Element for setting boolean attributes * Update parser to distinguish between no value and empty value", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n     protected final boolean shouldCollapseAttribute(Document.OutputSettings out) {\n         return (\"\".equals(value) || value.equalsIgnoreCase(key))\n                 && out.syntax() == Document.OutputSettings.Syntax.html\n-                && Arrays.binarySearch(booleanAttributes, key) >= 0;\n+                && isBooleanAttribute();\n+    }\n+\n+    protected boolean isBooleanAttribute() {\n+        return Arrays.binarySearch(booleanAttributes, key) >= 0;\n     }\n \n     @Override\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n         Attribute attr = new Attribute(key, value);\n         put(attr);\n     }\n+    \n+    /**\n+    Set a new boolean attribute, remove attribute if value is false.\n+    @param key attribute key\n+    @param value attribute value\n+    */\n+    public void put(String key, boolean value) {\n+        if (value)\n+            put(new BooleanAttribute(key));\n+        else\n+            remove(key);\n+    }\n \n     /**\n      Set a new attribute, or replace an existing one by key.\n--- /dev/null\n+++ b/src/main/java/org/jsoup/nodes/BooleanAttribute.java\n+package org.jsoup.nodes;\n+\n+/**\n+ * A boolean attribute that is written out without any value.\n+ */\n+public class BooleanAttribute extends Attribute {\n+    /**\n+     * Create a new boolean attribute from unencoded (raw) key.\n+     * @param key attribute key\n+     */\n+    public BooleanAttribute(String key) {\n+        super(key, \"\");\n+    }\n+\n+    @Override\n+    protected boolean isBooleanAttribute() {\n+        return true;\n+    }\n+}\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n      */\n     public Element attr(String attributeKey, String attributeValue) {\n         super.attr(attributeKey, attributeValue);\n+        return this;\n+    }\n+    \n+    /**\n+     * Set a boolean attribute value on this element. Setting to <code>true</code> sets the attribute value to \"\" and\n+     * marks the attribute as boolean so no value is written out. Setting to <code>false</code> removes the attribute\n+     * with the same key if it exists.\n+     * \n+     * @param attributeKey the attribute key\n+     * @param attributeValue the attribute value\n+     * \n+     * @return this element\n+     */\n+    public Element attr(String attributeKey, boolean attributeValue) {\n+        attributes.put(attributeKey, attributeValue);\n         return this;\n     }\n \n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n import org.jsoup.helper.Validate;\n import org.jsoup.nodes.Attribute;\n import org.jsoup.nodes.Attributes;\n+import org.jsoup.nodes.BooleanAttribute;\n \n /**\n  * Parse tokens for the Tokeniser.\n         protected String tagName;\n         private String pendingAttributeName; // attribute names are generally caught in one hop, not accumulated\n         private StringBuilder pendingAttributeValue = new StringBuilder(); // but values are accumulated, from e.g. & in hrefs\n+        private boolean hasEmptyAttributeValue = false; // distinguish boolean attribute from empty string value\n         private boolean hasPendingAttributeValue = false;\n         boolean selfClosing = false;\n         Attributes attributes; // start tags get attributes on construction. End tags get attributes on first new attribute (but only for parser convenience, not used).\n             tagName = null;\n             pendingAttributeName = null;\n             reset(pendingAttributeValue);\n+            hasEmptyAttributeValue = false;\n             hasPendingAttributeValue = false;\n             selfClosing = false;\n             attributes = null;\n \n             if (pendingAttributeName != null) {\n                 Attribute attribute;\n-                if (!hasPendingAttributeValue)\n+                if (hasPendingAttributeValue)\n+                    attribute = new Attribute(pendingAttributeName, pendingAttributeValue.toString());\n+                else if (hasEmptyAttributeValue)\n                     attribute = new Attribute(pendingAttributeName, \"\");\n                 else\n-                    attribute = new Attribute(pendingAttributeName, pendingAttributeValue.toString());\n+                    attribute = new BooleanAttribute(pendingAttributeName);\n                 attributes.put(attribute);\n             }\n             pendingAttributeName = null;\n+            hasEmptyAttributeValue = false;\n+            hasPendingAttributeValue = false;\n             reset(pendingAttributeValue);\n         }\n \n         final void appendAttributeValue(char[] append) {\n             ensureAttributeValue();\n             pendingAttributeValue.append(append);\n+        }\n+        \n+        final void setEmptyAttributeValue() {\n+            hasEmptyAttributeValue = true;\n         }\n \n         private void ensureAttributeValue() {\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n             String value = r.consumeToAnySorted(attributeDoubleValueCharsSorted);\n             if (value.length() > 0)\n                 t.tagPending.appendAttributeValue(value);\n+            else\n+                t.tagPending.setEmptyAttributeValue();\n \n             char c = r.consume();\n             switch (c) {\n             String value = r.consumeToAnySorted(attributeSingleValueCharsSorted);\n             if (value.length() > 0)\n                 t.tagPending.appendAttributeValue(value);\n+            else\n+                t.tagPending.setEmptyAttributeValue();\n \n             char c = r.consume();\n             switch (c) {\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n             assertEquals(i, ps.get(i).siblingIndex);\n         }\n     }\n+    \n+    @Test public void testAddBooleanAttribute() {\n+        Element div = new Element(Tag.valueOf(\"div\"), \"\");\n+        \n+        div.attr(\"true\", true);\n+        \n+        div.attr(\"false\", \"value\");\n+        div.attr(\"false\", false);\n+        \n+        assertTrue(div.hasAttr(\"true\"));\n+        assertEquals(\"\", div.attr(\"true\"));\n+        \n+        assertFalse(div.hasAttr(\"false\"));\n+ \n+        assertEquals(\"<div true></div>\", div.outerHtml());\n+    }    \n \n     @Test public void testAppendRowToTable() {\n         Document doc = Jsoup.parse(\"<table><tr><td>1</td></tr></table>\");\n--- a/src/test/java/org/jsoup/parser/AttributeParseTest.java\n+++ b/src/test/java/org/jsoup/parser/AttributeParseTest.java\n         Elements els = Jsoup.parse(html).select(\"a\");\n         assertEquals(\"&wr_id=123&mid-size=true&ok=&wr\", els.first().attr(\"href\"));\n     }\n+    \n+    @Test public void parsesBooleanAttributes() {\n+        String html = \"<a normal=\\\"123\\\" boolean empty=\\\"\\\"></a>\";\n+        Element el = Jsoup.parse(html).select(\"a\").first();\n+        \n+        assertEquals(\"123\", el.attr(\"normal\"));\n+        assertEquals(\"\", el.attr(\"boolean\"));\n+        assertEquals(\"\", el.attr(\"empty\"));\n+        \n+        assertEquals(html, el.outerHtml());\n+    }\n+    \n }\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         String html = \"<p =a>One<a <p>Something</p>Else\";\n         // this gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated\n         Document doc = Jsoup.parse(html);\n-        assertEquals(\"<p =a=\\\"\\\">One<a <p=\\\"\\\">Something</a></p>\\n\" +\n-                \"<a <p=\\\"\\\">Else</a>\", doc.body().html());\n+        assertEquals(\"<p =a>One<a <p>Something</a></p>\\n\" +\n+                \"<a <p>Else</a>\", doc.body().html());\n \n         doc = Jsoup.parse(\"<p .....>\");\n-        assertEquals(\"<p .....=\\\"\\\"></p>\", doc.body().html());\n+        assertEquals(\"<p .....></p>\", doc.body().html());\n     }\n \n     @Test public void parsesComments() {", "timestamp": 1429382683, "metainfo": ""}