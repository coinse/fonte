{"sha": "39915966a8b7329cdae21623f239e652fb6af763", "log": "Updated Jsoup.Connection so that cookies set on a redirect response will be included on the redirected request and response.", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n     public Connection referrer(String referrer);\n \n     /**\n+     * Configures the connection to (not) follow server redirects. By default this is <b>true</b>.\n+     * @param followRedirects true if server redirects should be followed.\n+     * @return this Connection, for chaining\n+     */\n+    public Connection followRedirects(boolean followRedirects);\n+\n+    /**\n      * Set the request method to use, GET or POST. Default is GET.\n      * @param method HTTP request method\n      * @return this Connection, for chaining\n         public Request timeout(int millis);\n \n         /**\n+         * Get the current followRedirects configuration.\n+         * @return true if followRedirects is enabled.\n+         */\n+        public boolean followRedirects();\n+\n+        /**\n+         * Configures the request to (not) follow server redirects. By default this is <b>true</b>.\n+         *\n+         * @param followRedirects true if server redirects should be followed.\n+         * @return this Connection, for chaining\n+         */\n+        public Request followRedirects(boolean followRedirects);\n+\n+        /**\n          * Add a data parameter to the request\n          * @param keyval data to add.\n          * @return this Request, for chaining\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n         return this;\n     }\n \n+    public Connection followRedirects(boolean followRedirects) {\n+        req.followRedirects(followRedirects);\n+        return this;\n+    }\n+\n     public Connection referrer(String referrer) {\n         Validate.notNull(referrer, \"Referrer must not be null\");\n         req.header(\"Referer\", referrer);\n \n     public static class Request extends Base<Connection.Request> implements Connection.Request {\n         private int timeoutMilliseconds;\n+        private boolean followRedirects;\n         private Collection<Connection.KeyVal> data;\n \n         private Request() {\n             timeoutMilliseconds = 3000;\n+            followRedirects = true;\n             data = new ArrayList<Connection.KeyVal>();\n             method = Connection.Method.GET;\n             headers.put(\"Accept-Encoding\", \"gzip\");\n         public Request timeout(int millis) {\n             Validate.isTrue(millis >= 0, \"Timeout milliseconds must be 0 (infinite) or greater\");\n             timeoutMilliseconds = millis;\n+            return this;\n+        }\n+\n+        public boolean followRedirects() {\n+            return followRedirects;\n+        }\n+\n+        public Connection.Request followRedirects(boolean followRedirects) {\n+            this.followRedirects = followRedirects;\n             return this;\n         }\n \n         private boolean executed = false;\n \n         static Response execute(Connection.Request req) throws IOException {\n+            return execute(req, null);\n+        }\n+\n+        static Response execute(Connection.Request req, Connection.Response previousResponse) throws IOException {\n             Validate.notNull(req, \"Request must not be null\");\n             String protocol = req.url().getProtocol();\n             Validate\n             if (req.method() == Connection.Method.POST)\n                 writePost(req.data(), conn.getOutputStream());          \n \n-            // todo: error handling options, allow user to get !200 without exception\n             int status = conn.getResponseCode();\n             boolean needsRedirect = false;\n             if (status != HttpURLConnection.HTTP_OK) {\n-                // java url connection will follow redirects on same protocol, but not switch between http & https, so do that here\n                 if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER)\n                     needsRedirect = true;\n                 else\n                     throw new IOException(status + \" error loading URL \" + req.url().toString());\n             }\n             Response res = new Response();\n-            res.setupFromConnection(conn);\n-            if (needsRedirect) {\n+            res.setupFromConnection(conn, previousResponse);\n+            if (needsRedirect && req.followRedirects()) {\n                 req.url(new URL(req.url(), res.header(\"Location\")));\n-                return execute(req);\n+                for (Map.Entry<String, String> cookie : res.cookies.entrySet()) { // add response cookies to request (for e.g. login posts)\n+                    req.cookie(cookie.getKey(), cookie.getValue());\n+                }\n+                return execute(req, res);\n             }\n \n             InputStream inStream = null;\n         private static HttpURLConnection createConnection(Connection.Request req) throws IOException {\n             HttpURLConnection conn = (HttpURLConnection) req.url().openConnection();\n             conn.setRequestMethod(req.method().name());\n-            conn.setInstanceFollowRedirects(true);\n+            conn.setInstanceFollowRedirects(false); // don't rely on native redirection support\n             conn.setConnectTimeout(req.timeout());\n             conn.setReadTimeout(req.timeout());\n             if (req.method() == Method.POST)\n         }\n \n         // set up url, method, header, cookies\n-        private void setupFromConnection(HttpURLConnection conn) throws IOException {\n+        private void setupFromConnection(HttpURLConnection conn, Connection.Response previousResponse) throws IOException {\n             method = Connection.Method.valueOf(conn.getRequestMethod());\n             url = conn.getURL();\n             statusCode = conn.getResponseCode();\n             statusMessage = conn.getResponseMessage();\n             contentType = conn.getContentType();\n \n+            // headers into map\n             Map<String, List<String>> resHeaders = conn.getHeaderFields();\n             for (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {\n                 String name = entry.getKey();\n                 } else { // only take the first instance of each header\n                     if (!values.isEmpty())\n                         header(name, values.get(0));\n+                }\n+            }\n+\n+            // if from a redirect, map previous response cookies into this response\n+            if (previousResponse != null) {\n+                for (Map.Entry<String, String> prevCookie : previousResponse.cookies().entrySet()) {\n+                    if (!hasCookie(prevCookie.getKey()))\n+                        cookie(prevCookie.getKey(), prevCookie.getValue());\n                 }\n             }\n         }\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n         assertTrue(doc.title().contains(\"HTML Tidy Online\"));\n     }\n \n+    @Test\n+    public void throwsExceptionOnError() {\n+        Connection con = Jsoup.connect(\"http://infohound.net/tools/404\");\n+        boolean threw = false;\n+        try {\n+            Document doc = con.get();\n+        } catch (IOException e) {\n+            threw = true;\n+        }\n+        assertTrue(threw);\n+    }\n+\n+    @Test\n+    public void doesntRedirectIfSoConfigured() throws IOException {\n+        Connection con = Jsoup.connect(\"http://infohound.net/tools/302.pl\").followRedirects(false);\n+        Connection.Response res = con.execute();\n+        assert(res.statusCode() == 302);\n+    }\n+\n+    @Test\n+    public void redirectsResponseCookieToNextResponse() throws IOException {\n+        Connection con = Jsoup.connect(\"http://infohound.net/tools/302-cookie.pl\");\n+        Connection.Response res = con.execute();\n+        assertEquals(\"asdfg123\", res.cookie(\"token\")); // confirms that cookies set on 1st hit are presented in final result\n+        Document doc = res.parse();\n+        assertEquals(\"token=asdfg123\", ihVal(\"HTTP_COOKIE\", doc)); // confirms that redirected hit saw cookie\n+    }\n+\n }", "timestamp": 1309605126, "metainfo": ""}