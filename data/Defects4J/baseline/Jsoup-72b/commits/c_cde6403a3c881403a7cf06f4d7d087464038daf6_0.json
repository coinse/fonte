{"sha": "cde6403a3c881403a7cf06f4d7d087464038daf6", "log": "Added bufferUp method to response", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n         String contentType();\n \n         /**\n-         * Parse the body of the response as a Document.\n+         * Read and parse the body of the response as a Document. If you intend to parse the same response multiple\n+         * times, you should {@link #bufferUp()} first.\n          * @return a parsed Document\n          * @throws IOException on error\n          */\n          * @return body bytes\n          */\n         byte[] bodyAsBytes();\n+\n+        /**\n+         * Read the body of the response into a local buffer, so that {@link #parse()} may be called repeatedly on the\n+         * same connection response (otherwise, once the response is read, its InputStream will have been drained and\n+         * may not be re-read). Calling {@link #body() } or {@link #bodyAsBytes()} has the same effect. If the requ\n+         * @return this response, for chaining\n+         */\n+        Response bufferUp();\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n             return byteData.array();\n         }\n \n+        @Override\n+        public Connection.Response bufferUp() {\n+            prepareByteData();\n+            return this;\n+        }\n+\n         // set up connection defaults, and details from request\n         private static HttpURLConnection createConnection(Connection.Request req) throws IOException {\n             final HttpURLConnection conn = (HttpURLConnection) (\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n         Connection.Response res = Jsoup.connect(echoURL).execute();\n         Document doc = res.parse();\n         assertTrue(doc.title().contains(\"Environment\"));\n+        Document doc2 = res.parse(); // should blow up because the response input stream has been drained\n+    }\n+\n+    @Test public void multipleParsesOkAfterBufferUp() throws IOException {\n+        Connection.Response res = Jsoup.connect(echoURL).execute().bufferUp();\n+\n+        Document doc = res.parse();\n+        assertTrue(doc.title().contains(\"Environment\"));\n+\n         Document doc2 = res.parse();\n-    }\n+        assertTrue(doc2.title().contains(\"Environment\"));\n+    }\n+\n }", "timestamp": 1498880976, "metainfo": ""}