{"sha": "2d340db5b1ba48079b3bad81a5ffe7c9c7ac26e0", "log": "Added shallowClone()  Fixes #900", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n \n     @Override\n+    public Element shallowClone() {\n+        // simpler than implementing a clone version with no child copy\n+        return new Element(tag, baseUri, attributes);\n+    }\n+\n+    @Override\n     protected Element doClone(Node parent) {\n         Element clone = (Element) super.doClone(parent);\n         clone.attributes = attributes != null ? attributes.clone() : null;\n         clone.baseUri = baseUri;\n         clone.childNodes = new NodeList(clone, childNodes.size());\n-        clone.childNodes.addAll(childNodes);\n+        clone.childNodes.addAll(childNodes); // the children then get iterated and cloned in Node.clone\n \n         return clone;\n     }\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n      * original node.\n      * <p>\n      * The cloned node may be adopted into another Document or node structure using {@link Element#appendChild(Node)}.\n-     * @return stand-alone cloned node\n+     * @return a stand-alone cloned node, including clones of any children\n+     * @see #shallowClone()\n      */\n     @Override\n     public Node clone() {\n         }\n \n         return thisClone;\n+    }\n+\n+    /**\n+     * Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have\n+     * no parent or sibling nodes.\n+     * @return a single independent copy of this node\n+     * @see #clone()\n+     */\n+    public Node shallowClone() {\n+        return doClone(null);\n     }\n \n     /*\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n \n         assertEquals(\"\", div.html());\n         assertEquals(\"\", copy.html());\n+    }\n+\n+    @Test public void testShallowClone() {\n+        String base = \"http://example.com/\";\n+        Document doc = Jsoup.parse(\"<div id=1 class=one><p id=2 class=two>One\", base);\n+        Element d = doc.selectFirst(\"div\");\n+        Element p = doc.selectFirst(\"p\");\n+        TextNode t = p.textNodes().get(0);\n+\n+        Element d2 = d.shallowClone();\n+        Element p2 = p.shallowClone();\n+        TextNode t2 = (TextNode) t.shallowClone();\n+\n+        assertEquals(1, d.childNodeSize());\n+        assertEquals(0, d2.childNodeSize());\n+\n+        assertEquals(1, p.childNodeSize());\n+        assertEquals(0, p2.childNodeSize());\n+        assertEquals(\"\", p2.text());\n+\n+        assertEquals(\"two\", p2.className());\n+        assertEquals(\"One\", t2.text());\n+\n+        d2.append(\"<p id=3>Three\");\n+        assertEquals(1, d2.childNodeSize());\n+        assertEquals(\"Three\", d2.text());\n+        assertEquals(\"One\", d.text());\n+        assertEquals(base, d2.baseUri());\n     }\n \n     @Test public void testTagNameSet() {", "timestamp": 1509820350, "metainfo": ""}