{"sha": "c3c952e55f10b07dd9d4a9121db1b3828b0a1bc7", "log": "When parsing, allow all tags to self-close.  Tags that aren't expected to self-close will get an end tag.  Fixes #2458", "commit": "\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n \n     Element insert(Token.StartTag startTag) {\n         // handle empty unknown tags\n-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate fake end tag.\n-        if (startTag.isSelfClosing() && !Tag.isKnownTag(startTag.name())) {\n+        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.\n+        if (startTag.isSelfClosing()) {\n             Element el = insertEmpty(startTag);\n-            process(new Token.EndTag(el.tagName())); // ensure we get out of whatever state we are in\n+            stack.add(el);\n+            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing\n             return el;\n         }\n         \n         Element el = new Element(tag, baseUri, startTag.attributes);\n         insertNode(el);\n         if (startTag.isSelfClosing()) {\n-            tokeniser.acknowledgeSelfClosingFlag();\n-            if (!tag.isKnownTag()) // unknown tag, remember this is self closing for output\n+            if (tag.isKnownTag()) {\n+                if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); // if not acked, promulagates error\n+            } else {\n+                // unknown tag, remember this is self closing for output\n                 tag.setSelfClosing();\n+                tokeniser.acknowledgeSelfClosingFlag(); // not an distinct error\n+            }\n         }\n         return el;\n     }\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n     }\n \n     @Test public void handlesKnownEmptyBlocks() {\n-        // if known tag, must be defined as self closing to allow as self closing. unkown tags can be self closing.\n-        String h = \"<div id='1' /><div id=2><img /><img></div> <hr /> hr text <hr> hr text two\";\n-        Document doc = Jsoup.parse(h);\n-        Element div1 = doc.getElementById(\"1\");\n-        assertTrue(!div1.children().isEmpty()); // <div /> is treated as <div>...\n-        assertTrue(doc.select(\"hr\").first().children().isEmpty());\n-        assertTrue(doc.select(\"hr\").last().children().isEmpty());\n-        assertTrue(doc.select(\"img\").first().children().isEmpty());\n-        assertTrue(doc.select(\"img\").last().children().isEmpty());\n+        // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.\n+        String h = \"<div id='1' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two\";\n+        Document doc = Jsoup.parse(h);\n+        assertEquals(\"<div id=\\\"1\\\"></div><div id=\\\"2\\\"><img /><img /></div><a id=\\\"3\\\"></a><i></i><foo /><foo>One</foo> <hr /> hr text <hr /> hr text two\", TextUtil.stripNewlines(doc.body().html()));\n     }\n \n     @Test public void handlesSolidusAtAttributeEnd() {", "timestamp": 1359253993, "metainfo": ""}