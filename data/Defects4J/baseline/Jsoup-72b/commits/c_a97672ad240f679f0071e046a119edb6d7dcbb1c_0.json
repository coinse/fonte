{"sha": "a97672ad240f679f0071e046a119edb6d7dcbb1c", "log": "Added Element.selectFirst()", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n      */\n     public Elements select(String cssQuery) {\n         return Selector.select(cssQuery, this);\n+    }\n+\n+    /**\n+     * Find the first Element that matches the {@link Selector} CSS query, with this element as the starting context.\n+     * <p>This is effectively the same as calling {@code element.select(query).first()}, but is more efficient as query\n+     * execution stops on the first hit.</p>\n+     * @param cssQuery cssQuery a {@link Selector} CSS-like query\n+     * @return the first matching element, or <b>{@code null}</b> if there is no match.\n+     */\n+    public Element selectFirst(String cssQuery) {\n+        return Selector.selectFirst(cssQuery, this);\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/select/Collector.java\n+++ b/src/main/java/org/jsoup/select/Collector.java\n \n import org.jsoup.nodes.Element;\n import org.jsoup.nodes.Node;\n+\n+import static org.jsoup.select.NodeFilter.FilterResult.CONTINUE;\n+import static org.jsoup.select.NodeFilter.FilterResult.STOP;\n \n /**\n  * Collects a list of elements that match the supplied criteria.\n             // void\n         }\n     }\n+\n+    public static Element findFirst(Evaluator eval, Element root) {\n+        FirstFinder finder = new FirstFinder(root, eval);\n+        NodeTraversor.filter(finder, root);\n+        return finder.match;\n+    }\n+\n+    private static class FirstFinder implements NodeFilter {\n+        private final Element root;\n+        private Element match = null;\n+        private final Evaluator eval;\n+\n+        FirstFinder(Element root, Evaluator eval) {\n+            this.root = root;\n+            this.eval = eval;\n+        }\n+\n+        @Override\n+        public FilterResult head(Node node, int depth) {\n+            if (node instanceof Element) {\n+                Element el = (Element) node;\n+                if (eval.matches(root, el)) {\n+                    match = el;\n+                    return STOP;\n+                }\n+            }\n+            return CONTINUE;\n+        }\n+\n+        @Override\n+        public FilterResult tail(Node node, int depth) {\n+            return CONTINUE;\n+        }\n+    }\n+\n }\n--- a/src/main/java/org/jsoup/select/CombiningEvaluator.java\n+++ b/src/main/java/org/jsoup/select/CombiningEvaluator.java\n \n         @Override\n         public String toString() {\n-            return String.format(\":or%s\", evaluators);\n+            return StringUtil.join(evaluators, \", \");\n         }\n     }\n }\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n \n /**\n  * CSS-like element selector, that finds elements matching a query.\n- * \n+ *\n  * <h2>Selector syntax</h2>\n  * <p>\n  * A selector is a chain of simple selectors, separated by combinators. Selectors are <b>case insensitive</b> (including against\n  * <tr><td><code>:only-of-type</code></td><td> an element that has a parent element and whose parent element has no other element children with the same expanded element name</td><td></td></tr>\n  * <tr><td><code>:empty</code></td><td>elements that have no children at all</td><td></td></tr>\n  * </table>\n- * \n+ *\n  * @author Jonathan Hedley, jonathan@hedley.net\n  * @see Element#select(String)\n  */\n public class Selector {\n-    private final Evaluator evaluator;\n-    private final Element root;\n-\n-    private Selector(String query, Element root) {\n-        Validate.notNull(query);\n-        query = query.trim();\n-        Validate.notEmpty(query);\n-        Validate.notNull(root);\n-\n-        this.evaluator = QueryParser.parse(query);\n-\n-        this.root = root;\n-    }\n-\n-    private Selector(Evaluator evaluator, Element root) {\n-        Validate.notNull(evaluator);\n-        Validate.notNull(root);\n-\n-        this.evaluator = evaluator;\n-        this.root = root;\n-    }\n+    // not instantiable\n+    private Selector() {}\n \n     /**\n      * Find elements matching selector.\n      * @throws Selector.SelectorParseException (unchecked) on an invalid CSS query.\n      */\n     public static Elements select(String query, Element root) {\n-        return new Selector(query, root).select();\n+        Validate.notEmpty(query);\n+        return select(QueryParser.parse(query), root);\n     }\n \n     /**\n      * @return matching elements, empty if none\n      */\n     public static Elements select(Evaluator evaluator, Element root) {\n-        return new Selector(evaluator, root).select();\n+        Validate.notNull(evaluator);\n+        Validate.notNull(root);\n+        return Collector.collect(evaluator, root);\n     }\n \n     /**\n         return new Elements(elements);\n     }\n \n-    private Elements select() {\n-        return Collector.collect(evaluator, root);\n-    }\n-\n     // exclude set. package open so that Elements can implement .not() selector.\n     static Elements filterOut(Collection<Element> elements, Collection<Element> outs) {\n         Elements output = new Elements();\n         return output;\n     }\n \n+    /**\n+     * Find the first element that matches the query.\n+     * @param cssQuery CSS selector\n+     * @param root root element to descend into\n+     * @return the matching element, or <b>null</b> if none.\n+     */\n+    public static Element selectFirst(String cssQuery, Element root) {\n+        Validate.notEmpty(cssQuery);\n+        return Collector.findFirst(QueryParser.parse(cssQuery), root);\n+    }\n+\n     public static class SelectorParseException extends IllegalStateException {\n         public SelectorParseException(String msg, Object... params) {\n             super(String.format(msg, params));\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(1, els.size());\n         assertEquals(\"One'One\", els.text());\n     }\n+\n+    @Test public void selectFirst() {\n+        String html = \"<p>One<p>Two<p>Three\";\n+        Document doc = Jsoup.parse(html);\n+        assertEquals(\"One\", doc.selectFirst(\"p\").text());\n+    }\n+\n+    @Test public void selectFirstWithAnd() {\n+        String html = \"<p>One<p class=foo>Two<p>Three\";\n+        Document doc = Jsoup.parse(html);\n+        assertEquals(\"Two\", doc.selectFirst(\"p.foo\").text());\n+    }\n+\n+    @Test public void selectFirstWithOr() {\n+        String html = \"<p>One<p>Two<p>Three<div>Four\";\n+        Document doc = Jsoup.parse(html);\n+        assertEquals(\"One\", doc.selectFirst(\"p, div\").text());\n+    }\n }", "timestamp": 1507509394, "metainfo": ""}