{"sha": "ac95e9f55bc7ffb60febb341571d85635dada8fd", "log": "Nodes get to html() method.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n         this.value = value;\n     }\n \n+    public String html() {\n+        return String.format(\"%s=\\\"%s\\\"\", key, StringEscapeUtils.escapeHtml(value));\n+    }\n+\n+    public String toString() {\n+        return html();\n+    }\n+\n     /**\n      * Create a new Attribute from an unencoded key and a HMTL attribute encoded value.\n      * @param unencodedKey assumes the key is not encoded, as can be only run of simple \\w chars.\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n         return Collections.unmodifiableList(list);\n     }\n \n-    // todo: toString\n+    public String html() {\n+        StringBuilder accum = new StringBuilder();\n+        for (Attribute attribute : this) {\n+            accum.append(\" \");\n+            accum.append(attribute.html());\n+        }\n+        return accum.toString();\n+    }\n+    public String toString() {\n+        return html();\n+    }\n \n \n }\n--- a/src/main/java/org/jsoup/nodes/Comment.java\n+++ b/src/main/java/org/jsoup/nodes/Comment.java\n     public String getData() {\n         return attributes.get(COMMENT_KEY);\n     }\n+\n+    public String html() {\n+        return String.format(\"<!--%s-->\", getData());\n+    }\n+\n+    public String toString() {\n+        return html();\n+    }\n }\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n         return classNames().contains(className);\n     }\n \n+    public String html() {\n+        StringBuilder accum = new StringBuilder();\n+        accum\n+                .append(\"<\")\n+                .append(tagName())\n+                .append(attributes.html());\n+\n+        if (childNodes.isEmpty() && tag.isEmpty()) {\n+            accum.append(\" />\");\n+        } else {\n+            accum.append(\">\");\n+            for (Node node : childNodes)\n+                accum.append(node.html());\n+            accum.append(\"</\").append(tagName()).append(\">\");\n+        }\n+\n+        return accum.toString();\n+    }\n+\n+    public String toString() {\n+        return html();\n+    }\n+\n \n }\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n         // TODO: probably not have this accessor\n     }\n \n+    public abstract String html();\n+\n     public String toString() {\n         return nodeName();\n     }\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n         return attributes.get(TEXT_KEY);\n     }\n \n+    public String html() {\n+        return StringEscapeUtils.escapeHtml(getWholeText());\n+    }\n+\n+    public String toString() {\n+        return html();\n+    }\n+\n     /**\n      * Create a new TextNode from HTML encoded (aka escaped) data.\n      * @param encodedText Text containing encoded HTML (e.g. &amp;lt;)\n--- a/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n+++ b/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n     public String getWholeDeclaration() {\n         return attributes.get(DECL_KEY);\n     }\n+\n+    // TODO: this munged <! and <? -- not really correct or useful\n+    public String html() {\n+        return String.format(\"<? %s >\", getWholeDeclaration());\n+    }\n+\n+    public String toString() {\n+        return html();\n+    }\n }\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n     }\n \n     private void parseComment() {\n+        // TODO: this puts comments into nodes that should not hold the (e.g. img).\n         tq.consume(\"<!--\");\n         String data = tq.chompTo(\"->\");\n \n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n \n     public boolean isInline() {\n         return !isBlock;\n+    }\n+\n+    public boolean isEmpty() {\n+        return empty;\n     }\n \n     @Override\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertFalse(doc.hasClass(\"mellow\"));\n     }\n \n+    @Test public void testToHtml() {\n+        Document doc = Jsoup.parse(\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\");\n+        assertEquals(\"<html><head></head><body><div title=\\\"Tags &amp;c.\\\"><img src=\\\"foo.png\\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\", doc.html());\n+    }\n+\n \n }", "timestamp": 1309605101, "metainfo": ""}