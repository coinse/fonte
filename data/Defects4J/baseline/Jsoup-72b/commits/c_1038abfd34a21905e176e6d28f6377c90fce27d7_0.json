{"sha": "1038abfd34a21905e176e6d28f6377c90fce27d7", "log": "Added :containsData() selector", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n             if (childNode instanceof DataNode) {\n                 DataNode data = (DataNode) childNode;\n                 sb.append(data.getWholeData());\n+            } else if (childNode instanceof Comment) {\n+                Comment comment = (Comment) childNode;\n+                sb.append(comment.getData());\n             } else if (childNode instanceof Element) {\n                 Element element = (Element) childNode;\n                 String elementData = element.data();\n--- a/src/main/java/org/jsoup/select/Evaluator.java\n+++ b/src/main/java/org/jsoup/select/Evaluator.java\n \n         @Override\n         public String toString() {\n-            return String.format(\":contains(%s\", searchText);\n+            return String.format(\":contains(%s)\", searchText);\n+        }\n+    }\n+\n+    /**\n+     * Evaluator for matching Element (and its descendants) data\n+     */\n+    public static final class ContainsData extends Evaluator {\n+        private String searchText;\n+\n+        public ContainsData(String searchText) {\n+            this.searchText = searchText.toLowerCase();\n+        }\n+\n+        @Override\n+        public boolean matches(Element root, Element element) {\n+            return (element.data().toLowerCase().contains(searchText));\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return String.format(\":containsData(%s)\", searchText);\n         }\n     }\n \n \n         @Override\n         public String toString() {\n-            return String.format(\":containsOwn(%s\", searchText);\n+            return String.format(\":containsOwn(%s)\", searchText);\n         }\n     }\n \n \n         @Override\n         public String toString() {\n-            return String.format(\":matches(%s\", pattern);\n+            return String.format(\":matches(%s)\", pattern);\n         }\n     }\n \n \n         @Override\n         public String toString() {\n-            return String.format(\":matchesOwn(%s\", pattern);\n+            return String.format(\":matchesOwn(%s)\", pattern);\n         }\n     }\n }\n--- a/src/main/java/org/jsoup/select/QueryParser.java\n+++ b/src/main/java/org/jsoup/select/QueryParser.java\n             contains(false);\n         else if (tq.matches(\":containsOwn(\"))\n             contains(true);\n+        else if (tq.matches(\":containsData(\"))\n+            containsData();\n         else if (tq.matches(\":matches(\"))\n             matches(false);\n         else if (tq.matches(\":matchesOwn(\"))\n             evals.add(new Evaluator.ContainsText(searchText));\n     }\n \n+    // pseudo selector :containsData(data)\n+    private void containsData() {\n+        tq.consume(\":containsData\");\n+        String searchText = TokenQueue.unescape(tq.chompBalanced('(', ')'));\n+        Validate.notEmpty(searchText, \":containsData(text) query must not be empty\");\n+        evals.add(new Evaluator.ContainsData(searchText));\n+    }\n+\n     // :matches(regex), matchesOwn(regex)\n     private void matches(boolean own) {\n         tq.consume(own ? \":matchesOwn\" : \":matches\");\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n  * <tr><td><code>:matches(<em>regex</em>)</code></td><td>elements whose text matches the specified regular expression. The text may appear in the found element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n  * <tr><td><code>:containsOwn(<em>text</em>)</code></td><td>elements that directly contain the specified text. The search is case insensitive. The text must appear in the found element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n  * <tr><td><code>:matchesOwn(<em>regex</em>)</code></td><td>elements whose own text matches the specified regular expression. The text must appear in the found element, not any of its descendants.</td><td><code>td:matchesOwn(\\\\d+)</code> finds table cells directly containing digits. <code>div:matchesOwn((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n+ * <tr><td><code>:containsData(<em>data</em>)</code></td><td>elements that contains the specified <em>data</em>. The contents of {@code script} and {@code style} elements, and {@code comment} nodes (etc) are considered data nodes, not text nodes. The search is case insensitive. The data may appear in the found element, or any of its descendants.</td><td><code>script:contains(jsoup)</code> finds script elements containing the data \"jsoup\".</td></tr>\n  * <tr><td></td><td>The above may be combined in any order and with other selectors</td><td><code>.light:contains(name):eq(0)</code></td></tr>\n  * <tr><td colspan=\"3\"><h3>Structural pseudo selectors</h3></td></tr>\n  * <tr><td><code>:root</code></td><td>The element that is the root of the document. In HTML, this is the <code>html</code> element</td><td><code>:root</code></td></tr>\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(\"One\", doc.select(\"div[data=\\\"End]\\\"\").first().text());\n         assertEquals(\"Two\", doc.select(\"div[data=\\\"[Another)]]\\\"\").first().text());\n     }\n+\n+    @Test public void containsData() {\n+        String html = \"<p>jsoup</p><script>jsoup</script><span><!-- comments --></span>\";\n+        Document doc = Jsoup.parse(html);\n+        Element body = doc.body();\n+\n+        Elements dataEls1 = body.select(\":containsData(jsoup)\");\n+        Elements dataEls2 = body.select(\"script:containsData(jsoup)\");\n+        Elements dataEls3 = body.select(\"span:containsData(comments)\");\n+        Elements dataEls4 = body.select(\":containsData(s)\");\n+\n+        assertEquals(2, dataEls1.size()); // body and script\n+        assertEquals(1, dataEls2.size());\n+        assertEquals(dataEls1.last(), dataEls2.first());\n+        assertEquals(\"<script>jsoup</script>\", dataEls2.outerHtml());\n+        assertEquals(1, dataEls3.size());\n+        assertEquals(\"span\", dataEls3.first().tagName());\n+        assertEquals(3, dataEls4.size());\n+        assertEquals(\"body\", dataEls4.first().tagName());\n+        assertEquals(\"script\", dataEls4.get(1).tagName());\n+        assertEquals(\"span\", dataEls4.get(2).tagName());\n+    }\n }", "timestamp": 1477859258, "metainfo": ""}