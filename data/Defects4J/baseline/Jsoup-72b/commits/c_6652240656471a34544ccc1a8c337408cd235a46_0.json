{"sha": "6652240656471a34544ccc1a8c337408cd235a46", "log": "Use static NodeTraversor.traverse", "commit": "\n--- a/src/main/java/org/jsoup/examples/HtmlToPlainText.java\n+++ b/src/main/java/org/jsoup/examples/HtmlToPlainText.java\n      */\n     public String getPlainText(Element element) {\n         FormattingVisitor formatter = new FormattingVisitor();\n-        NodeTraversor traversor = new NodeTraversor(formatter);\n-        traversor.traverse(element); // walk the DOM, and call .head() and .tail() for each node\n+        NodeTraversor.traverse(formatter, element); // walk the DOM, and call .head() and .tail() for each node\n \n         return formatter.toString();\n     }\n--- a/src/main/java/org/jsoup/helper/W3CDom.java\n+++ b/src/main/java/org/jsoup/helper/W3CDom.java\n             out.setDocumentURI(in.location());\n \n         org.jsoup.nodes.Element rootEl = in.child(0); // skip the #root node\n-        NodeTraversor traversor = new NodeTraversor(new W3CBuilder(out));\n-        traversor.traverse(rootEl);\n+        NodeTraversor.traverse(new W3CBuilder(out), rootEl);\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n      * @see #textNodes()\n      */\n     public String text() {\n-        final StringBuilder accum = StringUtil.stringBuilder();\n-        new NodeTraversor(new NodeVisitor() {\n+        final StringBuilder accum = new StringBuilder();\n+        NodeTraversor.traverse(new NodeVisitor() {\n             public void head(Node node, int depth) {\n                 if (node instanceof TextNode) {\n                     TextNode textNode = (TextNode) node;\n \n             public void tail(Node node, int depth) {\n             }\n-        }).traverse(this);\n+        }, this);\n         return accum.toString().trim();\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n      */\n     public Node traverse(NodeVisitor nodeVisitor) {\n         Validate.notNull(nodeVisitor);\n-        NodeTraversor traversor = new NodeTraversor(nodeVisitor);\n-        traversor.traverse(this);\n+        NodeTraversor.traverse(nodeVisitor, this);\n         return this;\n     }\n \n     }\n \n     protected void outerHtml(Appendable accum) {\n-        new NodeTraversor(new OuterHtmlVisitor(accum, getOutputSettings())).traverse(this);\n+        NodeTraversor.traverse(new OuterHtmlVisitor(accum, getOutputSettings()), this);\n     }\n \n     // if this node has no document (or parent), retrieve the default output settings\n--- a/src/main/java/org/jsoup/safety/Cleaner.java\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n \n     private int copySafeNodes(Element source, Element dest) {\n         CleaningVisitor cleaningVisitor = new CleaningVisitor(source, dest);\n-        NodeTraversor traversor = new NodeTraversor(cleaningVisitor);\n-        traversor.traverse(source);\n+        NodeTraversor.traverse(cleaningVisitor, source);\n         return cleaningVisitor.numDiscarded;\n     }\n \n--- a/src/main/java/org/jsoup/select/Collector.java\n+++ b/src/main/java/org/jsoup/select/Collector.java\n      */\n     public static Elements collect (Evaluator eval, Element root) {\n         Elements elements = new Elements();\n-        new NodeTraversor(new Accumulator(root, elements, eval)).traverse(root);\n+        NodeTraversor.traverse(new Accumulator(root, elements, eval), root);\n         return elements;\n     }\n \n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n      * @return this, for chaining\n      */\n     public Elements traverse(NodeVisitor nodeVisitor) {\n-        Validate.notNull(nodeVisitor);\n-        NodeTraversor traversor = new NodeTraversor(nodeVisitor);\n-        for (Element el: this) {\n-            traversor.traverse(el);\n-        }\n+        NodeTraversor.traverse(nodeVisitor, this);\n         return this;\n     }\n ", "timestamp": 1507503484, "metainfo": ""}