{"sha": "7d8abb78a1d0c4cdfa93e7e96e9b2e625486e99f", "log": "SlowRider test for interruptable read", "commit": "\n--- a/src/main/java/org/jsoup/internal/ConstrainableInputStream.java\n+++ b/src/main/java/org/jsoup/internal/ConstrainableInputStream.java\n     private final boolean capped;\n     private final int maxSize;\n     private int remaining;\n+    private boolean interrupted;\n \n     private ConstrainableInputStream(InputStream in, int bufferSize, int maxSize) {\n         super(in, bufferSize);\n \n     @Override\n     public int read(byte[] b, int off, int len) throws IOException {\n-        if (Thread.interrupted() || capped && remaining <= 0)\n+        if (interrupted || capped && remaining <= 0)\n             return -1;\n+        if (Thread.interrupted()) {\n+            // tracks if this read was interrupted, because parse() may call twice (and we still want the thread interupt to clear)\n+            interrupted = true;\n+            return -1;\n+        }\n \n         if (capped && len > remaining)\n             len = remaining; // don't read more than desired, even if available\n--- a/src/test/java/org/jsoup/integration/ConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/ConnectTest.java\n import org.jsoup.Jsoup;\n import org.jsoup.integration.servlets.EchoServlet;\n import org.jsoup.integration.servlets.HelloServlet;\n+import org.jsoup.integration.servlets.SlowRider;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import java.io.IOException;\n         assertEquals(\"gzip\", ihVal(\"Accept-Encoding\", doc));\n         assertEquals(\"auth=token\", ihVal(\"Cookie\", doc));\n     }\n+\n+    // Slow Rider tests. Ignored by default so tests don't take aaages\n+    @Ignore\n+    @Test public void canInterruptBodyStringRead() throws IOException, InterruptedException {\n+        // todo - implement in interruptable channels, so it's immediate\n+        final String[] body = new String[1];\n+        Thread runner = new Thread(new Runnable() {\n+            public void run() {\n+                try {\n+                    Connection.Response res = Jsoup.connect(SlowRider.Url)\n+                        .timeout(15 * 1000)\n+                        .execute();\n+                    body[0] = res.body();\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+            }\n+        });\n+\n+        runner.start();\n+        Thread.sleep(1000 * 3);\n+        runner.interrupt();\n+        assertTrue(runner.isInterrupted());\n+        runner.join();\n+\n+        assertTrue(body[0].length() > 0);\n+        assertTrue(body[0].contains(\"<p>Are you still there?\"));\n+    }\n+\n+    @Ignore\n+    @Test public void canInterruptDocumentRead() throws IOException, InterruptedException {\n+        // todo - implement in interruptable channels, so it's immediate\n+        final String[] body = new String[1];\n+        Thread runner = new Thread(new Runnable() {\n+            public void run() {\n+                try {\n+                    Connection.Response res = Jsoup.connect(SlowRider.Url)\n+                        .timeout(15 * 1000)\n+                        .execute();\n+                    body[0] = res.parse().text();\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+            }\n+        });\n+\n+        runner.start();\n+        Thread.sleep(1000 * 3);\n+        runner.interrupt();\n+        assertTrue(runner.isInterrupted());\n+        runner.join();\n+\n+        assertTrue(body[0].length() == 0); // doesn't ready a failed doc\n+    }\n }\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n         );\n     }\n \n-    @Test public void canInterruptBodyStringRead() throws IOException, InterruptedException {\n-        // todo - implement in interruptable channels, so it's immediate\n-        final String[] body = new String[1];\n-        Thread runner = new Thread(new Runnable() {\n-            public void run() {\n-                try {\n-                    Connection.Response res = Jsoup.connect(\"http://jsscxml.org/serverload.stream\")\n-                        .timeout(15 * 1000)\n-                        .execute();\n-                    body[0] = res.body();\n-                } catch (IOException e) {\n-                    throw new RuntimeException(e);\n-                }\n-\n-            }\n-        });\n-\n-        runner.start();\n-        Thread.sleep(1000 * 7);\n-        runner.interrupt();\n-        assertTrue(runner.isInterrupted());\n-        runner.join();\n-\n-        assertTrue(body[0].length() > 0);\n-    }\n-\n-    @Test public void canInterruptDocumentRead() throws IOException, InterruptedException {\n-        // todo - implement in interruptable channels, so it's immediate\n-        final String[] body = new String[1];\n-        Thread runner = new Thread(new Runnable() {\n-            public void run() {\n-                try {\n-                    Connection.Response res = Jsoup.connect(\"http://jsscxml.org/serverload.stream\")\n-                        .timeout(15 * 1000)\n-                        .execute();\n-                    body[0] = res.parse().text();\n-                } catch (IOException e) {\n-                    throw new RuntimeException(e);\n-                }\n-\n-            }\n-        });\n-\n-        runner.start();\n-        Thread.sleep(1000 * 7);\n-        runner.interrupt();\n-        assertTrue(runner.isInterrupted());\n-        runner.join();\n-\n-        assertTrue(body[0].length() > 0);\n-    }\n-\n-    @Test public void handlesEscapedRedirectUrls() throws IOException {\n+   @Test public void handlesEscapedRedirectUrls() throws IOException {\n         String url = \"http://www.altalex.com/documents/news/2016/12/06/questioni-civilistiche-conseguenti-alla-depenalizzazione\";\n         // sends: Location:http://shop.wki.it/shared/sso/sso.aspx?sso=&url=http%3a%2f%2fwww.altalex.com%2fsession%2fset%2f%3freturnurl%3dhttp%253a%252f%252fwww.altalex.com%253a80%252fdocuments%252fnews%252f2016%252f12%252f06%252fquestioni-civilistiche-conseguenti-alla-depenalizzazione\n         // then to: http://www.altalex.com/session/set/?returnurl=http%3a%2f%2fwww.altalex.com%3a80%2fdocuments%2fnews%2f2016%2f12%2f06%2fquestioni-civilistiche-conseguenti-alla-depenalizzazione&sso=RDRG6T684G4AK2E7U591UGR923\n--- /dev/null\n+++ b/src/test/java/org/jsoup/integration/servlets/SlowRider.java\n+package org.jsoup.integration.servlets;\n+\n+import org.jsoup.integration.TestServer;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+\n+/**\n+ * Slowly, interminably writes output. For the purposes of testing timeouts and interrupts.\n+ */\n+public class SlowRider extends BaseServlet {\n+    public static final String Url = TestServer.map(SlowRider.class);\n+    private static final int SleepTime = 1000;\n+\n+    @Override\n+    protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n+        res.setContentType(TextHtml);\n+        res.setStatus(HttpServletResponse.SC_OK);\n+        PrintWriter w = res.getWriter();\n+\n+        while (true) {\n+            w.println(\"<p>Are you still there?\");\n+            boolean err = w.checkError(); // flush and check still ok\n+            if (err) {\n+                log(\"Remote connection lost\");\n+                break;\n+            }\n+            try {\n+                Thread.sleep(SleepTime);\n+            } catch (InterruptedException e) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    // allow the servlet to run as a main program, for local test\n+    public static void main(String[] args) {\n+        TestServer.start();\n+        System.out.println(Url);\n+    }\n+}", "timestamp": 1508029068, "metainfo": ""}