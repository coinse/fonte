{"sha": "9eab14f2c4e581102bb5f8fa9943f7c0ca541016", "log": "Updated impl, test, and changes", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n \n     /**\n-\t * Add this node as a child node to the given parent\n-\t * \n-\t * @param parent node in which this node will be appended\n-\t * @return this element, so that you can continue modifying the element\n-\t */\n-\tpublic Element appendTo(Node parent) {\n-\t\tValidate.notNull(parent);\n-\t\tif (this.parentNode != null) {\n-\t\t\tthis.parentNode.removeChild(this);\n-\t\t}\n-\n-\t\tparent.ensureChildNodes();\n-\t\tparent.childNodes.add(this);\n-\t\tsetSiblingIndex(parent.childNodes.size() - 1);\n-\t\tsetParentNode(parent);\n-\t\treturn this;\n-\t}\n+     * Add this element to the supplied parent element, as its next child.\n+     *\n+     * @param parent element to which this element will be appended\n+     * @return this element, so that you can continue modifying the element\n+     */\n+    public Element appendTo(Element parent) {\n+        Validate.notNull(parent);\n+        parent.appendChild(this);\n+        return this;\n+    }\n \n     /**\n      * Add a node to the start of this element's children.\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n import java.util.Map;\n import java.util.Set;\n \n-import static org.hamcrest.CoreMatchers.equalTo;\n-import static org.hamcrest.CoreMatchers.not;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n \t@Test\n \tpublic void testAppendTo() {\n \t\tString parentHtml = \"<div class='a'></div>\";\n-\t\tString childHtml = \"<div class='b'></div>\";\n-\n-\t\tElement parentElement = Jsoup.parse(parentHtml).getElementsByClass(\"a\").first();\n-\t\tElement childElement = Jsoup.parse(childHtml).getElementsByClass(\"b\").first();\n-\n-\t\tchildElement.attr(\"class\", \"test-class\").appendTo(parentElement).attr(\"id\", \"testId\");\n-\t\tassertEquals(\"test-class\", childElement.attr(\"class\"));\n-\t\tassertEquals(\"testId\", childElement.attr(\"id\"));\n-\t\tassertThat(parentElement.attr(\"id\"), not(equalTo(\"testId\")));\n-\t\tassertThat(parentElement.attr(\"class\"), not(equalTo(\"test-class\")));\n-\t\tassertSame(childElement, parentElement.children().first());\n-\t\tassertSame(parentElement, childElement.parent());\n+\t\tString childHtml = \"<div class='b'></div><p>Two</p>\";\n+\n+\t\tDocument parentDoc = Jsoup.parse(parentHtml);\n+\t\tElement parent = parentDoc.body();\n+        Document childDoc = Jsoup.parse(childHtml);\n+\n+        Element div = childDoc.select(\"div\").first();\n+        Element p = childDoc.select(\"p\").first();\n+        Element appendTo1 = div.appendTo(parent);\n+        assertEquals(div, appendTo1);\n+\n+        Element appendTo2 = p.appendTo(div);\n+        assertEquals(p, appendTo2);\n+\n+        assertEquals(\"<div class=\\\"a\\\"></div>\\n<div class=\\\"b\\\">\\n <p>Two</p>\\n</div>\", parentDoc.body().html());\n+        assertEquals(\"\", childDoc.body().html()); // got moved out\n \t}\n }", "timestamp": 1498887800, "metainfo": ""}