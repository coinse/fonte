{"sha": "72edc30eeda8ef001c043cc4ca173c6311bec887", "log": "Moved more tests to the local server", "commit": "\n--- a/src/test/java/org/jsoup/integration/ConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/ConnectTest.java\n import java.net.MalformedURLException;\n import java.net.SocketTimeoutException;\n import java.net.URL;\n+import java.util.Map;\n \n import static org.jsoup.integration.UrlConnectTest.browserUa;\n import static org.junit.Assert.assertEquals;\n         <tr><th>Part firstPart Size</th><td>1052</td></tr>\n          */\n     }\n+\n+    @Test public void multipleParsesOkAfterBufferUp() throws IOException {\n+        Connection.Response res = Jsoup.connect(echoUrl).execute().bufferUp();\n+\n+        Document doc = res.parse();\n+        assertTrue(doc.title().contains(\"Environment\"));\n+\n+        Document doc2 = res.parse();\n+        assertTrue(doc2.title().contains(\"Environment\"));\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class) public void bodyAfterParseThrowsValidationError() throws IOException {\n+        Connection.Response res = Jsoup.connect(echoUrl).execute();\n+        Document doc = res.parse();\n+        String body = res.body();\n+    }\n+\n+    @Test public void bodyAndBytesAvailableBeforeParse() throws IOException {\n+        Connection.Response res = Jsoup.connect(echoUrl).execute();\n+        String body = res.body();\n+        assertTrue(body.contains(\"Environment\"));\n+        byte[] bytes = res.bodyAsBytes();\n+        assertTrue(bytes.length > 100);\n+\n+        Document doc = res.parse();\n+        assertTrue(doc.title().contains(\"Environment\"));\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class) public void parseParseThrowsValidates() throws IOException {\n+        Connection.Response res = Jsoup.connect(echoUrl).execute();\n+        Document doc = res.parse();\n+        assertTrue(doc.title().contains(\"Environment\"));\n+        Document doc2 = res.parse(); // should blow up because the response input stream has been drained\n+    }\n+\n+\n+    @Test\n+    public void multiCookieSet() throws IOException {\n+        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302-cookie.pl\");\n+        Connection.Response res = con.execute();\n+\n+        // test cookies set by redirect:\n+        Map<String, String> cookies = res.cookies();\n+        assertEquals(\"asdfg123\", cookies.get(\"token\"));\n+        assertEquals(\"jhy\", cookies.get(\"uid\"));\n+\n+        // send those cookies into the echo URL by map:\n+        Document doc = Jsoup.connect(echoUrl).cookies(cookies).get();\n+        assertEquals(\"token=asdfg123; uid=jhy\", ihVal(\"Cookie\", doc));\n+    }\n }\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n import java.net.Proxy;\n import java.net.URL;\n import java.util.List;\n-import java.util.Map;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n public class UrlConnectTest {\n     private static final String WEBSITE_WITH_INVALID_CERTIFICATE = \"https://certs.cac.washington.edu/CAtest/\";\n     private static final String WEBSITE_WITH_SNI = \"https://jsoup.org/\";\n-    private static String echoURL = \"http://direct.infohound.net/tools/q.pl\";\n     public static String browserUa = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.112 Safari/537.36\";\n \n     @Test\n     }\n \n     @Test\n-    public void multiCookieSet() throws IOException {\n-        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302-cookie.pl\");\n-        Connection.Response res = con.execute();\n-\n-        // test cookies set by redirect:\n-        Map<String, String> cookies = res.cookies();\n-        assertEquals(\"asdfg123\", cookies.get(\"token\"));\n-        assertEquals(\"jhy\", cookies.get(\"uid\"));\n-\n-        // send those cookies into the echo URL by map:\n-        Document doc = Jsoup.connect(echoURL).cookies(cookies).get();\n-        assertEquals(\"token=asdfg123; uid=jhy\", ihVal(\"HTTP_COOKIE\", doc));\n-    }\n-\n-    @Test\n     public void handlesDodgyCharset() throws IOException {\n         // tests that when we get back \"UFT8\", that it is recognised as unsupported, and falls back to default instead\n         String url = \"http://direct.infohound.net/tools/bad-charset.pl\";\n         assertEquals(\"Index of /archiv/TV/A/%23No.Title\", doc.title());\n     }\n \n-    @Test(expected=IllegalArgumentException.class) public void bodyAfterParseThrowsValidationError() throws IOException {\n-        Connection.Response res = Jsoup.connect(echoURL).execute();\n-        Document doc = res.parse();\n-        String body = res.body();\n-    }\n-\n-    @Test public void bodyAndBytesAvailableBeforeParse() throws IOException {\n-        Connection.Response res = Jsoup.connect(echoURL).execute();\n-        String body = res.body();\n-        assertTrue(body.contains(\"Environment\"));\n-        byte[] bytes = res.bodyAsBytes();\n-        assertTrue(bytes.length > 100);\n-\n-        Document doc = res.parse();\n-        assertTrue(doc.title().contains(\"Environment\"));\n-    }\n-\n-    @Test(expected=IllegalArgumentException.class) public void parseParseThrowsValidates() throws IOException {\n-        Connection.Response res = Jsoup.connect(echoURL).execute();\n-        Document doc = res.parse();\n-        assertTrue(doc.title().contains(\"Environment\"));\n-        Document doc2 = res.parse(); // should blow up because the response input stream has been drained\n-    }\n-\n-    @Test public void multipleParsesOkAfterBufferUp() throws IOException {\n-        Connection.Response res = Jsoup.connect(echoURL).execute().bufferUp();\n-\n-        Document doc = res.parse();\n-        assertTrue(doc.title().contains(\"Environment\"));\n-\n-        Document doc2 = res.parse();\n-        assertTrue(doc2.title().contains(\"Environment\"));\n-    }\n-\n     @Test public void handlesSuperDeepPage() throws IOException {\n         // https://github.com/jhy/jsoup/issues/955\n \n         assertEquals(110160, doc.select(\"dd\").size());\n         // those are all <dl><dd> stacked in each other. wonder how that got generated?\n         assertTrue(System.currentTimeMillis() - start < 1000);\n-\n     }\n \n }", "timestamp": 1508640279, "metainfo": ""}