{"sha": "6c4f16f233cdfd7aedef33374609e9aa4ede255c", "log": "Support for HTML output syntax, enabled by default  Introduced the ability to chose between HTML and XML output, and made HTML the default. This means img tags are output as <img>, not <img />. XML is the default when using the XmlTreeBuilder. Control this with the Document.OutputSettings.syntax() method.  Tightened the scope of what characters are escaped in attributes and textnodes, to align with the spec. Also, when using the extended escape entities map, only escape a character if the current output charset does not support it. This produces smaller, more legible HTML, with greated control over the output (by setting charset and escape mode).  Fixes #322 Fixes #373 Fixes #346 Fixes #150", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n \n import org.jsoup.helper.Validate;\n \n+import java.util.Arrays;\n import java.util.Map;\n \n /**\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class Attribute implements Map.Entry<String, String>, Cloneable  {\n+    private static final String[] booleanAttributes = {\n+            \"allowfullscreen\", \"async\", \"autofocus\", \"checked\", \"compact\", \"declare\", \"default\", \"defer\", \"disabled\",\n+            \"formnovalidate\", \"hidden\", \"inert\", \"ismap\", \"itemscope\", \"multiple\", \"muted\", \"nohref\", \"noresize\",\n+            \"noshade\", \"novalidate\", \"nowrap\", \"open\", \"readonly\", \"required\", \"reversed\", \"seamless\", \"selected\",\n+            \"sortable\", \"truespeed\", \"typemustmatch\"\n+    };\n+\n     private String key;\n     private String value;\n \n      @return HTML\n      */\n     public String html() {\n-        return key + \"=\\\"\" + Entities.escape(value, (new Document(\"\")).outputSettings()) + \"\\\"\";\n+        StringBuilder accum = new StringBuilder();\n+        html(accum, (new Document(\"\")).outputSettings());\n+        return accum.toString();\n     }\n     \n     protected void html(StringBuilder accum, Document.OutputSettings out) {\n-        accum\n-            .append(key)\n-            .append(\"=\\\"\")\n-            .append(Entities.escape(value, out))\n-            .append(\"\\\"\");\n+        accum.append(key);\n+        if (!shouldCollapseAttribute(out)) {\n+            accum.append(\"=\\\"\");\n+            Entities.escape(accum, value, out, true, false, false);\n+            accum.append('\"');\n+        }\n     }\n \n     /**\n \n     protected boolean isDataAttribute() {\n         return key.startsWith(Attributes.dataPrefix) && key.length() > Attributes.dataPrefix.length();\n+    }\n+\n+    /**\n+     * Collapsible if it's a boolean attribute and value is empty or same as name\n+     */\n+    protected final boolean shouldCollapseAttribute(Document.OutputSettings out) {\n+        return (\"\".equals(value) || value.equalsIgnoreCase(key))\n+                && out.syntax() == Document.OutputSettings.Syntax.html\n+                && Arrays.binarySearch(booleanAttributes, key) >= 0;\n     }\n \n     @Override\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n      * A Document's output settings control the form of the text() and html() methods.\n      */\n     public static class OutputSettings implements Cloneable {\n+        /**\n+         * The output serialization syntax.\n+         */\n+        public enum Syntax {html, xml}\n+\n         private Entities.EscapeMode escapeMode = Entities.EscapeMode.base;\n         private Charset charset = Charset.forName(\"UTF-8\");\n         private CharsetEncoder charsetEncoder = charset.newEncoder();\n         private boolean prettyPrint = true;\n         private boolean outline = false;\n         private int indentAmount = 1;\n+        private Syntax syntax = Syntax.html;\n \n         public OutputSettings() {}\n \n         }\n \n         /**\n-         * Set the document's escape mode\n+         * Set the document's escape mode, which determines how characters are escaped when the output character set\n+         * does not support a given character:- using either a named or a numbered escape.\n          * @param escapeMode the new escape mode to use\n          * @return the document's output settings, for chaining\n          */\n \n         CharsetEncoder encoder() {\n             return charsetEncoder;\n+        }\n+\n+        /**\n+         * Get the document's current output syntax.\n+         * @return current syntax\n+         */\n+        public Syntax syntax() {\n+            return syntax;\n+        }\n+\n+        /**\n+         * Set the document's output syntax. Either {@code html}, with empty tags and boolean attributes (etc), or\n+         * {@code xml}, with self-closing tags.\n+         * @param syntax serialization syntax\n+         * @return the document's output settings, for chaining\n+         */\n+        public OutputSettings syntax(Syntax syntax) {\n+            this.syntax = syntax;\n+            return this;\n         }\n \n         /**\n--- a/src/main/java/org/jsoup/nodes/DocumentType.java\n+++ b/src/main/java/org/jsoup/nodes/DocumentType.java\n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n         accum.append(\"<!DOCTYPE \").append(attr(\"name\"));\n         if (!StringUtil.isBlank(attr(\"publicId\")))\n-            accum.append(\" PUBLIC \\\"\").append(attr(\"publicId\")).append(\"\\\"\");\n+            accum.append(\" PUBLIC \\\"\").append(attr(\"publicId\")).append('\"');\n         if (!StringUtil.isBlank(attr(\"systemId\")))\n-            accum.append(\" \\\"\").append(attr(\"systemId\")).append(\"\\\"\");\n+            accum.append(\" \\\"\").append(attr(\"systemId\")).append('\"');\n         accum.append('>');\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n                 .append(tagName());\n         attributes.html(accum, out);\n \n-        if (childNodes.isEmpty() && tag.isSelfClosing())\n-            accum.append(\" />\");\n+        // selfclosing includes unknown tags, isEmpty defines tags that are always empty\n+        if (childNodes.isEmpty() && tag.isSelfClosing()) {\n+            if (out.syntax() == Document.OutputSettings.Syntax.html && tag.isEmpty())\n+                accum.append('>');\n+            else\n+                accum.append(\" />\"); // <img> in html, <img /> in xml\n+        }\n         else\n             accum.append(\">\");\n     }\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n package org.jsoup.nodes;\n \n+import org.jsoup.helper.StringUtil;\n import org.jsoup.parser.Parser;\n \n import java.io.IOException;\n  */\n public class Entities {\n     public enum EscapeMode {\n-        /** Restricted entities suitable for XHTML output: lt, gt, amp, apos, and quot only. */\n+        /** Restricted entities suitable for XHTML output: lt, gt, amp, and quot only. */\n         xhtml(xhtmlByVal),\n         /** Default HTML output entities. */\n         base(baseByVal),\n     }\n     \n     static String escape(String string, Document.OutputSettings out) {\n-        return escape(string, out.encoder(), out.escapeMode());\n-    }\n-\n-    static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode) {\n         StringBuilder accum = new StringBuilder(string.length() * 2);\n+        escape(accum, string, out, false, false, false);\n+        return accum.toString();\n+    }\n+\n+    // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations\n+    static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n+                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n+\n+        boolean lastWasWhite = false;\n+        boolean reachedNonWhite = false;\n+        EscapeMode escapeMode = out.escapeMode();\n+        CharsetEncoder encoder = out.encoder();\n         Map<Character, String> map = escapeMode.getMap();\n-\n         final int length = string.length();\n-        for (int offset = 0; offset < length; ) {\n-            final int codePoint = string.codePointAt(offset);\n-\n+\n+        int codePoint;\n+        for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n+            codePoint = string.codePointAt(offset);\n+\n+            if (normaliseWhite) {\n+                if (StringUtil.isWhitespace(codePoint)) {\n+                    if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)\n+                        continue;\n+                    accum.append(' ');\n+                    lastWasWhite = true;\n+                    continue;\n+                } else {\n+                    lastWasWhite = false;\n+                    reachedNonWhite = true;\n+                }\n+            }\n             // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):\n             if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n                 final char c = (char) codePoint;\n-                if (map.containsKey(c))\n-                    accum.append('&').append(map.get(c)).append(';');\n-                else if (encoder.canEncode(c))\n-                    accum.append(c);\n-                else\n-                    accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n+                // html specific and required escapes:\n+                switch (c) {\n+                    case '&':\n+                        accum.append(\"&amp;\");\n+                        break;\n+                    case 0xA0:\n+                        if (escapeMode != EscapeMode.xhtml)\n+                            accum.append(\"&nbsp;\");\n+                        else\n+                            accum.append(c);\n+                        break;\n+                    case '<':\n+                        if (!inAttribute)\n+                            accum.append(\"&lt;\");\n+                        else\n+                            accum.append(c);\n+                        break;\n+                    case '>':\n+                        if (!inAttribute)\n+                            accum.append(\"&gt;\");\n+                        else\n+                            accum.append(c);\n+                        break;\n+                    case '\"':\n+                        if (inAttribute)\n+                            accum.append(\"&quot;\");\n+                        else\n+                            accum.append(c);\n+                        break;\n+                    default:\n+                        if (encoder.canEncode(c))\n+                            accum.append(c);\n+                        else if (map.containsKey(c))\n+                            accum.append('&').append(map.get(c)).append(';');\n+                        else\n+                            accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n+                }\n             } else {\n                 final String c = new String(Character.toChars(codePoint));\n                 if (encoder.canEncode(c))\n                 else\n                     accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n             }\n-\n-            offset += Character.charCount(codePoint);\n-        }\n-\n-        return accum.toString();\n+        }\n     }\n \n     static String unescape(String string) {\n         return Parser.unescapeEntities(string, strict);\n     }\n \n+\n     // xhtml has restricted entities\n     private static final Object[][] xhtmlArray = {\n             {\"quot\", 0x00022},\n             {\"amp\", 0x00026},\n-            {\"apos\", 0x00027},\n             {\"lt\", 0x0003C},\n             {\"gt\", 0x0003E}\n     };\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n         if (out.prettyPrint() && ((siblingIndex() == 0 && parentNode instanceof Element && ((Element) parentNode).tag().formatAsBlock() && !isBlank()) || (out.outline() && siblingNodes().size()>0 && !isBlank()) ))\n             indent(accum, depth, out);\n \n-        String html = Entities.escape(getWholeText(), out);\n-        if (out.prettyPrint() && parent() instanceof Element && !Element.preserveWhitespace((Element) parent()))\n-            StringUtil.appendNormalisedWhitespace(accum, html, false);\n-        else\n-            accum.append(html);\n+        boolean normaliseWhite = out.prettyPrint() && parent() instanceof Element\n+                && !Element.preserveWhitespace((Element) parent());\n+        Entities.escape(accum, getWholeText(), out, false, normaliseWhite, false);\n     }\n \n     void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n             \"var\", \"cite\", \"abbr\", \"time\", \"acronym\", \"mark\", \"ruby\", \"rt\", \"rp\", \"a\", \"img\", \"br\", \"wbr\", \"map\", \"q\",\n             \"sub\", \"sup\", \"bdo\", \"iframe\", \"embed\", \"span\", \"input\", \"select\", \"textarea\", \"label\", \"button\", \"optgroup\",\n             \"option\", \"legend\", \"datalist\", \"keygen\", \"output\", \"progress\", \"meter\", \"area\", \"param\", \"source\", \"track\",\n-            \"summary\", \"command\", \"device\"\n+            \"summary\", \"command\", \"device\", \"area\", \"basefont\", \"bgsound\", \"menuitem\", \"param\", \"source\", \"track\"\n     };\n     private static final String[] emptyTags = {\n             \"meta\", \"link\", \"base\", \"frame\", \"img\", \"br\", \"wbr\", \"embed\", \"hr\", \"input\", \"keygen\", \"col\", \"command\",\n-            \"device\"\n+            \"device\", \"area\", \"basefont\", \"bgsound\", \"menuitem\", \"param\", \"source\", \"track\"\n     };\n     private static final String[] formatAsInlineTags = {\n             \"title\", \"a\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"pre\", \"address\", \"li\", \"th\", \"td\", \"script\", \"style\",\n--- a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n import java.util.List;\n \n /**\n+ * Use the {@code XmlTreeBuilder} when you want to parse XML without any of the HTML DOM rules being applied to the\n+ * document.\n+ * <p>Usage example: {@code Document xmlDoc = Jsoup.parse(html, baseUrl, Parser.xmlParser());}</p>\n+ *\n  * @author Jonathan Hedley\n  */\n public class XmlTreeBuilder extends TreeBuilder {\n     protected void initialiseParse(String input, String baseUri, ParseErrorList errors) {\n         super.initialiseParse(input, baseUri, errors);\n         stack.add(doc); // place the document onto the stack. differs from HtmlTreeBuilder (not on stack)\n+        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);\n     }\n \n     @Override\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n import org.junit.Test;\n import org.junit.Ignore;\n \n+import static org.jsoup.nodes.Document.OutputSettings.Syntax;\n import static org.junit.Assert.*;\n \n /**\n     @Test public void testXhtmlReferences() {\n         Document doc = Jsoup.parse(\"&lt; &gt; &amp; &quot; &apos; &times;\");\n         doc.outputSettings().escapeMode(Entities.EscapeMode.xhtml);\n-        assertEquals(\"&lt; &gt; &amp; &quot; &apos; \u00d7\", doc.body().html());\n+        assertEquals(\"&lt; &gt; &amp; \\\" ' \u00d7\", doc.body().html());\n     }\n \n     @Test public void testNormalisesStructure() {\n         baseUri = doc.baseUri();\n         assertEquals(\"http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp\",location);\n         assertEquals(\"http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp\",baseUri);\n-        \n+    }\n+\n+    @Test public void testHtmlAndXmlSyntax() {\n+        String h = \"<!DOCTYPE html><body><img async checked='checked' src='&<>\\\"'>&lt;&gt;&amp;&quot;<foo />bar\";\n+        Document doc = Jsoup.parse(h);\n+\n+        doc.outputSettings().syntax(Syntax.html);\n+        assertEquals(\"<!DOCTYPE html>\\n\" +\n+                \"<html>\\n\" +\n+                \" <head></head>\\n\" +\n+                \" <body>\\n\" +\n+                \"  <img async checked src=\\\"&amp;<>&quot;\\\">&lt;&gt;&amp;\\\"\\n\" +\n+                \"  <foo />bar\\n\" +\n+                \" </body>\\n\" +\n+                \"</html>\", doc.html());\n+\n+        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);\n+        assertEquals(\"<!DOCTYPE html>\\n\" +\n+                \"<html>\\n\" +\n+                \" <head></head>\\n\" +\n+                \" <body>\\n\" +\n+                \"  <img async=\\\"\\\" checked=\\\"checked\\\" src=\\\"&amp;<>&quot;\\\" />&lt;&gt;&amp;\\\"\\n\" +\n+                \"  <foo />bar\\n\" +\n+                \" </body>\\n\" +\n+                \"</html>\", doc.html());\n+    }\n+\n+    @Test public void htmlParseDefaultsToHtmlOutputSyntax() {\n+        Document doc = Jsoup.parse(\"x\");\n+        assertEquals(Syntax.html, doc.outputSettings().syntax());\n     }\n \n     // Ignored since this test can take awhile to run.\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n \n     @Test public void testOuterHtml() {\n         Document doc = Jsoup.parse(\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\");\n-        assertEquals(\"<html><head></head><body><div title=\\\"Tags &amp;c.\\\"><img src=\\\"foo.png\\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\",\n+        assertEquals(\"<html><head></head><body><div title=\\\"Tags &amp;c.\\\"><img src=\\\"foo.png\\\"><p><!-- comment -->Hello</p><p>there</p></div></body></html>\",\n                 TextUtil.stripNewlines(doc.outerHtml()));\n     }\n \n     @Test public void parentlessToString() {\n         Document doc = Jsoup.parse(\"<img src='foo'>\");\n         Element img = doc.select(\"img\").first();\n-        assertEquals(\"<img src=\\\"foo\\\" />\", img.toString());\n+        assertEquals(\"<img src=\\\"foo\\\">\", img.toString());\n \n         img.remove(); // lost its parent\n-        assertEquals(\"<img src=\\\"foo\\\" />\", img.toString());\n+        assertEquals(\"<img src=\\\"foo\\\">\", img.toString());\n     }\n \n     @Test public void testClone() {\n--- a/src/test/java/org/jsoup/nodes/EntitiesTest.java\n+++ b/src/test/java/org/jsoup/nodes/EntitiesTest.java\n import org.jsoup.Jsoup;\n import org.junit.Test;\n \n+import static org.jsoup.nodes.Document.OutputSettings;\n+import static org.jsoup.nodes.Entities.EscapeMode.*;\n import static org.junit.Assert.*;\n \n import java.nio.charset.Charset;\n public class EntitiesTest {\n     @Test public void escape() {\n         String text = \"Hello &<> \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9\";\n-        String escapedAscii = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.base);\n-        String escapedAsciiFull = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.extended);\n-        String escapedAsciiXhtml = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.xhtml);\n-        String escapedUtfFull = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.base);\n-        String escapedUtfMin = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.xhtml);\n+        String escapedAscii = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(base));\n+        String escapedAsciiFull = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(extended));\n+        String escapedAsciiXhtml = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(xhtml));\n+        String escapedUtfFull = Entities.escape(text, new OutputSettings().charset(\"UTF-8\").escapeMode(base));\n+        String escapedUtfMin = Entities.escape(text, new OutputSettings().charset(\"UTF-8\").escapeMode(xhtml));\n \n         assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy;\", escapedAscii);\n         assertEquals(\"Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy;\", escapedAsciiFull);\n         assertEquals(\"Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9;\", escapedAsciiXhtml);\n-        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; \u03c0 \u65b0 there &frac34; &copy;\", escapedUtfFull);\n+        assertEquals(\"Hello &amp;&lt;&gt; \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9\", escapedUtfFull);\n         assertEquals(\"Hello &amp;&lt;&gt; \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9\", escapedUtfMin);\n         // odd that it's defined as aring in base but angst in full\n \n \n     @Test public void escapeSupplementaryCharacter(){\n         String text = new String(Character.toChars(135361));\n-        String escapedAscii = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.base);\n+        String escapedAscii = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(base));\n         assertEquals(\"&#x210c1;\", escapedAscii);\n-        String escapedUtf = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.base);\n+        String escapedUtf = Entities.escape(text, new OutputSettings().charset(\"UTF-8\").escapeMode(base));\n         assertEquals(text, escapedUtf);\n     }\n \n     \n     @Test public void caseSensitive() {\n         String unescaped = \"\u00dc \u00fc & &\";\n-        assertEquals(\"&Uuml; &uuml; &amp; &amp;\", Entities.escape(unescaped, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.extended));\n+        assertEquals(\"&Uuml; &uuml; &amp; &amp;\",\n+                Entities.escape(unescaped, new OutputSettings().charset(\"ascii\").escapeMode(extended)));\n         \n         String escaped = \"&Uuml; &uuml; &amp; &AMP\";\n         assertEquals(\"\u00dc \u00fc & &\", Entities.unescape(escaped));\n     @Test public void letterDigitEntities() {\n         String html = \"<p>&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;</p>\";\n         Document doc = Jsoup.parse(html);\n+        doc.outputSettings().charset(\"ascii\");\n         Element p = doc.select(\"p\").first();\n         assertEquals(\"&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;\", p.html());\n         assertEquals(\"\u00b9\u00b2\u00b3\u00bc\u00bd\u00be\", p.text());\n+        doc.outputSettings().charset(\"UTF-8\");\n+        assertEquals(\"\u00b9\u00b2\u00b3\u00bc\u00bd\u00be\", p.html());\n     }\n \n     @Test public void noSpuriousDecodes() {\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n     @Test public void handlesWhatWgExpensesTableExample() {\n         // http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0\n         Document doc = Jsoup.parse(\"<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>\");\n-        assertEquals(\"<table> <colgroup> <col /> </colgroup><colgroup> <col /> <col /> <col /> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\\\"rowgroup\\\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr><tr> <th scope=\\\"row\\\"> Percentage of net sales </th><td> 3.4% </td><td> 3.3% </td><td> 3.7% </td></tr></tbody><tbody> <tr> <th scope=\\\"rowgroup\\\"> Selling, general, and administrative </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433 </td></tr><tr> <th scope=\\\"row\\\"> Percentage of net sales </th><td> 11.6% </td><td> 12.3% </td><td> 12.6% </td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n+        assertEquals(\"<table> <colgroup> <col> </colgroup><colgroup> <col> <col> <col> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\\\"rowgroup\\\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr><tr> <th scope=\\\"row\\\"> Percentage of net sales </th><td> 3.4% </td><td> 3.3% </td><td> 3.7% </td></tr></tbody><tbody> <tr> <th scope=\\\"rowgroup\\\"> Selling, general, and administrative </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433 </td></tr><tr> <th scope=\\\"row\\\"> Percentage of net sales </th><td> 11.6% </td><td> 12.3% </td><td> 12.6% </td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n     }\n \n     @Test public void handlesTbodyTable() {\n         // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.\n         String h = \"<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two\";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"<div id=\\\"1\\\"></div><script src=\\\"/foo\\\"></script><div id=\\\"2\\\"><img /><img /></div><a id=\\\"3\\\"></a><i></i><foo /><foo>One</foo> <hr /> hr text <hr /> hr text two\", TextUtil.stripNewlines(doc.body().html()));\n+        assertEquals(\"<div id=\\\"1\\\"></div><script src=\\\"/foo\\\"></script><div id=\\\"2\\\"><img><img></div><a id=\\\"3\\\"></a><i></i><foo /><foo>One</foo> <hr> hr text <hr> hr text two\", TextUtil.stripNewlines(doc.body().html()));\n     }\n \n     @Test public void handlesSolidusAtAttributeEnd() {\n     @Test public void handlesFrames() {\n         String h = \"<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>\";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"<html><head><script></script><noscript></noscript></head><frameset><frame src=\\\"foo\\\" /><frame src=\\\"foo\\\" /></frameset></html>\",\n+        assertEquals(\"<html><head><script></script><noscript></noscript></head><frameset><frame src=\\\"foo\\\"><frame src=\\\"foo\\\"></frameset></html>\",\n                 TextUtil.stripNewlines(doc.html()));\n         // no body auto vivification\n     }\n     @Test public void ignoresContentAfterFrameset() {\n         String h = \"<html><head><title>One</title></head><frameset><frame /><frame /></frameset><table></table></html>\";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"<html><head><title>One</title></head><frameset><frame /><frame /></frameset></html>\", TextUtil.stripNewlines(doc.html()));\n+        assertEquals(\"<html><head><title>One</title></head><frameset><frame><frame></frameset></html>\", TextUtil.stripNewlines(doc.html()));\n         // no body, no table. No crash!\n     }\n \n     @Test public void normalisesDocument() {\n         String h = \"<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven \";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"<!DOCTYPE html><html><head></head><body>OneTwoThree<link />FourFive Six Seven </body></html>\",\n+        assertEquals(\"<!DOCTYPE html><html><head></head><body>OneTwoThree<link>FourFive Six Seven </body></html>\",\n                 TextUtil.stripNewlines(doc.html()));\n     }\n \n     @Test public void testNoImagesInNoScriptInHead() {\n         // jsoup used to allow, but against spec if parsing with noscript\n         Document doc = Jsoup.parse(\"<html><head><noscript><img src='foo'></noscript></head><body><p>Hello</p></body></html>\");\n-        assertEquals(\"<html><head><noscript></noscript></head><body><img src=\\\"foo\\\" /><p>Hello</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n+        assertEquals(\"<html><head><noscript></noscript></head><body><img src=\\\"foo\\\"><p>Hello</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n     }\n \n     @Test public void testAFlowContents() {\n         // extended entities need a ; at the end to match, base does not\n         String html = \"&amp &quot &reg &icy &hopf &icy; &hopf;\";\n         Document doc = Jsoup.parse(html);\n-        doc.outputSettings().escapeMode(Entities.EscapeMode.extended); // modifies output only to clarify test\n-        assertEquals(StringUtil.normaliseWhitespace(\"&amp; &quot; &reg; &amp;icy &amp;hopf &icy; &hopf;\"), doc.body().html());\n+        doc.outputSettings().escapeMode(Entities.EscapeMode.extended).charset(\"ascii\"); // modifies output only to clarify test\n+        assertEquals(\"&amp; \\\" &reg; &amp;icy &amp;hopf &icy; &hopf;\", doc.body().html());\n     }\n \n     @Test public void handlesXmlDeclarationAsBogusComment() {\n         assertEquals(\"1\", controls.get(0).id());\n         assertEquals(\"2\", controls.get(1).id());\n \n-        assertEquals(\"<table><tbody><tr><form></form><input type=\\\"hidden\\\" id=\\\"1\\\" /><td><input type=\\\"text\\\" id=\\\"2\\\" /></td></tr><tr></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n+        assertEquals(\"<table><tbody><tr><form></form><input type=\\\"hidden\\\" id=\\\"1\\\"><td><input type=\\\"text\\\" id=\\\"2\\\"></td></tr><tr></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n     }\n \n     @Test public void handlesInputInTable() {\n         // image to img, unless in a svg. old html cruft.\n         String h = \"<body><image><svg><image /></svg></body>\";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"<img />\\n<svg>\\n <image />\\n</svg>\", doc.body().html());\n+        assertEquals(\"<img>\\n<svg>\\n <image />\\n</svg>\", doc.body().html());\n     }\n }\n--- a/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java\n+++ b/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java\n import java.net.URISyntaxException;\n import java.util.List;\n \n+import static org.jsoup.nodes.Document.OutputSettings.Syntax;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotSame;\n \n \n     @Test\n     public void testDoesNotForceSelfClosingKnownTags() {\n-        // html will force \"<br>one</br>\" to \"<br />One<br />\". XML should be stay \"<br>one</br> -- don't recognise tag.\n+        // html will force \"<br>one</br>\" to logically \"<br />One<br />\". XML should be stay \"<br>one</br> -- don't recognise tag.\n         Document htmlDoc = Jsoup.parse(\"<br>one</br>\");\n-        assertEquals(\"<br />one\\n<br />\", htmlDoc.body().html());\n+        assertEquals(\"<br>one\\n<br>\", htmlDoc.body().html());\n \n         Document xmlDoc = Jsoup.parse(\"<br>one</br>\", \"\", Parser.xmlParser());\n         assertEquals(\"<br>one</br>\", xmlDoc.html());\n         assertEquals(\"one\", nodes.get(0).nodeName());\n         assertEquals(\"Two\", ((TextNode)nodes.get(1)).text());\n     }\n+\n+    @Test public void xmlParseDefaultsToHtmlOutputSyntax() {\n+        Document doc = Jsoup.parse(\"x\", \"\", Parser.xmlParser());\n+        assertEquals(Syntax.xml, doc.outputSettings().syntax());\n+    }\n }\n--- a/src/test/java/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/safety/CleanerTest.java\n     @Test public void basicWithImagesTest() {\n         String h = \"<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages());\n-        assertEquals(\"<p><img src=\\\"http://example.com/\\\" alt=\\\"Image\\\" /></p><p><img /></p>\", TextUtil.stripNewlines(cleanHtml));\n+        assertEquals(\"<p><img src=\\\"http://example.com/\\\" alt=\\\"Image\\\"></p><p><img></p>\", TextUtil.stripNewlines(cleanHtml));\n     }\n     \n     @Test public void testRelaxed() {\n     @Test public void testDropImageScript() {\n         String h = \"<IMG SRC=\\\"javascript:alert('XSS')\\\">\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n-        assertEquals(\"<img />\", cleanHtml);\n+        assertEquals(\"<img>\", cleanHtml);\n     }\n     \n     @Test public void testCleanJavascriptHref() {\n     @Test public void testHandlesEmptyAttributes() {\n         String h = \"<img alt=\\\"\\\" src= unknown=''>\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages());\n-        assertEquals(\"<img alt=\\\"\\\" />\", cleanHtml);\n+        assertEquals(\"<img alt=\\\"\\\">\", cleanHtml);\n     }\n \n     @Test public void testIsValid() {\n     @Test public void resolvesRelativeLinks() {\n         String html = \"<a href='/foo'>Link</a><img src='/bar'>\";\n         String clean = Jsoup.clean(html, \"http://example.com/\", Whitelist.basicWithImages());\n-        assertEquals(\"<a href=\\\"http://example.com/foo\\\" rel=\\\"nofollow\\\">Link</a>\\n<img src=\\\"http://example.com/bar\\\" />\", clean);\n+        assertEquals(\"<a href=\\\"http://example.com/foo\\\" rel=\\\"nofollow\\\">Link</a>\\n<img src=\\\"http://example.com/bar\\\">\", clean);\n     }\n \n     @Test public void preservesRelativeLinksIfConfigured() {\n         String html = \"<a href='/foo'>Link</a><img src='/bar'> <img src='javascript:alert()'>\";\n         String clean = Jsoup.clean(html, \"http://example.com/\", Whitelist.basicWithImages().preserveRelativeLinks(true));\n-        assertEquals(\"<a href=\\\"/foo\\\" rel=\\\"nofollow\\\">Link</a>\\n<img src=\\\"/bar\\\" /> \\n<img />\", clean);\n+        assertEquals(\"<a href=\\\"/foo\\\" rel=\\\"nofollow\\\">Link</a>\\n<img src=\\\"/bar\\\"> \\n<img>\", clean);\n     }\n     \n     @Test public void dropsUnresolvableRelativeLinks() {\n     @Test public void handlesCustomProtocols() {\n         String html = \"<img src='cid:12345' /> <img src='data:gzzt' />\";\n         String dropped = Jsoup.clean(html, Whitelist.basicWithImages());\n-        assertEquals(\"<img /> \\n<img />\", dropped);\n+        assertEquals(\"<img> \\n<img>\", dropped);\n \n         String preserved = Jsoup.clean(html, Whitelist.basicWithImages().addProtocols(\"img\", \"src\", \"cid\", \"data\"));\n-        assertEquals(\"<img src=\\\"cid:12345\\\" /> \\n<img src=\\\"data:gzzt\\\" />\", preserved);\n+        assertEquals(\"<img src=\\\"cid:12345\\\"> \\n<img src=\\\"data:gzzt\\\">\", preserved);\n     }\n \n     @Test public void handlesAllPseudoTag() {\n         Document.OutputSettings os = new Document.OutputSettings();\n         os.prettyPrint(false);\n         os.escapeMode(Entities.EscapeMode.extended);\n+        os.charset(\"ascii\");\n \n         String html = \"<div><p>&bernou;</p></div>\";\n         String customOut = Jsoup.clean(html, \"http://foo.com/\", Whitelist.relaxed(), os);", "timestamp": 1384744268, "metainfo": ""}