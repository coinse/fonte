{"sha": "8c07dc18a69efe2ea811d4c1ffe630b56e2d8629", "log": "Added .before(html) and .after(html) methods to Element and Elements, to insert sibling HTML", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n     \n     /**\n-     * Add inner HTML to this element. The supplied HTML will be parsed, and each node prepended to the start of the children.\n+     * Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children.\n      * @param html HTML to add inside this element, before the existing HTML\n      * @return this element\n      * @see #html(String)\n         Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n         addChildren(0, fragment.childNodesAsArray());\n         return this;\n+    }\n+    \n+    /**\n+     * Insert the specified HTML into the DOM before this element (i.e. as a preceeding sibling).\n+     * @param html HTML to add before this element\n+     * @return this element, for chaining\n+     * @see #after(String)\n+     */\n+    public Element before(String html) {\n+        addSiblingHtml(siblingIndex(), html);\n+        return this;\n+    }\n+    \n+    /**\n+     * Insert the specified HTML into the DOM after this element (i.e. as a following sibling).\n+     * @param html HTML to add after this element\n+     * @return this element, for chaining\n+     * @see #before(String)\n+     */\n+    public Element after(String html) {\n+        addSiblingHtml(siblingIndex()+1, html);\n+        return this;\n+    }\n+    \n+    private void addSiblingHtml(int index, String html) {\n+        Validate.notNull(html);\n+        Validate.notNull(parentNode);\n+        \n+        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n+        parentNode.addChildren(index, fragment.childNodesAsArray());\n     }\n        \n     /**\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n         }\n         return this;\n     }\n+    \n+    /**\n+     * Insert the supplied HTML before each matched element's outer HTML.\n+     * @param html HTML to insert before each element\n+     * @return this, for chaining\n+     * @see Element#before(String)\n+     */\n+    public Elements before(String html) {\n+        for (Element element : contents) {\n+            element.before(html);\n+        }\n+        return this;\n+    }\n+    \n+    /**\n+     * Insert the supplied HTML after each matched element's outer HTML.\n+     * @param html HTML to insert after each element\n+     * @return this, for chaining\n+     * @see Element#after(String)\n+     */\n+    public Elements after(String html) {\n+        for (Element element : contents) {\n+            element.after(html);\n+        }\n+        return this;\n+    }\n \n     /**\n      Wrap the supplied HTML around each matched elements. For example, with HTML\n      {@code <p><b>This</b> is <b>Jsoup</b></p>},\n      <code>doc.select(\"b\").wrap(\"&lt;i&gt;&lt;/i&gt;\");</code>\n      becomes {@code <p><i><b>This</b></i> is <i><b>jsoup</b></i></p>}\n-     @param html HTML to wrap around each element, e.g. {@code <div class=\"head\"></div>}. Can be arbitralily deep.\n+     @param html HTML to wrap around each element, e.g. {@code <div class=\"head\"></div>}. Can be arbitrarily deep.\n      @return this (for chaining)\n      @see Element#wrap\n      */\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n \n         assertEquals(ret, p);\n     }\n+    \n+    @Test public void before() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello</p><p>There</p></div>\");\n+        Element p1 = doc.select(\"p\").first();\n+        p1.before(\"<div>one</div><div>two</div>\");\n+        assertEquals(\"<div><div>one</div><div>two</div><p>Hello</p><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n+        \n+        doc.select(\"p\").last().before(\"<p>Three</p><!-- four -->\");\n+        assertEquals(\"<div><div>one</div><div>two</div><p>Hello</p><p>Three</p><!-- four --><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n+    }\n+    \n+    @Test public void after() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello</p><p>There</p></div>\");\n+        Element p1 = doc.select(\"p\").first();\n+        p1.after(\"<div>one</div><div>two</div>\");\n+        assertEquals(\"<div><p>Hello</p><div>one</div><div>two</div><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n+        \n+        doc.select(\"p\").last().after(\"<p>Three</p><!-- four -->\");\n+        assertEquals(\"<div><p>Hello</p><div>one</div><div>two</div><p>There</p><p>Three</p><!-- four --></div>\", TextUtil.stripNewlines(doc.body().html()));\n+    }\n \n     @Test public void testWrapWithRemainder() {\n         Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\");\n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n         assertEquals(\"three\", els.last().val());\n         assertEquals(\"<textarea>three</textarea>\", els.last().outerHtml());\n     }\n+    \n+    @Test public void before() {\n+        Document doc = Jsoup.parse(\"<p>This <a>is</a> <a>jsoup</a>.</p>\");\n+        doc.select(\"a\").before(\"<span>foo</span>\");\n+        assertEquals(\"<p>This <span>foo</span><a>is</a> <span>foo</span><a>jsoup</a>.</p>\", doc.body().html());\n+    }\n+    \n+    @Test public void after() {\n+        Document doc = Jsoup.parse(\"<p>This <a>is</a> <a>jsoup</a>.</p>\");\n+        doc.select(\"a\").after(\"<span>foo</span>\");\n+        assertEquals(\"<p>This <a>is</a><span>foo</span> <a>jsoup</a><span>foo</span>.</p>\", doc.body().html());\n+    }\n \n     @Test public void wrap() {\n         String h = \"<p><b>This</b> is <b>jsoup</b></p>\";", "timestamp": 1309605113, "metainfo": ""}