{"sha": "d3f02400eca1c5cbf84212c46cebcff511536655", "log": "Treat nbsp chars are spaces when normalizing text  Still output &nbsp; in output HTML, but text provides plain space.", "commit": "\n--- a/src/main/java/org/jsoup/helper/StringUtil.java\n+++ b/src/main/java/org/jsoup/helper/StringUtil.java\n     }\n \n     /**\n-     * Tests if a code point is \"whitespace\" as defined in the HTML spec.\n+     * Tests if a code point is \"whitespace\" as defined in the HTML spec. Used for output HTML.\n      * @param c code point to test\n      * @return true if code point is whitespace, false otherwise\n+     * @see #isActuallyWhitespace(int)\n      */\n     public static boolean isWhitespace(int c){\n         return c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r';\n+    }\n+\n+    /**\n+     * Tests if a code point is \"whitespace\" as defined by what it looks like. Used for Element.text etc.\n+     * @param c code point to test\n+     * @return true if code point is whitespace, false otherwise\n+     */\n+    public static boolean isActuallyWhitespace(int c){\n+        return c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r' || c == 160;\n+        // 160 is &nbsp; (non-breaking space). Not in the spec but expected.\n     }\n \n     /**\n         int c;\n         for (int i = 0; i < len; i+= Character.charCount(c)) {\n             c = string.codePointAt(i);\n-            if (isWhitespace(c)) {\n+            if (isActuallyWhitespace(c)) {\n                 if ((stripLeading && !reachedNonWhite) || lastWasWhite)\n                     continue;\n                 accum.append(' ');\n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n         } while (depth > 0);\n         final String out = (end >= 0) ? queue.substring(start, end) : \"\";\n         if (depth > 0) {// ran out of queue before seeing enough )\n-            Validate.fail(\"Did not find balanced maker at \" + out);\n+            Validate.fail(\"Did not find balanced marker at '\" + out + \"'\");\n         }\n         return out;\n     }\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(\"<div class=\\\"a\\\"></div>\\n<div class=\\\"b\\\">\\n <p>Two</p>\\n</div>\", parentDoc.body().html());\n         assertEquals(\"\", childDoc.body().html()); // got moved out\n \t}\n+\n+\t@Test public void testNormalizesNbspInText() {\n+        String escaped = \"You can't always get what you&nbsp;want.\";\n+        String withNbsp = \"You can't always get what you\u00a0want.\"; // there is an nbsp char in there\n+        Document doc = Jsoup.parse(\"<p>\" + escaped);\n+        Element p = doc.select(\"p\").first();\n+        assertEquals(\"You can't always get what you want.\", p.text()); // text is normalized\n+\n+        assertEquals(\"<p>\" + escaped + \"</p>\", p.outerHtml()); // html / whole text keeps &nbsp;\n+        assertEquals(withNbsp, p.textNodes().get(0).getWholeText());\n+        assertEquals(160, withNbsp.charAt(29));\n+\n+        Element matched = doc.select(\"p:contains(get what you want)\").first();\n+        assertEquals(\"p\", matched.nodeName());\n+        assertTrue(matched.is(\":containsOwn(get what you want)\"));\n+    }\n }", "timestamp": 1498892219, "metainfo": ""}