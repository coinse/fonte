{"sha": "35b592536592219f1b7731641726f0c7585039a5", "log": "Multiple headers should be comma joined", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n         T method(Method method);\n \n         /**\n-         * Get the value of a header. If there is more than one header with the same name, returns the first header.\n+         * Get the value of a header. If there is more than one header value with the same name, the headers are returned\n+         * comma seperated, per <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\">rfc2616-sec4</a>.\n          * <p>\n          * Header names are case insensitive.\n          * </p>\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n         public String header(String name) {\n             Validate.notNull(name, \"Header name must not be null\");\n             List<String> vals = getHeadersCaseInsensitive(name);\n-            String val = null;\n-            if (vals.size() > 0)\n-                val = vals.get(0);\n-\n-            if (val != null) {\n-                // headers should be ISO8859 - but values are often actually UTF-8. Test if it looks like UTF8 and convert if so\n-                val = fixHeaderEncoding(val);\n-            }\n-            return val;\n+            if (vals.size() > 0) {\n+                // https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n+                return StringUtil.join(vals, \", \");\n+            }\n+\n+            return null;\n         }\n \n         @Override\n         public T addHeader(String name, String value) {\n             Validate.notEmpty(name);\n-            Validate.notNull(value);\n+            value = value == null ? \"\" : value;\n \n             List<String> values = headers(name);\n             if (values.isEmpty()) {\n                 values = new ArrayList<>();\n                 headers.put(name, values);\n             }\n-            values.add(value);\n+            values.add(fixHeaderEncoding(value));\n \n             return (T) this;\n         }\n \n         public T header(String name, String value) {\n             Validate.notEmpty(name, \"Header name must not be empty\");\n-            Validate.notNull(value, \"Header value must not be null\");\n             removeHeader(name); // ensures we don't get an \"accept-encoding\" and a \"Accept-Encoding\"\n             addHeader(name, value);\n             return (T) this;\n                 conn.setDoOutput(true);\n             if (req.cookies().size() > 0)\n                 conn.addRequestProperty(\"Cookie\", getRequestCookieString(req));\n-            for (Map.Entry<String, String> header : req.headers().entrySet()) {\n-                conn.addRequestProperty(header.getKey(), header.getValue());\n+            for (Map.Entry<String, List<String>> header : req.multiHeaders().entrySet()) {\n+                for (String value : header.getValue()) {\n+                    conn.addRequestProperty(header.getKey(), value);\n+                }\n             }\n             return conn;\n         }\n                         if (cookieName.length() > 0)\n                             cookie(cookieName, cookieVal);\n                     }\n-                } else { // combine same header names with comma: http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n-                    if (values.size() == 1)\n-                        header(name, values.get(0));\n-                    else if (values.size() > 1) {\n-                        StringBuilder accum = StringUtil.stringBuilder();\n-                        for (int i = 0; i < values.size(); i++) {\n-                            final String val = values.get(i);\n-                            if (i != 0)\n-                                accum.append(\", \");\n-                            accum.append(val);\n-                        }\n-                        header(name, accum.toString());\n-                    }\n+                }\n+                for (String value : values) {\n+                    addHeader(name, value);\n                 }\n             }\n         }\n--- a/src/test/java/org/jsoup/helper/HttpConnectionTest.java\n+++ b/src/test/java/org/jsoup/helper/HttpConnectionTest.java\n \n         assertTrue(req.hasHeader(\"Accept\"));\n         assertTrue(req.hasHeader(\"ACCEpt\"));\n-        assertEquals(\"Something\", req.header(\"accept\"));\n+        assertEquals(\"Something, Everything\", req.header(\"accept\"));\n         assertTrue(req.hasHeader(\"fOO\"));\n         assertEquals(\"Bar\", req.header(\"foo\"));\n \n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n import java.net.MalformedURLException;\n import java.net.Proxy;\n import java.net.URL;\n+import java.util.List;\n import java.util.Map;\n \n import static org.junit.Assert.assertEquals;\n         Connection con = Jsoup.connect(url);\n         con.get();\n \n-        assertEquals(\"text/html\", con.response().header(\"Content-Type\"));\n-        assertEquals(\"no-cache, no-store\", con.response().header(\"Cache-Control\"));\n+        Connection.Response res = con.response();\n+        assertEquals(\"text/html\", res.header(\"Content-Type\"));\n+        assertEquals(\"no-cache, no-store\", res.header(\"Cache-Control\"));\n+\n+        List<String> header = res.headers(\"Cache-Control\");\n+        assertEquals(2, header.size());\n+        assertEquals(\"no-cache\", header.get(0));\n+        assertEquals(\"no-store\", header.get(1));\n     }\n \n     @Test", "timestamp": 1507528910, "metainfo": ""}