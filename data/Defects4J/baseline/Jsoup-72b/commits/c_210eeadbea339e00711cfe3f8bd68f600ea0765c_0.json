{"sha": "210eeadbea339e00711cfe3f8bd68f600ea0765c", "log": "Implement Elements.empty() and Elements.remove().", "commit": "\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n     }\n     \n     /**\n-     * Get the combined inner HTML of all matched elements.\n-     * @return string of all element's inner HTML.\n+     * Get the combined outer HTML of all matched elements.\n+     * @return string of all element's outer HTML.\n      * @see #text()\n      * @see #html()\n      */\n         }\n         return sb.toString();\n     }\n-    \n-    /**\n-     * Set each matched element's inner HTML.\n+\n+    /**\n+     * Get the combined outer HTML of all matched elements. Alias of {@link #outerHtml()}.\n+     * @return string of all element's outer HTML.\n+     * @see #text()\n+     * @see #html()\n+     */\n+    public String toString() {\n+        return outerHtml();\n+    }\n+    \n+    /**\n+     * Set the inner HTML of each matched element.\n      * @param html HTML to parse and set into each matched element.\n      * @return this, for chaining\n      * @see Element#html(String)\n         }\n         return this;\n     }\n+\n+    /**\n+     * Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each\n+     * element to nothing.\n+     * <p>\n+     * E.g. HTML: {@code <div><p>Hello <b>there</b></p> <p>now</p></div>}<br>\n+     * <code>doc.select(\"p\").empty();</code><br>\n+     * HTML = {@code <div><p></p> <p></p></div>}\n+     * @return this, for chaining\n+     * @see Element#empty()\n+     * @see #remove()\n+     */\n+    public Elements empty() {\n+        for (Element element : contents) {\n+            element.empty();\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Remove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing.\n+     * <p>\n+     * E.g. HTML: {@code <div><p>Hello</p> <p>there</p> <img /></div>}<br>\n+     * <code>doc.select(\"p\").remove();</code><br>\n+     * HTML = {@code <div> <img /></div>}\n+     * <p>\n+     * Note that this method should not be used to clean user-submitted HTML; rather, use {@link org.jsoup.safety.Cleaner} to clean HTML.\n+     * @return this, for chaining\n+     * @see Element#empty()\n+     * @see #empty()\n+     */\n+    public Elements remove() {\n+        for (Element element : contents) {\n+            element.remove();\n+        }\n+        return this;\n+    }\n     \n     // filters\n     \n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n         doc.select(\"b\").wrap(\"<i></i>\");\n         assertEquals(\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\", doc.body().html());\n     }\n+\n+    @Test public void empty() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello <b>there</b></p> <p>now!</p></div>\");\n+        doc.outputSettings().prettyPrint(false);\n+\n+        doc.select(\"p\").empty();\n+        assertEquals(\"<div><p></p> <p></p></div>\", doc.body().html());\n+    }\n+\n+    @Test public void remove() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello <b>there</b></p> jsoup <p>now!</p></div>\");\n+        doc.outputSettings().prettyPrint(false);\n+        \n+        doc.select(\"p\").remove();\n+        assertEquals(\"<div> jsoup </div>\", doc.body().html());\n+    }\n     \n     @Test public void eq() {\n         String h = \"<p>Hello<p>there<p>world\";", "timestamp": 1309605120, "metainfo": ""}