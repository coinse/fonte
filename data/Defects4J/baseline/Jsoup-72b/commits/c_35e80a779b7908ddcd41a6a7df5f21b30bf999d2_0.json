{"sha": "35e80a779b7908ddcd41a6a7df5f21b30bf999d2", "log": "Added bodyStream method", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n import org.jsoup.nodes.Document;\n import org.jsoup.parser.Parser;\n \n+import java.io.BufferedInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.Proxy;\n         /**\n          * Read the body of the response into a local buffer, so that {@link #parse()} may be called repeatedly on the\n          * same connection response (otherwise, once the response is read, its InputStream will have been drained and\n-         * may not be re-read). Calling {@link #body() } or {@link #bodyAsBytes()} has the same effect. If the requ\n+         * may not be re-read). Calling {@link #body() } or {@link #bodyAsBytes()} has the same effect.\n          * @return this response, for chaining\n          */\n         Response bufferUp();\n+\n+        /**\n+         * Get the body of the response as a (buffered) InputStream. You should close the input stream when you're done with it.\n+         * Other body methods (like bufferUp, body, parse, etc) will not work in conjunction with this method.\n+         * <p>This method is useful for writing large responses to disk, without buffering them completely into memory first.</p>\n+         * @return the response body input stream\n+         */\n+        BufferedInputStream bodyStream();\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n         while (true) {\n             read = inStream.read(buffer);\n             if (read == -1) break;\n-            if (capped) {\n+            if (capped) { // todo - why not using ConstrainedInputStream?\n                 if (read >= remaining) {\n                     outStream.write(buffer, 0, remaining);\n                     break;\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n import javax.net.ssl.SSLSocketFactory;\n import javax.net.ssl.TrustManager;\n import javax.net.ssl.X509TrustManager;\n+import java.io.BufferedInputStream;\n import java.io.BufferedWriter;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n             return this;\n         }\n \n+        @Override\n+        public BufferedInputStream bodyStream() {\n+            Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\");\n+            Validate.isFalse(inputStreamRead, \"Request has already been read\");\n+            inputStreamRead = true;\n+            return new ConstrainableInputStream(bodyStream, DataUtil.bufferSize, req.maxBodySize());\n+        }\n+\n         // set up connection defaults, and details from request\n         private static HttpURLConnection createConnection(Connection.Request req) throws IOException {\n             final HttpURLConnection conn = (HttpURLConnection) (", "timestamp": 1500443857, "metainfo": ""}