{"sha": "45a9de55c2c2a99b3ebf9410bdcec2edd97518d2", "log": "Merge pull request #817 from lexspoon/select-with-options  Minor fix for the parsing of non-empty selects", "commit": "\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n                     if (name.equals(\"html\"))\n                         return tb.process(start, InBody);\n                     else if (name.equals(\"option\")) {\n-                        tb.processEndTag(\"option\");\n+                        if (tb.currentElement().nodeName().equals(\"option\"))\n+                            tb.processEndTag(\"option\");\n                         tb.insert(start);\n                     } else if (name.equals(\"optgroup\")) {\n                         if (tb.currentElement().nodeName().equals(\"option\"))\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         assertEquals(2, options.size());\n         assertEquals(\"One\", options.first().text());\n         assertEquals(\"TwoThree\", options.last().text());\n+    }\n+\n+    @Test public void testSelectWithOption() {\n+        Parser parser = Parser.htmlParser();\n+        parser.setTrackErrors(10);\n+        Document document = parser.parseInput(\"<select><option>Option 1</option></select>\", \"http://jsoup.org\");\n+        assertEquals(0, parser.getErrors().size());\n     }\n \n     @Test public void testSpaceAfterTag() {\n--- /dev/null\n+++ b/src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java\n+package org.jsoup.helper;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+/**\n+ * Implementation of ArrayList that watches out for changes to the contents.\n+ */\n+public abstract class ChangeNotifyingArrayList<E> extends ArrayList<E> {\n+    public ChangeNotifyingArrayList(int initialCapacity) {\n+        super(initialCapacity);\n+    }\n+\n+    public abstract void onContentsChanged();\n+\n+    @Override\n+    public E set(int index, E element) {\n+        onContentsChanged();\n+        return super.set(index, element);\n+    }\n+\n+    @Override\n+    public boolean add(E e) {\n+        onContentsChanged();\n+        return super.add(e);\n+    }\n+\n+    @Override\n+    public void add(int index, E element) {\n+        onContentsChanged();\n+        super.add(index, element);\n+    }\n+\n+    @Override\n+    public E remove(int index) {\n+        onContentsChanged();\n+        return super.remove(index);\n+    }\n+\n+    @Override\n+    public boolean remove(Object o) {\n+        onContentsChanged();\n+        return super.remove(o);\n+    }\n+\n+    @Override\n+    public void clear() {\n+        onContentsChanged();\n+        super.clear();\n+    }\n+\n+    @Override\n+    public boolean addAll(Collection<? extends E> c) {\n+        onContentsChanged();\n+        return super.addAll(c);\n+    }\n+\n+    @Override\n+    public boolean addAll(int index, Collection<? extends E> c) {\n+        onContentsChanged();\n+        return super.addAll(index, c);\n+    }\n+\n+    @Override\n+    protected void removeRange(int fromIndex, int toIndex) {\n+        onContentsChanged();\n+        super.removeRange(fromIndex, toIndex);\n+    }\n+\n+    @Override\n+    public boolean removeAll(Collection<?> c) {\n+        onContentsChanged();\n+        return super.removeAll(c);\n+    }\n+\n+    @Override\n+    public boolean retainAll(Collection<?> c) {\n+        onContentsChanged();\n+        return super.retainAll(c);\n+    }\n+\n+}\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n import org.jsoup.nodes.Element;\n import org.jsoup.nodes.XmlDeclaration;\n import org.jsoup.parser.Parser;\n+import org.jsoup.select.Elements;\n \n import java.io.ByteArrayOutputStream;\n import java.io.File;\n             // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n             docData = Charset.forName(defaultCharset).decode(byteData).toString();\n             doc = parser.parseInput(docData, baseUri);\n-            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n+            Elements metaElements = doc.select(\"meta[http-equiv=content-type], meta[charset]\");\n             String foundCharset = null; // if not found, will keep utf-8 as best attempt\n-            if (meta != null) {\n+            for (Element meta : metaElements) {\n                 if (meta.hasAttr(\"http-equiv\")) {\n                     foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                 }\n                 if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                     foundCharset = meta.attr(\"charset\");\n                 }\n-            }\n+                if (foundCharset != null) {\n+                    break;\n+                }\n+            }\n+\n             // look for <?xml encoding='ISO-8859-1'?>\n             if (foundCharset == null && doc.childNodeSize() > 0 && doc.childNode(0) instanceof XmlDeclaration) {\n                 XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0);\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n                     if (status != HTTP_TEMP_REDIR) {\n                         req.method(Method.GET); // always redirect with a get. any data param from original req are dropped.\n                         req.data().clear();\n+                        req.requestBody(null);\n+                        req.removeHeader(CONTENT_TYPE);\n                     }\n \n                     String location = res.header(LOCATION);\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n import org.jsoup.select.Selector;\n \n import java.io.IOException;\n+import java.lang.ref.SoftReference;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n  */\n public class Element extends Node {\n     private Tag tag;\n+    private SoftReference<List<Element>> shadowChildrenRef; // points to child elements shadowed from node children\n \n     private static final Pattern classSplit = Pattern.compile(\"\\\\s+\");\n \n      * @see #childNode(int)\n      */\n     public Element child(int index) {\n-        return children().get(index);\n+        return childElementsList().get(index);\n     }\n \n     /**\n      * <p>\n      * This is effectively a filter on {@link #childNodes()} to get Element nodes.\n      * </p>\n-     * @return child elements. If this element has no children, returns an\n-     * empty list.\n+     * @return child elements. If this element has no children, returns an empty list.\n      * @see #childNodes()\n      */\n     public Elements children() {\n-        // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n-        List<Element> elements = new ArrayList<Element>(childNodes.size());\n-        for (Node node : childNodes) {\n-            if (node instanceof Element)\n-                elements.add((Element) node);\n-        }\n-        return new Elements(elements);\n+        return new Elements(childElementsList());\n+    }\n+\n+    /**\n+     * Maintains a shadow copy of this element's child elements. If the nodelist is changed, this cache is invalidated.\n+     * TODO - think about pulling this out as a helper as there are other shadow lists (like in Attributes) kept around.\n+     * @return a list of child elements\n+     */\n+    private List<Element> childElementsList() {\n+        List<Element> children;\n+        if (shadowChildrenRef == null || (children = shadowChildrenRef.get()) == null) {\n+            children = new ArrayList<Element>(childNodes.size());\n+            for (Node node : childNodes) {\n+                if (node instanceof Element)\n+                    children.add((Element) node);\n+            }\n+            shadowChildrenRef = new SoftReference<List<Element>>(children);\n+        }\n+        return children;\n+    }\n+\n+    /**\n+     * Clears the cached shadow child elements.\n+     */\n+    @Override\n+    void nodelistChanged() {\n+        super.nodelistChanged();\n+        shadowChildrenRef = null;\n     }\n \n     /**\n         addChildren(index, nodeArray);\n         return this;\n     }\n+\n+    /**\n+     * Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the\n+     * right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.\n+     *\n+     * @param index 0-based index to insert children at. Specify {@code 0} to insert at the start, {@code -1} at the\n+     * end\n+     * @param children child nodes to insert\n+     * @return this element, for chaining.\n+     */\n+    public Element insertChildren(int index, Node... children) {\n+        Validate.notNull(children, \"Children collection to be inserted must not be null.\");\n+        int currentSize = childNodeSize();\n+        if (index < 0) index += currentSize +1; // roll around\n+        Validate.isTrue(index >= 0 && index <= currentSize, \"Insert position out of bounds.\");\n+\n+        addChildren(index, children);\n+        return this;\n+    }\n     \n     /**\n      * Create a new element by tag name, and add it as the last child.\n         if (parentNode == null)\n             return new Elements(0);\n \n-        List<Element> elements = parent().children();\n+        List<Element> elements = parent().childElementsList();\n         Elements siblings = new Elements(elements.size() - 1);\n         for (Element el: elements)\n             if (el != this)\n      */\n     public Element nextElementSibling() {\n         if (parentNode == null) return null;\n-        List<Element> siblings = parent().children();\n+        List<Element> siblings = parent().childElementsList();\n         Integer index = indexInList(this, siblings);\n         Validate.notNull(index);\n         if (siblings.size() > index+1)\n      */\n     public Element previousElementSibling() {\n         if (parentNode == null) return null;\n-        List<Element> siblings = parent().children();\n+        List<Element> siblings = parent().childElementsList();\n         Integer index = indexInList(this, siblings);\n         Validate.notNull(index);\n         if (index > 0)\n      */\n     public Element firstElementSibling() {\n         // todo: should firstSibling() exclude this?\n-        List<Element> siblings = parent().children();\n+        List<Element> siblings = parent().childElementsList();\n         return siblings.size() > 1 ? siblings.get(0) : null;\n     }\n     \n      */\n     public Integer elementSiblingIndex() {\n        if (parent() == null) return 0;\n-       return indexInList(this, parent().children()); \n+       return indexInList(this, parent().childElementsList());\n     }\n \n     /**\n      * @return the last sibling that is an element (aka the parent's last element child) \n      */\n     public Element lastElementSibling() {\n-        List<Element> siblings = parent().children();\n+        List<Element> siblings = parent().childElementsList();\n         return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;\n     }\n     \n     }\n \n     /**\n-     * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag.\n+     * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag. Note that data is NOT the\n+     * text of the element. Use {@link #text()} to get the text that would be visible to a user, and {@link #data()}\n+     * for the contents of scripts, comments, CSS styles, etc.\n+     *\n      * @return the data, or empty string if none\n      *\n      * @see #dataNodes()\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n package org.jsoup.nodes;\n \n import org.jsoup.SerializationException;\n+import org.jsoup.helper.ChangeNotifyingArrayList;\n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n import org.jsoup.parser.Parser;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n \n     public Node removeAttr(String attributeKey) {\n         Validate.notNull(attributeKey);\n         attributes.removeIgnoreCase(attributeKey);\n+        return this;\n+    }\n+\n+    /**\n+     * Clear (remove) all of the attributes in this node.\n+     * @return this, for chaining\n+     */\n+    public Node clearAttributes() {\n+        Iterator<Attribute> it = attributes.iterator();\n+        while (it.hasNext()) {\n+            it.next();\n+            it.remove();\n+        }\n         return this;\n     }\n \n         else\n             return el;\n     }\n+\n+    void nodelistChanged() {\n+        // Element overrides this to clear its shadow children elements\n+    }\n     \n     /**\n      * Replace this node in the DOM with the supplied node.\n     }\n \n     protected void setParentNode(Node parentNode) {\n+        Validate.notNull(parentNode);\n         if (this.parentNode != null)\n             this.parentNode.removeChild(this);\n         this.parentNode = parentNode;\n \n     protected void ensureChildNodes() {\n         if (childNodes == EMPTY_NODES) {\n-            childNodes = new ArrayList<Node>(4);\n+            childNodes = new NodeList(4);\n         }\n     }\n \n         clone.siblingIndex = parent == null ? 0 : siblingIndex;\n         clone.attributes = attributes != null ? attributes.clone() : null;\n         clone.baseUri = baseUri;\n-        clone.childNodes = new ArrayList<Node>(childNodes.size());\n+        clone.childNodes = new NodeList(childNodes.size());\n \n         for (Node child: childNodes)\n             clone.childNodes.add(child);\n             }\n         }\n     }\n+\n+    private final class NodeList extends ChangeNotifyingArrayList<Node> {\n+        NodeList(int initialCapacity) {\n+            super(initialCapacity);\n+        }\n+\n+        public void onContentsChanged() {\n+            nodelistChanged();\n+        }\n+    }\n }\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n         }\n \n         boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n-            String name = t.asEndTag().normalName();\n+            String name = t.asEndTag().name(); // matches with case sensitivity if enabled\n             ArrayList<Element> stack = tb.getStack();\n             for (int pos = stack.size() -1; pos >= 0; pos--) {\n                 Element node = stack.get(pos);\n--- a/src/test/java/org/jsoup/helper/DataUtilTest.java\n+++ b/src/test/java/org/jsoup/helper/DataUtilTest.java\n     }\n \n     @Test\n+    public void secondMetaElementWithContentTypeContainsCharsetParameter() throws Exception {\n+        ByteBuffer inBuffer = ByteBuffer.wrap((\"<html><head>\" +\n+                \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html\\\">\" +\n+                \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=euc-kr\\\">\" +\n+                \"</head><body>\ud55c\uad6d\uc5b4</body></html>\").getBytes(\"euc-kr\"));\n+\n+        Document doc = DataUtil.parseByteData(inBuffer, null, \"http://example.com\", Parser.htmlParser());\n+\n+        assertEquals(\"\ud55c\uad6d\uc5b4\", doc.body().text());\n+    }\n+\n+    @Test\n+    public void firstMetaElementWithCharsetShouldBeUsedForDecoding() throws Exception {\n+        ByteBuffer inBuffer = ByteBuffer.wrap((\"<html><head>\" +\n+                \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=iso-8859-1\\\">\" +\n+                \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=koi8-u\\\">\" +\n+                \"</head><body>\u00dcbergr\u00f6\u00dfentr\u00e4ger</body></html>\").getBytes(\"iso-8859-1\"));\n+\n+        Document doc = DataUtil.parseByteData(inBuffer, null, \"http://example.com\", Parser.htmlParser());\n+\n+        assertEquals(\"\u00dcbergr\u00f6\u00dfentr\u00e4ger\", doc.body().text());\n+    }\n+\n+    @Test\n     public void supportsBOMinFiles() throws IOException {\n         // test files from http://www.i18nl10n.com/korean/utftest/\n         File in = getFile(\"/bomtests/bom_utf16be.html\");\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n         Document doc = res.parse();\n         assertEquals(200, res.statusCode());\n     }\n+\n+    @Test public void handlesUnicodeInQuery() throws IOException {\n+        Document doc = Jsoup.connect(\"https://www.google.pl/search?q=g\u0105ska\").get();\n+        assertEquals(\"g\u0105ska - Szukaj w Google\", doc.title());\n+\n+        doc = Jsoup.connect(\"http://mov-world.net/archiv/TV/A/%23No.Title/\").get();\n+        assertEquals(\"Index of /archiv/TV/A/%23No.Title\", doc.title());\n+    }\n }\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         }\n \n         try {\n-            div2.insertChildren(0, null);\n+            div2.insertChildren(0, (Collection<? extends Node>) null);\n             fail();\n         } catch (IllegalArgumentException e) {\n         }\n     }\n \n     @Test\n+    public void testLoopedRemoveAttributes() {\n+        String html = \"<a one two three four>Text</a><p foo>Two</p>\";\n+        Document doc = Jsoup.parse(html);\n+        for (Element el : doc.getAllElements()) {\n+            el.clearAttributes();\n+        }\n+\n+        assertEquals(\"<a>Text</a>\\n<p>Two</p>\", doc.body().html());\n+    }\n+\n+    @Test\n     public void testIs() {\n         String html = \"<div><p>One <a class=big>Two</a> Three</p><p>Another</p>\";\n         Document doc = Jsoup.parse(html);\n         assertTrue(a.tagName().equals(\"P\"));\n     }\n \n-    public void testChildrenElements() {\n+    @Test public void testChildrenElements() {\n         String html = \"<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>\";\n         Document doc = Jsoup.parse(html);\n         Element div = doc.select(\"div\").first();\n         assertEquals(0, img.children().size());\n         assertEquals(0, img.childNodes().size());\n     }\n+\n+    @Test public void testShadowElementsAreUpdated() {\n+        String html = \"<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>\";\n+        Document doc = Jsoup.parse(html);\n+        Element div = doc.select(\"div\").first();\n+        Elements els = div.children();\n+        List<Node> nodes = div.childNodes();\n+\n+        assertEquals(2, els.size()); // the two Ps\n+        assertEquals(3, nodes.size()); // the \"Three\" textnode\n+\n+        Element p3 = new Element(\"p\").text(\"P3\");\n+        Element p4 = new Element(\"p\").text(\"P4\");\n+        div.insertChildren(1, p3);\n+        div.insertChildren(3, p4);\n+        Elements els2 = div.children();\n+\n+        // first els should not have changed\n+        assertEquals(2, els.size());\n+        assertEquals(4, els2.size());\n+\n+        assertEquals(\"<p><a>One</a></p>\\n\" +\n+            \"<p>P3</p>\\n\" +\n+            \"<p><a>Two</a></p>\\n\" +\n+            \"<p>P4</p>Three\", div.html());\n+        assertEquals(\"P3\", els2.get(1).text());\n+        assertEquals(\"P4\", els2.get(3).text());\n+\n+        p3.after(\"<span>Another</span\");\n+\n+        Elements els3 = div.children();\n+        assertEquals(5, els3.size());\n+        assertEquals(\"span\", els3.get(2).tagName());\n+        assertEquals(\"Another\", els3.get(2).text());\n+\n+        assertEquals(\"<p><a>One</a></p>\\n\" +\n+            \"<p>P3</p>\\n\" +\n+            \"<span>Another</span>\\n\" +\n+            \"<p><a>Two</a></p>\\n\" +\n+            \"<p>P4</p>Three\", div.html());\n+    }\n+\n+    @Test public void classNamesAndAttributeNameIsCaseInsensitive() {\n+        String html = \"<p Class='SomeText AnotherText'>One</p>\";\n+        Document doc = Jsoup.parse(html);\n+        Element p = doc.select(\"p\").first();\n+        assertEquals(\"SomeText AnotherText\", p.className());\n+        assertTrue(p.classNames().contains(\"SomeText\"));\n+        assertTrue(p.classNames().contains(\"AnotherText\"));\n+        assertTrue(p.hasClass(\"SomeText\"));\n+        assertTrue(p.hasClass(\"sometext\"));\n+        assertTrue(p.hasClass(\"AnotherText\"));\n+        assertTrue(p.hasClass(\"anothertext\"));\n+\n+        Element p1 = doc.select(\".SomeText\").first();\n+        Element p2 = doc.select(\".sometext\").first();\n+        Element p3 = doc.select(\"[class=SomeText AnotherText]\").first();\n+        Element p4 = doc.select(\"[Class=SomeText AnotherText]\").first();\n+        Element p5 = doc.select(\"[class=sometext anothertext]\").first();\n+        Element p6 = doc.select(\"[class=SomeText AnotherText]\").first();\n+        Element p7 = doc.select(\"[class^=sometext]\").first();\n+        Element p8 = doc.select(\"[class$=nothertext]\").first();\n+        Element p9 = doc.select(\"[class^=sometext]\").first();\n+        Element p10 = doc.select(\"[class$=AnotherText]\").first();\n+\n+        assertEquals(\"One\", p1.text());\n+        assertEquals(p1, p2);\n+        assertEquals(p1, p3);\n+        assertEquals(p1, p4);\n+        assertEquals(p1, p5);\n+        assertEquals(p1, p6);\n+        assertEquals(p1, p7);\n+        assertEquals(p1, p8);\n+        assertEquals(p1, p9);\n+        assertEquals(p1, p10);\n+    }\n }\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         Document doc = Jsoup.parse(\"<p><a \\06=foo>One</a><a/\\06=bar><a foo\\06=bar>Two</a></p>\");\n         assertEquals(\"<p><a>One</a><a></a><a foo=\\\"bar\\\">Two</a></p>\", doc.body().html());\n     }\n+\n+    @Test public void caseSensitiveParseTree() {\n+        String html = \"<r><X>A</X><y>B</y></r>\";\n+        Parser parser = Parser.htmlParser();\n+        parser.settings(ParseSettings.preserveCase);\n+        Document doc = parser.parseInput(html, \"\");\n+        assertEquals(\"<r> <X> A </X> <y> B </y> </r>\", StringUtil.normaliseWhitespace(doc.body().html()));\n+\n+    }\n }", "timestamp": 1497141607, "metainfo": ""}