{"sha": "ba5d66010db39205e29289ae81122fc85299d145", "log": "Improved tag definitions to allow limited children and excluded children. Improved implicit table element creation, particularly around tbody tags.", "commit": "\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n     private boolean empty = false; // can hold nothing; e.g. img\n     private boolean preserveWhitespace = false; // for pre, textarea, script etc\n     private List<Tag> ancestors; // elements must be a descendant of one of these ancestors\n-    private Tag parent; // if not null, elements must be a direct child of parent\n+    private List<Tag> excludes = Collections.emptyList(); // cannot contain these tags\n+    private boolean directDescendant; // if true, must directly descend from one of the ancestors\n+    private boolean limitChildren; // if true, only contain children that've registered parents\n \n     private Tag(String tagName) {\n         this.tagName = tagName.toLowerCase();\n                 // not defined: create default; go anywhere, do anything! (incl be inside a <p>)\n                 tag = new Tag(tagName);\n                 tag.setAncestor(defaultAncestor.tagName);\n+                tag.setExcludes();\n                 tag.isBlock = false;\n                 tag.canContainBlock = true;\n             }\n         if (this.requiresSpecificParent() && this.getImplicitParent().equals(child))\n             return false;\n         \n+        // confirm limited children\n+        if (limitChildren) {\n+            for (Tag childParent : child.ancestors) {\n+                if (childParent.equals(this))\n+                    return true;\n+            }\n+            return false;\n+        }\n+        \n+        // exclude children\n+        if (!excludes.isEmpty()) {\n+            for (Tag excluded: excludes) {\n+                if (child.equals(excluded))\n+                    return false;\n+            }\n+        }\n+        \n         return true;\n     }\n \n     }\n \n     boolean requiresSpecificParent() {\n-        return this.parent != null;\n+        return directDescendant;\n     }\n \n     boolean isValidParent(Tag child) {\n-        return this.equals(child.parent);\n+        return isValidAncestor(child);\n     }\n \n     boolean isValidAncestor(Tag child) {\n \n         Tag tag = (Tag) o;\n \n-        if (canContainBlock != tag.canContainBlock) return false;\n-        if (canContainInline != tag.canContainInline) return false;\n-        if (empty != tag.empty) return false;\n-        if (isBlock != tag.isBlock) return false;\n-        if (optionalClosing != tag.optionalClosing) return false;\n         if (tagName != null ? !tagName.equals(tag.tagName) : tag.tagName != null) return false;\n \n         return true;\n         // tables\n         createBlock(\"TABLE\"); // specific list of only includes (tr, td, thead etc) not implemented\n         createBlock(\"CAPTION\").setParent(\"TABLE\");\n-        createBlock(\"THEAD\").setParent(\"TABLE\").setOptionalClosing(); // just TR\n-        createBlock(\"TFOOT\").setParent(\"TABLE\").setOptionalClosing(); // just TR\n-        createBlock(\"TBODY\").setParent(\"TABLE\").setOptionalClosing(); // optional / implicit open too. just TR\n-        createBlock(\"COLGROUP\").setParent(\"TABLE\").setOptionalClosing(); // just COL\n+        createBlock(\"THEAD\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing(); // just TR\n+        createBlock(\"TFOOT\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing(); // just TR\n+        createBlock(\"TBODY\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing(); // optional / implicit open too. just TR\n+        createBlock(\"COLGROUP\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing(); // just COL\n         createBlock(\"COL\").setParent(\"COLGROUP\").setEmpty();\n-        createBlock(\"TR\").setParent(\"TABLE\").setOptionalClosing(); // just TH, TD\n-        createBlock(\"TH\").setParent(\"TR\").setOptionalClosing();\n-        createBlock(\"TD\").setParent(\"TR\").setOptionalClosing();\n+        createBlock(\"TR\").setParent(\"TBODY\", \"THEAD\", \"TFOOT\", \"TABLE\").setLimitChildren().setOptionalClosing(); // just TH, TD\n+        createBlock(\"TH\").setParent(\"TR\").setExcludes(\"THEAD\", \"TFOOT\", \"TBODY\", \"COLGROUP\", \"COL\", \"TR\", \"TH\", \"TD\").setOptionalClosing();\n+        createBlock(\"TD\").setParent(\"TR\").setExcludes(\"THEAD\", \"TFOOT\", \"TBODY\", \"COLGROUP\", \"COL\", \"TR\", \"TH\", \"TD\").setOptionalClosing();\n     }\n \n     private static Tag createBlock(String tagName) {\n     }\n \n     private Tag setAncestor(String... tagNames) {\n-        if (tagNames == null) {\n+        if (tagNames == null || tagNames.length == 0) {\n             ancestors = Collections.emptyList();\n         } else {\n             ancestors = new ArrayList<Tag>(tagNames.length);\n         }\n         return this;\n     }\n-\n-    private Tag setParent(String tagName) {\n-        parent = Tag.valueOf(tagName);\n-        setAncestor(tagName);\n+    \n+    private Tag setExcludes(String... tagNames) {\n+        if (tagNames == null || tagNames.length == 0) {\n+            excludes = Collections.emptyList();\n+        } else {\n+            excludes = new ArrayList<Tag>(tagNames.length);\n+            for (String name : tagNames) {\n+                excludes.add(Tag.valueOf(name));\n+            }\n+        }\n+        return this;\n+    }\n+\n+    private Tag setParent(String... tagNames) {\n+        directDescendant = true;\n+        setAncestor(tagNames);\n+        return this;\n+    }\n+    \n+    private Tag setLimitChildren() {\n+        limitChildren = true;\n         return this;\n     }\n }\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n     @Test public void createsImplicitTable() {\n         String h = \"<td>Hello<td><p>There<p>now\";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"<table><tr><td>Hello</td><td><p>There</p><p>now</p></td></tr></table>\", TextUtil.stripNewlines(doc.body().html()));\n+        assertEquals(\"<table><tbody><tr><td>Hello</td><td><p>There</p><p>now</p></td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n+        // <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table\n     }\n \n     @Test public void handlesNestedImplicitTable() {\n         Document doc = Jsoup.parse(\"<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>\");\n         assertEquals(\"<table><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tr><td>3</td> <td>4</td></tr></table> </td></tr><tr><td>5</td></tr></table>\", TextUtil.stripNewlines(doc.body().html()));\n+    }\n+    \n+    @Test public void handlesWhatWgExpensesTableExample() {\n+        // http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0\n+        Document doc = Jsoup.parse(\"<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>\");\n+        assertEquals(\"<table> <colgroup> <col /> </colgroup><colgroup> <col /> <col /> <col /> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\\\"rowgroup\\\">Research and development </th><td>$ 1,109 </td><td>$ 782 </td><td>$ 712 </td></tr><tr> <th scope=\\\"row\\\">Percentage of net sales </th><td>3.4% </td><td>3.3% </td><td>3.7% </td></tr></tbody><tbody> <tr> <th scope=\\\"rowgroup\\\">Selling, general, and administrative </th><td>$ 3,761 </td><td>$ 2,963 </td><td>$ 2,433 </td></tr><tr> <th scope=\\\"row\\\">Percentage of net sales </th><td>11.6% </td><td>12.3% </td><td>12.6% </td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n+    }\n+    \n+    @Test public void handlesTbodyTable() {\n+        Document doc = Jsoup.parse(\"<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>\");\n+        assertEquals(\"<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n     }\n \n     @Test public void handlesBaseTags() {\n--- a/src/test/java/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/safety/CleanerTest.java\n     @Test public void testRelaxed() {\n         String h = \"<h1>Head</h1><td>One<td>Two</td>\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n-        assertEquals(\"<h1>Head</h1><table><tr><td>One</td><td>Two</td></tr></table>\", TextUtil.stripNewlines(cleanHtml));\n+        assertEquals(\"<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>\", TextUtil.stripNewlines(cleanHtml));\n     }\n     \n     @Test public void testDropComments() {", "timestamp": 1309605115, "metainfo": ""}