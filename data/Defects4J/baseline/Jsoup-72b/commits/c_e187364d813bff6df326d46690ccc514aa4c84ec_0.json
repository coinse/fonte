{"sha": "e187364d813bff6df326d46690ccc514aa4c84ec", "log": "Address #387: prevent NPE when adding markup to <title> elements", "commit": "\n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n         }\n \n         String name() {\n-            Validate.isFalse(tagName.length() == 0);\n+            Validate.isFalse(tagName == null || tagName.length() == 0);\n             return tagName;\n         }\n \n--- a/src/main/java/org/jsoup/parser/Tokeniser.java\n+++ b/src/main/java/org/jsoup/parser/Tokeniser.java\n     }\n \n     String appropriateEndTagName() {\n+        if (lastStartTag == null)\n+            return null;\n         return lastStartTag.tagName;\n     }\n \n         }\n         return builder.toString();\n     }\n-}\n+}\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n             if (r.matches('/')) {\n                 t.createTempBuffer();\n                 t.advanceTransition(RCDATAEndTagOpen);\n-            } else if (r.matchesLetter() && !r.containsIgnoreCase(\"</\" + t.appropriateEndTagName())) {\n+            } else if (r.matchesLetter() && t.appropriateEndTagName() != null && !r.containsIgnoreCase(\"</\" + t.appropriateEndTagName())) {\n                 // diverge from spec: got a start tag, but there's no appropriate end tag (</title>), so rather than\n                 // consuming to EOF; break out here\n                 t.tagPending = new Token.EndTag(t.appropriateEndTagName());\n                 t.transition(fallback);\n         }\n     }\n-}\n+}\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(\"<p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html()));\n     }\n \n+    @Test public void testSetHtmlTitle() {\n+        Document doc = Jsoup.parse(\"<html><head id=2><title id=1></title></head></html>\");\n+\n+        Element title = doc.getElementById(\"1\");\n+        title.html(\"good\");\n+        assertEquals(\"good\", title.html());\n+        title.html(\"<i>bad</i>\");\n+        assertEquals(\"&lt;i&gt;bad&lt;/i&gt;\", title.html());\n+\n+        Element head = doc.getElementById(\"2\");\n+        head.html(\"<title><i>bad</i></title>\");\n+        assertEquals(\"<title>&lt;i&gt;bad&lt;/i&gt;</title>\", head.html());\n+    }\n+\n     @Test public void testWrap() {\n         Document doc = Jsoup.parse(\"<div><p>Hello</p><p>There</p></div>\");\n         Element p = doc.select(\"p\").first();", "timestamp": 1396630847, "metainfo": ""}