{"sha": "7171cec2dfd3c8b58645b69970425864abf8ba1f", "log": "Optionally preserve related links in elements when cleaning", "commit": "\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n     private Map<TagName, Set<AttributeKey>> attributes; // tag -> attribute[]. allowed attributes [href] for a tag.\n     private Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; // always set these attribute values\n     private Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols; // allowed URL protocols for attributes\n+    private boolean preserveRelativeLinks; // option to preserve relative links\n \n     /**\n      This whitelist allows only text nodes: all HTML will be stripped.\n         attributes = new HashMap<TagName, Set<AttributeKey>>();\n         enforcedAttributes = new HashMap<TagName, Map<AttributeKey, AttributeValue>>();\n         protocols = new HashMap<TagName, Map<AttributeKey, Set<Protocol>>>();\n+        preserveRelativeLinks = false;\n     }\n \n     /**\n             attrMap.put(attrKey, attrVal);\n             enforcedAttributes.put(tagName, attrMap);\n         }\n+        return this;\n+    }\n+\n+    /**\n+     * Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute\n+     * links. By default, this is <b>false</b>: URLs will be  made absolute (e.g. start with an allowed protocol, like\n+     * e.g. {@code http://}.\n+     * <p />\n+     * Note that when handling relative links, the input document must have an appropriate {@code base URI} set when\n+     * parsing, so that the link's protocol can be confirmed. Regardless of the setting of the {@code preserve relative\n+     * links} option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute\n+     * will be removed.\n+     *\n+     * @param preserve {@code true} to allow relative links, {@code false} (default) to deny\n+     * @return this Whitelist, for chaining.\n+     * @see #addProtocols\n+     */\n+    public Whitelist preserveRelativeLinks(boolean preserve) {\n+        preserveRelativeLinks = preserve;\n         return this;\n     }\n \n     }\n \n     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n-        // resolve relative urls to abs, and update the attribute so output html has abs.\n+        // resolve relative urls to abs, and optionally update the attribute so output html has abs.\n         // rels without a baseuri get removed\n         String value = el.absUrl(attr.getKey());\n-        attr.setValue(value);\n+        if (!preserveRelativeLinks)\n+            attr.setValue(value);\n         \n         for (Protocol protocol : protocols) {\n             String prot = protocol.toString() + \":\";\n--- a/src/test/java/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/safety/CleanerTest.java\n     }\n     \n     @Test public void resolvesRelativeLinks() {\n-        String html = \"<a href='/foo'>Link</a>\";\n-        String clean = Jsoup.clean(html, \"http://example.com/\", Whitelist.basic());\n-        assertEquals(\"<a href=\\\"http://example.com/foo\\\" rel=\\\"nofollow\\\">Link</a>\", clean);\n+        String html = \"<a href='/foo'>Link</a><img src='/bar'>\";\n+        String clean = Jsoup.clean(html, \"http://example.com/\", Whitelist.basicWithImages());\n+        assertEquals(\"<a href=\\\"http://example.com/foo\\\" rel=\\\"nofollow\\\">Link</a>\\n<img src=\\\"http://example.com/bar\\\" />\", clean);\n+    }\n+\n+    @Test public void preservesRelatedLinksIfConfigured() {\n+        String html = \"<a href='/foo'>Link</a><img src='/bar'> <img src='javascript:alert()'>\";\n+        String clean = Jsoup.clean(html, \"http://example.com/\", Whitelist.basicWithImages().preserveRelativeLinks(true));\n+        assertEquals(\"<a href=\\\"/foo\\\" rel=\\\"nofollow\\\">Link</a>\\n<img src=\\\"/bar\\\" /> \\n<img />\", clean);\n     }\n     \n     @Test public void dropsUnresolvableRelativeLinks() {", "timestamp": 1310800767, "metainfo": ""}