{"sha": "c63ccf8324539deddab636dd3c8003201024af1a", "log": "Less StringBuilder GC in text()  Need to roll out further.", "commit": "\n--- a/src/main/java/org/jsoup/helper/StringUtil.java\n+++ b/src/main/java/org/jsoup/helper/StringUtil.java\n         } catch (MalformedURLException e) {\n             return \"\";\n         }\n-\n-    }\n+    }\n+\n+    /**\n+     * Maintains a cached StringBuilder, to minimize new StringBuilder GCs. Prevents it from growing to big per thread.\n+     * @return an empty StringBuilder\n+     */\n+    // todo: roll this out everywhere\n+    public static StringBuilder stringBuilder() {\n+        StringBuilder sb = stringLocal.get();\n+        if (sb.length() > MaxCachedBuilderSize) {\n+            sb = new StringBuilder(MaxCachedBuilderSize);\n+            stringLocal.set(sb);\n+        }\n+        sb.delete(0, sb.length());\n+        return sb;\n+\n+    }\n+    private static final ThreadLocal<StringBuilder> stringLocal = new ThreadLocal<>();\n+    private static final int MaxCachedBuilderSize = 16 * 1024;\n+    static {\n+        stringLocal.set(new StringBuilder(MaxCachedBuilderSize));\n+    }\n+\n }\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n      * @see #textNodes()\n      */\n     public String text() {\n-        final StringBuilder accum = new StringBuilder();\n+        final StringBuilder accum = StringUtil.stringBuilder();\n         new NodeTraversor(new NodeVisitor() {\n             public void head(Node node, int depth) {\n                 if (node instanceof TextNode) {\n      * @see #outerHtml()\n      */\n     public String html() {\n-        StringBuilder accum = new StringBuilder();\n+        StringBuilder accum = StringUtil.stringBuilder();\n         html(accum);\n         return getOutputSettings().prettyPrint() ? accum.toString().trim() : accum.toString();\n     }", "timestamp": 1498894613, "metainfo": ""}