{"sha": "7462c0d9be34f6546520cf567dd5ea402c9cf329", "log": "Add tests to check for locale-independent lower-casing  When the default locale is set to Turkish, \"I\".toLowerCase() returns \"\u0131\", the dotless I. The method toLowerCase() is used throughout the code to normalize values. But none of these should be locale-sensitive. That's why right now all the added tests are failing.", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/jsoup/MultiLocaleRule.java\n+package org.jsoup;\n+\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.util.Locale;\n+\n+public class MultiLocaleRule implements TestRule {\n+    @Retention(RetentionPolicy.RUNTIME)\n+    public @interface MultiLocaleTest {\n+    }\n+\n+    public Statement apply(final Statement statement, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                MultiLocaleTest annotation = description.getAnnotation(MultiLocaleTest.class);\n+                if (annotation == null) {\n+                    statement.evaluate();\n+                    return;\n+                }\n+\n+                evaluateWithLocale(Locale.ENGLISH);\n+                evaluateWithLocale(new Locale(\"tr\"));\n+            }\n+\n+            private void evaluateWithLocale(Locale locale) throws Throwable {\n+                Locale oldLocale = Locale.getDefault();\n+                Locale.setDefault(locale);\n+                try {\n+                    statement.evaluate();\n+                } finally {\n+                    Locale.setDefault(oldLocale);\n+                }\n+            }\n+        };\n+    }\n+}\n--- a/src/test/java/org/jsoup/helper/HttpConnectionTest.java\n+++ b/src/test/java/org/jsoup/helper/HttpConnectionTest.java\n \n import static org.junit.Assert.*;\n \n+import org.jsoup.MultiLocaleRule;\n+import org.jsoup.MultiLocaleRule.MultiLocaleTest;\n import org.jsoup.integration.ParseTest;\n+import org.junit.Rule;\n import org.junit.Test;\n import org.jsoup.Connection;\n \n \n public class HttpConnectionTest {\n     /* most actual network http connection tests are in integration */\n+\n+    @Rule public MultiLocaleRule rule = new MultiLocaleRule();\n \n     @Test(expected=IllegalArgumentException.class) public void throwsExceptionOnParseWithoutExecute() throws IOException {\n         Connection con = HttpConnection.connect(\"http://example.com\");\n         con.response().bodyAsBytes();\n     }\n \n-    @Test public void caseInsensitiveHeaders() {\n+    @Test @MultiLocaleTest public void caseInsensitiveHeaders() {\n         Connection.Response res = new HttpConnection.Response();\n         Map<String, String> headers = res.headers();\n         headers.put(\"Accept-Encoding\", \"gzip\");\n         assertTrue(res.hasHeader(\"Accept-Encoding\"));\n         assertTrue(res.hasHeader(\"accept-encoding\"));\n         assertTrue(res.hasHeader(\"accept-Encoding\"));\n+        assertTrue(res.hasHeader(\"ACCEPT-ENCODING\"));\n \n         assertEquals(\"gzip\", res.header(\"accept-Encoding\"));\n+        assertEquals(\"gzip\", res.header(\"ACCEPT-ENCODING\"));\n         assertEquals(\"text/html\", res.header(\"Content-Type\"));\n         assertEquals(\"http://example.com\", res.header(\"Referrer\"));\n \n         res.removeHeader(\"Content-Type\");\n         assertFalse(res.hasHeader(\"content-type\"));\n \n-        res.header(\"accept-encoding\", \"deflate\");\n+        res.removeHeader(\"ACCEPT-ENCODING\");\n+        assertFalse(res.hasHeader(\"Accept-Encoding\"));\n+\n+        res.header(\"ACCEPT-ENCODING\", \"deflate\");\n         assertEquals(\"deflate\", res.header(\"Accept-Encoding\"));\n         assertEquals(\"deflate\", res.header(\"accept-Encoding\"));\n     }\n--- a/src/test/java/org/jsoup/parser/ParserSettingsTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserSettingsTest.java\n package org.jsoup.parser;\n \n+import org.jsoup.MultiLocaleRule;\n+import org.jsoup.MultiLocaleRule.MultiLocaleTest;\n+import org.jsoup.nodes.Attributes;\n+import org.junit.Rule;\n import org.junit.Test;\n+\n import static org.junit.Assert.assertEquals;\n \n public class ParserSettingsTest {\n-    @Test\n-    public void caseSupport() {\n+    @Rule public MultiLocaleRule rule = new MultiLocaleRule();\n+\n+    @Test @MultiLocaleTest public void caseSupport() {\n         ParseSettings bothOn = new ParseSettings(true, true);\n         ParseSettings bothOff = new ParseSettings(false, false);\n         ParseSettings tagOn = new ParseSettings(true, false);\n         ParseSettings attrOn = new ParseSettings(false, true);\n \n-        assertEquals(\"FOO\", bothOn.normalizeTag(\"FOO\"));\n-        assertEquals(\"FOO\", bothOn.normalizeAttribute(\"FOO\"));\n+        assertEquals(\"IMG\", bothOn.normalizeTag(\"IMG\"));\n+        assertEquals(\"ID\", bothOn.normalizeAttribute(\"ID\"));\n \n-        assertEquals(\"foo\", bothOff.normalizeTag(\"FOO\"));\n-        assertEquals(\"foo\", bothOff.normalizeAttribute(\"FOO\"));\n+        assertEquals(\"img\", bothOff.normalizeTag(\"IMG\"));\n+        assertEquals(\"id\", bothOff.normalizeAttribute(\"ID\"));\n \n-        assertEquals(\"FOO\", tagOn.normalizeTag(\"FOO\"));\n-        assertEquals(\"foo\", tagOn.normalizeAttribute(\"FOO\"));\n+        assertEquals(\"IMG\", tagOn.normalizeTag(\"IMG\"));\n+        assertEquals(\"id\", tagOn.normalizeAttribute(\"ID\"));\n \n-        assertEquals(\"foo\", attrOn.normalizeTag(\"FOO\"));\n-        assertEquals(\"FOO\", attrOn.normalizeAttribute(\"FOO\"));\n+        assertEquals(\"img\", attrOn.normalizeTag(\"IMG\"));\n+        assertEquals(\"ID\", attrOn.normalizeAttribute(\"ID\"));\n+    }\n \n+    @Test @MultiLocaleTest public void attributeCaseNormalization() throws Exception {\n+        ParseSettings parseSettings = new ParseSettings(false, false);\n+\n+        String normalizedAttribute = parseSettings.normalizeAttribute(\"HIDDEN\");\n+\n+        assertEquals(\"hidden\", normalizedAttribute);\n+    }\n+\n+    @Test @MultiLocaleTest public void attributesCaseNormalization() throws Exception {\n+        ParseSettings parseSettings = new ParseSettings(false, false);\n+        Attributes attributes = new Attributes();\n+        attributes.put(\"ITEM\", \"1\");\n+\n+        Attributes normalizedAttributes = parseSettings.normalizeAttributes(attributes);\n+\n+        assertEquals(\"item\", normalizedAttributes.asList().get(0).getKey());\n     }\n }\n--- a/src/test/java/org/jsoup/parser/TagTest.java\n+++ b/src/test/java/org/jsoup/parser/TagTest.java\n package org.jsoup.parser;\n \n+import org.jsoup.MultiLocaleRule;\n+import org.jsoup.MultiLocaleRule.MultiLocaleTest;\n+import org.junit.Rule;\n import org.junit.Test;\n+\n import static org.junit.Assert.*;\n \n /**\n  Tag tests.\n  @author Jonathan Hedley, jonathan@hedley.net */\n public class TagTest {\n+    @Rule public MultiLocaleRule rule = new MultiLocaleRule();\n \n     @Test public void isCaseSensitive() {\n         Tag p1 = Tag.valueOf(\"P\");\n         assertFalse(p1.equals(p2));\n     }\n \n-    @Test public void canBeInsensitive() {\n-        Tag p1 = Tag.valueOf(\"P\", ParseSettings.htmlDefault);\n-        Tag p2 = Tag.valueOf(\"p\", ParseSettings.htmlDefault);\n-        assertEquals(p1, p2);\n+    @Test @MultiLocaleTest public void canBeInsensitive() {\n+        Tag script1 = Tag.valueOf(\"script\", ParseSettings.htmlDefault);\n+        Tag script2 = Tag.valueOf(\"SCRIPT\", ParseSettings.htmlDefault);\n+        assertSame(script1, script2);\n     }\n \n     @Test public void trims() {\n--- a/src/test/java/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/safety/CleanerTest.java\n package org.jsoup.safety;\n \n+import org.jsoup.MultiLocaleRule;\n+import org.jsoup.MultiLocaleRule.MultiLocaleTest;\n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n import org.jsoup.nodes.Document;\n-import org.jsoup.nodes.Element;\n import org.jsoup.nodes.Entities;\n+import org.junit.Rule;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class CleanerTest {\n+    @Rule public MultiLocaleRule rule = new MultiLocaleRule();\n+\n     @Test public void simpleBehaviourTest() {\n         String h = \"<div><p class=foo><a href='http://evil.com'>Hello <b id=bar>there</b>!</a></div>\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.simpleText());\n         assertEquals(\"<p>Contact me <a rel=\\\"nofollow\\\">here</a></p>\",\n                 TextUtil.stripNewlines(cleanHtml));\n     }\n-    \n+\n+    @Test @MultiLocaleTest public void whitelistedProtocolShouldBeRetained() {\n+        Whitelist whitelist = Whitelist.none()\n+                .addTags(\"a\")\n+                .addAttributes(\"a\", \"href\")\n+                .addProtocols(\"a\", \"href\", \"something\");\n+\n+        String cleanHtml = Jsoup.clean(\"<a href=\\\"SOMETHING://x\\\"></a>\", whitelist);\n+\n+        assertEquals(\"<a href=\\\"SOMETHING://x\\\"></a>\", TextUtil.stripNewlines(cleanHtml));\n+    }\n+\n     @Test public void testDropComments() {\n         String h = \"<p>Hello<!-- no --></p>\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n package org.jsoup.select;\n \n+import org.jsoup.MultiLocaleRule;\n+import org.jsoup.MultiLocaleRule.MultiLocaleTest;\n import org.jsoup.Jsoup;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n+import org.junit.Rule;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n  * @author Jonathan Hedley, jonathan@hedley.net\n  */\n public class SelectorTest {\n+    @Rule public MultiLocaleRule rule = new MultiLocaleRule();\n+\n     @Test public void testByTag() {\n         // should be case insensitive\n         Elements els = Jsoup.parse(\"<div id=1><div id=2><p>Hello</p></div></div><DIV id=3>\").select(\"DIV\");\n         assertEquals(\"Two\", elsFromClass.get(1).text());\n     }\n \n-    @Test public void testByAttribute() {\n-        String h = \"<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM />\" +\n+    @Test @MultiLocaleTest public void testByAttribute() {\n+        String h = \"<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Balim /><div title=SLIM />\" +\n                 \"<div data-name='with spaces'/>\";\n         Document doc = Jsoup.parse(h);\n \n         Elements starts = doc.select(\"[title^=ba]\");\n         assertEquals(2, starts.size());\n         assertEquals(\"Bar\", starts.first().attr(\"title\"));\n-        assertEquals(\"Bam\", starts.last().attr(\"title\"));\n-\n-        Elements ends = doc.select(\"[title$=am]\");\n+        assertEquals(\"Balim\", starts.last().attr(\"title\"));\n+\n+        Elements ends = doc.select(\"[title$=im]\");\n         assertEquals(2, ends.size());\n-        assertEquals(\"Bam\", ends.first().attr(\"title\"));\n-        assertEquals(\"SLAM\", ends.last().attr(\"title\"));\n-\n-        Elements contains = doc.select(\"[title*=a]\");\n-        assertEquals(3, contains.size());\n-        assertEquals(\"Bar\", contains.first().attr(\"title\"));\n-        assertEquals(\"SLAM\", contains.last().attr(\"title\"));\n+        assertEquals(\"Balim\", ends.first().attr(\"title\"));\n+        assertEquals(\"SLIM\", ends.last().attr(\"title\"));\n+\n+        Elements contains = doc.select(\"[title*=i]\");\n+        assertEquals(2, contains.size());\n+        assertEquals(\"Balim\", contains.first().attr(\"title\"));\n+        assertEquals(\"SLIM\", contains.last().attr(\"title\"));\n     }\n \n     @Test public void testNamespacedTag() {\n         assertEquals(\"2\", byContains.last().id());\n     }\n \n-    @Test public void testByAttributeStarting() {\n-        Document doc = Jsoup.parse(\"<div id=1 data-name=jsoup>Hello</div><p data-val=5 id=2>There</p><p id=3>No</p>\");\n+    @Test @MultiLocaleTest public void testByAttributeStarting() {\n+        Document doc = Jsoup.parse(\"<div id=1 ATTRIBUTE data-name=jsoup>Hello</div><p data-val=5 id=2>There</p><p id=3>No</p>\");\n         Elements withData = doc.select(\"[^data-]\");\n         assertEquals(2, withData.size());\n         assertEquals(\"1\", withData.first().id());\n         withData = doc.select(\"p[^data-]\");\n         assertEquals(1, withData.size());\n         assertEquals(\"2\", withData.first().id());\n+\n+        assertEquals(1, doc.select(\"[^attrib]\").size());\n     }\n \n     @Test public void testByAttributeRegex() {\n         assertEquals(\"Two\", divs.first().text());\n     }\n \n-    @Test public void testPseudoContains() {\n-        Document doc = Jsoup.parse(\"<div><p>The Rain.</p> <p class=light>The <i>rain</i>.</p> <p>Rain, the.</p></div>\");\n+    @Test @MultiLocaleTest public void testPseudoContains() {\n+        Document doc = Jsoup.parse(\"<div><p>The Rain.</p> <p class=light>The <i>RAIN</i>.</p> <p>Rain, the.</p></div>\");\n \n         Elements ps1 = doc.select(\"p:contains(Rain)\");\n         assertEquals(3, ps1.size());\n         Elements ps2 = doc.select(\"p:contains(the rain)\");\n         assertEquals(2, ps2.size());\n         assertEquals(\"The Rain.\", ps2.first().html());\n-        assertEquals(\"The <i>rain</i>.\", ps2.last().html());\n+        assertEquals(\"The <i>RAIN</i>.\", ps2.last().html());\n \n         Elements ps3 = doc.select(\"p:contains(the Rain):has(i)\");\n         assertEquals(1, ps3.size());\n \n         Elements ps5 = doc.select(\":contains(rain)\");\n         assertEquals(8, ps5.size()); // html, body, div,...\n+\n+        Elements ps6 = doc.select(\":contains(RAIN)\");\n+        assertEquals(8, ps6.size());\n     }\n \n     @Test public void testPsuedoContainsWithParentheses() {\n         assertEquals(\"2\", ps2.first().id());\n     }\n \n-    @Test public void containsOwn() {\n-        Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b> now</p>\");\n-        Elements ps = doc.select(\"p:containsOwn(Hello now)\");\n+    @Test @MultiLocaleTest public void containsOwn() {\n+        Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b> igor</p>\");\n+        Elements ps = doc.select(\"p:containsOwn(Hello IGOR)\");\n         assertEquals(1, ps.size());\n         assertEquals(\"1\", ps.first().id());\n \n         assertEquals(0, doc.select(\"p:containsOwn(there)\").size());\n+\n+        Document doc2 = Jsoup.parse(\"<p>Hello <b>there</b> IGOR</p>\");\n+        assertEquals(1, doc2.select(\"p:containsOwn(igor)\").size());\n+\n     }\n \n     @Test public void testMatches() {\n         assertEquals(\"Two\", doc.select(\"div[data=\\\"[Another)]]\\\"]\").first().text());\n     }\n \n-    @Test public void containsData() {\n-        String html = \"<p>jsoup</p><script>jsoup</script><span><!-- comments --></span>\";\n+    @Test @MultiLocaleTest public void containsData() {\n+        String html = \"<p>function</p><script>FUNCTION</script><style>item</style><span><!-- comments --></span>\";\n         Document doc = Jsoup.parse(html);\n         Element body = doc.body();\n \n-        Elements dataEls1 = body.select(\":containsData(jsoup)\");\n-        Elements dataEls2 = body.select(\"script:containsData(jsoup)\");\n+        Elements dataEls1 = body.select(\":containsData(function)\");\n+        Elements dataEls2 = body.select(\"script:containsData(function)\");\n         Elements dataEls3 = body.select(\"span:containsData(comments)\");\n-        Elements dataEls4 = body.select(\":containsData(s)\");\n+        Elements dataEls4 = body.select(\":containsData(o)\");\n+        Elements dataEls5 = body.select(\"style:containsData(ITEM)\");\n \n         assertEquals(2, dataEls1.size()); // body and script\n         assertEquals(1, dataEls2.size());\n         assertEquals(dataEls1.last(), dataEls2.first());\n-        assertEquals(\"<script>jsoup</script>\", dataEls2.outerHtml());\n+        assertEquals(\"<script>FUNCTION</script>\", dataEls2.outerHtml());\n         assertEquals(1, dataEls3.size());\n         assertEquals(\"span\", dataEls3.first().tagName());\n         assertEquals(3, dataEls4.size());\n         assertEquals(\"body\", dataEls4.first().tagName());\n         assertEquals(\"script\", dataEls4.get(1).tagName());\n         assertEquals(\"span\", dataEls4.get(2).tagName());\n+        assertEquals(1, dataEls5.size());\n     }\n \n     @Test public void containsWithQuote() {", "timestamp": 1485819721, "metainfo": ""}