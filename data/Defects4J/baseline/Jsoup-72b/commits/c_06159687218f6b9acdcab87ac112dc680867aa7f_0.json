{"sha": "06159687218f6b9acdcab87ac112dc680867aa7f", "log": "Avoid covariant return type change problems  If compiled on JDK9, wouldn't run on older JDKs, because of the covariant return type which meant older JDKs couldn't find the right method.", "commit": "\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n import java.io.InputStreamReader;\n import java.io.OutputStream;\n import java.io.RandomAccessFile;\n+import java.nio.Buffer;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n import java.nio.charset.IllegalCharsetNameException;\n         input.reset();\n \n         // look for BOM - overrides any other header or input\n-        BomCharset bomCharset = detectCharsetFromBom(firstBytes, charsetName);\n+        BomCharset bomCharset = detectCharsetFromBom(firstBytes);\n         if (bomCharset != null) {\n             charsetName = bomCharset.charset;\n             input.skip(bomCharset.offset);\n         return mime.toString();\n     }\n \n-    private static BomCharset detectCharsetFromBom(final ByteBuffer byteData, final String charsetName) {\n-        byteData.mark();\n+    private static BomCharset detectCharsetFromBom(final ByteBuffer byteData) {\n+        final Buffer buffer = byteData; // .mark and rewind used to return Buffer, now ByteBuffer, so cast for backward compat\n+        buffer.mark();\n         byte[] bom = new byte[4];\n         if (byteData.remaining() >= bom.length) {\n             byteData.get(bom);\n-            byteData.rewind();\n+            buffer.rewind();\n         }\n         if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n             bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) { // LE\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n import java.net.URI;\n import java.net.URL;\n import java.net.URLEncoder;\n+import java.nio.Buffer;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n import java.nio.charset.IllegalCharsetNameException;\n                 body = Charset.forName(DataUtil.defaultCharset).decode(byteData).toString();\n             else\n                 body = Charset.forName(charset).decode(byteData).toString();\n-            byteData.rewind();\n+            ((Buffer)byteData).rewind(); // cast to avoid covariant return type change in jdk9\n             return body;\n         }\n ", "timestamp": 1509316257, "metainfo": ""}