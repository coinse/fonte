{"sha": "4eb4f2b2e88a2f9e6c5c1e8d0477060954f24218", "log": "Detect charset from xml prolog  Fixes #701", "commit": "\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n \n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.XmlDeclaration;\n import org.jsoup.parser.Parser;\n \n-import java.io.*;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.RandomAccessFile;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n import java.nio.charset.IllegalCharsetNameException;\n         Document doc = null;\n \n         // look for BOM - overrides any other header or input\n-        byteData.mark();\n-        byte[] bom = new byte[4];\n-        if (byteData.remaining() >= bom.length) {\n-            byteData.get(bom);\n-            byteData.rewind();\n-        }\n-        if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n-                bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) { // LE\n-            charsetName = \"UTF-32\"; // and I hope it's on your system\n-        } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n-                bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n-            charsetName = \"UTF-16\"; // in all Javas\n-        } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n-            charsetName = \"UTF-8\"; // in all Javas\n-            byteData.position(3); // 16 and 32 decoders consume the BOM to determine be/le; utf-8 should be consumed\n-        }\n-\n-        if (charsetName == null) { // determine from meta. safe parse as UTF-8\n+        charsetName = detectCharsetFromBom(byteData, charsetName);\n+\n+        if (charsetName == null) { // determine from meta. safe first parse as UTF-8\n             // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n             docData = Charset.forName(defaultCharset).decode(byteData).toString();\n             doc = parser.parseInput(docData, baseUri);\n             Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n-            if (meta != null) { // if not found, will keep utf-8 as best attempt\n-                String foundCharset = null;\n+            String foundCharset = null; // if not found, will keep utf-8 as best attempt\n+            if (meta != null) {\n                 if (meta.hasAttr(\"http-equiv\")) {\n                     foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                 }\n                 if (foundCharset == null && meta.hasAttr(\"charset\")) {\n-                    try {\n-                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n-                            foundCharset = meta.attr(\"charset\");\n-                        }\n-                    } catch (IllegalCharsetNameException e) {\n-                        foundCharset = null;\n-                    }\n-                }\n-\n-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n-                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n-                    charsetName = foundCharset;\n-                    byteData.rewind();\n-                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n-                    doc = null;\n-                }\n+                    foundCharset = meta.attr(\"charset\");\n+                }\n+            }\n+            // look for <?xml encoding='ISO-8859-1'?>\n+            if (foundCharset == null && doc.childNode(0) instanceof XmlDeclaration) {\n+                XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0);\n+                if (prolog.name().equals(\"xml\")) {\n+                    foundCharset = prolog.attr(\"encoding\");\n+                }\n+            }\n+            foundCharset = validateCharset(foundCharset);\n+\n+            if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode\n+                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n+                charsetName = foundCharset;\n+                byteData.rewind();\n+                docData = Charset.forName(foundCharset).decode(byteData).toString();\n+                doc = null;\n             }\n         } else { // specified by content type header (or by user on file load)\n             Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n         if (m.find()) {\n             String charset = m.group(1).trim();\n             charset = charset.replace(\"charset=\", \"\");\n-            if (charset.length() == 0) return null;\n-            try {\n-                if (Charset.isSupported(charset)) return charset;\n-                charset = charset.toUpperCase(Locale.ENGLISH);\n-                if (Charset.isSupported(charset)) return charset;\n-            } catch (IllegalCharsetNameException e) {\n-                // if our advanced charset matching fails.... we just take the default\n-                return null;\n-            }\n+            return validateCharset(charset);\n+        }\n+        return null;\n+    }\n+\n+    private static String validateCharset(String cs) {\n+        if (cs == null || cs.length() == 0) return null;\n+        cs = cs.trim().replaceAll(\"[\\\"']\", \"\");\n+        try {\n+            if (Charset.isSupported(cs)) return cs;\n+            cs = cs.toUpperCase(Locale.ENGLISH);\n+            if (Charset.isSupported(cs)) return cs;\n+        } catch (IllegalCharsetNameException e) {\n+            // if our this charset matching fails.... we just take the default\n         }\n         return null;\n     }\n         }\n         return mime.toString();\n     }\n+\n+    private static String detectCharsetFromBom(ByteBuffer byteData, String charsetName) {\n+        byteData.mark();\n+        byte[] bom = new byte[4];\n+        if (byteData.remaining() >= bom.length) {\n+            byteData.get(bom);\n+            byteData.rewind();\n+        }\n+        if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n+            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) { // LE\n+            charsetName = \"UTF-32\"; // and I hope it's on your system\n+        } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n+            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n+            charsetName = \"UTF-16\"; // in all Javas\n+        } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n+            charsetName = \"UTF-8\"; // in all Javas\n+            byteData.position(3); // 16 and 32 decoders consume the BOM to determine be/le; utf-8 should be consumed here\n+        }\n+        return charsetName;\n+    }\n }\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n                 if (node instanceof XmlDeclaration) {\n                     XmlDeclaration decl = (XmlDeclaration) node;\n \n-                    if (decl.attr(XmlDeclaration.DECL_KEY).equals(\"xml\")) {\n+                    if (decl.name().equals(\"xml\")) {\n                         decl.attr(\"encoding\", charset().displayName());\n \n                         final String version = decl.attr(\"version\");\n--- a/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n+++ b/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n package org.jsoup.nodes;\n+\n+import org.jsoup.helper.Validate;\n \n import java.io.IOException;\n \n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class XmlDeclaration extends Node {\n-    static final String DECL_KEY = \"declaration\";\n+    private final String name;\n     private final boolean isProcessingInstruction; // <! if true, <? if false, declaration (and last data char should be ?)\n \n     /**\n      Create a new XML declaration\n-     @param data data\n+     @param name of declaration\n      @param baseUri base uri\n      @param isProcessingInstruction is processing instruction\n      */\n-    public XmlDeclaration(String data, String baseUri, boolean isProcessingInstruction) {\n+    public XmlDeclaration(String name, String baseUri, boolean isProcessingInstruction) {\n         super(baseUri);\n-        attributes.put(DECL_KEY, data);\n+        Validate.notNull(name);\n+        this.name = name;\n         this.isProcessingInstruction = isProcessingInstruction;\n     }\n \n         return \"#declaration\";\n     }\n \n+\n+    /**\n+     * Get the name of this declaration.\n+     * @return name of this declaration.\n+     */\n+    public String name() {\n+        return name;\n+    }\n+\n     /**\n      Get the unencoded XML declaration.\n      @return XML declaration\n      */\n     public String getWholeDeclaration() {\n-        final String decl = attributes.get(DECL_KEY);\n-        \n-        if(decl.equals(\"xml\") && attributes.size() > 1 ) {\n-            StringBuilder sb = new StringBuilder(decl);\n-            final String version = attributes.get(\"version\");\n-            \n-            if( version != null ) {\n-                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");\n-            }\n-            \n-            final String encoding = attributes.get(\"encoding\");\n-            \n-            if( encoding != null ) {\n-                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");\n-            }\n-            \n-            return sb.toString();\n-        }\n-        else {\n-            return attributes.get(DECL_KEY);\n-        }\n+        return attributes.html().trim(); // attr html starts with a \" \"\n     }\n \n \tvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         accum\n-                .append(\"<\")\n-                .append(isProcessingInstruction ? \"!\" : \"?\")\n-                .append(getWholeDeclaration())\n-                .append(\">\");\n+            .append(\"<\")\n+            .append(isProcessingInstruction ? \"!\" : \"?\")\n+            .append(name);\n+        attributes.html(accum, out);\n+        accum\n+            .append(isProcessingInstruction ? \"!\" : \"?\")\n+            .append(\">\");\n     }\n \n \tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}\n--- a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n package org.jsoup.parser;\n \n+import org.jsoup.Jsoup;\n import org.jsoup.helper.Validate;\n import org.jsoup.nodes.*;\n \n         Comment comment = new Comment(commentToken.getData(), baseUri);\n         Node insert = comment;\n         if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n+            // so we do a bit of a hack and parse the data as an element to pull the attributes out\n             String data = comment.getData();\n             if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n-                String declaration = data.substring(1);\n-                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+                Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri, Parser.xmlParser());\n+                Element el = doc.child(0);\n+                insert = new XmlDeclaration(el.tagName(), comment.baseUri(), data.startsWith(\"!\"));\n+                insert.attributes().addAll(el.attributes());\n             }\n         }\n         insertNode(insert);\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n         doc.updateMetaCharsetElement(true);\n         doc.charset(Charset.forName(charsetUtf8));\n         \n-        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n+        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\"?>\\n\" +\n                                         \"<root>\\n\" +\n                                         \" node\\n\" +\n                                         \"</root>\";\n         doc.updateMetaCharsetElement(true);\n         doc.charset(Charset.forName(charsetIso8859));\n         \n-        final String xmlCharsetISO = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetIso8859 + \"\\\">\\n\" +\n+        final String xmlCharsetISO = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetIso8859 + \"\\\"?>\\n\" +\n                                         \"<root>\\n\" +\n                                         \" node\\n\" +\n                                         \"</root>\";\n         doc.updateMetaCharsetElement(true);\n         doc.charset(Charset.forName(charsetUtf8));\n         \n-        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n+        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\"?>\\n\" +\n                                         \"<root>\\n\" +\n                                         \" node\\n\" +\n                                         \"</root>\";\n     public void testMetaCharsetUpdateXmlDisabledNoChanges() {\n         final Document doc = createXmlDocument(\"dontTouch\", \"dontTouch\", true);\n         \n-        final String xmlCharset = \"<?xml version=\\\"dontTouch\\\" encoding=\\\"dontTouch\\\">\\n\" +\n+        final String xmlCharset = \"<?xml version=\\\"dontTouch\\\" encoding=\\\"dontTouch\\\"?>\\n\" +\n                                     \"<root>\\n\" +\n                                     \" node\\n\" +\n                                     \"</root>\";\n--- a/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java\n+++ b/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Node;\n import org.jsoup.nodes.TextNode;\n+import org.jsoup.nodes.XmlDeclaration;\n import org.junit.Ignore;\n import org.junit.Test;\n \n import java.util.List;\n \n import static org.jsoup.nodes.Document.OutputSettings.Syntax;\n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n \n /**\n  * Tests XmlTreeBuilder.\n     @Test public void handlesXmlDeclarationAsDeclaration() {\n         String html = \"<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->\";\n         Document doc = Jsoup.parse(html, \"\", Parser.xmlParser());\n-        assertEquals(\"<?xml encoding='UTF-8' ?> <body> One </body> <!-- comment -->\",\n+        assertEquals(\"<?xml encoding=\\\"UTF-8\\\"?> <body> One </body> <!-- comment -->\",\n                 StringUtil.normaliseWhitespace(doc.outerHtml()));\n         assertEquals(\"#declaration\", doc.childNode(0).nodeName());\n         assertEquals(\"#comment\", doc.childNode(2).nodeName());\n         Document xmlDoc = Jsoup.parse(html, \"\", Parser.xmlParser());\n         assertEquals(\"<img src=\\\"asdf\\\" onerror=\\\"alert(1)\\\" x=\\\"\\\" />\", xmlDoc.html());\n     }\n+\n+    @Test\n+    public void testDetectCharsetEncodingDeclaration() throws IOException, URISyntaxException {\n+        File xmlFile = new File(XmlTreeBuilder.class.getResource(\"/htmltests/xml-charset.xml\").toURI());\n+        InputStream inStream = new FileInputStream(xmlFile);\n+        Document doc = Jsoup.parse(inStream, null, \"http://example.com/\", Parser.xmlParser());\n+        assertEquals(\"ISO-8859-1\", doc.charset().name());\n+        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>\",\n+            TextUtil.stripNewlines(doc.html()));\n+    }\n+\n+    @Test\n+    public void testParseDeclarationAttributes() {\n+        String xml = \"<?xml version='1' encoding='UTF-8' something='else'?><val>One</val>\";\n+        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n+        XmlDeclaration decl = (XmlDeclaration) doc.childNode(0);\n+        assertEquals(\"1\", decl.attr(\"version\"));\n+        assertEquals(\"UTF-8\", decl.attr(\"encoding\"));\n+        assertEquals(\"else\", decl.attr(\"something\"));\n+        assertEquals(\"version=\\\"1\\\" encoding=\\\"UTF-8\\\" something=\\\"else\\\"\", decl.getWholeDeclaration());\n+        assertEquals(\"<?xml version=\\\"1\\\" encoding=\\\"UTF-8\\\" something=\\\"else\\\"?>\", decl.outerHtml());\n+    }\n }", "timestamp": 1462662661, "metainfo": ""}