{"sha": "e76922661ce7d97c1730052f60062d1e2eb328c4", "log": "Correct other buffer underrun chances  Related to #967", "commit": "\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n             String tagName = r.consumeTagName();\n             t.tagPending.appendTagName(tagName);\n \n-            switch (r.consume()) {\n+            char c = r.consume();\n+            switch (c) {\n                 case '\\t':\n                 case '\\n':\n                 case '\\r':\n                 case eof: // should emit pending tag?\n                     t.eofError(this);\n                     t.transition(Data);\n-                // no default, as covered with above consumeToAny\n+                    break;\n+                default: // buffer underrun\n+                    t.tagPending.appendTagName(c);\n             }\n         }\n     },\n                 case '<':\n                     t.error(this);\n                     t.tagPending.appendAttributeName(c);\n-                // no default, as covered in consumeToAny\n+                    break;\n+                default: // buffer underrun\n+                    t.tagPending.appendAttributeName(c);\n             }\n         }\n     },\n--- a/src/test/java/org/jsoup/parser/TokeniserTest.java\n+++ b/src/test/java/org/jsoup/parser/TokeniserTest.java\n package org.jsoup.parser;\n \n import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Attribute;\n import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.select.Elements;\n import org.junit.Test;\n \n+import static org.jsoup.parser.CharacterReader.maxBufferLen;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n public class TokeniserTest {\n             String tail = \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\";\n             StringBuilder sb = new StringBuilder(preamble);\n \n-            final int charsToFillBuffer = CharacterReader.maxBufferLen - preamble.length();\n+            final int charsToFillBuffer = maxBufferLen - preamble.length();\n             for (int i = 0; i < charsToFillBuffer; i++) {\n                 sb.append('a');\n             }\n             assertTrue(src.contains(tail));\n         }\n     }\n+\n+    @Test public void handleSuperLargeTagNames() {\n+        // unlikely, but valid. so who knows.\n+\n+        StringBuilder sb = new StringBuilder(maxBufferLen);\n+        do {\n+            sb.append(\"LargeTagName\");\n+        } while (sb.length() < maxBufferLen);\n+        String tag = sb.toString();\n+        String html = \"<\" + tag + \">One</\" + tag + \">\";\n+\n+        Document doc = Parser.htmlParser().settings(ParseSettings.preserveCase).parseInput(html, \"\");\n+        Elements els = doc.select(tag);\n+        assertEquals(1, els.size());\n+        Element el = els.first();\n+        assertNotNull(el);\n+        assertEquals(\"One\", el.text());\n+        assertEquals(tag, el.tagName());\n+    }\n+\n+    @Test public void handleSuperLargeAttributeName() {\n+        StringBuilder sb = new StringBuilder(maxBufferLen);\n+        do {\n+            sb.append(\"LargAttributeName\");\n+        } while (sb.length() < maxBufferLen);\n+        String attrName = sb.toString();\n+        String html = \"<p \" + attrName + \"=foo>One</p>\";\n+\n+        Document doc = Jsoup.parse(html);\n+        Elements els = doc.getElementsByAttribute(attrName);\n+        assertEquals(1, els.size());\n+        Element el = els.first();\n+        assertNotNull(el);\n+        assertEquals(\"One\", el.text());\n+        Attribute attribute = el.attributes().asList().get(0);\n+        assertEquals(attrName.toLowerCase(), attribute.getKey());\n+        assertEquals(\"foo\", attribute.getValue());\n+    }\n }", "timestamp": 1510350975, "metainfo": ""}