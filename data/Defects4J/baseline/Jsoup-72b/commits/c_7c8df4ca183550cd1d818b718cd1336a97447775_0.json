{"sha": "7c8df4ca183550cd1d818b718cd1336a97447775", "log": "Make sure encoder works across threads", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n \n         private Entities.EscapeMode escapeMode = Entities.EscapeMode.base;\n         private Charset charset;\n-        private final ThreadLocal<CharsetEncoder> encoder = new ThreadLocal<>(); // enables the doc to be shared in multiple threads, without creating new encoders on every travers\n+        // enables the doc to be shared in multiple threads, without creating new encoders on every traverse\n+        private final ThreadLocal<CharsetEncoder> encoder = new ThreadLocal<CharsetEncoder>() {\n+            @Override\n+            protected CharsetEncoder initialValue() {\n+                return charset.newEncoder();\n+            }\n+        };\n         private boolean prettyPrint = true;\n         private boolean outline = false;\n         private int indentAmount = 1;\n          */\n         public OutputSettings charset(Charset charset) {\n             this.charset = charset;\n-            encoder.set(charset.newEncoder());\n+            encoder.remove();\n             return this;\n         }\n \n         }\n \n         CharsetEncoder encoder() {\n-            return encoder.get();\n+            CharsetEncoder ce = encoder.get();\n+            // check that the charset wasn't changed since accessed in this thread\n+            // (this is probably overkill for something we're not advertising as threadsafe)\n+            if (!ce.charset().equals(charset)) {\n+                encoder.remove();\n+                ce = encoder.get(); // retrips initialValue()\n+            }\n+            return ce;\n         }\n \n         /**\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n import org.jsoup.integration.ParseTest;\n import org.jsoup.nodes.Document.OutputSettings;\n import org.jsoup.nodes.Document.OutputSettings.Syntax;\n+import org.jsoup.select.Elements;\n import org.junit.Ignore;\n import org.junit.Test;\n \n import java.io.InputStream;\n import java.io.StringWriter;\n import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n         assertTrue(\"Should have contained a '&#xa0;' or a '&nbsp;'.\",\n                 output.contains(\"&#xa0;\") || output.contains(\"&nbsp;\"));\n     }\n+\n+    @Test public void parseAndHtmlOnDifferentThreads() throws InterruptedException {\n+        String html = \"<p>Alrighty then it's not \\uD83D\\uDCA9. <span>Next</span></p>\"; // \ud83d\udca9\n+        String asci = \"<p>Alrighty then it's not &#x1f4a9;. <span>Next</span></p>\";\n+\n+        final Document doc = Jsoup.parse(html);\n+        final String[] out = new String[1];\n+        final Elements p = doc.select(\"p\");\n+        assertEquals(html, p.outerHtml());\n+\n+        Thread thread = new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                out[0] = p.outerHtml();\n+                doc.outputSettings().charset(StandardCharsets.US_ASCII);\n+            }\n+        });\n+        thread.start();\n+        thread.join();\n+        assertEquals(html, out[0]);\n+        assertEquals(StandardCharsets.US_ASCII, doc.outputSettings().charset());\n+        assertEquals(asci, p.outerHtml());\n+    }\n }", "timestamp": 1499035131, "metainfo": ""}