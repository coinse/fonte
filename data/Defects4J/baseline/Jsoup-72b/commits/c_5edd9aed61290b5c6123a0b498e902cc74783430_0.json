{"sha": "5edd9aed61290b5c6123a0b498e902cc74783430", "log": "Improved handling of read timeout", "commit": "\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n     private static final String MULTIPART_FORM_DATA = \"multipart/form-data\";\n     private static final String FORM_URL_ENCODED = \"application/x-www-form-urlencoded\";\n     private static final int HTTP_TEMP_REDIR = 307; // http/1.1 temporary redirect, not in Java's set.\n-    private static final int ReadTimeoutMillis = 800; // max time between reads - only throws if exceeds total request timeout\n     private static final String DefaultUploadType = \"application/octet-stream\";\n \n     public static Connection connect(String url) {\n             conn.setRequestMethod(req.method().name());\n             conn.setInstanceFollowRedirects(false); // don't rely on native redirection support\n             conn.setConnectTimeout(req.timeout());\n-            conn.setReadTimeout(ReadTimeoutMillis);\n+            conn.setReadTimeout(req.timeout() / 2); // gets reduced after connection is made and status is read\n \n             if (conn instanceof HttpsURLConnection) {\n                 if (!req.validateTLSCertificates()) {\n--- a/src/test/java/org/jsoup/integration/ConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/ConnectTest.java\n     @Test public void slowReadOk() throws IOException {\n         // make sure that a slow read that is under the request timeout is still OK\n         Document doc = Jsoup.connect(SlowRider.Url)\n-            .data(SlowRider.MaxTimeParam, \"2000\") // the reqest completes in 2 seconds\n+            .data(SlowRider.MaxTimeParam, \"2000\") // the request completes in 2 seconds\n             .get();\n \n         Element h1 = doc.selectFirst(\"h1\");\n--- a/src/test/java/org/jsoup/integration/servlets/SlowRider.java\n+++ b/src/test/java/org/jsoup/integration/servlets/SlowRider.java\n  */\n public class SlowRider extends BaseServlet {\n     public static final String Url = TestServer.map(SlowRider.class);\n-    private static final int SleepTime = 1000;\n+    private static final int SleepTime = 2000;\n     public static final String MaxTimeParam = \"maxTime\";\n \n \n     @Override\n     protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n+        pause(1000);\n         res.setContentType(TextHtml);\n         res.setStatus(HttpServletResponse.SC_OK);\n         PrintWriter w = res.getWriter();\n                 log(\"Remote connection lost\");\n                 break;\n             }\n-            try {\n-                Thread.sleep(SleepTime);\n-            } catch (InterruptedException e) {\n-                break;\n-            }\n+            if (pause(SleepTime)) break;\n \n             if (maxTime > 0 && System.currentTimeMillis() > startTime + maxTime) {\n                 w.println(\"<h1>outatime</h1>\");\n         }\n     }\n \n+    private static boolean pause(int sleepTime) {\n+        try {\n+            Thread.sleep(sleepTime);\n+        } catch (InterruptedException e) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     // allow the servlet to run as a main program, for local test\n     public static void main(String[] args) {\n         TestServer.start();", "timestamp": 1509328351, "metainfo": ""}