{"sha": "1203bd459fe137e78a2a6dc2969f3c4995b726ce", "log": "Make sure the HTML parser is correctly reset before reuse  Otherwise the stack and current form element were stuffed if the DataUtil needed to reparse after switching content encoding.  Also, was needlessly redecoding when the character set was \"utf-8\" because the check was case sensitive.", "commit": "\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n                 }\n             }\n             foundCharset = validateCharset(foundCharset);\n-\n-            if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode\n+            if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)\n                 foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                 charsetName = foundCharset;\n                 byteData.rewind();\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n \n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n-import org.jsoup.nodes.*;\n+import org.jsoup.nodes.Comment;\n+import org.jsoup.nodes.DataNode;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.FormElement;\n+import org.jsoup.nodes.Node;\n+import org.jsoup.nodes.TextNode;\n import org.jsoup.select.Elements;\n \n import java.util.ArrayList;\n     private HtmlTreeBuilderState state; // the current state\n     private HtmlTreeBuilderState originalState; // original / marked state\n \n-    private boolean baseUriSetFromDoc = false;\n+    private boolean baseUriSetFromDoc;\n     private Element headElement; // the current head element\n     private FormElement formElement; // the current form element\n     private Element contextElement; // fragment parse context -- could be null even if fragment parsing\n-    private ArrayList<Element> formattingElements = new ArrayList<Element>(); // active (open) formatting elements\n-    private List<String> pendingTableCharacters = new ArrayList<String>(); // chars in table to be shifted out\n-    private Token.EndTag emptyEnd = new Token.EndTag(); // reused empty end tag\n-\n-    private boolean framesetOk = true; // if ok to go into frameset\n-    private boolean fosterInserts = false; // if next inserts should be fostered\n-    private boolean fragmentParsing = false; // if parsing a fragment of html\n+    private ArrayList<Element> formattingElements; // active (open) formatting elements\n+    private List<String> pendingTableCharacters; // chars in table to be shifted out\n+    private Token.EndTag emptyEnd; // reused empty end tag\n+\n+    private boolean framesetOk; // if ok to go into frameset\n+    private boolean fosterInserts; // if next inserts should be fostered\n+    private boolean fragmentParsing; // if parsing a fragment of html\n \n     HtmlTreeBuilder() {}\n \n     }\n \n     @Override\n-    Document parse(String input, String baseUri, ParseErrorList errors, ParseSettings settings) {\n+    protected void initialiseParse(String input, String baseUri, ParseErrorList errors, ParseSettings settings) {\n+        super.initialiseParse(input, baseUri, errors, settings);\n+\n+        // this is a bit mucky. todo - probably just create new parser objects to ensure all reset.\n         state = HtmlTreeBuilderState.Initial;\n+        originalState = null;\n         baseUriSetFromDoc = false;\n-        return super.parse(input, baseUri, errors, settings);\n+        headElement = null;\n+        formElement = null;\n+        contextElement = null;\n+        formattingElements = new ArrayList<Element>();\n+        pendingTableCharacters = new ArrayList<String>();\n+        emptyEnd = new Token.EndTag();\n+        framesetOk = true;\n+        fosterInserts = false;\n+        fragmentParsing = false;\n     }\n \n     List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors, ParseSettings settings) {\n--- a/src/main/java/org/jsoup/parser/TreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/TreeBuilder.java\n         this.settings = settings;\n         reader = new CharacterReader(input);\n         this.errors = errors;\n+        currentToken = null;\n         tokeniser = new Tokeniser(reader, errors);\n         stack = new ArrayList<Element>(32);\n         this.baseUri = baseUri;\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n         assertEquals(\"In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.\", p.text());\n     }\n \n+    @Test\n+    public void testLowercaseUtf8Charset() throws IOException {\n+        File in = getFile(\"/htmltests/lowercase-charset-test.html\");\n+        Document doc = Jsoup.parse(in, null);\n+\n+        Element form = doc.select(\"#form\").first();\n+        assertEquals(2, form.children().size());\n+        assertEquals(\"UTF-8\", doc.outputSettings().charset().name());\n+    }\n+\n     public static File getFile(String resourceName) {\n         try {\n             File file = new File(ParseTest.class.getResource(resourceName).toURI());", "timestamp": 1497321995, "metainfo": ""}