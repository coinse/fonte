{"sha": "5e386d51f396deec5743ca9cc4e3f0e7559d3956", "log": "Minor perf improvements through lower garbage objects.", "commit": "\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n                     if (values.size() == 1)\n                         header(name, values.get(0));\n                     else if (values.size() > 1) {\n-                        StringBuilder accum = new StringBuilder();\n+                        StringBuilder accum = StringUtil.stringBuilder();\n                         for (int i = 0; i < values.size(); i++) {\n                             final String val = values.get(i);\n                             if (i != 0)\n         }\n \n         private static String getRequestCookieString(Connection.Request req) {\n-            StringBuilder sb = new StringBuilder();\n+            StringBuilder sb = StringUtil.stringBuilder();\n             boolean first = true;\n             for (Map.Entry<String, String> cookie : req.cookies().entrySet()) {\n                 if (!first)\n         // for get url reqs, serialise the data map into the url\n         private static void serialiseRequestUrl(Connection.Request req) throws IOException {\n             URL in = req.url();\n-            StringBuilder url = new StringBuilder();\n+            StringBuilder url = StringUtil.stringBuilder();\n             boolean first = true;\n             // reconstitute the query, ready for appends\n             url\n--- a/src/main/java/org/jsoup/helper/StringUtil.java\n+++ b/src/main/java/org/jsoup/helper/StringUtil.java\n      * @return normalised string\n      */\n     public static String normaliseWhitespace(String string) {\n-        StringBuilder sb = new StringBuilder(string.length());\n+        StringBuilder sb = StringUtil.stringBuilder();\n         appendNormalisedWhitespace(sb, string, false);\n         return sb.toString();\n     }\n \n     /**\n      * Maintains a cached StringBuilder, to minimize new StringBuilder GCs. Prevents it from growing to big per thread.\n+     * Care must be taken to not grab more than one in the same stack (not locked or mutexed or anything).\n      * @return an empty StringBuilder\n      */\n-    // todo: roll this out everywhere\n     public static StringBuilder stringBuilder() {\n         StringBuilder sb = stringLocal.get();\n         if (sb.length() > MaxCachedBuilderSize) {\n             sb = new StringBuilder(MaxCachedBuilderSize);\n             stringLocal.set(sb);\n-        }\n-        sb.delete(0, sb.length());\n+        } else {\n+            sb.delete(0, sb.length());\n+        }\n         return sb;\n \n     }\n-    private static final ThreadLocal<StringBuilder> stringLocal = new ThreadLocal<>();\n-    private static final int MaxCachedBuilderSize = 16 * 1024;\n-    static {\n-        stringLocal.set(new StringBuilder(MaxCachedBuilderSize));\n-    }\n+\n+    private static final int MaxCachedBuilderSize = 8 * 1024;\n+    private static final ThreadLocal<StringBuilder> stringLocal = new ThreadLocal<StringBuilder>(){\n+        @Override\n+        protected StringBuilder initialValue() {\n+            return new StringBuilder(MaxCachedBuilderSize);\n+        }\n+    };\n+\n \n }\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n \n import java.nio.charset.Charset;\n import java.nio.charset.CharsetEncoder;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n \n         public enum Syntax {html, xml}\n \n         private Entities.EscapeMode escapeMode = Entities.EscapeMode.base;\n-        private Charset charset = Charset.forName(\"UTF-8\");\n+        private Charset charset;\n+        private final ThreadLocal<CharsetEncoder> encoder = new ThreadLocal<>(); // enables the doc to be shared in multiple threads, without creating new encoders on every travers\n         private boolean prettyPrint = true;\n         private boolean outline = false;\n         private int indentAmount = 1;\n         private Syntax syntax = Syntax.html;\n \n-        public OutputSettings() {}\n+        public OutputSettings() {\n+            charset(StandardCharsets.UTF_8);\n+        }\n         \n         /**\n          * Get the document's current HTML escape mode: <code>base</code>, which provides a limited set of named HTML\n          */\n         public OutputSettings charset(Charset charset) {\n             this.charset = charset;\n+            encoder.set(charset.newEncoder());\n             return this;\n         }\n \n         }\n \n         CharsetEncoder encoder() {\n-            return charset.newEncoder();\n+            return encoder.get();\n         }\n \n         /**\n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n      * @return unescaped string\n      */\n     public static String unescape(String in) {\n-        StringBuilder out = new StringBuilder();\n+        StringBuilder out = StringUtil.stringBuilder();\n         char last = 0;\n         for (char c : in.toCharArray()) {\n             if (c == ESC) {\n--- a/src/main/java/org/jsoup/parser/Tokeniser.java\n+++ b/src/main/java/org/jsoup/parser/Tokeniser.java\n package org.jsoup.parser;\n \n+import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n import org.jsoup.nodes.Entities;\n \n      * @return unescaped string from reader\n      */\n     String unescapeEntities(boolean inAttribute) {\n-        StringBuilder builder = new StringBuilder();\n+        StringBuilder builder = StringUtil.stringBuilder();\n         while (!reader.isEmpty()) {\n             builder.append(reader.consumeTo('&'));\n             if (reader.matches('&')) {\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n import org.jsoup.nodes.FormElement;\n import org.jsoup.nodes.Node;\n \n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n \n /**\n  A list of {@link Element}s, with methods that act on every element in the list.", "timestamp": 1498948734, "metainfo": ""}