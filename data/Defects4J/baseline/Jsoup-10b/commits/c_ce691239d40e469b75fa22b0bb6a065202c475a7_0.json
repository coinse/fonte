{"sha": "ce691239d40e469b75fa22b0bb6a065202c475a7", "log": "Introduced a DataNode, and SCRIPT, TEXTAREA, TITLE etc goes into DataNodes, so that Element.text() does not get clouded with script or style inners.", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/jsoup/nodes/DataNode.java\n+package org.jsoup.nodes;\n+\n+import org.apache.commons.lang.StringEscapeUtils;\n+\n+/**\n+ A data node, for contents of style, script tags etc, where contents should not show in text().\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class DataNode extends Node{\n+    private static final String DATA_KEY = \"data\";\n+\n+    public DataNode(String data) {\n+        super();\n+        attributes.put(DATA_KEY, data);\n+    }\n+\n+    public String nodeName() {\n+        return \"#data\";\n+    }\n+\n+    public String getWholeData() {\n+        return attributes.get(DATA_KEY);\n+    }\n+\n+    public String outerHtml() {\n+        return StringEscapeUtils.escapeHtml(getWholeData());\n+    }\n+\n+    public String toString() {\n+        return outerHtml();\n+    }\n+\n+    public static DataNode createFromEncoded(String encodedData) {\n+        String data = StringEscapeUtils.unescapeHtml(encodedData);\n+        return new DataNode(data);\n+    }\n+}\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n         return sb.toString();\n     }\n \n+    public String data() {\n+        StringBuilder sb = new StringBuilder();\n+\n+        for (Node childNode : childNodes) {\n+            if (childNode instanceof DataNode) {\n+                DataNode data = (DataNode) childNode;\n+                sb.append(data.getWholeData());\n+            } else if (childNode instanceof Element) {\n+                Element element = (Element) childNode;\n+                String elementData = element.data();\n+                sb.append(elementData);\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n     /**\n      * Gets the literal value of this element's \"class\" attribute, which may include multiple class names, space\n      * separated (e.g. <code>&lt;div class=\"header gray\"></code> returns \"<code>header gray</code>\")\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n         if (tag.isData()) {\n             String data = tq.chompTo(\"</\" + tagName);\n             tq.chompTo(\">\");\n-            TextNode textNode = TextNode.createFromEncoded(data); // TODO: maybe have this be another data type? So doesn't come back in text()?\n-            child.addChild(textNode);\n+            DataNode dataNode = DataNode.createFromEncoded(data);\n+            child.addChild(dataNode);\n \n             if (tag.equals(titleTag))\n-                doc.setTitle(child.text());\n+                doc.setTitle(child.data());\n         }\n         addChildToParent(child);\n     }\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n     @Test public void handlesDataOnlyTags() {\n         String t = \"<textarea><p>Foo</p>\\n<p>Bar</p></TEXTAREA>\";\n         List<Element> tels = Jsoup.parse(t).getElementsByTag(\"textarea\");\n-        assertEquals(\"<p>Foo</p>\\n<p>Bar</p>\", tels.get(0).text());\n+        assertEquals(\"<p>Foo</p>\\n<p>Bar</p>\", tels.get(0).data());\n+\n+        String s = \"<p>Hello</p><script>Nope</script><p>There</p>\";\n+        Document doc = Jsoup.parse(s);\n+        assertEquals(\"Hello There\", doc.text());\n+        assertEquals(\"Nope\", doc.data());\n     }\n \n     @Test public void createsImplicitLists() {", "timestamp": 1309605102, "metainfo": ""}