{"sha": "214c5686b075152d2bf8995731632080ed8f8e83", "log": "Added :contains(text) selector", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n     \n     /**\n+     * Find elements that contain the specified string. The search is case insensitive. The text may appear directly\n+     * in the element, or in any of its descendants.\n+     * @param searchText\n+     * @return elements that contain the string, case insensitive.\n+     */\n+    public Elements getElementsContainingText(String searchText) {\n+        return Collector.collect(new Evaluator.ContainsText(searchText), this);\n+    }\n+    \n+    /**\n      * Find all elements under this element (including self, and children of children).\n      * \n      * @return all elements\n--- a/src/main/java/org/jsoup/nodes/Evaluator.java\n+++ b/src/main/java/org/jsoup/nodes/Evaluator.java\n             this.index = index;\n         }\n     }\n+    \n+    static final class ContainsText extends Evaluator {\n+        private String searchText;\n+        ContainsText(String searchText) {\n+            this.searchText = searchText.toLowerCase();\n+        }\n+\n+        public boolean matches(Element element) {\n+            return (element.text().toLowerCase().contains(searchText));\n+        }\n+    }\n \n \n }\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n  <tr><td><code>E:gt(<em>n</em>)</code></td><td>an Element whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n  <tr><td><code>E:eq(<em>n</em>)</code></td><td>an Element whose sibling index is equal to <em>n</em></td><td><code>td:eq(1)</code> finds the first cell of each row</td></tr>\n  <tr><td><code>E:has(<em>selector</em>)</code></td><td>an Element that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n+ <tr><td><code>E:contains(<em>text</em>)</code></td><td>an Element that contains the specified text. The search is case insensitive. The text may appear in the found Element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n  </table>\n \n  @see Element#select(String)\n             return indexEquals();\n         } else if (tq.matchChomp(\":has(\")) {\n             return has();\n+        } else if (tq.matchChomp(\":contains(\")) {\n+            return contains();\n         } else { // unhandled\n             throw new SelectorParseException(\"Could not parse query \" + query);\n         }\n         Validate.notEmpty(subQuery, \":has(el) subselect must not be empty\");\n \n         return filterForParentsOfDescendants(elements, select(subQuery, elements));\n+    }\n+    \n+    // pseudo selector :contains(text)\n+    private Elements contains() {\n+        String searchText = tq.chompTo(\")\");\n+        Validate.notEmpty(searchText, \":contains(text) query must not be empty\");\n+        \n+        return root.getElementsContainingText(searchText);\n     }\n \n     // direct child descendants\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(\"1\", divs3.get(1).id());\n         assertEquals(\"2\", divs3.get(2).id());\n     }\n+    \n+    @Test public void testPseudoContains() {\n+        Document doc = Jsoup.parse(\"<div><p>The Rain.</p> <p class=light>The <i>rain</i>.</p> <p>Rain, the.</p></div>\");\n+        \n+        Elements ps1 = doc.select(\"p:contains(Rain)\");\n+        assertEquals(3, ps1.size());\n+        \n+        Elements ps2 = doc.select(\"p:contains(the rain)\");\n+        assertEquals(2, ps2.size());\n+        assertEquals(\"The Rain.\", ps2.first().html());\n+        assertEquals(\"The <i>rain</i>.\", ps2.last().html());\n+        \n+        Elements ps3 = doc.select(\"p:contains(the Rain):has(i)\");\n+        assertEquals(1, ps3.size());\n+        assertEquals(\"light\", ps3.first().className());\n+    }\n }", "timestamp": 1309605113, "metainfo": ""}