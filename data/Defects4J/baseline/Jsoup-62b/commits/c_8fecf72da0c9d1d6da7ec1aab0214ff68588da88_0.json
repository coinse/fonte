{"sha": "8fecf72da0c9d1d6da7ec1aab0214ff68588da88", "log": "Improved CSS query parse validation  Fixes #803", "commit": "\n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n                 end = pos; // don't include the outer match pair in the return\n             last = c;\n         } while (depth > 0);\n-        return (end >= 0) ? queue.substring(start, end) : \"\";\n+        final String out = (end >= 0) ? queue.substring(start, end) : \"\";\n+        if (depth > 0) {// ran out of queue before seeing enough )\n+            Validate.fail(\"Did not find balanced maker at \" + out);\n+        }\n+        return out;\n     }\n     \n     /**\n--- a/src/main/java/org/jsoup/select/QueryParser.java\n+++ b/src/main/java/org/jsoup/select/QueryParser.java\n      * @return Evaluator\n      */\n     public static Evaluator parse(String query) {\n-        QueryParser p = new QueryParser(query);\n-        return p.parse();\n+        try {\n+            QueryParser p = new QueryParser(query);\n+            return p.parse();\n+        } catch (IllegalArgumentException e) {\n+            throw new Selector.SelectorParseException(e.getMessage());\n+        }\n     }\n \n     /**\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n     public void testYahooArticle() throws IOException {\n         File in = getFile(\"/htmltests/yahoo-article-1.html\");\n         Document doc = Jsoup.parse(in, \"UTF-8\", \"http://news.yahoo.com/s/nm/20100831/bs_nm/us_gm_china\");\n-        Element p = doc.select(\"p:contains(Volt will be sold in the United States\").first();\n+        Element p = doc.select(\"p:contains(Volt will be sold in the United States)\").first();\n         assertEquals(\"In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.\", p.text());\n     }\n \n--- a/src/test/java/org/jsoup/parser/TokenQueueTest.java\n+++ b/src/test/java/org/jsoup/parser/TokenQueueTest.java\n     }\n \n     @Test public void chompBalancedMatchesAsMuchAsPossible() {\n-        TokenQueue tq = new TokenQueue(\"unbalanced(something(or another\");\n+        TokenQueue tq = new TokenQueue(\"unbalanced(something(or another)) else\");\n         tq.consumeTo(\"(\");\n         String match = tq.chompBalanced('(', ')');\n-        assertEquals(\"something(or another\", match);\n+        assertEquals(\"something(or another)\", match);\n     }\n     \n     @Test public void unescape() {\n--- a/src/test/java/org/jsoup/select/QueryParserTest.java\n+++ b/src/test/java/org/jsoup/select/QueryParserTest.java\n         assertEquals(2, andLeft.evaluators.size());\n     }\n \n-    @Test public void exceptionOnUncloseAttribute() {\n-        boolean threw = false;\n-        try {Evaluator parse = QueryParser.parse(\"section > a[href=\\\"\");}\n-        catch (IllegalArgumentException e) {\n-            threw = true;\n-        }\n-        assertTrue(threw);\n+    @Test(expected = Selector.SelectorParseException.class) public void exceptionOnUncloseAttribute() {\n+        Evaluator parse = QueryParser.parse(\"section > a[href=\\\"]\");\n+    }\n+\n+    @Test(expected = Selector.SelectorParseException.class)  public void testParsesSingleQuoteInContains() {\n+        Evaluator parse = QueryParser.parse(\"p:contains(One \\\" One)\");\n     }\n }\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(2, doc.select(\"DiV\").size());\n         assertEquals(1, doc.select(\"DiV[TiTLE]\").size());\n         assertEquals(1, doc.select(\"DiV[TiTLE=BAR]\").size());\n-        assertEquals(0, doc.select(\"DiV[TiTLE=BARBARELLA\").size());\n+        assertEquals(0, doc.select(\"DiV[TiTLE=BARBARELLA]\").size());\n     }\n \n     @Test public void adjacentSiblings() {\n         assertEquals(\"0\", divs1.get(0).id());\n         assertEquals(\"1\", divs1.get(1).id());\n \n-        Elements divs2 = doc.select(\"div:has([class]\");\n+        Elements divs2 = doc.select(\"div:has([class])\");\n         assertEquals(1, divs2.size());\n         assertEquals(\"1\", divs2.get(0).id());\n \n     @Test public void attributeWithBrackets() {\n         String html = \"<div data='End]'>One</div> <div data='[Another)]]'>Two</div>\";\n         Document doc = Jsoup.parse(html);\n-        assertEquals(\"One\", doc.select(\"div[data='End]'\").first().text());\n-        assertEquals(\"Two\", doc.select(\"div[data='[Another)]]'\").first().text());\n-        assertEquals(\"One\", doc.select(\"div[data=\\\"End]\\\"\").first().text());\n-        assertEquals(\"Two\", doc.select(\"div[data=\\\"[Another)]]\\\"\").first().text());\n+        assertEquals(\"One\", doc.select(\"div[data='End]']\").first().text());\n+        assertEquals(\"Two\", doc.select(\"div[data='[Another)]]']\").first().text());\n+        assertEquals(\"One\", doc.select(\"div[data=\\\"End]\\\"]\").first().text());\n+        assertEquals(\"Two\", doc.select(\"div[data=\\\"[Another)]]\\\"]\").first().text());\n     }\n \n     @Test public void containsData() {\n         assertEquals(\"script\", dataEls4.get(1).tagName());\n         assertEquals(\"span\", dataEls4.get(2).tagName());\n     }\n+\n+    @Test public void containsWithQuote() {\n+        String html = \"<p>One'One</p><p>One'Two</p>\";\n+        Document doc = Jsoup.parse(html);\n+        Elements els = doc.select(\"p:contains(One\\\\'One)\");\n+        assertEquals(1, els.size());\n+        assertEquals(\"One'One\", els.text());\n+    }\n }", "timestamp": 1483674515, "metainfo": ""}