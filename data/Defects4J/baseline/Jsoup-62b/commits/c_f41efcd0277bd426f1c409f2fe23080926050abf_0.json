{"sha": "f41efcd0277bd426f1c409f2fe23080926050abf", "log": "Optimize Attribute#iterator It allocates a lot of memory during the parsing through ParseSettings#normalizeAttributes. this new implementation just wrap the LinkedHashMap values iterator in a read-only iterator.  Iterating 1000 times over htmltests/yahoo-article-1.html was allocating 970Mb, with this optimization it's now 350Mb  Fixes #754", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n     }\n \n     public Iterator<Attribute> iterator() {\n-        return asList().iterator();\n+        if (attributes == null || attributes.isEmpty()) {\n+            return Collections.<Attribute>emptyList().iterator();\n+        }\n+        \n+        return new AttributesReadOnlyIterator(attributes.values().iterator());\n     }\n \n     /**\n     private static String dataKey(String key) {\n         return dataPrefix + key;\n     }\n+    \n+    private static class AttributesReadOnlyIterator implements Iterator<Attribute> {\n+\n+        private Iterator<Attribute> iterator;\n+\n+        public AttributesReadOnlyIterator(Iterator<Attribute> iterator) {\n+            this.iterator = iterator;\n+        }\n+\n+        public boolean hasNext() {\n+            return iterator.hasNext();\n+        }\n+\n+        public Attribute next() {\n+            return iterator.next();\n+        }\n+\n+        public void remove() {\n+            throw new UnsupportedOperationException();\n+        }\n+        \n+    }\n }", "timestamp": 1471980764, "metainfo": ""}