{"sha": "437d8eca9f51dd0ed7af5b828412ee96ac192f17", "log": "Handle  unclosed <title> tags in document by breaking out of the title at the next start tag, instead of eating up to the end of the document.  Fixes #82", "commit": "\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n      */\n     static String getCharsetFromContentType(String contentType) {\n         if (contentType == null) return null;\n-        \n         Matcher m = charsetPattern.matcher(contentType);\n         if (m.find()) {\n             return m.group(1).trim().toUpperCase();\n--- a/src/main/java/org/jsoup/parser/CharacterReader.java\n+++ b/src/main/java/org/jsoup/parser/CharacterReader.java\n         }\n     }\n \n+    boolean containsIgnoreCase(String seq) {\n+        // used to check presence of </title>, </style>. only finds consistent case.\n+        String loScan = seq.toLowerCase();\n+        String hiScan = seq.toUpperCase();\n+        return (input.indexOf(loScan, pos) > -1) || (input.indexOf(hiScan, pos) > -1);\n+    }\n+\n     @Override\n     public String toString() {\n         return input.substring(pos);\n--- a/src/main/java/org/jsoup/parser/Tokeniser.java\n+++ b/src/main/java/org/jsoup/parser/Tokeniser.java\n         return tagPending.tagName.equals(lastStartTag.tagName);\n     }\n \n+    String appropriateEndTagName() {\n+        return lastStartTag.tagName;\n+    }\n+\n     boolean isTrackErrors() {\n         return trackErrors;\n     }\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n             if (r.matches('/')) {\n                 t.createTempBuffer();\n                 t.advanceTransition(RCDATAEndTagOpen);\n+            } else if (r.matchesLetter() && !r.containsIgnoreCase(\"</\" + t.appropriateEndTagName())) {\n+                // diverge from spec: got a start tag, but there's no appropriate end tag (</title>), so rather than\n+                // consuming to EOF; break out here\n+                t.tagPending = new Token.EndTag(t.appropriateEndTagName());\n+                t.emitTagPending();\n+                r.unconsume(); // undo \"<\"\n+                t.transition(Data);\n             } else {\n                 t.emit(\"<\");\n                 t.transition(Rcdata);\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n     }\n \n     @Test public void parsesUnterminatedTextarea() {\n+        // don't parse right to end, but break on <p>\n         Document doc = Jsoup.parse(\"<body><p><textarea>one<p>two\");\n         Element t = doc.select(\"textarea\").first();\n-        assertEquals(\"one<p>two\", t.text());\n+        assertEquals(\"one\", t.text());\n+        assertEquals(\"two\", doc.select(\"p\").get(1).text());\n     }\n \n     @Test public void parsesUnterminatedOption() {\n         assertEquals(\"Data\", Jsoup.parse(\"<title>Data</title>\").title());\n         assertEquals(\"Data\", Jsoup.parse(\"<title>Data</title >\").title());\n     }\n+\n+    @Test public void handlesUnclosedTitle() {\n+        Document one = Jsoup.parse(\"<title>One <b>Two <b>Three</TITLE><p>Test</p>\"); // has title, so <b> is plain text\n+        assertEquals(\"One <b>Two <b>Three\", one.title());\n+        assertEquals(\"Test\", one.select(\"p\").first().text());\n+\n+        Document two = Jsoup.parse(\"<title>One<b>Two <p>Test</p>\"); // no title, so <b> causes </title> breakout\n+        assertEquals(\"One\", two.title());\n+        assertEquals(\"<b>Two <p>Test</p></b>\", two.body().html());\n+    }\n }", "timestamp": 1309605129, "metainfo": ""}