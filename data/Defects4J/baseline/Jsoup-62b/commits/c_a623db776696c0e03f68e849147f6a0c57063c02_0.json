{"sha": "a623db776696c0e03f68e849147f6a0c57063c02", "log": "Check attribute name is not empty after trimming before creating attribute  Fixes #793", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n      * @see #createFromEncoded\n      */\n     public Attribute(String key, String value) {\n-        Validate.notEmpty(key);\n+        Validate.notNull(key);\n         Validate.notNull(value);\n         this.key = key.trim();\n+        Validate.notEmpty(key); // trimming could potentially make empty, so validate here\n         this.value = value;\n     }\n \n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n                 attributes = new Attributes();\n \n             if (pendingAttributeName != null) {\n-                Attribute attribute;\n-                if (hasPendingAttributeValue)\n-                    attribute = new Attribute(pendingAttributeName,\n-                        pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n-                else if (hasEmptyAttributeValue)\n-                    attribute = new Attribute(pendingAttributeName, \"\");\n-                else\n-                    attribute = new BooleanAttribute(pendingAttributeName);\n-                attributes.put(attribute);\n+                // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n+                pendingAttributeName = pendingAttributeName.trim();\n+                if (pendingAttributeName.length() > 0) {\n+                    Attribute attribute;\n+                    if (hasPendingAttributeValue)\n+                        attribute = new Attribute(pendingAttributeName,\n+                            pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n+                    else if (hasEmptyAttributeValue)\n+                        attribute = new Attribute(pendingAttributeName, \"\");\n+                    else\n+                        attribute = new BooleanAttribute(pendingAttributeName);\n+                    attributes.put(attribute);\n+                }\n             }\n             pendingAttributeName = null;\n             hasEmptyAttributeValue = false;\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         Document doc = parser.parseInput(\"<div id=1><SPAN ID=2>\", \"\");\n         assertEquals(\"<html> <head></head> <body> <div id=\\\"1\\\"> <SPAN ID=\\\"2\\\"></SPAN> </div> </body> </html>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n     }\n+\n+    @Test public void handlesControlCodeInAttributeName() {\n+        Document doc = Jsoup.parse(\"<p><a \\06=foo>One</a><a/\\06=bar><a foo\\06=bar>Two</a></p>\");\n+        assertEquals(\"<p><a>One</a><a></a><a foo=\\\"bar\\\">Two</a></p>\", doc.body().html());\n+    }\n }\n--- a/src/test/java/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/safety/CleanerTest.java\n         w.addAttributes(\"a\", \"href\");\n         w.removeProtocols(\"a\", \"href\", \"javascript\"); // with no protocols enforced, this was a noop. Now validates.\n     }\n+\n+    @Test public void handlesControlCharactersAfterTagName() {\n+        String html = \"<a/\\06>\";\n+        String clean = Jsoup.clean(html, Whitelist.basic());\n+        assertEquals(\"<a rel=\\\"nofollow\\\"></a>\", clean);\n+    }\n }", "timestamp": 1483657649, "metainfo": ""}