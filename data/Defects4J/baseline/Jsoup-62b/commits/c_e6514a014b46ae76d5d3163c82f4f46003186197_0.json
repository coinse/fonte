{"sha": "e6514a014b46ae76d5d3163c82f4f46003186197", "log": "Merge branch 'pr/574'", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n package org.jsoup;\n \n import org.jsoup.nodes.Document;\n+import org.jsoup.parser.HtmlTreeBuilder;\n import org.jsoup.parser.Parser;\n \n import java.io.IOException;\n     Connection cookies(Map<String, String> cookies);\n \n     /**\n-     * Provide an alternate parser to use when parsing the response to a Document.\n+     * Provide an alternate parser to use when parsing the response to a Document. If not set, defaults to the HTML\n+     * parser, unless the response content-type is XML, in which case the XML parser is used.\n      * @param parser alternate parser\n      * @return this Connection, for chaining\n      */\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n         private boolean ignoreHttpErrors = false;\n         private boolean ignoreContentType = false;\n         private Parser parser;\n+        private boolean parserDefined = false; // called parser(...) vs initialized in ctor\n         private boolean validateTSLCertificates = true;\n         private String postDataCharset = DataUtil.defaultCharset;\n \n \n         public Request parser(Parser parser) {\n             this.parser = parser;\n+            parserDefined = true;\n             return this;\n         }\n \n         private Connection.Request req;\n \n         /*\n-         * For example {@code application/atom+xml;charset=utf-8}.\n-         * Stepping through it: start with {@code \"application/\"}, follow with word\n-         * characters up to a {@code \"+xml\"}, and then maybe more ({@code .*}).\n+         * Matches XML content types (like text/xml, application/xhtml+xml;charset=UTF8, etc)\n          */\n-        private static final Pattern xmlContentTypeRxp = Pattern.compile(\"application/\\\\w+\\\\+xml.*\");\n+        private static final Pattern xmlContentTypeRxp = Pattern.compile(\"(application|text)/\\\\w*\\\\+?xml.*\");\n \n         Response() {\n             super();\n                 if (contentType != null\n                         && !req.ignoreContentType()\n                         && !contentType.startsWith(\"text/\")\n-                        && !contentType.startsWith(\"application/xml\")\n                         && !xmlContentTypeRxp.matcher(contentType).matches()\n                         )\n                     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml\",\n                             contentType, req.url().toString());\n+\n+                // switch to the XML parser if content type is xml and not parser not explicitly set\n+                if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n+                    // only flip it if a HttpConnection.Request (i.e. don't presume other impls want it):\n+                    if (req instanceof HttpConnection.Request && !((Request) req).parserDefined) {\n+                        req.parser(Parser.xmlParser());\n+                    }\n+                }\n \n                 res.charset = DataUtil.getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it\n                 if (conn.getContentLength() != 0) { // -1 means unknown, chunked. sun throws an IO exception on 500 response with no content when trying to read body\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n /**\n  * HTML Tree Builder; creates a DOM from Tokens.\n  */\n-class HtmlTreeBuilder extends TreeBuilder {\n+public class HtmlTreeBuilder extends TreeBuilder {\n     // tag searches\n     private static final String[] TagsScriptStyle = new String[]{\"script\", \"style\"};\n     public static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"};\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n import org.jsoup.HttpStatusException;\n import org.jsoup.Jsoup;\n import org.jsoup.UnsupportedMimeTypeException;\n+import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.W3CDom;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.FormElement;\n+import org.jsoup.parser.HtmlTreeBuilder;\n+import org.jsoup.parser.Parser;\n+import org.jsoup.parser.XmlTreeBuilder;\n import org.junit.Ignore;\n import org.junit.Test;\n \n         assertTrue(html.contains(\"jsoup\"));\n     }\n \n+    @Test\n+    public void fetchHandlesXml() throws IOException {\n+        // should auto-detect xml and use XML parser, unless explicitly requested the html parser\n+        String xmlUrl = \"http://direct.infohound.net/tools/parse-xml.xml\";\n+        Connection con = Jsoup.connect(xmlUrl);\n+        Document doc = con.get();\n+        Connection.Request req = con.request();\n+        assertTrue(req.parser().getTreeBuilder() instanceof XmlTreeBuilder);\n+        assertEquals(\"<xml> <link> one </link> <table> Two </table> </xml>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n+    }\n+\n+    @Test\n+    public void fetchHandlesXmlAsHtmlWhenParserSet() throws IOException {\n+        // should auto-detect xml and use XML parser, unless explicitly requested the html parser\n+        String xmlUrl = \"http://direct.infohound.net/tools/parse-xml.xml\";\n+        Connection con = Jsoup.connect(xmlUrl).parser(Parser.htmlParser());\n+        Document doc = con.get();\n+        Connection.Request req = con.request();\n+        assertTrue(req.parser().getTreeBuilder() instanceof HtmlTreeBuilder);\n+        assertEquals(\"<html> <head></head> <body> <xml> <link>one <table> Two </table> </xml> </body> </html>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n+    }\n+\n }", "timestamp": 1436150689, "metainfo": ""}