{"sha": "684ae68a631f6bd9b6d962e42e46bf0812d8fa4e", "log": "Merge branch 'pr/486'", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n     private OutputSettings outputSettings = new OutputSettings();\n     private QuirksMode quirksMode = QuirksMode.noQuirks;\n     private String location;\n+    private boolean updateMetaCharset = false;\n \n     /**\n      Create a new, empty Document.\n \n         normaliseStructure(\"head\", htmlEl);\n         normaliseStructure(\"body\", htmlEl);\n+        \n+        ensureMetaCharsetElement();\n         \n         return this;\n     }\n     public String nodeName() {\n         return \"#document\";\n     }\n+    \n+    /**\n+     * Sets the charset used in this document. This method is equivalent\n+     * to {@link OutputSettings#charset(java.nio.charset.Charset)\n+     * OutputSettings.charset(Charset)} but in addition it updates the\n+     * charset / encoding element within the document.\n+     * \n+     * <p>This enables\n+     * {@link #updateMetaCharsetElement(boolean) meta charset update}.</p>\n+     * \n+     * <p>If there's no element with charset / encoding information yet it will\n+     * be created. Obsolete charset / encoding definitions are removed!</p>\n+     * \n+     * <p><b>Elements used:</b></p>\n+     * \n+     * <ul>\n+     * <li><b>Html:</b> <i>&lt;meta charset=\"CHARSET\"&gt;</i></li>\n+     * <li><b>Xml:</b> <i>&lt;?xml version=\"1.0\" encoding=\"CHARSET\"&gt;</i></li>\n+     * </ul>\n+     * \n+     * @param charset Charset\n+     * \n+     * @see #updateMetaCharsetElement(boolean) \n+     * @see OutputSettings#charset(java.nio.charset.Charset) \n+     */\n+    public void charset(Charset charset) {\n+        updateMetaCharsetElement(true);\n+        outputSettings.charset(charset);\n+        ensureMetaCharsetElement();\n+    }\n+    \n+    /**\n+     * Returns the charset used in this document. This method is equivalent\n+     * to {@link OutputSettings#charset()}.\n+     * \n+     * @return Current Charset\n+     * \n+     * @see OutputSettings#charset() \n+     */\n+    public Charset charset() {\n+        return outputSettings.charset();\n+    }\n+    \n+    /**\n+     * Sets whether the element with charset information in this document is\n+     * updated on changes through {@link #charset(java.nio.charset.Charset)\n+     * Document.charset(Charset)} or not.\n+     * \n+     * <p>If set to <tt>false</tt> <i>(default)</i> there are no elements\n+     * modified.</p>\n+     * \n+     * @param update If <tt>true</tt> the element updated on charset\n+     * changes, <tt>false</tt> if not\n+     * \n+     * @see #charset(java.nio.charset.Charset) \n+     */\n+    public void updateMetaCharsetElement(boolean update) {\n+        this.updateMetaCharset = true;\n+    }\n+    \n+    /**\n+     * Returns whether the element with charset information in this document is\n+     * updated on changes through {@link #charset(java.nio.charset.Charset)\n+     * Document.charset(Charset)} or not.\n+     * \n+     * @return Returns <tt>true</tt> if the element is updated on charset\n+     * changes, <tt>false</tt> if not\n+     */\n+    public boolean updateMetaCharsetElement() {\n+        return updateMetaCharset;\n+    }\n \n     @Override\n     public Document clone() {\n         clone.outputSettings = this.outputSettings.clone();\n         return clone;\n     }\n+    \n+    /**\n+     * Ensures a meta charset (html) or xml declaration (xml) with the current\n+     * encoding used. This only applies with\n+     * {@link #updateMetaCharsetElement(boolean) updateMetaCharset} set to\n+     * <tt>true</tt>, otherwise this method does nothing.\n+     * \n+     * <ul>\n+     * <li>An exsiting element gets updated with the current charset</li>\n+     * <li>If there's no element yet it will be inserted</li>\n+     * <li>Obsolete elements are removed</li>\n+     * </ul>\n+     * \n+     * <p><b>Elements used:</b></p>\n+     * \n+     * <ul>\n+     * <li><b>Html:</b> <i>&lt;meta charset=\"CHARSET\"&gt;</i></li>\n+     * <li><b>Xml:</b> <i>&lt;?xml version=\"1.0\" encoding=\"CHARSET\"&gt;</i></li>\n+     * </ul>\n+     */\n+    private void ensureMetaCharsetElement() {\n+        if (updateMetaCharset == true) {\n+            OutputSettings.Syntax syntax = outputSettings().syntax();\n+\n+            if (syntax == OutputSettings.Syntax.html) {\n+                Element metaCharset = select(\"meta[charset]\").first();\n+\n+                if (metaCharset != null) {\n+                    metaCharset.attr(\"charset\", charset().displayName());\n+                } else {\n+                    Element head = head();\n+\n+                    if (head != null) {\n+                        head.appendElement(\"meta\").attr(\"charset\", charset().displayName());\n+                    }\n+                }\n+\n+                // Remove obsolete elements\n+                select(\"meta[name=charset]\").remove();\n+            } else if (syntax == OutputSettings.Syntax.xml) {\n+                Node node = childNodes().get(0);\n+\n+                if (node instanceof XmlDeclaration) {\n+                    XmlDeclaration decl = (XmlDeclaration) node;\n+\n+                    if (decl.attr(XmlDeclaration.DECL_KEY).equals(\"xml\")) {\n+                        decl.attr(\"encoding\", charset().displayName());\n+\n+                        final String version = decl.attr(\"version\");\n+\n+                        if (version != null) {\n+                            decl.attr(\"version\", \"1.0\");\n+                        }\n+                    } else {\n+                        decl = new XmlDeclaration(\"xml\", baseUri, false);\n+                        decl.attr(\"version\", \"1.0\");\n+                        decl.attr(\"encoding\", charset().displayName());\n+\n+                        prependChild(decl);\n+                    }\n+                } else {\n+                    XmlDeclaration decl = new XmlDeclaration(\"xml\", baseUri, false);\n+                    decl.attr(\"version\", \"1.0\");\n+                    decl.attr(\"encoding\", charset().displayName());\n+\n+                    prependChild(decl);\n+                }\n+            } else {\n+                // Unsupported syntax - nothing to do yet\n+            }\n+        }\n+    }\n+    \n \n     /**\n      * A Document's output settings control the form of the text() and html() methods.\n         private Syntax syntax = Syntax.html;\n \n         public OutputSettings() {}\n-\n+        \n         /**\n          * Get the document's current HTML escape mode: <code>base</code>, which provides a limited set of named HTML\n          * entities and escapes other characters as numbered entities for maximum compatibility; or <code>extended</code>,\n          * @return the document's output settings, for chaining\n          */\n         public OutputSettings charset(Charset charset) {\n-            // todo: this should probably update the doc's meta charset\n             this.charset = charset;\n             charsetEncoder = charset.newEncoder();\n             return this;\n--- a/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n+++ b/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class XmlDeclaration extends Node {\n-    private static final String DECL_KEY = \"declaration\";\n+    static final String DECL_KEY = \"declaration\";\n     private final boolean isProcessingInstruction; // <! if true, <? if false, declaration (and last data char should be ?)\n \n     /**\n      @return XML declaration\n      */\n     public String getWholeDeclaration() {\n-        return attributes.get(DECL_KEY);\n+        final String decl = attributes.get(DECL_KEY);\n+        \n+        if( decl.equals(\"xml\") == true && attributes.size() > 1 ) {\n+            StringBuilder sb = new StringBuilder(decl);\n+            final String version = attributes.get(\"version\");\n+            \n+            if( version != null ) {\n+                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");\n+            }\n+            \n+            final String encoding = attributes.get(\"encoding\");\n+            \n+            if( encoding != null ) {\n+                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");\n+            }\n+            \n+            return sb.toString();\n+        }\n+        else {\n+            return attributes.get(DECL_KEY);\n+        }\n     }\n-\n+    \n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n         accum\n                 .append(\"<\")\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n package org.jsoup.nodes;\n \n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n import org.jsoup.integration.ParseTest;\n+import org.jsoup.nodes.Document.OutputSettings.Syntax;\n+import static org.junit.Assert.*;\n import org.junit.Ignore;\n import org.junit.Test;\n \n-import java.io.File;\n-import java.io.IOException;\n-\n-import static org.jsoup.nodes.Document.OutputSettings.Syntax;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-\n /**\n  Tests for Document.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class DocumentTest {\n+    private static final String charsetUtf8 = \"UTF-8\";\n+    private static final String charsetIso8859 = \"ISO-8859-1\";\n+    \n+    \n     @Test public void setTextPreservesDocumentStructure() {\n         Document doc = Jsoup.parse(\"<p>Hello</p>\");\n         doc.text(\"Replaced\");\n         Document doc = Jsoup.parse(\"<p title=\u03c0>\u03c0 & < > </p>\");\n         // default is utf-8\n         assertEquals(\"<p title=\\\"\u03c0\\\">\u03c0 &amp; &lt; &gt; </p>\", doc.body().html());\n-        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n+        assertEquals(\"UTF-8\", doc.outputSettings().charset().name());\n \n         doc.outputSettings().charset(\"ascii\");\n         assertEquals(Entities.EscapeMode.base, doc.outputSettings().escapeMode());\n         assertEquals(docA.hashCode(), docB.hashCode());\n         assertFalse(docA.hashCode() == docC.hashCode());\n     }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateUtf8() {\n+        final Document doc = createHtmlDocument(\"changeThis\");\n+        doc.updateMetaCharsetElement(true);\n+        doc.charset(Charset.forName(charsetUtf8));\n+        \n+        final String htmlCharsetUTF8 = \"<html>\\n\" +\n+                                        \" <head>\\n\" +\n+                                        \"  <meta charset=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n+                                        \" </head>\\n\" +\n+                                        \" <body></body>\\n\" +\n+                                        \"</html>\";\n+        assertEquals(htmlCharsetUTF8, doc.toString());\n+        \n+        Element selectedElement = doc.select(\"meta[charset]\").first();\n+        assertEquals(charsetUtf8, doc.charset().name());\n+        assertEquals(charsetUtf8, selectedElement.attr(\"charset\"));\n+        assertEquals(doc.charset(), doc.outputSettings().charset());\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateIso8859() {\n+        final Document doc = createHtmlDocument(\"changeThis\");\n+        doc.updateMetaCharsetElement(true);\n+        doc.charset(Charset.forName(charsetIso8859));\n+        \n+        final String htmlCharsetISO = \"<html>\\n\" +\n+                                        \" <head>\\n\" +\n+                                        \"  <meta charset=\\\"\" + charsetIso8859 + \"\\\">\\n\" +\n+                                        \" </head>\\n\" +\n+                                        \" <body></body>\\n\" +\n+                                        \"</html>\";\n+        assertEquals(htmlCharsetISO, doc.toString());\n+        \n+        Element selectedElement = doc.select(\"meta[charset]\").first();\n+        assertEquals(charsetIso8859, doc.charset().name());\n+        assertEquals(charsetIso8859, selectedElement.attr(\"charset\"));\n+        assertEquals(doc.charset(), doc.outputSettings().charset());\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateNoCharset() {\n+        final Document docNoCharset = Document.createShell(\"\");\n+        docNoCharset.updateMetaCharsetElement(true);\n+        docNoCharset.charset(Charset.forName(charsetUtf8));\n+        \n+        assertEquals(charsetUtf8, docNoCharset.select(\"meta[charset]\").first().attr(\"charset\"));\n+        \n+        final String htmlCharsetUTF8 = \"<html>\\n\" +\n+                                        \" <head>\\n\" +\n+                                        \"  <meta charset=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n+                                        \" </head>\\n\" +\n+                                        \" <body></body>\\n\" +\n+                                        \"</html>\";\n+        assertEquals(htmlCharsetUTF8, docNoCharset.toString()); \n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateDisabled() {\n+        final Document docDisabled = Document.createShell(\"\");\n+        \n+        final String htmlNoCharset = \"<html>\\n\" +\n+                                        \" <head></head>\\n\" +\n+                                        \" <body></body>\\n\" +\n+                                        \"</html>\";\n+        assertEquals(htmlNoCharset, docDisabled.toString());\n+        assertNull(docDisabled.select(\"meta[charset]\").first());\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateDisabledNoChanges() {\n+        final Document doc = createHtmlDocument(\"dontTouch\");\n+        \n+        final String htmlCharset = \"<html>\\n\" +\n+                                    \" <head>\\n\" +\n+                                    \"  <meta charset=\\\"dontTouch\\\">\\n\" +\n+                                    \"  <meta name=\\\"charset\\\" content=\\\"dontTouch\\\">\\n\" +\n+                                    \" </head>\\n\" +\n+                                    \" <body></body>\\n\" +\n+                                    \"</html>\";\n+        assertEquals(htmlCharset, doc.toString());\n+        \n+        Element selectedElement = doc.select(\"meta[charset]\").first();\n+        assertNotNull(selectedElement);\n+        assertEquals(\"dontTouch\", selectedElement.attr(\"charset\"));\n+        \n+        selectedElement = doc.select(\"meta[name=charset]\").first();\n+        assertNotNull(selectedElement);\n+        assertEquals(\"dontTouch\", selectedElement.attr(\"content\"));\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateEnabledAfterCharsetChange() {\n+        final Document doc = createHtmlDocument(\"dontTouch\");\n+        doc.charset(Charset.forName(charsetUtf8));\n+        \n+        Element selectedElement = doc.select(\"meta[charset]\").first();\n+        assertEquals(charsetUtf8, selectedElement.attr(\"charset\"));\n+        assertTrue(doc.select(\"meta[name=charset]\").isEmpty());\n+    }\n+            \n+    @Test\n+    public void testMetaCharsetUpdateCleanup() {\n+        final Document doc = createHtmlDocument(\"dontTouch\");\n+        doc.updateMetaCharsetElement(true);\n+        doc.charset(Charset.forName(charsetUtf8));\n+        \n+        final String htmlCharsetUTF8 = \"<html>\\n\" +\n+                                        \" <head>\\n\" +\n+                                        \"  <meta charset=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n+                                        \" </head>\\n\" +\n+                                        \" <body></body>\\n\" +\n+                                        \"</html>\";\n+        \n+        assertEquals(htmlCharsetUTF8, doc.toString());\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateXmlUtf8() {\n+        final Document doc = createXmlDocument(\"1.0\", \"changeThis\", true);\n+        doc.updateMetaCharsetElement(true);\n+        doc.charset(Charset.forName(charsetUtf8));\n+        \n+        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n+                                        \"<root>\\n\" +\n+                                        \" node\\n\" +\n+                                        \"</root>\";\n+        assertEquals(xmlCharsetUTF8, doc.toString());\n+\n+        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n+        assertEquals(charsetUtf8, doc.charset().name());\n+        assertEquals(charsetUtf8, selectedNode.attr(\"encoding\"));\n+        assertEquals(doc.charset(), doc.outputSettings().charset());\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateXmlIso8859() {\n+        final Document doc = createXmlDocument(\"1.0\", \"changeThis\", true);\n+        doc.updateMetaCharsetElement(true);\n+        doc.charset(Charset.forName(charsetIso8859));\n+        \n+        final String xmlCharsetISO = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetIso8859 + \"\\\">\\n\" +\n+                                        \"<root>\\n\" +\n+                                        \" node\\n\" +\n+                                        \"</root>\";\n+        assertEquals(xmlCharsetISO, doc.toString());\n+        \n+        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n+        assertEquals(charsetIso8859, doc.charset().name());\n+        assertEquals(charsetIso8859, selectedNode.attr(\"encoding\"));\n+        assertEquals(doc.charset(), doc.outputSettings().charset());\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateXmlNoCharset() {\n+        final Document doc = createXmlDocument(\"1.0\", \"none\", false);\n+        doc.updateMetaCharsetElement(true);\n+        doc.charset(Charset.forName(charsetUtf8));\n+        \n+        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n+                                        \"<root>\\n\" +\n+                                        \" node\\n\" +\n+                                        \"</root>\";\n+        assertEquals(xmlCharsetUTF8, doc.toString());\n+        \n+        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n+        assertEquals(charsetUtf8, selectedNode.attr(\"encoding\"));\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateXmlDisabled() {\n+        final Document doc = createXmlDocument(\"none\", \"none\", false);\n+        \n+        final String xmlNoCharset = \"<root>\\n\" +\n+                                    \" node\\n\" +\n+                                    \"</root>\";\n+        assertEquals(xmlNoCharset, doc.toString());\n+    }\n+\n+    @Test\n+    public void testMetaCharsetUpdateXmlDisabledNoChanges() {\n+        final Document doc = createXmlDocument(\"dontTouch\", \"dontTouch\", true);\n+        \n+        final String xmlCharset = \"<?xml version=\\\"dontTouch\\\" encoding=\\\"dontTouch\\\">\\n\" +\n+                                    \"<root>\\n\" +\n+                                    \" node\\n\" +\n+                                    \"</root>\";\n+        assertEquals(xmlCharset, doc.toString());\n+        \n+        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n+        assertEquals(\"dontTouch\", selectedNode.attr(\"encoding\"));\n+        assertEquals(\"dontTouch\", selectedNode.attr(\"version\"));\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdatedDisabledPerDefault() {\n+        final Document doc = createHtmlDocument(\"none\");\n+        assertFalse(doc.updateMetaCharsetElement());\n+    }\n+    \n+    private Document createHtmlDocument(String charset) {\n+        final Document doc = Document.createShell(\"\");\n+        doc.head().appendElement(\"meta\").attr(\"charset\", charset);\n+        doc.head().appendElement(\"meta\").attr(\"name\", \"charset\").attr(\"content\", charset);\n+        \n+        return doc;\n+    }\n+    \n+    private Document createXmlDocument(String version, String charset, boolean addDecl) {\n+        final Document doc = new Document(\"\");\n+        doc.appendElement(\"root\").text(\"node\");\n+        doc.outputSettings().syntax(Syntax.xml);\n+        \n+        if( addDecl == true ) {\n+            XmlDeclaration decl = new XmlDeclaration(\"xml\", \"\", false);\n+            decl.attr(\"version\", version);\n+            decl.attr(\"encoding\", charset);\n+            doc.prependChild(decl);\n+        }\n+        \n+        return doc;\n+    }\n }\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n      * @param cssQuery a {@link Selector} CSS-like query\n      * @return elements that match the query (empty if none match)\n      * @see org.jsoup.select.Selector\n+     * @throws Selector.SelectorParseException (unchecked) on an invalid CSS query.\n      */\n     public Elements select(String cssQuery) {\n         return Selector.select(cssQuery, this);\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n      * @param query CSS selector\n      * @param root  root element to descend into\n      * @return matching elements, empty if none\n+     * @throws Selector.SelectorParseException (unchecked) on an invalid CSS query.\n      */\n     public static Elements select(String query, Element root) {\n         return new Selector(query, root).select();", "timestamp": 1428648117, "metainfo": ""}