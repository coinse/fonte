{"sha": "c3cbe1b64e7f66ff9f9b53f1388eb135e6693187", "log": "Support UTF-16 and -32 BOMs  Fixes #695", "commit": "\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n import java.nio.charset.IllegalCharsetNameException;\n+import java.util.Locale;\n import java.util.Random;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n-import java.util.Locale;\n \n /**\n  * Internal static utilities for handling data.\n     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n         String docData;\n         Document doc = null;\n+\n+        // look for BOM - overrides any other header or input\n+        byteData.mark();\n+        byte[] bom = new byte[4];\n+        byteData.get(bom);\n+        byteData.rewind();\n+        if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n+                bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) { // LE\n+            charsetName = \"UTF-32\"; // and I hope it's on your system\n+        } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n+                bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n+            charsetName = \"UTF-16\"; // in all Javas\n+        } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n+            charsetName = \"UTF-8\"; // in all Javas\n+            byteData.position(3); // 16 and 32 decoders consume the BOM to determine be/le; utf-8 should be consumed\n+        }\n+\n         if (charsetName == null) { // determine from meta. safe parse as UTF-8\n             // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n             docData = Charset.forName(defaultCharset).decode(byteData).toString();\n         } else { // specified by content type header (or by user on file load)\n             Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n             docData = Charset.forName(charsetName).decode(byteData).toString();\n-        }\n-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly\n-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n-            byteData.rewind();\n-            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n-            docData = docData.substring(1);\n-            charsetName = defaultCharset;\n-            doc = null;\n         }\n         if (doc == null) {\n             doc = parser.parseInput(docData, baseUri);\n--- a/src/test/java/org/jsoup/helper/DataUtilTest.java\n+++ b/src/test/java/org/jsoup/helper/DataUtilTest.java\n package org.jsoup.helper;\n \n+import java.io.File;\n+import java.io.IOException;\n import java.io.UnsupportedEncodingException;\n+\n+import org.jsoup.Jsoup;\n import org.jsoup.nodes.Document;\n import org.jsoup.parser.Parser;\n import org.junit.Test;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n \n+import static org.jsoup.integration.ParseTest.getFile;\n import static org.junit.Assert.*;\n \n public class DataUtilTest {\n             fail(ex.getMessage());\n         }\n     }\n+\n+    @Test\n+    public void supportsBOMinFiles() throws IOException {\n+        // test files from http://www.i18nl10n.com/korean/utftest/\n+        File in = getFile(\"/bomtests/bom_utf16be.html\");\n+        Document doc = Jsoup.parse(in, null, \"http://example.com\");\n+        assertTrue(doc.title().contains(\"UTF-16BE\"));\n+        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n+\n+        in = getFile(\"/bomtests/bom_utf16le.html\");\n+        doc = Jsoup.parse(in, null, \"http://example.com\");\n+        assertTrue(doc.title().contains(\"UTF-16LE\"));\n+        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n+\n+        in = getFile(\"/bomtests/bom_utf32be.html\");\n+        doc = Jsoup.parse(in, null, \"http://example.com\");\n+        assertTrue(doc.title().contains(\"UTF-32BE\"));\n+        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n+\n+        in = getFile(\"/bomtests/bom_utf32le.html\");\n+        doc = Jsoup.parse(in, null, \"http://example.com\");\n+        assertTrue(doc.title().contains(\"UTF-32LE\"));\n+        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n+    }\n }", "timestamp": 1459890184, "metainfo": ""}