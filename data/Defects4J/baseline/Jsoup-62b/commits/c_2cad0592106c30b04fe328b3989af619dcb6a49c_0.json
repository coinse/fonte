{"sha": "2cad0592106c30b04fe328b3989af619dcb6a49c", "log": "Handle UTF headers and encode URLs better  Fixes #706", "commit": "\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n         return con;\n     }\n \n+    /**\n+     * Encodes the input URL into a safe ASCII URL string\n+     * @param url unescaped URL\n+     * @return escaped URL\n+     */\n \tprivate static String encodeUrl(String url) {\n-\t\tif(url == null)\n-\t\t\treturn null;\n-    \treturn url.replaceAll(\" \", \"%20\");\n+        try {\n+            URL u = new URL(url);\n+            return encodeUrl(u).toExternalForm();\n+        } catch (Exception e) {\n+            return url;\n+        }\n \t}\n+\n+\tprivate static URL encodeUrl(URL u) {\n+        try {\n+            //  odd way to encode urls, but it works!\n+            final URI uri = new URI(u.getProtocol(), u.getUserInfo(), u.getHost(), u.getPort(), u.getPath(), u.getQuery(), u.getRef());\n+            return new URL(uri.toASCIIString());\n+        } catch (Exception e) {\n+            return u;\n+        }\n+    }\n \n     private static String encodeMimeName(String val) {\n         if (val == null)\n \n         public String header(String name) {\n             Validate.notNull(name, \"Header name must not be null\");\n-            return getHeaderCaseInsensitive(name);\n+            String val = getHeaderCaseInsensitive(name);\n+            if (val != null) {\n+                // headers should be ISO8859 - but values are often actually UTF-8. Test if it looks like UTF8 and convert if so\n+                val = fixHeaderEncoding(val);\n+            }\n+            return val;\n+        }\n+\n+        private static String fixHeaderEncoding(String val) {\n+            try {\n+                byte[] bytes = val.getBytes(\"ISO-8859-1\");\n+                if (!looksLikeUtf8(bytes))\n+                    return val;\n+                return new String(bytes, \"UTF-8\");\n+            } catch (UnsupportedEncodingException e) {\n+                // shouldn't happen as these both always exist\n+                return val;\n+            }\n+        }\n+\n+        private static boolean looksLikeUtf8(byte[] input) {\n+            int i = 0;\n+            // BOM:\n+            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n+                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+                i = 3;\n+            }\n+\n+            int end;\n+            for (int j = input.length; i < j; ++i) {\n+                int o = input[i];\n+                if ((o & 0x80) == 0) {\n+                    continue; // ASCII\n+                }\n+\n+                // UTF-8 leading:\n+                if ((o & 0xE0) == 0xC0) {\n+                    end = i + 1;\n+                } else if ((o & 0xF0) == 0xE0) {\n+                    end = i + 2;\n+                } else if ((o & 0xF8) == 0xF0) {\n+                    end = i + 3;\n+                } else {\n+                    return false;\n+                }\n+\n+                while (i < end) {\n+                    i++;\n+                    o = input[i];\n+                    if ((o & 0xC0) != 0x80) {\n+                        return false;\n+                    }\n+                }\n+            }\n+            return true;\n         }\n \n         public T header(String name, String value) {\n                     String location = res.header(LOCATION);\n                     if (location != null && location.startsWith(\"http:/\") && location.charAt(6) != '/') // fix broken Location: http:/temp/AAG_New/en/index.php\n                         location = location.substring(6);\n-                    req.url(StringUtil.resolve(req.url(), encodeUrl(location)));\n+                    URL redir = StringUtil.resolve(req.url(), location);\n+                    req.url(encodeUrl(redir));\n \n                     for (Map.Entry<String, String> cookie : res.cookies.entrySet()) { // add response cookies to request (for e.g. login posts)\n                         req.cookie(cookie.getKey(), cookie.getValue());\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n         assertEquals(\"Cost is \u20ac100\", doc3.select(\"p\").text());\n         assertTrue(res3.body().contains(\"\u20ac\"));\n     }\n+\n+    @Test\n+    public void handlesUnescapedRedirects() throws IOException {\n+        // URL locations should be url safe (ascii) but are often not, so we should try to guess\n+        // in this case the location header is utf-8, but defined in spec as iso8859, so detect, convert, encode\n+        String url = \"http://direct.infohound.net/tools/302-utf.pl\";\n+        String urlEscaped = \"http://direct.infohound.net/tools/test%F0%9F%92%A9.html\";\n+\n+        Connection.Response res = Jsoup.connect(url).execute();\n+        Document doc = res.parse();\n+        assertEquals(doc.body().text(), \"\\uD83D\\uDCA9!\");\n+        assertEquals(doc.location(), urlEscaped);\n+\n+        Connection.Response res2 = Jsoup.connect(url).followRedirects(false).execute();\n+        assertEquals(\"/tools/test\\uD83D\\uDCA9.html\", res2.header(\"Location\"));\n+        // if we didn't notice it was utf8, would look like: Location: /tools/test\u00f0\u009f\u0092\u00a9.html\n+    }\n+\n+    @Test\n+    public void handlesUt8fInUrl() throws IOException {\n+        String url = \"http://direct.infohound.net/tools/test\\uD83D\\uDCA9.html\";\n+        String urlEscaped = \"http://direct.infohound.net/tools/test%F0%9F%92%A9.html\";\n+\n+        Connection.Response res = Jsoup.connect(url).execute();\n+        Document doc = res.parse();\n+        assertEquals(\"\\uD83D\\uDCA9!\", doc.body().text());\n+        assertEquals(urlEscaped, doc.location());\n+    }\n+\n+    @Test\n+    public void inWildUtfRedirect() throws IOException {\n+        Connection.Response res = Jsoup.connect(\"http://brabantn.ws/Q4F\").execute();\n+        Document doc = res.parse();\n+        assertEquals(\n+            \"http://www.omroepbrabant.nl/?news/2474781303/Gestrande+ree+in+Oss+niet+verdoofd,+maar+doodgeschoten+%E2%80%98Dit+kan+gewoon+niet,+bizar%E2%80%99+[VIDEO].aspx\",\n+            doc.location()\n+            );\n+    }\n }", "timestamp": 1477802593, "metainfo": ""}