{"sha": "862c256fb6e1166ca42a2f8b885c5285baf6c1f9", "log": "Performance: moved body tag searches to constants  Reduces the GC load of the body process step by 10% from 43% to 33% of GC caused during parsing.", "commit": "\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n                             if (!html.hasAttr(attribute.getKey()))\n                                 html.attributes().put(attribute);\n                         }\n-                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartToHead)) {\n                         return tb.process(t, InHead);\n                     } else if (name.equals(\"body\")) {\n                         tb.error(this);\n                             tb.insert(startTag);\n                             tb.transition(InFrameset);\n                         }\n-                    } else if (StringUtil.in(name,\n-                            \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n-                            \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n-                            \"p\", \"section\", \"summary\", \"ul\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartPClosers)) {\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.process(new Token.EndTag(\"p\"));\n                         }\n                         tb.insert(startTag);\n-                    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n+                    } else if (StringUtil.in(name, Constants.Headings)) {\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.process(new Token.EndTag(\"p\"));\n                         }\n-                        if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n+                        if (StringUtil.in(tb.currentElement().nodeName(), Constants.Headings)) {\n                             tb.error(this);\n                             tb.pop();\n                         }\n                         tb.insert(startTag);\n-                    } else if (StringUtil.in(name, \"pre\", \"listing\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartPreListing)) {\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.process(new Token.EndTag(\"p\"));\n                         }\n                                 tb.process(new Token.EndTag(\"li\"));\n                                 break;\n                             }\n-                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n+                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                 break;\n                         }\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.process(new Token.EndTag(\"p\"));\n                         }\n                         tb.insert(startTag);\n-                    } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n+                    } else if (StringUtil.in(name, Constants.DdDt)) {\n                         tb.framesetOk(false);\n                         LinkedList<Element> stack = tb.getStack();\n                         for (int i = stack.size() - 1; i > 0; i--) {\n                             Element el = stack.get(i);\n-                            if (StringUtil.in(el.nodeName(), \"dd\", \"dt\")) {\n+                            if (StringUtil.in(el.nodeName(), Constants.DdDt)) {\n                                 tb.process(new Token.EndTag(el.nodeName()));\n                                 break;\n                             }\n-                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n+                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                 break;\n                         }\n                         if (tb.inButtonScope(\"p\")) {\n                         tb.reconstructFormattingElements();\n                         Element a = tb.insert(startTag);\n                         tb.pushActiveFormattingElements(a);\n-                    } else if (StringUtil.in(name,\n-                            \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n+                    } else if (StringUtil.in(name, Constants.Formatters)) {\n                         tb.reconstructFormattingElements();\n                         Element el = tb.insert(startTag);\n                         tb.pushActiveFormattingElements(el);\n                         }\n                         Element el = tb.insert(startTag);\n                         tb.pushActiveFormattingElements(el);\n-                    } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartApplets)) {\n                         tb.reconstructFormattingElements();\n                         tb.insert(startTag);\n                         tb.insertMarkerToFormattingElements();\n                         tb.insert(startTag);\n                         tb.framesetOk(false);\n                         tb.transition(InTable);\n-                    } else if (StringUtil.in(name, \"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartEmptyFormatters)) {\n                         tb.reconstructFormattingElements();\n                         tb.insertEmpty(startTag);\n                         tb.framesetOk(false);\n                         Element el = tb.insertEmpty(startTag);\n                         if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                             tb.framesetOk(false);\n-                    } else if (StringUtil.in(name, \"param\", \"source\", \"track\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartMedia)) {\n                         tb.insertEmpty(startTag);\n                     } else if (name.equals(\"hr\")) {\n                         if (tb.inButtonScope(\"p\")) {\n                         // input\n                         Attributes inputAttribs = new Attributes();\n                         for (Attribute attr : startTag.attributes) {\n-                            if (!StringUtil.in(attr.getKey(), \"name\", \"action\", \"prompt\"))\n+                            if (!StringUtil.in(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                 inputAttribs.put(attr);\n                         }\n                         inputAttribs.put(\"name\", \"isindex\");\n                             tb.transition(InSelectInTable);\n                         else\n                             tb.transition(InSelect);\n-                    } else if (StringUtil.in(\"optgroup\", \"option\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartOptions)) {\n                         if (tb.currentElement().nodeName().equals(\"option\"))\n                             tb.process(new Token.EndTag(\"option\"));\n                         tb.reconstructFormattingElements();\n                         tb.insert(startTag);\n-                    } else if (StringUtil.in(\"rp\", \"rt\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartRuby)) {\n                         if (tb.inScope(\"ruby\")) {\n                             tb.generateImpliedEndTags();\n                             if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                         // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                         tb.insert(startTag);\n                         tb.tokeniser.acknowledgeSelfClosingFlag();\n-                    } else if (StringUtil.in(name,\n-                            \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartDrop)) {\n                         tb.error(this);\n                         return false;\n                     } else {\n                         boolean notIgnored = tb.process(new Token.EndTag(\"body\"));\n                         if (notIgnored)\n                             return tb.process(endTag);\n-                    } else if (StringUtil.in(name,\n-                            \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n-                            \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n-                            \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\")) {\n-                        // todo: refactor these lookups\n+                    } else if (StringUtil.in(name, Constants.InBodyEndClosers)) {\n                         if (!tb.inScope(name)) {\n                             // nothing to close\n                             tb.error(this);\n                                 tb.error(this);\n                             tb.popStackToClose(name);\n                         }\n-                    } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n+                    } else if (StringUtil.in(name, Constants.DdDt)) {\n                         if (!tb.inScope(name)) {\n                             tb.error(this);\n                             return false;\n                                 tb.error(this);\n                             tb.popStackToClose(name);\n                         }\n-                    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n-                        if (!tb.inScope(new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"})) {\n+                    } else if (StringUtil.in(name, Constants.Headings)) {\n+                        if (!tb.inScope(Constants.Headings)) {\n                             tb.error(this);\n                             return false;\n                         } else {\n                             tb.generateImpliedEndTags(name);\n                             if (!tb.currentElement().nodeName().equals(name))\n                                 tb.error(this);\n-                            tb.popStackToClose(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\");\n+                            tb.popStackToClose(Constants.Headings);\n                         }\n                     } else if (name.equals(\"sarcasm\")) {\n                         // *sigh*\n                         return anyOtherEndTag(t, tb);\n-                    } else if (StringUtil.in(name,\n-                            \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyEndAdoptionFormatters)) {\n                         // Adoption Agency Algorithm.\n                         OUTER:\n                         for (int i = 0; i < 8; i++) {\n                                 lastNode = node;\n                             }\n \n-                            if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+                            if (StringUtil.in(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                 if (lastNode.parent() != null)\n                                     lastNode.remove();\n                                 tb.insertInFosterParent(lastNode);\n                             tb.removeFromStack(formatEl);\n                             tb.insertOnStackAfter(furthestBlock, adopter);\n                         }\n-                    } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n+                    } else if (StringUtil.in(name, Constants.InBodyStartApplets)) {\n                         if (!tb.inScope(\"name\")) {\n                             if (!tb.inScope(name)) {\n                                 tb.error(this);\n         tb.markInsertionMode();\n         tb.transition(Text);\n     }\n+\n+    // lists of tags to search through. A little harder to read here, but causes less GC than dynamic varargs.\n+    // was contributing around 10% of parse GC load.\n+    private static final class Constants {\n+        private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};\n+        private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n+                \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n+                \"p\", \"section\", \"summary\", \"ul\"};\n+        private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};\n+        private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"};\n+        private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};\n+        private static final String[] DdDt = new String[]{\"dd\", \"dt\"};\n+        private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};\n+        private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};\n+        private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};\n+        private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"};\n+        private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"};\n+        private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};\n+        private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};\n+        private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};\n+        private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n+                \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n+                \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};\n+        private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};\n+        private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};\n+    }\n }", "timestamp": 1384116301, "metainfo": ""}