{"sha": "4f707008353e272c12a7a6543d6ecfc666a7cc64", "log": "Implemented Element.is()", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n import org.jsoup.select.Evaluator;\n import org.jsoup.select.NodeTraversor;\n import org.jsoup.select.NodeVisitor;\n+import org.jsoup.select.QueryParser;\n import org.jsoup.select.Selector;\n \n import java.io.IOException;\n      */\n     public Elements select(String cssQuery) {\n         return Selector.select(cssQuery, this);\n+    }\n+\n+    /**\n+     * Check if this element matches the given {@link Selector} CSS query.\n+     * @param cssQuery a {@link Selector} CSS query\n+     * @return if this element matches the query\n+     */\n+    public boolean is(String cssQuery) {\n+        return is(QueryParser.parse(cssQuery));\n+    }\n+\n+    public boolean is(Evaluator evaluator) {\n+        return evaluator.matches(this.ownerDocument(), this);\n     }\n     \n     /**\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n      * @return true if at least one element in the list matches the query.\n      */\n     public boolean is(String query) {\n-        Elements children = select(query);\n-        return !children.isEmpty();\n+        Evaluator eval = QueryParser.parse(query);\n+        for (Element e : this) {\n+            if (e.is(eval))\n+                return true;\n+        }\n+        return false;\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/select/QueryParser.java\n+++ b/src/main/java/org/jsoup/select/QueryParser.java\n /**\n  * Parses a CSS selector into an Evaluator tree.\n  */\n-class QueryParser {\n+public class QueryParser {\n     private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};\n     private static final String[] AttributeEvals = new String[]{\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"};\n \n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n             .removeAttr(\"five\");\n         assertEquals(\"<a>Text</a>\", a.outerHtml());\n     }\n+\n+    @Test\n+    public void testIs() {\n+        String html = \"<div><p>One <a class=big>Two</a> Three</p><p>Another</p>\";\n+        Document doc = Jsoup.parse(html);\n+        Element p = doc.select(\"p\").first();\n+\n+        assertTrue(p.is(\"p\"));\n+        assertFalse(p.is(\"div\"));\n+        assertTrue(p.is(\"p:has(a)\"));\n+        assertTrue(p.is(\"p:first-child\"));\n+        assertFalse(p.is(\"p:last-child\"));\n+        assertTrue(p.is(\"*\"));\n+        assertTrue(p.is(\"div p\"));\n+\n+        Element q = doc.select(\"p\").last();\n+        assertTrue(q.is(\"p\"));\n+        assertTrue(q.is(\"p ~ p\"));\n+        assertTrue(q.is(\"p + p\"));\n+        assertTrue(q.is(\"p:last-child\"));\n+        assertFalse(q.is(\"p a\"));\n+        assertFalse(q.is(\"a\"));\n+    }\n }", "timestamp": 1477777294, "metainfo": ""}