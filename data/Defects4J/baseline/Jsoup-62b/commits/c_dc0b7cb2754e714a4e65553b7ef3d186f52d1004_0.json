{"sha": "dc0b7cb2754e714a4e65553b7ef3d186f52d1004", "log": "Allow 400-500 errors and response with no content-type to be parsed.", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n         GET, POST\n     }\n \n+\t/**\n+\t * Determine the behavior of this connection upon receiving a 4xx or 5xx error.\n+\t * @param throwExceptionOnHttpError - Set to false if you would like the Response populated on 4xx and 5xx HTTP response codes.\n+     * @return this Connection, for chaining\n+\t */\n+    public Connection throwExceptionOnHttpError(boolean throwExceptionOnHttpError);\n+\n+\t/**\n+\t * Ignore content-type header when parsing the response\n+\t * @param ignoreContentType - Set to true if you would like the content type ignored on parsing the response into a Document.\n+     * @return this Connection, for chaining\n+\t */\n+    public Connection ignoreContentType(boolean ignoreContentType);\n+\n     /**\n      * Set the request URL to fetch. The protocol must be HTTP or HTTPS.\n      * @param url URL to connect to\n     public interface Request extends Base<Request> {\n \n         /**\n+         * Will this request throw an IOException if a 4xx or 5xx error is returned \n+         * @return true if it will, false if it will populate the Response.  Default is true.\n+         */\n+        public boolean throwExceptionOnHttpError();\n+        \n+\n+    \t/**\n+    \t * Determine the behavior of this request upon receiving a 4xx or 5xx error response.\n+    \t * @param throwExceptionOnHttpError - Set to false if you would like the Response populated on 4xx and 5xx HTTP response codes.\n+    \t */\n+        public void throwExceptionOnHttpError(boolean throwExceptionOnHttpError);\n+\n+        /**\n          * Get the request timeout, in milliseconds.\n          * @return the timeout in milliseconds.\n          */\n      * Represents a HTTP response.\n      */\n     public interface Response extends Base<Response> {\n-\n-        /**\n+    \t\n+    \t/**\n          * Get the status code of the response.\n          * @return status code\n          */\n          * @return body bytes\n          */\n         public byte[] bodyAsBytes();\n+        \n+        public void ignoreContentType(boolean ignoreContentType);\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n \n     private Connection.Request req;\n     private Connection.Response res;\n-\n-    private HttpConnection() {\n+    private boolean ignoreContentType = false;\n+ \n+\tpublic Connection throwExceptionOnHttpError(boolean throwExceptionOnHttpError) {\n+\t\treq.throwExceptionOnHttpError(throwExceptionOnHttpError);\n+\t\treturn this;\n+\t}\n+\t\n+\tpublic Connection ignoreContentType(boolean ignoreContentType) {\n+\t\tthis.ignoreContentType = ignoreContentType;\n+\t\treturn this;\n+\t}\n+\n+\tprivate HttpConnection() {\n         req = new Request();\n         res = new Response();\n     }\n \n     public Connection.Response execute() throws IOException {\n         res = Response.execute(req);\n+        res.ignoreContentType(ignoreContentType);\n         return res;\n     }\n \n         private int timeoutMilliseconds;\n         private boolean followRedirects;\n         private Collection<Connection.KeyVal> data;\n-\n-        private Request() {\n+        private boolean throwExceptionOnHttpError = true;\n+\n+    \tpublic boolean throwExceptionOnHttpError() {\n+    \t\treturn throwExceptionOnHttpError;\n+    \t}\n+    \t\n+    \tpublic void throwExceptionOnHttpError(boolean throwExceptionOnHttpError) {\n+    \t\tthis.throwExceptionOnHttpError = throwExceptionOnHttpError;\n+    \t}\n+\n+    \tprivate Request() {\n             timeoutMilliseconds = 3000;\n             followRedirects = true;\n             data = new ArrayList<Connection.KeyVal>();\n         private String contentType;\n         private boolean executed = false;\n         private int numRedirects = 0;\n+        private boolean ignoreContentType = false;\n \n         Response() {\n             super();\n             }\n         }\n \n+        public void ignoreContentType(boolean ignoreContentType) {\n+        \tthis.ignoreContentType = ignoreContentType;\n+        }\n+        \n         static Response execute(Connection.Request req) throws IOException {\n             return execute(req, null);\n         }\n             if (status != HttpURLConnection.HTTP_OK) {\n                 if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER)\n                     needsRedirect = true;\n-                else\n+                else if (req.throwExceptionOnHttpError())\n                     throw new IOException(status + \" error loading URL \" + req.url().toString());\n             }\n             Response res = new Response(previousResponse);\n             }\n \n             InputStream inStream = null;\n+            InputStream rawStream = null;\n             try {\n-                inStream = res.hasHeader(\"Content-Encoding\") && res.header(\"Content-Encoding\").equalsIgnoreCase(\"gzip\") ?\n-                        new BufferedInputStream(new GZIPInputStream(conn.getInputStream())) :\n-                        new BufferedInputStream(conn.getInputStream());\n+                if (status == HttpURLConnection.HTTP_OK) {\n+                \trawStream = conn.getInputStream();\n+                } else {\n+                \trawStream = conn.getErrorStream();\n+                }\n+\n+            \tinStream = res.hasHeader(\"Content-Encoding\") && res.header(\"Content-Encoding\").equalsIgnoreCase(\"gzip\") ?\n+                        new BufferedInputStream(new GZIPInputStream(rawStream)) :\n+                        new BufferedInputStream(rawStream);\n+                \n                 res.byteData = DataUtil.readToByteBuffer(inStream);\n                 res.charset = DataUtil.getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it\n             } finally {\n \n         public Document parse() throws IOException {\n             Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before parsing response\");\n-            if (contentType == null || !(contentType.startsWith(\"text/\") || contentType.startsWith(\"application/xml\") || contentType.startsWith(\"application/xhtml+xml\")))\n+            if (!ignoreContentType && (contentType == null || !(contentType.startsWith(\"text/\") || contentType.startsWith(\"application/xml\") || contentType.startsWith(\"application/xhtml+xml\"))))\n                 throw new IOException(String.format(\"Unhandled content type \\\"%s\\\" on URL %s. Must be text/*, application/xml, or application/xhtml+xml\",\n                     contentType, url.toString()));\n             Document doc = DataUtil.parseByteData(byteData, charset, url.toExternalForm());", "timestamp": 1309605129, "metainfo": ""}