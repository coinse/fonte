{"sha": "99268a99ac0517d0f1b82d9648017a805b0cb4b6", "log": "Tests for meta charset update over-worked.", "commit": "\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class DocumentTest {\n+    private static final String charsetUtf8 = \"UTF-8\";\n+    private static final String charsetIso8859 = \"ISO-8859-1\";\n+    \n+    \n     @Test public void setTextPreservesDocumentStructure() {\n         Document doc = Jsoup.parse(\"<p>Hello</p>\");\n         doc.text(\"Replaced\");\n     }\n     \n     @Test\n-    public void testMetaCharsetUpdate() {\n-        // Existing meta charset tag\n-        final Document doc = Document.createShell(\"\");\n-        doc.updateMetaCharset(true);\n-        doc.head().appendElement(\"meta\").attr(\"charset\", \"changeThis\");        \n-        \n-        final String charsetUtf8 = \"UTF-8\";\n-        doc.charset(Charset.forName(charsetUtf8));\n-        Element selectedElement = doc.select(\"meta[charset]\").first();\n+    public void testMetaCharsetUpdateUtf8() {\n+        final Document doc = createHtmlDocument(\"changeThis\");\n+        doc.updateMetaCharset(true);\n+        doc.charset(Charset.forName(charsetUtf8));\n         \n         final String htmlCharsetUTF8 = \"<html>\\n\" +\n                                         \" <head>\\n\" +\n                                         \" </head>\\n\" +\n                                         \" <body></body>\\n\" +\n                                         \"</html>\";\n-        \n-        assertNotNull(selectedElement);\n+        assertEquals(htmlCharsetUTF8, doc.toString());\n+        \n+        Element selectedElement = doc.select(\"meta[charset]\").first();\n         assertEquals(charsetUtf8, doc.charset().displayName());\n         assertEquals(charsetUtf8, selectedElement.attr(\"charset\"));\n-        assertEquals(htmlCharsetUTF8, doc.toString());\n         assertEquals(doc.charset(), doc.outputSettings().charset());\n-        \n-        final String charsetIso8859 = \"ISO-8859-1\";\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateIso8859() {\n+        final Document doc = createHtmlDocument(\"changeThis\");\n+        doc.updateMetaCharset(true);\n         doc.charset(Charset.forName(charsetIso8859));\n-        selectedElement = doc.select(\"meta[charset]\").first();\n         \n         final String htmlCharsetISO = \"<html>\\n\" +\n                                         \" <head>\\n\" +\n                                         \" </head>\\n\" +\n                                         \" <body></body>\\n\" +\n                                         \"</html>\";\n-        \n-        assertNotNull(selectedElement);\n+        assertEquals(htmlCharsetISO, doc.toString());\n+        \n+        Element selectedElement = doc.select(\"meta[charset]\").first();\n         assertEquals(charsetIso8859, doc.charset().displayName());\n         assertEquals(charsetIso8859, selectedElement.attr(\"charset\"));\n-        assertEquals(htmlCharsetISO, doc.toString());\n         assertEquals(doc.charset(), doc.outputSettings().charset());\n-        \n-        \n-        // No meta charset tag\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateNoCharset() {\n         final Document docNoCharset = Document.createShell(\"\");\n         docNoCharset.updateMetaCharset(true);\n         docNoCharset.charset(Charset.forName(charsetUtf8));\n         \n         assertEquals(charsetUtf8, docNoCharset.select(\"meta[charset]\").first().attr(\"charset\"));\n-        assertEquals(htmlCharsetUTF8, docNoCharset.toString());\n-        \n-        \n-        // Disabled update of meta charset tag\n+        \n+        final String htmlCharsetUTF8 = \"<html>\\n\" +\n+                                        \" <head>\\n\" +\n+                                        \"  <meta charset=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n+                                        \" </head>\\n\" +\n+                                        \" <body></body>\\n\" +\n+                                        \"</html>\";\n+        assertEquals(htmlCharsetUTF8, docNoCharset.toString()); \n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateDisabled() {\n         final Document docDisabled = Document.createShell(\"\");\n-        assertFalse(docDisabled.updateMetaCharset());\n         \n         final String htmlNoCharset = \"<html>\\n\" +\n                                         \" <head></head>\\n\" +\n                                         \" <body></body>\\n\" +\n                                         \"</html>\";\n-        \n         assertEquals(htmlNoCharset, docDisabled.toString());\n         assertNull(docDisabled.select(\"meta[charset]\").first());\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateDisabledNoChanges() {\n+        final Document doc = createHtmlDocument(\"dontTouch\");\n         \n         final String htmlCharset = \"<html>\\n\" +\n                                     \" <head>\\n\" +\n                                     \" </head>\\n\" +\n                                     \" <body></body>\\n\" +\n                                     \"</html>\";\n-        \n-        docDisabled.head().appendElement(\"meta\").attr(\"charset\", \"dontTouch\");\n-        docDisabled.head().appendElement(\"meta\").attr(\"name\", \"charset\").attr(\"content\", \"dontTouch\");\n-        \n-        assertEquals(htmlCharset, docDisabled.toString());\n-        \n-        selectedElement = docDisabled.select(\"meta[charset]\").first();\n+        assertEquals(htmlCharset, doc.toString());\n+        \n+        Element selectedElement = doc.select(\"meta[charset]\").first();\n         assertNotNull(selectedElement);\n         assertEquals(\"dontTouch\", selectedElement.attr(\"charset\"));\n-        selectedElement = docDisabled.select(\"meta[name=charset]\").first();\n+        \n+        selectedElement = doc.select(\"meta[name=charset]\").first();\n         assertNotNull(selectedElement);\n         assertEquals(\"dontTouch\", selectedElement.attr(\"content\"));\n-        \n-        docDisabled.charset(Charset.forName(charsetUtf8));\n-        selectedElement = docDisabled.select(\"meta[charset]\").first();\n-        assertNotNull(selectedElement);\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateDisabledNoChangesAfterUpdate() {\n+        final Document doc = createHtmlDocument(\"dontTouch\");\n+        doc.charset(Charset.forName(charsetUtf8));\n+        \n+        Element selectedElement = doc.select(\"meta[charset]\").first();\n         assertEquals(\"dontTouch\", selectedElement.attr(\"charset\"));\n-        selectedElement = docDisabled.select(\"meta[name=charset]\").first();\n-        assertNotNull(selectedElement);\n+        \n+        selectedElement = doc.select(\"meta[name=charset]\").first();\n         assertEquals(\"dontTouch\", selectedElement.attr(\"content\"));\n-        \n-        \n-        // Remove obsolete charset definitions\n-        final Document docCleanup = Document.createShell(\"\");\n-        docCleanup.updateMetaCharset(true);\n-        docCleanup.head().appendElement(\"meta\").attr(\"charset\", \"dontTouch\");\n-        docCleanup.head().appendElement(\"meta\").attr(\"name\", \"charset\").attr(\"content\", \"dontTouch\");\n-        docCleanup.charset(Charset.forName(charsetUtf8));\n-        \n-        assertEquals(htmlCharsetUTF8, docCleanup.toString());\n-    }\n-    \n-    @Test\n-    public void testMetaCharsetUpdateXml() {\n-        // Existing encoding definition\n-        final Document doc = new Document(\"\");\n-        doc.appendElement(\"root\").text(\"node\");\n-        doc.outputSettings().syntax(Syntax.xml);\n-        doc.updateMetaCharset(true);\n-        \n-        XmlDeclaration decl = new XmlDeclaration(\"xml\", \"\", false);\n-        decl.attr(\"version\", \"1.0\");\n-        decl.attr(\"encoding\", \"changeThis\");\n-        doc.prependChild(decl);\n-        \n-        final String charsetUtf8 = \"UTF-8\";\n-        doc.charset(Charset.forName(charsetUtf8));\n-        \n-        Node declNode = doc.childNode(0);\n-        assertTrue(declNode instanceof XmlDeclaration);\n-        XmlDeclaration selectedNode = (XmlDeclaration) declNode;\n+    }\n+            \n+    @Test\n+    public void testMetaCharsetUpdateCleanup() {\n+        final Document doc = createHtmlDocument(\"dontTouch\");\n+        doc.updateMetaCharset(true);\n+        doc.charset(Charset.forName(charsetUtf8));\n+        \n+        final String htmlCharsetUTF8 = \"<html>\\n\" +\n+                                        \" <head>\\n\" +\n+                                        \"  <meta charset=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n+                                        \" </head>\\n\" +\n+                                        \" <body></body>\\n\" +\n+                                        \"</html>\";\n+        \n+        assertEquals(htmlCharsetUTF8, doc.toString());\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateXmlUtf8() {\n+        final Document doc = createXmlDocument(\"1.0\", \"changeThis\", true);\n+        doc.updateMetaCharset(true);\n+        doc.charset(Charset.forName(charsetUtf8));\n         \n         final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n                                         \"<root>\\n\" +\n                                         \" node\\n\" +\n                                         \"</root>\";\n-\n-        assertNotNull(declNode);\n+        assertEquals(xmlCharsetUTF8, doc.toString());\n+\n+        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n         assertEquals(charsetUtf8, doc.charset().displayName());\n         assertEquals(charsetUtf8, selectedNode.attr(\"encoding\"));\n-        assertEquals(\"1.0\", selectedNode.attr(\"version\"));\n-        assertEquals(xmlCharsetUTF8, doc.toString());\n         assertEquals(doc.charset(), doc.outputSettings().charset());\n-        \n-        final String charsetIso8859 = \"ISO-8859-1\";\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateXmlIso8859() {\n+        final Document doc = createXmlDocument(\"1.0\", \"changeThis\", true);\n+        doc.updateMetaCharset(true);\n         doc.charset(Charset.forName(charsetIso8859));\n-        \n-        declNode = doc.childNode(0);\n-        assertTrue(declNode instanceof XmlDeclaration);\n-        selectedNode = (XmlDeclaration) declNode;\n         \n         final String xmlCharsetISO = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetIso8859 + \"\\\">\\n\" +\n                                         \"<root>\\n\" +\n                                         \" node\\n\" +\n                                         \"</root>\";\n-        \n-        assertNotNull(declNode);\n+        assertEquals(xmlCharsetISO, doc.toString());\n+        \n+        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n         assertEquals(charsetIso8859, doc.charset().displayName());\n         assertEquals(charsetIso8859, selectedNode.attr(\"encoding\"));\n-        assertEquals(\"1.0\", selectedNode.attr(\"version\"));\n-        assertEquals(xmlCharsetISO, doc.toString());\n         assertEquals(doc.charset(), doc.outputSettings().charset());\n-        \n-        \n-        // No encoding definition\n-        final Document docNoCharset = new Document(\"\");\n-        docNoCharset.appendElement(\"root\").text(\"node\");\n-        docNoCharset.outputSettings().syntax(Syntax.xml);\n-        docNoCharset.updateMetaCharset(true);\n-        docNoCharset.charset(Charset.forName(charsetUtf8));\n-        \n-        declNode = docNoCharset.childNode(0);\n-        assertTrue(declNode instanceof XmlDeclaration);\n-        selectedNode = (XmlDeclaration) declNode;\n-        \n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateXmlNoCharset() {\n+        final Document doc = createXmlDocument(\"1.0\", \"none\", false);\n+        doc.updateMetaCharset(true);\n+        doc.charset(Charset.forName(charsetUtf8));\n+        \n+        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n+                                        \"<root>\\n\" +\n+                                        \" node\\n\" +\n+                                        \"</root>\";\n+        assertEquals(xmlCharsetUTF8, doc.toString());\n+        \n+        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n         assertEquals(charsetUtf8, selectedNode.attr(\"encoding\"));\n-        assertEquals(xmlCharsetUTF8, docNoCharset.toString());\n-        \n-        \n-        // Disabled update of encoding definition\n-        final Document docDisabled = new Document(\"\");\n-        docDisabled.appendElement(\"root\").text(\"node\");\n-        docDisabled.outputSettings().syntax(Syntax.xml);\n-        assertFalse(docDisabled.updateMetaCharset());\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateXmlDisabled() {\n+        final Document doc = createXmlDocument(\"none\", \"none\", false);\n         \n         final String xmlNoCharset = \"<root>\\n\" +\n                                     \" node\\n\" +\n                                     \"</root>\";\n-        \n-        assertEquals(xmlNoCharset, docDisabled.toString());\n-        \n-        decl = new XmlDeclaration(\"xml\", \"\", false);\n-        decl.attr(\"version\", \"dontTouch\");\n-        decl.attr(\"encoding\", \"dontTouch\");\n-        docDisabled.prependChild(decl);\n+        assertEquals(xmlNoCharset, doc.toString());\n+    }\n+\n+    @Test\n+    public void testMetaCharsetUpdateXmlDisabledNoChanges() {\n+        final Document doc = createXmlDocument(\"dontTouch\", \"dontTouch\", true);\n         \n         final String xmlCharset = \"<?xml version=\\\"dontTouch\\\" encoding=\\\"dontTouch\\\">\\n\" +\n                                     \"<root>\\n\" +\n                                     \" node\\n\" +\n                                     \"</root>\";\n-        \n-        assertEquals(xmlCharset, docDisabled.toString());\n-        \n-        declNode = docDisabled.childNode(0);\n-        assertTrue(declNode instanceof XmlDeclaration);\n-        selectedNode = (XmlDeclaration) declNode;\n-        \n+        assertEquals(xmlCharset, doc.toString());\n+        \n+        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n         assertEquals(\"dontTouch\", selectedNode.attr(\"encoding\"));\n         assertEquals(\"dontTouch\", selectedNode.attr(\"version\"));\n     }\n+    \n+    @Test\n+    public void testMetaCharsetUpdatedDisabledPerDefault() {\n+        final Document doc = createHtmlDocument(\"none\");\n+        assertFalse(doc.updateMetaCharset());\n+    }\n+    \n+    private Document createHtmlDocument(String charset) {\n+        final Document doc = Document.createShell(\"\");\n+        doc.head().appendElement(\"meta\").attr(\"charset\", charset);\n+        doc.head().appendElement(\"meta\").attr(\"name\", \"charset\").attr(\"content\", charset);\n+        \n+        return doc;\n+    }\n+    \n+    private Document createXmlDocument(String version, String charset, boolean addDecl) {\n+        final Document doc = new Document(\"\");\n+        doc.appendElement(\"root\").text(\"node\");\n+        doc.outputSettings().syntax(Syntax.xml);\n+        \n+        if( addDecl == true ) {\n+            XmlDeclaration decl = new XmlDeclaration(\"xml\", \"\", false);\n+            decl.attr(\"version\", version);\n+            decl.attr(\"encoding\", charset);\n+            doc.prependChild(decl);\n+        }\n+        \n+        return doc;\n+    }\n }", "timestamp": 1427737785, "metainfo": ""}