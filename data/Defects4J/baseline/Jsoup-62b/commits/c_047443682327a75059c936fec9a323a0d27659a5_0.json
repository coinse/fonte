{"sha": "047443682327a75059c936fec9a323a0d27659a5", "log": "Set parent on add Child", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Comment.java\n+++ b/src/main/java/org/jsoup/nodes/Comment.java\n public class Comment extends Node {\n     private static final String COMMENT_KEY = \"comment\";\n \n-    public Comment(Node parentNode, String data) {\n-        super(parentNode);\n+    public Comment(String data) {\n+        super();\n         attributes.put(COMMENT_KEY, data);\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n     private String title;\n \n     public Document() {\n-        super(null, new StartTag(Tag.valueOf(\"html\"), null));\n+        super(new StartTag(Tag.valueOf(\"html\"), null));\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     private final Tag tag;\n     private final List<Element> elementChildren; // subset of Node.children, only holds Elements\n \n-    public Element(Node parentNode, StartTag startTag) {\n-        super(parentNode, startTag.getAttributes());\n+    public Element(StartTag startTag) {\n+        super(startTag.getAttributes());\n         this.tag = startTag.getTag();\n         elementChildren = new ArrayList<Element>();\n     }\n         Validate.notNull(child);\n         elementChildren.add(child);\n         childNodes.add(child);\n+        child.setParentNode(this);\n     }\n \n     public void addChild(Node child) {\n         Validate.notNull(child);\n         childNodes.add(child);\n+        child.setParentNode(this);\n     }\n \n     public Element nextElementSibling() {\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public abstract class Node {\n-    final Node parentNode;\n+    Node parentNode;\n     final List<Node> childNodes;\n     final Attributes attributes;\n \n     /**\n      Create a new node.\n-     @param parentNode This node's parent node. Null indicates this is the root node.\n      */\n-    protected Node(Node parentNode, Attributes attributes) {\n-        this.parentNode = parentNode;\n+    protected Node(Attributes attributes) {\n         childNodes = new ArrayList<Node>();\n         this.attributes = attributes;\n     }\n \n-    protected Node(Node parentNode) {\n-        this(parentNode, new Attributes());\n+    protected Node() {\n+        this(new Attributes());\n     }\n \n     public abstract String nodeName();\n         return parentNode;\n     }\n \n+    protected void setParentNode(Node parentNode) {\n+        this.parentNode = parentNode;\n+    }\n+\n     public Node nextSibling() {\n         // TODO: implement\n         return null;\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n  @author Jonathan Hedley, jonathan@hedley.net */\n public class TextNode extends Node {\n     private static final String TEXT_KEY = \"text\";\n-    public TextNode(Node parentNode, String text) {\n-        super(parentNode);\n+    public TextNode(String text) {\n+        super();\n         attributes.put(TEXT_KEY, text);\n     }\n \n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n             Token token = tokenStream.next();\n \n             if (token.isFullComment()) { // <!-- comment -->\n-                Comment comment = new Comment(stack.peek(), token.getCommentData());\n+                Comment comment = new Comment(token.getCommentData());\n                 stack.getLast().addChild(comment);\n             } else if (token.isStartComment()) { // <!-- comment\n                 commentAccum = new StringBuilder(token.getCommentData());\n             } else if (token.isEndComment() && commentAccum != null) { // comment -->\n                 commentAccum.append(token.getCommentData());\n-                Comment comment = new Comment(stack.peek(), commentAccum.toString());\n+                Comment comment = new Comment(commentAccum.toString());\n                 stack.getLast().addChild(comment);\n                 commentAccum = null;\n             } else if (commentAccum != null) { // within a comment\n \n                 Element parent = popStackToSuitableContainer(tag);\n                 Validate.notNull(parent, \"Should always have a viable container\");\n-                Element node = new Element(parent, startTag);\n+                Element node = new Element(startTag);\n                 parent.addChild(node);\n                 stack.add(node);\n             }\n \n             else if (token.isTextNode()) {\n                 String text = token.getData();\n-                TextNode textNode = new TextNode(stack.peek(), text);\n+                TextNode textNode = new TextNode(text);\n                 stack.getLast().addChild(textNode);\n             }\n         }", "timestamp": 1309605100, "metainfo": ""}