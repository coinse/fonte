{"sha": "e5f6e084f755969196ca9a87c6b334f7125359aa", "log": "Added support for namespaced elements (<fb:name>) and selectors (fb|name)", "commit": "\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n \n     private void parseEndTag() {\n         tq.consume(\"</\");\n-        String tagName = tq.consumeWord();\n+        String tagName = tq.consumeTagName();\n         tq.chompTo(\">\");\n \n         if (tagName.length() != 0) {\n \n     private void parseStartTag() {\n         tq.consume(\"<\");\n-        String tagName = tq.consumeWord();\n+        String tagName = tq.consumeTagName();\n \n         if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text\n             tq.addFirst(\"&lt;\");\n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n             pos++;\n         return queue.substring(start, pos);\n     }\n+    \n+    /**\n+     * Consume an tag name off the queue (word or :)\n+     * \n+     * @return tag name\n+     */\n+    public String consumeTagName() {\n+        int start = pos;\n+        while (!isEmpty() && (matchesWord() || matchesAny(\":\")))\n+            pos++;\n+        \n+        return queue.substring(start, pos);\n+    }\n+    \n+    /**\n+     * Consume a CSS element selector (tag name, but | instead of : for namespaces, to not conflict with :pseudo selects).\n+     * \n+     * @return tag name\n+     */\n+    public String consumeElementSelector() {\n+        int start = pos;\n+        while (!isEmpty() && (matchesWord() || matchesAny(\"|\")))\n+            pos++;\n+        \n+        return queue.substring(start, pos);\n+    }\n \n     /**\n      Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _)\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n  <tr><th>Pattern</th><th>Matches</th><th>Example</th></tr>\n  <tr><td><code>*</code></td><td>any element</td><td><code>*</code></td></tr>\n  <tr><td><code>E</code></td><td>an element of type E</td><td><code>h1</code></td></tr>\n+ <tr><td><code>ns|E</code></td><td>an element of type E in the namespace <i>ns</i></td><td><code>fb|name</code> finds <code>&lt;fb:name></code> elements</td></tr>\n  <tr><td><code>E#id</code></td><td>an Element with attribute ID of \"id\"</td><td><code>div#wrap</code>, <code>#logo</code></td></tr>\n  <tr><td><code>E.class</code></td><td>an Element with a class name of \"class\"</td><td><code>div.left</code>, <code>.result</code></td></tr>\n  <tr><td><code>E[attr]</code></td><td>an Element with the attribute named \"attr\"</td><td><code>a[href]</code>, <code>[title]</code></td></tr>\n     }\n \n     private Elements byTag() {\n-        String tagName = tq.consumeWord();\n+        String tagName = tq.consumeElementSelector();\n         Validate.notEmpty(tagName);\n-\n+        \n+        // namespaces: if element name is \"abc:def\", selector must be \"abc|def\", so flip:\n+        if (tagName.contains(\"|\"))\n+            tagName = tagName.replace(\"|\", \":\");\n         return root.getElementsByTag(tagName);\n     }\n \n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         List<Element> empty = doc.getElementsByTag(\"wtf\");\n         assertEquals(0, empty.size());\n     }\n+    \n+    @Test public void getNamespacedElementsByTag() {\n+        Document doc = Jsoup.parse(\"<div><abc:def id=1>Hello</abc:def></div>\");\n+        Elements els = doc.getElementsByTag(\"abc:def\");\n+        assertEquals(1, els.size());\n+        assertEquals(\"1\", els.first().id());\n+        assertEquals(\"abc:def\", els.first().tagName());\n+    }\n \n     @Test public void testGetElementById() {\n         Document doc = Jsoup.parse(reference);\n         Element span = div2.child(0).getElementById(\"2\"); // called from <p> context should be span\n         assertEquals(\"span\", span.tagName());\n     }\n-\n+    \n     @Test public void testGetText() {\n         Document doc = Jsoup.parse(reference);\n         assertEquals(\"Hello Another element\", doc.text());\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n         assertEquals(h, TextUtil.stripNewlines(out));\n     }\n     \n+    @Test public void handlesUnknownNamespaceTags() {\n+        String h = \"<foo:bar/><abc:def id=1>Foo<p>Hello</abc:def>\";\n+        Document doc = Jsoup.parse(h);\n+        assertEquals(\"<foo:bar></foo:bar><abc:def id=\\\"1\\\">Foo<p>Hello</p></abc:def>\", TextUtil.stripNewlines(doc.body().html()));\n+    }\n+    \n     @Test public void handlesEmptyBlocks() {\n         String h = \"<div id=1/><div id=2><img /></div>\";\n         Document doc = Jsoup.parse(h);\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(3, contains.size());\n         assertEquals(\"Bar\", contains.first().attr(\"title\"));\n         assertEquals(\"SLAM\", contains.last().attr(\"title\"));\n+    }\n+    \n+    @Test public void testNamespacedTag() {\n+        Document doc = Jsoup.parse(\"<div><abc:def id=1>Hello</abc:def></div> <abc:def class=bold id=2>There</abc:def>\");\n+        Elements byTag = doc.select(\"abc|def\");\n+        assertEquals(2, byTag.size());\n+        assertEquals(\"1\", byTag.first().id());\n+        assertEquals(\"2\", byTag.last().id());\n+        \n+        Elements byAttr = doc.select(\".bold\");\n+        assertEquals(1, byAttr.size());\n+        assertEquals(\"2\", byAttr.last().id());\n+        \n+        Elements byTagAttr = doc.select(\"abc|def.bold\");\n+        assertEquals(1, byTagAttr.size());\n+        assertEquals(\"2\", byTagAttr.last().id());\n+        \n+        Elements byContains = doc.select(\"abc|def:contains(e)\");\n+        assertEquals(2, byContains.size());\n+        assertEquals(\"1\", byContains.first().id());\n+        assertEquals(\"2\", byContains.last().id());\n     }\n \n     @Test public void testByAttributeStarting() {", "timestamp": 1309605116, "metainfo": ""}