{"sha": "5eecccd3eae2d7af9c8426473e9ee53bc01bc7c0", "log": "Added selector support for :eq, :lt, and gt  Closes #16", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n      * @return position in element sibling list\n      */\n     public Integer elementSiblingIndex() {\n+       if (parent() == null) return 0;\n        return indexInList(this, parent().children()); \n     }\n \n      */\n     public Elements getElementsByAttributeValueContaining(String key, String match) {\n         return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);\n+    }\n+    \n+    /**\n+     * Find elements whose sibling index is less than the supplied index.\n+     * @param index 0-based index\n+     * @return elements less than index\n+     */\n+    public Elements getElementsByIndexLessThan(int index) {\n+        return Collector.collect(new Evaluator.IndexLessThan(index), this);\n+    }\n+    \n+    /**\n+     * Find elements whose sibling index is greater than the supplied index.\n+     * @param index 0-based index\n+     * @return elements greater than index\n+     */\n+    public Elements getElementsByIndexGreaterThan(int index) {\n+        return Collector.collect(new Evaluator.IndexGreaterThan(index), this);\n+    }\n+    \n+    /**\n+     * Find elements whose sibling index is equal to the supplied index.\n+     * @param index 0-based index\n+     * @return elements equal to index\n+     */\n+    public Elements getElementsByIndexEquals(int index) {\n+        return Collector.collect(new Evaluator.IndexEquals(index), this);\n     }\n     \n     /**\n--- a/src/main/java/org/jsoup/nodes/Evaluator.java\n+++ b/src/main/java/org/jsoup/nodes/Evaluator.java\n             return true;\n         }\n     }\n+    \n+    static final class IndexLessThan extends IndexEvaluator {\n+        IndexLessThan(int index) {\n+            super(index);\n+        }\n+\n+        public boolean matches(Element element) {\n+            return element.elementSiblingIndex() < index;\n+        }\n+    }\n+    \n+    static final class IndexGreaterThan extends IndexEvaluator {\n+        IndexGreaterThan(int index) {\n+            super(index);\n+        }\n+\n+        public boolean matches(Element element) {\n+            return element.elementSiblingIndex() > index;\n+        }\n+    }\n+    \n+    static final class IndexEquals extends IndexEvaluator {\n+        IndexEquals(int index) {\n+            super(index);\n+        }\n+\n+        public boolean matches(Element element) {\n+            return element.elementSiblingIndex() == index;\n+        }\n+    }    \n+    \n+    abstract static class IndexEvaluator extends Evaluator {\n+        protected int index;\n+        \n+        IndexEvaluator(int index) {\n+            this.index = index;\n+        }\n+    }\n \n \n }\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n package org.jsoup.select;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.Validate;\n import org.jsoup.nodes.Element;\n import org.jsoup.parser.TokenQueue;\n  <tr><td><code>E + F</code></td><td>an F element immediately preceded by sibling E</td><td><code>li + li</code>, <code>div.head + div</code></td></tr>\n  <tr><td><code>E ~ F</code></td><td>an F element preceded by sibling E</td><td><code>h1 ~ p</code></td></tr>\n  <tr><td><code>E, F, G</code></td><td>any matching element E, F, or G</td><td><code>a[href], div, h3</code></td></tr>\n+ <tr><td><td colspan=\"3\"><h3>Pseudo selectors</h3></td></tr>\n+ <tr><td><code>E:lt(<em>n</em>)</code></td><td>an Element whose sibling index is less than <em>n</em></td><td><code>td:lt(3)</code> finds the first 2 cells of each row</td></tr>\n+ <tr><td><code>E:gt(<em>n</em>)</code></td><td>an Element whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n+ <tr><td><code>E:eq(<em>n</em>)</code></td><td>an Element whose sibling index is equal to <em>n</em></td><td><code>td:eq(1)</code> finds the first cell of each row</td></tr>\n  </table>\n \n  @see Element#select(String)\n             return byAttribute();\n         } else if (tq.matchChomp(\"*\")) {\n             return allElements();\n+        } else if (tq.matchChomp(\":lt(\")) {\n+            return indexLessThan();\n+        } else if (tq.matchChomp(\":gt(\")) {\n+            return indexGreaterThan();\n+        } else if (tq.matchChomp(\":eq(\")) {\n+            return indexEquals();\n         } else { // unhandled\n             throw new SelectorParseException(\"Could not parse query \" + query);\n         }\n \n     private Elements allElements() {\n         return root.getAllElements();\n+    }\n+    \n+    // pseudo selectors :lt, :gt, :eq\n+    private Elements indexLessThan() {\n+        return root.getElementsByIndexLessThan(consumeIndex());\n+    }\n+    \n+    private Elements indexGreaterThan() {\n+        return root.getElementsByIndexGreaterThan(consumeIndex());\n+    }\n+    \n+    private Elements indexEquals() {\n+        return root.getElementsByIndexEquals(consumeIndex());\n+    }\n+\n+    private int consumeIndex() {\n+        String indexS = tq.chompTo(\")\").trim();\n+        Validate.isTrue(StringUtils.isNumeric(indexS), \"Index must be numeric\");\n+        int index = Integer.parseInt(indexS);\n+\n+        return index;\n     }\n \n     // direct child descendants\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         Element div = doc.select(\"div\").select(\" > div\").first();\n         assertEquals(\"2\", div.id());\n     }\n+    \n+    @Test public void testPseudoLessThan() {\n+        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n+        Elements ps = doc.select(\"div p:lt(2)\");\n+        assertEquals(3, ps.size());\n+        assertEquals(\"One\", ps.get(0).text());\n+        assertEquals(\"Two\", ps.get(1).text());\n+        assertEquals(\"Four\", ps.get(2).text());\n+    }\n+    \n+    @Test public void testPseudoGreaterThan() {\n+        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>\");\n+        Elements ps = doc.select(\"div p:gt(0)\");\n+        assertEquals(2, ps.size());\n+        assertEquals(\"Two\", ps.get(0).text());\n+        assertEquals(\"Three\", ps.get(1).text());\n+    }\n+    \n+    @Test public void testPseudoEquals() {\n+        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n+        Elements ps = doc.select(\"div p:eq(0)\");\n+        assertEquals(2, ps.size());\n+        assertEquals(\"One\", ps.get(0).text());\n+        assertEquals(\"Four\", ps.get(1).text());\n+        \n+        Elements ps2 = doc.select(\"div:eq(0) p:eq(0)\");\n+        assertEquals(1, ps2.size());\n+        assertEquals(\"One\", ps2.get(0).text());\n+        assertEquals(\"p\", ps2.get(0).tagName());\n+    }\n+    \n+    @Test public void testPseudoBetween() {\n+        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n+        Elements ps = doc.select(\"div p:gt(0):lt(2)\");\n+        assertEquals(1, ps.size());\n+        assertEquals(\"Two\", ps.get(0).text());\n+    }\n+    \n+    @Test public void testPseudoCombined() {\n+        Document doc = Jsoup.parse(\"<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>\");\n+        Elements ps = doc.select(\"div.foo p:gt(0)\");\n+        assertEquals(1, ps.size());\n+        assertEquals(\"Two\", ps.get(0).text());\n+    }\n }", "timestamp": 1309605112, "metainfo": ""}