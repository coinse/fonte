{"sha": "a8da2e7da25921dffd9fe6bbd53668bed08dd148", "log": "Added a maximum body response size to Jsoup.Connection", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n     public Connection timeout(int millis);\n \n     /**\n+     * Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed,\n+     * and the input truncated. The default maximum is 1MB. A max size of zero is treated as an infinite amount (bounded\n+     * only by your patience and the memory available on your machine). The amount actually read may be up to ~ 100K\n+     * larger, as a result of the internal stream read buffer.\n+     *\n+     * @param bytes number of bytes to read from the input before truncating\n+     * @return this Connection, for chaining\n+     */\n+    public Connection maxBodySize(int bytes);\n+\n+    /**\n      * Set the request referrer (aka \"referer\") header.\n      * @param referrer referrer to use\n      * @return this Connection, for chaining\n         public Request timeout(int millis);\n \n         /**\n+         * Get the maximum body size, in milliseconds.\n+         * @return the maximum body size, in milliseconds.\n+         */\n+        public int maxBodySize();\n+\n+        /**\n+         * Update the maximum body size, in milliseconds.\n+         * @param bytes maximum body size, in milliseconds.\n+         * @return this Request, for chaining\n+         */\n+        public Request maxBodySize(int bytes);\n+\n+        /**\n          * Get the current followRedirects configuration.\n          * @return true if followRedirects is enabled.\n          */\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n         return doc;\n     }\n \n-    static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {\n+    /**\n+     * Read the input stream into a byte buffer.\n+     * @param inStream the input stream to read from\n+     * @param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited. Note that this size\n+     * is treated as a imprecise hint, and the actual amount read may be greater by up to the size of the internal\n+     * read buffer.\n+     * @return the filled byte buffer\n+     * @throws IOException if an exception occurs whilst reading from the input stream.\n+     */\n+    static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n+        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");\n         byte[] buffer = new byte[bufferSize];\n         ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);\n-        int read;\n-        while(true) {\n-            read  = inStream.read(buffer);\n+        int read, totalRead = 0;\n+        while (true) {\n+            read = inStream.read(buffer);\n+            totalRead += read;\n             if (read == -1) break;\n             outStream.write(buffer, 0, read);\n+            if (maxSize > 0 && totalRead >= maxSize) break;\n         }\n         ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());\n         return byteData;\n+    }\n+\n+    static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {\n+        return readToByteBuffer(inStream, 0);\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n \n     public Connection timeout(int millis) {\n         req.timeout(millis);\n+        return this;\n+    }\n+\n+    public Connection maxBodySize(int bytes) {\n+        req.maxBodySize(bytes);\n         return this;\n     }\n \n \n     public static class Request extends Base<Connection.Request> implements Connection.Request {\n         private int timeoutMilliseconds;\n+        private int maxBodySizeBytes;\n         private boolean followRedirects;\n         private Collection<Connection.KeyVal> data;\n         private boolean ignoreHttpErrors = false;\n \n       \tprivate Request() {\n             timeoutMilliseconds = 3000;\n+            maxBodySizeBytes = 1024 * 1024; // 1MB\n             followRedirects = true;\n             data = new ArrayList<Connection.KeyVal>();\n             method = Connection.Method.GET;\n         public Request timeout(int millis) {\n             Validate.isTrue(millis >= 0, \"Timeout milliseconds must be 0 (infinite) or greater\");\n             timeoutMilliseconds = millis;\n+            return this;\n+        }\n+\n+        public int maxBodySize() {\n+            return maxBodySizeBytes;\n+        }\n+\n+        public Connection.Request maxBodySize(int bytes) {\n+            Validate.isTrue(bytes >= 0, \"maxSize must be 0 (unlimited) or larger\");\n+            maxBodySizeBytes = bytes;\n             return this;\n         }\n \n                             new BufferedInputStream(new GZIPInputStream(dataStream)) :\n                             new BufferedInputStream(dataStream);\n \n-                    res.byteData = DataUtil.readToByteBuffer(bodyStream);\n+                    res.byteData = DataUtil.readToByteBuffer(bodyStream, req.maxBodySize());\n                     res.charset = DataUtil.getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it\n                 } finally {\n                     if (bodyStream != null) bodyStream.close();\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n         assertTrue(doc.text().contains(\"Hello!\"));\n         assertEquals(\"UTF-8\", res.charset()); // set from default on parse\n     }\n+\n+    @Test\n+    public void maxBodySize() throws IOException {\n+        String url = \"http://direct.infohound.net/tools/large.html\"; // 280 K\n+\n+        Document defaultDoc = Jsoup.connect(url).get();\n+        Document smallDoc = Jsoup.connect(url).maxBodySize(50 * 1024).get();\n+        Document mediumDoc = Jsoup.connect(url).maxBodySize(200 * 1024).get();\n+        Document largeDoc = Jsoup.connect(url).maxBodySize(300 * 1024).get();\n+        Document unlimitedDoc = Jsoup.connect(url).maxBodySize(0).get();\n+\n+        int actual = 269541;\n+        assertEquals(actual, defaultDoc.text().length());\n+        assertEquals(125812, smallDoc.text().length()); // asked for 50, but rounds up to buffer (~ 130K). ok.\n+        assertEquals(251736, mediumDoc.text().length()); // as above, next multiple of 130K\n+        assertEquals(actual, largeDoc.text().length());\n+        assertEquals(actual, unlimitedDoc.text().length());\n+    }\n }", "timestamp": 1355210395, "metainfo": ""}