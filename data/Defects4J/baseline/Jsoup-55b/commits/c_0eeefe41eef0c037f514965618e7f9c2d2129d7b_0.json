{"sha": "0eeefe41eef0c037f514965618e7f9c2d2129d7b", "log": "Initial bits of HTML cleaner.", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n+package org.jsoup.safety;\n+\n+public class Cleaner {\n+    \n+}\n--- /dev/null\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n+package org.jsoup.safety;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang.Validate;\n+\n+public class Whitelist {\n+    private Set<TagName> tagNames; // tags allowed, lower case. e.g. [p, br, span]\n+    private Map<TagName, Set<AttributeKey>> attributes; // tag -> attribute[]. allowed attributes [href, src, class] for a tag.\n+    private Map<TagName, Map<AttributeKey, AttributeValue>> addAttributes; // always set these attribute values\n+    private Map<TagName, Map<AttributeKey, Protocol>> protocols; // allowed URL protocols for attributes\n+    \n+    public Whitelist() {\n+        tagNames = new HashSet<TagName>();\n+        attributes = new HashMap<TagName, Set<AttributeKey>>();\n+        addAttributes = new HashMap<TagName, Map<AttributeKey, AttributeValue>>();\n+        protocols = new HashMap<TagName, Map<AttributeKey, Protocol>>();\n+    }\n+    \n+    public Whitelist addTags(String... tags) {\n+        for (String tagName : tags) {\n+            tagNames.add(TagName.valueOf(tagName));\n+        }\n+        return this;\n+    }\n+    \n+    public Whitelist addAttributes(String tag, String... attribute) {\n+        TagName tagName = TagName.valueOf(tag);\n+        Set<AttributeKey> attributeSet = new HashSet<AttributeKey>();\n+        for (String key : attribute) {\n+            attributeSet.add(AttributeKey.valueOf(key));\n+        }\n+        if (attributes.containsKey(tagName)) {\n+            Set<AttributeKey> currentSet = attributes.get(tagName);\n+            currentSet.addAll(attributeSet);\n+        } else {\n+            attributes.put(tagName, attributeSet);\n+        }\n+        return this;\n+        \n+    }\n+\n+    // named types for config. All just hold strings, but here for my sanity.\n+    static class TagName extends TypedValue {\n+        TagName(String value) {\n+            super(value);\n+        }\n+        static TagName valueOf(String value) {\n+            return new TagName(value);\n+        }\n+    }\n+    \n+    static class AttributeKey extends TypedValue {\n+        AttributeKey(String value) {\n+            super(value);\n+        }\n+        static AttributeKey valueOf(String value) {\n+            return new AttributeKey(value);\n+        }\n+    }\n+    \n+    static class AttributeValue extends TypedValue {\n+        AttributeValue(String value) {\n+            super(value);\n+        }\n+        static AttributeValue valueOf(String value) {\n+            return new AttributeValue(value);\n+        }\n+    }\n+    \n+    static class Protocol extends TypedValue {\n+        Protocol(String value) {\n+            super(value);\n+        }\n+        static Protocol valueOf(String value) {\n+            return new Protocol(value);\n+        }\n+    }\n+    \n+    abstract static class TypedValue {\n+        private String value;\n+        \n+        TypedValue(String value) {\n+            Validate.notEmpty(value);\n+            this.value = value;\n+        }\n+        \n+        @Override\n+        public int hashCode() {\n+            final int prime = 31;\n+            int result = 1;\n+            result = prime * result + ((value == null) ? 0 : value.hashCode());\n+            return result;\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj) return true;\n+            if (obj == null) return false;\n+            if (getClass() != obj.getClass()) return false;\n+            TypedValue other = (TypedValue) obj;\n+            if (value == null) {\n+                if (other.value != null) return false;\n+            } else if (!value.equals(other.value)) return false;\n+            return true;\n+        }\n+        \n+        @Override\n+        public String toString() {\n+            return value;\n+        }        \n+    }\n+}\n+", "timestamp": 1309605104, "metainfo": ""}