{"sha": "1e09df66f0302958d547037e7258913b3069f2b6", "log": "Fix a relative redirect issue, and clean up URL resolving.  Fixes #585", "commit": "\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n                     String location = res.header(LOCATION);\n                     if (location != null && location.startsWith(\"http:/\") && location.charAt(6) != '/') // fix broken Location: http:/temp/AAG_New/en/index.php\n                         location = location.substring(6);\n-                    req.url(new URL(req.url(), encodeUrl(location)));\n+                    req.url(StringUtil.resolve(req.url(), encodeUrl(location)));\n \n                     for (Map.Entry<String, String> cookie : res.cookies.entrySet()) { // add response cookies to request (for e.g. login posts)\n                         req.cookie(cookie.getKey(), cookie.getValue());\n--- a/src/main/java/org/jsoup/helper/StringUtil.java\n+++ b/src/main/java/org/jsoup/helper/StringUtil.java\n package org.jsoup.helper;\n \n+import java.net.MalformedURLException;\n+import java.net.URL;\n import java.util.Collection;\n import java.util.Iterator;\n \n         }\n         return false;\n     }\n+\n+    /**\n+     * Create a new absolute URL, from a provided existing absolute URL and a relative URL component.\n+     * @param base the existing absolulte base URL\n+     * @param relUrl the relative URL to resolve. (If it's already absolute, it will be returned)\n+     * @return the resolved absolute URL\n+     * @throws MalformedURLException if an error occurred generating the URL\n+     */\n+    public static URL resolve(URL base, String relUrl) throws MalformedURLException {\n+        // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n+        if (relUrl.startsWith(\"?\"))\n+            relUrl = base.getPath() + relUrl;\n+        // workaround: //example.com + ./foo = //example.com/./foo, not //example.com/foo\n+        if (relUrl.indexOf('.') == 0 && base.getFile().indexOf('/') != 0) {\n+            base = new URL(base.getProtocol(), base.getHost(), base.getPort(), \"/\" + base.getFile());\n+        }\n+        return new URL(base, relUrl);\n+    }\n+\n+    /**\n+     * Create a new absolute URL, from a provided existing absolute URL and a relative URL component.\n+     * @param baseUrl the existing absolute base URL\n+     * @param relUrl the relative URL to resolve. (If it's already absolute, it will be returned)\n+     * @return an absolute URL if one was able to be generated, or the empty string if not\n+     */\n+    public static String resolve(final String baseUrl, final String relUrl) {\n+        URL base;\n+        try {\n+            try {\n+                base = new URL(baseUrl);\n+            } catch (MalformedURLException e) {\n+                // the base is unsuitable, but the attribute/rel may be abs on its own, so try that\n+                URL abs = new URL(relUrl);\n+                return abs.toExternalForm();\n+            }\n+            return resolve(base, relUrl).toExternalForm();\n+        } catch (MalformedURLException e) {\n+            return \"\";\n+        }\n+\n+    }\n }\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n     public String absUrl(String attributeKey) {\n         Validate.notEmpty(attributeKey);\n \n-        String relUrl = attr(attributeKey);\n         if (!hasAttr(attributeKey)) {\n             return \"\"; // nothing to make absolute with\n         } else {\n-            URL base;\n-            try {\n-                try {\n-                    base = new URL(baseUri);\n-                } catch (MalformedURLException e) {\n-                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n-                    URL abs = new URL(relUrl);\n-                    return abs.toExternalForm();\n-                }\n-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n-                if (relUrl.startsWith(\"?\"))\n-                    relUrl = base.getPath() + relUrl;\n-                URL abs = new URL(base, relUrl);\n-                return abs.toExternalForm();\n-            } catch (MalformedURLException e) {\n-                return \"\";\n-            }\n+            return StringUtil.resolve(baseUri, attr(attributeKey));\n         }\n     }\n \n--- a/src/test/java/org/jsoup/helper/StringUtilTest.java\n+++ b/src/test/java/org/jsoup/helper/StringUtilTest.java\n \n import java.util.Arrays;\n \n+import static org.jsoup.helper.StringUtil.*;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n     }\n \n     @Test public void normaliseWhiteSpace() {\n-        assertEquals(\" \", StringUtil.normaliseWhitespace(\"    \\r \\n \\r\\n\"));\n-        assertEquals(\" hello there \", StringUtil.normaliseWhitespace(\"   hello   \\r \\n  there    \\n\"));\n-        assertEquals(\"hello\", StringUtil.normaliseWhitespace(\"hello\"));\n-        assertEquals(\"hello there\", StringUtil.normaliseWhitespace(\"hello\\nthere\"));\n+        assertEquals(\" \", normaliseWhitespace(\"    \\r \\n \\r\\n\"));\n+        assertEquals(\" hello there \", normaliseWhitespace(\"   hello   \\r \\n  there    \\n\"));\n+        assertEquals(\"hello\", normaliseWhitespace(\"hello\"));\n+        assertEquals(\"hello there\", normaliseWhitespace(\"hello\\nthere\"));\n     }\n \n     @Test public void normaliseWhiteSpaceHandlesHighSurrogates() {\n         String test71540chars = \"\\ud869\\udeb2\\u304b\\u309a  1\";\n         String test71540charsExpectedSingleWhitespace = \"\\ud869\\udeb2\\u304b\\u309a 1\";\n \n-        assertEquals(test71540charsExpectedSingleWhitespace, StringUtil.normaliseWhitespace(test71540chars));\n+        assertEquals(test71540charsExpectedSingleWhitespace, normaliseWhitespace(test71540chars));\n         String extractedText = Jsoup.parse(test71540chars).text();\n         assertEquals(test71540charsExpectedSingleWhitespace, extractedText);\n     }\n+\n+    @Test public void resolvesRelativeUrls() {\n+        assertEquals(\"http://example.com/one/two?three\", resolve(\"http://example.com\", \"./one/two?three\"));\n+        assertEquals(\"http://example.com/one/two?three\", resolve(\"http://example.com?one\", \"./one/two?three\"));\n+        assertEquals(\"http://example.com/one/two?three#four\", resolve(\"http://example.com\", \"./one/two?three#four\"));\n+        assertEquals(\"https://example.com/one\", resolve(\"http://example.com/\", \"https://example.com/one\"));\n+        assertEquals(\"http://example.com/one/two.html\", resolve(\"http://example.com/two/\", \"../one/two.html\"));\n+        assertEquals(\"https://example2.com/one\", resolve(\"https://example.com/\", \"//example2.com/one\"));\n+        assertEquals(\"https://example.com:8080/one\", resolve(\"https://example.com:8080\", \"./one\"));\n+        assertEquals(\"https://example2.com/one\", resolve(\"http://example.com/\", \"https://example2.com/one\"));\n+        assertEquals(\"https://example.com/one\", resolve(\"wrong\", \"https://example.com/one\"));\n+        assertEquals(\"https://example.com/one\", resolve(\"https://example.com/one\", \"\"));\n+        assertEquals(\"\", resolve(\"wrong\", \"also wrong\"));\n+        assertEquals(\"ftp://example.com/one\", resolve(\"ftp://example.com/two/\", \"../one\"));\n+        assertEquals(\"ftp://example.com/one/two.c\", resolve(\"ftp://example.com/one/\", \"./two.c\"));\n+        assertEquals(\"ftp://example.com/one/two.c\", resolve(\"ftp://example.com/one/\", \"two.c\"));\n+    }\n }\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n         Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302-rel-dot.pl\"); // to ./ok.html\n         Document doc = con.post();\n         assertTrue(doc.title().contains(\"OK\"));\n+        assertEquals(doc.location(), \"http://direct.infohound.net/tools/ok.html\");\n+    }\n+\n+    @Test\n+    public void followsRelativeDotRedirect2() throws IOException {\n+        //redirects to \"esportspenedes.cat/./ep/index.php\", should resolve to \"esportspenedes.cat/ep/index.php\"\n+        Connection con = Jsoup.connect(\"http://esportspenedes.cat\")  // note lack of trailing / - server should redir to / first, then to ./ep/...; but doesn't'\n+                .timeout(10000);\n+        Document doc = con.post();\n+        assertEquals(doc.location(), \"http://esportspenedes.cat/ep/index.php\");\n     }\n \n     @Test\n--- a/src/test/java/org/jsoup/nodes/NodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/NodeTest.java\n \n         Element a2 = doc.select(\"a\").get(1);\n         assertEquals(\"http://jsoup.org/path/bar.html?foo\", a2.absUrl(\"href\"));\n+    }\n+\n+    @Test public void absHandlesDotFromIndex() {\n+        Document doc = Jsoup.parse(\"<a href='./one/two.html'>One</a>\", \"http://example.com\");\n+        Element a1 = doc.select(\"a\").first();\n+        assertEquals(\"http://example.com/one/two.html\", a1.absUrl(\"href\"));\n     }\n     \n     @Test public void testRemove() {", "timestamp": 1436852090, "metainfo": ""}