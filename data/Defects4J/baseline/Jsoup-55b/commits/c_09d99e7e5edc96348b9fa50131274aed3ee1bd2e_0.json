{"sha": "09d99e7e5edc96348b9fa50131274aed3ee1bd2e", "log": "Mini optimisations", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n  * <p/>\n  * Draft implementation. Do not consume.\n  */\n-public class Entities {\n+class Entities {\n     public enum EscapeMode {\n         base, extended\n     }\n         for (int pos = 0; pos < string.length(); pos++) {\n             Character c = string.charAt(pos);\n             if (map.containsKey(c))\n-                accum.append(\"&\").append(map.get(c)).append(\";\");\n+                accum.append('&').append(map.get(c)).append(';');\n             else if (encoder.canEncode(c))\n-                accum.append(c);\n+                accum.append(c.charValue());\n             else\n-                accum.append(\"&#\").append((int) c).append(\";\");\n+                accum.append(\"&#\").append((int) c).append(';');\n         }\n \n         return accum.toString();\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n         }\n \n         public void tail(Node node, int depth) {\n-            node.outerHtmlTail(accum, depth, out);\n+            if (!node.nodeName().equals(\"#text\")) // saves a void hit.\n+                node.outerHtmlTail(accum, depth, out);\n         }\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n  @author Jonathan Hedley, jonathan@hedley.net */\n public class TextNode extends Node {\n     private static final String TEXT_KEY = \"text\";\n-    private static final Pattern spaceNormaliser = Pattern.compile(\"\\\\s{2,}|(\\\\r\\\\n|\\\\r|\\\\n)\");\n+    private static final Pattern spaceNormaliser = Pattern.compile(\"\\\\s{2,}|(?:\\\\r\\\\n|\\\\r|\\\\n)\");\n \n     /**\n      Create a new TextNode representing the supplied (unencoded) text).", "timestamp": 1309605117, "metainfo": ""}