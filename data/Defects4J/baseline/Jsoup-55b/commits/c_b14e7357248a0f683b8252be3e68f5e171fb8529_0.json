{"sha": "b14e7357248a0f683b8252be3e68f5e171fb8529", "log": "Speed fix for Android canEncode  Fixes #383", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n \n         boolean lastWasWhite = false;\n         boolean reachedNonWhite = false;\n-        EscapeMode escapeMode = out.escapeMode();\n-        CharsetEncoder encoder = out.encoder();\n-        Map<Character, String> map = escapeMode.getMap();\n+        final EscapeMode escapeMode = out.escapeMode();\n+        final CharsetEncoder encoder = out.encoder();\n+        final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n+        final Map<Character, String> map = escapeMode.getMap();\n         final int length = string.length();\n \n         int codePoint;\n                             accum.append(c);\n                         break;\n                     default:\n-                        if (encoder.canEncode(c))\n+                        if (canEncode(coreCharset, c, encoder))\n                             accum.append(c);\n                         else if (map.containsKey(c))\n                             accum.append('&').append(map.get(c)).append(';');\n                 }\n             } else {\n                 final String c = new String(Character.toChars(codePoint));\n-                if (encoder.canEncode(c))\n+                if (encoder.canEncode(c)) // uses fallback encoder for simplicity\n                     accum.append(c);\n                 else\n                     accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n \n     /**\n      * Unescape the input string.\n-     * @param string\n+     * @param string to un-HTML-escape\n      * @param strict if \"strict\" (that is, requires trailing ';' char, otherwise that's optional)\n-     * @return\n+     * @return unescaped string\n      */\n     static String unescape(String string, boolean strict) {\n         return Parser.unescapeEntities(string, strict);\n+    }\n+\n+    /*\n+     * Provides a fast-path for Encoder.canEncode, which drastically improves performance on Android post JellyBean.\n+     * After KitKat, the implementation of canEncode degrades to the point of being useless. For non ASCII or UTF,\n+     * performance may be bad. We can add more encoders for common character sets that are impacted by performance\n+     * issues on Android if required.\n+     *\n+     * Benchmarks:     *\n+     * OLD toHtml() impl v New (fastpath) in millis\n+     * Wiki: 1895, 16\n+     * CNN: 6378, 55\n+     * Alterslash: 3013, 28\n+     * Jsoup: 167, 2\n+     */\n+\n+    private static boolean canEncode(final CoreCharset charset, final char c, final CharsetEncoder fallback) {\n+        // todo add more charset tests if impacted by Android's bad perf in canEncode\n+        switch (charset) {\n+            case ascii:\n+                return c < 0x80;\n+            case utf:\n+                return true; // real is:!(Character.isLowSurrogate(c) || Character.isHighSurrogate(c)); - but already check above\n+            default:\n+                return fallback.canEncode(c);\n+        }\n+    }\n+\n+    private enum CoreCharset {\n+        ascii, utf, fallback;\n+\n+        private static CoreCharset byName(String name) {\n+            if (name.equals(\"US-ASCII\"))\n+                return ascii;\n+            if (name.startsWith(\"UTF-\")) // covers UTF-8, UTF-16, et al\n+                return utf;\n+            return fallback;\n+        }\n     }\n \n ", "timestamp": 1428373803, "metainfo": ""}