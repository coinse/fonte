{"sha": "ce7ceeec5bd729f7f300fce126bb856f7630593b", "log": "Merge branch 'schmid-michael-master'  Fixes #470", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/jsoup/SerializationException.java\n+package org.jsoup;\n+\n+/**\n+ * A SerializationException is raised whenever serialization of a DOM element fails. This exception usually wraps an\n+ * {@link java.io.IOException} that may be thrown due to an inaccessible output stream.\n+ */\n+public final class SerializationException extends RuntimeException {\n+\t/**\n+\t * Creates and initializes a new serialization exception with no error message and cause.\n+\t */\n+\tpublic SerializationException() {\n+\t\tsuper();\n+\t}\n+\n+\t/**\n+\t * Creates and initializes a new serialization exception with the given error message and no cause.\n+\t * \n+\t * @param message\n+\t *            the error message of the new serialization exception (may be <code>null</code>).\n+\t */\n+\tpublic SerializationException(String message) {\n+\t\tsuper(message);\n+\t}\n+\n+\t/**\n+\t * Creates and initializes a new serialization exception with the specified cause and an error message of\n+     * <code>(cause==null ? null : cause.toString())</code> (which typically contains the class and error message of\n+     * <code>cause</code>).\n+\t * \n+\t * @param cause\n+\t *            the cause of the new serialization exception (may be <code>null</code>).\n+\t */\n+\tpublic SerializationException(Throwable cause) {\n+\t\tsuper(cause);\n+\t}\n+\n+\t/**\n+\t * Creates and initializes a new serialization exception with the given error message and cause.\n+\t * \n+\t * @param message\n+\t *            the error message of the new serialization exception.\n+\t * @param cause\n+\t *            the cause of the new serialization exception.\n+\t */\n+\tpublic SerializationException(String message, Throwable cause) {\n+\t\tsuper(message, cause);\n+\t}\n+}\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n package org.jsoup.nodes;\n \n+import org.jsoup.SerializationException;\n import org.jsoup.helper.Validate;\n \n+import java.io.IOException;\n import java.util.Arrays;\n import java.util.Map;\n \n      */\n     public String html() {\n         StringBuilder accum = new StringBuilder();\n-        html(accum, (new Document(\"\")).outputSettings());\n+        \n+        try {\n+        \thtml(accum, (new Document(\"\")).outputSettings());\n+        } catch(IOException exception) {\n+        \tthrow new SerializationException(exception);\n+        }\n         return accum.toString();\n     }\n     \n-    protected void html(StringBuilder accum, Document.OutputSettings out) {\n+    protected void html(Appendable accum, Document.OutputSettings out) throws IOException {\n         accum.append(key);\n         if (!shouldCollapseAttribute(out)) {\n             accum.append(\"=\\\"\");\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n package org.jsoup.nodes;\n \n+import org.jsoup.SerializationException;\n import org.jsoup.helper.Validate;\n \n+import java.io.IOException;\n import java.util.*;\n \n /**\n     /**\n      Get the HTML representation of these attributes.\n      @return HTML\n+     @throws SerializationException if the HTML representation of the attributes cannot be constructed.\n      */\n     public String html() {\n         StringBuilder accum = new StringBuilder();\n-        html(accum, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used\n+        try {\n+            html(accum, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used\n+        } catch (IOException e) { // ought never happen\n+            throw new SerializationException(e);\n+        }\n         return accum.toString();\n     }\n     \n-    void html(StringBuilder accum, Document.OutputSettings out) {\n+    void html(Appendable accum, Document.OutputSettings out) throws IOException {\n         if (attributes == null)\n             return;\n         \n--- a/src/main/java/org/jsoup/nodes/Comment.java\n+++ b/src/main/java/org/jsoup/nodes/Comment.java\n package org.jsoup.nodes;\n+\n+import java.io.IOException;\n \n /**\n  A comment node.\n         return attributes.get(COMMENT_KEY);\n     }\n \n-    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n+\tvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         if (out.prettyPrint())\n             indent(accum, depth, out);\n         accum\n                 .append(\"-->\");\n     }\n \n-    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n+\tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}\n \n     @Override\n     public String toString() {\n--- a/src/main/java/org/jsoup/nodes/DataNode.java\n+++ b/src/main/java/org/jsoup/nodes/DataNode.java\n package org.jsoup.nodes;\n+\n+import java.io.IOException;\n \n /**\n  A data node, for contents of style, script tags etc, where contents should not show in text().\n         return this;\n     }\n \n-    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n+\tvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         accum.append(getWholeData()); // data is not escaped in return from data nodes, so \" in script, style is plain\n     }\n \n-    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n+\tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}\n \n     @Override\n     public String toString() {\n--- a/src/main/java/org/jsoup/nodes/DocumentType.java\n+++ b/src/main/java/org/jsoup/nodes/DocumentType.java\n package org.jsoup.nodes;\n+\n+import java.io.IOException;\n \n import org.jsoup.helper.StringUtil;\n import org.jsoup.nodes.Document.OutputSettings.*;\n     }\n \n     @Override\n-    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n+    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         if (out.syntax() == Syntax.html && !has(PUBLIC_ID) && !has(SYSTEM_ID)) {\n             // looks like a html5 doctype, go lowercase for aesthetics\n             accum.append(\"<!doctype\");\n     }\n \n     @Override\n-    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {\n+    void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {\n     }\n \n     private boolean has(final String attribute) {\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n import org.jsoup.helper.Validate;\n import org.jsoup.parser.Parser;\n import org.jsoup.parser.Tag;\n-import org.jsoup.select.*;\n-\n-import java.util.*;\n+import org.jsoup.select.Collector;\n+import org.jsoup.select.Elements;\n+import org.jsoup.select.Evaluator;\n+import org.jsoup.select.NodeTraversor;\n+import org.jsoup.select.NodeVisitor;\n+import org.jsoup.select.Selector;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n import java.util.regex.Pattern;\n import java.util.regex.PatternSyntaxException;\n \n         return this;\n     }\n \n-    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n-        if (accum.length() > 0 && out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline()) )\n-            indent(accum, depth, out);\n+    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n+        if (out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline())) {\n+            if (accum instanceof StringBuilder) {\n+                if (((StringBuilder) accum).length() > 0)\n+                    indent(accum, depth, out);\n+            } else {\n+                indent(accum, depth, out);\n+            }\n+        }\n         accum\n                 .append(\"<\")\n                 .append(tagName());\n             accum.append(\">\");\n     }\n \n-    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {\n+\tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         if (!(childNodes.isEmpty() && tag.isSelfClosing())) {\n             if (out.prettyPrint() && (!childNodes.isEmpty() && (\n                     tag.formatAsBlock() || (out.outline() && (childNodes.size()>1 || (childNodes.size()==1 && !(childNodes.get(0) instanceof TextNode))))\n         for (Node node : childNodes)\n             node.outerHtml(accum);\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public <T extends Appendable> T html(T appendable) {\n+        for (Node node : childNodes)\n+            node.outerHtml(appendable);\n+\n+        return appendable;\n+    }\n     \n     /**\n      * Set this element's inner HTML. Clears the existing HTML first.\n         return this;\n     }\n \n-    public String toString() {\n+\tpublic String toString() {\n         return outerHtml();\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n package org.jsoup.nodes;\n \n+import org.jsoup.SerializationException;\n import org.jsoup.helper.StringUtil;\n import org.jsoup.parser.Parser;\n \n     \n     static String escape(String string, Document.OutputSettings out) {\n         StringBuilder accum = new StringBuilder(string.length() * 2);\n-        escape(accum, string, out, false, false, false);\n+        try {\n+            escape(accum, string, out, false, false, false);\n+        } catch (IOException e) {\n+            throw new SerializationException(e); // doesn't happen\n+        }\n         return accum.toString();\n     }\n \n     // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations\n-    static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n-                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n+    static void escape(Appendable accum, String string, Document.OutputSettings out,\n+                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) throws IOException {\n \n         boolean lastWasWhite = false;\n         boolean reachedNonWhite = false;\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n package org.jsoup.nodes;\n \n+import org.jsoup.SerializationException;\n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n import org.jsoup.parser.Parser;\n import org.jsoup.select.NodeTraversor;\n import org.jsoup.select.NodeVisitor;\n \n-import java.net.MalformedURLException;\n-import java.net.URL;\n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.LinkedList;\n         return accum.toString();\n     }\n \n-    protected void outerHtml(StringBuilder accum) {\n+    protected void outerHtml(Appendable accum) {\n         new NodeTraversor(new OuterHtmlVisitor(accum, getOutputSettings())).traverse(this);\n     }\n \n     /**\n      Get the outer HTML of this node.\n      @param accum accumulator to place HTML into\n-     */\n-    abstract void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out);\n-\n-    abstract void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out);\n-\n-    @Override\n-    public String toString() {\n+     @throws IOException if appending to the given accumulator fails.\n+     */\n+    abstract void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException;\n+\n+    abstract void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) throws IOException;\n+\n+    /**\n+     * Write this node and its children to the given {@link Appendable}.\n+     *\n+     * @param appendable the {@link Appendable} to write to.\n+     * @return the supplied {@link Appendable}, for chaining.\n+     */\n+    public <T extends Appendable> T html(T appendable) {\n+        outerHtml(appendable);\n+        return appendable;\n+    }\n+    \n+\tpublic String toString() {\n         return outerHtml();\n     }\n \n-    protected void indent(StringBuilder accum, int depth, Document.OutputSettings out) {\n+    protected void indent(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         accum.append(\"\\n\").append(StringUtil.padding(depth * out.indentAmount()));\n     }\n \n     }\n \n     private static class OuterHtmlVisitor implements NodeVisitor {\n-        private StringBuilder accum;\n+        private Appendable accum;\n         private Document.OutputSettings out;\n \n-        OuterHtmlVisitor(StringBuilder accum, Document.OutputSettings out) {\n+        OuterHtmlVisitor(Appendable accum, Document.OutputSettings out) {\n             this.accum = accum;\n             this.out = out;\n         }\n \n         public void head(Node node, int depth) {\n-            node.outerHtmlHead(accum, depth, out);\n+            try {\n+\t\t\t\tnode.outerHtmlHead(accum, depth, out);\n+\t\t\t} catch (IOException exception) {\n+\t\t\t\tthrow new SerializationException(exception);\n+\t\t\t}\n         }\n \n         public void tail(Node node, int depth) {\n-            if (!node.nodeName().equals(\"#text\")) // saves a void hit.\n-                node.outerHtmlTail(accum, depth, out);\n+            if (!node.nodeName().equals(\"#text\")) { // saves a void hit.\n+\t\t\t\ttry {\n+\t\t\t\t\tnode.outerHtmlTail(accum, depth, out);\n+\t\t\t\t} catch (IOException exception) {\n+\t\t\t\t\tthrow new SerializationException(exception);\n+\t\t\t\t}\n+            }\n         }\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n package org.jsoup.nodes;\n+\n+import java.io.IOException;\n \n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n         this.text = text;\n     }\n \n-    public String nodeName() {\n+\tpublic String nodeName() {\n         return \"#text\";\n     }\n     \n         return tailNode;\n     }\n \n-    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n+\tvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         if (out.prettyPrint() && ((siblingIndex() == 0 && parentNode instanceof Element && ((Element) parentNode).tag().formatAsBlock() && !isBlank()) || (out.outline() && siblingNodes().size()>0 && !isBlank()) ))\n             indent(accum, depth, out);\n \n         Entities.escape(accum, getWholeText(), out, false, normaliseWhite, false);\n     }\n \n-    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n+\tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}\n \n     @Override\n     public String toString() {\n--- a/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n+++ b/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n package org.jsoup.nodes;\n+\n+import java.io.IOException;\n \n /**\n  An XML Declaration.\n             return attributes.get(DECL_KEY);\n         }\n     }\n-    \n-    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n+\n+\tvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         accum\n                 .append(\"<\")\n                 .append(isProcessingInstruction ? \"!\" : \"?\")\n                 .append(\">\");\n     }\n \n-    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n+\tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}\n \n     @Override\n     public String toString() {\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n package org.jsoup.nodes;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.TextUtil;\n+import org.jsoup.integration.ParseTest;\n+import org.jsoup.nodes.Document.OutputSettings;\n+import org.jsoup.nodes.Document.OutputSettings.Syntax;\n+import org.junit.Ignore;\n+import org.junit.Test;\n \n import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.StringWriter;\n import java.nio.charset.Charset;\n-import org.jsoup.Jsoup;\n-import org.jsoup.TextUtil;\n-import org.jsoup.integration.ParseTest;\n-import org.jsoup.nodes.Document.OutputSettings.Syntax;\n-import static org.junit.Assert.*;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n \n /**\n  Tests for Document.\n         Document doc = Jsoup.parse(\"x\");\n         assertEquals(Syntax.html, doc.outputSettings().syntax());\n     }\n+    \n+    @Test public void testHtmlAppendable() {\n+    \tString htmlContent = \"<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>\";\n+    \tDocument document = Jsoup.parse(htmlContent);\n+    \tOutputSettings outputSettings = new OutputSettings();\n+    \t\n+    \toutputSettings.prettyPrint(false);\n+    \tdocument.outputSettings(outputSettings);\n+    \tassertEquals(htmlContent, document.html(new StringWriter()).toString());\n+    }\n \n     // Ignored since this test can take awhile to run.\n     @Ignore\n--- a/src/test/java/org/jsoup/nodes/EntitiesTest.java\n+++ b/src/test/java/org/jsoup/nodes/EntitiesTest.java\n import static org.jsoup.nodes.Document.OutputSettings;\n import static org.jsoup.nodes.Entities.EscapeMode.*;\n import static org.junit.Assert.*;\n-\n \n public class EntitiesTest {\n     @Test public void escape() {\n         assertEquals(text, Entities.unescape(escapedUtfMin));\n     }\n \n-    @Test public void escapeSupplementaryCharacter(){\n+    @Test public void escapeSupplementaryCharacter() {\n         String text = new String(Character.toChars(135361));\n         String escapedAscii = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(base));\n         assertEquals(\"&#x210c1;\", escapedAscii);", "timestamp": 1460656198, "metainfo": ""}