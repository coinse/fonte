{"sha": "2480dffa6d8343b189c6fb57b88b325c45f0b83f", "log": "<action issue=\"CSV-118\" type=\"fix\" dev=\"ggregory\" due-to=\"Enrique Lara\">CSVRecord.toMap() throws NPE on formats with no headers.</action>  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n      * @return the given map.\n      */\n     <M extends Map<String, String>> M putIn(final M map) {\n+        if (mapping == null) {\n+            return map;\n+        }\n         for (final Entry<String, Integer> entry : mapping.entrySet()) {\n             final int col = entry.getValue().intValue();\n             if (col < values.length) {\n--- a/src/test/java/org/apache/commons/csv/CSVRecordTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVRecordTest.java\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n        final CSVRecord shortRec = parser.iterator().next();\n        shortRec.toMap();\n     }\n+\n+    @Test\n+    public void testToMapWithNoHeader() throws Exception {\n+       final CSVParser parser =  CSVParser.parse(\"a,b\", CSVFormat.newFormat(','));\n+       final CSVRecord shortRec = parser.iterator().next();\n+       Map<String, String> map = shortRec.toMap();\n+       assertNotNull(\"Map is not null.\", map);\n+       assertTrue(\"Map is empty.\", map.isEmpty());\n+    }\n     \n     private void validateMap(final Map<String, String> map, final boolean allowsNulls) {\n         assertTrue(map.containsKey(\"first\"));", "timestamp": 1400171186, "metainfo": ""}