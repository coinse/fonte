{"sha": "374cd7b16d1ec48bb68fd748427c4b8942767c6b", "log": "Remove trailing white spaces  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n      *\n      * @param delimiter\n      *            the char used for value separation, must not be a line break character\n-     * @return a new CSV format builder. \n+     * @return a new CSV format builder.\n      * @throws IllegalArgumentException if the delimiter is a line break character\n      */\n     public static CSVFormatBuilder newBuilder(final char delimiter) {\n--- a/src/main/java/org/apache/commons/csv/CSVLexer.java\n+++ b/src/main/java/org/apache/commons/csv/CSVLexer.java\n import java.io.IOException;\n \n /**\n- * \n- * \n+ *\n+ *\n  * @version $Id$\n  */\n final class CSVLexer extends Lexer {\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n  * <p>\n  * see <a href=\"package-summary.html\">package documentation</a> for more details\n  * </p>\n- * \n+ *\n  * @version $Id$\n  */\n public class CSVParser implements Iterable<CSVRecord> {\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n \n /**\n  * Prints values in a CSV format.\n- * \n+ *\n  * @version $Id$\n  */\n public class CSVPrinter implements Flushable, Closeable {\n      * <p/>\n      * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats\n      * (encapsulation and escaping with a different character) are not supported.\n-     * \n+     *\n      * @param out\n      *            stream to which to print.\n      * @param format\n \n     /**\n      * Flushes the underlying stream.\n-     * \n+     *\n      * @throws IOException\n      */\n     public void flush() throws IOException {\n     /**\n      * Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n      * characters will be escaped.\n-     * \n+     *\n      * @param values\n      *            values to output.\n      */\n     /**\n      * Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n      * characters will be escaped.\n-     * \n+     *\n      * @param values\n      *            values to output.\n      */\n      * beginning of each new line in the comment.\n      * <p/>\n      * If comments are disabled in the current CSV format this method does nothing.\n-     * \n+     *\n      * @param comment\n      *            the comment to output\n      */\n             out.append(value, start, end);\n             return;\n         }\n-        \n+\n         // we hit something that needed encapsulation\n         out.append(quoteChar);\n \n \n     /**\n      * Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n-     * \n+     *\n      * @param value\n      *            value to be output.\n      * @throws IOException\n \n     /**\n      * Prints all the objects in the given array.\n-     * \n+     *\n      * @param values\n      *            the values to print.\n      * @throws IOException\n \n     /**\n      * Prints all the objects in the given collection.\n-     * \n+     *\n      * @param values\n      *            the values to print.\n      * @throws IOException\n \n     /**\n      * Prints all the objects in the given JDBC result set.\n-     * \n+     *\n      * @param resultSet result set\n      *            the values to print.\n      * @throws IOException\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n \n /**\n  * A CSV record\n- * \n+ *\n  * @version $Id$\n  */\n public class CSVRecord implements Serializable, Iterable<String> {\n \n     /** The accumulated comments (if any) */\n     private final String comment;\n-    \n+\n     /** The record number. */\n     private final long recordNumber;\n \n \n     /**\n      * Checks whether a given column is mapped.\n-     * \n+     *\n      * @param name\n      *            the name of the column to be retrieved.\n      * @return whether a given columns is mapped.\n     public boolean isMapped(final String name) {\n         return mapping != null ? mapping.containsKey(name) : false;\n     }\n-    \n+\n     /**\n      * Checks whether a given columns is mapped and has a value.\n-     * \n+     *\n      * @param name\n      *            the name of the column to be retrieved.\n      * @return whether a given columns is mapped.\n     public boolean isSet(final String name) {\n         return isMapped(name) && mapping.get(name).intValue() < values.length;\n     }\n-    \n+\n     public Iterator<String> iterator() {\n         return Arrays.asList(values).iterator();\n     }\n--- a/src/main/java/org/apache/commons/csv/Constants.java\n+++ b/src/main/java/org/apache/commons/csv/Constants.java\n \n /**\n  * Constants for this package.\n- * \n+ *\n  * @version $Id$\n  */\n final class Constants {\n-    \n+\n     static final char BACKSPACE = '\\b';\n     static final char COMMA = ',';\n-    \n+\n     /**\n      * Starts a comment, the remainder of the line is the comment.\n      */\n     static final char COMMENT = '#';\n-    \n+\n     static final char CR = '\\r';\n     static final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n     static final char BACKSLASH = '\\\\';\n     static final char SP = ' ';\n     static final char TAB = '\\t';\n     static final String EMPTY = \"\";\n-    \n+\n     /** The end of stream symbol */\n     static final int END_OF_STREAM = -1;\n \n     /** Undefined state for the lookahead char */\n     static final int UNDEFINED = -2;\n-    \n+\n     /** According to RFC 4180, line breaks are delimited by CRLF */\n     static final String CRLF = \"\\r\\n\";\n \n--- a/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java\n+++ b/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java\n  * <p>\n  * In particular the reader supports a look-ahead option, which allows you to see the next char returned by\n  * {@link #read()}.\n- * \n+ *\n  * @version $Id$\n  */\n final class ExtendedBufferedReader extends BufferedReader {\n--- a/src/main/java/org/apache/commons/csv/Lexer.java\n+++ b/src/main/java/org/apache/commons/csv/Lexer.java\n \n /**\n  * Abstract lexer class; contains common utility routines shared by lexers\n- * \n+ *\n  * @version $Id$\n  */\n abstract class Lexer {\n--- a/src/main/java/org/apache/commons/csv/Token.java\n+++ b/src/main/java/org/apache/commons/csv/Token.java\n  * Internal token representation.\n  * <p/>\n  * It is used as contract between the lexer and the parser.\n- * \n+ *\n  * @version $Id$\n  */\n final class Token {", "timestamp": 1363768274, "metainfo": ""}