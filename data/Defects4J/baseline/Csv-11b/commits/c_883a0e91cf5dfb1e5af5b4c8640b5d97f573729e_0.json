{"sha": "883a0e91cf5dfb1e5af5b4c8640b5d97f573729e", "log": "Allow performance test to traverse column values (optional).  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/perf/PerformanceTest.java\n+++ b/src/test/java/org/apache/commons/csv/perf/PerformanceTest.java\n import java.util.zip.GZIPInputStream;\n \n import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVRecord;\n import org.apache.commons.io.IOUtils;\n import org.junit.BeforeClass;\n import org.junit.Ignore;\n         return new BufferedReader(new FileReader(BIG_FILE));\n     }\n \n-    private long parse(final Reader in) throws IOException {\n+    private long parse(final Reader in, boolean traverseColumns) throws IOException {\n         final CSVFormat format = CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(false);\n-        long count = 0;\n-        for (final Object record : format.parse(in)) {\n-            count++;\n+        long recordCount = 0;\n+        for (final CSVRecord record : format.parse(in)) {\n+            recordCount++;\n+            if (traverseColumns) {\n+                for (String value : record) {\n+                    // do nothing for now\n+                }\n+            }\n         }\n-        return count;\n+        return recordCount;\n     }\n \n     private void println() {\n         return count;\n     }\n \n-    public long testParseBigFile() throws Exception {\n+    public long testParseBigFile(boolean traverseColumns) throws Exception {\n         final long startMillis = System.currentTimeMillis();\n-        final long count = this.parse(this.getBufferedReader());\n+        final long count = this.parse(this.getBufferedReader(), traverseColumns);\n         final long totalMillis = System.currentTimeMillis() - startMillis;\n         this.println(String.format(\"File parsed in %,d milliseconds with Commons CSV: %,d lines.\", totalMillis, count));\n         return totalMillis;\n     public void testParseBigFileRepeat() throws Exception {\n         long bestTime = Long.MAX_VALUE;\n         for (int i = 0; i < this.max; i++) {\n-            bestTime = Math.min(this.testParseBigFile(), bestTime);\n+            bestTime = Math.min(this.testParseBigFile(false), bestTime);\n         }\n         this.println(String.format(\"Best time out of %,d is %,d milliseconds.\", this.max, bestTime));\n     }", "timestamp": 1350048666, "metainfo": ""}