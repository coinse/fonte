{"sha": "79eb6e039273f706828a63c1821ccc993bba3902", "log": "Add APIs to print arrays of records and iterables of records.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n     public String format(final Object... values) {\n         final StringWriter out = new StringWriter();\n         try {\n-            new CSVPrinter(out, this).println(values);\n+            new CSVPrinter(out, this).printRecord(values);\n             return out.toString().trim();\n         } catch (final IOException e) {\n             // should not happen because a StringWriter does not do IO.\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n \n import java.io.Flushable;\n import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n \n /**\n  * Prints values in a CSV format.\n     }\n \n     /**\n-     * Prints a single line of comma separated values. The values will be quoted if needed. Quotes and newLine\n+     * Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n      * characters will be escaped.\n      *\n      * @param values\n      *            values to output.\n      */\n-    public void println(final Object... values) throws IOException {\n+    public void printRecord(final Object... values) throws IOException {\n         for (final Object value : values) {\n             print(value);\n         }\n     }\n \n     /**\n-     * Prints a comment on a new line among the comma separated values. Comments will always begin on a new line and\n+     * Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n+     * characters will be escaped.\n+     *\n+     * @param values\n+     *            values to output.\n+     */\n+    public void printRecord(final Iterable<?> values) throws IOException {\n+        for (final Object value : values) {\n+            print(value);\n+        }\n+        println();\n+    }\n+\n+    /**\n+     * Prints a comment on a new line among the delimiter separated values. Comments will always begin on a new line and\n      * occupy a least one full line. The character specified to start comments and a space will be inserted at the\n      * beginning of each new line in the comment.\n      * <p/>\n      *\n      * @param object\n      *            value to output.\n+     * @throws  IOException\n+     *          If an I/O error occurs\n      */\n     public void print(Object object, final boolean checkForEscape) throws IOException {\n         // null values are considered empty\n      *\n      * @param value\n      *            value to be output.\n+     * @throws  IOException\n+     *          If an I/O error occurs\n      */\n     public void print(final Object value) throws IOException {\n         print(value, true);\n     }\n+\n+    /**\n+     * Prints all the objects in the given array.\n+     * \n+     * @param values\n+     *            the values to print.\n+     * @throws  IOException\n+     *          If an I/O error occurs\n+     */\n+    public void printRecords(Object[] values) throws IOException {\n+        for (Object value : values) {\n+            if (value instanceof Object[]) {\n+                this.printRecord((Object[]) value);\n+            } else if (value instanceof Iterable) {\n+                this.printRecord((Iterable<?>) value);\n+            } else {\n+                this.printRecord(value);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Prints all the objects in the given collection.\n+     * \n+     * @param values\n+     *            the values to print.\n+     * @throws  IOException\n+     *          If an I/O error occurs\n+     */\n+    public void printRecords(Iterable<?> values) throws IOException {\n+        for (Object value : values) {\n+            if (value instanceof Object[]) {\n+                this.printRecord((Object[]) value);\n+            } else if (value instanceof Iterable) {\n+                this.printRecord((Iterable<?>) value);\n+            } else {\n+                this.printRecord(value);\n+            }\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n \n import java.io.IOException;\n import java.io.StringWriter;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Random;\n \n     public void testPrinter1() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n-        printer.println(\"a\", \"b\");\n+        printer.printRecord(\"a\", \"b\");\n         assertEquals(\"a,b\" + lineSeparator, sw.toString());\n     }\n \n     public void testPrinter2() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n-        printer.println(\"a,b\", \"b\");\n+        printer.printRecord(\"a,b\", \"b\");\n         assertEquals(\"\\\"a,b\\\",b\" + lineSeparator, sw.toString());\n     }\n \n     public void testPrinter3() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n-        printer.println(\"a, b\", \"b \");\n+        printer.printRecord(\"a, b\", \"b \");\n         assertEquals(\"\\\"a, b\\\",\\\"b \\\"\" + lineSeparator, sw.toString());\n     }\n \n     public void testPrinter4() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n-        printer.println(\"a\", \"b\\\"c\");\n+        printer.printRecord(\"a\", \"b\\\"c\");\n         assertEquals(\"a,\\\"b\\\"\\\"c\\\"\" + lineSeparator, sw.toString());\n     }\n \n     public void testPrinter5() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n-        printer.println(\"a\", \"b\\nc\");\n+        printer.printRecord(\"a\", \"b\\nc\");\n         assertEquals(\"a,\\\"b\\nc\\\"\" + lineSeparator, sw.toString());\n     }\n \n     public void testPrinter6() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n-        printer.println(\"a\", \"b\\r\\nc\");\n+        printer.printRecord(\"a\", \"b\\r\\nc\");\n         assertEquals(\"a,\\\"b\\r\\nc\\\"\" + lineSeparator, sw.toString());\n     }\n \n     public void testPrinter7() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n-        printer.println(\"a\", \"b\\\\c\");\n+        printer.printRecord(\"a\", \"b\\\\c\");\n         assertEquals(\"a,b\\\\c\" + lineSeparator, sw.toString());\n     }\n \n     @Test\n+    public void testExcelPrintAllArrayOfArrays() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n+        printer.printRecords(new String[][] { { \"r1c1\", \"r1c2\" }, { \"r2c1\", \"r2c2\" } });\n+        assertEquals(\"r1c1,r1c2\" + lineSeparator + \"r2c1,r2c2\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n+    public void testExcelPrintAllArrayOfLists() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n+        printer.printRecords(new List[] { Arrays.asList(new String[] { \"r1c1\", \"r1c2\" }), Arrays.asList(new String[] { \"r2c1\", \"r2c2\" }) });\n+        assertEquals(\"r1c1,r1c2\" + lineSeparator + \"r2c1,r2c2\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n+    public void testExcelPrintAllIterableOfLists() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n+        printer.printRecords(Arrays.asList(new List[] { Arrays.asList(new String[] { \"r1c1\", \"r1c2\" }),\n+                Arrays.asList(new String[] { \"r2c1\", \"r2c2\" }) }));\n+        assertEquals(\"r1c1,r1c2\" + lineSeparator + \"r2c1,r2c2\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n+    public void testExcelPrintAllIterableOfArrays() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n+        printer.printRecords(Arrays.asList(new String[][] { { \"r1c1\", \"r1c2\" }, { \"r2c1\", \"r2c2\" } }));\n+        assertEquals(\"r1c1,r1c2\" + lineSeparator + \"r2c1,r2c2\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n     public void testExcelPrinter1() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n-        printer.println(\"a\", \"b\");\n+        printer.printRecord(\"a\", \"b\");\n         assertEquals(\"a,b\" + lineSeparator, sw.toString());\n     }\n \n     public void testExcelPrinter2() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n-        printer.println(\"a,b\", \"b\");\n+        printer.printRecord(\"a,b\", \"b\");\n         assertEquals(\"\\\"a,b\\\",b\" + lineSeparator, sw.toString());\n     }\n \n     public void testPrintNullValues() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n-        printer.println(\"a\", null, \"b\");\n+        printer.printRecord(\"a\", null, \"b\");\n         assertEquals(\"a,,b\" + lineSeparator, sw.toString());\n     }\n \n \n         for (int i = 0; i < nLines; i++) {\n             // for (int j=0; j<lines[i].length; j++) System.out.println(\"### VALUE=:\" + printable(lines[i][j]));\n-            printer.println(lines[i]);\n+            printer.printRecord(lines[i]);\n         }\n \n         printer.flush();", "timestamp": 1350194046, "metainfo": ""}