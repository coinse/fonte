{"sha": "cdef24d9182acef747aa03b8cb6ff5865c843f14", "log": "Printer can now use a JDBC result set as input. Use H2 as lightweight in-memory JDBC database for easy test set up.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n \n import java.io.Flushable;\n import java.io.IOException;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n \n /**\n  * Prints values in a CSV format.\n  */\n public class CSVPrinter {\n-    \n+\n     /** The place that the values get written. */\n     private final Appendable out;\n     private final CSVFormat format;\n      * <p/>\n      * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats\n      * (encapsulation and escaping with a different character) are not supported.\n-     *\n+     * \n      * @param out\n      *            stream to which to print.\n      * @param format\n     // ======================================================\n \n     /**\n-     * Outputs a blank line\n+     * Outputs a the line separator.\n      */\n     public void println() throws IOException {\n         out.append(format.getLineSeparator());\n \n     /**\n      * Flushes the underlying stream.\n-     *\n+     * \n      * @throws IOException\n      */\n     public void flush() throws IOException {\n     /**\n      * Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n      * characters will be escaped.\n-     *\n+     * \n      * @param values\n      *            values to output.\n      */\n     /**\n      * Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n      * characters will be escaped.\n-     *\n+     * \n      * @param values\n      *            values to output.\n      */\n     }\n \n     /**\n-     * Prints a comment on a new line among the delimiter separated values. Comments will always begin on a new line and\n-     * occupy a least one full line. The character specified to start comments and a space will be inserted at the\n+     * Prints a comment on a new line among the delimiter separated values. Comments will always begin on a new line\n+     * and occupy a least one full line. The character specified to start comments and a space will be inserted at the\n      * beginning of each new line in the comment.\n      * <p/>\n      * If comments are disabled in the current CSV format this method does nothing.\n-     *\n+     * \n      * @param comment\n      *            the comment to output\n      */\n     /**\n      * Prints the string as the next value on the line. The value will be escaped or encapsulated as needed if\n      * checkForEscape==true\n-     *\n+     * \n      * @param object\n      *            value to output.\n-     * @throws  IOException\n-     *          If an I/O error occurs\n+     * @throws IOException\n+     *             If an I/O error occurs\n      */\n     public void print(Object object, final boolean checkForEscape) throws IOException {\n         // null values are considered empty\n \n     /**\n      * Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n-     *\n+     * \n      * @param value\n      *            value to be output.\n-     * @throws  IOException\n-     *          If an I/O error occurs\n+     * @throws IOException\n+     *             If an I/O error occurs\n      */\n     public void print(final Object value) throws IOException {\n         print(value, true);\n      * \n      * @param values\n      *            the values to print.\n-     * @throws  IOException\n-     *          If an I/O error occurs\n+     * @throws IOException\n+     *             If an I/O error occurs\n      */\n     public void printRecords(Object[] values) throws IOException {\n         for (Object value : values) {\n      * \n      * @param values\n      *            the values to print.\n-     * @throws  IOException\n-     *          If an I/O error occurs\n+     * @throws IOException\n+     *             If an I/O error occurs\n      */\n     public void printRecords(Iterable<?> values) throws IOException {\n         for (Object value : values) {\n             }\n         }\n     }\n+\n+    /**\n+     * Prints all the objects in the given JDBC result set.\n+     * \n+     * @param resultSet result set\n+     *            the values to print.\n+     * @throws IOException\n+     *             If an I/O error occurs\n+     */\n+    public void printRecords(ResultSet resultSet) throws SQLException, IOException {\n+        int columnCount = resultSet.getMetaData().getColumnCount();\n+        while (resultSet.next()) {\n+            for (int i = 1; i <= columnCount; i++) {\n+                print(resultSet.getString(i));\n+            }\n+            println();\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n \n import java.io.IOException;\n import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Random;\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", \"b\\r\\nc\");\n         assertEquals(\"a,\\\"b\\r\\nc\\\"\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n+    public void testJdbcPrinter() throws IOException, ClassNotFoundException, SQLException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n+        Class.forName(\"org.h2.Driver\");\n+        final Connection connection = DriverManager.getConnection(\"jdbc:h2:mem:my_test;\", \"sa\", \"\");\n+        final Statement stmt = connection.createStatement();\n+        stmt.execute(\"CREATE TABLE TEST(ID INT PRIMARY KEY, NAME VARCHAR(255))\");\n+        stmt.execute(\"insert into TEST values(1, 'r1')\");\n+        stmt.execute(\"insert into TEST values(2, 'r2')\");\n+        printer.printRecords(stmt.executeQuery(\"select ID, NAME from TEST\"));\n+        assertEquals(\"1,r1\" + lineSeparator + \"2,r2\" + lineSeparator, sw.toString());\n     }\n \n     @Test", "timestamp": 1350238138, "metainfo": ""}