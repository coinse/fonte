{"sha": "6dc69934d24743593ec92f8cd2047775f67cd176", "log": "Close printer (at least for non-Exception cases - these are unit tests)  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n             printer.printRecord(record);\n         }\n         assertEquals(input, out.toString());\n+        printer.close();\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n         printer.printComment(\"This is a comment\");\n \n         assertEquals(\"\", sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n         printer.printRecords(new String[][] { { \"r1c1\", \"r1c2\" }, { \"r2c1\", \"r2c2\" } });\n         assertEquals(\"r1c1,r1c2\" + recordSeparator + \"r2c1,r2c2\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n         printer.printRecords(new List[] { Arrays.asList(new String[] { \"r1c1\", \"r1c2\" }), Arrays.asList(new String[] { \"r2c1\", \"r2c2\" }) });\n         assertEquals(\"r1c1,r1c2\" + recordSeparator + \"r2c1,r2c2\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n         printer.printRecords(Arrays.asList(new String[][] { { \"r1c1\", \"r1c2\" }, { \"r2c1\", \"r2c2\" } }));\n         assertEquals(\"r1c1,r1c2\" + recordSeparator + \"r2c1,r2c2\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         printer.printRecords(Arrays.asList(new List[] { Arrays.asList(new String[] { \"r1c1\", \"r1c2\" }),\n                 Arrays.asList(new String[] { \"r2c1\", \"r2c2\" }) }));\n         assertEquals(\"r1c1,r1c2\" + recordSeparator + \"r2c1,r2c2\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n         printer.printRecord(\"a\", \"b\");\n         assertEquals(\"a,b\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n         printer.printRecord(\"a,b\", \"b\");\n         assertEquals(\"\\\"a,b\\\",b\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n             final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n             printer.printRecords(stmt.executeQuery(\"select ID, NAME from TEST\"));\n             assertEquals(\"1,r1\" + recordSeparator + \"2,r2\" + recordSeparator, sw.toString());\n+            printer.close();\n         } finally {\n             connection.close();\n         }\n         printer.printComment(\"This is a comment\\non multiple lines\");\n \n         assertEquals(\"# This is a comment\" + recordSeparator + \"# on multiple lines\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", \"b\");\n         assertEquals(\"a,b\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a,b\", \"b\");\n         assertEquals(\"\\\"a,b\\\",b\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a, b\", \"b \");\n         assertEquals(\"\\\"a, b\\\",\\\"b \\\"\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", \"b\\\"c\");\n         assertEquals(\"a,\\\"b\\\"\\\"c\\\"\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", \"b\\nc\");\n         assertEquals(\"a,\\\"b\\nc\\\"\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", \"b\\r\\nc\");\n         assertEquals(\"a,\\\"b\\r\\nc\\\"\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", \"b\\\\c\");\n         assertEquals(\"a,b\\\\c\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", null, \"b\");\n         assertEquals(\"a,,b\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.newBuilder().withQuotePolicy(Quote.ALL).build());\n         printer.printRecord(\"a\", \"b\\nc\", \"d\");\n         assertEquals(\"\\\"a\\\",\\\"b\\nc\\\",\\\"d\\\"\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.newBuilder().withQuotePolicy(Quote.NON_NUMERIC).build());\n         printer.printRecord(\"a\", \"b\\nc\", Integer.valueOf(1));\n         assertEquals(\"\\\"a\\\",\\\"b\\nc\\\",1\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n     @Test\n         printer.printComment(\"This is a comment\");\n \n         assertEquals(\"# This is a comment\" + recordSeparator, sw.toString());\n+        printer.close();\n     }\n \n }", "timestamp": 1364138891, "metainfo": ""}