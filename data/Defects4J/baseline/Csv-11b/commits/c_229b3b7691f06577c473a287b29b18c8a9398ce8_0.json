{"sha": "229b3b7691f06577c473a287b29b18c8a9398ce8", "log": "org.apache.commons.csv.CSVParser.parse(File, Charset, CSVFormat) is now like org.apache.commons.csv.CSVParser.parse(URL, Charset, CSVFormat): You must pass in a Charset.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n \n package org.apache.commons.csv;\n \n-import static org.apache.commons.csv.Token.Type.TOKEN;\n-\n import java.io.Closeable;\n import java.io.File;\n+import java.io.FileInputStream;\n import java.io.FileReader;\n import java.io.IOException;\n import java.io.InputStreamReader;\n import java.util.Map;\n import java.util.NoSuchElementException;\n \n+import static org.apache.commons.csv.Token.Type.*;\n+\n /**\n  * Parses CSV files according to the specified format.\n  *\n  * There are several static factory methods that can be used to create instances for various types of resources:\n  * </p>\n  * <ul>\n- *     <li>{@link #parse(java.io.File, CSVFormat)}</li>\n+ *     <li>{@link #parse(java.io.File, Charset, CSVFormat)}</li>\n  *     <li>{@link #parse(String, CSVFormat)}</li>\n  *     <li>{@link #parse(java.net.URL, java.nio.charset.Charset, CSVFormat)}</li>\n  * </ul>\n      *\n      * @param file\n      *            a CSV file. Must not be null.\n+     * @param charset \n+     *            A charset\n      * @param format\n      *            the CSVFormat used for CSV parsing. Must not be null.\n      * @return a new parser\n      * @throws IOException\n      *             If an I/O error occurs\n      */\n-    public static CSVParser parse(final File file, final CSVFormat format) throws IOException {\n+    public static CSVParser parse(final File file, Charset charset, final CSVFormat format) throws IOException {\n         Assertions.notNull(file, \"file\");\n         Assertions.notNull(format, \"format\");\n-\n-        return new CSVParser(new FileReader(file), format);\n+        // Use the default Charset explicitly\n+        return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/csv/CSVFileParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFileParserTest.java\n \n         // Now parse the file and compare against the expected results\n         // We use a buffered reader internally so no need to create one here.\n-        final CSVParser parser = CSVParser.parse(new File(BASE, split[0]), format);\n+        final CSVParser parser = CSVParser.parse(new File(BASE, split[0]), Charset.defaultCharset(), format);\n         for(final CSVRecord record : parser) {\n             String parsed = record.toString();\n             if (checkComments) {\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testParseFileNullFormat() throws Exception {\n-        CSVParser.parse(new File(\"\"), null);\n+        CSVParser.parse(new File(\"\"), Charset.defaultCharset(), null);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testParseNullFileFormat() throws Exception {\n-        CSVParser.parse((File) null, CSVFormat.DEFAULT);\n+        CSVParser.parse((File) null, Charset.defaultCharset(), CSVFormat.DEFAULT);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testParseNullUrlCharsetFormat() throws Exception {\n-        CSVParser.parse(null, Charset.defaultCharset(), CSVFormat.DEFAULT);\n+        CSVParser.parse((File) null, Charset.defaultCharset(), CSVFormat.DEFAULT);\n     }\n \n     @Test(expected = IllegalArgumentException.class)", "timestamp": 1402933192, "metainfo": ""}