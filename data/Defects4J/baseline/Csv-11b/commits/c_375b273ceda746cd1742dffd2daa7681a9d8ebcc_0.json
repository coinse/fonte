{"sha": "375b273ceda746cd1742dffd2daa7681a9d8ebcc", "log": "No need for explicitly creating an array. Arrays.asList is a varargs method.  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n     public void testExcelPrintAllArrayOfLists() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n-        printer.printRecords(new List[] { Arrays.asList(new String[] { \"r1c1\", \"r1c2\" }), Arrays.asList(new String[] { \"r2c1\", \"r2c2\" }) });\n+        printer.printRecords(new List[] { Arrays.asList(\"r1c1\", \"r1c2\"), Arrays.asList(\"r2c1\", \"r2c2\") });\n         assertEquals(\"r1c1,r1c2\" + recordSeparator + \"r2c1,r2c2\" + recordSeparator, sw.toString());\n         printer.close();\n     }\n     public void testExcelPrintAllIterableOfLists() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n-        printer.printRecords(Arrays.asList(new List[] { Arrays.asList(new String[] { \"r1c1\", \"r1c2\" }),\n-                Arrays.asList(new String[] { \"r2c1\", \"r2c2\" }) }));\n+        printer.printRecords(Arrays.asList(new List[] { Arrays.asList(\"r1c1\", \"r1c2\"),\n+                Arrays.asList(\"r2c1\", \"r2c2\") }));\n         assertEquals(\"r1c1,r1c2\" + recordSeparator + \"r2c1,r2c2\" + recordSeparator, sw.toString());\n         printer.close();\n     }", "timestamp": 1376132252, "metainfo": ""}