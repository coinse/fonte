{"sha": "de1838ea067f3fbc4c7c21b9eeae077c739ecb73", "log": "CSV-75 ExtendedBufferReader does not handle EOL consistently   ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java\n+++ b/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java\n \n     @Override\n     public int read() throws IOException {\n-        lastChar = super.read();\n-\n-        if (lastChar == '\\n') {\n+        int current = super.read();\n+        if (current == '\\r' || (current == '\\n' && lastChar != '\\r')) {\n             lineCounter++;\n         }\n+        lastChar = current;\n         return lastChar;\n     }\n \n         int len = super.read(buf, offset, length);\n         \n         if (len > 0) {\n-            lastChar = buf[offset + len - 1];\n-            \n+\n             for (int i = offset; i < offset + len; i++) {\n-                if (buf[i] == '\\n') {\n+                char ch = buf[i];\n+                if (ch == '\\n') {\n+                    if ('\\r' != (i > 0 ? buf[i-1]: lastChar)) {\n+                        lineCounter++;                        \n+                    }\n+                } else if (ch == '\\r') {\n                     lineCounter++;\n                 }\n             }\n-            \n+\n+            lastChar = buf[offset + len - 1];\n+\n         } else if (len == -1) {\n             lastChar = END_OF_STREAM;\n         }\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n     }\n \n     @Test\n-    @Ignore(\"Line counting doesn't work with CR alone as the line separator, see CSV-75\")\n     public void testGetLineNumberWithCR() throws Exception {\n         CSVParser parser = new CSVParser(\"a\\rb\\rc\", CSVFormat.DEFAULT.withLineSeparator(\"\\r\"));\n         ", "timestamp": 1332809357, "metainfo": ""}