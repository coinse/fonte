{"sha": "9f6d3f541330670df684d01b8b6fae67f474bb90", "log": "Rename readAgain() to getLastChar()  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVLexer.java\n+++ b/src/main/java/org/apache/commons/csv/CSVLexer.java\n     Token nextToken(final Token token) throws IOException {\n \n         // get the last read char (required for empty line detection)\n-        int lastChar = in.readAgain();\n+        int lastChar = in.getLastChar();\n \n         // read the next char and set eol\n         int c = in.read();\n--- a/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java\n+++ b/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java\n      *\n      * @return the last character that was read\n      */\n-    int readAgain() {\n+    int getLastChar() {\n         return lastChar;\n     }\n \n--- a/src/test/java/org/apache/commons/csv/CSVLexer1.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexer1.java\n         wsBuf.setLength(0); // reuse\n \n         // get the last read char (required for empty line detection)\n-        int lastChar = in.readAgain();\n+        int lastChar = in.getLastChar();\n \n         //  read the next char and set eol\n         /* note: unfortunately isEndOfLine may consumes a character silently.\n         */\n         int c = in.read();\n         boolean eol = isEndOfLine(c);\n-        c = in.readAgain();\n+        c = in.getLastChar();\n \n         //  empty line detection: eol AND (last char was EOL or beginning)\n         if (format.getIgnoreEmptyLines()) {\n                 lastChar = c;\n                 c = in.read();\n                 eol = isEndOfLine(c);\n-                c = in.readAgain();\n+                c = in.getLastChar();\n                 // reached end of file without any content (empty line at the end)\n                 if (isEndOfFile(c)) {\n                     tkn.type = EOF;\n--- a/src/test/java/org/apache/commons/csv/CSVLexer1306663.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexer1306663.java\n     Token nextToken(final Token tkn) throws IOException {\n \n         // get the last read char (required for empty line detection)\n-        int lastChar = in.readAgain();\n+        int lastChar = in.getLastChar();\n \n         //  read the next char and set eol\n         int c = in.read();\n         *       is to call 'readAgain' on the stream...\n         */\n         boolean eol = isEndOfLine(c);\n-        c = in.readAgain();\n+        c = in.getLastChar();\n \n         //  empty line detection: eol AND (last char was EOL or beginning)\n         if (ignoreEmptyLines) {\n                 lastChar = c;\n                 c = in.read();\n                 eol = isEndOfLine(c);\n-                c = in.readAgain();\n+                c = in.getLastChar();\n                 // reached end of file without any content (empty line at the end)\n                 if (isEndOfFile(c)) {\n                     tkn.type = EOF;\n--- a/src/test/java/org/apache/commons/csv/CSVLexer1306667.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexer1306667.java\n     Token nextToken(final Token tkn) throws IOException {\n \n         // get the last read char (required for empty line detection)\n-        int lastChar = in.readAgain();\n+        int lastChar = in.getLastChar();\n \n         //  read the next char and set eol\n         int c = in.read();\n         *       is to call 'readAgain' on the stream...\n         */\n         boolean eol = isEndOfLine(c);\n-        c = in.readAgain();\n+        c = in.getLastChar();\n \n         //  empty line detection: eol AND (last char was EOL or beginning)\n         if (ignoreEmptyLines) {\n                 lastChar = c;\n                 c = in.read();\n                 eol = isEndOfLine(c);\n-                c = in.readAgain();\n+                c = in.getLastChar();\n                 // reached end of file without any content (empty line at the end)\n                 if (isEndOfFile(c)) {\n                     tkn.type = EOF;\n--- a/src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java\n+++ b/src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java\n         final ExtendedBufferedReader br = getBufferedReader(\"\");\n         assertEquals(END_OF_STREAM, br.read());\n         assertEquals(END_OF_STREAM, br.lookAhead());\n-        assertEquals(END_OF_STREAM, br.readAgain());\n+        assertEquals(END_OF_STREAM, br.getLastChar());\n         assertNull(br.readLine());\n         assertEquals(0, br.read(new char[10], 0, 0));\n     }\n     public void testReadLookahead1() throws Exception {\n         final ExtendedBufferedReader br = getBufferedReader(\"1\\n2\\r3\\n\");\n         assertEquals('1', br.lookAhead());\n-        assertEquals(UNDEFINED, br.readAgain());\n+        assertEquals(UNDEFINED, br.getLastChar());\n         assertEquals('1', br.read());\n-        assertEquals('1', br.readAgain());\n+        assertEquals('1', br.getLastChar());\n \n         assertEquals(0, br.getLineNumber());\n         assertEquals('\\n', br.lookAhead());\n         assertEquals(0, br.getLineNumber());\n-        assertEquals('1', br.readAgain());\n+        assertEquals('1', br.getLastChar());\n         assertEquals('\\n', br.read());\n         assertEquals(1, br.getLineNumber());\n-        assertEquals('\\n', br.readAgain());\n+        assertEquals('\\n', br.getLastChar());\n         assertEquals(1, br.getLineNumber());\n \n         assertEquals('2', br.lookAhead());\n         assertEquals(1, br.getLineNumber());\n-        assertEquals('\\n', br.readAgain());\n+        assertEquals('\\n', br.getLastChar());\n         assertEquals(1, br.getLineNumber());\n         assertEquals('2', br.read());\n-        assertEquals('2', br.readAgain());\n+        assertEquals('2', br.getLastChar());\n \n         assertEquals('\\r', br.lookAhead());\n-        assertEquals('2', br.readAgain());\n+        assertEquals('2', br.getLastChar());\n         assertEquals('\\r', br.read());\n-        assertEquals('\\r', br.readAgain());\n+        assertEquals('\\r', br.getLastChar());\n \n         assertEquals('3', br.lookAhead());\n-        assertEquals('\\r', br.readAgain());\n+        assertEquals('\\r', br.getLastChar());\n         assertEquals('3', br.read());\n-        assertEquals('3', br.readAgain());\n+        assertEquals('3', br.getLastChar());\n \n         assertEquals('\\n', br.lookAhead());\n         assertEquals(2, br.getLineNumber());\n-        assertEquals('3', br.readAgain());\n+        assertEquals('3', br.getLastChar());\n         assertEquals('\\n', br.read());\n         assertEquals(3, br.getLineNumber());\n-        assertEquals('\\n', br.readAgain());\n+        assertEquals('\\n', br.getLastChar());\n         assertEquals(3, br.getLineNumber());\n \n         assertEquals(END_OF_STREAM, br.lookAhead());\n-        assertEquals('\\n', br.readAgain());\n+        assertEquals('\\n', br.getLastChar());\n         assertEquals(END_OF_STREAM, br.read());\n-        assertEquals(END_OF_STREAM, br.readAgain());\n+        assertEquals(END_OF_STREAM, br.getLastChar());\n         assertEquals(END_OF_STREAM, br.read());\n         assertEquals(END_OF_STREAM, br.lookAhead());\n \n         ref[2] = 'c';\n         assertEquals(3, br.read(res, 0, 3));\n         assertArrayEquals(ref, res);\n-        assertEquals('c', br.readAgain());\n+        assertEquals('c', br.getLastChar());\n \n         assertEquals('d', br.lookAhead());\n         ref[4] = 'd';\n         assertEquals(1, br.read(res, 4, 1));\n         assertArrayEquals(ref, res);\n-        assertEquals('d', br.readAgain());\n+        assertEquals('d', br.getLastChar());\n     }\n \n     @Test", "timestamp": 1350150005, "metainfo": ""}