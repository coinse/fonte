{"sha": "2414250b697e606d23e6055a5c72a11b5b28c2ee", "log": "Fix generics issue.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n      * @param map The Map to populate.\n      * @return the given map.\n      */\n-    Map<String, String> putIn(final Map<String, String> map) {\n+    <M extends Map<String, String>> M putIn(final M map) {\n         for (final Entry<String, Integer> entry : mapping.entrySet()) {\n             map.put(entry.getKey(), values[entry.getValue().intValue()]);\n         }\n--- a/src/test/java/org/apache/commons/csv/CSVRecordTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVRecordTest.java\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.TreeMap;\n import java.util.concurrent.ConcurrentHashMap;\n \n import org.junit.Assert;\n         final Map<String, String> map = new ConcurrentHashMap<String, String>();\n         this.recordWithHeader.putIn(map);\n         this.validateMap(map, false);\n+        // Test that we can compile with assigment to the same map as the param.\n+        final TreeMap<String, String> map2 = recordWithHeader.putIn(new TreeMap<String, String>());\n+        this.validateMap(map2, false);\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(new StringBuilder(), CSVFormat.DEFAULT);\n         final Map<String, String> map = recordWithHeader.toMap();\n         map.remove(\"OldColumn\");\n-        map.put(\"NewColumn\", \"NewValue\");\n+        map.put(\"ZColumn\", \"NewValue\");\n         // check:\n         final ArrayList<String> list = new ArrayList<String>(map.values());\n         Collections.sort(list);", "timestamp": 1390406843, "metainfo": ""}