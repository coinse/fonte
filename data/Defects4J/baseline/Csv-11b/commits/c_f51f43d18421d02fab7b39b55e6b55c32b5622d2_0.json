{"sha": "f51f43d18421d02fab7b39b55e6b55c32b5622d2", "log": "Implement Quote.NON_NUMERIC and Quote.MINIMAL. NONE throws a 'not implemented yet' exception.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n         println();\n     }\n \n-    private void print(final CharSequence value, final int offset, final int len) throws IOException {\n+    private void print(Object object, final CharSequence value, final int offset, final int len) throws IOException {\n         if (format.isQuoting()) {\n-            printAndQuote(value, offset, len);\n+            printAndQuote(object, value, offset, len);\n         } else if (format.isEscaping()) {\n             printAndEscape(value, offset, len);\n         } else {\n         }\n     }\n \n-    void printAndQuote(final CharSequence value, final int offset, final int len) throws IOException {\n+    void printAndQuote(Object object, final CharSequence value, final int offset, final int len) throws IOException {\n         final boolean first = newLine; // is this the first value on this line?\n         boolean quote = false;\n         int start = offset;\n         final char delimChar = format.getDelimiter();\n         final char quoteChar = format.getQuoteChar();\n \n-        if (format.getQuotePolicy() == Quote.ALL) {\n+        Quote quotePolicy = format.getQuotePolicy();\n+        if (quotePolicy == null) {\n+            quotePolicy = Quote.MINIMAL;\n+        }\n+        switch (quotePolicy) {\n+        case ALL:\n             quote = true;\n-        } else {\n+            break;\n+        case NON_NUMERIC:\n+            quote = !(object instanceof Number);\n+            break;\n+        case NONE:\n+            throw new IllegalArgumentException(\"Not implemented yet\");\n+        case MINIMAL:\n             if (len <= 0) {\n                 // always quote an empty token that is the first\n                 // on the line, as it may be the only thing on the\n                 out.append(value, start, end);\n                 return;\n             }\n-        }\n-\n+            break;\n+        }\n+\n+        if (!quote) {\n+            // no encapsulation needed - write out the original value\n+            out.append(value, start, end);\n+            return;\n+        }\n+        \n         // we hit something that needed encapsulation\n         out.append(quoteChar);\n \n             printDelimiter();\n             out.append(value);\n         } else {\n-            print(value, 0, value.length());\n+            print(object, value, 0, value.length());\n         }\n     }\n \n      * @throws IOException\n      *             If an I/O error occurs\n      */\n-    public void print(final Object value) throws IOException {\n-        print(value, true);\n+    public void print(final Object object) throws IOException {\n+        // null values are considered empty\n+        final String value = object == null ? EMPTY : object.toString();\n+        print(object, value, 0, value.length());\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n     }\n \n     @Test\n+    public void testQuoteNonNumeric() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuotePolicy(Quote.NON_NUMERIC));\n+        printer.printRecord(\"a\", \"b\\nc\", Integer.valueOf(1));\n+        assertEquals(\"\\\"a\\\",\\\"b\\nc\\\",1\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n     public void testRandom() throws Exception {\n         final int iter = 10000;\n         doRandom(CSVFormat.DEFAULT, iter);", "timestamp": 1350249813, "metainfo": ""}