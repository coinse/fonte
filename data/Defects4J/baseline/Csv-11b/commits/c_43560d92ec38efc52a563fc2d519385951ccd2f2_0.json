{"sha": "43560d92ec38efc52a563fc2d519385951ccd2f2", "log": "Make sure only record separators we can handle are used  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n             throw new IllegalArgumentException(\"No quotes mode set but no escape character is set\");\n         }\n \n+        if(recordSeparator != null\n+                && !(CRLF.equals(recordSeparator)\n+                    || String.valueOf(CR).equals(recordSeparator)\n+                    || String.valueOf(LF).equals(recordSeparator))) {\n+            throw new IllegalArgumentException(\"Record separator can only by CR, LF or CRLF\");\n+        }\n     }\n \n     /**\n      *            the record separator to use for output.\n      *\n      * @return A new CSVFormat that is equal to this but with the the specified output record separator\n+     * @throws IllegalArgumentException\n+     *              if recordSeparator is neither CR nor LF\n      */\n     public CSVFormat withRecordSeparator(final char recordSeparator) {\n         return withRecordSeparator(String.valueOf(recordSeparator));\n      *            the record separator to use for output.\n      *\n      * @return A new CSVFormat that is equal to this but with the the specified output record separator\n+     * @throws IllegalArgumentException\n+     *              if recordSeparator is none of CR, LF or CRLF\n      */\n     public CSVFormat withRecordSeparator(final String recordSeparator) {\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n \n import static org.apache.commons.csv.CSVFormat.RFC4180;\n import static org.apache.commons.csv.Constants.CR;\n+import static org.apache.commons.csv.Constants.CRLF;\n import static org.apache.commons.csv.Constants.LF;\n import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n     @Test\n     public void testEqualsHeader() {\n         final CSVFormat right = CSVFormat.newFormat('\\'')\n-                .withRecordSeparator('*')\n+                .withRecordSeparator(CR)\n                 .withCommentStart('#')\n                 .withEscape('+')\n                 .withHeader(\"One\", \"Two\", \"Three\")\n     @Test\n     public void testEqualsRecordSeparator() {\n         final CSVFormat right = CSVFormat.newFormat('\\'')\n-                .withRecordSeparator('*')\n+                .withRecordSeparator(CR)\n                 .withCommentStart('#')\n                 .withEscape('+')\n                 .withIgnoreEmptyLines(true)\n                 .withQuoteChar('\"')\n                 .withQuotePolicy(Quote.ALL);\n         final CSVFormat left = right\n-                .withRecordSeparator('!');\n+                .withRecordSeparator(LF);\n \n         assertNotEquals(right, left);\n     }\n     @Test\n     public void testEqualsNullString() {\n         final CSVFormat right = CSVFormat.newFormat('\\'')\n-                .withRecordSeparator('*')\n+                .withRecordSeparator(CR)\n                 .withCommentStart('#')\n                 .withEscape('+')\n                 .withIgnoreEmptyLines(true)\n     @Test\n     public void testEqualsSkipHeaderRecord() {\n         final CSVFormat right = CSVFormat.newFormat('\\'')\n-                .withRecordSeparator('*')\n+                .withRecordSeparator(CR)\n                 .withCommentStart('#')\n                 .withEscape('+')\n                 .withIgnoreEmptyLines(true)\n     }\n \n     @Test\n-    public void testWithRecordSeparator() throws Exception {\n-        final CSVFormat formatWithRecordSeparator = CSVFormat.DEFAULT.withRecordSeparator('!');\n-        assertEquals(\"!\", formatWithRecordSeparator.getRecordSeparator());\n+    public void testWithRecordSeparatorCR() throws Exception {\n+        final CSVFormat formatWithRecordSeparator = CSVFormat.DEFAULT.withRecordSeparator(CR);\n+        assertEquals(String.valueOf(CR), formatWithRecordSeparator.getRecordSeparator());\n+    }\n+\n+    @Test\n+    public void testWithRecordSeparatorLF() throws Exception {\n+        final CSVFormat formatWithRecordSeparator = CSVFormat.DEFAULT.withRecordSeparator(LF);\n+        assertEquals(String.valueOf(LF), formatWithRecordSeparator.getRecordSeparator());\n+    }\n+\n+    @Test\n+    public void testWithRecordSeparatorCRLF() throws Exception {\n+        final CSVFormat formatWithRecordSeparator = CSVFormat.DEFAULT.withRecordSeparator(CRLF);\n+        assertEquals(CRLF, formatWithRecordSeparator.getRecordSeparator());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testWithRecordSeparatorIllegal() throws Exception {\n+        CSVFormat.DEFAULT.withRecordSeparator('!');\n     }\n }", "timestamp": 1405017029, "metainfo": ""}