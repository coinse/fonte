{"sha": "45c01740a0bc7f9fcf74c1d0acebb55b139ffcfd", "log": "Stops the PosixParser from bursting options unecessarily, i.e. if -file is an acceptible option then it won't be broken into -f -i -l -e.  PR: 32525 Submitted by:\tDavid Morris   ", "commit": "\n--- a/src/java/org/apache/commons/cli/PosixParser.java\n+++ b/src/java/org/apache/commons/cli/PosixParser.java\n  *\n  * @author John Keyes (john at integralsource.com)\n  * @see Parser\n- * @version $Revision: 1.15 $\n+ * @version $Revision: 1.16 $\n  */\n public class PosixParser extends Parser {\n \n                 {\n                     processOptionToken(token, stopAtNonOption);\n                 }\n-\n+                else if (options.hasOption(token)) {\n+                \ttokens.add(token);\n+                }\n                 // requires bursting\n                 else\n                 {\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli/ArgumentIsOptionTest.java\n+/**\n+ * Copyright 2001-2004 The Apache Software Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.cli;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+\n+public class ArgumentIsOptionTest extends TestCase {\n+    private Options options = null;\n+    private CommandLineParser parser = null;\n+\n+    public ArgumentIsOptionTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(ArgumentIsOptionTest.class);\n+    }\n+\n+    public void setUp() {\n+        options = new Options().addOption(\"p\", false, \"Option p\").addOption(\"attr\",\n+                true, \"Option accepts argument\");\n+\n+        parser = new PosixParser();\n+    }\n+\n+    public void tearDown() {\n+    }\n+\n+    public void testOptionAndOptionWithArgument() {\n+        String[] args = new String[] {\n+                \"-p\",\n+                \"-attr\",\n+                \"value\"\n+            };\n+\n+        try {\n+            CommandLine cl = parser.parse(options, args);\n+            assertTrue(\"Confirm -p is set\", cl.hasOption(\"p\"));\n+            assertTrue(\"Confirm -attr is set\", cl.hasOption(\"attr\"));\n+            assertTrue(\"Confirm arg of -attr\",\n+                cl.getOptionValue(\"attr\").equals(\"value\"));\n+            assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n+        }\n+        catch (ParseException e) {\n+            fail(e.toString());\n+        }\n+    }\n+\n+    public void testOptionWithArgument() {\n+        String[] args = new String[] {\n+                \"-attr\",\n+                \"value\"\n+            };\n+\n+        try {\n+            CommandLine cl = parser.parse(options, args);\n+            assertFalse(\"Confirm -p is set\", cl.hasOption(\"p\"));\n+            assertTrue(\"Confirm -attr is set\", cl.hasOption(\"attr\"));\n+            assertTrue(\"Confirm arg of -attr\",\n+                cl.getOptionValue(\"attr\").equals(\"value\"));\n+            assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n+        }\n+        catch (ParseException e) {\n+            fail(e.toString());\n+        }\n+    }\n+\n+    public void testOption() {\n+        String[] args = new String[] {\n+                \"-p\"\n+            };\n+\n+        try {\n+            CommandLine cl = parser.parse(options, args);\n+            assertTrue(\"Confirm -p is set\", cl.hasOption(\"p\"));\n+            assertFalse(\"Confirm -attr is not set\", cl.hasOption(\"attr\"));\n+            assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n+        }\n+        catch (ParseException e) {\n+            fail(e.toString());\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli/LongOptionWithShort.java\n+/**\n+ * Copyright 2001-2004 The Apache Software Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.cli;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+\n+/**\n+ * <p>\n+ * This is a collection of tests that test real world\n+ * applications command lines focusing on options with\n+ * long and short names.\n+ * </p>\n+ */\n+public class LongOptionWithShort extends TestCase {\n+    public LongOptionWithShort(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(LongOptionWithShort.class);\n+    }\n+\n+    /**\n+     *\n+     */\n+    public void testLongOptionWithShort() {\n+        Option help = new Option(\"h\", \"help\", false, \"print this message\");\n+        Option version = new Option(\"v\", \"version\", false,\n+                \"print version information\");\n+        Option newRun = new Option(\"n\", \"new\", false,\n+                \"Create NLT cache entries only for new items\");\n+        Option trackerRun = new Option(\"t\", \"tracker\", false,\n+                \"Create NLT cache entries only for tracker items\");\n+\n+        Option timeLimit = OptionBuilder.withLongOpt(\"limit\").hasArg()\n+                                        .withValueSeparator()\n+                                        .withDescription(\"Set time limit for execution, in mintues\")\n+                                        .create(\"l\");\n+\n+        Option age = OptionBuilder.withLongOpt(\"age\").hasArg()\n+                                  .withValueSeparator()\n+                                  .withDescription(\"Age (in days) of cache item before being recomputed\")\n+                                  .create(\"a\");\n+\n+        Option server = OptionBuilder.withLongOpt(\"server\").hasArg()\n+                                     .withValueSeparator()\n+                                     .withDescription(\"The NLT server address\")\n+                                     .create(\"s\");\n+\n+        Option numResults = OptionBuilder.withLongOpt(\"results\").hasArg()\n+                                         .withValueSeparator()\n+                                         .withDescription(\"Number of results per item\")\n+                                         .create(\"r\");\n+\n+        Option configFile = OptionBuilder.withLongOpt(\"file\").hasArg()\n+                                         .withValueSeparator()\n+                                         .withDescription(\"Use the specified configuration file\")\n+                                         .create();\n+\n+        Options options = new Options();\n+        options.addOption(help);\n+        options.addOption(version);\n+        options.addOption(newRun);\n+        options.addOption(trackerRun);\n+        options.addOption(timeLimit);\n+        options.addOption(age);\n+        options.addOption(server);\n+        options.addOption(numResults);\n+        options.addOption(configFile);\n+\n+        // create the command line parser\n+        CommandLineParser parser = new PosixParser();\n+\n+        String[] args = new String[] {\n+                \"-v\",\n+                \"-l\",\n+                \"10\",\n+                \"-age\",\n+                \"5\",\n+                \"-file\",\n+                \"filename\"\n+            };\n+\n+        try {\n+            CommandLine line = parser.parse(options, args);\n+            assertTrue(line.hasOption(\"v\"));\n+            assertEquals(line.getOptionValue(\"l\"), \"10\");\n+            assertEquals(line.getOptionValue(\"limit\"), \"10\");\n+            assertEquals(line.getOptionValue(\"a\"), \"5\");\n+            assertEquals(line.getOptionValue(\"age\"), \"5\");\n+            assertEquals(line.getOptionValue(\"file\"), \"filename\");\n+        }\n+        catch (ParseException exp) {\n+            fail(\"Unexpected exception:\" + exp.getMessage());\n+        }\n+    }\n+}", "timestamp": 1104151358, "metainfo": ""}