{"sha": "e4925b286a8e73ab64041c1266463ef1955efb51", "log": "HelpFormatter now applys a minimum description width of 1 character   ", "commit": "\n--- a/src/java/org/apache/commons/cli2/util/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli2/util/HelpFormatter.java\n         final Set lineUsage = new HashSet();\n         lineUsage.add(DisplaySetting.DISPLAY_ALIASES);\n         lineUsage.add(DisplaySetting.DISPLAY_GROUP_NAME);\n+        lineUsage.add(DisplaySetting.DISPLAY_PARENT_ARGUMENT);\n         DEFAULT_LINE_USAGE_SETTINGS = Collections.unmodifiableSet(lineUsage);\n \n         final Set displayUsage = new HashSet(DisplaySetting.ALL);\n         for (int i = 0; i < usageWidth; i++) {\n             blankBuffer.append(' ');\n         }\n-        final int descriptionWidth =\n-            pageWidth - gutterCenter.length() - usageWidth;\n+        final int descriptionWidth = Math.max(1,\n+            pageWidth - gutterCenter.length() - usageWidth);\n         for (final Iterator i = helpLines.iterator(); i.hasNext();) {\n             final HelpLine helpLine = (HelpLine)i.next();\n             final List descriptionLines =\n     }\n \n     protected static List wrap(final String text, final int width) {\n+        if(width<1){\n+            throw new IllegalArgumentException(\"width must be positive\");\n+        }\n+        \n         if (text == null) {\n             return Collections.singletonList(\"\");\n         }\n--- a/src/test/org/apache/commons/cli2/util/HelpFormatterTest.java\n+++ b/src/test/org/apache/commons/cli2/util/HelpFormatterTest.java\n \n import junit.framework.TestCase;\n \n+import org.apache.commons.cli2.Group;\n import org.apache.commons.cli2.Option;\n import org.apache.commons.cli2.OptionException;\n import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n public class HelpFormatterTest extends TestCase {\n     private HelpFormatter helpFormatter;\n     private Option verbose;\n+    private Group options;\n \n     public void setUp() {\n         helpFormatter = new HelpFormatter(\"|*\", \"*-*\", \"*|\", 80);\n                 .withDescription(\"print the version information and exit\")\n                 .create();\n \n-        helpFormatter.setGroup(\n-            new GroupBuilder()\n-                .withName(\"options\")\n-                .withOption(DefaultOptionTest.buildHelpOption())\n-                .withOption(ArgumentTest.buildTargetsArgument())\n-                .withOption(\n-                    new DefaultOptionBuilder()\n-                        .withLongName(\"diagnostics\")\n-                        .withDescription(\"print information that might be helpful to diagnose or report problems.\")\n-                        .create())\n-                .withOption(\n-                    new DefaultOptionBuilder()\n-                        .withLongName(\"projecthelp\")\n-                        .withDescription(\"print project help information\")\n-                        .create())\n-                .withOption(verbose)\n-                .create());\n+        options = new GroupBuilder()\n+            .withName(\"options\")\n+            .withOption(DefaultOptionTest.buildHelpOption())\n+            .withOption(ArgumentTest.buildTargetsArgument())\n+            .withOption(\n+                new DefaultOptionBuilder()\n+                    .withLongName(\"diagnostics\")\n+                    .withDescription(\"print information that might be helpful to diagnose or report problems.\")\n+                    .create())\n+            .withOption(\n+                new DefaultOptionBuilder()\n+                    .withLongName(\"projecthelp\")\n+                    .withDescription(\"print project help information\")\n+                    .create())\n+            .withOption(verbose)\n+            .create();        \n+        \n+        helpFormatter.setGroup(options);\n     }\n \n     public void testPrint() throws IOException {\n             \"+------------------------------------------------------------------------------+\",\n             reader.readLine());\n         assertNull(reader.readLine());\n+    }\n+\n+    public void testPrintHelp_TooNarrow() throws IOException {\n+        final StringWriter writer = new StringWriter();\n+        helpFormatter = new HelpFormatter(\"<\",\"=\",\">\",4);\n+        helpFormatter.setGroup(options);\n+        helpFormatter.setPrintWriter(new PrintWriter(writer));\n+        helpFormatter.printHelp();\n+        System.out.println(writer);\n+        final BufferedReader reader =\n+            new BufferedReader(new StringReader(writer.toString()));\n+        assertEquals(\n+            \"<options              = >\",\n+            reader.readLine());\n+        assertEquals(\n+            \"<  --help (-?,-h)     =D>\",\n+            reader.readLine());\n+        assertEquals(\n+            \"<                     =i>\",\n+            reader.readLine());\n+        // lots more lines unchecked\n     }\n \n     public void testPrintException() throws IOException {\n         assertEquals(\"\", i.next());\n         assertFalse(i.hasNext());\n     }\n+    \n+    public void testWrap_Below1Length() {\n+        try{\n+            HelpFormatter.wrap(\"Apache Software Foundation\",-1);\n+            fail(\"IllegalArgumentException\");\n+        }\n+        catch(IllegalArgumentException e) {\n+            assertEquals(\"width must be positive\",e.getMessage());\n+        }\n+    }\n \n     public void testPad() throws IOException {\n         final StringWriter writer = new StringWriter();\n         HelpFormatter.pad(\"hello world\", 10, writer);\n         assertEquals(\"hello world\", writer.toString());\n     }\n+    \n+    public void testPad_TooShort() throws IOException {\n+        final StringWriter writer = new StringWriter();\n+        HelpFormatter.pad(\"hello world\", -5, writer);\n+        assertEquals(\"hello world\", writer.toString());\n+    }\n }", "timestamp": 1097794231, "metainfo": ""}