{"sha": "279e5a9c468a48574a55db31f0a6e33d9309a667", "log": "Applying patch #17677. Remove the Writer API in favour of the PrintWriter API it is using elsewhere anyway - with the advantage that the IOException throws go away  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/util/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli2/util/HelpFormatter.java\n  */\n package org.apache.commons.cli2.util;\n \n-import java.io.IOException;\n import java.io.PrintWriter;\n-import java.io.Writer;\n \n import java.util.ArrayList;\n import java.util.Collections;\n \n     /**\n      * Prints the Option help.\n-     * @throws IOException if an error occurs\n-     */\n-    public void print()\n-        throws IOException {\n+     */\n+    public void print() {\n         printHeader();\n         printException();\n         printUsage();\n \n     /**\n      * Prints any error message.\n-     * @throws IOException if an error occurs\n-     */\n-    public void printException()\n-        throws IOException {\n+     */\n+    public void printException() {\n         if (exception != null) {\n             printDivider();\n             printWrapped(exception.getMessage());\n \n     /**\n      * Prints detailed help per option.\n-     * @throws IOException if an error occurs\n-     */\n-    public void printHelp()\n-        throws IOException {\n+     */\n+    public void printHelp() {\n         printDivider();\n \n         final Option option;\n \n     /**\n      * Prints a single line of usage information (wrapping if necessary)\n-     * @throws IOException if an error occurs\n-     */\n-    public void printUsage()\n-        throws IOException {\n+     */\n+    public void printUsage() {\n         printDivider();\n \n         final StringBuffer buffer = new StringBuffer(\"Usage:\\n\");\n \n     /**\n      * Prints a header string if necessary\n-     * @throws IOException if an error occurs\n-     */\n-    public void printHeader()\n-        throws IOException {\n+     */\n+    public void printHeader() {\n         if (header != null) {\n             printDivider();\n             printWrapped(header);\n \n     /**\n      * Prints a footer string if necessary\n-     * @throws IOException if an error occurs\n-     */\n-    public void printFooter()\n-        throws IOException {\n+     */\n+    public void printFooter() {\n         if (footer != null) {\n             printWrapped(footer);\n             printDivider();\n     /**\n      * Prints a string wrapped if necessary\n      * @param text the string to wrap\n-     * @throws IOException if an error occurs\n-     */\n-    protected void printWrapped(final String text)\n-        throws IOException {\n+     */\n+    protected void printWrapped(final String text) {\n         for (final Iterator i = wrap(text, pageWidth).iterator(); i.hasNext();) {\n             printGutterLeft();\n             pad((String) i.next(), pageWidth, out);\n \n     protected static void pad(final String text,\n                               final int width,\n-                              final Writer writer)\n-        throws IOException {\n+                              final PrintWriter writer) {\n         final int left;\n \n         // write the text and record how many characters written\n--- a/src/test/org/apache/commons/cli2/util/HelpFormatterTest.java\n+++ b/src/test/org/apache/commons/cli2/util/HelpFormatterTest.java\n     public void testPad()\n         throws IOException {\n         final StringWriter writer = new StringWriter();\n-        HelpFormatter.pad(\"hello\", 10, writer);\n+        HelpFormatter.pad(\"hello\", 10, new PrintWriter(writer));\n         assertEquals(\"hello     \", writer.toString());\n     }\n \n     public void testPad_Null()\n         throws IOException {\n         final StringWriter writer = new StringWriter();\n-        HelpFormatter.pad(null, 10, writer);\n+        HelpFormatter.pad(null, 10, new PrintWriter(writer));\n         assertEquals(\"          \", writer.toString());\n     }\n \n     public void testPad_TooLong()\n         throws IOException {\n         final StringWriter writer = new StringWriter();\n-        HelpFormatter.pad(\"hello world\", 10, writer);\n+        HelpFormatter.pad(\"hello world\", 10, new PrintWriter(writer));\n         assertEquals(\"hello world\", writer.toString());\n     }\n \n     public void testPad_TooShort()\n         throws IOException {\n         final StringWriter writer = new StringWriter();\n-        HelpFormatter.pad(\"hello world\", -5, writer);\n+        HelpFormatter.pad(\"hello world\", -5, new PrintWriter(writer));\n         assertEquals(\"hello world\", writer.toString());\n     }\n ", "timestamp": 1141802220, "metainfo": ""}