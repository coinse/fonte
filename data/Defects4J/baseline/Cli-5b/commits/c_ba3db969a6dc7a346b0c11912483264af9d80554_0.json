{"sha": "ba3db969a6dc7a346b0c11912483264af9d80554", "log": "- added tests  ", "commit": "\n--- a/src/test/org/apache/commons/cli2/PrecedenceTest.java\n+++ b/src/test/org/apache/commons/cli2/PrecedenceTest.java\n         assertEquals(new String[] { \"-f\", \"-i\", \"-l\", \"-e\" }, cl);\n     }\n \n-    public void XtestSimpleVsArgument() throws OptionException {\n-        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\n-        final GroupBuilder gBuilder = new GroupBuilder();\n-        final ArgumentBuilder aBuilder = new ArgumentBuilder();\n-\n-        final Group options =\n-            gBuilder\n-                .withOption(oBuilder.withShortName(\"file\").create())\n-                .withOption(\n-                    oBuilder\n-                        .withShortName(\"f\")\n-                        .withArgument(aBuilder.create())\n-                        .create())\n-                .create();\n-\n-        final CommandLine cl = buildCommandLine(options, args);\n-        assertEquals(new String[] { \"-f\" }, cl);\n-    }\n-\n-    public void XtestSimpleVsBurst() throws OptionException {\n+    public void testSimpleVsArgument() throws OptionException {\n+        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\n+        final GroupBuilder gBuilder = new GroupBuilder();\n+        final ArgumentBuilder aBuilder = new ArgumentBuilder();\n+\n+        final Group options =\n+            gBuilder\n+                .withOption(oBuilder.withShortName(\"file\").create())\n+                .withOption(\n+                    oBuilder\n+                        .withShortName(\"f\")\n+                        .withArgument(aBuilder.create())\n+                        .create())\n+                .create();\n+\n+        final CommandLine cl = buildCommandLine(options, args);\n+        assertEquals(new String[] { \"-f\" }, cl);\n+    }\n+\n+    public void testSimpleVsBurst() throws OptionException {\n         final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\n         final GroupBuilder gBuilder = new GroupBuilder();\n         final Group options =\n         assertEquals(new String[] { \"-f\", \"-i\", \"-l\", \"-e\" }, cl);\n     }\n \n-    public void XtestSimpleVsChildren() throws OptionException {\n+    public void testSimpleVsChildren() throws OptionException {\n         final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\n         final GroupBuilder gBuilder = new GroupBuilder();\n \n             cl);\n     }\n \n-    public void XtestSimpleVsArgumentVsBurst() throws OptionException {\n-        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\n-        final GroupBuilder gBuilder = new GroupBuilder();\n-        final ArgumentBuilder aBuilder = new ArgumentBuilder();\n-\n-        final Group options =\n-            gBuilder\n-                .withOption(oBuilder.withShortName(\"file\").create())\n-                .withOption(\n-                    oBuilder\n-                        .withShortName(\"f\")\n-                        .withArgument(aBuilder.create())\n-                        .create())\n-                .withOption(oBuilder.withShortName(\"i\").create())\n-                .withOption(oBuilder.withShortName(\"l\").create())\n-                .withOption(oBuilder.withShortName(\"e\").create())\n-                .create();\n-\n-        final CommandLine cl = buildCommandLine(options, args);\n-        assertEquals(new String[] { \"-f\" }, cl);\n-    }\n-\n-    public void XtestSimpleVsArgumentVsChildren() throws OptionException {\n-        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\n-        final GroupBuilder gBuilder = new GroupBuilder();\n-        final ArgumentBuilder aBuilder = new ArgumentBuilder();\n-\n-        final Group children =\n-            gBuilder\n-                .withOption(\n-                    oBuilder.withShortName(\"i\").withLongName(\"ci\").create())\n-                .withOption(\n-                    oBuilder.withShortName(\"l\").withLongName(\"cl\").create())\n-                .withOption(\n-                    oBuilder.withShortName(\"e\").withLongName(\"ce\").create())\n-                .create();\n-\n-        final Group options =\n-            gBuilder\n-                .withOption(oBuilder.withShortName(\"file\").create())\n-                .withOption(\n-                    oBuilder\n-                        .withShortName(\"f\")\n-                        .withChildren(children)\n-                        .withArgument(aBuilder.create())\n-                        .create())\n-                .create();\n-\n-        final CommandLine cl = buildCommandLine(options, args);\n-        assertEquals(new String[] { \"-f\" }, cl);\n-    }\n-\n-    public void XtestSimpleVsBurstVsChildren() throws OptionException {\n+    public void testSimpleVsArgumentVsBurst() throws OptionException {\n+        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\n+        final GroupBuilder gBuilder = new GroupBuilder();\n+        final ArgumentBuilder aBuilder = new ArgumentBuilder();\n+\n+        final Group options =\n+            gBuilder\n+                .withOption(oBuilder.withShortName(\"file\").create())\n+                .withOption(\n+                    oBuilder\n+                        .withShortName(\"f\")\n+                        .withArgument(aBuilder.create())\n+                        .create())\n+                .withOption(oBuilder.withShortName(\"i\").create())\n+                .withOption(oBuilder.withShortName(\"l\").create())\n+                .withOption(oBuilder.withShortName(\"e\").create())\n+                .create();\n+\n+        final CommandLine cl = buildCommandLine(options, args);\n+        assertEquals(new String[] { \"-f\" }, cl);\n+    }\n+\n+    public void testSimpleVsArgumentVsChildren() throws OptionException {\n+        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\n+        final GroupBuilder gBuilder = new GroupBuilder();\n+        final ArgumentBuilder aBuilder = new ArgumentBuilder();\n+\n+        final Group children =\n+            gBuilder\n+                .withOption(\n+                    oBuilder.withShortName(\"i\").withLongName(\"ci\").create())\n+                .withOption(\n+                    oBuilder.withShortName(\"l\").withLongName(\"cl\").create())\n+                .withOption(\n+                    oBuilder.withShortName(\"e\").withLongName(\"ce\").create())\n+                .create();\n+\n+        final Group options =\n+            gBuilder\n+                .withOption(oBuilder.withShortName(\"file\").create())\n+                .withOption(\n+                    oBuilder\n+                        .withShortName(\"f\")\n+                        .withChildren(children)\n+                        .withArgument(aBuilder.create())\n+                        .create())\n+                .create();\n+\n+        final CommandLine cl = buildCommandLine(options, args);\n+        assertEquals(new String[] { \"-f\" }, cl);\n+    }\n+\n+    public void testSimpleVsBurstVsChildren() throws OptionException {\n         final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\n         final GroupBuilder gBuilder = new GroupBuilder();\n \n         assertEquals(new String[] { \"-f\" }, cl);\n     }\n \n-    public void XtestSimpleVsArgumentVsBurstVsChildren()\n+    public void testSimpleVsArgumentVsBurstVsChildren()\n         throws OptionException {\n         final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\n         final GroupBuilder gBuilder = new GroupBuilder();\n         final List expected = Arrays.asList(options);\n         final Set actual = line.getOptionTriggers();\n \n-        //System.out.println(getName() + \": \" + actual);\n-\n         assertTrue(expected.containsAll(actual));\n         assertTrue(actual.containsAll(expected));\n     }\n+\n }\n--- a/src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java\n+++ b/src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java\n package org.apache.commons.cli2.commandline;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.Iterator;\n+import java.util.Set;\n \n import org.apache.commons.cli2.CommandLine;\n import org.apache.commons.cli2.CommandLineTestCase;\n         assertSame(first, i.next());\n         assertFalse(i.hasNext());\n     }\n+    \n+    public void testTriggers() {\n+        final DefaultingCommandLine defaults = new DefaultingCommandLine();\n+        defaults.appendCommandLine(first);\n+        defaults.appendCommandLine(second);\n+\n+        Set set = defaults.getOptionTriggers();\n+        Iterator iter = set.iterator();\n+        assertEquals(\"wrong # of triggers\", 3, set.size());\n+        assertTrue(\"cannot find trigger\", set.contains(\"--insecond\"));\n+        assertTrue(\"cannot find trigger\", set.contains(\"--inboth\"));\n+        assertTrue(\"cannot find trigger\", set.contains(\"--infirst\"));\n+    }\n+\n+    public void testDefaults() {\n+        final DefaultingCommandLine defaults = new DefaultingCommandLine();\n+        \n+        assertEquals(\"wrong # of defaults\", 0, defaults.getValues(\"--insecond\").size());\n+        assertEquals(\"wrong Set of defaults\", Collections.EMPTY_LIST, defaults.getValues(\"--insecond\", null));\n+    }\n }\n--- a/src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java\n+++ b/src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java\n  */\n package org.apache.commons.cli2.commandline;\n \n+import java.util.Iterator;\n+import java.util.Set;\n import java.util.prefs.Preferences;\n \n import org.apache.commons.cli2.CommandLine;\n \t\t\n \t\treturn new PreferencesCommandLine(root,props,'|');\n \t}\n+\n+\tprotected CommandLine createCommandLineNoSep() {\n+\t\t// TODO Auto-generated method stub\n+\t\tfinal Preferences props = Preferences.userNodeForPackage(PreferencesCommandLineTest.class);\n+\t\tprops.put(\"--present\",\"present value\");\n+\t\tprops.put(\"--alsopresent\",\"\");\n+\t\tprops.put(\"--multiple\",\"value 1|value 2|value 3\");\n+\t\tprops.put(\"--bool\",\"false\");\n+\t\t\n+\t\tprops.put(\"present\",\"present property\");\n+\t\t\n+\t\treturn new PreferencesCommandLine(root,props);\n+\t}\n \t\n-\tpublic void testToMakeEclipseSpotTheTestCase(){\n-\t\t// nothing to test\n-\t}\n+    public void testPropertyValues() {\n+        // nothing to test\n+    \tCommandLine cmdline = createCommandLine();\n+    \t\n+    \tassertEquals(\"wrong value\", \"present value\", cmdline.getValue(\"--present\"));\n+    \tassertEquals(\"wrong value\", \"present value\", cmdline.getValue(\"--alsopresent\"));\n+    \tassertEquals(\"wrong # of values\", 3, cmdline.getValues(\"--multiple\").size());\n+    \tassertEquals(\"wrong value 1\", \"value 1\", cmdline.getValues(\"--multiple\").get(0));\n+    \tassertEquals(\"wrong value 2\", \"value 2\", cmdline.getValues(\"--multiple\").get(1));\n+    \tassertEquals(\"wrong value 3\", \"value 3\", cmdline.getValues(\"--multiple\").get(2));\n+    }\n+    \n+    public void testNoSeparator() {\n+        // nothing to test\n+    \tCommandLine cmdline = createCommandLineNoSep();\n+    \t\n+    \tassertEquals(\"wrong value\", \"present value\", cmdline.getValue(\"--present\"));\n+    \tassertEquals(\"wrong value\", \"present value\", cmdline.getValue(\"--alsopresent\"));\n+    \tassertEquals(\"wrong # of values\", 1, cmdline.getValues(\"--multiple\").size());\n+    \tassertEquals(\"wrong value\", \"value 1|value 2|value 3\", cmdline.getValue(\"--multiple\"));\n+    \tassertFalse(\"expected a false\", cmdline.getSwitch(\"--bool\").booleanValue());\n+    }\n+    \n+    public void testNullOption() {\n+        // nothing to test\n+    \tCommandLine cmdline = createCommandLine();\n+\n+    \tassertFalse(\"should not find null option\", cmdline.hasOption((String) null));\n+    \tassertTrue(\"expected a true\", cmdline.getSwitch(\"--bool\").booleanValue());\n+    }\n+\n+    public void testPreferenceTriggers() {\n+        // nothing to test\n+    \tCommandLine cmdline = createCommandLine();\n+\n+    \tSet triggers = cmdline.getOptionTriggers();\n+        Iterator iter = triggers.iterator();\n+        assertEquals(\"wrong # of triggers\", 4, triggers.size());\n+        assertTrue(\"cannot find trigger\", triggers.contains(\"--bool\"));\n+        assertTrue(\"cannot find trigger\", triggers.contains(\"--present\"));\n+        assertTrue(\"cannot find trigger\", triggers.contains(\"--multiple\"));\n+        assertTrue(\"cannot find trigger\", triggers.contains(\"--alsopresent\"));\n+    \t\n+    \tassertFalse(\"should not find null option\", cmdline.hasOption((String) null));\n+    \tassertTrue(\"expected a true\", cmdline.getSwitch(\"--bool\").booleanValue());\n+    }\n }\n--- a/src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java\n+++ b/src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java\n  */\n package org.apache.commons.cli2.commandline;\n \n+import java.util.Iterator;\n import java.util.Properties;\n+import java.util.Set;\n \n import org.apache.commons.cli2.CommandLine;\n import org.apache.commons.cli2.CommandLineTestCase;\n     extends CommandLineTestCase {\n     private Properties props = null;\n \n-    /* (non-Javadoc)\n-     * @see org.apache.commons.cli2.CommandLineTest#createCommandLine()\n-     */\n     protected CommandLine createCommandLine() {\n         props = new Properties();\n         props.setProperty(\"--present\", \"present value\");\n         props.setProperty(\"--bool\", \"true\");\n \n         props.setProperty(\"present\", \"present property\");\n-\n-        return new PropertiesCommandLine(root, props, '|');\n+    \treturn new PropertiesCommandLine(root, props, '|');\n     }\n \n-    public void testToMakeEclipseSpotTheTestCase() {\n+    protected CommandLine createCommandLineNoSep() {\n+        props = new Properties();\n+        props.setProperty(\"--present\", \"present value\");\n+        props.setProperty(\"--alsopresent\", \"\");\n+        props.setProperty(\"--multiple\", \"value 1|value 2|value 3\");\n+        props.setProperty(\"--bool\", \"false\");\n+\n+        props.setProperty(\"present\", \"present property\");\n+    \treturn new PropertiesCommandLine(root, props);\n+    }\n+    \n+    public void testPropertyValues() {\n         // nothing to test\n+    \tCommandLine cmdline = createCommandLine();\n+    \t\n+    \tassertEquals(\"wrong value\", \"present value\", cmdline.getValue(\"--present\"));\n+    \tassertEquals(\"wrong value\", \"present value\", cmdline.getValue(\"--alsopresent\"));\n+    \tassertEquals(\"wrong # of values\", 3, cmdline.getValues(\"--multiple\").size());\n+    \tassertEquals(\"wrong value 1\", \"value 1\", cmdline.getValues(\"--multiple\").get(0));\n+    \tassertEquals(\"wrong value 2\", \"value 2\", cmdline.getValues(\"--multiple\").get(1));\n+    \tassertEquals(\"wrong value 3\", \"value 3\", cmdline.getValues(\"--multiple\").get(2));\n+    }\n+    \n+    public void testNoSeparator() {\n+        // nothing to test\n+    \tCommandLine cmdline = createCommandLineNoSep();\n+    \t\n+    \tassertEquals(\"wrong value\", \"present value\", cmdline.getValue(\"--present\"));\n+    \tassertEquals(\"wrong value\", \"present value\", cmdline.getValue(\"--alsopresent\"));\n+    \tassertEquals(\"wrong # of values\", 1, cmdline.getValues(\"--multiple\").size());\n+    \tassertEquals(\"wrong value\", \"value 1|value 2|value 3\", cmdline.getValue(\"--multiple\"));\n+    \tassertFalse(\"expected a false\", cmdline.getSwitch(\"--bool\").booleanValue());\n+    }\n+    \n+    public void testNullOption() {\n+        // nothing to test\n+    \tCommandLine cmdline = createCommandLine();\n+\n+    \tassertFalse(\"should not find null option\", cmdline.hasOption((String) null));\n+    \tassertTrue(\"expected a true\", cmdline.getSwitch(\"--bool\").booleanValue());\n+    }\n+\n+    public void testPropertyTriggers() {\n+        // nothing to test\n+    \tCommandLine cmdline = createCommandLine();\n+\n+    \tSet triggers = cmdline.getOptionTriggers();\n+        Iterator iter = triggers.iterator();\n+        assertEquals(\"wrong # of triggers\", 4, triggers.size());\n+        assertTrue(\"cannot find trigger\", triggers.contains(\"--bool\"));\n+        assertTrue(\"cannot find trigger\", triggers.contains(\"--present\"));\n+        assertTrue(\"cannot find trigger\", triggers.contains(\"--multiple\"));\n+        assertTrue(\"cannot find trigger\", triggers.contains(\"--alsopresent\"));\n+    \t\n+    \tassertFalse(\"should not find null option\", cmdline.hasOption((String) null));\n+    \tassertTrue(\"expected a true\", cmdline.getSwitch(\"--bool\").booleanValue());\n     }\n }\n--- a/src/test/org/apache/commons/cli2/option/ArgumentTest.java\n+++ b/src/test/org/apache/commons/cli2/option/ArgumentTest.java\n \n         bounds.process(commandLine, iterator);\n \n+        // test with values\n         List values = new ArrayList();\n         values.add(\"50\");\n         values.add(\"100\");\n         assertEquals(values, commandLine.getValues(bounds, values));\n+\n+        // test without values\n+        assertEquals(Collections.EMPTY_LIST, commandLine.getValues(bounds, null));\n     }\n \n     public void testProcess_StripBoundaryQuotes()", "timestamp": 1128211030, "metainfo": ""}