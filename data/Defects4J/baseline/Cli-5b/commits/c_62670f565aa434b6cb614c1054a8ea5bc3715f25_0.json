{"sha": "62670f565aa434b6cb614c1054a8ea5bc3715f25", "log": "fixed bug 13425, added argName support, fixed some bugs in the HelpFormatter   ", "commit": "\n--- a/src/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli/HelpFormatter.java\n                if( !option.isRequired() ) {\n                    buff.append( \"[\" );\n                }\n-               buff.append( \"-\" ).append( option.getOpt() );\n+               \n+               if( !\" \".equals( option.getOpt() ) ) {\n+                   buff.append( \"-\" ).append( option.getOpt() );\n+               }\n+               else {\n+                   buff.append( \"--\" ).append( option.getLongOpt() );\n+               }\n+\n+               if( option.getValueSeparator() != (char)0 ) {\n+                   buff.append( option.getValueSeparator() );\n+               }\n+               else if( option.hasArg() ){\n+                   buff.append( \" \" );\n+               }\n \n                // if the Option has a value\n                if( option.hasArg() ) {\n-                   buff.append( \" arg\" );\n+                   buff.append( option.getArgName() );\n                }\n \n                // if the Option is not a required option\n            }\n        }\n \n-       System.out.println( \"->\" + buff.toString() );\n        // call printWrapped\n        printWrapped( pw, width, buff.toString().indexOf(' ')+1,\n                      buff.toString() );\n       StringBuffer optBuf;\n       List prefixList = new ArrayList();\n       Option option;\n-      for ( Iterator i = options.getOptions().iterator(); i.hasNext(); )\n+      List optList = options.helpOptions();\n+       Collections.sort( optList, new StringBufferComparator() );\n+      for ( Iterator i = optList.iterator(); i.hasNext(); )\n       {\n          option = (Option) i.next();\n          optBuf = new StringBuffer(8);\n \n          }\n \n-\n-         if ( option.hasArg() )\n-         {\n-            //FIXME - should have a way to specify arg name per option\n-            optBuf.append(' ').append(defaultArgName);\n-         }\n+         if( option.hasArg() ) {\n+             if( option.hasArgName() ) {\n+                 optBuf.append( option.getArgName() );\n+             }\n+             else {\n+                 optBuf.append(' ');\n+             }\n+         }\n+\n          prefixList.add(optBuf);\n          max = optBuf.length() > max ? optBuf.length() : max;\n-      }\n-\n-      //right pad the prefixes\n-      for ( Iterator i = prefixList.iterator(); i.hasNext(); )\n-      {\n-         optBuf = (StringBuffer) i.next();\n+\n          if ( optBuf.length() < max )\n          {\n-            optBuf.append(createPadding(max-optBuf.length()));\n+             optBuf.append(createPadding(max-optBuf.length()));\n          }\n          optBuf.append(dpad);\n-      }\n-\n-      //sort this list ascending\n-      Collections.sort(prefixList, new StringBufferComparator());\n-\n-      //finally render options\n-      int nextLineTabStop = max + descPad;\n-      String opt;\n-      int optOffset = leftPad + defaultOptPrefix.length();\n-\n-      for ( Iterator i = prefixList.iterator(); i.hasNext(); )\n-      {\n-         optBuf = (StringBuffer) i.next();\n-         opt = optBuf.toString().trim();\n-         if( opt.indexOf( ',' ) != -1 ) {\n-             opt = opt.substring(0, opt.indexOf( ',', optOffset ) );\n-         }\n-         option = options.getOption(opt);\n-\n+         \n+         int nextLineTabStop = max + descPad;\n          renderWrappedText(sb, width, nextLineTabStop,\n                            optBuf.append(option.getDescription()).toString());\n          if ( i.hasNext() )\n          {\n-            sb.append(defaultNewLine);\n+             sb.append(defaultNewLine);\n          }\n       }\n \n--- a/src/java/org/apache/commons/cli/Option.java\n+++ b/src/java/org/apache/commons/cli/Option.java\n     /** hasArg specifies whether this option has an associated argument */\n     private boolean hasArg;\n \n+    /** argName specifies the name of the argument for this option */\n+    private String argName;\n+\n     /** description of the option */\n     private String description;\n \n       */\n      public void setRequired( boolean required ) {\n          this.required = required;\n+     }\n+\n+     /**\n+      * <p>Sets the display name for the argument value.</p>\n+      *\n+      * @param argName the display name for the argument value.\n+      */\n+     public void setArgName( String argName ) {\n+         this.argName = argName;\n+     }\n+\n+     /**\n+      * <p>Gets the display name for the argument value.</p>\n+      *\n+      * @return the display name for the argument value.\n+      */\n+     public String getArgName() {\n+         return this.argName;\n+     }\n+\n+     /**\n+      * <p>Returns whether the display name for the argument value\n+      * has been set.</p>\n+      *\n+      * @return if the display name for the argument value has been\n+      * set.\n+      */\n+     public boolean hasArgName() {\n+         return (this.argName != null || this.argName.length() > 0 );\n      }\n \n      /** \n--- a/src/java/org/apache/commons/cli/OptionBuilder.java\n+++ b/src/java/org/apache/commons/cli/OptionBuilder.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.10 2002/09/19 22:59:43 jkeyes Exp $\n- * $Revision: 1.10 $\n- * $Date: 2002/09/19 22:59:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.11 2002/10/08 21:24:11 jkeyes Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2002/10/08 21:24:11 $\n  *\n  * ====================================================================\n  *\n     private static String longopt;\n     /** option description */\n     private static String description;\n+    /** argument name */\n+    private static String argName;\n     /** is required? */\n     private static boolean required;\n     /** the number of arguments */\n      */\n     private static void reset() {\n         description = null;\n+        argName = null;\n         longopt = null;\n         type = null;\n         required = false;\n      */\n     public static OptionBuilder hasArg( boolean hasArg ) {\n         instance.numberOfArgs = ( hasArg == true ) ? 1 : Option.UNINITIALIZED;\n+        return instance;\n+    }\n+\n+    /**\n+     * <p>The next Option created will have the specified argument value \n+     * name.</p>\n+     *\n+     * @param name the name for the argument value\n+     * @return the OptionBuilder instance\n+     */\n+    public static OptionBuilder withArgName( String name ) {\n+        instance.argName = name;\n         return instance;\n     }\n \n         option.setArgs( numberOfArgs );\n         option.setType( type );\n         option.setValueSeparator( valuesep );\n+        option.setArgName( argName );\n         // reset the OptionBuilder properties\n         instance.reset();\n \n--- a/src/java/org/apache/commons/cli/Options.java\n+++ b/src/java/org/apache/commons/cli/Options.java\n         return Collections.unmodifiableCollection( opts );\n     }\n \n+    /**\n+     * <p>Returns the Options for use by the HelpFormatter.</p>\n+     *\n+     * @return the List of Options\n+     */\n+    List helpOptions() {\n+        return new ArrayList( shortOpts.values() );\n+    }\n+\n     /** <p>Returns the required options as a \n      * <code>java.util.Collection</code>.</p>\n      *\n--- a/src/java/org/apache/commons/cli/Parser.java\n+++ b/src/java/org/apache/commons/cli/Parser.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Parser.java,v 1.5 2002/09/19 22:59:43 jkeyes Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/09/19 22:59:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Parser.java,v 1.6 2002/10/08 21:24:11 jkeyes Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/10/08 21:24:11 $\n  *\n  * ====================================================================\n  *\n  *\n  * @author John Keyes (john at integralsource.com)\n  * @see Parser\n- * @version $Revision: 1.5 $\n+ * @version $Revision: 1.6 $\n  */\n public abstract class Parser implements CommandLineParser {\n \n     }\n \n     public void processArgs( Option opt, ListIterator iter ) \n-    throws ParseException \n-    {\n-        if( !iter.hasNext() && !opt.hasOptionalArg() ) {\n-            throw new MissingArgumentException( \"no argument for:\" + opt.getOpt() );\n-        }\n+    throws ParseException\n+    {\n         // loop until an option is found\n         while( iter.hasNext() ) {\n             String var = (String)iter.next();\n+\n+            // found an Option\n             if( options.hasOption( var ) ) {\n                 iter.previous();\n                 break;\n             }\n-\n-            // its a value\n-            else {\n-                if( !opt.addValue( var ) ) {\n-                    iter.previous();\n-                    break;\n-                }\n-            }\n+            // found a value\n+            else if( !opt.addValue( var ) ) {\n+                iter.previous();\n+                break;\n+            }\n+        }\n+\n+        if( opt.getValues() == null && !opt.hasOptionalArg() ) {\n+            throw new MissingArgumentException( \"no argument for:\" + opt.getOpt() );\n         }\n     }\n \n--- a/src/test/org/apache/commons/cli/BugsTest.java\n+++ b/src/test/org/apache/commons/cli/BugsTest.java\n  * version 1.1, a copy of which has been included with this distribution in\n  * the LICENSE file.\n  * \n- * $Id: BugsTest.java,v 1.7 2002/09/19 22:59:44 jkeyes Exp $\n+ * $Id: BugsTest.java,v 1.8 2002/10/08 21:24:11 jkeyes Exp $\n  */\n \n package org.apache.commons.cli;\n             fail( \"Unexpected exception: \" + exp.getMessage() );\n         }\n     }\n+\n+    public void test13425() {\n+        Options options = new Options();\n+        Option oldpass = OptionBuilder.withLongOpt( \"old-password\" )\n+            .withDescription( \"Use this option to specify the old password\" )\n+            .hasArg()\n+            .create( 'o' );\n+        Option newpass = OptionBuilder.withLongOpt( \"new-password\" )\n+            .withDescription( \"Use this option to specify the new password\" )\n+            .hasArg()\n+            .create( 'n' );\n+\n+        String[] args = { \n+            \"-o\", \n+            \"-n\", \n+            \"newpassword\" \n+        };\n+\n+        options.addOption( oldpass );\n+        options.addOption( newpass );\n+\n+        Parser parser = new PosixParser();\n+\n+        try {\n+            CommandLine line = parser.parse( options, args );\n+        }\n+        // catch the exception and leave the method\n+        catch( Exception exp ) {\n+            assertTrue( exp != null );\n+            return;\n+        }\n+        fail( \"MissingArgumentException not caught.\" );\n+    }\n }", "timestamp": 1034112251, "metainfo": ""}