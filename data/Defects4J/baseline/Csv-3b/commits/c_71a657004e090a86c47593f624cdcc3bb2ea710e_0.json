{"sha": "71a657004e090a86c47593f624cdcc3bb2ea710e", "log": "Where possible: - Add final modifier to private fields - Add final modifier to method parameters - Add final modifier to local variables  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n     }\n \n     @Override\n-    public boolean equals(Object obj)\n+    public boolean equals(final Object obj)\n     {\n         if (this == obj)\n         {\n             return false;\n         }\n \n-        CSVFormat other = (CSVFormat) obj;\n+        final CSVFormat other = (CSVFormat) obj;\n         if (delimiter != other.delimiter)\n         {\n             return false;\n          */\n         @SuppressWarnings(\"synthetic-access\") // TODO fields could be made package-protected\n         // package protected to give access without needing a synthetic accessor\n-        CSVFormatBuilder(CSVFormat format) {\n+        CSVFormatBuilder(final CSVFormat format) {\n             this(format.delimiter, format.quoteChar, format.quotePolicy,\n                     format.commentStart, format.escape,\n                     format.ignoreSurroundingSpaces, format.ignoreEmptyLines,\n--- a/src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java\n     \n     @Test\n     public void testCopiedFormatIsEqualToOriginal() {\n-        CSVFormat copyOfRCF4180 = CSVFormat.newBuilder(RFC4180).build();\n+        final CSVFormat copyOfRCF4180 = CSVFormat.newBuilder(RFC4180).build();\n         assertEquals(RFC4180, copyOfRCF4180);\n     }\n \n     @Test\n     public void testCopiedFormatWithChanges() {\n-        CSVFormat newFormat = CSVFormat.newBuilder(RFC4180).withDelimiter('!').build();\n+        final CSVFormat newFormat = CSVFormat.newBuilder(RFC4180).withDelimiter('!').build();\n         assertTrue(newFormat.getDelimiter() != RFC4180.getDelimiter());\n     }\n     \n     @Test\n     public void testHeaderReferenceCannotEscape() {\n-        String[] header = new String[]{\"one\", \"tow\", \"three\"};\n+        final String[] header = new String[]{\"one\", \"tow\", \"three\"};\n         builder.withHeader(header);\n         \n-        CSVFormat firstFormat = builder.build();\n-        CSVFormat secondFormat = builder.build();\n+        final CSVFormat firstFormat = builder.build();\n+        final CSVFormat secondFormat = builder.build();\n         assertNotSame(header, firstFormat.getHeader());\n         assertNotSame(firstFormat, secondFormat.getHeader());\n     }\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n     \n     @Test\n     public void testEquals() {\n-        CSVFormat right = CSVFormat.DEFAULT;\n-        CSVFormat left = CSVFormat.newBuilder().build();\n+        final CSVFormat right = CSVFormat.DEFAULT;\n+        final CSVFormat left = CSVFormat.newBuilder().build();\n \n         assertFalse(right.equals(null));\n         assertFalse(right.equals(\"A String Instance\"));\n \n     @Test\n     public void testEqualsDelimiter() {\n-        CSVFormat right = CSVFormat.newBuilder('!').build();\n-        CSVFormat left = CSVFormat.newBuilder('?').build();\n+        final CSVFormat right = CSVFormat.newBuilder('!').build();\n+        final CSVFormat left = CSVFormat.newBuilder('?').build();\n \n         assertNotEquals(right, left);\n     }\n \n     @Test\n     public void testEqualsQuoteChar() {\n-        CSVFormat right = CSVFormat.newBuilder('\\'').withQuoteChar('\"').build();\n-        CSVFormat left = CSVFormat.newBuilder(right).withQuoteChar('!').build();\n+        final CSVFormat right = CSVFormat.newBuilder('\\'').withQuoteChar('\"').build();\n+        final CSVFormat left = CSVFormat.newBuilder(right).withQuoteChar('!').build();\n \n         assertNotEquals(right, left);\n     }\n \n     @Test\n     public void testEqualsQuotePolicy() {\n-        CSVFormat right = CSVFormat.newBuilder('\\'')\n-                .withQuoteChar('\"')\n-                .withQuotePolicy(Quote.ALL)\n-                .build();\n-        CSVFormat left = CSVFormat.newBuilder(right)\n+        final CSVFormat right = CSVFormat.newBuilder('\\'')\n+                .withQuoteChar('\"')\n+                .withQuotePolicy(Quote.ALL)\n+                .build();\n+        final CSVFormat left = CSVFormat.newBuilder(right)\n                 .withQuotePolicy(Quote.MINIMAL)\n                 .build();\n \n \n     @Test\n     public void testEqualsCommentStart() {\n-        CSVFormat right = CSVFormat.newBuilder('\\'')\n-                .withQuoteChar('\"')\n-                .withQuotePolicy(Quote.ALL)\n-                .withCommentStart('#')\n-                .build();\n-        CSVFormat left = CSVFormat.newBuilder(right)\n+        final CSVFormat right = CSVFormat.newBuilder('\\'')\n+                .withQuoteChar('\"')\n+                .withQuotePolicy(Quote.ALL)\n+                .withCommentStart('#')\n+                .build();\n+        final CSVFormat left = CSVFormat.newBuilder(right)\n                 .withCommentStart('!')\n                 .build();\n \n \n     @Test\n     public void testEqualsEscape() {\n-        CSVFormat right = CSVFormat.newBuilder('\\'')\n-                .withQuoteChar('\"')\n-                .withQuotePolicy(Quote.ALL)\n-                .withCommentStart('#')\n-                .withEscape('+')\n-                .build();\n-        CSVFormat left = CSVFormat.newBuilder(right)\n+        final CSVFormat right = CSVFormat.newBuilder('\\'')\n+                .withQuoteChar('\"')\n+                .withQuotePolicy(Quote.ALL)\n+                .withCommentStart('#')\n+                .withEscape('+')\n+                .build();\n+        final CSVFormat left = CSVFormat.newBuilder(right)\n                 .withEscape('!')\n                 .build();\n \n \n     @Test\n     public void testEqualsIgnoreSurroundingSpaces() {\n-        CSVFormat right = CSVFormat.newBuilder('\\'')\n-                .withQuoteChar('\"')\n-                .withQuotePolicy(Quote.ALL)\n-                .withCommentStart('#')\n-                .withEscape('+')\n-                .withIgnoreSurroundingSpaces(true)\n-                .build();\n-        CSVFormat left = CSVFormat.newBuilder(right)\n+        final CSVFormat right = CSVFormat.newBuilder('\\'')\n+                .withQuoteChar('\"')\n+                .withQuotePolicy(Quote.ALL)\n+                .withCommentStart('#')\n+                .withEscape('+')\n+                .withIgnoreSurroundingSpaces(true)\n+                .build();\n+        final CSVFormat left = CSVFormat.newBuilder(right)\n                 .withIgnoreSurroundingSpaces(false)\n                 .build();\n \n \n     @Test\n     public void testEqualsIgnoreEmptyLines() {\n-        CSVFormat right = CSVFormat.newBuilder('\\'')\n+        final CSVFormat right = CSVFormat.newBuilder('\\'')\n                 .withQuoteChar('\"')\n                 .withQuotePolicy(Quote.ALL)\n                 .withCommentStart('#')\n                 .withIgnoreSurroundingSpaces(true)\n                 .withIgnoreEmptyLines(true)\n                 .build();\n-        CSVFormat left = CSVFormat.newBuilder(right)\n+        final CSVFormat left = CSVFormat.newBuilder(right)\n                 .withIgnoreEmptyLines(false)\n                 .build();\n \n \n     @Test\n     public void testEqualsRecordSeparator() {\n-        CSVFormat right = CSVFormat.newBuilder('\\'')\n+        final CSVFormat right = CSVFormat.newBuilder('\\'')\n                 .withQuoteChar('\"')\n                 .withQuotePolicy(Quote.ALL)\n                 .withCommentStart('#')\n                 .withIgnoreEmptyLines(true)\n                 .withRecordSeparator('*')\n                 .build();\n-        CSVFormat left = CSVFormat.newBuilder(right)\n+        final CSVFormat left = CSVFormat.newBuilder(right)\n                 .withRecordSeparator('!')\n                 .build();\n \n \n     @Test\n     public void testEqualsHeader() {\n-        CSVFormat right = CSVFormat.newBuilder('\\'')\n+        final CSVFormat right = CSVFormat.newBuilder('\\'')\n                 .withQuoteChar('\"')\n                 .withQuotePolicy(Quote.ALL)\n                 .withCommentStart('#')\n                 .withRecordSeparator('*')\n                 .withHeader(\"One\", \"Two\", \"Three\")\n                 .build();\n-        CSVFormat left = CSVFormat.newBuilder(right)\n+        final CSVFormat left = CSVFormat.newBuilder(right)\n                 .withHeader(\"Three\", \"Two\", \"One\")\n                 .build();\n         \n         assertNotEquals(right, left);\n     }\n \n-    private static void assertNotEquals(Object right, Object left) {\n+    private static void assertNotEquals(final Object right, final Object left) {\n         assertFalse(right.equals(left));\n         assertFalse(left.equals(right));\n     }", "timestamp": 1357581646, "metainfo": ""}