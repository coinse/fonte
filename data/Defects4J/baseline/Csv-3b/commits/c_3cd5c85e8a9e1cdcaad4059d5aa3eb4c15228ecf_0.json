{"sha": "3cd5c85e8a9e1cdcaad4059d5aa3eb4c15228ecf", "log": "[CVS-92] Need a way to extract parsed headers, e.g. for use in formatting output.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n \n package org.apache.commons.csv;\n \n+import static org.apache.commons.csv.Token.Type.TOKEN;\n+\n import java.io.IOException;\n import java.io.Reader;\n import java.io.StringReader;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.NoSuchElementException;\n-\n-import static org.apache.commons.csv.Token.Type.*;\n \n /**\n  * Parses CSV files according to the specified configuration.\n      */\n     public CSVParser(String input, CSVFormat format) throws IOException {\n         this(new StringReader(input), format);\n+    }\n+\n+    /**\n+     * Returns a copy of the header map that iterates in column order.\n+     * <p>\n+     * The map keys are column names.\n+     * The map values are 0-based indices.\n+     *\n+     * @return a copy of the header map that iterates in column order.\n+     */\n+    public Map<String, Integer> getHeaderMap() {\n+        return new LinkedHashMap<String, Integer>(headerMap);\n     }\n \n     /**\n     private Map<String, Integer> initializeHeader(CSVFormat format) throws IOException {\n         Map<String, Integer> hdrMap = null;\n         if (format.getHeader() != null) {\n-            hdrMap = new HashMap<String, Integer>();\n+            hdrMap = new LinkedHashMap<String, Integer>();\n \n             String[] header = null;\n             if (format.getHeader().length == 0) {\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n import java.util.NoSuchElementException;\n+\n+import junit.framework.Assert;\n \n import org.junit.Ignore;\n import org.junit.Test;\n         assertFalse(records.hasNext());\n     }\n \n+    public void testGetHeaderMap() throws Exception {\n+        final CSVParser parser = new CSVParser(\"a,b,c\\n1,2,3\\nx,y,z\", CSVFormat.DEFAULT.withHeader(\"A\", \"B\", \"C\"));\n+        final Map<String, Integer> headerMap = parser.getHeaderMap();\n+        final Iterator<String> columnNames = headerMap.keySet().iterator();\n+        // Headers are iterated in column order.\n+        Assert.assertEquals(\"A\", columnNames.next());\n+        Assert.assertEquals(\"B\", columnNames.next());\n+        Assert.assertEquals(\"C\", columnNames.next());\n+        Iterator<CSVRecord> records = parser.iterator();\n+        \n+        // Parse to make sure getHeaderMap did not have a side-effect.\n+        for (int i = 0; i < 3; i++) {\n+            assertTrue(records.hasNext());\n+            CSVRecord record = records.next();\n+            assertEquals(record.get(0), record.get(\"A\"));\n+            assertEquals(record.get(1), record.get(\"B\"));\n+            assertEquals(record.get(2), record.get(\"C\"));\n+        }\n+\n+        assertFalse(records.hasNext());\n+    }\n+\n     @Test\n     public void testGetLineNumberWithLF() throws Exception {\n         CSVParser parser = new CSVParser(\"a\\nb\\nc\", CSVFormat.DEFAULT.withLineSeparator(\"\\n\"));", "timestamp": 1347457266, "metainfo": ""}