{"sha": "daf984983bc695591965f2126e0ef641005fe347", "log": "[CSV-52] Keep track of record numbers.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n \n     private final Lexer lexer;\n     private final Map<String, Integer> headerMap;\n+    private long recordNumber;\n \n     // the following objects are shared to reduce garbage\n \n     /**\n      * Returns the current line number in the input stream.\n      * <p/>\n-     * ATTENTION: If your CSV input has multiline-values, the returned number does not correspond to the record-number.\n+     * ATTENTION: If your CSV input has multi-line values, the returned number does not correspond to the record number.\n      *\n      * @return current line number\n      */\n     public int getLineNumber() {\n         return lexer.getLineNumber();\n+    }\n+\n+    /**\n+     * Returns the current record number in the input stream.\n+     * <p/>\n+     * ATTENTION: If your CSV input has multi-line values, the returned number does not correspond to the line number.\n+     *\n+     * @return current line number\n+     */\n+    public long getRecordNumber() {\n+        return recordNumber;\n     }\n \n     /**\n      *             on parse error or input read-failure\n      */\n     CSVRecord getRecord() throws IOException {\n-        CSVRecord result = new CSVRecord(null, headerMap, null);\n+        CSVRecord result = new CSVRecord(null, headerMap, null, recordNumber + 1);\n         record.clear();\n         StringBuilder sb = null;\n         do {\n         } while (reusableToken.type == TOKEN);\n \n         if (!record.isEmpty()) {\n+            recordNumber++;\n             final String comment = sb == null ? null : sb.toString();\n-            result = new CSVRecord(record.toArray(new String[record.size()]), headerMap, comment);\n+            result = new CSVRecord(record.toArray(new String[record.size()]), headerMap, comment, this.recordNumber);\n         }\n         return result;\n     }\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n \n     /** The accumulated comments (if any) */\n     private final String comment;\n+    \n+    /** The record number. */\n+    private final long recordNumber;\n \n-    CSVRecord(final String[] values, final Map<String, Integer> mapping, final String comment) {\n+    CSVRecord(final String[] values, final Map<String, Integer> mapping, final String comment, long recordNumber) {\n+        this.recordNumber = recordNumber;\n         this.values = values != null ? values : EMPTY_STRING_ARRAY;\n         this.mapping = mapping;\n         this.comment = comment;\n         return comment;\n     }\n \n+    public long getRecordNumber() {\n+        return recordNumber;\n+    }\n+\n     /**\n      * Returns the number of values in this record.\n      */\n     public String toString() {\n         return Arrays.toString(values);\n     }\n+\n }\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n package org.apache.commons.csv;\n \n import static org.apache.commons.csv.Constants.CRLF;\n+import static org.apache.commons.csv.Constants.CR;\n import static org.apache.commons.csv.Constants.LF;\n import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n \n     @Test\n     public void testGetLineNumberWithLF() throws Exception {\n-        final CSVParser parser = new CSVParser(\"a\\nb\\nc\", CSVFormat.DEFAULT.withLineSeparator(LF));\n-\n+        validateLineNumbers(String.valueOf(LF));\n+    }\n+\n+    @Test\n+    public void testGetLineNumberWithCRLF() throws Exception {\n+        validateLineNumbers(CRLF);\n+    }\n+\n+    @Test\n+    public void testGetLineNumberWithCR() throws Exception {\n+        validateLineNumbers(String.valueOf(CR));\n+    }\n+    \n+    @Test\n+    public void testGetRecordNumberWithLF() throws Exception {\n+        validateRecordNumbers(String.valueOf(LF));\n+    }\n+\n+    @Test\n+    public void testGetRecordWithMultiiLineValues() throws Exception {\n+        final CSVParser parser = new CSVParser(\"\\\"a\\r\\n1\\\",\\\"a\\r\\n2\\\"\" + CRLF + \"\\\"b\\r\\n1\\\",\\\"b\\r\\n2\\\"\" + CRLF + \"\\\"c\\r\\n1\\\",\\\"c\\r\\n2\\\"\",\n+                CSVFormat.DEFAULT.withLineSeparator(CRLF));\n+        CSVRecord record;\n+        assertEquals(0, parser.getRecordNumber());\n+        assertEquals(0, parser.getLineNumber());\n+        assertNotNull(record = parser.getRecord());\n+        assertEquals(3, parser.getLineNumber());\n+        assertEquals(1, record.getRecordNumber());\n+        assertEquals(1, parser.getRecordNumber());\n+        assertNotNull(record = parser.getRecord());\n+        assertEquals(6, parser.getLineNumber());\n+        assertEquals(2, record.getRecordNumber());\n+        assertEquals(2, parser.getRecordNumber());\n+        assertNotNull(record = parser.getRecord());\n+        assertEquals(8, parser.getLineNumber());\n+        assertEquals(3, record.getRecordNumber());\n+        assertEquals(3, parser.getRecordNumber());\n+        assertNull(record = parser.getRecord());\n+        assertEquals(8, parser.getLineNumber());\n+        assertEquals(3, parser.getRecordNumber());\n+    }\n+\n+    @Test\n+    public void testGetRecordNumberWithCRLF() throws Exception {\n+        validateRecordNumbers(CRLF);\n+    }\n+\n+    @Test\n+    public void testGetRecordNumberWithCR() throws Exception {\n+        validateRecordNumbers(String.valueOf(CR));\n+    }\n+\n+    private void validateRecordNumbers(String lineSeparator) throws IOException {\n+        final CSVParser parser = new CSVParser(\"a\" + lineSeparator + \"b\" + lineSeparator + \"c\", CSVFormat.DEFAULT.withLineSeparator(lineSeparator));\n+        CSVRecord record;\n+        assertEquals(0, parser.getRecordNumber());\n+        assertNotNull(record = parser.getRecord());\n+        assertEquals(1, record.getRecordNumber());        \n+        assertEquals(1, parser.getRecordNumber());\n+        assertNotNull(record = parser.getRecord());\n+        assertEquals(2, record.getRecordNumber());        \n+        assertEquals(2, parser.getRecordNumber());\n+        assertNotNull(record = parser.getRecord());\n+        assertEquals(3, record.getRecordNumber());        \n+        assertEquals(3, parser.getRecordNumber());\n+        assertNull(record = parser.getRecord());\n+        assertEquals(3, parser.getRecordNumber());\n+    }\n+\n+    private void validateLineNumbers(String lineSeparator) throws IOException {\n+        final CSVParser parser = new CSVParser(\"a\" + lineSeparator + \"b\" + lineSeparator + \"c\", CSVFormat.DEFAULT.withLineSeparator(lineSeparator));\n         assertEquals(0, parser.getLineNumber());\n         assertNotNull(parser.getRecord());\n         assertEquals(1, parser.getLineNumber());\n         assertNotNull(parser.getRecord());\n         assertEquals(2, parser.getLineNumber());\n         assertNotNull(parser.getRecord());\n+        // Still 2 because the last line is does not have EOL chars\n         assertEquals(2, parser.getLineNumber());\n         assertNull(parser.getRecord());\n-    }\n-\n-    @Test\n-    public void testGetLineNumberWithCRLF() throws Exception {\n-        final CSVParser parser = new CSVParser(\"a\\r\\nb\\r\\nc\", CSVFormat.DEFAULT.withLineSeparator(CRLF));\n-\n-        assertEquals(0, parser.getLineNumber());\n-        assertNotNull(parser.getRecord());\n-        assertEquals(1, parser.getLineNumber());\n-        assertNotNull(parser.getRecord());\n+        // Still 2 because the last line is does not have EOL chars\n         assertEquals(2, parser.getLineNumber());\n-        assertNotNull(parser.getRecord());\n-        assertEquals(2, parser.getLineNumber());\n-        assertNull(parser.getRecord());\n-    }\n-\n-    @Test\n-    public void testGetLineNumberWithCR() throws Exception {\n-        final CSVParser parser = new CSVParser(\"a\\rb\\rc\", CSVFormat.DEFAULT.withLineSeparator(\"\\r\"));\n-\n-        assertEquals(0, parser.getLineNumber());\n-        assertNotNull(parser.getRecord());\n-        assertEquals(1, parser.getLineNumber());\n-        assertNotNull(parser.getRecord());\n-        assertEquals(2, parser.getLineNumber());\n-        assertNotNull(parser.getRecord());\n-        assertEquals(2, parser.getLineNumber());\n-        assertNull(parser.getRecord());\n-    }\n+    }\n+\n }", "timestamp": 1350148188, "metainfo": ""}