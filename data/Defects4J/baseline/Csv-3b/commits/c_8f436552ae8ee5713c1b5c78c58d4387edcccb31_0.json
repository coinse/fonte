{"sha": "8f436552ae8ee5713c1b5c78c58d4387edcccb31", "log": "[CSV-96] CSVRecord does not verify that the length of the header mapping matches the number of values.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n     }\n \n     /**\n+     * Returns true if this record is consistent, false if not. Currently, the only check is matching the record size to\n+     * the header size. Some programs can export files that fails this test but still produce parsable files.\n+     * \n+     * @return true of this record is valid, false if not\n+     * @see CSVParserTest#org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()\n+     */\n+    public boolean isConsistent() {\n+        return mapping == null ? true : mapping.size() == values.length;\n+    }\n+    \n+    /**\n      * Checks whether a given column is mapped.\n      *\n      * @param name\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n         assertEquals(\"a\", record.get(\"A\"));\n         assertEquals(\"b\", record.get(\"B\"));\n         assertEquals(\"c\", record.get(\"C\"));\n+        assertTrue(record.isConsistent());\n \n         // 1st record\n         record = records.next();\n         assertFalse(record.isSet(\"C\"));\n         assertEquals(\"1\", record.get(\"A\"));\n         assertEquals(\"2\", record.get(\"B\"));\n+        assertFalse(record.isConsistent());\n \n         // 2nd record\n         record = records.next();\n         assertEquals(\"x\", record.get(\"A\"));\n         assertEquals(\"y\", record.get(\"B\"));\n         assertEquals(\"z\", record.get(\"C\"));\n+        assertTrue(record.isConsistent());\n \n         assertFalse(records.hasNext());\n     }", "timestamp": 1364480636, "metainfo": ""}