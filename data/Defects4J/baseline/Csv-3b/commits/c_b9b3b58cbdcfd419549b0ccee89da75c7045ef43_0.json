{"sha": "b9b3b58cbdcfd419549b0ccee89da75c7045ef43", "log": "Sort members.  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n \n public class CSVPrinterTest {\n \n+    public static String printable(final String s) {\n+        final StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < s.length(); i++) {\n+            final char ch = s.charAt(i);\n+            if (ch <= ' ' || ch >= 128) {\n+                sb.append(\"(\").append((int) ch).append(\")\");\n+            } else {\n+                sb.append(ch);\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n     String lineSeparator = CSVFormat.DEFAULT.getLineSeparator();\n \n-    @Test\n-    public void testPrinter1() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n+    public void doOneRandom(final CSVFormat format) throws Exception {\n+        final Random r = new Random();\n+\n+        final int nLines = r.nextInt(4) + 1;\n+        final int nCol = r.nextInt(3) + 1;\n+        // nLines=1;nCol=2;\n+        final String[][] lines = new String[nLines][];\n+        for (int i = 0; i < nLines; i++) {\n+            final String[] line = new String[nCol];\n+            lines[i] = line;\n+            for (int j = 0; j < nCol; j++) {\n+                line[j] = randStr();\n+            }\n+        }\n+\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, format);\n+\n+        for (int i = 0; i < nLines; i++) {\n+            // for (int j=0; j<lines[i].length; j++) System.out.println(\"### VALUE=:\" + printable(lines[i][j]));\n+            printer.printRecord(lines[i]);\n+        }\n+\n+        printer.flush();\n+        final String result = sw.toString();\n+        // System.out.println(\"### :\" + printable(result));\n+\n+        final CSVParser parser = new CSVParser(result, format);\n+        final List<CSVRecord> parseResult = parser.getRecords();\n+\n+        Utils.compare(\"Printer output :\" + printable(result), lines, parseResult);\n+    }\n+\n+    public void doRandom(final CSVFormat format, final int iter) throws Exception {\n+        for (int i = 0; i < iter; i++) {\n+            doOneRandom(format);\n+        }\n+    }\n+\n+    public String randStr() {\n+        final Random r = new Random();\n+\n+        final int sz = r.nextInt(20);\n+        // sz = r.nextInt(3);\n+        final char[] buf = new char[sz];\n+        for (int i = 0; i < sz; i++) {\n+            // stick in special chars with greater frequency\n+            char ch;\n+            final int what = r.nextInt(20);\n+            switch (what) {\n+                case 0:\n+                    ch = '\\r';\n+                    break;\n+                case 1:\n+                    ch = '\\n';\n+                    break;\n+                case 2:\n+                    ch = '\\t';\n+                    break;\n+                case 3:\n+                    ch = '\\f';\n+                    break;\n+                case 4:\n+                    ch = ' ';\n+                    break;\n+                case 5:\n+                    ch = ',';\n+                    break;\n+                case 6:\n+                    ch = '\"';\n+                    break;\n+                case 7:\n+                    ch = '\\'';\n+                    break;\n+                case 8:\n+                    ch = '\\\\';\n+                    break;\n+                default:\n+                    ch = (char) r.nextInt(300);\n+                    break;\n+                // default: ch = 'a'; break;\n+            }\n+            buf[i] = ch;\n+        }\n+        return new String(buf);\n+    }\n+\n+    @Test\n+    public void testDisabledComment() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n+        printer.printComment(\"This is a comment\");\n+\n+        assertEquals(\"\", sw.toString());\n+    }\n+\n+    @Test\n+    public void testExcelPrintAllArrayOfArrays() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n+        printer.printRecords(new String[][] { { \"r1c1\", \"r1c2\" }, { \"r2c1\", \"r2c2\" } });\n+        assertEquals(\"r1c1,r1c2\" + lineSeparator + \"r2c1,r2c2\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n+    public void testExcelPrintAllArrayOfLists() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n+        printer.printRecords(new List[] { Arrays.asList(new String[] { \"r1c1\", \"r1c2\" }), Arrays.asList(new String[] { \"r2c1\", \"r2c2\" }) });\n+        assertEquals(\"r1c1,r1c2\" + lineSeparator + \"r2c1,r2c2\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n+    public void testExcelPrintAllIterableOfArrays() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n+        printer.printRecords(Arrays.asList(new String[][] { { \"r1c1\", \"r1c2\" }, { \"r2c1\", \"r2c2\" } }));\n+        assertEquals(\"r1c1,r1c2\" + lineSeparator + \"r2c1,r2c2\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n+    public void testExcelPrintAllIterableOfLists() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n+        printer.printRecords(Arrays.asList(new List[] { Arrays.asList(new String[] { \"r1c1\", \"r1c2\" }),\n+                Arrays.asList(new String[] { \"r2c1\", \"r2c2\" }) }));\n+        assertEquals(\"r1c1,r1c2\" + lineSeparator + \"r2c1,r2c2\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n+    public void testExcelPrinter1() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n         printer.printRecord(\"a\", \"b\");\n         assertEquals(\"a,b\" + lineSeparator, sw.toString());\n     }\n \n     @Test\n-    public void testPrinter2() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n+    public void testExcelPrinter2() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n         printer.printRecord(\"a,b\", \"b\");\n         assertEquals(\"\\\"a,b\\\",b\" + lineSeparator, sw.toString());\n-    }\n-\n-    @Test\n-    public void testPrinter3() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n-        printer.printRecord(\"a, b\", \"b \");\n-        assertEquals(\"\\\"a, b\\\",\\\"b \\\"\" + lineSeparator, sw.toString());\n-    }\n-\n-    @Test\n-    public void testPrinter4() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n-        printer.printRecord(\"a\", \"b\\\"c\");\n-        assertEquals(\"a,\\\"b\\\"\\\"c\\\"\" + lineSeparator, sw.toString());\n-    }\n-\n-    @Test\n-    public void testPrinter5() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n-        printer.printRecord(\"a\", \"b\\nc\");\n-        assertEquals(\"a,\\\"b\\nc\\\"\" + lineSeparator, sw.toString());\n-    }\n-\n-    @Test\n-    public void testQuoteAll() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuotePolicy(Quote.ALL));\n-        printer.printRecord(\"a\", \"b\\nc\", \"d\");\n-        assertEquals(\"\\\"a\\\",\\\"b\\nc\\\",\\\"d\\\"\" + lineSeparator, sw.toString());\n-    }\n-\n-    @Test\n-    public void testPrinter6() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n-        printer.printRecord(\"a\", \"b\\r\\nc\");\n-        assertEquals(\"a,\\\"b\\r\\nc\\\"\" + lineSeparator, sw.toString());\n     }\n \n     @Test\n     }\n \n     @Test\n+    public void testMultiLineComment() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withCommentStart('#'));\n+        printer.printComment(\"This is a comment\\non multiple lines\");\n+\n+        assertEquals(\"# This is a comment\" + lineSeparator + \"# on multiple lines\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n+    public void testPrinter1() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n+        printer.printRecord(\"a\", \"b\");\n+        assertEquals(\"a,b\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n+    public void testPrinter2() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n+        printer.printRecord(\"a,b\", \"b\");\n+        assertEquals(\"\\\"a,b\\\",b\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n+    public void testPrinter3() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n+        printer.printRecord(\"a, b\", \"b \");\n+        assertEquals(\"\\\"a, b\\\",\\\"b \\\"\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n+    public void testPrinter4() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n+        printer.printRecord(\"a\", \"b\\\"c\");\n+        assertEquals(\"a,\\\"b\\\"\\\"c\\\"\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n+    public void testPrinter5() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n+        printer.printRecord(\"a\", \"b\\nc\");\n+        assertEquals(\"a,\\\"b\\nc\\\"\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n+    public void testPrinter6() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n+        printer.printRecord(\"a\", \"b\\r\\nc\");\n+        assertEquals(\"a,\\\"b\\r\\nc\\\"\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n     public void testPrinter7() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n     }\n \n     @Test\n-    public void testExcelPrintAllArrayOfArrays() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n-        printer.printRecords(new String[][] { { \"r1c1\", \"r1c2\" }, { \"r2c1\", \"r2c2\" } });\n-        assertEquals(\"r1c1,r1c2\" + lineSeparator + \"r2c1,r2c2\" + lineSeparator, sw.toString());\n-    }\n-\n-    @Test\n-    public void testExcelPrintAllArrayOfLists() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n-        printer.printRecords(new List[] { Arrays.asList(new String[] { \"r1c1\", \"r1c2\" }), Arrays.asList(new String[] { \"r2c1\", \"r2c2\" }) });\n-        assertEquals(\"r1c1,r1c2\" + lineSeparator + \"r2c1,r2c2\" + lineSeparator, sw.toString());\n-    }\n-\n-    @Test\n-    public void testExcelPrintAllIterableOfLists() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n-        printer.printRecords(Arrays.asList(new List[] { Arrays.asList(new String[] { \"r1c1\", \"r1c2\" }),\n-                Arrays.asList(new String[] { \"r2c1\", \"r2c2\" }) }));\n-        assertEquals(\"r1c1,r1c2\" + lineSeparator + \"r2c1,r2c2\" + lineSeparator, sw.toString());\n-    }\n-\n-    @Test\n-    public void testExcelPrintAllIterableOfArrays() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n-        printer.printRecords(Arrays.asList(new String[][] { { \"r1c1\", \"r1c2\" }, { \"r2c1\", \"r2c2\" } }));\n-        assertEquals(\"r1c1,r1c2\" + lineSeparator + \"r2c1,r2c2\" + lineSeparator, sw.toString());\n-    }\n-\n-    @Test\n-    public void testExcelPrinter1() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n-        printer.printRecord(\"a\", \"b\");\n-        assertEquals(\"a,b\" + lineSeparator, sw.toString());\n-    }\n-\n-    @Test\n-    public void testExcelPrinter2() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n-        printer.printRecord(\"a,b\", \"b\");\n-        assertEquals(\"\\\"a,b\\\",b\" + lineSeparator, sw.toString());\n-    }\n-\n-    @Test\n     public void testPrintNullValues() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n     }\n \n     @Test\n-    public void testDisabledComment() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n-        printer.printComment(\"This is a comment\");\n-\n-        assertEquals(\"\", sw.toString());\n-    }\n-\n-    @Test\n-    public void testSingleLineComment() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withCommentStart('#'));\n-        printer.printComment(\"This is a comment\");\n-\n-        assertEquals(\"# This is a comment\" + lineSeparator, sw.toString());\n-    }\n-\n-    @Test\n-    public void testMultiLineComment() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withCommentStart('#'));\n-        printer.printComment(\"This is a comment\\non multiple lines\");\n-\n-        assertEquals(\"# This is a comment\" + lineSeparator + \"# on multiple lines\" + lineSeparator, sw.toString());\n+    public void testQuoteAll() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuotePolicy(Quote.ALL));\n+        printer.printRecord(\"a\", \"b\\nc\", \"d\");\n+        assertEquals(\"\\\"a\\\",\\\"b\\nc\\\",\\\"d\\\"\" + lineSeparator, sw.toString());\n     }\n \n     @Test\n         doRandom(CSVFormat.MYSQL, iter);\n     }\n \n-    public void doRandom(final CSVFormat format, final int iter) throws Exception {\n-        for (int i = 0; i < iter; i++) {\n-            doOneRandom(format);\n-        }\n-    }\n-\n-    public void doOneRandom(final CSVFormat format) throws Exception {\n-        final Random r = new Random();\n-\n-        final int nLines = r.nextInt(4) + 1;\n-        final int nCol = r.nextInt(3) + 1;\n-        // nLines=1;nCol=2;\n-        final String[][] lines = new String[nLines][];\n-        for (int i = 0; i < nLines; i++) {\n-            final String[] line = new String[nCol];\n-            lines[i] = line;\n-            for (int j = 0; j < nCol; j++) {\n-                line[j] = randStr();\n-            }\n-        }\n-\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, format);\n-\n-        for (int i = 0; i < nLines; i++) {\n-            // for (int j=0; j<lines[i].length; j++) System.out.println(\"### VALUE=:\" + printable(lines[i][j]));\n-            printer.printRecord(lines[i]);\n-        }\n-\n-        printer.flush();\n-        final String result = sw.toString();\n-        // System.out.println(\"### :\" + printable(result));\n-\n-        final CSVParser parser = new CSVParser(result, format);\n-        final List<CSVRecord> parseResult = parser.getRecords();\n-\n-        Utils.compare(\"Printer output :\" + printable(result), lines, parseResult);\n-    }\n-\n-    public static String printable(final String s) {\n-        final StringBuilder sb = new StringBuilder();\n-        for (int i = 0; i < s.length(); i++) {\n-            final char ch = s.charAt(i);\n-            if (ch <= ' ' || ch >= 128) {\n-                sb.append(\"(\").append((int) ch).append(\")\");\n-            } else {\n-                sb.append(ch);\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    public String randStr() {\n-        final Random r = new Random();\n-\n-        final int sz = r.nextInt(20);\n-        // sz = r.nextInt(3);\n-        final char[] buf = new char[sz];\n-        for (int i = 0; i < sz; i++) {\n-            // stick in special chars with greater frequency\n-            char ch;\n-            final int what = r.nextInt(20);\n-            switch (what) {\n-                case 0:\n-                    ch = '\\r';\n-                    break;\n-                case 1:\n-                    ch = '\\n';\n-                    break;\n-                case 2:\n-                    ch = '\\t';\n-                    break;\n-                case 3:\n-                    ch = '\\f';\n-                    break;\n-                case 4:\n-                    ch = ' ';\n-                    break;\n-                case 5:\n-                    ch = ',';\n-                    break;\n-                case 6:\n-                    ch = '\"';\n-                    break;\n-                case 7:\n-                    ch = '\\'';\n-                    break;\n-                case 8:\n-                    ch = '\\\\';\n-                    break;\n-                default:\n-                    ch = (char) r.nextInt(300);\n-                    break;\n-                // default: ch = 'a'; break;\n-            }\n-            buf[i] = ch;\n-        }\n-        return new String(buf);\n+    @Test\n+    public void testSingleLineComment() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withCommentStart('#'));\n+        printer.printComment(\"This is a comment\");\n+\n+        assertEquals(\"# This is a comment\" + lineSeparator, sw.toString());\n     }\n \n }", "timestamp": 1350248575, "metainfo": ""}