{"sha": "75b9a4ba4ed34eed0afe0a6c3b8a79979685a379", "log": "[CSV-97] Allow the String value for null to be customized for the CSV printer.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n         private boolean ignoreSurroundingSpaces; // Should leading/trailing spaces be ignored around values?\n         private boolean ignoreEmptyLines;\n         private String recordSeparator; // for outputs\n+        private String nullToString; // for outputs\n         private String[] header;\n \n         /**\n          */\n         // package protected to give access without needing a synthetic accessor\n         CSVFormatBuilder(final char delimiter){\n-            this(delimiter, null, null, null, null, false, false, null, null);\n+            this(delimiter, null, null, null, null, false, false, null, Constants.EMPTY, null);\n         }\n \n         /**\n          *            <tt>true</tt> when whitespaces enclosing values should be ignored\n          * @param ignoreEmptyLines\n          *            <tt>true</tt> when the parser should skip empty lines\n+         * @param nullToString TODO\n+         * @param header\n+         *            the header\n          * @param recordSeparator\n          *            the line separator to use for output\n-         * @param header\n-         *            the header\n          * @throws IllegalArgumentException if the delimiter is a line break character\n          */\n         // package protected for use by test code\n                 final Quote quotePolicy, final Character commentStart,\n                 final Character escape, final boolean ignoreSurroundingSpaces,\n                 final boolean ignoreEmptyLines, final String lineSeparator,\n-                final String[] header) {\n+                String nullToString, final String[] header) {\n             if (isLineBreak(delimiter)) {\n                 throw new IllegalArgumentException(\"The delimiter cannot be a line break\");\n             }\n             this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\n             this.ignoreEmptyLines = ignoreEmptyLines;\n             this.recordSeparator = lineSeparator;\n+            this.nullToString = nullToString;\n             this.header = header;\n         }\n \n             this(format.delimiter, format.quoteChar, format.quotePolicy,\n                     format.commentStart, format.escape,\n                     format.ignoreSurroundingSpaces, format.ignoreEmptyLines,\n-                    format.recordSeparator, format.header);\n+                    format.recordSeparator, format.nullToString, format.header);\n         }\n \n         /**\n         public CSVFormat build() {\n             validate();\n             return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n-                                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, header);\n+                                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullToString, header);\n         }\n \n         /**\n          */\n         public CSVFormatBuilder withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\n             this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the String to use for null values for output.\n+         *\n+         * @param nullToString\n+         *            the String to use for null values for output.\n+         *\n+         * @return This builder with the the specified output record separator\n+         */\n+        public CSVFormatBuilder withNullToString(final String nullToString) {\n+            this.nullToString = nullToString;\n             return this;\n         }\n \n      * @return a standard comma separated format builder, as for {@link #RFC4180} but allowing empty lines.\n      */\n     public static CSVFormatBuilder newBuilder() {\n-        return new CSVFormatBuilder(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF, null);\n+        return new CSVFormatBuilder(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF, Constants.EMPTY, \n+                null);\n     }\n     private final char delimiter;\n     private final Character quoteChar;\n     private final Character commentStart;\n     private final Character escape;\n     private final boolean ignoreSurroundingSpaces; // Should leading/trailing spaces be ignored around values?\n-\n     private final boolean ignoreEmptyLines;\n \n     private final String recordSeparator; // for outputs\n+\n+    private final String nullToString; // for outputs\n \n     private final String[] header;\n \n      *            <tt>true</tt> when the parser should skip empty lines\n      * @param recordSeparator\n      *            the line separator to use for output\n+     * @param nullToString TODO\n      * @param header\n      *            the header\n      * @throws IllegalArgumentException if the delimiter is a line break character\n             final Quote quotePolicy, final Character commentStart,\n             final Character escape, final boolean ignoreSurroundingSpaces,\n             final boolean ignoreEmptyLines, final String recordSeparator,\n-            final String[] header) {\n+            String nullToString, final String[] header) {\n         if (isLineBreak(delimiter)) {\n             throw new IllegalArgumentException(\"The delimiter cannot be a line break\");\n         }\n         this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\n         this.ignoreEmptyLines = ignoreEmptyLines;\n         this.recordSeparator = recordSeparator;\n+        this.nullToString = nullToString;\n         this.header = header == null ? null : header.clone();\n     }\n \n      */\n     public boolean getIgnoreSurroundingSpaces() {\n         return ignoreSurroundingSpaces;\n+    }\n+\n+    /**\n+     * Returns the value to use for writing null values.\n+     *\n+     * @return the value to use for writing null values.\n+     */\n+    public String getNullToString() {\n+        return nullToString;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n  * specification of a {@link CSVFormat}.\n  *\n  * <p>\n- * To parse a CSV input with tabs as separators, '\"' (double-quote) as an optional value encapsulator, \n+ * To parse a CSV input with tabs as separators, '\"' (double-quote) as an optional value encapsulator,\n  * and comments starting with '#', you write:\n  * </p>\n  *\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n \n     /**\n      * Outputs the line separator.\n-     * \n+     *\n      * @throws IOException\n      *             If an I/O error occurs\n      */\n      */\n     public void print(final Object value) throws IOException {\n         // null values are considered empty\n-        final String strValue = value == null ? EMPTY : value.toString();\n+        final String strValue = value == null ? format.getNullToString() : value.toString();\n         print(value, strValue, 0, strValue.length());\n     }\n \n--- a/src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java\n \n     @Before\n     public void setUp() throws Exception {\n-        builder = new CSVFormatBuilder('+', Character.valueOf('!'), null, Character.valueOf('#'), Character.valueOf('!'), true, true, CRLF, null);\n+        builder = new CSVFormatBuilder('+', Character.valueOf('!'), null, Character.valueOf('#'), Character.valueOf('!'), true, true, CRLF, Constants.EMPTY, null);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n     }\n \n     @Test\n+    public void testPrintCustomNullValues() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.toBuilder().withNullToString(\"NULL\").build());\n+        printer.printRecord(\"a\", null, \"b\");\n+        assertEquals(\"a,NULL,b\" + recordSeparator, sw.toString());\n+        printer.close();\n+    }\n+\n+    @Test\n     public void testQuoteAll() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.newBuilder().withQuotePolicy(Quote.ALL).build());", "timestamp": 1365453289, "metainfo": ""}