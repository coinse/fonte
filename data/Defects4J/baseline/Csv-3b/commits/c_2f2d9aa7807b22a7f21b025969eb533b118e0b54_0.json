{"sha": "2f2d9aa7807b22a7f21b025969eb533b118e0b54", "log": "Implement Quote.ALL. Bullet-proof a unit test.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n         final char delimChar = format.getDelimiter();\n         final char quoteChar = format.getQuoteChar();\n \n-        if (len <= 0) {\n-            // always quote an empty token that is the first\n-            // on the line, as it may be the only thing on the\n-            // line. If it were not quoted in that case,\n-            // an empty line has no tokens.\n-            if (first) {\n-                quote = true;\n-            }\n+        if (format.getQuotePolicy() == Quote.ALL) {\n+            quote = true;\n         } else {\n-            char c = value.charAt(pos);\n-\n-            // Hmmm, where did this rule come from?\n-            if (first && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\n-                quote = true;\n-                // } else if (c == ' ' || c == '\\f' || c == '\\t') {\n-            } else if (c <= COMMENT) {\n-                // Some other chars at the start of a value caused the parser to fail, so for now\n-                // encapsulate if we start in anything less than '#'. We are being conservative\n-                // by including the default comment char too.\n-                quote = true;\n+            if (len <= 0) {\n+                // always quote an empty token that is the first\n+                // on the line, as it may be the only thing on the\n+                // line. If it were not quoted in that case,\n+                // an empty line has no tokens.\n+                if (first) {\n+                    quote = true;\n+                }\n             } else {\n-                while (pos < end) {\n-                    c = value.charAt(pos);\n-                    if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n-                        quote = true;\n-                        break;\n+                char c = value.charAt(pos);\n+\n+                // Hmmm, where did this rule come from?\n+                if (first && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\n+                    quote = true;\n+                    // } else if (c == ' ' || c == '\\f' || c == '\\t') {\n+                } else if (c <= COMMENT) {\n+                    // Some other chars at the start of a value caused the parser to fail, so for now\n+                    // encapsulate if we start in anything less than '#'. We are being conservative\n+                    // by including the default comment char too.\n+                    quote = true;\n+                } else {\n+                    while (pos < end) {\n+                        c = value.charAt(pos);\n+                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n+                            quote = true;\n+                            break;\n+                        }\n+                        pos++;\n                     }\n-                    pos++;\n-                }\n-\n-                if (!quote) {\n-                    pos = end - 1;\n-                    c = value.charAt(pos);\n-                    // if (c == ' ' || c == '\\f' || c == '\\t') {\n-                    // Some other chars at the end caused the parser to fail, so for now\n-                    // encapsulate if we end in anything less than ' '\n-                    if (c <= SP) {\n-                        quote = true;\n+\n+                    if (!quote) {\n+                        pos = end - 1;\n+                        c = value.charAt(pos);\n+                        // if (c == ' ' || c == '\\f' || c == '\\t') {\n+                        // Some other chars at the end caused the parser to fail, so for now\n+                        // encapsulate if we end in anything less than ' '\n+                        if (c <= SP) {\n+                            quote = true;\n+                        }\n                     }\n                 }\n             }\n-        }\n-\n-        if (!quote) {\n-            // no encapsulation needed - write out the original value\n-            out.append(value, start, end);\n-            return;\n+\n+            if (!quote) {\n+                // no encapsulation needed - write out the original value\n+                out.append(value, start, end);\n+                return;\n+            }\n         }\n \n         // we hit something that needed encapsulation\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n     }\n \n     @Test\n+    public void testPrinterQuoteAll() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuotePolicy(Quote.ALL));\n+        printer.printRecord(\"a\", \"b\\nc\", \"d\");\n+        assertEquals(\"\\\"a\\\",\\\"b\\nc\\\",\\\"d\\\"\" + lineSeparator, sw.toString());\n+    }\n+\n+    @Test\n     public void testPrinter6() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n     @Test\n     public void testJdbcPrinter() throws IOException, ClassNotFoundException, SQLException {\n         final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         Class.forName(\"org.h2.Driver\");\n         final Connection connection = DriverManager.getConnection(\"jdbc:h2:mem:my_test;\", \"sa\", \"\");\n-        final Statement stmt = connection.createStatement();\n-        stmt.execute(\"CREATE TABLE TEST(ID INT PRIMARY KEY, NAME VARCHAR(255))\");\n-        stmt.execute(\"insert into TEST values(1, 'r1')\");\n-        stmt.execute(\"insert into TEST values(2, 'r2')\");\n-        printer.printRecords(stmt.executeQuery(\"select ID, NAME from TEST\"));\n-        assertEquals(\"1,r1\" + lineSeparator + \"2,r2\" + lineSeparator, sw.toString());\n+        try {\n+            final Statement stmt = connection.createStatement();\n+            stmt.execute(\"CREATE TABLE TEST(ID INT PRIMARY KEY, NAME VARCHAR(255))\");\n+            stmt.execute(\"insert into TEST values(1, 'r1')\");\n+            stmt.execute(\"insert into TEST values(2, 'r2')\");\n+            final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n+            printer.printRecords(stmt.executeQuery(\"select ID, NAME from TEST\"));\n+            assertEquals(\"1,r1\" + lineSeparator + \"2,r2\" + lineSeparator, sw.toString());\n+        } finally {\n+            connection.close();\n+        }\n     }\n \n     @Test", "timestamp": 1350248481, "metainfo": ""}