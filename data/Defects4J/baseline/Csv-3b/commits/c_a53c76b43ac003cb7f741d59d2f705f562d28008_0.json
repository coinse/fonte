{"sha": "a53c76b43ac003cb7f741d59d2f705f562d28008", "log": "Removed unused methods from CharBuffer  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CharBuffer.java\n+++ b/src/main/java/org/apache/commons/csv/CharBuffer.java\n package org.apache.commons.csv;\n \n /**\n- * A simple StringBuffer replacement that aims to\n- * reduce copying as much as possible. The buffer\n- * grows as necessary.\n- * This class is not thread safe.\n+ * A simple StringBuffer replacement that aims to reduce copying as much as possible.\n+ * The buffer grows as necessary. This class is not thread safe.\n  *\n- * @author Ortwin Gl\ufffdck\n+ * @author Ortwin Gl\u00fcck\n  */\n class CharBuffer {\n \n \n     /**\n      * Actually used number of characters in the array.\n-     * It is also the index at which\n-     * a new character will be inserted into <code>c</code>.\n+     * It is also the index at which a new character will be inserted into <code>c</code>.\n      */\n     private int length;\n \n     /**\n      * Returns the current capacity of the buffer.\n      *\n-     * @return the maximum number of characters that can be stored in this buffer without\n-     *         resizing it.\n+     * @return the maximum number of characters that can be stored in this buffer without resizing it.\n      */\n     public int capacity() {\n         return c.length;\n             return;\n         }\n         append(s.toCharArray());\n-    }\n-\n-    /**\n-     * Appends <code>sb</code> to the end of this CharBuffer.\n-     * This method involves copying the new data once!\n-     *\n-     * @param sb the StringBuffer to append or null\n-     */\n-    public void append(final StringBuffer sb) {\n-        if (sb == null) {\n-            return;\n-        }\n-        provideCapacity(length + sb.length());\n-        sb.getChars(0, sb.length(), c, length);\n-        length += sb.length();\n     }\n \n     /**\n      *\n      * @return\n      */\n-    public StringBuffer toStringBuffer() {\n-        StringBuffer sb = new StringBuffer(length);\n-        sb.append(c, 0, length);\n-        return sb;\n-    }\n-\n-    /**\n-     * Converts the contents of the buffer into a StringBuffer.\n-     * This method involves copying the new data once!\n-     *\n-     * @return\n-     */\n     public String toString() {\n         return new String(c, 0, length);\n     }\n--- a/src/test/java/org/apache/commons/csv/CharBufferTest.java\n+++ b/src/test/java/org/apache/commons/csv/CharBufferTest.java\n         }\n     }\n \n-    public void testAppendStringBuffer() {\n-        CharBuffer cb = new CharBuffer(1);\n-        StringBuffer abcd = new StringBuffer(\"abcd\");\n-        String expected = \"\";\n-        for (int i = 0; i < 10; i++) {\n-            cb.append(abcd);\n-            expected += \"abcd\";\n-            assertEquals(expected, cb.toString());\n-            assertEquals(4 * (i + 1), cb.length());\n-        }\n-    }\n-\n     public void testAppendCharBuffer() {\n         CharBuffer cb = new CharBuffer(1);\n         CharBuffer abcd = new CharBuffer(17);\n     public void testAppendNull() throws Exception {\n         CharBuffer buffer = new CharBuffer(8);\n \n-        buffer.append((StringBuffer) null);\n-        assertEquals(\"\", buffer.toString());\n-\n         buffer.append((String) null);\n         assertEquals(\"\", buffer.toString());\n ", "timestamp": 1330959701, "metainfo": ""}