{"sha": "1060ee73965dc30d92afbad80525bd4cdabe9153", "log": "bug 11458 fixed   ", "commit": "\n--- a/src/java/org/apache/commons/cli/CommandLine.java\n+++ b/src/java/org/apache/commons/cli/CommandLine.java\n     \n     /** <p>Query to see if an option has been set.</p>\n      *\n-     * @param opt Short single-character name of the option\n+     * @param opt Short name of the option\n      * @return true if set, false if not\n      */\n     public boolean hasOption(String opt) {\n         return options.containsKey( opt );\n+    }\n+\n+    /** <p>Query to see if an option has been set.</p>\n+     *\n+     * @param opt character name of the option\n+     * @return true if set, false if not\n+     */\n+    public boolean hasOption( char opt ) {\n+        return hasOption( String.valueOf( opt ) );\n     }\n \n     /**\n         return res == null ? null : TypeHandler.createValue(res, type);\n     }\n \n+    /**\n+     * @param opt the name of the option\n+     * @return the type of opt\n+     */\n+    public Object getOptionObject( char opt ) {\n+        return getOptionObject( String.valueOf( opt ) );\n+    }\n+\n     /** <p>Retrieve the argument, if any,  of an option.</p>\n      *\n      * @param opt the name of the option\n         return (String)((Option)options.get( opt )).getValue();\n     }\n \n+    /** <p>Retrieve the argument, if any,  of an option.</p>\n+     *\n+     * @param opt the character name of the option\n+     * @return Value of the argument if option is set, and has an argument, else null.\n+     */\n+    public String getOptionValue( char opt ) {\n+        return getOptionValue( String.valueOf( opt ) );\n+    }\n+\n     /** <p>Retrieves the array of values, if any, of an option.</p>\n      *\n-     * @param opt Single-character name of the option\n+     * @param opt string name of the option\n      * @return An array of values if the option is set, and has an argument, else null.\n      */\n     public String[] getOptionValues( String opt ) {\n         return (String[])((Option)options.get( opt )).getValues();\n     }\n-    \n-    /** <p>Retrieve the argument, if any,  of an option.</p>\n-     *\n-     * @param opt Short single-character name of the option\n+\n+    /** <p>Retrieves the array of values, if any, of an option.</p>\n+     *\n+     * @param opt character name of the option\n+     * @return An array of values if the option is set, and has an argument, else null.\n+     */\n+    public String[] getOptionValues( char opt ) {\n+        return getOptionValues( String.valueOf( opt ) );\n+    }\n+    \n+    /** <p>Retrieve the argument, if any, of an option.</p>\n+     *\n+     * @param opt name of the option\n      * @param defaultValue is the default value to be returned if the option is not specified\n      * @return Value of the argument if option is set, and has an argument, else null.\n      */\n         return ( answer != null ) ? answer : defaultValue;\n     }\n     \n+    /** <p>Retrieve the argument, if any, of an option.</p>\n+     *\n+     * @param opt character name of the option\n+     * @param defaultValue is the default value to be returned if the option is not specified\n+     * @return Value of the argument if option is set, and has an argument, else null.\n+     */\n+    public String getOptionValue( char opt, String defaultValue ) {\n+        return getOptionValue( String.valueOf( opt ), defaultValue );\n+    }\n+\n     /** <p>Retrieve any left-over non-recognized options and arguments</p>\n      *\n      * @return an array of remaining items passed in but not parsed\n--- a/src/java/org/apache/commons/cli/GnuParser.java\n+++ b/src/java/org/apache/commons/cli/GnuParser.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.3 2002/08/03 23:45:09 jkeyes Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/03 23:45:09 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.4 2002/08/04 23:04:52 jkeyes Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/04 23:04:52 $\n  *\n  * ====================================================================\n  *\n             }\n             // its a value\n             else {\n-                if( !opt.addValue( var ) ) {\n+                char sep = opt.getValueSeparator();\n+                \n+                if( sep > 0 ) {\n+                    int findex;\n+                    while( ( findex = var.indexOf( sep ) ) != -1 ) {\n+                        String val = var.substring( 0, findex );\n+                        var = var.substring( findex + 1);\n+                        if( !opt.addValue( val ) ) {\n+                            iter.previous();\n+                            return;\n+                        }\n+                    }\n+                    if( !opt.addValue( var ) ) {\n+                        iter.previous();\n+                        return;\n+                    };\n+                }\n+                else if( !opt.addValue( var ) ) {\n                     iter.previous();\n-                    break;\n+                    return;\n                 }\n             }\n         }\n         if( specialOption != null && opt == null) {\n             opt = specialOption;\n             value = arg.substring( 2 );\n-            opt.addValue( value );\n+            char sep = opt.getValueSeparator();\n+\n+            if( sep > 0 ) {\n+                int findex;\n+                while( ( findex = value.indexOf( sep ) ) != -1 ) {\n+                    String val = value.substring( 0, findex );\n+                    value = value.substring( findex + 1);\n+                    if( !opt.addValue( val ) ) {\n+                        cmd.addArg( val );\n+                    }\n+                }\n+                if( !opt.addValue( value ) ) {\n+                    cmd.addArg( value );\n+                }\n+            }\n+            else {\n+                // add the argument value\n+                opt.addValue( value );\n+            }\n         }\n \n         // if there is no option throw an UnrecognisedOptionException\n--- a/src/java/org/apache/commons/cli/Option.java\n+++ b/src/java/org/apache/commons/cli/Option.java\n          this.numberOfArgs = num;\n      }\n \n+     private char valuesep;\n+\n+     public void setValueSeparator( char sep ) {\n+         this.valuesep = sep;\n+     }\n+\n+     public char getValueSeparator() {\n+         return this.valuesep;\n+     }\n+\n      /** <p>Returns the number of argument values this Option can take.</p>\n       *\n       * @return num the number of argument values\n      * @param value is a/the value of this Option\n      */\n     public boolean addValue( String value ) {\n+\n         switch( numberOfArgs ) {\n             case UNINITIALIZED:\n                 return false;\n     }\n \n     /**\n+     * @return the specified value of this Option or \n+     * null if there are no values.\n+     */\n+    public String getValue( int index ) \n+    throws IndexOutOfBoundsException\n+    {\n+        return ( this.values.size()==0 ) ? null : (String)this.values.get( index );\n+    }\n+\n+    /**\n      * @return the value/first value of this Option or the \n      * <code>defaultValue</code> if there are no values.\n      */\n--- a/src/java/org/apache/commons/cli/OptionBuilder.java\n+++ b/src/java/org/apache/commons/cli/OptionBuilder.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.3 2002/08/03 23:45:09 jkeyes Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/03 23:45:09 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.4 2002/08/04 23:04:52 jkeyes Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/04 23:04:52 $\n  *\n  * ====================================================================\n  *\n     /** option type */\n     private static Object type;\n \n+    private static char valuesep;\n+\n     /** option builder instance */\n     private static OptionBuilder instance = new OptionBuilder();\n \n     }\n \n     /**\n+     * <p>The next Option created uses <code>sep</code> as a means to\n+     * separate argument values.</p>\n+     *\n+     * <b>Example:</b>\n+     * <pre>\n+     * Option opt = OptionBuilder.withValueSeparator( ':' )\n+     *                           .create( 'D' );\n+     *\n+     * CommandLine line = parser.parse( args );\n+     * String propertyName = opt.getValue( 0 );\n+     * String propertyValue = opt.getValue( 1 );\n+     * </pre>\n+     *\n+     * @return the OptionBuilder instance\n+     */\n+    public static OptionBuilder withValueSeparator( char sep ) {\n+        instance.valuesep = sep;\n+        return instance;\n+    }\n+\n+    /**\n+     * <p>The next Option created uses '<code>=</code>' as a means to\n+     * separate argument values.</p>\n+     *\n+     * <b>Example:</b>\n+     * <pre>\n+     * Option opt = OptionBuilder.withValueSeparator( )\n+     *                           .create( 'D' );\n+     *\n+     * CommandLine line = parser.parse( args );\n+     * String propertyName = opt.getValue( 0 );\n+     * String propertyValue = opt.getValue( 1 );\n+     * </pre>\n+     *\n+     * @return the OptionBuilder instance\n+     */\n+    public static OptionBuilder withValueSeparator( ) {\n+        instance.valuesep = '=';\n+        return instance;\n+    }\n+\n+    /**\n      * <p>The next Option created will be required if <code>required</code>\n      * is true.</p>\n      *\n         option.setRequired( required );\n         option.setArgs( numberOfArgs );\n         option.setType( type );\n-\n+        option.setValueSeparator( valuesep );\n         // reset the OptionBuilder properties\n         instance.reset();\n \n--- a/src/java/org/apache/commons/cli/PosixParser.java\n+++ b/src/java/org/apache/commons/cli/PosixParser.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/PosixParser.java,v 1.4 2002/08/03 23:45:09 jkeyes Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/03 23:45:09 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/PosixParser.java,v 1.5 2002/08/04 23:04:52 jkeyes Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/04 23:04:52 $\n  *\n  * ====================================================================\n  *\n                                     throw new MissingArgumentException( \"Missing argument value for \" + opt.getOpt() );\n                                 }\n \n-                                // add the argument value\n-                                opt.addValue( token.substring(i+1) );\n+                                String var = token.substring(i+1);\n+                                char sep = opt.getValueSeparator();\n+\n+                                if( sep > 0 ) {\n+                                    int findex;\n+                                    while( ( findex = var.indexOf( sep ) ) != -1 ) {\n+                                        String val = var.substring( 0, findex );\n+                                        var = var.substring( findex + 1);\n+                                        if( !opt.addValue( val ) ) {\n+                                            cmd.addArg( val );\n+                                        }\n+                                    }\n+                                    if( !opt.addValue( var ) ) {\n+                                        cmd.addArg( var );\n+                                    };\n+                                }\n+                                else {\n+                                    // add the argument value\n+                                    opt.addValue( token.substring(i+1) );\n+                                }\n \n                                 // set the option \n                                 cmd.setOpt( opt );\n             }\n             // its a value\n             else {\n-                if( !opt.addValue( var ) ) {\n+                char sep = opt.getValueSeparator();\n+                \n+                if( sep > 0 ) {\n+                    int findex;\n+                    while( ( findex = var.indexOf( sep ) ) != -1 ) {\n+                        String val = var.substring( 0, findex );\n+                        var = var.substring( findex + 1);\n+                        if( !opt.addValue( val ) ) {\n+                            iter.previous();\n+                            return;\n+                        }\n+                    }\n+                    if( !opt.addValue( var ) ) {\n+                        iter.previous();\n+                        return;\n+                    };\n+                }\n+                else if( !opt.addValue( var ) ) {\n                     iter.previous();\n-                    break;\n+                    return;\n                 }\n             }\n         }\n--- a/src/test/org/apache/commons/cli/ApplicationTest.java\n+++ b/src/test/org/apache/commons/cli/ApplicationTest.java\n         options.addOption( \"listener\", true, \"add an instance of a class as a project listener\" );\n         options.addOption( \"buildfile\", true, \"use given buildfile\" );\n         options.addOption( OptionBuilder.withDescription( \"use value for given property\" )\n-                                        .hasArg()\n                                         .hasArgs()\n                                         .create( 'D' ) );\n                            //, null, true, , false, true );\n--- a/src/test/org/apache/commons/cli/PatternOptionBuilderTest.java\n+++ b/src/test/org/apache/commons/cli/PatternOptionBuilderTest.java\n       \n            CommandLineParser parser = CommandLineParserFactory.newParser();\n            CommandLine line = parser.parse(options,args);\n+\n+           // tests the char methods of CommandLine that delegate to\n+           // the String methods\n            assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\n+           assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\n            assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\n+           assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\n            assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));\n+           assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));\n            assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));\n+           assertEquals(\"boolean true flag c\", true, line.hasOption('c'));\n            assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));\n+           assertEquals(\"boolean false flag d\", false, line.hasOption('d'));\n            assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));\n+           assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));\n            assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));\n+           assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));\n            assertEquals(\"number flag n\", new Float(4.5), line.getOptionObject(\"n\"));\n+           assertEquals(\"number flag n\", new Float(4.5), line.getOptionObject('n'));\n            assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));\n+           assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));\n            /// DATES NOT SUPPORTED YET.\n            //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n            //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n--- a/src/test/org/apache/commons/cli/ValuesTest.java\n+++ b/src/test/org/apache/commons/cli/ValuesTest.java\n {\n     /** CommandLine instance */\n     private CommandLine _cmdline = null;\n+    private Option _option = null;\n \n     public static Test suite() { \n         return new TestSuite( ValuesTest.class );\n         opts.addOption( OptionBuilder.withLongOpt( \"i\" )\n                         .withDescription( \"set -i\")\n                         .create( 'i' ) );\n+\n+        opts.addOption( OptionBuilder.withLongOpt( \"j\" )\n+                        .hasArgs( 2 )\n+                        .withDescription( \"set -j\")\n+                        .withValueSeparator( '=' )\n+                        .create( 'j' ) );\n+\n+        opts.addOption( OptionBuilder.withLongOpt( \"k\" )\n+                        .hasArgs( )\n+                        .withDescription( \"set -k\")\n+                        .withValueSeparator( '=' )\n+                        .create( 'k' ) );\n+\n+        _option = OptionBuilder.withLongOpt( \"m\" )\n+                        .hasArgs( )\n+                        .withDescription( \"set -m\")\n+                        .withValueSeparator( )\n+                        .create( 'm' );\n+\n+        opts.addOption( _option );\n         \n         String[] args = new String[] { \"-a\",\n                                        \"-b\", \"foo\",\n                                        \"arg1\", \"arg2\",\n                                        \"-g\", \"val1\", \"val2\" , \"arg3\",\n                                        \"-h\", \"val1\", \"-i\",\n-                                       \"-h\", \"val2\" };\n+                                       \"-h\", \"val2\",\n+                                       \"-jkey=value\",\n+                                       \"-j\", \"key=value\",\n+                                       \"-kkey1=value1\", \n+                                       \"-kkey2=value2\",\n+                                       \"-mkey=value\"};\n \n         CommandLineParser parser = CommandLineParserFactory.newParser();\n \n \n     public void testExtraArgs()\n     {\n-        String[] args = new String[] { \"arg1\", \"arg2\", \"arg3\" };\n-        assertTrue( _cmdline.getArgs().length == 3 );\n+        String[] args = new String[] { \"arg1\", \"arg2\", \"arg3\", \"key=value\" };\n+        assertTrue( _cmdline.getArgs().length == 4 );         \n         assertTrue( Arrays.equals( args, _cmdline.getArgs() ) );\n     }\n+\n+    public void testCharSeparator()\n+    {\n+        // tests the char methods of CommandLine that delegate to\n+        // the String methods\n+        String[] values = new String[] { \"key\", \"value\" };\n+        assertTrue( _cmdline.hasOption( \"j\" ) );\n+        assertTrue( _cmdline.hasOption( 'j' ) );\n+        assertTrue( _cmdline.getOptionValues( \"j\" ).length == 2);\n+        assertTrue( _cmdline.getOptionValues( 'j' ).length == 2);\n+        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( \"j\" ) ) );\n+        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( 'j' ) ) );\n+\n+        values = new String[] { \"key1\", \"value1\", \"key2\", \"value2\" };\n+        assertTrue( _cmdline.hasOption( \"k\" ) );\n+        assertTrue( _cmdline.hasOption( 'k' ) );\n+        assertTrue( _cmdline.getOptionValues( \"k\" ).length == 4 );\n+        assertTrue( _cmdline.getOptionValues( 'k' ).length == 4 );\n+        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( \"k\" ) ) );\n+        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( 'k' ) ) );\n+\n+        values = new String[] { \"key\", \"value\" };\n+        assertTrue( _cmdline.hasOption( \"m\" ) );\n+        assertTrue( _cmdline.hasOption( 'm' ) );\n+        assertTrue( _cmdline.getOptionValues( \"m\" ).length == 2);\n+        assertTrue( _cmdline.getOptionValues( 'm' ).length == 2);\n+        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( \"m\" ) ) );\n+        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( 'm' ) ) );\n+    }\n+\n+    public void testGetValue()\n+    {\n+        // the 'm' option\n+        assertTrue( _option.getValues().length == 2 );\n+        assertEquals( _option.getValue(), \"key\" );\n+        assertEquals( _option.getValue( 0 ), \"key\" );\n+        assertEquals( _option.getValue( 1 ), \"value\" );\n+\n+        try {\n+            assertEquals( _option.getValue( 2 ), \"key\" );\n+            fail( \"IndexOutOfBounds not caught\" );\n+        }\n+        catch( IndexOutOfBoundsException exp ) {\n+            \n+        }\n+\n+        try {\n+            assertEquals( _option.getValue( -1 ), \"key\" );\n+            fail( \"IndexOutOfBounds not caught\" );\n+        }\n+        catch( IndexOutOfBoundsException exp ) {\n+\n+        }\n+\n+    }\n }", "timestamp": 1028502293, "metainfo": ""}