{"sha": "c7127329dad2c5d6284532da09ddc0fdefd67436", "log": "added automatic usage generation   ", "commit": "\n--- a/src/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli/HelpFormatter.java\n package org.apache.commons.cli;\n \n import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n \n /** \n  * A formatter of help messages for the current command line options\n    public void printHelp( String cmdLineSyntax,\n                           Options options )\n    {\n-      printHelp( defaultWidth, cmdLineSyntax, null, options, null );\n+       printHelp( defaultWidth, cmdLineSyntax, null, options, null, false );\n+   }\n+\n+   public void printHelp( String cmdLineSyntax,\n+                          Options options,\n+                          boolean autoUsage )\n+   {\n+       printHelp( defaultWidth, cmdLineSyntax, null, options, null, autoUsage );\n    }\n \n    public void printHelp( String cmdLineSyntax,\n                           Options options,\n                           String footer )\n    {\n-      printHelp(defaultWidth, cmdLineSyntax, header, options, footer);\n-   }\n-\n+       printHelp( cmdLineSyntax, header, options, footer, false );\n+   }\n+\n+   public void printHelp( String cmdLineSyntax,\n+                          String header,\n+                          Options options,\n+                          String footer,\n+                          boolean autoUsage )\n+   {\n+      printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage );\n+   }\n+   \n    public void printHelp( int width,\n                           String cmdLineSyntax,\n                           String header,\n                           Options options,\n                           String footer )\n    {\n+       printHelp( width, cmdLineSyntax, header, options, footer, false );\n+   }\n+\n+   public void printHelp( int width,\n+                          String cmdLineSyntax,\n+                          String header,\n+                          Options options,\n+                          String footer,\n+                          boolean autoUsage )\n+   {\n       PrintWriter pw = new PrintWriter(System.out);\n       printHelp( pw, width, cmdLineSyntax, header,\n-                 options, defaultLeftPad, defaultDescPad, footer );\n+                 options, defaultLeftPad, defaultDescPad, footer, autoUsage );\n       pw.flush();\n    }\n-\n    public void printHelp( PrintWriter pw,\n                           int width,\n                           String cmdLineSyntax,\n                           int leftPad,\n                           int descPad,\n                           String footer )\n+   throws IllegalArgumentException\n+   {\n+       printHelp( pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false );\n+   }\n+\n+   public void printHelp( PrintWriter pw,\n+                          int width,\n+                          String cmdLineSyntax,\n+                          String header,\n+                          Options options,\n+                          int leftPad,\n+                          int descPad,\n+                          String footer,\n+                          boolean autoUsage )\n       throws IllegalArgumentException\n    {\n       if ( cmdLineSyntax == null || cmdLineSyntax.length() == 0 )\n          throw new IllegalArgumentException(\"cmdLineSyntax not provided\");\n       }\n \n-      printUsage( pw, width, cmdLineSyntax );\n+      if ( autoUsage ) {\n+          printUsage( pw, width, cmdLineSyntax, options );\n+      }\n+      else {\n+          printUsage( pw, width, cmdLineSyntax );\n+      }\n+\n       if ( header != null && header.trim().length() > 0 )\n       {\n          printWrapped( pw, width, header );\n       {\n          printWrapped( pw, width, footer );\n       }\n+   }\n+\n+   /**\n+    * <p>Prints the usage statement for the specified application.</p>\n+    *\n+    * @param pw The PrintWriter to print the usage statement \n+    * @param width ??\n+    * @param appName The application name\n+    * @param options The command line Options\n+    *\n+    */\n+   public void printUsage( PrintWriter pw, int width, String app, Options options ) \n+   {\n+       // initialise the string buffer\n+       StringBuffer buff = new StringBuffer( defaultSyntaxPrefix ).append( app ).append( \" \" );\n+       \n+       // create a list for processed option groups\n+       ArrayList list = new ArrayList();\n+\n+       // temp variable\n+       Option option;\n+\n+       // iterate over the options\n+       for ( Iterator i = options.getOptions().iterator(); i.hasNext(); )\n+       {\n+           // get the next Option\n+           option = (Option) i.next();\n+\n+           // check if the option is part of an OptionGroup\n+           OptionGroup group = options.getOptionGroup( option );\n+\n+           // if the option is part of a group and the group has not already\n+           // been processed\n+           if( group != null && !list.contains(group)) {\n+\n+               // add the group to the processed list\n+               list.add( group );\n+\n+               // get the names of the options from the OptionGroup\n+               Collection names = group.getNames();\n+\n+               buff.append( \"[\" ); \n+\n+               // for each option in the OptionGroup\n+               for( Iterator iter = names.iterator(); iter.hasNext(); ) {\n+                   buff.append( iter.next() );\n+                   if( iter.hasNext() ) {\n+                       buff.append( \" | \" );\n+                   }\n+               }\n+               buff.append( \"]\" );\n+           }\n+           // if the Option is not part of an OptionGroup\n+           else {\n+               // if the Option is not a required option\n+               if( !option.isRequired() ) {\n+                   buff.append( \"[\" );\n+               }\n+               buff.append( \"-\" ).append( option.getOpt() );\n+\n+               // if the Option has a value\n+               if( option.hasArg() ) {\n+                   buff.append( \" arg\" );\n+               }\n+\n+               // if the Option is not a required option\n+               if( !option.isRequired() ) {\n+                   buff.append( \"]\" );\n+               }\n+               buff.append( \" \" );\n+           }\n+       }\n+\n+       System.out.println( \"->\" + buff.toString() );\n+       // call printWrapped\n+       printWrapped( pw, width, buff.toString().indexOf(' ')+1,\n+                     buff.toString() );\n    }\n \n    public void printUsage( PrintWriter pw, int width, String cmdLineSyntax )\n--- a/src/java/org/apache/commons/cli/OptionGroup.java\n+++ b/src/java/org/apache/commons/cli/OptionGroup.java\n      * @return the names of the options in this group as a \n      * <code>Collection</code>\n      */\n-    private Collection getNames() {\n+    public Collection getNames() {\n         // the key set is the collection of names\n         return optionMap.keySet();\n     }\n--- a/src/test/org/apache/commons/cli/TestHelpFormatter.java\n+++ b/src/test/org/apache/commons/cli/TestHelpFormatter.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintWriter;\n import java.io.StringWriter;\n-import java.io.PrintWriter;\n \n /** \n  * Test case for the HelpFormatter class \n  *\n  * @author Slawek Zachcial\n+ * @author John Keyes ( jbjk at mac.com )\n  **/\n-public class TestHelpFormatter\n-extends TestCase\n+public class TestHelpFormatter extends TestCase\n {\n-   // --------------------------------------------------------------- Constants\n-\n-   // ------------------------------------------------------------------ Static\n-\n    public static void main( String[] args )\n    {\n       String[] testName = { TestHelpFormatter.class.getName() };\n       return new TestSuite(TestHelpFormatter.class);\n    }\n \n-   // -------------------------------------------------------------- Attributes\n-\n-   // ------------------------------------------------------------ Constructors\n    public TestHelpFormatter( String s )\n    {\n       super( s );\n    }\n-   // ------------------------------------------------------------------ Public\n \n    public void testFindWrapPos()\n       throws Exception\n    }\n \n    public void testPrintOptions()\n-      throws Exception\n+   throws Exception\n    {\n-      StringBuffer sb = new StringBuffer();\n-      HelpFormatter hf = new HelpFormatter();\n-      final int leftPad = 1;\n-      final int descPad = 3;\n-      final String lpad = hf.createPadding(leftPad);\n-      final String dpad = hf.createPadding(descPad);\n-      Options options = null;\n-      String expected = null;\n+       StringBuffer sb = new StringBuffer();\n+       HelpFormatter hf = new HelpFormatter();\n+       final int leftPad = 1;\n+       final int descPad = 3;\n+       final String lpad = hf.createPadding(leftPad);\n+       final String dpad = hf.createPadding(descPad);\n+       Options options = null;\n+       String expected = null;\n \n-      options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n-      expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa aaaa aaaa\";\n-      hf.renderOptions(sb, 60, options, leftPad, descPad);\n-      assertEquals(\"simple non-wrapped option\", expected, sb.toString());\n+       options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n+       expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa aaaa aaaa\";\n+       hf.renderOptions(sb, 60, options, leftPad, descPad);\n+       assertEquals(\"simple non-wrapped option\", expected, sb.toString());\n \n-      int nextLineTabStop = leftPad+descPad+\"-a\".length();\n-      expected =\n-         lpad + \"-a\" + dpad + \"aaaa aaaa aaaa\" + hf.defaultNewLine +\n-         hf.createPadding(nextLineTabStop) + \"aaaa aaaa\";\n-      sb.setLength(0);\n-      hf.renderOptions(sb, nextLineTabStop+17, options, leftPad, descPad);\n-      assertEquals(\"simple wrapped option\", expected, sb.toString());\n+       int nextLineTabStop = leftPad+descPad+\"-a\".length();\n+       expected =\n+           lpad + \"-a\" + dpad + \"aaaa aaaa aaaa\" + hf.defaultNewLine +\n+           hf.createPadding(nextLineTabStop) + \"aaaa aaaa\";\n+       sb.setLength(0);\n+       hf.renderOptions(sb, nextLineTabStop+17, options, leftPad, descPad);\n+       assertEquals(\"simple wrapped option\", expected, sb.toString());\n \n \n-      options = new Options().addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\");\n-      expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd dddd dddd\";\n-      sb.setLength(0);\n-      hf.renderOptions(sb, 60, options, leftPad, descPad);\n-      assertEquals(\"long non-wrapped option\", expected, sb.toString());\n+       options = new Options().addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\");\n+       expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd dddd dddd\";\n+       sb.setLength(0);\n+       hf.renderOptions(sb, 60, options, leftPad, descPad);\n+       assertEquals(\"long non-wrapped option\", expected, sb.toString());\n \n-      nextLineTabStop = leftPad+descPad+\"-a,--aaa\".length();\n-      expected =\n-         lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.defaultNewLine +\n-         hf.createPadding(nextLineTabStop) + \"dddd dddd\";\n-      sb.setLength(0);\n-      hf.renderOptions(sb, 25, options, leftPad, descPad);\n-      assertEquals(\"long wrapped option\", expected, sb.toString());\n+       nextLineTabStop = leftPad+descPad+\"-a,--aaa\".length();\n+       expected =\n+           lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.defaultNewLine +\n+           hf.createPadding(nextLineTabStop) + \"dddd dddd\";\n+       sb.setLength(0);\n+       hf.renderOptions(sb, 25, options, leftPad, descPad);\n+       assertEquals(\"long wrapped option\", expected, sb.toString());\n \n-      options = new Options().\n-         addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\").\n-         addOption(\"b\", false, \"feeee eeee eeee eeee\");\n-      expected =\n-         lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.defaultNewLine +\n-         hf.createPadding(nextLineTabStop) + \"dddd dddd\" + hf.defaultNewLine +\n-         lpad + \"-b      \" + dpad + \"feeee eeee\" + hf.defaultNewLine +\n-         hf.createPadding(nextLineTabStop) + \"eeee eeee\";\n-      sb.setLength(0);\n-      hf.renderOptions(sb, 25, options, leftPad, descPad);\n-      assertEquals(\"multiple wrapped options\", expected, sb.toString());\n+       options = new Options().\n+           addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\").\n+           addOption(\"b\", false, \"feeee eeee eeee eeee\");\n+       expected =\n+           lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.defaultNewLine +\n+           hf.createPadding(nextLineTabStop) + \"dddd dddd\" + hf.defaultNewLine +\n+           lpad + \"-b      \" + dpad + \"feeee eeee\" + hf.defaultNewLine +\n+           hf.createPadding(nextLineTabStop) + \"eeee eeee\";\n+       sb.setLength(0);\n+       hf.renderOptions(sb, 25, options, leftPad, descPad);\n+       assertEquals(\"multiple wrapped options\", expected, sb.toString());\n    }\n \n-   // --------------------------------------------------------------- Protected\n+   public void testAutomaticUsage()\n+   throws Exception\n+   {\n+       HelpFormatter hf = new HelpFormatter();\n+       Options options = null;\n+       String expected = \"usage: app [-a]\\n\";\n+       ByteArrayOutputStream out = new ByteArrayOutputStream( );\n+       PrintWriter pw = new PrintWriter( out );\n \n-   // ------------------------------------------------------- Package protected   \n-   \n-   // ----------------------------------------------------------------- Private\n-   \n-   // ----------------------------------------------------------- Inner classes\n+       options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n+       hf.printUsage( pw, 60, \"app\", options );\n+       pw.flush();\n+       assertEquals(\"simple auto usage\", expected, out.toString());\n+       out.reset();\n \n+       expected = \"usage: app [-b] [-a]\\n\";\n+       options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\")\n+       .addOption(\"b\", false, \"bbb\" );\n+       hf.printUsage( pw, 60, \"app\", options );\n+       pw.flush();\n+       assertEquals(\"simple auto usage\", expected, out.toString());\n+       out.reset();\n+   }\n }", "timestamp": 1027378198, "metainfo": ""}