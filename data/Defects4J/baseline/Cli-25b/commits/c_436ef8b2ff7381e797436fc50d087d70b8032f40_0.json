{"sha": "436ef8b2ff7381e797436fc50d087d70b8032f40", "log": "fix pr 13935 - still need to improve the exception message   ", "commit": "\n--- a/src/java/org/apache/commons/cli/OptionGroup.java\n+++ b/src/java/org/apache/commons/cli/OptionGroup.java\n     /** the name of the selected option */\n     private String selected;\n \n+    /** specified whether this group is required */\n+    private boolean required;\n+\n     /**\n      * add <code>opt</code> to this group\n      *\n     }\n \n     /**\n+     * @param required specifies if this group is required\n+     */\n+    public void setRequired( boolean required ) {\n+        this.required = required;\n+    }\n+\n+    /**\n+     * Returns whether this option group is required.\n+     *\n+     * @returns whether this option group is required\n+     */\n+    public boolean isRequired() {\n+        return this.required;\n+    }\n+\n+    /**\n      * <p>Returns the stringified version of this OptionGroup.</p>\n      * @return the stringified representation of this group\n      */\n--- a/src/java/org/apache/commons/cli/Options.java\n+++ b/src/java/org/apache/commons/cli/Options.java\n     public Options addOptionGroup( OptionGroup group ) {\n         Iterator options = group.getOptions().iterator();\n \n+        if( group.isRequired() ) {\n+            requiredOpts.add( group );\n+        }\n+\n         while( options.hasNext() ) {\n             Option option = (Option)options.next();\n+            // an Option cannot be required if it is in an\n+            // OptionGroup, either the group is required or\n+            // nothing is required\n+            option.setRequired( false );\n             addOption( option );\n \n             optionGroups.put( option.getOpt(), group );\n--- a/src/java/org/apache/commons/cli/Parser.java\n+++ b/src/java/org/apache/commons/cli/Parser.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Parser.java,v 1.6 2002/10/08 21:24:11 jkeyes Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/10/08 21:24:11 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Parser.java,v 1.7 2002/10/24 23:17:49 jkeyes Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/10/24 23:17:49 $\n  *\n  * ====================================================================\n  *\n  *\n  * @author John Keyes (john at integralsource.com)\n  * @see Parser\n- * @version $Revision: 1.6 $\n+ * @version $Revision: 1.7 $\n  */\n public abstract class Parser implements CommandLineParser {\n \n         // if the option is in an OptionGroup make that option the selected\n         // option of the group\n         if ( options.getOptionGroup( opt ) != null ) {\n-            ( (OptionGroup)( options.getOptionGroup( opt ) ) ).setSelected( opt );\n+            OptionGroup group = ( OptionGroup ) options.getOptionGroup( opt );\n+            if( group.isRequired() ) {\n+                requiredOptions.remove( group );\n+            }\n+            group.setSelected( opt );\n         }\n \n         // if the option takes an argument value\n--- a/src/test/org/apache/commons/cli/BugsTest.java\n+++ b/src/test/org/apache/commons/cli/BugsTest.java\n  * version 1.1, a copy of which has been included with this distribution in\n  * the LICENSE file.\n  * \n- * $Id: BugsTest.java,v 1.9 2002/10/19 21:18:26 jkeyes Exp $\n+ * $Id: BugsTest.java,v 1.10 2002/10/24 23:17:49 jkeyes Exp $\n  */\n \n package org.apache.commons.cli;\n         }\n     }\n \n+    public void test13935() {\n+        OptionGroup directions = new OptionGroup();\n+\n+        Option left = new Option( \"l\", \"left\", false, \"go left\" );\n+        Option right = new Option( \"r\", \"right\", false, \"go right\" );\n+        Option straight = new Option( \"s\", \"straight\", false, \"go straight\" );\n+        Option forward = new Option( \"f\", \"forward\", false, \"go forward\" );\n+        forward.setRequired( true );\n+\n+        directions.addOption( left );\n+        directions.addOption( right );\n+        directions.setRequired( true );\n+\n+        Options opts = new Options();\n+        opts.addOptionGroup( directions );\n+        opts.addOption( straight );\n+\n+        CommandLineParser parser = new PosixParser();\n+        boolean exception = false;\n+\n+        String[] args = new String[] {  };\n+        try {\n+            CommandLine line = parser.parse( opts, args );\n+        }\n+        catch( ParseException exp ) {\n+            exception = true;\n+        }\n+\n+        if( !exception ) {\n+            fail( \"Expected exception not caught.\");\n+        }\n+\n+        exception = false;\n+\n+        args = new String[] { \"-s\" };\n+        try {\n+            CommandLine line = parser.parse( opts, args );\n+        }\n+        catch( ParseException exp ) {\n+            exception = true;\n+        }\n+\n+        if( !exception ) {\n+            fail( \"Expected exception not caught.\");\n+        }\n+\n+        exception = false;\n+\n+        args = new String[] { \"-s\", \"-l\" };\n+        try {\n+            CommandLine line = parser.parse( opts, args );\n+        }\n+        catch( ParseException exp ) {\n+            fail( \"Unexpected exception: \" + exp.getMessage() );\n+        }\n+\n+        opts.addOption( forward );\n+        args = new String[] { \"-s\", \"-l\", \"-f\" };\n+        try {\n+            CommandLine line = parser.parse( opts, args );\n+        }\n+        catch( ParseException exp ) {\n+            fail( \"Unexpected exception: \" + exp.getMessage() );\n+        }\n+    }\n }", "timestamp": 1035501469, "metainfo": ""}