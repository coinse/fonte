{"sha": "3117c1049587534aaba37d2448f4aabeed24bf6d", "log": "Impelmented [JACKSON-813], @JsonSerializableSchema.id addition", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/JsonSerializableSchema.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/JsonSerializableSchema.java\n  * annotations, to produce JSON schema definition.\n  * \n  * @author Ryan Heaton\n+ * @author Tatu Saloranta\n  */\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @JacksonAnnotation\n public @interface JsonSerializableSchema\n {\n+    /**\n+     * Marker value used to indicate that property has \"no value\";\n+     * needed because annotations can not have null as default\n+     * value.\n+     */\n     public final static String NO_VALUE = \"##irrelevant\";\n+\n+    /**\n+     * Property that can be used to indicate id of the type when\n+     * generating JSON Schema; empty String indicates that no id\n+     * is defined.\n+     */\n+    public String id() default \"\";\n     \n     /**\n      * The schema type for this JsonSerializable instance.\n      *\n      * @return The schema type for this JsonSerializable instance.\n      */\n-    String schemaType() default \"any\";\n+    public String schemaType() default \"any\";\n \n     /**\n      * If the schema type is \"object\", JSON definition of properties of the object as\n      *\n      * @return The node representing the schema properties, or \"##irrelevant\" if irrelevant.\n      */\n-    String schemaObjectPropertiesDefinition() default NO_VALUE;\n+    public String schemaObjectPropertiesDefinition() default NO_VALUE;\n \n     /**\n      * If the schema type if \"array\", JSON definition of the schema for item types contained.\n      *\n      * @return The schema for the items in the array, or \"##irrelevant\" if irrelevant.\n      */\n-    String schemaItemDefinition() default NO_VALUE;\n+    public String schemaItemDefinition() default NO_VALUE;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n+import com.fasterxml.jackson.databind.jsonschema.JsonSerializableSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n         throws JsonMappingException\n     {\n         ObjectNode o = createSchemaNode(\"object\", true);\n+        // [JACKSON-813]: Add optional JSON Schema id attribute, if found\n+        // NOTE: not optimal, does NOT go through AnnotationIntrospector etc:\n+        JsonSerializableSchema ann = _handledType.getAnnotation(JsonSerializableSchema.class);\n+        if (ann != null) {\n+            String id = ann.id();\n+            if (id != null && id.length() > 0) {\n+                o.put(\"id\", id);\n+            }\n+        }        \n         //todo: should the classname go in the title?\n         //o.put(\"title\", _className);\n         ObjectNode propertiesNode = o.objectNode();\n--- a/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n     public class TrivialBean {\n         public String name;\n     }\n+\n+    @JsonSerializableSchema(id=\"myType\")\n+    public class BeanWithId {\n+        public String value;\n+    }\n     \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n \n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+    \n     /**\n      * tests generating json-schema stuff.\n      */\n     public void testGeneratingJsonSchema()\n         throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        JsonSchema jsonSchema = mapper.generateJsonSchema(SimpleBean.class);\n+        JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class);\n         assertNotNull(jsonSchema);\n \n         // test basic equality, and that equals() handles null, other obs\n     /**\n      * Additional unit test for verifying that schema object itself\n      * can be properly serialized\n-     *\n-     * @since 1.2\n      */\n     public void testSchemaSerialization()\n             throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        JsonSchema jsonSchema = mapper.generateJsonSchema(SimpleBean.class);\n-\tMap<String,Object> result = writeAndMap(mapper, jsonSchema);\n+        JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class);\n+\tMap<String,Object> result = writeAndMap(MAPPER, jsonSchema);\n \tassertNotNull(result);\n \t// no need to check out full structure, just basics...\n \tassertEquals(\"object\", result.get(\"type\"));\n     public void testInvalidCall()\n         throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         // not ok to pass null\n         try {\n-            mapper.generateJsonSchema(null);\n-        } catch (IllegalArgumentException iae) { }\n+            MAPPER.generateJsonSchema(null);\n+            fail(\"Should have failed\");\n+        } catch (IllegalArgumentException iae) {\n+            verifyException(iae, \"class must be provided\");\n+        }\n     }\n \n     /**\n      */\n     public void testThatObjectsHaveNoItems() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        JsonSchema jsonSchema = mapper.generateJsonSchema(TrivialBean.class);\n+        JsonSchema jsonSchema = MAPPER.generateJsonSchema(TrivialBean.class);\n         String json = jsonSchema.toString().replaceAll(\"\\\"\", \"'\");\n         // can we count on ordering being stable? I think this is true with current ObjectNode impl\n         // as perh [JACKSON-563]; 'required' is only included if true\n         assertEquals(\"{'type':'object','properties':{'name':{'type':'string'}}}\",\n                 json);\n     }\n+\n+    public void testSchemaId() throws Exception\n+    {\n+        JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class);\n+        String json = jsonSchema.toString().replaceAll(\"\\\"\", \"'\");\n+        assertEquals(\"{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}\",\n+                json);\n+    }\n }", "timestamp": 1332288502, "metainfo": ""}