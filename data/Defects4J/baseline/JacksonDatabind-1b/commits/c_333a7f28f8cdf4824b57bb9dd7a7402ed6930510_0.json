{"sha": "333a7f28f8cdf4824b57bb9dd7a7402ed6930510", "log": "Starting to fix [JACKSON-756]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n         if (contentDeser == null) { // not defined by annotation\n             // One special type: EnumSet:\n             if (EnumSet.class.isAssignableFrom(collectionClass)) {\n-                return new EnumSetDeserializer(constructEnumResolver(contentType.getRawClass(), config,\n-                        _findJsonValueFor(config, contentType)));\n+                return new EnumSetDeserializer(contentType.getRawClass(),\n+                        createEnumDeserializer(config, p, contentType, property));\n             }\n             // But otherwise we can just use a generic value deserializer:\n             // 'null' -> collections have no referring fields\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n-import com.fasterxml.jackson.databind.util.EnumResolver;\n \n /**\n  * \n {\n     protected final Class<Enum> _enumClass;\n \n-    protected final EnumDeserializer _enumDeserializer;\n+    protected final JsonDeserializer<Enum<?>> _enumDeserializer;\n \n     @SuppressWarnings(\"unchecked\" )\n-    public EnumSetDeserializer(EnumResolver enumRes)\n+    public EnumSetDeserializer(Class<?> enumClass, JsonDeserializer<?> deser)\n     {\n         super(EnumSet.class);\n-        _enumDeserializer = new EnumDeserializer(enumRes);\n-        // this is fugly, but not sure of a better way...\n-        _enumClass = (Class<Enum>) ((Class<?>) enumRes.getEnumClass());\n+        _enumClass = (Class<Enum>) enumClass;\n+        _enumDeserializer = (JsonDeserializer<Enum<?>>) deser;\n     }\n \n     /**\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestDateDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestDateDeserialization.java\n         assertEquals(\"Date: expect \"+value+\" (\"+value.getTime()+\"), got \"+result+\" (\"+result.getTime()+\")\", value.getTime(), result.getTime());\n     }\n \n-    /**\n-     * @since 1.5.0\n-     */\n     public void testDateUtilWithStringTimestamp() throws Exception\n     {\n         long now = 1321992375446L;\n         assertEquals(now, value.getTime());\n     }\n \n-    /**\n-     * As of version 0.9.8, we'll try to cover RFC-1123 Strings too,\n-     * automatically.\n-     */\n     public void testDateUtilRFC1123() throws Exception\n     {\n         DateFormat fmt = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n             return null;\n         }\n     }\n-\n+    \n     protected enum LowerCaseEnum {\n         A, B, C;\n         private LowerCaseEnum() { }\n         assertEquals(String.valueOf(TestEnum.RULES.ordinal()), json);\n         TestEnum result = m.readValue(json, TestEnum.class);\n         assertSame(TestEnum.RULES, result);\n-    }        \n-\n+    }\n+    \n     // [JACKSON-749]: @JsonValue should be considered as well\n     public void testEnumsWithJsonValue() throws Exception\n     {\n         assertEquals(1, map.size());\n         assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A));\n     }\n+\n+    // [JACKSON-756], next three tests\n+\n+    public void testEnumWithCreatorEnumMaps() throws Exception {\n+          EnumMap<EnumWithCreator,String> value = mapper.readValue(\"{\\\"enumA\\\":\\\"value\\\"}\",\n+                  new TypeReference<EnumMap<EnumWithCreator,String>>() {});\n+          assertEquals(\"value\", value.get(EnumWithCreator.A));\n+    }\n+\n+    public void testEnumWithCreatorMaps() throws Exception {\n+          java.util.HashMap<EnumWithCreator,String> value = mapper.readValue(\"{\\\"enumA\\\":\\\"value\\\"}\",\n+                  new TypeReference<java.util.HashMap<EnumWithCreator,String>>() {});\n+          assertEquals(\"value\", value.get(EnumWithCreator.A));\n+    }\n+\n+    public void testEnumWithCreatorEnumSets() throws Exception {\n+          EnumSet<EnumWithCreator> value = mapper.readValue(\"[\\\"enumA\\\"]\",\n+                  new TypeReference<EnumSet<EnumWithCreator>>() {});\n+          assertTrue(value.contains(EnumWithCreator.A));\n+    }\n }", "timestamp": 1326840884, "metainfo": ""}