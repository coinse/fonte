{"sha": "2ebd69ace5ee7a255f04d8ee364ba0f6cf834f7a", "log": "Implemented [JACKSON-747]; ability to reconfigure ObjectReader, ObjectWriter with Features.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n     }\n \n     /**\n+     * Factory method for constructing {@link ObjectWriter} with\n+     * specified feature enabled (compared to settings that this\n+     * mapper instance has).\n+     */\n+    public ObjectWriter writer(SerializationConfig.Feature feature) {\n+        return new ObjectWriter(this, getSerializationConfig().with(feature));\n+    }\n+\n+    /**\n+     * Factory method for constructing {@link ObjectWriter} with\n+     * specified features enabled (compared to settings that this\n+     * mapper instance has).\n+     */\n+    public ObjectWriter writer(SerializationConfig.Feature first,\n+            SerializationConfig.Feature... other) {\n+        return new ObjectWriter(this, getSerializationConfig().with(first, other));\n+    }\n+    \n+    /**\n      * Factory method for constructing {@link ObjectWriter} that will\n      * serialize objects using specified {@link DateFormat}; or, if\n      * null passed, using timestamp (64-bit number.\n     public ObjectReader reader() {\n         return new ObjectReader(this, getDeserializationConfig())\n             .withInjectableValues(_injectableValues);\n+    }\n+\n+    /**\n+     * Factory method for constructing {@link ObjectReader} with\n+     * specified feature enabled (compared to settings that this\n+     * mapper instance has).\n+     * Note that the resulting instance is NOT usable as is,\n+     * without defining expected value type.\n+     */\n+    public ObjectReader reader(DeserializationConfig.Feature feature) {\n+        return new ObjectReader(this, getDeserializationConfig().with(feature));\n+    }\n+\n+    /**\n+     * Factory method for constructing {@link ObjectReader} with\n+     * specified features enabled (compared to settings that this\n+     * mapper instance has).\n+     * Note that the resulting instance is NOT usable as is,\n+     * without defining expected value type.\n+     */\n+    public ObjectReader reader(DeserializationConfig.Feature first,\n+            DeserializationConfig.Feature... other) {\n+        return new ObjectReader(this, getDeserializationConfig().with(first, other));\n     }\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n             DeserializationConfig.Feature... other)\n     {\n         DeserializationConfig newConfig = _config.with(first, other);\n+        return (newConfig == _config) ? this : new ObjectReader(this, newConfig);\n+    }    \n+\n+    /**\n+     * Method for constructing a new reader instance that is configured\n+     * with specified feature disabled.\n+     */\n+    public ObjectReader without(DeserializationConfig.Feature feature) \n+    {\n+        DeserializationConfig newConfig = _config.without(feature);\n+        return (newConfig == _config) ? this : new ObjectReader(this, newConfig);\n+    }    \n+\n+    /**\n+     * Method for constructing a new reader instance that is configured\n+     * with specified features disabled.\n+     */\n+    public ObjectReader without(DeserializationConfig.Feature first,\n+            DeserializationConfig.Feature... other)\n+    {\n+        DeserializationConfig newConfig = _config.without(first, other);\n         return (newConfig == _config) ? this : new ObjectReader(this, newConfig);\n     }    \n     \n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n     /**\n      * When using data format that uses a schema, schema is passed\n      * to generator.\n-     * \n-     * @since 1.8\n      */\n     protected final FormatSchema _schema;\n     \n \n     /**\n      * Alternative constructor for initial instantiation.\n-     * \n-     * @since 1.7\n      */\n     protected ObjectWriter(ObjectMapper mapper, SerializationConfig config)\n     {\n \n     /**\n      * Alternative constructor for initial instantiation.\n-     * \n-     * @since 1.7\n      */\n     protected ObjectWriter(ObjectMapper mapper, SerializationConfig config,\n             FormatSchema s)\n     /* Life-cycle, fluent factories\n     /**********************************************************\n      */\n+\n+    /**\n+     * Method for constructing a new instance that is configured\n+     * with specified feature enabled.\n+     */\n+    public ObjectWriter with(SerializationConfig.Feature feature) \n+    {\n+        SerializationConfig newConfig = _config.with(feature);\n+        return (newConfig == _config) ? this : new ObjectWriter(this, newConfig);\n+    }    \n+\n+    /**\n+     * Method for constructing a new instance that is configured\n+     * with specified features enabled.\n+     */\n+    public ObjectWriter with(SerializationConfig.Feature first,\n+            SerializationConfig.Feature... other)\n+    {\n+        SerializationConfig newConfig = _config.with(first, other);\n+        return (newConfig == _config) ? this : new ObjectWriter(this, newConfig);\n+    }    \n+\n+    /**\n+     * Method for constructing a new instance that is configured\n+     * with specified feature enabled.\n+     */\n+    public ObjectWriter without(SerializationConfig.Feature feature) \n+    {\n+        SerializationConfig newConfig = _config.without(feature);\n+        return (newConfig == _config) ? this : new ObjectWriter(this, newConfig);\n+    }    \n+\n+    /**\n+     * Method for constructing a new instance that is configured\n+     * with specified features enabled.\n+     */\n+    public ObjectWriter without(SerializationConfig.Feature first,\n+            SerializationConfig.Feature... other)\n+    {\n+        SerializationConfig newConfig = _config.without(first, other);\n+        return (newConfig == _config) ? this : new ObjectWriter(this, newConfig);\n+    }    \n     \n     /**\n      * Method that will construct a new instance that uses specified\n         return withType(_config.constructType(rootType));\n     }\n \n-    /**\n-     * @since 1.7\n-     */\n     public ObjectWriter withType(TypeReference<?> rootType)\n     {\n         return withType(_config.getTypeFactory().constructType(rootType.getType()));\n     /**\n      * Method that will construct a new instance that will use specified pretty\n      * printer (or, if null, will not do any pretty-printing)\n-     * \n-     * @since 1.6\n      */\n     public ObjectWriter withPrettyPrinter(PrettyPrinter pp)\n     {\n--- a/src/test/java/com/fasterxml/jackson/databind/TestRootName.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestRootName.java\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializationConfig;\n \n+/**\n+ * Unit tests dealing with handling of \"root element wrapping\",\n+ * including configuration of root name to use.\n+ */\n public class TestRootName extends BaseMapTest\n {\n-    /*\n-    /**********************************************************\n-    /* Helper types\n-    /**********************************************************\n-     */\n-\n     @JsonRootName(\"rudy\")\n     static class Bean {\n         public int a = 3;\n         Bean bean = mapper.reader(Bean.class).readValue(json);\n         assertNotNull(bean);\n     }\n+\n+    public void testReconfiguringOfWrapping() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        // default: no wrapping\n+        final Bean input = new Bean();\n+        String jsonUnwrapped = mapper.writeValueAsString(input);\n+        assertEquals(\"{\\\"a\\\":3}\", jsonUnwrapped);\n+        // secondary: wrapping\n+        String jsonWrapped = mapper.writer(SerializationConfig.Feature.WRAP_ROOT_VALUE)\n+            .writeValueAsString(input);\n+        assertEquals(\"{\\\"rudy\\\":{\\\"a\\\":3}}\", jsonWrapped);\n+\n+        // and then similarly for readers:\n+        Bean result = mapper.readValue(jsonUnwrapped, Bean.class);\n+        assertNotNull(result);\n+        try { // must not have extra wrapping\n+            result = mapper.reader(Bean.class).with(DeserializationConfig.Feature.UNWRAP_ROOT_VALUE)\n+                .readValue(jsonUnwrapped);\n+            fail(\"Should have failed\");\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"Root name 'a'\");\n+        }\n+        // except wrapping may be expected:\n+        result = mapper.reader(Bean.class).with(DeserializationConfig.Feature.UNWRAP_ROOT_VALUE)\n+            .readValue(jsonWrapped);\n+        assertNotNull(result);\n+    }\n     \n     /*\n     /**********************************************************", "timestamp": 1327086732, "metainfo": ""}