{"sha": "751e9f2e6895f9d22991fa6ccd52a31ddb39146e", "log": "Add DelegatingDeserializer to help implementation of, well, delegating deserializers....", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n      * \n      * @since 2.1\n      */\n-    public JsonDeserializer<T> replaceDelegatee(JsonDeserializer<?> delegatee) {\n+    public JsonDeserializer<?> replaceDelegatee(JsonDeserializer<?> delegatee) {\n         throw new UnsupportedOperationException();\n     }\n     \n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n+package com.fasterxml.jackson.databind.deser.std;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.*;\n+import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+\n+/**\n+ * Base class that simplifies implementations of {@link JsonDeserializer}s\n+ * that mostly delegate functionality to another deserializer implementation\n+ * (possibly forming a chaing of deserializers delegating functionality\n+ * in some cases)\n+ * \n+ * @since 2.1\n+ */\n+public abstract class DelegatingDeserializer\n+    extends StdDeserializer<Object>\n+    implements ContextualDeserializer, ResolvableDeserializer\n+{\n+    protected final JsonDeserializer<?> _delegatee;\n+    \n+    /*\n+    /**********************************************************************\n+    /* Construction\n+    /**********************************************************************\n+     */\n+\n+    public DelegatingDeserializer(JsonDeserializer<?> delegatee)\n+    {\n+        super(_figureType(delegatee));\n+        _delegatee = delegatee;\n+    }\n+\n+    protected abstract JsonDeserializer<?> newDelegatingInstance(JsonDeserializer<?> newDelegatee);\n+    \n+    private static Class<?> _figureType(JsonDeserializer<?> deser)\n+    {\n+        if (deser instanceof StdDeserializer<?>) {\n+            return ((StdDeserializer<?>) deser).getValueClass();\n+        }\n+        return Object.class;\n+    }\n+    \n+    /*\n+    /**********************************************************************\n+    /* Overridden methods for contextualization, resolving\n+    /**********************************************************************\n+     */\n+\n+    public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n+        if (_delegatee instanceof ResolvableDeserializer) {\n+            ((ResolvableDeserializer) _delegatee).resolve(ctxt);\n+        }\n+    }\n+\n+    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n+            BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        JsonDeserializer<?> del = _delegatee;\n+        if (del instanceof ContextualDeserializer) {\n+            del = ((ContextualDeserializer) del).createContextual(ctxt, property);\n+        }\n+        return _createContextual(ctxt, property, del);\n+    }\n+\n+    protected JsonDeserializer<?> _createContextual(DeserializationContext ctxt,\n+            BeanProperty property, JsonDeserializer<?> newDelegatee)\n+    {\n+        if (newDelegatee == _delegatee) {\n+            return this;\n+        }\n+        return newDelegatingInstance(newDelegatee);\n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* Overridden deserialization methods\n+    /**********************************************************************\n+     */\n+\n+    @Override\n+    public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n+        throws IOException, JsonProcessingException\n+    {\n+        return _delegatee.deserialize(jp,  ctxt);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public Object deserialize(JsonParser jp, DeserializationContext ctxt,\n+            Object intoValue)\n+        throws IOException, JsonProcessingException\n+    {\n+        return ((JsonDeserializer<Object>)_delegatee).deserialize(jp, ctxt, intoValue);\n+    }\n+\n+    @Override\n+    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n+            TypeDeserializer typeDeserializer)\n+        throws IOException, JsonProcessingException\n+    {\n+        return _delegatee.deserializeWithType(jp, ctxt, typeDeserializer);\n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* Overridden other methods\n+    /**********************************************************************\n+     */\n+\n+    @Override\n+    public JsonDeserializer<?> replaceDelegatee(JsonDeserializer<?> delegatee)\n+    {\n+        if (delegatee == _delegatee) {\n+            return this;\n+        }\n+        return newDelegatingInstance(delegatee);\n+    }\n+\n+    @Override\n+    public Object getNullValue() { return _delegatee.getNullValue(); }\n+\n+    @Override\n+    public Object getEmptyValue() { return _delegatee.getEmptyValue(); }\n+\n+    @Override\n+    public Collection<Object> getKnownPropertyNames() { return _delegatee.getKnownPropertyNames(); }\n+    \n+    @Override\n+    public boolean isCachable() { return false; }\n+\n+    @Override\n+    public ObjectIdReader getObjectIdReader() { return _delegatee.getObjectIdReader(); }\n+\n+    @Override\n+    public JsonDeserializer<?> getDelegatee() {\n+        return _delegatee;\n+    }\n+}", "timestamp": 1347149686, "metainfo": ""}