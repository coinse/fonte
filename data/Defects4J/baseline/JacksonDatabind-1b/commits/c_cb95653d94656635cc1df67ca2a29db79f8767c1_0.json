{"sha": "cb95653d94656635cc1df67ca2a29db79f8767c1", "log": "remove compiler warnings", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n      */\n \n     static class MySchema implements FormatSchema {\n-//      @Override\n+        @Override\n         public String getSchemaType() { return \"test\"; }\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation.java\n             _id = idForBean;\n         }\n         \n-//      @Override\n+        @Override\n         public Id getMechanism() {\n             return Id.CUSTOM;\n         }\n-\n-//      @Override\n+        @Override\n         public String idFromValue(Object value)\n         {\n             if (value.getClass() == TypeIdBean.class) {\n             }\n             return \"unknown\";\n         }\n-\n-//      @Override\n+        @Override\n         public String idFromValueAndType(Object value, Class<?> type) {\n             return idFromValue(value);\n         }\n-        \n-//      @Override\n+        @Override\n         public void init(JavaType baseType) {\n             if (initTypes != null) {\n                 initTypes.add(baseType);\n             }\n         }\n-\n-//      @Override\n+        @Override\n         public JavaType typeFromId(String id)\n         {\n             if (id.equals(_id)) {\n             }\n             return null;\n         }\n-\n-//      @Override\n+        @Override\n         public String idFromBaseType() {\n             return \"xxx\";\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/TestObjectMapperBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestObjectMapperBeanDeserializer.java\n         public CtorValueBean(int value) { _desc = String.valueOf(value); }\n         public CtorValueBean(long value) { _desc = String.valueOf(value); }\n \n-//      @Override\n+        @Override\n         public void serialize(JsonGenerator jgen, SerializerProvider provider)\n             throws IOException, JsonGenerationException\n         {\n             CtorValueBean other = (CtorValueBean) o;\n             return _desc.equals(other._desc);\n         }\n-//      @Override\n+        @Override\n         public void serializeWithType(JsonGenerator jgen,\n                 SerializerProvider provider, TypeSerializer typeSer)\n                 throws IOException, JsonProcessingException {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestGenericMapDeser.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestGenericMapDeser.java\n \n         public StringMap() { }\n \n-//      @Override\n+        @Override\n         public Map<String,Long> getEntries() { return entries; }\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestValueAnnotations.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestValueAnnotations.java\n \n         public RootStringImpl(String x) { _contents = x; }\n \n-//      @Override\n+        @Override\n         public String contents() { return _contents; }\n         public String contents2() { return _contents; }\n     }\n \n         public RootInterfaceImpl() { }\n \n-//      @Override\n+        @Override\n         public String getA() { return a; }\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/interop/TestExternalizable.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/interop/TestExternalizable.java\n             this.values = values;\n         }\n \n+        @Override\n         public void readExternal(ObjectInput in) throws IOException\n         {\n //            MapperHolder.mapper().readValue(\n             MapperHolder.mapper().readerForUpdating(this).readValue(new ExternalizableInput(in));\n         }\n \n+        @Override\n         public void writeExternal(ObjectOutput oo) throws IOException\n         {\n             MapperHolder.mapper().writeValue(new ExternalizableOutput(oo), this);\n--- a/src/test/java/com/fasterxml/jackson/databind/interop/TestHibernate.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/interop/TestHibernate.java\n         Enhancer enh = new Enhancer();\n         enh.setInterfaces(new Class[] { BeanInterfaceHib.class });\n         enh.setCallback(new MethodInterceptor() {\n-//          @Override\n+            @Override\n             public Object intercept(Object obj, Method method,\n                     Object[] args, MethodProxy proxy)\n                             throws Throwable\n--- a/src/test/java/com/fasterxml/jackson/databind/interop/TestJDKProxy.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/interop/TestJDKProxy.java\n         public Planet() { }\n         public Planet(String s) { name = s; }\n         \n+        @Override\n         public String getName(){return name;}\n+        @Override\n         public String setName(String iName) {name = iName;\n             return name;\n         }\n             public ProxyUtil(Object o) {\n                 obj = o;\n             }\n+            @Override\n             public Object invoke(Object proxy, Method m, Object[] args) throws Throwable {\n                 Object result = null;\n                 result = m.invoke(obj, args);\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver.java\n \n         public CustomResolver() { }\n         \n-//      @Override\n+        @Override\n         public Id getMechanism() {\n             return Id.CUSTOM;\n         }\n \n-//      @Override\n+        @Override\n         public String idFromValue(Object value)\n         {\n             if (value.getClass() == CustomBean.class) {\n             return \"unknown\";\n         }\n \n-//      @Override\n+        @Override\n         public String idFromValueAndType(Object value, Class<?> type) {\n             return idFromValue(value);\n         }\n-        \n-//      @Override\n+\n+        @Override\n         public void init(JavaType baseType) {\n             if (initTypes != null) {\n                 initTypes.add(baseType);\n             }\n         }\n \n-//      @Override\n+        @Override\n         public JavaType typeFromId(String id)\n         {\n             if (\"*\".equals(id)) {\n             return null;\n         }\n \n-//      @Override\n+        @Override\n         public String idFromBaseType() {\n             return \"xxx\";\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java\n             baseProperty = bp;\n         }\n \n-//      @Override\n+        @Override\n         @JsonProperty public String getBaseProperty() {\n             return baseProperty;\n         }\n             baseProperty = bp;\n         }\n \n-//      @Override\n+        @Override\n         @JsonProperty public String getBaseProperty() {\n             return baseProperty;\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java\n     }\n     \n     static class Impl1 implements Base {\n-//      @Override\n+        @Override\n         public String getText() { return \"1\"; }\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers.java\n             value = v;\n         }\n \n-//      @Override\n+        @Override\n         public String getKey() { return key; }\n-//      @Override\n+        @Override\n         public Integer getValue() { return value; }\n     }\n \n             value = v;\n         }\n \n-//      @Override\n+        @Override\n         public Integer getValue() { return value; }\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java\n         SimpleModule module = new SimpleModule(\"test\", Version.unknownVersion());\n         module.addSerializer(new StdDelegatingSerializer(Immutable.class,\n                 new Converter<Immutable, Map<String,Integer>>() {\n-                    //@Override\n+                    @Override\n                     public Map<String, Integer> convert(Immutable value)\n                     {\n                         HashMap<String,Integer> map = new LinkedHashMap<String,Integer>();\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n         A, B, C;\n \n         private SerializableEnum() { }\n-        \n-//      @Override\n+\n+        @Override\n         public void serializeWithType(JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer)\n                 throws IOException, JsonProcessingException\n         {\n             serialize(jgen, provider);\n         }\n \n-//      @Override\n+        @Override\n         public void serialize(JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException\n         {\n             jgen.writeString(\"foo\");\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestFeatures.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestFeatures.java\n         public int a = 3;\n \n         protected boolean wasClosed = false;\n-        \n-//      @Override\n+\n+        @Override\n         public void close() throws IOException {\n             wasClosed = true;\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerializeAs.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerializeAs.java\n     // force use of interface\n     @JsonSerialize(as=Fooable.class)\n     public static class FooImpl implements Fooable {\n+        @Override\n         public int getFoo() { return 42; }\n         public int getBar() { return 15; }\n     }", "timestamp": 1362279124, "metainfo": ""}