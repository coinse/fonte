{"sha": "e4b7bf335d1c14b99dca66a5f1fd2e6790dc199a", "log": "Improve JSON format visiting by exposing expected JSON number type", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n         throws IOException, JsonProcessingException\n     {\n         // Hmmh. One tricky question; for scalar, is it an Object Id, or \"Natural\" type?\n-\n-System.err.println(\"Abstract, objR = \"+_objectIdReader);\n-\n         // for now, prefer Object Id:\n         if (_objectIdReader != null) {\n             JsonToken t = jp.getCurrentToken();\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.java\n  */\n public interface JsonFormatVisitorWrapper extends JsonFormatVisitorWithSerializerProvider\n {\n-    public JsonObjectFormatVisitor expectObjectFormat(JavaType convertedType) throws JsonMappingException;\n+    /**\n+     * @param type Declared type of visited property (or List element) in Java\n+     */\n+    public JsonObjectFormatVisitor expectObjectFormat(JavaType type) throws JsonMappingException;\n \n-    public JsonArrayFormatVisitor expectArrayFormat(JavaType convertedType) throws JsonMappingException;\n-    public JsonStringFormatVisitor expectStringFormat(JavaType convertedType) throws JsonMappingException;\n-    public JsonNumberFormatVisitor expectNumberFormat(JavaType convertedType) throws JsonMappingException;\n-    public JsonIntegerFormatVisitor expectIntegerFormat(JavaType convertedType) throws JsonMappingException;\n-    public JsonBooleanFormatVisitor expectBooleanFormat(JavaType convertedType) throws JsonMappingException;\n-    public JsonNullFormatVisitor expectNullFormat(JavaType convertedType) throws JsonMappingException;\n-    public JsonAnyFormatVisitor expectAnyFormat(JavaType convertedType) throws JsonMappingException;\n+    /**\n+     * @param type Declared type of visited property (or List element) in Java\n+     */\n+    public JsonArrayFormatVisitor expectArrayFormat(JavaType type) throws JsonMappingException;\n+\n+    /**\n+     * @param type Declared type of visited property (or List element) in Java\n+     */\n+    public JsonStringFormatVisitor expectStringFormat(JavaType type) throws JsonMappingException;\n+\n+    /**\n+     * @param type Declared type of visited property (or List element) in Java\n+     */\n+    public JsonNumberFormatVisitor expectNumberFormat(JavaType type) throws JsonMappingException;\n+\n+    /**\n+     * @param type Declared type of visited property (or List element) in Java\n+     */\n+    public JsonIntegerFormatVisitor expectIntegerFormat(JavaType type) throws JsonMappingException;\n+\n+    /**\n+     * @param type Declared type of visited property (or List element) in Java\n+     */\n+    public JsonBooleanFormatVisitor expectBooleanFormat(JavaType type) throws JsonMappingException;\n+\n+    /**\n+     * @param type Declared type of visited property (or List element) in Java\n+     */\n+    public JsonNullFormatVisitor expectNullFormat(JavaType type) throws JsonMappingException;\n+\n+    /**\n+     * @param type Declared type of visited property (or List element) in Java\n+     */\n+    public JsonAnyFormatVisitor expectAnyFormat(JavaType type) throws JsonMappingException;\n \n     /**\n      * Method called when type is of Java {@link java.util.Map} type, and will\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonIntegerFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonIntegerFormatVisitor.java\n package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n \n public interface JsonIntegerFormatVisitor extends JsonValueFormatVisitor\n {\n+    /**\n+     * Method called to provide more exact type of number being serialized\n+     * (regardless of logical type, which may be {@link java.util.Date} or\n+     * {@link java.lang.Enum}, in addition to actual numeric types like\n+     * {@link java.lang.Integer}).\n+     */\n+    public void numberType(JsonParser.NumberType type);\n+\n     /**\n      * Default \"empty\" implementation, useful as the base to start on;\n      * especially as it is guaranteed to implement all the method\n      * of the interface, even if new methods are getting added.\n      */\n     public static class Base extends JsonValueFormatVisitor.Base\n-        implements JsonIntegerFormatVisitor { }\n+        implements JsonIntegerFormatVisitor {\n+        //@Override\n+        public void numberType(JsonParser.NumberType type) { }\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonNumberFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonNumberFormatVisitor.java\n package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n \n public interface JsonNumberFormatVisitor extends JsonValueFormatVisitor\n {\n+    /**\n+     * Method called to provide more exact type of number being serialized\n+     * (regardless of logical type, which may be {@link java.util.Date} or\n+     * {@link java.lang.Enum}, in addition to actual numeric types like\n+     * {@link java.lang.Integer}).\n+     */\n+    public void numberType(JsonParser.NumberType type);\n+\n     /**\n      * Default \"empty\" implementation, useful as the base to start on;\n      * especially as it is guaranteed to implement all the method\n      * of the interface, even if new methods are getting added.\n      */\n     public static class Base extends JsonValueFormatVisitor.Base\n-        implements JsonNumberFormatVisitor { }\n+        implements JsonNumberFormatVisitor {\n+        //@Override\n+        public void numberType(JsonParser.NumberType type) { }\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n      *\n      * @param type The type for which to generate schema\n      */\n+    @SuppressWarnings(\"deprecation\")\n     public JsonSchema generateJsonSchema(Class<?> type)\n         throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.*;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n import com.fasterxml.jackson.databind.util.StdDateFormat;\n \n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         throws JsonMappingException\n     {\n-        if (visitor != null) {\n-            boolean asNumber = _useTimestamp;\n-            if (!asNumber) {\n-                if (_customFormat == null) {\n-                    asNumber = visitor.getProvider().isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n-                }\n+        boolean asNumber = _useTimestamp;\n+        if (!asNumber) {\n+            if (_customFormat == null) {\n+                asNumber = visitor.getProvider().isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n             }\n-            if (asNumber) {\n-                JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);\n-                if (v2 != null) {\n-                    v2.format(JsonValueFormat.UTC_MILLISEC);\n-                }\n-            } else {\n-                JsonStringFormatVisitor v2 = visitor.expectStringFormat(typeHint);\n-                if (v2 != null) {\n-                    v2.format(JsonValueFormat.DATE_TIME);\n-                }\n+        }\n+        if (asNumber) {\n+            JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);\n+            if (v2 != null) {\n+                v2.numberType(JsonParser.NumberType.LONG);\n+                v2.format(JsonValueFormat.UTC_MILLISEC);\n+            }\n+        } else {\n+            JsonStringFormatVisitor v2 = visitor.expectStringFormat(typeHint);\n+            if (v2 != null) {\n+                v2.format(JsonValueFormat.DATE_TIME);\n             }\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor;\n import com.fasterxml.jackson.databind.node.ArrayNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n             throws JsonMappingException\n     {\n         // [JACKSON-684]: serialize as index?\n-        if (visitor != null) {\n-            if (visitor.getProvider().isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX)) {\n-                visitor.expectIntegerFormat(typeHint);\n-            } else {\n-        \t\tJsonStringFormatVisitor stringVisitor = visitor.expectStringFormat(typeHint);\n-        \t\tif (typeHint != null && stringVisitor != null) {\n-        \t\t\tif (typeHint.isEnumType()) {\n-        \t\t\t\tSet<String> enums = new LinkedHashSet<String>();\n-        \t\t\t\tfor (SerializedString value : _values.values()) {\n-        \t\t\t\t\tenums.add(value.getValue());\n-        \t\t\t\t}\n-        \t\t\t\tstringVisitor.enumTypes(enums);\n-        \t\t\t}\n-        \t\t}\n+        if (visitor.getProvider().isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX)) {\n+            JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);\n+            if (v2 != null) { // typically serialized as a small number (byte or int)\n+                v2.numberType(JsonParser.NumberType.INT);\n             }\n+        } else {\n+    \t\tJsonStringFormatVisitor stringVisitor = visitor.expectStringFormat(typeHint);\n+    \t\tif (typeHint != null && stringVisitor != null) {\n+    \t\t\tif (typeHint.isEnumType()) {\n+    \t\t\t\tSet<String> enums = new LinkedHashSet<String>();\n+    \t\t\t\tfor (SerializedString value : _values.values()) {\n+    \t\t\t\t\tenums.add(value.getValue());\n+    \t\t\t\t}\n+    \t\t\t\tstringVisitor.enumTypes(enums);\n+    \t\t\t}\n+    \t\t}\n         }\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         throws JsonMappingException\n     {\n-        JsonMapFormatVisitor v2 = (visitor == null) ? null : visitor.expectMapFormat(typeHint);\n+        JsonMapFormatVisitor v2 = (visitor == null) ? null : visitor.expectMapFormat(typeHint);        \n         if (v2 != null) {\n             v2.keyFormat(_keySerializer, _keyType);\n             JsonSerializer<?> valueSer = _valueSerializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor;\n \n /**\n  * Container class for serializers used for handling standard JDK-provided types.\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            if (visitor != null) visitor.expectIntegerFormat(typeHint);\n+            JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);\n+            if (v2 != null) {\n+                v2.numberType(JsonParser.NumberType.INT);\n+            }\n         }\n     }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            if (visitor != null) visitor.expectIntegerFormat(typeHint);\n+            JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);\n+            if (v2 != null) {\n+                v2.numberType(JsonParser.NumberType.INT);\n+            }\n         }\n     }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            if (visitor != null) visitor.expectNumberFormat(typeHint);\n+            JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);\n+            if (v2 != null) {\n+                v2.numberType(JsonParser.NumberType.LONG);\n+            }\n         }\n     }\n     \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            if (visitor != null) visitor.expectNumberFormat(typeHint);\n+            JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);\n+            if (v2 != null) {\n+                v2.numberType(JsonParser.NumberType.FLOAT);\n+            }\n         }\n     }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n             throws JsonMappingException\n         {\n-            if (visitor != null) visitor.expectNumberFormat(typeHint);\n+            JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);\n+            if (v2 != null) {\n+                v2.numberType(JsonParser.NumberType.DOUBLE);\n+            }\n         }\n     }\n     \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n             throws JsonMappingException\n         {\n-            if (visitor != null) visitor.expectNumberFormat(typeHint);\n+            // Hmmh. What should it be? Ideally should probably indicate BIG_DECIMAL\n+            // to ensure no information is lost? But probably won't work that well...\n+            JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);\n+            if (v2 != null) {\n+                v2.numberType(JsonParser.NumberType.BIG_DECIMAL);\n+            }\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;\n import com.fasterxml.jackson.databind.ser.BasicSerializerFactory;\n import com.fasterxml.jackson.databind.util.Provider;\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            if (visitor != null) {\n-                visitor.expectBooleanFormat(typeHint);\n-            }\n+            visitor.expectBooleanFormat(typeHint);\n         }\n     }\n     \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            if (visitor != null) {\n-                visitor.expectIntegerFormat(typeHint);\n+            JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);\n+            if (v2 != null) {\n+                v2.numberType(JsonParser.NumberType.INT);\n             }\n         }\n     }\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            if (visitor != null) {\n-                visitor.expectIntegerFormat(typeHint);\n+            JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);\n+            if (v2 != null) {\n+                v2.numberType(JsonParser.NumberType.LONG);\n             }\n         }\n     }\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            if (visitor != null) {\n-                visitor.expectAnyFormat(typeHint);\n-            }\n+            visitor.expectAnyFormat(typeHint);\n         }\n     }\n     \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            if (visitor != null) {\n-                visitor.expectStringFormat(typeHint);\n-            }\n+            visitor.expectStringFormat(typeHint);\n         }\n     }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            if (visitor != null) {\n-                visitor.expectStringFormat(typeHint);\n-            }\n+            visitor.expectStringFormat(typeHint);\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n             throws JsonMappingException\n     {\n-        visitor.expectStringFormat(typeHint);\n+        if (visitor != null) visitor.expectStringFormat(typeHint);\n     }\n }", "timestamp": 1353722437, "metainfo": ""}