{"sha": "1ea7bcc27418ef7daa508116e27ebbd7ebc20485", "log": "Merge pull request #143 from Airborn/master  Test case for Issue #138 @JsonIdentityReference not working with collections", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestObjectIdSerialization.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n+import com.fasterxml.jackson.annotation.JsonIdentityReference;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+/**\n+ * Tests for github ussues #138\n+ * https://github.com/FasterXML/jackson-databind/issues/138\n+ */\n+public class TestObjectIdSerialization extends BaseMapTest {\n+\n+    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\n+    static protected class Obj {\n+\n+        public int id;\n+        @JsonIdentityReference(alwaysAsId = true)\n+        public SetContainer objGroup;\n+\n+        public Obj(int id) {\n+            this.id = id;\n+        }\n+    }\n+\n+    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\n+    static protected class SetContainer {\n+\n+        public int id;\n+        @JsonIdentityReference(alwaysAsId = true)\n+//        @JsonSerialize(contentAs = Obj.class)\n+        public Set<Obj> objs = new LinkedHashSet<Obj>();\n+\n+        public SetContainer(int id) {\n+            this.id = id;\n+        }\n+    }\n+\n+    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\n+    static protected class ArrContainer {\n+\n+        public int id;\n+        @JsonIdentityReference(alwaysAsId = true)\n+        public Obj[] objs;\n+\n+        public ArrContainer(int id) {\n+            this.id = id;\n+        }\n+    }\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+    private final static String EXP_ARR_SET = \"{\\\"id\\\":4,\\\"objs\\\":[1,7]}\";\n+\n+    public void testArraySerialization() throws Exception {\n+        Obj o = new Obj(1);\n+        Obj o2 = new Obj(7);\n+        ArrContainer oa = new ArrContainer(4);\n+        oa.objs = new Obj[]{o, o2};\n+        String json = MAPPER.writeValueAsString(oa);\n+        assertEquals(EXP_ARR_SET, json);\n+    }\n+\n+    public void testCollectionSerialization() throws Exception {\n+        Obj o = new Obj(1);\n+        Obj o2 = new Obj(7);\n+        SetContainer os = new SetContainer(4);\n+        os.objs.add(o);\n+        os.objs.add(o2);\n+        String json = MAPPER.writeValueAsString(os);\n+        assertEquals(EXP_ARR_SET, json);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/PackageVersion.java.in\n+package @package@;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.Versioned;\n+import com.fasterxml.jackson.core.util.VersionUtil;\n+\n+/**\n+ * Automatically generated from PackageVersion.java.in during\n+ * packageVersion-generate execution of maven-replacer-plugin in\n+ * pom.xml.\n+ */\n+public final class PackageVersion implements Versioned {\n+    public final static Version VERSION = VersionUtil.parseVersion(\n+        \"@projectversion@\", \"@projectgroupid@\", \"@projectartifactid@\");\n+\n+    @Override\n+    public Version version() {\n+        return VERSION;\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/TestVersions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestVersions.java\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n+import com.fasterxml.jackson.databind.cfg.DatabindVersion;\n+import com.fasterxml.jackson.databind.cfg.PackageVersion;\n \n /**\n  * Tests to ensure that we get proper Version information via\n  */\n public class TestVersions extends com.fasterxml.jackson.test.BaseTest\n {\n-    // Not a good to do this, but has to do, for now...\n-    private final static int MAJOR_VERSION = 2;\n-    private final static int MINOR_VERSION = 2;\n-\n     private final static String GROUP_ID = \"com.fasterxml.jackson.core\";\n     private final static String ARTIFACT_ID = \"jackson-databind\";\n \n         assertVersion(new JacksonAnnotationIntrospector());\n     }\n \n+    public void testDatabindVersion()\n+    {\n+        assertEquals(PackageVersion.VERSION, DatabindVersion.instance.version());\n+    }\n+\n     /*\n     /**********************************************************\n     /* Helper methods\n     {\n         Version v = vers.version();\n         assertFalse(\"Should find version information (got \"+v+\")\", v.isUknownVersion());\n-        assertEquals(MAJOR_VERSION, v.getMajorVersion());\n-        assertEquals(MINOR_VERSION, v.getMinorVersion());\n-        // Check patch level initially, comment out for maint versions\n-//        assertEquals(0, v.getPatchLevel());\n-        assertEquals(GROUP_ID, v.getGroupId());\n-        assertEquals(ARTIFACT_ID, v.getArtifactId());\n+        assertEquals(PackageVersion.VERSION, v);\n     }\n }\n ", "timestamp": 1357846014, "metainfo": ""}