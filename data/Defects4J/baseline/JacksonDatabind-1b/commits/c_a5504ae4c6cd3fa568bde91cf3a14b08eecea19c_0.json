{"sha": "a5504ae4c6cd3fa568bde91cf3a14b08eecea19c", "log": "Merge branch 'master' of https://github.com/FasterXML/jackson-databind", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.deser.*;\n+import com.fasterxml.jackson.databind.introspect.*;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsontype.*;\n     public JsonSchema generateJsonSchema(Class<?> t) throws JsonMappingException {\n         return _serializerProvider(getSerializationConfig()).generateJsonSchema(t);\n     }\n+    \n+    /**\n+     * Generate <a href=\"http://json-schema.org/\">Json-schema</a>\n+     * instance for specified class.\n+     *\n+     * @param t The class to generate schema for\n+     */\n+    public void acceptJsonFormatVisitor(Class<?> t, JsonFormatVisitorWrapper visitor) throws JsonMappingException {\n+    \tif (t == null) {\n+    \t\tthrow new IllegalArgumentException(\"class must be provided\");\n+    \t}\n+    \t\n+    \tif (visitor == null) {\n+    \t\treturn;\n+    \t}\n+    \tDefaultSerializerProvider provider = _serializerProvider(getSerializationConfig());\n+        visitor.setProvider(provider);\n+    \tprovider.acceptJsonFormatVisitor(t, visitor);\n+    }\n \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n \n import com.fasterxml.jackson.core.*;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.std.CalendarSerializer;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;\n                 throws IOException, JsonGenerationException {\n             CalendarSerializer.instance.serialize(value.toGregorianCalendar(), jgen, provider);\n         }\n-\n+        \n         @Override\n         public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n             return CalendarSerializer.instance.getSchema(provider, typeHint);\n         }\n+\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) {\n+            CalendarSerializer.instance.acceptJsonFormatVisitor(visitor, null);\n+        }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n \n import com.fasterxml.jackson.core.*;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n public class DOMSerializer\n         jgen.writeString(writer.writeToString(value));\n     }\n \n-    @Override\n+\t@Override\n     public JsonNode getSchema(SerializerProvider provider, java.lang.reflect.Type typeHint)\n     {\n         // Well... it is serialized as String\n         return createSchemaNode(\"string\", true);\n     }\n+\n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+        visitor.expectAnyFormat(typeHint);\n+    }\n }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonAnyFormatVisitor.java\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+public interface JsonAnyFormatVisitor {\n+\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.java\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+import com.fasterxml.jackson.databind.JavaType;\n+\n+public interface JsonArrayFormatVisitor extends JsonFormatVisitorWithSerializerProvider {\n+\n+\tvoid itemsFormat(JavaType contentType);\n+\n+\tvoid itemsFormat(JsonFormatTypes format);\n+\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonBooleanFormatVisitor.java\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+public interface JsonBooleanFormatVisitor extends JsonValueFormatVisitor {\n+\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes.java\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+public enum JsonFormatTypes {\n+\t\n+\tSTRING,\n+\tNUMBER,\n+\tINTEGER,\n+\tBOOLEAN,\n+\tOBJECT,\n+\tARRAY,\n+\tNULL,\n+\tANY;\n+\t\n+\t\n+\t@JsonValue\n+\tpublic String value() {\n+\t\treturn this.name().toLowerCase();\n+\t}\n+\t\n+\t@JsonCreator\n+\tpublic static JsonFormatTypes forValue(String s) {\n+\t\treturn valueOf(s.toUpperCase());\n+\t}\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitable.java\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+\n+import com.fasterxml.jackson.databind.JavaType;\n+\n+/**\n+ * Marker interface for schema-aware serializers.\n+ */\n+public interface JsonFormatVisitable\n+{\n+    /**\n+     * Get the representation of the schema to which this serializer will conform.\n+     * @param typeHint TODO\n+     *\n+     * @return <a href=\"http://json-schema.org/\">Json-schema</a> for this serializer.\n+     */\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint);\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWithSerializerProvider.java\n+/**\n+ * \n+ */\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+\n+/**\n+ * @author jphelan\n+ *\n+ */\n+public interface JsonFormatVisitorWithSerializerProvider {\n+\n+\tpublic SerializerProvider getProvider();\n+\tpublic abstract void setProvider(SerializerProvider provider);\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.java\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+import com.fasterxml.jackson.databind.JavaType;\n+\n+public interface JsonFormatVisitorWrapper extends JsonFormatVisitorWithSerializerProvider{\n+\n+\tpublic JsonObjectFormatVisitor expectObjectFormat(JavaType convertedType);\n+\tpublic JsonArrayFormatVisitor expectArrayFormat(JavaType convertedType);\n+\tpublic JsonStringFormatVisitor expectStringFormat(JavaType convertedType);\n+\tpublic JsonNumberFormatVisitor expectNumberFormat(JavaType convertedType);\n+\tpublic JsonIntegerFormatVisitor expectIntegerFormat(JavaType convertedType);\n+\tpublic JsonBooleanFormatVisitor expectBooleanFormat(JavaType convertedType);\n+\tpublic JsonNullFormatVisitor expectNullFormat(JavaType convertedType);\n+\tpublic JsonAnyFormatVisitor expectAnyFormat(JavaType convertedType);\n+\t\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonIntegerFormatVisitor.java\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+public interface JsonIntegerFormatVisitor extends JsonValueFormatVisitor {\n+\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonNullFormatVisitor.java\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+public interface JsonNullFormatVisitor {\n+\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonNumberFormatVisitor.java\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+\n+public interface JsonNumberFormatVisitor extends JsonValueFormatVisitor{\n+\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonObjectFormatVisitor.java\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n+\n+public interface JsonObjectFormatVisitor extends JsonFormatVisitorWithSerializerProvider {\n+\n+\tpublic void property(BeanPropertyWriter writer);\n+\n+\tpublic void optionalProperty(BeanPropertyWriter writer);\n+\n+\tpublic void property(String name, JsonFormatVisitable handler, JavaType propertyTypeHint);\n+\n+\tpublic void optionalProperty(String name, JsonFormatVisitable handler,\n+\t\t\tJavaType propertyTypeHint);\n+\n+\tpublic void property(String name);\n+\t\n+\tpublic void optionalProperty(String name);\n+\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonStringFormatVisitor.java\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+public interface JsonStringFormatVisitor extends JsonValueFormatVisitor {\n+\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonValueFormat.java\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+/**\n+ * This enum represents the encoded format for a jsonSchema value type\n+ * @author jphelan\n+ *\n+ */\n+public enum JsonValueFormat {\n+\t/**\n+\t * This SHOULD be a date in ISO 8601 format of YYYY-MM-\n+      DDThh:mm:ssZ in UTC time.  This is the recommended form of date/\n+      timestamp.\n+\t */\n+\tDATE_TIME {\n+\t\t@Override\n+\t\tpublic String toString() { return \"date-time\"; }\n+\t},\n+\t\n+\t/**\n+\t * This SHOULD be a date in the format of YYYY-MM-DD.  It is\n+      recommended that you use the \"date-time\" format instead of \"date\"\n+      unless you need to transfer only the date part.\n+\t */\n+\tDATE {\n+\t\t@Override\n+\t\tpublic String toString() { return \"date\"; }\n+\t},\n+\t\n+\t/**\n+\t * This SHOULD be a time in the format of hh:mm:ss.  It is\n+      recommended that you use the \"date-time\" format instead of \"time\"\n+      unless you need to transfer only the time part.\n+\t */\n+\tTIME {\n+\t\t@Override\n+\t\tpublic String toString() { return \"time\"; }\n+\t},\n+\t\n+\t/**\n+\t * This SHOULD be the difference, measured in\n+      milliseconds, between the specified time and midnight, 00:00 of\n+      January 1, 1970 UTC.  The value SHOULD be a number (integer or\n+      float).\n+\t */\n+\tUTC_MILLISEC {\n+\t\t@Override\n+\t\tpublic String toString() { return \"utc-millisec\"; }\n+\t},\n+\t\n+\t/**\n+\t * A regular expression, following the regular expression\n+  \t  specification from ECMA 262/Perl 5.\n+\t */\n+\tREGEX {\n+\t\t@Override\n+\t\tpublic String toString() { return \"regex\"; }\n+\t},\n+\t\n+\t/**\n+\t * This is a CSS color (like \"#FF0000\" or \"red\"), based on CSS\n+  \t\t2.1 [W3C.CR-CSS21-20070719].\n+\t */\n+\tCOLOR {\n+\t\t@Override\n+\t\tpublic String toString() { return \"color\"; }\n+\t},\n+\t\n+\t/**\n+\t * This is a CSS style definition (like \"color: red; background-\n+  \t\tcolor:#FFF\"), based on CSS 2.1 [W3C.CR-CSS21-20070719].\n+\t */\n+\tSTYLE {\n+\t\t@Override\n+\t\tpublic String toString() { return \"style\"; }\n+\t},\n+\t\n+\t/**\n+\t * This SHOULD be a phone number (format MAY follow E.123).\n+\t */\n+\tPHONE {\n+\t\t@Override\n+\t\tpublic String toString() { return \"phone\"; }\n+\t},\n+\t\n+\t/**\n+\t * This value SHOULD be a URI..\n+\t */\n+\tURI {\n+\t\t@Override\n+\t\tpublic String toString() { return \"uri\"; }\n+\t},\n+\t\n+\t/**\n+\t * This SHOULD be an email address.\n+\t */\n+\tEMAIL {\n+\t\t@Override\n+\t\tpublic String toString() { return \"email\"; }\n+\t},\n+\t/**\n+\t * This SHOULD be an ip version 4 address.\n+\t */\n+\tIP_ADDRESS {\n+\t\t@Override\n+\t\tpublic String toString() { return \"ip-address\"; }\n+\t},\n+\t\n+\t/**\n+\t * This SHOULD be an ip version 6 address.\n+\t */\n+\tIPV6 {\n+\t\t@Override\n+\t\tpublic String toString() { return \"ipv6\"; }\n+\t},\n+\t\n+\t/**\n+\t * This SHOULD be a host-name.\n+\t */\n+\tHOST_NAME {\n+\t\t@Override\n+\t\tpublic String toString() { return \"host-name\"; }\n+\t}\n+\t\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonValueFormatVisitor.java\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+import java.util.Set;\n+\n+public interface JsonValueFormatVisitor {\n+\n+\tvoid format(JsonValueFormat format);\n+\n+\tvoid enumTypes(Set<String> enums);\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyFilter.java\n \n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n \n /**\n      */\n     public void depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode,\n     \t\tSerializerProvider provider);\n+    \n+    /**\n+     * Method called by {@link BeanSerializer} to let the filter determine whether, and in what\n+     * form the given property exist within the parent, or root, schema. Filters can omit\n+     * adding the property to the node, or choose the form of the schema value for the property\n+     * \n+     * @param writer Bean property serializer to use to create schema value\n+     * @param objectVisitor JsonObjectFormatVisitor which should be aware of \n+     * the property's existence\n+     * @param provider Provider that can be used for accessing dynamic aspects of serialization\n+     * \tprocessing\n+     * \n+     */\n+    public void depositSchemaProperty(BeanPropertyWriter writer, JsonObjectFormatVisitor objectVisitor,\n+    \t\tSerializerProvider provider);\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n      * @param type The type for which to generate schema\n      */\n     public JsonSchema generateJsonSchema(Class<?> type)\n+            throws JsonMappingException\n+        {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"A class must be provided\");\n+            }\n+            /* no need for embedded type information for JSON schema generation (all\n+             * type information it needs is accessible via \"untyped\" serializer)\n+             */\n+            JsonSerializer<Object> ser = findValueSerializer(type, null);\n+            JsonNode schemaNode = (ser instanceof SchemaAware) ?\n+                    ((SchemaAware) ser).getSchema(this, null) : \n+                    JsonSchema.getDefaultSchemaNode();\n+            if (!(schemaNode instanceof ObjectNode)) {\n+                throw new IllegalArgumentException(\"Class \" + type.getName() +\n+                        \" would not be serialized as a JSON object and therefore has no schema\");\n+            }\n+            return new JsonSchema((ObjectNode) schemaNode);\n+        }\n+    \n+    /**\n+     * The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\n+     * to to expose the format of the given to to the given visitor\n+     *\n+     * @param type The type for which to generate format\n+     * @param visitor the visitor to accept the format\n+     */\n+    public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitorWrapper visitor)\n         throws JsonMappingException\n     {\n         if (type == null) {\n          * type information it needs is accessible via \"untyped\" serializer)\n          */\n         JsonSerializer<Object> ser = findValueSerializer(type, null);\n-        JsonNode schemaNode = (ser instanceof SchemaAware) ?\n-                ((SchemaAware) ser).getSchema(this, null) : \n-                JsonSchema.getDefaultSchemaNode();\n-        if (!(schemaNode instanceof ObjectNode)) {\n-            throw new IllegalArgumentException(\"Class \" + type.getName() +\n-                    \" would not be serialized as a JSON object and therefore has no schema\");\n-        }\n-        return new JsonSchema((ObjectNode) schemaNode);\n-    }\n-\n+        if (ser instanceof JsonFormatVisitable) {\n+        \t((JsonFormatVisitable) ser).acceptJsonFormatVisitor(visitor, constructType(type));\n+        } else {\n+        \tvisitor.expectAnyFormat(constructType(type));\n+        }\n+    }\n+    \n     /**\n      * Method that can be called to see if this serializer provider\n      * can find a serializer for an instance of given class.\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java\n \n import com.fasterxml.jackson.core.*;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n /**\n     {\n         return null;\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+        ;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n import com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase;\n     @Override protected JsonNode contentSchema() {\n         return createSchemaNode(\"string\", true);\n     }\n+\n+\t@Override\n+\tprotected void acceptContentVisitor(JsonArrayFormatVisitor visitor) {\n+\t\tvisitor.itemsFormat(JsonFormatTypes.STRING);\n+\t\t\n+\t}\n \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.ser.BeanPropertyFilter;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n \t\t\t\tBeanSerializerBase.depositSchemaProperty(writer, propertiesNode, provider);\n \t\t\t}\n \t\t}\n+\t\t\n+\t\tpublic void depositSchemaProperty(BeanPropertyWriter writer,\n+\t\t\t\tJsonObjectFormatVisitor objectVisitor, SerializerProvider provider) {\n+\t\t\tif (_propertiesToInclude.contains(writer.getName())) {\n+\t\t\t\tBeanSerializerBase.depositSchemaProperty(writer, objectVisitor);\n+\t\t\t}\n+\t\t}\n \t}\n \n \t/**\n \t\t\t\tBeanSerializerBase.depositSchemaProperty(writer, propertiesNode, provider);\n \t\t\t}\n \t\t}\n+\t\t\n+\t\tpublic void depositSchemaProperty(BeanPropertyWriter writer,\n+\t\t\t\tJsonObjectFormatVisitor objectVisitor, SerializerProvider provider) {\n+\t\t\tif (!_propertiesToExclude.contains(writer.getName())) {\n+\t\t\t\tBeanSerializerBase.depositSchemaProperty(writer, objectVisitor);\n+\t\t\t}\n+\t\t}\n \t}\n \n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n         o.put(\"items\", createSchemaNode(\"string\"));\n         return o;\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \tvisitor.expectArrayFormat(null).itemsFormat(JsonFormatTypes.STRING);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n import com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase;\n     @Override protected JsonNode contentSchema() {\n         return createSchemaNode(\"string\", true);\n     }\n+    \n+\t@Override\n+\tprotected void acceptContentVisitor(JsonArrayFormatVisitor visitor) {\n+\t\tvisitor.itemsFormat(JsonFormatTypes.STRING);\n+\t\t\n+\t}\n \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n     public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n         return null;\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) { \n+    \tvisitor.expectAnyFormat(typeHint);\n+    }\n \n     protected void failForEmpty(Object value) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n         }\n         return o;\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+        /* 15-Jan-2010, tatu: This should probably be rewritten, given that\n+         *    more information about content type is actually being explicitly\n+         *    passed. So there should be less need to try to re-process that\n+         *    information.\n+         */\n+        //ObjectNode o = createSchemaNode(\"array\", true);\n+        JsonArrayFormatVisitor arrayVisitor = \n+        \t\tvisitor.expectArrayFormat(typeHint);\n+        JavaType contentType = null;\n+        if (typeHint != null) {\n+            contentType = typeHint.getContentType();\n+            if (contentType == null) { // could still be parametrized (Iterators)\n+                if (typeHint instanceof ParameterizedType) {\n+                    Type[] typeArgs = ((ParameterizedType) typeHint).getActualTypeArguments();\n+                    if (typeArgs.length == 1) {\n+                        contentType = visitor.getProvider().constructType(typeArgs[0]);\n+                    }\n+                }\n+            }\n+        }\n+        if (contentType == null && _elementType != null) {\n+            contentType = _elementType;\n+        }\n+        if (contentType != null) {\n+            JsonNode schemaNode = null;\n+            arrayVisitor.itemsFormat(contentType);\n+        }\n+    }\n \n     protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,\n             Class<?> type, SerializerProvider provider) throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.JsonSerializableSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n public abstract class BeanSerializerBase\n     extends StdSerializer<Object>\n     implements ContextualSerializer, ResolvableSerializer,\n-        SchemaAware\n+        JsonFormatVisitable, SchemaAware\n {\n     final protected static BeanPropertyWriter[] NO_PROPS = new BeanPropertyWriter[0];\n \n         return (value == null) ? false : value.booleanValue();\n     }\n     \n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \t//deposit your output format \n+    \tJsonObjectFormatVisitor objectVisitor = visitor.expectObjectFormat(typeHint);\n+ \n+        if (_propertyFilterId != null) {\n+        \ttry {\n+        \t\tBeanPropertyFilter filter = findFilter(visitor.getProvider());\n+\t\t\t\tfor (int i = 0; i < _props.length; i++) {\n+\t\t            BeanPropertyWriter prop = _props[i];\n+\t\t            filter.depositSchemaProperty(prop, objectVisitor, visitor.getProvider());\n+\t\t        }\n+\t\t\t\treturn;\n+\t\t\t} catch (JsonMappingException e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\n+\t\t\t}\n+        } \n+        \t\t\n+        for (int i = 0; i < _props.length; i++) {\n+            BeanPropertyWriter prop = _props[i];\n+\n+            JavaType propType = prop.getSerializationType();\n+            BeanSerializerBase.depositSchemaProperty(prop, objectVisitor);\n+        }\n+    }\n+\n+    \n     /**\n      * \tAttempt to add the output of the given {@link BeanPropertyWriter} in the given {@link ObjectNode}.\n      * \tOtherwise, add the default schema {@link JsonNode} in place of the writer's output\n         }\n         propertiesNode.put(writer.getName(), schemaNode);\n     }\n+    \n+    /**\n+\t * \tAttempt to add the output of the given {@link BeanPropertyWriter} in the \n+\t *  given {@link JsonObjectFormatVisitor}.\n+\t * \n+\t * @param writer Bean property serializer to use to create schema value\n+     * @param visitor ObjectVisitor which cab receive the propert\n+\t */\n+\tpublic static void depositSchemaProperty(BeanPropertyWriter writer, JsonObjectFormatVisitor objectVisitor) {\n+\t\tif (isPropertyRequired(writer, objectVisitor.getProvider())) {\n+\t\t\tobjectVisitor.property(writer); \n+\t\t} else {\n+\t\t\tobjectVisitor.optionalProperty(writer);\n+\t\t}\n+\t}\n+   \n+\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java\n \n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n-\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n \n /**\n  * Serializer used for primitive boolean, as well as java.util.Boolean\n     {\n         return createSchemaNode(\"boolean\", !_forPrimitive);\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+        visitor.expectBooleanFormat(typeHint);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n import com.fasterxml.jackson.databind.util.StdDateFormat;\n \n         }\n         return createSchemaNode(asNumber ? \"number\" : \"string\", true);\n     }\n+    \n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+        //todo: (ryan) add a format for the date in the schema?\n+        boolean asNumber = _useTimestamp;\n+        if (!asNumber) {\n+            if (_customFormat == null) {\n+                asNumber = visitor.getProvider().isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n+            }\n+        }\n+        if (asNumber) {\n+        \tvisitor.expectNumberFormat(typeHint).format(JsonValueFormat.UTC_MILLISEC);\n+        } else {\n+        \tvisitor.expectStringFormat(typeHint).format(JsonValueFormat.DATE_TIME);\n+        }\n+    }\n \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n         }\n         return o;\n     }\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \tJsonObjectFormatVisitor objectVisitor = visitor.expectObjectFormat(typeHint);\n+        if (typeHint instanceof ParameterizedType) {\n+            Type[] typeArgs = ((ParameterizedType) typeHint).getActualTypeArguments();\n+            if (typeArgs.length == 2) {\n+                JavaType enumType = visitor.getProvider().constructType(typeArgs[0]);\n+                JavaType valueType = visitor.getProvider().constructType(typeArgs[1]);\n+                ObjectNode propsNode = JsonNodeFactory.instance.objectNode();\n+                Class<Enum<?>> enumClass = (Class<Enum<?>>) enumType.getRawClass();\n+                for (Enum<?> enumValue : enumClass.getEnumConstants()) {\n+                \tJsonSerializer<Object> ser;\n+                \tString name = visitor.getProvider().getConfig().getAnnotationIntrospector().findEnumValue((Enum<?>)enumValue);\n+                \ttry {\n+                \t\tser = visitor.getProvider().findValueSerializer(valueType.getRawClass(), _property);\n+                \t\tif (ser instanceof JsonFormatVisitable)  {\n+                \t\t\tobjectVisitor.property(name, (JsonFormatVisitable) ser, valueType);\n+                \t\t} \n+                \t\tcontinue;\n+                \t} catch (JsonMappingException e) {\n+                \t\t//TODO: log error\n+                \t}\n+                \tobjectVisitor.property(name);\n+                }\n+            }\n+        }\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n \n import java.io.IOException;\n import java.lang.reflect.Type;\n+import java.util.HashSet;\n+import java.util.Set;\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor;\n import com.fasterxml.jackson.databind.node.ArrayNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n         }\n         return objectNode;\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+        // [JACKSON-684]: serialize as index?\n+    \tif (visitor.getProvider().isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX)) {\n+    \t\tvisitor.expectIntegerFormat(typeHint);\n+    \t} else {\n+    \t\tJsonStringFormatVisitor stringVisitor = visitor.expectStringFormat(typeHint);\n+    \t\tif (typeHint != null) {\n+    \t\t\tif (typeHint.isEnumType()) {\n+    \t\t\t\tSet<String> enums = new HashSet<String>();\n+    \t\t\t\tfor (SerializedString value : _values.values()) {\n+    \t\t\t\t\tenums.add(value.getValue());\n+    \t\t\t\t}\n+    \t\t\t\tstringVisitor.enumTypes(enums);\n+    \t\t\t}\n+    \t\t}\n+    \t}\n+    }\n \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n @JacksonStdImpl\n public class JsonValueSerializer\n     extends StdSerializer<Object>\n-    implements ContextualSerializer, SchemaAware\n+    implements ContextualSerializer, JsonFormatVisitable, SchemaAware\n {\n     protected final Method _accessorMethod;\n \n                 ((SchemaAware) _valueSerializer).getSchema(provider, null) :\n                 JsonSchema.getDefaultSchemaNode();\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \tif (_valueSerializer instanceof JsonFormatVisitable) {\n+    \t\t((JsonFormatVisitable) _valueSerializer).acceptJsonFormatVisitor(visitor, null); \n+    \t} else {\n+    \t\tvisitor.expectAnyFormat(typeHint);\n+    \t}\n+    }\n \n     protected boolean isNaturalTypeWithStdHandling(Class<?> rawType, JsonSerializer<?> ser)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n         // there's no way to statically determine the keys, so the \"Entries\" can't be determined.\n         return o;\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \tvisitor.expectObjectFormat(null);\n+    }\n \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n \n /**\n  * This is a simple dummy serializer that will just output literal\n     {\n         return createSchemaNode(\"null\");\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \tvisitor.expectNullFormat(typeHint);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n \n /**\n  * Container class for serializers used for handling standard JDK-provided types.\n         {\n             return createSchemaNode(\"integer\", true);\n         }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectIntegerFormat(typeHint);\n+        }\n     }\n \n     /**\n         {\n             return createSchemaNode(\"integer\", true);\n         }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectIntegerFormat(typeHint);\n+        }\n     }\n \n     @JacksonStdImpl\n         {\n             return createSchemaNode(\"number\", true);\n         }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectNumberFormat(typeHint);\n+        }\n     }\n     \n     @JacksonStdImpl\n         public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n         {\n             return createSchemaNode(\"number\", true);\n+        }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectNumberFormat(typeHint);\n         }\n     }\n \n         public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n         {\n             return createSchemaNode(\"number\", true);\n+        }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectNumberFormat(typeHint);\n         }\n     }\n     \n         {\n             return createSchemaNode(\"number\", true);\n         }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectNumberFormat(typeHint);\n+        }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n         }\n         return o;\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \tvisitor.expectArrayFormat(typeHint).itemsFormat(_elementType);\n+    }\n \n     protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,\n             Class<?> type, SerializerProvider provider) throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n         // type not really known, but since it is a JSON string:\n         return createSchemaNode(\"string\", true);\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+        visitor.expectStringFormat(typeHint);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n import com.fasterxml.jackson.core.*;\n \n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.JsonSerializable;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.JsonSerializableSchema;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n         }\n         return mapper;\n     }\n+\n+\t@Override\n+\tpublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+\t{\n+\t\tvisitor.expectAnyFormat(typeHint);\n+\t}\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java\n \n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n-\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;\n \n /**\n  * Compared to regular {@link java.util.Date} serialization, we do use String\n         //todo: (ryan) add a format for the date in the schema?\n         return createSchemaNode(\"string\", true);\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \tvisitor.expectStringFormat(typeHint).format(JsonValueFormat.DATE_TIME);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java\n \n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n-\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;\n \n @JacksonStdImpl\n public class SqlTimeSerializer\n     {\n         return createSchemaNode(\"string\", true);\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \tvisitor.expectStringFormat(typeHint).format(JsonValueFormat.DATE_TIME);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java\n import java.lang.reflect.Type;\n import java.util.*;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n \n /**\n         o.put(\"items\", contentSchema());\n         return o;\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \tacceptContentVisitor(visitor.expectArrayFormat(typeHint));\n+    }\n \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n \n-    protected abstract JsonNode contentSchema();    \n+    protected abstract JsonNode contentSchema();\n+    \n+    protected abstract void acceptContentVisitor(JsonArrayFormatVisitor visitor);    \n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n             o.put(\"items\", createSchemaNode(\"boolean\"));\n             return o;\n         }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.BOOLEAN);\n+        }\n     }\n \n     /**\n             o.put(\"items\", itemSchema);\n             return o;\n         }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.STRING);\n+        }\n     }\n \n     @JacksonStdImpl\n             ObjectNode o = createSchemaNode(\"array\", true);\n             o.put(\"items\", createSchemaNode(\"integer\"));\n             return o;\n+        }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.INTEGER);\n         }\n     }\n \n             o.put(\"items\", itemSchema);\n             return o;\n         }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.STRING);\n+        }\n     }\n \n     @JacksonStdImpl\n             ObjectNode o = createSchemaNode(\"array\", true);\n             o.put(\"items\", createSchemaNode(\"integer\"));\n             return o;\n+        }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.INTEGER);\n         }\n     }\n \n             o.put(\"items\", createSchemaNode(\"number\", true));\n             return o;\n         }\n+\n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.NUMBER);\n+        }\n     }\n \n     @JacksonStdImpl\n             o.put(\"items\", createSchemaNode(\"number\"));\n             return o;\n         }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.NUMBER);\n+        }\n     }\n \n     @JacksonStdImpl\n             o.put(\"items\", createSchemaNode(\"number\"));\n             return o;\n         }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.NUMBER);\n+        }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.BasicSerializerFactory;\n import com.fasterxml.jackson.databind.util.Provider;\n \n         {\n             return createSchemaNode(\"boolean\", true);\n         }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectBooleanFormat(typeHint);\n+        }\n     }\n     \n     public final static class AtomicIntegerSerializer\n         {\n             return createSchemaNode(\"integer\", true);\n         }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectIntegerFormat(typeHint);\n+        }\n     }\n \n     public final static class AtomicLongSerializer\n         {\n             return createSchemaNode(\"integer\", true);\n         }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectIntegerFormat(typeHint);\n+        }\n     }\n     \n     public final static class AtomicReferenceSerializer\n         public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n         {\n             return createSchemaNode(\"any\", true);\n+        }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectAnyFormat(typeHint);\n         }\n     }\n     \n         {\n             return createSchemaNode(\"string\", true);\n         }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectStringFormat(typeHint);\n+        }\n     }\n \n     /**\n         {\n             return createSchemaNode(\"string\", true);\n         }\n+        \n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectStringFormat(typeHint);\n+        }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n \n import com.fasterxml.jackson.core.*;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n \n /**\n  * Specialized serializer that can be used as the generic key\n     {\n         return createSchemaNode(\"string\");\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \tvisitor.expectStringFormat(typeHint);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java\n \n import com.fasterxml.jackson.core.*;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n public abstract class StdScalarSerializer<T>\n     {\n         return createSchemaNode(\"string\", true);\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+        visitor.expectAnyFormat(typeHint);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n  */\n public abstract class StdSerializer<T>\n     extends JsonSerializer<T>\n-    implements SchemaAware\n+    implements JsonFormatVisitable, SchemaAware\n {\n     /**\n      * Nominal type supported, usually declared type of\n         return schema;\n     }\n     \n+    /**\n+     * Default implementation specifies no format. This behavior is usually\n+     * overriden by custom serializers.\n+     */\n+//  @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) { \n+    \tvisitor.expectAnyFormat(typeHint);\n+    }\n+            \n     /*\n     /**********************************************************\n     /* Helper methods for exception handling\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java\n \n import com.fasterxml.jackson.core.*;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n \n /**\n  * This is the special serializer for regular {@link java.lang.String}s.\n     {\n         return createSchemaNode(\"string\", true);\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \tvisitor.expectStringFormat(typeHint);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n \n import com.fasterxml.jackson.core.*;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n         return createSchemaNode(\"string\", true);\n     }\n     \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \tvisitor.expectStringFormat(typeHint);\n+    }\n+    \n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java\n \n import com.fasterxml.jackson.core.*;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n          */\n         return createSchemaNode(\"any\", true);\n     }\n+    \n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+        /* 01-Jan-2010, tatu: Not 100% sure what we should say here:\n+         *   type is basically not known. This seems closest\n+         *   approximation\n+         */\n+    \tvisitor.expectAnyFormat(typeHint);\n+    }\n }    \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n         return type;\n     }\n \n+    /**\n+     * Helper method called to try to find whether there is an annotation that\n+     * specifies key serializer to use: either attached to property (higher priority)\n+     * or class of key type (lower priority).\n+     * If so, will try to instantiate key serializer and return it; otherwise returns null.\n+     */\n     protected JsonSerializer<Object> _findKeySerializer(SerializerProvider prov,\n             Annotated a, BeanProperty property)\n         throws JsonMappingException\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n import java.text.SimpleDateFormat;\n import java.util.*;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.type.TypeReference;\n \n             CustomMap result = new CustomMap();\n             result.put(\"x\", jp.getText());\n             return result;\n+        }\n+    }\n+\n+    static class KeyType {\n+        protected String value;\n+        \n+        private KeyType(String v, boolean bogus) {\n+            value = v;\n+        }\n+\n+        @JsonCreator\n+        public static KeyType create(String v) {\n+            return new KeyType(v, true);\n         }\n     }\n     \n         assertEquals(key, ob);\n     }\n \n+    // Test confirming that @JsonCreator may be used with Map Key types\n+    public void testKeyWithCreator() throws Exception\n+    {\n+        // first, key should deserialize normally:\n+        KeyType key = MAPPER.readValue(quote(\"abc\"), KeyType.class);\n+        assertEquals(\"abc\", key.value);\n+\n+        Map<KeyType,Integer> map = MAPPER.readValue(\"{\\\"foo\\\":3}\", new TypeReference<Map<KeyType,Integer>>() {} );\n+        assertEquals(1, map.size());\n+        key = map.keySet().iterator().next();\n+        assertEquals(\"foo\", key.value);\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java\n     /**********************************************************\n      */\n \n+    final ObjectMapper MAPPER = new ObjectMapper();\n+    \n     // Test [JACKSON-220]\n     public void testMapSerializer() throws IOException\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        assertEquals(\"\\\"{a=b, c=d}\\\"\", m.writeValueAsString(new PseudoMap(\"a\", \"b\", \"c\", \"d\")));\n+        assertEquals(\"\\\"{a=b, c=d}\\\"\", MAPPER.writeValueAsString(new PseudoMap(\"a\", \"b\", \"c\", \"d\")));\n     }\n \n     // Test [JACKSON-314]\n     // [JACKSON-499], problems with map entries, values\n     public void testMapKeyValueSerialization() throws IOException\n     {\n-        ObjectMapper m = new ObjectMapper();\n         Map<String,String> map = new HashMap<String,String>();\n         map.put(\"a\", \"b\");\n-        assertEquals(\"[\\\"a\\\"]\", m.writeValueAsString(map.keySet()));\n-        assertEquals(\"[\\\"b\\\"]\", m.writeValueAsString(map.values()));\n+        assertEquals(\"[\\\"a\\\"]\", MAPPER.writeValueAsString(map.keySet()));\n+        assertEquals(\"[\\\"b\\\"]\", MAPPER.writeValueAsString(map.values()));\n \n         // TreeMap has similar inner class(es):\n         map = new TreeMap<String,String>();\n         map.put(\"c\", \"d\");\n-        assertEquals(\"[\\\"c\\\"]\", m.writeValueAsString(map.keySet()));\n-        assertEquals(\"[\\\"d\\\"]\", m.writeValueAsString(map.values()));\n+        assertEquals(\"[\\\"c\\\"]\", MAPPER.writeValueAsString(map.keySet()));\n+        assertEquals(\"[\\\"d\\\"]\", MAPPER.writeValueAsString(map.values()));\n \n         // and for [JACKSON-533], same for concurrent maps\n         map = new ConcurrentHashMap<String,String>();\n         map.put(\"e\", \"f\");\n-        assertEquals(\"[\\\"e\\\"]\", m.writeValueAsString(map.keySet()));\n-        assertEquals(\"[\\\"f\\\"]\", m.writeValueAsString(map.values()));\n+        assertEquals(\"[\\\"e\\\"]\", MAPPER.writeValueAsString(map.keySet()));\n+        assertEquals(\"[\\\"f\\\"]\", MAPPER.writeValueAsString(map.values()));\n     }\n \n     // For [JACKSON-574]\n         // but can be changed\n         assertEquals(\"{\\\"a\\\":6,\\\"b\\\":3}\", m.writer(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS).writeValueAsString(map));\n     }\n-    \n }", "timestamp": 1345149532, "metainfo": ""}