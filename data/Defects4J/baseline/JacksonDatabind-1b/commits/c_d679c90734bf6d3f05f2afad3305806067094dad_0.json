{"sha": "d679c90734bf6d3f05f2afad3305806067094dad", "log": "Start adding test to ensure Externalizable works", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/interop/TestExternalizable.java\n+package com.fasterxml.jackson.databind.interop;\n+\n+import java.io.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Simple test to ensure that we can make POJOs use Jackson\n+ * for JDK serialization, via {@link Externalizable}\n+ * \n+ * @since 2.1\n+ */\n+public class TestExternalizable extends BaseMapTest\n+{\n+    /* Not pretty, but needed to make ObjectMapper accessible from\n+     * static context (alternatively could use ThreadLocal).\n+     */\n+    static class MapperHolder {\n+        private final ObjectMapper mapper = new ObjectMapper();\n+        private final static MapperHolder instance = new MapperHolder();\n+        public static ObjectMapper mapper() { return instance.mapper; }\n+    }\n+\n+    /**\n+     * Helper class we need to adapt {@link ObjectOutput} as\n+     * {@link OutputStream}\n+     */\n+    final static class ExternalizableOutput extends OutputStream\n+    {\n+        private final ObjectOutput out;\n+\n+        public ExternalizableOutput(ObjectOutput out) {\n+            this.out = out;\n+        }\n+        \n+        @Override\n+        public void flush() throws IOException {\n+            out.flush();\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            out.close();\n+        }\n+        \n+        @Override\n+        public void write(int ch) throws IOException {\n+            out.write(ch);\n+        }\n+\n+        @Override\n+        public void write(byte[] data) throws IOException {\n+            out.write(data);\n+        }\n+        \n+        @Override\n+        public void write(byte[] data, int offset, int len) throws IOException {\n+            out.write(data, offset, len);\n+        }\n+    }\n+    \n+    static class MyPojo implements Externalizable\n+    {\n+        public int id;\n+        public String name;\n+        public int[] values;\n+\n+        protected MyPojo() { } // for deserialization\n+        public MyPojo(int id, String name, int[] values)\n+        {\n+            this.id = id;\n+            this.name = name;\n+            this.values = values;\n+        }\n+\n+        public void readExternal(ObjectInput in) throws IOException\n+        {\n+            \n+        }\n+\n+        public void writeExternal(ObjectOutput oo) throws IOException\n+        {\n+            MapperHolder.mapper().writeValue(new ExternalizableOutput(oo), this);\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Actual tests\n+    /**********************************************************\n+     */\n+    \n+    public void testSerializeAsExternalizable() throws Exception\n+    {\n+        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+        ObjectOutputStream obs = new ObjectOutputStream(bytes);\n+        final MyPojo input = new MyPojo(13, \"Foobar\", new int[] { 1, 2, 3 } );\n+        obs.writeObject(input);\n+        obs.close();\n+        byte[] b = bytes.toByteArray();\n+\n+        // Ok: just verify it contains stuff \n+        byte[] json = MapperHolder.mapper().writeValueAsBytes(input);\n+        \n+        System.out.println(\"Length: \"+b.length+\" vs \"+json.length);\n+        System.out.println();\n+        System.out.println(\"Raw: [\"+bytes.toString(\"ISO-8859-1\")+\"]\");\n+    }\n+}", "timestamp": 1345248653, "metainfo": ""}