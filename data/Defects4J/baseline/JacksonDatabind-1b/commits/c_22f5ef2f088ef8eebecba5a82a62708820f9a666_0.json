{"sha": "22f5ef2f088ef8eebecba5a82a62708820f9a666", "log": "Add support for ignoring map-property values too", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n \n     @SuppressWarnings(\"unchecked\")\n     protected MapSerializer(MapSerializer src, BeanProperty property,\n-            JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer)\n+            JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer,\n+            HashSet<String> ignored)\n     {\n         super(Map.class, false);\n-        _ignoredEntries = src._ignoredEntries;\n+        _ignoredEntries = ignored;\n         _keyType = src._keyType;\n         _valueType = src._valueType;\n         _valueTypeIsStatic = src._valueTypeIsStatic;\n     }\n \n     public MapSerializer withResolved(BeanProperty property,\n-            JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer)\n-    {\n-        return new MapSerializer(this, property, keySerializer, valueSerializer);\n+            JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer,\n+            HashSet<String> ignored)\n+    {\n+        return new MapSerializer(this, property, keySerializer, valueSerializer, ignored);\n     }\n     \n     public static MapSerializer construct(String[] ignoredList, JavaType mapType,\n         } else if (keySer instanceof ContextualSerializer) {\n             keySer = ((ContextualSerializer) keySer).createContextual(provider, property);\n         }\n-        return withResolved(property, keySer, ser);\n+        HashSet<String> ignored = this._ignoredEntries;\n+        AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n+        if (intr != null && property != null) {\n+            String[] moreToIgnore = intr.findPropertiesToIgnore(property.getMember());\n+            if (moreToIgnore != null) {\n+                ignored = (ignored == null) ? new HashSet<String>() : new HashSet<String>(ignored);\n+                for (String str : moreToIgnore) {\n+                    ignored.add(str);\n+                }\n+            }\n+        }\n+        return withResolved(property, keySer, ser, ignored);\n     }\n \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/filter/TestIgnorePropsForSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/filter/TestIgnorePropsForSerialization.java\n         public int y = 2;\n         public int z = 3;\n     }\n+\n+    static class MapWrapper {\n+        @JsonIgnoreProperties({\"a\"})\n+        public final HashMap<String,Integer> value = new HashMap<String,Integer>();\n+        {\n+            value.put(\"a\", 1);\n+            value.put(\"b\", 2);\n+        }\n+    }\n     \n     /*\n     /****************************************************************\n                 MAPPER.writeValueAsString(new WrapperWithPropIgnore()));\n     }\n \n+    public void testIgnoreWithMapProperty() throws Exception\n+    {\n+        assertEquals(\"{\\\"value\\\":{\\\"b\\\":2}}\", MAPPER.writeValueAsString(new MapWrapper()));\n+    }\n+    \n     public void testIgnoreViaPropsAndClass() throws Exception\n     {\n         assertEquals(\"{\\\"value\\\":{\\\"y\\\":2}}\",", "timestamp": 1329800329, "metainfo": ""}