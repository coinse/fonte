{"sha": "7555fa2b7e070b2bc50bfc0bd4e18526e3962b1f", "log": "Implemented [JACKSON-690]: pass DeserializationContext to ValueInstantiator.createXxx methods", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n             return deserializeFromObjectUsingNonDefault(jp, ctxt);\n         }\n \n-        final Object bean = _valueInstantiator.createUsingDefault();\n+        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n         if (_injectables != null) {\n             injectValues(ctxt, bean);\n         }\n         return bean;\n     }\n \n-    /**\n-     * @since 1.9\n-     */\n     protected Object deserializeFromObjectUsingNonDefault(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {        \n         if (_delegateDeserializer != null) {\n-            return _valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp, ctxt));\n+            return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n         }\n         if (_propertyBasedCreator != null) {\n             return _deserializeUsingPropertyBased(jp, ctxt);\n          */\n         if (_delegateDeserializer != null) {\n             if (!_valueInstantiator.canCreateFromString()) {\n-                Object bean = _valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp, ctxt));\n+                Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n                 if (_injectables != null) {\n                     injectValues(ctxt, bean);\n                 }\n                 return bean;\n             }\n         }\n-        return _valueInstantiator.createFromString(jp.getText());\n+        return _valueInstantiator.createFromString(ctxt, jp.getText());\n     }\n \n     public Object deserializeFromNumber(JsonParser jp, DeserializationContext ctxt)\n         case INT:\n             if (_delegateDeserializer != null) {\n                 if (!_valueInstantiator.canCreateFromInt()) {\n-                    Object bean = _valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp, ctxt));\n+                    Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n                     if (_injectables != null) {\n                         injectValues(ctxt, bean);\n                     }\n                     return bean;\n                 }\n             }\n-            return _valueInstantiator.createFromInt(jp.getIntValue());\n+            return _valueInstantiator.createFromInt(ctxt, jp.getIntValue());\n         case LONG:\n             if (_delegateDeserializer != null) {\n                 if (!_valueInstantiator.canCreateFromInt()) {\n-                    Object bean = _valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp, ctxt));\n+                    Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n                     if (_injectables != null) {\n                         injectValues(ctxt, bean);\n                     }\n                     return bean;\n                 }\n             }\n-            return _valueInstantiator.createFromLong(jp.getLongValue());\n+            return _valueInstantiator.createFromLong(ctxt, jp.getLongValue());\n     \t}\n         // actually, could also be BigInteger, so:\n         if (_delegateDeserializer != null) {\n-            Object bean = _valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp, ctxt));\n+            Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n             if (_injectables != null) {\n                 injectValues(ctxt, bean);\n             }\n     /**\n      * Method called to deserialize POJO value from a JSON floating-point\n      * number.\n-     * \n-     * @since 1.9\n      */\n     public Object deserializeFromDouble(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n         case DOUBLE:\n             if (_delegateDeserializer != null) {\n                 if (!_valueInstantiator.canCreateFromDouble()) {\n-                    Object bean = _valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp, ctxt));\n+                    Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n                     if (_injectables != null) {\n                         injectValues(ctxt, bean);\n                     }\n                     return bean;\n                 }\n             }\n-            return _valueInstantiator.createFromDouble(jp.getDoubleValue());\n+            return _valueInstantiator.createFromDouble(ctxt, jp.getDoubleValue());\n         }\n         // actually, could also be BigDecimal, so:\n         if (_delegateDeserializer != null) {\n-            return _valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp, ctxt));\n+            return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n         }\n         throw ctxt.instantiationException(getBeanClass(), \"no suitable creator method found to deserialize from JSON floating-point number\");\n     }\n \n     /**\n-     * Method called to deserialize POJO value from a JSON boolean\n-     * value (true, false)\n-     * \n-     * @since 1.9\n+     * Method called to deserialize POJO value from a JSON boolean value (true, false)\n      */\n     public Object deserializeFromBoolean(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n         if (_delegateDeserializer != null) {\n             if (!_valueInstantiator.canCreateFromBoolean()) {\n-                Object bean = _valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp, ctxt));\n+                Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n                 if (_injectables != null) {\n                     injectValues(ctxt, bean);\n                 }\n             }\n         }\n         boolean value = (jp.getCurrentToken() == JsonToken.VALUE_TRUE);\n-        return _valueInstantiator.createFromBoolean(value);\n-    }\n-\n-    /**\n-     * @since 1.9\n-     */\n+        return _valueInstantiator.createFromBoolean(ctxt, value);\n+    }\n+\n     public Object deserializeFromArray(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n     \tif (_delegateDeserializer != null) {\n     \t    try {\n-    \t        Object bean = _valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp, ctxt));\n+    \t        Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n     \t        if (_injectables != null) {\n     \t            injectValues(ctxt, bean);\n     \t        }\n                     jp.nextToken(); // to move to following FIELD_NAME/END_OBJECT\n                     Object bean;\n                     try {\n-                        bean = creator.build(buffer);\n+                        bean = creator.build(ctxt, buffer);\n                     } catch (Exception e) {\n                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                         continue; // never gets here\n         // We hit END_OBJECT, so:\n         Object bean;\n         try {\n-            bean =  creator.build(buffer);\n+            bean =  creator.build(ctxt, buffer);\n         } catch (Exception e) {\n             wrapInstantiationProblem(e, ctxt);\n             return null; // never gets here\n         throws IOException, JsonProcessingException\n     {\n         if (_delegateDeserializer != null) {\n-            return _valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp, ctxt));\n+            return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt));\n         }\n         if (_propertyBasedCreator != null) {\n             return deserializeUsingPropertyBasedWithUnwrapped(jp, ctxt);\n         \n         TokenBuffer tokens = new TokenBuffer(jp.getCodec());\n         tokens.writeStartObject();\n-        final Object bean = _valueInstantiator.createUsingDefault();\n+        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n \n         if (_injectables != null) {\n             injectValues(ctxt, bean);\n                     t = jp.nextToken(); // to move to following FIELD_NAME/END_OBJECT\n                     Object bean;\n                     try {\n-                        bean = creator.build(buffer);\n+                        bean = creator.build(ctxt, buffer);\n                     } catch (Exception e) {\n                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                         continue; // never gets here\n         // We hit END_OBJECT, so:\n         Object bean;\n         try {\n-            bean =  creator.build(buffer);\n+            bean =  creator.build(ctxt, buffer);\n         } catch (Exception e) {\n             wrapInstantiationProblem(e, ctxt);\n             return null; // never gets here\n         if (_propertyBasedCreator != null) {\n             return deserializeUsingPropertyBasedWithExternalTypeId(jp, ctxt);\n         }\n-        return deserializeWithExternalTypeId(jp, ctxt, _valueInstantiator.createUsingDefault());\n+        return deserializeWithExternalTypeId(jp, ctxt, _valueInstantiator.createUsingDefault(ctxt));\n     }\n \n     protected Object deserializeWithExternalTypeId(JsonParser jp, DeserializationContext ctxt,\n                     t = jp.nextToken(); // to move to following FIELD_NAME/END_OBJECT\n                     Object bean;\n                     try {\n-                        bean = creator.build(buffer);\n+                        bean = creator.build(ctxt, buffer);\n                     } catch (Exception e) {\n                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                         continue; // never gets here\n         // We hit END_OBJECT, so:\n         Object bean;\n         try {\n-            bean = creator.build(buffer);\n+            bean = creator.build(ctxt, buffer);\n         } catch (Exception e) {\n             wrapInstantiationProblem(e, ctxt);\n             return null; // never gets here\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.DeserializationConfig;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n      * This method is called if {@link #getFromObjectArguments} returns\n      * null or empty List.\n      */\n-    public Object createUsingDefault()\n+    public Object createUsingDefault(DeserializationContext ctxt)\n         throws IOException, JsonProcessingException {\n         throw new JsonMappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\"; no default creator found\");\n      * This method is called if {@link #getFromObjectArguments} returns\n      * a non-empty List of arguments.\n      */\n-    public Object createFromObjectWith(Object[] args)\n+    public Object createFromObjectWith(DeserializationContext ctxt, Object[] args)\n         throws IOException, JsonProcessingException {\n         throw new JsonMappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\" with arguments\");\n      * Method to called to create value instance from JSON Object using\n      * an intermediate \"delegate\" value to pass to createor method\n      */\n-    public Object createUsingDelegate(Object delegate)\n+    public Object createUsingDelegate(DeserializationContext ctxt, Object delegate)\n         throws IOException, JsonProcessingException\n     {\n         throw new JsonMappingException(\"Can not instantiate value of type \"\n     /**********************************************************\n      */\n     \n-    public Object createFromString(String value) throws IOException, JsonProcessingException {\n+    public Object createFromString(DeserializationContext ctxt, String value)\n+            throws IOException, JsonProcessingException {\n         throw new JsonMappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\" from JSON String\");\n     }\n     \n-    public Object createFromInt(int value) throws IOException, JsonProcessingException {\n+    public Object createFromInt(DeserializationContext ctxt, int value)\n+            throws IOException, JsonProcessingException {\n         throw new JsonMappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\" from JSON int number\");\n     }\n \n-    public Object createFromLong(long value) throws IOException, JsonProcessingException {\n+    public Object createFromLong(DeserializationContext ctxt, long value)\n+            throws IOException, JsonProcessingException {\n         throw new JsonMappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\" from JSON long number\");\n     }\n \n-    public Object createFromDouble(double value) throws IOException, JsonProcessingException {\n+    public Object createFromDouble(DeserializationContext ctxt, double value)\n+            throws IOException, JsonProcessingException {\n         throw new JsonMappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\" from JSON floating-point number\");\n     }\n     \n-    public Object createFromBoolean(boolean value) throws IOException, JsonProcessingException {\n+    public Object createFromBoolean(DeserializationContext ctxt, boolean value)\n+            throws IOException, JsonProcessingException {\n         throw new JsonMappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\" from JSON boolean value\");\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java\n         return buffer;\n     }\n     \n-    public Object build(PropertyValueBuffer buffer) throws IOException\n+    public Object build(DeserializationContext ctxt, PropertyValueBuffer buffer) throws IOException\n     {\n-        Object bean = _valueInstantiator.createFromObjectWith(buffer.getParameters(_defaultValues));\n+        Object bean = _valueInstantiator.createFromObjectWith(ctxt, buffer.getParameters(_defaultValues));\n         // Anything buffered?\n         for (PropertyValue pv = buffer.buffered(); pv != null; pv = pv.next) {\n             pv.assign(bean);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n         throws IOException, JsonProcessingException\n     {\n         if (_delegateDeserializer != null) {\n-            return (Collection<Object>) _valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp, ctxt));\n+            return (Collection<Object>) _valueInstantiator.createUsingDelegate(ctxt,\n+                    _delegateDeserializer.deserialize(jp, ctxt));\n         }\n         /* [JACKSON-620]: empty String may be ok; bit tricky to check, however, since\n          *  there is also possibility of \"auto-wrapping\" of single-element arrays.\n         if (jp.getCurrentToken() == JsonToken.VALUE_STRING) {\n             String str = jp.getText();\n             if (str.length() == 0) {\n-                return (Collection<Object>) _valueInstantiator.createFromString(str);\n+                return (Collection<Object>) _valueInstantiator.createFromString(ctxt, str);\n             }\n         }\n-        return deserialize(jp, ctxt, (Collection<Object>) _valueInstantiator.createUsingDefault());\n+        return deserialize(jp, ctxt, (Collection<Object>) _valueInstantiator.createUsingDefault(ctxt));\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n         }\n \n         @Override\n-        public Object createFromObjectWith(Object[] args) {\n+        public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) {\n             return new JsonLocation(args[0], _long(args[1]), _long(args[2]),\n                     _int(args[3]), _int(args[4]));\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n             return _deserializeUsingCreator(jp, ctxt);\n         }\n         if (_delegateDeserializer != null) {\n-            return (Map<Object,Object>) _valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp, ctxt));\n+            return (Map<Object,Object>) _valueInstantiator.createUsingDelegate(ctxt,\n+                    _delegateDeserializer.deserialize(jp, ctxt));\n         }\n         if (!_hasDefaultCreator) {\n             throw ctxt.instantiationException(getMapClass(), \"No default constructor found\");\n         if (t != JsonToken.START_OBJECT && t != JsonToken.FIELD_NAME && t != JsonToken.END_OBJECT) {\n             // [JACKSON-620] (empty) String may be ok however:\n             if (t == JsonToken.VALUE_STRING) {\n-                return (Map<Object,Object>) _valueInstantiator.createFromString(jp.getText());\n+                return (Map<Object,Object>) _valueInstantiator.createFromString(ctxt, jp.getText());\n             }\n             throw ctxt.mappingException(getMapClass());\n         }\n-        final Map<Object,Object> result = (Map<Object,Object>) _valueInstantiator.createUsingDefault();\n+        final Map<Object,Object> result = (Map<Object,Object>) _valueInstantiator.createUsingDefault(ctxt);\n         _readAndBind(jp, ctxt, result);\n         return result;\n     }\n                     jp.nextToken();\n                     Map<Object,Object> result;\n                     try {\n-                        result = (Map<Object,Object>)creator.build(buffer);\n+                        result = (Map<Object,Object>)creator.build(ctxt, buffer);\n                     } catch (Exception e) {\n                         wrapAndThrow(e, _mapType.getRawClass());\n                         return null;\n         // end of JSON object?\n         // if so, can just construct and leave...\n         try {\n-            return (Map<Object,Object>)creator.build(buffer);\n+            return (Map<Object,Object>)creator.build(ctxt, buffer);\n         } catch (Exception e) {\n             wrapAndThrow(e, _mapType.getRawClass());\n             return null;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.DeserializationConfig;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.deser.CreatorProperty;\n      */\n     \n     @Override\n-    public Object createUsingDefault()\n+    public Object createUsingDefault(DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n         if (_defaultCreator == null) { // sanity-check; caller should check\n     }\n     \n     @Override\n-    public Object createFromObjectWith(Object[] args)\n+    public Object createFromObjectWith(DeserializationContext ctxt, Object[] args)\n         throws IOException, JsonProcessingException\n     {\n         if (_withArgsCreator == null) { // sanity-check; caller should check\n     }\n \n     @Override\n-    public Object createUsingDelegate(Object delegate)\n+    public Object createUsingDelegate(DeserializationContext ctxt, Object delegate)\n         throws IOException, JsonProcessingException\n     {\n         if (_delegateCreator == null) { // sanity-check; caller should check\n      */\n     \n     @Override\n-    public Object createFromString(String value) throws IOException, JsonProcessingException\n+    public Object createFromString(DeserializationContext ctxt, String value)\n+            throws IOException, JsonProcessingException\n     {\n         if (_fromStringCreator != null) {\n             try {\n                 throw wrapException(e);\n             }\n         }\n-        return _createFromStringFallbacks(value);\n-    }\n-    \n-    @Override\n-    public Object createFromInt(int value) throws IOException, JsonProcessingException\n+        return _createFromStringFallbacks(ctxt, value);\n+    }\n+    \n+    @Override\n+    public Object createFromInt(DeserializationContext ctxt, int value)\n+            throws IOException, JsonProcessingException\n     {\n         try {\n             // First: \"native\" int methods work best:\n     }\n \n     @Override\n-    public Object createFromLong(long value) throws IOException, JsonProcessingException\n+    public Object createFromLong(DeserializationContext ctxt, long value)\n+            throws IOException, JsonProcessingException\n     {\n         try {\n             if (_fromLongCreator != null) {\n     }\n \n     @Override\n-    public Object createFromDouble(double value) throws IOException, JsonProcessingException\n+    public Object createFromDouble(DeserializationContext ctxt, double value)\n+            throws IOException, JsonProcessingException\n     {\n         try {\n             if (_fromDoubleCreator != null) {\n     }\n \n     @Override\n-    public Object createFromBoolean(boolean value) throws IOException, JsonProcessingException\n+    public Object createFromBoolean(DeserializationContext ctxt, boolean value)\n+            throws IOException, JsonProcessingException\n     {\n         try {\n             if (_fromBooleanCreator != null) {\n     /**********************************************************\n      */\n \n-    protected Object _createFromStringFallbacks(String value) throws IOException, JsonProcessingException\n+    protected Object _createFromStringFallbacks(DeserializationContext ctxt, String value)\n+            throws IOException, JsonProcessingException\n     {\n         /* 28-Sep-2011, tatu: Ok this is not clean at all; but since there are legacy\n          *   systems that expect conversions in some cases, let's just add a minimal\n         if (_fromBooleanCreator != null) {\n             String str = value.trim();\n             if (\"true\".equals(str)) {\n-                return createFromBoolean(true);\n+                return createFromBoolean(ctxt, true);\n             }\n             if (\"false\".equals(str)) {\n-                return createFromBoolean(false);\n+                return createFromBoolean(ctxt, false);\n             }\n         }\n         \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n         throws IOException, JsonProcessingException\n     {\n         if (_delegateDeserializer != null) {\n-            return (Collection<String>) _valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp, ctxt));\n-        }\n-        final Collection<String> result = (Collection<String>) _valueInstantiator.createUsingDefault();\n+            return (Collection<String>) _valueInstantiator.createUsingDelegate(ctxt,\n+                    _delegateDeserializer.deserialize(jp, ctxt));\n+        }\n+        final Collection<String> result = (Collection<String>) _valueInstantiator.createUsingDefault(ctxt);\n         return deserialize(jp, ctxt, result);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java\n             return _deserializeUsingPropertyBased(jp, ctxt);\n         }\n         if (_delegateDeserializer != null) {\n-            return _valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp, ctxt));\n+            return _valueInstantiator.createUsingDelegate(ctxt,\n+                    _delegateDeserializer.deserialize(jp, ctxt));\n         }\n         if (_beanType.isAbstract()) { // for good measure, check this too\n             throw JsonMappingException.from(jp, \"Can not instantiate abstract type \"+_beanType\n             // Maybe it's \"message\"?\n             if (PROP_NAME_MESSAGE.equals(propName)) {\n                 if (hasStringCreator) {\n-                    throwable = _valueInstantiator.createFromString(jp.getText());\n+                    throwable = _valueInstantiator.createFromString(ctxt, jp.getText());\n                     // any pending values?\n                     if (pending != null) {\n                         for (int i = 0, len = pendingIx; i < len; i += 2) {\n              */\n             //throw new JsonMappingException(\"No 'message' property found: could not deserialize \"+_beanType);\n             if (hasStringCreator) {\n-                throwable = _valueInstantiator.createFromString(null);\n+                throwable = _valueInstantiator.createFromString(ctxt, null);\n             } else {\n-                throwable = _valueInstantiator.createUsingDefault();\n+                throwable = _valueInstantiator.createUsingDefault(ctxt);\n             }\n             // any pending values?\n             if (pending != null) {\n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestValueInstantiator.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestValueInstantiator.java\n         public boolean canCreateUsingDefault() { return true; }\n \n         @Override\n-        public MyBean createUsingDefault() {\n+        public MyBean createUsingDefault(DeserializationContext ctxt) {\n             return new MyBean(\"secret!\", true);\n         }\n     }\n         }\n \n         @Override\n-        public Object createFromObjectWith(Object[] args) {\n+        public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) {\n             try {\n                 Class<?> cls = (Class<?>) args[0];\n                 return cls.newInstance();\n         }\n \n         @Override\n-        public Object createFromObjectWith(Object[] args) {\n+        public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) {\n             return new MyMap((String) args[0]);\n         }\n     }\n         }\n         \n         @Override\n-        public Object createUsingDelegate(Object delegate) {\n+        public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) {\n             return new MyBean(\"\"+delegate, true);\n         }\n     }\n         public boolean canCreateUsingDefault() { return true; }\n \n         @Override\n-        public MyList createUsingDefault() {\n+        public MyList createUsingDefault(DeserializationContext ctxt) {\n             return new MyList(true);\n         }\n     }\n         }\n         \n         @Override\n-        public Object createUsingDelegate(Object delegate) {\n+        public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) {\n             MyList list = new MyList(true);\n             list.add(delegate);\n             return list;\n         public boolean canCreateUsingDefault() { return true; }\n \n         @Override\n-        public MyMap createUsingDefault() {\n+        public MyMap createUsingDefault(DeserializationContext ctxt) {\n             return new MyMap(true);\n         }\n     }\n         }\n         \n         @Override\n-        public Object createUsingDelegate(Object delegate) {\n+        public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) {\n             MyMap map = new MyMap(true);\n             map.put(\"value\", delegate);\n             return map;\n         public boolean canCreateUsingDefault() { return true; }\n \n         @Override\n-        public AnnotatedBean createUsingDefault() {\n+        public AnnotatedBean createUsingDefault(DeserializationContext ctxt) {\n             return new AnnotatedBean(\"foo\", 3);\n         }\n     }\n                     }\n         \n                     @Override\n-                    public Object createFromObjectWith(Object[] args) {\n+                    public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) {\n                         return new CreatorBean((String) args[0]);\n                     }\n         }));\n                     public boolean canCreateFromString() { return true; }\n                     \n                     @Override\n-                    public Object createFromString(String value) {\n+                    public Object createFromString(DeserializationContext ctxt, String value) {\n                         return new MysteryBean(value);\n                     }\n         }));\n                     public boolean canCreateFromInt() { return true; }\n                     \n                     @Override\n-                    public Object createFromInt(int value) {\n+                    public Object createFromInt(DeserializationContext ctxt, int value) {\n                         return new MysteryBean(value+1);\n                     }\n         }));\n                     public boolean canCreateFromLong() { return true; }\n                     \n                     @Override\n-                    public Object createFromLong(long value) {\n+                    public Object createFromLong(DeserializationContext ctxt, long value) {\n                         return new MysteryBean(value+1L);\n                     }\n         }));\n                     public boolean canCreateFromDouble() { return true; }\n \n                     @Override\n-                    public Object createFromDouble(double value) {\n+                    public Object createFromDouble(DeserializationContext ctxt, double value) {\n                         return new MysteryBean(2.0 * value);\n                     }\n         }));\n                     public boolean canCreateFromBoolean() { return true; }\n                     \n                     @Override\n-                    public Object createFromBoolean(boolean value) {\n+                    public Object createFromBoolean(DeserializationContext ctxt, boolean value) {\n                         return new MysteryBean(Boolean.valueOf(value));\n                     }\n         }));", "timestamp": 1326610984, "metainfo": ""}