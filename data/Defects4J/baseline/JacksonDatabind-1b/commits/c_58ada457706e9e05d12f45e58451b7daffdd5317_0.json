{"sha": "58ada457706e9e05d12f45e58451b7daffdd5317", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java\n \n     @Override\n     public JsonSerializer<?> findArraySerializer(SerializationConfig config,\n-            ArrayType type, BeanDescription beanDesc, BeanProperty property,\n+            ArrayType type, BeanDescription beanDesc,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) {\n         return findSerializer(config, type, beanDesc);\n     }\n \n     @Override\n     public JsonSerializer<?> findCollectionSerializer(SerializationConfig config,\n-            CollectionType type, BeanDescription beanDesc, BeanProperty property,\n+            CollectionType type, BeanDescription beanDesc,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) {\n         return findSerializer(config, type, beanDesc);\n     }\n \n     @Override\n     public JsonSerializer<?> findCollectionLikeSerializer(SerializationConfig config,\n-            CollectionLikeType type, BeanDescription beanDesc, BeanProperty property,\n+            CollectionLikeType type, BeanDescription beanDesc,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) {\n         return findSerializer(config, type, beanDesc);\n     }\n \n     @Override\n     public JsonSerializer<?> findMapLikeSerializer(SerializationConfig config,\n-            MapLikeType type, BeanDescription beanDesc, BeanProperty property,\n+            MapLikeType type, BeanDescription beanDesc,\n             JsonSerializer<Object> keySerializer,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) {\n         return findSerializer(config, type, beanDesc);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n import com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer;\n import com.fasterxml.jackson.databind.ser.std.*;\n import com.fasterxml.jackson.databind.type.*;\n+import com.fasterxml.jackson.databind.util.ArrayBuilders;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.EnumValues;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n     /* State\n     /**********************************************************\n      */\n+\n+    /**\n+     * Configuration settings container class for bean serializer factory.\n+     */\n+    /*\n+    /**********************************************************\n+    /* Config class implementation\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Configuration settings container class for bean serializer factory\n+     */\n+    final static class Config\n+    {\n+        /**\n+         * Constant for empty <code>Serializers</code> array (which by definition\n+         * is stateless and reusable)\n+         */\n+        protected final static Serializers[] NO_SERIALIZERS = new Serializers[0];\n+\n+        protected final static BeanSerializerModifier[] NO_MODIFIERS = new BeanSerializerModifier[0];\n+        \n+        /**\n+         * List of providers for additional serializers, checked before considering default\n+         * basic or bean serialializers.\n+         */\n+        protected final Serializers[] _additionalSerializers;\n+\n+        /**\n+         * List of providers for additional key serializers, checked before considering default\n+         * key serialializers.\n+         */\n+        protected final Serializers[] _additionalKeySerializers;\n+        \n+        /**\n+         * List of modifiers that can change the way {@link BeanSerializer} instances\n+         * are configured and constructed.\n+         */\n+        protected final BeanSerializerModifier[] _modifiers;\n+        \n+        public Config() {\n+            this(null, null, null);\n+        }\n+\n+        protected Config(Serializers[] allAdditionalSerializers,\n+                Serializers[] allAdditionalKeySerializers,\n+                BeanSerializerModifier[] modifiers)\n+        {\n+            _additionalSerializers = (allAdditionalSerializers == null) ?\n+                    NO_SERIALIZERS : allAdditionalSerializers;\n+            _additionalKeySerializers = (allAdditionalKeySerializers == null) ?\n+                    NO_SERIALIZERS : allAdditionalKeySerializers;\n+            _modifiers = (modifiers == null) ? NO_MODIFIERS : modifiers;\n+        }\n+\n+        public Config withAdditionalSerializers(Serializers additional)\n+        {\n+            if (additional == null) {\n+                throw new IllegalArgumentException(\"Can not pass null Serializers\");\n+            }\n+            Serializers[] all = ArrayBuilders.insertInListNoDup(_additionalSerializers, additional);\n+            return new Config(all, _additionalKeySerializers, _modifiers);\n+        }\n+\n+        public Config withAdditionalKeySerializers(Serializers additional)\n+        {\n+            if (additional == null) {\n+                throw new IllegalArgumentException(\"Can not pass null Serializers\");\n+            }\n+            Serializers[] all = ArrayBuilders.insertInListNoDup(_additionalKeySerializers, additional);\n+            return new Config(_additionalSerializers, all, _modifiers);\n+        }\n+        \n+        public Config withSerializerModifier(BeanSerializerModifier modifier)\n+        {\n+            if (modifier == null) {\n+                throw new IllegalArgumentException(\"Can not pass null modifier\");\n+            }\n+            BeanSerializerModifier[] modifiers = ArrayBuilders.insertInListNoDup(_modifiers, modifier);\n+            return new Config(_additionalSerializers, _additionalKeySerializers, modifiers);\n+        }\n+\n+        public boolean hasSerializers() { return _additionalSerializers.length > 0; }\n+\n+        public boolean hasKeySerializers() { return _additionalKeySerializers.length > 0; }\n+        \n+        public boolean hasSerializerModifiers() { return _modifiers.length > 0; }\n+        \n+        public Iterable<Serializers> serializers() {\n+            return ArrayBuilders.arrayAsIterable(_additionalSerializers);\n+        }\n+\n+        public Iterable<Serializers> keySerializers() {\n+            return ArrayBuilders.arrayAsIterable(_additionalKeySerializers);\n+        }\n+        \n+        public Iterable<BeanSerializerModifier> serializerModifiers() {\n+            return ArrayBuilders.arrayAsIterable(_modifiers);\n+        }\n+    }\n     \n     /**\n      * Configuration settings for this factory; immutable instance (just like this\n      * the class will be instantiated.\n      */\n     protected BasicSerializerFactory(Config config) {\n-        _factoryConfig = config;\n+        _factoryConfig = (config == null) ? new Config() : config;\n+    }\n+    \n+    /**\n+     * Method used for creating a new instance of this factory, but with different\n+     * configuration. Reason for specifying factory method (instead of plain constructor)\n+     * is to allow proper sub-classing of factories.\n+     *<p>\n+     * Note that custom sub-classes generally <b>must override</b> implementation\n+     * of this method, as it usually requires instantiating a new instance of\n+     * factory type. Check out javadocs for\n+     * {@link com.fasterxml.jackson.databind.ser.BeanSerializerFactory} for more details.\n+     */\n+    public abstract SerializerFactory withConfig(Config config);\n+\n+    /**\n+     * Convenience method for creating a new factory instance with an additional\n+     * serializer provider.\n+     */\n+    public final SerializerFactory withAdditionalSerializers(Serializers additional) {\n+        return withConfig(_factoryConfig.withAdditionalSerializers(additional));\n+    }\n+\n+    /**\n+     * Convenience method for creating a new factory instance with an additional\n+     * key serializer provider.\n+     */\n+    public final SerializerFactory withAdditionalKeySerializers(Serializers additional) {\n+        return withConfig(_factoryConfig.withAdditionalKeySerializers(additional));\n+    }\n+    \n+    /**\n+     * Convenience method for creating a new factory instance with additional bean\n+     * serializer modifier.\n+     */\n+    public final SerializerFactory withSerializerModifier(BeanSerializerModifier modifier) {\n+        return withConfig(_factoryConfig.withSerializerModifier(modifier));\n     }\n \n     /*\n                 return buildMapSerializer(config, (MapType) mlt, beanDesc, staticTyping,\n                         keySerializer, elementTypeSerializer, elementValueSerializer);\n             }\n-            return buildMapLikeSerializer(config, mlt, beanDesc, property, staticTyping,\n+            return buildMapLikeSerializer(config, mlt, beanDesc, staticTyping,\n                     keySerializer, elementTypeSerializer, elementValueSerializer);\n         }\n         if (type.isCollectionLikeType()) {\n         throws JsonMappingException\n     {\n         for (Serializers serializers : customSerializers()) {\n-            JsonSerializer<?> ser = serializers.findCollectionLikeSerializer(config, type, beanDesc, property,\n-                    elementTypeSerializer, elementValueSerializer);\n+            JsonSerializer<?> ser = serializers.findCollectionLikeSerializer(config,\n+                    type, beanDesc, elementTypeSerializer, elementValueSerializer);\n             if (ser != null) {\n                 return ser;\n             }\n     {\n         // Module-provided custom collection serializers?\n         for (Serializers serializers : customSerializers()) {\n-            JsonSerializer<?> ser = serializers.findCollectionSerializer(config, type, beanDesc, property,\n-                    elementTypeSerializer, elementValueSerializer);\n+            JsonSerializer<?> ser = serializers.findCollectionSerializer(config,\n+                    type, beanDesc, elementTypeSerializer, elementValueSerializer);\n             if (ser != null) {\n                 return ser;\n             }\n      * ones that do not (but that have been indicated to behave like Maps).\n      */\n     protected JsonSerializer<?> buildMapLikeSerializer(SerializationConfig config, MapLikeType type,\n-            BeanDescription beanDesc, BeanProperty property,\n-            boolean staticTyping,\n+            BeanDescription beanDesc, boolean staticTyping,\n             JsonSerializer<Object> keySerializer,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n         throws JsonMappingException\n     {\n         for (Serializers serializers : customSerializers()) {\n-            JsonSerializer<?> ser = serializers.findMapLikeSerializer(config, type, beanDesc, property,\n-                    keySerializer, elementTypeSerializer, elementValueSerializer);\n+            JsonSerializer<?> ser = serializers.findMapLikeSerializer(config,\n+                    type, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n             if (ser != null) {\n                 return ser;\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n      */\n     public final static BeanSerializerFactory instance = new BeanSerializerFactory(null);\n \n-    /*\n-    /**********************************************************\n-    /* Config class implementation\n-    /**********************************************************\n-     */\n-    \n-    /**\n-     * Configuration settings container class for bean serializer factory\n-     */\n-    public static class ConfigImpl extends Config\n-    {\n-        /**\n-         * Constant for empty <code>Serializers</code> array (which by definition\n-         * is stateless and reusable)\n-         */\n-        protected final static Serializers[] NO_SERIALIZERS = new Serializers[0];\n-\n-        protected final static BeanSerializerModifier[] NO_MODIFIERS = new BeanSerializerModifier[0];\n-        \n-        /**\n-         * List of providers for additional serializers, checked before considering default\n-         * basic or bean serialializers.\n-         */\n-        protected final Serializers[] _additionalSerializers;\n-\n-        /**\n-         * List of providers for additional key serializers, checked before considering default\n-         * key serialializers.\n-         */\n-        protected final Serializers[] _additionalKeySerializers;\n-        \n-        /**\n-         * List of modifiers that can change the way {@link BeanSerializer} instances\n-         * are configured and constructed.\n-         */\n-        protected final BeanSerializerModifier[] _modifiers;\n-        \n-        public ConfigImpl() {\n-            this(null, null, null);\n-        }\n-\n-        protected ConfigImpl(Serializers[] allAdditionalSerializers,\n-                Serializers[] allAdditionalKeySerializers,\n-                BeanSerializerModifier[] modifiers)\n-        {\n-            _additionalSerializers = (allAdditionalSerializers == null) ?\n-                    NO_SERIALIZERS : allAdditionalSerializers;\n-            _additionalKeySerializers = (allAdditionalKeySerializers == null) ?\n-                    NO_SERIALIZERS : allAdditionalKeySerializers;\n-            _modifiers = (modifiers == null) ? NO_MODIFIERS : modifiers;\n-        }\n-\n-        @Override\n-        public Config withAdditionalSerializers(Serializers additional)\n-        {\n-            if (additional == null) {\n-                throw new IllegalArgumentException(\"Can not pass null Serializers\");\n-            }\n-            Serializers[] all = ArrayBuilders.insertInListNoDup(_additionalSerializers, additional);\n-            return new ConfigImpl(all, _additionalKeySerializers, _modifiers);\n-        }\n-\n-        @Override\n-        public Config withAdditionalKeySerializers(Serializers additional)\n-        {\n-            if (additional == null) {\n-                throw new IllegalArgumentException(\"Can not pass null Serializers\");\n-            }\n-            Serializers[] all = ArrayBuilders.insertInListNoDup(_additionalKeySerializers, additional);\n-            return new ConfigImpl(_additionalSerializers, all, _modifiers);\n-        }\n-        \n-        @Override\n-        public Config withSerializerModifier(BeanSerializerModifier modifier)\n-        {\n-            if (modifier == null) {\n-                throw new IllegalArgumentException(\"Can not pass null modifier\");\n-            }\n-            BeanSerializerModifier[] modifiers = ArrayBuilders.insertInListNoDup(_modifiers, modifier);\n-            return new ConfigImpl(_additionalSerializers, _additionalKeySerializers, modifiers);\n-        }\n-\n-        @Override\n-        public boolean hasSerializers() { return _additionalSerializers.length > 0; }\n-\n-        @Override\n-        public boolean hasKeySerializers() { return _additionalKeySerializers.length > 0; }\n-        \n-        @Override\n-        public boolean hasSerializerModifiers() { return _modifiers.length > 0; }\n-        \n-        @Override\n-        public Iterable<Serializers> serializers() {\n-            return ArrayBuilders.arrayAsIterable(_additionalSerializers);\n-        }\n-\n-        @Override\n-        public Iterable<Serializers> keySerializers() {\n-            return ArrayBuilders.arrayAsIterable(_additionalKeySerializers);\n-        }\n-        \n-        @Override\n-        public Iterable<BeanSerializerModifier> serializerModifiers() {\n-            return ArrayBuilders.arrayAsIterable(_modifiers);\n-        }\n-    }\n \n     /*\n     /**********************************************************\n      */\n     protected BeanSerializerFactory(Config config)\n     {\n-        super((config == null) ? new ConfigImpl() : config);\n-    }\n-\n-    @Override public Config getConfig() { return _factoryConfig; }\n+        super(config);\n+    }\n     \n     /**\n      * Method used by module registration functionality, to attach additional\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java\n {\n     /*\n     /**********************************************************\n-    /* Helper class to contain configuration settings\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Configuration settings container class for bean serializer factory.\n-     */\n-    public abstract static class Config\n-    {\n-        /**\n-         * Method for creating a new instance with additional serializer provider.\n-         */\n-        public abstract Config withAdditionalSerializers(Serializers additional);\n-\n-        public abstract Config withAdditionalKeySerializers(Serializers additional);\n-        \n-        /**\n-         * Method for creating a new instance with additional bean serializer modifier.\n-         */\n-        public abstract Config withSerializerModifier(BeanSerializerModifier modifier);\n-        \n-        public abstract boolean hasSerializers();\n-\n-        public abstract boolean hasKeySerializers();\n-\n-        public abstract boolean hasSerializerModifiers();\n-        \n-        public abstract Iterable<Serializers> serializers();\n-\n-        public abstract Iterable<Serializers> keySerializers();\n-        \n-        public abstract Iterable<BeanSerializerModifier> serializerModifiers();\n-    }\n-    \n-    /*\n-    /**********************************************************\n     /* Additional configuration methods\n     /**********************************************************\n      */\n-\n-    /**\n-     * Accessor for configuration object.\n-     */\n-    public abstract Config getConfig();\n-    \n-    /**\n-     * Method used for creating a new instance of this factory, but with different\n-     * configuration. Reason for specifying factory method (instead of plain constructor)\n-     * is to allow proper sub-classing of factories.\n-     *<p>\n-     * Note that custom sub-classes generally <b>must override</b> implementation\n-     * of this method, as it usually requires instantiating a new instance of\n-     * factory type. Check out javadocs for\n-     * {@link com.fasterxml.jackson.databind.ser.BeanSerializerFactory} for more details.\n-     */\n-    public abstract SerializerFactory withConfig(Config config);\n \n     /**\n      * Convenience method for creating a new factory instance with additional serializer\n      *   withConfig(getConfig().withAdditionalSerializers(additional));\n      *<pre>\n      */\n-    public final SerializerFactory withAdditionalSerializers(Serializers additional) {\n-        return withConfig(getConfig().withAdditionalSerializers(additional));\n-    }\n+    public abstract SerializerFactory withAdditionalSerializers(Serializers additional);\n \n-    public final SerializerFactory withAdditionalKeySerializers(Serializers additional) {\n-        return withConfig(getConfig().withAdditionalKeySerializers(additional));\n-    }\n+    public abstract SerializerFactory withAdditionalKeySerializers(Serializers additional);\n     \n     /**\n      * Convenience method for creating a new factory instance with additional bean\n      *   withConfig(getConfig().withSerializerModifier(modifier));\n      *<pre>\n      */\n-    public final SerializerFactory withSerializerModifier(BeanSerializerModifier modifier) {\n-        return withConfig(getConfig().withSerializerModifier(modifier));\n-    }\n+    public abstract SerializerFactory withSerializerModifier(BeanSerializerModifier modifier);\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/Serializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/Serializers.java\n package com.fasterxml.jackson.databind.ser;\n \n-import com.fasterxml.jackson.databind.BeanDescription;\n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.SerializationConfig;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.type.*;\n      * specified type; or null if it does not.\n      */\n     public JsonSerializer<?> findArraySerializer(SerializationConfig config,\n-            ArrayType type, BeanDescription beanDesc, BeanProperty property,\n+            ArrayType type, BeanDescription beanDesc,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer);\n \n     public JsonSerializer<?> findCollectionSerializer(SerializationConfig config,\n-            CollectionType type, BeanDescription beanDesc, BeanProperty property,\n+            CollectionType type, BeanDescription beanDesc,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer);\n \n     public JsonSerializer<?> findCollectionLikeSerializer(SerializationConfig config,\n-            CollectionLikeType type, BeanDescription beanDesc, BeanProperty property,\n+            CollectionLikeType type, BeanDescription beanDesc,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer);\n     \n     public JsonSerializer<?> findMapSerializer(SerializationConfig config,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer);\n \n     public JsonSerializer<?> findMapLikeSerializer(SerializationConfig config,\n-            MapLikeType type, BeanDescription beanDesc, BeanProperty property,\n+            MapLikeType type, BeanDescription beanDesc,\n             JsonSerializer<Object> keySerializer,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer);\n \n         \n         @Override\n         public JsonSerializer<?> findArraySerializer(SerializationConfig config,\n-                ArrayType type, BeanDescription beanDesc, BeanProperty property,\n+                ArrayType type, BeanDescription beanDesc,\n                 TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n         {\n             return null;\n \n         @Override\n         public JsonSerializer<?> findCollectionSerializer(SerializationConfig config,\n-                CollectionType type, BeanDescription beanDesc, BeanProperty property,\n+                CollectionType type, BeanDescription beanDesc,\n                 TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n         {\n             return null;\n \n         @Override\n         public JsonSerializer<?> findCollectionLikeSerializer(SerializationConfig config,\n-                CollectionLikeType type, BeanDescription beanDesc, BeanProperty property,\n+                CollectionLikeType type, BeanDescription beanDesc,\n                 TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n         {\n             return null;\n \n         @Override\n         public JsonSerializer<?> findMapLikeSerializer(SerializationConfig config,\n-                MapLikeType type, BeanDescription beanDesc, BeanProperty property,\n+                MapLikeType type, BeanDescription beanDesc,\n                 JsonSerializer<Object> keySerializer,\n                 TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n         {\n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers.java\n             context.addSerializers(new Serializers.Base() {\n                 @Override\n                 public JsonSerializer<?> findMapLikeSerializer(SerializationConfig config,\n-                        MapLikeType type, BeanDescription beanDesc, BeanProperty property,\n+                        MapLikeType type, BeanDescription beanDesc,\n                         JsonSerializer<Object> keySerializer,\n                         TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n                 {\n \n                 @Override\n                 public JsonSerializer<?> findCollectionLikeSerializer(SerializationConfig config,\n-                        CollectionLikeType type, BeanDescription beanDesc, BeanProperty property,\n+                        CollectionLikeType type, BeanDescription beanDesc,\n                         TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n                 {\n                     if (CollectionMarker.class.isAssignableFrom(type.getRawClass())) {", "timestamp": 1328074324, "metainfo": ""}