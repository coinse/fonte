{"sha": "c968cc5fe63cc503ad2d474135af91413e2a5f11", "log": "Merge branch 'master' of https://github.com/FasterXML/jackson-databind", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestMapJsonValueKey.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.test.BaseTest;\n+\n+public class TestMapJsonValueKey extends BaseTest\n+{\n+    public static class Wat\n+    {\n+        private final String wat;\n+\n+        @JsonCreator\n+        Wat(String wat)\n+        {\n+            this.wat = wat;\n+        }\n+\n+        @JsonValue\n+        public String getWat()\n+        {\n+            return wat;\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return \"[Wat: \" + wat + \"]\";\n+        }\n+    }\n+\n+    public void testMapJsonValueKey()\n+    throws Exception\n+    {\n+        Map<Wat, Boolean> map = new HashMap<Wat, Boolean>();\n+        map.put(new Wat(\"3\"), true);\n+        map.put(new Wat(\"x\"), false);\n+\n+        TypeReference<Map<Wat, Boolean>> type = new TypeReference<Map<Wat, Boolean>>(){};\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        assertEquals(map, mapper.readValue(mapper.writeValueAsBytes(map), type));\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n  * Abstract class that defines API used by {@link ObjectMapper} (and\n  * other chained {@link JsonSerializer}s too) to serialize Objects of\n  * arbitrary types into JSON, using provided {@link JsonGenerator}.\n- *<p>\n- * NOTE: it is recommended that custom serializers extend\n  * {@link com.fasterxml.jackson.databind.ser.std.StdSerializer} instead\n  * of this class, since it will implement many of optional\n  * methods of this class.\n+ *<p>\n+ * NOTE: various <code>serialize</code> methods are never (to be) called\n+ * with null values -- caller <b>must</b> handle null values, usually\n+ * by calling {@link SerializerProvider#findNullValueSerializer} to obtain\n+ * serializer to use.\n+ * This also means that custom serializers can not be directly used to change\n+ * the output to produce when serializing null values.\n  *<p>\n  * If serializer is an aggregate one -- meaning it delegates handling of some\n  * of its contents by using other serializer(s) -- it typically also needs", "timestamp": 1357324272, "metainfo": ""}