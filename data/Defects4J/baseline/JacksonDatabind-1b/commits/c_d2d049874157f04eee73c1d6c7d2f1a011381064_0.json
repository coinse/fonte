{"sha": "d2d049874157f04eee73c1d6c7d2f1a011381064", "log": "More 1.5 changes.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JavaType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JavaType.java\n         JavaType result = _narrow(subclass);\n \n         // TODO: these checks should NOT actually be needed; above should suffice:\n-        if (_valueHandler != result.getValueHandler()) {\n+        if (_valueHandler != result.<Object>getValueHandler()) {\n             result = result.withValueHandler(_valueHandler);\n         }\n-        if (_typeHandler != result.getTypeHandler()) {\n+        if (_typeHandler != result.<Object>getTypeHandler()) {\n             result = result.withTypeHandler(_typeHandler);\n         }\n         return result;\n         }\n         JavaType result = _narrow(subclass);\n         // TODO: these checks should NOT actually be needed; above should suffice:\n-        if (_valueHandler != result.getValueHandler()) {\n+        if (_valueHandler != result.<Object>getValueHandler()) {\n             result = result.withValueHandler(_valueHandler);\n         }\n-        if (_typeHandler != result.getTypeHandler()) {\n+        if (_typeHandler != result.<Object>getTypeHandler()) {\n             result = result.withTypeHandler(_typeHandler);\n         }\n         return result;\n--- a/src/main/java/com/fasterxml/jackson/databind/type/ArrayType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/ArrayType.java\n         return new ArrayType(_componentType, _emptyArray, _valueHandler, h);\n     }\n \n-    // Since 1.7:\n     @Override\n     public ArrayType withContentTypeHandler(Object h)\n     {\n-        if (h == _componentType.getTypeHandler()) {\n+        if (h == _componentType.<Object>getTypeHandler()) {\n             return this;\n         }\n         return new ArrayType(_componentType.withTypeHandler(h), _emptyArray,\n                 _valueHandler, _typeHandler);\n     }\n \n-    // Since 1.9:\n     @Override\n     public ArrayType withValueHandler(Object h) {\n         if (h == _valueHandler) {\n         return new ArrayType(_componentType, _emptyArray, h, _typeHandler);\n     }\n \n-    // Since 1.9:\n     @Override\n     public ArrayType withContentValueHandler(Object h) {\n-        if (h == _componentType.getValueHandler()) {\n+        if (h == _componentType.<Object>getValueHandler()) {\n             return this;\n         }\n         return new ArrayType(_componentType.withValueHandler(h), _emptyArray,\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCyclicTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCyclicTypes.java\n package com.fasterxml.jackson.databind.deser;\n-\n-import javax.xml.bind.annotation.*;\n \n import com.fasterxml.jackson.databind.*;\n \n         public void setNext(Bean b) { _next = b; }\n         public void setName(String n) { _name = n; }\n \n-    }\n-\n-    // Also another one to ensure JAXB annotation introspector has no problems\n-    @XmlAccessorType(XmlAccessType.FIELD)\n-    static class JaxbBean\n-    {\n-        @XmlElement(required = true)\n-        protected int id;\n-\n-        @XmlElement(required = false)\n-        protected JaxbBean circular;\n     }\n \n     static class LinkA {\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForEnums.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForEnums.java\n package com.fasterxml.jackson.databind.jsontype;\n \n import java.util.concurrent.TimeUnit;\n-\n \n import com.fasterxml.jackson.databind.BaseMapTest;\n import com.fasterxml.jackson.databind.ObjectMapper;\n     public void testSimpleEnumBean() throws Exception\n     {\n         TimeUnitBean bean = new TimeUnitBean();\n-        bean.timeUnit = TimeUnit.HOURS;\n+        bean.timeUnit = TimeUnit.SECONDS;\n         \n         // First, without type info\n         ObjectMapper m = new ObjectMapper();\n         String json = m.writeValueAsString(bean);\n         TimeUnitBean result = m.readValue(json, TimeUnitBean.class);\n-        assertEquals(TimeUnit.HOURS, result.timeUnit);\n+        assertEquals(TimeUnit.SECONDS, result.timeUnit);\n         \n         // then with type info\n         m = new ObjectMapper();\n         json = m.writeValueAsString(bean);\n         result = m.readValue(json, TimeUnitBean.class);\n \n-        assertEquals(TimeUnit.HOURS, result.timeUnit);\n+        assertEquals(TimeUnit.SECONDS, result.timeUnit);\n     }\n     \n     public void testSimpleEnumsInObjectArray() throws Exception", "timestamp": 1335068314, "metainfo": ""}