{"sha": "c3617edebe4687842c70f84a3c16e8ab021fe630", "log": "More work on object id serialization", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java\n     @Override\n     public String toString()\n     {\n-        return \"[field \"+getName()+\", annotations: \"+_annotations+\"]\";\n+        return \"[field \"+getFullName()+\"]\";\n     }\n }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n     @Override\n     public String toString()\n     {\n-        return \"[method \"+getName()+\", annotations: \"+_annotations+\"]\";\n+        return \"[method \"+getFullName()+\"]\";\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n-\n \n /**\n  * Serializer class that can serialize Java objects that map\n      */\n \n     /**\n-     * @param type Nominal type of values handled by this serializer\n+     * @param builder Builder object that contains collected information\n+     *   that may be needed for serializer\n      * @param properties Property writers used for actual serialization\n      */\n-    public BeanSerializer(JavaType type,\n-            BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties,\n-            AnyGetterWriter anyGetterWriter, AnnotatedMember typeId,\n-            Object filterId)\n+    public BeanSerializer(JavaType type, BeanSerializerBuilder builder,\n+            BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)\n     {\n-        super(type, properties, filteredProperties, anyGetterWriter, typeId, filterId);\n+        super(type, builder, properties, filteredProperties);\n     }\n \n     /**\n      */\n \n     /**\n-     * Method for constructing dummy bean deserializer; one that\n+     * Method for constructing dummy bean serializer; one that\n      * never outputs any properties\n      */\n     public static BeanSerializer createDummy(JavaType forType)\n     {\n-        return new BeanSerializer(forType, NO_PROPS, null, null, null, null);\n+        return new BeanSerializer(forType, null, NO_PROPS, null);\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\n     protected Object _filterId;\n \n     /**\n+     * Property that is used for object id\n+     */\n+    protected AnnotatedMember _objectId;\n+\n+    /**\n      * Property that is used for type id (and not serialized as regular\n      * property)\n      */\n         _filterId = src._filterId;\n     }\n     \n-    public BeanDescription getBeanDescription() { return _beanDesc; }\n-    public List<BeanPropertyWriter> getProperties() { return _properties; }\n-    public BeanPropertyWriter[] getFilteredProperties() { return _filteredProperties; }\n-    \n     public boolean hasProperties() {\n         return (_properties != null) && (_properties.size() > 0);\n     }\n         _filterId = filterId;\n     }\n \n+    public void setObjectId(AnnotatedMember idProp) {\n+        // Not legal to use multiple ones...\n+        if (_objectId != null) {\n+            throw new IllegalArgumentException(\"Multiple object ids specified with \"+_objectId+\" and \"+idProp);\n+        }\n+        _objectId = idProp;\n+    }\n+    \n     public void setTypeId(AnnotatedMember idProp) {\n+        // Not legal to use multiple ones...\n+        if (_typeId != null) {\n+            throw new IllegalArgumentException(\"Multiple type ids specified with \"+_typeId+\" and \"+idProp);\n+        }\n         _typeId = idProp;\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Accessors for things BeanSerializer cares about:\n+    /* note -- likely to change between minor revisions\n+    /*\n+    /**********************************************************\n+     */\n+\n+    public BeanDescription getBeanDescription() { return _beanDesc; }\n+    public List<BeanPropertyWriter> getProperties() { return _properties; }\n+    public BeanPropertyWriter[] getFilteredProperties() { return _filteredProperties; }\n+    \n+    public AnyGetterWriter getAnyGetter() { return _anyGetter; }\n+    \n+    public Object getFilterId() { return _filterId; }\n+    \n+    public AnnotatedMember getObjectId() { return _objectId; }\n+\n+    public AnnotatedMember getTypeId() { return _typeId; }\n     \n     /*\n     /**********************************************************\n             properties = _properties.toArray(new BeanPropertyWriter[_properties.size()]);\n             \n         }\n-        return new BeanSerializer(_beanDesc.getType(), properties, _filteredProperties,\n-                _anyGetter, _typeId, _filterId);\n+        return new BeanSerializer(_beanDesc.getType(), this,\n+                properties, _filteredProperties);\n     }\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         ArrayList<BeanPropertyWriter> result = new ArrayList<BeanPropertyWriter>(properties.size());\n         TypeBindings typeBind = beanDesc.bindingsForBeanType();\n         for (BeanPropertyDefinition property : properties) {\n+            final AnnotatedMember accessor = property.getAccessor();\n+\n+            // [JACKSON-107]: object id is additional info\n+            if (property.isObjectId()) {\n+                builder.setObjectId(accessor);\n+                // but will also be serialized normally\n+            }\n+            \n             // [JACKSON-762]: type id? Requires special handling:\n             if (property.isTypeId()) {\n-                AnnotatedMember acc = property.getAccessor();\n-                if (acc != null) { // only add if we can access... but otherwise?\n+                if (accessor != null) { // only add if we can access... but otherwise?\n                     if (config.canOverrideAccessModifiers()) {\n-                        acc.fixAccess();\n+                        accessor.fixAccess();\n                     }\n-                    builder.setTypeId(acc);\n+                    builder.setTypeId(accessor);\n                 }\n                 continue;\n             }\n             \n-            AnnotatedMember accessor = property.getAccessor();\n             // [JACKSON-235]: suppress writing of back references\n             AnnotationIntrospector.ReferenceProperty refType = property.findReferenceType();\n             if (refType != null && refType.isBackReference()) {\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/ObjectIdHandler.java\n+package com.fasterxml.jackson.databind.ser.impl;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+\n+/**\n+ * Object that knows how to serialize Object Ids.\n+ */\n+public class ObjectIdHandler\n+{\n+    /**\n+     * Logical property that represents the id.\n+     */\n+    protected final BeanProperty _property;\n+    \n+    /**\n+     * Serializer used for serializing id values.\n+     */\n+    protected final JsonSerializer<Object> _serializer;\n+    \n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    protected ObjectIdHandler(BeanProperty prop, JsonSerializer<?> ser)\n+    {\n+        _property = prop;\n+        _serializer = (JsonSerializer<Object>) ser;\n+    }\n+\n+    public static ObjectIdHandler construct(BeanProperty prop)\n+    {\n+        return new ObjectIdHandler(prop, null);\n+    }\n+\n+    public ObjectIdHandler createContextual(SerializerProvider provider)\n+        throws JsonMappingException\n+    {\n+        JsonSerializer<?> ser = provider.findValueSerializer(_property.getType(), _property);\n+        return new ObjectIdHandler(_property, ser);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* API\n+    /**********************************************************\n+     */\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.*;\n+import com.fasterxml.jackson.databind.ser.impl.ObjectIdHandler;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n \n /**\n     final protected AnyGetterWriter _anyGetterWriter;\n \n     /**\n+     * If this POJO can be alternatively serialized using just an object id\n+     * to denote a reference to previously serialized object,\n+     * this Object will handle details.\n+     */\n+    final protected ObjectIdHandler _objectIdHandler;\n+    \n+    /**\n      * If using custom type ids (usually via getter, or field), this is the\n      * reference to that member.\n      */\n      */\n \n     /**\n+     * Constructor used by {@link BeanSerializerBuilder} to create an\n+     * instance\n+     * \n      * @param type Nominal type of values handled by this serializer\n-     * @param properties Property writers used for actual serialization\n-     */\n-    protected BeanSerializerBase(JavaType type,\n-            BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties,\n-            AnyGetterWriter anyGetterWriter, AnnotatedMember typeId,\n-            Object filterId)\n+     * @param builder Builder for accessing other collected information\n+     */\n+    protected BeanSerializerBase(JavaType type, BeanSerializerBuilder builder,\n+            BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)\n     {\n         super(type);\n         _props = properties;\n         _filteredProps = filteredProperties;\n-        _anyGetterWriter = anyGetterWriter;\n-        _typeId = typeId;\n-        _propertyFilterId = filterId;\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public BeanSerializerBase(Class<?> rawType,\n-            BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties,\n-            AnyGetterWriter anyGetterWriter, AnnotatedMember typeId,\n-            Object filterId)\n-    {\n-        super((Class<Object>) rawType);\n+        if (builder == null) { // mostly for testing\n+            _objectIdHandler = null;\n+            _typeId = null;\n+            _propertyFilterId = null;\n+            _anyGetterWriter = null;\n+        } else {\n+            _anyGetterWriter = builder.getAnyGetter();\n+            _typeId = builder.getTypeId();\n+            _propertyFilterId = builder.getFilterId();\n+            // need to create a property placeholder for object id:\n+            AnnotatedMember objectIdAcc = builder.getObjectId();\n+            if (objectIdAcc == null) {\n+                _objectIdHandler = null;\n+            } else {\n+                BeanDescription beanDesc = builder.getBeanDescription();\n+                AnnotatedMember oidMember = builder.getObjectId();\n+                JavaType oidType = beanDesc.resolveType(oidMember.getGenericType());\n+                BeanProperty.Std prop = new BeanProperty.Std(oidMember.getName(),\n+                        oidType, beanDesc.getClassAnnotations(), oidMember);\n+                _objectIdHandler = ObjectIdHandler.construct(prop);\n+            }\n+        }\n+    }\n+\n+    public BeanSerializerBase(BeanSerializerBase src,\n+            BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)\n+    {\n+        super(src._handledType);\n         _props = properties;\n         _filteredProps = filteredProperties;\n-        _anyGetterWriter = anyGetterWriter;\n-        _typeId = typeId;\n-        _propertyFilterId = filterId;\n+        \n+        _anyGetterWriter = src._anyGetterWriter;\n+        _objectIdHandler = src._objectIdHandler;\n+        _typeId = src._typeId;\n+        _propertyFilterId = src._propertyFilterId;\n     }\n \n     /**\n      * copy all super-class properties without modifications.\n      */\n     protected BeanSerializerBase(BeanSerializerBase src) {\n-        this(src._handledType,\n-                src._props, src._filteredProps,\n-                src._anyGetterWriter, src._typeId, src._propertyFilterId);\n+        this(src, src._props, src._filteredProps);\n     }\n \n     /**\n      * (if it's non-empty)\n      */\n     protected BeanSerializerBase(BeanSerializerBase src, NameTransformer unwrapper) {\n-        this(src._handledType,\n-                rename(src._props, unwrapper), rename(src._filteredProps, unwrapper),\n-                src._anyGetterWriter, src._typeId, src._propertyFilterId);\n+        this(src, rename(src._props, unwrapper), rename(src._filteredProps, unwrapper));\n     }\n \n     private final static BeanPropertyWriter[] rename(BeanPropertyWriter[] props,\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestVisibleTypeId.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestVisibleTypeId.java\n         @JsonTypeId\n         public String getType() { return \"SomeType\"; }\n     }\n+\n+    // Invalid definition: multiple type ids\n+    static class MultipleIds {\n+        @JsonTypeId\n+        public String type1 = \"type1\";\n+\n+        @JsonTypeId\n+        public String getType2() { return \"type2\"; };\n+    }\n     \n     /*\n     /**********************************************************\n         assertEquals(\"{\\\"bean\\\":{\\\"a\\\":2},\\\"type\\\":\\\"SomeType\\\"}\", json);\n         \n     }\n+\n+    // Failing cases\n+\n+    public void testInvalidMultipleTypeIds() throws Exception\n+    {\n+        try {\n+            mapper.writeValueAsString(new MultipleIds());\n+            fail(\"Should have failed\");\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"multiple type ids\");\n+        }\n+    }\n }", "timestamp": 1328421590, "metainfo": ""}