{"sha": "21b3805ce084371f278d6eb6bf2ebc0882e268cf", "log": "Fixed [JACKSON-799]; @JsonSerialize.as() not working for root values", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         if (ser != null) {\n             return (JsonSerializer<Object>) ser;\n         }\n+        boolean staticTyping;\n         \n         // Next: we may have annotations that further define types to use...\n         JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-\n-        // and if so, we consider it implicit \"force static typing\" instruction\n-        boolean staticTyping = (type != origType);\n+        if (type == origType) { // no changes, won't force static typin\n+            staticTyping = false;\n+        } else { // changes; assume static typing; plus, need to re-introspect if class differs\n+            staticTyping = true;\n+            if (type.getRawClass() != origType.getRawClass()) {\n+                beanDesc = config.introspect(type);\n+            }\n+        }\n \n         // Modules may provide serializers of all types:\n         for (Serializers serializers : _factoryConfig.serializers()) {\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerializeAs.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerializeAs.java\n             return new FooImpl[] { new FooImpl() };\n         }\n     }\n+\n+    public class FooableWrapper {\n+        public FooImpl getFoo() {\n+            return new FooImpl();\n+        }\n+    }\n     \n     /*\n     /**********************************************************\n \n     public void testSerializeAsForArrayProp() throws IOException\n     {\n-        assertEquals(\"[{\\\"foo\\\":42}]\", WRITER.writeValueAsString(new Fooables()));\n+        assertEquals(\"{\\\"foos\\\":[{\\\"foo\\\":42}]}\", WRITER.writeValueAsString(new Fooables()));\n     }\n \n+    public void testSerializeAsForSimpleProp() throws IOException\n+    {\n+        assertEquals(\"{\\\"foo\\\":{\\\"foo\\\":42}}\", WRITER.writeValueAsString(new FooableWrapper()));\n+    }\n }", "timestamp": 1331344675, "metainfo": ""}