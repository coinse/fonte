{"sha": "071a170f20aa6571ab99c486e84b7032bab40131", "log": "Add 'ContainerSerializer' as a shared base class, with new 'getContentType()' method", "commit": "\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n+package com.fasterxml.jackson.databind.ser;\n+\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.std.SerializerBase;\n+\n+/**\n+ * Intermediate base class for serializers used for serializing\n+ * types that contain element(s) of other types, such as arrays,\n+ * {@link java.util.Collection}s (<code>Lists</code>, <code>Sets</code>\n+ * etc) and {@link java.util.Map}s and iterable things\n+ * ({@link java.util.Iterator}s).\n+ */\n+public abstract class ContainerSerializer<T>\n+    extends SerializerBase<T>\n+{\n+    /*\n+    /**********************************************************\n+    /* Construction, initialization\n+    /**********************************************************\n+     */\n+\n+    protected ContainerSerializer(Class<T> t) {\n+        super(t);\n+    }\n+    \n+    /**\n+     * Alternate constructor that is (alas!) needed to work\n+     * around kinks of generic type handling\n+     * \n+     * @param t\n+     */\n+    protected ContainerSerializer(Class<?> t, boolean dummy) {\n+        super(t, dummy);\n+    }\n+\n+    /**\n+     * Factory(-like) method that can be used to construct a new container\n+     * serializer that uses specified {@link TypeSerializer} for decorating\n+     * contained values with additional type information.\n+     * \n+     * @param vts Type serializer to use for contained values; can be null,\n+     *    in which case 'this' serializer is returned as is\n+     * @return Serializer instance that uses given type serializer for values if\n+     *    that is possible (or if not, just 'this' serializer)\n+     */\n+    public ContainerSerializer<?> withValueTypeSerializer(TypeSerializer vts) {\n+        if (vts == null) return this;\n+        return _withValueTypeSerializer(vts);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Extended API\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Accessor for finding declared (static) element type for\n+     * type this serializer is used for.\n+     */\n+    public abstract JavaType getContentType();\n+    \n+    /*\n+    /**********************************************************\n+    /* Abstract methods for sub-classes to implement\n+    /**********************************************************\n+     */\n+    \n+    /* Overridden as abstract, to force re-implementation; necessary for all\n+     * collection types.\n+     */\n+    @Override\n+    public abstract boolean isEmpty(T value);\n+    \n+    public abstract ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts);\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n \n  * and array types.\n  */\n public abstract class AsArraySerializerBase<T>\n-    extends ContainerSerializerBase<T>\n+    extends ContainerSerializer<T>\n     implements ResolvableSerializer\n {\n     protected final boolean _staticTyping;\n      * runtime type to serializer is handled using this object\n      */\n     protected PropertySerializerMap _dynamicSerializers;\n-\n+    \n     protected AsArraySerializerBase(Class<?> cls, JavaType et, boolean staticTyping,\n             TypeSerializer vts, BeanProperty property, JsonSerializer<Object> elementSerializer)\n     {\n         _dynamicSerializers = PropertySerializerMap.emptyMap();\n     }\n \n+    @Override\n+    public JavaType getContentType() {\n+        return _elementType;\n+    }\n+    \n     @Override\n     public final void serialize(T value, JsonGenerator jgen, SerializerProvider provider)\n         throws IOException, JsonGenerationException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n                 TypeSerializer typeSer = type.getContentType().getTypeHandler();\n                 if (typeSer != null) {\n                     // for now, can do this only for standard containers...\n-                    if (ser instanceof ContainerSerializerBase<?>) {\n+                    if (ser instanceof ContainerSerializer<?>) {\n                         // ugly casts... but necessary\n                         @SuppressWarnings(\"unchecked\")\n-                        JsonSerializer<Object> ser2 = (JsonSerializer<Object>)((ContainerSerializerBase<?>) ser).withValueTypeSerializer(typeSer);\n+                        JsonSerializer<Object> ser2 = (JsonSerializer<Object>)((ContainerSerializer<?>) ser).withValueTypeSerializer(typeSer);\n                         ser = ser2;\n                     }\n                 }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n \n \n     }\n     \n     @Override\n-    public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts) {\n+    public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n         return new CollectionSerializer(_elementType, _staticTyping, vts, _property, _elementSerializer);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n import com.fasterxml.jackson.databind.util.EnumValues;\n \n  */\n @JacksonStdImpl\n public class EnumMapSerializer\n-    extends ContainerSerializerBase<EnumMap<? extends Enum<?>, ?>>\n+    extends ContainerSerializer<EnumMap<? extends Enum<?>, ?>>\n     implements ResolvableSerializer\n {\n     protected final boolean _staticTyping;\n     }\n \n     @Override\n-    public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts)\n+    public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts)\n     {\n         return new EnumMapSerializer(_valueType, _staticTyping, _keyEnums, vts,  _property, _valueSerializer);\n     }\n \n+    @Override\n+    public JavaType getContentType() {\n+        return _valueType;\n+    }\n+    \n     @Override\n     public boolean isEmpty(EnumMap<? extends Enum<?>,?> value) {\n         return (value == null) || value.isEmpty();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n \n public class EnumSetSerializer\n     extends AsArraySerializerBase<EnumSet<? extends Enum<?>>>\n     }\n \n     @Override\n-    public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts) {\n+    public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n         // no typing for enums (always \"hard\" type)\n         return this;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n \n @JacksonStdImpl\n public class IterableSerializer\n     }\n \n     @Override\n-    public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts) {\n+    public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n         return new IterableSerializer(_elementType, _staticTyping, vts, _property);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n  */\n @JacksonStdImpl\n public class MapSerializer\n-    extends ContainerSerializerBase<Map<?,?>>\n+    extends ContainerSerializer<Map<?,?>>\n     implements ResolvableSerializer\n {\n     protected final static JavaType UNSPECIFIED_TYPE = TypeFactory.unknownType();\n     }\n     \n     @Override\n-    public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts)\n+    public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts)\n     {\n         MapSerializer ms = new MapSerializer(_ignoredEntries, _keyType, _valueType, _valueTypeIsStatic, vts,\n                 _keySerializer, _valueSerializer, _property);\n     /**********************************************************\n      */\n \n+    @Override\n+    public JavaType getContentType() {\n+        return _valueType;\n+    }\n+    \n     @Override\n     public boolean isEmpty(Map<?,?> value) {\n         return (value == null) || value.isEmpty();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n import com.fasterxml.jackson.databind.type.ArrayType;\n     }\n \n     @Override\n-    public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts)\n+    public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts)\n     {\n         return new ObjectArraySerializer(_elementType, _staticTyping, vts, _property, _elementSerializer);\n     }\n \n+    @Override\n+    public JavaType getContentType() {\n+        return _elementType;\n+    }\n+    \n     @Override\n     public boolean isEmpty(Object[] value) {\n         return (value == null) || (value.length == 0);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n \n /**\n  * Dummy container class to group standard homogenous array serializer implementations\n      * arrays.\n      */\n     public abstract static class ArraySerializerBase<T>\n-        extends ContainerSerializerBase<T>\n+        extends ContainerSerializer<T>\n     {\n          /**\n          * Type serializer used for values, if any.\n         extends ArraySerializerBase<String[]>\n         implements ResolvableSerializer\n     {\n+        /* Note: not clean in general, but we are betting against\n+         * anyone re-defining properties of String.class here...\n+         */\n+        private final static JavaType VALUE_TYPE = TypeFactory.defaultInstance().uncheckedSimpleType(String.class);\n+            \n         /**\n          * Value serializer to use, if it's not the standard one\n          * (if it is we can optimize serialization a lot)\n          * we'll ignore it...\n          */\n         @Override\n-        public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts) {\n+        public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n             return this;\n         }\n \n+        @Override\n+        public JavaType getContentType() {\n+            return VALUE_TYPE;\n+        }\n+        \n         @Override\n         public boolean isEmpty(String[] value) {\n             return (value == null) || (value.length == 0);\n     public final static class BooleanArraySerializer\n         extends ArraySerializerBase<boolean[]>\n     {\n+        // as above, assuming no one re-defines primitive/wrapper types\n+        private final static JavaType VALUE_TYPE = TypeFactory.defaultInstance().uncheckedSimpleType(Boolean.class);\n+\n         public BooleanArraySerializer() { super(boolean[].class, null, null); }\n \n         /**\n          * we'll ignore it...\n          */\n         @Override\n-        public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts) {\n+        public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n             return this;\n         }\n \n+        @Override\n+        public JavaType getContentType() {\n+            return VALUE_TYPE;\n+        }\n+        \n         @Override\n         public boolean isEmpty(boolean[] value) {\n             return (value == null) || (value.length == 0);\n         public ByteArraySerializer() {\n             super(byte[].class);\n         }\n-\n+        \n         @Override\n         public boolean isEmpty(byte[] value) {\n             return (value == null) || (value.length == 0);\n     public final static class ShortArraySerializer\n         extends ArraySerializerBase<short[]>\n     {\n+        // as above, assuming no one re-defines primitive/wrapper types\n+        private final static JavaType VALUE_TYPE = TypeFactory.defaultInstance().uncheckedSimpleType(Short.TYPE);\n+\n         public ShortArraySerializer() { this(null); }\n         public ShortArraySerializer(TypeSerializer vts) { super(short[].class, vts, null); }\n \n         @Override\n-        public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts) {\n+        public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n             return new ShortArraySerializer(vts);\n+        }\n+\n+        @Override\n+        public JavaType getContentType() {\n+            return VALUE_TYPE;\n         }\n         \n         @Override\n         extends SerializerBase<char[]>\n     {\n         public CharArraySerializer() { super(char[].class); }\n-\n+        \n         @Override\n         public boolean isEmpty(char[] value) {\n             return (value == null) || (value.length == 0);\n     public final static class IntArraySerializer\n         extends ArraySerializerBase<int[]>\n     {\n+        // as above, assuming no one re-defines primitive/wrapper types\n+        private final static JavaType VALUE_TYPE = TypeFactory.defaultInstance().uncheckedSimpleType(Integer.TYPE);\n+\n         public IntArraySerializer() { super(int[].class, null, null); }\n \n         /**\n          * we'll ignore it...\n          */\n         @Override\n-        public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts) {\n+        public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n             return this;\n         }        \n \n         @Override\n+        public JavaType getContentType() {\n+            return VALUE_TYPE;\n+        }\n+        \n+        @Override\n         public boolean isEmpty(int[] value) {\n             return (value == null) || (value.length == 0);\n         }\n     public final static class LongArraySerializer\n         extends ArraySerializerBase<long[]>\n     {\n+        // as above, assuming no one re-defines primitive/wrapper types\n+        private final static JavaType VALUE_TYPE = TypeFactory.defaultInstance().uncheckedSimpleType(Long.TYPE);\n+\n         public LongArraySerializer() { this(null); }\n         public LongArraySerializer(TypeSerializer vts) { super(long[].class, vts, null); }\n \n         @Override\n-        public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts) {\n+        public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n             return new LongArraySerializer(vts);\n         }\n \n+        @Override\n+        public JavaType getContentType() {\n+            return VALUE_TYPE;\n+        }\n+        \n         @Override\n         public boolean isEmpty(long[] value) {\n             return (value == null) || (value.length == 0);\n     public final static class FloatArraySerializer\n         extends ArraySerializerBase<float[]>\n     {\n+        // as above, assuming no one re-defines primitive/wrapper types\n+        private final static JavaType VALUE_TYPE = TypeFactory.defaultInstance().uncheckedSimpleType(Float.TYPE);\n+        \n         public FloatArraySerializer() { this(null); }\n         public FloatArraySerializer(TypeSerializer vts) { super(float[].class, vts, null); }\n \n         @Override\n-        public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts) {\n+        public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n             return new FloatArraySerializer(vts);\n+        }\n+\n+        @Override\n+        public JavaType getContentType() {\n+            return VALUE_TYPE;\n         }\n \n         @Override\n     public final static class DoubleArraySerializer\n         extends ArraySerializerBase<double[]>\n     {\n+        // as above, assuming no one re-defines primitive/wrapper types\n+        private final static JavaType VALUE_TYPE = TypeFactory.defaultInstance().uncheckedSimpleType(Double.TYPE);\n+\n         public DoubleArraySerializer() { super(double[].class, null, null); }\n \n         /**\n          * we'll ignore it...\n          */\n         @Override\n-        public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts) {\n+        public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n             return this;\n         }\n \n         @Override\n+        public JavaType getContentType() {\n+            return VALUE_TYPE;\n+        }\n+        \n+        @Override\n         public boolean isEmpty(double[] value) {\n             return (value == null) || (value.length == 0);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n import com.fasterxml.jackson.databind.ser.std.CollectionSerializer;\n \n     /**********************************************************\n      */\n         \n-    public static ContainerSerializerBase<?> indexedListSerializer(JavaType elemType,\n+    public static ContainerSerializer<?> indexedListSerializer(JavaType elemType,\n             boolean staticTyping, TypeSerializer vts, BeanProperty property,\n             JsonSerializer<Object> valueSerializer)\n     {\n         return new IndexedListSerializer(elemType, staticTyping, vts, property, valueSerializer);\n     }\n \n-    public static ContainerSerializerBase<?> collectionSerializer(JavaType elemType,\n+    public static ContainerSerializer<?> collectionSerializer(JavaType elemType,\n             boolean staticTyping, TypeSerializer vts, BeanProperty property,\n             JsonSerializer<Object> valueSerializer)\n     {\n         return new CollectionSerializer(elemType, staticTyping, vts, property, valueSerializer);\n     }\n \n-    public static ContainerSerializerBase<?> iteratorSerializer(JavaType elemType,\n+    public static ContainerSerializer<?> iteratorSerializer(JavaType elemType,\n             boolean staticTyping, TypeSerializer vts, BeanProperty property)\n     {\n         return new IteratorSerializer(elemType, staticTyping, vts, property);\n     }\n \n-    public static ContainerSerializerBase<?> iterableSerializer(JavaType elemType,\n+    public static ContainerSerializer<?> iterableSerializer(JavaType elemType,\n             boolean staticTyping, TypeSerializer vts, BeanProperty property)\n     {\n         return new IterableSerializer(elemType, staticTyping, vts, property);\n         }\n         \n         @Override\n-        public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts) {\n+        public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n             return new IndexedListSerializer(_elementType, _staticTyping, vts, _property, _elementSerializer);\n         }\n         \n         }\n         \n         @Override\n-        public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts) {\n+        public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n             return new IteratorSerializer(_elementType, _staticTyping, vts, _property);\n         }\n         \n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n         // Shouldbe able to optimize bit more in future...\n         return defaultInstance().constructType(t).getRawClass();\n     }\n-    \n-    /*\n-    public static JavaType fromCanonical(String canonical) throws IllegalArgumentException {\n-        return instance.constructFromCanonical(canonical);\n-    }\n-    */\n+\n+    /**\n+     * Method used by framework for handling types that are known\n+     * not to have generic types both due to being passed as Class,\n+     * and because caller guarantees that no container types\n+     * are passed (this is important since type modifiers will not\n+     * be consulted).\n+     */\n+    public SimpleType unsafeTrivialType(Class<?> erasedType) {\n+        return new SimpleType(erasedType);\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeModifier.java\n  * This is typically needed to support creation of\n  * {@link MapLikeType} and {@link CollectionLikeType} instances,\n  * as those can not be constructed in generic fashion.\n- * \n- * @since 1.8\n  */\n public abstract class TypeModifier\n {\n     /**\n      * Method called to let modifier change constructed type definition.\n-     * Note that as of version 1.8 this is only guaranteed to be called for\n+     * Note that this is only guaranteed to be called for\n      * non-container types (\"simple\" types not recognized as arrays,\n      * <code>java.util.Collection</code> or <code>java.util.Map</code>).\n      * ", "timestamp": 1326591602, "metainfo": ""}