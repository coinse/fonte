{"sha": "7f1b6ef010e954afb84cd68bdffec99b3310849f", "log": "Add simple tests for [JACKSON-608]", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/views/TestViewDeserialization.java\n+package com.fasterxml.jackson.databind.views;\n+\n+import com.fasterxml.jackson.annotation.JsonView;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestViewDeserialization extends BaseMapTest\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+\n+    // Classes that represent views\n+    static class ViewA { }\n+    static class ViewAA extends ViewA { }\n+    static class ViewB { }\n+    static class ViewBB extends ViewB { }\n+    \n+    static class Bean\n+    {\n+        @JsonView(ViewA.class)\n+        public int a;\n+\n+        @JsonView({ViewAA.class, ViewB.class})\n+        public String aa;\n+\n+        protected int b;\n+        \n+        @JsonView(ViewB.class)\n+        public void setB(int value) { b = value; }\n+    }\n+\n+    /*\n+    /************************************************************************ \n+    /* Tests\n+    /************************************************************************ \n+     */\n+\n+    private final ObjectMapper mapper = new ObjectMapper();\n+    \n+    public void testSimple() throws Exception\n+    {\n+        Bean bean = mapper.readerWithView(ViewAA.class)\n+                .withType(Bean.class)\n+                .readValue(\"{\\\"a\\\":3, \\\"aa\\\":\\\"foo\\\", \\\"b\\\": 9 }\");\n+        // should include 'a' and 'aa' (as per view)\n+        assertEquals(3, bean.a);\n+        assertEquals(\"foo\", bean.aa);\n+        // but not 'b'\n+        assertEquals(0, bean.b);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/views/TestViewSerialization.java\n+package com.fasterxml.jackson.databind.views;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+\n+/**\n+ * Unit tests for verifying JSON view functionality: ability to declaratively\n+ * suppress subset of properties from being serialized.\n+ */\n+public class TestViewSerialization\n+    extends BaseMapTest\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+\n+    // Classes that represent views\n+    static class ViewA { }\n+    static class ViewAA extends ViewA { }\n+    static class ViewB { }\n+    static class ViewBB extends ViewB { }\n+    \n+    static class Bean\n+    {\n+        @JsonView(ViewA.class)\n+        public String a = \"1\";\n+\n+        @JsonView({ViewAA.class, ViewB.class})\n+        public String aa = \"2\";\n+\n+        @JsonView(ViewB.class)\n+        public String getB() { return \"3\"; }\n+    }\n+\n+    /**\n+     * Bean with mix of explicitly annotated\n+     * properties, and implicit ones that may or may\n+     * not be included in views.\n+     */\n+    static class MixedBean\n+    {\n+        @JsonView(ViewA.class)\n+        public String a = \"1\";\n+\n+        public String getB() { return \"2\"; }\n+    }\n+\n+    /**\n+     * As indicated by [JACKSON-261], @JsonView should imply\n+     * that associated element (method, field) is to be considered\n+     * a property\n+     */\n+    static class ImplicitBean {\n+    \t@SuppressWarnings(\"unused\")\n+\t\t@JsonView(ViewA.class)\n+    \tprivate int a = 1;\n+    }\n+\n+    static class VisibilityBean {\n+        @JsonProperty protected String id = \"id\";\n+    \n+        @JsonView(ViewA.class)\n+        public String value = \"x\";\n+    }   \n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */    \n+    \n+    @SuppressWarnings(\"unchecked\")\n+    public void testSimple() throws IOException\n+    {\n+        StringWriter sw = new StringWriter();\n+        ObjectMapper mapper = new ObjectMapper();\n+        // Ok, first, using no view whatsoever; all 3\n+        Bean bean = new Bean();\n+        Map<String,Object> map = writeAndMap(mapper, bean);\n+        assertEquals(3, map.size());\n+\n+        // Then with \"ViewA\", just one property\n+        sw = new StringWriter();\n+        mapper.writerWithView(ViewA.class).writeValue(sw, bean);\n+        map = mapper.readValue(sw.toString(), Map.class);\n+        assertEquals(1, map.size());\n+        assertEquals(\"1\", map.get(\"a\"));\n+\n+        // \"ViewAA\", 2 properties\n+        sw = new StringWriter();\n+        mapper.writerWithView(ViewAA.class).writeValue(sw, bean);\n+        map = mapper.readValue(sw.toString(), Map.class);\n+        assertEquals(2, map.size());\n+        assertEquals(\"1\", map.get(\"a\"));\n+        assertEquals(\"2\", map.get(\"aa\"));\n+\n+        // \"ViewB\", 2 prop2\n+        String json = mapper.writerWithView(ViewB.class).writeValueAsString(bean);\n+        map = mapper.readValue(json, Map.class);\n+        assertEquals(2, map.size());\n+        assertEquals(\"2\", map.get(\"aa\"));\n+        assertEquals(\"3\", map.get(\"b\"));\n+\n+        // and \"ViewBB\", 2 as well\n+        json = mapper.writerWithView(ViewBB.class).writeValueAsString(bean);\n+        map = mapper.readValue(json, Map.class);\n+        assertEquals(2, map.size());\n+        assertEquals(\"2\", map.get(\"aa\"));\n+        assertEquals(\"3\", map.get(\"b\"));\n+    }\n+\n+    /**\n+     * Unit test to verify implementation of [JACKSON-232], to\n+     * allow \"opt-in\" handling for JSON Views: that is, that\n+     * default for properties is to exclude unless included in\n+     * a view.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void testDefaultExclusion() throws IOException\n+    {\n+        MixedBean bean = new MixedBean();\n+        StringWriter sw = new StringWriter();\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        // default setting: both fields will get included\n+        mapper.writerWithView(ViewA.class).writeValue(sw, bean);\n+        Map<String,Object> map = mapper.readValue(sw.toString(), Map.class);\n+        assertEquals(2, map.size());\n+        assertEquals(\"1\", map.get(\"a\"));\n+        assertEquals(\"2\", map.get(\"b\"));\n+\n+        // but can also change (but not necessarily on the fly...)\n+        mapper = new ObjectMapper();\n+        mapper.configure(MapperConfig.Feature.DEFAULT_VIEW_INCLUSION, false);\n+        // with this setting, only explicit inclusions count:\n+        String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean);\n+        map = mapper.readValue(json, Map.class);\n+        assertEquals(1, map.size());\n+        assertEquals(\"1\", map.get(\"a\"));\n+        assertNull(map.get(\"b\"));\n+    }\n+\n+    /**\n+     * As per [JACKSON-261], @JsonView annotation should imply that associated\n+     * method/field does indicate a property.\n+     */\n+    public void testImplicitAutoDetection() throws Exception\n+    {\n+    \tassertEquals(\"{\\\"a\\\":1}\", serializeAsString(new ImplicitBean()));\n+    }\n+\n+    public void testVisibility() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        VisibilityBean bean = new VisibilityBean();\n+        // Without view setting, should only see \"id\"\n+        String json = mapper.writerWithView(Object.class).writeValueAsString(bean);\n+        //json = mapper.writeValueAsString(bean);\n+        assertEquals(\"{\\\"id\\\":\\\"id\\\"}\", json);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/views/TestViewsSerialization2.java\n+package com.fasterxml.jackson.databind.views;\n+\n+import java.io.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+\n+public class TestViewsSerialization2 extends BaseMapTest\n+{\n+    /*\n+    /************************************************************************ \n+    /* Tests\n+    /************************************************************************ \n+     */\n+    \n+  public void testDataBindingUsage( ) throws Exception\n+  {\n+    ObjectMapper objectMapper = createObjectMapper( null );\n+    String result = serializeWithObjectMapper(new ComplexTestData( ), Views.View.class, objectMapper );\n+    assertEquals(-1, result.indexOf( \"nameHidden\" ));\n+  }\n+\n+  public void testDataBindingUsageWithoutView( ) throws Exception\n+  {\n+    ObjectMapper objectMapper = createObjectMapper( null );\n+    String json = serializeWithObjectMapper(new ComplexTestData( ), null, objectMapper);\n+    assertTrue(json.indexOf( \"nameHidden\" ) > 0);\n+  }\n+\n+  /*\n+  /************************************************************************\n+  /* Helper  methods\n+  /************************************************************************\n+   */\n+\n+  private ObjectMapper createObjectMapper(Class<?> viewClass)\n+  {\n+    ObjectMapper objectMapper = new ObjectMapper( );\n+    objectMapper.configure( SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS, false );\n+    objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL );\n+    objectMapper.configure(MapperConfig.Feature.DEFAULT_VIEW_INCLUSION, false );\n+//    objectMapper.getSerializationConfig( ).disable( SerializationConfig.Feature.DEFAULT_VIEW_INCLUSION );\n+//    objectMapper.getSerializationConfig( ).setSerializationView( viewClass );\n+    return objectMapper;\n+  }\n+  \n+  private String serializeWithObjectMapper(Object object, Class<? extends Views.View> view, ObjectMapper objectMapper )\n+      throws IOException\n+  {\n+    return objectMapper.writerWithView(view).writeValueAsString(object);\n+  }\n+\n+  /*\n+  /************************************************************************\n+  /* Helper classes\n+  /************************************************************************\n+   */\n+\n+  static class Views\n+  {\n+    public interface View { }\n+    public interface ExtendedView  extends View { }\n+  }\n+  \n+  static class ComplexTestData\n+  {\n+    String nameNull = null;\n+\n+    String nameComplex = \"complexValue\";\n+\n+    String nameComplexHidden = \"nameComplexHiddenValue\";\n+\n+    SimpleTestData testData = new SimpleTestData( );\n+\n+    SimpleTestData[] testDataArray = new SimpleTestData[] { new SimpleTestData( ), null };\n+\n+    @JsonView( Views.View.class )\n+    public String getNameNull()\n+    {\n+      return nameNull;\n+    }\n+\n+    public void setNameNull( String nameNull )\n+    {\n+      this.nameNull = nameNull;\n+    }\n+\n+    @JsonView( Views.View.class )\n+    public String getNameComplex()\n+    {\n+      return nameComplex;\n+    }\n+\n+    public void setNameComplex( String nameComplex )\n+    {\n+      this.nameComplex = nameComplex;\n+    }\n+\n+    public String getNameComplexHidden()\n+    {\n+      return nameComplexHidden;\n+    }\n+\n+    public void setNameComplexHidden( String nameComplexHidden )\n+    {\n+      this.nameComplexHidden = nameComplexHidden;\n+    }\n+\n+    @JsonView( Views.View.class )\n+    public SimpleTestData getTestData()\n+    {\n+      return testData;\n+    }\n+\n+    public void setTestData( SimpleTestData testData )\n+    {\n+      this.testData = testData;\n+    }\n+\n+    @JsonView( Views.View.class )\n+    public SimpleTestData[] getTestDataArray()\n+    {\n+      return testDataArray;\n+    }\n+\n+    public void setTestDataArray( SimpleTestData[] testDataArray )\n+    {\n+      this.testDataArray = testDataArray;\n+    }\n+  }\n+\n+  static class SimpleTestData\n+  {\n+    String name = \"shown\";\n+\n+    String nameHidden = \"hidden\";\n+\n+    @JsonView( Views.View.class )\n+    public String getName()\n+    {\n+      return name;\n+    }\n+\n+    public void setName( String name )\n+    {\n+      this.name = name;\n+    }\n+\n+    public String getNameHidden( )\n+    {\n+      return nameHidden;\n+    }\n+\n+    public void setNameHidden( String nameHidden )\n+    {\n+      this.nameHidden = nameHidden;\n+    }\n+  }\n+\n+}", "timestamp": 1327466587, "metainfo": ""}