{"sha": "fe7e30d7ecc5780514a37001990102cb6068ffec", "log": "Javadoc additions", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java\n \n /**\n  * Add-on interface that {@link JsonDeserializer}s can implement to get a callback\n- * that can be used to create contextual instances of deserializer to use for\n- * handling properties of supported type. This can be useful\n+ * that can be used to create contextual (context-dependent) instances of\n+ * deserializer to use for  handling properties of supported type.\n+ * This can be useful\n  * for deserializers that can be configured by annotations, or should otherwise\n  * have differing behavior depending on what kind of property is being deserialized.\n+ *<p>\n+ * Note that in cases where deserializer needs both contextualization and\n+ * resolution -- that is, implements both this interface and {@link ResolvableDeserializer}\n+ * -- resolution via {@link ResolvableDeserializer} occurs first, and contextual\n+ * resolution (via this interface) later on.\n  *\n  * @param <T> Type of deserializer to contextualize\n- * \n- * @since 1.7\n  */\n public interface ContextualDeserializer<T>\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ResolvableDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ResolvableDeserializer.java\n  * but before being used. This is typically used to resolve references\n  * to other contained types; for example, bean deserializers use this\n  * to eagerly find deserializers for contained field types.\n+ *<p>\n+ * Note that in cases where deserializer needs both contextualization and\n+ * resolution -- that is, implements both this interface and {@link ContextualDeserializer}\n+ * -- resolution via this interface occurs first, and contextual\n+ * resolution (using {@link ContextualDeserializer}) later on.\n  */\n public interface ResolvableDeserializer\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java\n public class StdDeserializerProvider\n     extends DeserializerProvider\n {\n-    \n     /*\n     /**********************************************************\n     /* Caching\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java\n  * handling properties of supported type. This can be useful\n  * for serializers that can be configured by annotations, or should otherwise\n  * have differing behavior depending on what kind of property is being serialized.\n+ *<p>\n+ * Note that in cases where serializer needs both contextualization and\n+ * resolution -- that is, implements both this interface and {@link ResolvableSerializer}\n+ * -- resolution via {@link ResolvableSerializer} occurs first, and contextual\n+ * resolution (via this interface) later on.\n  *\n  * @param <T> Type of serializer to contextualize\n- * \n- * @since 1.7\n  */\n public interface ContextualSerializer<T>\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java\n package com.fasterxml.jackson.databind.ser;\n \n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.*;\n \n /**\n  * Interface used to indicate serializers that want to do post-processing\n  * but before being used. This is typically used to resolve references\n  * to other contained types; for example, bean serializers use this\n  * to eagerly find serializers for contained field types.\n+ *<p>\n+ * Note that in cases where serializer needs both contextualization and\n+ * resolution -- that is, implements both this interface and {@link ContextualSerializer}\n+ * -- resolution via this interface occurs first, and contextual\n+ * resolution (using {@link ContextualSerializer}) later on.\n  */\n public interface ResolvableSerializer\n {\n      * the serializer, but before it has returned it to the caller.\n      * Called object can then resolve its dependencies to other types,\n      * including self-references (direct or indirect).\n+     *<p>\n+     * Note that this method does NOT return serializer, since resolution\n+     * is not allowed to change actual serializer to use.\n      *\n      * @param provider Provider that has constructed serializer this method\n      *   is called on.", "timestamp": 1326667322, "metainfo": ""}