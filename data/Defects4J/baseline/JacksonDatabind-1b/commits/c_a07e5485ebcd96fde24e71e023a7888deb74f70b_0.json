{"sha": "a07e5485ebcd96fde24e71e023a7888deb74f70b", "log": "Removed last existing deprecated methods", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.LinkedNode;\n-\n \n /**\n  * Object that contains baseline configuration for deserialization\n--- a/src/main/java/com/fasterxml/jackson/databind/MapperConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MapperConfig.java\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.StdDateFormat;\n-\n \n /**\n  * Interface that defines functionality accessible through both\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n \n import java.text.DateFormat;\n import java.util.*;\n-\n \n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n      * Default settings is to include all regardless of value; can be\n      * changed to only include non-null properties, or properties\n      * with non-default values.\n-     *<p>\n-     * Defaults to null for backwards compatibility; if left as null,\n-     * will check\n-     * deprecated {@link Feature#WRITE_NULL_PROPERTIES}\n-     * to choose between {@link Inclusion#ALWAYS}\n-     * and {@link Inclusion#NON_NULL}.\n      */\n     protected JsonSerialize.Inclusion _serializationInclusion = null;\n \n     /**\n      * Object used for resolving filter ids to filter instances.\n      * Non-null if explicitly defined; null by default.\n-     * \n-     * @since 1.7\n      */\n     protected FilterProvider _filterProvider;\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n      * Property that contains value to be deserialized using\n      * deserializer; mostly needed to find contextual annotations\n      * for subtypes.\n-     * \n-     * @since 1.7\n      */\n     final protected BeanProperty _property;\n     \n     /**********************************************************\n      */\n \n-    /**\n-     * @deprecated (since 1.9) Use the constructor that takes {@link ValueInstantiator} instead\n-     */\n-    @Deprecated\n-    public BeanDeserializer(AnnotatedClass forClass, JavaType type, BeanProperty property,\n-            CreatorCollector creators,\n-            BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs,\n-            HashSet<String> ignorableProps, boolean ignoreAllUnknown,\n-            SettableAnyProperty anySetter)\n-    {\n-        this(forClass, type, property,\n-                creators.constructValueInstantiator(null),\n-                properties, backRefs,\n-                ignorableProps, ignoreAllUnknown,\n-                anySetter, null);\n-    }\n-\n-    /**\n-     * @since 1.9\n-     */\n     public BeanDeserializer(BeanDescription beanDesc, BeanProperty property,\n             ValueInstantiator valueInstantiator,\n             BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs,\n                 anySetter, injectables);\n     }\n     \n-    /**\n-     * @since 1.9\n-     */\n     protected BeanDeserializer(AnnotatedClass forClass, JavaType type, BeanProperty property,\n             ValueInstantiator valueInstantiator,\n             BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs,\n     /**\n      * Copy-constructor that can be used by sub-classes to allow\n      * copy-on-write styling copying of settings of an existing instance.\n-     * \n-     * @since 1.7\n      */\n     protected BeanDeserializer(BeanDeserializer src)\n     {\n         this(src, src._ignoreAllUnknown);\n     }\n \n-    /**\n-     * @since 1.9\n-     */\n     protected BeanDeserializer(BeanDeserializer src, boolean ignoreAllUnknown)\n     {\n         super(src._beanType);\n         }\n         throw ctxt.instantiationException(_beanType.getRawClass(), t);\n     }\n-    \n-    /**\n-     * @deprecated Since 1.7 use variant that takes {@link DeserializationContext}\n-     */\n-    @Deprecated\n-    public void wrapAndThrow(Throwable t, Object bean, String fieldName)\n-        throws IOException\n-    {\n-        wrapAndThrow(t, bean, fieldName, null);\n-    }\n-    \n-    /**\n-     * @deprecated Since 1.7 use variant that takes {@link DeserializationContext}\n-     */\n-    @Deprecated\n-    public void wrapAndThrow(Throwable t, Object bean, int index)\n-        throws IOException\n-    {\n-        wrapAndThrow(t, bean, index, null);\n-    }    \n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n      *    {@link ResolvableDeserializer} callback)\n      * \n      * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n-     * \n-     * @since 1.8\n      */\n     public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type, DeserializationConfig config,\n             DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n      * sub-classes only need to override methods they need, as most of the time some\n      * of methods are not needed (especially enumeration and array deserializers are\n      * very rarely overridden).\n-     * \n-     * @since 1.9\n      */\n     public static class Base implements Deserializers\n     {\n             return null;\n         }\n     }\n-\n-\n-    /**\n-     * @deprecated As of 1.9, use {@link Base} instead\n-     */\n-    @Deprecated\n-    public static class None extends Base { }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n-\n \n /**\n  * Class that represents a \"wildcard\" set method which can be used\n     /**\n      * Method used for setting \"any\" properties, along with annotation\n      * information. Retained to allow contextualization of any properties.\n-     * \n-     * @since 1.7\n      */\n     final protected BeanProperty _property;\n     \n     /* Life-cycle\n     /**********************************************************\n      */\n-    \n-    /**\n-     * @deprecated Since 1.9 - use variant that takes deserializer\n-     */\n-    @Deprecated\n-    public SettableAnyProperty(BeanProperty property, AnnotatedMethod setter, JavaType type) {\n-        this(property, setter, type, null);\n-    }\n \n     public SettableAnyProperty(BeanProperty property, AnnotatedMethod setter, JavaType type,\n             JsonDeserializer<Object> valueDeser) {\n \n     public SettableAnyProperty withValueDeserializer(JsonDeserializer<Object> deser) {\n         return new SettableAnyProperty(_property, _setter, _type, deser);\n-    }\n-    \n-    /**\n-     * @deprecated Since 1.9 - construct with deserializer\n-     */\n-    @Deprecated\n-    public void setValueDeserializer(JsonDeserializer<Object> deser)\n-    {\n-        if (_valueDeserializer != null) { // sanity check\n-            throw new IllegalStateException(\"Already had assigned deserializer for SettableAnyProperty\");\n-        }\n-        _valueDeserializer = deser;\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n import com.fasterxml.jackson.databind.util.Annotations;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n \n-\n /**\n  * Base class for settable properties of a bean: contains\n  * both type and name definitions, and reflection-based set functionality.\n  * setter-backed properties can be handled\n  */\n public abstract class SettableBeanProperty\n-    implements BeanProperty // since 1.7\n+    implements BeanProperty\n {\n     /**\n      * Logical name of the property (often but not always derived\n             _nullProvider = (nvl == null) ? null : new NullProvider(_type, nvl);\n         }\n     }\n-    \n-    @Deprecated\n-    public void setValueDeserializer(JsonDeserializer<Object> deser)\n-    {\n-        if (_valueDeserializer != null) { // sanity check\n-            throw new IllegalStateException(\"Already had assigned deserializer for property '\"+getName()+\"' (class \"+getDeclaringClass().getName()+\")\");\n-        }\n-        _valueDeserializer = deser;\n-        Object nvl = _valueDeserializer.getNullValue();\n-        _nullProvider = (nvl == null) ? null : new NullProvider(_type, nvl);\n-    }\n-    \n-    /**\n-     * @since 1.9\n-     */\n+\n     public abstract SettableBeanProperty withValueDeserializer(JsonDeserializer<Object> deser);\n     \n     public void setManagedReferenceName(String n) {\n     \n     /**\n      * Method used to assign index for property.\n-     * \n-     * @since 1.7\n      */\n     public void assignIndex(int index) {\n         if (_propertyIndex != -1) {\n     protected final Class<?> getDeclaringClass() {\n         return getMember().getDeclaringClass();\n     }\n-    \n-    /**\n-     * @deprecated Since 1.7, use {@link #getName} instead.\n-     */\n-    @Deprecated\n-    public String getPropertyName() { return _propName; }\n \n     public String getManagedReferenceName() { return _managedReferenceName; }\n \n     public boolean hasValueDeserializer() { return (_valueDeserializer != null); }\n \n-    /**\n-     * @since 1.9\n-     */\n     public boolean hasValueTypeDeserializer() { return (_valueTypeDeserializer != null); }\n     \n-    /**\n-     * @since 1.9\n-     */\n     public JsonDeserializer<Object> getValueDeserializer() { return _valueDeserializer; }\n \n-    /**\n-     * @since 1.9\n-     */\n     public TypeDeserializer getValueTypeDeserializer() { return _valueTypeDeserializer; }\n     \n     /**\n      * been collected.\n      * \n      * @return Index of this property\n-     * \n-     * @since 1.7 Although note that it was misspelled as \"getProperytIndex\"; fixed in 1.9\n      */\n     public int getPropertyIndex() { return _propertyIndex; }\n-\n-    /**\n-     * @deprecated Since 1.9: use {@link #getPropertyIndex} instead\n-     */\n-    @Deprecated\n-    public int getProperytIndex() { return getPropertyIndex(); }\n \n     /**\n      * Accessor for id of injectable value, if this bean property supports\n      * value injection.\n-     * \n-     * @since 1.9\n      */\n     public Object getInjectableValueId() { return null; }\n     \n     {\n         if (e instanceof IllegalArgumentException) {\n             String actType = (value == null) ? \"[NULL]\" : value.getClass().getName();\n-            StringBuilder msg = new StringBuilder(\"Problem deserializing property '\").append(getPropertyName());\n+            StringBuilder msg = new StringBuilder(\"Problem deserializing property '\").append(getName());\n             msg.append(\"' (expected type: \").append(getType());\n             msg.append(\"; actual type: \").append(actType).append(\")\");\n             String origMsg = e.getMessage();\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n package com.fasterxml.jackson.databind.deser.std;\n \n import java.io.IOException;\n-import java.lang.reflect.Constructor;\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase;\n-import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n     /**********************************************************\n      */\n     \n-    /**\n-     * @deprecated Since 1.9, use variant that takes ValueInstantiator\n-     */\n-    @Deprecated\n-    protected CollectionDeserializer(JavaType collectionType, JsonDeserializer<Object> valueDeser,\n-            TypeDeserializer valueTypeDeser,\n-            Constructor<Collection<Object>> defCtor)\n-    {\n-        super(collectionType.getRawClass());\n-        _collectionType = collectionType;\n-        _valueDeserializer = valueDeser;\n-        _valueTypeDeserializer = valueTypeDeser;\n-        // not super-clean, but has to do...\n-        StdValueInstantiator inst = new StdValueInstantiator(null, collectionType);\n-        if (defCtor != null) {\n-            AnnotatedConstructor aCtor = new AnnotatedConstructor(defCtor,\n-                    null, null);\n-            inst.configureFromObjectSettings(aCtor, null, null, null, null);\n-        }\n-        _valueInstantiator = inst;\n-    }\n-\n-    /**\n-     * @since 1.9\n-     */\n     public CollectionDeserializer(JavaType collectionType, JsonDeserializer<Object> valueDeser,\n             TypeDeserializer valueTypeDeser, ValueInstantiator valueInstantiator)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n package com.fasterxml.jackson.databind.deser.std;\n \n import java.io.IOException;\n-import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import java.util.*;\n \n import com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;\n import com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer;\n import com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase;\n-import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n-\n \n /**\n  * Basic serializer that can take Json \"Object\" structure and\n     /**********************************************************\n      */\n \n-    /**\n-     * @deprecated Since 1.9, use variant that takes ValueInstantiator\n-     */\n-    @Deprecated\n-    protected MapDeserializer(JavaType mapType, Constructor<Map<Object,Object>> defCtor,\n-            KeyDeserializer keyDeser, JsonDeserializer<Object> valueDeser,\n-            TypeDeserializer valueTypeDeser)\n-    {\n-        super(Map.class);\n-        _mapType = mapType;\n-        _keyDeserializer = keyDeser;\n-        _valueDeserializer = valueDeser;\n-        _valueTypeDeserializer = valueTypeDeser;\n-        // not super-clean, but has to do...\n-        StdValueInstantiator inst = new StdValueInstantiator(null, mapType);\n-        if (defCtor != null) {\n-            AnnotatedConstructor aCtor = new AnnotatedConstructor(defCtor,\n-                    null, null);\n-            inst.configureFromObjectSettings(aCtor, null, null, null, null);\n-        }\n-        _hasDefaultCreator = (defCtor != null);\n-        _valueInstantiator = inst;\n-    }\n-\n     public MapDeserializer(JavaType mapType, ValueInstantiator valueInstantiator,\n             KeyDeserializer keyDeser, JsonDeserializer<Object> valueDeser,\n             TypeDeserializer valueTypeDeser)\n     /**\n      * Copy-constructor that can be used by sub-classes to allow\n      * copy-on-write styling copying of settings of an existing instance.\n-     * \n-     * @since 1.9\n      */\n     protected MapDeserializer(MapDeserializer src)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n     /* Life-cycle\n     /**********************************************************\n      */\n-    \n-    /**\n-     * @deprecated Since 1.9, should use factory methods instead\n-     */\n-    @Deprecated\n-    public BasicBeanDescription(MapperConfig<?> config, JavaType type,\n-            AnnotatedClass ac)\n-    {\n-        this(config, type, ac, Collections.<BeanPropertyDefinition>emptyList());\n-    }\n-\n-    /**\n-     * @since 1.9\n-     */\n+\n     protected BasicBeanDescription(MapperConfig<?> config, JavaType type,\n             AnnotatedClass ac, List<BeanPropertyDefinition> properties)\n     {\n     /**\n      * Factory method to use for constructing an instance to use for building\n      * deserializers.\n-     * \n-     * @since 1.9\n      */\n     public static BasicBeanDescription forDeserialization(POJOPropertiesCollector coll)\n     {\n     /**\n      * Factory method to use for constructing an instance to use for building\n      * serializers.\n-     * \n-     * @since 1.9\n      */\n     public static BasicBeanDescription forSerialization(POJOPropertiesCollector coll)\n     {\n      * Factory method to use for constructing an instance to use for purposes\n      * other than building serializers or deserializers; will only have information\n      * on class, not on properties.\n-     * \n-     * @since 1.9\n      */\n     public static BasicBeanDescription forOtherUse(MapperConfig<?> config,\n             JavaType type, AnnotatedClass ac)\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     @Override\n     public Class<? extends JsonDeserializer<?>> findDeserializer(Annotated a)\n     {\n-        /* 21-May-2009, tatu: Slight change; primary annotation is now\n-         *    @JsonDeserialize; @JsonUseDeserializer is deprecated\n-         */\n         JsonDeserialize ann = a.getAnnotation(JsonDeserialize.class);\n         if (ann != null) {\n             Class<? extends JsonDeserializer<?>> deserClass = ann.using();\n                 return deserClass;\n             }\n         }\n-        // 31-Jan-2010, tatus: @JsonUseDeserializer removed as of 1.5\n         return null;\n     }\n \n     @Override\n     public String findSettablePropertyName(AnnotatedMethod am)\n     {\n-        /* 16-Apr-2010, tatu: Existing priority (since 1.1) is that\n-         *   @JsonProperty is checked first; and @JsonSetter next.\n-         *   This is not quite optimal now that @JsonSetter is un-deprecated.\n-         *   However, it is better to have stable behavior rather than\n-         *   cause compatibility problems by fine-tuning.\n-         */\n+        /* 24-Dec-2011, tatu: Jackson 2.0 changes things so that\n+         *   @JsonSetter has precedence over @JsonProperty, given\n+         *   that this is more intuitive ordering given that\n+         *   former is more specific than latter. Note that 1.x\n+         *   had the reverse ordering.\n+         */\n+        JsonSetter ann = am.getAnnotation(JsonSetter.class);\n+        if (ann != null) {\n+            return ann.value();\n+        }\n         JsonProperty pann = am.getAnnotation(JsonProperty.class);\n         if (pann != null) {\n             return pann.value();\n-        }\n-        JsonSetter ann = am.getAnnotation(JsonSetter.class);\n-        if (ann != null) {\n-            return ann.value();\n         }\n         /* 22-May-2009, tatu: And finally, JsonSerialize implies\n          *   that there is a property, although doesn't define name\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n      */\n     protected final HashMap<String,JsonDeserializer<Object>> _deserializers;\n \n-    /**\n-     * @since 1.9\n-     */\n     protected JsonDeserializer<Object> _defaultImplDeserializer;\n-    \n-    /**\n-     * @deprecated Since 1.9, use the constructor that takes 'defaultImpl'\n-     */\n-    @Deprecated\n-    protected TypeDeserializerBase(JavaType baseType, TypeIdResolver idRes, BeanProperty property) {\n-        this(baseType, idRes, property, null);\n-    }\n \n     protected TypeDeserializerBase(JavaType baseType, TypeIdResolver idRes, BeanProperty property,\n             Class<?> defaultImpl)", "timestamp": 1324793938, "metainfo": ""}