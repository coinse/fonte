{"sha": "f521158c1486b427a0bb584b58333a66c0e9d552", "log": "Yet more serializability improvements; sorta works for ObjectWriter, not yet ObjectReader", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n         _problemHandlers = src._problemHandlers;\n         _nodeFactory = src._nodeFactory;\n     }\n-\n-    /**\n-     * Constructor only needed for JDK (de)serialization\n-     */\n-    DeserializationConfig() {\n-        super();\n-        _deserFeatures = 0;\n-        _problemHandlers = null;\n-        _nodeFactory = null;\n-    }\n     \n     // for unit tests only:\n     protected BaseSettings getBaseSettings() { return _base; }\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n      * May be different from the outermost parser\n      * when content is buffered.\n      */\n-    protected JsonParser _parser;\n+    protected transient JsonParser _parser;\n     \n     /**\n      * Object used for resolving references to injectable\n     /**********************************************************\n      */\n \n-    protected ArrayBuilders _arrayBuilders;\n-\n-    protected ObjectBuffer _objectBuffer;\n-\n-    protected DateFormat _dateFormat;\n+    protected transient ArrayBuilders _arrayBuilders;\n+\n+    protected transient ObjectBuffer _objectBuffer;\n+\n+    protected transient DateFormat _dateFormat;\n     \n     /*\n     /**********************************************************\n         _view = config.getActiveView();\n         _parser = jp;\n         _injectableValues = injectableValues;\n+    }\n+\n+    // only for JDK deserialization\n+    protected DeserializationContext() {\n+        _cache = null;\n+        _factory = null;\n+\n+        _config = null;\n+        _featureFlags = 0;\n+        _view = null;\n+        _parser = null;\n+        _injectableValues = null;\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/InjectableValues.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/InjectableValues.java\n      */\n     public static class Std\n         extends InjectableValues\n+        implements java.io.Serializable\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         protected final Map<String,Object> _values;\n         \n         public Std() {\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n  */\n public class ObjectMapper\n     extends ObjectCodec\n-    implements Versioned\n+    implements Versioned,\n+        java.io.Serializable // as of 2.1\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /*\n     /**********************************************************\n     /* Helper classes, enums\n      */\n     public static class DefaultTypeResolverBuilder\n         extends StdTypeResolverBuilder\n-    {\n+        implements java.io.Serializable\n+    {\n+        private static final long serialVersionUID = 1L;\n+\n         /**\n          * Definition of what types is this default typer valid for.\n          */\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n  */\n public class ObjectReader\n     extends ObjectCodec\n-    implements Versioned\n+    implements Versioned, java.io.Serializable // since 2.1\n {\n+    private static final long serialVersionUID = -4251443320039569153L;\n+\n     private final static JavaType JSON_NODE_TYPE = SimpleType.constructUnsafe(JsonNode.class);\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n  * reused in completely thread-safe manner with no explicit synchronization\n  */\n public class ObjectWriter\n-    implements Versioned\n+    implements Versioned,\n+        java.io.Serializable // since 2.1\n {\n+    private static final long serialVersionUID = -7024829992408267532L;\n+\n     /**\n      * We need to keep track of explicit disabling of pretty printing;\n      * easiest to do by a token value.\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java\n  * that is shared between different types of instances.\n  */\n public abstract class MapperConfig<T extends MapperConfig<T>>\n-    implements ClassIntrospector.MixInResolver\n+    implements ClassIntrospector.MixInResolver,\n+        java.io.Serializable\n {\n+    private static final long serialVersionUID = 8891625428805876137L;\n+\n     /**\n      * Set of shared mapper features enabled.\n      */\n     {\n         _base = src._base;\n         _mapperFeatures = src._mapperFeatures;\n-    }\n-\n-    /**\n-     * Constructor only used for JDK deserialization\n-     * \n-     * @since 2.1\n-     */\n-    MapperConfig() {\n-        _base = null;\n-        _mapperFeatures = 0;\n     }\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n public abstract class MapperConfigBase<CFG extends ConfigFeature,\n     T extends MapperConfigBase<CFG,T>>\n     extends MapperConfig<T>\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = -8378230381628000111L;\n+\n     private final static int DEFAULT_MAPPER_FEATURES = collectFeatureDefaults(MapperFeature.class);\n \n     /*\n         _subtypeResolver = src._subtypeResolver;\n         _rootName = src._rootName;\n         _view = src._view;\n-    }\n-\n-    /**\n-     * Constructor only used for JDK deserialization\n-     * \n-     * @since 2.1\n-     */\n-    protected MapperConfigBase() {\n-        super();\n-        _mixInAnnotations = null;\n-        _subtypeResolver = null;\n-        _rootName = null;\n-        _view = null;\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n  */\n public abstract class DefaultDeserializationContext\n     extends DeserializationContext\n+    implements java.io.Serializable // since 2.1\n {\n-    protected LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId> _objectIds;\n+    private static final long serialVersionUID = 1L;\n+\n+    protected transient LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId> _objectIds;\n     \n     /**\n      * Constructor that will pass specified deserializer factory and\n     protected DefaultDeserializationContext(DefaultDeserializationContext src,\n             DeserializerFactory factory) {\n         super(src, factory);\n+    }\n+    \n+    // Only for JDK deserialization:\n+    DefaultDeserializationContext() {\n+        super();\n     }\n \n     /*\n      */\n     public final static class Impl extends DefaultDeserializationContext\n     {\n+        private static final long serialVersionUID = 1L;\n+\n+        // Only for JDK deserialization:\n+        Impl() { super(); }\n+\n         /**\n          * Default constructor for a blueprint object, which will use the standard\n          * {@link DeserializerCache}, given factory.\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n  * ({@link com.fasterxml.jackson.databind.deser.DeserializerFactory}).\n  */\n public final class DeserializerCache\n+    implements java.io.Serializable // since 2.1 -- needs to be careful tho\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /*\n     /**********************************************************\n     /* Caching\n      * completed deserializers, to resolve cyclic dependencies. This is the\n      * map used for storing deserializers before they are fully complete.\n      */\n-    final protected HashMap<JavaType, JsonDeserializer<Object>> _incompleteDeserializers\n+    final transient protected HashMap<JavaType, JsonDeserializer<Object>> _incompleteDeserializers\n         = new HashMap<JavaType, JsonDeserializer<Object>>(8);\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java\n /**\n  * Standard {@link SubtypeResolver} implementation.\n  */\n-public class StdSubtypeResolver extends SubtypeResolver\n+public class StdSubtypeResolver\n+    extends SubtypeResolver\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     protected LinkedHashSet<NamedType> _registeredSubtypes;\n \n     public StdSubtypeResolver() { }\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n      * actual generic types), we will use small cache to avoid repetitive\n      * resolution of core types\n      */\n-    protected final transient LRUMap<ClassKey, JavaType> _typeCache = new LRUMap<ClassKey, JavaType>(16, 100);\n-    \n+    protected final LRUMap<ClassKey, JavaType> _typeCache = new LRUMap<ClassKey, JavaType>(16, 100);\n+\n     /*\n      * Looks like construction of {@link JavaType} instances can be\n      * a bottleneck, esp. for root-level Maps, so we better do bit\n      */\n     public static TypeFactory defaultInstance() { return instance; }\n \n+    /*\n+    /**********************************************************\n+    /* Overrides for supporting Serializable\n+    /**********************************************************\n+     */\n+    \n     /*\n     /**********************************************************\n     /* Static methods for non-instance-specific functionality\n--- a/src/main/java/com/fasterxml/jackson/databind/util/LRUMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/LRUMap.java\n package com.fasterxml.jackson.databind.util;\n \n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutput;\n+import java.io.ObjectOutputStream;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n+import com.fasterxml.jackson.core.io.SerializedString;\n+\n /**\n  * Helper for simple bounded LRU maps used for reusing lookup values.\n+ *<p>\n+ * Note that serialization behavior is such that contents are NOT serialized,\n+ * on assumption that all use cases are for caching where persistence\n+ * does not make sense\n  */\n-@SuppressWarnings(\"serial\")\n public class LRUMap<K,V> extends LinkedHashMap<K,V>\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     protected final int _maxEntries;\n     \n     public LRUMap(int initialEntries, int maxEntries)\n         return size() > _maxEntries;\n     }\n \n+    /*\n+    /**********************************************************\n+    /* Serializable overrides\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Ugly hack, to work through the requirement that _value is indeed final,\n+     * and that JDK serialization won't call ctor(s) if Serializable is implemented.\n+     * \n+     * @since 2.1\n+     */\n+    protected transient int _jdkSerializeMaxEntries;\n+\n+    private void readObject(ObjectInputStream in) throws IOException {\n+        _jdkSerializeMaxEntries = in.readInt();\n+    }\n+\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.writeInt(_jdkSerializeMaxEntries);\n+    }\n+\n+    protected Object readResolve() {\n+        return new LRUMap<Object,Object>(_jdkSerializeMaxEntries, _jdkSerializeMaxEntries);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/util/RootNameLookup.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/RootNameLookup.java\n  * Helper class for caching resolved root names.\n  */\n public class RootNameLookup\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /**\n      * For efficient operation, let's try to minimize number of times we\n      * need to introspect root element name to use.\n--- a/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java\n  */\n public class TestJDKSerialization extends BaseMapTest\n {\n+    static class MyPojo {\n+        public MyPojo() { }\n+        public MyPojo(int x0, int y0) {\n+            x = x0;\n+            y = y0;\n+        }\n+\n+        public int x, y;\n+    }\n+    \n     /*\n     /**********************************************************\n-    /* Individual objects\n+    /* Tests for individual objects\n     /**********************************************************\n      */\n \n         assertNotNull(sc);\n         assertEquals(sc._serFeatures, origSC._serFeatures);\n     }\n+\n+    public void testObjectWriter() throws IOException\n+    {\n+        ObjectWriter origWriter = new ObjectMapper().writer();\n+        final String EXP_JSON = \"{\\\"x\\\":2,\\\"y\\\":3}\";\n+        final MyPojo p = new MyPojo(2, 3);\n+        assertEquals(EXP_JSON, origWriter.writeValueAsString(p));\n+        byte[] bytes = jdkSerialize(origWriter);\n+        ObjectWriter writer2 = jdkDeserialize(bytes);\n+        assertEquals(EXP_JSON, writer2.writeValueAsString(p));\n+    }\n     \n+    public void testObjectReader() throws IOException\n+    {\n+        ObjectReader origReader = new ObjectMapper().reader(MyPojo.class);\n+        final String JSON = \"{\\\"x\\\":1,\\\"y\\\":2}\";\n+        MyPojo p1 = origReader.readValue(JSON);\n+        assertEquals(2, p1.y);\n+        byte[] bytes = jdkSerialize(origReader);\n+        ObjectReader reader2 = jdkDeserialize(bytes);\n+        MyPojo p2 = reader2.readValue(JSON);\n+        assertEquals(2, p2.y);\n+    }\n+\n     /*\n     /**********************************************************\n     /* Helper methods", "timestamp": 1349482187, "metainfo": ""}