{"sha": "db53194c64e2b3d0258f3ec8aa1799f499b4fced", "log": "Fix #170", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n             new UUIDDeserializer(),\n             new URLDeserializer(),\n             new URIDeserializer(),\n+            new FileDeserializer(),\n             new CurrencyDeserializer(),\n             new PatternDeserializer(),\n             new LocaleDeserializer(),\n     /* Deserializer implementations: from-String deserializers\n     /**********************************************************\n      */\n-    \n-    /**\n-     * Note: final as performance optimization: not expected to need sub-classing;\n-     * if sub-classing was needed could re-factor into reusable part, final\n-     * \"Impl\" sub-class\n-     */\n-    /*\n-    @JacksonStdImpl\n-    public final static class StringDeserializer\n-        extends StdScalarDeserializer<String>\n-    {\n-        public StringDeserializer() { super(String.class); }\n-\n-        @Override\n-        public String deserialize(JsonParser jp, DeserializationContext ctxt)\n-            throws IOException, JsonProcessingException\n-        {\n-            // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:\n-            String text = jp.getValueAsString();\n-            if (text != null) {\n-                return text;\n-            }\n-            // [JACKSON-330]: need to gracefully handle byte[] data, as base64\n-            JsonToken curr = jp.getCurrentToken();\n-            if (curr == JsonToken.VALUE_EMBEDDED_OBJECT) {\n-                Object ob = jp.getEmbeddedObject();\n-                if (ob == null) {\n-                    return null;\n-                }\n-                if (ob instanceof byte[]) {\n-                    return Base64Variants.getDefaultVariant().encode((byte[]) ob, false);\n-                }\n-                // otherwise, try conversion using toString()...\n-                return ob.toString();\n-            }\n-            throw ctxt.mappingException(_valueClass, curr);\n-        }\n-\n-        // 1.6: since we can never have type info (\"natural type\"; String, Boolean, Integer, Double):\n-        // (is it an error to even call this version?)\n-        @Override\n-        public String deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n-                TypeDeserializer typeDeserializer)\n-            throws IOException, JsonProcessingException\n-        {\n-            return deserialize(jp, ctxt);\n-        }\n-    }\n-    */\n     \n     public static class UUIDDeserializer\n         extends FromStringDeserializer<UUID>\n             throws IOException\n         {\n             return Charset.forName(value);\n+        }\n+    }\n+\n+    public static class FileDeserializer\n+        extends FromStringDeserializer<File>\n+    {\n+        public FileDeserializer() { super(File.class); }\n+        \n+        @Override\n+        protected File _deserialize(String value, DeserializationContext ctxt)\n+        {\n+            return new File(value);\n         }\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n import java.util.regex.Pattern;\n \n import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n import com.fasterxml.jackson.databind.*;\n \n public class TestJdkTypes extends BaseMapTest\n     private final ObjectMapper mapper = new ObjectMapper();\n \n     /**\n-     * Related to issue [JACKSON-155].\n+     * Related to issues [JACKSON-155], [#170].\n      */\n     public void testFile() throws Exception\n     {\n \n         // escape backslashes (for portability with windows)\n         String json = mapper.writeValueAsString(abs);\n-        \n         File result = mapper.readValue(json, File.class);\n+        assertEquals(abs, result.getAbsolutePath());\n+\n+        // Then #170\n+        final ObjectMapper mapper2 = new ObjectMapper();\n+        mapper2.setVisibility(PropertyAccessor.CREATOR, Visibility.NONE);\n+\n+        result = mapper2.readValue(json, File.class);\n         assertEquals(abs, result.getAbsolutePath());\n     }\n \n \n     /**\n      * Test for [JACKSON-419]\n-     * \n-     * @since 1.7\n      */\n     public void testLocale() throws IOException\n     {\n \n     /**\n      * Test for [JACKSON-420] (add DeserializationConfig.FAIL_ON_NULL_FOR_PRIMITIVES)\n-     * \n-     * @since 1.7\n      */\n     public void testNullForPrimitives() throws IOException\n     {", "timestamp": 1361328731, "metainfo": ""}