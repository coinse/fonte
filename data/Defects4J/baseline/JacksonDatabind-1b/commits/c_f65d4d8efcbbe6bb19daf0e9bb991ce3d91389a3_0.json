{"sha": "f65d4d8efcbbe6bb19daf0e9bb991ce3d91389a3", "log": "...", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualDeserialization.java\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n \n         public String value();\n     }\n     \n-    static class ContextualType {\n+    static class StringValue {\n         protected String value;\n         \n-        public ContextualType(String v) { value = v; }\n+        public StringValue(String v) { value = v; }\n     }\n     \n     static class ContextualBean\n     {\n         @Name(\"NameA\")\n-        public ContextualType a;\n+        public StringValue a;\n         @Name(\"NameB\")\n-        public ContextualType b;\n+        public StringValue b;\n     }\n     \n     static class ContextualCtorBean\n \n         @JsonCreator\n         public ContextualCtorBean(\n-                @Name(\"CtorA\") @JsonProperty(\"a\") ContextualType a,\n-                @Name(\"CtorB\") @JsonProperty(\"b\") ContextualType b)\n+                @Name(\"CtorA\") @JsonProperty(\"a\") StringValue a,\n+                @Name(\"CtorB\") @JsonProperty(\"b\") StringValue b)\n         {\n             this.a = a.value;\n             this.b = b.value;\n     @Name(\"Class\")\n     static class ContextualClassBean\n     {\n-        public ContextualType a;\n+        public StringValue a;\n \n         @Name(\"NameB\")\n-        public ContextualType b;\n-    }\n-\n-    static class AnnotatedContextualClassBean\n-    {\n-        @Name(\"xyz\")\n-        @JsonDeserialize(using=AnnotatedContextualDeserializer.class)\n-        public ContextualType value;\n+        public StringValue b;\n     }\n     \n     static class ContextualArrayBean\n     {\n         @Name(\"array\")\n-        public ContextualType[] beans;\n+        public StringValue[] beans;\n     }\n     \n     static class ContextualListBean\n     {\n         @Name(\"list\")\n-        public List<ContextualType> beans;\n+        public List<StringValue> beans;\n     }\n     \n     static class ContextualMapBean\n     {\n         @Name(\"map\")\n-        public Map<String, ContextualType> beans;\n+        public Map<String, StringValue> beans;\n     }\n     \n     static class MyContextualDeserializer\n-        extends JsonDeserializer<ContextualType>\n+        extends JsonDeserializer<StringValue>\n         implements ContextualDeserializer\n     {\n         protected final String _fieldName;\n         }\n \n         @Override\n-        public ContextualType deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n-        {\n-            return new ContextualType(\"\"+_fieldName+\"=\"+jp.getText());\n+        public StringValue deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n+        {\n+            return new StringValue(\"\"+_fieldName+\"=\"+jp.getText());\n         }\n \n         @Override\n                 BeanProperty property)\n             throws JsonMappingException\n         {\n-            return new MyContextualDeserializer(property.getName());\n+            String name = (property == null) ? \"NULL\" : property.getName();\n+            return new MyContextualDeserializer(name);\n         }\n     }\n \n      * Alternative that uses annotation for choosing name to use\n      */\n     static class AnnotatedContextualDeserializer\n-        extends JsonDeserializer<ContextualType>\n+        extends JsonDeserializer<StringValue>\n         implements ContextualDeserializer\n     {\n         protected final String _fieldName;\n         }\n     \n         @Override\n-        public ContextualType deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n-        {\n-            return new ContextualType(\"\"+_fieldName+\"=\"+jp.getText());\n+        public StringValue deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n+        {\n+            return new StringValue(\"\"+_fieldName+\"=\"+jp.getText());\n         }\n     \n         @Override\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         SimpleModule module = new SimpleModule(\"test\", Version.unknownVersion());\n-        module.addDeserializer(ContextualType.class, new MyContextualDeserializer());\n+        module.addDeserializer(StringValue.class, new MyContextualDeserializer());\n         mapper.registerModule(module);\n         ContextualBean bean = mapper.readValue(\"{\\\"a\\\":\\\"1\\\",\\\"b\\\":\\\"2\\\"}\", ContextualBean.class);\n         assertEquals(\"a=1\", bean.a.value);\n         ObjectMapper mapper = _mapperWithAnnotatedContextual();\n         ContextualMapBean bean = mapper.readValue(\"{\\\"beans\\\":{\\\"a\\\":\\\"b\\\"}}\", ContextualMapBean.class);\n         assertEquals(1, bean.beans.size());\n-        Map.Entry<String,ContextualType> entry = bean.beans.entrySet().iterator().next();\n+        Map.Entry<String,StringValue> entry = bean.beans.entrySet().iterator().next();\n         assertEquals(\"a\", entry.getKey());\n         assertEquals(\"map=b\", entry.getValue().value);\n \n         bean = mapper.readValue(\"{\\\"beans\\\":{\\\"x\\\":\\\"y\\\",\\\"1\\\":\\\"2\\\"}}\", ContextualMapBean.class);\n         assertEquals(2, bean.beans.size());\n-        Iterator<Map.Entry<String,ContextualType>> it = bean.beans.entrySet().iterator();\n+        Iterator<Map.Entry<String,StringValue>> it = bean.beans.entrySet().iterator();\n         entry = it.next();\n         assertEquals(\"x\", entry.getKey());\n         assertEquals(\"map=y\", entry.getValue().value);\n         assertEquals(\"1\", entry.getKey());\n         assertEquals(\"map=2\", entry.getValue().value);\n     }\n-\n-    // ensure that direct associations also work\n-    public void testAnnotatedContextual() throws Exception\n-    {\n-        ObjectMapper mapper = new ObjectMapper();\n-        AnnotatedContextualClassBean bean = mapper.readValue(\n-                \"{\\\"value\\\":\\\"a\\\"}\",\n-              AnnotatedContextualClassBean.class);\n-        assertNotNull(bean);\n-        assertEquals(\"xyz=a\", bean.value.value);\n-    }\n     \n     /*\n     /**********************************************************\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         SimpleModule module = new SimpleModule(\"test\", Version.unknownVersion());\n-        module.addDeserializer(ContextualType.class, new AnnotatedContextualDeserializer());\n+        module.addDeserializer(StringValue.class, new AnnotatedContextualDeserializer());\n         mapper.registerModule(module);\n         return mapper;\n     }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualWithAnnDeserializer.java\n+package com.fasterxml.jackson.databind.contextual;\n+\n+import java.io.IOException;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import com.fasterxml.jackson.annotation.JacksonAnnotation;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n+\n+public class TestContextualWithAnnDeserializer extends BaseMapTest\n+{\n+    @Target({ElementType.FIELD, ElementType.PARAMETER, ElementType.TYPE})\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @JacksonAnnotation\n+    public @interface Name {\n+        public String value();\n+    }\n+    \n+    static class StringValue {\n+        protected String value;\n+        \n+        public StringValue(String v) { value = v; }\n+    }\n+\n+    static class AnnotatedContextualClassBean\n+    {\n+        @Name(\"xyz\")\n+        @JsonDeserialize(using=AnnotatedContextualDeserializer.class)\n+        public StringValue value;\n+    }\n+    \n+    static class AnnotatedContextualDeserializer\n+        extends JsonDeserializer<StringValue>\n+        implements ContextualDeserializer\n+    {\n+        protected final String _fieldName;\n+        \n+        public AnnotatedContextualDeserializer() { this(\"\"); }\n+        public AnnotatedContextualDeserializer(String fieldName) {\n+            _fieldName = fieldName;\n+        }\n+\n+        @Override\n+        public StringValue deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n+        {\n+            return new StringValue(\"\"+_fieldName+\"=\"+jp.getText());\n+        }\n+\n+        @Override\n+        public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n+                BeanProperty property)\n+            throws JsonMappingException\n+        {\n+            Name ann = property.getAnnotation(Name.class);\n+            if (ann == null) {\n+                ann = property.getContextAnnotation(Name.class);\n+            }\n+            String propertyName = (ann == null) ?  \"UNKNOWN\" : ann.value();\n+            return new MyContextualDeserializer(propertyName);\n+        }\n+    }\n+\n+    static class MyContextualDeserializer\n+        extends JsonDeserializer<StringValue>\n+        implements ContextualDeserializer\n+    {\n+        protected final String _fieldName;\n+        \n+        public MyContextualDeserializer() { this(\"\"); }\n+        public MyContextualDeserializer(String fieldName) {\n+            _fieldName = fieldName;\n+        }\n+    \n+        @Override\n+        public StringValue deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n+        {\n+            return new StringValue(\"\"+_fieldName+\"=\"+jp.getText());\n+        }\n+    \n+        @Override\n+        public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n+                BeanProperty property)\n+            throws JsonMappingException\n+        {\n+            String name = (property == null) ? \"NULL\" : property.getName();\n+            return new MyContextualDeserializer(name);\n+        }\n+    }\n+\n+    \n+    // ensure that direct associations also work\n+    public void testAnnotatedContextual() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        AnnotatedContextualClassBean bean = mapper.readValue(\n+                \"{\\\"value\\\":\\\"a\\\"}\",\n+              AnnotatedContextualClassBean.class);\n+        assertNotNull(bean);\n+        assertEquals(\"xyz=a\", bean.value.value);\n+    }\n+\n+}", "timestamp": 1328053547, "metainfo": ""}