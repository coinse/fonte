{"sha": "a1241f0c3091e7ad4eba1d2d36ec32a3526b6fef", "log": "JsonNode, MissingNode, ValueNode: some simplifications  * Make ValueNode implement .get(), .has(), .path(), .hasNonNull() for both array   indices; make all of them final. * Make .get(int) in JsonNode abstract, all derivate classes implement it now. * Make MissingNode inherit ValueNode instead of BaseJsonNode.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n      *   if this node is an array and has specified element.\n      *   Null otherwise.\n      */\n-    public JsonNode get(int index) { return null; }\n+    public abstract JsonNode get(int index);\n \n     /**\n      * Method for accessing value of the specified field of\n--- a/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n  * conversions. \n  */\n public final class MissingNode\n-    extends BaseJsonNode\n+    extends ValueNode\n {\n     private final static MissingNode instance = new MissingNode();\n \n     public boolean asBoolean(boolean defaultValue);\n     */\n     \n-    @Override\n-    public JsonNode path(String fieldName) { return this; }\n-\n-    @Override\n-    public JsonNode path(int index) { return this; }\n-\n     @Override\n     public final void serialize(JsonGenerator jg, SerializerProvider provider)\n         throws IOException, JsonProcessingException\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java\n         serialize(jg, provider);\n         typeSer.writeTypeSuffixForScalar(this, jg);\n     }\n-    \n-    /*\n-    /**********************************************************************\n-    /* Public API, path handling\n-    /**********************************************************************\n-     */\n-\n-    @Override\n-    public JsonNode path(String fieldName) { return MissingNode.getInstance(); }\n-\n-    @Override\n-    public JsonNode path(int index) { return MissingNode.getInstance(); }\n \n     /*\n     /**********************************************************************\n \n     @Override\n     public String toString() { return asText(); }\n+\n+    /*\n+     **********************************************************************\n+     * Navigation methods\n+     **********************************************************************\n+     */\n+\n+    @Override\n+    public final JsonNode get(int index)\n+    {\n+        return null;\n+    }\n+\n+    @Override\n+    public final JsonNode path(int index)\n+    {\n+        return MissingNode.getInstance();\n+    }\n+\n+    @Override\n+    public final boolean has(int index)\n+    {\n+        return false;\n+    }\n+\n+    @Override\n+    public final boolean hasNonNull(int index)\n+    {\n+        return false;\n+    }\n+\n+    @Override\n+    public final JsonNode get(String fieldName)\n+    {\n+        return null;\n+    }\n+\n+    @Override\n+    public final JsonNode path(String fieldName)\n+    {\n+        return MissingNode.getInstance();\n+    }\n+\n+    @Override\n+    public final boolean has(String fieldName)\n+    {\n+        return false;\n+    }\n+\n+    @Override\n+    public final boolean hasNonNull(String fieldName)\n+    {\n+        return false;\n+    }\n }", "timestamp": 1353010744, "metainfo": ""}