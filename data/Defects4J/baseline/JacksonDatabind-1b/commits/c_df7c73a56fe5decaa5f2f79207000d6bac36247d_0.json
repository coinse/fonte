{"sha": "df7c73a56fe5decaa5f2f79207000d6bac36247d", "log": "Merge pull request #147 from christophercurrie/value-instantiator  Defer incomplete ValueInstantiator build errors.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n                 }\n             }\n         }\n-        \n+\n+        // Sanity check: does the chosen instantatior have incomplete creators?\n+        if (instantiator.getIncompleteParameter() != null) {\n+            final AnnotatedParameter nonAnnotatedParam = instantiator.getIncompleteParameter();\n+            final AnnotatedWithParams ctor = nonAnnotatedParam.getOwner();\n+            throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()+\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n+        }\n+\n         return instantiator;\n     }\n \n                 } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n                     // [712] secondary: all but one injectable, one un-annotated (un-named)\n                     creators.addDelegatingCreator(ctor, properties);\n-                } else { // otherwise, epic fail\n-                    throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()+\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n+                } else { // otherwise, record the incomplete parameter for later error messaging.\n+                    creators.addIncompeteParameter(nonAnnotatedParam);\n                 }\n             }\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n package com.fasterxml.jackson.databind.deser;\n \n import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n \n \n     public AnnotatedWithParams getWithArgsCreator() {\n         return null;\n     }\n+\n+    /**\n+     * If an incomplete creator was found, this is the first parameter that\n+     * needs further annotation to help make the creator complete.\n+     */\n+    public AnnotatedParameter getIncompleteParameter() {\n+        return null;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n     \n     protected AnnotatedWithParams _propertyBasedCreator;\n     protected CreatorProperty[] _propertyBasedArgs = null;\n+\n+    protected AnnotatedParameter _incompleteParameter;\n \n     /*\n     /**********************************************************\n         inst.configureFromLongCreator(_longCreator);\n         inst.configureFromDoubleCreator(_doubleCreator);\n         inst.configureFromBooleanCreator(_booleanCreator);\n+        inst.configureIncompleteParameter(_incompleteParameter);\n         return inst;\n     }\n     \n         _propertyBasedArgs = properties;\n     }\n \n+    public void addIncompeteParameter(AnnotatedParameter parameter) {\n+        if (_incompleteParameter == null) {\n+            _incompleteParameter = parameter;\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Accessors\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n package com.fasterxml.jackson.databind.deser.std;\n \n import java.io.IOException;\n+import java.util.List;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.deser.CreatorProperty;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n \n \n     protected AnnotatedWithParams _fromLongCreator;\n     protected AnnotatedWithParams _fromDoubleCreator;\n     protected AnnotatedWithParams _fromBooleanCreator;\n+\n+    // // // Incomplete creator\n+    protected AnnotatedParameter  _incompleteParameter;\n     \n     /*\n     /**********************************************************\n \n     public void configureFromBooleanCreator(AnnotatedWithParams creator) {\n         _fromBooleanCreator = creator;\n+    }\n+\n+    public void configureIncompleteParameter(AnnotatedParameter parameter) {\n+        _incompleteParameter = parameter;\n     }\n     \n     /*\n     public AnnotatedWithParams getWithArgsCreator() {\n         return _withArgsCreator;\n     }\n+\n+    @Override\n+    public AnnotatedParameter getIncompleteParameter() {\n+        return _incompleteParameter;\n+    }\n     \n     /*\n     /**********************************************************", "timestamp": 1358028790, "metainfo": ""}