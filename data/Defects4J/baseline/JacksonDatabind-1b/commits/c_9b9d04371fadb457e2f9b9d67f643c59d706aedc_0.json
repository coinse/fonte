{"sha": "9b9d04371fadb457e2f9b9d67f643c59d706aedc", "log": "Minor renaming", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n     /**\n      * Convenience method, functionally same as:\n      *<pre>\n-     *  getDeserializerProvider().findTypedValueDeserializer(getConfig(), propertyType, property);\n+     *  getDeserializerProvider().findRootValueDeserializer(getConfig(), propertyType, property);\n      *</pre>\n      */\n-    public final JsonDeserializer<Object> findTypedValueDeserializer(JavaType type,\n-            BeanProperty property) throws JsonMappingException {\n-        return _deserCache.findTypedValueDeserializer(this, type, property);\n+    public final JsonDeserializer<Object> findRootValueDeserializer(JavaType type)\n+            throws JsonMappingException {\n+        return _deserCache.findRootValueDeserializer(this, type);\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n             return deser;\n         }\n         // Nope: need to ask provider to resolve it\n-        deser = ctxt.findTypedValueDeserializer(valueType, null);\n+        deser = ctxt.findRootValueDeserializer(valueType);\n         if (deser == null) { // can this happen?\n             throw new JsonMappingException(\"Can not find a deserializer for type \"+valueType);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n             return deser;\n         }\n         // Nope: need to ask provider to resolve it\n-        deser = ctxt.findTypedValueDeserializer(valueType, null);\n+        deser = ctxt.findRootValueDeserializer(valueType);\n         if (deser == null) { // can this happen?\n             throw new JsonMappingException(\"Can not find a deserializer for type \"+valueType);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n     }\n     \n     /**\n-     * Method called to locate deserializer for given type, as well as matching\n-     * type deserializer (if one is needed); and if type deserializer is needed,\n-     * construct a \"wrapped\" deserializer that can extract and use type information\n-     * for calling actual deserializer.\n-     *<p>\n-     * Since this method is only called for root elements, no referral information\n-     * is taken.\n-     */\n-    public JsonDeserializer<Object> findTypedValueDeserializer(DeserializationContext ctxt,\n-            JavaType type, BeanProperty property)\n-        throws JsonMappingException\n-    {\n-        JsonDeserializer<Object> deser = findValueDeserializer(ctxt, type, property);\n-        TypeDeserializer typeDeser = _factory.findTypeDeserializer(ctxt.getConfig(), type, property);\n+     * Method called to locate deserializer for given type, when it as referenced\n+     * from the root context; that is, it is not referenced through a property.\n+     * Because there is no referral via property, a type deserializer will be wrapped\n+     * around deserializer, if one is needed.\n+     */\n+    public JsonDeserializer<Object> findRootValueDeserializer(DeserializationContext ctxt,\n+            JavaType type)\n+        throws JsonMappingException\n+    {\n+        JsonDeserializer<Object> deser = findValueDeserializer(ctxt, type, null);\n+        TypeDeserializer typeDeser = _factory.findTypeDeserializer(ctxt.getConfig(), type, null);\n         if (typeDeser != null) {\n             return new WrappedDeserializer(typeDeser, deser);\n         }", "timestamp": 1327944026, "metainfo": ""}