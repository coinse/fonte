{"sha": "c601e6397ae0b92843e07e887dfad28bdb42a5b8", "log": "Fix JavaType.hasGenericTypes(), removed couple of stray deprecated methods", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JavaType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JavaType.java\n      */\n \n     @Override\n-    public boolean hasGenericTypes() { return false; }\n+    public boolean hasGenericTypes()\n+    {\n+        return containedTypeCount() > 0;\n+    }\n \n     @Override\n     public JavaType getKeyType() { return null; }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n import com.fasterxml.jackson.databind.type.*;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n-\n \n /**\n  * Concrete deserializer factory class that adds full Bean deserializer\n     \n     /**\n      * Standard configuration settings container class implementation.\n-     * \n-     * @since 1.7\n      */\n     public static class ConfigImpl extends Config\n     {\n         /**\n          * List of providers for additional deserializers, checked before considering default\n          * basic or bean deserializers.\n-         * \n-         * @since 1.7\n          */\n         protected final Deserializers[] _additionalDeserializers;\n \n         /**\n          * List of providers for additional key deserializers, checked before considering\n          * standard key deserializers.\n-         * \n-         * @since 1.7\n          */\n         protected final KeyDeserializers[] _additionalKeyDeserializers;\n         \n          * List of objects that may be able to resolve abstract types to\n          * concrete types. Used by functionality like \"mr Bean\" to materialize\n          * types as needed.\n-         * \n-         * @since 1.8\n          */\n         protected final AbstractTypeResolver[] _abstractTypeResolvers;\n \n          * methods external to value type etc).\n          * Used to support objects that are created using non-standard methods;\n          * or to support post-constructor functionality.\n-         * \n-         * @since 1.9\n          */\n         protected final ValueInstantiators[] _valueInstantiators;\n         \n     /**\n      * Configuration settings for this factory; immutable instance (just like this\n      * factory), new version created via copy-constructor (fluent-style)\n-     * \n-     * @since 1.7\n      */\n     protected final Config _factoryConfig;\n \n-    @Deprecated\n-    public BeanDeserializerFactory() {\n-        this(null);\n-    }\n-\n-    /**\n-     * @since 1.7\n-     */\n     public BeanDeserializerFactory(DeserializerFactory.Config config) {\n         if (config == null) {\n             config = new ConfigImpl();\n      * Method used by module registration functionality, to construct a new bean\n      * deserializer factory\n      * with different configuration settings.\n-     * \n-     * @since 1.7\n      */\n     @Override\n     public DeserializerFactory withConfig(DeserializerFactory.Config config)\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n             _fields.addAll(foundFields.values());\n         }\n     }\n-\n-    /*\n-    /**********************************************************\n-    /* Deprecated methods\n-    /**********************************************************\n-     */\n-    \n-    /**\n-     * @since 1.9 Use version without arguments\n-     */\n-    @Deprecated\n-    public void resolveMemberMethods(MethodFilter methodFilter, boolean collectIgnored)\n-    {\n-        resolveMemberMethods(methodFilter);\n-    }\n-    \n-    /**\n-     * @since 1.9 Use version without arguments\n-     */\n-    @Deprecated\n-    public void resolveFields(boolean collectIgnored)\n-    {\n-        resolveFields();\n-    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java\n  * is done using a single-element JSON Object where type id is the key,\n  * and actual object data as the value.\n  * \n- * @author tatus\n+ * @author tatu\n  */\n public class AsWrapperTypeDeserializer extends TypeDeserializerBase\n {\n-    @Deprecated // since 1.9\n-    public AsWrapperTypeDeserializer(JavaType bt, TypeIdResolver idRes, BeanProperty property) {\n-        this(bt, idRes, property, null);\n-    }\n-\n     public AsWrapperTypeDeserializer(JavaType bt, TypeIdResolver idRes, BeanProperty property,\n             Class<?> defaultImpl)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType.java\n  * This specifically allows framework to check for configuration and annotation\n  * settings used for Map types, and pass these to custom handlers that may be more\n  * familiar with actual type.\n- *\n- * @since 1.8\n  */\n public class CollectionLikeType extends TypeBase\n {\n     /* Life-cycle\n     /**********************************************************\n      */\n-\n-    @Deprecated // since 1.9\n-    protected CollectionLikeType(Class<?> collT, JavaType elemT)\n-    {\n-        super(collT,  elemT.hashCode(), null, null);\n-        _elementType = elemT;\n-    }\n \n     protected CollectionLikeType(Class<?> collT, JavaType elemT,\n             Object valueHandler, Object typeHandler)\n         return new CollectionLikeType(rawType, elemT, null, null);\n     }\n \n-    // Since 1.7:\n     @Override\n     public CollectionLikeType withTypeHandler(Object h)\n     {\n         return new CollectionLikeType(_class, _elementType, _valueHandler, h);\n     }\n \n-    // Since 1.7:\n     @Override\n     public CollectionLikeType withContentTypeHandler(Object h)\n     {\n                 _valueHandler, _typeHandler);\n     }\n \n-    // Since 1.9:\n     @Override\n     public CollectionLikeType withValueHandler(Object h) {\n         return new CollectionLikeType(_class, _elementType, h, _typeHandler);\n     }\n \n-    // Since 1.9:\n     @Override\n     public CollectionLikeType withContentValueHandler(Object h) {\n         return new CollectionLikeType(_class, _elementType.withValueHandler(h),\n--- a/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java\n  * This specifically allows framework to check for configuration and annotation\n  * settings used for Map types, and pass these to custom handlers that may be more\n  * familiar with actual type.\n- *\n- * @since 1.8\n  */\n public class MapLikeType extends TypeBase\n {\n     /* Life-cycle\n     /**********************************************************\n      */\n-\n-    @Deprecated // since 1.9\n-    protected MapLikeType(Class<?> mapType, JavaType keyT, JavaType valueT)\n-    {\n-        super(mapType, keyT.hashCode() ^ valueT.hashCode(), null, null);\n-        _keyType = keyT;\n-        _valueType = valueT;\n-    }\n \n     protected MapLikeType(Class<?> mapType, JavaType keyT, JavaType valueT,\n             Object valueHandler, Object typeHandler)\n--- a/src/main/java/com/fasterxml/jackson/databind/type/MapType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/MapType.java\n     /* Life-cycle\n     /**********************************************************\n      */\n-\n-    @Deprecated\n-    private MapType(Class<?> mapType, JavaType keyT, JavaType valueT) {\n-        this(mapType, keyT, valueT, null, null);\n-    }\n \n     private MapType(Class<?> mapType, JavaType keyT, JavaType valueT,\n             Object valueHandler, Object typeHandler) {\n--- a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java\n \n     protected SimpleType(Class<?> cls) {\n         this(cls, null, null, null, null);\n-    }\n-\n-    @Deprecated // since 1.9\n-    protected SimpleType(Class<?> cls, String[] typeNames, JavaType[] typeParams)\n-    {\n-        this(cls, typeNames, typeParams, null, null);\n     }\n \n     protected SimpleType(Class<?> cls, String[] typeNames, JavaType[] typeParams,", "timestamp": 1324851837, "metainfo": ""}