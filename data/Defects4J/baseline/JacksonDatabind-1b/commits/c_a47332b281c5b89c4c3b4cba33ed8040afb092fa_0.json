{"sha": "a47332b281c5b89c4c3b4cba33ed8040afb092fa", "log": "Minor changes required to support [JACKSON-782] for TokenBuffer, tree-based parser", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/NodeCursor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/NodeCursor.java\n      */\n     protected final NodeCursor _parent;\n \n+    /**\n+     * Current field name\n+     */\n+    protected String _currentName;\n+    \n     public NodeCursor(int contextType, NodeCursor p)\n     {\n         super();\n     public final NodeCursor getParent() { return _parent; }\n \n     @Override\n-    public abstract String getCurrentName();\n-\n+    public final String getCurrentName() {\n+        return _currentName;\n+    }\n+\n+    /**\n+     * @since 2.0\n+     */\n+    public void overrideCurrentName(String name) {\n+        _currentName = name;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Extended API\n \n     public abstract JsonNode currentNode();\n     public abstract boolean currentHasChildren();\n-\n+    \n     /**\n      * Method called to create a new context for iterating all\n      * contents of the current structured value (JSON array or object)\n     protected final static class RootValue\n         extends NodeCursor\n     {\n-        JsonNode _node;\n+        protected JsonNode _node;\n \n         protected boolean _done = false;\n \n         }\n \n         @Override\n-        public String getCurrentName() { return null; }\n-\n+        public void overrideCurrentName(String name) {\n+            \n+        }\n+        \n         @Override\n         public JsonToken nextToken() {\n             if (!_done) {\n     protected final static class Array\n         extends NodeCursor\n     {\n-        Iterator<JsonNode> _contents;\n-\n-        JsonNode _currentNode;\n+        protected Iterator<JsonNode> _contents;\n+\n+        protected JsonNode _currentNode;\n \n         public Array(JsonNode n, NodeCursor p) {\n             super(JsonStreamContext.TYPE_ARRAY, p);\n         }\n \n         @Override\n-        public String getCurrentName() { return null; }\n-\n-        @Override\n         public JsonToken nextToken()\n         {\n             if (!_contents.hasNext()) {\n     protected final static class Object\n         extends NodeCursor\n     {\n-        Iterator<Map.Entry<String, JsonNode>> _contents;\n-        Map.Entry<String, JsonNode> _current;\n-\n-        boolean _needEntry;\n+        protected Iterator<Map.Entry<String, JsonNode>> _contents;\n+        protected Map.Entry<String, JsonNode> _current;\n+\n+        protected boolean _needEntry;\n         \n         public Object(JsonNode n, NodeCursor p)\n         {\n         }\n \n         @Override\n-        public String getCurrentName() {\n-            return (_current == null) ? null : _current.getKey();\n-        }\n-\n-        @Override\n         public JsonToken nextToken()\n         {\n             // Need a new entry?\n             if (_needEntry) {\n                 if (!_contents.hasNext()) {\n+                    _currentName = null;\n                     _current = null;\n                     return null;\n                 }\n                 _needEntry = false;\n                 _current = _contents.next();\n+                _currentName = (_current == null) ? null : _current.getKey();\n                 return JsonToken.FIELD_NAME;\n             }\n             _needEntry = true;\n--- a/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java\n         return (_nodeCursor == null) ? null : _nodeCursor.getCurrentName();\n     }\n \n+    @Override\n+    public void overrideCurrentName(String name)\n+    {\n+        if (_nodeCursor != null) {\n+            _nodeCursor.overrideCurrentName(name);\n+        }\n+    }\n+    \n     @Override\n     public JsonStreamContext getParsingContext() {\n         return _nodeCursor;\n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n \n         @Override\n         public String getCurrentName() { return _parsingContext.getCurrentName(); }\n+\n+        @Override\n+        public void overrideCurrentName(String name)\n+        {\n+            // Simple, but need to look for START_OBJECT/ARRAY's \"off-by-one\" thing:\n+            JsonReadContext ctxt = _parsingContext;\n+            if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\n+                ctxt = ctxt.getParent();\n+            }\n+            ctxt.setCurrentName(name);\n+        }\n         \n         /*\n         /**********************************************************\n--- a/src/test/java/com/fasterxml/jackson/databind/util/TestTokenBuffer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/util/TestTokenBuffer.java\n         assertNull(jp.getCurrentName());\n         assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n         assertEquals(\"num\", jp.getCurrentName());\n+        // and override should also work:\n+        jp.overrideCurrentName(\"bah\");\n+        assertEquals(\"bah\", jp.getCurrentName());\n+        \n         assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());\n         assertEquals(1.25, jp.getDoubleValue());\n-        // should still have access to name\n-        assertEquals(\"num\", jp.getCurrentName());\n+        // should still have access to (overridden) name\n+        assertEquals(\"bah\", jp.getCurrentName());\n         assertToken(JsonToken.END_OBJECT, jp.nextToken());\n         // but not any more\n         assertNull(jp.getCurrentName());", "timestamp": 1329789321, "metainfo": ""}