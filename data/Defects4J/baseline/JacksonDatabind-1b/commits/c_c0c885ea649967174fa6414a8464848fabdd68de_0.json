{"sha": "c0c885ea649967174fa6414a8464848fabdd68de", "log": "...", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/failing/TestGenericSubTyping.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestGenericSubTyping.java\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n public class TestGenericSubTyping extends BaseMapTest\n     static class ResultSetWithDoc<D extends Document> extends ResultSet<RowWithDoc<D>> {}\n \n     static class MyDoc extends Document {}\n-    \n+\n     /*\n     /*******************************************************\n     /* Unit tests\n     \n     public void testIssue778() throws Exception\n     {\n+        final ObjectMapper mapper = new ObjectMapper();\n         String json = \"{\\\"rows\\\":[{\\\"d\\\":{}}]}\";\n \n-        ResultSetWithDoc<MyDoc> rs = new ObjectMapper().readValue(json,\n-                new TypeReference<ResultSetWithDoc<MyDoc>>() {});\n+        final TypeReference<?> type = new TypeReference<ResultSetWithDoc<MyDoc>>() {};\n+        \n+        // type passed is correct, but somehow it gets mangled when passed...\n+        ResultSetWithDoc<MyDoc> rs = mapper.readValue(json, type);\n         Document d = rs.rows.iterator().next().d;\n     \n         assertEquals(MyDoc.class, d.getClass()); //expected MyDoc but was Document", "timestamp": 1329793056, "metainfo": ""}