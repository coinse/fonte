{"sha": "33ac88ae6c21997ed57adace740aba186373e707", "log": "Added unit test to verify [JACKSON-820] (should possibly move to core tho)", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/TestGeneratorUsingMapper.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestGeneratorUsingMapper.java\n \n import com.fasterxml.jackson.core.JsonFactory;\n import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.SerializableString;\n+import com.fasterxml.jackson.core.io.CharacterEscapes;\n \n public class TestGeneratorUsingMapper extends BaseMapTest\n {\n         }\n     }\n \n+    public void testIssue820() throws IOException\n+    {\n+        StringBuffer sb = new StringBuffer();\n+        while (sb.length() <= 5000) {\n+            sb.append(\"Yet another line of text...\\n\");\n+        }\n+        String sampleText = sb.toString();\n+        assertTrue(\n+                \"Sanity check so I don't mess up the sample text later.\",\n+                sampleText.contains(\"\\n\"));\n+\n+        final ObjectMapper mapper = new ObjectMapper();\n+        final CharacterEscapes defaultCharacterEscapes = new CharacterEscapes() {\n+            public int[] getEscapeCodesForAscii() {\n+                return standardAsciiEscapesForJSON();\n+            }\n+\n+            public SerializableString getEscapeSequence(final int ch) {\n+                return null;\n+            }\n+        };\n+\n+        mapper.getJsonFactory().setCharacterEscapes(defaultCharacterEscapes);\n+        String jacksonJson = mapper.writeValueAsString(sampleText);\n+        boolean hasLFs = jacksonJson.indexOf('\\n') > 0;\n+        assertFalse(\"Should NOT contain linefeeds, should have been escaped\", hasLFs);\n+    }    \n }", "timestamp": 1332647211, "metainfo": ""}