{"sha": "5b58cb22b4ce9b1a3a37481190e5aa87eb6fd79a", "log": "Move FilteredBeanPropertyWriter under 'impl' pkg, not externally useful", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter;\n import com.fasterxml.jackson.databind.ser.std.MapSerializer;\n import com.fasterxml.jackson.databind.type.*;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/FilteredBeanPropertyWriter.java\n+package com.fasterxml.jackson.databind.ser.impl;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n+\n+/**\n+ * Decorated {@link BeanPropertyWriter} that will filter out properties\n+ * that are not to be included in currently active JsonView.\n+ */\n+public abstract class FilteredBeanPropertyWriter\n+{    \n+    public static BeanPropertyWriter constructViewBased(BeanPropertyWriter base, Class<?>[] viewsToIncludeIn)\n+    {\n+        if (viewsToIncludeIn.length == 1) {\n+            return new SingleView(base, viewsToIncludeIn[0]);\n+        }\n+        return new MultiView(base, viewsToIncludeIn);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Concrete sub-classes\n+    /**********************************************************\n+     */\n+\n+    private final static class SingleView\n+        extends BeanPropertyWriter\n+    {\n+        protected final BeanPropertyWriter _delegate;\n+\n+        protected final Class<?> _view;\n+        \n+        protected SingleView(BeanPropertyWriter delegate, Class<?> view)\n+        {\n+            super(delegate);\n+            _delegate = delegate;\n+            _view = view;\n+        }\n+\n+        @Override\n+        public SingleView rename(NameTransformer transformer) {\n+            return new SingleView(_delegate.rename(transformer), _view);\n+        }\n+        \n+        @Override\n+        public void assignSerializer(JsonSerializer<Object> ser) {\n+            _delegate.assignSerializer(ser);\n+        }\n+\n+        @Override\n+        public void assignNullSerializer(JsonSerializer<Object> nullSer) {\n+            _delegate.assignNullSerializer(nullSer);\n+        }\n+        \n+        @Override\n+        public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov)\n+            throws Exception\n+        {\n+            Class<?> activeView = prov.getSerializationView();\n+            if (activeView == null || _view.isAssignableFrom(activeView)) {\n+                _delegate.serializeAsField(bean, jgen, prov);\n+            }\n+        }\n+    }\n+\n+    private final static class MultiView\n+        extends BeanPropertyWriter\n+    {\n+        protected final BeanPropertyWriter _delegate;\n+\n+        protected final Class<?>[] _views;\n+        \n+        protected MultiView(BeanPropertyWriter delegate, Class<?>[] views) {\n+            super(delegate);\n+            _delegate = delegate;\n+            _views = views;\n+        }\n+\n+        @Override\n+        public MultiView rename(NameTransformer transformer) {\n+            return new MultiView(_delegate.rename(transformer), _views);\n+        }\n+        \n+        @Override\n+        public void assignSerializer(JsonSerializer<Object> ser) {\n+            _delegate.assignSerializer(ser);\n+        }\n+\n+        @Override\n+        public void assignNullSerializer(JsonSerializer<Object> nullSer) {\n+            _delegate.assignNullSerializer(nullSer);\n+        }\n+        \n+        @Override\n+        public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov)\n+            throws Exception\n+        {\n+            final Class<?> activeView = prov.getSerializationView();\n+            if (activeView != null) {\n+                int i = 0, len = _views.length;\n+                for (; i < len; ++i) {\n+                    if (_views[i].isAssignableFrom(activeView)) break;\n+                }\n+                // not included, bail out:\n+                if (i == len) {\n+                    return;\n+                }\n+            }\n+            _delegate.serializeAsField(bean, jgen, prov);\n+        }\n+    }\n+}", "timestamp": 1327902549, "metainfo": ""}