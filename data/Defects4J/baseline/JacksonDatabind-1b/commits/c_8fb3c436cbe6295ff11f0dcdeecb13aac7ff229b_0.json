{"sha": "8fb3c436cbe6295ff11f0dcdeecb13aac7ff229b", "log": "added bit more testing for map key handling", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n         return type;\n     }\n \n+    /**\n+     * Helper method called to try to find whether there is an annotation that\n+     * specifies key serializer to use: either attached to property (higher priority)\n+     * or class of key type (lower priority).\n+     * If so, will try to instantiate key serializer and return it; otherwise returns null.\n+     */\n     protected JsonSerializer<Object> _findKeySerializer(SerializerProvider prov,\n             Annotated a, BeanProperty property)\n         throws JsonMappingException\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n import java.text.SimpleDateFormat;\n import java.util.*;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.type.TypeReference;\n \n             CustomMap result = new CustomMap();\n             result.put(\"x\", jp.getText());\n             return result;\n+        }\n+    }\n+\n+    static class KeyType {\n+        protected String value;\n+        \n+        private KeyType(String v, boolean bogus) {\n+            value = v;\n+        }\n+\n+        @JsonCreator\n+        public static KeyType create(String v) {\n+            return new KeyType(v, true);\n         }\n     }\n     \n         assertEquals(key, ob);\n     }\n \n+    // Test confirming that @JsonCreator may be used with Map Key types\n+    public void testKeyWithCreator() throws Exception\n+    {\n+        // first, key should deserialize normally:\n+        KeyType key = MAPPER.readValue(quote(\"abc\"), KeyType.class);\n+        assertEquals(\"abc\", key.value);\n+\n+        Map<KeyType,Integer> map = MAPPER.readValue(\"{\\\"foo\\\":3}\", new TypeReference<Map<KeyType,Integer>>() {} );\n+        assertEquals(1, map.size());\n+        key = map.keySet().iterator().next();\n+        assertEquals(\"foo\", key.value);\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java\n     /**********************************************************\n      */\n \n+    final ObjectMapper MAPPER = new ObjectMapper();\n+    \n     // Test [JACKSON-220]\n     public void testMapSerializer() throws IOException\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        assertEquals(\"\\\"{a=b, c=d}\\\"\", m.writeValueAsString(new PseudoMap(\"a\", \"b\", \"c\", \"d\")));\n+        assertEquals(\"\\\"{a=b, c=d}\\\"\", MAPPER.writeValueAsString(new PseudoMap(\"a\", \"b\", \"c\", \"d\")));\n     }\n \n     // Test [JACKSON-314]\n     // [JACKSON-499], problems with map entries, values\n     public void testMapKeyValueSerialization() throws IOException\n     {\n-        ObjectMapper m = new ObjectMapper();\n         Map<String,String> map = new HashMap<String,String>();\n         map.put(\"a\", \"b\");\n-        assertEquals(\"[\\\"a\\\"]\", m.writeValueAsString(map.keySet()));\n-        assertEquals(\"[\\\"b\\\"]\", m.writeValueAsString(map.values()));\n+        assertEquals(\"[\\\"a\\\"]\", MAPPER.writeValueAsString(map.keySet()));\n+        assertEquals(\"[\\\"b\\\"]\", MAPPER.writeValueAsString(map.values()));\n \n         // TreeMap has similar inner class(es):\n         map = new TreeMap<String,String>();\n         map.put(\"c\", \"d\");\n-        assertEquals(\"[\\\"c\\\"]\", m.writeValueAsString(map.keySet()));\n-        assertEquals(\"[\\\"d\\\"]\", m.writeValueAsString(map.values()));\n+        assertEquals(\"[\\\"c\\\"]\", MAPPER.writeValueAsString(map.keySet()));\n+        assertEquals(\"[\\\"d\\\"]\", MAPPER.writeValueAsString(map.values()));\n \n         // and for [JACKSON-533], same for concurrent maps\n         map = new ConcurrentHashMap<String,String>();\n         map.put(\"e\", \"f\");\n-        assertEquals(\"[\\\"e\\\"]\", m.writeValueAsString(map.keySet()));\n-        assertEquals(\"[\\\"f\\\"]\", m.writeValueAsString(map.values()));\n+        assertEquals(\"[\\\"e\\\"]\", MAPPER.writeValueAsString(map.keySet()));\n+        assertEquals(\"[\\\"f\\\"]\", MAPPER.writeValueAsString(map.values()));\n     }\n \n     // For [JACKSON-574]\n         // but can be changed\n         assertEquals(\"{\\\"a\\\":6,\\\"b\\\":3}\", m.writer(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS).writeValueAsString(map));\n     }\n-    \n }", "timestamp": 1344901272, "metainfo": ""}