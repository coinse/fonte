{"sha": "7c71bad01e44472d4913ef7deb0847e4d39e7680", "log": "Fix [JACKSON-831]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n             jp.nextToken();\n             SettableBeanProperty prop = _beanProperties.find(propName);\n             if (prop != null) { // normal case\n+                // [JACKSON-831]: may have property AND be used as external type id:\n+                if (jp.getCurrentToken().isScalarValue()) {\n+                    ext.handleTypePropertyValue(jp, ctxt, propName, bean);\n+                }\n                 if (activeView != null && !prop.visibleInView(activeView)) {\n                     jp.skipChildren();\n                     continue;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java\n         return new ExternalTypeHandler(this);\n     }\n \n+    /**\n+     * Method called to see if given property/value pair is an external type\n+     * id; and if so handle it. This is <b>only</b> to be called in case\n+     * containing POJO has similarly named property as the external type id;\n+     * otherwise {@link #handlePropertyValue} should be called instead.\n+     */\n+    public boolean handleTypePropertyValue(JsonParser jp, DeserializationContext ctxt,\n+            String propName, Object bean)\n+        throws IOException, JsonProcessingException\n+    {\n+        Integer I = _nameToPropertyIndex.get(propName);\n+        if (I == null) {\n+            return false;\n+        }\n+        int index = I.intValue();\n+        ExtTypedProperty prop = _properties[index];\n+        if (!prop.hasTypePropertyName(propName)) {\n+            return false;\n+        }\n+        _typeIds[index] = jp.getText();\n+        // note: can NOT skip child values (should always be String anyway)\n+        boolean canDeserialize = (bean != null) && (_tokens[index] != null);\n+        // Minor optimization: deserialize properties as soon as we have all we need:\n+        if (canDeserialize) {\n+            _deserializeAndSet(jp, ctxt, bean, index);\n+            // clear stored data, to avoid deserializing+setting twice:\n+            _typeIds[index] = null;\n+            _tokens[index] = null;\n+        }\n+        return true;\n+    }\n+    \n     /**\n      * Method called to ask handler to handle value of given property,\n      * at point where parser points to the first token of the value.\n     public Object complete(JsonParser jp, DeserializationContext ctxt, Object bean)\n         throws IOException, JsonProcessingException\n     {\n-\n         for (int i = 0, len = _properties.length; i < len; ++i) {\n             if (_typeIds[i] == null) {\n                 // let's allow missing both type and property (may already have been set, too)\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java\n         public Base getBase() { return base; }\n     }\n \n-    // [JACKSON-831]\n+    // [JACKSON-831]: should allow a property to map id to as well\n     \n     interface Pet {}\n \n     }\n \n     static class House831 {\n-        private String petType;\n+        protected String petType;\n \n         @JsonTypeInfo(use = Id.NAME, include = As.EXTERNAL_PROPERTY, property = \"petType\")\n         @JsonSubTypes({@JsonSubTypes.Type(name = \"dog\", value = Dog.class)})\n         assertNotNull(result);\n         assertNotNull(result.pet);\n         assertSame(Dog.class, result.pet.getClass());\n+        assertEquals(\"dog\", result.petType);\n     }\n }", "timestamp": 1335980783, "metainfo": ""}