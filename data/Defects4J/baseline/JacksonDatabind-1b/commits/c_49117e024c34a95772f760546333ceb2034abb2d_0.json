{"sha": "49117e024c34a95772f760546333ceb2034abb2d", "log": "Implement [JACKSON-636], SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n      */\n     \n     /**\n-     * SerializationFeature that can be enabled to make root value (usually JSON\n+     * Feature that can be enabled to make root value (usually JSON\n      * Object but can be any type) wrapped within a single property\n      * JSON object, where key as the \"root name\", as determined by\n      * annotation introspector (esp. for JAXB that uses\n      * <code>@XmlRootElement.name</code>) or fallback (non-qualified\n      * class name).\n-     * SerializationFeature is mostly intended for JAXB compatibility.\n-     *<p>\n-     * SerializationFeature is enabled by default.\n+     * Feature is mostly intended for JAXB compatibility.\n+     *<p>\n+     * Feature is enabled by default.\n      */\n     WRAP_ROOT_VALUE(false),\n \n     /**\n-     * SerializationFeature that allows enabling (or disabling) indentation\n+     * Feature that allows enabling (or disabling) indentation\n      * for the underlying generator, using the default pretty\n      * printer (see\n      * {@link com.fasterxml.jackson.core.JsonGenerator#useDefaultPrettyPrinter}\n      * method to use any <code>PrettyPrinter</code> instance.\n      * This feature will only allow using the default implementation.\n      *<p>\n-     * SerializationFeature is enabled by default.\n+     * Feature is enabled by default.\n      */\n     INDENT_OUTPUT(false),\n     \n      */\n     \n     /**\n-     * SerializationFeature that determines what happens when no accessors are\n+     * Feature that determines what happens when no accessors are\n      * found for a type (and there are no annotations to indicate\n      * it is meant to be serialized). If enabled (default), an\n      * exception is thrown to indicate these as non-serializable\n      * (like <code>@JsonSerialize</code>): ones that do have annotations\n      * do not result in an exception being thrown.\n      *<p>\n-     * SerializationFeature is enabled by default.\n+     * Feature is enabled by default.\n      */\n     FAIL_ON_EMPTY_BEANS(true),\n \n     /**\n-     * SerializationFeature that determines whether Jackson code should catch\n+     * Feature that determines whether Jackson code should catch\n      * and wrap {@link Exception}s (but never {@link Error}s!)\n      * to add additional information about\n      * location (within input) of problem or not. If enabled,\n      * unchecked exceptions passed as is.\n      *<p>\n      *<p>\n-     * SerializationFeature is enabled by default.\n+     * Feature is enabled by default.\n      */\n     WRAP_EXCEPTIONS(true),\n \n      */\n     \n      /**\n-      * SerializationFeature that determines whether <code>close</code> method of\n+      * Feature that determines whether <code>close</code> method of\n       * serialized <b>root level</b> objects (ones for which <code>ObjectMapper</code>'s\n       * writeValue() (or equivalent) method is called)\n       * that implement {@link java.io.Closeable} \n       * objects reachable from the root object. Put another way, only one\n       * call will be made for each 'writeValue' call.\n      *<p>\n-     * SerializationFeature is disabled by default.\n+     * Feature is disabled by default.\n       */\n     CLOSE_CLOSEABLE(false),\n \n     /**\n-     * SerializationFeature that determines whether <code>JsonGenerator.flush()</code> is\n+     * Feature that determines whether <code>JsonGenerator.flush()</code> is\n      * called after <code>writeValue()</code> method <b>that takes JsonGenerator\n      * as an argument</b> completes (i.e. does NOT affect methods\n      * that use other destinations); same for methods in {@link ObjectWriter}.\n      * compressing and flush() causes compression state to be flushed\n      * (which occurs with some compression codecs).\n      *<p>\n-     * SerializationFeature is enabled by default.\n+     * Feature is enabled by default.\n      */\n     FLUSH_AFTER_WRITE_VALUE(true),\n      \n      */\n \n     /**\n-     * SerializationFeature that determines whether {@link java.util.Date} values\n+     * Feature that determines whether {@link java.util.Date} values\n      * (and Date-based things like {@link java.util.Calendar}s) are to be\n      * serialized as numeric timestamps (true; the default),\n      * or as something else (usually textual representation).\n      * Note: whether {@link java.util.Map} keys are serialized as Strings\n      * or not is controlled using {@link #WRITE_DATE_KEYS_AS_TIMESTAMPS}.\n      *<p>\n-     * SerializationFeature is enabled by default.\n+     * Feature is enabled by default.\n      */\n     WRITE_DATES_AS_TIMESTAMPS(true),\n \n     /**\n-     * SerializationFeature that determines whether {@link java.util.Date}s\n+     * Feature that determines whether {@link java.util.Date}s\n      * (and sub-types) used as {@link java.util.Map} keys are serialized\n      * as timestamps or not (if not, will be serialized as textual\n      * values).\n      * Default value is 'false', meaning that Date-valued Map keys are serialized\n      * as textual (ISO-8601) values.\n      *<p>\n-     * SerializationFeature is disabled by default.\n+     * Feature is disabled by default.\n      */\n     WRITE_DATE_KEYS_AS_TIMESTAMPS(false),\n \n     /**\n-     * SerializationFeature that determines how type <code>char[]</code> is serialized:\n+     * Feature that determines how type <code>char[]</code> is serialized:\n      * when enabled, will be serialized as an explict JSON array (with\n      * single-character Strings as values); when disabled, defaults to\n      * serializing them as Strings (which is more compact).\n      *<p>\n-     * SerializationFeature is disabled by default.\n+     * Feature is disabled by default.\n      */\n     WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS(false),\n \n     /**\n-     * SerializationFeature that determines standard serialization mechanism used for\n+     * Feature that determines standard serialization mechanism used for\n      * Enum values: if enabled, return value of <code>Enum.toString()</code>\n      * is used; if disabled, return value of <code>Enum.name()</code> is used.\n      *<p>\n      * Note: this feature should usually have same value\n      * as {@link DeserializationFeature#READ_ENUMS_USING_TO_STRING}.\n      *<p>\n-     * SerializationFeature is disabled by default.\n+     * Feature is disabled by default.\n      */\n     WRITE_ENUMS_USING_TO_STRING(false),\n \n     /**\n-     * SerializationFeature that determines whethere Java Enum values are serialized\n+     * Feature that determines whethere Java Enum values are serialized\n      * as numbers (true), or textual values (false). If textual values are\n      * used, other settings are also considered.\n      * If this feature is enabled,\n      * Note that this feature has precedence over {@link #WRITE_ENUMS_USING_TO_STRING},\n      * which is only considered if this feature is set to false.\n      *<p>\n-     * SerializationFeature is disabled by default.\n+     * Feature is disabled by default.\n      */\n     WRITE_ENUMS_USING_INDEX(false),\n     \n     /**\n-     * SerializationFeature that determines whether Map entries with null values are\n+     * Feature that determines whether Map entries with null values are\n      * to be serialized (true) or not (false).\n      *<p>\n      * For further details, check out [JACKSON-314]\n      *<p>\n-     * SerializationFeature is enabled by default.\n+     * Feature is enabled by default.\n      */\n     WRITE_NULL_MAP_VALUES(true),\n \n     /**\n-     * SerializationFeature that determines whether Container properties (POJO properties\n+     * Feature that determines whether Container properties (POJO properties\n      * with declared value of Collection or array; i.e. things that produce JSON\n      * arrays) that are empty (have no elements)\n      * will be serialized as empty JSON arrays (true), or suppressed from output (false).\n      * Note that this does not change behavior of {@link java.util.Map}s, or\n      * \"Collection-like\" types.\n      *<p>\n-     * SerializationFeature is enabled by default.\n-     */\n-    WRITE_EMPTY_JSON_ARRAYS(true)\n+     * Feature is enabled by default.\n+     */\n+    WRITE_EMPTY_JSON_ARRAYS(true),\n+    \n+    /**\n+     * Feature that determines whether {@link java.util.Map} entries are first\n+     * sorted by key before serialization or not: if enabled, additional sorting\n+     * step is performed if necessary (not necessary for {@link java.util.SortedMap}s),\n+     * if disabled, no additional sorting is needed.\n+     *<p>\n+     * Feature is disabled by default.\n+     */\n+    ORDER_MAP_ENTRIES_BY_KEYS(false)\n     \n         ;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n     {\n         jgen.writeStartObject();\n         if (!value.isEmpty()) {\n+            if (provider.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS)) {\n+                value = _orderEntries(value);\n+            }\n             if (_valueSerializer != null) {\n                 serializeFieldsUsing(value, jgen, provider, _valueSerializer);\n             } else {\n     {\n         typeSer.writeTypePrefixForObject(value, jgen);\n         if (!value.isEmpty()) {\n+            if (provider.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS)) {\n+                value = _orderEntries(value);\n+            }\n             if (_valueSerializer != null) {\n                 serializeFieldsUsing(value, jgen, provider, _valueSerializer);\n             } else {\n \n     /*\n     /**********************************************************\n-    /* Internal methods\n+    /* Internal helper methods\n     /**********************************************************\n      */\n     \n         return result.serializer;\n     }\n \n+    protected Map<?,?> _orderEntries(Map<?,?> input)\n+    {\n+        // minor optimization: may already be sorted?\n+        if (input instanceof SortedMap<?,?>) {\n+            return input;\n+        }\n+        return new TreeMap<Object,Object>(input);\n+    }\n }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java\n         map.put(\"a\", \"b\");\n         assertEquals(\"{\\\"DEFAULT:a\\\":\\\"b\\\"}\", m.writeValueAsString(map));\n     }\n+\n+    // [JACKSON-636]: sort Map entries by key\n+    public void testOrderByKey() throws IOException\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        assertFalse(m.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS));\n+        LinkedHashMap<String,Integer> map = new LinkedHashMap<String,Integer>();\n+        map.put(\"b\", 3);\n+        map.put(\"a\", 6);\n+        // by default, no (re)ordering:\n+        assertEquals(\"{\\\"b\\\":3,\\\"a\\\":6}\", m.writeValueAsString(map));\n+        // but can be changed\n+        assertEquals(\"{\\\"a\\\":6,\\\"b\\\":3}\", m.writer(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS).writeValueAsString(map));\n+    }\n+    \n }", "timestamp": 1330819272, "metainfo": ""}