{"sha": "19ab5808eb8e47662f1d55408fdb186320061f13", "log": "Getting back to implement deserialization-with-view", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n     \n     /*\n     /**********************************************************\n-    /* Construction configuration\n+    /* Configuration for creating value instance\n     /**********************************************************\n      */\n \n     final protected boolean _ignoreAllUnknown;\n \n     /**\n+     * Flag that indicates that some aspect of deserialization depends\n+     * on active view used (if any)\n+     */\n+    final protected boolean _needViewProcesing;\n+    \n+    /**\n      * We may also have one or more back reference fields (usually\n      * zero or one).\n      */\n             ValueInstantiator valueInstantiator,\n             BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs,\n             HashSet<String> ignorableProps, boolean ignoreAllUnknown,\n-            SettableAnyProperty anySetter, List<ValueInjector> injectables)\n+            SettableAnyProperty anySetter, List<ValueInjector> injectables,\n+            boolean hasViews)\n     {\n         this(beanDesc.getClassInfo(), beanDesc.getType(), property,\n                 valueInstantiator,\n                 properties, backRefs,\n                 ignorableProps, ignoreAllUnknown,\n-                anySetter, injectables);\n+                anySetter, injectables, hasViews);\n     }\n     \n     protected BeanDeserializer(AnnotatedClass forClass, JavaType type, BeanProperty property,\n             ValueInstantiator valueInstantiator,\n             BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs,\n             HashSet<String> ignorableProps, boolean ignoreAllUnknown,\n-            SettableAnyProperty anySetter, List<ValueInjector> injectables)\n+            SettableAnyProperty anySetter, List<ValueInjector> injectables,\n+            boolean hasViews)\n     {\n         super(type);\n         _forClass = forClass;\n             || valueInstantiator.canCreateFromObjectWith()\n             || !valueInstantiator.canCreateUsingDefault()\n             ;\n+\n+        _needViewProcesing = hasViews;    \n     }\n \n     /**\n         \n         _nonStandardCreation = src._nonStandardCreation;\n         _unwrappedPropertyHandler = src._unwrappedPropertyHandler;\n+        _needViewProcesing = src._needViewProcesing;\n     }\n     \n     protected BeanDeserializer(BeanDeserializer src, NameTransformer unwrapper)\n         } else {\n             _beanProperties = src._beanProperties;\n         }\n+        _needViewProcesing = src._needViewProcesing;\n     }\n \n     @Override\n         return _beanProperties.find(propertyName) != null;\n     }\n \n+    public boolean hasViews() {\n+        return _needViewProcesing;\n+    }\n+    \n     /**\n      * Accessor for checking number of deserialized properties.\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n \n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;\n import com.fasterxml.jackson.databind.deser.impl.ValueInjector;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n      */\n \n     final protected BeanDescription _beanDesc;\n+\n+    final protected boolean _defaultViewInclusion;\n     \n     /*\n     /**********************************************************\n     /**\n      * Properties to deserialize collected so far.\n      */\n-    final protected HashMap<String, SettableBeanProperty> _properties = new LinkedHashMap<String, SettableBeanProperty>();\n+    final protected Map<String, SettableBeanProperty> _properties\n+        = new LinkedHashMap<String, SettableBeanProperty>();\n \n     /**\n      * Value injectors for deserialization\n     /**********************************************************\n      */\n     \n-    public BeanDeserializerBuilder(BeanDescription beanDesc)\n+    public BeanDeserializerBuilder(BeanDescription beanDesc,\n+            DeserializationConfig config)\n     { \n         _beanDesc = beanDesc;\n+        _defaultViewInclusion = config.isEnabled(MapperConfig.Feature.DEFAULT_VIEW_INCLUSION);\n     }\n \n     /**\n         _properties.putAll(src._properties);\n         _backRefProperties = _copy(src._backRefProperties);\n         // Hmmh. Should we create defensive copies here? For now, not yet\n-        _ignorableProps = src._ignorableProps;\n+        _ignorableProps = src._ignorableProps;        \n         _valueInstantiator = src._valueInstantiator;\n+        _defaultViewInclusion = src._defaultViewInclusion;\n     }\n \n     private static HashMap<String, SettableBeanProperty> _copy(HashMap<String, SettableBeanProperty> src)\n \n     public JsonDeserializer<?> build(BeanProperty forProperty)\n     {\n-        BeanPropertyMap propertyMap = new BeanPropertyMap(_properties.values());\n+        Collection<SettableBeanProperty> props = _properties.values();\n+        BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n         propertyMap.assignIndexes();\n+\n+        // view processing must be enabled if:\n+        // (a) fields are not included by default (when deserializing with view), OR\n+        // (b) one of properties has view(s) to included in defined\n+        boolean anyViews = !_defaultViewInclusion;\n+\n+        if (!anyViews) {\n+            for (SettableBeanProperty prop : props) {\n+                if (prop.hasViews()) {\n+                    anyViews = true;\n+                    break;\n+                }\n+            }\n+        }\n+        \n         return new BeanDeserializer(_beanDesc, forProperty,\n                 _valueInstantiator, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n-                _anySetter, _injectables);\n+                _anySetter, _injectables, anyViews);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n                 return new AbstractDeserializer(type);\n             }\n         }\n-        BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(beanDesc);\n+        BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc);\n         builder.setValueInstantiator(valueInstantiator);\n          // And then setters for deserializing from JSON Object\n         addBeanProps(ctxt, beanDesc, builder);\n     {\n         final DeserializationConfig config = ctxt.getConfig();\n         // first: construct like a regular bean deserializer...\n-        BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(beanDesc);\n+        BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc);\n         builder.setValueInstantiator(findValueInstantiator(ctxt, beanDesc));\n \n         addBeanProps(ctxt, beanDesc, builder);\n      * which is used to accumulate information needed to create deserializer\n      * instance.\n      */\n-    protected BeanDeserializerBuilder constructBeanDeserializerBuilder(BeanDescription beanDesc) {\n-        return new BeanDeserializerBuilder(beanDesc);\n+    protected BeanDeserializerBuilder constructBeanDeserializerBuilder(DeserializationContext ctxt,\n+            BeanDescription beanDesc) {\n+        return new BeanDeserializerBuilder(beanDesc, ctxt.getConfig());\n     }\n     \n     /**\n             }\n         }\n         \n-        // At which point we really should only have properties with mutators...\n-        for (BeanPropertyDefinition property : propDefs) {\n-            if (property.hasConstructorParameter()) {\n+        // At which point we still have all kinds of properties; not all with mutators:\n+        for (BeanPropertyDefinition propDef : propDefs) {\n+            if (propDef.hasConstructorParameter()) {\n                 /* [JACKSON-700] If property as passed via constructor parameter, we must\n                  *   handle things in special way. Not sure what is the most optimal way...\n                  *   for now, let's just call a (new) method in builder, which does nothing.\n                  */\n                 // but let's call a method just to allow custom builders to be aware...\n-                builder.addCreatorProperty(property);\n+                builder.addCreatorProperty(propDef);\n                 continue;\n             }\n             SettableBeanProperty prop = null;\n-            if (property.hasSetter()) {\n-                Type propertyType = property.getSetter().getGenericParameterType(0);\n+            if (propDef.hasSetter()) {\n+                Type propertyType = propDef.getSetter().getGenericParameterType(0);\n                 prop = constructSettableProperty(ctxt,\n-                        beanDesc, property, propertyType);\n-            } else if (property.hasField()) {\n-                Type propertyType = property.getField().getGenericType();\n-                prop = constructSettableProperty(ctxt, beanDesc, property, propertyType);\n-            } else if (useGettersAsSetters && property.hasGetter()) {\n+                        beanDesc, propDef, propertyType);\n+            } else if (propDef.hasField()) {\n+                Type propertyType = propDef.getField().getGenericType();\n+                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n+            } else if (useGettersAsSetters && propDef.hasGetter()) {\n                 /* As per [JACKSON-88], may also need to consider getters\n-                 * for Map/Collection properties\n+                 * for Map/Collection properties; but with lowest precedence\n                  */\n-                /* also, as per [JACKSON-328], should not override fields (or actual setters),\n-                 * thus these are added AFTER adding fields\n-                 */\n-                AnnotatedMethod getter = property.getGetter();\n+                AnnotatedMethod getter = propDef.getGetter();\n                 // should only consider Collections and Maps, for now?\n                 Class<?> rawPropertyType = getter.getRawType();\n                 if (Collection.class.isAssignableFrom(rawPropertyType)\n                         || Map.class.isAssignableFrom(rawPropertyType)) {\n-                    prop = constructSetterlessProperty(ctxt, beanDesc, property);\n+                    prop = constructSetterlessProperty(ctxt, beanDesc, propDef);\n                 }\n             }\n             if (prop != null) {\n+                // one more thing before adding to builder: copy any metadata\n+                prop.setViews(propDef.getViews());\n                 builder.addProperty(prop);\n             }\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n     public Class<?>[] getViews()\n     {\n         if (_annotationIntrospector != null) {\n-            AnnotatedMember m = _forSerialization ? getAccessor() : getMutator();\n-            return _annotationIntrospector.findViews(m);\n+            AnnotatedMember m;\n+            if (_forSerialization) {\n+                m = getAccessor();\n+            } else {\n+                m = getMutator();\n+                // one kink: may use \"getter-as-setter\"...\n+                if (m == null) {\n+                    m = getGetter();\n+                }\n+            }\n+            if (m != null) {\n+                return _annotationIntrospector.findViews(m);\n+            }\n         }\n         return null;\n     }", "timestamp": 1327645578, "metainfo": ""}