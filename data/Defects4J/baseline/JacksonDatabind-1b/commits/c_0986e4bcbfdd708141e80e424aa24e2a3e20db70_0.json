{"sha": "0986e4bcbfdd708141e80e424aa24e2a3e20db70", "log": "Merge pull request #2 from jroper/handler-module-config  Added deserialization problem handler config registration from module", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/Module.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/Module.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;\n+import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;\n import com.fasterxml.jackson.databind.deser.Deserializers;\n import com.fasterxml.jackson.databind.deser.KeyDeserializers;\n import com.fasterxml.jackson.databind.deser.ValueInstantiators;\n          *   be \"added\" to target's annotations, overriding as necessary\n          */\n         public void setMixInAnnotations(Class<?> target, Class<?> mixinSource);\n+\n+        /**\n+         * Add a deserialization problem handler\n+         *\n+         * @param handler The deserialization problem handler\n+         */\n+        public void addDeserializationProblemHandler(DeserializationProblemHandler handler);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n             public void setMixInAnnotations(Class<?> target, Class<?> mixinSource) {\n                 mapper.addMixInAnnotations(target, mixinSource);\n             }\n+            \n+            @Override\n+            public void addDeserializationProblemHandler(DeserializationProblemHandler handler) {\n+                mapper.addHandler(handler);\n+            }\n         });\n         return this;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java\n import com.fasterxml.jackson.databind.util.Provider;\n \n /**\n- * Helper class used for isolating details of handling optional+external types (Joda datetime,\n- * javax.xml classes) from standard factories that offer them.\n+ * Helper class used for isolating details of handling optional+external types\n+ * (javax.xml classes) from standard factories that offer them.\n  * \n  * @author tatu\n  */\n public class OptionalHandlerFactory\n {\n-    /* 1.6.1+ To make 2 main \"optional\" handler groups (javax.xml.stream, Joda date/time)\n+    /* 1.6.1+ To make 2 main \"optional\" handler groups (javax.xml.stream)\n      * more dynamic, we better only figure out handlers completely dynamically, if and\n      * when they are needed. To do this we need to assume package prefixes.\n      */\n \n-    private final static String PACKAGE_PREFIX_JODA_DATETIME = \"org.joda.time.\";\n     private final static String PACKAGE_PREFIX_JAVAX_XML = \"javax.xml.\";\n \n-    private final static String SERIALIZERS_FOR_JODA_DATETIME = \"com.fasterxml.jackson.databind.ext.JodaSerializers\";\n     private final static String SERIALIZERS_FOR_JAVAX_XML = \"com.fasterxml.jackson.databind.ext.CoreXMLSerializers\";\n-    private final static String DESERIALIZERS_FOR_JODA_DATETIME = \"com.fasterxml.jackson.databind.ext.JodaDeserializers\";\n     private final static String DESERIALIZERS_FOR_JAVAX_XML = \"com.fasterxml.jackson.databind.ext.CoreXMLDeserializers\";\n \n     // Plus we also have a single serializer for DOM Node:\n         String className = rawType.getName();\n         String factoryName;\n         \n-        if (className.startsWith(PACKAGE_PREFIX_JODA_DATETIME)) {\n-            factoryName = SERIALIZERS_FOR_JODA_DATETIME;\n-        } else if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML)\n+        if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML)\n                 || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n             factoryName = SERIALIZERS_FOR_JAVAX_XML;\n         } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n         String className = rawType.getName();\n         String factoryName;\n         \n-        if (className.startsWith(PACKAGE_PREFIX_JODA_DATETIME)) {\n-            factoryName = DESERIALIZERS_FOR_JODA_DATETIME;\n-        } else if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML)\n+        if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML)\n                 || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n             factoryName = DESERIALIZERS_FOR_JAVAX_XML;\n         } else if (doesImplement(rawType, CLASS_NAME_DOM_DOCUMENT)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java\n     }\n \n     /**\n+     * Convenience constructor that will use specified Version,\n+     * including name from {@link Version#getArtifactId()}\n+     */\n+    public SimpleModule(Version version) {\n+        _name = version.getArtifactId();\n+        _version = version;\n+    }\n+    \n+    /**\n      * Constructor to use for actual reusable modules.\n      * ObjectMapper may use name as identifier to notice attempts\n      * for multiple registrations of the same module (although it\n         _name = name;\n         _version = version;\n     }\n-\n+    \n     /*\n     /**********************************************************\n     /* Simple setters to allow overriding\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestAnnotationJsonSerialize2.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestAnnotationJsonSerialize2.java\n         @JsonSerialize(using=NullSerializer.class)\n         public String value = \"abc\";\n     }\n+\n+    // [JACKSON-799] stuff:\n+    \n+    public interface Fooable {\n+        public int getFoo();\n+    }\n+\n+    // force use of interface\n+    @JsonSerialize(as=Fooable.class)\n+    public static class FooImpl implements Fooable {\n+        public int getFoo() { return 42; }\n+        public int getBar() { return 15; }\n+    }\n+\n+    public class Fooables {\n+        public FooImpl[] getFoos() {\n+            return new FooImpl[] { new FooImpl() };\n+        }\n+    }\n     \n     /*\n     /**********************************************************\n         String json = MAPPER.writeValueAsString(new NullBean());\n         assertEquals(\"{\\\"value\\\":null}\", json);\n     }\n+\n+    // [JACKSON-799]\n+    public void testSerializeAsInClass() throws IOException\n+    {\n+        assertEquals(\"{\\\"foo\\\":42}\", MAPPER.writeValueAsString(new FooImpl()));\n+    }\n+\n+    public void testSerializeAsForArrayProp() throws IOException\n+    {\n+        assertEquals(\"[{\\\"foo\\\":42}]\", MAPPER.writeValueAsString(new Fooables()));\n+    }\n }", "timestamp": 1330803932, "metainfo": ""}