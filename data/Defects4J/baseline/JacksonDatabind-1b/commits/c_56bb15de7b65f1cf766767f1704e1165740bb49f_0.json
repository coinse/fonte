{"sha": "56bb15de7b65f1cf766767f1704e1165740bb49f", "log": "Work on making core pieces (up to and including ObjectMapper) java.io.Serializable, for Android dev", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n     public static class Pair\n         extends AnnotationIntrospectorPair\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         @Deprecated\n         public Pair(AnnotationIntrospector p, AnnotationIntrospector s) {\n             super(p, s);\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n  */\n public final class DeserializationConfig\n     extends MapperConfigBase<DeserializationFeature, DeserializationConfig>\n+    implements java.io.Serializable // since 2.1\n {\n+    // for 2.1.0\n+    private static final long serialVersionUID = -4227480407273773599L;\n+\n     /**\n      * Set of features enabled; actual type (kind of features)\n      * depends on sub-classes.\n         _problemHandlers = src._problemHandlers;\n         _nodeFactory = src._nodeFactory;\n     }\n+\n+    /**\n+     * Constructor only needed for JDK (de)serialization\n+     */\n+    DeserializationConfig() {\n+        super();\n+        _deserFeatures = 0;\n+        _problemHandlers = null;\n+        _nodeFactory = null;\n+    }\n+    \n+    // for unit tests only:\n+    protected BaseSettings getBaseSettings() { return _base; }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/JavaType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JavaType.java\n  */\n public abstract class JavaType\n     extends ResolvedType\n+    implements java.io.Serializable\n {\n+    // for 2.1.0:\n+    private static final long serialVersionUID = -5321897246493723158L;\n+\n     /**\n      * This is the nominal type-erased Class that would be close to the\n      * type represented (but not exactly type, due to type erasure: type\n--- a/src/main/java/com/fasterxml/jackson/databind/MappingJsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MappingJsonFactory.java\n public class MappingJsonFactory\n     extends JsonFactory\n {\n+    // generated for Jackson 2.1.0\n+    private static final long serialVersionUID = -6744103724013275513L;\n+\n     public MappingJsonFactory()\n     {\n         this(null);\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n  */\n public final class SerializationConfig\n     extends MapperConfigBase<SerializationFeature, SerializationConfig>\n+    implements java.io.Serializable // since 2.1\n {\n+    // for 2.1.0:\n+    private static final long serialVersionUID = 8849092838541724233L;\n+\n     /**\n      * Set of features enabled; actual type (kind of features)\n      * depends on sub-classes.\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java\n  * be freely shared and used without synchronization.\n  */\n public final class BaseSettings\n+    implements java.io.Serializable // since 2.1\n {\n+    // for 2.1.0:\n+    private static final long serialVersionUID = 4939673998947122190L;\n+\n     /*\n     /**********************************************************\n     /* Configuration settings; introspection, related\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java\n         _base = src._base;\n         _mapperFeatures = src._mapperFeatures;\n     }\n+\n+    /**\n+     * Constructor only used for JDK deserialization\n+     * \n+     * @since 2.1\n+     */\n+    MapperConfig() {\n+        _base = null;\n+        _mapperFeatures = 0;\n+    }\n     \n     /**\n      * Method that calculates bit set (flags) of all features that\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n         _rootName = src._rootName;\n         _view = src._view;\n     }\n+\n+    /**\n+     * Constructor only used for JDK deserialization\n+     * \n+     * @since 2.1\n+     */\n+    protected MapperConfigBase() {\n+        super();\n+        _mixInAnnotations = null;\n+        _subtypeResolver = null;\n+        _rootName = null;\n+        _view = null;\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n  * \n  * @since 2.1\n  */\n-public class AnnotationIntrospectorPair extends AnnotationIntrospector\n+public class AnnotationIntrospectorPair\n+    extends AnnotationIntrospector\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     protected final AnnotationIntrospector _primary, _secondary;\n \n     public AnnotationIntrospectorPair(AnnotationIntrospector p, AnnotationIntrospector s)\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n \n public class BasicClassIntrospector\n     extends ClassIntrospector\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /* We keep a small set of pre-constructed descriptions to use for\n      * common non-structured values, such as Numbers and Strings.\n      * This is strictly performance optimization to reduce what is\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n  */\n public class JacksonAnnotationIntrospector\n     extends AnnotationIntrospector\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     public JacksonAnnotationIntrospector() { }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/NopAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/NopAnnotationIntrospector.java\n  */\n public abstract class NopAnnotationIntrospector\n     extends AnnotationIntrospector\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /**\n      * Static immutable and shareable instance that can be used as\n      * \"null\" introspector: one that never finds any annotation\n      * information.\n      */\n     public final static NopAnnotationIntrospector instance = new NopAnnotationIntrospector() {\n+        private static final long serialVersionUID = 1L;\n+\n         @Override\n         public Version version() {\n             return DatabindVersion.instance.version();\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java\n         fieldVisibility = Visibility.PUBLIC_ONLY\n     )\n     public static class Std\n-        implements VisibilityChecker<Std>\n+        implements VisibilityChecker<Std>,\n+            java.io.Serializable\n     {\n+        private static final long serialVersionUID = -7073939237187922755L;\n+\n         /**\n          * This is the canonical base instance, configured with default\n          * visibility values\n--- a/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java\n  * to behavior of node types, mostly) is needed.\n  */\n public class JsonNodeFactory\n+    implements java.io.Serializable // since 2.1\n {\n+    // for 2.1:\n+    private static final long serialVersionUID = 2323165117839546871L;\n+\n     private final boolean _cfgBigDecimalExact;\n \n     private static final JsonNodeFactory decimalsNormalized\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n  * Simple {@link BeanPropertyFilter} implementation that only uses property name\n  * to determine whether to serialize property as is, or to filter it out.\n  */\n-public abstract class SimpleBeanPropertyFilter implements BeanPropertyFilter\n+public abstract class SimpleBeanPropertyFilter\n+    implements BeanPropertyFilter,\n+        java.io.Serializable // since 2.1\n {\n-\t/*\n+    private static final long serialVersionUID = 612196544186875755L;\n+\n+    /*\n     /**********************************************************\n     /* Life-cycle\n     /**********************************************************\n-\t */\n+     */\n \n-\tprotected SimpleBeanPropertyFilter() { }\n+    protected SimpleBeanPropertyFilter() { }\n \n-\t/**\n-\t * Factory method to construct filter that filters out all properties <b>except</b>\n-\t * ones includes in set\n-\t */\n-\tpublic static SimpleBeanPropertyFilter filterOutAllExcept(Set<String> properties) {\n-\t\treturn new FilterExceptFilter(properties);\n-\t}\n+    /**\n+     * Factory method to construct filter that filters out all properties <b>except</b>\n+     * ones includes in set\n+     */\n+    public static SimpleBeanPropertyFilter filterOutAllExcept(Set<String> properties) {\n+        return new FilterExceptFilter(properties);\n+    }\n \n-\tpublic static SimpleBeanPropertyFilter filterOutAllExcept(String... propertyArray) {\n-\t\tHashSet<String> properties = new HashSet<String>(propertyArray.length);\n-\t\tCollections.addAll(properties, propertyArray);\n-\t\treturn new FilterExceptFilter(properties);\n-\t}\n+    public static SimpleBeanPropertyFilter filterOutAllExcept(String... propertyArray) {\n+        HashSet<String> properties = new HashSet<String>(propertyArray.length);\n+        Collections.addAll(properties, propertyArray);\n+        return new FilterExceptFilter(properties);\n+    }\n \n-\tpublic static SimpleBeanPropertyFilter serializeAllExcept(Set<String> properties) {\n-\t\treturn new SerializeExceptFilter(properties);\n-\t}\n+    public static SimpleBeanPropertyFilter serializeAllExcept(Set<String> properties) {\n+        return new SerializeExceptFilter(properties);\n+    }\n \n-\tpublic static SimpleBeanPropertyFilter serializeAllExcept(String... propertyArray) {\n-\t\tHashSet<String> properties = new HashSet<String>(propertyArray.length);\n-\t\tCollections.addAll(properties, propertyArray);\n-\t\treturn new SerializeExceptFilter(properties);\n-\t}\n+    public static SimpleBeanPropertyFilter serializeAllExcept(String... propertyArray) {\n+        HashSet<String> properties = new HashSet<String>(propertyArray.length);\n+        Collections.addAll(properties, propertyArray);\n+        return new SerializeExceptFilter(properties);\n+    }\n \n-\t/*\n+    /*\n     /**********************************************************\n     /* Sub-classes\n     /**********************************************************\n-\t */\n+     */\n \n-\t/**\n-\t * Filter implementation which defaults to filtering out unknown\n-\t * properties and only serializes ones explicitly listed.\n-\t */\n-\tpublic static class FilterExceptFilter\n-\textends SimpleBeanPropertyFilter\n-\t{\n-\t\t/**\n-\t\t * Set of property names to serialize.\n-\t\t */\n-\t\tprotected final Set<String> _propertiesToInclude;\n+    /**\n+     * Filter implementation which defaults to filtering out unknown\n+     * properties and only serializes ones explicitly listed.\n+     */\n+    public static class FilterExceptFilter\n+        extends SimpleBeanPropertyFilter\n+    {\n+        // generated for 2.1.0\n+        private static final long serialVersionUID = -5409460444028386035L;\n \n-\t\tpublic FilterExceptFilter(Set<String> properties) {\n-\t\t\t_propertiesToInclude = properties;\n-\t\t}\n+        /**\n+         * Set of property names to serialize.\n+         */\n+        protected final Set<String> _propertiesToInclude;\n+\n+        public FilterExceptFilter(Set<String> properties) {\n+            _propertiesToInclude = properties;\n+        }\n \n \t\tpublic void serializeAsField(Object bean, JsonGenerator jgen,\n \t\t\t\tSerializerProvider provider, BeanPropertyWriter writer) throws Exception\n \t\t\t\tBeanSerializerBase.depositSchemaProperty(writer, objectVisitor);\n \t\t\t}\n \t\t}\n-\t}\n+    }\n \n-\t/**\n-\t * Filter implementation which defaults to serializing all\n-\t * properties, except for ones explicitly listed to be filtered out.\n-\t */\n-\tpublic static class SerializeExceptFilter\n-\textends SimpleBeanPropertyFilter\n-\t{\n-\t\t/**\n-\t\t * Set of property names to filter out.\n-\t\t */\n-\t\tprotected final Set<String> _propertiesToExclude;\n+    /**\n+     * Filter implementation which defaults to serializing all\n+     * properties, except for ones explicitly listed to be filtered out.\n+     */\n+    public static class SerializeExceptFilter\n+        extends SimpleBeanPropertyFilter\n+    {\n+        // generated for 2.1.0\n+        private static final long serialVersionUID = 6654996217449646999L;\n+\n+        /**\n+         * Set of property names to filter out.\n+         */\n+        protected final Set<String> _propertiesToExclude;\n \n \t\tpublic SerializeExceptFilter(Set<String> properties) {\n \t\t\t_propertiesToExclude = properties;\n \t\t\t\tBeanSerializerBase.depositSchemaProperty(writer, objectVisitor);\n \t\t\t}\n \t\t}\n-\t}\n-\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleFilterProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleFilterProvider.java\n  * Simple {@link FilterProvider} implementation that just stores\n  * direct id-to-filter mapping.\n  */\n-public class SimpleFilterProvider extends FilterProvider\n+public class SimpleFilterProvider\n+    extends FilterProvider\n+    implements java.io.Serializable // since 2.1\n {\n+    // generated for 2.1.0\n+    private static final long serialVersionUID = -2825494703774121220L;\n+\n     /**\n      * Mappings from ids to filters.\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/type/ArrayType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/ArrayType.java\n public final class ArrayType\n     extends TypeBase\n {\n+    private static final long serialVersionUID = -6866628807166594553L;\n+\n     /**\n      * Type of elements in the array.\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType.java\n  */\n public class CollectionLikeType extends TypeBase\n {\n+    private static final long serialVersionUID = -2079769185110719683L;\n+\n     /**\n      * Type of elements in collection\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/type/CollectionType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/CollectionType.java\n public final class CollectionType\n     extends CollectionLikeType\n {\n+    private static final long serialVersionUID = 7218006718717444365L;\n+\n     /*\n     /**********************************************************\n     /* Life-cycle\n--- a/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java\n  */\n public class MapLikeType extends TypeBase\n {\n+    private static final long serialVersionUID = -4720638149668688793L;\n+\n     /**\n      * Type of keys of Map.\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/type/MapType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/MapType.java\n  */\n public final class MapType extends MapLikeType\n {\n+    private static final long serialVersionUID = 2276544408153191774L;\n+\n     /*\n     /**********************************************************\n     /* Life-cycle\n--- a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java\n public final class SimpleType\n     extends TypeBase\n {\n+    private static final long serialVersionUID = -800374828948534376L;\n+\n     /**\n      * Generic type arguments for this type.\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeBase.java\n     extends JavaType\n     implements JsonSerializable\n {\n+    private static final long serialVersionUID = -3581199092426900829L;\n+\n     /**\n      * Lazily initialized external representation of the type\n      */\n-    volatile String _canonicalName;\n+    volatile transient String _canonicalName;\n \n     /**\n      * Main constructor to use by extending classes.\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n  */\n @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n public final class TypeFactory\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     private final static JavaType[] NO_TYPES = new JavaType[0];\n \n     /**\n      * actual generic types), we will use small cache to avoid repetitive\n      * resolution of core types\n      */\n-    protected final LRUMap<ClassKey, JavaType> _typeCache = new LRUMap<ClassKey, JavaType>(16, 100);\n+    protected final transient LRUMap<ClassKey, JavaType> _typeCache = new LRUMap<ClassKey, JavaType>(16, 100);\n     \n     /*\n      * Looks like construction of {@link JavaType} instances can be\n      * Lazily constructed copy of type hierarchy from {@link java.util.HashMap}\n      * to its supertypes.\n      */\n-    protected HierarchicType _cachedHashMapType;\n+    protected transient HierarchicType _cachedHashMapType;\n \n     /**\n      * Lazily constructed copy of type hierarchy from {@link java.util.ArrayList}\n      * to its supertypes.\n      */\n-    protected HierarchicType _cachedArrayListType;\n+    protected transient HierarchicType _cachedArrayListType;\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeParser.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeParser.java\n  * @author tatu\n  */\n public class TypeParser\n+    implements java.io.Serializable\n {\n-    final TypeFactory _factory;\n+    private static final long serialVersionUID = 1L;\n+\n+    protected final TypeFactory _factory;\n         \n     public TypeParser(TypeFactory f) {\n         _factory = f;\n--- a/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n     \n     static class FactoryWithSchema extends JsonFactory\n     {\n+        private static final long serialVersionUID = 1L;\n         @Override\n         protected JsonParser _createJsonParser(Reader r, IOContext ctxt)\n             throws IOException, JsonParseException\n--- a/src/test/java/com/fasterxml/jackson/databind/TestGeneratorUsingMapper.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestGeneratorUsingMapper.java\n \n         final ObjectMapper mapper = new ObjectMapper();\n         final CharacterEscapes defaultCharacterEscapes = new CharacterEscapes() {\n+            private static final long serialVersionUID = 1L;\n+\n             @Override\n             public int[] getEscapeCodesForAscii() {\n                 return standardAsciiEscapesForJSON();\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java\n+package com.fasterxml.jackson.databind;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+/**\n+ * Tests to verify that most core Jackson components can be serialized\n+ * using default JDK serialization: this feature is useful for some\n+ * platforms, such as Android, where memory management is handled\n+ * much more aggressively.\n+ */\n+public class TestJDKSerialization extends BaseMapTest\n+{\n+    /*\n+    /**********************************************************\n+    /* Individual objects\n+    /**********************************************************\n+     */\n+\n+    public void testConfigs() throws IOException\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        byte[] base = jdkSerialize(mapper.getDeserializationConfig().getBaseSettings());\n+        assertNotNull(jdkDeserialize(base));\n+\n+        // first things first: underlying BaseSettings\n+        \n+        DeserializationConfig origDC = mapper.getDeserializationConfig();\n+        SerializationConfig origSC = mapper.getSerializationConfig();\n+        byte[] dcBytes = jdkSerialize(origDC);\n+        byte[] scBytes = jdkSerialize(origSC);\n+\n+        DeserializationConfig dc = jdkDeserialize(dcBytes);\n+        assertNotNull(dc);\n+        assertEquals(dc._deserFeatures, origDC._deserFeatures);\n+        SerializationConfig sc = jdkDeserialize(scBytes);\n+        assertNotNull(sc);\n+        assertEquals(sc._serFeatures, origSC._serFeatures);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+    \n+    protected byte[] jdkSerialize(Object o) throws IOException\n+    {\n+        ByteArrayOutputStream bytes = new ByteArrayOutputStream(1000);\n+        ObjectOutputStream obOut = new ObjectOutputStream(bytes);\n+        obOut.writeObject(o);\n+        obOut.close();\n+        return bytes.toByteArray();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T> T jdkDeserialize(byte[] raw) throws IOException\n+    {\n+        ObjectInputStream objIn = new ObjectInputStream(new ByteArrayInputStream(raw));\n+        try {\n+            return (T) objIn.readObject();\n+        } catch (ClassNotFoundException e) {\n+            fail(\"Missing class: \"+e.getMessage());\n+            return null;\n+        } finally {\n+            objIn.close();\n+        }\n+    }\n+\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/TestParserUsingMapper.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestParserUsingMapper.java\n      */\n     static class MyEscapes extends CharacterEscapes\n     {\n-        \n+        private static final long serialVersionUID = 1L;\n+\n         private final int[] _asciiEscapes;\n \n         public MyEscapes() {\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestJacksonAnnotationIntrospector.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestJacksonAnnotationIntrospector.java\n     // Test to ensure we can override enum settings\n     static class LcEnumIntrospector extends JacksonAnnotationIntrospector\n     {\n+        private static final long serialVersionUID = 1L;\n         @Override\n         public String findEnumValue(Enum<?> value)\n         {\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestNodeFactoryConfig.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestNodeFactoryConfig.java\n     static class MyNodeFactory\n         extends JsonNodeFactory\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         @Override\n         public ObjectNode objectNode() { return new MyObjectNode(this); }\n         \n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArray.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArray.java\n \n     static class ForceArraysIntrospector extends JacksonAnnotationIntrospector\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         @Override\n         public JsonFormat.Value findFormat(Annotated a) {\n             return new JsonFormat.Value().withShape(JsonFormat.Shape.ARRAY);\n--- a/src/test/java/perf/ManualReadPerfWithMedia.java\n+++ b/src/test/java/perf/ManualReadPerfWithMedia.java\n \n     final static class NoFormatIntrospector extends JacksonAnnotationIntrospector\n     {\n+        private static final long serialVersionUID = 1L;\n         @Override\n         public JsonFormat.Value findFormat(Annotated a) { return null; }\n     }", "timestamp": 1349477887, "metainfo": ""}