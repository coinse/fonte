{"sha": "034319b89d307b778f5ae3787ea4425b20a3064b", "log": "Implement [JACKSON-789], support for java.nio.charset.Charset", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n import java.net.InetAddress;\n import java.net.URI;\n import java.net.URL;\n+import java.nio.charset.Charset;\n import java.util.*;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n             new PatternDeserializer(),\n             new LocaleDeserializer(),\n             new InetAddressDeserializer(),\n+            new CharsetDeserializer(),\n \n             // other types:\n \n         }\n     }\n \n+    // [JACKSON-789]\n+    protected static class CharsetDeserializer\n+        extends FromStringDeserializer<Charset>\n+    {\n+        public CharsetDeserializer() { super(Charset.class); }\n+    \n+        @Override\n+        protected Charset _deserialize(String value, DeserializationContext ctxt)\n+            throws IOException\n+        {\n+            return Charset.forName(value);\n+        }\n+    }\n+    \n     /*\n     /**********************************************************\n     /* AtomicXxx types\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n         if (TimeZone.class.isAssignableFrom(raw)) {\n             return TimeZoneSerializer.instance;\n         }\n+        // and yet one more [JACKSON-789]\n+        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n+            return ToStringSerializer.instance;\n+        }\n         \n         // Then check for optional/external serializers [JACKSON-386]\n         JsonSerializer<?> ser = optionalHandlers.findSerializer(prov.getConfig(), type);\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n \n import java.io.*;\n import java.net.*;\n+import java.nio.charset.Charset;\n import java.util.Currency;\n import java.util.List;\n import java.util.Locale;\n         assertTrue(b.primitive);\n         assertEquals(Boolean.TRUE, b.ctor);\n     }\n+\n+    // [JACKSON-789]\n+    public void testCharset() throws Exception\n+    {\n+        Charset UTF8 = Charset.forName(\"UTF-8\");\n+        assertSame(UTF8, mapper.readValue(quote(\"UTF-8\"), Charset.class));\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java\n \n import java.io.*;\n import java.net.InetAddress;\n+import java.nio.charset.Charset;\n import java.util.*;\n import java.util.regex.Pattern;\n \n         assertEquals(quote(\"void\"), MAPPER.writeValueAsString(Void.TYPE));\n     }\n \n+    // [JACKSON-789]\n+    public void testCharset() throws IOException\n+    {\n+        assertEquals(quote(\"UTF-8\"), MAPPER.writeValueAsString(Charset.forName(\"UTF-8\")));\n+    }\n }", "timestamp": 1329777953, "metainfo": ""}