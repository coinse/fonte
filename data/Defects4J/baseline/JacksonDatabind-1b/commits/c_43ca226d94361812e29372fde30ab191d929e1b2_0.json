{"sha": "43ca226d94361812e29372fde30ab191d929e1b2", "log": "Try avoid NPEs with type visitors", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType type)\n         throws JsonMappingException\n     {\n-        visitor.expectAnyFormat(type);\n+        if (visitor != null) visitor.expectAnyFormat(type);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n             throws JsonMappingException\n     {\n-        visitor.expectAnyFormat(typeHint);\n+        if (visitor != null) visitor.expectAnyFormat(typeHint);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n     public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)\n         throws JsonMappingException\n     {\n-        if (isRequired()) {\n-            objectVisitor.property(this); \n-        } else {\n-            objectVisitor.optionalProperty(this);\n+        if (objectVisitor != null) {\n+            if (isRequired()) {\n+                objectVisitor.property(this); \n+            } else {\n+                objectVisitor.optionalProperty(this);\n+            }\n         }\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n             throws JsonMappingException\n     {\n-        visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.STRING);\n+        if (visitor != null) {\n+            JsonArrayFormatVisitor v2 = visitor.expectArrayFormat(typeHint);\n+            if (v2 != null) {\n+                v2.itemsFormat(JsonFormatTypes.STRING);\n+            }\n+        }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         throws JsonMappingException\n     {\n-        JsonArrayFormatVisitor arrayVisitor = visitor.expectArrayFormat(typeHint);\n-        if (arrayVisitor == null) { // not sure if this is legal but...\n-            return; \n-        }\n-        TypeFactory tf = visitor.getProvider().getTypeFactory();\n-        JavaType contentType = tf.moreSpecificType(_elementType, typeHint.getContentType());\n-        if (contentType == null) {\n-            throw new JsonMappingException(\"Could not resolve type\");\n-        }\n-        JsonSerializer<?> valueSer = _elementSerializer;\n-        if (valueSer == null) {\n-            valueSer = visitor.getProvider().findValueSerializer(contentType, _property);\n-        }\n-        arrayVisitor.itemsFormat(valueSer, contentType);\n+        JsonArrayFormatVisitor arrayVisitor = (visitor == null) ? null : visitor.expectArrayFormat(typeHint);\n+        if (arrayVisitor != null) {\n+            TypeFactory tf = visitor.getProvider().getTypeFactory();\n+            JavaType contentType = tf.moreSpecificType(_elementType, typeHint.getContentType());\n+            if (contentType == null) {\n+                throw new JsonMappingException(\"Could not resolve type\");\n+            }\n+            JsonSerializer<?> valueSer = _elementSerializer;\n+            if (valueSer == null) {\n+                valueSer = visitor.getProvider().findValueSerializer(contentType, _property);\n+            }\n+            arrayVisitor.itemsFormat(valueSer, contentType);\n+        }\n     }\n \n     protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n         throws JsonMappingException\n     {\n         //deposit your output format \n-        JsonObjectFormatVisitor objectVisitor = visitor.expectObjectFormat(typeHint);\n- \n-        if (_propertyFilterId != null) {\n-            BeanPropertyFilter filter = findFilter(visitor.getProvider());\n-            for (int i = 0; i < _props.length; i++) {\n-                filter.depositSchemaProperty(_props[i], objectVisitor, visitor.getProvider());\n-            }\n-        } else {\n-            for (int i = 0; i < _props.length; i++) {\n-                _props[i].depositSchemaProperty(objectVisitor);\n+        JsonObjectFormatVisitor objectVisitor = (visitor == null) ? null : visitor.expectObjectFormat(typeHint);\n+        if (objectVisitor != null) {\n+            if (_propertyFilterId != null) {\n+                BeanPropertyFilter filter = findFilter(visitor.getProvider());\n+                for (int i = 0; i < _props.length; i++) {\n+                    filter.depositSchemaProperty(_props[i], objectVisitor, visitor.getProvider());\n+                }\n+            } else {\n+                for (int i = 0; i < _props.length; i++) {\n+                    _props[i].depositSchemaProperty(objectVisitor);\n+                }\n             }\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         throws JsonMappingException\n     {\n-        visitor.expectBooleanFormat(typeHint);\n+        if (visitor != null) {\n+            visitor.expectBooleanFormat(typeHint);\n+        }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n import java.io.IOException;\n import java.lang.reflect.Type;\n import java.util.HashSet;\n+import java.util.LinkedHashSet;\n import java.util.Set;\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n             throws JsonMappingException\n     {\n         // [JACKSON-684]: serialize as index?\n-    \tif (visitor.getProvider().isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX)) {\n-    \t    visitor.expectIntegerFormat(typeHint);\n-    \t} else {\n+        if (visitor.getProvider().isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX)) {\n+            visitor.expectIntegerFormat(typeHint);\n+        } else {\n     \t\tJsonStringFormatVisitor stringVisitor = visitor.expectStringFormat(typeHint);\n-    \t\tif (typeHint != null) {\n+    \t\tif (typeHint != null && stringVisitor != null) {\n     \t\t\tif (typeHint.isEnumType()) {\n-    \t\t\t\tSet<String> enums = new HashSet<String>();\n+    \t\t\t\tSet<String> enums = new LinkedHashSet<String>();\n     \t\t\t\tfor (SerializedString value : _values.values()) {\n     \t\t\t\t\tenums.add(value.getValue());\n     \t\t\t\t}\n     \t\t\t\tstringVisitor.enumTypes(enums);\n     \t\t\t}\n     \t\t}\n-    \t}\n+        }\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.BOOLEAN);\n+            if (visitor != null) {\n+                JsonArrayFormatVisitor v2 = visitor.expectArrayFormat(typeHint);\n+                if (v2 != null) {\n+                    v2.itemsFormat(JsonFormatTypes.BOOLEAN);\n+                }\n+            }\n         }\n     }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.STRING);\n+            if (visitor != null) {\n+                JsonArrayFormatVisitor v2 = visitor.expectArrayFormat(typeHint);\n+                if (v2 != null) {\n+                    v2.itemsFormat(JsonFormatTypes.STRING);\n+                }\n+            }\n         }\n     }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.INTEGER);\n+            if (visitor != null) {\n+                JsonArrayFormatVisitor v2 = visitor.expectArrayFormat(typeHint);\n+                if (v2 != null) {\n+                    v2.itemsFormat(JsonFormatTypes.INTEGER);\n+                }\n+            }\n         }\n     }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.STRING);\n+            if (visitor != null) {\n+                JsonArrayFormatVisitor v2 = visitor.expectArrayFormat(typeHint);\n+                if (v2 != null) {\n+                    v2.itemsFormat(JsonFormatTypes.STRING);\n+                }\n+            }\n         }\n     }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.INTEGER);\n+            if (visitor != null) {\n+                JsonArrayFormatVisitor v2 = visitor.expectArrayFormat(typeHint);\n+                if (v2 != null) {\n+                    v2.itemsFormat(JsonFormatTypes.INTEGER);\n+                }\n+            }\n         }\n     }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.NUMBER);\n+            if (visitor != null) {\n+                JsonArrayFormatVisitor v2 = visitor.expectArrayFormat(typeHint);\n+                if (v2 != null) {\n+                    v2.itemsFormat(JsonFormatTypes.NUMBER);\n+                }\n+            }\n         }\n     }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.NUMBER);\n+            if (visitor != null) {\n+                JsonArrayFormatVisitor v2 = visitor.expectArrayFormat(typeHint);\n+                if (v2 != null) {\n+                    v2.itemsFormat(JsonFormatTypes.NUMBER);\n+                }\n+            }\n         }\n     }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.NUMBER);\n+            if (visitor != null) {\n+                JsonArrayFormatVisitor v2 = visitor.expectArrayFormat(typeHint);\n+                if (v2 != null) {\n+                    v2.itemsFormat(JsonFormatTypes.NUMBER);\n+                }\n+            }\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectBooleanFormat(typeHint);\n+            if (visitor != null) {\n+                visitor.expectBooleanFormat(typeHint);\n+            }\n         }\n     }\n     \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectIntegerFormat(typeHint);\n+            if (visitor != null) {\n+                visitor.expectIntegerFormat(typeHint);\n+            }\n         }\n     }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectIntegerFormat(typeHint);\n+            if (visitor != null) {\n+                visitor.expectIntegerFormat(typeHint);\n+            }\n         }\n     }\n     \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectAnyFormat(typeHint);\n+            if (visitor != null) {\n+                visitor.expectAnyFormat(typeHint);\n+            }\n         }\n     }\n     \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectStringFormat(typeHint);\n+            if (visitor != null) {\n+                visitor.expectStringFormat(typeHint);\n+            }\n         }\n     }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectStringFormat(typeHint);\n+            if (visitor != null) {\n+                visitor.expectStringFormat(typeHint);\n+            }\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n             throws JsonMappingException\n     {\n-        visitor.expectStringFormat(typeHint);\n+        if (visitor != null) {\n+            visitor.expectStringFormat(typeHint);\n+        }\n     }\n-    \n }", "timestamp": 1353556720, "metainfo": ""}