{"sha": "8ba07ccfb014690281668eb46e5be6bd1883e61a", "log": "Exposing JsonMappingException through schema visitor interfaces; should simplify visitor implementation", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n         return bean;\n     }\n \n+    @SuppressWarnings(\"resource\")\n     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser jp,\n     \t\tDeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java\n             jp.skipChildren();\n             canDeserialize = (bean != null) && (_tokens[index] != null);\n         } else {\n+            @SuppressWarnings(\"resource\")\n             TokenBuffer tokens = new TokenBuffer(jp.getCodec());\n             tokens.copyCurrentStructure(jp);\n             _tokens[index] = tokens;\n             int index, String typeId)\n         throws IOException, JsonProcessingException\n     {\n+        @SuppressWarnings(\"resource\")\n         TokenBuffer merged = new TokenBuffer(jp.getCodec());\n         merged.writeStartArray();\n         merged.writeString(typeId);\n         /* Ok: time to mix type id, value; and we will actually use \"wrapper-array\"\n          * style to ensure we can handle all kinds of JSON constructs.\n          */\n+        @SuppressWarnings(\"resource\")\n         TokenBuffer merged = new TokenBuffer(jp.getCodec());\n         merged.writeStartArray();\n         merged.writeString(typeId);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ClassDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ClassDeserializer.java\n public class ClassDeserializer\n     extends StdScalarDeserializer<Class<?>>\n {\n+    private static final long serialVersionUID = 1L;\n+\n     public ClassDeserializer() { super(Class.class); }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n     extends ContainerDeserializerBase<Collection<Object>>\n     implements ContextualDeserializer\n {\n+    private static final long serialVersionUID = -2003828398549708958L;\n+\n     // // Configuration\n \n     protected final JavaType _collectionType;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n  * Deserializer that can build instances of {@link JsonNode} from any\n  * JSON content, using appropriate {@link JsonNode} type.\n  */\n+@SuppressWarnings(\"serial\")\n public class JsonNodeDeserializer\n     extends BaseNodeDeserializer<JsonNode>\n {\n     final static class ObjectDeserializer\n         extends BaseNodeDeserializer<ObjectNode>\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         protected final static ObjectDeserializer _instance = new ObjectDeserializer();\n \n         protected ObjectDeserializer() {\n  * Base class for all actual {@link JsonNode} deserializer\n  * implementations\n  */\n+@SuppressWarnings(\"serial\")\n abstract class BaseNodeDeserializer<N extends JsonNode>\n     extends StdDeserializer<N>\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java\n     public final static class ByteDeserializer\n         extends PrimitiveOrWrapperDeserializer<Byte>\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         public ByteDeserializer(Class<Byte> cls, Byte nvl)\n         {\n             super(cls, nvl);\n     public final static class ShortDeserializer\n         extends PrimitiveOrWrapperDeserializer<Short>\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         public ShortDeserializer(Class<Short> cls, Short nvl)\n         {\n             super(cls, nvl);\n     public final static class CharacterDeserializer\n         extends PrimitiveOrWrapperDeserializer<Character>\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         public CharacterDeserializer(Class<Character> cls, Character nvl)\n         {\n             super(cls, nvl);\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) {\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+                throws JsonMappingException\n+        {\n             CalendarSerializer.instance.acceptJsonFormatVisitor(visitor, null);\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+            throws JsonMappingException\n     {\n         visitor.expectAnyFormat(typeHint);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonAnyFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonAnyFormatVisitor.java\n package com.fasterxml.jackson.databind.jsonFormatVisitors;\n \n public interface JsonAnyFormatVisitor {\n-\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.java\n package com.fasterxml.jackson.databind.jsonFormatVisitors;\n \n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n \n-public interface JsonArrayFormatVisitor extends JsonFormatVisitorWithSerializerProvider {\n+public interface JsonArrayFormatVisitor extends JsonFormatVisitorWithSerializerProvider\n+{\n+\tvoid itemsFormat(JavaType contentType) throws JsonMappingException;\n+\tvoid itemsFormat(JsonFormatTypes format) throws JsonMappingException;\n+}\n \n-\tvoid itemsFormat(JavaType contentType);\n-\n-\tvoid itemsFormat(JsonFormatTypes format);\n-\n-}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.java\n package com.fasterxml.jackson.databind.jsonFormatVisitors;\n \n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n \n public interface JsonFormatVisitorWrapper extends JsonFormatVisitorWithSerializerProvider\n {\n-    public JsonObjectFormatVisitor expectObjectFormat(JavaType convertedType);\n-    public JsonArrayFormatVisitor expectArrayFormat(JavaType convertedType);\n-    public JsonStringFormatVisitor expectStringFormat(JavaType convertedType);\n-    public JsonNumberFormatVisitor expectNumberFormat(JavaType convertedType);\n-    public JsonIntegerFormatVisitor expectIntegerFormat(JavaType convertedType);\n-    public JsonBooleanFormatVisitor expectBooleanFormat(JavaType convertedType);\n-    public JsonNullFormatVisitor expectNullFormat(JavaType convertedType);\n-    public JsonAnyFormatVisitor expectAnyFormat(JavaType convertedType);\n+    public JsonObjectFormatVisitor expectObjectFormat(JavaType convertedType) throws JsonMappingException;\n+    public JsonArrayFormatVisitor expectArrayFormat(JavaType convertedType) throws JsonMappingException;\n+    public JsonStringFormatVisitor expectStringFormat(JavaType convertedType) throws JsonMappingException;\n+    public JsonNumberFormatVisitor expectNumberFormat(JavaType convertedType) throws JsonMappingException;\n+    public JsonIntegerFormatVisitor expectIntegerFormat(JavaType convertedType) throws JsonMappingException;\n+    public JsonBooleanFormatVisitor expectBooleanFormat(JavaType convertedType) throws JsonMappingException;\n+    public JsonNullFormatVisitor expectNullFormat(JavaType convertedType) throws JsonMappingException;\n+    public JsonAnyFormatVisitor expectAnyFormat(JavaType convertedType) throws JsonMappingException;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonObjectFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonObjectFormatVisitor.java\n \n import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n \n-public interface JsonObjectFormatVisitor extends JsonFormatVisitorWithSerializerProvider {\n+public interface JsonObjectFormatVisitor extends JsonFormatVisitorWithSerializerProvider\n+{\n+    public void property(BeanProperty writer) throws JsonMappingException;\n+    public void property(String name, JsonFormatVisitable handler, JavaType propertyTypeHint) throws JsonMappingException;\n \n-\tpublic void property(BeanProperty writer);\n+    @Deprecated\n+    public void property(String name) throws JsonMappingException;\n \n-\tpublic void optionalProperty(BeanProperty writer);\n+    public void optionalProperty(BeanProperty writer) throws JsonMappingException;\n+    public void optionalProperty(String name, JsonFormatVisitable handler,\n+            JavaType propertyTypeHint)\n+        throws JsonMappingException;\n \n-\tpublic void property(String name, JsonFormatVisitable handler, JavaType propertyTypeHint);\n-\n-\tpublic void optionalProperty(String name, JsonFormatVisitable handler,\n-\t\t\tJavaType propertyTypeHint);\n-\n-\tpublic void property(String name);\n-\t\n-\tpublic void optionalProperty(String name);\n+    @Deprecated\n+    public void optionalProperty(String name) throws JsonMappingException;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java\n         // Minor complication: we may need to merge type id in?\n         if (_typeIdVisible && jp.getCurrentToken() == JsonToken.START_OBJECT) {\n             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n+            @SuppressWarnings(\"resource\")\n             TokenBuffer tb = new TokenBuffer(null);\n             tb.writeStartObject(); // recreate START_OBJECT\n             tb.writeFieldName(_typePropertyName);\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n         return _deserializeTypedUsingDefaultImpl(jp, ctxt, tb);\n     }\n \n+    @SuppressWarnings(\"resource\")\n     protected final Object _deserializeTypedForId(JsonParser jp, DeserializationContext ctxt,\n             TokenBuffer tb)\n         throws IOException, JsonProcessingException\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java\n         // Minor complication: we may need to merge type id in?\n         if (_typeIdVisible && jp.getCurrentToken() == JsonToken.START_OBJECT) {\n             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n+            @SuppressWarnings(\"resource\")\n             TokenBuffer tb = new TokenBuffer(null);\n             tb.writeStartObject(); // recreate START_OBJECT\n             tb.writeFieldName(_typePropertyName);\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java\n package com.fasterxml.jackson.databind.node;\n \n import java.math.BigDecimal;\n-import java.util.Iterator;\n import java.util.List;\n-import java.util.NoSuchElementException;\n \n import com.fasterxml.jackson.core.*;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/node/TextNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/TextNode.java\n     public byte[] getBinaryValue(Base64Variant b64variant)\n         throws IOException\n     {\n+        @SuppressWarnings(\"resource\")\n         ByteArrayBuilder builder = new ByteArrayBuilder(100);\n         final String str = _value;\n         int ptr = 0;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n         return createSchemaNode(\"string\", true);\n     }\n \n-\t@Override\n-\tprotected void acceptContentVisitor(JsonArrayFormatVisitor visitor) {\n+    @Override\n+    protected void acceptContentVisitor(JsonArrayFormatVisitor visitor)\n+        throws JsonMappingException\n+    {\n \t\tvisitor.itemsFormat(JsonFormatTypes.STRING);\n-\t\t\n-\t}\n+    }\n \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-    {\n-    \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.STRING);\n+            throws JsonMappingException\n+    {\n+        visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.STRING);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n     }\n     \n     @Override\n-    protected void acceptContentVisitor(JsonArrayFormatVisitor visitor) {\n+    protected void acceptContentVisitor(JsonArrayFormatVisitor visitor)\n+        throws JsonMappingException\n+    {\n         visitor.itemsFormat(JsonFormatTypes.STRING);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) { \n-    \tvisitor.expectAnyFormat(typeHint);\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        throws JsonMappingException\n+    { \n+        visitor.expectAnyFormat(typeHint);\n     }\n \n     protected void failForEmpty(Object value) throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        throws JsonMappingException\n     {\n         /* 15-Jan-2010, tatu: This should probably be rewritten, given that\n          *    more information about content type is actually being explicitly\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java\n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        throws JsonMappingException\n     {\n         visitor.expectBooleanFormat(typeHint);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        throws JsonMappingException\n     {\n         //todo: (ryan) add a format for the date in the schema?\n         boolean asNumber = _useTimestamp;\n             }\n         }\n         if (asNumber) {\n-        \tvisitor.expectNumberFormat(typeHint).format(JsonValueFormat.UTC_MILLISEC);\n+            visitor.expectNumberFormat(typeHint).format(JsonValueFormat.UTC_MILLISEC);\n         } else {\n-        \tvisitor.expectStringFormat(typeHint).format(JsonValueFormat.DATE_TIME);\n+            visitor.expectStringFormat(typeHint).format(JsonValueFormat.DATE_TIME);\n         }\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+            throws JsonMappingException\n     {\n         // [JACKSON-684]: serialize as index?\n     \tif (visitor.getProvider().isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX)) {\n-    \t\tvisitor.expectIntegerFormat(typeHint);\n+    \t    visitor.expectIntegerFormat(typeHint);\n     \t} else {\n     \t\tJsonStringFormatVisitor stringVisitor = visitor.expectStringFormat(typeHint);\n     \t\tif (typeHint != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-    {\n-    \t//jackphel Aug 17 2012 : this can definitely more more exact. \n-    \tvisitor.expectObjectFormat(typeHint);\n+        throws JsonMappingException\n+    {\n+        //jackphel Aug 17 2012 : this can definitely more more exact. \n+        visitor.expectObjectFormat(typeHint);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        throws JsonMappingException\n     {\n-    \tvisitor.expectNullFormat(typeHint);\n+        visitor.expectNullFormat(typeHint);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectIntegerFormat(typeHint);\n+                throws JsonMappingException\n+        {\n+            visitor.expectIntegerFormat(typeHint);\n         }\n     }\n \n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectIntegerFormat(typeHint);\n+                throws JsonMappingException\n+        {\n+            visitor.expectIntegerFormat(typeHint);\n         }\n     }\n \n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectNumberFormat(typeHint);\n+                throws JsonMappingException\n+        {\n+            visitor.expectNumberFormat(typeHint);\n         }\n     }\n     \n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectNumberFormat(typeHint);\n+                throws JsonMappingException\n+        {\n+            visitor.expectNumberFormat(typeHint);\n         }\n     }\n \n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectNumberFormat(typeHint);\n+            throws JsonMappingException\n+        {\n+            visitor.expectNumberFormat(typeHint);\n         }\n     }\n     \n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectNumberFormat(typeHint);\n+            throws JsonMappingException\n+        {\n+            visitor.expectNumberFormat(typeHint);\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-    {\n-    \tvisitor.expectArrayFormat(typeHint).itemsFormat(_elementType);\n+        throws JsonMappingException\n+    {\n+        visitor.expectArrayFormat(typeHint).itemsFormat(_elementType);\n     }\n \n     protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        throws JsonMappingException\n     {\n         visitor.expectStringFormat(typeHint);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        throws JsonMappingException\n     {\n         visitor.expectAnyFormat(typeHint);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java\n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        throws JsonMappingException\n     {\n-    \tvisitor.expectStringFormat(typeHint).format(JsonValueFormat.DATE_TIME);\n+        visitor.expectStringFormat(typeHint).format(JsonValueFormat.DATE_TIME);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java\n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+            throws JsonMappingException\n     {\n-    \tvisitor.expectStringFormat(typeHint).format(JsonValueFormat.DATE_TIME);\n+        visitor.expectStringFormat(typeHint).format(JsonValueFormat.DATE_TIME);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java\n import java.util.*;\n \n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        throws JsonMappingException\n     {\n-    \tacceptContentVisitor(visitor.expectArrayFormat(typeHint));\n+        acceptContentVisitor(visitor.expectArrayFormat(typeHint));\n     }\n \n     /*\n \n     protected abstract JsonNode contentSchema();\n     \n-    protected abstract void acceptContentVisitor(JsonArrayFormatVisitor visitor);    \n+    protected abstract void acceptContentVisitor(JsonArrayFormatVisitor visitor)\n+        throws JsonMappingException;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n             o.put(\"items\", createSchemaNode(\"boolean\"));\n             return o;\n         }\n-        \n-        @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.BOOLEAN);\n+\n+        @Override\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+                throws JsonMappingException\n+        {\n+            visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.BOOLEAN);\n         }\n     }\n \n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.STRING);\n+                throws JsonMappingException\n+        {\n+            visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.STRING);\n         }\n     }\n \n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.INTEGER);\n+                throws JsonMappingException\n+        {\n+            visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.INTEGER);\n         }\n     }\n \n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.STRING);\n+                throws JsonMappingException\n+        {\n+            visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.STRING);\n         }\n     }\n \n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.INTEGER);\n+                throws JsonMappingException\n+        {\n+            visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.INTEGER);\n         }\n     }\n \n \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.NUMBER);\n+                throws JsonMappingException\n+        {\n+            visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.NUMBER);\n         }\n     }\n \n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.NUMBER);\n+                throws JsonMappingException\n+        {\n+            visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.NUMBER);\n         }\n     }\n \n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.NUMBER);\n+                throws JsonMappingException\n+        {\n+            visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.NUMBER);\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectBooleanFormat(typeHint);\n+                throws JsonMappingException\n+        {\n+            visitor.expectBooleanFormat(typeHint);\n         }\n     }\n     \n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectIntegerFormat(typeHint);\n+                throws JsonMappingException\n+        {\n+            visitor.expectIntegerFormat(typeHint);\n         }\n     }\n \n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectIntegerFormat(typeHint);\n+                throws JsonMappingException\n+        {\n+            visitor.expectIntegerFormat(typeHint);\n         }\n     }\n     \n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectAnyFormat(typeHint);\n+                throws JsonMappingException\n+        {\n+            visitor.expectAnyFormat(typeHint);\n         }\n     }\n     \n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectStringFormat(typeHint);\n+                throws JsonMappingException\n+        {\n+            visitor.expectStringFormat(typeHint);\n         }\n     }\n \n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        {\n-        \tvisitor.expectStringFormat(typeHint);\n+                throws JsonMappingException\n+        {\n+            visitor.expectStringFormat(typeHint);\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+            throws JsonMappingException\n     {\n-    \tvisitor.expectStringFormat(typeHint);\n+        visitor.expectStringFormat(typeHint);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        throws JsonMappingException\n     {\n         visitor.expectAnyFormat(typeHint);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+            throws JsonMappingException\n     {\n-    \tvisitor.expectStringFormat(typeHint);\n+        visitor.expectStringFormat(typeHint);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+            throws JsonMappingException\n     {\n-    \tvisitor.expectStringFormat(typeHint);\n+        visitor.expectStringFormat(typeHint);\n     }\n     \n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        throws JsonMappingException\n     {\n         /* 01-Jan-2010, tatu: Not 100% sure what we should say here:\n          *   type is basically not known. This seems closest\n          *   approximation\n          */\n-    \tvisitor.expectAnyFormat(typeHint);\n+        visitor.expectAnyFormat(typeHint);\n     }\n }    \n--- a/src/test/java/com/fasterxml/jackson/databind/TestGeneratorUsingMapper.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestGeneratorUsingMapper.java\n     {\n         JsonFactory jf = new MappingJsonFactory();\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = jf.createJsonGenerator(sw);\n+        JsonGenerator gen = jf.createGenerator(sw);\n         gen.writeObject(new Pojo());\n         gen.close();\n         // trimming needed if main-level object has leading space\n         JsonFactory jf = new JsonFactory();\n         try {\n             StringWriter sw = new StringWriter();\n-            JsonGenerator gen = jf.createJsonGenerator(sw);\n+            JsonGenerator gen = jf.createGenerator(sw);\n             gen.writeObject(new Pojo());\n             gen.close();\n             fail(\"Expected an exception: got sw '\"+sw.toString()+\"'\");\n--- a/src/test/java/com/fasterxml/jackson/databind/TestObjectMapperBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestObjectMapperBeanSerializer.java\n         FixtureObject  aTestObj = new FixtureObject();\n         ObjectMapper aMapper  = new ObjectMapper();\n         StringWriter aWriter = new StringWriter();\n-        JsonGenerator aGen = new JsonFactory().createJsonGenerator(aWriter);\n+        JsonGenerator aGen = new JsonFactory().createGenerator(aWriter);\n         aMapper.writeValue(aGen, aTestObj);\n         aGen.close();\n-        JsonParser jp = new JsonFactory().createJsonParser(new StringReader(aWriter.toString()));\n+        JsonParser jp = new JsonFactory().createParser(new StringReader(aWriter.toString()));\n \n         assertEquals(JsonToken.START_OBJECT, jp.nextToken());\n \n--- a/src/test/java/com/fasterxml/jackson/databind/TestParserUsingMapper.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestParserUsingMapper.java\n         final String JSON = \"[ 1, 2, false ]\";\n \n         for (int i = 0; i < 2; ++i) {\n-            JsonParser jp = jf.createJsonParser(new StringReader(JSON));\n+            JsonParser jp = jf.createParser(new StringReader(JSON));\n             // whether to try advancing first or not? Try both\n             if (i == 0) {\n                 assertToken(JsonToken.START_ARRAY, jp.nextToken());\n     {\n         JsonFactory jf = new MappingJsonFactory();\n         final String JSON = \"{ \\\"x\\\" : 9 }\";\n-        JsonParser jp = jf.createJsonParser(new StringReader(JSON));\n+        JsonParser jp = jf.createParser(new StringReader(JSON));\n \n         // let's try first by advancing:\n         assertToken(JsonToken.START_OBJECT, jp.nextToken());\n         jp.close();\n \n         // and without\n-        jp = jf.createJsonParser(new StringReader(JSON));\n+        jp = jf.createParser(new StringReader(JSON));\n         p = jp.readValueAs(Pojo.class);\n         assertEquals(9, p._x);\n         jp.close();\n     {\n         JsonFactory jf = new MappingJsonFactory();\n         final String JSON = \"[ 1, true, null, \\\"abc\\\" ]\";\n-        JsonParser jp = jf.createJsonParser(new StringReader(JSON));\n+        JsonParser jp = jf.createParser(new StringReader(JSON));\n \n         // let's advance past array start to prevent full binding\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         JsonFactory jf = new JsonFactory();\n         try {\n             final String JSON = \"{ \\\"x\\\" : 9 }\";\n-            JsonParser jp = jf.createJsonParser(new StringReader(JSON));\n+            JsonParser jp = jf.createParser(new StringReader(JSON));\n             Pojo p = jp.readValueAs(Pojo.class);\n             fail(\"Expected an exception: got \"+p);\n         } catch (IllegalStateException e) {\n--- a/src/test/java/com/fasterxml/jackson/databind/TestReadValues.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestReadValues.java\n     public void testRootBeansWithParser() throws Exception\n     {\n         final String JSON = \"{\\\"a\\\":3}{\\\"a\\\":27}  \";\n-        JsonParser jp = MAPPER.getFactory().createJsonParser(JSON);\n+        JsonParser jp = MAPPER.getFactory().createParser(JSON);\n         \n         Iterator<Bean> it = jp.readValuesAs(Bean.class);\n \n     public void testRootArraysWithParser() throws Exception\n     {\n         final String JSON = \"[1][3]\";\n-        JsonParser jp = MAPPER.getFactory().createJsonParser(JSON);\n+        JsonParser jp = MAPPER.getFactory().createParser(JSON);\n \n         // NOTE: We must point JsonParser to the first element; if we tried to\n         // use \"managed\" accessor, it would try to advance past START_ARRAY.\n     \n     public void testHasNextWithEndArray() throws Exception {\n         final String JSON = \"[1,3]\";\n-        JsonParser jp = MAPPER.getFactory().createJsonParser(JSON);\n+        JsonParser jp = MAPPER.getFactory().createParser(JSON);\n \n         // NOTE: We must point JsonParser to the first element; if we tried to\n         // use \"managed\" accessor, it would try to advance past START_ARRAY.\n     public void testNonRootBeans() throws Exception\n     {\n         final String JSON = \"{\\\"leaf\\\":[{\\\"a\\\":3},{\\\"a\\\":27}]}\";\n-        JsonParser jp = MAPPER.getFactory().createJsonParser(JSON);\n+        JsonParser jp = MAPPER.getFactory().createParser(JSON);\n         assertToken(JsonToken.START_OBJECT, jp.nextToken());\n         assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n     public void testNonRootMapsWithParser() throws Exception\n     {\n         final String JSON = \"[{\\\"a\\\":3},{\\\"a\\\":27}]\";\n-        JsonParser jp = MAPPER.getFactory().createJsonParser(JSON);\n+        JsonParser jp = MAPPER.getFactory().createParser(JSON);\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n \n         // can either advance to first START_OBJECT, or clear current token;\n     public void testNonRootArraysUsingParser() throws Exception\n     {\n         final String JSON = \"[[1],[3]]\";\n-        JsonParser jp = MAPPER.getFactory().createJsonParser(JSON);\n+        JsonParser jp = MAPPER.getFactory().createParser(JSON);\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         \n         // Important: as of 2.1, START_ARRAY can only be skipped if the\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java\n             \"a\", \"b\", \"abcd\", \"\", \"???\", \"\\\"quoted\\\"\", \"lf: \\n\",\n         };\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = new JsonFactory().createJsonGenerator(sw);\n+        JsonGenerator jg = new JsonFactory().createGenerator(sw);\n         jg.writeStartArray();\n         for (String str : STRS) {\n             jg.writeString(str);\n             TEST[i] = (byte) i;\n         }\n \n-        JsonGenerator jg = jf.createJsonGenerator(sw);\n+        JsonGenerator jg = jf.createGenerator(sw);\n         jg.writeBinary(TEST);\n         jg.close();\n         String inputData = sw.toString();\n \n         final int entryCount = 15;\n \n-        JsonGenerator jg = jf.createJsonGenerator(sw);\n+        JsonGenerator jg = jf.createGenerator(sw);\n         jg.writeStartArray();\n \n         byte[][] entries = new byte[entryCount][];\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n         // First \"good\" case with Strings\n         String JSON = \"\\\"OK\\\" \\\"RULES\\\"  null\";\n         // multiple main-level mappings, need explicit parser:\n-        JsonParser jp = MAPPER.getFactory().createJsonParser(JSON);\n+        JsonParser jp = MAPPER.getFactory().createParser(JSON);\n \n         assertEquals(TestEnum.OK, MAPPER.readValue(jp, TestEnum.class));\n         assertEquals(TestEnum.RULES, MAPPER.readValue(jp, TestEnum.class));\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandling.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandling.java\n     {\n         BrokenStringReader r = new BrokenStringReader(\"[ 1, \", \"TEST\");\n         JsonFactory f = new JsonFactory();\n-        JsonParser jp = f.createJsonParser(r);\n+        JsonParser jp = f.createParser(r);\n         ObjectMapper mapper = new ObjectMapper();\n         try {\n             @SuppressWarnings(\"unused\")\n     {\n         StringReader r = new StringReader(\"  3\");\n         JsonFactory f = new JsonFactory();\n-        JsonParser jp = f.createJsonParser(r);\n+        JsonParser jp = f.createParser(r);\n         ObjectMapper mapper = new ObjectMapper();\n \n         Integer I = mapper.readValue(jp, Integer.class);\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n             sb.append(\" \");\n             sb.append(i);\n         }\n-        JsonParser jp = MAPPER.getFactory().createJsonParser(sb.toString());\n+        JsonParser jp = MAPPER.getFactory().createParser(sb.toString());\n         for (int i = 0; i < NR_OF_INTS; ++i) {\n             Integer result = MAPPER.readValue(jp, Integer.class);\n             assertEquals(Integer.valueOf(i), result);\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestUntypedDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestUntypedDeserialization.java\n         /* To get \"untyped\" Mapping (to Maps, Lists, instead of beans etc),\n          * we'll specify plain old Object.class as the target.\n          */\n-        Object root = new ObjectMapper().readValue(jf.createJsonParser(new StringReader(JSON)), Object.class);\n+        Object root = new ObjectMapper().readValue(jf.createParser(new StringReader(JSON)), Object.class);\n \n         assertType(root, Map.class);\n         Map<?,?> rootMap = (Map<?,?>) root;\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestArrayNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestArrayNode.java\n         assertEquals(6, n.size());\n \n         // Try serializing it for fun, too...\n-        JsonGenerator jg = new MappingJsonFactory().createJsonGenerator(new StringWriter());\n+        JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter());\n         n.serialize(jg, null);\n \n         n.removeAll();\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestTreeMapperDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestTreeMapperDeserializer.java\n             ;\n         JsonFactory jf = new JsonFactory();\n         ObjectMapper mapper = new ObjectMapper();\n-        JsonParser jp = jf.createJsonParser(new StringReader(JSON));\n+        JsonParser jp = jf.createParser(new StringReader(JSON));\n         JsonNode result = mapper.readTree(jp);\n \n         assertTrue(result.isObject());\n         String JSON = \"12  \\\"string\\\" [ 1, 2, 3 ]\";\n         JsonFactory jf = new JsonFactory();\n         ObjectMapper mapper = new ObjectMapper();\n-        JsonParser jp = jf.createJsonParser(new StringReader(JSON));\n+        JsonParser jp = jf.createParser(new StringReader(JSON));\n         JsonNode result = mapper.readTree(jp);\n \n         assertTrue(result.isIntegralNumber());\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestTreeMapperSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestTreeMapperSerializer.java\n         for (int i = 0; i < 2; ++i) {\n             StringWriter sw = new StringWriter();\n             if (i == 0) {\n-                JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+                JsonGenerator gen = new JsonFactory().createGenerator(sw);\n                 root.serialize(gen, null);\n                 gen.close();\n             } else {\n         for (int i = 0; i < 2; ++i) {\n             StringWriter sw = new StringWriter();\n             if (i == 0) {\n-                JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+                JsonGenerator gen = new JsonFactory().createGenerator(sw);\n                 root.serialize(gen, null);\n                 gen.close();\n             } else {\n         for (int type = 0; type < 2; ++type) {\n             StringWriter sw = new StringWriter();\n             if (type == 0) {\n-                JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+                JsonGenerator gen = new JsonFactory().createGenerator(sw);\n                 root.serialize(gen, null);\n                 gen.close();\n             } else {\n             }\n             \n             String doc = sw.toString();\n-            JsonParser jp = new JsonFactory().createJsonParser(new StringReader(doc));\n+            JsonParser jp = new JsonFactory().createParser(new StringReader(doc));\n             \n             assertEquals(JsonToken.START_ARRAY, jp.nextToken());\n             for (int i = -20; i <= 20; ++i) {\n         StringWriter sw = new StringWriter();\n         mapper.writeValue(sw, BinaryNode.valueOf(data));\n \n-        JsonParser jp = new JsonFactory().createJsonParser(sw.toString());\n+        JsonParser jp = new JsonFactory().createParser(sw.toString());\n         // note: can't determine it's binary from json alone:\n         assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n         assertArrayEquals(data, jp.getBinaryValue());\n     private void verifyFromArray(String input)\n         throws Exception\n     {\n-        JsonParser jp = new JsonFactory().createJsonParser(new StringReader(input));\n+        JsonParser jp = new JsonFactory().createParser(new StringReader(input));\n         \n         assertEquals(JsonToken.START_ARRAY, jp.nextToken());\n         \n     private void verifyFromMap(String input)\n         throws Exception\n     {\n-        JsonParser jp = new JsonFactory().createJsonParser(new StringReader(input));\n+        JsonParser jp = new JsonFactory().createParser(new StringReader(input));\n         assertEquals(JsonToken.START_OBJECT, jp.nextToken());\n         assertEquals(JsonToken.FIELD_NAME, jp.nextToken());\n         assertEquals(FIELD4, getAndVerifyText(jp));\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestArraySerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestArraySerialization.java\n         }\n         String str = sb.toString();\n         byte[] data = MAPPER.writeValueAsBytes(new String[] { \"abc\", str, null, str });\n-        JsonParser jp = MAPPER.getFactory().createJsonParser(data);\n+        JsonParser jp = MAPPER.getFactory().createParser(data);\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n         assertEquals(\"abc\", jp.getText());\n         JsonFactory f = MAPPER.getFactory();\n         for (int round = 0; round < 3; ++round) {\n             byte[] data = MAPPER.writeValueAsBytes(ints);\n-            JsonParser jp = f.createJsonParser(data);\n+            JsonParser jp = f.createParser(data);\n             assertToken(JsonToken.START_ARRAY, jp.nextToken());\n             for (int i = 0; i < SIZE; ++i) {\n                 assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java\n             String json = MAPPER.writeValueAsString(value);\n             \n             // and then need to verify:\n-            JsonParser jp = new JsonFactory().createJsonParser(json);\n+            JsonParser jp = new JsonFactory().createParser(json);\n             assertToken(JsonToken.START_ARRAY, jp.nextToken());\n             for (int i = 0; i < entryLen; ++i) {\n                 assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n             case 0:\n                 {\n                     byte[] data = MAPPER.writeValueAsBytes(value);\n-                    jp = new JsonFactory().createJsonParser(data);\n+                    jp = new JsonFactory().createParser(data);\n                 }\n                 break;\n             case 1:\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestExceptionHandling.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestExceptionHandling.java\n         ObjectMapper mapper = new ObjectMapper();\n         JsonFactory f = new MappingJsonFactory();\n         BrokenStringWriter sw = new BrokenStringWriter(\"TEST\");\n-        JsonGenerator jg = f.createJsonGenerator(sw);\n+        JsonGenerator jg = f.createGenerator(sw);\n \n         try {\n             mapper.writeValue(jg, createLongObject());\n         throws Exception\n     {\n         JsonFactory f = new MappingJsonFactory();\n-        JsonGenerator jg = f.createJsonGenerator(new BrokenStringWriter(\"TEST\"));\n+        JsonGenerator jg = f.createGenerator(new BrokenStringWriter(\"TEST\"));\n         try {\n             jg.writeObject(createLongObject());\n             fail(\"Should have gotten an exception\");\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestFeatures.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestFeatures.java\n         assertTrue(mapper.getSerializationConfig().isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE));\n         // default is to flush after writeValue()\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jgen = mapper.getFactory().createJsonGenerator(sw);\n+        JsonGenerator jgen = mapper.getFactory().createGenerator(sw);\n         mapper.writeValue(jgen, Integer.valueOf(13));\n         assertEquals(\"13\", sw.toString());\n         jgen.close();\n \n         // ditto with ObjectWriter\n         sw = new StringWriter();\n-        jgen = mapper.getFactory().createJsonGenerator(sw);\n+        jgen = mapper.getFactory().createGenerator(sw);\n         ObjectWriter ow = mapper.writer();\n         ow.writeValue(jgen, Integer.valueOf(99));\n         assertEquals(\"99\", sw.toString());\n         ObjectMapper mapper = new ObjectMapper();\n         mapper.configure(SerializationFeature.FLUSH_AFTER_WRITE_VALUE, false);\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jgen = mapper.getFactory().createJsonGenerator(sw);\n+        JsonGenerator jgen = mapper.getFactory().createGenerator(sw);\n \n         mapper.writeValue(jgen, Integer.valueOf(13));\n         // no flushing now:\n         jgen.close();\n         // Also, same should happen with ObjectWriter\n         sw = new StringWriter();\n-        jgen = mapper.getFactory().createJsonGenerator(sw);\n+        jgen = mapper.getFactory().createGenerator(sw);\n         ObjectWriter ow = mapper.writer();\n         ow.writeValue(jgen, Integer.valueOf(99));\n         assertEquals(\"\", sw.toString());\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestRootType.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestRootType.java\n \n         StringWriter out = new StringWriter();\n         JsonFactory f = new JsonFactory();\n-        mapper.writerWithType(collectionType).writeValue(f.createJsonGenerator(out), typedList);\n+        mapper.writerWithType(collectionType).writeValue(f.createGenerator(out), typedList);\n \n         assertEquals(EXP, out.toString());\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestTreeSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestTreeSerialization.java\n         ObjectNode n2 = n.putObject(\"ob\");\n         n2.putArray(\"arr\");\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = mapper.getFactory().createJsonGenerator(sw);\n+        JsonGenerator jg = mapper.getFactory().createGenerator(sw);\n         mapper.writeTree(jg, n);\n \n         Map<String,Object> result = (Map<String,Object>) mapper.readValue(sw.toString(), Map.class);\n         ObjectNode n = mapper.getNodeFactory().objectNode();\n         n.set(\"pojo\", mapper.getNodeFactory().POJONode(\"abc\"));\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = mapper.getFactory().createJsonGenerator(sw);\n+        JsonGenerator jg = mapper.getFactory().createGenerator(sw);\n         mapper.writeTree(jg, n);\n         Map<String,Object> result = (Map<String,Object>) mapper.readValue(sw.toString(), Map.class);\n         assertEquals(1, result.size());\n         ObjectNode n = mapper.getNodeFactory().objectNode();\n         n.set(\"pojo\", mapper.getNodeFactory().POJONode(new int[] { 1, 2, 3 }));\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = mapper.getFactory().createJsonGenerator(sw);\n+        JsonGenerator jg = mapper.getFactory().createGenerator(sw);\n         mapper.writeTree(jg, n);\n \n         Map<String,Object> result = (Map<String,Object>) mapper.readValue(sw.toString(), Map.class);\n         ObjectNode n = mapper.getNodeFactory().objectNode();\n         n.set(\"pojo\", mapper.getNodeFactory().POJONode(new Bean()));\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = mapper.getFactory().createJsonGenerator(sw);\n+        JsonGenerator jg = mapper.getFactory().createGenerator(sw);\n         mapper.writeTree(jg, n);\n \n         Map<String,Object> result = (Map<String,Object>) mapper.readValue(sw.toString(), Map.class);\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestUntypedSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestUntypedSerialization.java\n         for (int i = 0; i < 3; ++i) {\n             String str = mapper.writeValueAsString(doc);\n             \n-            JsonParser jp = f.createJsonParser(str);\n+            JsonParser jp = f.createParser(str);\n             assertEquals(JsonToken.START_ARRAY, jp.nextToken());\n             \n             assertEquals(JsonToken.VALUE_STRING, jp.nextToken());\n         ObjectMapper mapper = new ObjectMapper();\n         for (int i = 0; i < 3; ++i) {\n             String str = mapper.writeValueAsString(doc);\n-            JsonParser jp = f.createJsonParser(str);\n+            JsonParser jp = f.createParser(str);\n             \n             assertEquals(JsonToken.START_OBJECT, jp.nextToken());\n             \n--- a/src/test/java/com/fasterxml/jackson/test/BaseTest.java\n+++ b/src/test/java/com/fasterxml/jackson/test/BaseTest.java\n     protected JsonParser createParserUsingReader(JsonFactory f, String input)\n         throws IOException, JsonParseException\n     {\n-        return f.createJsonParser(new StringReader(input));\n+        return f.createParser(new StringReader(input));\n     }\n \n     protected JsonParser createParserUsingStream(String input, String encoding)\n             data = input.getBytes(encoding);\n         }\n         InputStream is = new ByteArrayInputStream(data);\n-        return f.createJsonParser(is);\n+        return f.createParser(is);\n     }\n \n     /*", "timestamp": 1353047469, "metainfo": ""}