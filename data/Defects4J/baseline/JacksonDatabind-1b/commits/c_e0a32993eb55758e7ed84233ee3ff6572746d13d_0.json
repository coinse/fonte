{"sha": "e0a32993eb55758e7ed84233ee3ff6572746d13d", "log": "Added unit tests for [JACKSON-707]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n /**\n  * Node class that represents Arrays mapped from Json content.\n  */\n-public final class ArrayNode\n+public class ArrayNode\n     extends ContainerNode<ArrayNode>\n {\n     protected ArrayList<JsonNode> _children;\n         _children = children;\n     }\n     \n+    // note: co-variant for type safety\n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public <T extends JsonNode> T deepCopy() {\n+    public ArrayNode deepCopy()\n+    {\n         if (_children == null) {\n-            return (T) new ArrayNode(_nodeFactory);\n+            return new ArrayNode(_nodeFactory);\n         }\n         final int len = _children.size();\n         ArrayList<JsonNode> newKids = new ArrayList<JsonNode>(Math.max(4, len));\n         for (int i = 0; i < len; ++i) {\n             newKids.add(_children.get(i).deepCopy());\n         }\n-        return (T) new ArrayNode(_nodeFactory, newKids);\n+        return new ArrayNode(_nodeFactory, newKids);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n         _children = children;\n     }\n     \n+    // note: co-variant for type safety\n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public <T extends JsonNode> T deepCopy()\n+    public ObjectNode deepCopy()\n     {\n         if (_children == null) {\n-            return (T) new ObjectNode(_nodeFactory);\n+            return new ObjectNode(_nodeFactory);\n         }\n         final int len = _children.size();\n         LinkedHashMap<String, JsonNode> newKids = new LinkedHashMap<String, JsonNode>(Math.max(4, len));\n         for (Map.Entry<String, JsonNode> entry : _children.entrySet()) {\n             newKids.put(entry.getKey(), entry.getValue().deepCopy());\n         }\n-        return (T) new ObjectNode(_nodeFactory, newKids);\n+        return new ObjectNode(_nodeFactory, newKids);\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n /**\n  * Unit tests for verifying functionality of {@link JsonNode} methods that\n  * convert values to other types\n- *\n- * @since 1.7\n  */\n public class TestConversions extends BaseMapTest\n {\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestDeepCopy.java\n+package com.fasterxml.jackson.databind.node;\n+\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Simple tests to verify that [JACKSON-707] is implemented correctly.\n+ */\n+public class TestDeepCopy extends BaseMapTest\n+{\n+    private final ObjectMapper mapper = new ObjectMapper();\n+    \n+    public void testWithObjectSimple()\n+    {\n+        ObjectNode root = mapper.createObjectNode();\n+        root.put(\"a\", 3);\n+        assertEquals(1, root.size());\n+        \n+        ObjectNode copy = root.deepCopy();\n+        assertEquals(1, copy.size());\n+\n+        // adding to root won't change copy:\n+        root.put(\"b\", 7);\n+        assertEquals(2, root.size());\n+        assertEquals(1, copy.size());\n+\n+        // nor vice versa\n+        copy.put(\"c\", 3);\n+        assertEquals(2, root.size());\n+        assertEquals(2, copy.size());\n+    }\n+\n+    public void testWithArraySimple()\n+    {\n+        ArrayNode root = mapper.createArrayNode();\n+        root.add(\"a\");\n+        assertEquals(1, root.size());\n+        \n+        ArrayNode copy = root.deepCopy();\n+        assertEquals(1, copy.size());\n+\n+        // adding to root won't change copy:\n+        root.add( 7);\n+        assertEquals(2, root.size());\n+        assertEquals(1, copy.size());\n+\n+        // nor vice versa\n+        copy.add(3);\n+        assertEquals(2, root.size());\n+        assertEquals(2, copy.size());\n+    }\n+\n+    public void testWithNested()\n+    {\n+        ObjectNode root = mapper.createObjectNode();\n+        ObjectNode leafObject = root.putObject(\"ob\");\n+        ArrayNode leafArray = root.putArray(\"arr\");\n+        assertEquals(2, root.size());\n+\n+        leafObject.put(\"a\", 3);\n+        assertEquals(1, leafObject.size());\n+        leafArray.add(true);\n+        assertEquals(1, leafArray.size());\n+        \n+        ObjectNode copy = root.deepCopy();\n+        assertNotSame(copy, root);\n+        assertEquals(2, copy.size());\n+\n+        // should be detached, once again\n+\n+        leafObject.put(\"x\", 9);\n+        assertEquals(2, leafObject.size());\n+        assertEquals(1, copy.get(\"ob\").size());\n+\n+        leafArray.add(\"foobar\");\n+        assertEquals(2, leafArray.size());\n+        assertEquals(1, copy.get(\"arr\").size());\n+\n+        // nor vice versa\n+        ((ObjectNode) copy.get(\"ob\")).put(\"c\", 3);\n+        assertEquals(2, leafObject.size());\n+        assertEquals(2, copy.get(\"ob\").size());\n+\n+        ((ArrayNode) copy.get(\"arr\")).add(13);\n+        assertEquals(2, leafArray.size());\n+        assertEquals(2, copy.get(\"arr\").size());\n+    }\n+}", "timestamp": 1327868445, "metainfo": ""}