{"sha": "9412b74202dd593d862c339655bfe332f998b1f7", "log": "Add support for maps with java.util.Locale keys to the set of StdKeyDeserializers. (Locale takes a single-argument String constructor, so not explicitly mapping it can cause strange issues for any map with Map<Locale,?>)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\n import java.io.IOException;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Method;\n+import java.util.Locale;\n import java.util.UUID;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n              *   here, so let's not bother even trying...\n              */\n             return Float.valueOf((float) _parseDouble(key));\n+        }\n+    }\n+\n+    @JacksonStdImpl\n+    final static class LocaleKD extends StdKeyDeserializer {\n+        protected JdkDeserializers.LocaleDeserializer _localeDeserializer;\n+\n+        LocaleKD() { super(Locale.class); _localeDeserializer = new JdkDeserializers.LocaleDeserializer();}\n+\n+        @Override\n+        protected Locale _parse(String key, DeserializationContext ctxt) throws JsonMappingException {\n+            try {\n+                return _localeDeserializer._deserialize(key,ctxt);\n+            } catch (IOException e) {\n+                throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as locale\");\n+            }\n         }\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java\n  * Helper class used to contain simple/well-known key deserializers.\n  * Following kinds of Objects can be handled currently:\n  *<ul>\n- * <li>Primitive wrappers</li>\n+ * <li>Primitive wrappers (Boolean, Byte, Char, Short, Integer, Float, Long, Double)</li>\n  * <li>Enums (usually not needed, since EnumMap doesn't call us)</li>\n+ * <li>{@link java.util.Date}</li>\n+ * <li>{@link java.util.Calendar}</li>\n+ * <li>{@link java.util.UUID}</li>\n+ * <li>{@link java.util.Locale}</li>\n  * <li>Anything with constructor that takes a single String arg\n  *   (if not explicitly @JsonIgnore'd)</li>\n- * <li>Anything with 'static T valueOf(String)' factory method\n+ * <li>Anything with {@code static T valueOf(String)} factory method\n  *   (if not explicitly @JsonIgnore'd)</li>\n  *</ul>\n  */\n         add(new StdKeyDeserializer.DateKD());\n         add(new StdKeyDeserializer.CalendarKD());\n         add(new StdKeyDeserializer.UuidKD());\n+        add(new StdKeyDeserializer.LocaleKD());\n     }\n \n     private void add(StdKeyDeserializer kdeser)\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n          assertEquals(UUID.class, ob.getClass());\n          assertEquals(key, ob);\n     }\n+\n+    public void testLocaleKeyMap() throws Exception {\n+        Locale key = Locale.CHINA;\n+        String JSON = \"{ \\\"\" + key + \"\\\":4}\";\n+        Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() {\n+        });\n+        assertNotNull(result);\n+        assertEquals(1, result.size());\n+        Object ob = result.keySet().iterator().next();\n+        assertNotNull(ob);\n+        assertEquals(Locale.class, ob.getClass());\n+        assertEquals(key, ob);\n+    }\n+\n     \n     /*\n     /**********************************************************", "timestamp": 1333135930, "metainfo": ""}