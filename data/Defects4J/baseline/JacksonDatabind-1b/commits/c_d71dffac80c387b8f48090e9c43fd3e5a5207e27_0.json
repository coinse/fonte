{"sha": "d71dffac80c387b8f48090e9c43fd3e5a5207e27", "log": "Start work on deser side of object id handlign", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n import java.text.ParseException;\n import java.util.*;\n \n+import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.annotation.NoClass;\n         }\n         return deser;\n     }\n+\n+    public ObjectIdGenerator<?> objectIdGeneratorInstance(Annotated annotated,\n+            Class<?> implClass)\n+        throws JsonMappingException\n+    {\n+        HandlerInstantiator hi = _config.getHandlerInstantiator();\n+\n+        if (hi != null) {\n+            return hi.objectIdGeneratorInstance(_config, annotated, implClass);\n+        }\n+        return (ObjectIdGenerator<?>) ClassUtil.createInstance(implClass,\n+                    _config.canOverrideAccessModifiers());\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;\n+import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;\n import com.fasterxml.jackson.databind.deser.impl.ValueInjector;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n      */\n     protected ValueInstantiator _valueInstantiator;\n \n+    protected ObjectIdReader _objectIdReader;\n+    \n     /**\n      * Fallback setter used for handling any properties that are not\n      * mapped to regular setters. If setter is not null, it will be\n     public void setValueInstantiator(ValueInstantiator inst) {\n         _valueInstantiator = inst;\n     }\n-    \n+\n+    public void setObjectIdReader(ObjectIdReader r) {\n+        _objectIdReader = r;\n+    }\n+\n     /*\n     /**********************************************************\n     /* Public accessors\n \n     public List<ValueInjector> getInjectables() {\n         return _injectables;\n+    }\n+\n+    public ObjectIdReader getObjectIdReader() {\n+        return _objectIdReader;\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n import java.util.*;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n+\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;\n+import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;\n import com.fasterxml.jackson.databind.deser.std.JdkDeserializers;\n import com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer;\n import com.fasterxml.jackson.databind.introspect.*;\n             }\n         }\n         BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc);\n+        builder.setObjectIdReader(constructObjectIdReader(ctxt, beanDesc));\n         builder.setValueInstantiator(valueInstantiator);\n          // And then setters for deserializing from JSON Object\n         addBeanProps(ctxt, beanDesc, builder);\n         \n     }\n \n+    protected ObjectIdReader constructObjectIdReader(DeserializationContext ctxt,\n+            BeanDescription beanDesc)\n+        throws JsonMappingException\n+    {\n+        ObjectIdInfo oidInfo = beanDesc.getObjectIdInfo();\n+        if (oidInfo == null) {\n+            return null;\n+        }\n+        ObjectIdGenerator<?> gen;\n+        Class<?> implClass = oidInfo.getGenerator();\n+        JavaType type = ctxt.constructType(implClass);\n+        // Could require type to be passed explicitly, but we should be able to find it too:\n+        JavaType idType = ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+\n+        // Just one special case: Property-based generator is trickier\n+        if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work\n+            // !!! TODO\n+            gen = null;\n+            if (true) throw new IllegalStateException(\"Not yet implemented!\");\n+        } else { // other types need to be simpler\n+            gen = ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n+        }\n+        return ObjectIdReader.construct(idType, oidInfo.getProperty(), gen);\n+    }\n+    \n     @SuppressWarnings(\"unchecked\")\n     public JsonDeserializer<Object> buildThrowableDeserializer(DeserializationContext ctxt,\n             JavaType type, BeanDescription beanDesc)\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java\n+package com.fasterxml.jackson.databind.deser.impl;\n+\n+import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Object that knows how to serialize Object Ids.\n+ */\n+public final class ObjectIdReader\n+{\n+    public final JavaType idType;\n+\n+    public final String propertyName;\n+    \n+    /**\n+     * Blueprint generator instance: actual instance will be\n+     * fetched from {@link SerializerProvider} using this as\n+     * the key.\n+     */\n+    public final ObjectIdGenerator<?> generator;\n+    \n+    /**\n+     * Serializer used for serializing id values.\n+     */\n+    public final JsonDeserializer<Object> deserializer;\n+    \n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    protected ObjectIdReader(JavaType t, String propName, ObjectIdGenerator<?> gen,\n+            JsonDeserializer<?> deser)\n+    {\n+        idType = t;\n+        propertyName = propName;\n+        generator = gen;\n+        deserializer = (JsonDeserializer<Object>) deser;\n+    }\n+\n+    /**\n+     * Factory method called by {@link com.fasterxml.jackson.databind.ser.std.BeanSerializerBase}\n+     * with the initial information based on standard settings for the type\n+     * for which serializer is being built.\n+     */\n+    public static ObjectIdReader construct(JavaType idType, String propName,\n+            ObjectIdGenerator<?> generator)\n+    {\n+        return new ObjectIdReader(idType, propName, generator, null);\n+    }\n+\n+    public ObjectIdReader withSerializer(JsonDeserializer<?> ser) {\n+        return new ObjectIdReader(idType, propertyName, generator, ser);\n+    }\n+}", "timestamp": 1328677521, "metainfo": ""}