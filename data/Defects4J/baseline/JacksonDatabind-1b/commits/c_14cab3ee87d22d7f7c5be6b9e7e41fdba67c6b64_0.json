{"sha": "14cab3ee87d22d7f7c5be6b9e7e41fdba67c6b64", "log": "ObjectMapper, DefaultSerializerProvider acceptJSformVis of JavaType  - ObjectMapper.acceptJsonFormatVisitor takes javatype instead of class  - DefaultSerializerProvider.acceptJsonFormatVisitor takes javatype instead of class", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      *\n      * @param t The class to generate schema for\n      */\n-    public void acceptJsonFormatVisitor(Class<?> t, JsonFormatVisitorWrapper visitor) throws JsonMappingException {\n+    public void acceptJsonFormatVisitor(JavaType javaType, JsonFormatVisitorWrapper visitor) throws JsonMappingException {\n     \tif (t == null) {\n     \t\tthrow new IllegalArgumentException(\"class must be provided\");\n     \t}\n     \t}\n     \tDefaultSerializerProvider provider = _serializerProvider(getSerializationConfig());\n         visitor.setProvider(provider);\n-    \tprovider.acceptJsonFormatVisitor(t, visitor);\n+    \tprovider.acceptJsonFormatVisitor(javaType, visitor);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n      * @param type The type for which to generate format\n      * @param visitor the visitor to accept the format\n      */\n-    public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitorWrapper visitor)\n+    public void acceptJsonFormatVisitor(JavaType javaType, JsonFormatVisitorWrapper visitor)\n         throws JsonMappingException\n     {\n-        if (type == null) {\n+        if (javaType == null) {\n             throw new IllegalArgumentException(\"A class must be provided\");\n         }\n         /* no need for embedded type information for JSON schema generation (all\n          * type information it needs is accessible via \"untyped\" serializer)\n          */\n-        JsonSerializer<Object> ser = findValueSerializer(type, null);\n+        JsonSerializer<Object> ser = findValueSerializer(javaType, null);\n         if (ser instanceof JsonFormatVisitable) {\n-        \t((JsonFormatVisitable) ser).acceptJsonFormatVisitor(visitor, constructType(type));\n-        } else {\n-        \tvisitor.expectAnyFormat(constructType(type));\n+        \t((JsonFormatVisitable) ser).acceptJsonFormatVisitor(visitor, javaType);\n+        } else {\n+        \tvisitor.expectAnyFormat(javaType);\n         }\n     }\n     ", "timestamp": 1345345923, "metainfo": ""}