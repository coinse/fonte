{"sha": "e8c1b5308707d31a2a6500e5155148a15fba53cf", "log": "Fixed [JACKSON-847], incompatibility between @JsonCreator, @JsonIdentityInfo", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n         throws IOException, JsonProcessingException\n     { \n         final PropertyBasedCreator creator = _propertyBasedCreator;\n-        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt);\n-\n+        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt, _objectIdReader);\n+        \n         // 04-Jan-2010, tatu: May need to collect unknown properties for polymorphic cases\n         TokenBuffer unknown = null;\n \n                         bean = creator.build(ctxt, buffer);\n                     } catch (Exception e) {\n                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n-                        continue; // never gets here\n+                        bean = null; // never gets here\n                     }\n                     //  polymorphic?\n \t\t    if (bean.getClass() != _beanType.getRawClass()) {\n                 }\n                 continue;\n             }\n+            // Object Id property?\n+            if (buffer.readIdProperty(propName)) {\n+                continue;\n+            }\n             // regular property? needs buffering\n             SettableBeanProperty prop = _beanProperties.find(propName);\n             if (prop != null) {\n             bean =  creator.build(ctxt, buffer);\n         } catch (Exception e) {\n             wrapInstantiationProblem(e, ctxt);\n-            return null; // never gets here\n+            bean = null; // never gets here\n         }\n         if (unknown != null) {\n             // polymorphic?\n         }\n         return bean;\n     }\n-\n+    \n     /**\n      * Method called in cases where we may have polymorphic deserialization\n      * case: that is, type of Creator-constructed bean is not the type\n         throws IOException, JsonProcessingException\n     {\n         final PropertyBasedCreator creator = _propertyBasedCreator;\n-        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt);\n+        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt, _objectIdReader);\n \n         TokenBuffer tokens = new TokenBuffer(jp.getCodec());\n         tokens.writeStartObject();\n                 }\n                 continue;\n             }\n+            // Object Id property?\n+            if (buffer.readIdProperty(propName)) {\n+                continue;\n+            }\n             // regular property? needs buffering\n             SettableBeanProperty prop = _beanProperties.find(propName);\n             if (prop != null) {\n     {\n         final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n         final PropertyBasedCreator creator = _propertyBasedCreator;\n-        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt);\n+        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt, _objectIdReader);\n \n         TokenBuffer tokens = new TokenBuffer(jp.getCodec());\n         tokens.writeStartObject();\n                 }\n                 continue;\n             }\n+            // Object Id property?\n+            if (buffer.readIdProperty(propName)) {\n+                continue;\n+            }\n             // regular property? needs buffering\n             SettableBeanProperty prop = _beanProperties.find(propName);\n             if (prop != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n         throws IOException, JsonProcessingException\n     { \n         final PropertyBasedCreator creator = _propertyBasedCreator;\n-        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt);\n+        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt, _objectIdReader);\n \n         // 04-Jan-2010, tatu: May need to collect unknown properties for polymorphic cases\n         TokenBuffer unknown = null;\n                 }\n                 continue;\n             }\n+            // Object Id property?\n+            if (buffer.readIdProperty(propName)) {\n+                continue;\n+            }\n             // regular property? needs buffering\n             SettableBeanProperty prop = _beanProperties.find(propName);\n             if (prop != null) {\n         throws IOException, JsonProcessingException\n     {\n         final PropertyBasedCreator creator = _propertyBasedCreator;\n-        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt);\n+        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt, _objectIdReader);\n \n         TokenBuffer tokens = new TokenBuffer(jp.getCodec());\n         tokens.writeStartObject();\n                 }\n                 continue;\n             }\n+            // Object Id property?\n+            if (buffer.readIdProperty(propName)) {\n+                continue;\n+            }\n             // regular property? needs buffering\n             SettableBeanProperty prop = _beanProperties.find(propName);\n             if (prop != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayBuilderDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayBuilderDeserializer.java\n         throws IOException, JsonProcessingException\n     {\n         final PropertyBasedCreator creator = _propertyBasedCreator;\n-        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt);\n+        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt, _objectIdReader);\n \n         final SettableBeanProperty[] props = _orderedProperties;\n         final int propCount = props.length;\n                 }\n                 continue;\n             }\n+            // Object Id property?\n+            if (buffer.readIdProperty(propName)) {\n+                continue;\n+            }\n             // regular property? needs buffering\n             buffer.bufferProperty(prop, prop.deserialize(jp, ctxt));\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayDeserializer.java\n         throws IOException, JsonProcessingException\n     {\n         final PropertyBasedCreator creator = _propertyBasedCreator;\n-        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt);\n+        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt, _objectIdReader);\n \n         final SettableBeanProperty[] props = _orderedProperties;\n         final int propCount = props.length;\n                 }\n                 continue;\n             }\n+            // Object Id property?\n+            if (buffer.readIdProperty(propName)) {\n+                continue;\n+            }\n             // regular property? needs buffering\n             buffer.bufferProperty(prop, prop.deserialize(jp, ctxt));\n         }\n \n-        // In case we didn't quite get all the creator properties, we may have to do this:P\n+        // In case we didn't quite get all the creator properties, we may have to do this:\n         if (bean == null) {\n             try {\n                 bean = creator.build(ctxt, buffer);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java\n     public final ObjectIdGenerator<?> generator;\n     \n     /**\n-     * Serializer used for serializing id values.\n+     * Deserializer used for deserializing id values.\n      */\n     public final JsonDeserializer<Object> deserializer;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n  * for some POJO types (or properties).\n  */\n public final class ObjectIdValueProperty\n-\textends SettableBeanProperty\n+    extends SettableBeanProperty\n {\n     protected final ObjectIdReader _objectIdReader;\n     \n \n     @Override\n     public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt,\n-        Object instance)\n-            throws IOException, JsonProcessingException\n+            Object instance)\n+        throws IOException, JsonProcessingException\n     {\n     \tdeserializeSetAndReturn(jp, ctxt, instance);\n     }\n \n     @Override\n     public Object setAndReturn(Object instance, Object value)\n-   \t\tthrows IOException\n+        throws IOException\n     {\n         SettableBeanProperty idProp = _objectIdReader.idProperty;\n         if (idProp == null) {\n-        \tthrow new UnsupportedOperationException(\n-        \t        \"Should not call set() on ObjectIdProperty that has no SettableBeanProperty\");\n+            throw new UnsupportedOperationException(\n+                    \"Should not call set() on ObjectIdProperty that has no SettableBeanProperty\");\n         }\n         return idProp.setAndReturn(instance, value);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java\n     public SettableBeanProperty findCreatorProperty(String name) {\n         return _properties.get(name);\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Building process\n \n     /**\n      * Method called when starting to build a bean instance.\n+     * \n+     * @since 2.1 (added ObjectIdReader parameter -- existed in previous versions without)\n      */\n-    public PropertyValueBuffer startBuilding(JsonParser jp, DeserializationContext ctxt)\n+    public PropertyValueBuffer startBuilding(JsonParser jp, DeserializationContext ctxt,\n+            ObjectIdReader oir)\n     {\n-        PropertyValueBuffer buffer = new PropertyValueBuffer(jp, ctxt, _propertyCount);\n+        PropertyValueBuffer buffer = new PropertyValueBuffer(jp, ctxt, _propertyCount, oir);\n         if (_propertiesWithInjectables != null) {\n             buffer.inject(_propertiesWithInjectables);\n         }\n         return buffer;\n     }\n-    \n+\n     public Object build(DeserializationContext ctxt, PropertyValueBuffer buffer) throws IOException\n     {\n         Object bean = _valueInstantiator.createFromObjectWith(ctxt, buffer.getParameters(_defaultValues));\n+        // Object Id to handle?\n+        bean = buffer.handleIdValue(ctxt, bean);\n+        \n         // Anything buffered?\n         for (PropertyValue pv = buffer.buffered(); pv != null; pv = pv.next) {\n             pv.assign(bean);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java\n package com.fasterxml.jackson.databind.deser.impl;\n+\n+import java.io.IOException;\n \n import com.fasterxml.jackson.core.JsonParser;\n \n      * instance\n      */\n     protected final Object[] _creatorParameters;\n+\n+    protected final ObjectIdReader _objectIdReader;\n     \n     /**\n      * Number of creator parameters we are still missing.\n      * is just a simple linked list\n      */\n     private PropertyValue _buffered;\n+\n+    /**\n+     * In case there is an Object Id property to handle, this is the value\n+     * we have for it.\n+     */\n+    private Object _idValue;\n     \n-    public PropertyValueBuffer(JsonParser jp, DeserializationContext ctxt, int paramCount)\n+    public PropertyValueBuffer(JsonParser jp, DeserializationContext ctxt, int paramCount,\n+            ObjectIdReader oir)\n     {\n         _parser = jp;\n         _context = ctxt;\n         _paramsNeeded = paramCount;\n+        _objectIdReader = oir;\n         _creatorParameters = new Object[paramCount];\n     }\n \n         return _creatorParameters;\n     }\n \n+\n+    /**\n+     * Helper method called to see if given non-creator property is the \"id property\";\n+     * and if so, handle appropriately.\n+     * \n+     * @since 2.1\n+     */\n+    public boolean readIdProperty(String propName) throws IOException\n+    {\n+        if ((_objectIdReader != null) && propName.equals(_objectIdReader.propertyName)) {\n+            _idValue = _objectIdReader.deserializer.deserialize(_parser, _context);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Helper method called to handle Object Id value collected earlier, if any\n+     */\n+    public Object handleIdValue(final DeserializationContext ctxt, Object bean)\n+        throws IOException\n+    {\n+        if (_objectIdReader != null) {\n+            if (_idValue != null) {\n+                ReadableObjectId roid = ctxt.findObjectId(_idValue, _objectIdReader.generator);\n+                roid.bindItem(bean);\n+                // also: may need to set a property value as well\n+                SettableBeanProperty idProp = _objectIdReader.idProperty;\n+                if (idProp != null) {\n+                    return idProp.setAndReturn(bean, _idValue);\n+                }\n+            } else {\n+                // TODO: is this an error case?\n+            }\n+        }\n+        return bean;\n+    }\n+    \n     protected PropertyValue buffered() { return _buffered; }\n \n     public boolean isComplete() { return _paramsNeeded <= 0; }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n         throws IOException, JsonProcessingException\n     {\n         final PropertyBasedCreator creator = _propertyBasedCreator;\n-        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt);\n+        // null -> no ObjectIdReader for Maps (yet?)\n+        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt, null);\n \n         JsonToken t = jp.getCurrentToken();\n         if (t == JsonToken.START_OBJECT) {\n--- a/src/test/java/com/fasterxml/jackson/failing/TestObjectId.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestObjectId.java\n // related to [JACKSON-847]\n public class TestObjectId extends BaseMapTest\n {\n+    @JsonPropertyOrder({\"a\", \"b\"})\n+    static class Wrapper {\n+        public ColumnMetadata a, b;\n+    }\n+    \n     @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"@id\")\n     static class ColumnMetadata {\n       private final String name;\n     \n     private final ObjectMapper MAPPER = new ObjectMapper();\n     \n-    public void testColumnMetadata() throws Exception {\n-        ColumnMetadata columnMetadata = new ColumnMetadata(\"Billy\", \"employee\", \"comment\");\n-        String serialized = MAPPER.writeValueAsString(columnMetadata);\n-        System.out.println(serialized);\n-        ColumnMetadata deserialized = MAPPER.readValue(serialized, ColumnMetadata.class);\n+    public void testColumnMetadata() throws Exception\n+    {\n+        ColumnMetadata col = new ColumnMetadata(\"Billy\", \"employee\", \"comment\");\n+        Wrapper w = new Wrapper();\n+        w.a = col;\n+        w.b = col;\n+        String json = MAPPER.writeValueAsString(w);\n+        \n+        Wrapper deserialized = MAPPER.readValue(json, Wrapper.class);\n         assertNotNull(deserialized);\n-        assertEquals(\"Billy\", deserialized.getName());\n-        assertEquals(\"employee\", deserialized.getType());\n-        assertEquals(\"comment\", deserialized.getComment());\n+        assertNotNull(deserialized.a);\n+        assertNotNull(deserialized.b);\n         \n+        assertEquals(\"Billy\", deserialized.a.getName());\n+        assertEquals(\"employee\", deserialized.a.getType());\n+        assertEquals(\"comment\", deserialized.a.getComment());\n+\n+        assertSame(deserialized.a, deserialized.b);\n     }\n }", "timestamp": 1346266161, "metainfo": ""}