{"sha": "533421e328e9d7335ed3bd0bd3c65b759848b696", "log": "More unit test fixes; joda, xml ones not getting registered", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/JodaSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/JodaSerializers.java\n  * Since version 1.5, more types are supported. These types use slightly\n  * different approach to serialization than core date types: \"timestamp\"\n  * notation is implemented using JSON arrays, for improved readability.\n- *\n- * @since 1.4\n  */\n public class JodaSerializers\n     implements Provider<Map.Entry<Class<?>,JsonSerializer<?>>>\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForEnums.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForEnums.java\n         \n         // Typing is needed for enums\n         String json = m.writeValueAsString(new Object[] { TestEnum.A });\n-        assertEquals(\"[[\\\"org.codehaus.jackson.map.jsontype.TestDefaultForEnums$TestEnum\\\",\\\"A\\\"]]\", json);\n+        assertEquals(\"[[\\\"com.fasterxml.jackson.databind.jsontype.TestDefaultForEnums$TestEnum\\\",\\\"A\\\"]]\", json);\n \n         // and let's verify we get it back ok as well:\n         Object[] value = m.readValue(json, Object[].class);\n         ObjectMapper m = new ObjectMapper();\n         m.enableDefaultTyping();\n         String json = m.writeValueAsString(new EnumHolder(TestEnum.B));\n-        assertEquals(\"{\\\"value\\\":[\\\"org.codehaus.jackson.map.jsontype.TestDefaultForEnums$TestEnum\\\",\\\"B\\\"]}\", json);\n+        assertEquals(\"{\\\"value\\\":[\\\"com.fasterxml.jackson.databind.jsontype.TestDefaultForEnums$TestEnum\\\",\\\"B\\\"]}\", json);\n         EnumHolder holder = m.readValue(json, EnumHolder.class);\n         assertSame(TestEnum.B, holder.value);\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForObject.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForObject.java\n         ObjectMapper mapper = new ObjectMapper();\n         mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, \"*CLASS*\");\n         String json = mapper.writeValueAsString(new BeanHolder(new StringBean(\"punny\")));\n-        assertEquals(\"{\\\"bean\\\":{\\\"*CLASS*\\\":\\\"org.codehaus.jackson.map.jsontype.TestDefaultForObject$StringBean\\\",\\\"name\\\":\\\"punny\\\"}}\", json);\n+        assertEquals(\"{\\\"bean\\\":{\\\"*CLASS*\\\":\\\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\\\",\\\"name\\\":\\\"punny\\\"}}\", json);\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java\n         mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n         mapper.configure(SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS, false);\n         json = mapper.writeValueAsString(new EmptyNonFinal());\n-        assertEquals(\"[\\\"org.codehaus.jackson.map.jsontype.TestSubtypes$EmptyNonFinal\\\",{}]\", json);\n+        assertEquals(\"[\\\"com.fasterxml.jackson.databind.jsontype.TestSubtypes$EmptyNonFinal\\\",{}]\", json);\n     }\n \n     public void testDefaultImpl() throws Exception\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedSerialization.java\n         list.add(new A());\n         map.put(1L, list);\n         String json = mapper.writerWithType(new TypeReference<Map<Long, Collection<Super>>>() {}).writeValueAsString(map);\n-        assertTrue(json, json.contains(\"@class\"));\n+        assertTrue(\"JSON does not contain '@class': \"+json, json.contains(\"@class\"));\n     }\n }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java\n         // And then EnumMap (actual use case for us)\n         t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class);\n         can = t.toCanonical();\n-        assertEquals(\"java.util.EnumMap<org.codehaus.jackson.map.type.TestTypeFactory$EnumForCanonical,java.lang.String>\",\n+        assertEquals(\"java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>\",\n                 can);\n         assertEquals(t, TypeFactory.fromCanonical(can));\n         ", "timestamp": 1324753593, "metainfo": ""}