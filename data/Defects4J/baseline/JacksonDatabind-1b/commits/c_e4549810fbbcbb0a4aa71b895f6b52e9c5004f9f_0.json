{"sha": "e4549810fbbcbb0a4aa71b895f6b52e9c5004f9f", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AbstractTypeResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AbstractTypeResolver.java\n package com.fasterxml.jackson.databind;\n-\n \n /**\n  * Defines interface for resolvers that can resolve abstract types into concrete\n  * ones; either by using static mappings, or possibly by materializing\n  * implementations dynamically.\n- *<p>\n- * Note that this class was changed in 1.8, to separate two parts of operation\n- * (defaulting, which has higher precedence, and fallback, which has lowest\n- * precedence). Existing m\n- * \n- * @since 1.6\n  */\n public abstract class AbstractTypeResolver\n {\n      * \n      * @param config Configuration in use; should always be of type\n      *    <code>DeserializationConfig</code>\n-     * \n-     * @since 1.8\n      */\n     public JavaType findTypeMapping(DeserializationConfig config, JavaType type) {\n         return null;\n      * @return Resolved concrete type (which should retain generic\n      *    type parameters of input type, if any), if resolution succeeds;\n      *    null if resolver does not know how to resolve type\n-     *    \n-     * @since 1.6\n      */\n     public JavaType resolveAbstractType(DeserializationConfig config,\n             JavaType type) {", "timestamp": 1326404457, "metainfo": ""}