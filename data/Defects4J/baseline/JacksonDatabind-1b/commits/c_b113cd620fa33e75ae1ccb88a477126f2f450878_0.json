{"sha": "b113cd620fa33e75ae1ccb88a477126f2f450878", "log": "replaced getClass with getRawClass", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ObjectSchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ObjectSchemaFactory.java\n \t\treturn null;\n \t}\t\n \t\n-\tprivate Type writerType(BeanPropertyWriter writer) {\n+\tprivate Class<?> writerType(BeanPropertyWriter writer) {\n \t\t\n \t\t//TODO:Will these ever return different types?\n \t\t\n \t\t//JavaType propType = writer.getSerializationType();\n \t\t//Type hint = (propType == null) ? writer.getGenericPropertyType() : propType.getRawClass();\n-\t\treturn writer.getRawSerializationType();\n+\t\treturn writer.getPropertyType();\n \t}\n \t\n \tprotected Schema propertySchema(BeanPropertyWriter writer) {\n \t\tSchemaFactory visitor = new SchemaFactory(mapper);\n-\t\tType serType = writerType(writer);\n-\t\tJsonSerializer<Object> ser = getSer(writer, serType.getClass());\n+\t\tClass<?> serType = writerType(writer);\n+\t\tJsonSerializer<Object> ser = getSer(writer, serType);\n \t\tif (ser != null && ser instanceof SchemaAware) {\n \t\t\t((SchemaAware)ser).acceptJsonFormatVisitor(visitor, serType);\n \t\t} else {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n          */\n         //ObjectNode o = createSchemaNode(\"array\", true);\n         JsonArrayFormatVisitor arrayVisitor = \n-        \t\tvisitor.arrayFormat(typeHint == null ? _elementType.getClass() : typeHint);\n+        \t\tvisitor.arrayFormat(typeHint == null ? _elementType.getRawClass() : typeHint);\n         JavaType contentType = null;\n         if (typeHint != null) {\n             JavaType javaType = visitor.getProvider().constructType(typeHint);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n      * @param propertiesNode Node which the given property would exist within\n \t */\n \tpublic static void depositSchemaProperty(BeanPropertyWriter writer, JsonObjectFormatVisitor objectVisitor) {\n-\t\tif (isPropertyRequired(writer, objectVisitor.getProvider())) {\n+\t\t//if (isPropertyRequired(writer, objectVisitor.getProvider())) {\n \t\t\tobjectVisitor.property(writer); \n-\t\t} else {\n-\t\t\tobjectVisitor.optionalProperty(writer);\n-\t\t}\n+\t\t//} else {\n+\t\t\t//objectVisitor.optionalProperty(writer);\n+\t\t//}\n \t}\n \n \t/**\n--- a/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n     public void testGeneratingJsonSchema()\n         throws Exception\n     {\n-        Schema jsonSchema = new ObjectMapper().generateJsonSchema(SimpleBean.class);\n+        Schema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class);\n         \n         assertNotNull(jsonSchema);\n ", "timestamp": 1343684525, "metainfo": ""}