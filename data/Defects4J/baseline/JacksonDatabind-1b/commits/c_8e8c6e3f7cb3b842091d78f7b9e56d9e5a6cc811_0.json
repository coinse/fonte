{"sha": "8e8c6e3f7cb3b842091d78f7b9e56d9e5a6cc811", "log": "adds new visitor wrapper, which constructs typed visitors  Rather than SchemaFactory being an instantiable class, and thus mucking up its methods shared with subtypes, visitorwrapper -> factoryprovider provide access to schemafactory subtypes", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.*;\n import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;\n import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n      *\n      * @param t The class to generate schema for\n      */\n-    public void acceptJsonFormatVisitor(Class<?> t, JsonFormatVisitor visitor) throws JsonMappingException {\n+    public void acceptJsonFormatVisitor(Class<?> t, JsonFormatVisitorWrapper visitor) throws JsonMappingException {\n     \tif (t == null) {\n     \t\tthrow new IllegalArgumentException(\"class must be provided\");\n     \t}\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.std.CalendarSerializer;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;\n             CalendarSerializer.instance.serialize(value.toGregorianCalendar(), jgen, provider);\n         }\n \n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) {\n             CalendarSerializer.instance.acceptJsonFormatVisitor(visitor, null);\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n \n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n public class DOMSerializer\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n-        visitor.anyFormat(typeHint);\n+        visitor.expectAnyFormat(typeHint);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/JsonFormatVisitorAware.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/JsonFormatVisitorAware.java\n \n \n import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n \n /**\n  * Marker interface for schema-aware serializers.\n      *\n      * @return <a href=\"http://json-schema.org/\">Json-schema</a> for this serializer.\n      */\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint);\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint);\n }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/SchemaFactoryProvider.java\n+package com.fasterxml.jackson.databind.jsonschema;\n+\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsonschema.factories.*;\n+import com.fasterxml.jackson.databind.jsonschema.types.JsonSchema;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonAnyFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonArrayFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonBooleanFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonIntegerFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonNullFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonNumberFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonObjectFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonStringFormatVisitor;\n+\n+/**\n+ * @author jphelan\n+ *\n+ */\n+public class SchemaFactoryProvider implements JsonFormatVisitorWrapper{\n+\n+\tprotected SerializerProvider provider;\n+\tprivate SchemaFactoryDelegate delegate;\n+\t\n+\t/**\n+\t * {@link SchemaFactory#provider}\n+\t * @param provider the provider to set\n+\t */\n+\tpublic void setProvider(SerializerProvider provider) {\n+\t\tthis.provider = provider;\n+\t}\n+\t\n+\tpublic SerializerProvider getProvider() {\n+\t\treturn provider;\n+\t}\n+\t\n+\t\n+\tpublic JsonAnyFormatVisitor expectAnyFormat(JavaType convertedType) {\n+\t\tdelegate = new AnySchemaFactory(provider);\n+\t\treturn (JsonAnyFormatVisitor) delegate;\n+\t}\n+\n+\tpublic JsonArrayFormatVisitor expectArrayFormat(JavaType convertedType) {\n+\t\tdelegate = new ArraySchemaFactory(provider);\n+\t\treturn (JsonArrayFormatVisitor) delegate;\n+\t}\n+\n+\tpublic JsonBooleanFormatVisitor expectBooleanFormat(JavaType convertedType) {\n+\t\tdelegate = new BooleanSchemaFactory(provider);\n+\t\treturn (JsonBooleanFormatVisitor) delegate;\n+\t}\n+\n+\tpublic JsonSchema finalSchema() {\n+\t\tassert delegate != null : \"SchemaFactory must envoke a delegate method before it can return a JsonSchema.\";\n+\t\tif (delegate == null) {\n+\t\t\treturn null;\n+\t\t} else {\n+\t\t\treturn delegate.getSchema();\n+\t\t}\n+\n+\t}\n+\t\n+\tpublic JsonIntegerFormatVisitor expectIntegerFormat(JavaType convertedType) {\n+\t\tdelegate = new IntegerSchemaFactory(provider);\n+\t\treturn (JsonIntegerFormatVisitor) delegate;\n+\t}\n+\n+\tpublic JsonNullFormatVisitor expectNullFormat(JavaType convertedType) {\n+\t\tdelegate = new NullSchemaFactory(provider);\n+\t\treturn (JsonNullFormatVisitor) delegate;\n+\t}\n+\n+\tpublic JsonNumberFormatVisitor expectNumberFormat(JavaType convertedType) {\n+\t\tdelegate = new NumberSchemaFactory(provider);\n+\t\treturn (JsonNumberFormatVisitor) delegate;\n+\t}\n+\n+\tpublic JsonObjectFormatVisitor expectObjectFormat(JavaType convertedType) {\n+\t\tdelegate = new ObjectSchemaFactory(provider);\n+\t\treturn (JsonObjectFormatVisitor) delegate;\n+\t}\n+\n+\tpublic JsonStringFormatVisitor expectStringFormat(JavaType convertedType) {\n+\t\tdelegate = new StringSchemaFactory(provider);\n+\t\treturn (JsonStringFormatVisitor) delegate;\n+\t}\n+\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/AnySchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/AnySchemaFactory.java\n package com.fasterxml.jackson.databind.jsonschema.factories;\n \n+import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonschema.types.AnySchema;\n import com.fasterxml.jackson.databind.jsonschema.types.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonAnyFormatVisitor;\n \t\tanySchema = new AnySchema();\n \t}\n \n+\t/**\n+\t * @param provider\n+\t */\n+\tpublic AnySchemaFactory(SerializerProvider provider) {\n+\t\tparent = null;\n+\t\tsetProvider(provider);\n+\t\tanySchema = new AnySchema();\n+\t}\n+\n \tpublic JsonSchema getSchema() {\n \t\treturn anySchema;\n \t}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ArraySchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ArraySchemaFactory.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonschema.JsonFormatVisitorAware;\n+import com.fasterxml.jackson.databind.jsonschema.SchemaFactoryProvider;\n import com.fasterxml.jackson.databind.jsonschema.types.ArraySchema;\n import com.fasterxml.jackson.databind.jsonschema.types.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.types.SchemaType;\n \t\tthis(schemaFactory, null);\n \t}\n \n+\t/**\n+\t * @param provider\n+\t */\n+\tpublic ArraySchemaFactory(SerializerProvider provider) {\n+\t\tparent = null;\n+\t\tsetProvider(provider);\n+\t\tarraySchema = new ArraySchema();\n+\t}\n+\n \tpublic void itemsFormat(JavaType contentType) {\n \t\t// An array of object matches any values, thus we leave the schema empty.\n         if (contentType.getRawClass() != Object.class) {\n \t\t\ttry {\n \t\t\t\tser = getProvider().findValueSerializer(contentType, _property);\n \t\t\t\tif (ser instanceof JsonFormatVisitorAware) {\n-\t            \tSchemaFactory visitor = new SchemaFactory();\n+\t            \tSchemaFactoryProvider visitor = new SchemaFactoryProvider();\n \t            \tvisitor.setProvider(provider);\n \t                ((JsonFormatVisitorAware) ser).acceptJsonFormatVisitor(visitor, contentType);\n \t                arraySchema.setItemsSchema(visitor.finalSchema());\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/BooleanSchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/BooleanSchemaFactory.java\n package com.fasterxml.jackson.databind.jsonschema.factories;\n \n+import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonschema.types.BooleanSchema;\n import com.fasterxml.jackson.databind.jsonschema.types.ValueTypeSchema;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonBooleanFormatVisitor;\n \t\tbooleanSchema = new BooleanSchema();\n \t}\n \n+\t/**\n+\t * @param provider\n+\t */\n+\tpublic BooleanSchemaFactory(SerializerProvider provider) {\n+\t\tsuper(provider);\n+\t\tbooleanSchema = new BooleanSchema();\n+\t}\n+\n \tpublic ValueTypeSchema getValueSchema() {\n \t\treturn booleanSchema;\n \t}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/IntegerSchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/IntegerSchemaFactory.java\n package com.fasterxml.jackson.databind.jsonschema.factories;\n \n+import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonschema.types.IntegerSchema;\n import com.fasterxml.jackson.databind.jsonschema.types.ValueTypeSchema;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonIntegerFormatVisitor;\n \t\tintegerSchema = new IntegerSchema();\n \t}\n \n+\t/**\n+\t * @param provider\n+\t */\n+\tpublic IntegerSchemaFactory(SerializerProvider provider) {\n+\t\tsuper(provider);\n+\t\tintegerSchema = new IntegerSchema();\n+\t}\n+\n \tpublic ValueTypeSchema getValueSchema() {\n \t\treturn integerSchema;\n \t}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/NullSchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/NullSchemaFactory.java\n package com.fasterxml.jackson.databind.jsonschema.factories;\n \n+import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonschema.types.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.types.NullSchema;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonNullFormatVisitor;\n \t\tnullSchema = new NullSchema();\n \t}\n \n+\t/**\n+\t * @param provider\n+\t */\n+\tpublic NullSchemaFactory(SerializerProvider provider) {\n+\t\tparent = null;\n+\t\tsetProvider(provider);\n+\t\tnullSchema = new NullSchema();\n+\t}\n+\n \tpublic JsonSchema getSchema() {\n \t\treturn nullSchema;\n \t}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/NumberSchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/NumberSchemaFactory.java\n package com.fasterxml.jackson.databind.jsonschema.factories;\n \n+import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonschema.types.NumberSchema;\n import com.fasterxml.jackson.databind.jsonschema.types.ValueTypeSchema;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonNumberFormatVisitor;\n \t\tnumberSchema = new NumberSchema();\n \t}\n \n+\t/**\n+\t * @param provider\n+\t */\n+\tpublic NumberSchemaFactory(SerializerProvider provider) {\n+\t\tsuper(provider);\n+\t\tnumberSchema = new NumberSchema();\n+\t}\n+\n \t@Override\n \tprotected ValueTypeSchema getValueSchema() {\n \t\treturn numberSchema;\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ObjectSchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ObjectSchemaFactory.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonschema.JsonFormatVisitorAware;\n+import com.fasterxml.jackson.databind.jsonschema.SchemaFactoryProvider;\n import com.fasterxml.jackson.databind.jsonschema.types.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.types.ObjectSchema;\n import com.fasterxml.jackson.databind.jsonschema.types.SchemaType;\n \t\tobjectSchema = new ObjectSchema();\n \t}\n \t\n+\t/**\n+\t * @param provider\n+\t */\n+\tpublic ObjectSchemaFactory(SerializerProvider provider) {\n+\t\tparent = null;\n+\t\tsetProvider(provider);\n+\t\tobjectSchema = new ObjectSchema();\n+\t}\n+\n \tpublic JsonSchema getSchema() {\n \t\treturn objectSchema;\n \t}\n \t}\t\n \t\n \tprotected JsonSchema propertySchema(BeanPropertyWriter writer) {\n-\t\tSchemaFactory visitor = new SchemaFactory();\n+\t\tSchemaFactoryProvider visitor = new SchemaFactoryProvider();\n \t\tvisitor.setProvider(provider);\n \t\tJsonSerializer<Object> ser = getSer(writer);\n \t\tif (ser != null && ser instanceof JsonFormatVisitorAware) {\n \t\t\t((JsonFormatVisitorAware)ser).acceptJsonFormatVisitor(visitor, writer.getType());\n \t\t} else {\n-\t\t\tvisitor.anyFormat(writer.getType());\n+\t\t\tvisitor.expectAnyFormat(writer.getType());\n \t\t}\n \t\treturn visitor.finalSchema();\n \t}\n \t\n \tprotected JsonSchema propertySchema(JsonFormatVisitorAware handler, JavaType propertyTypeHint) {\n-\t\tSchemaFactory visitor = new SchemaFactory();\n+\t\tSchemaFactoryProvider visitor = new SchemaFactoryProvider();\n \t\tvisitor.setProvider(provider);\n \t\thandler.acceptJsonFormatVisitor(visitor, propertyTypeHint);\n \t\treturn visitor.finalSchema();\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/SchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/SchemaFactory.java\n package com.fasterxml.jackson.databind.jsonschema.factories;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.jsonschema.types.JsonSchema;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonAnyFormatVisitor;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonArrayFormatVisitor;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonBooleanFormatVisitor;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonIntegerFormatVisitor;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonNullFormatVisitor;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonNumberFormatVisitor;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonObjectFormatVisitor;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonStringFormatVisitor;\n \n-public class SchemaFactory implements JsonFormatVisitor {\n+public abstract class SchemaFactory {\n \n-\tprivate SchemaFactoryDelegate delegate;\n+\t\n \tprotected SerializerProvider provider;\n \n \tpublic SchemaFactory() {\n \t}\n \n-\tpublic JsonAnyFormatVisitor anyFormat(JavaType convertedType) {\n-\t\tdelegate = new AnySchemaFactory(this);\n-\t\treturn (JsonAnyFormatVisitor) delegate;\n-\t}\n-\n-\tpublic JsonArrayFormatVisitor arrayFormat(JavaType convertedType) {\n-\t\tdelegate = new ArraySchemaFactory(this);\n-\t\treturn (JsonArrayFormatVisitor) delegate;\n-\t}\n-\n-\tpublic JsonBooleanFormatVisitor booleanFormat(JavaType convertedType) {\n-\t\tdelegate = new BooleanSchemaFactory(this);\n-\t\treturn (JsonBooleanFormatVisitor) delegate;\n-\t}\n-\n-\tpublic JsonSchema finalSchema() {\n-\t\tassert delegate != null : \"SchemaFactory must envoke a delegate method before it can return a JsonSchema.\";\n-\t\tif (delegate == null) {\n-\t\t\treturn null;\n-\t\t} else {\n-\t\t\treturn delegate.getSchema();\n-\t\t}\n-\n-\t}\n+\t\n \n \t/**\n \t * {@link SchemaFactory#provider}\n \t\treturn provider;\n \t}\n \n-\tpublic JsonIntegerFormatVisitor integerFormat(JavaType convertedType) {\n-\t\tdelegate = new IntegerSchemaFactory(this);\n-\t\treturn (JsonIntegerFormatVisitor) delegate;\n-\t}\n-\n-\tpublic JsonNullFormatVisitor nullFormat(JavaType convertedType) {\n-\t\tdelegate = new NullSchemaFactory(this);\n-\t\treturn (JsonNullFormatVisitor) delegate;\n-\t}\n-\n-\tpublic JsonNumberFormatVisitor numberFormat(JavaType convertedType) {\n-\t\tdelegate = new NumberSchemaFactory(this);\n-\t\treturn (JsonNumberFormatVisitor) delegate;\n-\t}\n-\n-\tpublic JsonObjectFormatVisitor objectFormat(JavaType convertedType) {\n-\t\t// BasicClassIntrospector.instance.\n-\t\tdelegate = new ObjectSchemaFactory(this);\n-\t\treturn (JsonObjectFormatVisitor) delegate;\n-\t}\n-\n-\tpublic JsonStringFormatVisitor stringFormat(JavaType convertedType) {\n-\t\tdelegate = new StringSchemaFactory(this);\n-\t\treturn (JsonStringFormatVisitor) delegate;\n-\t}\n-\n+\t\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/StringSchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/StringSchemaFactory.java\n package com.fasterxml.jackson.databind.jsonschema.factories;\n \n+import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonschema.types.StringSchema;\n import com.fasterxml.jackson.databind.jsonschema.types.ValueTypeSchema;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonStringFormatVisitor;\n \t\tstringSchema = new StringSchema();\n \t}\n \n+\t/**\n+\t * @param provider\n+\t */\n+\tpublic StringSchemaFactory(SerializerProvider provider) {\n+\t\tsuper(provider);\n+\t\tstringSchema = new StringSchema();\n+\t}\n+\n \tpublic ValueTypeSchema getValueSchema() {\n \t\treturn stringSchema;\n \t}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ValueTypeSchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ValueTypeSchemaFactory.java\n \n import java.util.Set;\n \n+import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonschema.types.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.types.JsonValueFormat;\n import com.fasterxml.jackson.databind.jsonschema.types.ValueTypeSchema;\n \tprotected ValueTypeSchemaFactory(SchemaFactory parent) {\n \t\tthis.parent = parent;\n \t\tsetProvider(parent.getProvider());\n+\t}\n+\n+\t/**\n+\t * @param provider\n+\t */\n+\tpublic ValueTypeSchemaFactory(SerializerProvider provider) {\n+\t\tparent = null;\n+\t\tsetProvider(provider);\n \t}\n \n \tpublic JsonSchema getSchema() {\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonArrayFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonArrayFormatVisitor.java\n import com.fasterxml.jackson.databind.jsonschema.JsonFormatVisitorAware;\n import com.fasterxml.jackson.databind.jsonschema.types.SchemaType;\n \n-public interface JsonArrayFormatVisitor {\n+public interface JsonArrayFormatVisitor extends JsonFormatVisitorWithSerializerProvider {\n \n \tvoid itemsFormat(JavaType contentType);\n \n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonFormatVisitorWithSerializerProvider.java\n+/**\n+ * \n+ */\n+package com.fasterxml.jackson.databind.jsonschema.visitors;\n+\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+\n+/**\n+ * @author jphelan\n+ *\n+ */\n+public interface JsonFormatVisitorWithSerializerProvider {\n+\n+\tpublic SerializerProvider getProvider();\n+\tpublic abstract void setProvider(SerializerProvider provider);\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonFormatVisitorWrapper.java\n+package com.fasterxml.jackson.databind.jsonschema.visitors;\n+\n+import com.fasterxml.jackson.databind.JavaType;\n+\n+public interface JsonFormatVisitorWrapper extends JsonFormatVisitorWithSerializerProvider{\n+\n+\tpublic JsonObjectFormatVisitor expectObjectFormat(JavaType convertedType);\n+\tpublic JsonArrayFormatVisitor expectArrayFormat(JavaType convertedType);\n+\tpublic JsonStringFormatVisitor expectStringFormat(JavaType convertedType);\n+\tpublic JsonNumberFormatVisitor expectNumberFormat(JavaType convertedType);\n+\tpublic JsonIntegerFormatVisitor expectIntegerFormat(JavaType convertedType);\n+\tpublic JsonBooleanFormatVisitor expectBooleanFormat(JavaType convertedType);\n+\tpublic JsonNullFormatVisitor expectNullFormat(JavaType convertedType);\n+\tpublic JsonAnyFormatVisitor expectAnyFormat(JavaType convertedType);\n+\t\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonObjectFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonObjectFormatVisitor.java\n import com.fasterxml.jackson.databind.jsonschema.JsonFormatVisitorAware;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n \n-public interface JsonObjectFormatVisitor extends JsonFormatVisitor {\n+public interface JsonObjectFormatVisitor extends JsonFormatVisitorWithSerializerProvider {\n \n \tpublic void property(BeanPropertyWriter writer);\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n import com.fasterxml.jackson.databind.jsonschema.JsonFormatVisitorAware;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n \n      *\n      * @param type The type for which to generate schema\n      */\n-    public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitor visitor)\n+    public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitorWrapper visitor)\n         throws JsonMappingException\n     {\n         if (type == null) {\n         if (ser instanceof JsonFormatVisitorAware) {\n         \t((JsonFormatVisitorAware) ser).acceptJsonFormatVisitor(visitor, constructType(type));\n         } else {\n-        \tvisitor.anyFormat(constructType(type));\n+        \tvisitor.expectAnyFormat(constructType(type));\n         }\n     }\n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java\n \n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n /**\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n         ;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonschema.types.SchemaType;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n-    \tvisitor.arrayFormat(null).itemsFormat(SchemaType.STRING);\n+    \tvisitor.expectArrayFormat(null).itemsFormat(SchemaType.STRING);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) { \n-    \tvisitor.anyFormat(typeHint);\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) { \n+    \tvisitor.expectAnyFormat(typeHint);\n     }\n \n     protected void failForEmpty(Object value) throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n import com.fasterxml.jackson.databind.SerializationFeature;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonArrayFormatVisitor;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n         throws IOException, JsonGenerationException;\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n         /* 15-Jan-2010, tatu: This should probably be rewritten, given that\n          *    more information about content type is actually being explicitly\n          */\n         //ObjectNode o = createSchemaNode(\"array\", true);\n         JsonArrayFormatVisitor arrayVisitor = \n-        \t\tvisitor.arrayFormat(typeHint);\n+        \t\tvisitor.expectArrayFormat(typeHint);\n         JavaType contentType = null;\n         if (typeHint != null) {\n             contentType = typeHint.getContentType();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n import com.fasterxml.jackson.databind.jsonschema.JsonFormatVisitorAware;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n         return filter;\n     }\n     \n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-    {\n-    \tJsonObjectFormatVisitor objectVisitor = visitor.objectFormat(typeHint);\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \t//deposit your output format \n+    \tJsonObjectFormatVisitor objectVisitor = visitor.expectObjectFormat(typeHint);\n  \n         if (_propertyFilterId != null) {\n         \ttry {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n \n /**\n  * Serializer used for primitive boolean, as well as java.util.Boolean\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n-        visitor.booleanFormat(typeHint);\n+        visitor.expectBooleanFormat(typeHint);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.jsonschema.types.JsonValueFormat;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n import com.fasterxml.jackson.databind.util.StdDateFormat;\n \n \n     protected abstract long _timestamp(T value);\n     \n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n         //todo: (ryan) add a format for the date in the schema?\n         boolean asNumber = _useTimestamp;\n             }\n         }\n         if (asNumber) {\n-        \tvisitor.numberFormat(typeHint).format(JsonValueFormat.UTC_MILLISEC);\n+        \tvisitor.expectNumberFormat(typeHint).format(JsonValueFormat.UTC_MILLISEC);\n         } else {\n-        \tvisitor.stringFormat(typeHint).format(JsonValueFormat.DATE_TIME);\n+        \tvisitor.expectStringFormat(typeHint).format(JsonValueFormat.DATE_TIME);\n         }\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonschema.JsonFormatVisitorAware;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-    {\n-    \tJsonObjectFormatVisitor objectVisitor = visitor.objectFormat(typeHint);\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \tJsonObjectFormatVisitor objectVisitor = visitor.expectObjectFormat(typeHint);\n         if (typeHint instanceof ParameterizedType) {\n             Type[] typeArgs = ((ParameterizedType) typeHint).getActualTypeArguments();\n             if (typeArgs.length == 2) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n import com.fasterxml.jackson.databind.SerializationFeature;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonStringFormatVisitor;\n import com.fasterxml.jackson.databind.util.EnumValues;\n \n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n         // [JACKSON-684]: serialize as index?\n     \tif (visitor.getProvider().isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX)) {\n-    \t\tvisitor.integerFormat(typeHint);\n+    \t\tvisitor.expectIntegerFormat(typeHint);\n     \t} else {\n-    \t\tJsonStringFormatVisitor stringVisitor = visitor.stringFormat(typeHint);\n+    \t\tJsonStringFormatVisitor stringVisitor = visitor.expectStringFormat(typeHint);\n     \t\tif (typeHint != null) {\n     \t\t\tif (typeHint.isEnumType()) {\n     \t\t\t\tSet<String> enums = new HashSet<String>();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonschema.JsonFormatVisitorAware;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.BeanSerializer;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n     \tif (_valueSerializer instanceof JsonFormatVisitorAware) {\n     \t\t((JsonFormatVisitorAware) _valueSerializer).acceptJsonFormatVisitor(visitor, null); \n     \t} else {\n-    \t\tvisitor.anyFormat(typeHint);\n+    \t\tvisitor.expectAnyFormat(typeHint);\n     \t}\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n import com.fasterxml.jackson.databind.SerializationFeature;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-    {\n-    \tvisitor.objectFormat(null);\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \tvisitor.expectObjectFormat(null);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n \n /**\n  * This is a simple dummy serializer that will just output literal\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n-    \tvisitor.nullFormat(typeHint);\n+    \tvisitor.expectNullFormat(typeHint);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n \n /**\n  * Container class for serializers used for handling standard JDK-provided types.\n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.integerFormat(typeHint);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectIntegerFormat(typeHint);\n         }\n     }\n \n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.integerFormat(typeHint);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectIntegerFormat(typeHint);\n         }\n     }\n \n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.numberFormat(typeHint);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectNumberFormat(typeHint);\n         }\n     }\n     \n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.numberFormat(typeHint);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectNumberFormat(typeHint);\n         }\n     }\n \n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.numberFormat(typeHint);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectNumberFormat(typeHint);\n         }\n     }\n     \n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.numberFormat(typeHint);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectNumberFormat(typeHint);\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-    {\n-    \tvisitor.arrayFormat(typeHint).itemsFormat(_elementType);\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+    \tvisitor.expectArrayFormat(typeHint).itemsFormat(_elementType);\n     }\n \n     protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n-        visitor.stringFormat(typeHint);\n+        visitor.expectStringFormat(typeHint);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n-    \tvisitor.anyFormat(typeHint);\n+    \tvisitor.expectAnyFormat(typeHint);\n     }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonschema.types.JsonValueFormat;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n \n /**\n  * Compared to regular {@link java.util.Date} serialization, we do use String\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n-    \tvisitor.stringFormat(typeHint).format(JsonValueFormat.DATE_TIME);\n+    \tvisitor.expectStringFormat(typeHint).format(JsonValueFormat.DATE_TIME);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonschema.types.JsonValueFormat;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n \n @JacksonStdImpl\n public class SqlTimeSerializer\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n-    \tvisitor.stringFormat(typeHint).format(JsonValueFormat.DATE_TIME);\n+    \tvisitor.expectStringFormat(typeHint).format(JsonValueFormat.DATE_TIME);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java\n \n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonArrayFormatVisitor;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n \n /**\n  * Intermediate base class for Lists, Collections and Arrays\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n-    \tacceptContentVisitor(visitor.arrayFormat(typeHint));\n+    \tacceptContentVisitor(visitor.expectArrayFormat(typeHint));\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonschema.types.SchemaType;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.arrayFormat(typeHint).itemsFormat(SchemaType.BOOLEAN);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(SchemaType.BOOLEAN);\n         }\n     }\n \n         }\n         \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.arrayFormat(typeHint).itemsFormat(SchemaType.STRING);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(SchemaType.STRING);\n         }\n     }\n \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.arrayFormat(typeHint).itemsFormat(SchemaType.INTEGER);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(SchemaType.INTEGER);\n         }\n     }\n \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.arrayFormat(typeHint).itemsFormat(SchemaType.STRING);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(SchemaType.STRING);\n         }\n     }\n \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.arrayFormat(typeHint).itemsFormat(SchemaType.INTEGER);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(SchemaType.INTEGER);\n         }\n     }\n \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.arrayFormat(typeHint).itemsFormat(SchemaType.NUMBER);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(SchemaType.NUMBER);\n         }\n     }\n \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.arrayFormat(typeHint).itemsFormat(SchemaType.NUMBER);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(SchemaType.NUMBER);\n         }\n     }\n \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.arrayFormat(typeHint).itemsFormat(SchemaType.NUMBER);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(SchemaType.NUMBER);\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.BasicSerializerFactory;\n import com.fasterxml.jackson.databind.util.Provider;\n \n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.booleanFormat(typeHint);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectBooleanFormat(typeHint);\n         }\n     }\n     \n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.integerFormat(typeHint);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectIntegerFormat(typeHint);\n         }\n     }\n \n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.integerFormat(typeHint);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectIntegerFormat(typeHint);\n         }\n     }\n     \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.anyFormat(typeHint);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectAnyFormat(typeHint);\n         }\n     }\n     \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.stringFormat(typeHint);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectStringFormat(typeHint);\n         }\n     }\n \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.stringFormat(typeHint);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+        {\n+        \tvisitor.expectStringFormat(typeHint);\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n \n /**\n  * Specialized serializer that can be used as the generic key\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n-    \tvisitor.stringFormat(typeHint);\n+    \tvisitor.expectStringFormat(typeHint);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n public abstract class StdScalarSerializer<T>\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n-        visitor.anyFormat(typeHint);\n+        visitor.expectAnyFormat(typeHint);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonschema.JsonFormatVisitorAware;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n \n /**\n  * Base class used by all standard serializers, and can also\n      * overriden by custom serializers.\n      */\n //  @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) { \n-    \tvisitor.anyFormat(typeHint);\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) { \n+    \tvisitor.expectAnyFormat(typeHint);\n     }\n             \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n \n /**\n  * This is the special serializer for regular {@link java.lang.String}s.\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n-    \tvisitor.stringFormat(typeHint);\n+    \tvisitor.expectStringFormat(typeHint);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n-    \tvisitor.stringFormat(typeHint);\n+    \tvisitor.expectStringFormat(typeHint);\n     }\n     \n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n         /* 01-Jan-2010, tatu: Not 100% sure what we should say here:\n          *   type is basically not known. This seems closest\n          *   approximation\n          */\n-    \tvisitor.anyFormat(typeHint);\n+    \tvisitor.expectAnyFormat(typeHint);\n     }\n }    \n--- a/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n         throws Exception\n     {\n         ObjectMapper m = new ObjectMapper();\n-        SchemaFactory visitor = new SchemaFactory();\n+        SchemaFactoryProvider visitor = new SchemaFactoryProvider();\n         m.acceptJsonFormatVisitor(SimpleBean.class, visitor);\n         JsonSchema jsonSchema = visitor.finalSchema();\n         \n     public void testGeneratingJsonSchemaWithFilters() throws Exception {\n     \tObjectMapper mapper = new ObjectMapper();\n     \tmapper.setFilters(secretFilterProvider);\n-    \tSchemaFactory visitor = new SchemaFactory();\n+    \tSchemaFactoryProvider visitor = new SchemaFactoryProvider();\n         mapper.acceptJsonFormatVisitor(FilteredBean.class, visitor);\n         JsonSchema jsonSchema = visitor.finalSchema();\n     \tassertNotNull(jsonSchema);\n     public void testSchemaSerialization()\n             throws Exception\n     {\n-    \tSchemaFactory visitor = new SchemaFactory();\n+    \tSchemaFactoryProvider visitor = new SchemaFactoryProvider();\n         MAPPER.acceptJsonFormatVisitor(SimpleBean.class, visitor);\n         JsonSchema jsonSchema = visitor.finalSchema();\n         Map<String,Object> result = writeAndMap(MAPPER, jsonSchema);\n     {\n         // not ok to pass null\n         try {\n-        \tSchemaFactory visitor = new SchemaFactory();\n+        \tSchemaFactoryProvider visitor = new SchemaFactoryProvider();\n             MAPPER.acceptJsonFormatVisitor(null, visitor);\n             JsonSchema jsonSchema = visitor.finalSchema();\n             fail(\"Should have failed\");\n      */\n     public void testThatObjectsHaveNoItems() throws Exception\n     {\n-    \tSchemaFactory visitor = new SchemaFactory();\n+    \tSchemaFactoryProvider visitor = new SchemaFactoryProvider();\n         MAPPER.acceptJsonFormatVisitor(TrivialBean.class, visitor);\n         JsonSchema jsonSchema = visitor.finalSchema();\n         Map<String,Object> result = writeAndMap(MAPPER, jsonSchema);\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\", \"serial\" })\n \tpublic void testSchemaId() throws Exception\n     {\n-    \tSchemaFactory visitor = new SchemaFactory();\n+    \tSchemaFactoryProvider visitor = new SchemaFactoryProvider();\n         MAPPER.acceptJsonFormatVisitor(BeanWithId.class, visitor);\n         JsonSchema jsonSchema = visitor.finalSchema();\n         Map<String,Object> result = writeAndMap(MAPPER, jsonSchema);\n--- a/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestReadJsonSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestReadJsonSchema.java\n     public void testDeserializeSimple() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        SchemaFactory visitor = new SchemaFactory();\n+        SchemaFactoryProvider visitor = new SchemaFactoryProvider();\n         mapper.acceptJsonFormatVisitor(Schemable.class, visitor);\n         JsonSchema jsonSchema = visitor.finalSchema();\n         assertNotNull(jsonSchema);\n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.module.SimpleDeserializers;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.fasterxml.jackson.databind.module.SimpleSerializers;\n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {\n-            visitor.anyFormat(typeHint);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) {\n+            visitor.expectAnyFormat(typeHint);\n         }\n     }\n     \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {\n-            visitor.anyFormat(typeHint);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) {\n+            visitor.expectAnyFormat(typeHint);\n         }\n     }\n ", "timestamp": 1344371100, "metainfo": ""}