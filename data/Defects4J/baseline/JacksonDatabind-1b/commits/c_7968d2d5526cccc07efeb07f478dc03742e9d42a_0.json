{"sha": "7968d2d5526cccc07efeb07f478dc03742e9d42a", "log": "Continue work on [Issue#120]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java\n import com.fasterxml.jackson.core.Version;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n \n /**\n  * Simple {@link Module} implementation that allows registration\n     protected SimpleValueInstantiators _valueInstantiators = null;\n \n     /**\n+     * @since 2.2\n+     */\n+    protected BeanDeserializerModifier _deserializerModifier = null;\n+\n+    /**\n+     * @since 2.2\n+     */\n+    protected BeanSerializerModifier _serializerModifier = null;\n+\n+    /**\n      * Lazily-constructed map that contains mix-in definitions, indexed\n      * by target class, value being mix-in to apply.\n      */\n     public void setValueInstantiators(SimpleValueInstantiators svi) {\n         _valueInstantiators = svi;\n     }\n+\n+    /**\n+     * @since 2.2\n+     */\n+    public SimpleModule setDeserializerModifier(BeanDeserializerModifier mod) {\n+        _deserializerModifier = mod;\n+        return this;\n+    }\n+\n+    /**\n+     * @since 2.2\n+     */\n+    public SimpleModule setSerializerModifier(BeanSerializerModifier mod) {\n+        _serializerModifier = mod;\n+        return this;\n+    }\n     \n     /*\n     /**********************************************************\n         if (_valueInstantiators != null) {\n             context.addValueInstantiators(_valueInstantiators);\n         }\n+        if (_deserializerModifier != null) {\n+            context.addBeanDeserializerModifier(_deserializerModifier);\n+        }\n+        if (_serializerModifier != null) {\n+            context.addBeanSerializerModifier(_serializerModifier);\n+        }\n         if (_subtypes != null && _subtypes.size() > 0) {\n             context.registerSubtypes(_subtypes.toArray(new NamedType[_subtypes.size()]));\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n import com.fasterxml.jackson.databind.deser.BeanDeserializer;\n import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;\n import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n+import com.fasterxml.jackson.databind.type.ArrayType;\n \n @SuppressWarnings(\"serial\")\n public class TestBeanDeserializer extends BaseMapTest\n             context.addBeanDeserializerModifier(new Issue476DeserializerModifier());\n         }        \n     }\n+\n+    \n+    // [Issue#121], arrays:\n+\n+    static class ArrayListModifier extends BeanDeserializerModifier {\n+        public JsonDeserializer<?> modifyArrayDeserializer(DeserializationConfig config,\n+                ArrayType valueType,\n+                BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n+            return (JsonDeserializer<?>) new StdDeserializer<Object>(Object.class) {\n+                @Override\n+                public Object deserialize(JsonParser jp,\n+                        DeserializationContext ctxt) throws IOException,\n+                        JsonProcessingException {\n+                    return new String[] { \"foo\" };\n+                }\n+            };\n+        }\n+    }\n     \n     /*\n     /********************************************************\n         Bean result = mapper.readValue(quote(\"\"), Bean.class);\n         assertNull(result);\n     }\n+\n+    // [Issue#120]\n+    public void testModifyArrayDeserializer() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new SimpleModule(\"test\")\n+            .setDeserializerModifier(new ArrayListModifier()));\n+        Object[] result = mapper.readValue(\"[1,2]\", Object[].class);\n+        assertEquals(1, result.length);\n+        assertEquals(\"foo\", result[0]);\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n         @JsonIgnore\n         public String name = \"foo\";\n     }\n-    \n+\n     static class EmptyBeanModifier extends BeanSerializerModifier\n     {\n         @Override", "timestamp": 1354322243, "metainfo": ""}