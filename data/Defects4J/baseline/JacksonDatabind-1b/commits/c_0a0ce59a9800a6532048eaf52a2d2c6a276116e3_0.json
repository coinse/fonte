{"sha": "0a0ce59a9800a6532048eaf52a2d2c6a276116e3", "log": "First working version of prefix-for-unwrapped; may want to generalize to allow other kinds of name mangling strategies", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n     /**\n      * Method called to check whether given property is marked to be \"unwrapped\"\n      * when being serialized (and appropriately handled in reverse direction,\n-     * i.e. expect unwrapped representation during deserialization)\n-     */\n-    public Boolean shouldUnwrapProperty(AnnotatedMember member) {\n+     * i.e. expect unwrapped representation during deserialization).\n+     * Return value is the prefix to use for properties (empty String\n+     * meaning no prefix), if not null; or null to indicate that no\n+     * unwrapping is expected.\n+     */\n+    public String findUnwrapPrefix(AnnotatedMember member) {\n         return null;\n     }\n \n      * annotations from multiple accessors (getters, setters, fields,\n      * constructor parameters).\n      */\n-    public boolean hasIgnoreMarker(AnnotatedMember m)\n-    {\n+    public boolean hasIgnoreMarker(AnnotatedMember m) {\n         return false;\n     }\n \n         }\n \n         @Override        \n-        public Boolean shouldUnwrapProperty(AnnotatedMember member)\n-        {\n-            Boolean value = _primary.shouldUnwrapProperty(member);\n+        public String findUnwrapPrefix(AnnotatedMember member)\n+        {\n+            String value = _primary.findUnwrapPrefix(member);\n             if (value == null) {\n-                value = _secondary.shouldUnwrapProperty(member);\n+                value = _secondary.findUnwrapPrefix(member);\n             }\n             return value;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n      * Default implementation just returns 'this'\n      * indicating that no unwrapped variant exists\n      */\n-    public JsonDeserializer<T> unwrappingDeserializer() {\n+    public JsonDeserializer<T> unwrappingDeserializer(String prefix) {\n         return this;\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n      *<p>\n      * Default implementation just returns serializer as-is,\n      * indicating that no unwrapped variant exists\n+     * \n+     * @param prefix Prefix to use for embedded properties, if any\n      */\n-    public JsonSerializer<T> unwrappingSerializer() {\n+    public JsonSerializer<T> unwrappingSerializer(String prefix) {\n         return this;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n     protected BeanDeserializer(BeanDeserializer src, boolean ignoreAllUnknown)\n     {\n         super(src._beanType);\n-    \n+        \n         _forClass = src._forClass;\n         _beanType = src._beanType;\n         _property = src._property;\n         _valueInstantiator = src._valueInstantiator;\n         _delegateDeserializer = src._delegateDeserializer;\n         _propertyBasedCreator = src._propertyBasedCreator;\n-\n+        \n         _beanProperties = src._beanProperties;\n         _backRefs = src._backRefs;\n         _ignorableProps = src._ignorableProps;\n         _ignoreAllUnknown = ignoreAllUnknown;\n         _anySetter = src._anySetter;\n         _injectables = src._injectables;\n-\n+        \n         _nonStandardCreation = src._nonStandardCreation;\n         _unwrappedPropertyHandler = src._unwrappedPropertyHandler;\n     }\n+    \n+    protected BeanDeserializer(BeanDeserializer src, String unwrapPrefix)\n+    {\n+        super(src._beanType);\n+    \n+        _forClass = src._forClass;\n+        _beanType = src._beanType;\n+        _property = src._property;\n+        \n+        _valueInstantiator = src._valueInstantiator;\n+        _delegateDeserializer = src._delegateDeserializer;\n+        _propertyBasedCreator = src._propertyBasedCreator;\n+\n+        _beanProperties = src._beanProperties.withPrefix(unwrapPrefix);\n+\n+        _backRefs = src._backRefs;\n+        _ignorableProps = src._ignorableProps;\n+        _ignoreAllUnknown = (unwrapPrefix != null) || src._ignoreAllUnknown;\n+        _anySetter = src._anySetter;\n+        _injectables = src._injectables;\n+\n+        _nonStandardCreation = src._nonStandardCreation;\n+        _unwrappedPropertyHandler = src._unwrappedPropertyHandler;\n+    }\n \n     @Override\n-    public JsonDeserializer<Object> unwrappingDeserializer()\n+    public JsonDeserializer<Object> unwrappingDeserializer(String prefix)\n     {\n         /* bit kludgy but we don't want to accidentally change type;\n          * sub-classes MUST override this method to support unwrapped\n          * properties; since there may be multiple unwrapped values\n          * and properties for all may be interleaved...\n          */\n-        return new BeanDeserializer(this, true);\n+        return new BeanDeserializer(this, prefix);\n     }\n     \n     /*\n     /**\n      * Helper method called to see if given property is part of 'managed' property\n      * pair (managed + back reference), and if so, handle resolution details.\n-     * \n-     * @since 1.9\n      */\n     protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationConfig config,\n             SettableBeanProperty prop)\n     /**\n      * Helper method called to see if given property might be so-called unwrapped\n      * property: these require special handling.\n-     * \n-     * @since 1.9\n      */\n     protected SettableBeanProperty _resolveUnwrappedProperty(DeserializationConfig config,\n             SettableBeanProperty prop)\n     {\n         AnnotatedMember am = prop.getMember();\n-        if (am != null && config.getAnnotationIntrospector().shouldUnwrapProperty(am) == Boolean.TRUE) {\n-            JsonDeserializer<Object> orig = prop.getValueDeserializer();\n-            JsonDeserializer<Object> unwrapping = orig.unwrappingDeserializer();\n-            if (unwrapping != orig && unwrapping != null) {\n-                // might be cleaner to create new instance; but difficult to do reliably, so:\n-                return prop.withValueDeserializer(unwrapping);\n+        if (am != null) {\n+            String prefix = config.getAnnotationIntrospector().findUnwrapPrefix(am);\n+            if (prefix != null) {\n+                JsonDeserializer<Object> orig = prop.getValueDeserializer();\n+                JsonDeserializer<Object> unwrapping = orig.unwrappingDeserializer(prefix);\n+                if (unwrapping != orig && unwrapping != null) {\n+                    // might be cleaner to create new instance; but difficult to do reliably, so:\n+                    return prop.withValueDeserializer(unwrapping);\n+                }\n             }\n         }\n         return null;\n     /**\n      * Helper method that will handle gruesome details of dealing with properties\n      * that have non-static inner class as value...\n-     * \n-     * @since 1.9\n      */\n     protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationConfig config,\n             SettableBeanProperty prop)\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n         _injectableValueId = injectableValueId;\n     }\n \n+    protected CreatorProperty(CreatorProperty src, String newName) {\n+        super(src, newName);\n+        _annotated = src._annotated;\n+        _injectableValueId = src._injectableValueId;\n+    }\n+    \n     protected CreatorProperty(CreatorProperty src, JsonDeserializer<Object> deser) {\n         super(src, deser);\n         _annotated = src._annotated;\n         _injectableValueId = src._injectableValueId;\n+    }\n+\n+    @Override\n+    public CreatorProperty withName(String newName) {\n+        return new CreatorProperty(this, newName);\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n      * Object used to figure out value to be used when 'null' literal is encountered in JSON.\n      * For most types simply Java null, but for primitive types must\n      * be a non-null value (like Integer.valueOf(0) for int).\n-     * \n-     * @since 1.7\n      */\n     protected NullProvider _nullProvider;\n \n      * when all properties have been collected. Order of entries\n      * is arbitrary, but once indexes are assigned they are not\n      * changed.\n-     * \n-     * @since 1.7\n      */\n     protected int _propertyIndex = -1;\n     \n \n     /**\n      * Basic copy-constructor for sub-classes to use.\n-     * \n-     * @since 1.9\n      */\n     protected SettableBeanProperty(SettableBeanProperty src)\n     {\n \n     /**\n      * Copy-with-deserializer-change constructor for sub-classes to use.\n-     * \n-     * @since 1.9\n      */\n     protected SettableBeanProperty(SettableBeanProperty src, JsonDeserializer<Object> deser)\n     {\n         }\n     }\n \n+    /**\n+     * Copy-with-deserializer-change constructor for sub-classes to use.\n+     */\n+    protected SettableBeanProperty(SettableBeanProperty src, String newName)\n+    {\n+        _propName = newName;\n+        _type = src._type;\n+        _contextAnnotations = src._contextAnnotations;\n+        _valueDeserializer = src._valueDeserializer;\n+        _valueTypeDeserializer = src._valueTypeDeserializer;\n+        _nullProvider = src._nullProvider;\n+        _managedReferenceName = src._managedReferenceName;\n+        _propertyIndex = src._propertyIndex;\n+    }\n+    \n     public abstract SettableBeanProperty withValueDeserializer(JsonDeserializer<Object> deser);\n+\n+    public abstract SettableBeanProperty withName(String newName);\n     \n     public void setManagedReferenceName(String n) {\n         _managedReferenceName = n;\n             _annotated = src._annotated;\n             _setter = src._setter;\n         }\n+\n+        protected MethodProperty(MethodProperty src, String newName) {\n+            super(src, newName);\n+            _annotated = src._annotated;\n+            _setter = src._setter;\n+        }\n+\n+        @Override\n+        public MethodProperty withName(String newName) {\n+            return new MethodProperty(this, newName);\n+        }\n         \n         @Override\n         public MethodProperty withValueDeserializer(JsonDeserializer<Object> deser) {\n             super(src, deser);\n             _annotated = src._annotated;\n             _getter = src._getter;\n+        }\n+\n+        protected SetterlessProperty(SetterlessProperty src, String newName) {\n+            super(src, newName);\n+            _annotated = src._annotated;\n+            _getter = src._getter;\n+        }\n+\n+        @Override\n+        public SetterlessProperty withName(String newName) {\n+            return new SetterlessProperty(this, newName);\n         }\n         \n         @Override\n             _annotated = src._annotated;\n             _field = src._field;\n         }\n+\n+        protected FieldProperty(FieldProperty src, String newName) {\n+            super(src, newName);\n+            _annotated = src._annotated;\n+            _field = src._field;\n+        }\n+\n+        @Override\n+        public FieldProperty withName(String newName) {\n+            return new FieldProperty(this, newName);\n+        }\n         \n         @Override\n         public FieldProperty withValueDeserializer(JsonDeserializer<Object> deser) {\n             _isContainer = src._isContainer;\n             _managedProperty = src._managedProperty;\n             _backProperty = src._backProperty;\n+        }\n+\n+        protected ManagedReferenceProperty(ManagedReferenceProperty src, String newName) {\n+            super(src, newName);\n+            _referenceName = src._referenceName;\n+            _isContainer = src._isContainer;\n+            _managedProperty = src._managedProperty;\n+            _backProperty = src._backProperty;\n+        }\n+\n+        @Override\n+        public ManagedReferenceProperty withName(String newName) {\n+            return new ManagedReferenceProperty(this, newName);\n         }\n         \n         @Override\n      * non-static inner class. If so, we will have to use a special\n      * alternative for default constructor; but otherwise can delegate\n      * to regular implementation.\n-     * \n-     * @since 1.9\n      */\n     public final static class InnerClassProperty\n         extends SettableBeanProperty\n             _delegate = src._delegate.withValueDeserializer(deser);\n             _creator = src._creator;\n         }\n-        \n+\n+        protected InnerClassProperty(InnerClassProperty src, String newName) {\n+            super(src, newName);\n+            _delegate = src._delegate.withName(newName);\n+            _creator = src._creator;\n+        }\n+\n+        @Override\n+        public InnerClassProperty withName(String newName) {\n+            return new InnerClassProperty(this, newName);\n+        }\n+\n         @Override\n         public InnerClassProperty withValueDeserializer(JsonDeserializer<Object> deser) {\n             return new InnerClassProperty(this, deser);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n  * is performance: although default implementation is very good for generic\n  * use cases, it can still be streamlined a bit for specific use case\n  * we have.\n- * \n- * @since 1.7\n  */\n public final class BeanPropertyMap\n {\n         _buckets = buckets;\n     }\n \n-    public void assignIndexes()\n+    /**\n+     * Factory method for constructing a map where all entries use given\n+     * prefix\n+     */\n+    public BeanPropertyMap withPrefix(String prefix)\n+    {\n+        if (prefix == null || prefix.length() == 0) {\n+            return this;\n+        }\n+        Iterator<SettableBeanProperty> it = allProperties();\n+        ArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>();\n+        while (it.hasNext()) {\n+            SettableBeanProperty prop = it.next();\n+            newProps.add(prop.withName(prefix + prop.getName()));\n+        }\n+        // should we try to re-index? Ordering probably changed but called probably doesn't want changes...\n+        return new BeanPropertyMap(newProps);\n+    }\n+    \n+    public BeanPropertyMap assignIndexes()\n     {\n         // order is arbitrary, but stable:\n         int index = 0;\n                 bucket = bucket.next;\n             }\n         }\n+        return this;\n     }\n     \n     private final static int findSize(int size)\n     /**\n      * Specialized method for removing specified existing entry.\n      * NOTE: entry MUST exist, otherwise an exception is thrown.\n-     * \n-     * @since 1.9\n      */\n     public void remove(SettableBeanProperty property)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java\n     /**\n      * Alternative constructor used when creating \"unwrapping\" deserializers\n      */\n-    protected ThrowableDeserializer(BeanDeserializer src, boolean ignoreAllUnknown)\n+    protected ThrowableDeserializer(BeanDeserializer src, String unwrapPrefix)\n     {\n-        super(src, ignoreAllUnknown);\n+        super(src, unwrapPrefix);\n     }\n     \n     @Override\n-    public JsonDeserializer<Object> unwrappingDeserializer()\n+    public JsonDeserializer<Object> unwrappingDeserializer(String prefix)\n     {\n         if (getClass() != ThrowableDeserializer.class) {\n             return this;\n          * properties; since there may be multiple unwrapped values\n          * and properties for all may be interleaved...\n          */\n-        return new ThrowableDeserializer(this, true);\n+        return new ThrowableDeserializer(this, prefix);\n     }\n \n     \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     }\n \n     @Override\n-    public Boolean shouldUnwrapProperty(AnnotatedMember member)\n+    public String findUnwrapPrefix(AnnotatedMember member)\n     {\n         JsonUnwrapped ann = member.getAnnotation(JsonUnwrapped.class);\n         // if not enabled, just means annotation is not enabled; not necessarily\n         // that unwrapping should not be done (relevant when using chained introspectors)\n-        return (ann != null && ann.enabled()) ? Boolean.TRUE : null;\n+        if (ann != null && ann.enabled()) {\n+            return ann.prefix();\n+        }\n+        return null;\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n     /**\n      * \"Copy constructor\" to be used by filtering sub-classes\n      */\n-    protected BeanPropertyWriter(BeanPropertyWriter base)\n-    {\n+    protected BeanPropertyWriter(BeanPropertyWriter base) {\n+        this(base, base._name);\n+    }\n+\n+    protected BeanPropertyWriter(BeanPropertyWriter base, SerializedString name)\n+    {\n+        _name = name;\n+\n         _member = base._member;\n         _contextAnnotations = base._contextAnnotations;\n         _declaredType = base._declaredType;\n         if (base._internalSettings != null) {\n             _internalSettings = new HashMap<Object,Object>(base._internalSettings);\n         }\n-        _name = base._name;\n         _cfgSerializationType = base._cfgSerializationType;\n         _dynamicSerializers = base._dynamicSerializers;\n         _suppressNulls = base._suppressNulls;\n         _typeSerializer = base._typeSerializer;\n         _nonTrivialBaseType = base._nonTrivialBaseType;\n     }\n-\n+    \n+    public BeanPropertyWriter withName(String newName) {\n+        if (newName.equals(_name.toString())) {\n+            return this;\n+        }\n+        return new BeanPropertyWriter(this, new SerializedString(newName));\n+    }\n+    \n     /**\n      * Method called to assign value serializer for property\n      * \n      * Method called create an instance that handles details of unwrapping\n      * contained value.\n      */\n-    public BeanPropertyWriter unwrappingWriter() {\n-        return new UnwrappingBeanPropertyWriter(this);\n+    public BeanPropertyWriter unwrappingWriter(String prefix) {\n+        return new UnwrappingBeanPropertyWriter(this, prefix);\n     }\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n     }\n \n     @Override\n-    public JsonSerializer<Object> unwrappingSerializer() {\n-        return new UnwrappingBeanSerializer(this);\n+    public JsonSerializer<Object> unwrappingSerializer(String prefix) {\n+        return new UnwrappingBeanSerializer(this, prefix);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/FilteredBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/FilteredBeanPropertyWriter.java\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-\n \n /**\n  * Decorated {@link BeanPropertyWriter} that will filter out properties\n         }\n \n         @Override\n+        public SingleView withName(String newName) {\n+            return new SingleView(_delegate.withName(newName), _view);\n+        }\n+        \n+        @Override\n         public void assignSerializer(JsonSerializer<Object> ser) {\n             _delegate.assignSerializer(ser);\n         }\n             _delegate = delegate;\n             _views = views;\n         }\n+\n+        @Override\n+        public MultiView withName(String newName) {\n+            return new MultiView(_delegate.withName(newName), _views);\n+        }\n         \n         @Override\n         public void assignSerializer(JsonSerializer<Object> ser) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n                 ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n         \n         // [JACKSON-132]: Unwrapping\n-        Boolean unwrapped = _annotationIntrospector.shouldUnwrapProperty(am);\n-        if (unwrapped != null && unwrapped.booleanValue()) {\n-            bpw = bpw.unwrappingWriter();\n+        String unwrapPrefix = _annotationIntrospector.findUnwrapPrefix(am);\n+        if (unwrapPrefix != null) {\n+            bpw = bpw.unwrappingWriter(unwrapPrefix);\n         }\n         return bpw;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java\n package com.fasterxml.jackson.databind.ser.impl;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.io.SerializedString;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.ser.*;\n-\n \n /**\n  * Variant of {@link BeanPropertyWriter} which will handle unwrapping\n public class UnwrappingBeanPropertyWriter\n     extends BeanPropertyWriter\n {\n-    public UnwrappingBeanPropertyWriter(BeanPropertyWriter base) {\n+    protected final String _prefix;\n+    \n+    public UnwrappingBeanPropertyWriter(BeanPropertyWriter base, String prefix) {\n         super(base);\n+        _prefix = (prefix == null || prefix.length() == 0) ? null : prefix;\n+    }\n+\n+    private UnwrappingBeanPropertyWriter(UnwrappingBeanPropertyWriter base, SerializedString name) {\n+        super(base);\n+        _prefix = base._prefix;\n+    }\n+\n+    @Override\n+    public UnwrappingBeanPropertyWriter withName(String newName) {\n+        if (newName.equals(_name.toString())) {\n+            return this;\n+        }\n+        return new UnwrappingBeanPropertyWriter(this, new SerializedString(newName));\n     }\n     \n     @Override\n             serializer = provider.findValueSerializer(type, this);\n         }\n         if (!serializer.isUnwrappingSerializer()) {\n-            serializer = serializer.unwrappingSerializer();\n+            serializer = serializer.unwrappingSerializer(_prefix);\n         }\n         _dynamicSerializers = _dynamicSerializers.newWith(type, serializer);\n         return serializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.ser.*;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n-\n \n public class UnwrappingBeanSerializer\n     extends BeanSerializerBase\n      * Constructor used for creating unwrapping instance of a\n      * standard <code>BeanSerializer</code>\n      */\n-    public UnwrappingBeanSerializer(BeanSerializerBase src) {\n-        super(src);\n+    public UnwrappingBeanSerializer(BeanSerializerBase src, String prefix) {\n+        super(src, prefix);\n     }\n \n     /*\n      */\n \n     @Override\n-    public JsonSerializer<Object> unwrappingSerializer() {\n-        // already unwrapping, nothing more to do:\n+    public JsonSerializer<Object> unwrappingSerializer(String prefix) {\n+        /* !!! 13-Jan-2011, tatu: do we need to do something here?\n+         *    Would this affect multi-level unwrapping?\n+         */\n         return this;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n     protected BeanSerializerBase(BeanSerializerBase src) {\n         this(src._handledType,\n                 src._props, src._filteredProps, src._anyGetterWriter, src._propertyFilterId);\n+    }\n+\n+    /**\n+     * Copy-constructor that will also rename properties with given prefix\n+     * (if it's non-empty)\n+     */\n+    protected BeanSerializerBase(BeanSerializerBase src, String propertyPrefix) {\n+        this(src._handledType,\n+                appendPrefix(src._props, propertyPrefix),\n+                appendPrefix(src._filteredProps, propertyPrefix),\n+                src._anyGetterWriter, src._propertyFilterId);\n+    }\n+\n+    private final static BeanPropertyWriter[] appendPrefix(BeanPropertyWriter[] props,\n+            String prefix)\n+    {\n+        if (prefix == null || prefix.length() == 0 || props == null || props.length == 0) {\n+            return props;\n+        }\n+        final int len = props.length;\n+        BeanPropertyWriter[] result = new BeanPropertyWriter[len];\n+        for (int i = 0; i < len; ++i) {\n+            BeanPropertyWriter bpw = props[i];\n+            if (bpw != null) {\n+                result[i] = bpw.withName(prefix + bpw.getName());\n+            }\n+        }\n+        return result;\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrapping.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrapping.java\n             unwrapped = new Unwrapping(str, x, y);\n         }\n     }\n+\n+    // Class with unwrapping using prefixes\n+    static class PrefixUnwrap\n+    {\n+        public String name;\n+        @JsonUnwrapped(prefix=\"_\")\n+        public Location location;\n+\n+        public PrefixUnwrap() { }\n+        public PrefixUnwrap(String str, int x, int y) {\n+            name = str;\n+            location = new Location(x, y);\n+        }\n+    }\n+\n+    /*\n+    static class DeepPrefixUnwrap\n+    {\n+        @JsonUnwrapped(prefix=\"u\")\n+        public PrefixUnwrap unwrapped;\n+\n+        public DeepPrefixUnwrap() { }\n+        public DeepPrefixUnwrap(String str, int x, int y) {\n+            unwrapped = new PrefixUnwrap(str, x, y);\n+        }\n+    }*/\n     \n     /*\n     /**********************************************************\n     /* Tests, serialization\n     /**********************************************************\n      */\n+\n+    private final ObjectMapper mapper = new ObjectMapper();\n     \n     public void testSimpleUnwrappingSerialize() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n         assertEquals(\"{\\\"name\\\":\\\"Tatu\\\",\\\"x\\\":1,\\\"y\\\":2}\",\n-                m.writeValueAsString(new Unwrapping(\"Tatu\", 1, 2)));\n+                mapper.writeValueAsString(new Unwrapping(\"Tatu\", 1, 2)));\n     }\n \n+    public void testPrefixedUnwrappingSerialize() throws Exception\n+    {\n+        assertEquals(\"{\\\"name\\\":\\\"Tatu\\\",\\\"_x\\\":1,\\\"_y\\\":2}\",\n+                mapper.writeValueAsString(new PrefixUnwrap(\"Tatu\", 1, 2)));\n+    }\n+    \n     public void testDeepUnwrappingSerialize() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n         assertEquals(\"{\\\"name\\\":\\\"Tatu\\\",\\\"x\\\":1,\\\"y\\\":2}\",\n-                m.writeValueAsString(new DeepUnwrapping(\"Tatu\", 1, 2)));\n+                mapper.writeValueAsString(new DeepUnwrapping(\"Tatu\", 1, 2)));\n     }\n+\n+    // 13-Jan-2012, tatu: does not quite work yet -- should, need to investigate:\n+    /*\n+    public void testDeepPrefixedUnwrappingSerialize() throws Exception\n+    {\n+        assertEquals(\"{\\\"name\\\":\\\"Bubba\\\",\\\"u_x\\\":1,\\\"u_y\\\":1}\",\n+                mapper.writeValueAsString(new DeepPrefixUnwrap(\"Bubba\", 1, 1)));\n+    }\n+    */\n     \n     /*\n     /**********************************************************\n     \n     public void testSimpleUnwrappedDeserialize() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        Unwrapping bean = m.readValue(\"{\\\"name\\\":\\\"Tatu\\\",\\\"y\\\":7,\\\"x\\\":-13}\",\n+        Unwrapping bean = mapper.readValue(\"{\\\"name\\\":\\\"Tatu\\\",\\\"y\\\":7,\\\"x\\\":-13}\",\n                 Unwrapping.class);\n         assertEquals(\"Tatu\", bean.name);\n         Location loc = bean.location;\n         assertEquals(-13, loc.x);\n         assertEquals(7, loc.y);\n     }\n-\n+    \n     public void testDoubleUnwrapping() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        TwoUnwrappedProperties bean = m.readValue(\"{\\\"first\\\":\\\"Joe\\\",\\\"y\\\":7,\\\"last\\\":\\\"Smith\\\",\\\"x\\\":-13}\",\n+        TwoUnwrappedProperties bean = mapper.readValue(\"{\\\"first\\\":\\\"Joe\\\",\\\"y\\\":7,\\\"last\\\":\\\"Smith\\\",\\\"x\\\":-13}\",\n                 TwoUnwrappedProperties.class);\n         Location loc = bean.location;\n         assertNotNull(loc);\n         assertEquals(\"Joe\", name.first);\n         assertEquals(\"Smith\", name.last);\n     }\n-\n+    \n     public void testDeepUnwrapping() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        DeepUnwrapping bean = m.readValue(\"{\\\"x\\\":3,\\\"name\\\":\\\"Bob\\\",\\\"y\\\":27}\",\n+        DeepUnwrapping bean = mapper.readValue(\"{\\\"x\\\":3,\\\"name\\\":\\\"Bob\\\",\\\"y\\\":27}\",\n                 DeepUnwrapping.class);\n         Unwrapping uw = bean.unwrapped;\n         assertNotNull(uw);\n     \n     public void testUnwrappedDeserializeWithCreator() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        UnwrappingWithCreator bean = m.readValue(\"{\\\"x\\\":1,\\\"y\\\":2,\\\"name\\\":\\\"Tatu\\\"}\",\n+        UnwrappingWithCreator bean = mapper.readValue(\"{\\\"x\\\":1,\\\"y\\\":2,\\\"name\\\":\\\"Tatu\\\"}\",\n                 UnwrappingWithCreator.class);\n         assertEquals(\"Tatu\", bean.name);\n         Location loc = bean.location;\n         assertEquals(1, loc.x);\n         assertEquals(2, loc.y);\n     }\n-    \n+\n+    public void testPrefixedUnwrapping() throws Exception\n+    {\n+        PrefixUnwrap bean = mapper.readValue(\"{\\\"name\\\":\\\"Axel\\\",\\\"_x\\\":4,\\\"_y\\\":7}\", PrefixUnwrap.class);\n+        assertNotNull(bean);\n+        assertEquals(\"Axel\", bean.name);\n+        assertNotNull(bean.location);\n+        assertEquals(4, bean.location.x);\n+        assertEquals(7, bean.location.y);\n+    }\n }", "timestamp": 1326520197, "metainfo": ""}