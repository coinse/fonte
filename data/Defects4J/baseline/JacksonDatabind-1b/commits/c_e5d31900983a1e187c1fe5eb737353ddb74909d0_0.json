{"sha": "e5d31900983a1e187c1fe5eb737353ddb74909d0", "log": "Remove BeanProperty from being passed to Deserializers", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n                  *   so let's allow this\n                  */\n                 JsonDeserializer<?> custom = _findCustomArrayDeserializer(type,\n-                        ctxt.getConfig(), beanDesc, property, null, contentDeser);\n+                        ctxt.getConfig(), beanDesc, null, contentDeser);\n                 if (custom != null) {\n                     return custom;\n                 }\n         }\n         // 23-Nov-2010, tatu: Custom array deserializer?\n         JsonDeserializer<?> custom = _findCustomArrayDeserializer(type,\n-                ctxt.getConfig(), beanDesc, property, elemTypeDeser, contentDeser);\n+                ctxt.getConfig(), beanDesc, elemTypeDeser, contentDeser);\n         if (custom != null) {\n             return custom;\n         }\n     }\n \n     protected JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type,\n-            DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property,\n+            DeserializationConfig config, BeanDescription beanDesc,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n             JsonDeserializer<?> deser = d.findArrayDeserializer(type, config,\n-                    beanDesc, property, elementTypeDeserializer, elementDeserializer);\n+                    beanDesc, elementTypeDeserializer, elementDeserializer);\n             if (deser != null) {\n                 return deser;\n             }\n \n         // 23-Nov-2010, tatu: Custom deserializer?\n         JsonDeserializer<?> custom = _findCustomCollectionDeserializer(type,\n-                ctxt.getConfig(), beanDesc, property,\n-                contentTypeDeser, contentDeser);\n+                ctxt.getConfig(), beanDesc, contentTypeDeser, contentDeser);\n         if (custom != null) {\n             return custom;\n         }\n         if (contentTypeDeser == null) {\n             contentTypeDeser = findTypeDeserializer(ctxt.getConfig(), contentType, property);\n         }\n-        return _findCustomCollectionLikeDeserializer(type, ctxt.getConfig(), beanDesc, property,\n+        return _findCustomCollectionLikeDeserializer(type, ctxt.getConfig(), beanDesc,\n                 contentTypeDeser, contentDeser);\n     }\n   \n     protected JsonDeserializer<?> _findCustomCollectionDeserializer(CollectionType type,\n-            DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property,\n+            DeserializationConfig config, BeanDescription beanDesc,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findCollectionDeserializer(type, config, beanDesc, property,\n+            JsonDeserializer<?> deser = d.findCollectionDeserializer(type, config, beanDesc,\n                     elementTypeDeserializer, elementDeserializer);\n             if (deser != null) {\n                 return deser;\n     }\n \n     protected JsonDeserializer<?> _findCustomCollectionLikeDeserializer(CollectionLikeType type,\n-            DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property,\n+            DeserializationConfig config, BeanDescription beanDesc,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findCollectionLikeDeserializer(type, config, beanDesc, property,\n+            JsonDeserializer<?> deser = d.findCollectionLikeDeserializer(type, config, beanDesc,\n                     elementTypeDeserializer, elementDeserializer);\n             if (deser != null) {\n                 return deser;\n         }\n \n         // 23-Nov-2010, tatu: Custom deserializer?\n-        JsonDeserializer<?> custom = _findCustomMapDeserializer(type, config, beanDesc, property,\n+        JsonDeserializer<?> custom = _findCustomMapDeserializer(type, config, beanDesc,\n                 keyDes, contentTypeDeser, contentDeser);\n \n         if (custom != null) {\n             contentTypeDeser = findTypeDeserializer(ctxt.getConfig(), contentType, property);\n         }\n         return _findCustomMapLikeDeserializer(type, ctxt.getConfig(),\n-                beanDesc, property, keyDes, contentTypeDeser, contentDeser);\n+                beanDesc, keyDes, contentTypeDeser, contentDeser);\n     }\n \n     protected JsonDeserializer<?> _findCustomMapDeserializer(MapType type,\n-            DeserializationConfig config, \n-            BeanDescription beanDesc, BeanProperty property,\n+            DeserializationConfig config, BeanDescription beanDesc,\n             KeyDeserializer keyDeserializer,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findMapDeserializer(type, config, beanDesc, property,\n+            JsonDeserializer<?> deser = d.findMapDeserializer(type, config, beanDesc,\n                     keyDeserializer, elementTypeDeserializer, elementDeserializer);\n             if (deser != null) {\n                 return deser;\n     }\n \n     protected JsonDeserializer<?> _findCustomMapLikeDeserializer(MapLikeType type,\n-            DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property,\n+            DeserializationConfig config, BeanDescription beanDesc,\n             KeyDeserializer keyDeserializer,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findMapLikeDeserializer(type, config, beanDesc, property,\n+            JsonDeserializer<?> deser = d.findMapLikeDeserializer(type, config, beanDesc,\n                     keyDeserializer, elementTypeDeserializer, elementDeserializer);\n             if (deser != null) {\n                 return deser;\n         Class<?> enumClass = type.getRawClass();\n         // 23-Nov-2010, tatu: Custom deserializer?\n         JsonDeserializer<?> custom = _findCustomEnumDeserializer(enumClass,\n-                ctxt.getConfig(), beanDesc, property);\n+                ctxt.getConfig(), beanDesc);\n         if (custom != null) {\n             return custom;\n         }\n     }\n \n     protected JsonDeserializer<?> _findCustomEnumDeserializer(Class<?> type,\n-            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property)\n+            DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findEnumDeserializer(type, config, beanDesc, property);\n+            JsonDeserializer<?> deser = d.findEnumDeserializer(type, config, beanDesc);\n             if (deser != null) {\n                 return deser;\n             }\n         Class<? extends JsonNode> nodeClass = (Class<? extends JsonNode>) nodeType.getRawClass();\n         // 23-Nov-2010, tatu: Custom deserializer?\n         JsonDeserializer<?> custom = _findCustomTreeNodeDeserializer(nodeClass, config,\n-                beanDesc, property);\n+                beanDesc);\n         if (custom != null) {\n             return custom;\n         }\n     }\n \n     protected JsonDeserializer<?> _findCustomTreeNodeDeserializer(Class<? extends JsonNode> type,\n-            DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property)\n+            DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findTreeNodeDeserializer(type, config, beanDesc, property);\n+            JsonDeserializer<?> deser = d.findTreeNodeDeserializer(type, config, beanDesc);\n             if (deser != null) {\n                 return deser;\n             }\n      */\n \n     @Override\n-    public TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType,\n-            BeanProperty property)\n+    public TypeDeserializer findTypeDeserializer(DeserializationConfig config,\n+            JavaType baseType, BeanProperty property)\n         throws JsonMappingException\n     {\n         Class<?> cls = baseType.getRawClass();\n         }\n         Class<?> enumClass = type.getRawClass();\n         // 23-Nov-2010, tatu: Custom deserializer?\n-        JsonDeserializer<?> custom = _findCustomEnumDeserializer(enumClass, config, beanDesc, property);\n+        JsonDeserializer<?> custom = _findCustomEnumDeserializer(enumClass, config, beanDesc);\n         if (custom != null) {\n             return StdKeyDeserializers.constructDelegatingKeyDeserializer(config, type, des);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findBeanDeserializer(type, config, beanDesc, property);\n+            JsonDeserializer<?> deser = d.findBeanDeserializer(type, config, beanDesc);\n             if (deser != null) {\n                 return (JsonDeserializer<Object>) deser;\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n      * @param config Configuration in effect\n      * @param beanDesc Definition of the enumeration type that contains class annotations and\n      *    other information typically needed for building deserializers\n-     * @param property Property that contains array value  (null for root values)\n      * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n      *    the type information deserializer to use; should usually be used as is when constructing\n      *    array deserializer.\n      */\n     public JsonDeserializer<?> findArrayDeserializer(ArrayType type,\n             DeserializationConfig config, BeanDescription beanDesc,\n-            BeanProperty property,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException;\n \n      * @param config Configuration in effect\n      * @param beanDesc Definition of the enumeration type that contains class annotations and\n      *    other information typically needed for building deserializers\n-     * @param property Property that contains array value  (null for root values)\n      * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n      *    the type information deserializer to use; should usually be used as is when constructing\n      *    array deserializer.\n      */\n     public JsonDeserializer<?> findCollectionDeserializer(CollectionType type,\n             DeserializationConfig config, BeanDescription beanDesc,\n-            BeanProperty property,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException;\n \n      * @param config Configuration in effect\n      * @param beanDesc Definition of the enumeration type that contains class annotations and\n      *    other information typically needed for building deserializers\n-     * @param property Property that contains value  (null for root values)\n      * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n      *    the type information deserializer to use; should usually be used as is when constructing\n      *    array deserializer.\n      */\n     public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type,\n             DeserializationConfig config, BeanDescription beanDesc,\n-            BeanProperty property,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException;\n     \n      * @param config Configuration in effect\n      * @param beanDesc Definition of the enumeration type that contains class annotations and\n      *    other information typically needed for building deserializers\n-     * @param property Property that contains value  (null for root values)\n      * \n      * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n      */\n     public JsonDeserializer<?> findEnumDeserializer(Class<?> type,\n-            DeserializationConfig config, BeanDescription beanDesc,\n-            BeanProperty property)\n+            DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException;\n \n     /**\n      * @param config Configuration in effect\n      * @param beanDesc Definition of the enumeration type that contains class annotations and\n      *    other information typically needed for building deserializers\n-     * @param property Property that contains value  (null for root values)\n      * @param keyDeserializer Key deserializer use, if it is defined via annotations or other configuration;\n      *    null if default key deserializer for key type can be used.\n      * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n      */\n     public JsonDeserializer<?> findMapDeserializer(MapType type,\n             DeserializationConfig config, BeanDescription beanDesc,\n-            BeanProperty property,\n             KeyDeserializer keyDeserializer,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException;\n      * @param config Configuration in effect\n      * @param beanDesc Definition of the enumeration type that contains class annotations and\n      *    other information typically needed for building deserializers\n-     * @param property Property that contains value  (null for root values)\n      * @param keyDeserializer Key deserializer use, if it is defined via annotations or other configuration;\n      *    null if default key deserializer for key type can be used.\n      * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n      * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n      */\n     public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type,\n-            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property,\n+            DeserializationConfig config, BeanDescription beanDesc,\n             KeyDeserializer keyDeserializer,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException;\n      * @param nodeType Specific type of JSON tree nodes to deserialize\n      *  (subtype of {@link com.fasterxml.jackson.databind.JsonNode})\n      * @param config Configuration in effect\n-     * @param property Property that contains value  (null for root values)\n      * \n      * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n      */\n     public JsonDeserializer<?> findTreeNodeDeserializer(Class<? extends JsonNode> nodeType,\n-            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property)\n+            DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException;\n     \n     /**\n      * @param config Configuration in effect\n      * @param beanDesc Definition of the enumeration type that contains class annotations and\n      *    other information typically needed for building deserializers\n-     * @param property Property that contains value  (null for root values)\n      * \n      * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n      */\n     public JsonDeserializer<?> findBeanDeserializer(JavaType type,\n-            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property)\n+            DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException;\n \n     /*\n     {\n         @Override\n         public JsonDeserializer<?> findArrayDeserializer(ArrayType type,\n-                DeserializationConfig config, BeanDescription beanDesc, BeanProperty property,\n+                DeserializationConfig config, BeanDescription beanDesc,\n                 TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n             throws JsonMappingException\n         {\n \n         @Override\n         public JsonDeserializer<?> findCollectionDeserializer(CollectionType type,\n-                DeserializationConfig config, BeanDescription beanDesc, BeanProperty property,\n+                DeserializationConfig config, BeanDescription beanDesc,\n                 TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n             throws JsonMappingException\n         {\n \n         @Override\n         public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type,\n-                DeserializationConfig config, BeanDescription beanDesc, BeanProperty property,\n+                DeserializationConfig config, BeanDescription beanDesc,\n                 TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n             throws JsonMappingException\n         {\n \n         @Override\n         public JsonDeserializer<?> findMapDeserializer(MapType type,\n-                DeserializationConfig config, BeanDescription beanDesc, BeanProperty property,\n+                DeserializationConfig config, BeanDescription beanDesc,\n                 KeyDeserializer keyDeserializer,\n                 TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n             throws JsonMappingException\n \n         @Override\n         public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type,\n-                DeserializationConfig config, BeanDescription beanDesc, BeanProperty property,\n+                DeserializationConfig config, BeanDescription beanDesc,\n                 KeyDeserializer keyDeserializer,\n                 TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n             throws JsonMappingException\n \n         @Override\n         public JsonDeserializer<?> findEnumDeserializer(Class<?> type,\n-                DeserializationConfig config, BeanDescription beanDesc, BeanProperty property)\n+                DeserializationConfig config, BeanDescription beanDesc)\n             throws JsonMappingException\n         {\n             return null;\n         \n         @Override\n         public JsonDeserializer<?> findTreeNodeDeserializer(Class<? extends JsonNode> nodeType,\n-                DeserializationConfig config, BeanDescription beanDesc, BeanProperty property)\n+                DeserializationConfig config, BeanDescription beanDesc)\n             throws JsonMappingException\n         {\n             return null;\n \n         @Override\n         public JsonDeserializer<?> findBeanDeserializer(JavaType type,\n-                DeserializationConfig config, BeanDescription beanDesc, BeanProperty property)\n+                DeserializationConfig config, BeanDescription beanDesc)\n             throws JsonMappingException\n         {\n             return null;\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n     \n     @Override\n     public JsonDeserializer<?> findArrayDeserializer(ArrayType type,\n-            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property,\n+            DeserializationConfig config, BeanDescription beanDesc,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     {\n \n     @Override\n     public JsonDeserializer<?> findBeanDeserializer(JavaType type,\n-            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property)\n+            DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type.getRawClass()));\n \n     @Override\n     public JsonDeserializer<?> findCollectionDeserializer(CollectionType type,\n-            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property,\n+            DeserializationConfig config, BeanDescription beanDesc,\n             TypeDeserializer elementTypeDeserializer,\n             JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n \n     @Override\n     public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type,\n-            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property,\n+            DeserializationConfig config, BeanDescription beanDesc,\n             TypeDeserializer elementTypeDeserializer,\n             JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     \n     @Override\n     public JsonDeserializer<?> findEnumDeserializer(Class<?> type,\n-            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property)\n+            DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type));\n \n     @Override\n     public JsonDeserializer<?> findMapDeserializer(MapType type,\n-            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property,\n+            DeserializationConfig config, BeanDescription beanDesc,\n             KeyDeserializer keyDeserializer,\n             TypeDeserializer elementTypeDeserializer,\n             JsonDeserializer<?> elementDeserializer)\n \n     @Override\n     public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type,\n-            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property,\n+            DeserializationConfig config, BeanDescription beanDesc,\n             KeyDeserializer keyDeserializer,\n             TypeDeserializer elementTypeDeserializer,\n             JsonDeserializer<?> elementDeserializer)\n     \n     @Override\n     public JsonDeserializer<?> findTreeNodeDeserializer(Class<? extends JsonNode> nodeType,\n-            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property)\n+            DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(nodeType));\n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers.java\n             context.addDeserializers(new SimpleDeserializers() {\n                 @Override\n                 public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type, DeserializationConfig config,\n-                        BeanDescription beanDesc, BeanProperty property,\n-                        TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+                        BeanDescription beanDesc, TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n                     throws JsonMappingException\n                 {\n                     if (CollectionMarker.class.isAssignableFrom(type.getRawClass())) {\n                 }\n                 @Override\n                 public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type, DeserializationConfig config,\n-                        BeanDescription beanDesc, BeanProperty property,\n-                        KeyDeserializer keyDeserializer,\n+                        BeanDescription beanDesc, KeyDeserializer keyDeserializer,\n                         TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n                     throws JsonMappingException\n                 {", "timestamp": 1327967751, "metainfo": ""}