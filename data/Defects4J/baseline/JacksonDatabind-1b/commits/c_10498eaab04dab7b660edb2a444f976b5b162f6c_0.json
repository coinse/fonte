{"sha": "10498eaab04dab7b660edb2a444f976b5b162f6c", "log": "minor json schema relate cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/JsonSerializableSchema.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/JsonSerializableSchema.java\n @JacksonAnnotation\n public @interface JsonSerializableSchema\n {\n+    public final static String NO_VALUE = \"##irrelevant\";\n+    \n     /**\n      * The schema type for this JsonSerializable instance.\n      * Possible values: \"string\", \"number\", \"boolean\", \"object\", \"array\", \"null\", \"any\"\n     String schemaType() default \"any\";\n \n     /**\n-     * If the schema type is \"object\", the node that defines the properties of the object.\n+     * If the schema type is \"object\", JSON definition of properties of the object as\n+     * a String.\n      *\n      * @return The node representing the schema properties, or \"##irrelevant\" if irrelevant.\n      */\n-    String schemaObjectPropertiesDefinition() default \"##irrelevant\";\n+    String schemaObjectPropertiesDefinition() default NO_VALUE;\n \n     /**\n-     * If the schema type if \"array\", the node that defines the schema for the items in the array.\n+     * If the schema type if \"array\", JSON definition of the schema for item types contained.\n      *\n      * @return The schema for the items in the array, or \"##irrelevant\" if irrelevant.\n      */\n-    String schemaItemDefinition() default \"##irrelevant\";\n+    String schemaItemDefinition() default NO_VALUE;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n \n import java.io.IOException;\n import java.lang.reflect.Type;\n+import java.util.concurrent.atomic.AtomicReference;\n \n import com.fasterxml.jackson.core.*;\n \n {\n     public final static SerializableSerializer instance = new SerializableSerializer();\n \n+    // Ugh. Should NOT need this...\n+    private final static AtomicReference<ObjectMapper> _mapperReference = new AtomicReference<ObjectMapper>();\n+    \n     protected SerializableSerializer() { super(JsonSerializable.class); }\n \n     @Override\n             if (rawClass.isAnnotationPresent(JsonSerializableSchema.class)) {\n                 JsonSerializableSchema schemaInfo = rawClass.getAnnotation(JsonSerializableSchema.class);\n                 schemaType = schemaInfo.schemaType();\n-                if (!\"##irrelevant\".equals(schemaInfo.schemaObjectPropertiesDefinition())) {\n+                if (!JsonSerializableSchema.NO_VALUE.equals(schemaInfo.schemaObjectPropertiesDefinition())) {\n                     objectProperties = schemaInfo.schemaObjectPropertiesDefinition();\n                 }\n-                if (!\"##irrelevant\".equals(schemaInfo.schemaItemDefinition())) {\n+                if (!JsonSerializableSchema.NO_VALUE.equals(schemaInfo.schemaItemDefinition())) {\n                     itemDefinition = schemaInfo.schemaItemDefinition();\n                 }\n             }\n         }\n+        /* 19-Mar-2012, tatu: geez, this is butt-ugly abonimation of code...\n+         *    really, really should not require back ref to an ObjectMapper.\n+         */\n         objectNode.put(\"type\", schemaType);\n         if (objectProperties != null) {\n             try {\n-                objectNode.put(\"properties\", new ObjectMapper().readValue(objectProperties, JsonNode.class));\n+                objectNode.put(\"properties\", _getObjectMapper().readTree(objectProperties));\n             } catch (IOException e) {\n-                throw new IllegalStateException(e);\n+                throw new JsonMappingException(\"Failed to parse @JsonSerializableSchema.schemaObjectPropertiesDefinition value\");\n             }\n         }\n         if (itemDefinition != null) {\n             try {\n-                objectNode.put(\"items\", new ObjectMapper().readValue(itemDefinition, JsonNode.class));\n+                objectNode.put(\"items\", _getObjectMapper().readTree(itemDefinition));\n             } catch (IOException e) {\n-                throw new IllegalStateException(e);\n+                throw new JsonMappingException(\"Failed to parse @JsonSerializableSchema.schemaItemDefinition value\");\n             }\n         }\n         // always optional, no need to specify:\n         //objectNode.put(\"required\", false);\n         return objectNode;\n     }\n+    \n+    private final static synchronized ObjectMapper _getObjectMapper()\n+    {\n+        ObjectMapper mapper = _mapperReference.get();\n+        if (mapper == null) {\n+            mapper = new ObjectMapper();\n+            _mapperReference.set(mapper);\n+        }\n+        return mapper;\n+    }\n }", "timestamp": 1332219518, "metainfo": ""}