{"sha": "191577bc6986fcd72760c2986ccc3518041167a1", "log": "Second part of fix for [Issue#75], handle property-overrides for content (value) serializer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n             staticTyping = false;\n         }\n         JsonSerializer<Object> elementValueSerializer = _findContentSerializer(prov,\n-                beanDesc.getClassInfo(), property);\n+                beanDesc.getClassInfo());\n         \n         if (type.isMapLikeType()) { // implements java.util.Map\n             MapLikeType mlt = (MapLikeType) type;\n         return null;\n     }\n \n+    /**\n+     * Helper method called to try to find whether there is an annotation in the\n+     * class that indicates content (\"value\") serializer to use.\n+     * If so, will try to instantiate key serializer and return it; otherwise returns null.\n+     */\n     protected JsonSerializer<Object> _findContentSerializer(SerializerProvider prov,\n-            Annotated a, BeanProperty property)\n+            Annotated a)\n         throws JsonMappingException\n     {\n         AnnotationIntrospector intr = prov.getAnnotationIntrospector();\n-\n-        // Start with property (more specific); if not found, then find from type\n-        if (property != null) {\n-            AnnotatedMember m = property.getMember();\n-            if (m != null) {\n-                Object serDef = intr.findContentSerializer(m);\n-                if (serDef != null) {\n-                    return prov.serializerInstance(m, serDef);\n-                }\n-            }\n-        }\n         Object serDef = intr.findContentSerializer(a);\n         if (serDef != null) {\n             return prov.serializerInstance(a, serDef);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n             BeanProperty property)\n         throws JsonMappingException\n     {\n-        JsonSerializer<?> ser = _serializer;\n+        /* 29-Sep-2012, tatu: Actually, we need to do much more contextual\n+         *    checking here since we finally know for sure the property,\n+         *    and it may have overrides\n+         */\n+        JsonSerializer<?> ser = null;\n+        // First: if we have a property, may have property-annotation overrides\n+        if (property != null) {\n+            AnnotatedMember m = property.getMember();\n+            if (m != null) {\n+                Object serDef = provider.getAnnotationIntrospector().findContentSerializer(m);\n+                if (serDef != null) {\n+                    ser = provider.serializerInstance(m, serDef);\n+                }\n+            }\n+        }\n+        if (ser == null) {\n+            ser = _serializer;\n+        }\n         if (ser == null) {\n             ser = provider.findValueSerializer(String.class, property);\n         } else if (ser instanceof ContextualSerializer) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n             BeanProperty property)\n         throws JsonMappingException\n     {\n-        JsonSerializer<?> ser = _elementSerializer;\n+        /* 29-Sep-2012, tatu: Actually, we need to do much more contextual\n+         *    checking here since we finally know for sure the property,\n+         *    and it may have overrides\n+         */\n+        JsonSerializer<?> ser = null;\n+        // First: if we have a property, may have property-annotation overrides\n+        if (property != null) {\n+            AnnotatedMember m = property.getMember();\n+            if (m != null) {\n+                Object serDef = provider.getAnnotationIntrospector().findContentSerializer(m);\n+                if (serDef != null) {\n+                    ser = provider.serializerInstance(m, serDef);\n+                }\n+            }\n+        }\n+        if (ser == null) {\n+            ser = _elementSerializer;\n+        }\n         if (ser == null) {\n             ser = provider.findValueSerializer(String.class, property);\n         } else if (ser instanceof ContextualSerializer) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n             BeanProperty property)\n         throws JsonMappingException\n     {\n-        JsonSerializer<?> ser = _serializer;\n+        /* 29-Sep-2012, tatu: Actually, we need to do much more contextual\n+         *    checking here since we finally know for sure the property,\n+         *    and it may have overrides\n+         */\n+        JsonSerializer<?> ser = null;\n+        // First: if we have a property, may have property-annotation overrides\n+        if (property != null) {\n+            AnnotatedMember m = property.getMember();\n+            if (m != null) {\n+                Object serDef = provider.getAnnotationIntrospector().findContentSerializer(m);\n+                if (serDef != null) {\n+                    ser = provider.serializerInstance(m, serDef);\n+                }\n+            }\n+        }\n+        if (ser == null) {\n+            ser = _serializer;\n+        }\n         if (ser == null) {\n             ser = provider.findValueSerializer(String.class, property);\n         } else if (ser instanceof ContextualSerializer) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n         if (typeSer != null) {\n             typeSer = typeSer.forProperty(property);\n         }\n-        JsonSerializer<?> ser = _elementSerializer;\n+        /* 29-Sep-2012, tatu: Actually, we need to do much more contextual\n+         *    checking here since we finally know for sure the property,\n+         *    and it may have overrides\n+         */\n+        JsonSerializer<?> ser = null;\n+        // First: if we have a property, may have property-annotation overrides\n+        if (property != null) {\n+            AnnotatedMember m = property.getMember();\n+            if (m != null) {\n+                Object serDef = provider.getAnnotationIntrospector().findContentSerializer(m);\n+                if (serDef != null) {\n+                    ser = provider.serializerInstance(m, serDef);\n+                }\n+            }\n+        }\n+        if (ser == null) {\n+            ser = _elementSerializer;\n+        }\n         if (ser == null) {\n             if (_staticTyping && _elementType != null) {\n                 ser = provider.findValueSerializer(_elementType, property);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\n             BeanProperty property)\n         throws JsonMappingException\n     {\n-        if (_valueSerializer == null) {\n+        /* 29-Sep-2012, tatu: Actually, we need to do much more contextual\n+         *    checking here since we finally know for sure the property,\n+         *    and it may have overrides\n+         */\n+        JsonSerializer<?> ser = null;\n+        // First: if we have a property, may have property-annotation overrides\n+        if (property != null) {\n+            AnnotatedMember m = property.getMember();\n+            if (m != null) {\n+                Object serDef = provider.getAnnotationIntrospector().findContentSerializer(m);\n+                if (serDef != null) {\n+                    ser = provider.serializerInstance(m, serDef);\n+                }\n+            }\n+        }\n+        if (ser == null) {\n+            ser = _valueSerializer;\n+        }\n+        if (ser == null) {\n             if (_staticTyping) {\n                 return withValueSerializer(property, provider.findValueSerializer(_valueType, property));\n             }\n         } else if (_valueSerializer instanceof ContextualSerializer) {\n-            return withValueSerializer(property, ((ContextualSerializer) _valueSerializer)\n-                    .createContextual(provider, property));\n+            ser = ((ContextualSerializer) ser).createContextual(provider, property);\n+        }\n+        if (ser != _valueSerializer) {\n+            return withValueSerializer(property, ser);\n         }\n         return this;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n \n import com.fasterxml.jackson.core.*;\n \n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n             BeanProperty property)\n         throws JsonMappingException\n     {\n-        JsonSerializer<?> ser = _valueSerializer;\n-        if (ser == null) {\n-            if (_valueTypeIsStatic) {\n-                ser = provider.findValueSerializer(_valueType, property);\n-            }\n-        } else if (ser instanceof ContextualSerializer) {\n-            ser = ((ContextualSerializer) ser).createContextual(provider, property);\n-        }\n         /* 29-Sep-2012, tatu: Actually, we need to do much more contextual\n          *    checking here since we finally know for sure the property,\n          *    and it may have overrides\n          */\n+        JsonSerializer<?> ser = null;\n         JsonSerializer<?> keySer = null;\n-        // Start with property (more specific); if not found, then find from type\n+\n+        // First: if we have a property, may have property-annotation overrides\n         if (property != null) {\n             AnnotatedMember m = property.getMember();\n             if (m != null) {\n-                Object serDef = provider.getAnnotationIntrospector().findKeySerializer(m);\n+                Object serDef;\n+                final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n+                serDef = intr.findKeySerializer(m);\n                 if (serDef != null) {\n                     keySer = provider.serializerInstance(m, serDef);\n                 }\n-            }\n+                serDef = intr.findContentSerializer(m);\n+                if (serDef != null) {\n+                    ser = provider.serializerInstance(m, serDef);\n+                }\n+            }\n+        }\n+        if (ser == null) {\n+            ser = _valueSerializer;\n+        }\n+        if (ser == null) {\n+            if (_valueTypeIsStatic) {\n+                ser = provider.findValueSerializer(_valueType, property);\n+            }\n+        } else if (ser instanceof ContextualSerializer) {\n+            ser = ((ContextualSerializer) ser).createContextual(provider, property);\n         }\n         if (keySer == null) {\n             keySer = _keySerializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n         if (vts != null) {\n             vts = vts.forProperty(property);\n         }\n-        JsonSerializer<?> ser = _elementSerializer;\n-\n+        /* 29-Sep-2012, tatu: Actually, we need to do much more contextual\n+         *    checking here since we finally know for sure the property,\n+         *    and it may have overrides\n+         */\n+        JsonSerializer<?> ser = null;\n+        // First: if we have a property, may have property-annotation overrides\n+        if (property != null) {\n+            AnnotatedMember m = property.getMember();\n+            if (m != null) {\n+                Object serDef = provider.getAnnotationIntrospector().findContentSerializer(m);\n+                if (serDef != null) {\n+                    ser = provider.serializerInstance(m, serDef);\n+                }\n+            }\n+        }\n+        if (ser == null) {\n+            ser = _elementSerializer;\n+        }\n         if (ser == null) {\n             if (_staticTyping) {\n                 ser = provider.findValueSerializer(_elementType, property);", "timestamp": 1348992823, "metainfo": ""}