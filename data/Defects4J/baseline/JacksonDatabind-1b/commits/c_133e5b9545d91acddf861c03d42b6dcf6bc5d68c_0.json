{"sha": "133e5b9545d91acddf861c03d42b6dcf6bc5d68c", "log": "refactor tests, 2 new failing tests under 'failing/'", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArray.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArray.java\n import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n \n import com.fasterxml.jackson.databind.BaseMapTest;\n-import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializationFeature;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n         assertEquals(\"\\\"foo\\\"\", json);\n     }\n     \n-    // for [JACKSON-805]\n-    public void testBeanAsArrayUnwrapped() throws Exception\n-    {\n-        ObjectMapper mapper = new ObjectMapper();\n-        mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n-        SingleBean result = mapper.readValue(quote(\"foobar\"), SingleBean.class);\n-        assertNotNull(result);\n-        assertEquals(\"foobar\", result.name);\n-    }\n-    \n     /*\n     /*****************************************************\n     /* Round-trip tests\n--- a/src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java\n     static class BaseType { }\n \n     static class SubType extends BaseType { }\n-\n+    \n     /*\n     /**********************************************************\n     /* Test methods\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestJavaType.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+\n+/**\n+ * Failing test related to [Issue#76]\n+ */\n+public class TestJavaType\n+    extends com.fasterxml.jackson.test.BaseTest\n+{\n+    @SuppressWarnings(\"serial\")\n+    static class HashTree<K, V> extends HashMap<K, HashTree<K, V>> { }\n+\n+    public void testRecursiveType()\n+    {\n+        TypeFactory tf = TypeFactory.defaultInstance();\n+        JavaType type = tf.constructType(HashTree.class);\n+        assertNotNull(type);\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestPOJOAsArray.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n+\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class TestPOJOAsArray extends BaseMapTest\n+{\n+    // for [JACKSON-805]\n+    @JsonFormat(shape=Shape.ARRAY)\n+    static class SingleBean {\n+        public String name = \"foo\";\n+    }\n+\n+    \n+    // for [JACKSON-805]\n+    public void testBeanAsArrayUnwrapped() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n+        SingleBean result = mapper.readValue(quote(\"foobar\"), SingleBean.class);\n+        assertNotNull(result);\n+        assertEquals(\"foobar\", result.name);\n+    }\n+\n+}", "timestamp": 1348341470, "metainfo": ""}