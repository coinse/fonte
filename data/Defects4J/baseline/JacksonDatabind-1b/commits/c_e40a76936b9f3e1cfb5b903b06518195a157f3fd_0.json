{"sha": "e40a76936b9f3e1cfb5b903b06518195a157f3fd", "log": "Piping view definitions through", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanPropertyDefinition.java\n     public boolean couldSerialize() {\n         return getAccessor() != null;\n     }\n-\n+    \n     public abstract AnnotatedMethod getGetter();\n     public abstract AnnotatedMethod getSetter();\n     public abstract AnnotatedField getField();\n      * Null if no such member exists.\n      */\n     public abstract AnnotatedMember getMutator();\n+\n+    /**\n+     * Method used to find View-inclusion definitions for the property.\n+     */\n+    public abstract Class<?>[] getViews();\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n \n     /*\n     /**********************************************************\n-    /* Overridable internal methods, sorting\n+    /* Overridable internal methods, sorting, other stuff\n     /**********************************************************\n      */\n     \n     protected void _sortProperties()\n     {\n         // Then how about explicit ordering?\n-        AnnotationIntrospector intr = _config.getAnnotationIntrospector();\n+        AnnotationIntrospector intr = _annotationIntrospector;\n         boolean sort;\n-        Boolean alpha = intr.findSerializationSortAlphabetically(_classDef);\n+        Boolean alpha = (intr == null) ? null : intr.findSerializationSortAlphabetically(_classDef);\n         \n         if (alpha == null) {\n             sort = _config.shouldSortPropertiesAlphabetically();\n         } else {\n             sort = alpha.booleanValue();\n         }\n-        String[] propertyOrder = intr.findSerializationPropertyOrder(_classDef);\n+        String[] propertyOrder = (intr == null) ? null : intr.findSerializationPropertyOrder(_classDef);\n         \n         // no sorting? no need to shuffle, then\n         if (!sort && (_creatorProperties == null) && (propertyOrder == null)) {\n         _properties.clear();\n         _properties.putAll(ordered);\n     }        \n-\n+    \n     /*\n     /**********************************************************\n     /* Overridable internal methods, adding members\n     {\n         POJOPropertyBuilder prop = _properties.get(implName);\n         if (prop == null) {\n-            prop = new POJOPropertyBuilder(implName);\n+            prop = new POJOPropertyBuilder(implName, _annotationIntrospector,\n+                    _forSerialization);\n             _properties.put(implName, prop);\n         }\n         return prop;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n package com.fasterxml.jackson.databind.introspect;\n \n+import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.BeanPropertyDefinition;\n \n /**\n     implements Comparable<POJOPropertyBuilder>\n {\n     /**\n+     * Whether property is being composed for serialization\n+     * (true) or deserialization (false)\n+     */\n+    protected final boolean _forSerialization;\n+\n+    protected final AnnotationIntrospector _annotationIntrospector;\n+    \n+    /**\n      * External name of logical property; may change with\n      * renaming (by new instance being constructed using\n      * a new name)\n     protected Node<AnnotatedMethod> _getters;\n \n     protected Node<AnnotatedMethod> _setters;\n-\n-    public POJOPropertyBuilder(String internalName)\n+    \n+    public POJOPropertyBuilder(String internalName, AnnotationIntrospector annotationIntrospector,\n+            boolean forSerialization)\n     {\n         _internalName = internalName;\n         _name = internalName;\n+        _annotationIntrospector = annotationIntrospector;\n+        _forSerialization = forSerialization;\n     }\n \n     public POJOPropertyBuilder(POJOPropertyBuilder src, String newName)\n     {\n         _internalName = src._internalName;\n         _name = newName;\n+        _annotationIntrospector = src._annotationIntrospector;\n         _fields = src._fields;\n         _ctorParameters = src._ctorParameters;\n         _getters = src._getters;\n         _setters = src._setters;\n+        _forSerialization = src._forSerialization;\n     }\n \n     /**\n \n     @Override\n     public boolean hasConstructorParameter() { return _ctorParameters != null; }\n-\n-    @Override\n-    public AnnotatedMember getAccessor()\n-    {\n-        AnnotatedMember m = getGetter();\n-        if (m == null) {\n-            m = getField();\n-        }\n-        return m;\n-    }\n-\n-    @Override\n-    public AnnotatedMember getMutator()\n-    {\n-        AnnotatedMember m = getConstructorParameter();\n-        if (m == null) {\n-            m = getSetter();\n-            if (m == null) {\n-                m = getField();\n-            }\n-        }\n-        return m;\n-    }\n \n     @Override\n     public boolean couldSerialize() {\n         return _ctorParameters.value;\n     }\n     \n+    @Override\n+    public AnnotatedMember getAccessor()\n+    {\n+        AnnotatedMember m = getGetter();\n+        if (m == null) {\n+            m = getField();\n+        }\n+        return m;\n+    }\n+\n+    @Override\n+    public AnnotatedMember getMutator()\n+    {\n+        AnnotatedMember m = getConstructorParameter();\n+        if (m == null) {\n+            m = getSetter();\n+            if (m == null) {\n+                m = getField();\n+            }\n+        }\n+        return m;\n+    }\n+\n+    /**\n+     * Method that will try to find JSON View inclusion information\n+     * for this property.\n+     */\n+    public Class<?>[] getViews()\n+    {\n+        if (_annotationIntrospector != null) {\n+            AnnotatedMember m = _forSerialization ? getAccessor() : getMutator();\n+            return _annotationIntrospector.findViews(m);\n+        }\n+        return null;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Data aggregation\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n      * Alternate set of property writers used when view-based filtering\n      * is available for the Bean.\n      */\n-    protected Class<?>[] _includeInViews;\n+    protected final Class<?>[] _includeInViews;\n \n     /**\n      * If property being serialized needs type information to be\n     /* Construction, configuration\n     /**********************************************************\n      */\n-\n-    public BeanPropertyWriter(AnnotatedMember member, Annotations contextAnnotations,\n-            String name, JavaType declaredType,\n+    \n+    public BeanPropertyWriter(BeanPropertyDefinition propDef,\n+            AnnotatedMember member, Annotations contextAnnotations,\n+            JavaType declaredType,\n             JsonSerializer<Object> ser, TypeSerializer typeSer, JavaType serType,\n             Method m, Field f, boolean suppressNulls, Object suppressableValue)\n     {\n-        this(member, contextAnnotations, new SerializedString(name), declaredType,\n-                ser, typeSer, serType,\n-                m, f, suppressNulls, suppressableValue);\n-    }\n-    \n-    public BeanPropertyWriter(AnnotatedMember member, Annotations contextAnnotations,\n-            SerializedString name, JavaType declaredType,\n-            JsonSerializer<Object> ser, TypeSerializer typeSer, JavaType serType,\n-            Method m, Field f, boolean suppressNulls, Object suppressableValue)\n-    {\n+        \n         _member = member;\n         _contextAnnotations = contextAnnotations;\n-        _name = name;\n+        _name = new SerializedString(propDef.getName());\n         _declaredType = declaredType;\n         _serializer = ser;\n         _dynamicSerializers = (ser == null) ? PropertySerializerMap.emptyMap() : null;\n         _field = f;\n         _suppressNulls = suppressNulls;\n         _suppressableValue = suppressableValue;\n+        _includeInViews = propDef.getViews();\n \n         // this will be resolved later on, unless nulls are to be suppressed\n         _nullSerializer = null;\n     public BeanPropertyWriter unwrappingWriter(NameTransformer unwrapper) {\n         return new UnwrappingBeanPropertyWriter(this, unwrapper);\n     }\n-    \n-    /**\n-     * Method for defining which views to included value of this\n-     * property in. If left undefined, will always be included;\n-     * otherwise active view definition will be checked against\n-     * definition list and value is only included if active\n-     * view is one of defined views, or its sub-view (as defined\n-     * by class/sub-class relationship).\n-     */\n-    public void setViews(Class<?>[] views) { _includeInViews = views; }\n \n     /**\n      * Method called to define type to consider as \"non-trivial\" basetype,\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         if (properties.isEmpty()) {\n             return null;\n         }\n-        \n         // null is for value type serializer, which we don't have access to from here (ditto for bean prop)\n         boolean staticTyping = usesStaticTyping(config, beanDesc, null, null);\n         PropertyBuilder pb = constructPropertyBuilder(config, beanDesc);\n             if (prop != null && prop.isBackReference()) {\n                 continue;\n             }\n-            String name = property.getName();\n             if (accessor instanceof AnnotatedMethod) {\n-                result.add(_constructWriter(prov, typeBind, pb, staticTyping, name, (AnnotatedMethod) accessor));\n+                result.add(_constructWriter(property, prov, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n             } else {\n-                result.add(_constructWriter(prov, typeBind, pb, staticTyping, name, (AnnotatedField) accessor));\n+                result.add(_constructWriter(property, prov, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n             }\n         }\n         return result;\n      * Secondary helper method for constructing {@link BeanPropertyWriter} for\n      * given member (field or method).\n      */\n-    protected BeanPropertyWriter _constructWriter(SerializerProvider prov,\n-            TypeBindings typeContext,\n-            PropertyBuilder pb, boolean staticTyping, String name, AnnotatedMember accessor)\n+    protected BeanPropertyWriter _constructWriter(BeanPropertyDefinition propDef,\n+            SerializerProvider prov, TypeBindings typeContext,\n+            PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor)\n         throws JsonMappingException\n     {\n+        final String name = propDef.getName();\n         if (prov.canOverrideAccessModifiers()) {\n             accessor.fixAccess();\n         }\n \n         // and if not JAXB collection/array with annotations, maybe regular type info?\n         TypeSerializer typeSer = findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n-        BeanPropertyWriter pbw = pb.buildWriter(name, type, annotatedSerializer,\n+        BeanPropertyWriter pbw = pb.buildWriter(propDef, type, annotatedSerializer,\n                         typeSer, contentTypeSer, accessor, staticTyping);\n-        // how about views? (1.4+)\n-        AnnotationIntrospector intr = prov.getAnnotationIntrospector();\n-        pbw.setViews(intr.findViews(accessor));\n         return pbw;\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n      *    to use for contained values (only used for properties that are\n      *    of container type)\n      */\n-    protected BeanPropertyWriter buildWriter(String name, JavaType declaredType,\n+    protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef,\n+            JavaType declaredType,\n             JsonSerializer<Object> ser,\n             TypeSerializer typeSer, TypeSerializer contentTypeSer,\n             AnnotatedMember am, boolean defaultUseStaticTyping)\n              */\n             if (ct == null) {\n                 throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property '\"\n-                        +name+\"' (of type \"+_beanDesc.getType()+\"); serialization type \"+serializationType+\" has no content\");\n+                        +propDef.getName()+\"' (of type \"+_beanDesc.getType()+\"); serialization type \"+serializationType+\" has no content\");\n             }\n             serializationType = serializationType.withContentTypeHandler(contentTypeSer);\n             ct = serializationType.getContentType();\n         if (methodProps != null) {\n             switch (methodProps) {\n             case NON_DEFAULT:\n-                valueToSuppress = getDefaultValue(name, m, f);\n+                valueToSuppress = getDefaultValue(propDef.getName(), m, f);\n                 if (valueToSuppress == null) {\n                     suppressNulls = true;\n                 } else {\n             }\n         }\n \n-        BeanPropertyWriter bpw = new BeanPropertyWriter(am, _beanDesc.getClassAnnotations(), name, declaredType,\n+        BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,\n+                am, _beanDesc.getClassAnnotations(), declaredType,\n                 ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n         \n         // [JACKSON-132]: Unwrapping\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.databind.ser.BeanSerializer;\n                 BeanDescription beanDesc, List<BeanPropertyWriter> beanProperties)\n         {\n             JavaType strType = config.constructType(String.class);\n+            // we need a valid BeanPropertyDefinition; this will do (just need name to match)\n+            POJOPropertyBuilder prop = new POJOPropertyBuilder(\"bogus\", null, true);\n             try {\n-                beanProperties.add(new BeanPropertyWriter(\n+                beanProperties.add(new BeanPropertyWriter(prop,\n                         null, null,\n-                        \"bogus\", strType,\n+                        strType,\n                         null, null, strType,\n                         null, EmptyBean.class.getDeclaredField(\"name\"),\n-                        false, null\n-                        ));\n+                        false, null));\n             } catch (NoSuchFieldException e) {\n                 throw new IllegalStateException(e.getMessage());\n             }", "timestamp": 1327541796, "metainfo": ""}