{"sha": "2e5121ee9a521fe27e9caeaa91349183548a8820", "log": "Remove parametrization of ContextualDeserializer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n             ((ResolvableDeserializer) deser).resolve(this);\n         }\n         // Second: contextualize:\n-        if (deser instanceof ContextualDeserializer<?>) {\n-            deser = ((ContextualDeserializer<?>) deser).createContextual(this, property);\n+        if (deser instanceof ContextualDeserializer) {\n+            deser = ((ContextualDeserializer) deser).createContextual(this, property);\n         }\n         return (JsonDeserializer<Object>) deser;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n     {\n         // first: let's check class for the instance itself:\n         AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n-        Class<?> subclass = intr.findDeserializationType(a, type,\n-                (prop == null) ? null : prop.getName());\n+        Class<?> subclass = intr.findDeserializationType(a, type);\n         if (subclass != null) {\n             try {\n                 type = (T) type.narrowBy(subclass);\n \n         // then key class\n         if (type.isContainerType()) {\n-            Class<?> keyClass = intr.findDeserializationKeyType(a, type.getKeyType(),\n-                    (prop == null) ? null : prop.getName());\n+            Class<?> keyClass = intr.findDeserializationKeyType(a, type.getKeyType());\n             if (keyClass != null) {\n                 // illegal to use on non-Maps\n                 if (!(type instanceof MapLikeType)) {\n             }            \n            \n            // and finally content class; only applicable to structured types\n-           Class<?> cc = intr.findDeserializationContentType(a, type.getContentType(),\n-                   (prop == null) ? null : prop.getName());\n+           Class<?> cc = intr.findDeserializationContentType(a, type.getContentType());\n            if (cc != null) {\n                try {\n                    type = (T) type.narrowContentsBy(cc);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java\n  * -- resolution via {@link ResolvableDeserializer} occurs first, and contextual\n  * resolution (via this interface) later on.\n  */\n-public interface ContextualDeserializer<T>\n+public interface ContextualDeserializer\n {\n     /**\n      * Method called to see if a different (or differently configured) deserializer\n      * \n      * @throws JsonMappingException\n      */\n-    public JsonDeserializer<T> createContextual(DeserializationContext ctxt,\n+    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property)\n         throws JsonMappingException;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n         JsonDeserializer<Object> deser = _findCachedDeserializer(propertyType);\n         if (deser != null) {\n             // [JACKSON-385]: need to support contextualization:\n-            if (deser instanceof ContextualDeserializer<?>) {\n-                JsonDeserializer<?> d = ((ContextualDeserializer<?>) deser).createContextual(ctxt, property);\n+            if (deser instanceof ContextualDeserializer) {\n+                JsonDeserializer<?> d = ((ContextualDeserializer) deser).createContextual(ctxt, property);\n                 deser = (JsonDeserializer<Object>) d;\n             }\n             return deser;\n             deser = _handleUnknownValueDeserializer(propertyType);\n         }\n         // [JACKSON-385]: need to support contextualization:\n-        if (deser instanceof ContextualDeserializer<?>) {\n-            JsonDeserializer<?> d = ((ContextualDeserializer<?>) deser).createContextual(ctxt, property);\n+        if (deser instanceof ContextualDeserializer) {\n+            JsonDeserializer<?> d = ((ContextualDeserializer) deser).createContextual(ctxt, property);\n             deser = (JsonDeserializer<Object>) d;\n         }\n         return deser;\n     {\n         // first: let's check class for the instance itself:\n         AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n-        Class<?> subclass = intr.findDeserializationType(a, type,\n-                (prop == null)? null : prop.getName());\n+        Class<?> subclass = intr.findDeserializationType(a, type);\n         if (subclass != null) {\n             try {\n                 type = type.narrowBy(subclass);\n \n         // then key class\n         if (type.isContainerType()) {\n-            Class<?> keyClass = intr.findDeserializationKeyType(a, type.getKeyType(),\n-                    (prop == null)? null : prop.getName());\n+            Class<?> keyClass = intr.findDeserializationKeyType(a, type.getKeyType());\n             if (keyClass != null) {\n                 // illegal to use on non-Maps\n                 if (!(type instanceof MapLikeType)) {\n             }            \n             \n             // and finally content class; only applicable to structured types\n-            Class<?> cc = intr.findDeserializationContentType(a, type.getContentType(),\n-                    (prop == null) ? null : prop.getName());\n+            Class<?> cc = intr.findDeserializationContentType(a, type.getContentType());\n             if (cc != null) {\n                 try {\n                     type = type.narrowContentsBy(cc);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n-import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualDeserialization.java\n     \n     static class MyContextualDeserializer\n         extends JsonDeserializer<ContextualType>\n-        implements ContextualDeserializer<ContextualType>\n+        implements ContextualDeserializer\n     {\n         protected final String _fieldName;\n         \n         }\n \n         @Override\n-        public JsonDeserializer<ContextualType> createContextual(DeserializationContext ctxt,\n+        public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n                 BeanProperty property)\n             throws JsonMappingException\n         {\n      */\n     static class AnnotatedContextualDeserializer\n         extends JsonDeserializer<ContextualType>\n-        implements ContextualDeserializer<ContextualType>\n+        implements ContextualDeserializer\n     {\n         protected final String _fieldName;\n         \n         }\n     \n         @Override\n-        public JsonDeserializer<ContextualType> createContextual(DeserializationContext ctxt,\n+        public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n                 BeanProperty property)\n             throws JsonMappingException\n         {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n         public String name, value;\n     }\n     static class Issue476Deserializer extends BeanDeserializer\n-        implements ContextualDeserializer<Object>\n+        implements ContextualDeserializer\n     {\n         protected static int propCount;\n \n         }\n \n         @Override\n-        public JsonDeserializer<Object> createContextual(DeserializationContext ctxt,\n+        public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n                 BeanProperty property) throws JsonMappingException {\n             propCount++;\n             return this;", "timestamp": 1327940657, "metainfo": ""}