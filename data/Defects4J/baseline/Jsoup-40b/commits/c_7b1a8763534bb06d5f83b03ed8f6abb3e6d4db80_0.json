{"sha": "7b1a8763534bb06d5f83b03ed8f6abb3e6d4db80", "log": "Updated parser to support namespaced attributes (i.e xml:lang=en). Implemented Elements first(), last(), attr(), hasAttr() methods.", "commit": "\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n \n     private Attribute parseAttribute() {\n         tq.consumeWhitespace();\n-        String key = tq.consumeWord(); // todo (Must): allow \":\" in key for namespaced attr (e.g. xml:lang)\n+        String key = tq.consumeAttributeKey();\n         String value = \"\";\n         tq.consumeWhitespace();\n         if (tq.matchChomp(\"=\")) {\n         }\n \n         parent.addChild(child);\n-        stack.addLast(child);\n+\n+        if (!childTag.isEmpty())\n+            stack.addLast(child);\n         return parent;\n     }\n \n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n         return accum.toString();\n     }\n \n+    public String consumeAttributeKey() {\n+        StringBuilder accum = new StringBuilder();\n+        while (!queue.isEmpty() && (Character.isLetterOrDigit(queue.peek()) || matchesAny(\"-\", \"_\", \":\"))) {\n+            accum.append(queue.removeFirst());\n+        }\n+        return accum.toString();\n+    }\n+\n     public String remainder() {\n         StringBuilder accum = new StringBuilder();\n         for (Character character : queue) {\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n \n     public Elements select(String query) {\n         return Selector.select(query, this);\n+    }\n+\n+    /**\n+     Get the attribute value of the first matched element.\n+     @param attributeKey The attribute key.\n+     @return The attribute value from the first matched element. If no elements were matched (isEmpty() == true),\n+     or if the first element does not have the attribute, returns empty string.\n+     @see #hasAttr(String)\n+     */\n+    public String attr(String attributeKey) {\n+        return !contents.isEmpty() ? first().attr(attributeKey) : \"\";\n+    }\n+\n+    /**\n+     Checks if the first matched value has this attribute set.\n+     @param attributeKey attribute key\n+     @return true if the first element has the attribute; false if it doesn't, or if no elements were matched.\n+     */\n+    public boolean hasAttr(String attributeKey) {\n+        return !contents.isEmpty() && first().hasAttr(attributeKey);\n+    }\n+\n+    /**\n+     Get the first matched element.\n+     @return The first matched element, or <code>null</code> if contents is empty;\n+     */\n+    public Element first() {\n+        return !contents.isEmpty() ? contents.get(0) : null;\n+    }\n+\n+    /**\n+     Get the last matched element.\n+     @return The last matched element, or <code>null</code> if contents is empty.\n+     */\n+    public Element last() {\n+        return !contents.isEmpty() ? contents.get(contents.size() - 1) : null;\n     }\n \n     // implements List<Element> delegates:\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n         String h = loadFile(\"/htmltests/smh-biz-article-1.html\");\n         Document doc = Jsoup.parse(h, \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\");\n         assertEquals(\"The board\u2019s next fear: the female quota\", doc.getTitle()); // note that the apos in the source is a literal \u2019 (8217), not escaped or '\n+        assertEquals(\"en\", doc.select(\"html\").attr(\"xml:lang\"));\n+\n         Elements articleBody = doc.select(\".articleBody > *\");\n         assertEquals(17, articleBody.size());\n         // todo: more tests!\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n     }\n \n     @Test public void parsesComments() {\n-        String html = \"<html><head></head><body><!-- <table><tr><td></table> --><p>Hello</p></body></html>\";\n+        String html = \"<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>\";\n         Document doc = Jsoup.parse(html);\n         \n         Element body = doc.getBody();\n-        Comment comment = (Comment) body.childNode(0);\n+        Comment comment = (Comment) body.childNode(1); // comment should not be sub of img, as it's an empty tag\n         assertEquals(\" <table><tr><td></table> \", comment.getData());\n-        Element p = body.child(0);\n+        Element p = body.child(1);\n         TextNode text = (TextNode) p.childNode(0);\n         assertEquals(\"Hello\", text.getWholeText());\n     }", "timestamp": 1309605102, "metainfo": ""}