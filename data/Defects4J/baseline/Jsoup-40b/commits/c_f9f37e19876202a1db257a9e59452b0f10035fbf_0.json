{"sha": "f9f37e19876202a1db257a9e59452b0f10035fbf", "log": "Modified maxBodySize to truncate at precise max.  Rather than previous implementation which was up to the internal buffer size (130K) larger.", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n     /**\n      * Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed,\n      * and the input truncated. The default maximum is 1MB. A max size of zero is treated as an infinite amount (bounded\n-     * only by your patience and the memory available on your machine). The amount actually read may be up to ~ 100K\n-     * larger, as a result of the internal stream read buffer.\n-     *\n+     * only by your patience and the memory available on your machine).\n      * @param bytes number of bytes to read from the input before truncating\n      * @return this Connection, for chaining\n      */\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n     /**\n      * Read the input stream into a byte buffer.\n      * @param inStream the input stream to read from\n-     * @param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited. Note that this size\n-     * is treated as a imprecise hint, and the actual amount read may be greater by up to the size of the internal\n-     * read buffer.\n+     * @param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.\n      * @return the filled byte buffer\n      * @throws IOException if an exception occurs whilst reading from the input stream.\n      */\n     static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n         Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");\n+        final boolean capped = maxSize > 0;\n         byte[] buffer = new byte[bufferSize];\n         ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);\n-        int read, totalRead = 0;\n+        int read;\n+        int remaining = maxSize;\n+\n         while (true) {\n             read = inStream.read(buffer);\n-            totalRead += read;\n             if (read == -1) break;\n+            if (capped) {\n+                if (read > remaining) {\n+                    outStream.write(buffer, 0, remaining);\n+                    break;\n+                }\n+                remaining -= read;\n+            }\n             outStream.write(buffer, 0, read);\n-            if (maxSize > 0 && totalRead >= maxSize) break;\n         }\n         ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());\n         return byteData;\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n     public void maxBodySize() throws IOException {\n         String url = \"http://direct.infohound.net/tools/large.html\"; // 280 K\n \n-        Document defaultDoc = Jsoup.connect(url).get();\n-        Document smallDoc = Jsoup.connect(url).maxBodySize(50 * 1024).get();\n-        Document mediumDoc = Jsoup.connect(url).maxBodySize(200 * 1024).get();\n-        Document largeDoc = Jsoup.connect(url).maxBodySize(300 * 1024).get();\n-        Document unlimitedDoc = Jsoup.connect(url).maxBodySize(0).get();\n-\n-        int actual = 269541;\n-        assertEquals(actual, defaultDoc.text().length());\n-        assertEquals(125812, smallDoc.text().length()); // asked for 50, but rounds up to buffer (~ 130K). ok.\n-        assertEquals(251736, mediumDoc.text().length()); // as above, next multiple of 130K\n-        assertEquals(actual, largeDoc.text().length());\n-        assertEquals(actual, unlimitedDoc.text().length());\n+        Connection.Response defaultRes = Jsoup.connect(url).execute();\n+        Connection.Response smallRes = Jsoup.connect(url).maxBodySize(50 * 1024).execute(); // crops\n+        Connection.Response mediumRes = Jsoup.connect(url).maxBodySize(200 * 1024).execute(); // crops\n+        Connection.Response largeRes = Jsoup.connect(url).maxBodySize(300 * 1024).execute(); // does not crop\n+        Connection.Response unlimitedRes = Jsoup.connect(url).maxBodySize(0).execute();\n+\n+        int actualString = 280735;\n+        assertEquals(actualString, defaultRes.body().length());\n+        assertEquals(50 * 1024, smallRes.body().length());\n+        assertEquals(200 * 1024, mediumRes.body().length());\n+        assertEquals(actualString, largeRes.body().length());\n+        assertEquals(actualString, unlimitedRes.body().length());\n+\n+        int actualDocText = 269541;\n+        assertEquals(actualDocText, defaultRes.parse().text().length());\n+        assertEquals(49165, smallRes.parse().text().length());\n+        assertEquals(196577, mediumRes.parse().text().length());\n+        assertEquals(actualDocText, largeRes.parse().text().length());\n+        assertEquals(actualDocText, unlimitedRes.parse().text().length());\n     }\n }", "timestamp": 1355223109, "metainfo": ""}