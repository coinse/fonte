{"sha": "fcab98cdd311deb3dd4fd63fef2bc6c4c397f186", "log": "Added val() and val(string) to Element and Elements.  Treat contents of textarea as text, not data.  Closes #14", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n             }\n         }\n         return sb.toString();\n-    }\n+    }   \n \n     /**\n      * Gets the literal value of this element's \"class\" attribute, which may include multiple class names, space\n             classes.add(className);\n         classNames(classes);\n \n+        return this;\n+    }\n+    \n+    /**\n+     * Get the value of a form element (input, textarea, etc).\n+     * @return the value of the form element, or empty string if not set.\n+     */\n+    public String val() {\n+        if (tagName().equals(\"textarea\"))\n+            return text();\n+        else\n+            return attr(\"value\");\n+    }\n+    \n+    /**\n+     * Set the value of a form element (input, textarea, etc).\n+     * @param value value to set\n+     * @return this element (for chaining)\n+     */\n+    public Element val(String value) {\n+        if (tagName().equals(\"textarea\"))\n+            text(value);\n+        else\n+            attr(\"value\", value);\n         return this;\n     }\n \n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n     private static final Tag headTag = Tag.valueOf(\"head\");\n     private static final Tag bodyTag = Tag.valueOf(\"body\");\n     private static final Tag titleTag = Tag.valueOf(\"title\");\n+    private static final Tag textareaTag = Tag.valueOf(\"textarea\");\n \n     private final LinkedList<Element> stack;\n     private final TokenQueue tq;\n             tq.chompTo(\">\");\n             \n             Node dataNode;\n-            if (tag.equals(titleTag)) // want to show as text, but not contain inside tags (so not a data tag?)\n+            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)\n                 dataNode = TextNode.createFromEncoded(data, baseUri);\n             else\n                 dataNode = new DataNode(data, baseUri); // data not encoded but raw (for \" in script)\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n                 return true;\n         }\n         return false;\n+    }\n+    \n+    /**\n+     * Get the form element's value of the first matched element.\n+     * @return The form element's value, or empty if not set.\n+     * @see Element#val()\n+     */\n+    public String val() {\n+        if (size() > 0)\n+            return first().val();\n+        else\n+            return \"\";\n+    }\n+    \n+    /**\n+     * Set the form element's value in each of the matched elements.\n+     * @param value The value to set into each matched element\n+     * @return this (for chaining)\n+     */\n+    public Elements val(String value) {\n+        for (Element element : contents)\n+            element.val(value);\n+        return this;\n     }\n     \n     /**\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n     }\n \n     @Test public void handlesDataOnlyTags() {\n-        String t = \"<textarea><p>Foo</p>\\n<p>Bar</p></TEXTAREA>\";\n-        List<Element> tels = Jsoup.parse(t).getElementsByTag(\"textarea\");\n-        assertEquals(\"<p>Foo</p>\\n<p>Bar</p>\", tels.get(0).data());\n+        String t = \"<style>font-family: bold</style>\";\n+        List<Element> tels = Jsoup.parse(t).getElementsByTag(\"style\");\n+        assertEquals(\"font-family: bold\", tels.get(0).data());\n+        assertEquals(\"\", tels.get(0).text());\n \n         String s = \"<p>Hello</p><script>Nope</script><p>There</p>\";\n         Document doc = Jsoup.parse(s);\n         assertEquals(\"Hello There\", doc.text());\n         assertEquals(\"Nope\", doc.data());\n+    }\n+    \n+    @Test public void handlesTextArea() {\n+        Document doc = Jsoup.parse(\"<textarea>Hello</textarea>\");\n+        Elements els = doc.select(\"textarea\");\n+        assertEquals(\"Hello\", els.text());\n+        assertEquals(\"Hello\", els.val());\n     }\n \n     @Test public void createsImplicitLists() {\n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n         ps.html(\"<span>Gone</span>\");\n         assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml()));\n     }\n+    \n+    @Test public void val() {\n+        Document doc = Jsoup.parse(\"<input value='one' /><textarea>two</textarea>\");\n+        Elements els = doc.select(\"form > *\");\n+        assertEquals(2, els.size());\n+        assertEquals(\"one\", els.val());\n+        assertEquals(\"two\", els.last().val());\n+        \n+        els.val(\"three\");\n+        assertEquals(\"three\", els.first().val());\n+        assertEquals(\"three\", els.last().val());\n+        assertEquals(\"<textarea>three</textarea>\", els.last().outerHtml());\n+    }\n \n     @Test public void wrap() {\n         String h = \"<p><b>This</b> is <b>jsoup</b></p>\";", "timestamp": 1309605112, "metainfo": ""}