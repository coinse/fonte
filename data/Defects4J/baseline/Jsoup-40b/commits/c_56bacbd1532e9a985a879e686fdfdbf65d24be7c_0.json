{"sha": "56bacbd1532e9a985a879e686fdfdbf65d24be7c", "log": "Implemented Elements methods text(), eq(), and is().", "commit": "\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n     public Elements(Collection<Element> elements) {\n         contents = new ArrayList<Element>(elements);\n     }\n+    \n+    public Elements(Element... elements) {\n+        this(Arrays.asList(elements));\n+    }\n \n     public Elements select(String query) {\n         return Selector.select(query, this);\n     }\n-\n+    \n+    // attribute methods\n     /**\n      Get the attribute value of the first matched element.\n      @param attributeKey The attribute key.\n         }\n         return this;\n     }\n+    \n+    /**\n+     * Get the combined text of all the matched elements.\n+     * <p>\n+     * Note that it is possible to get repeats if the matched elements contain both parent elements and their own\n+     * children, as the Element.text() method returns the combined text of a parent and all its children.\n+     * @return string of all text: unescaped and no HTML.\n+     * @see Element#text()\n+     */\n+    public String text() {\n+        StringBuilder sb = new StringBuilder();\n+        for (Element element : contents) {\n+            if (sb.length() != 0)\n+                sb.append(\" \");\n+            sb.append(element.text());\n+        }\n+        return sb.toString();\n+    }\n+    \n+    // filters\n+    /**\n+     * Reduce the matched elements to one element\n+     * @param index the (zero-based) index of the element in the list to retain\n+     * @return Elements containing only the specified element, or, if that element did not exist, an empty list.\n+     */\n+    public Elements eq(int index) {\n+        if (contents.size() > index)\n+            return new Elements(get(index));\n+        else\n+            return new Elements();\n+    }\n+    \n+    /**\n+     * Test if any of the matched elements match the supplied query.\n+     * @param query A selector\n+     * @return true if at least one element in the list matches the query.\n+     */\n+    public boolean is(String query) {\n+        Elements children = this.select(query);\n+        return !children.isEmpty();\n+    }\n \n+    // list-like methods\n     /**\n      Get the first matched element.\n      @return The first matched element, or <code>null</code> if contents is empty;\n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n         assertEquals(\"classy\", ps.last().attr(\"style\"));\n         assertEquals(\"bar\", ps.last().attr(\"class\"));\n     }\n+    \n+    @Test public void text() {\n+        String h = \"<div><p>Hello<p>there<p>world</div>\";\n+        Document doc = Jsoup.parse(h);\n+        assertEquals(\"Hello there world\", doc.select(\"div > *\").text());\n+    }\n+    \n+    @Test public void eq() {\n+        String h = \"<p>Hello<p>there<p>world\";\n+        Document doc = Jsoup.parse(h);\n+        assertEquals(\"there\", doc.select(\"p\").eq(1).text());\n+    }\n+    \n+    @Test public void is() {\n+        String h = \"<p>Hello<p title=foo>there<p>world\";\n+        Document doc = Jsoup.parse(h);\n+        Elements ps = doc.select(\"p\");\n+        assertTrue(ps.is(\"[title=foo]\"));\n+        assertFalse(ps.is(\"[title=bar]\"));\n+    }\n }", "timestamp": 1309605103, "metainfo": ""}