{"sha": "823dfdd16943a76ae9b6d70dcd03cb34d2a852fd", "log": "- added more tests  ", "commit": "\n--- a/src/test/org/apache/commons/cli2/validation/DateValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/DateValidatorTest.java\n import java.util.Iterator;\n import java.util.List;\n \n+import junit.framework.Test;\n import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n \n /**\n  * @author Rob Oxspring\n     public static final DateFormat YYYY_MM_YY =\n         new SimpleDateFormat(\"yyyy-MM-dd\");\n     private List formats = Arrays.asList(new Object[] { D_M_YY, YYYY_MM_YY });\n+\n+    public void testSingleFormatValidate() throws InvalidArgumentException {\n+        final Object[] array = new Object[] { \"23/12/03\" };\n+        final List list = Arrays.asList(array);\n+        final Validator validator = new DateValidator(D_M_YY);\n+\n+        validator.validate(list);\n+\n+        final Iterator i = list.iterator();\n+        assertEquals(\"2003-12-23\", YYYY_MM_YY.format((Date)i.next()));\n+        assertFalse(i.hasNext());\n+    }\n+\n+    public void testDefaultDateFormatValidate() throws InvalidArgumentException {\n+        final Object[] array = new Object[] { \"23-Dec-2003\" };\n+        final List list = Arrays.asList(array);\n+        final Validator validator = DateValidator.getDateInstance();\n+\n+        validator.validate(list);\n+\n+        final Iterator i = list.iterator();\n+        assertEquals(\"2003-12-23\", YYYY_MM_YY.format((Date)i.next()));\n+        assertFalse(i.hasNext());\n+    }\n+\n+    public void testDefaultTimeFormatValidate() throws InvalidArgumentException {\n+        final Object[] array = new Object[] { \"18:00:00\" };\n+        final List list = Arrays.asList(array);\n+        final Validator validator = DateValidator.getTimeInstance();\n+\n+        validator.validate(list);\n+\n+        final Iterator i = list.iterator();\n+        final DateFormat df = new SimpleDateFormat(\"HH:mm:ss\");\n+        assertEquals(\"18:00:00\", df.format((Date) i.next()));\n+        assertFalse(i.hasNext());\n+    }\n+\n+    public void testDefaultDateTimeFormatValidate() throws InvalidArgumentException {\n+        final Object[] array = new Object[] { \"23-Jan-2003 18:00:00\" };\n+        final List list = Arrays.asList(array);\n+        final Validator validator = DateValidator.getDateTimeInstance();\n+\n+        validator.validate(list);\n+\n+        final Iterator i = list.iterator();\n+        final DateFormat df = new SimpleDateFormat(\"yyyy/M/dd HH:mm:ss\");\n+        assertEquals(\"2003/1/23 18:00:00\", df.format((Date) i.next()));\n+        assertFalse(i.hasNext());\n+    }\n+\n+    public void testDefaultValidator() throws InvalidArgumentException {\n+        final Object[] array = new Object[] { \"23/01/03 18:00\" };\n+        final List list = Arrays.asList(array);\n+        final Validator validator = new DateValidator();\n+\n+        validator.validate(list);\n+\n+        final Iterator i = list.iterator();\n+        final DateFormat df = new SimpleDateFormat(\"yyyy/M/dd HH:mm:ss\");\n+        assertEquals(\"2003/1/23 18:00:00\", df.format((Date) i.next()));\n+        assertFalse(i.hasNext());\n+    }\n \n     public void testValidate() throws InvalidArgumentException {\n         final Object[] array = new Object[] { \"23/12/03\", \"2002-10-12\" };\n         }\n     }\n \n+    public static Test suite() {\n+        Test result = new TestSuite(DateValidatorTest.class); // default behavior\n+        result = new TimeZoneTestSuite(\"EST\", result); // ensure it runs in EST timezone\n+        return result;\n+    }\n }", "timestamp": 1119051712, "metainfo": ""}