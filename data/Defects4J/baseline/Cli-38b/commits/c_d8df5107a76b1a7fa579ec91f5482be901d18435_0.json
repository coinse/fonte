{"sha": "d8df5107a76b1a7fa579ec91f5482be901d18435", "log": "Fixed some of the checkstyle errors  ", "commit": "\n--- a/src/main/java/org/apache/commons/cli/CommandLine.java\n+++ b/src/main/java/org/apache/commons/cli/CommandLine.java\n  */\n public class CommandLine implements Serializable\n {\n+    /** The serial version UID. */\n     private static final long serialVersionUID = 1L;\n \n     /** the unrecognised options/arguments */\n      */\n     public Object getOptionObject(String opt)\n     {\n-        try {\n+        try\n+        {\n             return getParsedOptionValue(opt);\n-        } catch(ParseException pe) {\n-            System.err.println(\"Exception found converting \" + opt + \" to desired type: \" + \n-                pe.getMessage() );\n+        }\n+        catch (ParseException pe)\n+        {\n+            System.err.println(\"Exception found converting \" + opt + \" to desired type: \" + pe.getMessage());\n             return null;\n         }\n     }\n--- a/src/main/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/main/java/org/apache/commons/cli/HelpFormatter.java\n         for (Iterator i = optList.iterator(); i.hasNext();)\n         {\n             Option option = (Option) i.next();\n-            optBuf = new StringBuffer(8);\n-\n+            optBuf = new StringBuffer();\n+            \n             if (option.getOpt() == null)\n             {\n                 optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n                 return sb;\n             }\n             \n-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n+            if ((text.length() > width) && (pos == nextLineTabStop - 1))\n             {\n                 pos = width;\n             }\n--- a/src/main/java/org/apache/commons/cli/Option.java\n+++ b/src/main/java/org/apache/commons/cli/Option.java\n  */\n public class Option implements Cloneable, Serializable\n {\n+    /** The serial version UID. */\n     private static final long serialVersionUID = 1L;\n \n     /** constant that specifies the number of argument values has not been specified */\n     public int hashCode()\n     {\n         int result;\n-        result = (opt != null ? opt.hashCode() : 0);\n+        result = opt != null ? opt.hashCode() : 0;\n         result = 31 * result + (longOpt != null ? longOpt.hashCode() : 0);\n         return result;\n     }\n--- a/src/main/java/org/apache/commons/cli/OptionBuilder.java\n+++ b/src/main/java/org/apache/commons/cli/OptionBuilder.java\n     public static Option create(String opt) throws IllegalArgumentException\n     {\n         Option option = null;\n-        try {\n+        try\n+        {\n             // create the option\n             option = new Option(opt, description);\n \n             option.setType(type);\n             option.setValueSeparator(valuesep);\n             option.setArgName(argName);\n-        } finally {\n+        }\n+        finally\n+        {\n             // reset the OptionBuilder properties\n             OptionBuilder.reset();\n         }\n--- a/src/main/java/org/apache/commons/cli/OptionGroup.java\n+++ b/src/main/java/org/apache/commons/cli/OptionGroup.java\n  */\n public class OptionGroup implements Serializable\n {\n+    /** The serial version UID. */\n     private static final long serialVersionUID = 1L;\n     \n     /** hold the options */\n--- a/src/main/java/org/apache/commons/cli/Options.java\n+++ b/src/main/java/org/apache/commons/cli/Options.java\n  */\n public class Options implements Serializable\n {\n+    /** The serial version UID. */\n     private static final long serialVersionUID = 1L;\n \n     /** a map of the options with the character key */", "timestamp": 1276684328, "metainfo": ""}