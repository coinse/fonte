{"sha": "9cd78b4c83df53ba302baadac4c976ca84f428f9", "log": "CLI-150: Make WriteableCommandLineImpl.looksLikeOption() more intelligent, so that it does not misinterpret negative numbers passed to arguments as options.  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/WriteableCommandLine.java\n+++ b/src/java/org/apache/commons/cli2/WriteableCommandLine.java\n      * @return true if the argument looks like an Option trigger\n      */\n     boolean looksLikeOption(final String argument);\n+\n+    /**\n+     * Returns the option that is currently processed.\n+     *\n+     * @return the current option\n+     */\n+    Option getCurrentOption();\n+\n+    /**\n+     * Sets the current option. This method is called by concrete option\n+     * implementations during command line processing. It enables the command\n+     * line to keep track about the option that is currently processed.\n+     *\n+     * @param currentOption the new current option\n+     */\n+    void setCurrentOption(Option currentOption);\n }\n--- a/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java\n+++ b/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java\n     private final Map defaultSwitches = new HashMap();\n     private final List normalised;\n     private final Set prefixes;\n+    private Option currentOption;\n+    private String checkForOption;\n \n     /**\n      * Creates a new WriteableCommandLineImpl rooted on the specified Option, to\n                                     final List arguments) {\n         this.prefixes = rootOption.getPrefixes();\n         this.normalised = arguments;\n+        setCurrentOption(rootOption);\n+    }\n+\n+    public Option getCurrentOption() {\n+        return currentOption;\n+    }\n+\n+    public void setCurrentOption(Option currentOption) {\n+        this.currentOption = currentOption;\n     }\n \n     public void addOption(Option option) {\n                 }\n             }\n         }\n-        \n+\n         return valueList == null ? Collections.EMPTY_LIST : valueList;\n     }\n \n         return getProperties(new PropertyOption());\n     }\n \n-    public boolean looksLikeOption(final String trigger) {\n-        for (final Iterator i = prefixes.iterator(); i.hasNext();) {\n-            final String prefix = (String) i.next();\n-\n-            if (trigger.startsWith(prefix)) {\n-                return true;\n+    /**\n+     * Tests whether the passed in trigger looks like an option. This\n+     * implementation first checks whether the passed in string starts with a\n+     * prefix that indicates an option. If this is the case, it is also checked\n+     * whether an option of this name is known for the current option. (This can\n+     * lead to reentrant invocations of this method, so care has to be taken\n+     * about this.)\n+     *\n+     * @param trigger the command line element to test\n+     * @return a flag whether this element seems to be an option\n+     */\n+    public boolean looksLikeOption(final String trigger)\n+    {\n+        if (checkForOption != null)\n+        {\n+            // this is a reentrant call\n+            return !checkForOption.equals(trigger);\n+        }\n+\n+        checkForOption = trigger;\n+        try\n+        {\n+            for (final Iterator i = prefixes.iterator(); i.hasNext();)\n+            {\n+                final String prefix = (String) i.next();\n+\n+                if (trigger.startsWith(prefix))\n+                {\n+                    if (getCurrentOption().canProcess(this, trigger)\n+                            || getCurrentOption().findOption(trigger) != null)\n+                    {\n+                        return true;\n+                    }\n+                }\n             }\n-        }\n-\n-        return false;\n+\n+            return false;\n+        }\n+        finally\n+        {\n+            checkForOption = null;\n+        }\n     }\n \n     public String toString() {\n--- a/src/java/org/apache/commons/cli2/option/GroupImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/GroupImpl.java\n             }\n         }\n \n-        if (commandLine.looksLikeOption(arg)) {\n+        if (looksLikeOption(commandLine, arg)) {\n             return false;\n         }\n \n             else {\n                 // it might be an anonymous argument continue search\n                 // [START argument may be anonymous\n-                if (commandLine.looksLikeOption(arg)) {\n+                if (looksLikeOption(commandLine, arg)) {\n                     // narrow the search\n                     final Collection values = optionMap.tailMap(arg).values();\n \n             option.defaults(commandLine);\n         }\n     }\n+\n+    /**\n+     * Helper method for testing whether an element of the command line looks\n+     * like an option. This method queries the command line, but sets the\n+     * current option first.\n+     *\n+     * @param commandLine the command line\n+     * @param trigger the trigger to be checked\n+     * @return a flag whether this element looks like an option\n+     */\n+    private boolean looksLikeOption(final WriteableCommandLine commandLine,\n+            final String trigger) {\n+        Option oldOption = commandLine.getCurrentOption();\n+        try {\n+            commandLine.setCurrentOption(this);\n+            return commandLine.looksLikeOption(trigger);\n+        } finally {\n+            commandLine.setCurrentOption(oldOption);\n+        }\n+    }\n }\n \n \n--- /dev/null\n+++ b/src/test/org/apache/commons/cli2/bug/BugCLI150Test.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.cli2.bug;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.cli2.Argument;\n+import org.apache.commons.cli2.CommandLine;\n+import org.apache.commons.cli2.Group;\n+import org.apache.commons.cli2.Option;\n+import org.apache.commons.cli2.OptionException;\n+import org.apache.commons.cli2.builder.ArgumentBuilder;\n+import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n+import org.apache.commons.cli2.builder.GroupBuilder;\n+import org.apache.commons.cli2.commandline.Parser;\n+import org.apache.commons.cli2.validation.NumberValidator;\n+\n+/**\n+ * An argument whose value is a negative number is mistaken as an option.\n+ *\n+ * @author Oliver Heger\n+ * @version $Id$\n+ */\n+public class BugCLI150Test extends TestCase\n+{\n+    public void testNegativeNumber() throws OptionException\n+    {\n+        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\n+        final ArgumentBuilder aBuilder = new ArgumentBuilder();\n+        final GroupBuilder gBuilder = new GroupBuilder();\n+\n+        final Argument numArg = aBuilder.withValidator(\n+                NumberValidator.getNumberInstance()).withMinimum(1)\n+                .withMaximum(1).create();\n+        final Option numOpt = oBuilder.withLongName(\"num\").withArgument(numArg)\n+                .create();\n+        final Group options = gBuilder.withOption(numOpt).create();\n+\n+        final Parser parser = new Parser();\n+        parser.setGroup(options);\n+\n+        CommandLine cl = parser.parse(new String[] {\n+                \"--num\", \"-42\"\n+        });\n+        Number num = (Number) cl.getValue(numOpt);\n+        assertEquals(\"Wrong option value\", -42, num.intValue());\n+    }\n+}", "timestamp": 1217449011, "metainfo": ""}