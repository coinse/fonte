{"sha": "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b", "log": "applied some fixes to HelpFormatter, thanks to Rob and Boon   ", "commit": "\n--- a/src/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli/HelpFormatter.java\n     * @param width ??\n     * @param appName The application name\n     * @param options The command line Options\n+    * @see #appendOptionGroup(StringBuffer,OptionGroup)\n+    * @see #appendOption(StringBuffer,Option,boolean)\n     *\n     */\n    public void printUsage( PrintWriter pw, int width, String app, Options options ) \n        StringBuffer buff = new StringBuffer( defaultSyntaxPrefix ).append( app ).append( \" \" );\n        \n        // create a list for processed option groups\n-       ArrayList list = new ArrayList();\n+       final Collection processedGroups = new ArrayList();\n \n        // temp variable\n        Option option;\n-\n+       \n        // iterate over the options\n        for ( Iterator i = options.getOptions().iterator(); i.hasNext(); )\n        {\n            // check if the option is part of an OptionGroup\n            OptionGroup group = options.getOptionGroup( option );\n \n-           // if the option is part of a group and the group has not already\n-           // been processed\n-           if( group != null && !list.contains(group)) {\n-\n-               // add the group to the processed list\n-               list.add( group );\n-\n-               // get the names of the options from the OptionGroup\n-               Collection names = group.getNames();\n-\n-               buff.append( \"[\" ); \n-\n-               // for each option in the OptionGroup\n-               for( Iterator iter = names.iterator(); iter.hasNext(); ) {\n-                   buff.append( iter.next() );\n-                   if( iter.hasNext() ) {\n-                       buff.append( \" | \" );\n-                   }\n+           // if the option is part of a group \n+           if( group != null) {\n+               // and if the group has not already been processed\n+               if( !processedGroups.contains(group) ) {\n+                   // add the group to the processed list\n+                   processedGroups.add( group );\n+                   // add the usage clause\n+                   appendOptionGroup( buff, group );\n                }\n-               buff.append( \"]\" );\n+               // otherwise the option was displayed in the group\n+               // previously so ignore it.\n            }\n            // if the Option is not part of an OptionGroup\n            else {\n-               // if the Option is not a required option\n-               if( !option.isRequired() ) {\n-                   buff.append( \"[\" );\n-               }\n-               \n-               if( !\" \".equals( option.getOpt() ) ) {\n-                   buff.append( \"-\" ).append( option.getOpt() );\n-               }\n-               else {\n-                   buff.append( \"--\" ).append( option.getLongOpt() );\n-               }\n-\n-               // if the Option has a value\n-               if( option.hasArg() && option.getArgName() != null ) {\n-                   buff.append( \" \" ).append( option.getArgName() );\n-               }\n-\n-               // if the Option is not a required option\n-               if( !option.isRequired() ) {\n-                   buff.append( \"]\" );\n-               }\n+               appendOption( buff, option, option.isRequired() );\n+           }\n+           \n+           if( i.hasNext() ){\n                buff.append( \" \" );\n            }\n        }\n        printWrapped( pw, width, buff.toString().indexOf(' ')+1,\n                      buff.toString() );\n    }\n+   \n+   /**\n+    * Appends the usage clause for an OptionGroup to a StringBuffer.  \n+    * The clause is wrapped in square brackets if the group is required.\n+    * The display of the options is handled by appendOption\n+    * @param buff the StringBuffer to append to\n+    * @param group the group to append\n+    * @see #appendOption(StringBuffer,Option,boolean)\n+    */\n+   private static void appendOptionGroup( final StringBuffer buff, final OptionGroup group )\n+   {\n+       if( !group.isRequired() ) {\n+           buff.append( \"[\" ); \n+       }\n+\n+       // for each option in the OptionGroup\n+       for( Iterator i = group.getOptions().iterator(); i.hasNext(); ) {\n+           // whether the option is required or not is handled at group level\n+           appendOption( buff, (Option)i.next(), true);\n+           if( i.hasNext() ) {\n+               buff.append( \" | \" );\n+           }\n+       }\n+       \n+       if( !group.isRequired() ) {\n+           buff.append( \"]\" ); \n+       }\n+   }\n+   \n+   /**\n+    * Appends the usage clause for an Option to a StringBuffer.  \n+    * The clause is wrapped in square brackets if the group is required.\n+    * The display of the options is handled by appendOption\n+    * @param buff the StringBuffer to append to\n+    * @param group the group to append\n+    * @see #appendOption(StringBuffer,Option,boolean)\n+    */\n+   private static void appendOption( final StringBuffer buff, final Option option, final boolean required)\n+   {\n+       if( !required ) {\n+           buff.append( \"[\" );\n+       }\n+\n+       if( option.getOpt() != null ) {\n+           buff.append( \"-\" ).append( option.getOpt() );\n+       }\n+       else {\n+           buff.append( \"--\" ).append( option.getLongOpt() );\n+       }\n+\n+       // if the Option has a value\n+       if( option.hasArg() && option.getArgName() != null ) {\n+           buff.append( \" <\" ).append( option.getArgName() ).append( \">\" );\n+       }\n+\n+       // if the Option is not a required option\n+       if( !required ) {\n+           buff.append( \"]\" );\n+       }\n+   }\n+       \n \n    public void printUsage( PrintWriter pw, int width, String cmdLineSyntax )\n    {\n          option = (Option) i.next();\n          optBuf = new StringBuffer(8);\n \n-         if (option.getOpt().equals(\" \"))\n+         if ( option.getOpt() == null )\n          {\n              optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n          }\n \n          if( option.hasArg() ) {\n              if( option.hasArgName() ) {\n-                 optBuf.append(\" <\").append( option.getArgName() ).append( '>' );\n+                 optBuf.append(\" <\").append( option.getArgName() ).append( \">\" );\n              }\n              else {\n                  optBuf.append(' ');", "timestamp": 1037746219, "metainfo": ""}