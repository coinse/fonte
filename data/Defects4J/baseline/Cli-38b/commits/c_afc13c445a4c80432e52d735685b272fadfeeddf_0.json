{"sha": "afc13c445a4c80432e52d735685b272fadfeeddf", "log": "CLI-266: HelpFormatter.setOptionComparator(null) doesn't display the values in inserted order. Thank you to Ravi Teja. This also closes #6 from GitHub.  ", "commit": "\n--- a/src/main/java/org/apache/commons/cli/OptionGroup.java\n+++ b/src/main/java/org/apache/commons/cli/OptionGroup.java\n \n import java.io.Serializable;\n import java.util.Collection;\n-import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.LinkedHashMap;\n import java.util.Map;\n \n /**\n     private static final long serialVersionUID = 1L;\n     \n     /** hold the options */\n-    private final Map<String, Option> optionMap = new HashMap<String, Option>();\n+    private final Map<String, Option> optionMap = new LinkedHashMap<String, Option>();\n \n     /** the name of the selected option */\n     private String selected;\n--- a/src/main/java/org/apache/commons/cli/Options.java\n+++ b/src/main/java/org/apache/commons/cli/Options.java\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.List;\n     private final List<Object> requiredOpts = new ArrayList<Object>();\n \n     /** a map of the option groups */\n-    private final Map<String, OptionGroup> optionGroups = new HashMap<String, OptionGroup>();\n+    private final Map<String, OptionGroup> optionGroups = new LinkedHashMap<String, OptionGroup>();\n \n     /**\n      * Add the specified option group.\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI266Test.java\n+package org.apache.commons.cli.bug;\n+\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.OptionGroup;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class BugCLI266Test {\n+\n+    private List<String> insertedOrder  =   Arrays.asList(\"h\", \"d\", \"f\", \"x\", \"s\", \"p\", \"t\", \"w\", \"o\");\n+    private List<String> sortOrder      =   Arrays.asList(\"d\", \"f\", \"h\", \"o\", \"p\", \"s\", \"t\", \"w\", \"x\");\n+\n+    @Test\n+    public void testOptionComparatorDefaultOrder() throws ParseException {\n+        HelpFormatter formatter = new HelpFormatter();\n+        List<Option> options = new ArrayList<Option>(getOptions().getOptions());\n+        Collections.sort(options, formatter.getOptionComparator());\n+        int i = 0;\n+        for(Option o: options) {\n+            Assert.assertEquals(o.getOpt(), sortOrder.get(i));\n+            i++;\n+        }\n+    }\n+\n+    @Test\n+    public void testOptionComparatorInsertedOrder() throws ParseException {\n+        Collection<Option> options = getOptions().getOptions();\n+        int i = 0;\n+        for(Option o: options) {\n+            Assert.assertEquals(o.getOpt(), insertedOrder.get(i));\n+            i++;\n+        }\n+    }\n+\n+    private Options getOptions() {\n+        Options options = new Options();\n+        Option help = Option.builder(\"h\")\n+                .longOpt(\"help\")\n+                .desc(\"Prints this help message\")\n+                .build();\n+        options.addOption(help);\n+\n+        buildOptionsGroup(options);\n+\n+        Option t = Option.builder(\"t\")\n+                .required()\n+                .hasArg()\n+                .argName(\"file\")\n+                .build();\n+        Option w = Option.builder(\"w\")\n+                .required()\n+                .hasArg()\n+                .argName(\"word\")\n+                .build();\n+        Option o = Option.builder(\"o\")\n+                .hasArg()\n+                .argName(\"directory\")\n+                .build();\n+        options.addOption(t);\n+        options.addOption(w);\n+        options.addOption(o);\n+        return options;\n+    }\n+\n+    private void buildOptionsGroup(Options options) {\n+        OptionGroup firstGroup = new OptionGroup();\n+        OptionGroup secondGroup = new OptionGroup();\n+        firstGroup.setRequired(true);\n+        secondGroup.setRequired(true);\n+\n+        firstGroup.addOption(Option.builder(\"d\")\n+                .longOpt(\"db\")\n+                .hasArg()\n+                .argName(\"table-name\")\n+                .build());\n+        firstGroup.addOption(Option.builder(\"f\")\n+                .longOpt(\"flat-file\")\n+                .hasArg()\n+                .argName(\"input.csv\")\n+                .build());\n+        options.addOptionGroup(firstGroup);\n+\n+        secondGroup.addOption(Option.builder(\"x\")\n+                .hasArg()\n+                .argName(\"arg1\")\n+                .build());\n+        secondGroup.addOption(Option.builder(\"s\")\n+                .build());\n+        secondGroup.addOption(Option.builder(\"p\")\n+                .hasArg()\n+                .argName(\"arg1\")\n+                .build());\n+        options.addOptionGroup(secondGroup);\n+    }\n+}", "timestamp": 1466540826, "metainfo": ""}