{"sha": "db4a638cf642fd7d031fcaebffa306b0a16ba771", "log": "Fixed testStopAtExpectedArg for PosixParser  ", "commit": "\n--- a/src/java/org/apache/commons/cli/PosixParser.java\n+++ b/src/java/org/apache/commons/cli/PosixParser.java\n \n     /** specifies if bursting should continue */\n     private boolean eatTheRest;\n+\n+    /** holder for the current option */\n+    private Option currentOption;\n \n     /** the command line Options */\n     private Options options;\n                 int pos = token.indexOf('=');\n                 String opt = pos == -1 ? token : token.substring(0, pos); // --foo\n \n-                if (!options.hasOption(opt) && stopAtNonOption)\n-                {\n-                    processNonOptionToken(token);\n+                if (!options.hasOption(opt))\n+                {\n+                    processNonOptionToken(token, stopAtNonOption);\n                 }\n                 else\n                 {\n+                    currentOption = options.getOption(opt);\n+                    \n                     tokens.add(opt);\n                     if (pos != -1)\n                     {\n             }\n             else if (token.startsWith(\"-\"))\n             {\n-                if (token.length() == 2)\n+                if (token.length() == 2 || options.hasOption(token))\n                 {\n                     processOptionToken(token, stopAtNonOption);\n-                }\n-                else if (options.hasOption(token))\n-                {\n-                    tokens.add(token);\n                 }\n                 // requires bursting\n                 else\n                     burstToken(token, stopAtNonOption);\n                 }\n             }\n-            else if (stopAtNonOption)\n-            {\n-                processNonOptionToken(token);\n-            }\n             else\n             {\n-                tokens.add(token);\n+                processNonOptionToken(token, stopAtNonOption);\n             }\n \n             gobble(iter);\n      *\n      * @param value The current token\n      */\n-    private void processNonOptionToken(String value)\n-    {\n-        eatTheRest = true;\n-        tokens.add(\"--\");\n+    private void processNonOptionToken(String value, boolean stopAtNonOption)\n+    {\n+        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))\n+        {\n+            eatTheRest = true;\n+            tokens.add(\"--\");\n+        }\n+\n         tokens.add(value);\n     }\n \n      */\n     private void processOptionToken(String token, boolean stopAtNonOption)\n     {\n-        if (!options.hasOption(token) && stopAtNonOption)\n+        if (stopAtNonOption && !options.hasOption(token))\n         {\n             eatTheRest = true;\n+        }\n+\n+        if (options.hasOption(token))\n+        {\n+            currentOption = options.getOption(token);\n         }\n \n         tokens.add(token);\n      */\n     protected void burstToken(String token, boolean stopAtNonOption)\n     {\n-        Option currentOption;\n-\n         for (int i = 1; i < token.length(); i++)\n         {\n             String ch = String.valueOf(token.charAt(i));\n             }\n             else if (stopAtNonOption)\n             {\n-                processNonOptionToken(token.substring(i));\n+                processNonOptionToken(token.substring(i), true);\n                 break;\n             }\n             else", "timestamp": 1221552303, "metainfo": ""}