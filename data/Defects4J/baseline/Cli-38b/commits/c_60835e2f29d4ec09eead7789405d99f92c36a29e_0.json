{"sha": "60835e2f29d4ec09eead7789405d99f92c36a29e", "log": "[CLI-227] Convert unit tests to junit 4, upgrade junit to 4.11, move authors to pom.xml.  ", "commit": "\n--- a/src/test/java/org/apache/commons/cli/ApplicationTest.java\n+++ b/src/test/java/org/apache/commons/cli/ApplicationTest.java\n \n package org.apache.commons.cli;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n \n /**\n  * This is a collection of tests that test real world applications command lines.\n  *   <li>man</li>\n  * </ul>\n  * </p>\n- *\n- * @author John Keyes (john at integralsource.com)\n  */\n @SuppressWarnings(\"deprecation\") // tests some deprecated classes\n-public class ApplicationTest extends TestCase {\n-\n+public class ApplicationTest\n+{\n+    @Test\n     public void testLs() throws Exception {\n         // create the command line parser\n         CommandLineParser parser = new PosixParser();\n     /**\n      * Ant test\n      */\n+    @Test\n     public void testAnt() throws Exception {\n         // use the GNU parser\n         CommandLineParser parser = new GnuParser( );\n         assertTrue( line.hasOption( \"projecthelp\") );\n     }\n \n+    @Test\n     public void testGroovy() throws Exception {\n         Options options = new Options();\n \n     /**\n      * author Slawek Zachcial\n      */\n+    @Test\n     public void testMan()\n     {\n         String cmdLine =\n     /**\n      * Real world test with long and short options.\n      */\n+    @Test\n     public void testNLT() throws Exception {\n         Option help = new Option(\"h\", \"help\", false, \"print this message\");\n         Option version = new Option(\"v\", \"version\", false, \"print version information\");\n--- a/src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java\n+++ b/src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java\n \n package org.apache.commons.cli;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n \n @SuppressWarnings(\"deprecation\") // tests some deprecated classes\n-public class ArgumentIsOptionTest extends TestCase\n+public class ArgumentIsOptionTest\n {\n     private Options options = null;\n     private CommandLineParser parser = null;\n \n-    @Override\n+    @Before\n     public void setUp()\n     {\n         options = new Options().addOption(\"p\", false, \"Option p\").addOption(\"attr\", true, \"Option accepts argument\");\n         parser = new PosixParser();\n     }\n \n+    @Test\n     public void testOptionAndOptionWithArgument() throws Exception\n     {\n         String[] args = new String[]{\n         assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n     }\n \n+    @Test\n     public void testOptionWithArgument() throws Exception\n     {\n         String[] args = new String[]{\n         assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n     }\n \n+    @Test\n     public void testOption() throws Exception\n     {\n         String[] args = new String[]{\n--- a/src/test/java/org/apache/commons/cli/BasicParserTest.java\n+++ b/src/test/java/org/apache/commons/cli/BasicParserTest.java\n \n package org.apache.commons.cli;\n \n-/**\n- * @author Emmanuel Bourg\n- * @version $Revision$, $Date$\n- */\n+import org.junit.Before;\n+\n @SuppressWarnings(\"deprecation\") // tests some deprecated classes\n public class BasicParserTest extends ParserTestCase\n {\n-    @Override\n+    @Before\n     public void setUp()\n     {\n         super.setUp();\n--- a/src/test/java/org/apache/commons/cli/BugsTest.java\n+++ b/src/test/java/org/apache/commons/cli/BugsTest.java\n \n package org.apache.commons.cli;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.io.ByteArrayOutputStream;\n import java.io.PrintStream;\n import java.util.Iterator;\n import java.util.Properties;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n @SuppressWarnings(\"deprecation\") // tests some deprecated classes\n-public class BugsTest extends TestCase\n+public class BugsTest\n {\n+    @Test\n     public void test11457() throws Exception\n     {\n         Options options = new Options();\n         assertTrue(cmd.hasOption(\"verbose\"));\n     }\n \n+    @Test\n     public void test11458() throws Exception\n     {\n         Options options = new Options();\n         }\n     }\n \n+    @Test\n     public void test11680() throws Exception\n     {\n         Options options = new Options();\n         cmd.getOptionValue(\"m\", \"default m\");\n     }\n \n+    @Test\n     public void test11456() throws Exception\n     {\n         // Posix \n         assertEquals( cmd.getOptionValue( 'b' ), \"value\" );\n     }\n \n+    @Test\n     public void test12210() throws Exception\n     {\n         // create the main options object which will handle the first parameter\n         }\n     }\n \n+    @Test\n     public void test13425() throws Exception\n     {\n         Options options = new Options();\n         }\n     }\n \n+    @Test\n     public void test13666() throws Exception\n     {\n         Options options = new Options();\n         }\n     }\n \n+    @Test\n     public void test13935() throws Exception\n     {\n         OptionGroup directions = new OptionGroup();\n         assertNotNull(line);\n     }\n \n+    @Test\n     public void test14786() throws Exception\n     {\n         Option o = OptionBuilder.isRequired().withDescription(\"test\").create(\"test\");\n         assertTrue( line.hasOption( \"test\" ) );\n     }\n \n+    @Test\n     public void test15046() throws Exception\n     {\n         CommandLineParser parser = new PosixParser();\n         assertTrue( !line.hasOption(\"c\") );\n     }\n \n+    @Test\n     public void test15648() throws Exception\n     {\n         CommandLineParser parser = new PosixParser();\n         assertEquals( \"Two Words\", line.getOptionValue( \"m\" ) );\n     }\n     \n+    @Test\n     public void test31148() throws ParseException\n     {\n         Option multiArgOption = new Option(\"o\",\"option with multiple args\");\n--- a/src/test/java/org/apache/commons/cli/CommandLineTest.java\n+++ b/src/test/java/org/apache/commons/cli/CommandLineTest.java\n \n package org.apache.commons.cli;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n import java.util.Properties;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n-/**\n- * @author Emmanuel Bourg\n- * @version $Revision$, $Date$\n- */\n @SuppressWarnings(\"deprecation\") // tests some deprecated classes\n-public class CommandLineTest extends TestCase\n+public class CommandLineTest\n {\n+    @Test\n     public void testGetOptionProperties() throws Exception\n     {\n         String[] args = new String[] { \"-Dparam1=value1\", \"-Dparam2=value2\", \"-Dparam3\", \"-Dparam4=value4\", \"-D\", \"--property\", \"foo=bar\" };\n         assertEquals(\"property with long format\", \"bar\", cl.getOptionProperties(\"property\").getProperty(\"foo\"));\n     }\n \n+    @Test\n     public void testGetOptions()\n     {\n         CommandLine cmd = new CommandLine();\n         assertEquals(3, cmd.getOptions().length);\n     }\n \n+    @Test\n     public void testGetParsedOptionValue() throws Exception {\n         Options options = new Options();\n         options.addOption(OptionBuilder.hasArg().withType(Number.class).create(\"i\"));\n--- a/src/test/java/org/apache/commons/cli/DefaultParserTest.java\n+++ b/src/test/java/org/apache/commons/cli/DefaultParserTest.java\n \n package org.apache.commons.cli;\n \n-/**\n- * @author Emmanuel Bourg\n- * @version $Revision$, $Date$\n- */\n+import org.junit.Before;\n+\n public class DefaultParserTest extends ParserTestCase {\n \n-    @Override\n+    @Before\n     public void setUp() {\n         super.setUp();\n         parser = new DefaultParser();\n--- a/src/test/java/org/apache/commons/cli/GnuParserTest.java\n+++ b/src/test/java/org/apache/commons/cli/GnuParserTest.java\n \n package org.apache.commons.cli;\n \n+import org.junit.Before;\n+\n @SuppressWarnings(\"deprecation\") // tests some deprecated classes\n public class GnuParserTest extends ParserTestCase\n {\n-    @Override\n+    @Before\n     public void setUp()\n     {\n         super.setUp();\n         // not supported by the GnuParser\n     }\n \n-   @Override\n-public void testAmbiguousPartialLongOption3() throws Exception\n+    @Override\n+    public void testAmbiguousPartialLongOption3() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n--- a/src/test/java/org/apache/commons/cli/HelpFormatterTest.java\n+++ b/src/test/java/org/apache/commons/cli/HelpFormatterTest.java\n \n package org.apache.commons.cli;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n import java.io.ByteArrayOutputStream;\n import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.util.Comparator;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /** \n- * Test case for the HelpFormatter class \n- *\n- * @author Slawek Zachcial\n- * @author John Keyes ( john at integralsource.com )\n- * @author brianegge\n+ * Test case for the HelpFormatter class.\n  */\n-public class HelpFormatterTest extends TestCase\n+public class HelpFormatterTest\n {\n     private static final String EOL = System.getProperty(\"line.separator\");\n \n+    @Test\n     public void testFindWrapPos() throws Exception\n     {\n         HelpFormatter hf = new HelpFormatter();\n         assertEquals(\"wrap position 6\", 7, hf.findWrapPos(text, 6, 0));\n     }\n \n+    @Test\n     public void testRenderWrappedTextWordCut()\n     {\n         int width = 7;\n         assertEquals(\"cut and wrap\", expected, sb.toString());\n     }\n \n+    @Test\n     public void testRenderWrappedTextSingleLine()\n     {\n         // single line text\n         assertEquals(\"single line text\", expected, sb.toString());\n     }\n \n+    @Test\n     public void testRenderWrappedTextSingleLinePadded()\n     {\n         // single line padded text\n         assertEquals(\"single line padded text\", expected, sb.toString());\n     }\n \n+    @Test\n     public void testRenderWrappedTextSingleLinePadded2()\n     {\n         // single line padded text 2\n         assertEquals(\"single line padded text 2\", expected, sb.toString());\n     }\n \n+    @Test\n     public void testRenderWrappedTextMultiLine()\n     {\n         // multi line text\n         assertEquals(\"multi line text\", expected, sb.toString());\n     }\n \n+    @Test\n     public void testRenderWrappedTextMultiLinePadded()\n     {\n         // multi-line padded text\n         assertEquals(\"multi-line padded text\", expected, sb.toString());\n     }\n \n+    @Test\n     public void testPrintOptions() throws Exception\n     {\n         StringBuffer sb = new StringBuffer();\n         assertEquals(\"multiple wrapped options\", expected, sb.toString());\n     }\n \n+    @Test\n     public void testPrintHelpWithEmptySyntax()\n     {\n         HelpFormatter formatter = new HelpFormatter();\n         }\n     }\n \n+    @Test\n     public void testAutomaticUsage() throws Exception\n     {\n         HelpFormatter hf = new HelpFormatter();\n \n     // This test ensures the options are properly sorted\n     // See https://issues.apache.org/jira/browse/CLI-131\n+    @Test\n     public void testPrintUsage()\n     {\n         Option optionA = new Option(\"a\", \"first\");\n     }\n \n     // uses the test for CLI-131 to implement CLI-155\n+    @Test\n     public void testPrintSortedUsage()\n     {\n         Options opts = new Options();\n         {\n             public int compare(Option opt1, Option opt2)\n             {\n-                // reverses the fuctionality of the default comparator\n+                // reverses the functionality of the default comparator\n                 return opt2.getKey().compareToIgnoreCase(opt1.getKey());\n             }\n         });\n         assertEquals(\"usage: app [-c] [-b] [-a]\" + EOL, out.toString());\n     }\n \n+    @Test\n     public void testPrintSortedUsageWithNullComparator()\n     {\n         Options opts = new Options();\n         assertEquals(\"usage: app [-c] [-b] [-a]\" + EOL, out.toString());\n     }\n \n+    @Test\n     public void testPrintOptionGroupUsage()\n     {\n         OptionGroup group = new OptionGroup();\n         assertEquals(\"usage: app [-a | -b | -c]\" + EOL, out.toString());\n     }\n \n+    @Test\n     public void testPrintRequiredOptionGroupUsage()\n     {\n         OptionGroup group = new OptionGroup();\n         assertEquals(\"usage: app -a | -b | -c\" + EOL, out.toString());\n     }\n \n+    @Test\n     public void testPrintOptionWithEmptyArgNameUsage()\n     {\n         Option option = new Option(\"f\", true, null);\n         assertEquals(\"usage: app -f\" + EOL, out.toString());\n     }\n \n+    @Test\n     public void testDefaultArgName()\n     {\n         Option option = OptionBuilder.hasArg().isRequired().create(\"f\");\n         assertEquals(\"usage: app -f <argument>\" + EOL, out.toString());\n     }\n \n+    @Test\n     public void testRtrim()\n     {\n         HelpFormatter formatter = new HelpFormatter();\n         assertEquals(\"  foo\", formatter.rtrim(\"  foo  \"));\n     }\n \n+    @Test\n     public void testAccessors()\n     {\n         HelpFormatter formatter = new HelpFormatter();\n         assertEquals(\"width\", 80, formatter.getWidth());\n     }\n     \n+    @Test\n     public void testHeaderStartingWithLineSeparator()\n     {\n         // related to Bugzilla #21215\n                 , out.toString());\n     }\n \n+    @Test\n     public void testIndentedHeaderAndFooter()\n     {\n         // related to CLI-207\n                 , out.toString());\n     }\n \n+    @Test\n     public void testOptionWithoutShortFormat()\n     {\n         // related to Bugzilla #19383 (CLI-67)\n                 , out.toString());\n     }\n     \n-\n+    @Test\n     public void testOptionWithoutShortFormat2()\n     {\n         // related to Bugzilla #27635 (CLI-26)\n                 ,out.toString());\n     }\n     \n+    @Test\n     public void testHelpWithLongOptSeparator() throws Exception\n     {\n         Options options = new Options();\n                 out.toString());\n     }\n \n+    @Test\n     public void testUsageWithLongOptSeparator() throws Exception\n     {\n         Options options = new Options();\n--- a/src/test/java/org/apache/commons/cli/OptionBuilderTest.java\n+++ b/src/test/java/org/apache/commons/cli/OptionBuilderTest.java\n \n package org.apache.commons.cli;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n-public class OptionBuilderTest extends TestCase {\n+import org.junit.Test;\n \n+public class OptionBuilderTest\n+{\n+    @Test\n     public void testCompleteOption( ) {\n         Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                      .hasArg( )\n         assertTrue( simple.hasArgs() );\n     }\n \n+    @Test\n     public void testTwoCompleteOptions( ) {\n         Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                      .hasArg( )\n         assertTrue( !simple.hasArgs() );\n     }\n \n+    @Test\n     public void testBaseOptionCharOpt() {\n         Option base = OptionBuilder.withDescription( \"option description\")\n                                    .create( 'o' );\n         assertTrue( !base.hasArg() );\n     }\n \n+    @Test\n     public void testBaseOptionStringOpt() {\n         Option base = OptionBuilder.withDescription( \"option description\")\n                                    .create( \"o\" );\n         assertTrue( !base.hasArg() );\n     }\n \n+    @Test\n     public void testSpecialOptChars() throws Exception\n     {\n         // '?'\n         }\n     }\n \n+    @Test\n     public void testOptionArgNumbers()\n     {\n         Option opt = OptionBuilder.withDescription( \"option description\" )\n         assertEquals( 2, opt.getArgs() );\n     }\n \n+    @Test\n     public void testIllegalOptions() {\n         // bad single character option\n         try {\n         }\n     }\n \n+    @Test\n     public void testCreateIncompleteOption() {\n         try\n         {\n         }\n     }\n \n+    @Test\n     public void testBuilderIsResettedAlways() {\n         try\n         {\n--- a/src/test/java/org/apache/commons/cli/OptionGroupTest.java\n+++ b/src/test/java/org/apache/commons/cli/OptionGroupTest.java\n \n package org.apache.commons.cli;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.util.Properties;\n \n-import junit.framework.TestCase;\n-\n-/**\n- * @author John Keyes (john at integralsource.com)\n- * @version $Revision$\n- */\n+import org.junit.Before;\n+import org.junit.Test;\n+\n @SuppressWarnings(\"deprecation\") // tests some deprecated classes\n-public class OptionGroupTest extends TestCase\n+public class OptionGroupTest\n {\n     private Options _options = null;\n     private Parser parser = new PosixParser();\n \n-    @Override\n+    @Before\n     public void setUp()\n     {\n         Option file = new Option( \"f\", \"file\", false, \"file to process\" );\n         _options.addOption( \"r\", \"revision\", false, \"revision number\" );\n     }\n \n+    @Test\n     public void testSingleOptionFromGroup() throws Exception\n     {\n         String[] args = new String[] { \"-f\" };\n         assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n     }\n \n+    @Test\n     public void testSingleOption() throws Exception\n     {\n         String[] args = new String[] { \"-r\" };\n         assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n     }\n \n+    @Test\n     public void testTwoValidOptions() throws Exception\n     {\n         String[] args = new String[] { \"-r\", \"-f\" };\n         assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n     }\n \n+    @Test\n     public void testSingleLongOption() throws Exception\n     {\n         String[] args = new String[] { \"--file\" };\n         assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n     }\n \n+    @Test\n     public void testTwoValidLongOptions() throws Exception\n     {\n         String[] args = new String[] { \"--revision\", \"--file\" };\n         assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n     }\n \n+    @Test\n     public void testNoOptionsExtraArgs() throws Exception\n     {\n         String[] args = new String[] { \"arg1\", \"arg2\" };\n         assertTrue( \"Confirm TWO extra args\", cl.getArgList().size() == 2);\n     }\n \n+    @Test\n     public void testTwoOptionsFromGroup() throws Exception\n     {\n         String[] args = new String[] { \"-f\", \"-d\" };\n         }\n     }\n \n+    @Test\n     public void testTwoLongOptionsFromGroup() throws Exception\n     {\n         String[] args = new String[] { \"--file\", \"--directory\" };\n         }\n     }\n \n+    @Test\n     public void testTwoOptionsFromDifferentGroup() throws Exception\n     {\n         String[] args = new String[] { \"-f\", \"-s\" };\n         assertTrue( \"Confirm NO extra args\", cl.getArgList().size() == 0);\n     }\n \n+    @Test\n     public void testTwoOptionsFromGroupWithProperties() throws Exception\n     {\n         String[] args = new String[] { \"-f\" };\n         assertTrue(!cl.hasOption(\"d\"));\n     }\n \n+    @Test\n     public void testValidLongOnlyOptions() throws Exception\n     {\n         CommandLine cl1 = parser.parse(_options, new String[]{\"--export\"});\n         assertTrue(\"Confirm --import is set\", cl2.hasOption(\"import\"));\n     }\n \n+    @Test\n     public void testToString()\n     {\n         OptionGroup group1 = new OptionGroup();\n         }\n     }\n \n+    @Test\n     public void testGetNames()\n     {\n         OptionGroup group = new OptionGroup();\n--- a/src/test/java/org/apache/commons/cli/OptionTest.java\n+++ b/src/test/java/org/apache/commons/cli/OptionTest.java\n \n package org.apache.commons.cli;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertTrue;\n \n-/**\n- * @author brianegge\n- */\n-public class OptionTest extends TestCase\n+import org.junit.Test;\n+\n+public class OptionTest\n {\n     private static class TestOption extends Option\n     {\n         }\n     }\n \n+    @Test\n     public void testClear()\n     {\n         TestOption option = new TestOption(\"x\", true, \"\");\n     }\n \n     // See http://issues.apache.org/jira/browse/CLI-21\n+    @Test\n     public void testClone()\n     {\n         TestOption a = new TestOption(\"a\", true, \"\");\n         }\n     }\n \n+    @Test\n     public void testSubclass()\n     {\n         Option option = new DefaultOption(\"f\", \"file\", \"myfile.txt\");\n         assertEquals(DefaultOption.class, clone.getClass());\n     }\n \n+    @Test\n     public void testHasArgName()\n     {\n         Option option = new Option(\"f\", null);\n         assertTrue(option.hasArgName());\n     }\n \n+    @Test\n     public void testHasArgs()\n     {\n         Option option = new Option(\"f\", null);\n         assertFalse(option.hasArgs());\n     }\n \n+    @Test\n     public void testGetValue()\n     {\n         Option option = new Option(\"f\", null);\n--- a/src/test/java/org/apache/commons/cli/OptionsTest.java\n+++ b/src/test/java/org/apache/commons/cli/OptionsTest.java\n \n package org.apache.commons.cli;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.util.ArrayList;\n import java.util.Collection;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n-/**\n- * @author Rob Oxspring roxspring@apache.org\n- * @version $Revision$\n- */\n @SuppressWarnings(\"deprecation\") // tests some deprecated classes\n-public class OptionsTest extends TestCase\n+public class OptionsTest\n {\n+    @Test\n     public void testSimple()\n     {\n         Options opts = new Options();\n         assertTrue(opts.hasOption(\"b\"));\n     }\n \n+    @Test\n     public void testDuplicateSimple()\n     {\n         Options opts = new Options();\n         assertEquals(\"last one in wins\", \"toggle -a*\", opts.getOption(\"a\").getDescription());\n     }\n \n+    @Test\n     public void testLong()\n     {\n         Options opts = new Options();\n         assertTrue(opts.hasOption(\"b\"));\n     }\n \n+    @Test\n     public void testDuplicateLong()\n     {\n         Options opts = new Options();\n         assertEquals(\"last one in wins\", \"toggle -a*\", opts.getOption(\"a\").getDescription());\n     }\n \n+    @Test\n     public void testHelpOptions()\n     {\n         Option longOnly1 = OptionBuilder.withLongOpt(\"long-only1\").create();\n         assertTrue(\"Everything in help should be in all\", allOptions.containsAll(helpOptions));        \n     }\n \n+    @Test\n     public void testMissingOptionException() throws ParseException\n     {\n         Options options = new Options();\n         }\n     }\n \n+    @Test\n     public void testMissingOptionsException() throws ParseException\n     {\n         Options options = new Options();\n         }\n     }\n \n+    @Test\n     public void testToString()\n     {\n         Options options = new Options();\n         assertTrue(\"bar option missing\", s.toLowerCase().indexOf(\"bar\") != -1);\n     }\n \n+    @Test\n     public void testGetOptionsGroups()\n     {\n         Options options = new Options();\n         assertEquals(2, options.getOptionGroups().size());\n     }\n     \n+    @Test\n     public void testGetMatchingOpts()\n     {\n         Options options = new Options();\n--- a/src/test/java/org/apache/commons/cli/ParserTestCase.java\n+++ b/src/test/java/org/apache/commons/cli/ParserTestCase.java\n \n package org.apache.commons.cli;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.util.Arrays;\n import java.util.List;\n import java.util.Properties;\n \n-import junit.framework.TestCase;\n+import org.junit.Before;\n+import org.junit.Test;\n \n /**\n  * Abstract test case testing common parser features.\n- *\n- * @author Emmanuel Bourg\n- * @version $Revision$, $Date$\n  */\n-public abstract class ParserTestCase extends TestCase\n+public abstract class ParserTestCase\n {\n     protected CommandLineParser parser;\n \n     protected Options options;\n \n-    @Override\n+    @Before\n     public void setUp()\n     {\n         options = new Options()\n             .addOption(\"c\", \"copt\", false, \"turn [c] on or off\");\n     }\n \n+    @Test\n     public void testSimpleShort() throws Exception\n     {\n         String[] args = new String[] { \"-a\",\n         assertTrue(\"Confirm size of extra args\", cl.getArgList().size() == 2);\n     }\n \n+    @Test\n     public void testSimpleLong() throws Exception\n     {\n         String[] args = new String[] { \"--enable-a\",\n         assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n     }\n \n+    @Test\n     public void testMultiple() throws Exception\n     {\n         String[] args = new String[] { \"-c\",\n         assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n     }\n \n+    @Test\n     public void testMultipleWithLong() throws Exception\n     {\n         String[] args = new String[] { \"--copt\",\n         assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n     }\n \n+    @Test\n     public void testUnrecognizedOption() throws Exception\n     {\n         String[] args = new String[] { \"-a\", \"-d\", \"-b\", \"toast\", \"foo\", \"bar\" };\n         }\n     }\n \n+    @Test\n     public void testMissingArg() throws Exception\n     {\n         String[] args = new String[] { \"-b\" };\n         assertTrue( \"Confirm MissingArgumentException caught\", caught );\n     }\n \n+    @Test\n     public void testDoubleDash1() throws Exception\n     {\n         String[] args = new String[] { \"--copt\",\n         assertTrue(\"Confirm 2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n     }\n \n+    @Test\n     public void testDoubleDash2() throws Exception\n     {\n         Options options = new Options();\n         }\n     }\n     \n+    @Test\n     public void testSingleDash() throws Exception\n     {\n         String[] args = new String[] { \"--copt\",\n         assertTrue(\"Confirm value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"-\"));\n     }\n \n+    @Test\n     public void testStopAtUnexpectedArg() throws Exception\n     {\n         String[] args = new String[] { \"-c\",\n         assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n     }\n \n-   public void testStopAtExpectedArg() throws Exception\n+    @Test\n+    public void testStopAtExpectedArg() throws Exception\n     {\n         String[] args = new String[]{\"-b\", \"foo\"};\n \n         assertTrue(\"Confirm no extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 0);\n     }\n \n+    @Test\n     public void testStopAtNonOptionShort() throws Exception\n     {\n         String[] args = new String[]{\"-z\",\n         assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n     }\n \n+    @Test\n     public void testStopAtNonOptionLong() throws Exception\n     {\n         String[] args = new String[]{\"--zop==1\",\n         assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n     }\n \n+    @Test\n     public void testNegativeArgument() throws Exception\n     {\n         String[] args = new String[] { \"-b\", \"-1\"} ;\n         assertEquals(\"-1\", cl.getOptionValue(\"b\"));\n     }\n \n+    @Test\n     public void testNegativeOption() throws Exception\n     {\n         String[] args = new String[] { \"-b\", \"-1\"} ;\n         assertEquals(\"-1\", cl.getOptionValue(\"b\"));\n     }\n     \n+    @Test\n     public void testArgumentStartingWithHyphen() throws Exception\n     {\n         String[] args = new String[]{\"-b\", \"-foo\"};\n         assertEquals(\"-foo\", cl.getOptionValue(\"b\"));\n     }\n \n+    @Test\n     public void testShortWithEqual() throws Exception\n     {\n         String[] args = new String[] { \"-f=bar\" };\n         assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n     }\n \n+    @Test\n     public void testShortWithoutEqual() throws Exception\n     {\n         String[] args = new String[] { \"-fbar\" };\n         assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n     }\n \n+    @Test\n     public void testLongWithEqualDoubleDash() throws Exception\n     {\n         String[] args = new String[] { \"--foo=bar\" };\n         assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n     }\n \n+    @Test\n     public void testLongWithEqualSingleDash() throws Exception\n     {\n         String[] args = new String[] { \"-foo=bar\" };\n         assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n     }\n \n+    @Test\n     public void testLongWithoutEqualSingleDash() throws Exception\n     {\n         String[] args = new String[] { \"-foobar\" };\n         assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n     }\n     \n+    @Test\n     public void testAmbiguousLongWithoutEqualSingleDash() throws Exception\n     {\n         String[] args = new String[] { \"-b\", \"-foobar\" };\n         assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n     }\n \n+    @Test\n     public void testLongWithoutEqualDoubleDash() throws Exception\n     {\n         String[] args = new String[] { \"--foobar\" };\n         assertFalse(cl.hasOption(\"foo\")); // foo isn't expected to be recognized with a double dash\n     }\n \n+    @Test\n     public void testLongWithUnexpectedArgument1() throws Exception\n     {\n         String[] args = new String[] { \"--foo=bar\" };\n         fail(\"UnrecognizedOptionException not thrown\");\n     }\n \n+    @Test\n     public void testLongWithUnexpectedArgument2() throws Exception\n     {\n         String[] args = new String[] { \"-foobar\" };\n         fail(\"UnrecognizedOptionException not thrown\");\n     }\n \n+    @Test\n     public void testShortWithUnexpectedArgument() throws Exception\n     {\n         String[] args = new String[] { \"-f=bar\" };\n         fail(\"UnrecognizedOptionException not thrown\");\n     }\n     \n+    @Test\n     public void testPropertiesOption1() throws Exception\n     {\n         String[] args = new String[] { \"-Jsource=1.5\", \"-J\", \"target\", \"1.5\", \"foo\" };\n         assertEquals(\"Expecting foo\", \"foo\", argsleft.get(0));\n     }\n \n+    @Test\n     public void testPropertiesOption2() throws Exception\n     {\n         String[] args = new String[] { \"-Dparam1\", \"-Dparam2=value2\", \"-D\"};\n         assertEquals(\"Should be no arg left\", 0, argsleft.size());\n     }\n \n+    @Test\n     public void testUnambiguousPartialLongOption1() throws Exception\n     {\n         String[] args = new String[] { \"--ver\" };\n         assertTrue(\"Confirm --version is set\", cl.hasOption(\"version\"));\n     }\n \n+    @Test\n     public void testUnambiguousPartialLongOption2() throws Exception\n     {\n         String[] args = new String[] { \"-ver\" };\n         assertTrue(\"Confirm --version is set\", cl.hasOption(\"version\"));\n     }\n \n+    @Test\n     public void testUnambiguousPartialLongOption3() throws Exception\n     {\n         String[] args = new String[] { \"--ver=1\" };\n         assertEquals(\"1\", cl.getOptionValue(\"verbose\"));\n     }\n \n+    @Test\n     public void testUnambiguousPartialLongOption4() throws Exception\n     {\n         String[] args = new String[] { \"-ver=1\" };\n         assertEquals(\"1\", cl.getOptionValue(\"verbose\"));\n     }\n     \n+    @Test\n     public void testAmbiguousPartialLongOption1() throws Exception\n     {\n         String[] args = new String[] { \"--ver\" };\n         assertTrue( \"Confirm MissingArgumentException caught\", caught );\n     }\n     \n+    @Test\n     public void testAmbiguousPartialLongOption2() throws Exception\n     {\n         String[] args = new String[] { \"-ver\" };\n         assertTrue( \"Confirm MissingArgumentException caught\", caught );\n     }\n \n+    @Test\n     public void testAmbiguousPartialLongOption3() throws Exception\n     {\n         String[] args = new String[] { \"--ver=1\" };\n         assertTrue( \"Confirm MissingArgumentException caught\", caught );\n     }\n \n+    @Test\n     public void testAmbiguousPartialLongOption4() throws Exception\n     {\n         String[] args = new String[] { \"-ver=1\" };\n         assertTrue( \"Confirm MissingArgumentException caught\", caught );\n     }\n     \n+    @Test\n     public void testPartialLongOptionSingleDash() throws Exception\n     {\n         String[] args = new String[] { \"-ver\" };\n         assertTrue(\"Confirm -v is not set\", !cl.hasOption(\"v\"));\n     }\n \n+    @Test\n     public void testWithRequiredOption() throws Exception\n     {\n         String[] args = new String[] { \"-b\", \"file\" };\n         assertTrue(\"Confirm NO of extra args\", cl.getArgList().size() == 0);\n     }\n \n+    @Test\n     public void testOptionAndRequiredOption() throws Exception\n     {\n         String[] args = new String[] { \"-a\", \"-b\", \"file\" };\n         assertTrue(\"Confirm NO of extra args\", cl.getArgList().size() == 0);\n     }\n \n+    @Test\n     public void testMissingRequiredOption()\n     {\n         String[] args = new String[] { \"-a\" };\n         }\n     }\n \n+    @Test\n     public void testMissingRequiredOptions()\n     {\n         String[] args = new String[] { \"-a\" };\n         }\n     }\n     \n+    @Test\n     public void testMissingRequiredGroup() throws Exception\n     {\n         OptionGroup group = new OptionGroup();\n         }\n     }\n     \n+    @Test\n     public void testOptionGroup() throws Exception\n     {\n         OptionGroup group = new OptionGroup();\n         assertEquals(\"selected option\", \"b\", group.getSelected());\n     }\n \n+    @Test\n     public void testOptionGroupLong() throws Exception\n     {\n         OptionGroup group = new OptionGroup();\n         assertEquals(\"selected option\", \"bar\", group.getSelected());\n     }\n     \n+    @Test\n     public void testReuseOptionsTwice() throws Exception\n     {\n         Options opts = new Options();\n         }\n     }\n \n+    @Test\n     public void testBursting() throws Exception\n     {\n         String[] args = new String[] { \"-acbtoast\", \"foo\", \"bar\" };\n         assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n     }\n \n+    @Test\n     public void testUnrecognizedOptionWithBursting() throws Exception\n     {\n         String[] args = new String[] { \"-adbtoast\", \"foo\", \"bar\" };\n         }\n     }\n \n+    @Test\n     public void testMissingArgWithBursting() throws Exception\n     {\n         String[] args = new String[] { \"-acb\" };\n         assertTrue( \"Confirm MissingArgumentException caught\", caught );\n     }\n \n+    @Test\n     public void testStopBursting() throws Exception\n     {\n         String[] args = new String[] { \"-azc\" };\n         assertTrue(cl.getArgList().contains(\"zc\"));\n     }\n \n+    @Test\n     public void testStopBursting2() throws Exception\n     {\n         String[] args = new String[] { \"-c\", \"foobar\", \"-btoast\" };\n         assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n     }\n \n+    @Test\n     public void testUnlimitedArgs() throws Exception\n     {\n         String[] args = new String[]{\"-e\", \"one\", \"two\", \"-f\", \"alpha\"};\n         }\n     }\n \n+    @Test\n     public void testPropertyOptionSingularValue() throws Exception\n     {\n         Options opts = new Options();\n         assertTrue( !cmd.hasOption(\"fake\") );\n     }\n \n+    @Test\n     public void testPropertyOptionFlags() throws Exception\n     {\n         Options opts = new Options();\n         assertTrue(cmd.hasOption(\"c\"));\n     } \n \n+    @Test\n     public void testPropertyOptionMultipleValues() throws Exception\n     {\n         Options opts = new Options();\n         assertTrue( Arrays.equals( values, cmd.getOptionValues('k') ) );\n     }\n \n+    @Test\n     public void testPropertyOverrideValues() throws Exception\n     {\n         Options opts = new Options();\n         assertTrue( !cmd.hasOption(\"fake\") );\n     }\n \n+    @Test\n     public void testPropertyOptionRequired() throws Exception\n     {\n         Options opts = new Options();\n         assertTrue(cmd.hasOption(\"f\"));\n     }\n \n+    @Test\n     public void testPropertyOptionUnexpected() throws Exception\n     {\n         Options opts = new Options();\n         }\n     }\n \n+    @Test\n     public void testPropertyOptionGroup() throws Exception\n     {\n         Options opts = new Options();\n--- a/src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java\n+++ b/src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java\n \n package org.apache.commons.cli;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.io.File;\n import java.net.URL;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.Vector;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /** \n- * Test case for the PatternOptionBuilder class \n- *\n- * @version $Revision$, $Date$\n+ * Test case for the PatternOptionBuilder class.\n  */\n @SuppressWarnings(\"deprecation\") // tests some deprecated classes\n-public class PatternOptionBuilderTest extends TestCase\n+public class PatternOptionBuilderTest\n {\n+    @Test\n     public void testSimplePattern() throws Exception\n     {\n         Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/m*z#\");\n         }\n     }\n \n+    @Test\n     public void testEmptyPattern() throws Exception\n     {\n         Options options = PatternOptionBuilder.parsePattern(\"\");\n         assertTrue(options.getOptions().isEmpty());\n     }\n \n+    @Test\n     public void testUntypedPattern() throws Exception\n     {\n         Options options = PatternOptionBuilder.parsePattern(\"abc\");\n         assertNull(\"value c\", line.getOptionObject('c'));\n     }\n \n+    @Test\n     public void testNumberPattern() throws Exception\n     {\n         Options options = PatternOptionBuilder.parsePattern(\"n%d%x%\");\n         assertNull(\"x object\", line.getOptionObject(\"x\"));\n     }\n \n+    @Test\n     public void testClassPattern() throws Exception\n     {\n         Options options = PatternOptionBuilder.parsePattern(\"c+d+\");\n         assertNull(\"d value\", line.getOptionObject(\"d\"));\n     }\n \n+    @Test\n     public void testObjectPattern() throws Exception\n     {\n         Options options = PatternOptionBuilder.parsePattern(\"o@i@n@\");\n         assertNull(\"n value\", line.getOptionObject(\"n\"));\n     }\n \n+    @Test\n     public void testURLPattern() throws Exception\n     {\n         Options options = PatternOptionBuilder.parsePattern(\"u/v/\");\n         assertNull(\"v value\", line.getOptionObject(\"v\"));\n     }\n \n+    @Test\n     public void testExistingFilePattern() throws Exception\n     {\n         Options options = PatternOptionBuilder.parsePattern(\"f<\");\n         // todo test if an error is returned if the file doesn't exists (when it's implemented)\n     }\n \n+    @Test\n     public void testRequiredOption() throws Exception\n     {\n         Options options = PatternOptionBuilder.parsePattern(\"!n%m%\");\n--- a/src/test/java/org/apache/commons/cli/PosixParserTest.java\n+++ b/src/test/java/org/apache/commons/cli/PosixParserTest.java\n \n package org.apache.commons.cli;\n \n+import org.junit.Before;\n+\n /**\n  * Test case for the PosixParser.\n- *\n- * @version $Revision$, $Date$\n  */\n public class PosixParserTest extends ParserTestCase\n {\n     @SuppressWarnings(\"deprecation\")\n-    @Override\n+    @Before\n     public void setUp()\n     {\n         super.setUp();\n--- a/src/test/java/org/apache/commons/cli/UtilTest.java\n+++ b/src/test/java/org/apache/commons/cli/UtilTest.java\n \n package org.apache.commons.cli;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n \n-/**\n- * @author brianegge\n- */\n-public class UtilTest extends TestCase\n+import org.junit.Test;\n+\n+public class UtilTest\n {\n+    @Test\n     public void testStripLeadingHyphens()\n     {\n         assertEquals(\"f\", Util.stripLeadingHyphens(\"-f\"));\n         assertNull(Util.stripLeadingHyphens(null));\n     }\n \n+    @Test\n     public void testStripLeadingAndTrailingQuotes()\n     {\n         assertEquals(\"foo\", Util.stripLeadingAndTrailingQuotes(\"\\\"foo\\\"\"));\n--- a/src/test/java/org/apache/commons/cli/ValueTest.java\n+++ b/src/test/java/org/apache/commons/cli/ValueTest.java\n \n package org.apache.commons.cli;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n \n @SuppressWarnings(\"deprecation\") // tests some deprecated classes\n-public class ValueTest extends TestCase\n+public class ValueTest\n {\n     private CommandLine _cl = null;\n     private Options opts = new Options();\n \n-    @Override\n+    @Before\n     public void setUp() throws Exception\n     {\n         opts.addOption(\"a\", false, \"toggle -a\");\n         _cl = parser.parse(opts,args);\n     }\n \n+    @Test\n     public void testShortNoArg()\n     {\n         assertTrue( _cl.hasOption(\"a\") );\n         assertNull( _cl.getOptionValue(\"a\") );\n     }\n \n+    @Test\n     public void testShortWithArg()\n     {\n         assertTrue( _cl.hasOption(\"b\") );\n         assertEquals( _cl.getOptionValue(\"b\"), \"foo\");\n     }\n \n+    @Test\n     public void testLongNoArg()\n     {\n         assertTrue( _cl.hasOption(\"c\") );\n         assertNull( _cl.getOptionValue(\"c\") );\n     }\n \n+    @Test\n     public void testLongWithArg()\n     {\n         assertTrue( _cl.hasOption(\"d\") );\n         assertEquals( _cl.getOptionValue(\"d\"), \"bar\");\n     }\n \n+    @Test\n     public void testShortOptionalArgNoValue() throws Exception\n     {\n         String[] args = new String[] { \"-e\" };\n         assertNull( cmd.getOptionValue(\"e\") );\n     }\n \n+    @Test\n     public void testShortOptionalArgValue() throws Exception\n     {\n         String[] args = new String[] { \"-e\", \"everything\" };\n         assertEquals( \"everything\", cmd.getOptionValue(\"e\") );\n     }\n \n+    @Test\n     public void testLongOptionalNoValue() throws Exception\n     {\n         String[] args = new String[] { \"--fish\" };\n         assertNull( cmd.getOptionValue(\"fish\") );\n     }\n \n+    @Test\n     public void testLongOptionalArgValue() throws Exception\n     {\n         String[] args = new String[] { \"--fish\", \"face\" };\n         assertEquals( \"face\", cmd.getOptionValue(\"fish\") );\n     }\n \n+    @Test\n     public void testShortOptionalArgValues() throws Exception\n     {\n         String[] args = new String[] { \"-j\", \"ink\", \"idea\" };\n         assertEquals( cmd.getArgs().length, 0 );\n     }\n \n+    @Test\n     public void testLongOptionalArgValues() throws Exception\n     {\n         String[] args = new String[] { \"--gravy\", \"gold\", \"garden\" };\n         assertEquals( cmd.getArgs().length, 0 );\n     }\n \n+    @Test\n     public void testShortOptionalNArgValues() throws Exception\n     {\n         String[] args = new String[] { \"-i\", \"ink\", \"idea\", \"isotope\", \"ice\" };\n         assertEquals( \"ice\", cmd.getArgs()[1] );\n     }\n \n+    @Test\n     public void testLongOptionalNArgValues() throws Exception\n     {\n         String[] args = new String[] { \n--- a/src/test/java/org/apache/commons/cli/ValuesTest.java\n+++ b/src/test/java/org/apache/commons/cli/ValuesTest.java\n \n package org.apache.commons.cli;\n \n-import junit.framework.TestCase;\n-import junitx.framework.ArrayAssert;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n \n @SuppressWarnings(\"deprecation\") // tests some deprecated classes\n-public class ValuesTest extends TestCase\n+public class ValuesTest\n {\n     private CommandLine cmd;\n \n-    @Override\n+    @Before\n     public void setUp() throws Exception\n     {\n         Options options = new Options();\n         cmd = parser.parse(options,args);\n     }\n \n+    @Test\n     public void testShortArgs()\n     {\n         assertTrue(\"Option a is not set\", cmd.hasOption(\"a\"));\n         assertNull(cmd.getOptionValues(\"c\"));\n     }\n \n+    @Test\n     public void testShortArgsWithValue()\n     {\n         assertTrue(\"Option b is not set\", cmd.hasOption(\"b\"));\n         assertEquals(1, cmd.getOptionValues(\"d\").length);\n     }\n \n+    @Test\n     public void testMultipleArgValues()\n     {\n         assertTrue(\"Option e is not set\", cmd.hasOption(\"e\"));\n-        ArrayAssert.assertEquals(new String[] { \"one\", \"two\" }, cmd.getOptionValues(\"e\"));\n+        assertArrayEquals(new String[] { \"one\", \"two\" }, cmd.getOptionValues(\"e\"));\n     }\n \n+    @Test\n     public void testTwoArgValues()\n     {\n         assertTrue(\"Option g is not set\", cmd.hasOption(\"g\"));\n-        ArrayAssert.assertEquals(new String[] { \"val1\", \"val2\" }, cmd.getOptionValues(\"g\"));\n+        assertArrayEquals(new String[] { \"val1\", \"val2\" }, cmd.getOptionValues(\"g\"));\n     }\n \n+    @Test\n     public void testComplexValues()\n     {\n         assertTrue(\"Option i is not set\", cmd.hasOption(\"i\"));\n         assertTrue(\"Option h is not set\", cmd.hasOption(\"h\"));\n-        ArrayAssert.assertEquals(new String[] { \"val1\", \"val2\" }, cmd.getOptionValues(\"h\"));\n+        assertArrayEquals(new String[] { \"val1\", \"val2\" }, cmd.getOptionValues(\"h\"));\n     }\n \n+    @Test\n     public void testExtraArgs()\n     {\n-        ArrayAssert.assertEquals(\"Extra args\", new String[] { \"arg1\", \"arg2\", \"arg3\" }, cmd.getArgs());\n+        assertArrayEquals(\"Extra args\", new String[] { \"arg1\", \"arg2\", \"arg3\" }, cmd.getArgs());\n     }\n \n+    @Test\n     public void testCharSeparator()\n     {\n         // tests the char methods of CommandLine that delegate to the String methods\n         assertTrue(\"Option j is not set\", cmd.hasOption(\"j\"));\n         assertTrue(\"Option j is not set\", cmd.hasOption('j'));\n-        ArrayAssert.assertEquals(new String[] { \"key\", \"value\", \"key\", \"value\" }, cmd.getOptionValues(\"j\"));\n-        ArrayAssert.assertEquals(new String[] { \"key\", \"value\", \"key\", \"value\" }, cmd.getOptionValues('j'));\n+        assertArrayEquals(new String[] { \"key\", \"value\", \"key\", \"value\" }, cmd.getOptionValues(\"j\"));\n+        assertArrayEquals(new String[] { \"key\", \"value\", \"key\", \"value\" }, cmd.getOptionValues('j'));\n \n         assertTrue(\"Option k is not set\", cmd.hasOption(\"k\"));\n         assertTrue(\"Option k is not set\", cmd.hasOption('k'));\n-        ArrayAssert.assertEquals(new String[] { \"key1\", \"value1\", \"key2\", \"value2\" }, cmd.getOptionValues(\"k\"));\n-        ArrayAssert.assertEquals(new String[] { \"key1\", \"value1\", \"key2\", \"value2\" }, cmd.getOptionValues('k'));\n+        assertArrayEquals(new String[] { \"key1\", \"value1\", \"key2\", \"value2\" }, cmd.getOptionValues(\"k\"));\n+        assertArrayEquals(new String[] { \"key1\", \"value1\", \"key2\", \"value2\" }, cmd.getOptionValues('k'));\n \n         assertTrue(\"Option m is not set\", cmd.hasOption(\"m\"));\n         assertTrue(\"Option m is not set\", cmd.hasOption('m'));\n-        ArrayAssert.assertEquals(new String[] { \"key\", \"value\" }, cmd.getOptionValues(\"m\"));\n-        ArrayAssert.assertEquals(new String[] { \"key\", \"value\" }, cmd.getOptionValues('m'));\n+        assertArrayEquals(new String[] { \"key\", \"value\" }, cmd.getOptionValues(\"m\"));\n+        assertArrayEquals(new String[] { \"key\", \"value\" }, cmd.getOptionValues('m'));\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/cli/bug/BugCLI133Test.java\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI133Test.java\n \n package org.apache.commons.cli.bug;\n \n+import static org.junit.Assert.assertFalse;\n+\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.Option;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n import org.apache.commons.cli.PosixParser;\n+import org.junit.Test;\n \n-import junit.framework.TestCase;\n-\n-/**\n- * @author brianegge\n- */\n @SuppressWarnings(\"deprecation\") // tests some deprecated classes\n-public class BugCLI133Test extends TestCase {\n+public class BugCLI133Test\n+{    \n+    @Test\n     public void testOrder() throws ParseException {\n         Option optionA = new Option(\"a\", \"first\");\n         Options opts = new Options();\n--- a/src/test/java/org/apache/commons/cli/bug/BugCLI13Test.java\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI13Test.java\n \n package org.apache.commons.cli.bug;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.Option;\n import org.apache.commons.cli.OptionBuilder;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n import org.apache.commons.cli.PosixParser;\n+import org.junit.Test;\n \n-import junit.framework.TestCase;\n-\n-/**\n- * @author brianegge\n- */\n @SuppressWarnings(\"deprecation\") // tests some deprecated classes\n-public class BugCLI13Test extends TestCase\n+public class BugCLI13Test\n {\n+    @Test\n     public void testCLI13() throws ParseException\n     {\n         final String debugOpt = \"debug\";\n+        @SuppressWarnings(\"static-access\")\n         Option debug = OptionBuilder\n             .withArgName( debugOpt )\n             .withDescription( \"turn on debugging\" )\n--- a/src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java\n \n package org.apache.commons.cli.bug;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.CommandLineParser;\n import org.apache.commons.cli.OptionBuilder;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.PosixParser;\n+import org.junit.Before;\n+import org.junit.Test;\n \n /**\n  * http://issues.apache.org/jira/browse/CLI-148\n- *\n- * @author brianegge\n  */\n @SuppressWarnings(\"deprecation\") // tests some deprecated classes\n-public class BugCLI148Test  extends TestCase\n+public class BugCLI148Test\n {    \n     private Options options;\n \n-    @Override\n-    protected void setUp() throws Exception\n+    @Before\n+    public void setUp() throws Exception\n     {\n         options = new Options();\n         options.addOption(OptionBuilder.hasArg().create('t'));\n         options.addOption(OptionBuilder.hasArg().create('s'));\n     }\n \n+    @Test\n     public void testWorkaround1() throws Exception\n     {\n         CommandLineParser parser = new PosixParser();\n         assertEquals(\"-something\", commandLine.getOptionValue('t'));\n     }\n \n+    @Test\n     public void testWorkaround2() throws Exception\n     {\n         CommandLineParser parser = new PosixParser();\n--- a/src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java\n  * limitations under the License.\n  */\n \n-\n package org.apache.commons.cli.bug;\n+\n+import static org.junit.Assert.assertEquals;\n \n import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.sql.ParameterMetaData;\n import java.sql.Types;\n \n-import junit.framework.TestCase;\n-\n import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Option;\n import org.apache.commons.cli.OptionGroup;\n import org.apache.commons.cli.Options;\n-\n-public class BugCLI162Test extends TestCase {\n+import org.junit.Test;\n+\n+public class BugCLI162Test\n+{\n     /** Constant for the line separator.*/\n     private static final String CR = System.getProperty(\"line.separator\");\n \n+    @Test\n     public void testInfiniteLoop() {\n         Options options = new Options();\n         options.addOption(\"h\", \"help\", false, \"This is a looooong description\");\n         formatter.printHelp(\"app\", options); // used to hang & crash\n     }\n \n+    @Test\n     public void testPrintHelpLongLines() {\n         // Constants used for options\n         final String OPT = \"-\";\n         new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\n     }\n \n+    @Test\n     public void testLongLineChunking() {\n         Options options = new Options();\n         options.addOption(\"x\", \"extralongarg\", false,\n         assertEquals( \"Long arguments did not split as expected\", expected, sw.toString() );\n     }\n \n+    @Test\n     public void testLongLineChunkingIndentIgnored() {\n         Options options = new Options();\n         options.addOption(\"x\", \"extralongarg\", false, \"This description is Long.\" );\n--- a/src/test/java/org/apache/commons/cli/bug/BugCLI18Test.java\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI18Test.java\n import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Option;\n import org.apache.commons.cli.Options;\n-\n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * http://issues.apache.org/jira/browse/CLI-18\n  */\n-public class BugCLI18Test extends TestCase\n+public class BugCLI18Test\n {\n+    @Test\n     public void testCLI18()\n     {\n         Options options = new Options();\n--- a/src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java\n  * limitations under the License.\n  */\n \n+package org.apache.commons.cli.bug;\n \n-package org.apache.commons.cli.bug;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n \n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.CommandLineParser;\n import org.apache.commons.cli.Option;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.PosixParser;\n-\n-import junit.framework.TestCase;\n+import org.junit.Before;\n+import org.junit.Test;\n \n @SuppressWarnings(\"deprecation\") // tests some deprecated classes\n-public class BugCLI71Test extends TestCase {\n-\n+public class BugCLI71Test\n+{\n     private Options options;\n     private CommandLineParser parser;\n \n-    @Override\n+    @Before\n     public void setUp() {\n         options = new Options();\n \n         parser = new PosixParser();\n     }\n \n+    @Test\n     public void testBasic() throws Exception {\n         String[] args = new String[] { \"-a\", \"Caesar\", \"-k\", \"A\" };\n         CommandLine line = parser.parse( options, args);\n         assertEquals( \"A\", line.getOptionValue(\"k\") );\n     }\n \n+    @Test\n     public void testMistakenArgument() throws Exception {\n         String[] args = new String[] { \"-a\", \"Caesar\", \"-k\", \"A\" };\n         CommandLine line = parser.parse( options, args);\n         assertEquals( \"a\", line.getOptionValue(\"k\") );\n     }\n \n+    @Test\n     public void testLackOfError() throws Exception {\n         String[] args = new String[] { \"-k\", \"-a\",  \"Caesar\" };\n         try {\n         }\n     }\n \n+    @Test\n     public void testGetsDefaultIfOptional() throws Exception {\n         String[] args = new String[] { \"-k\", \"-a\", \"Caesar\" };\n         options.getOption(\"k\").setOptionalArg(true);", "timestamp": 1360148265, "metainfo": ""}