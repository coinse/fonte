{"sha": "94dff209382d395434924a7914f677fbfaae8656", "log": "Added checks and documentation to ensure preferredName and any aliases begin with a specified prefix Bug: 30979   ", "commit": "\n--- a/src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java\n+++ b/src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java\n     }\n \n     /**\n-     * Use this short option name\n+     * Use this short option name. The first name is used as the preferred\n+     * display name for the Command and then later names are used as aliases.\n+     * \n      * @param shortName the name to use\n      * @return this builder\n      */\n     }\n \n     /**\n-     * Use this long option name\n+     * Use this long option name.  The first name is used as the preferred\n+     * display name for the Command and then later names are used as aliases.\n+     * \n      * @param longName the name to use\n      * @return this builder\n      */\n--- a/src/java/org/apache/commons/cli2/builder/SwitchBuilder.java\n+++ b/src/java/org/apache/commons/cli2/builder/SwitchBuilder.java\n     }\n \n     /**\n-     * Use this option name\n+     * Use this option name. The first name is used as the preferred\n+     * display name for the Command and then later names are used as aliases.\n+     * \n      * @param name the name to use\n      * @return this builder\n      */\n--- a/src/java/org/apache/commons/cli2/option/DefaultOption.java\n+++ b/src/java/org/apache/commons/cli2/option/DefaultOption.java\n      * @param shortPrefix the prefix used for short options\n      * @param longPrefix the prefix used for long options\n      * @param burstEnabled should option bursting be enabled\n-     * @param preferredName the preferred name for this Option\n+     * @param preferredName the preferred name for this Option, this should begin with either shortPrefix or longPrefix\n      * @param description a description of this Option\n      * @param aliases the alternative names for this Option\n      * @param burstAliases the aliases that can be burst\n      * @param argument the Argument belonging to this Parent, or null\n      * @param children the Group children belonging to this Parent, ot null\n      * @param id the unique identifier for this Option\n+     * @throws IllegalArgumentException if the preferredName or an alias isn't\n+     *     prefixed with shortPrefix or longPrefix \n      */\n     public DefaultOption(\n         final String shortPrefix,\n         newPrefixes.add(shortPrefix);\n         newPrefixes.add(longPrefix);\n         this.prefixes = Collections.unmodifiableSet(newPrefixes);\n+        \n+        checkPrefixes(newPrefixes);\n     }\n \n     public boolean canProcess(final String argument) {\n--- a/src/java/org/apache/commons/cli2/option/OptionImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/OptionImpl.java\n  */\n package org.apache.commons.cli2.option;\n \n+import java.util.Iterator;\n import java.util.ListIterator;\n+import java.util.Set;\n \n import org.apache.commons.cli2.DisplaySetting;\n import org.apache.commons.cli2.Option;\n import org.apache.commons.cli2.WriteableCommandLine;\n+import org.apache.commons.cli2.resource.ResourceHelper;\n \n /**\n  * A base implementation of Option providing limited ground work for further\n     public void defaults(final WriteableCommandLine commandLine) {\n         // nothing to do normally\n     }\n+    \n+    protected void checkPrefixes(final Set prefixes) {\n+        \n+        // nothing to do if empty prefix list\n+        if(prefixes.isEmpty()) {\n+            return;\n+        }\n+        \n+        // check preferred name\n+        checkPrefix(prefixes, getPreferredName());\n+        \n+        // check triggers\n+        this.getTriggers();\n+        for (final Iterator i = getTriggers().iterator(); i.hasNext();) {\n+            checkPrefix(prefixes, (String) i.next());\n+        }\n+    }\n+\n+    private void checkPrefix(final Set prefixes, final String trigger) {\n+        for (final Iterator i = prefixes.iterator(); i.hasNext();) {\n+            String prefix = (String) i.next();\n+            if(trigger.startsWith(prefix)) {\n+                return;\n+            }\n+        }\n+        \n+        final ResourceHelper helper = \n+            ResourceHelper.getResourceHelper(OptionImpl.class);\n+        final String message = \n+            helper.getMessage(\"cli.error.trigger.needs.prefix\",\n+                    trigger,prefixes.toString());\n+        throw new IllegalArgumentException(message);\n+    }\n+    \n+    \n }\n--- a/src/java/org/apache/commons/cli2/option/Switch.java\n+++ b/src/java/org/apache/commons/cli2/option/Switch.java\n      * @param argument the Argument belonging to this Parent, or null\n      * @param children the Group children belonging to this Parent, ot null\n      * @param id the unique identifier for this Option\n+     * @throws IllegalArgumentException if the preferredName or an alias isn't\n+     *     prefixed with enabledPrefix or disabledPrefix \n      */\n     public Switch(\n         final String enabledPrefix,\n         this.prefixes = Collections.unmodifiableSet(newPrefixes);\n         \n         this.defaultSwitch = switchDefault;\n+        \n+        checkPrefixes(newPrefixes);\n     }\n \n     public void processParent(", "timestamp": 1094516304, "metainfo": ""}