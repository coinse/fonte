{"sha": "1bf9e6c551b6a2e7d37291673a1ff77c338ce131", "log": "CLI-265: Optional argument picking up next regular option as its argument. Thank you to Lynn Henderson, Martin Sandiford and Veit Guna for providing reproductions.  ", "commit": "\n--- a/src/main/java/org/apache/commons/cli/DefaultParser.java\n+++ b/src/main/java/org/apache/commons/cli/DefaultParser.java\n     private boolean isShortOption(String token)\n     {\n         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n-        return token.startsWith(\"-\") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));\n+        if (!token.startsWith(\"-\") || token.length() == 1)\n+        {\n+            return false;\n+        }\n+\n+        // remove leading \"-\" and \"=value\"\n+        int pos = token.indexOf(\"=\");\n+        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\n+        return options.hasShortOption(optName);\n     }\n \n     /**\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java\n+package org.apache.commons.cli.bug;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test for CLI-265.\n+ * <p>\n+ * The issue is that a short option with an optional value will use whatever comes next as value.\n+ */\n+public class BugCLI265Test {\n+\n+    private DefaultParser parser;\n+    private Options options;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        parser = new DefaultParser();\n+\n+        Option TYPE1 = Option.builder(\"t1\").hasArg().numberOfArgs(1).optionalArg(true).argName(\"t1_path\").build();\n+        Option LAST = Option.builder(\"last\").hasArg(false).build();\n+\n+        options = new Options().addOption(TYPE1).addOption(LAST);\n+    }\n+\n+    @Test\n+    public void shouldParseShortOptionWithValue() throws Exception {\n+        String[] shortOptionWithValue = new String[]{\"-t1\", \"path/to/my/db\"};\n+\n+        final CommandLine commandLine = parser.parse(options, shortOptionWithValue);\n+\n+        assertEquals(\"path/to/my/db\", commandLine.getOptionValue(\"t1\"));\n+        assertFalse(commandLine.hasOption(\"last\"));\n+    }\n+\n+    @Test\n+    public void shouldParseShortOptionWithoutValue() throws Exception {\n+        String[] twoShortOptions = new String[]{\"-t1\", \"-last\"};\n+\n+        final CommandLine commandLine = parser.parse(options, twoShortOptions);\n+\n+        assertTrue(commandLine.hasOption(\"t1\"));\n+        assertNotEquals(\"Second option has been used as value for first option\", \"-last\", commandLine.getOptionValue(\"t1\"));\n+        assertTrue(\"Second option has not been detected\", commandLine.hasOption(\"last\"));\n+    }\n+\n+}", "timestamp": 1473279572, "metainfo": ""}