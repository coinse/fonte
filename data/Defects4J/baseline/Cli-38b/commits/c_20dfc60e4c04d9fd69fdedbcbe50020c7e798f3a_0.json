{"sha": "20dfc60e4c04d9fd69fdedbcbe50020c7e798f3a", "log": "Restored the CLI 1.0 behavior regarding repeated options and the number of arguments per option (CLI-137)   ", "commit": "\n--- a/src/java/org/apache/commons/cli/CommandLine.java\n+++ b/src/java/org/apache/commons/cli/CommandLine.java\n package org.apache.commons.cli;\n \n import java.io.Serializable;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n-import java.util.Set;\n-import java.util.HashSet;\n \n /** \n  * <p>Represents list of arguments parsed against\n     private List args = new LinkedList();\n \n     /** the processed options */\n-    private Set options = new HashSet();\n+    private List options = new ArrayList();\n \n     /** Map of unique options for ease to get complete list of options */\n //    private Set allOptions = new HashSet();\n      */\n     public String[] getOptionValues(String opt)\n     {\n-        Option key = resolveOption( opt );\n-\n-        if (options.contains(key))\n+        List values = new ArrayList();\n+\n+        for ( Iterator it = options.iterator(); it.hasNext(); )\n         {\n-            return key.getValues();\n+            Option option = (Option) it.next();\n+            if (opt.equals(option.getOpt()) || opt.equals( option.getLongOpt()))\n+            {\n+                values.addAll(option.getValuesList());\n+            }\n         }\n \n-        return null;\n-        }\n+        return values.isEmpty() ? null : (String[]) values.toArray(new String[values.size()]);\n+    }\n \n     /**\n      * <p>Retrieves the option object given the long or short option as a String</p>\n         // return the array\n         return (Option[]) processed.toArray(optionsArray);\n     }\n-}\n+}\n--- a/src/java/org/apache/commons/cli/Parser.java\n+++ b/src/java/org/apache/commons/cli/Parser.java\n         }\n         \n         // get the option represented by arg\n-        final Option opt = getOptions().getOption(arg);\n+        Option opt = (Option) getOptions().getOption(arg).clone();\n \n         // if the option is a required option remove the option from\n         // the requiredOptions list\n--- a/src/test/org/apache/commons/cli/BugsTest.java\n+++ b/src/test/org/apache/commons/cli/BugsTest.java\n import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Properties;\n \n import junit.framework.TestCase;\n     public void test11457() throws Exception\n     {\n         Options options = new Options();\n-        options.addOption(OptionBuilder.withLongOpt(\"verbose\")\n-                .create());\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\n         String[] args = new String[]{\"--verbose\"};\n \n         CommandLineParser parser = new PosixParser();\n     public void test11458() throws Exception\n     {\n         Options options = new Options();\n-        options.addOption( OptionBuilder.withValueSeparator( '=' )\n-                           .hasArgs()\n-                           .create( 'D' ) );\n-        options.addOption( OptionBuilder.withValueSeparator( ':' )\n-                           .hasArgs()\n-                           .create( 'p' ) );\n+        options.addOption( OptionBuilder.withValueSeparator( '=' ).hasArgs().create( 'D' ) );\n+        options.addOption( OptionBuilder.withValueSeparator( ':' ).hasArgs().create( 'p' ) );\n         String[] args = new String[] { \"-DJAVA_HOME=/opt/java\" , \"-pfile1:file2:file3\" };\n \n         CommandLineParser parser = new PosixParser();\n     {\n         // Posix \n         Options options = new Options();\n-        options.addOption( OptionBuilder.hasOptionalArg()\n-                           .create( 'a' ) );\n-        options.addOption( OptionBuilder.hasArg()\n-                           .create( 'b' ) );\n+        options.addOption( OptionBuilder.hasOptionalArg().create( 'a' ) );\n+        options.addOption( OptionBuilder.hasArg().create( 'b' ) );\n         String[] args = new String[] { \"-a\", \"-bvalue\" };\n \n         CommandLineParser parser = new PosixParser();\n \n         // GNU\n         options = new Options();\n-        options.addOption( OptionBuilder.hasOptionalArg()\n-                           .create( 'a' ) );\n-        options.addOption( OptionBuilder.hasArg()\n-                           .create( 'b' ) );\n+        options.addOption( OptionBuilder.hasOptionalArg().create( 'a' ) );\n+        options.addOption( OptionBuilder.hasArg().create( 'b' ) );\n         args = new String[] { \"-a\", \"-b\", \"value\" };\n \n         parser = new GnuParser();\n     public void test13666() throws Exception\n     {\n         Options options = new Options();\n-        Option dir = OptionBuilder.withDescription( \"dir\" )\n-                                       .hasArg()\n-                                       .create( 'd' );\n+        Option dir = OptionBuilder.withDescription( \"dir\" ).hasArg().create( 'd' );\n         options.addOption( dir );\n-        \n         \n         final PrintStream oldSystemOut = System.out;\n         try\n         boolean exception = false;\n \n         String[] args = new String[] {  };\n-        try {\n-            CommandLine line = parser.parse( opts, args );\n-        }\n-        catch( ParseException exp ) {\n+        try\n+        {\n+            CommandLine line = parser.parse(opts, args);\n+        }\n+        catch (ParseException exp)\n+        {\n             exception = true;\n         }\n \n-        if( !exception ) {\n-            fail( \"Expected exception not caught.\");\n+        if (!exception)\n+        {\n+            fail(\"Expected exception not caught.\");\n         }\n \n         exception = false;\n \n         args = new String[] { \"-s\" };\n-        try {\n-            CommandLine line = parser.parse( opts, args );\n-        }\n-        catch( ParseException exp ) {\n+        try\n+        {\n+            CommandLine line = parser.parse(opts, args);\n+        }\n+        catch (ParseException exp)\n+        {\n             exception = true;\n         }\n \n-        if( !exception ) {\n-            fail( \"Expected exception not caught.\");\n+        if (!exception)\n+        {\n+            fail(\"Expected exception not caught.\");\n         }\n \n         exception = false;\n         }\n     }\n \n-    public void test14786() throws Exception {\n+    public void test14786() throws Exception\n+    {\n         Option o = OptionBuilder.isRequired().withDescription(\"test\").create(\"test\");\n         Options opts = new Options();\n         opts.addOption(o);\n         assertTrue( line.hasOption( \"test\" ) );\n     }\n \n-    public void test15046() throws Exception {\n-        CommandLineParser parser = new PosixParser();\n-        final String[] CLI_ARGS = new String[] {\"-z\", \"c\"};\n-        Option option = new Option(\"z\", \"timezone\", true, \n-                                   \"affected option\");\n-        Options cliOptions = new Options();\n-        cliOptions.addOption(option);\n-        parser.parse(cliOptions, CLI_ARGS);\n-\t\t\n+    public void test15046() throws Exception\n+    {\n+        CommandLineParser parser = new PosixParser();\n+        String[] CLI_ARGS = new String[] {\"-z\", \"c\"};\n+\n+        Options options = new Options();\n+        options.addOption(new Option(\"z\", \"timezone\", true, \"affected option\"));\n+\n+        parser.parse(options, CLI_ARGS);\n+        \n         //now add conflicting option\n-        cliOptions.addOption(\"c\", \"conflict\", true, \"conflict option\");\n-        CommandLine line = parser.parse(cliOptions, CLI_ARGS);\n-        assertEquals( option.getValue(), \"c\" );\n+        options.addOption(\"c\", \"conflict\", true, \"conflict option\");\n+        CommandLine line = parser.parse(options, CLI_ARGS);\n+        assertEquals( line.getOptionValue('z'), \"c\" );\n         assertTrue( !line.hasOption(\"c\") );\n     }\n \n-    public void test15648() throws Exception {\n+    public void test15648() throws Exception\n+    {\n         CommandLineParser parser = new PosixParser();\n         final String[] args = new String[] { \"-m\", \"\\\"Two Words\\\"\" };\n         Option m = OptionBuilder.hasArgs().create(\"m\");\n         assertEquals( \"Two Words\", line.getOptionValue( \"m\" ) );\n     }\n \n-    public void test27635() {\n+    public void test27635()\n+    {\n         Option help = new Option(\"h\", \"help\", false, \"print this message\");\n         Option version = new Option(\"v\", \"version\", false, \"print version information\");\n         Option newRun = new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\n                 ,out.toString());\n     }\n     \n-    public void test31148() throws ParseException {\n+    public void test31148() throws ParseException\n+    {\n         Option multiArgOption = new Option(\"o\",\"option with multiple args\");\n         multiArgOption.setArgs(1);\n         \n         assertEquals(\"ovalue\",cl.getOptionValue('o'));\n     }\n     \n-    public void test21215() {\n+    public void test21215()\n+    {\n         Options options = new Options();\n         HelpFormatter formatter = new HelpFormatter();\n         String SEP = System.getProperty(\"line.separator\");\n                 ,out.toString());\n     }\n     \n-    public void test19383() {\n+    public void test19383()\n+    {\n         Options options = new Options();\n         options.addOption(new Option(\"a\",\"aaa\",false,\"aaaaaaa\"));\n         options.addOption(new Option(null,\"bbb\",false,\"bbbbbbb\"));", "timestamp": 1213369736, "metainfo": ""}