{"sha": "47b2fa57db0f54d71ea4822fdb44b10656002890", "log": "Add missing svn:eol-style and svn:keywords properties  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/resource/ResourceConstants.java\n+++ b/src/java/org/apache/commons/cli2/resource/ResourceConstants.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.commons.cli2.resource;\n-\n-public abstract class ResourceConstants {\n-    public static final String CLASSVALIDATOR_BAD_CLASSNAME = \"ClassValidator.bad.classname\";\n-    public static final String CLASSVALIDATOR_CLASS_NOTFOUND = \"ClassValidator.class.notfound\";\n-    public static final String CLASSVALIDATOR_CLASS_ACCESS = \"ClassValidator.class.access\";\n-    public static final String CLASSVALIDATOR_CLASS_CREATE = \"ClassValidator.class.create\";\n-    public static final String DATEVALIDATOR_DATE_OUTOFRANGE = \"DateValidator.date.OutOfRange\";\n-    public static final String URLVALIDATOR_MALFORMED_URL = \"URLValidator.malformed.URL\";\n-    public static final String NUMBERVALIDATOR_NUMBER_OUTOFRANGE =\n-        \"NumberValidator.number.OutOfRange\";\n-    public static final String ARGUMENT_UNEXPECTED_VALUE = \"Argument.unexpected.value\";\n-    public static final String ARGUMENT_MIN_EXCEEDS_MAX = \"Argument.minimum.exceeds.maximum\";\n-    public static final String ARGUMENT_TOO_FEW_DEFAULTS = \"Argument.too.few.defaults\";\n-    public static final String ARGUMENT_TOO_MANY_DEFAULTS = \"Argument.too.many.defaults\";\n-    public static final String ARGUMENT_MISSING_VALUES = \"Argument.missing.values\";\n-    public static final String ARGUMENT_TOO_MANY_VALUES = \"Argument.too.many.values\";\n-    public static final String OPTION_TRIGGER_NEEDS_PREFIX = \"Option.trigger.needs.prefix\";\n-    public static final String OPTION_MISSING_REQUIRED = \"Option.missing.required\";\n-    public static final String OPTION_NO_NAME = \"Option.no.name\";\n-    public static final String OPTION_ILLEGAL_LONG_PREFIX = \"Option.illegal.long.prefix\";\n-    public static final String OPTION_ILLEGAL_SHORT_PREFIX = \"Option.illegal.short.prefix\";\n-    public static final String UNEXPECTED_TOKEN = \"Unexpected.token\";\n-    public static final String MISSING_OPTION = \"Missing.option\";\n-    public static final String CANNOT_BURST = \"Cannot.burst\";\n-    public static final String COMMAND_PREFERRED_NAME_TOO_SHORT = \"Command.preferredName.too.short\";\n-    public static final String SWITCH_ILLEGAL_ENABLED_PREFIX = \"Option.illegal.enabled.prefix\";\n-    public static final String SWITCH_ILLEGAL_DISABLED_PREFIX = \"Option.illegal.disabled.prefix\";\n-    public static final String SWITCH_IDENTICAL_PREFIXES = \"Option.identical.prefixes\";\n-    public static final String SWITCH_ALREADY_SET = \"Switch.already.set\";\n-    public static final String SWITCH_NO_ENABLED_PREFIX = \"Switch.no.enabledPrefix\";\n-    public static final String SWITCH_NO_DISABLED_PREFIX = \"Switch.no.disabledPrefix\";\n-    public static final String SWITCH_ENABLED_STARTS_WITH_DISABLED =\n-        \"Switch.enabled.startsWith.disabled\";\n-    public static final String SWITCH_DISABLED_STARTWS_WITH_ENABLED =\n-        \"Switch.disabled.startsWith.enabled\";\n-    public static final String SWITCH_PREFERRED_NAME_TOO_SHORT = \"Switch.preferredName.too.short\";\n-    public static final String SOURCE_DEST_MUST_ENFORCE_VALUES = \"SourceDest.must.enforce.values\";\n-    public static final String HELPFORMATTER_GUTTER_TOO_LONG = \"HelpFormatter.gutter.too.long\";\n-    public static final String HELPFORMATTER_WIDTH_TOO_NARROW = \"HelpFormatter.width.too.narrow\";\n-    public static final String ENUM_ILLEGAL_VALUE = \"Enum.illegal.value\";\n-    public static final String ARGUMENT_BUILDER_NULL_CONSUME_REMAINING = \"ArgumentBuilder.null.consume.remaining\";\n-    public static final String ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING = \"ArgumentBuilder.empty.consume.remaining\";\n-    public static final String ARGUMENT_BUILDER_NULL_DEFAULT = \"ArgumentBuilder.null.default\";\n-    public static final String ARGUMENT_BUILDER_NULL_DEFAULTS = \"ArgumentBuilder.null.defaults\";\n-    public static final String ARGUMENT_BUILDER_NEGATIVE_MAXIMUM = \"ArgumentBuilder.negative.maximum\";\n-    public static final String ARGUMENT_BUILDER_NEGATIVE_MINIMUM = \"ArgumentBuilder.negative.minimum\";\n-    public static final String ARGUMENT_BUILDER_NULL_NAME = \"ArgumentBuilder.null.name\";\n-    public static final String ARGUMENT_BUILDER_EMPTY_NAME = \"ArgumentBuilder.empty.name\";\n-    public static final String ARGUMENT_BUILDER_NULL_VALIDATOR = \"ArgumentBuilder.null.validator\";\n-\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.cli2.resource;\n+\n+public abstract class ResourceConstants {\n+    public static final String CLASSVALIDATOR_BAD_CLASSNAME = \"ClassValidator.bad.classname\";\n+    public static final String CLASSVALIDATOR_CLASS_NOTFOUND = \"ClassValidator.class.notfound\";\n+    public static final String CLASSVALIDATOR_CLASS_ACCESS = \"ClassValidator.class.access\";\n+    public static final String CLASSVALIDATOR_CLASS_CREATE = \"ClassValidator.class.create\";\n+    public static final String DATEVALIDATOR_DATE_OUTOFRANGE = \"DateValidator.date.OutOfRange\";\n+    public static final String URLVALIDATOR_MALFORMED_URL = \"URLValidator.malformed.URL\";\n+    public static final String NUMBERVALIDATOR_NUMBER_OUTOFRANGE =\n+        \"NumberValidator.number.OutOfRange\";\n+    public static final String ARGUMENT_UNEXPECTED_VALUE = \"Argument.unexpected.value\";\n+    public static final String ARGUMENT_MIN_EXCEEDS_MAX = \"Argument.minimum.exceeds.maximum\";\n+    public static final String ARGUMENT_TOO_FEW_DEFAULTS = \"Argument.too.few.defaults\";\n+    public static final String ARGUMENT_TOO_MANY_DEFAULTS = \"Argument.too.many.defaults\";\n+    public static final String ARGUMENT_MISSING_VALUES = \"Argument.missing.values\";\n+    public static final String ARGUMENT_TOO_MANY_VALUES = \"Argument.too.many.values\";\n+    public static final String OPTION_TRIGGER_NEEDS_PREFIX = \"Option.trigger.needs.prefix\";\n+    public static final String OPTION_MISSING_REQUIRED = \"Option.missing.required\";\n+    public static final String OPTION_NO_NAME = \"Option.no.name\";\n+    public static final String OPTION_ILLEGAL_LONG_PREFIX = \"Option.illegal.long.prefix\";\n+    public static final String OPTION_ILLEGAL_SHORT_PREFIX = \"Option.illegal.short.prefix\";\n+    public static final String UNEXPECTED_TOKEN = \"Unexpected.token\";\n+    public static final String MISSING_OPTION = \"Missing.option\";\n+    public static final String CANNOT_BURST = \"Cannot.burst\";\n+    public static final String COMMAND_PREFERRED_NAME_TOO_SHORT = \"Command.preferredName.too.short\";\n+    public static final String SWITCH_ILLEGAL_ENABLED_PREFIX = \"Option.illegal.enabled.prefix\";\n+    public static final String SWITCH_ILLEGAL_DISABLED_PREFIX = \"Option.illegal.disabled.prefix\";\n+    public static final String SWITCH_IDENTICAL_PREFIXES = \"Option.identical.prefixes\";\n+    public static final String SWITCH_ALREADY_SET = \"Switch.already.set\";\n+    public static final String SWITCH_NO_ENABLED_PREFIX = \"Switch.no.enabledPrefix\";\n+    public static final String SWITCH_NO_DISABLED_PREFIX = \"Switch.no.disabledPrefix\";\n+    public static final String SWITCH_ENABLED_STARTS_WITH_DISABLED =\n+        \"Switch.enabled.startsWith.disabled\";\n+    public static final String SWITCH_DISABLED_STARTWS_WITH_ENABLED =\n+        \"Switch.disabled.startsWith.enabled\";\n+    public static final String SWITCH_PREFERRED_NAME_TOO_SHORT = \"Switch.preferredName.too.short\";\n+    public static final String SOURCE_DEST_MUST_ENFORCE_VALUES = \"SourceDest.must.enforce.values\";\n+    public static final String HELPFORMATTER_GUTTER_TOO_LONG = \"HelpFormatter.gutter.too.long\";\n+    public static final String HELPFORMATTER_WIDTH_TOO_NARROW = \"HelpFormatter.width.too.narrow\";\n+    public static final String ENUM_ILLEGAL_VALUE = \"Enum.illegal.value\";\n+    public static final String ARGUMENT_BUILDER_NULL_CONSUME_REMAINING = \"ArgumentBuilder.null.consume.remaining\";\n+    public static final String ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING = \"ArgumentBuilder.empty.consume.remaining\";\n+    public static final String ARGUMENT_BUILDER_NULL_DEFAULT = \"ArgumentBuilder.null.default\";\n+    public static final String ARGUMENT_BUILDER_NULL_DEFAULTS = \"ArgumentBuilder.null.defaults\";\n+    public static final String ARGUMENT_BUILDER_NEGATIVE_MAXIMUM = \"ArgumentBuilder.negative.maximum\";\n+    public static final String ARGUMENT_BUILDER_NEGATIVE_MINIMUM = \"ArgumentBuilder.negative.minimum\";\n+    public static final String ARGUMENT_BUILDER_NULL_NAME = \"ArgumentBuilder.null.name\";\n+    public static final String ARGUMENT_BUILDER_EMPTY_NAME = \"ArgumentBuilder.empty.name\";\n+    public static final String ARGUMENT_BUILDER_NULL_VALIDATOR = \"ArgumentBuilder.null.validator\";\n+\n+}\n--- a/src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java\n+++ b/src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.commons.cli2.bug;\n-\n-import junit.framework.TestCase;\n-\n-import org.apache.commons.cli2.Argument;\n-import org.apache.commons.cli2.Group;\n-import org.apache.commons.cli2.OptionException;\n-import org.apache.commons.cli2.builder.ArgumentBuilder;\n-import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n-import org.apache.commons.cli2.builder.GroupBuilder;\n-import org.apache.commons.cli2.commandline.Parser;\n-import org.apache.commons.cli2.option.SourceDestArgument;\n-\n-/**\n- * The first is a loop in Parser.parse() if I set a non-declared option. This \n- * code goes into a loop in Parser.java method parse this while loop runs \n- * endless\n- * \n- * @author Steve Alberty\n- */\n-public class BugLoopingOptionLookAlikeTest extends TestCase {\n-\n-    public void testLoopingOptionLookAlike() {\n-        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n-        final ArgumentBuilder abuilder = new ArgumentBuilder();\n-        final GroupBuilder gbuilder = new GroupBuilder();\n-        final Group options = gbuilder\n-            .withName(\"ant\")\n-            .withOption(obuilder.withShortName(\"help\").withDescription(\"print this message\").create())\n-            .withOption(obuilder.withShortName(\"projecthelp\").withDescription(\"print project help information\").create())\n-            .withOption(abuilder.withName(\"target\").create())\n-            .create();\n-        \n-        final Parser parser = new Parser();\n-        parser.setGroup(options);\n-        try {\n-            parser.parse(new String[] { \"-abcdef\",\n-                    \"testfile.txt \", });\n-            fail(\"OptionException\");\n-        } catch (OptionException e) {\n-            assertEquals(\"Unexpected -abcdef while processing ant\",e.getMessage());\n-        }\n-    }\n-    \n-    public void testLoopingOptionLookAlike2() {\n-        final ArgumentBuilder abuilder = new ArgumentBuilder();\n-        final GroupBuilder gbuilder = new GroupBuilder();\n-        final Argument inputfile_opt = abuilder.withName(\"input\").withMinimum(1).withMaximum(1).create();\n-        final Argument outputfile_opt = abuilder.withName(\"output\").withMinimum(1).withMaximum(1).create();\n-        final Argument targets = new SourceDestArgument(inputfile_opt, outputfile_opt);\n-        final Group options = gbuilder.withOption(targets).create();\n-        final Parser parser = new Parser();\n-        parser.setGroup(options);\n-        try {\n-            parser.parse(new String[] { \"testfile.txt\", \"testfile.txt\", \"testfile.txt\", \"testfile.txt\" });\n-            fail(\"OptionException\");\n-        } catch (OptionException e) {\n-            assertEquals(\"Unexpected testfile.txt while processing \", e.getMessage());\n-        }\n-    }    \n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.cli2.bug;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.cli2.Argument;\n+import org.apache.commons.cli2.Group;\n+import org.apache.commons.cli2.OptionException;\n+import org.apache.commons.cli2.builder.ArgumentBuilder;\n+import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n+import org.apache.commons.cli2.builder.GroupBuilder;\n+import org.apache.commons.cli2.commandline.Parser;\n+import org.apache.commons.cli2.option.SourceDestArgument;\n+\n+/**\n+ * The first is a loop in Parser.parse() if I set a non-declared option. This \n+ * code goes into a loop in Parser.java method parse this while loop runs \n+ * endless\n+ * \n+ * @author Steve Alberty\n+ */\n+public class BugLoopingOptionLookAlikeTest extends TestCase {\n+\n+    public void testLoopingOptionLookAlike() {\n+        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n+        final ArgumentBuilder abuilder = new ArgumentBuilder();\n+        final GroupBuilder gbuilder = new GroupBuilder();\n+        final Group options = gbuilder\n+            .withName(\"ant\")\n+            .withOption(obuilder.withShortName(\"help\").withDescription(\"print this message\").create())\n+            .withOption(obuilder.withShortName(\"projecthelp\").withDescription(\"print project help information\").create())\n+            .withOption(abuilder.withName(\"target\").create())\n+            .create();\n+        \n+        final Parser parser = new Parser();\n+        parser.setGroup(options);\n+        try {\n+            parser.parse(new String[] { \"-abcdef\",\n+                    \"testfile.txt \", });\n+            fail(\"OptionException\");\n+        } catch (OptionException e) {\n+            assertEquals(\"Unexpected -abcdef while processing ant\",e.getMessage());\n+        }\n+    }\n+    \n+    public void testLoopingOptionLookAlike2() {\n+        final ArgumentBuilder abuilder = new ArgumentBuilder();\n+        final GroupBuilder gbuilder = new GroupBuilder();\n+        final Argument inputfile_opt = abuilder.withName(\"input\").withMinimum(1).withMaximum(1).create();\n+        final Argument outputfile_opt = abuilder.withName(\"output\").withMinimum(1).withMaximum(1).create();\n+        final Argument targets = new SourceDestArgument(inputfile_opt, outputfile_opt);\n+        final Group options = gbuilder.withOption(targets).create();\n+        final Parser parser = new Parser();\n+        parser.setGroup(options);\n+        try {\n+            parser.parse(new String[] { \"testfile.txt\", \"testfile.txt\", \"testfile.txt\", \"testfile.txt\" });\n+            fail(\"OptionException\");\n+        } catch (OptionException e) {\n+            assertEquals(\"Unexpected testfile.txt while processing \", e.getMessage());\n+        }\n+    }    \n+}\n--- a/src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java\n+++ b/src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.commons.cli2.builder;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import junit.framework.TestCase;\n-\n-import org.apache.commons.cli2.option.ArgumentImpl;\n-import org.apache.commons.cli2.resource.ResourceConstants;\n-import org.apache.commons.cli2.resource.ResourceHelper;\n-import org.apache.commons.cli2.validation.DateValidator;\n-import org.apache.commons.cli2.validation.Validator;\n-\n-public class ArgumentBuilderTest\n-    extends TestCase {\n-    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();\n-    private ArgumentBuilder argumentBuilder;\n-\n-    /*\n-     * @see TestCase#setUp()\n-     */\n-    protected void setUp()\n-        throws Exception {\n-        this.argumentBuilder = new ArgumentBuilder();\n-    }\n-\n-    public void testConsumeRemaining() {\n-        this.argumentBuilder.withConsumeRemaining(\"--\");\n-        this.argumentBuilder.withName(\"arg\");\n-\n-        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n-\n-        assertEquals(\"incorrect consume remaining token\", \"--\", arg.getConsumeRemaining());\n-    }\n-\n-    public void testNullConsumeRemaining() {\n-        try {\n-            this.argumentBuilder.withConsumeRemaining(null);\n-            fail(\"cannot use null consume remaining token\");\n-        } catch (IllegalArgumentException exp) {\n-            assertEquals(\"wrong exception message\",\n-                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING),\n-                         exp.getMessage());\n-        }\n-    }\n-\n-    public void testEmptyConsumeRemaining() {\n-        try {\n-            this.argumentBuilder.withConsumeRemaining(\"\");\n-            fail(\"cannot use empty string consume remaining token\");\n-        } catch (IllegalArgumentException exp) {\n-            assertEquals(\"wrong exception message\",\n-                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING),\n-                         exp.getMessage());\n-        }\n-    }\n-\n-    public void testDefault() {\n-        this.argumentBuilder.withDefault(\"defaultString\");\n-        this.argumentBuilder.withName(\"arg\");\n-\n-        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n-\n-        assertEquals(\"incorrect number of default values\", 1, arg.getDefaultValues().size());\n-        assertEquals(\"incorrect default value\", \"defaultString\", arg.getDefaultValues().get(0));\n-    }\n-\n-    public void testDefaultX2() {\n-        this.argumentBuilder.withDefault(\"defaultString1\");\n-        this.argumentBuilder.withDefault(\"defaultString2\");\n-        this.argumentBuilder.withName(\"arg\");\n-\n-        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n-\n-        assertEquals(\"incorrect number of default values\", 2, arg.getDefaultValues().size());\n-        assertEquals(\"incorrect default value-1\", \"defaultString1\", arg.getDefaultValues().get(0));\n-        assertEquals(\"incorrect default value-2\", \"defaultString2\", arg.getDefaultValues().get(1));\n-    }\n-\n-    public void testNullDefault() {\n-        try {\n-            this.argumentBuilder.withDefault(null);\n-            fail(\"cannot use null default\");\n-        } catch (IllegalArgumentException exp) {\n-            assertEquals(\"wrong exception message\",\n-                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT),\n-                         exp.getMessage());\n-        }\n-    }\n-\n-    public void testDefaults() {\n-        final List defaults = new ArrayList();\n-        defaults.add(\"one\");\n-        defaults.add(\"two\");\n-\n-        this.argumentBuilder.withDefaults(defaults);\n-        this.argumentBuilder.withName(\"arg\");\n-\n-        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n-\n-        assertEquals(\"incorrect number of default values\", 2, arg.getDefaultValues().size());\n-        assertEquals(\"incorrect default value-1\", \"one\", arg.getDefaultValues().get(0));\n-        assertEquals(\"incorrect default value-2\", \"two\", arg.getDefaultValues().get(1));\n-        assertEquals(\"incorrect default values list\", defaults, arg.getDefaultValues());\n-\n-    }\n-\n-    public void testNullDefaults() {\n-        try {\n-            this.argumentBuilder.withDefaults(null);\n-            fail(\"cannot use null defaults\");\n-        } catch (IllegalArgumentException exp) {\n-            assertEquals(\"wrong exception message\",\n-                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULTS),\n-                         exp.getMessage());\n-        }\n-    }\n-\n-    public void testId() {\n-        this.argumentBuilder.withId(1);\n-        this.argumentBuilder.withName(\"arg\");\n-\n-        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n-\n-        assertEquals(\"incorrect id\", 1, arg.getId());\n-    }\n-\n-    public void testInitialSeparator() {\n-        this.argumentBuilder.withInitialSeparator(',');\n-        this.argumentBuilder.withName(\"arg\");\n-\n-        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n-\n-        assertEquals(\"incorrect initial separator\", ',', arg.getInitialSeparator());\n-    }\n-\n-    public void testMaximum() {\n-        this.argumentBuilder.withMaximum(1);\n-        this.argumentBuilder.withName(\"arg\");\n-\n-        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n-\n-        assertEquals(\"incorrect maximum\", 1, arg.getMaximum());\n-    }\n-\n-    public void testNegativeMaximum() {\n-        try {\n-            this.argumentBuilder.withMaximum(-1);\n-            fail(\"cannot use negative maximum\");\n-        } catch (IllegalArgumentException exp) {\n-            assertEquals(\"wrong exception message\",\n-                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MAXIMUM),\n-                         exp.getMessage());\n-        }\n-    }\n-\n-    public void testMinimum() {\n-        this.argumentBuilder.withMinimum(1);\n-        this.argumentBuilder.withName(\"arg\");\n-\n-        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n-\n-        assertEquals(\"incorrect maximum\", 1, arg.getMinimum());\n-    }\n-\n-    public void testNegativeMinimum() {\n-        try {\n-            this.argumentBuilder.withMinimum(-1);\n-            fail(\"cannot use negative minimum\");\n-        } catch (IllegalArgumentException exp) {\n-            assertEquals(\"wrong exception message\",\n-                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MINIMUM),\n-                         exp.getMessage());\n-        }\n-    }\n-\n-    public void testName() {\n-        this.argumentBuilder.withName(\"arg\");\n-\n-        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n-\n-        assertEquals(\"incorrect preferred name\", \"arg\", arg.getPreferredName());\n-    }\n-\n-    public void testNullName() {\n-        try {\n-            this.argumentBuilder.withName(null);\n-            fail(\"cannot use null name\");\n-        } catch (IllegalArgumentException exp) {\n-            assertEquals(\"wrong exception message\",\n-                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_NAME),\n-                         exp.getMessage());\n-        }\n-    }\n-\n-    public void testEmptyName() {\n-        try {\n-            this.argumentBuilder.withName(\"\");\n-            fail(\"cannot use empty name\");\n-        } catch (IllegalArgumentException exp) {\n-            assertEquals(\"wrong exception message\",\n-                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_NAME),\n-                         exp.getMessage());\n-        }\n-    }\n-\n-    public void testSubsequentSeparator() {\n-        this.argumentBuilder.withSubsequentSeparator(':');\n-        this.argumentBuilder.withName(\"arg\");\n-\n-        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n-\n-        assertEquals(\"incorrect subsequent separator\", ':', arg.getSubsequentSeparator());\n-    }\n-\n-    public void testValidator() {\n-        Validator validator = DateValidator.getDateInstance();\n-        this.argumentBuilder.withValidator(validator);\n-        this.argumentBuilder.withName(\"arg\");\n-\n-        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n-\n-        assertEquals(\"incorrect validator\", validator, arg.getValidator());\n-    }\n-\n-    public void testNullValidator() {\n-        try {\n-            this.argumentBuilder.withValidator(null);\n-            fail(\"cannot use null validator\");\n-        } catch (IllegalArgumentException exp) {\n-            assertEquals(\"wrong exception message\",\n-                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_VALIDATOR),\n-                         exp.getMessage());\n-        }\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.cli2.builder;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.cli2.option.ArgumentImpl;\n+import org.apache.commons.cli2.resource.ResourceConstants;\n+import org.apache.commons.cli2.resource.ResourceHelper;\n+import org.apache.commons.cli2.validation.DateValidator;\n+import org.apache.commons.cli2.validation.Validator;\n+\n+public class ArgumentBuilderTest\n+    extends TestCase {\n+    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();\n+    private ArgumentBuilder argumentBuilder;\n+\n+    /*\n+     * @see TestCase#setUp()\n+     */\n+    protected void setUp()\n+        throws Exception {\n+        this.argumentBuilder = new ArgumentBuilder();\n+    }\n+\n+    public void testConsumeRemaining() {\n+        this.argumentBuilder.withConsumeRemaining(\"--\");\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect consume remaining token\", \"--\", arg.getConsumeRemaining());\n+    }\n+\n+    public void testNullConsumeRemaining() {\n+        try {\n+            this.argumentBuilder.withConsumeRemaining(null);\n+            fail(\"cannot use null consume remaining token\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testEmptyConsumeRemaining() {\n+        try {\n+            this.argumentBuilder.withConsumeRemaining(\"\");\n+            fail(\"cannot use empty string consume remaining token\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testDefault() {\n+        this.argumentBuilder.withDefault(\"defaultString\");\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect number of default values\", 1, arg.getDefaultValues().size());\n+        assertEquals(\"incorrect default value\", \"defaultString\", arg.getDefaultValues().get(0));\n+    }\n+\n+    public void testDefaultX2() {\n+        this.argumentBuilder.withDefault(\"defaultString1\");\n+        this.argumentBuilder.withDefault(\"defaultString2\");\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect number of default values\", 2, arg.getDefaultValues().size());\n+        assertEquals(\"incorrect default value-1\", \"defaultString1\", arg.getDefaultValues().get(0));\n+        assertEquals(\"incorrect default value-2\", \"defaultString2\", arg.getDefaultValues().get(1));\n+    }\n+\n+    public void testNullDefault() {\n+        try {\n+            this.argumentBuilder.withDefault(null);\n+            fail(\"cannot use null default\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testDefaults() {\n+        final List defaults = new ArrayList();\n+        defaults.add(\"one\");\n+        defaults.add(\"two\");\n+\n+        this.argumentBuilder.withDefaults(defaults);\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect number of default values\", 2, arg.getDefaultValues().size());\n+        assertEquals(\"incorrect default value-1\", \"one\", arg.getDefaultValues().get(0));\n+        assertEquals(\"incorrect default value-2\", \"two\", arg.getDefaultValues().get(1));\n+        assertEquals(\"incorrect default values list\", defaults, arg.getDefaultValues());\n+\n+    }\n+\n+    public void testNullDefaults() {\n+        try {\n+            this.argumentBuilder.withDefaults(null);\n+            fail(\"cannot use null defaults\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULTS),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testId() {\n+        this.argumentBuilder.withId(1);\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect id\", 1, arg.getId());\n+    }\n+\n+    public void testInitialSeparator() {\n+        this.argumentBuilder.withInitialSeparator(',');\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect initial separator\", ',', arg.getInitialSeparator());\n+    }\n+\n+    public void testMaximum() {\n+        this.argumentBuilder.withMaximum(1);\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect maximum\", 1, arg.getMaximum());\n+    }\n+\n+    public void testNegativeMaximum() {\n+        try {\n+            this.argumentBuilder.withMaximum(-1);\n+            fail(\"cannot use negative maximum\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MAXIMUM),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testMinimum() {\n+        this.argumentBuilder.withMinimum(1);\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect maximum\", 1, arg.getMinimum());\n+    }\n+\n+    public void testNegativeMinimum() {\n+        try {\n+            this.argumentBuilder.withMinimum(-1);\n+            fail(\"cannot use negative minimum\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MINIMUM),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testName() {\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect preferred name\", \"arg\", arg.getPreferredName());\n+    }\n+\n+    public void testNullName() {\n+        try {\n+            this.argumentBuilder.withName(null);\n+            fail(\"cannot use null name\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_NAME),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testEmptyName() {\n+        try {\n+            this.argumentBuilder.withName(\"\");\n+            fail(\"cannot use empty name\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_NAME),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testSubsequentSeparator() {\n+        this.argumentBuilder.withSubsequentSeparator(':');\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect subsequent separator\", ':', arg.getSubsequentSeparator());\n+    }\n+\n+    public void testValidator() {\n+        Validator validator = DateValidator.getDateInstance();\n+        this.argumentBuilder.withValidator(validator);\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect validator\", validator, arg.getValidator());\n+    }\n+\n+    public void testNullValidator() {\n+        try {\n+            this.argumentBuilder.withValidator(null);\n+            fail(\"cannot use null validator\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_VALIDATOR),\n+                         exp.getMessage());\n+        }\n+    }\n+}\n--- a/src/test/org/apache/commons/cli2/commandline/ParserTest.java\n+++ b/src/test/org/apache/commons/cli2/commandline/ParserTest.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.cli2.commandline;\n-\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.io.StringReader;\n-import java.io.StringWriter;\n-\n-import org.apache.commons.cli2.CommandLine;\n-import org.apache.commons.cli2.Group;\n-import org.apache.commons.cli2.OptionException;\n-import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n-import org.apache.commons.cli2.builder.GroupBuilder;\n-import org.apache.commons.cli2.option.DefaultOption;\n-import org.apache.commons.cli2.util.HelpFormatter;\n-\n-import junit.framework.TestCase;\n-\n-public class ParserTest extends TestCase {\n-    \n-    private Parser parser;\n-    private DefaultOption verboseOption;\n-    private DefaultOption helpOption;\n-    private Group options;\n-    private HelpFormatter helpFormatter;\n-    private StringWriter out;\n-    private BufferedReader in;\n-\n-    public void setUp() {\n-        parser = new Parser();\n-        \n-        final GroupBuilder gBuilder = new GroupBuilder();\n-        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\n-        \n-        helpOption = oBuilder.withLongName(\"help\").withShortName(\"h\").create();\n-        verboseOption = oBuilder.withLongName(\"verbose\").withShortName(\"v\").create();\n-        options = gBuilder.withOption(helpOption).withOption(verboseOption).create();\n-        parser.setGroup(options);\n-        \n-        helpFormatter = new HelpFormatter();\n-        out = new StringWriter();\n-        helpFormatter.setPrintWriter(new PrintWriter(out));\n-        parser.setHelpFormatter(helpFormatter);\n-    }\n-\n-    public void testParse_Successful() throws OptionException {\n-        final CommandLine cl = parser.parse(new String[]{\"-hv\"});\n-        \n-        assertTrue(cl.hasOption(helpOption));\n-        assertTrue(cl.hasOption(verboseOption));\n-        \n-        assertEquals(\"--help --verbose\",cl.toString());\n-        \n-        final WriteableCommandLineImpl wcli = (WriteableCommandLineImpl)cl;\n-        assertEquals(\"[--help, --verbose]\",wcli.getNormalised().toString());\n-    }\n-\n-    public void testParse_WithUnexpectedOption() {\n-        try {\n-            parser.parse(new String[]{\"--unexpected\"});\n-            fail(\"OptionException\");\n-        }\n-        catch(OptionException e) {\n-            assertEquals(options,e.getOption());\n-            assertEquals(\"Unexpected --unexpected while processing --help|--verbose\",e.getMessage());\n-        }\n-    }\n-\n-    public void testParseAndHelp_Successful() throws IOException {\n-        final CommandLine cl = parser.parseAndHelp(new String[]{\"-v\"});\n-        \n-        assertTrue(cl.hasOption(verboseOption));\n-        assertEquals(\"\",out.getBuffer().toString());\n-    }\n-\n-    public void testParseAndHelp_ByHelpOption() throws IOException {\n-        parser.setHelpOption(helpOption);\n-        \n-        assertNull(parser.parseAndHelp(new String[]{\"-hv\"}));\n-        \n-        inReader();\n-        assertInReaderUsage();\n-        assertInReaderEOF();\n-    }\n-\n-    public void testParseAndHelp_ByHelpTrigger() throws IOException {\n-        parser.setHelpTrigger(\"--help\");\n-        \n-        assertNull(parser.parseAndHelp(new String[]{\"-hv\"}));\n-        \n-        inReader();\n-        assertInReaderUsage();\n-        assertInReaderEOF();\n-    }\n-\n-    public void testParseAndHelp_WithUnexpectedOption() throws IOException {\n-        assertNull(parser.parseAndHelp(new String[]{\"--unexpected\"}));\n-        \n-        inReader();\n-        assertInReaderLine(\"Unexpected --unexpected while processing --help|--verbose\");\n-        assertInReaderUsage();\n-        assertInReaderEOF();\n-    }\n-\n-    private void assertInReaderUsage() throws IOException {\n-        assertInReaderLine(\"Usage:\");\n-        assertInReaderLine(\"[--help --verbose]\");\n-        assertInReaderLine(\"--help|--verbose\");\n-        assertInReaderLine(\"--help (-h)\");\n-        assertInReaderLine(\"--verbose (-v)\");\n-    }\n-\n-    private void assertInReaderLine(final String string) throws IOException {\n-        assertEquals(string,in.readLine().trim());\n-    }\n-\n-    private void assertInReaderEOF() throws IOException {\n-        assertNull(in.readLine());\n-    }\n-\n-    private void inReader() {\n-        in = new BufferedReader(new StringReader(out.getBuffer().toString()));\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.cli2.commandline;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import org.apache.commons.cli2.CommandLine;\n+import org.apache.commons.cli2.Group;\n+import org.apache.commons.cli2.OptionException;\n+import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n+import org.apache.commons.cli2.builder.GroupBuilder;\n+import org.apache.commons.cli2.option.DefaultOption;\n+import org.apache.commons.cli2.util.HelpFormatter;\n+\n+import junit.framework.TestCase;\n+\n+public class ParserTest extends TestCase {\n+    \n+    private Parser parser;\n+    private DefaultOption verboseOption;\n+    private DefaultOption helpOption;\n+    private Group options;\n+    private HelpFormatter helpFormatter;\n+    private StringWriter out;\n+    private BufferedReader in;\n+\n+    public void setUp() {\n+        parser = new Parser();\n+        \n+        final GroupBuilder gBuilder = new GroupBuilder();\n+        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\n+        \n+        helpOption = oBuilder.withLongName(\"help\").withShortName(\"h\").create();\n+        verboseOption = oBuilder.withLongName(\"verbose\").withShortName(\"v\").create();\n+        options = gBuilder.withOption(helpOption).withOption(verboseOption).create();\n+        parser.setGroup(options);\n+        \n+        helpFormatter = new HelpFormatter();\n+        out = new StringWriter();\n+        helpFormatter.setPrintWriter(new PrintWriter(out));\n+        parser.setHelpFormatter(helpFormatter);\n+    }\n+\n+    public void testParse_Successful() throws OptionException {\n+        final CommandLine cl = parser.parse(new String[]{\"-hv\"});\n+        \n+        assertTrue(cl.hasOption(helpOption));\n+        assertTrue(cl.hasOption(verboseOption));\n+        \n+        assertEquals(\"--help --verbose\",cl.toString());\n+        \n+        final WriteableCommandLineImpl wcli = (WriteableCommandLineImpl)cl;\n+        assertEquals(\"[--help, --verbose]\",wcli.getNormalised().toString());\n+    }\n+\n+    public void testParse_WithUnexpectedOption() {\n+        try {\n+            parser.parse(new String[]{\"--unexpected\"});\n+            fail(\"OptionException\");\n+        }\n+        catch(OptionException e) {\n+            assertEquals(options,e.getOption());\n+            assertEquals(\"Unexpected --unexpected while processing --help|--verbose\",e.getMessage());\n+        }\n+    }\n+\n+    public void testParseAndHelp_Successful() throws IOException {\n+        final CommandLine cl = parser.parseAndHelp(new String[]{\"-v\"});\n+        \n+        assertTrue(cl.hasOption(verboseOption));\n+        assertEquals(\"\",out.getBuffer().toString());\n+    }\n+\n+    public void testParseAndHelp_ByHelpOption() throws IOException {\n+        parser.setHelpOption(helpOption);\n+        \n+        assertNull(parser.parseAndHelp(new String[]{\"-hv\"}));\n+        \n+        inReader();\n+        assertInReaderUsage();\n+        assertInReaderEOF();\n+    }\n+\n+    public void testParseAndHelp_ByHelpTrigger() throws IOException {\n+        parser.setHelpTrigger(\"--help\");\n+        \n+        assertNull(parser.parseAndHelp(new String[]{\"-hv\"}));\n+        \n+        inReader();\n+        assertInReaderUsage();\n+        assertInReaderEOF();\n+    }\n+\n+    public void testParseAndHelp_WithUnexpectedOption() throws IOException {\n+        assertNull(parser.parseAndHelp(new String[]{\"--unexpected\"}));\n+        \n+        inReader();\n+        assertInReaderLine(\"Unexpected --unexpected while processing --help|--verbose\");\n+        assertInReaderUsage();\n+        assertInReaderEOF();\n+    }\n+\n+    private void assertInReaderUsage() throws IOException {\n+        assertInReaderLine(\"Usage:\");\n+        assertInReaderLine(\"[--help --verbose]\");\n+        assertInReaderLine(\"--help|--verbose\");\n+        assertInReaderLine(\"--help (-h)\");\n+        assertInReaderLine(\"--verbose (-v)\");\n+    }\n+\n+    private void assertInReaderLine(final String string) throws IOException {\n+        assertEquals(string,in.readLine().trim());\n+    }\n+\n+    private void assertInReaderEOF() throws IOException {\n+        assertNull(in.readLine());\n+    }\n+\n+    private void inReader() {\n+        in = new BufferedReader(new StringReader(out.getBuffer().toString()));\n+    }\n+}", "timestamp": 1206184136, "metainfo": ""}