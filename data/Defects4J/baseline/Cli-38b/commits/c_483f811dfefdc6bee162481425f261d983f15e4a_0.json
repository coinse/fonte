{"sha": "483f811dfefdc6bee162481425f261d983f15e4a", "log": "Indented lines in the header and footer are now preserved (CLI-207)  ", "commit": "\n--- a/src/main/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/main/java/org/apache/commons/cli/HelpFormatter.java\n \n package org.apache.commons.cli;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n import java.io.PrintWriter;\n+import java.io.StringReader;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n     {\n         StringBuffer sb = new StringBuffer(text.length());\n \n-        renderWrappedText(sb, width, nextLineTabStop, text);\n+        renderWrappedTextBlock(sb, width, nextLineTabStop, text);\n         pw.println(sb.toString());\n     }\n \n \n             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n         }\n+    }\n+\n+    /**\n+     * Render the specified text width a maximum width. This method differs\n+     * from renderWrappedText by not removing leading spaces after a new line.\n+     * \n+     * @param sb The StringBuffer to place the rendered text into.\n+     * @param width The number of characters to display per line\n+     * @param nextLineTabStop The position on the next line for the first tab.\n+     * @param text The text to be rendered.\n+     */\n+    private StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {\n+        try {\n+            BufferedReader in = new BufferedReader(new StringReader(text));\n+            String line;\n+            boolean firstLine = true;\n+            while ((line = in.readLine()) != null) {\n+                if (!firstLine) {\n+                    sb.append(getNewLine());\n+                } else {\n+                    firstLine = false;\n+                }\n+                renderWrappedText(sb, width, nextLineTabStop, line);\n+            }\n+        } catch (IOException e) {\n+            // cannot happen\n+        }\n+\n+        return sb;\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/cli/HelpFormatterTest.java\n+++ b/src/test/java/org/apache/commons/cli/HelpFormatterTest.java\n                 , out.toString());\n     }\n \n+    public void testIndentedHeaderAndFooter()\n+    {\n+        // related to CLI-207\n+        Options options = new Options();\n+        HelpFormatter formatter = new HelpFormatter();\n+        String header = \"  Header1\\n  Header2\";\n+        String footer = \"  Footer1\\n  Footer2\";\n+        StringWriter out = new StringWriter();\n+        formatter.printHelp(new PrintWriter(out), 80, \"foobar\", header, options, 2, 2, footer, true);\n+\n+        assertEquals(\n+                \"usage: foobar\" + EOL +\n+                \"  Header1\" + EOL +\n+                \"  Header2\" + EOL +\n+                \"\" + EOL +\n+                \"  Footer1\" + EOL +\n+                \"  Footer2\" + EOL\n+                , out.toString());\n+    }\n+\n     public void testOptionWithoutShortFormat()\n     {\n         // related to Bugzilla #19383 (CLI-67)", "timestamp": 1279730440, "metainfo": ""}