{"sha": "5ad6ce22f851b3a05b370890686b45997182effa", "log": "- added ArgumentBuilder test   ", "commit": "\n--- a/src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java\n+++ b/src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java\n \n import org.apache.commons.cli2.Argument;\n import org.apache.commons.cli2.option.ArgumentImpl;\n+import org.apache.commons.cli2.resource.ResourceConstants;\n+import org.apache.commons.cli2.resource.ResourceHelper;\n import org.apache.commons.cli2.validation.Validator;\n \n /**\n  */\n public class ArgumentBuilder {\n \n+\t/** i18n */\n+\tprivate final static ResourceHelper resources = ResourceHelper.getResourceHelper();\n+\t\n     /** name of the argument. Used for display and lookups in CommandLine */\n     private String name;\n \n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withName(final String newName) {\n+    \tif (newName == null) {\n+    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_NAME));\n+    \t}\n+    \tif (\"\".equals(newName)) {\n+    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_NAME));\n+    \t}\n         this.name = newName;\n         return this;\n     }\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withMinimum(final int newMinimum) {\n+    \tif (newMinimum < 0) {\n+    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MINIMUM));\n+    \t}\n         this.minimum = newMinimum;\n         return this;\n     }\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withMaximum(final int newMaximum) {\n+    \tif (newMaximum < 0) {\n+    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MAXIMUM));\n+    \t}\n         this.maximum = newMaximum;\n         return this;\n     }\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withValidator(final Validator newValidator) {\n+    \tif (newValidator == null) {\n+    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_VALIDATOR));\n+    \t}\n         this.validator = newValidator;\n         return this;\n     }\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withConsumeRemaining(final String newConsumeRemaining) {\n-\n+    \tif (newConsumeRemaining == null) {\n+    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING));\n+    \t} \n+    \tif ( \"\".equals(newConsumeRemaining)) {\n+    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING));\n+    \t}\n         this.consumeRemaining = newConsumeRemaining;\n         return this;\n     }\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withDefault(final Object defaultValue) {\n+    \tif (defaultValue == null) {\n+    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT));\n+    \t}\n+    \t\n         if (this.defaultValues == null) {\n             this.defaultValues = new ArrayList(1);\n         }\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withDefaults(final List newDefaultValues) {\n+    \tif (newDefaultValues == null) {\n+    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULTS));\n+    \t}\n         this.defaultValues = newDefaultValues;\n         return this;\n     }\n--- a/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n     private final int minimum;\n     private final int maximum;\n     private final char initialSeparator;\n-    private final char subsequentSepatator;\n+    private final char subsequentSeparator;\n     private final boolean subsequentSplit;\n     private final Validator validator;\n     private final String consumeRemaining;\n         this.minimum = minimum;\n         this.maximum = maximum;\n         this.initialSeparator = initialSeparator;\n-        this.subsequentSepatator = subsequentSeparator;\n+        this.subsequentSeparator = subsequentSeparator;\n         this.subsequentSplit = subsequentSeparator != NUL;\n         this.validator = validator;\n         this.consumeRemaining = consumeRemaining;\n             // should we split the string up?\n             else if (subsequentSplit) {\n                 final StringTokenizer values =\n-                    new StringTokenizer(allValues, String.valueOf(subsequentSepatator));\n+                    new StringTokenizer(allValues, String.valueOf(subsequentSeparator));\n \n                 arguments.remove();\n \n         return this.initialSeparator;\n     }\n \n+    public char getSubsequentSeparator() {\n+        return this.subsequentSeparator;\n+    }\n+\n     public Set getTriggers() {\n         return Collections.EMPTY_SET;\n     }\n \n+    public String getConsumeRemaining() {\n+    \treturn this.consumeRemaining;\n+    }\n+    \n+    public List getDefaultValues() {\n+    \treturn this.defaultValues;\n+    }\n+    \n+    public Validator getValidator() {\n+    \treturn this.validator;\n+    }\n+    \n     public void validate(final WriteableCommandLine commandLine)\n         throws OptionException {\n         validate(commandLine, this);\n--- a/src/java/org/apache/commons/cli2/resource/ResourceConstants.java\n+++ b/src/java/org/apache/commons/cli2/resource/ResourceConstants.java\n     public static final String HELPFORMATTER_GUTTER_TOO_LONG = \"HelpFormatter.gutter.too.long\";\n     public static final String HELPFORMATTER_WIDTH_TOO_NARROW = \"HelpFormatter.width.too.narrow\";\n     public static final String ENUM_ILLEGAL_VALUE = \"Enum.illegal.value\";\n+    public static final String ARGUMENT_BUILDER_NULL_CONSUME_REMAINING = \"ArgumentBuilder.null.consume.remaining\";\n+    public static final String ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING = \"ArgumentBuilder.empty.consume.remaining\";\n+    public static final String ARGUMENT_BUILDER_NULL_DEFAULT = \"ArgumentBuilder.null.default\";\n+    public static final String ARGUMENT_BUILDER_NULL_DEFAULTS = \"ArgumentBuilder.null.defaults\";\n+    public static final String ARGUMENT_BUILDER_NEGATIVE_MAXIMUM = \"ArgumentBuilder.negative.maximum\";\n+    public static final String ARGUMENT_BUILDER_NEGATIVE_MINIMUM = \"ArgumentBuilder.negative.minimum\";\n+    public static final String ARGUMENT_BUILDER_NULL_NAME = \"ArgumentBuilder.null.name\";\n+    public static final String ARGUMENT_BUILDER_EMPTY_NAME = \"ArgumentBuilder.empty.name\";\n+    public static final String ARGUMENT_BUILDER_NULL_VALIDATOR = \"ArgumentBuilder.null.validator\";\n+\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java\n+/*\n+ * Copyright 2004-2005 The Apache Software Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.cli2.builder;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.cli2.option.ArgumentImpl;\n+import org.apache.commons.cli2.resource.ResourceConstants;\n+import org.apache.commons.cli2.resource.ResourceHelper;\n+import org.apache.commons.cli2.validation.DateValidator;\n+import org.apache.commons.cli2.validation.Validator;\n+\n+public class ArgumentBuilderTest\n+    extends TestCase {\n+    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();\n+    private ArgumentBuilder argumentBuilder;\n+\n+    /*\n+     * @see TestCase#setUp()\n+     */\n+    protected void setUp()\n+        throws Exception {\n+        this.argumentBuilder = new ArgumentBuilder();\n+    }\n+\n+    public void testConsumeRemaining() {\n+        this.argumentBuilder.withConsumeRemaining(\"--\");\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect consume remaining token\", \"--\", arg.getConsumeRemaining());\n+    }\n+\n+    public void testNullConsumeRemaining() {\n+        try {\n+            this.argumentBuilder.withConsumeRemaining(null);\n+            fail(\"cannot use null consume remaining token\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testEmptyConsumeRemaining() {\n+        try {\n+            this.argumentBuilder.withConsumeRemaining(\"\");\n+            fail(\"cannot use empty string consume remaining token\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testDefault() {\n+        this.argumentBuilder.withDefault(\"defaultString\");\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect number of default values\", 1, arg.getDefaultValues().size());\n+        assertEquals(\"incorrect default value\", \"defaultString\", arg.getDefaultValues().get(0));\n+    }\n+\n+    public void testDefaultX2() {\n+        this.argumentBuilder.withDefault(\"defaultString1\");\n+        this.argumentBuilder.withDefault(\"defaultString2\");\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect number of default values\", 2, arg.getDefaultValues().size());\n+        assertEquals(\"incorrect default value-1\", \"defaultString1\", arg.getDefaultValues().get(0));\n+        assertEquals(\"incorrect default value-2\", \"defaultString2\", arg.getDefaultValues().get(1));\n+    }\n+\n+    public void testNullDefault() {\n+        try {\n+            this.argumentBuilder.withDefault(null);\n+            fail(\"cannot use null default\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testDefaults() {\n+        final List defaults = new ArrayList();\n+        defaults.add(\"one\");\n+        defaults.add(\"two\");\n+\n+        this.argumentBuilder.withDefaults(defaults);\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect number of default values\", 2, arg.getDefaultValues().size());\n+        assertEquals(\"incorrect default value-1\", \"one\", arg.getDefaultValues().get(0));\n+        assertEquals(\"incorrect default value-2\", \"two\", arg.getDefaultValues().get(1));\n+        assertEquals(\"incorrect default values list\", defaults, arg.getDefaultValues());\n+\n+    }\n+\n+    public void testNullDefaults() {\n+        try {\n+            this.argumentBuilder.withDefaults(null);\n+            fail(\"cannot use null defaults\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULTS),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testId() {\n+        this.argumentBuilder.withId(1);\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect id\", 1, arg.getId());\n+    }\n+\n+    public void testInitialSeparator() {\n+        this.argumentBuilder.withInitialSeparator(',');\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect initial separator\", ',', arg.getInitialSeparator());\n+    }\n+\n+    public void testMaximum() {\n+        this.argumentBuilder.withMaximum(1);\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect maximum\", 1, arg.getMaximum());\n+    }\n+\n+    public void testNegativeMaximum() {\n+        try {\n+            this.argumentBuilder.withMaximum(-1);\n+            fail(\"cannot use negative maximum\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MAXIMUM),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testMinimum() {\n+        this.argumentBuilder.withMinimum(1);\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect maximum\", 1, arg.getMinimum());\n+    }\n+\n+    public void testNegativeMinimum() {\n+        try {\n+            this.argumentBuilder.withMinimum(-1);\n+            fail(\"cannot use negative minimum\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MINIMUM),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testName() {\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect preferred name\", \"arg\", arg.getPreferredName());\n+    }\n+\n+    public void testNullName() {\n+        try {\n+            this.argumentBuilder.withName(null);\n+            fail(\"cannot use null name\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_NAME),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testEmptyName() {\n+        try {\n+            this.argumentBuilder.withName(\"\");\n+            fail(\"cannot use empty name\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_NAME),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testSubsequentSeparator() {\n+        this.argumentBuilder.withSubsequentSeparator(':');\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect subsequent separator\", ':', arg.getSubsequentSeparator());\n+    }\n+\n+    public void testValidator() {\n+        Validator validator = DateValidator.getDateInstance();\n+        this.argumentBuilder.withValidator(validator);\n+        this.argumentBuilder.withName(\"arg\");\n+\n+        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();\n+\n+        assertEquals(\"incorrect validator\", validator, arg.getValidator());\n+    }\n+\n+    public void testNullValidator() {\n+        try {\n+            this.argumentBuilder.withValidator(null);\n+            fail(\"cannot use null validator\");\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_VALIDATOR),\n+                         exp.getMessage());\n+        }\n+    }\n+}\n--- a/src/test/org/apache/commons/cli2/option/ParentTest.java\n+++ b/src/test/org/apache/commons/cli2/option/ParentTest.java\n         assertFalse(i.hasNext());\n     }\n \n+    public void testNullPreferredName() {\n+        try {\n+        \tnew CommandBuilder().create();\n+        } catch (IllegalStateException exp) {\n+        \tassertEquals(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_NO_NAME), exp.getMessage());\n+        }\n+    }\n+\n+    public void testRequired() {\n+    \tCommand cmd = new CommandBuilder().withRequired(true).withName(\"blah\").create();\n+    \tassertTrue(\"cmd is not required\", cmd.isRequired());\n+    \tassertEquals(\"id is incorrect\", 0, cmd.getId());\n+    }\n+\n+    public void testID() {\n+    \tCommand cmd = new CommandBuilder().withId('c').withName(\"blah\").create();\n+    \tassertEquals(\"id is incorrect\", 'c', cmd.getId());\n+    }\n+\n     public void testGetId() {\n         assertEquals('h', DefaultOptionTest.buildHelpOption().getId());\n         assertEquals('X', DefaultOptionTest.buildXOption().getId());", "timestamp": 1126651366, "metainfo": ""}