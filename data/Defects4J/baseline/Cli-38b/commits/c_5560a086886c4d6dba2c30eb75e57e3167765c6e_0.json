{"sha": "5560a086886c4d6dba2c30eb75e57e3167765c6e", "log": "Default options are now taken into account for the required options (CLI-202)  ", "commit": "\n--- a/src/main/java/org/apache/commons/cli/DefaultParser.java\n+++ b/src/main/java/org/apache/commons/cli/DefaultParser.java\n      *\n      * @param properties The value properties to be processed.\n      */\n-    private void handleProperties(Properties properties)\n+    private void handleProperties(Properties properties) throws ParseException\n     {\n         if (properties == null)\n         {\n                     continue;\n                 }\n                 \n-                cmd.addOption(opt);\n+                handleOption(opt);\n+                currentOption = null;\n             }\n         }\n     }\n--- a/src/main/java/org/apache/commons/cli/Parser.java\n+++ b/src/main/java/org/apache/commons/cli/Parser.java\n      *\n      * @param properties The value properties to be processed.\n      */\n-    protected void processProperties(Properties properties)\n+    protected void processProperties(Properties properties) throws ParseException\n     {\n         if (properties == null)\n         {\n                 }\n \n                 cmd.addOption(opt);\n+                updateRequiredOptions(opt);\n             }\n         }\n     }\n \n         // get the option represented by arg\n         Option opt = (Option) getOptions().getOption(arg).clone();\n-\n+        \n+        // update the required options and groups\n+        updateRequiredOptions(opt);\n+        \n+        // if the option takes an argument value\n+        if (opt.hasArg())\n+        {\n+            processArgs(opt, iter);\n+        }\n+        \n+        // set the option on the command line\n+        cmd.addOption(opt);\n+    }\n+\n+    /**\n+     * Removes the option or its group from the list of expected elements.\n+     * \n+     * @param opt\n+     */\n+    private void updateRequiredOptions(Option opt) throws ParseException\n+    {\n         // if the option is a required option remove the option from\n         // the requiredOptions list\n         if (opt.isRequired())\n \n             group.setSelected(opt);\n         }\n-\n-        // if the option takes an argument value\n-        if (opt.hasArg())\n-        {\n-            processArgs(opt, iter);\n-        }\n-\n-        // set the option on the command line\n-        cmd.addOption(opt);\n     }\n }\n--- a/src/test/java/org/apache/commons/cli/ParserTestCase.java\n+++ b/src/test/java/org/apache/commons/cli/ParserTestCase.java\n         assertEquals( \"ink\", cmd.getOptionValue(\"i\") );\n         assertTrue( !cmd.hasOption(\"fake\") );\n     }\n+\n+    public void testPropertyOptionRequired() throws Exception\n+    {\n+        Options opts = new Options();\n+        opts.addOption(OptionBuilder.isRequired().create(\"f\"));\n+        \n+        Properties properties = new Properties();\n+        properties.setProperty(\"f\", \"true\");\n+        \n+        CommandLine cmd = parse(parser, opts, null, properties);\n+        assertTrue(cmd.hasOption(\"f\"));\n+    }\n }", "timestamp": 1276729199, "metainfo": ""}