{"sha": "84d333ab1a80231963280a47711086a6b1a56781", "log": "Added the method getOptionProperties() in CommandLine to retrieve easily a set of properties specified by an option (-Dparam=value)  ", "commit": "\n--- a/src/java/org/apache/commons/cli/CommandLine.java\n+++ b/src/java/org/apache/commons/cli/CommandLine.java\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.Properties;\n \n /** \n  * <p>Represents list of arguments parsed against\n         return getOptionValue(String.valueOf(opt), defaultValue);\n     }\n \n+    /**\n+     * Retrieve the map of values associated to the option. This is convenient\n+     * for options specifying Java properties like <tt>-Dparam1=value1\n+     * -Dparam2=value2</tt>. The first argument of the option is the key, and\n+     * the 2nd argument is the value. If the option has only one argument\n+     * (<tt>-Dfoo</tt>) it is considered as a boolean flag and the value is\n+     * <tt>\"true\"</tt>.\n+     *\n+     * @param opt name of the option\n+     * @return The Properties mapped by the option, never <tt>null</tt>\n+     *         even if the option doesn't exists\n+     */\n+    public Properties getOptionProperties(String opt)\n+    {\n+        Properties props = new Properties();\n+\n+        for (Iterator it = options.iterator(); it.hasNext();)\n+        {\n+            Option option = (Option) it.next();\n+\n+            if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt()))\n+            {\n+                List values = option.getValuesList();\n+                if (values.size() >= 2)\n+                {\n+                    // use the first 2 arguments as the key/value pair\n+                    props.put(values.get(0), values.get(1));\n+                }\n+                else if (values.size() == 1)\n+                {\n+                    // no explicit value, handle it as a boolean\n+                    props.put(values.get(0), \"true\");\n+                }                \n+            }\n+        }\n+\n+        return props;\n+    }\n+\n     /** \n      * Retrieve any left-over non-recognized options and arguments\n      *\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli/CommandLineTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import java.util.Properties;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Emmanuel Bourg\n+ * @version $Revision$, $Date$\n+ */\n+public class CommandLineTest extends TestCase\n+{\n+    public void testGetOptionProperties() throws Exception\n+    {\n+        String[] args = new String[] { \"-Dparam1=value1\", \"-Dparam2=value2\", \"-Dparam3\", \"-Dparam4=value4\", \"-D\", \"--property\", \"foo=bar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));\n+        options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\"property\").create());\n+\n+        Parser parser = new GnuParser();\n+        CommandLine cl = parser.parse(options, args);\n+\n+        Properties props = cl.getOptionProperties(\"D\");\n+        assertNotNull(\"null properties\", props);\n+        assertEquals(\"number of properties in \" + props, 4, props.size());\n+        assertEquals(\"property 1\", \"value1\", props.getProperty(\"param1\"));\n+        assertEquals(\"property 2\", \"value2\", props.getProperty(\"param2\"));\n+        assertEquals(\"property 3\", \"true\", props.getProperty(\"param3\"));\n+        assertEquals(\"property 4\", \"value4\", props.getProperty(\"param4\"));\n+\n+        assertEquals(\"property with long format\", \"bar\", cl.getOptionProperties(\"property\").getProperty(\"foo\"));\n+    }\n+}", "timestamp": 1213376611, "metainfo": ""}