{"sha": "df52eee396b1e8ce24fd1ec34752e1049618255a", "log": "[CLI-224] Added new fluent builder API to Option, deprecating OptionBuilder, adapting the PatternOptionBuilder to use the new API, thanks to Duncan Jones.  ", "commit": "\n--- a/src/main/java/org/apache/commons/cli/Option.java\n+++ b/src/main/java/org/apache/commons/cli/Option.java\n     private char valuesep;\n \n     /**\n+     * Private constructor used by the nested Builder class.\n+     * \n+     * @param builder builder used to create this option\n+     */\n+    private Option(final Builder builder)\n+    {\n+        this.argName = builder.argName;\n+        this.description = builder.description;\n+        this.longOpt = builder.longOpt;\n+        this.numberOfArgs = builder.numberOfArgs;\n+        this.opt = builder.opt;\n+        this.optionalArg = builder.optionalArg;\n+        this.required = builder.required;\n+        this.type = builder.type;\n+        this.valuesep = builder.valuesep;\n+    }\n+    \n+    /**\n      * Creates an Option using the specified parameters.\n      * The option does not take an argument.\n      *\n             return acceptsArg();\n         }\n     }\n+    \n+    /**\n+     * A nested builder class to create <code>Option</code> instances\n+     * using descriptive methods.\n+     * <p>\n+     * Example usage:\n+     * <pre>\n+     * Option option = new Option.Builder(\"a\", \"Long description\")\n+     *     .required(true)\n+     *     .longOpt(\"arg-name\")\n+     *     .build();\n+     * </pre>\n+     * \n+     * @since 1.3\n+     */\n+    public static class Builder \n+    {\n+        /** the name of the option */\n+        private final String opt;\n+\n+        /** description of the option */\n+        private final String description;\n+\n+        /** the long representation of the option */\n+        private String longOpt;\n+\n+        /** the name of the argument for this option */\n+        private String argName;\n+\n+        /** specifies whether this option is required to be present */\n+        private boolean required;\n+\n+        /** specifies whether the argument value of this Option is optional */\n+        private boolean optionalArg;\n+\n+        /** the number of argument values this option can have */\n+        private int numberOfArgs = UNINITIALIZED;\n+\n+        /** the type of this Option */\n+        private Class<?> type = String.class;\n+\n+        /** the character that is the value separator */\n+        private char valuesep;\n+\n+        /**\n+         * Constructs a new <code>Builder</code> with the minimum\n+         * required parameters for an <code>Option</code> instance.\n+         * \n+         * @param opt short representation of the option\n+         * @param description describes the function of the option\n+         * @throws IllegalArgumentException if there are any non valid\n+         * Option characters in <code>opt</code>.\n+         */\n+        public Builder(final String opt, final String description) \n+                throws IllegalArgumentException\n+        {\n+            OptionValidator.validateOption(opt);\n+            this.opt = opt;\n+            this.description = description;\n+        }\n+        \n+        /**\n+         * Sets the display name for the argument value.\n+         *\n+         * @param argName the display name for the argument value.\n+         * @return this builder, to allow method chaining\n+         */\n+        public Builder argName(final String argName)\n+        {\n+            this.argName = argName;\n+            return this;\n+        }\n+        \n+        /**\n+         * Sets the long name of the Option.\n+         *\n+         * @param longOpt the long name of the Option\n+         * @return this builder, to allow method chaining\n+         */        \n+        public Builder longOpt(final String longOpt)\n+        {\n+            this.longOpt = longOpt;\n+            return this;\n+        }\n+        \n+        /** \n+         * Sets the number of argument values the Option can take.\n+         *\n+         * @param numberOfArgs the number of argument values\n+         * @return this builder, to allow method chaining\n+         */        \n+        public Builder numberOfArgs(final int numberOfArgs)\n+        {\n+            this.numberOfArgs = numberOfArgs;\n+            return this;\n+        }\n+        \n+        /**\n+         * Sets whether the Option can have an optional argument.\n+         *\n+         * @param isOptional specifies whether the Option can have\n+         * an optional argument.\n+         * @return this builder, to allow method chaining\n+         */\n+        public Builder optionalArg(final boolean isOptional)\n+        {\n+            this.optionalArg = isOptional;\n+            return this;\n+        }\n+        \n+        /**\n+         * Sets whether the Option is mandatory.\n+         *\n+         * @param required specifies whether the Option is mandatory\n+         * @return this builder, to allow method chaining\n+         */\n+        public Builder required(final boolean required)\n+        {\n+            this.required = required;\n+            return this;\n+        }\n+        \n+        /**\n+         * Sets the type of the Option.\n+         *\n+         * @param type the type of the Option\n+         * @return this builder, to allow method chaining\n+         */\n+        public Builder type(final Class<?> type)\n+        {\n+            this.type = type;\n+            return this;\n+        }\n+        \n+        /**\n+         * Sets the value separator. For example if the argument value\n+         * was a Java property, the value separator would be '='.\n+         *\n+         * @param sep The value separator.\n+         * @return this builder, to allow method chaining\n+         */\n+        public Builder valueSeparator(final char sep)\n+        {\n+            valuesep = sep;\n+            return this;\n+        }\n+        \n+        /**\n+         * Indicates if the Option has an argument or not.\n+         * \n+         * @param hasArg specifies whether the Option takes an argument or not\n+         * @return this builder, to allow method chaining\n+         */\n+        public Builder hasArg(final boolean hasArg)\n+        {\n+            // set to UNINITIALIZED when no arg is specified to be compatible with OptionBuilder\n+            numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;\n+            return this;\n+        }\n+        \n+        /**\n+         * Constructs an Option.\n+         * \n+         * @return the new Option\n+         */\n+        public Option build()\n+        {\n+            return new Option(this);\n+        }\n+    }\n }\n--- a/src/main/java/org/apache/commons/cli/OptionBuilder.java\n+++ b/src/main/java/org/apache/commons/cli/OptionBuilder.java\n  * \n  * @version $Id$\n  * @since 1.0\n+ * @deprecated since 1.3, use {@link Option.Builder} instead\n  */\n+@Deprecated\n public final class OptionBuilder\n {\n     /** long option */\n--- a/src/main/java/org/apache/commons/cli/PatternOptionBuilder.java\n+++ b/src/main/java/org/apache/commons/cli/PatternOptionBuilder.java\n     public static final Class<Date> DATE_VALUE = Date.class;\n \n     /** Class class */\n-    public static final Class CLASS_VALUE = Class.class;\n+    public static final Class<?> CLASS_VALUE = Class.class;\n \n     /// can we do this one??\n     // is meant to check that the file exists, else it errors.\n             {\n                 if (opt != ' ')\n                 {\n-                    OptionBuilder.hasArg(type != null);\n-                    OptionBuilder.isRequired(required);\n-                    OptionBuilder.withType(type);\n-\n+                    final Option option = new Option.Builder(String.valueOf(opt), null)\n+                        .hasArg(type != null)\n+                        .required(required)\n+                        .type(type)\n+                        .build();\n+                    \n                     // we have a previous one to deal with\n-                    options.addOption(OptionBuilder.create(opt));\n+                    options.addOption(option);\n                     required = false;\n                     type = null;\n                     opt = ' ';\n \n         if (opt != ' ')\n         {\n-            OptionBuilder.hasArg(type != null);\n-            OptionBuilder.isRequired(required);\n-            OptionBuilder.withType(type);\n-\n+            final Option option = new Option.Builder(String.valueOf(opt), null)\n+                .hasArg(type != null)\n+                .required(required)\n+                .type(type)\n+                .build();\n+            \n             // we have a final one to deal with\n-            options.addOption(OptionBuilder.create(opt));\n+            options.addOption(option);\n         }\n \n         return options;\n--- a/src/test/java/org/apache/commons/cli/OptionTest.java\n+++ b/src/test/java/org/apache/commons/cli/OptionTest.java\n         assertEquals(\"foo\", option.getValue(0));\n         assertEquals(\"foo\", option.getValue(\"default\"));\n     }\n+    \n+    @Test\n+    public void testBuilderMethods()\n+    {\n+        char defaultSeparator = (char) 0;\n+\n+        checkOption(new Option.Builder(\"a\",  \"desc\").build(),\n+            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n+        checkOption(new Option.Builder(\"a\",  \"desc\").build(),\n+            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n+        checkOption(new Option.Builder(\"a\",  \"desc\").longOpt(\"aaa\").build(),\n+            \"a\", \"desc\", \"aaa\", Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n+        checkOption(new Option.Builder(\"a\",  \"desc\").hasArg(true).build(),\n+            \"a\", \"desc\", null, 1, null, false, false, defaultSeparator, String.class);\n+        checkOption(new Option.Builder(\"a\",  \"desc\").hasArg(false).build(),\n+            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n+        checkOption(new Option.Builder(\"a\",  \"desc\").hasArg(true).build(),\n+            \"a\", \"desc\", null, 1, null, false, false, defaultSeparator, String.class);\n+        checkOption(new Option.Builder(\"a\",  \"desc\").numberOfArgs(3).build(),\n+            \"a\", \"desc\", null, 3, null, false, false, defaultSeparator, String.class);\n+        checkOption(new Option.Builder(\"a\",  \"desc\").required(true).build(),\n+            \"a\", \"desc\", null, Option.UNINITIALIZED, null, true, false, defaultSeparator, String.class);\n+        checkOption(new Option.Builder(\"a\",  \"desc\").required(false).build(),\n+            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n+\n+        checkOption(new Option.Builder(\"a\",  \"desc\").argName(\"arg1\").build(),\n+            \"a\", \"desc\", null, Option.UNINITIALIZED, \"arg1\", false, false, defaultSeparator, String.class);\n+        checkOption(new Option.Builder(\"a\",  \"desc\").optionalArg(false).build(),\n+            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n+        checkOption(new Option.Builder(\"a\",  \"desc\").optionalArg(true).build(),\n+            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, true, defaultSeparator, String.class);\n+        checkOption(new Option.Builder(\"a\",  \"desc\").valueSeparator(':').build(),\n+            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, ':', String.class);\n+        checkOption(new Option.Builder(\"a\",  \"desc\").type(Integer.class).build(),\n+            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class);\n+    }\n+\n+    private static void checkOption(Option option, String opt, String description, String longOpt, int numArgs,\n+                                    String argName,  boolean required, boolean optionalArg,\n+                                    char valueSeparator, Class<?> cls)\n+    {\n+        assertEquals(opt, option.getOpt());\n+        assertEquals(description, option.getDescription());\n+        assertEquals(longOpt, option.getLongOpt());\n+        assertEquals(numArgs, option.getArgs());\n+        assertEquals(argName, option.getArgName());\n+        assertEquals(required, option.isRequired());\n+\n+        assertEquals(optionalArg, option.hasOptionalArg());\n+        assertEquals(valueSeparator, option.getValueSeparator());\n+        assertEquals(cls,  option.getType());\n+    }\n+    \n }", "timestamp": 1360577645, "metainfo": ""}