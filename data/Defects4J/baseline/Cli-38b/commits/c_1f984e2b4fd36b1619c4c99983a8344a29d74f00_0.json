{"sha": "1f984e2b4fd36b1619c4c99983a8344a29d74f00", "log": "GroupImpl.canProcess() was returning true when the argument looked like an option but wasn't accepted by the children. Option.canProcess() now takes a WriteableCommandLine to provide the looksLikeOption() method. Bug discovered by Steve Alberty   ", "commit": "\n--- a/src/java/org/apache/commons/cli2/Option.java\n+++ b/src/java/org/apache/commons/cli2/Option.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n      *            The argument to be tested\n      * @return true if the argument can be processed by this Option\n      */\n-    boolean canProcess(final String argument);\n+    boolean canProcess(final WriteableCommandLine commandLine, final String argument);\n \n     /**\n      * Indicates whether this Option will be able to process the particular\n      *            the ListIterator over String arguments\n      * @return true if the argument can be processed by this Option\n      */\n-    boolean canProcess(final ListIterator arguments);\n+    boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments);\n \n     /**\n      * Identifies the argument prefixes that should trigger this option. This\n--- a/src/java/org/apache/commons/cli2/commandline/Parser.java\n+++ b/src/java/org/apache/commons/cli2/commandline/Parser.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n         group.defaults(commandLine);\n \n         final ListIterator iterator = argumentList.listIterator();\n-        while (group.canProcess(iterator)) {\n+        while (group.canProcess(commandLine, iterator)) {\n             group.process(commandLine, iterator);\n         }\n \n--- a/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n         }\n     }\n \n-    public boolean canProcess(String arg) {\n+    public boolean canProcess(final WriteableCommandLine commandLine, final String arg) {\n         return true;\n     }\n \n--- a/src/java/org/apache/commons/cli2/option/Command.java\n+++ b/src/java/org/apache/commons/cli2/option/Command.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n         final String arg = (String)arguments.next();\n \n         // if we can process it\n-        if (canProcess(arg)) {\n+        if (canProcess(commandLine, arg)) {\n \n             // then note the option\n             commandLine.addOption(this);\n--- a/src/java/org/apache/commons/cli2/option/DefaultOption.java\n+++ b/src/java/org/apache/commons/cli2/option/DefaultOption.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n         checkPrefixes(newPrefixes);\n     }\n \n-    public boolean canProcess(final String argument) {\n+    public boolean canProcess(final WriteableCommandLine commandLine, final String argument) {\n         return argument != null\n-            && (super.canProcess(argument)\n+            && (super.canProcess(commandLine, argument)\n                 || (argument.length() >= burstLength\n                     && burstAliases.contains(argument.substring(0, burstLength))));\n     }\n--- a/src/java/org/apache/commons/cli2/option/GroupImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/GroupImpl.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n         this.prefixes = Collections.unmodifiableSet(newPrefixes);\n     }\n \n-    public boolean canProcess(String arg) {\n+    public boolean canProcess(final WriteableCommandLine commandLine, String arg) {\n         if (arg == null) {\n             return false;\n         }\n             iter.hasNext();) {\n             \n             final Option option = (Option) iter.next();\n-            if (option.canProcess(arg)) {\n+            if (option.canProcess(commandLine, arg)) {\n                 return true;\n             }\n+        }\n+        \n+        if(commandLine.looksLikeOption(arg)) {\n+            return false;\n         }\n         \n         // anonymous argument(s) means we can process it\n                     for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) {\n                         final Option option = (Option) i.next();\n                         \n-                        if (option.canProcess(arg)) {\n+                        if (option.canProcess(commandLine, arg)) {\n                         \tfoundMemberOption = true;\n                             arguments.previous();\n                             option.process(commandLine, arguments);\n                     // canProcess will always return true?\n                     for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n                         final Argument argument = (Argument)i.next();\n-                        if (argument.canProcess(arguments)) {\n+                        if (argument.canProcess(commandLine, arguments)) {\n                             argument.process(commandLine, arguments);\n                         }\n                     }\n--- a/src/java/org/apache/commons/cli2/option/OptionImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/OptionImpl.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n         this.required = required;\n     }\n \n-    public boolean canProcess(final ListIterator arguments) {\n+    public boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments) {\n         if (arguments.hasNext()) {\n             final String argument = (String)arguments.next();\n             arguments.previous();\n-            return canProcess(argument);\n+            return canProcess(commandLine, argument);\n         }\n         else {\n             return false;\n--- a/src/java/org/apache/commons/cli2/option/ParentImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/ParentImpl.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n             argument.processValues(commandLine, arguments, this);\n         }\n \n-        if (children != null && children.canProcess(arguments)) {\n+        if (children != null && children.canProcess(commandLine, arguments)) {\n             children.process(commandLine, arguments);\n         }\n     }\n      * \n      * @see org.apache.commons.cli2.Option#canProcess(java.lang.String)\n      */\n-    public boolean canProcess(final String arg) {\n+    public boolean canProcess(final WriteableCommandLine commandLine, final String arg) {\n \n         final Set triggers = getTriggers();\n         \n--- a/src/java/org/apache/commons/cli2/option/PropertyOption.java\n+++ b/src/java/org/apache/commons/cli2/option/PropertyOption.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n      */\n     public static final PropertyOption INSTANCE = new PropertyOption();\n \n-    public boolean canProcess(final String argument) {\n+    public boolean canProcess(final WriteableCommandLine commandLine, final String argument) {\n         return argument != null\n             && argument.startsWith(optionString)\n             && argument.length() > optionString.length();\n \n         final String arg = (String)arguments.next();\n \n-        if (!canProcess(arg)) {\n+        if (!canProcess(commandLine, arg)) {\n             throw new OptionException(this, \"cli.error.unexpected\", arg);\n         }\n \n--- a/src/java/org/apache/commons/cli2/option/SourceDestArgument.java\n+++ b/src/java/org/apache/commons/cli2/option/SourceDestArgument.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n         dest.validate(commandLine, dest);\n     }\n \n-    public boolean canProcess(final String arg) {\n-        return source.canProcess(arg) || dest.canProcess(arg);\n+    public boolean canProcess(final WriteableCommandLine commandLine, final String arg) {\n+        return source.canProcess(commandLine, arg) || dest.canProcess(commandLine, arg);\n     }\n }\n--- a/src/java/org/apache/commons/cli2/option/Switch.java\n+++ b/src/java/org/apache/commons/cli2/option/Switch.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n \n         final String arg = (String)arguments.next();\n \n-        if (canProcess(arg)) {\n+        if (canProcess(commandLine, arg)) {\n             if (arg.startsWith(enabledPrefix)) {\n                 commandLine.addSwitch(this, true);\n                 arguments.set(enabledPrefix + preferredName);\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java\n+/**\n+ * Copyright 2005 The Apache Software Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.cli2.bug;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.cli2.Group;\n+import org.apache.commons.cli2.OptionException;\n+import org.apache.commons.cli2.builder.ArgumentBuilder;\n+import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n+import org.apache.commons.cli2.builder.GroupBuilder;\n+import org.apache.commons.cli2.commandline.Parser;\n+\n+/**\n+ * The first is a loop in Parser.parse() if I set a non-declared option. This \n+ * code goes into a loop in Parser.java method parse this while loop runs \n+ * endless\n+ * \n+ * @author Steve Alberty\n+ */\n+public class BugLoopingOptionLookAlikeTest extends TestCase {\n+\n+    public void testLoopingOptionLookAlike() {\n+        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n+        final ArgumentBuilder abuilder = new ArgumentBuilder();\n+        final GroupBuilder gbuilder = new GroupBuilder();\n+        final Group options = gbuilder\n+            .withName(\"ant\")\n+            .withOption(obuilder.withShortName(\"help\").withDescription(\"print this message\").create())\n+            .withOption(obuilder.withShortName(\"projecthelp\").withDescription(\"print project help information\").create())\n+            .withOption(abuilder.withName(\"target\").create())\n+            .create();\n+        \n+        final Parser parser = new Parser();\n+        parser.setGroup(options);\n+        try {\n+            parser.parse(new String[] { \"-abcdef\",\n+                    \"testfile.txt \", });\n+            fail(\"OptionException\");\n+        } catch (OptionException e) {\n+            assertEquals(\"Unexpected -abcdef while processing ant\",e.getMessage());\n+        }\n+    }\n+}\n--- a/src/test/org/apache/commons/cli2/option/ArgumentTest.java\n+++ b/src/test/org/apache/commons/cli2/option/ArgumentTest.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n import org.apache.commons.cli2.Option;\n import org.apache.commons.cli2.OptionException;\n import org.apache.commons.cli2.WriteableCommandLine;\n+import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;\n import org.apache.commons.cli2.resource.ResourceHelper;\n import org.apache.commons.cli2.validation.DateValidator;\n import org.apache.commons.cli2.validation.DateValidatorTest;\n      */\n     public void testCanProcess() {\n         final Argument option = buildTargetsArgument();\n-        assertTrue(option.canProcess(\"any value\"));\n+        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), \"any value\"));\n     }\n \n     /*\n     public void testCanProcess_ConsumeRemaining() {\n         final Option option = buildUsernameArgument();\n \n-        assertTrue(option.canProcess(\"--\"));\n+        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), \"--\"));\n     }\n \n     public void testProcess_ConsumeRemaining() throws OptionException {\n--- a/src/test/org/apache/commons/cli2/option/CommandTest.java\n+++ b/src/test/org/apache/commons/cli2/option/CommandTest.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n import org.apache.commons.cli2.OptionException;\n import org.apache.commons.cli2.Parent;\n import org.apache.commons.cli2.WriteableCommandLine;\n+import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;\n \n /**\n  * @author Rob Oxspring\n      * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()\n      */\n     public void testCanProcess() {\n-        assertTrue(buildStartCommand().canProcess(\"start\"));\n+        final Command option = buildStartCommand();\n+        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), \"start\"));\n     }\n \n     public void testCanProcess_BadMatch() {\n-        assertFalse(buildStartCommand().canProcess(\"stop\"));\n+        final Command option = buildStartCommand();\n+        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), \"stop\"));\n     }\n \n     public void testCanProcess_Alias() {\n-        assertTrue(buildStartCommand().canProcess(\"go\"));\n+        final Command option = buildStartCommand();\n+        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), \"go\"));\n     }\n \n     /*\n--- a/src/test/org/apache/commons/cli2/option/DefaultOptionTest.java\n+++ b/src/test/org/apache/commons/cli2/option/DefaultOptionTest.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n import org.apache.commons.cli2.OptionException;\n import org.apache.commons.cli2.Parent;\n import org.apache.commons.cli2.WriteableCommandLine;\n+import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;\n \n /**\n  * @author roberto\n      */\n     public void testCanProcess() {\n         final DefaultOption option = buildHelpOption();\n-        assertTrue(option.canProcess(\"-?\"));\n+        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), \"-?\"));\n     }\n \n     public void testCanProcess_BadMatch() {\n         final DefaultOption option = buildHelpOption();\n-        assertFalse(option.canProcess(\"-H\"));\n+        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), \"-H\"));\n     }\n \n     /*\n--- a/src/test/org/apache/commons/cli2/option/GroupTest.java\n+++ b/src/test/org/apache/commons/cli2/option/GroupTest.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n import org.apache.commons.cli2.WriteableCommandLine;\n import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n import org.apache.commons.cli2.builder.GroupBuilder;\n+import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;\n \n /**\n  * @author Rob Oxspring\n      */\n     public void testCanProcess() {\n         final Group option = buildApacheCommandGroup();\n-        assertTrue(option.canProcess(\"start\"));\n+        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), \"start\"));\n     }\n \n     public void testCanProcess_BadMatch() {\n         final Group option = buildApacheCommandGroup();\n-        assertFalse(option.canProcess(\"begin\"));\n+        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), \"begin\"));\n     }\n \n     /*\n--- a/src/test/org/apache/commons/cli2/option/ParentTest.java\n+++ b/src/test/org/apache/commons/cli2/option/ParentTest.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n import org.apache.commons.cli2.builder.CommandBuilder;\n import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n import org.apache.commons.cli2.builder.GroupBuilder;\n+import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;\n \n /**\n  * @author Rob Oxspring\n \t */\n \tpublic void testCanProcess() {\n \t\tfinal Parent option = buildKParent();\n-\t\tassertTrue(option.canProcess(\"-k\"));\n+\t\tassertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), \"-k\"));\n \t}\n \n \tpublic void testCanProcess_BadMatch() {\n \t\tfinal Parent option = buildKParent();\n-\t\tassertFalse(option.canProcess(\"-K\"));\n+\t\tassertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), \"-K\"));\n \t}\n \n \tpublic void testCanProcess_ContractedArgument() {\n \t\tfinal Parent option = buildLibParent();\n-\t\tassertTrue(option.canProcess(\"--lib=/usr/lib\"));\n+\t\tassertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), \"--lib=/usr/lib\"));\n \t}\n \n \t/* (non-Javadoc)\n--- a/src/test/org/apache/commons/cli2/option/PropertyOptionTest.java\n+++ b/src/test/org/apache/commons/cli2/option/PropertyOptionTest.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n import org.apache.commons.cli2.Option;\n import org.apache.commons.cli2.OptionException;\n import org.apache.commons.cli2.WriteableCommandLine;\n+import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;\n \n /**\n  * @author Rob Oxspring\n      */\n     public void testCanProcess() {\n         final Option option = new PropertyOption();\n-        assertTrue(option.canProcess(\"-Dmyprop=myval\"));\n+        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), \"-Dmyprop=myval\"));\n     }\n \n     public void testCanProcess_Null() {\n         final Option option = new PropertyOption();\n-        assertFalse(option.canProcess((String) null));\n+        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), (String) null));\n     }\n \n     public void testCanProcess_TooShort() {\n         final Option option = new PropertyOption();\n-        assertFalse(option.canProcess(\"-D\"));\n+        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), \"-D\"));\n     }\n \n     public void testCanProcess_BadMatch() {\n         final Option option = new PropertyOption();\n-        assertFalse(option.canProcess(\"-dump\"));\n+        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null),\"-dump\"));\n     }\n \n     /*\n--- a/src/test/org/apache/commons/cli2/option/SwitchTest.java\n+++ b/src/test/org/apache/commons/cli2/option/SwitchTest.java\n /**\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n import org.apache.commons.cli2.OptionException;\n import org.apache.commons.cli2.Parent;\n import org.apache.commons.cli2.WriteableCommandLine;\n+import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;\n \n /**\n  * @author Rob Oxspring\n      */\n     public void testCanProcess() {\n         final Switch option = buildDisplaySwitch();\n-        assertTrue(option.canProcess(\"+d\"));\n+        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null),\"+d\"));\n     }\n \n     public void testCanProcess_BadMatch() {\n         final Switch option = buildDisplaySwitch();\n-        assertFalse(option.canProcess(\"-dont\"));\n+        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null),\"-dont\"));\n     }\n \n     /*", "timestamp": 1117833313, "metainfo": ""}