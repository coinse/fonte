{"sha": "faa6455a9a0bccf29d049f0b0958eb9b2e804fc3", "log": "[CLI-224] Add static builder methods to Option, check if at least one of opt/longOpt has been specified, update javadoc.  ", "commit": "\n--- a/src/main/java/org/apache/commons/cli/Option.java\n+++ b/src/main/java/org/apache/commons/cli/Option.java\n  * this option, and a self-documenting description of the option.\n  * <p>\n  * An Option is not created independently, but is created through\n- * an instance of {@link Options}.\n+ * an instance of {@link Options}. An Option is required to have\n+ * at least a short or a long-name.\n  * <p>\n  * <b>Note:</b> once an {@link Option} has been added to an instance\n  * of {@link Options}, it's required flag may not be changed anymore.\n     }\n     \n     /**\n+     * Returns a {@link Builder} to create an {@link Option} using descriptive\n+     * methods.  \n+     * \n+     * @return a new {@link Builder} instance\n+     * @since 1.3\n+     */\n+    public static Builder builder()\n+    {\n+        return builder(null);\n+    }\n+    \n+    /**\n+     * Returns a {@link Builder} to create an {@link Option} using descriptive\n+     * methods.  \n+     *\n+     * @param opt short representation of the option\n+     * @return a new {@link Builder} instance\n+     * @throws IllegalArgumentException if there are any non valid Option characters in {@code opt}\n+     * @since 1.3\n+     */\n+    public static Builder builder(final String opt)\n+    {\n+        return new Builder(opt);\n+    }\n+    \n+    /**\n      * A nested builder class to create <code>Option</code> instances\n      * using descriptive methods.\n      * <p>\n      * Example usage:\n      * <pre>\n-     * Option option = new Option.Builder(\"a\", \"Long description\")\n+     * Option option = Option.builder(\"a\")\n      *     .required(true)\n      *     .longOpt(\"arg-name\")\n      *     .build();\n      * \n      * @since 1.3\n      */\n-    public static class Builder \n+    public static final class Builder \n     {\n         /** the name of the option */\n         private final String opt;\n \n         /** description of the option */\n-        private final String description;\n+        private String description;\n \n         /** the long representation of the option */\n         private String longOpt;\n \n         /** the character that is the value separator */\n         private char valuesep;\n-\n-        /**\n-         * Constructs a new <code>Builder</code>.\n-         */\n-        public Builder()\n-        {\n-            this(null, null);\n-        }\n \n         /**\n          * Constructs a new <code>Builder</code> with the minimum\n          * required parameters for an <code>Option</code> instance.\n          * \n          * @param opt short representation of the option\n-         * @param description describes the function of the option\n-         * @throws IllegalArgumentException if there are any non valid\n-         * Option characters in <code>opt</code>.\n+         * @throws IllegalArgumentException if there are any non valid Option characters in {@code opt}\n          */\n-        public Builder(final String opt, final String description) \n-                throws IllegalArgumentException\n+        private Builder(final String opt) throws IllegalArgumentException\n         {\n             OptionValidator.validateOption(opt);\n             this.opt = opt;\n-            this.description = description;\n         }\n         \n         /**\n             this.argName = argName;\n             return this;\n         }\n-        \n+\n+        /**\n+         * Sets the description for this option.\n+         *\n+         * @param description the description of the option.\n+         * @return this builder, to allow method chaining\n+         */\n+        public Builder desc(final String description)\n+        {\n+            this.description = description;\n+            return this;\n+        }\n+\n         /**\n          * Sets the long name of the Option.\n          *\n         }\n         \n         /**\n-         * Constructs an Option.\n+         * Constructs an Option with the values declared by this {@link Builder}.\n          * \n-         * @return the new Option\n+         * @return the new {@link Option}\n+         * @throws IllegalArgumentException if neither {@code opt} or {@code longOpt} has been set\n          */\n         public Option build()\n         {\n+            if (opt == null && longOpt == null)\n+            {\n+                throw new IllegalArgumentException(\"Either opt or longOpt must be specified\");\n+            }\n             return new Option(this);\n         }\n     }\n--- a/src/main/java/org/apache/commons/cli/OptionBuilder.java\n+++ b/src/main/java/org/apache/commons/cli/OptionBuilder.java\n  * \n  * @version $Id$\n  * @since 1.0\n- * @deprecated since 1.3, use {@link Option.Builder} instead\n+ * @deprecated since 1.3, use {@link Option.builder(String)} instead\n  */\n @Deprecated\n public final class OptionBuilder\n--- a/src/main/java/org/apache/commons/cli/PatternOptionBuilder.java\n+++ b/src/main/java/org/apache/commons/cli/PatternOptionBuilder.java\n             {\n                 if (opt != ' ')\n                 {\n-                    final Option option = new Option.Builder(String.valueOf(opt), null)\n+                    final Option option = Option.builder(String.valueOf(opt))\n                         .hasArg(type != null)\n                         .required(required)\n                         .type(type)\n \n         if (opt != ' ')\n         {\n-            final Option option = new Option.Builder(String.valueOf(opt), null)\n+            final Option option = Option.builder(String.valueOf(opt))\n                 .hasArg(type != null)\n                 .required(required)\n                 .type(type)\n--- a/src/test/java/org/apache/commons/cli/OptionTest.java\n+++ b/src/test/java/org/apache/commons/cli/OptionTest.java\n     {\n         char defaultSeparator = (char) 0;\n \n-        checkOption(new Option.Builder(\"a\",  \"desc\").build(),\n-            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n-        checkOption(new Option.Builder(\"a\",  \"desc\").build(),\n-            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n-        checkOption(new Option.Builder(\"a\",  \"desc\").longOpt(\"aaa\").build(),\n+        checkOption(Option.builder(\"a\").desc(\"desc\").build(),\n+            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n+        checkOption(Option.builder(\"a\").desc(\"desc\").build(),\n+            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n+        checkOption(Option.builder(\"a\").desc(\"desc\").longOpt(\"aaa\").build(),\n             \"a\", \"desc\", \"aaa\", Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n-        checkOption(new Option.Builder(\"a\",  \"desc\").hasArg(true).build(),\n+        checkOption(Option.builder(\"a\").desc(\"desc\").hasArg(true).build(),\n             \"a\", \"desc\", null, 1, null, false, false, defaultSeparator, String.class);\n-        checkOption(new Option.Builder(\"a\",  \"desc\").hasArg(false).build(),\n-            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n-        checkOption(new Option.Builder(\"a\",  \"desc\").hasArg(true).build(),\n+        checkOption(Option.builder(\"a\").desc(\"desc\").hasArg(false).build(),\n+            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n+        checkOption(Option.builder(\"a\").desc(\"desc\").hasArg(true).build(),\n             \"a\", \"desc\", null, 1, null, false, false, defaultSeparator, String.class);\n-        checkOption(new Option.Builder(\"a\",  \"desc\").numberOfArgs(3).build(),\n+        checkOption(Option.builder(\"a\").desc(\"desc\").numberOfArgs(3).build(),\n             \"a\", \"desc\", null, 3, null, false, false, defaultSeparator, String.class);\n-        checkOption(new Option.Builder(\"a\",  \"desc\").required(true).build(),\n+        checkOption(Option.builder(\"a\").desc(\"desc\").required(true).build(),\n             \"a\", \"desc\", null, Option.UNINITIALIZED, null, true, false, defaultSeparator, String.class);\n-        checkOption(new Option.Builder(\"a\",  \"desc\").required(false).build(),\n-            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n-\n-        checkOption(new Option.Builder(\"a\",  \"desc\").argName(\"arg1\").build(),\n+        checkOption(Option.builder(\"a\").desc(\"desc\").required(false).build(),\n+            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n+\n+        checkOption(Option.builder(\"a\").desc(\"desc\").argName(\"arg1\").build(),\n             \"a\", \"desc\", null, Option.UNINITIALIZED, \"arg1\", false, false, defaultSeparator, String.class);\n-        checkOption(new Option.Builder(\"a\",  \"desc\").optionalArg(false).build(),\n-            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n-        checkOption(new Option.Builder(\"a\",  \"desc\").optionalArg(true).build(),\n+        checkOption(Option.builder(\"a\").desc(\"desc\").optionalArg(false).build(),\n+            \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\n+        checkOption(Option.builder(\"a\").desc(\"desc\").optionalArg(true).build(),\n             \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, true, defaultSeparator, String.class);\n-        checkOption(new Option.Builder(\"a\",  \"desc\").valueSeparator(':').build(),\n+        checkOption(Option.builder(\"a\").desc(\"desc\").valueSeparator(':').build(),\n             \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, ':', String.class);\n-        checkOption(new Option.Builder(\"a\",  \"desc\").type(Integer.class).build(),\n+        checkOption(Option.builder(\"a\").desc(\"desc\").type(Integer.class).build(),\n             \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class);\n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void testBuilderInsufficientParams1()\n+    {\n+        Option.builder().desc(\"desc\").build();\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testBuilderInsufficientParams2()\n+    {\n+        Option.builder(null).desc(\"desc\").build();\n     }\n \n     private static void checkOption(Option option, String opt, String description, String longOpt, int numArgs,", "timestamp": 1361099466, "metainfo": ""}