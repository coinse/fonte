{"sha": "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0", "log": "Switched to the Maven 2 default directory layout (part 1)  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/ApplicationTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * This is a collection of tests that test real world applications command lines.\n+ *\n+ * <p>\n+ * The following applications are tested:\n+ * <ul>\n+ *   <li>ls</li>\n+ *   <li>Ant</li>\n+ *   <li>Groovy</li>\n+ *   <li>man</li>\n+ * </ul>\n+ * </p>\n+ *\n+ * @author John Keyes (john at integralsource.com)\n+ */\n+public class ApplicationTest extends TestCase {\n+\n+    public void testLs() throws Exception {\n+        // create the command line parser\n+        CommandLineParser parser = new PosixParser();\n+        Options options = new Options();\n+        options.addOption( \"a\", \"all\", false, \"do not hide entries starting with .\" );\n+        options.addOption( \"A\", \"almost-all\", false, \"do not list implied . and ..\" );\n+        options.addOption( \"b\", \"escape\", false, \"print octal escapes for nongraphic characters\" );\n+        options.addOption( OptionBuilder.withLongOpt( \"block-size\" )\n+                                        .withDescription( \"use SIZE-byte blocks\" )\n+                                        .hasArg()\n+                                        .withArgName(\"SIZE\")\n+                                        .create() );\n+        options.addOption( \"B\", \"ignore-backups\", false, \"do not list implied entried ending with ~\");\n+        options.addOption( \"c\", false, \"with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime\" );\n+        options.addOption( \"C\", false, \"list entries by columns\" );\n+\n+        String[] args = new String[]{ \"--block-size=10\" };\n+\n+        CommandLine line = parser.parse( options, args );\n+        assertTrue( line.hasOption( \"block-size\" ) );\n+        assertEquals( line.getOptionValue( \"block-size\" ), \"10\" );\n+    }\n+\n+    /**\n+     * Ant test\n+     */\n+    public void testAnt() throws Exception {\n+        // use the GNU parser\n+        CommandLineParser parser = new GnuParser( );\n+        Options options = new Options();\n+        options.addOption( \"help\", false, \"print this message\" );\n+        options.addOption( \"projecthelp\", false, \"print project help information\" );\n+        options.addOption( \"version\", false, \"print the version information and exit\" );\n+        options.addOption( \"quiet\", false, \"be extra quiet\" );\n+        options.addOption( \"verbose\", false, \"be extra verbose\" );\n+        options.addOption( \"debug\", false, \"print debug information\" );\n+        options.addOption( \"logfile\", true, \"use given file for log\" );\n+        options.addOption( \"logger\", true, \"the class which is to perform the logging\" );\n+        options.addOption( \"listener\", true, \"add an instance of a class as a project listener\" );\n+        options.addOption( \"buildfile\", true, \"use given buildfile\" );\n+        options.addOption( OptionBuilder.withDescription( \"use value for given property\" )\n+                                        .hasArgs()\n+                                        .withValueSeparator()\n+                                        .create( 'D' ) );\n+                           //, null, true, , false, true );\n+        options.addOption( \"find\", true, \"search for buildfile towards the root of the filesystem and use it\" );\n+\n+        String[] args = new String[]{ \"-buildfile\", \"mybuild.xml\",\n+            \"-Dproperty=value\", \"-Dproperty1=value1\",\n+            \"-projecthelp\" };\n+\n+        CommandLine line = parser.parse( options, args );\n+\n+        // check multiple values\n+        String[] opts = line.getOptionValues( \"D\" );\n+        assertEquals( \"property\", opts[0] );\n+        assertEquals( \"value\", opts[1] );\n+        assertEquals( \"property1\", opts[2] );\n+        assertEquals( \"value1\", opts[3] );\n+\n+        // check single value\n+        assertEquals( line.getOptionValue( \"buildfile\"), \"mybuild.xml\" );\n+\n+        // check option\n+        assertTrue( line.hasOption( \"projecthelp\") );\n+    }\n+\n+    public void testGroovy() throws Exception {\n+        Options options = new Options();\n+\n+        options.addOption(\n+            OptionBuilder.withLongOpt(\"define\").\n+                withDescription(\"define a system property\").\n+                hasArg(true).\n+                withArgName(\"name=value\").\n+                create('D'));\n+        options.addOption(\n+            OptionBuilder.hasArg(false)\n+            .withDescription(\"usage information\")\n+            .withLongOpt(\"help\")\n+            .create('h'));\n+        options.addOption(\n+            OptionBuilder.hasArg(false)\n+            .withDescription(\"debug mode will print out full stack traces\")\n+            .withLongOpt(\"debug\")\n+            .create('d'));\n+        options.addOption(\n+            OptionBuilder.hasArg(false)\n+            .withDescription(\"display the Groovy and JVM versions\")\n+            .withLongOpt(\"version\")\n+            .create('v'));\n+        options.addOption(\n+            OptionBuilder.withArgName(\"charset\")\n+            .hasArg()\n+            .withDescription(\"specify the encoding of the files\")\n+            .withLongOpt(\"encoding\")\n+            .create('c'));\n+        options.addOption(\n+            OptionBuilder.withArgName(\"script\")\n+            .hasArg()\n+            .withDescription(\"specify a command line script\")\n+            .create('e'));\n+        options.addOption(\n+            OptionBuilder.withArgName(\"extension\")\n+            .hasOptionalArg()\n+            .withDescription(\"modify files in place; create backup if extension is given (e.g. \\'.bak\\')\")\n+            .create('i'));\n+        options.addOption(\n+            OptionBuilder.hasArg(false)\n+            .withDescription(\"process files line by line using implicit 'line' variable\")\n+            .create('n'));\n+        options.addOption(\n+            OptionBuilder.hasArg(false)\n+            .withDescription(\"process files line by line and print result (see also -n)\")\n+            .create('p'));\n+        options.addOption(\n+            OptionBuilder.withArgName(\"port\")\n+            .hasOptionalArg()\n+            .withDescription(\"listen on a port and process inbound lines\")\n+            .create('l'));\n+        options.addOption(\n+            OptionBuilder.withArgName(\"splitPattern\")\n+            .hasOptionalArg()\n+            .withDescription(\"split lines using splitPattern (default '\\\\s') using implicit 'split' variable\")\n+            .withLongOpt(\"autosplit\")\n+            .create('a'));\n+\n+        Parser parser = new PosixParser();\n+        CommandLine line = parser.parse(options, new String[] { \"-e\", \"println 'hello'\" }, true);\n+\n+        assertTrue(line.hasOption('e'));\n+        assertEquals(\"println 'hello'\", line.getOptionValue('e'));\n+    }\n+\n+    /**\n+     * author Slawek Zachcial\n+     */\n+    public void testMan()\n+    {\n+        String cmdLine =\n+                \"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] \" +\n+                        \"[-msystem] [-pstring] [-Llocale] [-eextension] [section] page ...\";\n+        Options options = new Options().\n+                addOption(\"a\", \"all\", false, \"find all matching manual pages.\").\n+                addOption(\"d\", \"debug\", false, \"emit debugging messages.\").\n+                addOption(\"e\", \"extension\", false, \"limit search to extension type 'extension'.\").\n+                addOption(\"f\", \"whatis\", false, \"equivalent to whatis.\").\n+                addOption(\"k\", \"apropos\", false, \"equivalent to apropos.\").\n+                addOption(\"w\", \"location\", false, \"print physical location of man page(s).\").\n+                addOption(\"l\", \"local-file\", false, \"interpret 'page' argument(s) as local filename(s)\").\n+                addOption(\"u\", \"update\", false, \"force a cache consistency check.\").\n+                //FIXME - should generate -r,--prompt string\n+                addOption(\"r\", \"prompt\", true, \"provide 'less' pager with prompt.\").\n+                addOption(\"c\", \"catman\", false, \"used by catman to reformat out of date cat pages.\").\n+                addOption(\"7\", \"ascii\", false, \"display ASCII translation or certain latin1 chars.\").\n+                addOption(\"t\", \"troff\", false, \"use troff format pages.\").\n+                //FIXME - should generate -T,--troff-device device\n+                addOption(\"T\", \"troff-device\", true, \"use groff with selected device.\").\n+                addOption(\"Z\", \"ditroff\", false, \"use groff with selected device.\").\n+                addOption(\"D\", \"default\", false, \"reset all options to their default values.\").\n+                //FIXME - should generate -M,--manpath path\n+                addOption(\"M\", \"manpath\", true, \"set search path for manual pages to 'path'.\").\n+                //FIXME - should generate -P,--pager pager\n+                addOption(\"P\", \"pager\", true, \"use program 'pager' to display output.\").\n+                //FIXME - should generate -S,--sections list\n+                addOption(\"S\", \"sections\", true, \"use colon separated section list.\").\n+                //FIXME - should generate -m,--systems system\n+                addOption(\"m\", \"systems\", true, \"search for man pages from other unix system(s).\").\n+                //FIXME - should generate -L,--locale locale\n+                addOption(\"L\", \"locale\", true, \"define the locale for this particular man search.\").\n+                //FIXME - should generate -p,--preprocessor string\n+                addOption(\"p\", \"preprocessor\", true, \"string indicates which preprocessor to run.\\n\" +\n+                         \" e - [n]eqn  p - pic     t - tbl\\n\" +\n+                         \" g - grap    r - refer   v - vgrind\").\n+                addOption(\"V\", \"version\", false, \"show version.\").\n+                addOption(\"h\", \"help\", false, \"show this usage message.\");\n+\n+        HelpFormatter hf = new HelpFormatter();\n+        //hf.printHelp(cmdLine, opts);\n+        hf.printHelp(60, cmdLine, null, options, null);\n+    }\n+\n+\n+    /**\n+     * Real world test with long and short options.\n+     */\n+    public void testNLT() throws Exception {\n+        Option help = new Option(\"h\", \"help\", false, \"print this message\");\n+        Option version = new Option(\"v\", \"version\", false, \"print version information\");\n+        Option newRun = new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\n+        Option trackerRun = new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\n+\n+        Option timeLimit = OptionBuilder.withLongOpt(\"limit\").hasArg()\n+                                        .withValueSeparator()\n+                                        .withDescription(\"Set time limit for execution, in minutes\")\n+                                        .create(\"l\");\n+\n+        Option age = OptionBuilder.withLongOpt(\"age\").hasArg()\n+                                  .withValueSeparator()\n+                                  .withDescription(\"Age (in days) of cache item before being recomputed\")\n+                                  .create(\"a\");\n+\n+        Option server = OptionBuilder.withLongOpt(\"server\").hasArg()\n+                                     .withValueSeparator()\n+                                     .withDescription(\"The NLT server address\")\n+                                     .create(\"s\");\n+\n+        Option numResults = OptionBuilder.withLongOpt(\"results\").hasArg()\n+                                         .withValueSeparator()\n+                                         .withDescription(\"Number of results per item\")\n+                                         .create(\"r\");\n+\n+        Option configFile = OptionBuilder.withLongOpt(\"file\").hasArg()\n+                                         .withValueSeparator()\n+                                         .withDescription(\"Use the specified configuration file\")\n+                                         .create();\n+\n+        Options options = new Options();\n+        options.addOption(help);\n+        options.addOption(version);\n+        options.addOption(newRun);\n+        options.addOption(trackerRun);\n+        options.addOption(timeLimit);\n+        options.addOption(age);\n+        options.addOption(server);\n+        options.addOption(numResults);\n+        options.addOption(configFile);\n+\n+        // create the command line parser\n+        CommandLineParser parser = new PosixParser();\n+\n+        String[] args = new String[] {\n+                \"-v\",\n+                \"-l\",\n+                \"10\",\n+                \"-age\",\n+                \"5\",\n+                \"-file\",\n+                \"filename\"\n+            };\n+\n+        CommandLine line = parser.parse(options, args);\n+        assertTrue(line.hasOption(\"v\"));\n+        assertEquals(line.getOptionValue(\"l\"), \"10\");\n+        assertEquals(line.getOptionValue(\"limit\"), \"10\");\n+        assertEquals(line.getOptionValue(\"a\"), \"5\");\n+        assertEquals(line.getOptionValue(\"age\"), \"5\");\n+        assertEquals(line.getOptionValue(\"file\"), \"filename\");\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import junit.framework.TestCase;\n+\n+public class ArgumentIsOptionTest extends TestCase\n+{\n+    private Options options = null;\n+    private CommandLineParser parser = null;\n+\n+    public void setUp()\n+    {\n+        options = new Options().addOption(\"p\", false, \"Option p\").addOption(\"attr\", true, \"Option accepts argument\");\n+\n+        parser = new PosixParser();\n+    }\n+\n+    public void testOptionAndOptionWithArgument() throws Exception\n+    {\n+        String[] args = new String[]{\n+                \"-p\",\n+                \"-attr\",\n+                \"p\"\n+        };\n+\n+        CommandLine cl = parser.parse(options, args);\n+        assertTrue(\"Confirm -p is set\", cl.hasOption(\"p\"));\n+        assertTrue(\"Confirm -attr is set\", cl.hasOption(\"attr\"));\n+        assertTrue(\"Confirm arg of -attr\", cl.getOptionValue(\"attr\").equals(\"p\"));\n+        assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n+    }\n+\n+    public void testOptionWithArgument() throws Exception\n+    {\n+        String[] args = new String[]{\n+                \"-attr\",\n+                \"p\"\n+        };\n+\n+        CommandLine cl = parser.parse(options, args);\n+        assertFalse(\"Confirm -p is set\", cl.hasOption(\"p\"));\n+        assertTrue(\"Confirm -attr is set\", cl.hasOption(\"attr\"));\n+        assertTrue(\"Confirm arg of -attr\",\n+                cl.getOptionValue(\"attr\").equals(\"p\"));\n+        assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n+    }\n+\n+    public void testOption() throws Exception\n+    {\n+        String[] args = new String[]{\n+                \"-p\"\n+        };\n+\n+        CommandLine cl = parser.parse(options, args);\n+        assertTrue(\"Confirm -p is set\", cl.hasOption(\"p\"));\n+        assertFalse(\"Confirm -attr is not set\", cl.hasOption(\"attr\"));\n+        assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/BasicParserTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+/**\n+ * @author Emmanuel Bourg\n+ * @version $Revision$, $Date$\n+ */\n+public class BasicParserTest extends ParserTestCase\n+{\n+    public void setUp()\n+    {\n+        super.setUp();\n+        parser = new BasicParser();\n+    }\n+\n+    public void testDoubleDash2() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testLongWithoutEqualSingleDash() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+    \n+    public void testAmbiguousLongWithoutEqualSingleDash() throws Exception\n+    {\n+        // not supported by the basicParser\n+    }\n+    \n+    public void testNegativeOption() throws Exception\n+    {\n+        // not supported by the BasicParser (CLI-184)\n+    }\n+\n+    public void testPropertiesOption1() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testPropertiesOption2() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }    \n+\n+    public void testShortWithEqual() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testShortWithoutEqual() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testLongWithEqualDoubleDash() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testLongWithEqualSingleDash() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+    \n+    public void testUnambiguousPartialLongOption1() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testUnambiguousPartialLongOption2() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testUnambiguousPartialLongOption3() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testUnambiguousPartialLongOption4() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testAmbiguousPartialLongOption1() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testAmbiguousPartialLongOption2() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testAmbiguousPartialLongOption3() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testAmbiguousPartialLongOption4() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testPartialLongOptionSingleDash() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testBursting() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testUnrecognizedOptionWithBursting() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testMissingArgWithBursting() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testStopBursting() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testStopBursting2() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/BugsTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.Iterator;\n+import java.util.Properties;\n+\n+import junit.framework.TestCase;\n+\n+public class BugsTest extends TestCase\n+{\n+    public void test11457() throws Exception\n+    {\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\n+        String[] args = new String[]{\"--verbose\"};\n+\n+        CommandLineParser parser = new PosixParser();\n+\n+        CommandLine cmd = parser.parse(options, args);\n+        assertTrue(cmd.hasOption(\"verbose\"));\n+    }\n+\n+    public void test11458() throws Exception\n+    {\n+        Options options = new Options();\n+        options.addOption( OptionBuilder.withValueSeparator( '=' ).hasArgs().create( 'D' ) );\n+        options.addOption( OptionBuilder.withValueSeparator( ':' ).hasArgs().create( 'p' ) );\n+        String[] args = new String[] { \"-DJAVA_HOME=/opt/java\" , \"-pfile1:file2:file3\" };\n+\n+        CommandLineParser parser = new PosixParser();\n+\n+        CommandLine cmd = parser.parse(options, args);\n+\n+        String[] values = cmd.getOptionValues('D');\n+\n+        assertEquals(values[0], \"JAVA_HOME\");\n+        assertEquals(values[1], \"/opt/java\");\n+\n+        values = cmd.getOptionValues('p');\n+\n+        assertEquals(values[0], \"file1\");\n+        assertEquals(values[1], \"file2\");\n+        assertEquals(values[2], \"file3\");\n+\n+        Iterator iter = cmd.iterator();\n+        while (iter.hasNext())\n+        {\n+            Option opt = (Option) iter.next();\n+            switch (opt.getId())\n+            {\n+                case 'D':\n+                    assertEquals(opt.getValue(0), \"JAVA_HOME\");\n+                    assertEquals(opt.getValue(1), \"/opt/java\");\n+                    break;\n+                case 'p':\n+                    assertEquals(opt.getValue(0), \"file1\");\n+                    assertEquals(opt.getValue(1), \"file2\");\n+                    assertEquals(opt.getValue(2), \"file3\");\n+                    break;\n+                default:\n+                    fail(\"-D option not found\");\n+            }\n+        }\n+    }\n+\n+    public void test11680() throws Exception\n+    {\n+        Options options = new Options();\n+        options.addOption(\"f\", true, \"foobar\");\n+        options.addOption(\"m\", true, \"missing\");\n+        String[] args = new String[]{\"-f\", \"foo\"};\n+\n+        CommandLineParser parser = new PosixParser();\n+\n+        CommandLine cmd = parser.parse(options, args);\n+\n+        cmd.getOptionValue(\"f\", \"default f\");\n+        cmd.getOptionValue(\"m\", \"default m\");\n+    }\n+\n+    public void test11456() throws Exception\n+    {\n+        // Posix \n+        Options options = new Options();\n+        options.addOption( OptionBuilder.hasOptionalArg().create( 'a' ) );\n+        options.addOption( OptionBuilder.hasArg().create( 'b' ) );\n+        String[] args = new String[] { \"-a\", \"-bvalue\" };\n+\n+        CommandLineParser parser = new PosixParser();\n+\n+        CommandLine cmd = parser.parse( options, args );\n+        assertEquals( cmd.getOptionValue( 'b' ), \"value\" );\n+\n+        // GNU\n+        options = new Options();\n+        options.addOption( OptionBuilder.hasOptionalArg().create( 'a' ) );\n+        options.addOption( OptionBuilder.hasArg().create( 'b' ) );\n+        args = new String[] { \"-a\", \"-b\", \"value\" };\n+\n+        parser = new GnuParser();\n+\n+        cmd = parser.parse( options, args );\n+        assertEquals( cmd.getOptionValue( 'b' ), \"value\" );\n+    }\n+\n+    public void test12210() throws Exception\n+    {\n+        // create the main options object which will handle the first parameter\n+        Options mainOptions = new Options();\n+        // There can be 2 main exclusive options:  -exec|-rep\n+\n+        // Therefore, place them in an option group\n+\n+        String[] argv = new String[] { \"-exec\", \"-exec_opt1\", \"-exec_opt2\" };\n+        OptionGroup grp = new OptionGroup();\n+\n+        grp.addOption(new Option(\"exec\",false,\"description for this option\"));\n+\n+        grp.addOption(new Option(\"rep\",false,\"description for this option\"));\n+\n+        mainOptions.addOptionGroup(grp);\n+\n+        // for the exec option, there are 2 options...\n+        Options execOptions = new Options();\n+        execOptions.addOption(\"exec_opt1\", false, \" desc\");\n+        execOptions.addOption(\"exec_opt2\", false, \" desc\");\n+\n+        // similarly, for rep there are 2 options...\n+        Options repOptions = new Options();\n+        repOptions.addOption(\"repopto\", false, \"desc\");\n+        repOptions.addOption(\"repoptt\", false, \"desc\");\n+\n+        // create the parser\n+        GnuParser parser = new GnuParser();\n+\n+        // finally, parse the arguments:\n+\n+        // first parse the main options to see what the user has specified\n+        // We set stopAtNonOption to true so it does not touch the remaining\n+        // options\n+        CommandLine cmd = parser.parse(mainOptions,argv,true);\n+        // get the remaining options...\n+        argv = cmd.getArgs();\n+\n+        if(cmd.hasOption(\"exec\"))\n+        {\n+            cmd = parser.parse(execOptions,argv,false);\n+            // process the exec_op1 and exec_opt2...\n+            assertTrue( cmd.hasOption(\"exec_opt1\") );\n+            assertTrue( cmd.hasOption(\"exec_opt2\") );\n+        }\n+        else if(cmd.hasOption(\"rep\"))\n+        {\n+            cmd = parser.parse(repOptions,argv,false);\n+            // process the rep_op1 and rep_opt2...\n+        }\n+        else {\n+            fail( \"exec option not found\" );\n+        }\n+    }\n+\n+    public void test13425() throws Exception\n+    {\n+        Options options = new Options();\n+        Option oldpass = OptionBuilder.withLongOpt( \"old-password\" )\n+            .withDescription( \"Use this option to specify the old password\" )\n+            .hasArg()\n+            .create( 'o' );\n+        Option newpass = OptionBuilder.withLongOpt( \"new-password\" )\n+            .withDescription( \"Use this option to specify the new password\" )\n+            .hasArg()\n+            .create( 'n' );\n+\n+        String[] args = { \n+            \"-o\", \n+            \"-n\", \n+            \"newpassword\" \n+        };\n+\n+        options.addOption( oldpass );\n+        options.addOption( newpass );\n+\n+        Parser parser = new PosixParser();\n+\n+        try\n+        {\n+            parser.parse( options, args );\n+        }\n+        // catch the exception and leave the method\n+        catch( Exception exp )\n+        {\n+            assertTrue( exp != null );\n+            return;\n+        }\n+        fail( \"MissingArgumentException not caught.\" );\n+    }\n+\n+    public void test13666() throws Exception\n+    {\n+        Options options = new Options();\n+        Option dir = OptionBuilder.withDescription( \"dir\" ).hasArg().create( 'd' );\n+        options.addOption( dir );\n+        \n+        final PrintStream oldSystemOut = System.out;\n+        try\n+        {\n+            final ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+            final PrintStream print = new PrintStream(bytes);\n+            \n+            // capture this platform's eol symbol\n+            print.println();\n+            final String eol = bytes.toString();\n+            bytes.reset();\n+            \n+            System.setOut(new PrintStream(bytes));\n+\n+            HelpFormatter formatter = new HelpFormatter();\n+            formatter.printHelp( \"dir\", options );\n+\n+            assertEquals(\"usage: dir\"+eol+\" -d <arg>   dir\"+eol,bytes.toString());\n+        }\n+        finally\n+        {\n+            System.setOut(oldSystemOut);\n+        }\n+    }\n+\n+    public void test13935() throws Exception\n+    {\n+        OptionGroup directions = new OptionGroup();\n+\n+        Option left = new Option( \"l\", \"left\", false, \"go left\" );\n+        Option right = new Option( \"r\", \"right\", false, \"go right\" );\n+        Option straight = new Option( \"s\", \"straight\", false, \"go straight\" );\n+        Option forward = new Option( \"f\", \"forward\", false, \"go forward\" );\n+        forward.setRequired( true );\n+\n+        directions.addOption( left );\n+        directions.addOption( right );\n+        directions.setRequired( true );\n+\n+        Options opts = new Options();\n+        opts.addOptionGroup( directions );\n+        opts.addOption( straight );\n+\n+        CommandLineParser parser = new PosixParser();\n+        boolean exception = false;\n+\n+        String[] args = new String[] {  };\n+        try\n+        {\n+            CommandLine line = parser.parse(opts, args);\n+        }\n+        catch (ParseException exp)\n+        {\n+            exception = true;\n+        }\n+\n+        if (!exception)\n+        {\n+            fail(\"Expected exception not caught.\");\n+        }\n+\n+        exception = false;\n+\n+        args = new String[] { \"-s\" };\n+        try\n+        {\n+            CommandLine line = parser.parse(opts, args);\n+        }\n+        catch (ParseException exp)\n+        {\n+            exception = true;\n+        }\n+\n+        if (!exception)\n+        {\n+            fail(\"Expected exception not caught.\");\n+        }\n+\n+        exception = false;\n+\n+        args = new String[] { \"-s\", \"-l\" };\n+        try\n+        {\n+            parser.parse(opts, args);\n+        }\n+        catch (ParseException exp)\n+        {\n+            fail(\"Unexpected exception: \" + exp.getClass().getName() + \":\" + exp.getMessage());\n+        }\n+\n+        opts.addOption( forward );\n+        args = new String[] { \"-s\", \"-l\", \"-f\" };\n+        try\n+        {\n+            parser.parse(opts, args);\n+        }\n+        catch (ParseException exp)\n+        {\n+            fail(\"Unexpected exception: \" + exp.getClass().getName() + \":\" + exp.getMessage());\n+        }\n+    }\n+\n+    public void test14786() throws Exception\n+    {\n+        Option o = OptionBuilder.isRequired().withDescription(\"test\").create(\"test\");\n+        Options opts = new Options();\n+        opts.addOption(o);\n+        opts.addOption(o);\n+\n+        CommandLineParser parser = new GnuParser();\n+\n+        String[] args = new String[] { \"-test\" };\n+\n+        CommandLine line = parser.parse( opts, args );\n+        assertTrue( line.hasOption( \"test\" ) );\n+    }\n+\n+    public void test15046() throws Exception\n+    {\n+        CommandLineParser parser = new PosixParser();\n+        String[] CLI_ARGS = new String[] {\"-z\", \"c\"};\n+\n+        Options options = new Options();\n+        options.addOption(new Option(\"z\", \"timezone\", true, \"affected option\"));\n+\n+        parser.parse(options, CLI_ARGS);\n+        \n+        //now add conflicting option\n+        options.addOption(\"c\", \"conflict\", true, \"conflict option\");\n+        CommandLine line = parser.parse(options, CLI_ARGS);\n+        assertEquals( line.getOptionValue('z'), \"c\" );\n+        assertTrue( !line.hasOption(\"c\") );\n+    }\n+\n+    public void test15648() throws Exception\n+    {\n+        CommandLineParser parser = new PosixParser();\n+        final String[] args = new String[] { \"-m\", \"\\\"Two Words\\\"\" };\n+        Option m = OptionBuilder.hasArgs().create(\"m\");\n+        Options options = new Options();\n+        options.addOption( m );\n+        CommandLine line = parser.parse( options, args );\n+        assertEquals( \"Two Words\", line.getOptionValue( \"m\" ) );\n+    }\n+    \n+    public void test31148() throws ParseException\n+    {\n+        Option multiArgOption = new Option(\"o\",\"option with multiple args\");\n+        multiArgOption.setArgs(1);\n+        \n+        Options options = new Options();\n+        options.addOption(multiArgOption);\n+        \n+        Parser parser = new PosixParser();\n+        String[] args = new String[]{};\n+        Properties props = new Properties();\n+        props.setProperty(\"o\",\"ovalue\");\n+        CommandLine cl = parser.parse(options,args,props);\n+        \n+        assertTrue(cl.hasOption('o'));\n+        assertEquals(\"ovalue\",cl.getOptionValue('o'));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/CommandLineTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import java.util.Properties;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Emmanuel Bourg\n+ * @version $Revision$, $Date$\n+ */\n+public class CommandLineTest extends TestCase\n+{\n+    public void testGetOptionProperties() throws Exception\n+    {\n+        String[] args = new String[] { \"-Dparam1=value1\", \"-Dparam2=value2\", \"-Dparam3\", \"-Dparam4=value4\", \"-D\", \"--property\", \"foo=bar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));\n+        options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\"property\").create());\n+\n+        Parser parser = new GnuParser();\n+        CommandLine cl = parser.parse(options, args);\n+\n+        Properties props = cl.getOptionProperties(\"D\");\n+        assertNotNull(\"null properties\", props);\n+        assertEquals(\"number of properties in \" + props, 4, props.size());\n+        assertEquals(\"property 1\", \"value1\", props.getProperty(\"param1\"));\n+        assertEquals(\"property 2\", \"value2\", props.getProperty(\"param2\"));\n+        assertEquals(\"property 3\", \"true\", props.getProperty(\"param3\"));\n+        assertEquals(\"property 4\", \"value4\", props.getProperty(\"param4\"));\n+\n+        assertEquals(\"property with long format\", \"bar\", cl.getOptionProperties(\"property\").getProperty(\"foo\"));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/DefaultParserTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+/**\n+ * @author Emmanuel Bourg\n+ * @version $Revision$, $Date$\n+ */\n+public class DefaultParserTest extends ParserTestCase {\n+\n+    public void setUp() {\n+        super.setUp();\n+        parser = new DefaultParser();\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/GnuParserTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+public class GnuParserTest extends ParserTestCase\n+{\n+    public void setUp()\n+    {\n+        super.setUp();\n+        parser = new GnuParser();\n+    }\n+\n+    public void testDoubleDash2() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+    \n+    public void testLongWithoutEqualSingleDash() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testAmbiguousLongWithoutEqualSingleDash() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testNegativeOption() throws Exception\n+    {\n+        // not supported by the GnuParser (CLI-184)\n+    }\n+\n+    public void testLongWithUnexpectedArgument1() throws Exception \n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testLongWithUnexpectedArgument2() throws Exception \n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testShortWithUnexpectedArgument() throws Exception \n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testUnambiguousPartialLongOption1() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testUnambiguousPartialLongOption2() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testUnambiguousPartialLongOption3() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testUnambiguousPartialLongOption4() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testAmbiguousPartialLongOption1() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testAmbiguousPartialLongOption2() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+   public void testAmbiguousPartialLongOption3() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testAmbiguousPartialLongOption4() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testPartialLongOptionSingleDash() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testBursting() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testUnrecognizedOptionWithBursting() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testMissingArgWithBursting() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testStopBursting() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testStopBursting2() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/HelpFormatterTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.Comparator;\n+\n+import junit.framework.TestCase;\n+\n+/** \n+ * Test case for the HelpFormatter class \n+ *\n+ * @author Slawek Zachcial\n+ * @author John Keyes ( john at integralsource.com )\n+ * @author brianegge\n+ */\n+public class HelpFormatterTest extends TestCase\n+{\n+    private static final String EOL = System.getProperty(\"line.separator\");\n+\n+    public void testFindWrapPos() throws Exception\n+    {\n+        HelpFormatter hf = new HelpFormatter();\n+\n+        String text = \"This is a test.\";\n+        //text width should be max 8; the wrap position is 7\n+        assertEquals(\"wrap position\", 7, hf.findWrapPos(text, 8, 0));\n+        //starting from 8 must give -1 - the wrap pos is after end\n+        assertEquals(\"wrap position 2\", -1, hf.findWrapPos(text, 8, 8));\n+        //if there is no a good position before width to make a wrapping look for the next one\n+        text = \"aaaa aa\";\n+        assertEquals(\"wrap position 3\", 4, hf.findWrapPos(text, 3, 0));\n+    }\n+\n+    public void testPrintWrapped() throws Exception\n+    {\n+        StringBuffer sb = new StringBuffer();\n+        HelpFormatter hf = new HelpFormatter();\n+\n+        String text = \"This is a test.\";\n+\n+        String expected = \"This is a\" + hf.getNewLine() + \"test.\";\n+        hf.renderWrappedText(sb, 12, 0, text);\n+        assertEquals(\"single line text\", expected, sb.toString());\n+\n+        sb.setLength(0);\n+        expected = \"This is a\" + hf.getNewLine() + \"    test.\";\n+        hf.renderWrappedText(sb, 12, 4, text);\n+        assertEquals(\"single line padded text\", expected, sb.toString());\n+\n+        text = \"  -p,--period <PERIOD>  PERIOD is time duration of form \" +\n+               \"DATE[-DATE] where DATE has form YYYY[MM[DD]]\";\n+\n+        sb.setLength(0);\n+        expected = \"  -p,--period <PERIOD>  PERIOD is time duration of\" +\n+                hf.getNewLine() +\n+                \"                        form DATE[-DATE] where DATE\" +\n+                hf.getNewLine() +\n+                \"                        has form YYYY[MM[DD]]\";\n+        hf.renderWrappedText(sb, 53, 24, text);\n+        assertEquals(\"single line padded text 2\", expected, sb.toString());\n+\n+        text = \"aaaa aaaa aaaa\" + hf.getNewLine() +\n+               \"aaaaaa\" + hf.getNewLine() +\n+               \"aaaaa\";\n+\n+        expected = text;\n+        sb.setLength(0);\n+        hf.renderWrappedText(sb, 16, 0, text);\n+        assertEquals(\"multi line text\", expected, sb.toString());\n+\n+        expected = \"aaaa aaaa aaaa\" + hf.getNewLine() +\n+                   \"    aaaaaa\" + hf.getNewLine() +\n+                   \"    aaaaa\";\n+        sb.setLength(0);\n+        hf.renderWrappedText(sb, 16, 4, text);\n+        assertEquals(\"multi-line padded text\", expected, sb.toString());\n+    }\n+\n+    public void testPrintOptions() throws Exception\n+    {\n+        StringBuffer sb = new StringBuffer();\n+        HelpFormatter hf = new HelpFormatter();\n+        final int leftPad = 1;\n+        final int descPad = 3;\n+        final String lpad = hf.createPadding(leftPad);\n+        final String dpad = hf.createPadding(descPad);\n+        Options options = null;\n+        String expected = null;\n+\n+        options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n+        expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa aaaa aaaa\";\n+        hf.renderOptions(sb, 60, options, leftPad, descPad);\n+        assertEquals(\"simple non-wrapped option\", expected, sb.toString());\n+\n+        int nextLineTabStop = leftPad + descPad + \"-a\".length();\n+        expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa\" + hf.getNewLine() +\n+                   hf.createPadding(nextLineTabStop) + \"aaaa aaaa\";\n+        sb.setLength(0);\n+        hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad);\n+        assertEquals(\"simple wrapped option\", expected, sb.toString());\n+\n+\n+        options = new Options().addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\");\n+        expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd dddd dddd\";\n+        sb.setLength(0);\n+        hf.renderOptions(sb, 60, options, leftPad, descPad);\n+        assertEquals(\"long non-wrapped option\", expected, sb.toString());\n+\n+        nextLineTabStop = leftPad + descPad + \"-a,--aaa\".length();\n+        expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.getNewLine() +\n+                   hf.createPadding(nextLineTabStop) + \"dddd dddd\";\n+        sb.setLength(0);\n+        hf.renderOptions(sb, 25, options, leftPad, descPad);\n+        assertEquals(\"long wrapped option\", expected, sb.toString());\n+\n+        options = new Options().\n+                addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\").\n+                addOption(\"b\", false, \"feeee eeee eeee eeee\");\n+        expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.getNewLine() +\n+                   hf.createPadding(nextLineTabStop) + \"dddd dddd\" + hf.getNewLine() +\n+                   lpad + \"-b      \" + dpad + \"feeee eeee\" + hf.getNewLine() +\n+                   hf.createPadding(nextLineTabStop) + \"eeee eeee\";\n+        sb.setLength(0);\n+        hf.renderOptions(sb, 25, options, leftPad, descPad);\n+        assertEquals(\"multiple wrapped options\", expected, sb.toString());\n+    }\n+\n+    public void testPrintHelpWithEmptySyntax()\n+    {\n+        HelpFormatter formatter = new HelpFormatter();\n+        try\n+        {\n+            formatter.printHelp(null, new Options());\n+            fail(\"null command line syntax should be rejected\");\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            // expected\n+        }\n+\n+        try\n+        {\n+            formatter.printHelp(\"\", new Options());\n+            fail(\"empty command line syntax should be rejected\");\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            // expected\n+        }\n+    }\n+\n+    public void testAutomaticUsage() throws Exception\n+    {\n+        HelpFormatter hf = new HelpFormatter();\n+        Options options = null;\n+        String expected = \"usage: app [-a]\";\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        PrintWriter pw = new PrintWriter(out);\n+\n+        options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n+        hf.printUsage(pw, 60, \"app\", options);\n+        pw.flush();\n+        assertEquals(\"simple auto usage\", expected, out.toString().trim());\n+        out.reset();\n+\n+        expected = \"usage: app [-a] [-b]\";\n+        options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\")\n+                .addOption(\"b\", false, \"bbb\");\n+        hf.printUsage(pw, 60, \"app\", options);\n+        pw.flush();\n+        assertEquals(\"simple auto usage\", expected, out.toString().trim());\n+        out.reset();\n+    }\n+\n+    // This test ensures the options are properly sorted\n+    // See https://issues.apache.org/jira/browse/CLI-131\n+    public void testPrintUsage()\n+    {\n+        Option optionA = new Option(\"a\", \"first\");\n+        Option optionB = new Option(\"b\", \"second\");\n+        Option optionC = new Option(\"c\", \"third\");\n+        Options opts = new Options();\n+        opts.addOption(optionA);\n+        opts.addOption(optionB);\n+        opts.addOption(optionC);\n+        HelpFormatter helpFormatter = new HelpFormatter();\n+        ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\n+        PrintWriter printWriter = new PrintWriter(bytesOut);\n+        helpFormatter.printUsage(printWriter, 80, \"app\", opts);\n+        printWriter.close();\n+        assertEquals(\"usage: app [-a] [-b] [-c]\" + EOL, bytesOut.toString());\n+    }\n+\n+    // uses the test for CLI-131 to implement CLI-155\n+    public void testPrintSortedUsage()\n+    {\n+        Options opts = new Options();\n+        opts.addOption(new Option(\"a\", \"first\"));\n+        opts.addOption(new Option(\"b\", \"second\"));\n+        opts.addOption(new Option(\"c\", \"third\"));\n+\n+        HelpFormatter helpFormatter = new HelpFormatter();\n+        helpFormatter.setOptionComparator(new Comparator()\n+        {\n+            public int compare(Object o1, Object o2)\n+            {\n+                // reverses the fuctionality of the default comparator\n+                Option opt1 = (Option) o1;\n+                Option opt2 = (Option) o2;\n+                return opt2.getKey().compareToIgnoreCase(opt1.getKey());\n+            }\n+        });\n+\n+        StringWriter out = new StringWriter();\n+        helpFormatter.printUsage(new PrintWriter(out), 80, \"app\", opts);\n+\n+        assertEquals(\"usage: app [-c] [-b] [-a]\" + EOL, out.toString());\n+    }\n+\n+    public void testPrintSortedUsageWithNullComparator()\n+    {\n+        Options opts = new Options();\n+        opts.addOption(new Option(\"a\", \"first\"));\n+        opts.addOption(new Option(\"b\", \"second\"));\n+        opts.addOption(new Option(\"c\", \"third\"));\n+\n+        HelpFormatter helpFormatter = new HelpFormatter();\n+        helpFormatter.setOptionComparator(null);\n+\n+        StringWriter out = new StringWriter();\n+        helpFormatter.printUsage(new PrintWriter(out), 80, \"app\", opts);\n+\n+        assertEquals(\"usage: app [-a] [-b] [-c]\" + EOL, out.toString());\n+    }\n+\n+    public void testPrintOptionGroupUsage()\n+    {\n+        OptionGroup group = new OptionGroup();\n+        group.addOption(OptionBuilder.create(\"a\"));\n+        group.addOption(OptionBuilder.create(\"b\"));\n+        group.addOption(OptionBuilder.create(\"c\"));\n+\n+        Options options = new Options();\n+        options.addOptionGroup(group);\n+\n+        StringWriter out = new StringWriter();\n+\n+        HelpFormatter formatter = new HelpFormatter();\n+        formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n+\n+        assertEquals(\"usage: app [-a | -b | -c]\" + EOL, out.toString());\n+    }\n+\n+    public void testPrintRequiredOptionGroupUsage()\n+    {\n+        OptionGroup group = new OptionGroup();\n+        group.addOption(OptionBuilder.create(\"a\"));\n+        group.addOption(OptionBuilder.create(\"b\"));\n+        group.addOption(OptionBuilder.create(\"c\"));\n+        group.setRequired(true);\n+\n+        Options options = new Options();\n+        options.addOptionGroup(group);\n+\n+        StringWriter out = new StringWriter();\n+\n+        HelpFormatter formatter = new HelpFormatter();\n+        formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n+\n+        assertEquals(\"usage: app -a | -b | -c\" + EOL, out.toString());\n+    }\n+\n+    public void testPrintOptionWithEmptyArgNameUsage()\n+    {\n+        Option option = new Option(\"f\", true, null);\n+        option.setArgName(\"\");\n+        option.setRequired(true);\n+\n+        Options options = new Options();\n+        options.addOption(option);\n+\n+        StringWriter out = new StringWriter();\n+\n+        HelpFormatter formatter = new HelpFormatter();\n+        formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n+\n+        assertEquals(\"usage: app -f\" + EOL, out.toString());\n+    }\n+\n+    public void testRtrim()\n+    {\n+        HelpFormatter formatter = new HelpFormatter();\n+\n+        assertEquals(null, formatter.rtrim(null));\n+        assertEquals(\"\", formatter.rtrim(\"\"));\n+        assertEquals(\"  foo\", formatter.rtrim(\"  foo  \"));\n+    }\n+\n+    public void testAccessors()\n+    {\n+        HelpFormatter formatter = new HelpFormatter();\n+\n+        formatter.setArgName(\"argname\");\n+        assertEquals(\"arg name\", \"argname\", formatter.getArgName());\n+\n+        formatter.setDescPadding(3);\n+        assertEquals(\"desc padding\", 3, formatter.getDescPadding());\n+\n+        formatter.setLeftPadding(7);\n+        assertEquals(\"left padding\", 7, formatter.getLeftPadding());\n+\n+        formatter.setLongOptPrefix(\"~~\");\n+        assertEquals(\"long opt prefix\", \"~~\", formatter.getLongOptPrefix());\n+\n+        formatter.setNewLine(\"\\n\");\n+        assertEquals(\"new line\", \"\\n\", formatter.getNewLine());\n+\n+        formatter.setOptPrefix(\"~\");\n+        assertEquals(\"opt prefix\", \"~\", formatter.getOptPrefix());\n+\n+        formatter.setSyntaxPrefix(\"-> \");\n+        assertEquals(\"syntax prefix\", \"-> \", formatter.getSyntaxPrefix());\n+\n+        formatter.setWidth(80);\n+        assertEquals(\"width\", 80, formatter.getWidth());\n+    }\n+    \n+    public void testHeaderStartingWithLineSeparator()\n+    {\n+        // related to Bugzilla #21215\n+        Options options = new Options();\n+        HelpFormatter formatter = new HelpFormatter();\n+        String header = EOL + \"Header\";\n+        String footer = \"Footer\";\n+        StringWriter out = new StringWriter();\n+        formatter.printHelp(new PrintWriter(out), 80, \"foobar\", header, options, 2, 2, footer, true);\n+        assertEquals(\n+                \"usage: foobar\" + EOL +\n+                \"\" + EOL +\n+                \"Header\" + EOL +\n+                \"\" + EOL +\n+                \"Footer\" + EOL\n+                , out.toString());\n+    }\n+\n+    public void testOptionWithoutShortFormat()\n+    {\n+        // related to Bugzilla #19383 (CLI-67)\n+        Options options = new Options();\n+        options.addOption(new Option(\"a\", \"aaa\", false, \"aaaaaaa\"));\n+        options.addOption(new Option(null, \"bbb\", false, \"bbbbbbb\"));\n+        options.addOption(new Option(\"c\", null, false, \"ccccccc\"));\n+\n+        HelpFormatter formatter = new HelpFormatter();\n+        StringWriter out = new StringWriter();\n+        formatter.printHelp(new PrintWriter(out), 80, \"foobar\", \"\", options, 2, 2, \"\", true);\n+        assertEquals(\n+                \"usage: foobar [-a] [--bbb] [-c]\" + EOL +\n+                \"  -a,--aaa  aaaaaaa\" + EOL +\n+                \"     --bbb  bbbbbbb\" + EOL +\n+                \"  -c        ccccccc\" + EOL\n+                , out.toString());\n+    }\n+    \n+\n+    public void testOptionWithoutShortFormat2()\n+    {\n+        // related to Bugzilla #27635 (CLI-26)\n+        Option help = new Option(\"h\", \"help\", false, \"print this message\");\n+        Option version = new Option(\"v\", \"version\", false, \"print version information\");\n+        Option newRun = new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\n+        Option trackerRun = new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\n+        \n+        Option timeLimit = OptionBuilder.withLongOpt(\"limit\")\n+                                        .hasArg()\n+                                        .withValueSeparator()\n+                                        .withDescription(\"Set time limit for execution, in mintues\")\n+                                        .create(\"l\");\n+        \n+        Option age = OptionBuilder.withLongOpt(\"age\")\n+                                        .hasArg()\n+                                        .withValueSeparator()\n+                                        .withDescription(\"Age (in days) of cache item before being recomputed\")\n+                                        .create(\"a\");\n+        \n+        Option server = OptionBuilder.withLongOpt(\"server\")\n+                                        .hasArg()\n+                                        .withValueSeparator()\n+                                        .withDescription(\"The NLT server address\")\n+                                        .create(\"s\");\n+        \n+        Option numResults = OptionBuilder.withLongOpt(\"results\")\n+                                        .hasArg()\n+                                        .withValueSeparator()\n+                                        .withDescription(\"Number of results per item\")\n+                                        .create(\"r\");\n+        \n+        Option configFile = OptionBuilder.withLongOpt(\"config\")\n+                                        .hasArg()\n+                                        .withValueSeparator()\n+                                        .withDescription(\"Use the specified configuration file\")\n+                                        .create();\n+        \n+        Options mOptions = new Options();\n+        mOptions.addOption(help);\n+        mOptions.addOption(version);\n+        mOptions.addOption(newRun);\n+        mOptions.addOption(trackerRun);\n+        mOptions.addOption(timeLimit);\n+        mOptions.addOption(age);\n+        mOptions.addOption(server);\n+        mOptions.addOption(numResults);\n+        mOptions.addOption(configFile);\n+        \n+        HelpFormatter formatter = new HelpFormatter();\n+        final String EOL = System.getProperty(\"line.separator\");\n+        StringWriter out = new StringWriter();\n+        formatter.printHelp(new PrintWriter(out),80,\"commandline\",\"header\",mOptions,2,2,\"footer\",true);\n+        assertEquals(\n+                \"usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]\" + EOL +\n+                \"       [-s <arg>] [-t] [-v]\" + EOL +\n+                \"header\"+EOL+\n+                \"  -a,--age <arg>      Age (in days) of cache item before being recomputed\"+EOL+\n+                \"     --config <arg>   Use the specified configuration file\"+EOL+\n+                \"  -h,--help           print this message\"+EOL+\n+                \"  -l,--limit <arg>    Set time limit for execution, in mintues\"+EOL+\n+                \"  -n,--new            Create NLT cache entries only for new items\"+EOL+\n+                \"  -r,--results <arg>  Number of results per item\"+EOL+\n+                \"  -s,--server <arg>   The NLT server address\"+EOL+\n+                \"  -t,--tracker        Create NLT cache entries only for tracker items\"+EOL+\n+                \"  -v,--version        print version information\"+EOL+\n+                \"footer\"+EOL\n+                ,out.toString());\n+    }\n+    \n+    public void testHelpWithLongOptSeparator() throws Exception\n+    {\n+        Options options = new Options();\n+        options.addOption( \"f\", true, \"the file\" );\n+        options.addOption(OptionBuilder.withLongOpt(\"size\").withDescription(\"the size\").hasArg().withArgName(\"SIZE\").create('s'));\n+        options.addOption(OptionBuilder.withLongOpt(\"age\").withDescription(\"the age\").hasArg().create());\n+        \n+        HelpFormatter formatter = new HelpFormatter();\n+        assertEquals(HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR, formatter.getLongOptSeparator());\n+        formatter.setLongOptSeparator(\"=\");\n+        assertEquals(\"=\", formatter.getLongOptSeparator());\n+        \n+        StringWriter out = new StringWriter();\n+\n+        formatter.printHelp(new PrintWriter(out), 80, \"create\", \"header\", options, 2, 2, \"footer\");\n+\n+        assertEquals(\n+                \"usage: create\" + EOL +\n+                \"header\" + EOL +\n+                \"     --age=<arg>    the age\" + EOL +\n+                \"  -f <arg>          the file\" + EOL +\n+                \"  -s,--size=<SIZE>  the size\" + EOL +\n+                \"footer\" + EOL,\n+                out.toString());\n+    }\n+\n+    public void testUsageWithLongOptSeparator() throws Exception\n+    {\n+        Options options = new Options();\n+        options.addOption( \"f\", true, \"the file\" );\n+        options.addOption(OptionBuilder.withLongOpt(\"size\").withDescription(\"the size\").hasArg().withArgName(\"SIZE\").create('s'));\n+        options.addOption(OptionBuilder.withLongOpt(\"age\").withDescription(\"the age\").hasArg().create());\n+        \n+        HelpFormatter formatter = new HelpFormatter();\n+        formatter.setLongOptSeparator(\"=\");\n+        \n+        StringWriter out = new StringWriter();\n+        \n+        formatter.printUsage(new PrintWriter(out), 80, \"create\", options);\n+        \n+        assertEquals(\"usage: create [--age=<arg>] [-f <arg>] [-s <SIZE>]\", out.toString().trim());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/OptionBuilderTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import junit.framework.TestCase;\n+\n+public class OptionBuilderTest extends TestCase {\n+\n+    public void testCompleteOption( ) {\n+        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n+                                     .hasArg( )\n+                                     .isRequired( )\n+                                     .hasArgs( )\n+                                     .withType( new Float( 10 ) )\n+                                     .withDescription( \"this is a simple option\" )\n+                                     .create( 's' );\n+\n+        assertEquals( \"s\", simple.getOpt() );\n+        assertEquals( \"simple option\", simple.getLongOpt() );\n+        assertEquals( \"this is a simple option\", simple.getDescription() );\n+        assertEquals( simple.getType().getClass(), Float.class );\n+        assertTrue( simple.hasArg() );\n+        assertTrue( simple.isRequired() );\n+        assertTrue( simple.hasArgs() );\n+    }\n+\n+    public void testTwoCompleteOptions( ) {\n+        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n+                                     .hasArg( )\n+                                     .isRequired( )\n+                                     .hasArgs( )\n+                                     .withType( new Float( 10 ) )\n+                                     .withDescription( \"this is a simple option\" )\n+                                     .create( 's' );\n+\n+        assertEquals( \"s\", simple.getOpt() );\n+        assertEquals( \"simple option\", simple.getLongOpt() );\n+        assertEquals( \"this is a simple option\", simple.getDescription() );\n+        assertEquals( simple.getType().getClass(), Float.class );\n+        assertTrue( simple.hasArg() );\n+        assertTrue( simple.isRequired() );\n+        assertTrue( simple.hasArgs() );\n+\n+        simple = OptionBuilder.withLongOpt( \"dimple option\")\n+                              .hasArg( )\n+                              .withDescription( \"this is a dimple option\" )\n+                              .create( 'd' );\n+\n+        assertEquals( \"d\", simple.getOpt() );\n+        assertEquals( \"dimple option\", simple.getLongOpt() );\n+        assertEquals( \"this is a dimple option\", simple.getDescription() );\n+        assertNull( simple.getType() );\n+        assertTrue( simple.hasArg() );\n+        assertTrue( !simple.isRequired() );\n+        assertTrue( !simple.hasArgs() );\n+    }\n+\n+    public void testBaseOptionCharOpt() {\n+        Option base = OptionBuilder.withDescription( \"option description\")\n+                                   .create( 'o' );\n+\n+        assertEquals( \"o\", base.getOpt() );\n+        assertEquals( \"option description\", base.getDescription() );\n+        assertTrue( !base.hasArg() );\n+    }\n+\n+    public void testBaseOptionStringOpt() {\n+        Option base = OptionBuilder.withDescription( \"option description\")\n+                                   .create( \"o\" );\n+\n+        assertEquals( \"o\", base.getOpt() );\n+        assertEquals( \"option description\", base.getDescription() );\n+        assertTrue( !base.hasArg() );\n+    }\n+\n+    public void testSpecialOptChars() throws Exception\n+    {\n+        // '?'\n+        Option opt1 = OptionBuilder.withDescription(\"help options\").create('?');\n+        assertEquals(\"?\", opt1.getOpt());\n+\n+        // '@'\n+        Option opt2 = OptionBuilder.withDescription(\"read from stdin\").create('@');\n+        assertEquals(\"@\", opt2.getOpt());\n+    }\n+\n+    public void testOptionArgNumbers()\n+    {\n+        Option opt = OptionBuilder.withDescription( \"option description\" )\n+                                  .hasArgs( 2 )\n+                                  .create( 'o' );\n+        assertEquals( 2, opt.getArgs() );\n+    }\n+\n+    public void testIllegalOptions() {\n+        // bad single character option\n+        try {\n+            OptionBuilder.withDescription( \"option description\" ).create( '\"' );\n+            fail( \"IllegalArgumentException not caught\" );\n+        }\n+        catch( IllegalArgumentException exp ) {\n+            // success\n+        }\n+\n+        // bad character in option string\n+        try {\n+            Option opt = OptionBuilder.create( \"opt`\" );\n+            fail( \"IllegalArgumentException not caught\" );\n+        }\n+        catch( IllegalArgumentException exp ) {\n+            // success\n+        }\n+\n+        // valid option \n+        try {\n+            Option opt = OptionBuilder.create( \"opt\" );\n+            // success\n+        }\n+        catch( IllegalArgumentException exp ) {\n+            fail( \"IllegalArgumentException caught\" );\n+        }\n+    }\n+\n+    public void testCreateIncompleteOption() {\n+        try\n+        {\n+            OptionBuilder.hasArg().create();\n+            fail(\"Incomplete option should be rejected\");\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            // expected\n+            \n+            // implicitly reset the builder\n+            OptionBuilder.create( \"opt\" );\n+        }\n+    }\n+\n+    public void testBuilderIsResettedAlways() {\n+        try\n+        {\n+            OptionBuilder.withDescription(\"JUnit\").create('\"');\n+            fail(\"IllegalArgumentException expected\");\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            // expected\n+        }\n+        assertNull(\"we inherited a description\", OptionBuilder.create('x').getDescription());\n+\n+        try\n+        {\n+            OptionBuilder.withDescription(\"JUnit\").create();\n+            fail(\"IllegalArgumentException expected\");\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            // expected\n+        }\n+        assertNull(\"we inherited a description\", OptionBuilder.create('x').getDescription());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/OptionGroupTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author John Keyes (john at integralsource.com)\n+ * @version $Revision$\n+ */\n+public class OptionGroupTest extends TestCase\n+{\n+    private Options _options = null;\n+    private CommandLineParser parser = new PosixParser();\n+\n+    public void setUp()\n+    {\n+        Option file = new Option( \"f\", \"file\", false, \"file to process\" );\n+        Option dir = new Option( \"d\", \"directory\", false, \"directory to process\" );\n+        OptionGroup group = new OptionGroup();\n+        group.addOption( file );\n+        group.addOption( dir );\n+        _options = new Options().addOptionGroup( group );\n+\n+        Option section = new Option( \"s\", \"section\", false, \"section to process\" );\n+        Option chapter = new Option( \"c\", \"chapter\", false, \"chapter to process\" );\n+        OptionGroup group2 = new OptionGroup();\n+        group2.addOption( section );\n+        group2.addOption( chapter );\n+\n+        _options.addOptionGroup( group2 );\n+\n+        Option importOpt = new Option( null, \"import\", false, \"section to process\" );\n+        Option exportOpt = new Option( null, \"export\", false, \"chapter to process\" );\n+        OptionGroup group3 = new OptionGroup();\n+        group3.addOption( importOpt );\n+        group3.addOption( exportOpt );\n+        _options.addOptionGroup( group3 );\n+\n+        _options.addOption( \"r\", \"revision\", false, \"revision number\" );\n+    }\n+\n+    public void testSingleOptionFromGroup() throws Exception\n+    {\n+        String[] args = new String[] { \"-f\" };\n+\n+        CommandLine cl = parser.parse( _options, args);\n+\n+        assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n+        assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n+        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n+    }\n+\n+    public void testSingleOption() throws Exception\n+    {\n+        String[] args = new String[] { \"-r\" };\n+\n+        CommandLine cl = parser.parse( _options, args);\n+\n+        assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n+        assertTrue( \"Confirm -f is NOT set\", !cl.hasOption(\"f\") );\n+        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n+    }\n+\n+    public void testTwoValidOptions() throws Exception\n+    {\n+        String[] args = new String[] { \"-r\", \"-f\" };\n+\n+        CommandLine cl = parser.parse( _options, args);\n+\n+        assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n+        assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n+        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n+    }\n+\n+    public void testSingleLongOption() throws Exception\n+    {\n+        String[] args = new String[] { \"--file\" };\n+\n+        CommandLine cl = parser.parse( _options, args);\n+\n+        assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n+        assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n+        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n+    }\n+\n+    public void testTwoValidLongOptions() throws Exception\n+    {\n+        String[] args = new String[] { \"--revision\", \"--file\" };\n+\n+        CommandLine cl = parser.parse( _options, args);\n+\n+        assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n+        assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n+        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n+    }\n+\n+    public void testNoOptionsExtraArgs() throws Exception\n+    {\n+        String[] args = new String[] { \"arg1\", \"arg2\" };\n+\n+        CommandLine cl = parser.parse( _options, args);\n+\n+        assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n+        assertTrue( \"Confirm -f is NOT set\", !cl.hasOption(\"f\") );\n+        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm TWO extra args\", cl.getArgList().size() == 2);\n+    }\n+\n+    public void testTwoOptionsFromGroup() throws Exception\n+    {\n+        String[] args = new String[] { \"-f\", \"-d\" };\n+\n+        try\n+        {\n+            parser.parse( _options, args);\n+            fail( \"two arguments from group not allowed\" );\n+        }\n+        catch (AlreadySelectedException e)\n+        {\n+            assertNotNull(\"null option group\", e.getOptionGroup());\n+            assertEquals(\"selected option\", \"f\", e.getOptionGroup().getSelected());\n+            assertEquals(\"option\", \"d\", e.getOption().getOpt());\n+        }\n+    }\n+\n+    public void testTwoLongOptionsFromGroup() throws Exception\n+    {\n+        String[] args = new String[] { \"--file\", \"--directory\" };\n+\n+        try\n+        {\n+            parser.parse(_options, args);\n+            fail( \"two arguments from group not allowed\" );\n+        }\n+        catch (AlreadySelectedException e)\n+        {\n+            assertNotNull(\"null option group\", e.getOptionGroup());\n+            assertEquals(\"selected option\", \"f\", e.getOptionGroup().getSelected());\n+            assertEquals(\"option\", \"d\", e.getOption().getOpt());\n+        }\n+    }\n+\n+    public void testTwoOptionsFromDifferentGroup() throws Exception\n+    {\n+        String[] args = new String[] { \"-f\", \"-s\" };\n+\n+        CommandLine cl = parser.parse( _options, args);\n+        assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n+        assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n+        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+        assertTrue( \"Confirm -s is set\", cl.hasOption(\"s\") );\n+        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm NO extra args\", cl.getArgList().size() == 0);\n+    }\n+\n+    public void testValidLongOnlyOptions() throws Exception\n+    {\n+        CommandLine cl1 = parser.parse(_options, new String[]{\"--export\"});\n+        assertTrue(\"Confirm --export is set\", cl1.hasOption(\"export\"));\n+\n+        CommandLine cl2 = parser.parse(_options, new String[]{\"--import\"});\n+        assertTrue(\"Confirm --import is set\", cl2.hasOption(\"import\"));\n+    }\n+\n+    public void testToString()\n+    {\n+        OptionGroup group1 = new OptionGroup();\n+        group1.addOption(new Option(null, \"foo\", false, \"Foo\"));\n+        group1.addOption(new Option(null, \"bar\", false, \"Bar\"));\n+\n+        if (!\"[--bar Bar, --foo Foo]\".equals(group1.toString())) {\n+            assertEquals(\"[--foo Foo, --bar Bar]\", group1.toString());\n+        }\n+\n+        OptionGroup group2 = new OptionGroup();\n+        group2.addOption(new Option(\"f\", \"foo\", false, \"Foo\"));\n+        group2.addOption(new Option(\"b\", \"bar\", false, \"Bar\"));\n+\n+        if (!\"[-b Bar, -f Foo]\".equals(group2.toString())) {\n+            assertEquals(\"[-f Foo, -b Bar]\", group2.toString());\n+        }\n+    }\n+\n+    public void testGetNames()\n+    {\n+        OptionGroup group = new OptionGroup();\n+        group.addOption(OptionBuilder.create('a'));\n+        group.addOption(OptionBuilder.create('b'));\n+\n+        assertNotNull(\"null names\", group.getNames());\n+        assertEquals(2, group.getNames().size());\n+        assertTrue(group.getNames().contains(\"a\"));\n+        assertTrue(group.getNames().contains(\"b\"));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/OptionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author brianegge\n+ */\n+public class OptionTest extends TestCase\n+{\n+    private static class TestOption extends Option\n+    {\n+        public TestOption(String opt, boolean hasArg, String description) throws IllegalArgumentException\n+        {\n+            super(opt, hasArg, description);\n+        }\n+\n+        public boolean addValue(String value)\n+        {\n+            addValueForProcessing(value);\n+            return true;\n+        }\n+    }\n+\n+    public void testClear()\n+    {\n+        TestOption option = new TestOption(\"x\", true, \"\");\n+        assertEquals(0, option.getValuesList().size());\n+        option.addValue(\"a\");\n+        assertEquals(1, option.getValuesList().size());\n+        option.clearValues();\n+        assertEquals(0, option.getValuesList().size());\n+    }\n+\n+    // See http://issues.apache.org/jira/browse/CLI-21\n+    public void testClone() throws CloneNotSupportedException\n+    {\n+        TestOption a = new TestOption(\"a\", true, \"\");\n+        TestOption b = (TestOption) a.clone();\n+        assertEquals(a, b);\n+        assertNotSame(a, b);\n+        a.setDescription(\"a\");\n+        assertEquals(\"\", b.getDescription());\n+        b.setArgs(2);\n+        b.addValue(\"b1\");\n+        b.addValue(\"b2\");\n+        assertEquals(1, a.getArgs());\n+        assertEquals(0, a.getValuesList().size());\n+        assertEquals(2, b.getValues().length);\n+    }\n+\n+    private static class DefaultOption extends Option\n+    {\n+        private final String defaultValue;\n+\n+        public DefaultOption(String opt, String description, String defaultValue) throws IllegalArgumentException\n+        {\n+            super(opt, true, description);\n+            this.defaultValue = defaultValue;\n+        }\n+\n+        public String getValue()\n+        {\n+            return super.getValue() != null ? super.getValue() : defaultValue;\n+        }\n+    }\n+\n+    public void testSubclass() throws CloneNotSupportedException\n+    {\n+        Option option = new DefaultOption(\"f\", \"file\", \"myfile.txt\");\n+        Option clone = (Option) option.clone();\n+        assertEquals(\"myfile.txt\", clone.getValue());\n+        assertEquals(DefaultOption.class, clone.getClass());\n+    }\n+\n+    public void testHasArgName()\n+    {\n+        Option option = new Option(\"f\", null);\n+\n+        option.setArgName(null);\n+        assertFalse(option.hasArgName());\n+\n+        option.setArgName(\"\");\n+        assertFalse(option.hasArgName());\n+\n+        option.setArgName(\"file\");\n+        assertTrue(option.hasArgName());\n+    }\n+\n+    public void testHasArgs()\n+    {\n+        Option option = new Option(\"f\", null);\n+\n+        option.setArgs(0);\n+        assertFalse(option.hasArgs());\n+\n+        option.setArgs(1);\n+        assertFalse(option.hasArgs());\n+\n+        option.setArgs(10);\n+        assertTrue(option.hasArgs());\n+\n+        option.setArgs(Option.UNLIMITED_VALUES);\n+        assertTrue(option.hasArgs());\n+\n+        option.setArgs(Option.UNINITIALIZED);\n+        assertFalse(option.hasArgs());\n+    }\n+\n+    public void testGetValue()\n+    {\n+        Option option = new Option(\"f\", null);\n+        option.setArgs(Option.UNLIMITED_VALUES);\n+\n+        assertEquals(\"default\", option.getValue(\"default\"));\n+        assertEquals(null, option.getValue(0));\n+\n+        option.addValueForProcessing(\"foo\");\n+        \n+        assertEquals(\"foo\", option.getValue());\n+        assertEquals(\"foo\", option.getValue(0));\n+        assertEquals(\"foo\", option.getValue(\"default\"));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/OptionsTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Rob Oxspring roxspring@apache.org\n+ * @version $Revision$\n+ */\n+public class OptionsTest extends TestCase\n+{\n+    public void testSimple()\n+    {\n+        Options opts = new Options();\n+\n+        opts.addOption(\"a\", false, \"toggle -a\");\n+        opts.addOption(\"b\", true, \"toggle -b\");\n+\n+        assertTrue(opts.hasOption(\"a\"));\n+        assertTrue(opts.hasOption(\"b\"));\n+    }\n+\n+    public void testDuplicateSimple()\n+    {\n+        Options opts = new Options();\n+        opts.addOption(\"a\", false, \"toggle -a\");\n+        opts.addOption(\"a\", true, \"toggle -a*\");\n+\n+        assertEquals(\"last one in wins\", \"toggle -a*\", opts.getOption(\"a\").getDescription());\n+    }\n+\n+    public void testLong()\n+    {\n+        Options opts = new Options();\n+\n+        opts.addOption(\"a\", \"--a\", false, \"toggle -a\");\n+        opts.addOption(\"b\", \"--b\", true, \"set -b\");\n+\n+        assertTrue(opts.hasOption(\"a\"));\n+        assertTrue(opts.hasOption(\"b\"));\n+    }\n+\n+    public void testDuplicateLong()\n+    {\n+        Options opts = new Options();\n+        opts.addOption(\"a\", \"--a\", false, \"toggle -a\");\n+        opts.addOption(\"a\", \"--a\", false, \"toggle -a*\");\n+        assertEquals(\"last one in wins\", \"toggle -a*\", opts.getOption(\"a\").getDescription());\n+    }\n+\n+    public void testHelpOptions()\n+    {\n+        Option longOnly1 = OptionBuilder.withLongOpt(\"long-only1\").create();\n+        Option longOnly2 = OptionBuilder.withLongOpt(\"long-only2\").create();\n+        Option shortOnly1 = OptionBuilder.create(\"1\");\n+        Option shortOnly2 = OptionBuilder.create(\"2\");\n+        Option bothA = OptionBuilder.withLongOpt(\"bothA\").create(\"a\");\n+        Option bothB = OptionBuilder.withLongOpt(\"bothB\").create(\"b\");\n+        \n+        Options options = new Options();\n+        options.addOption(longOnly1);\n+        options.addOption(longOnly2);\n+        options.addOption(shortOnly1);\n+        options.addOption(shortOnly2);\n+        options.addOption(bothA);\n+        options.addOption(bothB);\n+        \n+        Collection allOptions = new ArrayList();\n+        allOptions.add(longOnly1);\n+        allOptions.add(longOnly2);\n+        allOptions.add(shortOnly1);\n+        allOptions.add(shortOnly2);\n+        allOptions.add(bothA);\n+        allOptions.add(bothB);\n+        \n+        Collection helpOptions = options.helpOptions();\n+        \n+        assertTrue(\"Everything in all should be in help\", helpOptions.containsAll(allOptions));\n+        assertTrue(\"Everything in help should be in all\", allOptions.containsAll(helpOptions));        \n+    }\n+\n+    public void testMissingOptionException() throws ParseException\n+    {\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.isRequired().create(\"f\"));\n+        try\n+        {\n+            new PosixParser().parse(options, new String[0]);\n+            fail(\"Expected MissingOptionException to be thrown\");\n+        }\n+        catch (MissingOptionException e)\n+        {\n+            assertEquals(\"Missing required option: f\", e.getMessage());\n+        }\n+    }\n+\n+    public void testMissingOptionsException() throws ParseException\n+    {\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.isRequired().create(\"f\"));\n+        options.addOption(OptionBuilder.isRequired().create(\"x\"));\n+        try\n+        {\n+            new PosixParser().parse(options, new String[0]);\n+            fail(\"Expected MissingOptionException to be thrown\");\n+        }\n+        catch (MissingOptionException e)\n+        {\n+            assertEquals(\"Missing required options: f, x\", e.getMessage());\n+        }\n+    }\n+\n+    public void testToString()\n+    {\n+        Options options = new Options();\n+        options.addOption(\"f\", \"foo\", true, \"Foo\");\n+        options.addOption(\"b\", \"bar\", false, \"Bar\");\n+\n+        String s = options.toString();\n+        assertNotNull(\"null string returned\", s);\n+        assertTrue(\"foo option missing\", s.toLowerCase().indexOf(\"foo\") != -1);\n+        assertTrue(\"bar option missing\", s.toLowerCase().indexOf(\"bar\") != -1);\n+    }\n+\n+    public void testGetOptionsGroups()\n+    {\n+        Options options = new Options();\n+\n+        OptionGroup group1 = new OptionGroup();\n+        group1.addOption(OptionBuilder.create('a'));\n+        group1.addOption(OptionBuilder.create('b'));\n+\n+        OptionGroup group2 = new OptionGroup();\n+        group2.addOption(OptionBuilder.create('x'));\n+        group2.addOption(OptionBuilder.create('y'));\n+\n+        options.addOptionGroup(group1);\n+        options.addOptionGroup(group2);\n+\n+        assertNotNull(options.getOptionGroups());\n+        assertEquals(2, options.getOptionGroups().size());\n+    }\n+    \n+    public void testGetMatchingOpts()\n+    {\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\n+        \n+        assertTrue(options.getMatchingOptions(\"foo\").isEmpty());\n+        assertEquals(1, options.getMatchingOptions(\"version\").size());\n+        assertEquals(2, options.getMatchingOptions(\"ver\").size());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/ParserTestCase.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Abstract test case testing common parser features.\n+ *\n+ * @author Emmanuel Bourg\n+ * @version $Revision$, $Date$\n+ */\n+public abstract class ParserTestCase extends TestCase\n+{\n+    protected CommandLineParser parser;\n+\n+    protected Options options;\n+\n+    public void setUp()\n+    {\n+        options = new Options()\n+            .addOption(\"a\", \"enable-a\", false, \"turn [a] on or off\")\n+            .addOption(\"b\", \"bfile\", true, \"set the value of [b]\")\n+            .addOption(\"c\", \"copt\", false, \"turn [c] on or off\");\n+    }\n+\n+    public void testSimpleShort() throws Exception\n+    {\n+        String[] args = new String[] { \"-a\",\n+                                       \"-b\", \"toast\",\n+                                       \"foo\", \"bar\" };\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue(\"Confirm -a is set\", cl.hasOption(\"a\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n+        assertTrue(\"Confirm size of extra args\", cl.getArgList().size() == 2);\n+    }\n+\n+    public void testSimpleLong() throws Exception\n+    {\n+        String[] args = new String[] { \"--enable-a\",\n+                                       \"--bfile\", \"toast\",\n+                                       \"foo\", \"bar\" };\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n+        assertTrue( \"Confirm arg of --bfile\", cl.getOptionValue( \"bfile\" ).equals( \"toast\" ) );\n+        assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n+    }\n+\n+    public void testMultiple() throws Exception\n+    {\n+        String[] args = new String[] { \"-c\",\n+                                       \"foobar\",\n+                                       \"-b\", \"toast\" };\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n+\n+        cl = parser.parse(options, cl.getArgs());\n+\n+        assertTrue(\"Confirm -c is not set\", !cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n+        assertTrue(\"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n+    }\n+\n+    public void testMultipleWithLong() throws Exception\n+    {\n+        String[] args = new String[] { \"--copt\",\n+                                       \"foobar\",\n+                                       \"--bfile\", \"toast\" };\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n+\n+        cl = parser.parse(options, cl.getArgs());\n+\n+        assertTrue(\"Confirm -c is not set\", !cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n+        assertTrue(\"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n+    }\n+\n+    public void testUnrecognizedOption() throws Exception\n+    {\n+        String[] args = new String[] { \"-a\", \"-d\", \"-b\", \"toast\", \"foo\", \"bar\" };\n+\n+        try\n+        {\n+            parser.parse(options, args);\n+            fail(\"UnrecognizedOptionException wasn't thrown\");\n+        }\n+        catch (UnrecognizedOptionException e)\n+        {\n+            assertEquals(\"-d\", e.getOption());\n+        }\n+    }\n+\n+    public void testMissingArg() throws Exception\n+    {\n+        String[] args = new String[] { \"-b\" };\n+\n+        boolean caught = false;\n+\n+        try\n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (MissingArgumentException e)\n+        {\n+            caught = true;\n+            assertEquals(\"option missing an argument\", \"b\", e.getOption().getOpt());\n+        }\n+\n+        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n+    }\n+\n+    public void testDoubleDash1() throws Exception\n+    {\n+        String[] args = new String[] { \"--copt\",\n+                                       \"--\",\n+                                       \"-b\", \"toast\" };\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm -b is not set\", !cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm 2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n+    }\n+\n+    public void testDoubleDash2() throws Exception\n+    {\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.hasArg().create('n'));\n+        options.addOption(OptionBuilder.create('m'));\n+\n+        try\n+        {\n+            parser.parse(options, new String[]{\"-n\", \"--\", \"-m\"});\n+            fail(\"MissingArgumentException not thrown for option -n\");\n+        }\n+        catch (MissingArgumentException e)\n+        {\n+            assertNotNull(\"option null\", e.getOption());\n+            assertEquals(\"n\", e.getOption().getOpt());\n+        }\n+    }\n+    \n+    public void testSingleDash() throws Exception\n+    {\n+        String[] args = new String[] { \"--copt\",\n+                                       \"-b\", \"-\",\n+                                       \"-a\",\n+                                       \"-\" };\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue(\"Confirm -a is set\", cl.hasOption(\"a\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"-\"));\n+        assertTrue(\"Confirm 1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue(\"Confirm value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"-\"));\n+    }\n+\n+    public void testStopAtUnexpectedArg() throws Exception\n+    {\n+        String[] args = new String[] { \"-c\",\n+                                       \"foober\",\n+                                       \"-b\",\n+                                       \"toast\" };\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n+    }\n+\n+   public void testStopAtExpectedArg() throws Exception\n+    {\n+        String[] args = new String[]{\"-b\", \"foo\"};\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+\n+        assertTrue(\"Confirm -b is set\", cl.hasOption('b'));\n+        assertEquals(\"Confirm -b is set\", \"foo\", cl.getOptionValue('b'));\n+        assertTrue(\"Confirm no extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 0);\n+    }\n+\n+    public void testStopAtNonOptionShort() throws Exception\n+    {\n+        String[] args = new String[]{\"-z\",\n+                                     \"-a\",\n+                                     \"-btoast\"};\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+        assertFalse(\"Confirm -a is not set\", cl.hasOption(\"a\"));\n+        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n+    }\n+\n+    public void testStopAtNonOptionLong() throws Exception\n+    {\n+        String[] args = new String[]{\"--zop==1\",\n+                                     \"-abtoast\",\n+                                     \"--b=bar\"};\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+\n+        assertFalse(\"Confirm -a is not set\", cl.hasOption(\"a\"));\n+        assertFalse(\"Confirm -b is not set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n+    }\n+\n+    public void testNegativeArgument() throws Exception\n+    {\n+        String[] args = new String[] { \"-b\", \"-1\"} ;\n+\n+        CommandLine cl = parser.parse(options, args);\n+        assertEquals(\"-1\", cl.getOptionValue(\"b\"));\n+    }\n+\n+    public void testNegativeOption() throws Exception\n+    {\n+        String[] args = new String[] { \"-b\", \"-1\"} ;\n+        \n+        options.addOption(\"1\", false, null);\n+\n+        CommandLine cl = parser.parse(options, args);\n+        assertEquals(\"-1\", cl.getOptionValue(\"b\"));\n+    }\n+    \n+    public void testArgumentStartingWithHyphen() throws Exception\n+    {\n+        String[] args = new String[]{\"-b\", \"-foo\"};\n+\n+        CommandLine cl = parser.parse(options, args);\n+        assertEquals(\"-foo\", cl.getOptionValue(\"b\"));\n+    }\n+\n+    public void testShortWithEqual() throws Exception\n+    {\n+        String[] args = new String[] { \"-f=bar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n+    }\n+\n+    public void testShortWithoutEqual() throws Exception\n+    {\n+        String[] args = new String[] { \"-fbar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n+    }\n+\n+    public void testLongWithEqualDoubleDash() throws Exception\n+    {\n+        String[] args = new String[] { \"--foo=bar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n+    }\n+\n+    public void testLongWithEqualSingleDash() throws Exception\n+    {\n+        String[] args = new String[] { \"-foo=bar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n+    }\n+\n+    public void testLongWithoutEqualSingleDash() throws Exception\n+    {\n+        String[] args = new String[] { \"-foobar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n+    }\n+    \n+    public void testAmbiguousLongWithoutEqualSingleDash() throws Exception\n+    {\n+        String[] args = new String[] { \"-b\", \"-foobar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasOptionalArg().create('f'));\n+        options.addOption(OptionBuilder.withLongOpt(\"bar\").hasOptionalArg().create('b'));\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue(cl.hasOption(\"b\"));\n+        assertTrue(cl.hasOption(\"f\"));\n+        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n+    }\n+\n+    public void testLongWithoutEqualDoubleDash() throws Exception\n+    {\n+        String[] args = new String[] { \"--foobar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+\n+        assertFalse(cl.hasOption(\"foo\")); // foo isn't expected to be recognized with a double dash\n+    }\n+\n+    public void testLongWithUnexpectedArgument1() throws Exception\n+    {\n+        String[] args = new String[] { \"--foo=bar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").create('f'));\n+\n+        try\n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (UnrecognizedOptionException e)\n+        {\n+            assertEquals(\"--foo=bar\", e.getOption());\n+            return;\n+        }\n+\n+        fail(\"UnrecognizedOptionException not thrown\");\n+    }\n+\n+    public void testLongWithUnexpectedArgument2() throws Exception\n+    {\n+        String[] args = new String[] { \"-foobar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").create('f'));\n+\n+        try\n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (UnrecognizedOptionException e)\n+        {\n+            assertEquals(\"-foobar\", e.getOption());\n+            return;\n+        }\n+\n+        fail(\"UnrecognizedOptionException not thrown\");\n+    }\n+\n+    public void testShortWithUnexpectedArgument() throws Exception\n+    {\n+        String[] args = new String[] { \"-f=bar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").create('f'));\n+\n+        try\n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (UnrecognizedOptionException e)\n+        {\n+            assertEquals(\"-f=bar\", e.getOption());\n+            return;\n+        }\n+\n+        fail(\"UnrecognizedOptionException not thrown\");\n+    }\n+    \n+    public void testPropertiesOption1() throws Exception\n+    {\n+        String[] args = new String[] { \"-Jsource=1.5\", \"-J\", \"target\", \"1.5\", \"foo\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        List values = Arrays.asList(cl.getOptionValues(\"J\"));\n+        assertNotNull(\"null values\", values);\n+        assertEquals(\"number of values\", 4, values.size());\n+        assertEquals(\"value 1\", \"source\", values.get(0));\n+        assertEquals(\"value 2\", \"1.5\", values.get(1));\n+        assertEquals(\"value 3\", \"target\", values.get(2));\n+        assertEquals(\"value 4\", \"1.5\", values.get(3));\n+        \n+        List argsleft = cl.getArgList();\n+        assertEquals(\"Should be 1 arg left\", 1, argsleft.size());\n+        assertEquals(\"Expecting foo\", \"foo\", argsleft.get(0));\n+    }\n+\n+    public void testPropertiesOption2() throws Exception\n+    {\n+        String[] args = new String[] { \"-Dparam1\", \"-Dparam2=value2\", \"-D\"};\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));\n+\n+        CommandLine cl = parser.parse(options, args);\n+        \n+        Properties props = cl.getOptionProperties(\"D\");\n+        assertNotNull(\"null properties\", props);\n+        assertEquals(\"number of properties in \" + props, 2, props.size());\n+        assertEquals(\"property 1\", \"true\", props.getProperty(\"param1\"));\n+        assertEquals(\"property 2\", \"value2\", props.getProperty(\"param2\"));\n+        \n+        List argsleft = cl.getArgList();\n+        assertEquals(\"Should be no arg left\", 0, argsleft.size());\n+    }\n+\n+    public void testUnambiguousPartialLongOption1() throws Exception\n+    {\n+        String[] args = new String[] { \"--ver\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n+        options.addOption(OptionBuilder.withLongOpt(\"help\").create());\n+        \n+        CommandLine cl = parser.parse(options, args);\n+        \n+        assertTrue(\"Confirm --version is set\", cl.hasOption(\"version\"));\n+    }\n+\n+    public void testUnambiguousPartialLongOption2() throws Exception\n+    {\n+        String[] args = new String[] { \"-ver\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n+        options.addOption(OptionBuilder.withLongOpt(\"help\").create());\n+        \n+        CommandLine cl = parser.parse(options, args);\n+        \n+        assertTrue(\"Confirm --version is set\", cl.hasOption(\"version\"));\n+    }\n+\n+    public void testUnambiguousPartialLongOption3() throws Exception\n+    {\n+        String[] args = new String[] { \"--ver=1\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\n+        options.addOption(OptionBuilder.withLongOpt(\"help\").create());\n+        \n+        CommandLine cl = parser.parse(options, args);\n+        \n+        assertTrue(\"Confirm --verbose is set\", cl.hasOption(\"verbose\"));\n+        assertEquals(\"1\", cl.getOptionValue(\"verbose\"));\n+    }\n+\n+    public void testUnambiguousPartialLongOption4() throws Exception\n+    {\n+        String[] args = new String[] { \"-ver=1\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\n+        options.addOption(OptionBuilder.withLongOpt(\"help\").create());\n+        \n+        CommandLine cl = parser.parse(options, args);\n+        \n+        assertTrue(\"Confirm --verbose is set\", cl.hasOption(\"verbose\"));\n+        assertEquals(\"1\", cl.getOptionValue(\"verbose\"));\n+    }\n+    \n+    public void testAmbiguousPartialLongOption1() throws Exception\n+    {\n+        String[] args = new String[] { \"--ver\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\n+        \n+        boolean caught = false;\n+        \n+        try \n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (AmbiguousOptionException e) \n+        {\n+            caught = true;\n+            assertEquals(\"Partial option\", \"--ver\", e.getOption());\n+            assertNotNull(\"Matching options null\", e.getMatchingOptions());\n+            assertEquals(\"Matching options size\", 2, e.getMatchingOptions().size());\n+        }\n+        \n+        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n+    }\n+    \n+    public void testAmbiguousPartialLongOption2() throws Exception\n+    {\n+        String[] args = new String[] { \"-ver\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\n+        \n+        boolean caught = false;\n+        \n+        try \n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (AmbiguousOptionException e) \n+        {\n+            caught = true;\n+            assertEquals(\"Partial option\", \"-ver\", e.getOption());\n+            assertNotNull(\"Matching options null\", e.getMatchingOptions());\n+            assertEquals(\"Matching options size\", 2, e.getMatchingOptions().size());\n+        }\n+        \n+        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n+    }\n+\n+    public void testAmbiguousPartialLongOption3() throws Exception\n+    {\n+        String[] args = new String[] { \"--ver=1\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\n+        \n+        boolean caught = false;\n+        \n+        try \n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (AmbiguousOptionException e) \n+        {\n+            caught = true;\n+            assertEquals(\"Partial option\", \"--ver\", e.getOption());\n+            assertNotNull(\"Matching options null\", e.getMatchingOptions());\n+            assertEquals(\"Matching options size\", 2, e.getMatchingOptions().size());\n+        }\n+        \n+        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n+    }\n+\n+    public void testAmbiguousPartialLongOption4() throws Exception\n+    {\n+        String[] args = new String[] { \"-ver=1\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\n+        \n+        boolean caught = false;\n+        \n+        try \n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (AmbiguousOptionException e) \n+        {\n+            caught = true;\n+            assertEquals(\"Partial option\", \"-ver\", e.getOption());\n+            assertNotNull(\"Matching options null\", e.getMatchingOptions());\n+            assertEquals(\"Matching options size\", 2, e.getMatchingOptions().size());\n+        }\n+        \n+        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n+    }\n+    \n+    public void testPartialLongOptionSingleDash() throws Exception\n+    {\n+        String[] args = new String[] { \"-ver\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n+        options.addOption(OptionBuilder.hasArg().create('v'));\n+        \n+        CommandLine cl = parser.parse(options, args);\n+        \n+        assertTrue(\"Confirm --version is set\", cl.hasOption(\"version\"));\n+        assertTrue(\"Confirm -v is not set\", !cl.hasOption(\"v\"));\n+    }\n+\n+    public void testWithRequiredOption() throws Exception\n+    {\n+        String[] args = new String[] { \"-b\", \"file\" };\n+        \n+        Options options = new Options();\n+        options.addOption(\"a\", \"enable-a\", false, null);\n+        options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\n+\n+        CommandLine cl = parser.parse(options,args);\n+\n+        assertTrue(\"Confirm -a is NOT set\", !cl.hasOption(\"a\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"file\"));\n+        assertTrue(\"Confirm NO of extra args\", cl.getArgList().size() == 0);\n+    }\n+\n+    public void testOptionAndRequiredOption() throws Exception\n+    {\n+        String[] args = new String[] { \"-a\", \"-b\", \"file\" };\n+        \n+        Options options = new Options();\n+        options.addOption(\"a\", \"enable-a\", false, null);\n+        options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\n+\n+        CommandLine cl = parser.parse(options,args);\n+\n+        assertTrue(\"Confirm -a is set\", cl.hasOption(\"a\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"file\"));\n+        assertTrue(\"Confirm NO of extra args\", cl.getArgList().size() == 0);\n+    }\n+\n+    public void testMissingRequiredOption()\n+    {\n+        String[] args = new String[] { \"-a\" };\n+        \n+        Options options = new Options();\n+        options.addOption(\"a\", \"enable-a\", false, null);\n+        options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\n+\n+        try\n+        {\n+            parser.parse(options,args);\n+            fail(\"exception should have been thrown\");\n+        }\n+        catch (MissingOptionException e)\n+        {\n+            assertEquals( \"Incorrect exception message\", \"Missing required option: b\", e.getMessage() );\n+            assertTrue(e.getMissingOptions().contains(\"b\"));\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"expected to catch MissingOptionException\");\n+        }\n+    }\n+\n+    public void testMissingRequiredOptions()\n+    {\n+        String[] args = new String[] { \"-a\" };\n+\n+        Options options = new Options();\n+        options.addOption(\"a\", \"enable-a\", false, null);\n+        options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\n+        options.addOption(OptionBuilder.withLongOpt(\"cfile\").hasArg().isRequired().create('c'));\n+\n+        try\n+        {\n+            parser.parse(options,args);\n+            fail(\"exception should have been thrown\");\n+        }\n+        catch (MissingOptionException e)\n+        {\n+            assertEquals(\"Incorrect exception message\", \"Missing required options: b, c\", e.getMessage());\n+            assertTrue(e.getMissingOptions().contains(\"b\"));\n+            assertTrue(e.getMissingOptions().contains(\"c\"));\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"expected to catch MissingOptionException\");\n+        }\n+    }\n+    \n+    public void testMissingRequiredGroup() throws Exception\n+    {\n+        OptionGroup group = new OptionGroup();\n+        group.addOption(OptionBuilder.create(\"a\"));\n+        group.addOption(OptionBuilder.create(\"b\"));\n+        group.setRequired(true);\n+\n+        Options options = new Options();\n+        options.addOptionGroup(group);\n+        options.addOption(OptionBuilder.isRequired().create(\"c\"));\n+\n+        try\n+        {\n+            parser.parse(options, new String[] { \"-c\" });\n+            fail(\"MissingOptionException not thrown\");\n+        }\n+        catch (MissingOptionException e)\n+        {\n+            assertEquals(1, e.getMissingOptions().size());\n+            assertTrue(e.getMissingOptions().get(0) instanceof OptionGroup);\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Expected to catch MissingOptionException\");\n+        }\n+    }\n+    \n+    public void testOptionGroup() throws Exception\n+    {\n+        OptionGroup group = new OptionGroup();\n+        group.addOption(OptionBuilder.create(\"a\"));\n+        group.addOption(OptionBuilder.create(\"b\"));\n+        \n+        Options options = new Options();\n+        options.addOptionGroup(group);\n+        \n+        parser.parse(options, new String[] { \"-b\" });\n+        \n+        assertEquals(\"selected option\", \"b\", group.getSelected());\n+    }\n+\n+    public void testOptionGroupLong() throws Exception\n+    {\n+        OptionGroup group = new OptionGroup();\n+        group.addOption(OptionBuilder.withLongOpt(\"foo\").create());\n+        group.addOption(OptionBuilder.withLongOpt(\"bar\").create());\n+        \n+        Options options = new Options();\n+        options.addOptionGroup(group);\n+        \n+        CommandLine cl = parser.parse(options, new String[] { \"--bar\" });\n+        \n+        assertTrue(cl.hasOption(\"bar\"));\n+        assertEquals(\"selected option\", \"bar\", group.getSelected());\n+    }\n+    \n+    public void testReuseOptionsTwice() throws Exception\n+    {\n+        Options opts = new Options();\n+\t\topts.addOption(OptionBuilder.isRequired().create('v'));\n+\n+        // first parsing\n+        parser.parse(opts, new String[] { \"-v\" });\n+\n+        try\n+        {\n+            // second parsing, with the same Options instance and an invalid command line\n+            parser.parse(opts, new String[0]);\n+            fail(\"MissingOptionException not thrown\");\n+        }\n+        catch (MissingOptionException e)\n+        {\n+            // expected\n+        }\n+    }\n+\n+    public void testBursting() throws Exception\n+    {\n+        String[] args = new String[] { \"-acbtoast\", \"foo\", \"bar\" };\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n+        assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n+    }\n+\n+    public void testUnrecognizedOptionWithBursting() throws Exception\n+    {\n+        String[] args = new String[] { \"-adbtoast\", \"foo\", \"bar\" };\n+\n+        try\n+        {\n+            parser.parse(options, args);\n+            fail(\"UnrecognizedOptionException wasn't thrown\");\n+        }\n+        catch (UnrecognizedOptionException e)\n+        {\n+            assertEquals(\"-adbtoast\", e.getOption());\n+        }\n+    }\n+\n+    public void testMissingArgWithBursting() throws Exception\n+    {\n+        String[] args = new String[] { \"-acb\" };\n+\n+        boolean caught = false;\n+\n+        try\n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (MissingArgumentException e)\n+        {\n+            caught = true;\n+            assertEquals(\"option missing an argument\", \"b\", e.getOption().getOpt());\n+        }\n+\n+        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n+    }\n+\n+    public void testStopBursting() throws Exception\n+    {\n+        String[] args = new String[] { \"-azc\" };\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+        assertFalse( \"Confirm -c is not set\", cl.hasOption(\"c\") );\n+\n+        assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue(cl.getArgList().contains(\"zc\"));\n+    }\n+\n+    public void testStopBursting2() throws Exception\n+    {\n+        String[] args = new String[] { \"-c\", \"foobar\", \"-btoast\" };\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm  2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n+\n+        cl = parser.parse(options, cl.getArgs());\n+\n+        assertTrue(\"Confirm -c is not set\", !cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n+        assertTrue(\"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n+    }\n+\n+    public void testUnlimitedArgs() throws Exception\n+    {\n+        String[] args = new String[]{\"-e\", \"one\", \"two\", \"-f\", \"alpha\"};\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.hasArgs().create(\"e\"));\n+        options.addOption(OptionBuilder.hasArgs().create(\"f\"));\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue(\"Confirm -e is set\", cl.hasOption(\"e\"));\n+        assertEquals(\"number of arg for -e\", 2, cl.getOptionValues(\"e\").length);\n+        assertTrue(\"Confirm -f is set\", cl.hasOption(\"f\"));\n+        assertEquals(\"number of arg for -f\", 1, cl.getOptionValues(\"f\").length);\n+    }\n+\n+    private CommandLine parse(CommandLineParser parser, Options opts, String[] args, Properties properties) throws ParseException {\n+        if (parser instanceof Parser) {\n+            return ((Parser) parser).parse(opts, args, properties);\n+        } else if (parser instanceof DefaultParser) {\n+            return ((DefaultParser) parser).parse(opts, args, properties);\n+        } else {\n+            throw new UnsupportedOperationException(\"Default options not supported by this parser\");\n+        }\n+    }\n+\n+    public void testPropertyOptionSingularValue() throws Exception\n+    {\n+        Options opts = new Options();\n+        opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\"hide\").create());        \n+        \n+        Properties properties = new Properties();\n+        properties.setProperty( \"hide\", \"seek\" );\n+\n+        CommandLine cmd = parse(parser, opts, null, properties);\n+        assertTrue( cmd.hasOption(\"hide\") );\n+        assertEquals( \"seek\", cmd.getOptionValue(\"hide\") );\n+        assertTrue( !cmd.hasOption(\"fake\") );\n+    }\n+\n+    public void testPropertyOptionFlags() throws Exception\n+    {\n+        Options opts = new Options();\n+        opts.addOption(\"a\", false, \"toggle -a\");\n+        opts.addOption(\"c\", \"c\", false, \"toggle -c\");\n+        opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\n+        \n+        Properties properties = new Properties();\n+        properties.setProperty(\"a\", \"true\");\n+        properties.setProperty(\"c\", \"yes\");\n+        properties.setProperty(\"e\", \"1\");\n+        \n+        CommandLine cmd = parse(parser, opts, null, properties);\n+        assertTrue(cmd.hasOption(\"a\"));\n+        assertTrue(cmd.hasOption(\"c\"));\n+        assertTrue(cmd.hasOption(\"e\"));\n+        \n+        \n+        properties = new Properties();\n+        properties.setProperty(\"a\", \"false\");\n+        properties.setProperty(\"c\", \"no\");\n+        properties.setProperty(\"e\", \"0\");\n+        \n+        cmd = parse(parser, opts, null, properties);\n+        assertTrue(!cmd.hasOption(\"a\"));\n+        assertTrue(!cmd.hasOption(\"c\"));\n+        assertTrue(cmd.hasOption(\"e\")); // this option accepts an argument\n+        \n+        \n+        properties = new Properties();\n+        properties.setProperty(\"a\", \"TRUE\");\n+        properties.setProperty(\"c\", \"nO\");\n+        properties.setProperty(\"e\", \"TrUe\");\n+        \n+        cmd = parse(parser, opts, null, properties);\n+        assertTrue(cmd.hasOption(\"a\"));\n+        assertTrue(!cmd.hasOption(\"c\"));\n+        assertTrue(cmd.hasOption(\"e\"));\n+        \n+        \n+        properties = new Properties();\n+        properties.setProperty(\"a\", \"just a string\");\n+        properties.setProperty(\"e\", \"\");\n+        \n+        cmd = parse(parser, opts, null, properties);\n+        assertTrue(!cmd.hasOption(\"a\"));\n+        assertTrue(!cmd.hasOption(\"c\"));\n+        assertTrue(cmd.hasOption(\"e\"));\n+        \n+        \n+        properties = new Properties();\n+        properties.setProperty(\"a\", \"0\");\n+        properties.setProperty(\"c\", \"1\");\n+        \n+        cmd = parse(parser, opts, null, properties);\n+        assertTrue(!cmd.hasOption(\"a\"));\n+        assertTrue(cmd.hasOption(\"c\"));\n+    } \n+\n+    public void testPropertyOptionMultipleValues() throws Exception\n+    {\n+        Options opts = new Options();\n+        opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));\n+        \n+        Properties properties = new Properties();\n+        properties.setProperty( \"k\", \"one,two\" );\n+\n+        String[] values = new String[] { \"one\", \"two\" };\n+\n+        CommandLine cmd = parse(parser, opts, null, properties);\n+        assertTrue( cmd.hasOption(\"k\") );\n+        assertTrue( Arrays.equals( values, cmd.getOptionValues('k') ) );\n+    }\n+\n+    public void testPropertyOverrideValues() throws Exception\n+    {\n+        Options opts = new Options();\n+        opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\n+        opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\n+        \n+        String[] args = new String[] { \"-j\", \"found\", \"-i\", \"ink\" };\n+\n+        Properties properties = new Properties();\n+        properties.setProperty( \"j\", \"seek\" );\n+\n+        CommandLine cmd = parse(parser, opts, args, properties);\n+        assertTrue( cmd.hasOption(\"j\") );\n+        assertEquals( \"found\", cmd.getOptionValue(\"j\") );\n+        assertTrue( cmd.hasOption(\"i\") );\n+        assertEquals( \"ink\", cmd.getOptionValue(\"i\") );\n+        assertTrue( !cmd.hasOption(\"fake\") );\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Vector;\n+\n+import junit.framework.TestCase;\n+\n+/** \n+ * Test case for the PatternOptionBuilder class \n+ *\n+ * @version $Revision$, $Date$\n+ */\n+public class PatternOptionBuilderTest extends TestCase\n+{\n+    public void testSimplePattern() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/m*z#\");\n+        String[] args = new String[] {\"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://commons.apache.org\", \"-z\", \"Thu Jun 06 17:48:57 EDT 2002\", \"-m\", \"test*\"};\n+\n+        CommandLineParser parser = new PosixParser();\n+        CommandLine line = parser.parse(options, args);\n+\n+        assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\n+        assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\n+        assertEquals(\"object flag b\", new Vector(), line.getOptionObject(\"b\"));\n+        assertTrue(\"boolean true flag c\", line.hasOption(\"c\"));\n+        assertFalse(\"boolean false flag d\", line.hasOption(\"d\"));\n+        assertEquals(\"file flag e\", new File(\"build.xml\"), line.getOptionObject(\"e\"));\n+        assertEquals(\"class flag f\", Calendar.class, line.getOptionObject(\"f\"));\n+        assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));\n+        assertEquals(\"url flag t\", new URL(\"http://commons.apache.org\"), line.getOptionObject(\"t\"));\n+\n+        // tests the char methods of CommandLine that delegate to the String methods\n+        assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\n+        assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\n+        assertEquals(\"object flag b\", new Vector(), line.getOptionObject('b'));\n+        assertTrue(\"boolean true flag c\", line.hasOption('c'));\n+        assertFalse(\"boolean false flag d\", line.hasOption('d'));\n+        assertEquals(\"file flag e\", new File(\"build.xml\"), line.getOptionObject('e'));\n+        assertEquals(\"class flag f\", Calendar.class, line.getOptionObject('f'));\n+        assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));\n+        assertEquals(\"url flag t\", new URL(\"http://commons.apache.org\"), line.getOptionObject('t'));\n+\n+        // FILES NOT SUPPORTED YET\n+        try {\n+            assertEquals(\"files flag m\", new File[0], line.getOptionObject('m'));\n+            fail(\"Multiple files are not supported yet, should have failed\");\n+        } catch(UnsupportedOperationException uoe) {\n+            // expected\n+        }\n+\n+        // DATES NOT SUPPORTED YET\n+        try {\n+            assertEquals(\"date flag z\", new Date(1023400137276L), line.getOptionObject('z'));\n+            fail(\"Date is not supported yet, should have failed\");\n+        } catch(UnsupportedOperationException uoe) {\n+            // expected\n+        }\n+    }\n+\n+    public void testEmptyPattern() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"\");\n+        assertTrue(options.getOptions().isEmpty());\n+    }\n+\n+    public void testUntypedPattern() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"abc\");\n+        CommandLineParser parser = new PosixParser();\n+        CommandLine line = parser.parse(options, new String[] { \"-abc\" });\n+\n+        assertTrue(line.hasOption('a'));\n+        assertNull(\"value a\", line.getOptionObject('a'));\n+        assertTrue(line.hasOption('b'));\n+        assertNull(\"value b\", line.getOptionObject('b'));\n+        assertTrue(line.hasOption('c'));\n+        assertNull(\"value c\", line.getOptionObject('c'));\n+    }\n+\n+    public void testNumberPattern() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"n%d%x%\");\n+        CommandLineParser parser = new PosixParser();\n+        CommandLine line = parser.parse(options, new String[] { \"-n\", \"1\", \"-d\", \"2.1\", \"-x\", \"3,5\" });\n+\n+        assertEquals(\"n object class\", Long.class, line.getOptionObject(\"n\").getClass());\n+        assertEquals(\"n value\", new Long(1), line.getOptionObject(\"n\"));\n+\n+        assertEquals(\"d object class\", Double.class, line.getOptionObject(\"d\").getClass());\n+        assertEquals(\"d value\", new Double(2.1), line.getOptionObject(\"d\"));\n+\n+        assertNull(\"x object\", line.getOptionObject(\"x\"));\n+    }\n+\n+    public void testClassPattern() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"c+d+\");\n+        CommandLineParser parser = new PosixParser();\n+        CommandLine line = parser.parse(options, new String[] { \"-c\", \"java.util.Calendar\", \"-d\", \"System.DateTime\" });\n+\n+        assertEquals(\"c value\", Calendar.class, line.getOptionObject(\"c\"));\n+        assertNull(\"d value\", line.getOptionObject(\"d\"));\n+    }\n+\n+    public void testObjectPattern() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"o@i@n@\");\n+        CommandLineParser parser = new PosixParser();\n+        CommandLine line = parser.parse(options, new String[] { \"-o\", \"java.lang.String\", \"-i\", \"java.util.Calendar\", \"-n\", \"System.DateTime\" });\n+\n+        assertEquals(\"o value\", \"\", line.getOptionObject(\"o\"));\n+        assertNull(\"i value\", line.getOptionObject(\"i\"));\n+        assertNull(\"n value\", line.getOptionObject(\"n\"));\n+    }\n+\n+    public void testURLPattern() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"u/v/\");\n+        CommandLineParser parser = new PosixParser();\n+        CommandLine line = parser.parse(options, new String[] { \"-u\", \"http://commons.apache.org\", \"-v\", \"foo://commons.apache.org\" });\n+\n+        assertEquals(\"u value\", new URL(\"http://commons.apache.org\"), line.getOptionObject(\"u\"));\n+        assertNull(\"v value\", line.getOptionObject(\"v\"));\n+    }\n+\n+    public void testExistingFilePattern() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"f<\");\n+        CommandLineParser parser = new PosixParser();\n+        CommandLine line = parser.parse(options, new String[] { \"-f\", \"test.properties\" });\n+\n+        assertEquals(\"f value\", new File(\"test.properties\"), line.getOptionObject(\"f\"));\n+\n+        // todo test if an error is returned if the file doesn't exists (when it's implemented)\n+    }\n+\n+    public void testRequiredOption() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"!n%m%\");\n+        CommandLineParser parser = new PosixParser();\n+\n+        try\n+        {\n+            parser.parse(options, new String[]{\"\"});\n+            fail(\"MissingOptionException wasn't thrown\");\n+        }\n+        catch (MissingOptionException e)\n+        {\n+            assertEquals(1, e.getMissingOptions().size());\n+            assertTrue(e.getMissingOptions().contains(\"n\"));\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/PosixParserTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+/**\n+ * Test case for the PosixParser.\n+ *\n+ * @version $Revision$, $Date$\n+ */\n+public class PosixParserTest extends ParserTestCase\n+{\n+    public void setUp()\n+    {\n+        super.setUp();\n+        parser = new PosixParser();\n+    }\n+\n+    public void testDoubleDash2() throws Exception\n+    {\n+        // not supported by the PosixParser\n+    }\n+    \n+    public void testLongWithoutEqualSingleDash() throws Exception\n+    {\n+        // not supported by the PosixParser\n+    }\n+\n+    public void testAmbiguousLongWithoutEqualSingleDash() throws Exception\n+    {\n+        // not supported by the PosixParser\n+    }\n+    \n+    public void testNegativeOption() throws Exception\n+    {\n+        // not supported by the PosixParser (CLI-184)\n+    }\n+\n+    public void testLongWithUnexpectedArgument1() throws Exception\n+    {\n+        // not supported by the PosixParser\n+    }\n+\n+    public void testLongWithEqualSingleDash() throws Exception\n+    {\n+        // not supported by the PosixParser\n+    }\n+\n+    public void testShortWithEqual() throws Exception\n+    {\n+        // not supported by the PosixParser\n+    }\n+\n+    public void testUnambiguousPartialLongOption4() throws Exception\n+    {\n+        // not supported by the PosixParser\n+    }\n+\n+    public void testAmbiguousPartialLongOption4() throws Exception\n+    {\n+        // not supported by the PosixParser\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/UtilTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author brianegge\n+ */\n+public class UtilTest extends TestCase\n+{\n+    public void testStripLeadingHyphens()\n+    {\n+        assertEquals(\"f\", Util.stripLeadingHyphens(\"-f\"));\n+        assertEquals(\"foo\", Util.stripLeadingHyphens(\"--foo\"));\n+        assertEquals(\"-foo\", Util.stripLeadingHyphens(\"---foo\"));\n+        assertNull(Util.stripLeadingHyphens(null));\n+    }\n+\n+    public void testStripLeadingAndTrailingQuotes()\n+    {\n+        assertEquals(\"foo\", Util.stripLeadingAndTrailingQuotes(\"\\\"foo\\\"\"));\n+        assertEquals(\"foo \\\"bar\\\"\", Util.stripLeadingAndTrailingQuotes(\"foo \\\"bar\\\"\"));\n+        assertEquals(\"\\\"foo\\\" bar\", Util.stripLeadingAndTrailingQuotes(\"\\\"foo\\\" bar\"));\n+        assertEquals(\"\\\"foo\\\" and \\\"bar\\\"\", Util.stripLeadingAndTrailingQuotes(\"\\\"foo\\\" and \\\"bar\\\"\"));\n+        assertEquals(\"\\\"\", Util.stripLeadingAndTrailingQuotes(\"\\\"\"));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/ValueTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import junit.framework.TestCase;\n+\n+public class ValueTest extends TestCase\n+{\n+    private CommandLine _cl = null;\n+    private Options opts = new Options();\n+\n+    public void setUp() throws Exception\n+    {\n+        opts.addOption(\"a\", false, \"toggle -a\");\n+        opts.addOption(\"b\", true, \"set -b\");\n+        opts.addOption(\"c\", \"c\", false, \"toggle -c\");\n+        opts.addOption(\"d\", \"d\", true, \"set -d\");\n+\n+        opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\n+        opts.addOption(OptionBuilder.hasOptionalArg().withLongOpt(\"fish\").create());\n+        opts.addOption(OptionBuilder.hasOptionalArgs().withLongOpt(\"gravy\").create());\n+        opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\"hide\").create());\n+        opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\n+        opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\n+\n+        String[] args = new String[] { \"-a\",\n+            \"-b\", \"foo\",\n+            \"--c\",\n+            \"--d\", \"bar\" \n+        };\n+\n+        Parser parser = new PosixParser();\n+        _cl = parser.parse(opts,args);\n+    }\n+\n+    public void testShortNoArg()\n+    {\n+        assertTrue( _cl.hasOption(\"a\") );\n+        assertNull( _cl.getOptionValue(\"a\") );\n+    }\n+\n+    public void testShortWithArg()\n+    {\n+        assertTrue( _cl.hasOption(\"b\") );\n+        assertNotNull( _cl.getOptionValue(\"b\") );\n+        assertEquals( _cl.getOptionValue(\"b\"), \"foo\");\n+    }\n+\n+    public void testLongNoArg()\n+    {\n+        assertTrue( _cl.hasOption(\"c\") );\n+        assertNull( _cl.getOptionValue(\"c\") );\n+    }\n+\n+    public void testLongWithArg()\n+    {\n+        assertTrue( _cl.hasOption(\"d\") );\n+        assertNotNull( _cl.getOptionValue(\"d\") );\n+        assertEquals( _cl.getOptionValue(\"d\"), \"bar\");\n+    }\n+\n+    public void testShortOptionalArgNoValue() throws Exception\n+    {\n+        String[] args = new String[] { \"-e\" };\n+\n+        Parser parser = new PosixParser();\n+        CommandLine cmd = parser.parse(opts,args);\n+        assertTrue( cmd.hasOption(\"e\") );\n+        assertNull( cmd.getOptionValue(\"e\") );\n+    }\n+\n+    public void testShortOptionalArgValue() throws Exception\n+    {\n+        String[] args = new String[] { \"-e\", \"everything\" };\n+\n+        Parser parser = new PosixParser();\n+        CommandLine cmd = parser.parse(opts,args);\n+        assertTrue( cmd.hasOption(\"e\") );\n+        assertEquals( \"everything\", cmd.getOptionValue(\"e\") );\n+    }\n+\n+    public void testLongOptionalNoValue() throws Exception\n+    {\n+        String[] args = new String[] { \"--fish\" };\n+\n+        Parser parser = new PosixParser();\n+        CommandLine cmd = parser.parse(opts,args);\n+        assertTrue( cmd.hasOption(\"fish\") );\n+        assertNull( cmd.getOptionValue(\"fish\") );\n+    }\n+\n+    public void testLongOptionalArgValue() throws Exception\n+    {\n+        String[] args = new String[] { \"--fish\", \"face\" };\n+\n+        Parser parser = new PosixParser();\n+        CommandLine cmd = parser.parse(opts,args);\n+        assertTrue( cmd.hasOption(\"fish\") );\n+        assertEquals( \"face\", cmd.getOptionValue(\"fish\") );\n+    }\n+\n+    public void testShortOptionalArgValues() throws Exception\n+    {\n+        String[] args = new String[] { \"-j\", \"ink\", \"idea\" };\n+\n+        Parser parser = new PosixParser();\n+        CommandLine cmd = parser.parse(opts,args);\n+        assertTrue( cmd.hasOption(\"j\") );\n+        assertEquals( \"ink\", cmd.getOptionValue(\"j\") );\n+        assertEquals( \"ink\", cmd.getOptionValues(\"j\")[0] );\n+        assertEquals( \"idea\", cmd.getOptionValues(\"j\")[1] );\n+        assertEquals( cmd.getArgs().length, 0 );\n+    }\n+\n+    public void testLongOptionalArgValues() throws Exception\n+    {\n+        String[] args = new String[] { \"--gravy\", \"gold\", \"garden\" };\n+\n+        Parser parser = new PosixParser();\n+        CommandLine cmd = parser.parse(opts,args);\n+        assertTrue( cmd.hasOption(\"gravy\") );\n+        assertEquals( \"gold\", cmd.getOptionValue(\"gravy\") );\n+        assertEquals( \"gold\", cmd.getOptionValues(\"gravy\")[0] );\n+        assertEquals( \"garden\", cmd.getOptionValues(\"gravy\")[1] );\n+        assertEquals( cmd.getArgs().length, 0 );\n+    }\n+\n+    public void testShortOptionalNArgValues() throws Exception\n+    {\n+        String[] args = new String[] { \"-i\", \"ink\", \"idea\", \"isotope\", \"ice\" };\n+\n+        Parser parser = new PosixParser();\n+        CommandLine cmd = parser.parse(opts,args);\n+        assertTrue( cmd.hasOption(\"i\") );\n+        assertEquals( \"ink\", cmd.getOptionValue(\"i\") );\n+        assertEquals( \"ink\", cmd.getOptionValues(\"i\")[0] );\n+        assertEquals( \"idea\", cmd.getOptionValues(\"i\")[1] );\n+        assertEquals( cmd.getArgs().length, 2 );\n+        assertEquals( \"isotope\", cmd.getArgs()[0] );\n+        assertEquals( \"ice\", cmd.getArgs()[1] );\n+    }\n+\n+    public void testLongOptionalNArgValues() throws Exception\n+    {\n+        String[] args = new String[] { \n+            \"--hide\", \"house\", \"hair\", \"head\"\n+        };\n+\n+        Parser parser = new PosixParser();\n+\n+        CommandLine cmd = parser.parse(opts,args);\n+        assertTrue( cmd.hasOption(\"hide\") );\n+        assertEquals( \"house\", cmd.getOptionValue(\"hide\") );\n+        assertEquals( \"house\", cmd.getOptionValues(\"hide\")[0] );\n+        assertEquals( \"hair\", cmd.getOptionValues(\"hide\")[1] );\n+        assertEquals( cmd.getArgs().length, 1 );\n+        assertEquals( \"head\", cmd.getArgs()[0] );\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/ValuesTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import junit.framework.TestCase;\n+import junitx.framework.ArrayAssert;\n+\n+public class ValuesTest extends TestCase\n+{\n+    private CommandLine cmd;\n+\n+    public void setUp() throws Exception\n+    {\n+        Options options = new Options();\n+\n+        options.addOption(\"a\", false, \"toggle -a\");\n+        options.addOption(\"b\", true, \"set -b\");\n+        options.addOption(\"c\", \"c\", false, \"toggle -c\");\n+        options.addOption(\"d\", \"d\", true, \"set -d\");\n+\n+        options.addOption(OptionBuilder.withLongOpt(\"e\").hasArgs().withDescription(\"set -e \").create('e'));\n+        options.addOption(\"f\", \"f\", false, \"jk\");\n+        options.addOption(OptionBuilder.withLongOpt(\"g\").hasArgs(2).withDescription(\"set -g\").create('g'));\n+        options.addOption(OptionBuilder.withLongOpt(\"h\").hasArg().withDescription(\"set -h\").create('h'));\n+        options.addOption(OptionBuilder.withLongOpt(\"i\").withDescription(\"set -i\").create('i'));\n+        options.addOption(OptionBuilder.withLongOpt(\"j\").hasArgs().withDescription(\"set -j\").withValueSeparator('=').create('j'));\n+        options.addOption(OptionBuilder.withLongOpt(\"k\").hasArgs().withDescription(\"set -k\").withValueSeparator('=').create('k'));\n+        options.addOption(OptionBuilder.withLongOpt(\"m\").hasArgs().withDescription(\"set -m\").withValueSeparator().create('m'));\n+\n+        String[] args = new String[] { \"-a\",\n+                                       \"-b\", \"foo\",\n+                                       \"--c\",\n+                                       \"--d\", \"bar\",\n+                                       \"-e\", \"one\", \"two\",\n+                                       \"-f\",\n+                                       \"arg1\", \"arg2\",\n+                                       \"-g\", \"val1\", \"val2\" , \"arg3\",\n+                                       \"-h\", \"val1\", \"-i\",\n+                                       \"-h\", \"val2\",\n+                                       \"-jkey=value\",\n+                                       \"-j\", \"key=value\",\n+                                       \"-kkey1=value1\", \n+                                       \"-kkey2=value2\",\n+                                       \"-mkey=value\"};\n+\n+        CommandLineParser parser = new PosixParser();\n+\n+        cmd = parser.parse(options,args);\n+    }\n+\n+    public void testShortArgs()\n+    {\n+        assertTrue(\"Option a is not set\", cmd.hasOption(\"a\"));\n+        assertTrue(\"Option c is not set\", cmd.hasOption(\"c\"));\n+\n+        assertNull(cmd.getOptionValues(\"a\"));\n+        assertNull(cmd.getOptionValues(\"c\"));\n+    }\n+\n+    public void testShortArgsWithValue()\n+    {\n+        assertTrue(\"Option b is not set\", cmd.hasOption(\"b\"));\n+        assertTrue(cmd.getOptionValue(\"b\").equals(\"foo\"));\n+        assertEquals(1, cmd.getOptionValues(\"b\").length);\n+\n+        assertTrue(\"Option d is not set\", cmd.hasOption(\"d\"));\n+        assertTrue(cmd.getOptionValue(\"d\").equals(\"bar\"));\n+        assertEquals(1, cmd.getOptionValues(\"d\").length);\n+    }\n+\n+    public void testMultipleArgValues()\n+    {\n+        assertTrue(\"Option e is not set\", cmd.hasOption(\"e\"));\n+        ArrayAssert.assertEquals(new String[] { \"one\", \"two\" }, cmd.getOptionValues(\"e\"));\n+    }\n+\n+    public void testTwoArgValues()\n+    {\n+        assertTrue(\"Option g is not set\", cmd.hasOption(\"g\"));\n+        ArrayAssert.assertEquals(new String[] { \"val1\", \"val2\" }, cmd.getOptionValues(\"g\"));\n+    }\n+\n+    public void testComplexValues()\n+    {\n+        assertTrue(\"Option i is not set\", cmd.hasOption(\"i\"));\n+        assertTrue(\"Option h is not set\", cmd.hasOption(\"h\"));\n+        ArrayAssert.assertEquals(new String[] { \"val1\", \"val2\" }, cmd.getOptionValues(\"h\"));\n+    }\n+\n+    public void testExtraArgs()\n+    {\n+        ArrayAssert.assertEquals(\"Extra args\", new String[] { \"arg1\", \"arg2\", \"arg3\" }, cmd.getArgs());\n+    }\n+\n+    public void testCharSeparator()\n+    {\n+        // tests the char methods of CommandLine that delegate to the String methods\n+        assertTrue(\"Option j is not set\", cmd.hasOption(\"j\"));\n+        assertTrue(\"Option j is not set\", cmd.hasOption('j'));\n+        ArrayAssert.assertEquals(new String[] { \"key\", \"value\", \"key\", \"value\" }, cmd.getOptionValues(\"j\"));\n+        ArrayAssert.assertEquals(new String[] { \"key\", \"value\", \"key\", \"value\" }, cmd.getOptionValues('j'));\n+\n+        assertTrue(\"Option k is not set\", cmd.hasOption(\"k\"));\n+        assertTrue(\"Option k is not set\", cmd.hasOption('k'));\n+        ArrayAssert.assertEquals(new String[] { \"key1\", \"value1\", \"key2\", \"value2\" }, cmd.getOptionValues(\"k\"));\n+        ArrayAssert.assertEquals(new String[] { \"key1\", \"value1\", \"key2\", \"value2\" }, cmd.getOptionValues('k'));\n+\n+        assertTrue(\"Option m is not set\", cmd.hasOption(\"m\"));\n+        assertTrue(\"Option m is not set\", cmd.hasOption('m'));\n+        ArrayAssert.assertEquals(new String[] { \"key\", \"value\" }, cmd.getOptionValues(\"m\"));\n+        ArrayAssert.assertEquals(new String[] { \"key\", \"value\" }, cmd.getOptionValues('m'));\n+    }\n+\n+    /**\n+     * jkeyes - commented out this test as the new architecture\n+     * breaks this type of functionality.  I have left the test \n+     * here in case I get a brainwave on how to resolve this.\n+     */\n+    /*\n+    public void testGetValue()\n+    {\n+        // the 'm' option\n+        assertTrue( _option.getValues().length == 2 );\n+        assertEquals( _option.getValue(), \"key\" );\n+        assertEquals( _option.getValue( 0 ), \"key\" );\n+        assertEquals( _option.getValue( 1 ), \"value\" );\n+\n+        try {\n+            assertEquals( _option.getValue( 2 ), \"key\" );\n+            fail( \"IndexOutOfBounds not caught\" );\n+        }\n+        catch( IndexOutOfBoundsException exp ) {\n+            \n+        }\n+\n+        try {\n+            assertEquals( _option.getValue( -1 ), \"key\" );\n+            fail( \"IndexOutOfBounds not caught\" );\n+        }\n+        catch( IndexOutOfBoundsException exp ) {\n+\n+        }\n+    }\n+    */\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI133Test.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli.bug;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author brianegge\n+ */\n+public class BugCLI133Test extends TestCase {\n+    public void testOrder() throws ParseException {\n+        Option optionA = new Option(\"a\", \"first\");\n+        Options opts = new Options();\n+        opts.addOption(optionA);\n+        PosixParser posixParser = new PosixParser();\n+        CommandLine line = posixParser.parse(opts, null);\n+        assertFalse(line.hasOption(null));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI13Test.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli.bug;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author brianegge\n+ */\n+public class BugCLI13Test extends TestCase\n+{\n+    public void testCLI13() throws ParseException\n+    {\n+        final String debugOpt = \"debug\";\n+        Option debug = OptionBuilder\n+            .withArgName( debugOpt )\n+            .withDescription( \"turn on debugging\" )\n+            .withLongOpt( debugOpt )\n+            .hasArg()\n+            .create( 'd' );\n+        Options options = new Options();\n+        options.addOption( debug );\n+        CommandLine commandLine = new PosixParser().parse( options, new String[]{\"-d\", \"true\"} );\n+\n+        assertEquals(\"true\", commandLine.getOptionValue( debugOpt ));\n+        assertEquals(\"true\", commandLine.getOptionValue( 'd' ));\n+        assertTrue(commandLine.hasOption( 'd'));\n+        assertTrue(commandLine.hasOption( debugOpt));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli.bug;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.PosixParser;\n+\n+/**\n+ * http://issues.apache.org/jira/browse/CLI-148\n+ *\n+ * @author brianegge\n+ */\n+public class BugCLI148Test  extends TestCase\n+{    \n+    private Options options;\n+\n+    protected void setUp() throws Exception\n+    {\n+        options = new Options();\n+        options.addOption(OptionBuilder.hasArg().create('t'));\n+        options.addOption(OptionBuilder.hasArg().create('s'));\n+    }\n+\n+    public void testWorkaround1() throws Exception\n+    {\n+        CommandLineParser parser = new PosixParser();\n+        String[] args = new String[]{ \"-t-something\" };\n+\n+        CommandLine commandLine = parser.parse(options, args);\n+        assertEquals(\"-something\", commandLine.getOptionValue('t'));\n+    }\n+\n+    public void testWorkaround2() throws Exception\n+    {\n+        CommandLineParser parser = new PosixParser();\n+        String[] args = new String[]{ \"-t\", \"\\\"-something\\\"\" };\n+\n+        CommandLine commandLine = parser.parse(options, args);\n+        assertEquals(\"-something\", commandLine.getOptionValue('t'));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.commons.cli.bug;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.ParameterMetaData;\n+import java.sql.Types;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.OptionGroup;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+\n+public class BugCLI162Test extends TestCase {\n+    /** Constant for the line separator.*/\n+    private static final String CR = System.getProperty(\"line.separator\");\n+\n+    public void testInfiniteLoop() {\n+        Options options = new Options();\n+        options.addOption(\"h\", \"help\", false, \"This is a looooong description\");\n+        HelpFormatter formatter = new HelpFormatter();\n+        formatter.setWidth(20);\n+        formatter.printHelp(\"app\", options); // used to hang & crash\n+    }\n+\n+    public void testPrintHelpLongLines() throws ParseException, IOException {\n+        // Constants used for options\n+        final String OPT = \"-\";\n+\n+        final String OPT_COLUMN_NAMES = \"l\";\n+\n+        final String OPT_CONNECTION = \"c\";\n+\n+        final String OPT_DESCRIPTION = \"e\";\n+\n+        final String OPT_DRIVER = \"d\";\n+\n+        final String OPT_DRIVER_INFO = \"n\";\n+\n+        final String OPT_FILE_BINDING = \"b\";\n+\n+        final String OPT_FILE_JDBC = \"j\";\n+\n+        final String OPT_FILE_SFMD = \"f\";\n+\n+        final String OPT_HELP = \"h\";\n+\n+        final String OPT_HELP_ = \"help\";\n+\n+        final String OPT_INTERACTIVE = \"i\";\n+\n+        final String OPT_JDBC_TO_SFMD = \"2\";\n+\n+        final String OPT_JDBC_TO_SFMD_L = \"jdbc2sfmd\";\n+\n+        final String OPT_METADATA = \"m\";\n+\n+        final String OPT_PARAM_MODES_INT = \"o\";\n+\n+        final String OPT_PARAM_MODES_NAME = \"O\";\n+\n+        final String OPT_PARAM_NAMES = \"a\";\n+\n+        final String OPT_PARAM_TYPES_INT = \"y\";\n+\n+        final String OPT_PARAM_TYPES_NAME = \"Y\";\n+\n+        final String OPT_PASSWORD = \"p\";\n+\n+        final String OPT_PASSWORD_L = \"password\";\n+\n+        final String OPT_SQL = \"s\";\n+\n+        final String OPT_SQL_L = \"sql\";\n+\n+        final String OPT_SQL_SPLIT_DEFAULT = \"###\";\n+\n+        final String OPT_SQL_SPLIT_L = \"splitSql\";\n+\n+        final String OPT_STACK_TRACE = \"t\";\n+\n+        final String OPT_TIMING = \"g\";\n+\n+        final String OPT_TRIM_L = \"trim\";\n+\n+        final String OPT_USER = \"u\";\n+\n+        final String OPT_WRITE_TO_FILE = \"w\";\n+\n+        final String _PMODE_IN = \"IN\";\n+\n+        final String _PMODE_INOUT = \"INOUT\";\n+\n+        final String _PMODE_OUT = \"OUT\";\n+\n+        final String _PMODE_UNK = \"Unknown\";\n+\n+        final String PMODES = _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\n+\n+        // Options build\n+        Options commandLineOptions;\n+        commandLineOptions = new Options();\n+        commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\n+        commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\n+        commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \"\n+            + OPT\n+            + OPT_CONNECTION\n+            + \" is not specified, all drivers on the classpath are displayed.\");\n+        commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\n+        commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\n+        commandLineOptions\n+                .addOption(\n+                        OPT_PASSWORD,\n+                        OPT_PASSWORD_L,\n+                        true,\n+                        \"The database password for the user specified with the \"\n+                            + OPT\n+                            + OPT_USER\n+                            + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\n+        commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\");\n+        commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\n+        commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\n+        commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\n+        commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\n+        commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true,\n+                \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\n+        commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false,\n+                \"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\");\n+        commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\n+        commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\n+        commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\n+        Option option = new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \"\n+            + OPT\n+            + OPT_COLUMN_NAMES\n+            + \" \\\"cname1 cname2\\\"\");\n+        commandLineOptions.addOption(option);\n+        option = new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \"\n+            + OPT\n+            + OPT_PARAM_NAMES\n+            + \" \\\"pname1 pname2\\\"\");\n+        commandLineOptions.addOption(option);\n+        //\n+        OptionGroup pOutTypesOptionGroup = new OptionGroup();\n+        String pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\n+        final String typesClassName = Types.class.getName();\n+        option = new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \"\n+            + typesClassName\n+            + \". \"\n+            + pOutTypesOptionGroupDoc\n+            + \" Example: \"\n+            + OPT\n+            + OPT_PARAM_TYPES_INT\n+            + \" \\\"-10 12\\\"\");\n+        commandLineOptions.addOption(option);\n+        option = new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \"\n+            + typesClassName\n+            + \" names. \"\n+            + pOutTypesOptionGroupDoc\n+            + \" Example: \"\n+            + OPT\n+            + OPT_PARAM_TYPES_NAME\n+            + \" \\\"CURSOR VARCHAR\\\"\");\n+        commandLineOptions.addOption(option);\n+        commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\n+        //\n+        OptionGroup modesOptionGroup = new OptionGroup();\n+        String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\n+        option = new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\"\n+            + ParameterMetaData.parameterModeIn\n+            + \"=IN, \"\n+            + ParameterMetaData.parameterModeInOut\n+            + \"=INOUT, \"\n+            + ParameterMetaData.parameterModeOut\n+            + \"=OUT, \"\n+            + ParameterMetaData.parameterModeUnknown\n+            + \"=Unknown\"\n+            + \"). \"\n+            + modesOptionGroupDoc\n+            + \" Example for 2 parameters, OUT and IN: \"\n+            + OPT\n+            + OPT_PARAM_MODES_INT\n+            + \" \\\"\"\n+            + ParameterMetaData.parameterModeOut\n+            + \" \"\n+            + ParameterMetaData.parameterModeIn\n+            + \"\\\"\");\n+        modesOptionGroup.addOption(option);\n+        option = new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\"\n+            + PMODES\n+            + \"). \"\n+            + modesOptionGroupDoc\n+            + \" Example for 2 parameters, OUT and IN: \"\n+            + OPT\n+            + OPT_PARAM_MODES_NAME\n+            + \" \\\"\"\n+            + _PMODE_OUT\n+            + \" \"\n+            + _PMODE_IN\n+            + \"\\\"\");\n+        modesOptionGroup.addOption(option);\n+        commandLineOptions.addOptionGroup(modesOptionGroup);\n+        option = new Option(null, OPT_TRIM_L, true,\n+                \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\n+        option.setOptionalArg(true);\n+        commandLineOptions.addOption(option);\n+        option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true,\n+                \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\n+        option.setArgs(2);\n+        commandLineOptions.addOption(option);\n+        new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\n+    }\n+\n+    public void testLongLineChunking() throws ParseException, IOException {\n+        Options options = new Options();\n+        options.addOption(\"x\", \"extralongarg\", false,\n+                                     \"This description has ReallyLongValuesThatAreLongerThanTheWidthOfTheColumns \" +\n+                                     \"and also other ReallyLongValuesThatAreHugerAndBiggerThanTheWidthOfTheColumnsBob, \" +\n+                                     \"yes. \");\n+        HelpFormatter formatter = new HelpFormatter();\n+        StringWriter sw = new StringWriter();\n+        formatter.printHelp(new PrintWriter(sw), 35, this.getClass().getName(), \"Header\", options, 0, 5, \"Footer\");\n+        String expected = \"usage:\" + CR +\n+                          \"       org.apache.commons.cli.bug.B\" + CR +\n+                          \"       ugCLI162Test\" + CR +\n+                          \"Header\" + CR +\n+                          \"-x,--extralongarg     This\" + CR +\n+                          \"                      description\" + CR +\n+                          \"                      has\" + CR +\n+                          \"                      ReallyLongVal\" + CR +\n+                          \"                      uesThatAreLon\" + CR +\n+                          \"                      gerThanTheWid\" + CR +\n+                          \"                      thOfTheColumn\" + CR +\n+                          \"                      s and also\" + CR +\n+                          \"                      other\" + CR +\n+                          \"                      ReallyLongVal\" + CR +\n+                          \"                      uesThatAreHug\" + CR +\n+                          \"                      erAndBiggerTh\" + CR +\n+                          \"                      anTheWidthOfT\" + CR +\n+                          \"                      heColumnsBob,\" + CR +\n+                          \"                      yes.\" + CR +\n+                          \"Footer\" + CR;\n+        assertEquals( \"Long arguments did not split as expected\", expected, sw.toString() );\n+    }\n+\n+    public void testLongLineChunkingIndentIgnored() throws ParseException, IOException {\n+        Options options = new Options();\n+        options.addOption(\"x\", \"extralongarg\", false, \"This description is Long.\" );\n+        HelpFormatter formatter = new HelpFormatter();\n+        StringWriter sw = new StringWriter();\n+        formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \"Header\", options, 0, 5, \"Footer\");\n+        System.err.println(sw.toString());\n+        String expected = \"usage:\" + CR +\n+                          \"       org.apache.comm\" + CR +\n+                          \"       ons.cli.bug.Bug\" + CR +\n+                          \"       CLI162Test\" + CR +\n+                          \"Header\" + CR +\n+                          \"-x,--extralongarg\" + CR +\n+                          \" This description is\" + CR +\n+                          \" Long.\" + CR +\n+                          \"Footer\" + CR;\n+        assertEquals( \"Long arguments did not split as expected\", expected, sw.toString() );\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI18Test.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli.bug;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * http://issues.apache.org/jira/browse/CLI-18\n+ */\n+public class BugCLI18Test extends TestCase\n+{\n+    public void testCLI18()\n+    {\n+        Options options = new Options();\n+        options.addOption(new Option(\"a\", \"aaa\", false, \"aaaaaaa\"));\n+        options.addOption(new Option(null, \"bbb\", false, \"bbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f\"));\n+        options.addOption(new Option(\"c\", null, false, \"ccccccc\"));\n+\n+        HelpFormatter formatter = new HelpFormatter();\n+        StringWriter out = new StringWriter();\n+\n+        formatter.printHelp(new PrintWriter(out), 80, \"foobar\", \"dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s\", options, 2, 2, \"blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh\" + '\\r' + '\\n' + \"rarrr\", true);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.commons.cli.bug;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.MissingArgumentException;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.PosixParser;\n+\n+import junit.framework.TestCase;\n+\n+public class BugCLI71Test extends TestCase {\n+\n+    private Options options;\n+    private CommandLineParser parser;\n+\n+    public void setUp() {\n+        options = new Options();\n+\n+        Option algorithm = new Option(\"a\" , \"algo\", true, \"the algorithm which it to perform executing\");\n+        algorithm.setArgName(\"algorithm name\");\n+        options.addOption(algorithm);\n+\n+        Option key = new Option(\"k\" , \"key\", true, \"the key the setted algorithm uses to process\");\n+        algorithm.setArgName(\"value\");\n+        options.addOption(key);\n+\n+        parser = new PosixParser();\n+    }\n+\n+    public void testBasic() throws Exception {\n+        String[] args = new String[] { \"-a\", \"Caesar\", \"-k\", \"A\" };\n+        CommandLine line = parser.parse( options, args);\n+        assertEquals( \"Caesar\", line.getOptionValue(\"a\") );\n+        assertEquals( \"A\", line.getOptionValue(\"k\") );\n+    }\n+\n+    public void testMistakenArgument() throws Exception {\n+        String[] args = new String[] { \"-a\", \"Caesar\", \"-k\", \"A\" };\n+        CommandLine line = parser.parse( options, args);\n+        args = new String[] { \"-a\", \"Caesar\", \"-k\", \"a\" };\n+        line = parser.parse( options, args);\n+        assertEquals( \"Caesar\", line.getOptionValue(\"a\") );\n+        assertEquals( \"a\", line.getOptionValue(\"k\") );\n+    }\n+\n+    public void testLackOfError() throws Exception {\n+        String[] args = new String[] { \"-k\", \"-a\",  \"Caesar\" };\n+        try {\n+            CommandLine line = parser.parse( options, args);\n+            fail(\"MissingArgumentException expected\");\n+        } catch(MissingArgumentException e) {\n+            assertEquals(\"option missing an argument\", \"k\", e.getOption().getOpt());\n+        }\n+    }\n+\n+    public void testGetsDefaultIfOptional() throws Exception {\n+        String[] args = new String[] { \"-k\", \"-a\", \"Caesar\" };\n+        options.getOption(\"k\").setOptionalArg(true);\n+        CommandLine line = parser.parse( options, args);\n+        \n+        assertEquals( \"Caesar\", line.getOptionValue(\"a\") );\n+        assertEquals( \"a\", line.getOptionValue(\"k\", \"a\") );\n+    }\n+\n+}", "timestamp": 1276681286, "metainfo": ""}