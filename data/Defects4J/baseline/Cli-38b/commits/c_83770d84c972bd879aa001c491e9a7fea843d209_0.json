{"sha": "83770d84c972bd879aa001c491e9a7fea843d209", "log": "Split of testPrintWrapped() into smaller test methods  ", "commit": "\n--- a/src/test/java/org/apache/commons/cli/HelpFormatterTest.java\n+++ b/src/test/java/org/apache/commons/cli/HelpFormatterTest.java\n         HelpFormatter hf = new HelpFormatter();\n \n         String text = \"This is a test.\";\n-        //text width should be max 8; the wrap position is 7\n+        // text width should be max 8; the wrap position is 7\n         assertEquals(\"wrap position\", 7, hf.findWrapPos(text, 8, 0));\n-        //starting from 8 must give -1 - the wrap pos is after end\n+        \n+        // starting from 8 must give -1 - the wrap pos is after end\n         assertEquals(\"wrap position 2\", -1, hf.findWrapPos(text, 8, 8));\n-        //if there is no a good position before width to make a wrapping look for the next one\n+        \n+        // if there is no a good position before width to make a wrapping look for the next one\n         text = \"aaaa aa\";\n         assertEquals(\"wrap position 3\", 4, hf.findWrapPos(text, 3, 0));\n     }\n \n-    public void testPrintWrapped() throws Exception\n-    {\n+    public void testRenderWrappedTextSingleLine()\n+    {\n+        // single line text\n+        int width = 12;\n+        int padding = 0;\n+        String text = \"This is a test.\";\n+        String expected = \"This is a\" + EOL + \n+                          \"test.\";\n+        \n         StringBuffer sb = new StringBuffer();\n-        HelpFormatter hf = new HelpFormatter();\n-\n+        new HelpFormatter().renderWrappedText(sb, width, padding, text);\n+        assertEquals(\"single line text\", expected, sb.toString());\n+    }\n+\n+    public void testRenderWrappedTextSingleLinePadded()\n+    {\n+        // single line padded text\n+        int width = 12;\n+        int padding = 4;\n         String text = \"This is a test.\";\n-\n-        String expected = \"This is a\" + hf.getNewLine() + \"test.\";\n-        hf.renderWrappedText(sb, 12, 0, text);\n-        assertEquals(\"single line text\", expected, sb.toString());\n-\n-        sb.setLength(0);\n-        expected = \"This is a\" + hf.getNewLine() + \"    test.\";\n-        hf.renderWrappedText(sb, 12, 4, text);\n+        String expected = \"This is a\" + EOL + \n+                          \"    test.\";\n+        \n+        StringBuffer sb = new StringBuffer();\n+        new HelpFormatter().renderWrappedText(sb, width, padding, text);\n         assertEquals(\"single line padded text\", expected, sb.toString());\n-\n-        text = \"  -p,--period <PERIOD>  PERIOD is time duration of form \" +\n-               \"DATE[-DATE] where DATE has form YYYY[MM[DD]]\";\n-\n-        sb.setLength(0);\n-        expected = \"  -p,--period <PERIOD>  PERIOD is time duration of\" +\n-                hf.getNewLine() +\n-                \"                        form DATE[-DATE] where DATE\" +\n-                hf.getNewLine() +\n-                \"                        has form YYYY[MM[DD]]\";\n-        hf.renderWrappedText(sb, 53, 24, text);\n+    }\n+\n+    public void testRenderWrappedTextSingleLinePadded2()\n+    {\n+        // single line padded text 2\n+        int width = 53;\n+        int padding = 24;\n+        String text = \"  -p,--period <PERIOD>  PERIOD is time duration of form \" +\n+                      \"DATE[-DATE] where DATE has form YYYY[MM[DD]]\";\n+        String expected = \"  -p,--period <PERIOD>  PERIOD is time duration of\" + EOL +\n+                          \"                        form DATE[-DATE] where DATE\" + EOL +\n+                          \"                        has form YYYY[MM[DD]]\";\n+        \n+        StringBuffer sb = new StringBuffer();\n+        new HelpFormatter().renderWrappedText(sb, width, padding, text);\n         assertEquals(\"single line padded text 2\", expected, sb.toString());\n-\n-        text = \"aaaa aaaa aaaa\" + hf.getNewLine() +\n-               \"aaaaaa\" + hf.getNewLine() +\n-               \"aaaaa\";\n-\n-        expected = text;\n-        sb.setLength(0);\n-        hf.renderWrappedText(sb, 16, 0, text);\n+    }\n+\n+    public void testRenderWrappedTextMultiLine()\n+    {\n+        // multi line text\n+        int width = 16;\n+        int padding = 0;\n+        String text = \"aaaa aaaa aaaa\" + EOL +\n+                      \"aaaaaa\" + EOL +\n+                      \"aaaaa\";\n+        String expected = text;\n+        \n+        StringBuffer sb = new StringBuffer();\n+        new HelpFormatter().renderWrappedText(sb, width, padding, text);\n         assertEquals(\"multi line text\", expected, sb.toString());\n-\n-        expected = \"aaaa aaaa aaaa\" + hf.getNewLine() +\n-                   \"    aaaaaa\" + hf.getNewLine() +\n-                   \"    aaaaa\";\n-        sb.setLength(0);\n-        hf.renderWrappedText(sb, 16, 4, text);\n+    }\n+\n+    public void testRenderWrappedTextMultiLinePadded()\n+    {\n+        // multi-line padded text\n+        int width = 16;\n+        int padding = 4;\n+        String text = \"aaaa aaaa aaaa\" + EOL +\n+                      \"aaaaaa\" + EOL +\n+                      \"aaaaa\";\n+        String expected = \"aaaa aaaa aaaa\" + EOL +\n+                          \"    aaaaaa\" + EOL +\n+                          \"    aaaaa\";\n+        \n+        StringBuffer sb = new StringBuffer();\n+        new HelpFormatter().renderWrappedText(sb, width, padding, text);\n         assertEquals(\"multi-line padded text\", expected, sb.toString());\n     }\n \n         assertEquals(\"simple non-wrapped option\", expected, sb.toString());\n \n         int nextLineTabStop = leftPad + descPad + \"-a\".length();\n-        expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa\" + hf.getNewLine() +\n+        expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa\" + EOL +\n                    hf.createPadding(nextLineTabStop) + \"aaaa aaaa\";\n         sb.setLength(0);\n         hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad);\n         assertEquals(\"long non-wrapped option\", expected, sb.toString());\n \n         nextLineTabStop = leftPad + descPad + \"-a,--aaa\".length();\n-        expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.getNewLine() +\n+        expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + EOL +\n                    hf.createPadding(nextLineTabStop) + \"dddd dddd\";\n         sb.setLength(0);\n         hf.renderOptions(sb, 25, options, leftPad, descPad);\n         options = new Options().\n                 addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\").\n                 addOption(\"b\", false, \"feeee eeee eeee eeee\");\n-        expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.getNewLine() +\n-                   hf.createPadding(nextLineTabStop) + \"dddd dddd\" + hf.getNewLine() +\n-                   lpad + \"-b      \" + dpad + \"feeee eeee\" + hf.getNewLine() +\n+        expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + EOL +\n+                   hf.createPadding(nextLineTabStop) + \"dddd dddd\" + EOL +\n+                   lpad + \"-b      \" + dpad + \"feeee eeee\" + EOL +\n                    hf.createPadding(nextLineTabStop) + \"eeee eeee\";\n         sb.setLength(0);\n         hf.renderOptions(sb, 25, options, leftPad, descPad);", "timestamp": 1277075002, "metainfo": ""}