{"sha": "ace122cc24c7e7b396b7071654702d857bbd23ab", "log": "Code style  ", "commit": "\n--- a/src/java/org/apache/commons/cli/CommandLine.java\n+++ b/src/java/org/apache/commons/cli/CommandLine.java\n      * @throws ParseException if there are problems turning the option value into the desired type\n      * @see PatternOptionBuilder\n      */\n-    public Object getParsedOptionValue(String opt)\n-    throws ParseException\n+    public Object getParsedOptionValue(String opt) throws ParseException\n     {\n         String res = getOptionValue(opt);\n \n--- a/src/java/org/apache/commons/cli/TypeHandler.java\n+++ b/src/java/org/apache/commons/cli/TypeHandler.java\n      * @return The instance of <code>obj</code> initialised with\n      * the value of <code>str</code>.\n      */\n-    public static Object createValue(String str, Object obj)\n-    throws ParseException\n+    public static Object createValue(String str, Object obj) throws ParseException\n     {\n         return createValue(str, (Class) obj);\n     }\n      * @return The instance of <code>clazz</code> initialised with\n      * the value of <code>str</code>.\n      */\n-    public static Object createValue(String str, Class clazz)\n-    throws ParseException\n+    public static Object createValue(String str, Class clazz) throws ParseException\n     {\n         if (PatternOptionBuilder.STRING_VALUE == clazz)\n         {\n       * @return the initialised object, or null if it couldn't create\n       * the Object.\n       */\n-    public static Object createObject(String classname)\n-    throws ParseException\n+    public static Object createObject(String classname) throws ParseException\n     {\n         Class cl = null;\n \n      * @return the number represented by <code>str</code>, if <code>str</code>\n      * is not a number, null is returned.\n      */\n-    public static Number createNumber(String str)\n-    throws ParseException\n+    public static Number createNumber(String str) throws ParseException\n     {\n         try\n         {\n      * @param classname the class name\n      * @return The class if it is found, otherwise return null\n      */\n-    public static Class createClass(String classname)\n-    throws ParseException\n+    public static Class createClass(String classname) throws ParseException\n     {\n         try\n         {\n      * @return The date if <code>str</code> is a valid date string,\n      * otherwise return null.\n      */\n-    public static Date createDate(String str)\n-    throws ParseException\n+    public static Date createDate(String str) throws ParseException\n     {\n         throw new UnsupportedOperationException(\"Not yet implemented\");\n     }\n      * @return The URL is <code>str</code> is well-formed, otherwise\n      * return null.\n      */\n-    public static URL createURL(String str)\n-    throws ParseException\n+    public static URL createURL(String str) throws ParseException\n     {\n         try\n         {\n      * @param str the File location\n      * @return The file represented by <code>str</code>.\n      */\n-    public static File createFile(String str)\n-    throws ParseException\n+    public static File createFile(String str) throws ParseException\n     {\n         return new File(str);\n     }\n      * @param str the paths to the files\n      * @return The File[] represented by <code>str</code>.\n      */\n-    public static File[] createFiles(String str)\n-    throws ParseException\n+    public static File[] createFiles(String str) throws ParseException\n     {\n         // to implement/port:\n         //        return FileW.findFiles(str);", "timestamp": 1243413477, "metainfo": ""}