{"sha": "d01e6b5421ea3b389d858a233530a47b8c7e7353", "log": "[CSV-105] Add Map conversion API to CSVRecord.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n \n import java.io.Serializable;\n import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.Map.Entry;\n \n /**\n  * A CSV record parsed from a CSV file.\n     }\n \n     /**\n+     * Puts all values of this record into the given Map.\n+     * \n+     * @param map The Map to populate.\n+     * @return the given map.\n+     */\n+    public Map<String, String> putIn(Map<String, String> map) {\n+        for (Entry<String, Integer> entry : mapping.entrySet()) {\n+            map.put(entry.getKey(), values[entry.getValue().intValue()]);\n+        }\n+        return map;\n+    }\n+\n+    /**\n      * Returns the number of values in this record.\n      *\n      * @return the number of values.\n      */\n     public int size() {\n         return values.length;\n+    }\n+\n+    /**\n+     * Converts this record into a Map.\n+     * \n+     * @return A new Map. The map is empty if the record has no headers.\n+     */\n+    public Map<String, String> toMap() {\n+        return putIn(new HashMap<String, String>(values.length));\n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/csv/CSVRecordTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVRecordTest.java\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import org.junit.Before;\n import org.junit.Test;\n \n     @Before\n     public void setUp() throws Exception {\n-        values = new String[] { \"first\", \"second\", \"third\" };\n+        values = new String[] { \"A\", \"B\", \"C\" };\n         record = new CSVRecord(values, null, null, 0);\n         header = new HashMap<String, Integer>();\n         header.put(\"first\", Integer.valueOf(0));\n         }\n     }\n \n+    @Test\n+    public void testPutInMap() {\n+        Map<String, String> map = new ConcurrentHashMap<String, String>();\n+        this.recordWithHeader.putIn(map);\n+        this.validateMap(map, false);\n+    }\n+\n+    @Test\n+    public void testToMap() {\n+        Map<String, String> map = this.recordWithHeader.toMap();\n+        this.validateMap(map, true);\n+    }\n+\n+    private void validateMap(Map<String, String> map, boolean allowsNulls) {\n+        assertTrue(map.containsKey(\"first\"));\n+        assertTrue(map.containsKey(\"second\"));\n+        assertTrue(map.containsKey(\"third\"));\n+        assertFalse(map.containsKey(\"fourth\"));\n+        if (allowsNulls) {\n+            assertFalse(map.containsKey(null));\n+        }\n+        assertEquals(\"A\", map.get(\"first\"));\n+        assertEquals(\"B\", map.get(\"second\"));\n+        assertEquals(\"C\", map.get(\"third\"));\n+        assertEquals(null, map.get(\"fourth\"));\n+    }\n+\n }", "timestamp": 1390270322, "metainfo": ""}