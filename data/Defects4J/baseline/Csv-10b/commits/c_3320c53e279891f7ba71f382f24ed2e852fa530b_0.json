{"sha": "3320c53e279891f7ba71f382f24ed2e852fa530b", "log": "Sort members.  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n  */\n public class CSVFormatTest {\n \n+    private static void assertNotEquals(final Object right, final Object left) {\n+        assertFalse(right.equals(left));\n+        assertFalse(left.equals(right));\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void testDelimiterSameAsCommentStartThrowsException() {\n+        CSVFormat.DEFAULT.withDelimiter('!').withCommentStart('!').validate();\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void testDelimiterSameAsEscapeThrowsException() {\n+        CSVFormat.DEFAULT.withDelimiter('!').withEscape('!').validate();\n+    }\n+\n+    @Test\n+    public void testEquals() {\n+        final CSVFormat right = CSVFormat.DEFAULT;\n+        final CSVFormat left = CSVFormat.copy(right);\n+\n+        assertFalse(right.equals(null));\n+        assertFalse(right.equals(\"A String Instance\"));\n+\n+        assertEquals(right, right);\n+        assertEquals(right, left);\n+        assertEquals(left, right);\n+\n+        assertEquals(right.hashCode(), right.hashCode());\n+        assertEquals(right.hashCode(), left.hashCode());\n+    }\n+\n+    @Test\n+    public void testEqualsCommentStart() {\n+        final CSVFormat right = CSVFormat.newFormat('\\'')\n+                .withQuoteChar('\"')\n+                .withCommentStart('#')\n+                .withQuotePolicy(Quote.ALL);\n+        final CSVFormat left = CSVFormat.copy(right)\n+                .withCommentStart('!');\n+\n+        assertNotEquals(right, left);\n+    }\n+\n+    @Test\n+    public void testEqualsDelimiter() {\n+        final CSVFormat right = CSVFormat.newFormat('!');\n+        final CSVFormat left = CSVFormat.newFormat('?');\n+\n+        assertNotEquals(right, left);\n+    }\n+\n+    @Test\n+    public void testEqualsEscape() {\n+        final CSVFormat right = CSVFormat.newFormat('\\'')\n+                .withQuoteChar('\"')\n+                .withCommentStart('#')\n+                .withEscape('+')\n+                .withQuotePolicy(Quote.ALL);\n+        final CSVFormat left = CSVFormat.copy(right)\n+                .withEscape('!');\n+\n+        assertNotEquals(right, left);\n+    }\n+\n+    @Test\n+    public void testEqualsHeader() {\n+        final CSVFormat right = CSVFormat.newFormat('\\'')\n+                .withRecordSeparator('*')\n+                .withCommentStart('#')\n+                .withEscape('+')\n+                .withHeader(\"One\", \"Two\", \"Three\")\n+                .withIgnoreEmptyLines(true)\n+                .withIgnoreSurroundingSpaces(true)\n+                .withQuoteChar('\"')\n+                .withQuotePolicy(Quote.ALL);\n+        final CSVFormat left = CSVFormat.copy(right)\n+                .withHeader(\"Three\", \"Two\", \"One\");\n+\n+        assertNotEquals(right, left);\n+    }\n+\n+    @Test\n+    public void testEqualsIgnoreEmptyLines() {\n+        final CSVFormat right = CSVFormat.newFormat('\\'')\n+                .withCommentStart('#')\n+                .withEscape('+')\n+                .withIgnoreEmptyLines(true)\n+                .withIgnoreSurroundingSpaces(true)\n+                .withQuoteChar('\"')\n+                .withQuotePolicy(Quote.ALL);\n+        final CSVFormat left = CSVFormat.copy(right)\n+                .withIgnoreEmptyLines(false);\n+\n+        assertNotEquals(right, left);\n+    }\n+\n+    @Test\n+    public void testEqualsIgnoreSurroundingSpaces() {\n+        final CSVFormat right = CSVFormat.newFormat('\\'')\n+                .withCommentStart('#')\n+                .withEscape('+')\n+                .withIgnoreSurroundingSpaces(true)\n+                .withQuoteChar('\"')\n+                .withQuotePolicy(Quote.ALL);\n+        final CSVFormat left = CSVFormat.copy(right)\n+                .withIgnoreSurroundingSpaces(false);\n+\n+        assertNotEquals(right, left);\n+    }\n+\n+    @Test\n+    public void testEqualsQuoteChar() {\n+        final CSVFormat right = CSVFormat.newFormat('\\'').withQuoteChar('\"');\n+        final CSVFormat left = CSVFormat.copy(right).withQuoteChar('!');\n+\n+        assertNotEquals(right, left);\n+    }\n+\n+    @Test\n+    public void testEqualsQuotePolicy() {\n+        final CSVFormat right = CSVFormat.newFormat('\\'')\n+                .withQuoteChar('\"')\n+                .withQuotePolicy(Quote.ALL);\n+        final CSVFormat left = CSVFormat.copy(right)\n+                .withQuotePolicy(Quote.MINIMAL);\n+\n+        assertNotEquals(right, left);\n+    }\n+\n+    @Test\n+    public void testEqualsRecordSeparator() {\n+        final CSVFormat right = CSVFormat.newFormat('\\'')\n+                .withRecordSeparator('*')\n+                .withCommentStart('#')\n+                .withEscape('+')\n+                .withIgnoreEmptyLines(true)\n+                .withIgnoreSurroundingSpaces(true)\n+                .withQuoteChar('\"')\n+                .withQuotePolicy(Quote.ALL);\n+        final CSVFormat left = CSVFormat.copy(right)\n+                .withRecordSeparator('!');\n+\n+        assertNotEquals(right, left);\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void testEscapeSameAsCommentStartThrowsException() {\n+        CSVFormat.DEFAULT.withEscape('!').withCommentStart('!').validate();\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void testEscapeSameAsCommentStartThrowsExceptionForWrapperType() {\n+        // Cannot assume that callers won't use different Character objects\n+        CSVFormat.DEFAULT.withEscape(new Character('!')).withCommentStart(new Character('!')).validate();\n+    }\n+\n     @Test\n     public void testFormat() {\n         final CSVFormat format = CSVFormat.DEFAULT;\n         assertEquals(\"\", format.format());\n         assertEquals(\"a,b,c\", format.format(\"a\", \"b\", \"c\"));\n         assertEquals(\"\\\"x,y\\\",z\", format.format(\"x,y\", \"z\"));\n+    }\n+\n+    @Test\n+    public void testGetHeader() throws Exception {\n+        String[] header = new String[]{\"one\", \"two\", \"three\"};\n+        CSVFormat formatWithHeader = CSVFormat.DEFAULT.withHeader(header);\n+        // getHeader() makes a copy of the header array.\n+        String[] headerCopy = formatWithHeader.getHeader();\n+        headerCopy[0] = \"A\";\n+        headerCopy[1] = \"B\";\n+        headerCopy[2] = \"C\";\n+        assertFalse(Arrays.equals(formatWithHeader.getHeader(), headerCopy));\n+        assertNotSame(formatWithHeader.getHeader(), headerCopy);\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void testQuoteCharSameAsCommentStartThrowsException() {\n+        CSVFormat.DEFAULT.withQuoteChar('!').withCommentStart('!').validate();\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType() {\n+        // Cannot assume that callers won't use different Character objects\n+        CSVFormat.DEFAULT.withQuoteChar(new Character('!')).withCommentStart('!').validate();\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void testQuoteCharSameAsDelimiterThrowsException() {\n+        CSVFormat.DEFAULT.withQuoteChar('!').withDelimiter('!').validate();\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void testQuotePolicyNoneWithoutEscapeThrowsException() {\n+        CSVFormat.newFormat('!').withQuotePolicy(Quote.NONE).validate();\n+    }\n+\n+    @Test\n+    public void testRFC4180() {\n+        assertEquals(null, RFC4180.getCommentStart());\n+        assertEquals(',', RFC4180.getDelimiter());\n+        assertEquals(null, RFC4180.getEscape());\n+        assertFalse(RFC4180.getIgnoreEmptyLines());\n+        assertEquals(Character.valueOf('\"'), RFC4180.getQuoteChar());\n+        assertEquals(null, RFC4180.getQuotePolicy());\n+        assertEquals(\"\\r\\n\", RFC4180.getRecordSeparator());\n     }\n \n     @SuppressWarnings(\"boxing\") // no need to worry about boxing here\n     }\n \n     @Test\n-    public void testEquals() {\n-        final CSVFormat right = CSVFormat.DEFAULT;\n-        final CSVFormat left = CSVFormat.copy(right);\n-\n-        assertFalse(right.equals(null));\n-        assertFalse(right.equals(\"A String Instance\"));\n-\n-        assertEquals(right, right);\n-        assertEquals(right, left);\n-        assertEquals(left, right);\n-\n-        assertEquals(right.hashCode(), right.hashCode());\n-        assertEquals(right.hashCode(), left.hashCode());\n-    }\n-\n-    @Test\n-    public void testEqualsDelimiter() {\n-        final CSVFormat right = CSVFormat.newFormat('!');\n-        final CSVFormat left = CSVFormat.newFormat('?');\n-\n-        assertNotEquals(right, left);\n-    }\n-\n-    @Test\n-    public void testEqualsQuoteChar() {\n-        final CSVFormat right = CSVFormat.newFormat('\\'').withQuoteChar('\"');\n-        final CSVFormat left = CSVFormat.copy(right).withQuoteChar('!');\n-\n-        assertNotEquals(right, left);\n-    }\n-\n-    @Test\n-    public void testEqualsQuotePolicy() {\n-        final CSVFormat right = CSVFormat.newFormat('\\'')\n-                .withQuoteChar('\"')\n-                .withQuotePolicy(Quote.ALL);\n-        final CSVFormat left = CSVFormat.copy(right)\n-                .withQuotePolicy(Quote.MINIMAL);\n-\n-        assertNotEquals(right, left);\n-    }\n-\n-    @Test\n-    public void testEqualsCommentStart() {\n-        final CSVFormat right = CSVFormat.newFormat('\\'')\n-                .withQuoteChar('\"')\n-                .withCommentStart('#')\n-                .withQuotePolicy(Quote.ALL);\n-        final CSVFormat left = CSVFormat.copy(right)\n-                .withCommentStart('!');\n-\n-        assertNotEquals(right, left);\n-    }\n-\n-    @Test\n-    public void testEqualsEscape() {\n-        final CSVFormat right = CSVFormat.newFormat('\\'')\n-                .withQuoteChar('\"')\n-                .withCommentStart('#')\n-                .withEscape('+')\n-                .withQuotePolicy(Quote.ALL);\n-        final CSVFormat left = CSVFormat.copy(right)\n-                .withEscape('!');\n-\n-        assertNotEquals(right, left);\n-    }\n-\n-    @Test\n-    public void testEqualsIgnoreSurroundingSpaces() {\n-        final CSVFormat right = CSVFormat.newFormat('\\'')\n-                .withCommentStart('#')\n-                .withEscape('+')\n-                .withIgnoreSurroundingSpaces(true)\n-                .withQuoteChar('\"')\n-                .withQuotePolicy(Quote.ALL);\n-        final CSVFormat left = CSVFormat.copy(right)\n-                .withIgnoreSurroundingSpaces(false);\n-\n-        assertNotEquals(right, left);\n-    }\n-\n-    @Test\n-    public void testEqualsIgnoreEmptyLines() {\n-        final CSVFormat right = CSVFormat.newFormat('\\'')\n-                .withCommentStart('#')\n-                .withEscape('+')\n-                .withIgnoreEmptyLines(true)\n-                .withIgnoreSurroundingSpaces(true)\n-                .withQuoteChar('\"')\n-                .withQuotePolicy(Quote.ALL);\n-        final CSVFormat left = CSVFormat.copy(right)\n-                .withIgnoreEmptyLines(false);\n-\n-        assertNotEquals(right, left);\n-    }\n-\n-    @Test\n-    public void testEqualsRecordSeparator() {\n-        final CSVFormat right = CSVFormat.newFormat('\\'')\n-                .withRecordSeparator('*')\n-                .withCommentStart('#')\n-                .withEscape('+')\n-                .withIgnoreEmptyLines(true)\n-                .withIgnoreSurroundingSpaces(true)\n-                .withQuoteChar('\"')\n-                .withQuotePolicy(Quote.ALL);\n-        final CSVFormat left = CSVFormat.copy(right)\n-                .withRecordSeparator('!');\n-\n-        assertNotEquals(right, left);\n-    }\n-\n-    @Test\n-    public void testEqualsHeader() {\n-        final CSVFormat right = CSVFormat.newFormat('\\'')\n-                .withRecordSeparator('*')\n-                .withCommentStart('#')\n-                .withEscape('+')\n-                .withHeader(\"One\", \"Two\", \"Three\")\n-                .withIgnoreEmptyLines(true)\n-                .withIgnoreSurroundingSpaces(true)\n-                .withQuoteChar('\"')\n-                .withQuotePolicy(Quote.ALL);\n-        final CSVFormat left = CSVFormat.copy(right)\n-                .withHeader(\"Three\", \"Two\", \"One\");\n-\n-        assertNotEquals(right, left);\n-    }\n-\n-    @Test\n     public void testWithCommentStart() throws Exception {\n         CSVFormat formatWithCommentStart = CSVFormat.DEFAULT.withCommentStart('#');\n         assertEquals( Character.valueOf('#'), formatWithCommentStart.getCommentStart());\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testWithCommentStartCRThrowsException() {\n+        CSVFormat.DEFAULT.withCommentStart(CR).validate();\n+    }\n+\n     @Test\n     public void testWithDelimiter() throws Exception {\n         CSVFormat formatWithDelimiter = CSVFormat.DEFAULT.withDelimiter('!');\n         assertEquals('!', formatWithDelimiter.getDelimiter());\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testWithDelimiterLFThrowsException() {\n+        CSVFormat.DEFAULT.withDelimiter(LF).validate();\n+    }\n+\n     @Test\n     public void testWithEscape() throws Exception {\n         CSVFormat formatWithEscape = CSVFormat.DEFAULT.withEscape('&');\n         assertEquals(Character.valueOf('&'), formatWithEscape.getEscape());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testWithEscapeCRThrowsExceptions() {\n+        CSVFormat.DEFAULT.withEscape(CR).validate();\n     }\n \n     @Test\n     }\n \n     @Test\n-    public void testGetHeader() throws Exception {\n-        String[] header = new String[]{\"one\", \"two\", \"three\"};\n-        CSVFormat formatWithHeader = CSVFormat.DEFAULT.withHeader(header);\n-        // getHeader() makes a copy of the header array.\n-        String[] headerCopy = formatWithHeader.getHeader();\n-        headerCopy[0] = \"A\";\n-        headerCopy[1] = \"B\";\n-        headerCopy[2] = \"C\";\n-        assertFalse(Arrays.equals(formatWithHeader.getHeader(), headerCopy));\n-        assertNotSame(formatWithHeader.getHeader(), headerCopy);\n-    }\n-\n-    @Test\n     public void testWithIgnoreEmptyLines() throws Exception {\n         assertFalse(CSVFormat.DEFAULT.withIgnoreEmptyLines(false).getIgnoreEmptyLines());\n         assertTrue(CSVFormat.DEFAULT.withIgnoreEmptyLines(true).getIgnoreEmptyLines());\n         assertEquals(Character.valueOf('\"'), formatWithQuoteChar.getQuoteChar());\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testWithQuoteLFThrowsException() {\n+        CSVFormat.DEFAULT.withQuoteChar(LF).validate();\n+    }\n+\n     @Test\n     public void testWithQuotePolicy() throws Exception {\n         CSVFormat formatWithQuotePolicy = CSVFormat.DEFAULT.withQuotePolicy(Quote.ALL);\n         CSVFormat formatWithRecordSeparator = CSVFormat.DEFAULT.withRecordSeparator('!');\n         assertEquals(\"!\", formatWithRecordSeparator.getRecordSeparator());\n     }\n-\n-    @Test(expected = IllegalStateException.class)\n-    public void testDelimiterSameAsCommentStartThrowsException() {\n-        CSVFormat.DEFAULT.withDelimiter('!').withCommentStart('!').validate();\n-    }\n-\n-    @Test(expected = IllegalStateException.class)\n-    public void testDelimiterSameAsEscapeThrowsException() {\n-        CSVFormat.DEFAULT.withDelimiter('!').withEscape('!').validate();\n-    }\n-\n-    @Test(expected = IllegalStateException.class)\n-    public void testEscapeSameAsCommentStartThrowsException() {\n-        CSVFormat.DEFAULT.withEscape('!').withCommentStart('!').validate();\n-    }\n-\n-    @Test(expected = IllegalStateException.class)\n-    public void testEscapeSameAsCommentStartThrowsExceptionForWrapperType() {\n-        // Cannot assume that callers won't use different Character objects\n-        CSVFormat.DEFAULT.withEscape(new Character('!')).withCommentStart(new Character('!')).validate();\n-    }\n-\n-    @Test(expected = IllegalStateException.class)\n-    public void testQuoteCharSameAsCommentStartThrowsException() {\n-        CSVFormat.DEFAULT.withQuoteChar('!').withCommentStart('!').validate();\n-    }\n-\n-    @Test(expected = IllegalStateException.class)\n-    public void testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType() {\n-        // Cannot assume that callers won't use different Character objects\n-        CSVFormat.DEFAULT.withQuoteChar(new Character('!')).withCommentStart('!').validate();\n-    }\n-\n-    @Test(expected = IllegalStateException.class)\n-    public void testQuoteCharSameAsDelimiterThrowsException() {\n-        CSVFormat.DEFAULT.withQuoteChar('!').withDelimiter('!').validate();\n-    }\n-\n-    @Test(expected = IllegalStateException.class)\n-    public void testQuotePolicyNoneWithoutEscapeThrowsException() {\n-        CSVFormat.newFormat('!').withQuotePolicy(Quote.NONE).validate();\n-    }\n-\n-    @Test\n-    public void testRFC4180() {\n-        assertEquals(null, RFC4180.getCommentStart());\n-        assertEquals(',', RFC4180.getDelimiter());\n-        assertEquals(null, RFC4180.getEscape());\n-        assertFalse(RFC4180.getIgnoreEmptyLines());\n-        assertEquals(Character.valueOf('\"'), RFC4180.getQuoteChar());\n-        assertEquals(null, RFC4180.getQuotePolicy());\n-        assertEquals(\"\\r\\n\", RFC4180.getRecordSeparator());\n-    }\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testWithCommentStartCRThrowsException() {\n-        CSVFormat.DEFAULT.withCommentStart(CR).validate();\n-    }\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testWithDelimiterLFThrowsException() {\n-        CSVFormat.DEFAULT.withDelimiter(LF).validate();\n-    }\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testWithEscapeCRThrowsExceptions() {\n-        CSVFormat.DEFAULT.withEscape(CR).validate();\n-    }\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testWithQuoteLFThrowsException() {\n-        CSVFormat.DEFAULT.withQuoteChar(LF).validate();\n-    }\n-\n-    private static void assertNotEquals(final Object right, final Object left) {\n-        assertFalse(right.equals(left));\n-        assertFalse(left.equals(right));\n-    }\n }", "timestamp": 1375216637, "metainfo": ""}