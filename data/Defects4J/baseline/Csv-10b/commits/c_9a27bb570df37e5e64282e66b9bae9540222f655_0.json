{"sha": "9a27bb570df37e5e64282e66b9bae9540222f655", "log": "Refactor magic strings into constants.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/Lexer.java\n+++ b/src/main/java/org/apache/commons/csv/Lexer.java\n  */\n abstract class Lexer {\n \n+    private static final char FF = '\\f';\n+    private static final char BELL = '\\b';\n+    private static final char TAB = '\\t';\n+    private static final char LF = '\\n';\n+    private static final char CR = '\\r';\n+    \n     private final boolean isEncapsulating;\n     private final boolean isEscaping;\n     private final boolean isCommentEnabled;\n         final int c = in.read();\n         switch (c) {\n         case 'r':\n-            return '\\r';\n+            return CR;\n         case 'n':\n-            return '\\n';\n+            return LF;\n         case 't':\n-            return '\\t';\n+            return TAB;\n         case 'b':\n-            return '\\b';\n+            return BELL;\n         case 'f':\n-            return '\\f';\n+            return FF;\n         case ExtendedBufferedReader.END_OF_STREAM:\n             throw new IOException(\"EOF whilst processing escape sequence\");\n         default:\n      */\n     boolean isEndOfLine(int c) throws IOException {\n         // check if we have \\r\\n...\n-        if (c == '\\r' && in.lookAhead() == '\\n') {\n+        if (c == CR && in.lookAhead() == LF) {\n             // note: does not change c outside of this method !!\n             c = in.read();\n         }\n-        return c == '\\n' || c == '\\r';\n+        return c == LF || c == CR;\n     }\n \n     /**\n      * @return true if the character is at the start of a line.\n      */\n     boolean isStartOfLine(final int c) {\n-        return c == '\\n' || c == '\\r' || c == ExtendedBufferedReader.UNDEFINED;\n+        return c == LF || c == CR || c == ExtendedBufferedReader.UNDEFINED;\n     }\n \n     /**", "timestamp": 1350044198, "metainfo": ""}