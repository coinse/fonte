{"sha": "2598862d94b7f6f3dfae057193b4f0cb5be8dee8", "log": "Fixed the immutability of the delimiter in CSVFormat  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n \n     public CSVFormat withDelimiter(char delimiter) {\n         CSVFormat format = (CSVFormat) clone();\n-        this.delimiter = delimiter;\n+        format.delimiter = delimiter;\n         return format;\n     }\n \n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n public class CSVFormatTest extends TestCase {\n \n     public void testImmutalibity() {\n-        CSVFormat format1 = new CSVFormat('!', '!', '!', '!', true, true, true, true);\n-        CSVFormat format2 = format1.withDelimiter('?')\n-                                         .withEncapsulator('?')\n-                                         .withCommentStart('?')\n-                                         .withLineSeparator(\"?\")\n-                                         .withEscape('?')\n-                                         .withLeadingSpacesIgnored(false)\n-                                         .withTrailingSpacesIgnored(false)\n-                                         .withEmptyLinesIgnored(false)\n-                                         .withUnicodeEscapesInterpreted(false);\n-\n-        assertNotSame(format1.getDelimiter(), format2.getDelimiter());\n-        assertNotSame(format1.getEncapsulator(), format2.getEncapsulator());\n-        assertNotSame(format1.getCommentStart(), format2.getCommentStart());\n-        assertNotSame(format1.getEscape(), format2.getEscape());\n-        assertNotSame(format1.getLineSeparator(), format2.getLineSeparator());\n+        CSVFormat format = new CSVFormat('!', '!', '!', '!', true, true, true, true);\n         \n-        assertNotSame(format1.isTrailingSpacesIgnored(), format2.isTrailingSpacesIgnored());\n-        assertNotSame(format1.isLeadingSpacesIgnored(), format2.isLeadingSpacesIgnored());\n-        assertNotSame(format1.isEmptyLinesIgnored(), format2.isEmptyLinesIgnored());\n-        assertNotSame(format1.isUnicodeEscapesInterpreted(), format2.isUnicodeEscapesInterpreted());\n+        format.withDelimiter('?');\n+        format.withEncapsulator('?');\n+        format.withCommentStart('?');\n+        format.withLineSeparator(\"?\");\n+        format.withEscape('?');\n+        format.withLeadingSpacesIgnored(false);\n+        format.withTrailingSpacesIgnored(false);\n+        format.withEmptyLinesIgnored(false);\n+        format.withUnicodeEscapesInterpreted(false);\n+        \n+        assertEquals('!', format.getDelimiter());\n+        assertEquals('!', format.getEncapsulator());\n+        assertEquals('!', format.getCommentStart());\n+        assertEquals(\"\\n\", format.getLineSeparator());\n+        assertEquals('!', format.getEscape());\n+        \n+        assertEquals(true, format.isLeadingSpacesIgnored());\n+        assertEquals(true, format.isTrailingSpacesIgnored());\n+        assertEquals(true, format.isEmptyLinesIgnored());\n+        assertEquals(true, format.isUnicodeEscapesInterpreted());\n     }\n \n+    public void testMutators() {\n+        CSVFormat format = new CSVFormat('!', '!', '!', '!', true, true, true, true);\n+        \n+        assertEquals('?', format.withDelimiter('?').getDelimiter());\n+        assertEquals('?', format.withEncapsulator('?').getEncapsulator());\n+        assertEquals('?', format.withCommentStart('?').getCommentStart());\n+        assertEquals(\"?\", format.withLineSeparator(\"?\").getLineSeparator());\n+        assertEquals('?', format.withEscape('?').getEscape());\n+        \n+        assertEquals(false, format.withLeadingSpacesIgnored(false).isLeadingSpacesIgnored());\n+        assertEquals(false, format.withTrailingSpacesIgnored(false).isTrailingSpacesIgnored());\n+        assertEquals(false, format.withEmptyLinesIgnored(false).isEmptyLinesIgnored());\n+        assertEquals(false, format.withUnicodeEscapesInterpreted(false).isUnicodeEscapesInterpreted());\n+    }\n } ", "timestamp": 1320926282, "metainfo": ""}