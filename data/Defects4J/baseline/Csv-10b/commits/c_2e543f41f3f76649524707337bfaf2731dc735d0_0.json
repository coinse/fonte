{"sha": "2e543f41f3f76649524707337bfaf2731dc735d0", "log": "Add some unit tests for escape handling in preparation for CSV-58  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n \n package org.apache.commons.csv;\n \n+import static org.apache.commons.csv.Constants.BACKSPACE;\n+import static org.apache.commons.csv.Constants.CR;\n+import static org.apache.commons.csv.Constants.FF;\n+import static org.apache.commons.csv.Constants.LF;\n+import static org.apache.commons.csv.Constants.TAB;\n import static org.apache.commons.csv.Token.Type.COMMENT;\n import static org.apache.commons.csv.Token.Type.EOF;\n import static org.apache.commons.csv.Token.Type.EORECORD;\n         assertTokenEquals(TOKEN, \"five\", parser.nextToken(new Token()));\n         assertTokenEquals(EOF, \"six\", parser.nextToken(new Token()));\n     }\n+\n+    @Test\n+    public void testEscaping() throws Exception {\n+        final String code = \"plain,\" +\n+        \t\t\"CR!\" + CR + \"Escaped,\" +\n+        \t\t\"LF!\" + LF +\"Escaped,\" +\n+                \"TAB!\" + TAB +\"Escaped,\" +\n+                \"BACKSPACE!\" + BACKSPACE +\"Escaped,\" +\n+                \"FF!\" + FF +\"Escaped\";\n+        final Lexer lexer = getLexer(code, CSVFormat.newBuilder().withEscape('!').build());\n+        assertTokenEquals(TOKEN, \"plain\", lexer.nextToken(new Token()));\n+        assertTokenEquals(TOKEN, \"CR\" + CR + \"Escaped\", lexer.nextToken(new Token()));\n+        assertTokenEquals(TOKEN, \"LF\" + LF + \"Escaped\", lexer.nextToken(new Token()));\n+        assertTokenEquals(TOKEN, \"TAB\" + TAB + \"Escaped\", lexer.nextToken(new Token()));\n+        assertTokenEquals(TOKEN, \"BACKSPACE\" + BACKSPACE + \"Escaped\", lexer.nextToken(new Token()));\n+        assertTokenEquals(EOF, \"FF\" + FF + \"Escaped\", lexer.nextToken(new Token()));\n+    }\n+\n+    @Test(expected = IOException.class)\n+    public void testEscapingAtEOF() throws Exception {\n+        final String code = \"escaping at EOF is evil!\";\n+        final Lexer lexer = getLexer(code, CSVFormat.newBuilder().withEscape('!').build());\n+\n+        lexer.nextToken(new Token());\n+    }\n }", "timestamp": 1364044024, "metainfo": ""}