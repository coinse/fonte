{"sha": "f6c0433b65a97745b9a3044cebe3ddc6e28c1836", "log": "Added a constructor with a String to CSVParser and removed CSVUtils  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n \n import java.io.IOException;\n import java.io.Reader;\n+import java.io.StringReader;\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n     public CSVParser(Reader input, CSVFormat format) {\n         this.in = new ExtendedBufferedReader(input);\n         this.format = format;\n+    }\n+\n+    /**\n+     * Customized CSV parser using the given {@link CSVFormat}\n+     *\n+     * @param input    a String containing \"csv-formatted\" input\n+     * @param format the CSVFormat used for CSV parsing\n+     */\n+    public CSVParser(String input, CSVFormat format) {\n+        this(new StringReader(input), format);\n     }\n \n     // ======================================================\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n                 {\"\"},\n                 {\"\\\"hello\\\"\", \"  \\\"world\\\"\", \"abc\\ndef\", \"\"}\n         };\n-        CSVParser parser = new CSVParser(new StringReader(code), CSVFormat.EXCEL);\n+        CSVParser parser = new CSVParser(code, CSVFormat.EXCEL);\n         String[][] tmp = parser.getRecords();\n         assertEquals(res.length, tmp.length);\n         assertTrue(tmp.length > 0);\n                 {\"\"},\n                 {\"world\", \"\"}\n         };\n-        CSVParser parser = new CSVParser(new StringReader(code), CSVFormat.EXCEL);\n+        CSVParser parser = new CSVParser(code, CSVFormat.EXCEL);\n         String[][] tmp = parser.getRecords();\n         assertEquals(res.length, tmp.length);\n         assertTrue(tmp.length > 0);\n         };\n         \n         for (String code : codes) {\n-            CSVParser parser = new CSVParser(new StringReader(code), CSVFormat.EXCEL);\n+            CSVParser parser = new CSVParser(code, CSVFormat.EXCEL);\n             String[][] tmp = parser.getRecords();\n             assertEquals(res.length, tmp.length);\n             assertTrue(tmp.length > 0);\n                 {\"hello\", \"\"},  // CSV format ignores empty lines\n                 {\"world\", \"\"}\n         };\n-        String code;\n-        for (int codeIndex = 0; codeIndex < codes.length; codeIndex++) {\n-            code = codes[codeIndex];\n+        for (String code : codes) {\n             CSVParser parser = new CSVParser(new StringReader(code));\n             String[][] tmp = parser.getRecords();\n             assertEquals(res.length, tmp.length);\n                 {\"\"},  // Excel format does not ignore empty lines\n                 {\"\"}\n         };\n-        String code;\n-        for (int codeIndex = 0; codeIndex < codes.length; codeIndex++) {\n-            code = codes[codeIndex];\n-            CSVParser parser = new CSVParser(new StringReader(code), CSVFormat.EXCEL);\n+        for (String code : codes) {\n+            CSVParser parser = new CSVParser(code, CSVFormat.EXCEL);\n             String[][] tmp = parser.getRecords();\n             assertEquals(res.length, tmp.length);\n             assertTrue(tmp.length > 0);\n         String[][] res = {\n                 {\"hello\", \"\"}  // CSV format ignores empty lines\n         };\n-        String code;\n-        for (int codeIndex = 0; codeIndex < codes.length; codeIndex++) {\n-            code = codes[codeIndex];\n+        for (String code : codes) {\n             CSVParser parser = new CSVParser(new StringReader(code));\n             String[][] tmp = parser.getRecords();\n             assertEquals(res.length, tmp.length);\n \n         CSVFormat format = new CSVFormat(',', '\\'', CSVFormat.DISABLED, '/', false, false, true, true);\n \n-        CSVParser parser = new CSVParser(new StringReader(code), format);\n+        CSVParser parser = new CSVParser(code, format);\n         String[][] tmp = parser.getRecords();\n         assertTrue(tmp.length > 0);\n         for (int i = 0; i < res.length; i++) {\n \n         CSVFormat format = new CSVFormat(',',  CSVFormat.DISABLED,  CSVFormat.DISABLED, '/', false, false, true, true);\n \n-        CSVParser parser = new CSVParser(new StringReader(code), format);\n+        CSVParser parser = new CSVParser(code, format);\n         String[][] tmp = parser.getRecords();\n         assertTrue(tmp.length > 0);\n \n         CSVFormat format = CSVFormat.DEFAULT;\n         assertEquals(CSVFormat.DISABLED, format.getCommentStart());\n \n-        CSVParser parser = new CSVParser(new StringReader(code), format);\n+        CSVParser parser = new CSVParser(code, format);\n         String[][] tmp = parser.getRecords();\n         assertTrue(tmp.length > 0);\n \n         };\n \n         format = new CSVFormat(',', '\"', '#');\n-        parser = new CSVParser(new StringReader(code), format);\n+        parser = new CSVParser(code, format);\n         tmp = parser.getRecords();\n \n         if (!CSVPrinterTest.equals(res_comments, tmp)) {\n \n     public void testUnicodeEscape() throws IOException {\n         String code = \"abc,\\\\u0070\\\\u0075\\\\u0062\\\\u006C\\\\u0069\\\\u0063\";\n-        CSVParser parser = new CSVParser(new StringReader(code), CSVFormat.DEFAULT.withUnicodeEscapesInterpreted(true));\n+        CSVParser parser = new CSVParser(code, CSVFormat.DEFAULT.withUnicodeEscapesInterpreted(true));\n         String[] data = parser.iterator().next();\n         assertEquals(2, data.length);\n         assertEquals(\"abc\", data[0]);", "timestamp": 1330968448, "metainfo": ""}