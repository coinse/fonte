{"sha": "a7bd28c496457aa7c32db4ea529c4f3df7e78fe9", "log": "Renamed CSVParser.getAllValues() to getRecords()  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n  * <p>Parsing of a csv-string having tabs as separators,\n  * '\"' as an optional value encapsulator, and comments starting with '#':</p>\n  * <pre>\n- *  String[][] data =\n+ *  String[][] record =\n  *   (new CSVParser(new StringReader(\"a\\tb\\nc\\td\"), new CSVFormat('\\t','\"','#'))).getAllValues();\n  * </pre>\n  *\n  * <p>Parsing of a csv-string in Excel CSV format</p>\n  * <pre>\n- *  String[][] data =\n+ *  String[][] record =\n  *   (new CSVParser(new StringReader(\"a;b\\nc;d\"), CSVFormat.EXCEL)).getAllValues();\n  * </pre>\n  *\n      * @return matrix of records x values ('null' when end of file)\n      * @throws IOException on parse error or input read-failure\n      */\n-    public String[][] getAllValues() throws IOException {\n+    public String[][] getRecords() throws IOException {\n         List<String[]> records = new ArrayList<String[]>();\n         String[] values;\n         String[][] ret = null;\n--- a/src/main/java/org/apache/commons/csv/CSVUtils.java\n+++ b/src/main/java/org/apache/commons/csv/CSVUtils.java\n         if (s == null) {\n             throw new IllegalArgumentException(\"Null argument not allowed.\");\n         }\n-        String[][] result = (new CSVParser(new StringReader(s))).getAllValues();\n+        String[][] result = (new CSVParser(new StringReader(s))).getRecords();\n         if (result == null) {\n             // since CSVFormat ignores empty lines an empty array is returned\n             // (i.e. not \"result = new String[][] {{\"\"}};\")\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n \n     public void testGetAllValues() throws IOException {\n         CSVParser parser = new CSVParser(new StringReader(code));\n-        String[][] tmp = parser.getAllValues();\n+        String[][] tmp = parser.getRecords();\n         assertEquals(res.length, tmp.length);\n         assertTrue(tmp.length > 0);\n         for (int i = 0; i < res.length; i++) {\n                 {\"\\\"hello\\\"\", \"  \\\"world\\\"\", \"abc\\ndef\", \"\"}\n         };\n         CSVParser parser = new CSVParser(new StringReader(code), CSVFormat.EXCEL);\n-        String[][] tmp = parser.getAllValues();\n+        String[][] tmp = parser.getRecords();\n         assertEquals(res.length, tmp.length);\n         assertTrue(tmp.length > 0);\n         for (int i = 0; i < res.length; i++) {\n                 {\"world\", \"\"}\n         };\n         CSVParser parser = new CSVParser(new StringReader(code), CSVFormat.EXCEL);\n-        String[][] tmp = parser.getAllValues();\n+        String[][] tmp = parser.getRecords();\n         assertEquals(res.length, tmp.length);\n         assertTrue(tmp.length > 0);\n         for (int i = 0; i < res.length; i++) {\n         \n         for (String code : codes) {\n             CSVParser parser = new CSVParser(new StringReader(code), CSVFormat.EXCEL);\n-            String[][] tmp = parser.getAllValues();\n+            String[][] tmp = parser.getRecords();\n             assertEquals(res.length, tmp.length);\n             assertTrue(tmp.length > 0);\n             for (int i = 0; i < res.length; i++) {\n         for (int codeIndex = 0; codeIndex < codes.length; codeIndex++) {\n             code = codes[codeIndex];\n             CSVParser parser = new CSVParser(new StringReader(code));\n-            String[][] tmp = parser.getAllValues();\n+            String[][] tmp = parser.getRecords();\n             assertEquals(res.length, tmp.length);\n             assertTrue(tmp.length > 0);\n             for (int i = 0; i < res.length; i++) {\n         for (int codeIndex = 0; codeIndex < codes.length; codeIndex++) {\n             code = codes[codeIndex];\n             CSVParser parser = new CSVParser(new StringReader(code), CSVFormat.EXCEL);\n-            String[][] tmp = parser.getAllValues();\n+            String[][] tmp = parser.getRecords();\n             assertEquals(res.length, tmp.length);\n             assertTrue(tmp.length > 0);\n             for (int i = 0; i < res.length; i++) {\n         for (int codeIndex = 0; codeIndex < codes.length; codeIndex++) {\n             code = codes[codeIndex];\n             CSVParser parser = new CSVParser(new StringReader(code));\n-            String[][] tmp = parser.getAllValues();\n+            String[][] tmp = parser.getRecords();\n             assertEquals(res.length, tmp.length);\n             assertTrue(tmp.length > 0);\n             for (int i = 0; i < res.length; i++) {\n                 {\"a\\\\\\\\,b\"}    // backslash in quotes only escapes a delimiter (\",\")\n         };\n         CSVParser parser = new CSVParser(new StringReader(code));\n-        String[][] tmp = parser.getAllValues();\n+        String[][] tmp = parser.getRecords();\n         assertEquals(res.length, tmp.length);\n         assertTrue(tmp.length > 0);\n         for (int i = 0; i < res.length; i++) {\n         CSVFormat format = new CSVFormat(',', '\\'', CSVFormat.COMMENTS_DISABLED, '/', false, false, true, true);\n \n         CSVParser parser = new CSVParser(new StringReader(code), format);\n-        String[][] tmp = parser.getAllValues();\n+        String[][] tmp = parser.getRecords();\n         assertTrue(tmp.length > 0);\n         for (int i = 0; i < res.length; i++) {\n             assertTrue(Arrays.equals(res[i], tmp[i]));\n         CSVFormat format = new CSVFormat(',', CSVFormat.ENCAPSULATOR_DISABLED, CSVFormat.COMMENTS_DISABLED, '/', false, false, true, true);\n \n         CSVParser parser = new CSVParser(new StringReader(code), format);\n-        String[][] tmp = parser.getAllValues();\n+        String[][] tmp = parser.getRecords();\n         assertTrue(tmp.length > 0);\n \n         if (!CSVPrinterTest.equals(res, tmp)) {\n         assertEquals(CSVFormat.COMMENTS_DISABLED, format.getCommentStart());\n \n         CSVParser parser = new CSVParser(new StringReader(code), format);\n-        String[][] tmp = parser.getAllValues();\n+        String[][] tmp = parser.getRecords();\n         assertTrue(tmp.length > 0);\n \n         if (!CSVPrinterTest.equals(res, tmp)) {\n \n         format = new CSVFormat(',', '\"', '#');\n         parser = new CSVParser(new StringReader(code), format);\n-        tmp = parser.getAllValues();\n+        tmp = parser.getRecords();\n \n         if (!CSVPrinterTest.equals(res_comments, tmp)) {\n             assertTrue(false);\n     public void testCarriageReturnLineFeedEndings() throws IOException {\n         String code = \"foo\\r\\nbaar,\\r\\nhello,world\\r\\n,kanu\";\n         CSVParser parser = new CSVParser(new StringReader(code));\n-        String[][] data = parser.getAllValues();\n+        String[][] data = parser.getRecords();\n         assertEquals(4, data.length);\n     }\n \n     public void testCarriageReturnEndings() throws IOException {\n         String code = \"foo\\rbaar,\\rhello,world\\r,kanu\";\n         CSVParser parser = new CSVParser(new StringReader(code));\n-        String[][] data = parser.getAllValues();\n+        String[][] data = parser.getRecords();\n         assertEquals(4, data.length);\n     }\n \n     public void testLineFeedEndings() throws IOException {\n         String code = \"foo\\nbaar,\\nhello,world\\n,kanu\";\n         CSVParser parser = new CSVParser(new StringReader(code));\n-        String[][] data = parser.getAllValues();\n+        String[][] data = parser.getRecords();\n         assertEquals(4, data.length);\n     }\n \n         //String code = \"world\\r\\n\\n\";\n         //String code = \"foo;baar\\r\\n\\r\\nhello;\\r\\n\\r\\nworld;\\r\\n\";\n         CSVParser parser = new CSVParser(new StringReader(code));\n-        String[][] data = parser.getAllValues();\n+        String[][] data = parser.getRecords();\n         assertEquals(3, data.length);\n     }\n \n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n         StringReader reader = new StringReader(result);\n \n         CSVParser parser = new CSVParser(reader, format);\n-        String[][] parseResult = parser.getAllValues();\n+        String[][] parseResult = parser.getRecords();\n \n         if (!equals(lines, parseResult)) {\n             System.out.println(\"Printer output :\" + printable(result));", "timestamp": 1320876241, "metainfo": ""}