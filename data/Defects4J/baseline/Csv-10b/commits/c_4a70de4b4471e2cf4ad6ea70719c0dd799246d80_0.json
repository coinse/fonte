{"sha": "4a70de4b4471e2cf4ad6ea70719c0dd799246d80", "log": "Remove trailing white spaces  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n  * section. In case a test fails, you should follow a top-down approach for\n  * fixing a potential bug (its likely that the parser itself fails if the lexer\n  * has problems...).\n- * \n+ *\n  * @version $Id$\n  */\n public class CSVParserTest {\n         assertFalse(record.isSet(\"C\"));\n         assertEquals(\"1\", record.get(\"A\"));\n         assertEquals(\"2\", record.get(\"B\"));\n-        \n+\n         // 2nd record\n         record = records.next();\n         assertTrue(record.isMapped(\"A\"));\n         assertEquals(\"x\", record.get(\"A\"));\n         assertEquals(\"y\", record.get(\"B\"));\n         assertEquals(\"z\", record.get(\"C\"));\n-        \n+\n         assertFalse(records.hasNext());\n     }\n \n         Assert.assertEquals(\"B\", columnNames.next());\n         Assert.assertEquals(\"C\", columnNames.next());\n         final Iterator<CSVRecord> records = parser.iterator();\n-        \n+\n         // Parse to make sure getHeaderMap did not have a side-effect.\n         for (int i = 0; i < 3; i++) {\n             assertTrue(records.hasNext());\n     public void testGetLineNumberWithCR() throws Exception {\n         validateLineNumbers(String.valueOf(CR));\n     }\n-    \n+\n     @Test\n     public void testGetRecordNumberWithLF() throws Exception {\n         validateRecordNumbers(String.valueOf(LF));\n         CSVRecord record;\n         assertEquals(0, parser.getRecordNumber());\n         assertNotNull(record = parser.nextRecord());\n-        assertEquals(1, record.getRecordNumber());        \n+        assertEquals(1, record.getRecordNumber());\n         assertEquals(1, parser.getRecordNumber());\n         assertNotNull(record = parser.nextRecord());\n-        assertEquals(2, record.getRecordNumber());        \n+        assertEquals(2, record.getRecordNumber());\n         assertEquals(2, parser.getRecordNumber());\n         assertNotNull(record = parser.nextRecord());\n-        assertEquals(3, record.getRecordNumber());        \n+        assertEquals(3, record.getRecordNumber());\n         assertEquals(3, parser.getRecordNumber());\n         assertNull(record = parser.nextRecord());\n         assertEquals(3, parser.getRecordNumber());", "timestamp": 1364037297, "metainfo": ""}