{"sha": "7592782eee5e1744f032fa7ffe2924c2eb9f577e", "log": "Move Token into separate file for more flexibility  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/csv/Token.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \n+ */\n+\n+package org.apache.commons.csv;\n+\n+import static org.apache.commons.csv.Token.Type.*;\n+\n+/**\n+ * Token is an internal token representation.\n+ * <p/>\n+ * It is used as contract between the lexer and the parser.\n+ */\n+class Token {\n+\n+    /** length of the initial token (content-)buffer */\n+    private static final int INITIAL_TOKEN_LENGTH = 50;\n+    \n+    enum Type {\n+        /** Token has no valid content, i.e. is in its initialized state. */\n+        INVALID,\n+        \n+        /** Token with content, at beginning or in the middle of a line. */\n+        TOKEN,\n+        \n+        /** Token (which can have content) when end of file is reached. */\n+        EOF,\n+        \n+        /** Token with content when end of a line is reached. */\n+        EORECORD\n+    }\n+    \n+    /** Token type */\n+    Token.Type type = INVALID;\n+    \n+    /** The content buffer. */\n+    StringBuilder content = new StringBuilder(INITIAL_TOKEN_LENGTH);\n+    \n+    /** Token ready flag: indicates a valid token with content (ready for the parser). */\n+    boolean isReady;\n+\n+    Token reset() {\n+        content.setLength(0);\n+        type = INVALID;\n+        isReady = false;\n+        return this;\n+    }\n+}", "timestamp": 1332356690, "metainfo": ""}