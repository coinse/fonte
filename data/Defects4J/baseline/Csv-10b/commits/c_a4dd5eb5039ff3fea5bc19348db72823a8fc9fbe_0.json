{"sha": "a4dd5eb5039ff3fea5bc19348db72823a8fc9fbe", "log": "Add a few more blank lines to the test  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n     public void testNextToken2EmptyLines() throws IOException {\n         final String code = \n                 \"1,2,3,\\n\"+                // 1\n+                \"\\n\"+                      // 1b\n+                \"\\n\"+                      // 1c\n                 \"a,b x,c#no-comment\\n\"+    // 2\n                 \"#foo\\n\"+                  // 3\n                 \"\\n\"+                      // 4\n+                \"\\n\"+                      // 4b\n                 \"d,e,#no-comment\\n\"+       // 5\n+                \"\\n\"+                      // 5b\n+                \"\\n\"+                      // 5c\n                 \"# penultimate comment\\n\"+ // 6\n+                \"\\n\"+                      // 6b\n+                \"\\n\"+                      // 6c\n                 \"# Final comment\\n\";       // 7\n         CSVFormat format = CSVFormat.DEFAULT.withCommentStart('#').withEmptyLinesIgnored(false);\n         assertFalse(\"Should not ignore empty lines\", format.isEmptyLinesIgnored());\n         assertTokenEquals(TOKEN, \"2\", parser.nextToken(new Token()));\n         assertTokenEquals(TOKEN, \"3\", parser.nextToken(new Token()));\n         assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 1\n+        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 1b\n+        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 1c\n         assertTokenEquals(TOKEN, \"a\", parser.nextToken(new Token()));\n         assertTokenEquals(TOKEN, \"b x\", parser.nextToken(new Token()));\n         assertTokenEquals(EORECORD, \"c#no-comment\", parser.nextToken(new Token())); // 2\n         assertTokenEquals(COMMENT, \"\", parser.nextToken(new Token()));              // 3\n         assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 4\n+        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 4b\n         assertTokenEquals(TOKEN, \"d\", parser.nextToken(new Token()));\n         assertTokenEquals(TOKEN, \"e\", parser.nextToken(new Token()));\n         assertTokenEquals(EORECORD, \"#no-comment\", parser.nextToken(new Token()));  // 5\n+        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 5b\n+        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 5c\n         assertTokenEquals(COMMENT, \"\", parser.nextToken(new Token()));              // 6\n+        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 6b\n+        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 6c\n         assertTokenEquals(COMMENT, \"\", parser.nextToken(new Token()));              // 7\n         assertTokenEquals(EOF, \"\", parser.nextToken(new Token()));\n         assertTokenEquals(EOF, \"\", parser.nextToken(new Token()));", "timestamp": 1332981076, "metainfo": ""}