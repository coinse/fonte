{"sha": "a4883a448416031773bba432bc5bce4492f1e19d", "log": "Support for W3C DOM document conversion.", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/jsoup/helper/W3CDom.java\n+package org.jsoup.helper;\n+\n+import org.jsoup.nodes.Attribute;\n+import org.jsoup.select.NodeTraversor;\n+import org.jsoup.select.NodeVisitor;\n+import org.w3c.dom.Comment;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Text;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+\n+/**\n+ * Helper class to transform a {@link org.jsoup.nodes.Document} to a {@link org.w3c.dom.Document org.w3c.dom.Document},\n+ * for integration with toolsets that use the W3C DOM.\n+ * <p/>\n+ * This class is currently <b>experimental</b>, please provide feedback on utility and any problems experienced.\n+ */\n+public class W3CDom {\n+    protected DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+\n+    /**\n+     * Convert a jsoup Document to a W3C Document.\n+     * @param in jsoup doc\n+     * @return w3c doc\n+     */\n+    public Document fromJsoup(org.jsoup.nodes.Document in) {\n+        Validate.notNull(in);\n+        DocumentBuilder builder;\n+        try {\n+            builder = factory.newDocumentBuilder();\n+            Document out = builder.newDocument();\n+            convert(in, out);\n+            return out;\n+        } catch (ParserConfigurationException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    /**\n+     * Converts a jsoup document into the provided W3C Document. If required, you can set options on the output document\n+     * before converting.\n+     * @param in jsoup doc\n+     * @param out w3c doc\n+     * @see org.jsoup.helper.W3CDom#fromJsoup(org.jsoup.nodes.Document)\n+     */\n+    public void convert(org.jsoup.nodes.Document in, Document out) {\n+        if (!StringUtil.isBlank(in.location()))\n+            out.setDocumentURI(in.location());\n+\n+        org.jsoup.nodes.Element rootEl = in.child(0); // skip the #root node\n+        NodeTraversor traversor = new NodeTraversor(new W3CBuilder(out));\n+        traversor.traverse(rootEl);\n+    }\n+\n+    /**\n+     * Implements the conversion by walking the input.\n+     */\n+    protected class W3CBuilder implements NodeVisitor {\n+        private final Document doc;\n+        private Element dest;\n+\n+        public W3CBuilder(Document doc) {\n+            this.doc = doc;\n+        }\n+\n+        public void head(org.jsoup.nodes.Node source, int depth) {\n+            if (source instanceof org.jsoup.nodes.Element) {\n+                org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n+                Element el = doc.createElement(sourceEl.tagName());\n+                copyAttributes(sourceEl, el);\n+                if (dest == null) { // sets up the root\n+                    doc.appendChild(el);\n+                } else {\n+                    dest.appendChild(el);\n+                }\n+                dest = el; // descend\n+            } else if (source instanceof org.jsoup.nodes.TextNode) {\n+                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;\n+                Text text = doc.createTextNode(sourceText.getWholeText());\n+                dest.appendChild(text);\n+            } else if (source instanceof org.jsoup.nodes.Comment) {\n+                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;\n+                Comment comment = doc.createComment(sourceComment.getData());\n+                dest.appendChild(comment);\n+            } else if (source instanceof org.jsoup.nodes.DataNode) {\n+                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;\n+                Text node = doc.createTextNode(sourceData.getWholeData());\n+                dest.appendChild(node);\n+            } else {\n+                // unhandled\n+            }\n+        }\n+\n+        public void tail(org.jsoup.nodes.Node source, int depth) {\n+            if (source instanceof org.jsoup.nodes.Element && dest.getParentNode() instanceof Element) {\n+                dest = (Element) dest.getParentNode(); // undescend. cromulent.\n+            }\n+        }\n+\n+        private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n+            for (Attribute attribute : source.attributes()) {\n+                el.setAttribute(attribute.getKey(), attribute.getValue());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Serialize a W3C document to a String.\n+     */\n+    public String asString(Document doc) {\n+        try {\n+            DOMSource domSource = new DOMSource(doc);\n+            StringWriter writer = new StringWriter();\n+            StreamResult result = new StreamResult(writer);\n+            TransformerFactory tf = TransformerFactory.newInstance();\n+            Transformer transformer = tf.newTransformer();\n+            transformer.transform(domSource, result);\n+            return writer.toString();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/jsoup/helper/W3CDomTest.java\n+package org.jsoup.helper;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.integration.ParseTest;\n+import org.junit.Test;\n+import org.w3c.dom.Document;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class W3CDomTest {\n+    @Test\n+    public void simpleConversion() {\n+        String html = \"<html><head><title>W3c</title></head><body><p class='one' id=12>Text</p><!-- comment --><invalid>What<script>alert('!')\";\n+        org.jsoup.nodes.Document doc = Jsoup.parse(html);\n+\n+        W3CDom w3c = new W3CDom();\n+        Document wDoc = w3c.fromJsoup(doc);\n+        String out = w3c.asString(wDoc);\n+        assertEquals(\n+                \"<html>\\n\" +\n+                        \"<head>\\n\" +\n+                        \"<META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\">\\n\" +\n+                        \"<title>W3c</title>\\n\" +\n+                        \"</head>\\n\" +\n+                        \"<body>\\n\" +\n+                        \"<p class=\\\"one\\\" id=\\\"12\\\">Text</p>\\n\" +\n+                        \"<!-- comment -->\\n\" +\n+                        \"<invalid>What<script>alert('!')</script>\\n\" +\n+                        \"</invalid>\\n\" +\n+                        \"</body>\\n\" +\n+                        \"</html>\\n\"\n+                , out);\n+    }\n+\n+    @Test\n+    public void convertsGoogle() throws IOException {\n+        File in = ParseTest.getFile(\"/htmltests/google-ipod.html\");\n+        org.jsoup.nodes.Document doc = Jsoup.parse(in, \"UTF8\");\n+\n+        W3CDom w3c = new W3CDom();\n+        Document wDoc = w3c.fromJsoup(doc);\n+        String out = w3c.asString(wDoc);\n+        assertTrue(out.contains(\"ipod\"));\n+    }\n+}\n+", "timestamp": 1413082401, "metainfo": ""}