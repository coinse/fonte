{"sha": "50336e64e05f91b6e42fd7b01e419eb826cc7057", "log": "Merge branch 'master' into pr/672", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.net.Proxy;\n import java.net.URL;\n import java.util.Collection;\n import java.util.Map;\n      * @return this Connection, for chaining\n      */\n     Connection url(String url);\n+\n+    /**\n+     * Set the proxy to use for this request. Set to <code>null</code> to disable.\n+     * @param proxy proxy to use\n+     * @return this Connection, for chaining\n+     */\n+    Connection proxy(Proxy proxy);\n+\n+    /**\n+     * Set the HTTP proxy to use for this request.\n+     * @param proxy proxy to use\n+     * @return this Connection, for chaining\n+     */\n+    Connection proxy(String host, int port);\n \n     /**\n      * Set the request user-agent header.\n      * Represents a HTTP request.\n      */\n     interface Request extends Base<Request> {\n-\n+        /**\n+         * Get the proxy used for this request.\n+         * @return the proxy; <code>null</code> if not enabled.\n+         */\n+        Proxy proxy();\n+\n+        /**\n+         * Update the proxy for this request.\n+         * @param proxy the proxy ot use; <code>null</code> to disable.\n+         * @return this Request, for chaining\n+         */\n+        Request proxy(Proxy proxy);\n+\n+        /**\n+         * Set the HTTP proxy to use for this request.\n+         * @param proxy proxy to use\n+         * @return this Connection, for chaining\n+         */\n+        Request proxy(String host, int port);\n \n         /**\n          * Get the request timeout, in milliseconds.\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n package org.jsoup.helper;\n \n-import org.jsoup.Connection;\n-import org.jsoup.HttpStatusException;\n-import org.jsoup.UnsupportedMimeTypeException;\n+import org.jsoup.*;\n import org.jsoup.nodes.Document;\n import org.jsoup.parser.Parser;\n import org.jsoup.parser.TokenQueue;\n \n import javax.net.ssl.*;\n import java.io.*;\n-import java.net.HttpURLConnection;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.net.URLEncoder;\n+import java.net.*;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n import java.nio.charset.IllegalCharsetNameException;\n     private static final String CONTENT_TYPE = \"Content-Type\";\n     private static final String MULTIPART_FORM_DATA = \"multipart/form-data\";\n     private static final String FORM_URL_ENCODED = \"application/x-www-form-urlencoded\";\n+    private static final int HTTP_TEMP_REDIR = 307; // http/1.1 temporary redirect, not in Java's set.\n \n     public static Connection connect(String url) {\n         Connection con = new HttpConnection();\n         } catch (MalformedURLException e) {\n             throw new IllegalArgumentException(\"Malformed URL: \" + url, e);\n         }\n+        return this;\n+    }\n+\n+    public Connection proxy(Proxy proxy) {\n+        req.proxy(proxy);\n+        return this;\n+    }\n+\n+    public Connection proxy(String host, int port) {\n+        req.proxy(host, port);\n         return this;\n     }\n \n     }\n \n     public static class Request extends HttpConnection.Base<Connection.Request> implements Connection.Request {\n+        private Proxy proxy; // nullable\n         private int timeoutMilliseconds;\n         private int maxBodySizeBytes;\n         private boolean followRedirects;\n             method = Method.GET;\n             headers.put(\"Accept-Encoding\", \"gzip\");\n             parser = Parser.htmlParser();\n+        }\n+\n+        public Proxy proxy() {\n+            return proxy;\n+        }\n+\n+        public Request proxy(Proxy proxy) {\n+            this.proxy = proxy;\n+            return this;\n+        }\n+\n+        public Request proxy(String host, int port) {\n+            this.proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(host, port));\n+            return this;\n         }\n \n         public int timeout() {\n \n                 // redirect if there's a location header (from 3xx, or 201 etc)\n                 if (res.hasHeader(LOCATION) && req.followRedirects()) {\n-                    req.method(Method.GET); // always redirect with a get. any data param from original req are dropped.\n-                    req.data().clear();\n+                    if (status != HTTP_TEMP_REDIR) {\n+                        req.method(Method.GET); // always redirect with a get. any data param from original req are dropped.\n+                        req.data().clear();\n+                    }\n \n                     String location = res.header(LOCATION);\n                     if (location != null && location.startsWith(\"http:/\") && location.charAt(6) != '/') // fix broken Location: http:/temp/AAG_New/en/index.php\n                 res.charset = DataUtil.getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it\n                 if (conn.getContentLength() != 0) { // -1 means unknown, chunked. sun throws an IO exception on 500 response with no content when trying to read body\n                     InputStream bodyStream = null;\n-                    InputStream dataStream = null;\n                     try {\n-                        dataStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n-                        bodyStream = res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\") ?\n-                                new BufferedInputStream(new GZIPInputStream(dataStream)) :\n-                                new BufferedInputStream(dataStream);\n+                        bodyStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n+                        if (res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\"))\n+                            bodyStream = new GZIPInputStream(bodyStream);\n \n                         res.byteData = DataUtil.readToByteBuffer(bodyStream, req.maxBodySize());\n                     } finally {\n                         if (bodyStream != null) bodyStream.close();\n-                        if (dataStream != null) dataStream.close();\n                     }\n                 } else {\n                     res.byteData = DataUtil.emptyByteBuffer();\n \n         // set up connection defaults, and details from request\n         private static HttpURLConnection createConnection(Connection.Request req) throws IOException {\n-            HttpURLConnection conn = (HttpURLConnection) req.url().openConnection();\n+            final HttpURLConnection conn = (HttpURLConnection) (\n+                req.proxy() == null ?\n+                req.url().openConnection() :\n+                req.url().openConnection(req.proxy())\n+            );\n \n             conn.setRequestMethod(req.method().name());\n             conn.setInstanceFollowRedirects(false); // don't rely on native redirection support\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n      * @return this element\n      */\n     public Element appendText(String text) {\n+        Validate.notNull(text);\n         TextNode node = new TextNode(text, baseUri());\n         appendChild(node);\n         return this;\n      * @return this element\n      */\n     public Element prependText(String text) {\n+        Validate.notNull(text);\n         TextNode node = new TextNode(text, baseUri());\n         prependChild(node);\n         return this;\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n \n     protected void addChildren(int index, Node... children) {\n         Validate.noNullElements(children);\n+        ensureChildNodes();\n         for (int i = children.length - 1; i >= 0; i--) {\n             Node in = children[i];\n             reparentChild(in);\n-            ensureChildNodes();\n             childNodes.add(index, in);\n-        }\n-        reindexChildren(index);\n+            reindexChildren(index);\n+        }\n     }\n \n     protected void ensureChildNodes() {\n--- a/src/main/java/org/jsoup/parser/CharacterReader.java\n+++ b/src/main/java/org/jsoup/parser/CharacterReader.java\n     String consumeToAny(final char... chars) {\n         final int start = pos;\n         final int remaining = length;\n+        final char[] val = input;\n \n         OUTER: while (pos < remaining) {\n             for (char c : chars) {\n-                if (input[pos] == c)\n+                if (val[pos] == c)\n                     break OUTER;\n             }\n             pos++;\n             cached = new String(val, start, count);\n             cache[index] = cached;\n         } else { // hashcode hit, check equality\n-            if (rangeEquals(start, count, cached)) {\n-                // hit\n+            if (rangeEquals(start, count, cached)) { // hit\n                 return cached;\n             } else { // hashcode conflict\n                 cached = new String(val, start, count);\n+                cache[index] = cached; // update the cache, as recently used strings are more likely to show up again\n             }\n         }\n         return cached;\n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n         protected String tagName;\n         private String pendingAttributeName; // attribute names are generally caught in one hop, not accumulated\n         private StringBuilder pendingAttributeValue = new StringBuilder(); // but values are accumulated, from e.g. & in hrefs\n+        private String pendingAttributeValueS; // try to get attr vals in one shot, vs Builder\n         private boolean hasEmptyAttributeValue = false; // distinguish boolean attribute from empty string value\n         private boolean hasPendingAttributeValue = false;\n         boolean selfClosing = false;\n             tagName = null;\n             pendingAttributeName = null;\n             reset(pendingAttributeValue);\n+            pendingAttributeValueS = null;\n             hasEmptyAttributeValue = false;\n             hasPendingAttributeValue = false;\n             selfClosing = false;\n             if (pendingAttributeName != null) {\n                 Attribute attribute;\n                 if (hasPendingAttributeValue)\n-                    attribute = new Attribute(pendingAttributeName, pendingAttributeValue.toString());\n+                    attribute = new Attribute(pendingAttributeName,\n+                        pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n                 else if (hasEmptyAttributeValue)\n                     attribute = new Attribute(pendingAttributeName, \"\");\n                 else\n             hasEmptyAttributeValue = false;\n             hasPendingAttributeValue = false;\n             reset(pendingAttributeValue);\n+            pendingAttributeValueS = null;\n         }\n \n         final void finaliseTag() {\n \n         final void appendAttributeValue(String append) {\n             ensureAttributeValue();\n-            pendingAttributeValue.append(append);\n+            if (pendingAttributeValue.length() == 0) {\n+                pendingAttributeValueS = append;\n+            } else {\n+                pendingAttributeValue.append(append);\n+            }\n         }\n \n         final void appendAttributeValue(char append) {\n \n         private void ensureAttributeValue() {\n             hasPendingAttributeValue = true;\n+            // if on second hit, we'll need to move to the builder\n+            if (pendingAttributeValueS != null) {\n+                pendingAttributeValue.append(pendingAttributeValueS);\n+                pendingAttributeValueS = null;\n+            }\n         }\n     }\n \n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n     },\n     AttributeValue_doubleQuoted {\n         void read(Tokeniser t, CharacterReader r) {\n-            String value = r.consumeToAnySorted(attributeDoubleValueCharsSorted);\n+            String value = r.consumeToAny(attributeDoubleValueCharsSorted);\n             if (value.length() > 0)\n                 t.tagPending.appendAttributeValue(value);\n             else\n     },\n     AttributeValue_singleQuoted {\n         void read(Tokeniser t, CharacterReader r) {\n-            String value = r.consumeToAnySorted(attributeSingleValueCharsSorted);\n+            String value = r.consumeToAny(attributeSingleValueCharsSorted);\n             if (value.length() > 0)\n                 t.tagPending.appendAttributeValue(value);\n             else\n     },\n     AttributeValue_unquoted {\n         void read(Tokeniser t, CharacterReader r) {\n-            String value = r.consumeToAny('\\t', '\\n', '\\r', '\\f', ' ', '&', '>', nullChar, '\"', '\\'', '<', '=', '`');\n+            String value = r.consumeToAnySorted(attributeValueUnquoted);\n             if (value.length() > 0)\n                 t.tagPending.appendAttributeValue(value);\n \n     private static final char[] attributeSingleValueCharsSorted = new char[]{'\\'', '&', nullChar};\n     private static final char[] attributeDoubleValueCharsSorted = new char[]{'\"', '&', nullChar};\n     private static final char[] attributeNameCharsSorted = new char[]{'\\t', '\\n', '\\r', '\\f', ' ', '/', '=', '>', nullChar, '\"', '\\'', '<'};\n+    private static final char[] attributeValueUnquoted = new char[]{'\\t', '\\n', '\\r', '\\f', ' ', '&', '>', nullChar, '\"', '\\'', '<', '=', '`'};\n \n     private static final char replacementChar = Tokeniser.replacementChar;\n     private static final String replacementStr = String.valueOf(Tokeniser.replacementChar);\n         Arrays.sort(attributeSingleValueCharsSorted);\n         Arrays.sort(attributeDoubleValueCharsSorted);\n         Arrays.sort(attributeNameCharsSorted);\n+        Arrays.sort(attributeValueUnquoted);\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/select/Evaluator.java\n+++ b/src/main/java/org/jsoup/select/Evaluator.java\n             Validate.notEmpty(value);\n \n             this.key = key.trim().toLowerCase();\n-            if (value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")) {\n+            if (value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")\n+                    || value.startsWith(\"'\") && value.endsWith(\"'\")) {\n                 value = value.substring(1, value.length()-1);\n             }\n             this.value = value.trim().toLowerCase();\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n+import java.net.*;\n import java.util.Map;\n \n import static org.hamcrest.core.Is.is;\n         Document doc = response.parse();\n         assertEquals(\"\", doc.text());\n     }\n+\n+\n+    /*\n+     Proxy tests. Assumes local proxy running on 8888, without system propery set (so that specifying it is required).\n+     */\n+\n+    @Test\n+    public void fetchViaHttpProxy() throws IOException {\n+        String url = \"http://jsoup.org\";\n+        Proxy proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(\"localhost\", 8888));\n+        Document doc = Jsoup.connect(url).proxy(proxy).get();\n+        assertTrue(doc.title().contains(\"jsoup\"));\n+    }\n+\n+    @Test\n+    public void fetchViaHttpProxySetByArgument() throws IOException {\n+        String url = \"http://jsoup.org\";\n+        Document doc = Jsoup.connect(url).proxy(\"localhost\", 8888).get();\n+        assertTrue(doc.title().contains(\"jsoup\"));\n+    }\n+\n+    @Test\n+    public void invalidProxyFails() throws IOException {\n+        boolean caught = false;\n+        String url = \"http://jsoup.org\";\n+        try {\n+            Document doc = Jsoup.connect(url).proxy(\"localhost\", 8889).get();\n+        } catch (IOException e) {\n+            caught = e instanceof ConnectException;\n+        }\n+        assertTrue(caught);\n+    }\n+\n+    @Test\n+    public void proxyGetAndSet() throws IOException {\n+        String url = \"http://jsoup.org\";\n+        Proxy proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(\"localhost\", 8889)); // invalid\n+        final Connection con = Jsoup.connect(url).proxy(proxy);\n+\n+        assert con.request().proxy() == proxy;\n+        con.request().proxy(null); // disable\n+        Document doc = con.get();\n+        assertTrue(doc.title().contains(\"jsoup\")); // would fail if actually went via proxy\n+    }\n }\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n \n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n-import org.jsoup.helper.StringUtil;\n import org.jsoup.parser.Tag;\n import org.jsoup.select.Elements;\n import org.junit.Test;\n \n+import java.util.*;\n+\n import static org.junit.Assert.*;\n-\n-import java.util.ArrayList;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.Map;\n \n /**\n  * Tests for Element (DOM stuff mostly).\n         assertEquals(\"there & now > Hello\", div.text());\n         assertEquals(\"there &amp; now &gt; <p>Hello</p>\", TextUtil.stripNewlines(div.html()));\n     }\n+\n+    @Test(expected = IllegalArgumentException.class) public void testThrowsOnAddNullText() {\n+        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n+        Element div = doc.getElementById(\"1\");\n+        div.appendText(null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)  public void testThrowsOnPrependNullText() {\n+        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n+        Element div = doc.getElementById(\"1\");\n+        div.prependText(null);\n+    }\n     \n     @Test public void testAddNewHtml() {\n         Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n         assertEquals(\"http://example2.com/four/\", els.get(3).absUrl(\"href\"));\n         assertEquals(\"https://example2.com/five/\", els.get(4).absUrl(\"href\"));\n     }\n+\n+    @Test\n+    public void appendMustCorrectlyMoveChildrenInsideOneParentElement() {\n+        Document doc = new Document(\"\");\n+        Element body = doc.appendElement(\"body\");\n+        body.appendElement(\"div1\");\n+        body.appendElement(\"div2\");\n+        final Element div3 = body.appendElement(\"div3\");\n+        div3.text(\"Check\");\n+        final Element div4 = body.appendElement(\"div4\");\n+\n+        ArrayList<Element> toMove = new ArrayList<Element>();\n+        toMove.add(div3);\n+        toMove.add(div4);\n+\n+        body.insertChildren(0, toMove);\n+\n+        String result = doc.toString().replaceAll(\"\\\\s+\", \"\");\n+        assertEquals(\"<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>\", result);\n+\n+    }\n }\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         Document doc = Jsoup.parse(body);\n         assertEquals(1, doc.body().children().size());\n     }\n+\n+    @Test public void testUsingSingleQuotesInQueries() {\n+        String body = \"<body> <div class='main'>hello</div></body>\";\n+        Document doc = Jsoup.parse(body);\n+        Elements main = doc.select(\"div[class='main']\");\n+        assertEquals(\"hello\", main.text());\n+    }\n }\n--- a/src/main/java/org/jsoup/helper/W3CDom.java\n+++ b/src/main/java/org/jsoup/helper/W3CDom.java\n         Validate.notNull(in);\n         DocumentBuilder builder;\n         try {\n+        \t//set the factory to be namespace-aware\n+        \tfactory.setNamespaceAware(true);\n             builder = factory.newDocumentBuilder();\n             Document out = builder.newDocument();\n             convert(in, out);\n             out.setDocumentURI(in.location());\n \n         org.jsoup.nodes.Element rootEl = in.child(0); // skip the #root node\n-        NodeTraversor traversor = new NodeTraversor(new W3CBuilder(out));\n-        traversor.traverse(rootEl);\n+        //check to see if the the root node has a namespace attribute\n+        String namespace = rootEl.attr(\"xmlns\");\n+        NodeTraversor traversor = new NodeTraversor(new W3CBuilder(out, namespace));\n+        if (namespace == null || namespace.equals(\"\")) //maven build fails if using .isEmpty()\n+        \ttraversor.traverse(rootEl);\n+        else\n+        {\n+        \ttraversor.traverse(rootEl, namespace);\n+        }\n     }\n \n     /**\n     protected class W3CBuilder implements NodeVisitor {\n         private final Document doc;\n         private Element dest;\n+        private String namespace = null;\n \n         public W3CBuilder(Document doc) {\n             this.doc = doc;\n+        }\n+        \n+        public W3CBuilder(Document doc, String namespace) {\n+            this.doc = doc;\n+            if (namespace != null && !namespace.equals(\"\")) //maven build fails if using .isEmpty()\n+            \tthis.namespace = namespace;\n         }\n \n         public void head(org.jsoup.nodes.Node source, int depth) {\n             if (source instanceof org.jsoup.nodes.Element) {\n                 org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n-                Element el = doc.createElement(sourceEl.tagName());\n+                Element el = doc.createElementNS(namespace, sourceEl.tagName());\n                 copyAttributes(sourceEl, el);\n                 if (dest == null) { // sets up the root\n                     doc.appendChild(el);\n--- a/src/main/java/org/jsoup/select/NodeTraversor.java\n+++ b/src/main/java/org/jsoup/select/NodeTraversor.java\n     /**\n      * Start a depth-first traverse of the root and all of its descendants.\n      * @param root the root node point to traverse.\n+     * @param namespace the namespace of the document\n      */\n-    public void traverse(Node root) {\n+    public void traverse(Node root, String namespace) {\n         Node node = root;\n         int depth = 0;\n         \n             }\n         }\n     }\n+    \n+    public void traverse (Node root)\n+    {\n+    \ttraverse (root, null);\n+    }\n }\n--- a/src/test/java/org/jsoup/helper/W3CDomTest.java\n+++ b/src/test/java/org/jsoup/helper/W3CDomTest.java\n         String out = w3c.asString(wDoc);\n         assertTrue(out.contains(\"ipod\"));\n     }\n+    \n+    @Test\n+    public void namespacePreservation()\n+    {\n+    \tFile in = ParseTest.getFile(\"/htmltests/cover.xhtml\");\n+    \torg.jsoup.nodes.Document jsoupDoc = null;\n+    \tDocument doc = null;\n+\t\ttry {\n+\t\t\tjsoupDoc = Jsoup.parse(in, \"UTF-8\");\n+\t\t\t//then, convert it back into a WC3 Dom document\n+\t    \torg.jsoup.helper.W3CDom jDom = new org.jsoup.helper.W3CDom();\n+\t    \tdoc = jDom.fromJsoup(jsoupDoc);\n+\t\t} catch (IOException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n+    \tif (doc != null)\n+    \t{\n+    \t\tassertEquals(doc.getChildNodes().item(0).getNamespaceURI(), \"http://www.w3.org/1999/xhtml\");\n+    \t\tassertEquals(doc.getChildNodes().item(0).getLocalName(), \"html\");\n+    \t}\n+    }\n }\n ", "timestamp": 1459878483, "metainfo": ""}