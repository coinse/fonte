{"sha": "f61ba0f9cf5f5fa82af0938f5f4b3c28a119649d", "log": "Speed improvement, final marks  Helps with this abstract hierarchy", "commit": "\n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n         return this.getClass().getSimpleName();\n     }\n \n-    static class Doctype extends Token {\n+    static final class Doctype extends Token {\n         final StringBuilder name = new StringBuilder();\n         final StringBuilder publicIdentifier = new StringBuilder();\n         final StringBuilder systemIdentifier = new StringBuilder();\n         boolean selfClosing = false;\n         Attributes attributes; // start tags get attributes on construction. End tags get attributes on first new attribute (but only for parser convenience, not used).\n \n-        void newAttribute() {\n+        final void newAttribute() {\n             if (attributes == null)\n                 attributes = new Attributes();\n \n                 pendingAttributeValue.delete(0, pendingAttributeValue.length());\n         }\n \n-        void finaliseTag() {\n+        final void finaliseTag() {\n             // finalises for emit\n             if (pendingAttributeName != null) {\n                 // todo: check if attribute name exists; if so, drop and error\n             }\n         }\n \n-        String name() {\n+        final String name() {\n             Validate.isFalse(tagName == null || tagName.length() == 0);\n             return tagName;\n         }\n \n-        Tag name(String name) {\n+        final Tag name(String name) {\n             tagName = name;\n             return this;\n         }\n \n-        boolean isSelfClosing() {\n+        final boolean isSelfClosing() {\n             return selfClosing;\n         }\n \n         @SuppressWarnings({\"TypeMayBeWeakened\"})\n-        Attributes getAttributes() {\n+        final Attributes getAttributes() {\n             return attributes;\n         }\n \n         // these appenders are rarely hit in not null state-- caused by null chars.\n-        void appendTagName(String append) {\n+        final void appendTagName(String append) {\n             tagName = tagName == null ? append : tagName.concat(append);\n         }\n \n-        void appendTagName(char append) {\n+        final void appendTagName(char append) {\n             appendTagName(String.valueOf(append));\n         }\n \n-        void appendAttributeName(String append) {\n+        final void appendAttributeName(String append) {\n             pendingAttributeName = pendingAttributeName == null ? append : pendingAttributeName.concat(append);\n         }\n \n-        void appendAttributeName(char append) {\n+        final void appendAttributeName(char append) {\n             appendAttributeName(String.valueOf(append));\n         }\n \n-        void appendAttributeValue(String append) {\n+        final void appendAttributeValue(String append) {\n             ensureAttributeValue();\n             pendingAttributeValue.append(append);\n         }\n \n-        void appendAttributeValue(char append) {\n+        final void appendAttributeValue(char append) {\n             ensureAttributeValue();\n             pendingAttributeValue.append(append);\n         }\n \n-        void appendAttributeValue(char[] append) {\n+        final void appendAttributeValue(char[] append) {\n             ensureAttributeValue();\n             pendingAttributeValue.append(append);\n         }\n \n-        private final void ensureAttributeValue() {\n+        private void ensureAttributeValue() {\n             if (pendingAttributeValue == null)\n                 pendingAttributeValue = new StringBuilder();\n         }\n     }\n \n-    static class StartTag extends Tag {\n+    final static class StartTag extends Tag {\n         StartTag() {\n             super();\n             attributes = new Attributes();\n         }\n     }\n \n-    static class EndTag extends Tag{\n+    final static class EndTag extends Tag{\n         EndTag() {\n             super();\n             type = TokenType.EndTag;\n         }\n     }\n \n-    static class Comment extends Token {\n+    final static class Comment extends Token {\n         final StringBuilder data = new StringBuilder();\n         boolean bogus = false;\n \n         }\n     }\n \n-    static class Character extends Token {\n+    final static class Character extends Token {\n         private final String data;\n \n         Character(String data) {\n         }\n     }\n \n-    static class EOF extends Token {\n+    final static class EOF extends Token {\n         EOF() {\n             type = Token.TokenType.EOF;\n         }\n     }\n \n-    boolean isDoctype() {\n+    final boolean isDoctype() {\n         return type == TokenType.Doctype;\n     }\n \n-    Doctype asDoctype() {\n+    final Doctype asDoctype() {\n         return (Doctype) this;\n     }\n \n-    boolean isStartTag() {\n+    final boolean isStartTag() {\n         return type == TokenType.StartTag;\n     }\n \n-    StartTag asStartTag() {\n+    final StartTag asStartTag() {\n         return (StartTag) this;\n     }\n \n-    boolean isEndTag() {\n+    final boolean isEndTag() {\n         return type == TokenType.EndTag;\n     }\n \n-    EndTag asEndTag() {\n+    final EndTag asEndTag() {\n         return (EndTag) this;\n     }\n \n-    boolean isComment() {\n+    final boolean isComment() {\n         return type == TokenType.Comment;\n     }\n \n-    Comment asComment() {\n+    final Comment asComment() {\n         return (Comment) this;\n     }\n \n-    boolean isCharacter() {\n+    final boolean isCharacter() {\n         return type == TokenType.Character;\n     }\n \n-    Character asCharacter() {\n+    final Character asCharacter() {\n         return (Character) this;\n     }\n \n-    boolean isEOF() {\n+    final boolean isEOF() {\n         return type == TokenType.EOF;\n     }\n \n-    enum TokenType {\n+    static enum TokenType {\n         Doctype,\n         StartTag,\n         EndTag,", "timestamp": 1414363861, "metainfo": ""}