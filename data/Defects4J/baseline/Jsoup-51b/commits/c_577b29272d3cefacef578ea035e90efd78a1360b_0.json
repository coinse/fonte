{"sha": "577b29272d3cefacef578ea035e90efd78a1360b", "log": "Initial implementation of Whitelist cleaner config.", "commit": "\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n package org.jsoup.safety;\n+\n+/*\n+    Thank you to Ryan Grove (wonko.com) for the Ruby HTML cleaner http://github.com/rgrove/sanitize/, which inspired\n+    this whitelist configuration, and the initial defaults.\n+ */\n+\n+import org.apache.commons.lang.Validate;\n \n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.lang.Validate;\n-\n+\n+/**\n+ Whitelists define what HTML (elements and attributes) to allow through the cleaner. Everything else is removed.\n+ <p/>\n+ Pick one of the defaults ({@link #none}, {@link #simpleText}, {@link #basic}, {@link #basicWithImages}, or {@link\n+#relaxed}), and either use as-is, or use the {@link #addTags}, {@link #addAttributes}, {@link #addEnforcedAttribute},\n+ and {@link #addProtocols} methods to tweak the whitelist as necessary.\n+ <p/>\n+ The cleaner and these whitelists assume that you want to clean a <code>body</code> fragment of HTML (to add user\n+ supplied HTML into a templated page), and not to clean a full HTML document. If the latter is the case, either wrap the\n+ document HTML around the cleaned body HTML, or create a whitelist that allows <code>html</code> and <code>head</code>\n+ elements as appropriate.\n+\n+ @author Jonathan Hedley\n+ */\n public class Whitelist {\n     private Set<TagName> tagNames; // tags allowed, lower case. e.g. [p, br, span]\n-    private Map<TagName, Set<AttributeKey>> attributes; // tag -> attribute[]. allowed attributes [href, src, class] for a tag.\n-    private Map<TagName, Map<AttributeKey, AttributeValue>> addAttributes; // always set these attribute values\n-    private Map<TagName, Map<AttributeKey, Protocol>> protocols; // allowed URL protocols for attributes\n-    \n+    private Map<TagName, Set<AttributeKey>> attributes; // tag -> attribute[]. allowed attributes [href] for a tag.\n+    private Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; // always set these attribute values\n+    private Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols; // allowed URL protocols for attributes\n+\n+    /**\n+     This whitelist allows only text nodes: all HTML will be stripped.\n+\n+     @return whitelist\n+     */\n+    public static Whitelist none() {\n+        return new Whitelist();\n+    }\n+\n+    /**\n+     This whitelist allows only simple text formatting: <code>b, em, i, strong, u</code>. All other HTML (tags and\n+     attributes) will be removed.\n+\n+     @return whitelist\n+     */\n+    public static Whitelist simpleText() {\n+        return new Whitelist()\n+                .addTags(\"b\", \"em\", \"i\", \"strong\", \"u\")\n+                ;\n+    }\n+\n+    /**\n+     This whitelist allows a fuller range of text nodes: <code>a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li,\n+     ol, p, pre, q, small, strike, strong, sub, sup, u, ul</code>, and appropriate attributes.\n+     <p/>\n+     Links (<code>a</code> elements) can point to <code>http, https, ftp, mailto</code>, and have an enforced\n+     <code>rel=nofollow</code> attribute.\n+     <p/>\n+     Does not allow images.\n+\n+     @return whitelist\n+     */\n+    public static Whitelist basic() {\n+        return new Whitelist()\n+                .addTags(\n+                        \"a\", \"b\", \"blockquote\", \"br\", \"cite\", \"code\", \"dd\", \"dl\", \"dt\", \"em\",\n+                        \"i\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\", \"sub\",\n+                        \"sup\", \"u\", \"ul\")\n+\n+                .addAttributes(\"a\", \"href\")\n+                .addAttributes(\"blockquote\", \"cite\")\n+                .addAttributes(\"q\", \"cite\")\n+\n+                .addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\")\n+                .addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")\n+                .addProtocols(\"cite\", \"cite\", \"http\", \"https\")\n+\n+                .addEnforcedAttribute(\"a\", \"rel\", \"nofollow\")\n+                ;\n+\n+    }\n+\n+    /**\n+     This whitelist allows the same text tags as {@link #basic}, and also allows <code>img</code> tags, with appropriate\n+     attributes, with <code>src</code> pointing to <code>http</code> or <code>https</code>.\n+\n+     @return whitelist\n+     */\n+    public static Whitelist basicWithImages() {\n+        return basic()\n+                .addTags(\"img\")\n+                .addAttributes(\"img\", \"align\", \"alt\", \"height\", \"src\", \"title\", \"width\")\n+                .addProtocols(\"img\", \"src\", \"http\", \"https\")\n+                ;\n+    }\n+\n+    /**\n+     This whitelist allows a full range of text and structural body HTML: <code>a, b, blockquote, br, caption, cite,\n+     code, col, colgroup, dd, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, strike, strong, sub,\n+     sup, table, tbody, td, tfoot, th, thead, tr, u, ul</code>\n+     <p/>\n+     Links do not have an enforced <code>rel=nofollow</code> attribute, but you can add that if desired.\n+\n+     @return whitelist\n+     */\n+    public static Whitelist relaxed() {\n+        return new Whitelist()\n+                .addTags(\n+                        \"a\", \"b\", \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"col\",\n+                        \"colgroup\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\",\n+                        \"i\", \"img\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\",\n+                        \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"u\",\n+                        \"ul\")\n+\n+                .addAttributes(\"a\", \"href\", \"title\")\n+                .addAttributes(\"blockquote\", \"cite\")\n+                .addAttributes(\"col\", \"span\", \"width\")\n+                .addAttributes(\"colgroup\", \"span\", \"width\")\n+                .addAttributes(\"img\", \"align\", \"alt\", \"height\", \"src\", \"title\", \"width\")\n+                .addAttributes(\"ol\", \"start\", \"type\")\n+                .addAttributes(\"q\", \"cite\")\n+                .addAttributes(\"table\", \"summary\", \"width\")\n+                .addAttributes(\"td\", \"abbr\", \"axis\", \"colspan\", \"rowspan\", \"width\")\n+                .addAttributes(\n+                        \"th\", \"abbr\", \"axis\", \"colspan\", \"rowspan\", \"scope\",\n+                        \"width\")\n+                .addAttributes(\"ul\", \"type\")\n+\n+                .addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\")\n+                .addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")\n+                .addProtocols(\"img\", \"src\", \"http\", \"https\")\n+                .addProtocols(\"q\", \"cite\", \"http\", \"https\")\n+                ;\n+    }\n+\n+    /**\n+     Create a new, empty whitelist. Generally it will be better to start with a default prepared whitelist instead.\n+\n+     @see #basic()\n+     @see #basicWithImages()\n+     @see #simpleText()\n+     @see #relaxed()\n+     */\n     public Whitelist() {\n         tagNames = new HashSet<TagName>();\n         attributes = new HashMap<TagName, Set<AttributeKey>>();\n-        addAttributes = new HashMap<TagName, Map<AttributeKey, AttributeValue>>();\n-        protocols = new HashMap<TagName, Map<AttributeKey, Protocol>>();\n-    }\n-    \n+        enforcedAttributes = new HashMap<TagName, Map<AttributeKey, AttributeValue>>();\n+        protocols = new HashMap<TagName, Map<AttributeKey, Set<Protocol>>>();\n+    }\n+\n+    /**\n+     Add a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.)\n+\n+     @param tags tag names to allow\n+     @return this (for chaining)\n+     */\n     public Whitelist addTags(String... tags) {\n+        Validate.notNull(tags);\n+\n         for (String tagName : tags) {\n+            Validate.notEmpty(tagName);\n             tagNames.add(TagName.valueOf(tagName));\n         }\n         return this;\n     }\n-    \n-    public Whitelist addAttributes(String tag, String... attribute) {\n+\n+    /**\n+     Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.)\n+     <p/>\n+     To make an attribute valid for <b>all tags</b>, use the pseudo tag <code>:all</code>, e.g.\n+     <code>addAttributes(\":all\", \"class\")</code>.\n+\n+     @param tag  The tag the attributes are for\n+     @param keys List of valid attributes for the tag\n+     @return this (for chaining)\n+     */\n+    public Whitelist addAttributes(String tag, String... keys) {\n+        Validate.notEmpty(tag);\n+        Validate.notNull(keys);\n+\n         TagName tagName = TagName.valueOf(tag);\n         Set<AttributeKey> attributeSet = new HashSet<AttributeKey>();\n-        for (String key : attribute) {\n+        for (String key : keys) {\n+            Validate.notEmpty(key);\n             attributeSet.add(AttributeKey.valueOf(key));\n         }\n         if (attributes.containsKey(tagName)) {\n             attributes.put(tagName, attributeSet);\n         }\n         return this;\n-        \n+    }\n+\n+    /**\n+     Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element\n+     already has the attribute set, it will be overridden.\n+     <p/>\n+     E.g.: <code>addEnforcedAttribute(\"a\", \"rel\", \"nofollow\")</code> will make all <code>a</code> tags output as\n+     <code>&lt;a href=\"...\" rel=\"nofollow\"></code>\n+\n+     @param tag   The tag the enforced attribute is for\n+     @param key   The attribute key\n+     @param value The enforced attribute value\n+     @return this (for chaining)\n+     */\n+    public Whitelist addEnforcedAttribute(String tag, String key, String value) {\n+        Validate.notEmpty(tag);\n+        Validate.notEmpty(key);\n+        Validate.notEmpty(value);\n+\n+        TagName tagName = TagName.valueOf(tag);\n+        AttributeKey attrKey = AttributeKey.valueOf(key);\n+        AttributeValue attrVal = AttributeValue.valueOf(value);\n+\n+        if (enforcedAttributes.containsKey(tagName)) {\n+            enforcedAttributes.get(tagName).put(attrKey, attrVal);\n+        } else {\n+            Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>();\n+            attrMap.put(attrKey, attrVal);\n+            enforcedAttributes.put(tagName, attrMap);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to\n+     URLs with the defined protocol.\n+     <p/>\n+     E.g.: <code>addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\")</code>\n+\n+     @param tag       Tag the URL protocol is for\n+     @param key       Attribute key\n+     @param protocols List of valid protocols\n+     @return this, for chaining\n+     */\n+    public Whitelist addProtocols(String tag, String key, String... protocols) {\n+        Validate.notEmpty(tag);\n+        Validate.notEmpty(key);\n+        Validate.notNull(protocols);\n+\n+        TagName tagName = TagName.valueOf(tag);\n+        AttributeKey attrKey = AttributeKey.valueOf(key);\n+        Map<AttributeKey, Set<Protocol>> attrMap;\n+        Set<Protocol> protSet;\n+\n+        if (this.protocols.containsKey(tagName)) {\n+            attrMap = this.protocols.get(tagName);\n+        } else {\n+            attrMap = new HashMap<AttributeKey, Set<Protocol>>();\n+            this.protocols.put(tagName, attrMap);\n+        }\n+        if (attrMap.containsKey(attrKey)) {\n+            protSet = attrMap.get(attrKey);\n+        } else {\n+            protSet = new HashSet<Protocol>();\n+            attrMap.put(attrKey, protSet);\n+        }\n+        for (String protocol : protocols) {\n+            Validate.notEmpty(protocol);\n+            Protocol prot = Protocol.valueOf(protocol);\n+            protSet.add(prot);\n+        }\n+        return this;\n     }\n \n     // named types for config. All just hold strings, but here for my sanity.\n+\n     static class TagName extends TypedValue {\n         TagName(String value) {\n             super(value);\n         }\n+\n         static TagName valueOf(String value) {\n             return new TagName(value);\n         }\n     }\n-    \n+\n     static class AttributeKey extends TypedValue {\n         AttributeKey(String value) {\n             super(value);\n         }\n+\n         static AttributeKey valueOf(String value) {\n             return new AttributeKey(value);\n         }\n     }\n-    \n+\n     static class AttributeValue extends TypedValue {\n         AttributeValue(String value) {\n             super(value);\n         }\n+\n         static AttributeValue valueOf(String value) {\n             return new AttributeValue(value);\n         }\n     }\n-    \n+\n     static class Protocol extends TypedValue {\n         Protocol(String value) {\n             super(value);\n         }\n+\n         static Protocol valueOf(String value) {\n             return new Protocol(value);\n         }\n     }\n-    \n+\n     abstract static class TypedValue {\n         private String value;\n-        \n+\n         TypedValue(String value) {\n             Validate.notEmpty(value);\n             this.value = value;\n         }\n-        \n+\n         @Override\n         public int hashCode() {\n             final int prime = 31;\n             } else if (!value.equals(other.value)) return false;\n             return true;\n         }\n-        \n+\n         @Override\n         public String toString() {\n             return value;\n-        }        \n+        }\n     }\n }\n ", "timestamp": 1309605104, "metainfo": ""}