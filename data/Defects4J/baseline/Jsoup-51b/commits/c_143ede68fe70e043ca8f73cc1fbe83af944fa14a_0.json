{"sha": "143ede68fe70e043ca8f73cc1fbe83af944fa14a", "log": "Make prefix namespaces work  Initial PR only supported root xmlns, not prefixed tags and their namespaces.", "commit": "\n--- a/src/main/java/org/jsoup/helper/W3CDom.java\n+++ b/src/main/java/org/jsoup/helper/W3CDom.java\n package org.jsoup.helper;\n \n import org.jsoup.nodes.Attribute;\n+import org.jsoup.nodes.Attributes;\n import org.jsoup.select.NodeTraversor;\n import org.jsoup.select.NodeVisitor;\n import org.w3c.dom.Comment;\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n import java.io.StringWriter;\n-import javax.xml.transform.TransformerException;\n+import java.util.HashMap;\n \n /**\n  * Helper class to transform a {@link org.jsoup.nodes.Document} to a {@link org.w3c.dom.Document org.w3c.dom.Document},\n             out.setDocumentURI(in.location());\n \n         org.jsoup.nodes.Element rootEl = in.child(0); // skip the #root node\n-        //check to see if the the root node has a namespace attribute\n-        String namespace = rootEl.attr(\"xmlns\");\n-        NodeTraversor traversor = new NodeTraversor(new W3CBuilder(out, namespace));\n-        if (namespace == null || namespace.equals(\"\")) //maven build fails if using .isEmpty()\n-        \ttraversor.traverse(rootEl);\n-        else\n-        {\n-        \ttraversor.traverse(rootEl, namespace);\n-        }\n+        NodeTraversor traversor = new NodeTraversor(new W3CBuilder(out));\n+        traversor.traverse(rootEl);\n     }\n \n     /**\n      * Implements the conversion by walking the input.\n      */\n-    protected class W3CBuilder implements NodeVisitor {\n+    protected static class W3CBuilder implements NodeVisitor {\n+        private static final String xmlnsKey = \"xmlns\";\n+        private static final String xmlnsPrefix = \"xmlns:\";\n+\n         private final Document doc;\n+        private final HashMap<String, String> namespaces = new HashMap<String, String>(); // prefix => urn\n         private Element dest;\n-        private String namespace = null;\n \n         public W3CBuilder(Document doc) {\n             this.doc = doc;\n-        }\n-        \n-        public W3CBuilder(Document doc, String namespace) {\n-            this.doc = doc;\n-            if (namespace != null && !namespace.equals(\"\")) //maven build fails if using .isEmpty()\n-            \tthis.namespace = namespace;\n         }\n \n         public void head(org.jsoup.nodes.Node source, int depth) {\n             if (source instanceof org.jsoup.nodes.Element) {\n                 org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n+\n+                String prefix = updateNamespaces(sourceEl);\n+                String namespace = namespaces.get(prefix);\n+\n                 Element el = doc.createElementNS(namespace, sourceEl.tagName());\n                 copyAttributes(sourceEl, el);\n                 if (dest == null) { // sets up the root\n                 el.setAttribute(attribute.getKey(), attribute.getValue());\n             }\n         }\n+\n+        /**\n+         * Finds any namespaces defined in this element. Returns any tag prefix.\n+         */\n+        private String updateNamespaces(org.jsoup.nodes.Element el) {\n+            // scan the element for namespace declarations\n+            // like: xmlns=\"blah\" or xmlns:prefix=\"blah\"\n+            Attributes attributes = el.attributes();\n+            for (Attribute attr : attributes) {\n+                String key = attr.getKey();\n+                String prefix;\n+                if (key.equals(xmlnsKey)) {\n+                    prefix = \"\";\n+                } else if (key.startsWith(xmlnsPrefix)) {\n+                    prefix = key.substring(xmlnsPrefix.length());\n+                } else {\n+                    continue;\n+                }\n+                namespaces.put(prefix, attr.getValue());\n+            }\n+\n+            // get the element prefix if any\n+            int pos = el.tagName().indexOf(\":\");\n+            return pos > 0 ? el.tagName().substring(0, pos) : \"\";\n+        }\n+\n     }\n \n     /**\n--- a/src/test/java/org/jsoup/helper/W3CDomTest.java\n+++ b/src/test/java/org/jsoup/helper/W3CDomTest.java\n import org.jsoup.integration.ParseTest;\n import org.junit.Test;\n import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n \n import java.io.File;\n import java.io.IOException;\n \n import static org.jsoup.TextUtil.LE;\n-\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n \n         W3CDom w3c = new W3CDom();\n         Document wDoc = w3c.fromJsoup(doc);\n+        Node htmlEl = wDoc.getChildNodes().item(0);\n+        assertEquals(null, htmlEl.getNamespaceURI());\n+        assertEquals(\"html\", htmlEl.getLocalName());\n+        assertEquals(\"html\", htmlEl.getNodeName());\n+\n         String out = w3c.asString(wDoc);\n         assertTrue(out.contains(\"ipod\"));\n     }\n-    \n+\n     @Test\n-    public void namespacePreservation()\n-    {\n-    \tFile in = ParseTest.getFile(\"/htmltests/cover.xhtml\");\n-    \torg.jsoup.nodes.Document jsoupDoc = null;\n-    \tDocument doc = null;\n-\t\ttry {\n-\t\t\tjsoupDoc = Jsoup.parse(in, \"UTF-8\");\n-\t\t\t//then, convert it back into a WC3 Dom document\n-\t    \torg.jsoup.helper.W3CDom jDom = new org.jsoup.helper.W3CDom();\n-\t    \tdoc = jDom.fromJsoup(jsoupDoc);\n-\t\t} catch (IOException e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n-\t\t}\n-    \tif (doc != null)\n-    \t{\n-    \t\tassertEquals(doc.getChildNodes().item(0).getNamespaceURI(), \"http://www.w3.org/1999/xhtml\");\n-    \t\tassertEquals(doc.getChildNodes().item(0).getLocalName(), \"html\");\n-    \t}\n+    public void namespacePreservation() throws IOException {\n+        File in = ParseTest.getFile(\"/htmltests/namespaces.xhtml\");\n+        org.jsoup.nodes.Document jsoupDoc;\n+        jsoupDoc = Jsoup.parse(in, \"UTF-8\");\n+\n+        Document doc;\n+        org.jsoup.helper.W3CDom jDom = new org.jsoup.helper.W3CDom();\n+        doc = jDom.fromJsoup(jsoupDoc);\n+\n+        Node htmlEl = doc.getChildNodes().item(0);\n+        assertEquals(\"http://www.w3.org/1999/xhtml\", htmlEl.getNamespaceURI());\n+        assertEquals(\"html\", htmlEl.getLocalName());\n+        assertEquals(\"html\", htmlEl.getNodeName());\n+\n+        Node epubTitle = htmlEl.getChildNodes().item(2).getChildNodes().item(3);\n+        assertEquals(\"http://www.idpf.org/2007/ops\", epubTitle.getNamespaceURI());\n+        assertEquals(\"title\", epubTitle.getLocalName());\n+        assertEquals(\"epub:title\", epubTitle.getNodeName());\n+\n+        Node xSection = epubTitle.getNextSibling().getNextSibling();\n+        assertEquals(\"urn:test\", xSection.getNamespaceURI());\n+        assertEquals(\"section\", xSection.getLocalName());\n+        assertEquals(\"x:section\", xSection.getNodeName());\n     }\n }\n ", "timestamp": 1459878835, "metainfo": ""}