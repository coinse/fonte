{"sha": "7bb01c0fd0ea1e97e66b2b1cccc39e3c57bc883d", "log": "Merge proxy support", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.net.Proxy;\n import java.net.URL;\n import java.util.Collection;\n import java.util.Map;\n      * @return this Connection, for chaining\n      */\n     Connection url(String url);\n+\n+    /**\n+     * Set the proxy to use for this request. Set to <code>null</code> to disable.\n+     * @param proxy proxy to use\n+     * @return this Connection, for chaining\n+     */\n+    Connection proxy(Proxy proxy);\n+\n+    /**\n+     * Set the HTTP proxy to use for this request.\n+     * @param proxy proxy to use\n+     * @return this Connection, for chaining\n+     */\n+    Connection proxy(String host, int port);\n \n     /**\n      * Set the request user-agent header.\n      * Represents a HTTP request.\n      */\n     interface Request extends Base<Request> {\n-\n+        /**\n+         * Get the proxy used for this request.\n+         * @return the proxy; <code>null</code> if not enabled.\n+         */\n+        Proxy proxy();\n+\n+        /**\n+         * Update the proxy for this request.\n+         * @param proxy the proxy ot use; <code>null</code> to disable.\n+         * @return this Request, for chaining\n+         */\n+        Request proxy(Proxy proxy);\n+\n+        /**\n+         * Set the HTTP proxy to use for this request.\n+         * @param proxy proxy to use\n+         * @return this Connection, for chaining\n+         */\n+        Request proxy(String host, int port);\n \n         /**\n          * Get the request timeout, in milliseconds.\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n package org.jsoup.helper;\n \n-import org.jsoup.Connection;\n-import org.jsoup.HttpStatusException;\n-import org.jsoup.UnsupportedMimeTypeException;\n+import org.jsoup.*;\n import org.jsoup.nodes.Document;\n import org.jsoup.parser.Parser;\n import org.jsoup.parser.TokenQueue;\n \n import javax.net.ssl.*;\n import java.io.*;\n-import java.net.HttpURLConnection;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.net.URLEncoder;\n+import java.net.*;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n import java.nio.charset.IllegalCharsetNameException;\n         } catch (MalformedURLException e) {\n             throw new IllegalArgumentException(\"Malformed URL: \" + url, e);\n         }\n+        return this;\n+    }\n+\n+    public Connection proxy(Proxy proxy) {\n+        req.proxy(proxy);\n+        return this;\n+    }\n+\n+    public Connection proxy(String host, int port) {\n+        req.proxy(host, port);\n         return this;\n     }\n \n     }\n \n     public static class Request extends HttpConnection.Base<Connection.Request> implements Connection.Request {\n+        private Proxy proxy; // nullable\n         private int timeoutMilliseconds;\n         private int maxBodySizeBytes;\n         private boolean followRedirects;\n             method = Method.GET;\n             headers.put(\"Accept-Encoding\", \"gzip\");\n             parser = Parser.htmlParser();\n+        }\n+\n+        public Proxy proxy() {\n+            return proxy;\n+        }\n+\n+        public Request proxy(Proxy proxy) {\n+            this.proxy = proxy;\n+            return this;\n+        }\n+\n+        public Request proxy(String host, int port) {\n+            this.proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(host, port));\n+            return this;\n         }\n \n         public int timeout() {\n \n         // set up connection defaults, and details from request\n         private static HttpURLConnection createConnection(Connection.Request req) throws IOException {\n-            HttpURLConnection conn = (HttpURLConnection) req.url().openConnection();\n+            final HttpURLConnection conn = (HttpURLConnection) (\n+                req.proxy() == null ?\n+                req.url().openConnection() :\n+                req.url().openConnection(req.proxy())\n+            );\n \n             conn.setRequestMethod(req.method().name());\n             conn.setInstanceFollowRedirects(false); // don't rely on native redirection support\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n+import java.net.*;\n import java.util.Map;\n \n import static org.hamcrest.core.Is.is;\n         Document doc = response.parse();\n         assertEquals(\"\", doc.text());\n     }\n+\n+\n+    /*\n+     Proxy tests. Assumes local proxy running on 8888, without system propery set (so that specifying it is required).\n+     */\n+\n+    @Test\n+    public void fetchViaHttpProxy() throws IOException {\n+        String url = \"http://jsoup.org\";\n+        Proxy proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(\"localhost\", 8888));\n+        Document doc = Jsoup.connect(url).proxy(proxy).get();\n+        assertTrue(doc.title().contains(\"jsoup\"));\n+    }\n+\n+    @Test\n+    public void fetchViaHttpProxySetByArgument() throws IOException {\n+        String url = \"http://jsoup.org\";\n+        Document doc = Jsoup.connect(url).proxy(\"localhost\", 8888).get();\n+        assertTrue(doc.title().contains(\"jsoup\"));\n+    }\n+\n+    @Test\n+    public void invalidProxyFails() throws IOException {\n+        boolean caught = false;\n+        String url = \"http://jsoup.org\";\n+        try {\n+            Document doc = Jsoup.connect(url).proxy(\"localhost\", 8889).get();\n+        } catch (IOException e) {\n+            caught = e instanceof ConnectException;\n+        }\n+        assertTrue(caught);\n+    }\n+\n+    @Test\n+    public void proxyGetAndSet() throws IOException {\n+        String url = \"http://jsoup.org\";\n+        Proxy proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(\"localhost\", 8889)); // invalid\n+        final Connection con = Jsoup.connect(url).proxy(proxy);\n+\n+        assert con.request().proxy() == proxy;\n+        con.request().proxy(null); // disable\n+        Document doc = con.get();\n+        assertTrue(doc.title().contains(\"jsoup\")); // would fail if actually went via proxy\n+    }\n }", "timestamp": 1459724433, "metainfo": ""}