{"sha": "dfac9ce465ff9c988904d05014d2be2715aa1d2b", "log": "Refactored the Cleaner to traverse rather than recurse child nodes  Avoids the risk of overflowing the stack  Fixes #246", "commit": "\n--- a/src/main/java/org/jsoup/safety/Cleaner.java\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n import org.jsoup.helper.Validate;\n import org.jsoup.nodes.*;\n import org.jsoup.parser.Tag;\n+import org.jsoup.select.NodeTraversor;\n+import org.jsoup.select.NodeVisitor;\n \n import java.util.List;\n \n \n     /**\n      Iterates the input and copies trusted nodes (tags, attributes, text) into the destination.\n-     @param source source of HTML\n-     @param dest destination element to copy into\n-     @return number of discarded elements (that were considered unsafe)\n      */\n-    private int copySafeNodes(Element source, Element dest) {\n-        List<Node> sourceChildren = source.childNodes();\n-        int numDiscarded = 0;\n+    private final class CleaningVisitor implements NodeVisitor {\n+        private int numDiscarded = 0;\n+        private final Element root;\n+        private Element destination; // current element to append nodes to\n \n-        for (Node sourceChild : sourceChildren) {\n-            if (sourceChild instanceof Element) {\n-                Element sourceEl = (Element) sourceChild;\n+        private CleaningVisitor(Element root, Element destination) {\n+            this.root = root;\n+            this.destination = destination;\n+        }\n+\n+        public void head(Node source, int depth) {\n+            if (source instanceof Element) {\n+                Element sourceEl = (Element) source;\n \n                 if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                     ElementMeta meta = createSafeElement(sourceEl);\n                     Element destChild = meta.el;\n-                    dest.appendChild(destChild);\n+                    destination.appendChild(destChild);\n \n                     numDiscarded += meta.numAttribsDiscarded;\n-                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n-                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n+                    destination = destChild;\n+                } else if (source != root) { // not a safe tag, so don't add. don't count root against discarded.\n                     numDiscarded++;\n-                    numDiscarded += copySafeNodes(sourceEl, dest);\n                 }\n-            } else if (sourceChild instanceof TextNode) {\n-                TextNode sourceText = (TextNode) sourceChild;\n-                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n-                dest.appendChild(destText);\n-            } // else, we don't care about comments, xml proc instructions, etc\n+            } else if (source instanceof TextNode) {\n+                TextNode sourceText = (TextNode) source;\n+                TextNode destText = new TextNode(sourceText.getWholeText(), source.baseUri());\n+                destination.appendChild(destText);\n+            } else { // else, we don't care about comments, xml proc instructions, etc\n+                numDiscarded++;\n+            }\n         }\n-        return numDiscarded;\n+\n+        public void tail(Node source, int depth) {\n+            if (source instanceof Element && whitelist.isSafeTag(source.nodeName())) {\n+                destination = destination.parent(); // would have descended, so pop destination stack\n+            }\n+        }\n+    }\n+\n+    private int copySafeNodes(Element source, Element dest) {\n+        CleaningVisitor cleaningVisitor = new CleaningVisitor(source, dest);\n+        NodeTraversor traversor = new NodeTraversor(cleaningVisitor);\n+        traversor.traverse(source);\n+        return cleaningVisitor.numDiscarded;\n     }\n \n     private ElementMeta createSafeElement(Element sourceEl) {\n--- a/src/test/java/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/safety/CleanerTest.java\n         String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\";\n         String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n         String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n+        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n         assertTrue(Jsoup.isValid(ok, Whitelist.basic()));\n         assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));\n         assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));\n+        assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));\n     }\n     \n     @Test public void resolvesRelativeLinks() {\n         assertEquals(\"<a href=\\\"http://example.com/foo\\\" rel=\\\"nofollow\\\">Link</a>\\n<img src=\\\"http://example.com/bar\\\" />\", clean);\n     }\n \n-    @Test public void preservesRelatedLinksIfConfigured() {\n+    @Test public void preservesRelativeLinksIfConfigured() {\n         String html = \"<a href='/foo'>Link</a><img src='/bar'> <img src='javascript:alert()'>\";\n         String clean = Jsoup.clean(html, \"http://example.com/\", Whitelist.basicWithImages().preserveRelativeLinks(true));\n         assertEquals(\"<a href=\\\"/foo\\\" rel=\\\"nofollow\\\">Link</a>\\n<img src=\\\"/bar\\\" /> \\n<img />\", clean);", "timestamp": 1348945480, "metainfo": ""}