{"sha": "82fc90de25198d7a30c2928cc3f92c96768919ea", "log": "JsonNodeFactory: work around an old bug with BigDecimal and zero  This is the bug in question:  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6480539  In short: BigDecimal's .stripTrainlingZeroes() does not work at all on decimals which value is _exactly_ 0:  * new BigDecimal(\"0.0100\").stripTrailingZeroes() has a scale of 2, as expected; * new BigDecimal(\"0\") has a scale of 0; * new BigDecimal(\"0.000\").stripTrailingZeroes() has a scale of... 3!  To work around this bug, when the user asks to create a decimal node, compare the given value with BigDecimal.ZERO, and if the result is 0, return DecimalNode.ZERO (newly created by this patch), which is a \"new DecimalNode(BigDecimal.ZERO)\".", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java\n public final class DecimalNode\n     extends NumericNode\n {\n+    public static final DecimalNode ZERO = new DecimalNode(BigDecimal.ZERO);\n+\n     private final static BigDecimal MIN_INTEGER = BigDecimal.valueOf(Integer.MIN_VALUE);\n     private final static BigDecimal MAX_INTEGER = BigDecimal.valueOf(Integer.MAX_VALUE);\n     private final static BigDecimal MIN_LONG = BigDecimal.valueOf(Long.MIN_VALUE);\n--- a/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java\n      */\n     public NumericNode numberNode(BigDecimal v)\n     {\n-        return DecimalNode.valueOf(_cfgBigDecimalExact ? v : v.stripTrailingZeros());\n+        /*\n+         * If the user wants the exact representation of this big decimal,\n+         * return the value directly\n+         */\n+        if (_cfgBigDecimalExact)\n+            return DecimalNode.valueOf(v);\n+\n+        /*\n+         * If the user has asked to strip trailing zeroes, however, there is\n+         * this bug to account for:\n+         *\n+         * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6480539\n+         *\n+         * In short: zeroes are never stripped out of 0! We therefore _have_\n+         * to compare with BigDecimal.ZERO...\n+         */\n+        return v.compareTo(BigDecimal.ZERO) == 0 ? DecimalNode.ZERO\n+            : DecimalNode.valueOf(v.stripTrailingZeros());\n     }\n \n     /*", "timestamp": 1360330300, "metainfo": ""}