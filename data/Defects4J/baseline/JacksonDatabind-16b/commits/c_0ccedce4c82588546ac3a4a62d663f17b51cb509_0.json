{"sha": "0ccedce4c82588546ac3a4a62d663f17b51cb509", "log": "First part of #638, adding support for including attribute-backed virtual properties", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/annotation/JsonAppend.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotation/JsonAppend.java\n package com.fasterxml.jackson.databind.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;\n  * \n  * @since 2.5\n  */\n+@Target({ElementType.ANNOTATION_TYPE, ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@com.fasterxml.jackson.annotation.JacksonAnnotation\n public @interface JsonAppend\n {\n     /**\n     \n     /**\n      * Definition of a single attribute-backed property.\n+     * Attribute-backed properties will be appended after regular properties\n+     * in specified order, although their placement may be further changed\n+     * by the usual property-ordering functionality (alphabetic sorting;\n+     * explicit ordering)\n      */\n     public @interface Attr\n     {\n          * assigning a value for {@link #propName()}.\n          */\n         public String value();\n-\n+        \n         /**\n          * Name to use for serializing value of the attribute; if not defined,\n          * {@link #value} will be used instead.\n          */\n         public String propName() default \"\";\n+\n+        /**\n+         * Optional namespace to use; only relevant for data formats that use\n+         * namespaces (like XML).\n+         */\n+        public String propNamespace() default \"\";\n \n         /**\n          * When to include attribute-property. Default value indicates that\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n          */\n         AnnotatedMethod am = beanDesc.findMethod(\"initCause\", INIT_CAUSE_PARAMS);\n         if (am != null) { // should never be null\n-            SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am, \"cause\");\n+            SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am,\n+                    new PropertyName(\"cause\"));\n             SettableBeanProperty prop = constructSettableProperty(ctxt, beanDesc, propDef,\n                     am.getGenericParameterType(0));\n             if (prop != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java\n     extends AnnotatedMember\n     implements java.io.Serializable\n {\n-    private static final long serialVersionUID = 7364428299211355871L;\n+    private static final long serialVersionUID = 1L;\n \n     /**\n      * Actual {@link Field} used for access.\n      * Temporary field required for JDK serialization support\n      */\n     protected Serialization _serialization;\n-    \n+\n     /*\n     /**********************************************************\n     /* Life-cycle\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java\n     extends Annotated\n     implements java.io.Serializable\n {\n-    private static final long serialVersionUID = 7364428299211355871L;\n+    private static final long serialVersionUID = 1L; // since 2.5\n \n     // Transient since information not needed after construction, so\n     // no need to persist\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n \n     /**\n      * Method for accessing additional metadata.\n-     * NOTE: will never return null, so deferencing return value\n+     * NOTE: will never return null, so de-referencing return value\n      * is safe.\n      * \n      * @since 2.3\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n package com.fasterxml.jackson.databind.introspect;\n \n import java.lang.annotation.Annotation;\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.*;\n \n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n+import com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter;\n import com.fasterxml.jackson.databind.ser.std.RawSerializer;\n-import com.fasterxml.jackson.databind.util.ClassUtil;\n-import com.fasterxml.jackson.databind.util.Converter;\n-import com.fasterxml.jackson.databind.util.NameTransformer;\n+import com.fasterxml.jackson.databind.util.*;\n \n /**\n  * {@link AnnotationIntrospector} implementation that handles standard\n         if (ann == null) {\n             return;\n         }\n-        // !!! TODO: implement\n+        JavaType defaultType = null;\n+        for (JsonAppend.Attr attr : ann.attrs()) {\n+            PropertyMetadata metadata = attr.required() ?\n+                    PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\n+            // could add Index, Description in future, if those matter\n+            String attrName = attr.value();\n+\n+            // allow explicit renaming; if none, default to attribute name\n+            PropertyName propName = _propertyName(attr.propName(), attr.propNamespace());\n+            if (!propName.hasSimpleName()) {\n+                propName = new PropertyName(attrName);\n+            }\n+            SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,\n+                    /*AnnotatedMember*/ null, propName, metadata);\n+            // should there be a way to specify expected type?\n+            if (defaultType == null) {\n+                defaultType = config.constructType(Object.class);\n+            }\n+            properties.add(AttributePropertyWriter.construct(attrName, propDef,\n+                    ac, defaultType, attr.include()));\n+        }\n     }\n \n     /*\n         cls = _classIfExplicit(cls);\n         return (cls == null || cls == implicit) ? null : cls;\n     }\n-    \n+\n+    protected PropertyName _propertyName(String localName, String namespace) {\n+        if (localName.isEmpty()) {\n+            return PropertyName.USE_DEFAULT;\n+        }\n+        if (namespace == null || namespace.isEmpty()) {\n+            return new PropertyName(localName);\n+        }\n+        return new PropertyName(localName, namespace);\n+    }\n+\n     /**\n      * Helper method called to construct and initialize instance of {@link TypeResolverBuilder}\n      * if given annotated element indicates one is needed.\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/VirtualAnnotatedMember.java\n+package com.fasterxml.jackson.databind.introspect;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.*;\n+\n+/**\n+ * Placeholder used by virtual properties as placeholder for\n+ * underlying {@link AnnotatedMember}.\n+ * \n+ * @since 2.5\n+ */\n+public class VirtualAnnotatedMember extends AnnotatedMember\n+{\n+    private static final long serialVersionUID = 1L;\n+\n+    protected final Class<?> _declaringClass;\n+\n+    protected final Class<?> _rawType;\n+\n+    protected final String _name;\n+    \n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+\n+    public VirtualAnnotatedMember(Class<?> declaringClass, String name, Class<?> rawType)\n+    {\n+        super(/* AnnotationMap*/ null);\n+        _declaringClass = declaringClass;\n+        _rawType = rawType;\n+        _name = name;\n+    }\n+\n+    @Override\n+    public Annotated withAnnotations(AnnotationMap fallback) {\n+        return this;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Annotated impl\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public Field getAnnotated() { return null; }\n+\n+    @Override\n+    public int getModifiers() { return 0; }\n+\n+    @Override\n+    public String getName() { return _name; }\n+\n+    @Override\n+    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Type getGenericType() {\n+        return _rawType;\n+    }\n+\n+    @Override\n+    public Class<?> getRawType() {\n+        return _rawType;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* AnnotatedMember impl\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public Class<?> getDeclaringClass() { return _declaringClass; }\n+\n+    @Override\n+    public Member getMember() { return null; }\n+\n+    @Override\n+    public void setValue(Object pojo, Object value) throws IllegalArgumentException {\n+        throw new IllegalArgumentException(\"Can not set virtual property '\"+_name+\"'\");\n+    }\n+\n+    @Override\n+    public Object getValue(Object pojo) throws IllegalArgumentException {\n+        throw new IllegalArgumentException(\"Can not get virtual property '\"+_name+\"'\");\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Extended API, generic\n+    /**********************************************************\n+     */\n+\n+    public String getFullName() {\n+        return getDeclaringClass().getName() + \"#\" + getName();\n+    }\n+\n+    public int getAnnotationCount() { return 0; }\n+\n+    @Override\n+    public int hashCode() {\n+        return _name.hashCode();\n+    }\n+    \n+    @Override\n+    public boolean equals(Object o) {\n+        if (o == this) return true;\n+        if (o == null || o.getClass() != getClass()) return false;\n+        VirtualAnnotatedMember other = (VirtualAnnotatedMember) o;\n+        return (other._declaringClass == _declaringClass)\n+                && other._name.equals(_name);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"[field \"+getFullName()+\"]\";\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         if (props == null) {\n             props = new ArrayList<BeanPropertyWriter>();\n         }\n+        // [databind#638]: Allow injection of \"virtual\" properties:\n+        prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+\n         // [JACKSON-440] Need to allow modification bean properties to serialize:\n         if (_factoryConfig.hasSerializerModifiers()) {\n             for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n package com.fasterxml.jackson.databind.ser;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n     {\n         if (property != null) {\n             AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n-            if (intr != null) {\n-                if (intr.findSerializationContentType(property.getMember(), property.getType()) != null) {\n+            AnnotatedMember m = property.getMember();\n+            if ((m != null) && (intr != null)) {\n+                if (intr.findSerializationContentType(m, property.getType()) != null) {\n                     return true;\n                 }\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/VirtualBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/VirtualBeanPropertyWriter.java\n package com.fasterxml.jackson.databind.ser;\n+\n+import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n+import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n import com.fasterxml.jackson.databind.util.Annotations;\n      * want full control over implementation.\n      */\n     protected VirtualBeanPropertyWriter(BeanPropertyDefinition propDef,\n+            AnnotatedMember member,\n             Annotations contextAnnotations, JavaType declaredType,\n             JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType,\n             boolean suppressNulls, Object suppressableValue)\n     {\n-        super(propDef, /*AnnotatedMember*/ null, contextAnnotations, declaredType,\n+        super(propDef, member, contextAnnotations, declaredType,\n                 ser, typeSer, serType, suppressNulls, suppressableValue);\n     }\n \n     protected VirtualBeanPropertyWriter(VirtualBeanPropertyWriter base, PropertyName name) {\n         super(base, name);\n     }\n-    \n-    // made abstract again to ensure sub-classes redefine\n-    public abstract BeanPropertyDefinition withName(PropertyName newName);\n \n-    // made abstract again to ensure sub-classes redefine\n-    public abstract BeanPropertyDefinition withSimpleName(String newSimpleName);\n-    \n     /*\n     /**********************************************************\n     /* Standard accessor overrides\n \n     @Override\n     public boolean isVirtual() { return true; }\n-    \n+\n+    @Override\n+    public Class<?> getPropertyType() {\n+        return _declaredType.getRawClass();\n+    }\n+\n+    @Override\n+    public Type getGenericPropertyType() {\n+        return getPropertyType();\n+    }\n+\n     /*\n     /**********************************************************\n     /* PropertyWriter serialization method overrides\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/AttributePropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/AttributePropertyWriter.java\n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n+import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;\n import com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;\n import com.fasterxml.jackson.databind.util.Annotations;\n \n     /* Life-cycle\n     /**********************************************************\n      */\n-    \n-/*\n-    protected VirtualBeanPropertyWriter(BeanPropertyDefinition propDef,\n-            Annotations contextAnnotations, JavaType declaredType,\n-            JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType,\n-            boolean suppressNulls, Object suppressableValue)\n- */\n-    \n-    public AttributePropertyWriter(String attrName,\n-            BeanPropertyDefinition propDef,\n+\n+    protected AttributePropertyWriter(String attrName, BeanPropertyDefinition propDef,\n+            AnnotatedMember member,\n             Annotations contextAnnotations, JavaType declaredType,\n             JsonInclude.Include inclusion)\n     {\n-        super(propDef, contextAnnotations, declaredType,\n+        super(propDef, member, contextAnnotations, declaredType,\n                 /* value serializer */ null, /* type serializer */ null, /* ser type */ null,\n                 _suppressNulls(inclusion), null);\n         _attrName = attrName;\n     }\n \n+    public static AttributePropertyWriter construct(String attrName,\n+            BeanPropertyDefinition propDef, AnnotatedClass declaringClass,\n+            JavaType declaredType, JsonInclude.Include inclusion)\n+    {\n+        return new AttributePropertyWriter(attrName, propDef,\n+                new VirtualAnnotatedMember(declaringClass.getRawType(), attrName, declaredType.getRawClass()),\n+                declaringClass.getAnnotations(), declaredType, inclusion);\n+    }\n+    \n     protected AttributePropertyWriter(AttributePropertyWriter base) {\n         super(base);\n         _attrName = base._attrName;\n-    }\n-\n-    @Override\n-    public BeanPropertyDefinition withName(PropertyName newName) {\n-        // !!! TODO\n-        return null;\n-    }\n-\n-    @Override\n-    public BeanPropertyDefinition withSimpleName(String newSimpleName) {\n-        // !!! TODO\n-        return null;\n     }\n \n     protected static boolean _suppressNulls(JsonInclude.Include inclusion) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n     {\n         final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n         if (intr != null) {\n-            Object convDef = intr.findSerializationConverter(prop.getMember());\n-            if (convDef != null) {\n-                Converter<Object,Object> conv = provider.converterInstance(prop.getMember(), convDef);\n-                JavaType delegateType = conv.getOutputType(provider.getTypeFactory());\n-                JsonSerializer<?> ser = provider.findValueSerializer(delegateType, prop);\n-                return new StdDelegatingSerializer(conv, delegateType, ser);\n+            AnnotatedMember m = prop.getMember();\n+            if (m != null) {\n+                Object convDef = intr.findSerializationConverter(m);\n+                if (convDef != null) {\n+                    Converter<Object,Object> conv = provider.converterInstance(prop.getMember(), convDef);\n+                    JavaType delegateType = conv.getOutputType(provider.getTypeFactory());\n+                    JsonSerializer<?> ser = provider.findValueSerializer(delegateType, prop);\n+                    return new StdDelegatingSerializer(conv, delegateType, ser);\n+                }\n             }\n         }\n         return null;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n \n         // [Issue#307]: allow filtering\n         if (property != null) {\n-            Object filterId = intr.findFilterId(property.getMember());\n-            if (filterId != null) {\n-                mser = mser.withFilterId(filterId);\n+            AnnotatedMember m = property.getMember();\n+            if (m != null) {\n+                Object filterId = intr.findFilterId(m);\n+                if (filterId != null) {\n+                    mser = mser.withFilterId(filterId);\n+                }\n             }\n         }\n         return mser;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor;\n                 BeanProperty property) throws JsonMappingException\n         {\n             if (property != null) {\n-                JsonFormat.Value format = prov.getAnnotationIntrospector().findFormat(property.getMember());\n-                if (format != null) {\n-                    switch (format.getShape()) {\n-                    case STRING:\n-                        return ToStringSerializer.instance;\n-                    default:\n+                AnnotatedMember m = property.getMember();\n+                if (m != null) {\n+                    JsonFormat.Value format = prov.getAnnotationIntrospector().findFormat(m);\n+                    if (format != null) {\n+                        switch (format.getShape()) {\n+                        case STRING:\n+                            return ToStringSerializer.instance;\n+                        default:\n+                        }\n                     }\n                 }\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n \n         final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n         if (intr != null && prop != null) {\n-            Object convDef = intr.findSerializationContentConverter(prop.getMember());\n-            if (convDef != null) {\n-                Converter<Object,Object> conv = provider.converterInstance(prop.getMember(), convDef);\n-                JavaType delegateType = conv.getOutputType(provider.getTypeFactory());\n-                if (existingSerializer == null) {\n-                    existingSerializer = provider.findValueSerializer(delegateType);\n+            AnnotatedMember m = prop.getMember();\n+            if (m != null) {\n+                Object convDef = intr.findSerializationContentConverter(m);\n+                if (convDef != null) {\n+                    Converter<Object,Object> conv = provider.converterInstance(prop.getMember(), convDef);\n+                    JavaType delegateType = conv.getOutputType(provider.getTypeFactory());\n+                    if (existingSerializer == null) {\n+                        existingSerializer = provider.findValueSerializer(delegateType);\n+                    }\n+                    return new StdDelegatingSerializer(conv, delegateType, existingSerializer);\n                 }\n-                return new StdDelegatingSerializer(conv, delegateType, existingSerializer);\n             }\n         }\n         return existingSerializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n      * Member that defines logical property. Assumption is that it\n      * should be a 'simple' accessor; meaning a zero-argument getter,\n      * single-argument setter or constructor parameter.\n+     *<p>\n+     * NOTE: for \"virtual\" properties, this is null.\n      */\n     protected final AnnotatedMember _member;\n \n+    /**\n+     * @since 2.5\n+     */\n+    protected final PropertyMetadata _metadata;\n+    \n+    /**\n+     * @since 2.5\n+     */\n+    protected final PropertyName _fullName;\n+    \n+    /**\n+     * @deprecated Since 2.5 use <code>_fullName</code> instead.\n+     */\n+    @Deprecated\n     protected final String _name;\n     \n     /*\n      */\n     @Deprecated\n     public SimpleBeanPropertyDefinition(AnnotatedMember member, String name) {\n-        this(member, name, null);\n-    }\n-    \n-    private SimpleBeanPropertyDefinition(AnnotatedMember member, String name,\n-    \t\tAnnotationIntrospector intr) {\n+        this(member, new PropertyName(name), null, null);\n+    }\n+\n+    protected SimpleBeanPropertyDefinition(AnnotatedMember member, PropertyName fullName,\n+            AnnotationIntrospector intr, PropertyMetadata metadata)\n+    {\n         _introspector = intr;\n         _member = member;\n-        _name = name;\n+        _fullName = fullName;\n+        _name = fullName.getSimpleName();\n+        _metadata = (metadata == null) ? PropertyMetadata.STD_OPTIONAL: metadata;\n+    }\n+\n+    /**\n+     * @deprecated Since 2.5 Use variant that takes PropertyName\n+     */\n+    @Deprecated\n+    protected SimpleBeanPropertyDefinition(AnnotatedMember member, String name,\n+    \t\tAnnotationIntrospector intr) {\n+        this(member, new PropertyName(name), intr, null);\n     }\n \n     /**\n      */\n     public static SimpleBeanPropertyDefinition construct(MapperConfig<?> config,\n     \t\tAnnotatedMember member) {\n-        return new SimpleBeanPropertyDefinition(member, member.getName(),\n-                (config == null) ? null : config.getAnnotationIntrospector());\n-    }\n-    \n-    /**\n-     * @since 2.2\n-     */\n+        return new SimpleBeanPropertyDefinition(member, new PropertyName(member.getName()),\n+                (config == null) ? null : config.getAnnotationIntrospector(),\n+                        null);\n+    }\n+    \n+    /**\n+     * @deprecated Since 2.5\n+     */\n+    @Deprecated\n     public static SimpleBeanPropertyDefinition construct(MapperConfig<?> config,\n     \t\tAnnotatedMember member, String name) {\n-        return new SimpleBeanPropertyDefinition(member, name,\n-                (config == null) ? null : config.getAnnotationIntrospector());\n-    }\n+        return new SimpleBeanPropertyDefinition(member, new PropertyName(name),\n+                (config == null) ? null : config.getAnnotationIntrospector(),\n+                        null);\n+    }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    public static SimpleBeanPropertyDefinition construct(MapperConfig<?> config,\n+            AnnotatedMember member, PropertyName name) {\n+        return construct(config, member, name, null);\n+    }\n+    \n+    /**\n+     * @since 2.5\n+     */\n+    public static SimpleBeanPropertyDefinition construct(MapperConfig<?> config,\n+            AnnotatedMember member, PropertyName name, PropertyMetadata metadata) {\n+          return new SimpleBeanPropertyDefinition(member, name,\n+                  (config == null) ? null : config.getAnnotationIntrospector(),\n+                          metadata);\n+      }\n     \n     /*\n     /**********************************************************\n \n     @Deprecated // since 2.3\n     @Override\n-    public SimpleBeanPropertyDefinition withName(String newName) {\n+    public BeanPropertyDefinition withName(String newName) {\n         return withSimpleName(newName);\n     }\n \n     @Override\n-    public SimpleBeanPropertyDefinition withSimpleName(String newName) {\n-        if (_name.equals(newName)) {\n+    public BeanPropertyDefinition withSimpleName(String newName) {\n+        if (_fullName.hasSimpleName(newName) && !_fullName.hasNamespace()) {\n             return this;\n         }\n-        return new SimpleBeanPropertyDefinition(_member, newName, _introspector);\n-    }\n-\n-    @Override\n-    public SimpleBeanPropertyDefinition withName(PropertyName newName) {\n-        return withSimpleName(newName.getSimpleName());\n+        return new SimpleBeanPropertyDefinition(_member, new PropertyName(newName),\n+                _introspector, _metadata);\n+    }\n+\n+    @Override\n+    public BeanPropertyDefinition withName(PropertyName newName) {\n+        if (_fullName.equals(newName)) {\n+            return this;\n+        }\n+        return new SimpleBeanPropertyDefinition(_member, newName,\n+                _introspector, _metadata);\n+    }\n+\n+    public BeanPropertyDefinition withMetadata(PropertyMetadata metadata) {\n+        if (metadata.equals(_metadata)) {\n+            return this;\n+        }\n+        return new SimpleBeanPropertyDefinition(_member, _fullName,\n+                _introspector, metadata);\n     }\n     \n     /*\n      */\n \n     @Override\n-    public String getName() { return _name; }\n-\n-    @Override\n-    public PropertyName getFullName() { return new PropertyName(_name); }\n-    \n+    public String getName() { return _fullName.getSimpleName(); }\n+\n+    @Override\n+    public PropertyName getFullName() { return _fullName; }\n+\n     @Override\n     public String getInternalName() { return getName(); }\n \n     @Override\n     public PropertyName getWrapperName() {\n-        return (_introspector == null) ? null : _introspector.findWrapperName(_member);\n-    }\n-    \n+        return ((_introspector == null) && (_member != null))\n+                ? null : _introspector.findWrapperName(_member);\n+    }\n+\n     // hmmh. what should we claim here?\n \n     @Override public boolean isExplicitlyIncluded() { return false; }\n      */\n     @Override\n     public PropertyMetadata getMetadata() {\n-        return PropertyMetadata.STD_OPTIONAL;\n+        return _metadata;\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerializeAs.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerializeAs.java\n public class TestJsonSerializeAs extends BaseMapTest\n {\n     // [JACKSON-799] stuff:\n-    \n     public interface Fooable {\n         public int getFoo();\n     }\n             return new FooImpl();\n         }\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Test methods\n      */\n \n     private final ObjectWriter WRITER = objectWriter();\n-    \n+\n     // [JACKSON-799]\n     public void testSerializeAsInClass() throws IOException\n     {\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestVirtualProperties.java\n+package com.fasterxml.jackson.databind.ser;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.annotation.JsonAppend;\n+\n+/**\n+ * Tests for verifying that one can append virtual properties after regular ones.\n+ * \n+ * @since 2.5\n+ */\n+public class TestVirtualProperties extends BaseMapTest\n+{\n+    @JsonAppend(attrs={ @JsonAppend.Attr(\"id\"),\n+        @JsonAppend.Attr(value=\"internal\", propName=\"extra\", required=true)\n+    })\n+    static class SimpleBean\n+    {\n+        public int value = 13;\n+    }\n+\n+    enum ABC {\n+        A, B, C;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    private final ObjectWriter WRITER = objectWriter();\n+\n+    public void testAttributeProperties() throws Exception\n+    {\n+        Map<String,Object> stuff = new LinkedHashMap<String,Object>();\n+        stuff.put(\"x\", 3);\n+        stuff.put(\"y\", ABC.B);\n+        String json = WRITER.withAttribute(\"id\", \"abc123\")\n+                .withAttribute(\"internal\", stuff)\n+                .writeValueAsString(new SimpleBean());\n+        assertEquals(aposToQuotes(\"{'value':13,'id':'abc123','extra':{'x':3,'y':'B'}}\"), json);\n+    }\n+}", "timestamp": 1417646304, "metainfo": ""}