{"sha": "f1cb79bea0db7afb754226c8168781d28ca553a4", "log": "Small refactoring", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/VirtualBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/VirtualBeanPropertyWriter.java\n \n import java.lang.reflect.Type;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.*;\n public abstract class VirtualBeanPropertyWriter\n     extends BeanPropertyWriter\n {\n+    protected VirtualBeanPropertyWriter(BeanPropertyDefinition propDef,\n+            Annotations contextAnnotations, JavaType declaredType,\n+            JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType) {\n+        this(propDef, contextAnnotations, declaredType, ser, typeSer, serType,\n+                propDef.findInclusion());\n+    }\n+\n     /**\n      * Pass-through constructor that may be used by sub-classes that\n      * want full control over implementation.\n     protected VirtualBeanPropertyWriter(BeanPropertyDefinition propDef,\n             Annotations contextAnnotations, JavaType declaredType,\n             JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType,\n-            boolean suppressNulls, Object suppressableValue)\n+            JsonInclude.Include inclusion)\n     {\n         super(propDef, propDef.getPrimaryMember(), contextAnnotations, declaredType,\n-                ser, typeSer, serType, suppressNulls, suppressableValue);\n+                ser, typeSer, serType,\n+                _suppressNulls(inclusion), _suppressableValue(inclusion));\n     }\n \n     protected VirtualBeanPropertyWriter(VirtualBeanPropertyWriter base) {\n         super(base, name);\n     }\n \n+    protected static boolean _suppressNulls(JsonInclude.Include inclusion) {\n+        return (inclusion != JsonInclude.Include.ALWAYS);\n+    }\n+\n+    protected static Object _suppressableValue(JsonInclude.Include inclusion) {\n+        if ((inclusion == JsonInclude.Include.NON_EMPTY)\n+                || (inclusion == JsonInclude.Include.NON_EMPTY)) {\n+            return MARKER_FOR_EMPTY;\n+        }\n+        return null;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Standard accessor overrides\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/AttributePropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/AttributePropertyWriter.java\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n-import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;\n import com.fasterxml.jackson.databind.util.Annotations;\n \n     {\n         super(propDef, contextAnnotations, declaredType,\n                 /* value serializer */ null, /* type serializer */ null, /* ser type */ null,\n-                _suppressNulls(inclusion), _suppressableValue(inclusion));\n+                inclusion);\n         _attrName = attrName;\n     }\n \n         super(base);\n         _attrName = base._attrName;\n     }\n-\n-    protected static boolean _suppressNulls(JsonInclude.Include inclusion) {\n-        return (inclusion != JsonInclude.Include.ALWAYS);\n-    }\n-\n-    protected static Object _suppressableValue(JsonInclude.Include inclusion) {\n-        if ((inclusion == JsonInclude.Include.NON_EMPTY)\n-                || (inclusion == JsonInclude.Include.NON_EMPTY)) {\n-            return MARKER_FOR_EMPTY;\n-        }\n-        return null;\n-    }\n     \n     /*\n     /**********************************************************", "timestamp": 1417676632, "metainfo": ""}