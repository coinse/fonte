{"sha": "30fc0eed5f562b3b3e05f6d538e060d9cc324cd6", "log": "trying to reproduce #119", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java\n         }\n     }    \n \n+    // for [Issue#118]\n     static class ExternalTypeWithNonPOJO {\n         @JsonTypeInfo(use = JsonTypeInfo.Id.NAME,\n                 property = \"type\",\n         public ExternalTypeWithNonPOJO() { }\n         public ExternalTypeWithNonPOJO(Object o) { value = o; }\n     }    \n+\n+    // for [Issue#119]\n+    static class AsValueThingy {\n+        public int stuff = 3;\n+        \n+        @JsonValue public int serialization() {\n+            return stuff+1;\n+        }\n+    }\n     \n     /*\n     /**********************************************************\n     // Note: String works fine, since no type id will used; other scalar types have issues\n     public void testWithScalar118() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        String json;\n-\n         ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L));\n-        json = mapper.writeValueAsString(input);\n-        System.out.println(\"JSON with Date: \"+json);\n+        String json = MAPPER.writeValueAsString(input);\n         assertNotNull(json);\n \n         // and back just to be sure:\n-        ExternalTypeWithNonPOJO result = mapper.readValue(json, ExternalTypeWithNonPOJO.class);\n+        ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class);\n         assertNotNull(result.value);\n         assertTrue(result.value instanceof java.util.Date);\n     }\n+\n+    // For [Issue#119]\n+    public void testWithAsValue() throws Exception\n+    {\n+        ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new AsValueThingy());\n+        String json = MAPPER.writeValueAsString(input);\n+        assertNotNull(json);\n+        String className = getClass().getSimpleName() + \"$\" + AsValueThingy.class.getSimpleName();\n+        assertEquals(json, \"{\\\"value\\\":4,\\\"type\\\":\\\"\"+className+\"\\\"}\");\n+    }\n }", "timestamp": 1354498081, "metainfo": ""}