{"sha": "b797b943fdfcff5f66777b958a634481a9505d1f", "log": "Minor fixes wrt 'JsonTypeInfo.defaultImpl()'; Void must mean \"deser unknown as null\", whereas annotations to be taken as \"no default specified\".", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n         b = b.inclusion(inclusion);\n         b = b.typeProperty(info.property());\n         Class<?> defaultImpl = info.defaultImpl();\n-        if (defaultImpl != Void.class && defaultImpl != JsonTypeInfo.None.class) {\n+\n+        // 08-Dec-2014, tatu: To deprecated `JsonTypeInfo.None` we need to use other placeholder(s);\n+        //   and since `java.util.Void` has other purpose (to indicate \"deser as null\"), we'll instead\n+        //   use `JsonTypeInfo.class` itself. But any annotation type will actually do, as they have no\n+        //   valid use (can not instantiate as default)\n+        if (defaultImpl != JsonTypeInfo.None.class && !defaultImpl.isAnnotation()) {\n             b = b.defaultImpl(defaultImpl);\n         }\n         b = b.typeIdVisibility(info.visible());\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestPolymorphicWithDefaultImpl.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestPolymorphicWithDefaultImpl.java\n \n /**\n  * Unit tests related to specialized handling of \"default implementation\"\n- * ({@link JsonTypeInfo#defaultImpl()}), as well as related\n+ * ({@link JsonTypeInfo#defaultImpl}), as well as related\n  * cases that allow non-default settings (such as missing type id).\n  */\n public class TestPolymorphicWithDefaultImpl extends BaseMapTest\n     @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\",\n             defaultImpl = NoClass.class)\n     public static class DefaultWithNoClass { }\n+\n+    /**\n+     * Also another variant to verify that from 2.5 on, can use non-deprecated\n+     * value for the same.\n+     */\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\",\n+            defaultImpl = Void.class)\n+    public static class DefaultWithVoidAsDefault { }\n \n     // and then one with no defaultImpl nor listed subtypes\n     @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\")\n         assertNull(ob);\n     }\n \n+    // same, with 2.5 and Void.class\n+    public void testDefaultAsVoid() throws Exception\n+    {\n+        Object ob = MAPPER.reader(DefaultWithVoidAsDefault.class).readValue(\"{ }\");\n+        assertNull(ob);\n+        ob = MAPPER.reader(DefaultWithVoidAsDefault.class).readValue(\"{ \\\"bogus\\\":3 }\");\n+        assertNull(ob);\n+    }\n+\n     // [Databind#148]\n     public void testBadTypeAsNull() throws Exception\n     {", "timestamp": 1418067530, "metainfo": ""}