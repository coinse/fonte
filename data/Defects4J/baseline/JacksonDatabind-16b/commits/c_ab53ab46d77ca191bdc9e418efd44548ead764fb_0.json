{"sha": "ab53ab46d77ca191bdc9e418efd44548ead764fb", "log": "Implemented #438", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n     /**\n      * Method for checking whether an annotation indicates that all unknown properties\n      */\n-    public Boolean findIgnoreUnknownProperties(AnnotatedClass ac) {\n-        return null;\n-    }\n+    public Boolean findIgnoreUnknownProperties(AnnotatedClass ac) { return null; }\n \n     /**\n      * Method for checking whether properties that have specified type\n      *   Boolean.FALSE if they are not to be ignored, null for default\n      *   handling (which is 'do not ignore')\n      */\n-    public Boolean isIgnorableType(AnnotatedClass ac) {\n-        return null;\n-    }\n+    public Boolean isIgnorableType(AnnotatedClass ac) { return null; }\n \n     /**\n      * @deprecated Since 2.3: use the one that takes generic {@link Annotated}\n      */\n     @Deprecated\n-    public Object findFilterId(AnnotatedClass ac) {\n-        return findFilterId((Annotated) ac);\n-    }\n+    public Object findFilterId(AnnotatedClass ac) { return findFilterId((Annotated) ac); }\n \n     /**\n      * Method for finding if annotated class has associated filter; and if so,\n      * @return Id of the filter to use for filtering properties of annotated\n      *    class, if any; or null if none found.\n      */\n-    public Object findFilterId(Annotated ann) {\n-        return null;\n-    }\n+    public Object findFilterId(Annotated ann) { return null; }\n \n     /**\n      * Method for finding {@link PropertyNamingStrategy} for given\n      * \n      * @since 2.1\n      */\n-    public Object findNamingStrategy(AnnotatedClass ac) {\n-        return null;\n-    }    \n+    public Object findNamingStrategy(AnnotatedClass ac) { return null; }\n \n     /*\n     /**********************************************************\n      * (if no annotations are found), or build and return a derived instance (using\n      * checker's build methods).\n      */\n-    public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac,\n-            VisibilityChecker<?> checker) {\n+    public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac, VisibilityChecker<?> checker) {\n         return checker;\n     }\n     \n      * \n      * @param a Annotated entity (class, field/method) to check for annotations\n      */\n-    public List<NamedType> findSubtypes(Annotated a) {\n-        return null;\n-    }\n+    public List<NamedType> findSubtypes(Annotated a) { return null; }\n \n     /**\n      * Method for checking if specified type has explicit name.\n      * \n      * @param ac Class to check for type name annotations\n      */\n-    public String findTypeName(AnnotatedClass ac) {\n-        return null;\n-    }\n+    public String findTypeName(AnnotatedClass ac) { return null; }\n     \n     /*\n     /**********************************************************\n      * Method for checking if given member indicates that it is part\n      * of a reference (parent/child).\n      */\n-    public ReferenceProperty findReferenceType(AnnotatedMember member) {\n-        return null;\n-    }\n+    public ReferenceProperty findReferenceType(AnnotatedMember member) { return null; }\n \n     /**\n      * Method called to check whether given property is marked to be \"unwrapped\"\n      * should  be done, or null if not -- note that transformation may simply\n      * be identity transformation (no changes).\n      */\n-    public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member) {\n-        return null;\n-    }\n+    public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member) { return null; }\n \n     /**\n      * Method called to check whether given property is marked to\n      * annotations from multiple accessors (getters, setters, fields,\n      * constructor parameters).\n      */\n-    public boolean hasIgnoreMarker(AnnotatedMember m) {\n-        return false;\n-    }\n+    public boolean hasIgnoreMarker(AnnotatedMember m) { return false; }\n \n     /**\n      * Method called to find out whether given member expectes a value\n      * @return Identifier of value to inject, if any; null if no injection\n      *   indicator is found\n      */\n-    public Object findInjectableValueId(AnnotatedMember m) {\n-        return null;\n-    }\n+    public Object findInjectableValueId(AnnotatedMember m) { return null; }\n \n     /**\n      * Method that can be called to check whether this member has\n      * \n      * @since 2.0\n      */\n-    public Boolean hasRequiredMarker(AnnotatedMember m) {\n-        return null;\n-    }\n+    public Boolean hasRequiredMarker(AnnotatedMember m) { return null; }\n     \n     /**\n      * Method for checking if annotated property (represented by a field or\n      * @return Array of views (represented by classes) that the property is included in;\n      *    if null, always included (same as returning array containing <code>Object.class</code>)\n      */\n-    public Class<?>[] findViews(Annotated a) {\n-        return null;\n-    }\n+    public Class<?>[] findViews(Annotated a) { return null; }\n \n     /**\n      * Method for finding format annotations for property or class.\n      * \n      * @since 2.1\n      */\n-    public JsonFormat.Value findFormat(Annotated memberOrClass) {\n-        return null;\n-    }\n+    public JsonFormat.Value findFormat(Annotated memberOrClass) { return null; }\n     \n     /**\n      * Method for checking whether given accessor claims to represent\n      * type id: if so, its value may be used as an override,\n      * instead of generated type id.\n-     * \n-     * @since 2.0\n-     */\n-    public Boolean isTypeId(AnnotatedMember member) {\n-        return null;\n-    }\n-\n+     */\n+    public Boolean isTypeId(AnnotatedMember member) { return null; }\n \n     /**\n      * Method used to check if specified property has annotation that indicates\n      * \n      * @since 2.1\n      */\n-    public PropertyName findWrapperName(Annotated ann) {\n-        return null;\n-    }\n+    public PropertyName findWrapperName(Annotated ann) { return null; }\n \n     /**\n      * Method used to check whether specified property member (accessor\n      * \n      * @since 2.3\n      */\n-    public String findPropertyDescription(Annotated ann) {\n-        return null;\n-    }\n-    \n+    public String findPropertyDescription(Annotated ann) { return null; }\n+\n+    /**\n+     * Method used to check whether specified property member (accessor\n+     * or mutator) defines numeric index, and if so, what is the index value.\n+     * Possible use cases for index values included use by underlying data format\n+     * (some binary formats mandate use of index instead of name) and ordering\n+     * of properties (for documentation, or during serialization).\n+     * \n+     * @since 2.4\n+     * \n+     * @return Explicitly specified index for the property, if any\n+     */\n+    public Integer findPropertyIndex(Annotated ann) { return null; }\n+\n     /*\n     /**********************************************************\n     /* Serialization: general annotations\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n     /**********************************************************\n      */\n \n-    protected BeanDescription(JavaType type)\n-    {\n+    protected BeanDescription(JavaType type) {\n         _type = type;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n      * Accessor for additional optional information about property.\n      * \n      * @since 2.3\n+     * \n+     * @return Metadata about property; never null.\n      */\n     public PropertyMetadata getMetadata();\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/PropertyMetadata.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/PropertyMetadata.java\n  * Simple container class used for storing \"additional\" metadata about\n  * properties. Carved out to reduce number of distinct properties that\n  * actual property implementations and placeholders need to store;\n- * since this instances are immutable, they can be freely shared.\n+ * since instances are immutable, they can be freely shared.\n  * \n  * @since 2.3\n  */\n {\n     private static final long serialVersionUID = -1;\n \n-    public final static PropertyMetadata STD_REQUIRED = new PropertyMetadata(Boolean.TRUE, null);\n+    public final static PropertyMetadata STD_REQUIRED = new PropertyMetadata(Boolean.TRUE, null, null);\n \n-    public final static PropertyMetadata STD_OPTIONAL = new PropertyMetadata(Boolean.FALSE, null);\n+    public final static PropertyMetadata STD_OPTIONAL = new PropertyMetadata(Boolean.FALSE, null, null);\n \n-    public final static PropertyMetadata STD_REQUIRED_OR_OPTIONAL = new PropertyMetadata(null, null);\n+    public final static PropertyMetadata STD_REQUIRED_OR_OPTIONAL = new PropertyMetadata(null, null, null);\n     \n     /**\n      * Three states: required, not required and unknown; unknown represented\n      */\n     protected final String _description;\n \n+    /**\n+     * Optional index of the property within containing Object.\n+     * \n+     * @since 2.4\n+     */\n+    protected final Integer _index;\n+    \n     /*\n     /**********************************************************\n     /* Construction, configuration\n     /**********************************************************\n      */\n     \n-    protected PropertyMetadata(Boolean req, String desc)\n+    @Deprecated // since 2.4\n+    protected PropertyMetadata(Boolean req, String desc) { this(req, desc, null); }\n+\n+    protected PropertyMetadata(Boolean req, String desc, Integer index)\n     {\n         _required = req;\n         _description = desc;\n+        _index = index;\n     }\n \n+    /**\n+     * @since 2.4 Use variant that takes three arguments.\n+     */\n+    @Deprecated\n     public static PropertyMetadata construct(boolean req, String desc) {\n+    \treturn construct(req, desc, null);\n+    }\n+    \n+    public static PropertyMetadata construct(boolean req, String desc, Integer index) {\n         PropertyMetadata md = req ? STD_REQUIRED : STD_OPTIONAL;\n         if (desc != null) {\n-            return md.withDescription(desc);\n+            md = md.withDescription(desc);\n+        }\n+        if (index != null) {\n+        \tmd = md.withIndex(index);\n         }\n         return md;\n     }\n      */\n     protected Object readResolve()\n     {\n-        if (_description == null) {\n+        if (_description == null && _index == null) {\n             if (_required == null) {\n                 return STD_REQUIRED_OR_OPTIONAL;\n             }\n     }\n \n     public PropertyMetadata withDescription(String desc) {\n-        return new PropertyMetadata(_required, desc);\n+        return new PropertyMetadata(_required, desc, _index);\n     }\n \n+    public PropertyMetadata withIndex(Integer index) {\n+        return new PropertyMetadata(_required, _description, index);\n+    }\n+    \n     public PropertyMetadata withRequired(Boolean b) {\n         if (b == null) {\n             if (_required == null) {\n                 return this;\n             }\n         }\n-        return new PropertyMetadata(b, _description);\n+        return new PropertyMetadata(b, _description, _index);\n     }\n     \n     /*\n     public boolean isRequired() { return (_required != null) && _required.booleanValue(); }\n     \n     public Boolean getRequired() { return _required; }\n+\n+    /**\n+     * @since 2.4\n+     */\n+    public Integer getIndex() { return _index; }\n+\n+    /**\n+     * @since 2.4\n+     */\n+    public boolean hasIndex() { return _index != null; }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n             Boolean b = (intr == null) ? null : intr.hasRequiredMarker(param);\n             boolean req = (b != null && b.booleanValue());\n             String desc = (intr == null) ? null : intr.findPropertyDescription(param);\n-            metadata = PropertyMetadata.construct(req, desc);\n+            Integer idx = (intr == null) ? null : intr.findPropertyIndex(param);\n+            metadata = PropertyMetadata.construct(req, desc, idx);\n         }\n             \n         JavaType t0 = config.getTypeFactory().constructType(param.getParameterType(), beanDesc.bindingsForBeanType());\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n     // // // General member (field, method/constructor) annotations\n     \n     @Override        \n-    public ReferenceProperty findReferenceType(AnnotatedMember member)\n-    {\n-        ReferenceProperty ref = _primary.findReferenceType(member);\n-        if (ref == null) {\n-            ref = _secondary.findReferenceType(member);\n-        }\n-        return ref; \n+    public ReferenceProperty findReferenceType(AnnotatedMember member) {\n+        ReferenceProperty r = _primary.findReferenceType(member);\n+        return (r == null) ? _secondary.findReferenceType(member) : r;\n     }\n \n     @Override        \n-    public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member)\n-    {\n-        NameTransformer value = _primary.findUnwrappingNameTransformer(member);\n-        if (value == null) {\n-            value = _secondary.findUnwrappingNameTransformer(member);\n-        }\n-        return value;\n-    }\n-\n-    @Override\n-    public Object findInjectableValueId(AnnotatedMember m)\n-    {\n-        Object value = _primary.findInjectableValueId(m);\n-        if (value == null) {\n-            value = _secondary.findInjectableValueId(m);\n-        }\n-        return value;\n+    public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member) {\n+        NameTransformer r = _primary.findUnwrappingNameTransformer(member);\n+        return (r == null) ? _secondary.findUnwrappingNameTransformer(member) : r;\n+    }\n+\n+    @Override\n+    public Object findInjectableValueId(AnnotatedMember m) {\n+        Object r = _primary.findInjectableValueId(m);\n+        return (r == null) ? _secondary.findInjectableValueId(m) : r;\n     }\n \n     @Override\n     }\n     \n     @Override\n-    public Boolean hasRequiredMarker(AnnotatedMember m)\n-    {\n-        Boolean value = _primary.hasRequiredMarker(m);\n-        if (value == null) {\n-            value = _secondary.hasRequiredMarker(m);\n-        }\n-        return value;\n+    public Boolean hasRequiredMarker(AnnotatedMember m) {\n+        Boolean r = _primary.hasRequiredMarker(m);\n+        return (r == null) ? _secondary.hasRequiredMarker(m) : r;\n     }\n     \n     // // // Serialization: general annotations\n \n     @Override\n-    public Object findSerializer(Annotated am)\n-    {\n-        Object result = _primary.findSerializer(am);\n-        if (result == null) {\n-            result = _secondary.findSerializer(am);\n-        }\n-        return result;\n-    }\n-    \n-    @Override\n-    public Object findKeySerializer(Annotated a)\n-    {\n-        Object result = _primary.findKeySerializer(a);\n-        if (result == null || result == JsonSerializer.None.class || result == NoClass.class) {\n-            result = _secondary.findKeySerializer(a);\n-        }\n-        return result;\n-    }\n-    @Override\n-    public Object findContentSerializer(Annotated a)\n-    {\n-        Object result = _primary.findContentSerializer(a);\n-        if (result == null || result == JsonSerializer.None.class || result == NoClass.class) {\n-            result = _secondary.findContentSerializer(a);\n-        }\n-        return result;\n-    }\n-    \n-    @Override\n-    public Object findNullSerializer(Annotated a)\n-    {\n+    public Object findSerializer(Annotated am) {\n+        Object r = _primary.findSerializer(am);\n+        return (r == null) ? _secondary.findSerializer(am) : r;\n+    }\n+    \n+    @Override\n+    public Object findKeySerializer(Annotated a) {\n+        Object r = _primary.findKeySerializer(a);\n+        return (r == null || r == JsonSerializer.None.class || r == NoClass.class) ?\n+        \t\t_secondary.findKeySerializer(a) : r;\n+    }\n+\n+    @Override\n+    public Object findContentSerializer(Annotated a) {\n+    \tObject r = _primary.findContentSerializer(a);\n+        return (r == null || r == JsonSerializer.None.class || r == NoClass.class) ?\n+        \t\t_secondary.findContentSerializer(a) : r;\n+    }\n+    \n+    @Override\n+    public Object findNullSerializer(Annotated a) {\n         Object result = _primary.findNullSerializer(a);\n         if (result == null || result == JsonSerializer.None.class || result == NoClass.class) {\n             result = _secondary.findNullSerializer(a);\n     }\n     \n     @Override\n-    public Class<?> findSerializationType(Annotated a)\n-    {\n-        Class<?> result = _primary.findSerializationType(a);\n-        if (result == null) {\n-            result = _secondary.findSerializationType(a);\n-        }\n-        return result;\n-    }\n-\n-    @Override\n-    public Class<?> findSerializationKeyType(Annotated am, JavaType baseType)\n-    {\n-        Class<?> result = _primary.findSerializationKeyType(am, baseType);\n-        if (result == null) {\n-            result = _secondary.findSerializationKeyType(am, baseType);\n-        }\n-        return result;\n-    }\n-\n-    @Override\n-    public Class<?> findSerializationContentType(Annotated am, JavaType baseType)\n-    {\n-        Class<?> result = _primary.findSerializationContentType(am, baseType);\n-        if (result == null) {\n-            result = _secondary.findSerializationContentType(am, baseType);\n-        }\n-        return result;\n-    }\n-    \n-    @Override\n-    public JsonSerialize.Typing findSerializationTyping(Annotated a)\n-    {\n-        JsonSerialize.Typing result = _primary.findSerializationTyping(a);\n-        if (result == null) {\n-            result = _secondary.findSerializationTyping(a);\n-        }\n-        return result;\n-    }\n-\n-    @Override\n-    public Object findSerializationConverter(Annotated a)\n-    {\n-        Object ob = _primary.findSerializationConverter(a);\n-        if (ob == null) {\n-            ob = _secondary.findSerializationConverter(a);\n-        }\n-        return ob;\n-    }\n-\n-    @Override\n-    public Object findSerializationContentConverter(AnnotatedMember a)\n-    {\n-        Object ob = _primary.findSerializationContentConverter(a);\n-        if (ob == null) {\n-            ob = _secondary.findSerializationContentConverter(a);\n-        }\n-        return ob;\n-    }\n-\n-    @Override\n-    public Class<?>[] findViews(Annotated a)\n-    {\n+    public Class<?> findSerializationType(Annotated a) {\n+    \tClass<?> r = _primary.findSerializationType(a);\n+        return (r == null) ? _secondary.findSerializationType(a) : r;\n+    }\n+\n+    @Override\n+    public Class<?> findSerializationKeyType(Annotated am, JavaType baseType) {\n+        Class<?> r = _primary.findSerializationKeyType(am, baseType);\n+        return (r == null) ? _secondary.findSerializationKeyType(am, baseType) : r;\n+    }\n+\n+    @Override\n+    public Class<?> findSerializationContentType(Annotated am, JavaType baseType) {\n+        Class<?> r = _primary.findSerializationContentType(am, baseType);\n+        return (r == null) ? _secondary.findSerializationContentType(am, baseType) : r;\n+    }\n+    \n+    @Override\n+    public JsonSerialize.Typing findSerializationTyping(Annotated a) {\n+        JsonSerialize.Typing r = _primary.findSerializationTyping(a);\n+        return (r == null) ? _secondary.findSerializationTyping(a) : r;\n+    }\n+\n+    @Override\n+    public Object findSerializationConverter(Annotated a) {\n+        Object r = _primary.findSerializationConverter(a);\n+        return (r == null) ? _secondary.findSerializationConverter(a) : r;\n+    }\n+\n+    @Override\n+    public Object findSerializationContentConverter(AnnotatedMember a) {\n+        Object r = _primary.findSerializationContentConverter(a);\n+        return (r == null) ? _secondary.findSerializationContentConverter(a) : r;\n+    }\n+\n+    @Override\n+    public Class<?>[] findViews(Annotated a) {\n         /* Theoretically this could be trickier, if multiple introspectors\n          * return non-null entries. For now, though, we'll just consider\n          * first one to return non-null to win.\n     @Override\n     public Boolean isTypeId(AnnotatedMember member) {\n         Boolean b = _primary.isTypeId(member);\n-        if (b == null) {\n-            b = _secondary.isTypeId(member);\n-        }\n-        return b;\n+        return (b == null) ? _secondary.isTypeId(member) : b;\n     }\n \n     @Override\n     public ObjectIdInfo findObjectIdInfo(Annotated ann) {\n-        ObjectIdInfo result = _primary.findObjectIdInfo(ann);\n-        if (result == null) {\n-            result = _secondary.findObjectIdInfo(ann);\n-        }\n-        return result;\n+        ObjectIdInfo r = _primary.findObjectIdInfo(ann);\n+        return (r == null) ? _secondary.findObjectIdInfo(ann) : r;\n     }\n \n     @Override\n     \n     @Override\n     public JsonFormat.Value findFormat(Annotated ann) {\n-        JsonFormat.Value result = _primary.findFormat(ann);\n-        if (result == null) {\n-            result = _secondary.findFormat(ann);\n-        }\n-        return result;\n+        JsonFormat.Value r = _primary.findFormat(ann);\n+        return (r == null) ? _secondary.findFormat(ann) : r;\n     }\n \n     @Override\n     }\n     \n     @Override\n-    public String findPropertyDescription(Annotated ann)\n-    {\n-        String result = _primary.findPropertyDescription(ann);\n-        if (result == null) {\n-            result = _secondary.findPropertyDescription(ann);\n-        }\n-        return result;\n-    }\n-\n+    public String findPropertyDescription(Annotated ann) {\n+        String r = _primary.findPropertyDescription(ann);\n+        return (r == null) ? _secondary.findPropertyDescription(ann) : r;\n+    }\n+\n+    @Override\n+    public Integer findPropertyIndex(Annotated ann) {\n+        Integer r = _primary.findPropertyIndex(ann);\n+        return (r == null) ? _secondary.findPropertyIndex(ann) : r;\n+    }\n+    \n     // // // Serialization: class annotations\n \n     @Override\n     public String[] findSerializationPropertyOrder(AnnotatedClass ac) {\n-        String[] result = _primary.findSerializationPropertyOrder(ac);\n-        if (result == null) {\n-            result = _secondary.findSerializationPropertyOrder(ac);\n-        }\n-        return result;            \n+        String[] r = _primary.findSerializationPropertyOrder(ac);\n+        return (r == null) ? _secondary.findSerializationPropertyOrder(ac) : r;\n     }\n \n     /**\n     @Override\n     @Deprecated\n     public Boolean findSerializationSortAlphabetically(AnnotatedClass ac) {\n-        Boolean result = _primary.findSerializationSortAlphabetically(ac);\n-        if (result == null) {\n-            result = _secondary.findSerializationSortAlphabetically(ac);\n-        }\n-        return result;            \n+        Boolean r = _primary.findSerializationSortAlphabetically(ac);\n+        return (r == null) ? _secondary.findSerializationSortAlphabetically(ac) : r;\n     }\n \n     @Override\n     public Boolean findSerializationSortAlphabetically(Annotated ann) {\n-        Boolean result = _primary.findSerializationSortAlphabetically(ann);\n-        if (result == null) {\n-            result = _secondary.findSerializationSortAlphabetically(ann);\n-        }\n-        return result;            \n+        Boolean r = _primary.findSerializationSortAlphabetically(ann);\n+        return (r == null) ? _secondary.findSerializationSortAlphabetically(ann) : r;\n     }\n     \n     // // // Serialization: property annotations\n     }\n     \n     @Override\n-    public boolean hasAsValueAnnotation(AnnotatedMethod am)\n-    {\n+    public boolean hasAsValueAnnotation(AnnotatedMethod am) {\n         return _primary.hasAsValueAnnotation(am) || _secondary.hasAsValueAnnotation(am);\n     }\n     \n     @Override\n-    public String findEnumValue(Enum<?> value)\n-    {\n-        String result = _primary.findEnumValue(value);\n-        if (result == null) {\n-            result = _secondary.findEnumValue(value);\n-        }\n-        return result;\n+    public String findEnumValue(Enum<?> value) {\n+        String r = _primary.findEnumValue(value);\n+        return (r == null) ? _secondary.findEnumValue(value) : r;\n     }        \n \n     // // // Deserialization: general annotations\n \n     @Override\n-    public Object findDeserializer(Annotated am)\n-    {\n-        Object result = _primary.findDeserializer(am);\n-        if (result == null) {\n-            result = _secondary.findDeserializer(am);\n-        }\n-        return result;\n-    }\n-    \n-    @Override\n-    public Object findKeyDeserializer(Annotated am)\n-    {\n+    public Object findDeserializer(Annotated am) {\n+        Object r = _primary.findDeserializer(am);\n+        return (r == null) ? _secondary.findDeserializer(am) : r;\n+    }\n+    \n+    @Override\n+    public Object findKeyDeserializer(Annotated am) {\n         Object result = _primary.findKeyDeserializer(am);\n         if (result == null || result == KeyDeserializer.None.class || result == NoClass.class) {\n             result = _secondary.findKeyDeserializer(am);\n     }\n \n     @Override\n-    public Object findContentDeserializer(Annotated am)\n-    {\n+    public Object findContentDeserializer(Annotated am) {\n         Object result = _primary.findContentDeserializer(am);\n         if (result == null || result == JsonDeserializer.None.class || result == NoClass.class) {\n             result = _secondary.findContentDeserializer(am);\n     }\n     \n     @Override\n-    public Class<?> findDeserializationType(Annotated am, JavaType baseType)\n-    {\n+    public Class<?> findDeserializationType(Annotated am, JavaType baseType) {\n         Class<?> result = _primary.findDeserializationType(am, baseType);\n         if (result == null) {\n             result = _secondary.findDeserializationType(am, baseType);\n     }\n \n     @Override\n-    public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType)\n-    {\n+    public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType) {\n         Class<?> result = _primary.findDeserializationKeyType(am, baseKeyType);\n         if (result == null) {\n             result = _secondary.findDeserializationKeyType(am, baseKeyType);\n     }\n     \n     @Override\n-    public boolean hasAnySetterAnnotation(AnnotatedMethod am)\n-    {\n+    public boolean hasAnySetterAnnotation(AnnotatedMethod am) {\n         return _primary.hasAnySetterAnnotation(am) || _secondary.hasAnySetterAnnotation(am);\n     }\n \n     @Override\n-    public boolean hasAnyGetterAnnotation(AnnotatedMethod am)\n-    {\n+    public boolean hasAnyGetterAnnotation(AnnotatedMethod am) {\n         return _primary.hasAnyGetterAnnotation(am) || _secondary.hasAnyGetterAnnotation(am);\n     }\n     \n     @Override\n-    public boolean hasCreatorAnnotation(Annotated a)\n-    {\n+    public boolean hasCreatorAnnotation(Annotated a) {\n         return _primary.hasCreatorAnnotation(a) || _secondary.hasCreatorAnnotation(a);\n     }\n  }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     }\n \n     @Override\n-    public String findPropertyDescription(Annotated annotated)\n-    {\n+    public String findPropertyDescription(Annotated annotated) {\n         JsonPropertyDescription desc = annotated.getAnnotation(JsonPropertyDescription.class);\n         return (desc == null) ? null : desc.value();\n     }\n-    \n+\n+    @Override\n+    public Integer findPropertyIndex(Annotated annotated) {\n+        JsonProperty ann = annotated.getAnnotation(JsonProperty.class);\n+        if (ann != null) {\n+        \tint ix = ann.index();\n+        \tif (ix != JsonProperty.INDEX_UNKNOWN) {\n+        \t\treturn Integer.valueOf(ix);\n+        \t}\n+        }\n+        return null;\n+    }\n+\n     /*\n     /**********************************************************\n     /* Serialization: class annotations\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n     public PropertyMetadata getMetadata() {\n         final Boolean b = _findRequired();\n         final String desc = _findDescription();\n-        if (b == null) {\n+        final Integer idx = _findIndex();\n+        if (b == null && idx == null) {\n             return (desc == null) ? PropertyMetadata.STD_REQUIRED_OR_OPTIONAL\n                     : PropertyMetadata.STD_REQUIRED_OR_OPTIONAL.withDescription(desc);\n         }\n-        return PropertyMetadata.construct(b.booleanValue(), _findDescription());\n+        return PropertyMetadata.construct(b.booleanValue(), desc, idx);\n     }\n \n     protected Boolean _findRequired() {\n             @Override\n             public String withMember(AnnotatedMember member) {\n                 return _annotationIntrospector.findPropertyDescription(member);\n+            }\n+        });\n+    }\n+\n+    protected Integer _findIndex() {\n+        return fromMemberAnnotations(new WithMember<Integer>() {\n+            @Override\n+            public Integer withMember(AnnotatedMember member) {\n+                return _annotationIntrospector.findPropertyIndex(member);\n             }\n         });\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestPOJOPropertiesCollector.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestPOJOPropertiesCollector.java\n     static class PropDescBean\n     {\n         public final static String A_DESC = \"That's A!\";\n+        public final static int B_INDEX = 3;\n \n         @JsonPropertyDescription(A_DESC)\n         public String a;\n \n         public void setA(String a) { this.a = a; }\n \n-        @JsonProperty(required=true)\n+        @JsonProperty(required=true, index=B_INDEX)\n         public int getB() { return b; }\n     }\n     \n         assertNotNull(setter);\n     }\n \n-    // [Issue#269]: Support new @JsonPropertyDescription\n+    // [#269]: Support new @JsonPropertyDescription\n     public void testPropertyDesc() throws Exception\n     {\n         // start via deser\n         BeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(PropDescBean.class));\n-        _verifyPropertyDesc(beanDesc);\n+        _verifyProperty(beanDesc, true, false);\n         // and then via ser:\n         beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(PropDescBean.class));\n-        _verifyPropertyDesc(beanDesc);\n-    }\n-\n-    private void _verifyPropertyDesc(BeanDescription beanDesc)\n+        _verifyProperty(beanDesc, true, false);\n+    }\n+\n+    // [#438]: Support @JsonProperty.index\n+    public void testPropertyIndex() throws Exception\n+    {\n+        BeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(PropDescBean.class));\n+        _verifyProperty(beanDesc, false, true);\n+        beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(PropDescBean.class));\n+        _verifyProperty(beanDesc, false, true);\n+    }\n+\n+    private void _verifyProperty(BeanDescription beanDesc,\n+    \t\tboolean verifyDesc, boolean verifyIndex)\n     {\n         assertNotNull(beanDesc);\n         List<BeanPropertyDefinition> props = beanDesc.findProperties();\n             if (\"a\".equals(name)) {\n                 assertFalse(md.isRequired());\n                 assertNull(md.getRequired());\n-                assertEquals(PropDescBean.A_DESC, md.getDescription());\n+                if (verifyDesc) {\n+                \tassertEquals(PropDescBean.A_DESC, md.getDescription());\n+                }\n+                if (verifyIndex) {\n+                \tassertNull(md.getIndex());\n+                }\n             } else if (\"b\".equals(name)) {\n                 assertTrue(md.isRequired());\n                 assertEquals(Boolean.TRUE, md.getRequired());\n-                assertNull(md.getDescription());\n+                if (verifyDesc) {\n+                \tassertNull(md.getDescription());\n+                }\n+                if (verifyIndex) {\n+                \tassertEquals(Integer.valueOf(PropDescBean.B_INDEX), md.getIndex());\n+                }\n             } else {\n                 fail(\"Unrecognized property '\"+name+\"'\");\n             }\n         }\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Helper methods", "timestamp": 1397332663, "metainfo": ""}