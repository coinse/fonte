{"sha": "efb9f7b708f03bf4096e36de088029fe7c6a93f8", "log": "Added test cases for single value arrays bean deserialization  Added test cases for single value arrays bean deserialization", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n      */\n \n     protected final ObjectMapper MAPPER = new ObjectMapper();\n+    \n \n     public void testSimple() throws Exception\n     {\n             verifyException(e, \"foobar\");\n         }\n     }\n+    \n+    // [Issue#381]\n+    public void testUnwrappedEnum() throws Exception {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        assertEquals(TestEnum.JACKSON, mapper.readValue(\"[\" + quote(\"JACKSON\") + \"]\", TestEnum.class));\n+    }\n+    \n+    public void testUnwrappedEnumException() throws Exception {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        try {\n+            assertEquals(TestEnum.JACKSON, mapper.readValue(\"[\" + quote(\"JACKSON\") + \"]\", TestEnum.class));\n+            fail(\"Exception was not thrown on deserializing a single array element of type enum\");\n+        } catch (JsonMappingException exp) {\n+            //exception as thrown correctly\n+        }\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionDeserialization.java\n         Exception exc = MAPPER.readValue(\"{\\\"suppressed\\\":[]}\", IOException.class);\n         assertNotNull(exc);\n     }\n+    \n+    // [Issue#381]\n+    public void testSingleValueArrayDeserialization() throws Exception {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        final IOException exp;\n+        try {\n+            throw new IOException(\"testing\");\n+        } catch (IOException internal) {\n+            exp = internal;\n+        }\n+        final String value = \"[\" + mapper.writeValueAsString(exp) + \"]\";\n+        \n+        final IOException cloned = mapper.readValue(value, IOException.class);\n+        assertEquals(exp.getMessage(), cloned.getMessage());    \n+        \n+        assertEquals(exp.getStackTrace().length, cloned.getStackTrace().length);\n+        for (int i = 0; i < exp.getStackTrace().length; i ++) {\n+            assertEquals(exp.getStackTrace()[i], cloned.getStackTrace()[i]);\n+        }\n+    }\n+    \n+    public void testSingleValueArrayDeserializationException() throws Exception {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        final IOException exp;\n+        try {\n+            throw new IOException(\"testing\");\n+        } catch (IOException internal) {\n+            exp = internal;\n+        }\n+        final String value = \"[\" + mapper.writeValueAsString(exp) + \"]\";\n+        \n+        try {\n+            mapper.readValue(value, IOException.class);\n+            fail(\"Exception not thrown when attempting to deserialize an IOException wrapped in a single value array with UNWRAP_SINGLE_VALUE_ARRAYS disabled\");\n+        } catch (JsonMappingException exp2) {\n+            //Exception thrown correctly\n+        }\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestGenerics.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestGenerics.java\n         SimpleBean bean = (SimpleBean) contents;\n         assertEquals(13, bean.x);\n     }\n+    \n+    public void testGenericWrapperWithSingleElementArray() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        Wrapper<SimpleBean> result = mapper.readValue\n+            (\"[{\\\"value\\\": [{ \\\"x\\\" : 13 }] }]\",\n+             new TypeReference<Wrapper<SimpleBean>>() { });\n+        assertNotNull(result);\n+        assertEquals(Wrapper.class, result.getClass());\n+        Object contents = result.value;\n+        assertNotNull(contents);\n+        assertEquals(SimpleBean.class, contents.getClass());\n+        SimpleBean bean = (SimpleBean) contents;\n+        assertEquals(13, bean.x);\n+    }\n \n     /**\n      * Unit test for verifying that we can use different\n             (\"{\\\"value\\\": 7}\", new TypeReference<Wrapper<Long>>() { });\n         assertEquals(new Wrapper<Long>(7L), result3);\n     }\n+    \n+    //[Issue#381]\n+    public void testMultipleWrappersSingleValueArray() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+\n+        // First, numeric wrapper\n+        Wrapper<Boolean> result = mapper.readValue\n+            (\"[{\\\"value\\\": [true]}]\", new TypeReference<Wrapper<Boolean>>() { });\n+        assertEquals(new Wrapper<Boolean>(Boolean.TRUE), result);\n+\n+        // Then string one\n+        Wrapper<String> result2 = mapper.readValue\n+            (\"[{\\\"value\\\": [\\\"abc\\\"]}]\", new TypeReference<Wrapper<String>>() { });\n+        assertEquals(new Wrapper<String>(\"abc\"), result2);\n+\n+        // And then number\n+        Wrapper<Long> result3 = mapper.readValue\n+            (\"[{\\\"value\\\": [7]}]\", new TypeReference<Wrapper<Long>>() { });\n+        assertEquals(new Wrapper<Long>(7L), result3);\n+    }\n \n     /**\n      * Unit test for verifying fix to [JACKSON-109].\n         SimpleBean bean = (SimpleBean) contents;\n         assertEquals(9, bean.x);\n     }\n+    \n+    // [Issue#381]\n+    public void testArrayOfGenericWrappersSingleValueArray() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        Wrapper<SimpleBean>[] result = mapper.readValue\n+            (\"[ {\\\"value\\\": [ { \\\"x\\\" : [ 9 ] } ] } ]\",\n+             new TypeReference<Wrapper<SimpleBean>[]>() { });\n+        assertNotNull(result);\n+        assertEquals(Wrapper[].class, result.getClass());\n+        assertEquals(1, result.length);\n+        Wrapper<SimpleBean> elem = result[0];\n+        Object contents = elem.value;\n+        assertNotNull(contents);\n+        assertEquals(SimpleBean.class, contents.getClass());\n+        SimpleBean bean = (SimpleBean) contents;\n+        assertEquals(9, bean.x);\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n     }\n \n     public void testSingleElementArrayException() throws Exception {\n-        try {\n-            MAPPER.readValue(\"[42]\", Integer.class);\n-            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n-        } catch (JsonMappingException exp) {\n-            //Exception was thrown correctly\n-        }\n-        try {\n-            MAPPER.readValue(\"[42]\", Integer.TYPE);\n-            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n-        } catch (JsonMappingException exp) {\n-            //Exception was thrown correctly\n-        }\n-\n-        try {\n-            MAPPER.readValue(\"[42.273]\", Double.class);\n-            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n-        } catch (JsonMappingException exp) {\n-            //Exception was thrown correctly\n-        }\n-        try {\n-            MAPPER.readValue(\"[42.2723]\", Double.TYPE);\n-            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n-        } catch (JsonMappingException exp) {\n-            //Exception was thrown correctly\n-        }\n-\n-        try {\n-            MAPPER.readValue(\"[42342342342342]\", Long.class);\n-            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n-        } catch (JsonMappingException exp) {\n-            //Exception was thrown correctly\n-        }\n-        try {\n-            MAPPER.readValue(\"[42342342342342342]\", Long.TYPE);\n-            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n-        } catch (JsonMappingException exp) {\n-            //Exception was thrown correctly\n-        }\n-\n-        try {\n-            MAPPER.readValue(\"[42]\", Short.class);\n-            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n-        } catch (JsonMappingException exp) {\n-            //Exception was thrown correctly\n-        }\n-        try {\n-            MAPPER.readValue(\"[42]\", Short.TYPE);\n-            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n-        } catch (JsonMappingException exp) {\n-            //Exception was thrown correctly\n-        }\n-\n-        try {\n-            MAPPER.readValue(\"[327.2323]\", Float.class);\n-            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n-        } catch (JsonMappingException exp) {\n-            //Exception was thrown correctly\n-        }\n-        try {\n-            MAPPER.readValue(\"[82.81902]\", Float.TYPE);\n-            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n-        } catch (JsonMappingException exp) {\n-            //Exception was thrown correctly\n-        }\n-\n-        try {\n-            MAPPER.readValue(\"[22]\", Byte.class);\n-            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n-        } catch (JsonMappingException exp) {\n-            //Exception was thrown correctly\n-        }\n-        try {\n-            MAPPER.readValue(\"[22]\", Byte.TYPE);\n-            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n-        } catch (JsonMappingException exp) {\n-            //Exception was thrown correctly\n-        }\n-\n-        try {\n-            MAPPER.readValue(\"['d']\", Character.class);\n-            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n-        } catch (JsonMappingException exp) {\n-            //Exception was thrown correctly\n-        }\n-        try {\n-            MAPPER.readValue(\"['d']\", Character.TYPE);\n-            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n-        } catch (JsonMappingException exp) {\n-            //Exception was thrown correctly\n-        }\n-\n-        try {\n-            MAPPER.readValue(\"[true]\", Boolean.class);\n-            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n-        } catch (JsonMappingException exp) {\n-            //Exception was thrown correctly\n-        }\n-        try {\n-            MAPPER.readValue(\"[true]\", Boolean.TYPE);\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        try {\n+            mapper.readValue(\"[42]\", Integer.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[42]\", Integer.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            mapper.readValue(\"[42.273]\", Double.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[42.2723]\", Double.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            mapper.readValue(\"[42342342342342]\", Long.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[42342342342342342]\", Long.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            mapper.readValue(\"[42]\", Short.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[42]\", Short.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            mapper.readValue(\"[327.2323]\", Float.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[82.81902]\", Float.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            mapper.readValue(\"[22]\", Byte.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[22]\", Byte.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            mapper.readValue(\"['d']\", Character.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"['d']\", Character.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            mapper.readValue(\"[true]\", Boolean.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[true]\", Boolean.TYPE);\n             fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n         } catch (JsonMappingException exp) {\n             //Exception was thrown correctly\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n         assertNotNull(array);\n         assertEquals(1, array.length);\n         assertFalse(array[0]);\n+        \n+        // [Issue#381]\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        result = mapper.readValue(new StringReader(\"{\\\"v\\\":[true]}\"), BooleanBean.class);\n+        assertTrue(result._v);\n+        \n+        result = mapper.readValue(new StringReader(\"{\\\"v\\\":[null]}\"), BooleanBean.class);\n+        assertNotNull(result);\n+        assertFalse(result._v);\n+        \n+        result = mapper.readValue(new StringReader(\"[{\\\"v\\\":[null]}]\"), BooleanBean.class);\n+        assertNotNull(result);\n+        assertFalse(result._v);\n+        \n+        array = mapper.readValue(new StringReader(\"[ [ null ] ]\"), boolean[].class);\n+        assertNotNull(array);\n+        assertEquals(1, array.length);\n+        assertFalse(array[0]);\n     }\n \n     public void testIntPrimitive() throws Exception\n \n         // should work with arrays too..\n         int[] array = MAPPER.readValue(new StringReader(\"[ null ]\"), int[].class);\n+        assertNotNull(array);\n+        assertEquals(1, array.length);\n+        assertEquals(0, array[0]);\n+        \n+        // [Issue#381]\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        result = mapper.readValue(new StringReader(\"{\\\"v\\\":[3]}\"), IntBean.class);\n+        assertEquals(3, result._v);\n+        \n+        result = mapper.readValue(new StringReader(\"[{\\\"v\\\":[3]}]\"), IntBean.class);\n+        assertEquals(3, result._v);\n+        \n+        result = mapper.readValue(new StringReader(\"{\\\"v\\\":[null]}\"), IntBean.class);\n+        assertNotNull(result);\n+        assertEquals(0, result._v);\n+\n+        array = mapper.readValue(new StringReader(\"[ [ null ] ]\"), int[].class);\n         assertNotNull(array);\n         assertEquals(1, array.length);\n         assertEquals(0, array[0]);\n \n     public void testURI() throws Exception\n     {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        \n         URI value = new URI(\"http://foo.com\");\n-        assertEquals(value, MAPPER.readValue(\"\\\"\"+value.toString()+\"\\\"\", URI.class));\n+        assertEquals(value, mapper.readValue(\"\\\"\"+value.toString()+\"\\\"\", URI.class));\n+        \n+        //[Issue#381]\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        try {            \n+            assertEquals(value, mapper.readValue(\"[\\\"\"+value.toString()+\"\\\"]\", URI.class));\n+            fail(\"Did not throw exception for single value array when UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //exception thrown successfully\n+        }\n+        \n+        try {\n+            assertEquals(value, mapper.readValue(\"[\\\"\"+value.toString()+\"\\\",\\\"\"+value.toString()+\"\\\"]\", URI.class));\n+            fail(\"Did not throw exception for single value array when there were multiple values\");\n+        } catch (JsonMappingException exp) {\n+            //exception thrown successfully\n+        }\n+        \n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        assertEquals(value, mapper.readValue(\"[\\\"\"+value.toString()+\"\\\"]\", URI.class));\n     }\n \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestTimestampDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestTimestampDeserialization.java\n \n         assertEquals(\"Date: expect \"+value+\" (\"+value.getTime()+\"), got \"+result+\" (\"+result.getTime()+\")\", value.getTime(), result.getTime());\n     }\n+    \n+    public void testTimestampUtilSingleElementArray() throws Exception\n+    {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        long now = System.currentTimeMillis();\n+        java.sql.Timestamp value = new java.sql.Timestamp(now);\n+\n+        // First from long\n+        assertEquals(value, mapper.readValue(\"[\"+now+\"]\", java.sql.Timestamp.class));\n+\n+        String dateStr = serializeTimestampAsString(value);\n+        java.sql.Timestamp result = mapper.readValue(\"[\\\"\"+dateStr+\"\\\"]\", java.sql.Timestamp.class);\n+\n+        assertEquals(\"Date: expect \"+value+\" (\"+value.getTime()+\"), got \"+result+\" (\"+result.getTime()+\")\", value.getTime(), result.getTime());\n+    }\n \n     /*\n     /**********************************************************", "timestamp": 1389307262, "metainfo": ""}