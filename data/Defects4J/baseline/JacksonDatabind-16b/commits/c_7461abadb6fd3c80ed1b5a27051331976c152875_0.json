{"sha": "7461abadb6fd3c80ed1b5a27051331976c152875", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.java\n      */\n     protected TypeKey _cacheKey = null;\n     \n-    private ReadOnlyClassToSerializerMap(JsonSerializerMap map)\n-    {\n+    private ReadOnlyClassToSerializerMap(JsonSerializerMap map) {\n         _map = map;\n     }\n \n-    public ReadOnlyClassToSerializerMap instance()\n-    {\n+    public ReadOnlyClassToSerializerMap instance() {\n         return new ReadOnlyClassToSerializerMap(_map);\n     }\n \n      * can not be used as is but just shared: to get an actual usable\n      * instance, {@link #instance} has to be called first.\n      */\n-    public static ReadOnlyClassToSerializerMap from(HashMap<TypeKey, JsonSerializer<Object>> src)\n-    {\n+    public static ReadOnlyClassToSerializerMap from(HashMap<TypeKey, JsonSerializer<Object>> src) {\n         return new ReadOnlyClassToSerializerMap(new JsonSerializerMap(src));\n     }\n \n-    public JsonSerializer<Object> typedValueSerializer(JavaType type)\n-    { \n+    public JsonSerializer<Object> typedValueSerializer(JavaType type) { \n         if (_cacheKey == null) {\n             _cacheKey = new TypeKey(type, true);\n         } else {\n         return _map.find(_cacheKey);\n     }\n \n-    public JsonSerializer<Object> typedValueSerializer(Class<?> cls)\n-    { \n+    public JsonSerializer<Object> typedValueSerializer(Class<?> cls) { \n         if (_cacheKey == null) {\n             _cacheKey = new TypeKey(cls, true);\n         } else {\n         return _map.find(_cacheKey);\n     }\n \n-    public JsonSerializer<Object> untypedValueSerializer(JavaType type)\n-    { \n+    public JsonSerializer<Object> untypedValueSerializer(JavaType type) { \n         if (_cacheKey == null) {\n             _cacheKey = new TypeKey(type, false);\n         } else {\n         return _map.find(_cacheKey);\n     }\n \n-    public JsonSerializer<Object> untypedValueSerializer(Class<?> cls)\n-    { \n+    public JsonSerializer<Object> untypedValueSerializer(Class<?> cls) { \n         if (_cacheKey == null) {\n             _cacheKey = new TypeKey(cls, false);\n         } else {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n         public IntegerSerializer() { super(Integer.class, JsonParser.NumberType.INT ,\"integer\"); }\n     \n         @Override\n-        public void serialize(Integer value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+        public void serialize(Integer value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n             jgen.writeNumber(value.intValue());\n         }\n         \n         }\n         \n         @Override\n-        public void serialize(Number value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+        public void serialize(Number value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n             jgen.writeNumber(value.intValue());\n         }\n     }\n         public LongSerializer() { super(Long.class, JsonParser.NumberType.LONG, \"number\"); }\n         \n         @Override\n-        public void serialize(Long value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+        public void serialize(Long value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n             jgen.writeNumber(value.longValue());\n         }\n     }\n         public FloatSerializer() { super(Float.class, JsonParser.NumberType.FLOAT, \"number\"); }\n         \n         @Override\n-        public void serialize(Float value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+        public void serialize(Float value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n             jgen.writeNumber(value.floatValue());\n         }\n     }\n         public DoubleSerializer() { super(Double.class, JsonParser.NumberType.DOUBLE, \"number\"); }\n     \n         @Override\n-        public void serialize(Double value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+        public void serialize(Double value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n             jgen.writeNumber(value.doubleValue());\n         }\n ", "timestamp": 1401936539, "metainfo": ""}