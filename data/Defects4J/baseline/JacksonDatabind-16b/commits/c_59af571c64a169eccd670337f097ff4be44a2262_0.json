{"sha": "59af571c64a169eccd670337f097ff4be44a2262", "log": "Fix #742 for 2.5.3", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n     @Override\n     public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType)\n     {\n+        /* 02-Apr-2015, tatu: As per [databind#742] should allow 'null', similar to how\n+         *   missing id already works.\n+         */\n+        if (id == null) {\n+            return null;\n+        }\n+\n         final ObjectIdGenerator.IdKey key = gen.key(id);\n \n         if (_objectIds == null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n     {\n         // note: no null checks (unlike usually); deserializer should fail if one found\n         Object id = _valueDeserializer.deserialize(jp, ctxt);\n+\n+        /* 02-Apr-2015, tatu: Actually, as per [databind#742], let it be;\n+         *  missing or null id is needed for some cases, such as cases where id\n+         *  will be generated externally, at a later point, and is not available\n+         *  quite yet. Typical use case is with DB inserts.\n+         */\n+        if (id == null) {\n+            return null;\n+        }\n+        \n         ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n         roid.bindItem(instance);\n         // also: may need to set a property value as well\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedObjectIdGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedObjectIdGenerator.java\n \n     @Override\n     public com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey key(Object key) {\n+        if (key == null) {\n+            return null;\n+        }\n         // should we use general type for all; or type of property itself?\n         return new IdKey(getClass(), _scope, key);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertyBasedObjectIdGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertyBasedObjectIdGenerator.java\n \n     @Override\n     public com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey key(Object key) {\n+        if (key == null) {\n+            return null;\n+        }\n         // should we use general type for all; or type of property itself?\n         return new IdKey(getClass(), _scope, key);\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n     /*****************************************************\n      */\n \n-    private final ObjectMapper mapper = new ObjectMapper();\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n     \n     private final static String EXP_SIMPLE_INT_CLASS = \"{\\\"id\\\":1,\\\"value\\\":13,\\\"next\\\":1}\";\n \n     public void testSimpleDeserializationClass() throws Exception\n     {\n         // then bring back...\n-        Identifiable result = mapper.readValue(EXP_SIMPLE_INT_CLASS, Identifiable.class);\n+        Identifiable result = MAPPER.readValue(EXP_SIMPLE_INT_CLASS, Identifiable.class);\n         assertEquals(13, result.value);\n         assertSame(result, result.next);\n     }\n     // Should be ok NOT to have Object id, as well\n     public void testMissingObjectId() throws Exception\n     {\n-        Identifiable result = mapper.readValue(aposToQuotes(\"{'value':28, 'next':{'value':29}}\"),\n+        Identifiable result = MAPPER.readValue(aposToQuotes(\"{'value':28, 'next':{'value':29}}\"),\n                 Identifiable.class);\n         assertNotNull(result);\n         assertEquals(28, result.value);\n         child2.parent = root;\n         child1.first = child2;\n \n-        String json = mapper.writeValueAsString(root);\n+        String json = MAPPER.writeValueAsString(root);\n \n         // and should come back the same too...\n-        UUIDNode result = mapper.readValue(json, UUIDNode.class);\n+        UUIDNode result = MAPPER.readValue(json, UUIDNode.class);\n         assertEquals(1, result.value);\n         UUIDNode result2 = result.first;\n         UUIDNode result3 = result.second;\n         \n     public void testSimpleDeserializationProperty() throws Exception\n     {\n-        IdWrapper result = mapper.readValue(EXP_SIMPLE_INT_PROP, IdWrapper.class);\n+        IdWrapper result = MAPPER.readValue(EXP_SIMPLE_INT_PROP, IdWrapper.class);\n         assertEquals(7, result.node.value);\n         assertSame(result.node, result.node.next.node);\n     }\n     // Another test to ensure ordering is not required (i.e. can do front references)\n     public void testSimpleDeserWithForwardRefs() throws Exception\n     {\n-        IdWrapper result = mapper.readValue(\"{\\\"node\\\":{\\\"value\\\":7,\\\"next\\\":{\\\"node\\\":1}, \\\"@id\\\":1}}\"\n+        IdWrapper result = MAPPER.readValue(\"{\\\"node\\\":{\\\"value\\\":7,\\\"next\\\":{\\\"node\\\":1}, \\\"@id\\\":1}}\"\n                 ,IdWrapper.class);\n         assertEquals(7, result.node.value);\n         assertSame(result.node, result.node.next.node);\n                       + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":2,\\\"reports\\\":[]},\"\n                       + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":null,\\\"reports\\\":[1]}\"\n                       + \"]}\";\n-        Company company = mapper.readValue(json, Company.class);\n+        Company company = MAPPER.readValue(json, Company.class);\n         assertEquals(2, company.employees.size());\n         Employee firstEmployee = company.employees.get(0);\n         Employee secondEmployee = company.employees.get(1);\n                       + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n                       + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n                       + \"]}\";\n-        Company company = mapper.readValue(json, Company.class);\n+        Company company = MAPPER.readValue(json, Company.class);\n         assertEquals(2, company.employees.size());\n         Employee firstEmployee = company.employees.get(0);\n         Employee secondEmployee = company.employees.get(1);\n                       + \"\\\"2\\\": 2,\"\n                       + \"\\\"3\\\":{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n                       + \"}}\";\n-        MappedCompany company = mapper.readValue(json, MappedCompany.class);\n+        MappedCompany company = MAPPER.readValue(json, MappedCompany.class);\n         assertEquals(3, company.employees.size());\n         Employee firstEmployee = company.employees.get(1);\n         Employee secondEmployee = company.employees.get(3);\n \n     public void testForwardReferenceAnySetterCombo() throws Exception {\n         String json = \"{\\\"@id\\\":1, \\\"foo\\\":2, \\\"bar\\\":{\\\"@id\\\":2, \\\"foo\\\":1}}\";\n-        AnySetterObjectId value = mapper.readValue(json, AnySetterObjectId.class);\n+        AnySetterObjectId value = MAPPER.readValue(json, AnySetterObjectId.class);\n         assertSame(value.values.get(\"bar\"), value.values.get(\"foo\"));\n     }\n \n                       + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":3,\\\"reports\\\":[]}\" \n                       + \"]}\";\n         try {\n-            mapper.readValue(json, Company.class);\n+            MAPPER.readValue(json, Company.class);\n             fail(\"Should have thrown.\");\n         } catch (UnresolvedForwardReference exception) {\n             // Expected\n     // [databind#299]: Allow unresolved ids to become nulls\n     public void testUnresolvableAsNull() throws Exception\n     {\n-        IdWrapper w = mapper.reader(IdWrapper.class)\n+        IdWrapper w = MAPPER.reader(IdWrapper.class)\n                 .without(DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS)\n                 .readValue(aposToQuotes(\"{'node':123}\"));\n         assertNotNull(w);\n                 + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n                 + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n                 + \"]}\";\n-        Company company = mapper.readValue(json, Company.class);\n+        Company company = MAPPER.readValue(json, Company.class);\n         assertEquals(4, company.employees.size());\n         // Deser must keep object ordering.\n         Employee firstEmployee = company.employees.get(1);\n                       + \"\\\"3\\\":{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n                       + \"\\\"4\\\":{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n                       + \"}}\";\n-        MappedCompany company = mapper.readValue(json, MappedCompany.class);\n+        MappedCompany company = MAPPER.readValue(json, MappedCompany.class);\n         assertEquals(4, company.employees.size());\n         Employee firstEmployee = company.employees.get(2);\n         Employee secondEmployee = company.employees.get(1);\n     public void testCustomDeserializationClass() throws Exception\n     {\n         // then bring back...\n-        IdentifiableCustom result = mapper.readValue(EXP_CUSTOM_VIA_CLASS, IdentifiableCustom.class);\n+        IdentifiableCustom result = MAPPER.readValue(EXP_CUSTOM_VIA_CLASS, IdentifiableCustom.class);\n         assertEquals(-900, result.value);\n         assertSame(result, result.next);\n     }\n     public void testCustomDeserializationProperty() throws Exception\n     {\n         // then bring back...\n-    \tIdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class);\n+        IdWrapperExt result = MAPPER.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class);\n         assertEquals(99, result.node.value);\n         assertSame(result.node, result.node.next.node);\n         assertEquals(3, result.node.customId);\n     /* Unit tests, custom id resolver\n     /*****************************************************\n      */\n-    public void testCustomPoolResolver()\n-        throws Exception\n+\n+    public void testCustomPoolResolver() throws Exception\n     {\n         Map<Object,WithCustomResolution> pool = new HashMap<Object,WithCustomResolution>();\n         pool.put(1, new WithCustomResolution(1, 1));\n         pool.put(3, new WithCustomResolution(3, 3));\n         pool.put(4, new WithCustomResolution(4, 4));\n         pool.put(5, new WithCustomResolution(5, 5));\n-        ContextAttributes attrs = mapper.getDeserializationConfig().getAttributes().withSharedAttribute(POOL_KEY, pool);\n+        ContextAttributes attrs = MAPPER.getDeserializationConfig().getAttributes().withSharedAttribute(POOL_KEY, pool);\n         String content = \"{\\\"data\\\":[1,2,3,4,5]}\";\n-        CustomResolutionWrapper wrapper = mapper.reader(CustomResolutionWrapper.class).with(attrs).readValue(content);\n+        CustomResolutionWrapper wrapper = MAPPER.reader(CustomResolutionWrapper.class).with(attrs).readValue(content);\n         assertFalse(wrapper.data.isEmpty());\n         for (WithCustomResolution ob : wrapper.data) {\n             assertSame(pool.get(ob.id), ob);\n         }\n     }\n+\n+    /*\n+    /*****************************************************\n+    /* Unit tests, missing/null Object id [databind#742]\n+    /*****************************************************\n+     */\n+\n+    /*\n+    private final static String EXP_SIMPLE_INT_CLASS = \"{\\\"id\\\":1,\\\"value\\\":13,\\\"next\\\":1}\";\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"id\")\n+    static class Identifiable\n+    {\n+        public int value;\n+\n+        public Identifiable next;\n+    }\n+    */\n+\n+    public void testNullObjectId() throws Exception\n+    {\n+        // Ok, so missing Object Id is ok, but so is null.\n+        \n+        Identifiable value = MAPPER.readValue\n+                (aposToQuotes(\"{'value':3, 'next':null, 'id':null}\"), Identifiable.class);\n+        assertNotNull(value);\n+        assertEquals(3, value.value);\n+    }\n }", "timestamp": 1428000516, "metainfo": ""}