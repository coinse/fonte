{"sha": "41a152a0bc386b0d56a39a904fddb3fb436e12b8", "log": "Fix [Issue#93]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n     {\n         if (_children == null) {\n             _children = _createMap();\n-        } else {\n-            for (Map.Entry<String, JsonNode> en : properties.entrySet()) {\n-                JsonNode n = en.getValue();\n-                if (n == null) {\n-                    n = nullNode();\n-                }\n-                _children.put(en.getKey(), n);\n-            }\n+        }\n+        for (Map.Entry<String, JsonNode> en : properties.entrySet()) {\n+            JsonNode n = en.getValue();\n+            if (n == null) {\n+                n = nullNode();\n+            }\n+            _children.put(en.getKey(), n);\n         }\n         return this;\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java\n public class TestObjectNode\n     extends BaseMapTest\n {\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+\n     public void testBasics()\n     {\n         ObjectNode n = new ObjectNode(JsonNodeFactory.instance);\n      */\n     public void testNullChecking2()\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        ObjectNode src = mapper.createObjectNode();\n-        ObjectNode dest = mapper.createObjectNode();\n+        ObjectNode src = MAPPER.createObjectNode();\n+        ObjectNode dest = MAPPER.createObjectNode();\n         src.put(\"a\", \"b\");\n         dest.setAll(src);\n     }\n \n     public void testRemove()\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        ObjectNode ob = mapper.createObjectNode();\n+        ObjectNode ob = MAPPER.createObjectNode();\n         ob.put(\"a\", \"a\");\n         ob.put(\"b\", \"b\");\n         ob.put(\"c\", \"c\");\n \n     public void testRetain()\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        ObjectNode ob = mapper.createObjectNode();\n+        ObjectNode ob = MAPPER.createObjectNode();\n         ob.put(\"a\", \"a\");\n         ob.put(\"b\", \"b\");\n         ob.put(\"c\", \"c\");\n         assertEquals(\"c\", ob.get(\"c\").textValue());\n     }\n \n-    // @since 1.8\n     public void testValidWith() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        ObjectNode root = mapper.createObjectNode();\n-        assertEquals(\"{}\", mapper.writeValueAsString(root));\n+        ObjectNode root = MAPPER.createObjectNode();\n+        assertEquals(\"{}\", MAPPER.writeValueAsString(root));\n         JsonNode child = root.with(\"prop\");\n         assertTrue(child instanceof ObjectNode);\n-        assertEquals(\"{\\\"prop\\\":{}}\", mapper.writeValueAsString(root));\n+        assertEquals(\"{\\\"prop\\\":{}}\", MAPPER.writeValueAsString(root));\n     }\n \n     public void testValidWithArray() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        ObjectNode root = mapper.createObjectNode();\n-        assertEquals(\"{}\", mapper.writeValueAsString(root));\n+        ObjectNode root = MAPPER.createObjectNode();\n+        assertEquals(\"{}\", MAPPER.writeValueAsString(root));\n         JsonNode child = root.withArray(\"arr\");\n         assertTrue(child instanceof ArrayNode);\n-        assertEquals(\"{\\\"arr\\\":[]}\", mapper.writeValueAsString(root));\n+        assertEquals(\"{\\\"arr\\\":[]}\", MAPPER.writeValueAsString(root));\n     }\n \n     public void testInvalidWith() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        JsonNode root = mapper.createArrayNode();\n+        JsonNode root = MAPPER.createArrayNode();\n         try { // should not work for non-ObjectNode nodes:\n             root.with(\"prop\");\n             fail(\"Expected exception\");\n             verifyException(e, \"not of type ObjectNode\");\n         }\n         // also: should fail of we already have non-object property\n-        ObjectNode root2 = mapper.createObjectNode();\n+        ObjectNode root2 = MAPPER.createObjectNode();\n         root2.put(\"prop\", 13);\n         try { // should not work for non-ObjectNode nodes:\n             root2.with(\"prop\");\n \n     public void testInvalidWithArray() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        JsonNode root = mapper.createArrayNode();\n+        JsonNode root = MAPPER.createArrayNode();\n         try { // should not work for non-ObjectNode nodes:\n             root.withArray(\"prop\");\n             fail(\"Expected exception\");\n             verifyException(e, \"not of type ObjectNode\");\n         }\n         // also: should fail of we already have non-Array property\n-        ObjectNode root2 = mapper.createObjectNode();\n+        ObjectNode root2 = MAPPER.createObjectNode();\n         root2.put(\"prop\", 13);\n         try { // should not work for non-ObjectNode nodes:\n             root2.withArray(\"prop\");\n             verifyException(e, \"has value that is not\");\n         }\n     }\n+\n+    // [Issue#93]\n+    public void testSetAll() throws Exception\n+    {\n+        ObjectNode root = MAPPER.createObjectNode();\n+        assertEquals(0, root.size());\n+        HashMap<String,JsonNode> map = new HashMap<String,JsonNode>();\n+        map.put(\"a\", root.numberNode(1));\n+        root.setAll(map);\n+        assertEquals(1, root.size());\n+        assertTrue(root.has(\"a\"));\n+        assertFalse(root.has(\"b\"));\n+\n+        map.put(\"b\", root.numberNode(2));\n+        root.setAll(map);\n+        assertEquals(2, root.size());\n+        assertTrue(root.has(\"a\"));\n+        assertTrue(root.has(\"b\"));\n+        assertEquals(2, root.path(\"b\").intValue());\n+\n+        // Then with ObjectNodes...\n+        ObjectNode root2 = MAPPER.createObjectNode();\n+        root2.setAll(root);\n+        assertEquals(2, root.size());\n+        assertEquals(2, root2.size());\n+\n+        root2.setAll(root);\n+        assertEquals(2, root.size());\n+        assertEquals(2, root2.size());\n+\n+        ObjectNode root3 = MAPPER.createObjectNode();\n+        root3.put(\"a\", 2);\n+        root3.put(\"c\", 3);\n+        assertEquals(2, root3.path(\"a\").intValue());\n+        root3.setAll(root2);\n+        assertEquals(3, root3.size());\n+        assertEquals(1, root3.path(\"a\").intValue());\n+    }\n }", "timestamp": 1350757083, "metainfo": ""}