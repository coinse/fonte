{"sha": "bba2bad031b33f5fa7b14680917590c7c4b6004c", "log": "more cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java\n             return null;\n         }\n         return ((Deserializers) ob).findBeanDeserializer(type, config, beanDesc);\n-\n-        /*\n-        @SuppressWarnings(\"unchecked\")\n-        Provider<StdDeserializer<?>> prov = (Provider<StdDeserializer<?>>) ob;\n-        Collection<StdDeserializer<?>> entries = prov.provide();\n-\n-        // first, check for exact match (concrete)\n-        for (StdDeserializer<?> deser : entries) {\n-            if (rawType == deser.getValueClass()) {\n-                return deser;\n-            }\n-        }\n-        // if no match, check super-type match\n-        for (StdDeserializer<?> deser : entries) {\n-            if (deser.getValueClass().isAssignableFrom(rawType)) {\n-                return deser;\n-            }\n-        }\n-        // but maybe there's just no match to be found?\n-        return null;\n-        */\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n         _concrete.put(java.util.Date.class.getName(), dateSer);\n         // note: timestamps are very similar to java.util.Date, thus serialized as such\n         _concrete.put(java.sql.Timestamp.class.getName(), dateSer);\n-        _concrete.put(java.sql.Date.class.getName(), new SqlDateSerializer());\n-        _concrete.put(java.sql.Time.class.getName(), new SqlTimeSerializer());\n+        \n+        // leave some of less commonly used ones as lazy, no point in proactive construction\n+        _concreteLazy.put(java.sql.Date.class.getName(), SqlDateSerializer.class);\n+        _concreteLazy.put(java.sql.Time.class.getName(), SqlTimeSerializer.class);\n \n         // And then other standard non-structured JDK types\n-        for (Map.Entry<Class<?>,Object> en : new StdJdkSerializers().provide()) {\n+        for (Map.Entry<Class<?>,Object> en : StdJdkSerializers.all()) {\n             Object value = en.getValue();\n             if (value instanceof JsonSerializer<?>) {\n                 _concrete.put(en.getKey().getName(), (JsonSerializer<?>) value);\n         Class<?> raw = type.getRawClass();\n         String clsName = raw.getName();\n         JsonSerializer<?> ser = _concrete.get(clsName);\n-        if (ser != null) {\n-            return ser;\n-        }\n-        Class<? extends JsonSerializer<?>> serClass = _concreteLazy.get(clsName);\n-        if (serClass != null) {\n-            try {\n-                return serClass.newInstance();\n-            } catch (Exception e) {\n-                throw new IllegalStateException(\"Failed to instantiate standard serializer (of type \"+serClass.getName()+\"): \"\n-                        +e.getMessage(), e);\n-            }\n-        }\n-        return null;\n+        if (ser == null) {\n+            Class<? extends JsonSerializer<?>> serClass = _concreteLazy.get(clsName);\n+            if (serClass != null) {\n+                try {\n+                    return serClass.newInstance();\n+                } catch (Exception e) {\n+                    throw new IllegalStateException(\"Failed to instantiate standard serializer (of type \"+serClass.getName()+\"): \"\n+                            +e.getMessage(), e);\n+                }\n+            }\n+        }\n+        return ser;\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n      * Method called by {@link BasicSerializerFactory} to access\n      * all serializers this class provides.\n      */\n-    public Collection<Map.Entry<Class<?>, Object>> provide()\n+    public static Collection<Map.Entry<Class<?>, Object>> all()\n     {\n         HashMap<Class<?>,Object> sers = new HashMap<Class<?>,Object>();\n ", "timestamp": 1366159649, "metainfo": ""}