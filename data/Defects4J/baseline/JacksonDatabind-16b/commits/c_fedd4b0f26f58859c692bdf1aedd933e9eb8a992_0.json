{"sha": "fedd4b0f26f58859c692bdf1aedd933e9eb8a992", "log": "Changes to revert back inability to sub-class JsonNode subtypes", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/BigIntegerNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/BigIntegerNode.java\n /**\n  * Numeric node that contains simple 64-bit integer values.\n  */\n-public final class BigIntegerNode\n+public class BigIntegerNode\n     extends NumericNode\n {\n     private final static BigInteger MIN_INTEGER = BigInteger.valueOf(Integer.MIN_VALUE);\n     {\n         if (o == this) return true;\n         if (o == null) return false;\n-        if (o.getClass() != getClass()) { // final class, can do this\n+        if (!(o instanceof BigIntegerNode)) {\n             return false;\n         }\n         return ((BigIntegerNode) o)._value.equals(_value);\n--- a/src/main/java/com/fasterxml/jackson/databind/node/BinaryNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/BinaryNode.java\n  * Value node that contains Base64 encoded binary value, which will be\n  * output and stored as Json String value.\n  */\n-public final class BinaryNode\n+public class BinaryNode\n     extends ValueNode\n {\n     final static BinaryNode EMPTY_BINARY_NODE = new BinaryNode(new byte[0]);\n \n-    final byte[] _data;\n+    protected final byte[] _data;\n \n     public BinaryNode(byte[] data)\n     {\n     {\n         if (o == this) return true;\n         if (o == null) return false;\n-        if (o.getClass() != getClass()) { // final class, can do this\n+        if (!(o instanceof BinaryNode)) {\n             return false;\n         }\n         return Arrays.equals(((BinaryNode) o)._data, _data);\n--- a/src/main/java/com/fasterxml/jackson/databind/node/BooleanNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/BooleanNode.java\n /**\n  * This concrete value class is used to contain boolean (true / false)\n  * values. Only two instances are ever created, to minimize memory\n- * usage\n+ * usage.\n  */\n-public final class BooleanNode\n+public class BooleanNode\n     extends ValueNode\n {\n     // // Just need two instances...\n     @Override\n     public boolean equals(Object o)\n     {\n-    \t/* 11-Mar-2013, tatu: Apparently ClassLoaders can manage to load\n-    \t *    different instances, rendering identity comparisons broken.\n-    \t *    So let's use value instead.\n+        /* 11-Mar-2013, tatu: Apparently ClassLoaders can manage to load\n+         *    different instances, rendering identity comparisons broken.\n+         *    So let's use value instead.\n          */\n-    \tif (o == this) return true;\n-    \tif (o == null) return false;\n-    \tif (o.getClass() != getClass()) {\n-    \t\treturn false;\n-    \t}\n-    \treturn (_value == ((BooleanNode) o)._value);\n+        if (o == this) return true;\n+        if (o == null) return false;\n+        if (!(o instanceof BooleanNode)) {\n+            return false;\n+        }\n+        return (_value == ((BooleanNode) o)._value);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java\n  * Numeric node that contains values that do not fit in simple\n  * integer (int, long) or floating point (double) values.\n  */\n-public final class DecimalNode\n+public class DecimalNode\n     extends NumericNode\n {\n     public static final DecimalNode ZERO = new DecimalNode(BigDecimal.ZERO);\n     {\n         if (o == this) return true;\n         if (o == null) return false;\n-        if (o.getClass() != getClass()) { // final class, can do this\n+        if (!(o instanceof DecimalNode)) {\n             return false;\n         }\n         return ((DecimalNode) o)._value.equals(_value);", "timestamp": 1382679293, "metainfo": ""}