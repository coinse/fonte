{"sha": "c9215cd43e88def51cffd92df78441202f7bdeac", "log": "Implement [JACKSON-772]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n     public abstract JsonNode path(int index);\n \n     /**\n-     * Method that can be called on object nodes, to access a property\n-     * that has object value; or if no such property exists, to create and\n-     * return such object node.\n-     * If node method is called on is not Object node,\n-     * or if property exists and has value that is not object node,\n+     * Method that can be called on Object nodes, to access a property\n+     * that has Object value; or if no such property exists, to create,\n+     * add and return such Object node.\n+     * If the node method is called on is not Object node,\n+     * or if property exists and has value that is not Object node,\n      * {@link UnsupportedOperationException} is thrown\n      */\n     public JsonNode with(String propertyName) {\n                 +getClass().getName()+\"), can not call with() on it\");\n     }\n \n+    /**\n+     * Method that can be called on Object nodes, to access a property\n+     * that has <code>Array</code> value; or if no such property exists, to create,\n+     * add and return such Array node.\n+     * If the node method is called on is not Object node,\n+     * or if property exists and has value that is not Array node,\n+     * {@link UnsupportedOperationException} is thrown\n+     */\n+    public JsonNode withArray(String propertyName) {\n+        throw new UnsupportedOperationException(\"JsonNode not of type ObjectNode (but \"\n+                +getClass().getName()+\"), can not call withArray() on it\");\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Public API: converting to/from Streaming API\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n             }\n         }\n         ObjectNode result = objectNode();\n+        _children.put(propertyName, result);\n+        return result;\n+    }\n+\n+    @Override\n+    public ArrayNode withArray(String propertyName)\n+    {\n+        if (_children == null) {\n+            _children = new LinkedHashMap<String, JsonNode>();\n+        } else {\n+            JsonNode n = _children.get(propertyName);\n+            if (n != null) {\n+                if (n instanceof ArrayNode) {\n+                    return (ArrayNode) n;\n+                }\n+                throw new UnsupportedOperationException(\"Property '\"+propertyName\n+                        +\"' has value that is not of type ArrayNode (but \"\n+                        +n.getClass().getName()+\")\");\n+            }\n+        }\n+        ArrayNode result = arrayNode();\n         _children.put(propertyName, result);\n         return result;\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java\n         assertEquals(\"{\\\"prop\\\":{}}\", mapper.writeValueAsString(root));\n     }\n \n+    public void testValidWithArray() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode root = mapper.createObjectNode();\n+        assertEquals(\"{}\", mapper.writeValueAsString(root));\n+        JsonNode child = root.withArray(\"arr\");\n+        assertTrue(child instanceof ArrayNode);\n+        assertEquals(\"{\\\"arr\\\":[]}\", mapper.writeValueAsString(root));\n+    }\n+\n     public void testInvalidWith() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n             verifyException(e, \"has value that is not\");\n         }\n     }\n+\n+    public void testInvalidWithArray() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode root = mapper.createArrayNode();\n+        try { // should not work for non-ObjectNode nodes:\n+            root.withArray(\"prop\");\n+            fail(\"Expected exception\");\n+        } catch (UnsupportedOperationException e) {\n+            verifyException(e, \"not of type ObjectNode\");\n+        }\n+        // also: should fail of we already have non-Array property\n+        ObjectNode root2 = mapper.createObjectNode();\n+        root2.put(\"prop\", 13);\n+        try { // should not work for non-ObjectNode nodes:\n+            root2.withArray(\"prop\");\n+            fail(\"Expected exception\");\n+        } catch (UnsupportedOperationException e) {\n+            verifyException(e, \"has value that is not\");\n+        }\n+    }\n }", "timestamp": 1328245845, "metainfo": ""}