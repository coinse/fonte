{"sha": "89b08ced259685ae80b3ecf3e08d4c3ac1eb5f16", "log": "More documentation cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyFilter.java\n      * given bean property value: the usual choices are to either filter out (i.e.\n      * do nothing) or write using given {@link BeanPropertyWriter}, although filters\n      * can choose other to do something different altogether.\n+     *<p>\n+     * Typical implementation is something like:\n+     *<pre>\n+     * if (include(writer)) {\n+     *      writer.serializeAsField(pojo, jgen, prov);\n+     * }\n+     *</pre>\n      * \n-     * @param bean Bean of which property value to serialize\n+     * @param pojo Object that contains property value to serialize\n      * @param jgen Generator use for serializing value\n      * @param prov Provider that can be used for accessing dynamic aspects of serialization\n      *    processing\n      * @param writer Default bean property serializer to use\n      */\n-    public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov,\n+    public void serializeAsField(Object pojo, JsonGenerator jgen, SerializerProvider prov,\n             BeanPropertyWriter writer)\n         throws Exception;\n     \n      * }\n      *</pre>\n      * \n-     * @param writer Bean property serializer to use to create schema value\n+     * @param writer Bean property writer to use to create schema value\n      * @param propertiesNode Node which the given property would exist within\n      * @param provider Provider that can be used for accessing dynamic aspects of serialization\n      * \tprocessing\n      * \n      * @since 2.1\n+     * @deprecated Since 2.3: new code should use the alternative <code>depositSchemaProperty</code>\n+     *   method\n      */\n+    @Deprecated\n     public void depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode,\n             SerializerProvider provider)\n         throws JsonMappingException;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n /**\n  * Simple {@link BeanPropertyFilter} implementation that only uses property name\n  * to determine whether to serialize property as is, or to filter it out.\n+ *<p>\n+ * Use of this class as the base implementation for any custom\n+ * {@link BeanPropertyFilter} implementations is strongly encouraged,\n+ * because it can provide default implementation for any methods that may\n+ * be added in {@link BeanPropertyFilter} (as unfortunate as additions may be).\n  */\n public abstract class SimpleBeanPropertyFilter\n     implements BeanPropertyFilter // sub-classes must also implement java.io.Serializable\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n         // But whether unknown ids are ok just depends on filter provider; if we get null that's fine\n         return filter;\n     }\n-    \n+\n+    @Deprecated\n     @Override\n     public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n         throws JsonMappingException", "timestamp": 1381899925, "metainfo": ""}