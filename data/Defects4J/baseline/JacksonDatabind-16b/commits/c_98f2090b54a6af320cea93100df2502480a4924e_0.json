{"sha": "98f2090b54a6af320cea93100df2502480a4924e", "log": "minor test addition", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerForClass.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerForClass.java\n \n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n-\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n \n public class TestMixinSerForClass\n     extends BaseMapTest\n {\n-    /*\n-    /**********************************************************\n-    /* Helper bean classes\n-    /**********************************************************\n-     */\n-\n-    @JsonSerialize(include=JsonSerialize.Inclusion.ALWAYS)\n+    @JsonInclude(JsonInclude.Include.ALWAYS)\n     static class BaseClass\n     {\n         protected String _a, _b;\n         public String getC() { return _c; }\n     }\n \n-    @JsonSerialize(include=JsonSerialize.Inclusion.NON_DEFAULT)\n+    @JsonInclude(JsonInclude.Include.NON_DEFAULT)\n     static class LeafClass\n         extends BaseClass\n     {\n      * annotations it has can be virtually added to mask annotations\n      * of other classes\n      */\n-    @JsonSerialize(include=JsonSerialize.Inclusion.NON_NULL)\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n     interface MixIn { }\n \n     // test disabling of autodetect...\n     @JsonAutoDetect(getterVisibility=Visibility.NONE, fieldVisibility=Visibility.NONE)\n     interface MixInAutoDetect { }\n+\n+    // [databind#245]\n+    @JsonFilter(PortletRenderExecutionEventFilterMixIn.FILTER_NAME)\n+    private interface PortletRenderExecutionEventFilterMixIn {\n+        static final String FILTER_NAME = \"PortletRenderExecutionEventFilter\";\n+    }\n \n     /*\n     /**********************************************************\n         result = writeAndMap(mapper, bean);\n         assertEquals(1, result.size());\n         assertEquals(\"c2\", result.get(\"c\"));\n+\n+        // and related to [databind#245], retry with a copy\n+        ObjectMapper mapper2 = mapper.copy();\n+        result = writeAndMap(mapper2, bean);\n+        assertEquals(1, result.size());\n+        assertEquals(\"c2\", result.get(\"c\"));\n     }\n }", "timestamp": 1414555069, "metainfo": ""}