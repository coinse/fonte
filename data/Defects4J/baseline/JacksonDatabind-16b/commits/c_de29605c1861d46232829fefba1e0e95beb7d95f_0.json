{"sha": "de29605c1861d46232829fefba1e0e95beb7d95f", "log": "Unit test for issue 471 on GitHub.", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n import java.io.IOException;\n import java.util.*;\n \n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.BeanDeserializer;\n             };\n         }\n     }\n-    \n+\n+    static class IssueGH471Bean {\n+\n+        private final Object constructorInjected;\n+        private final String constructorValue;\n+\n+        @JacksonInject(\"field_injected\") private Object fieldInjected;\n+        @JsonProperty(\"field_value\")     private String fieldValue;\n+\n+        private Object methodInjected;\n+        private String methodValue;\n+\n+        @JsonCreator\n+        private IssueGH471Bean(@JacksonInject(\"constructor_injected\") Object constructorInjected,\n+                               @JsonProperty(\"constructor_value\") String constructorValue) {\n+            this.constructorInjected = constructorInjected;\n+            this.constructorValue = constructorValue;\n+        }\n+\n+        @JacksonInject(\"method_injected\")\n+        private void setMethodInjected(Object methodInjected) {\n+            this.methodInjected = methodInjected;\n+        }\n+\n+        @JsonProperty(\"method_value\")\n+        public void setMethodValue(String methodValue) {\n+            this.methodValue = methodValue;\n+        }\n+\n+    }\n+\n     /*\n     /********************************************************\n     /* Unit tests\n         assertEquals(1, result.size());\n         assertEquals(\"foo\", result.entrySet().iterator().next().getKey());\n     }\n+\n+    public void testIssueGH471() throws Exception\n+    {\n+        final Object constructorInjected = \"constructorInjected\";\n+        final Object methodInjected = \"methodInjected\";\n+        final Object fieldInjected = \"fieldInjected\";\n+\n+        ObjectMapper mapper = new ObjectMapper()\n+                        .setInjectableValues(new InjectableValues.Std()\n+                                .addValue(\"constructor_injected\", constructorInjected)\n+                                .addValue(\"method_injected\", methodInjected)\n+                                .addValue(\"field_injected\", fieldInjected));\n+\n+        IssueGH471Bean bean = mapper.readValue(\"{\\\"constructor_value\\\":\\\"constructor\\\",\\\"method_value\\\":\\\"method\\\",\\\"field_value\\\":\\\"field\\\"}\", IssueGH471Bean.class);\n+\n+        /* Assert *SAME* instance */\n+        assertSame(constructorInjected, bean.constructorInjected);\n+        assertSame(methodInjected, bean.methodInjected);\n+        assertSame(fieldInjected, bean.fieldInjected);\n+\n+        /* Check that basic properties still work (better safe than sorry) */\n+        assertEquals(\"constructor\", bean.constructorValue);\n+        assertEquals(\"method\", bean.methodValue);\n+        assertEquals(\"field\", bean.fieldValue);\n+    }\n }", "timestamp": 1401158618, "metainfo": ""}