{"sha": "70c2de957f517f569dba98ceaa5aecd9e56a11a9", "log": "serialization...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java\n  * {@link SerializerFactory} implementations.\n  */\n public final class SerializerFactoryConfig\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n     /**\n      * Constant for empty <code>Serializers</code> array (which by definition\n      * is stateless and reusable)\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java\n  * @author tatu\n  */\n public class OptionalHandlerFactory\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = -7103336512296456640L;\n+\n     /* 1.6.1+ To make 2 main \"optional\" handler groups (javax.xml.stream)\n      * more dynamic, we better only figure out handlers completely dynamically, if and\n      * when they are needed. To do this we need to assume package prefixes.\n      */\n-\n     private final static String PACKAGE_PREFIX_JAVAX_XML = \"javax.xml.\";\n \n     private final static String SERIALIZERS_FOR_JAVAX_XML = \"com.fasterxml.jackson.databind.ext.CoreXMLSerializers\";\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/NamedType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/NamedType.java\n  * @author tatu\n  */\n public final class NamedType\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     protected final Class<?> _class;\n     protected final int _hashCode;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java\n  * concrete implementations; however, only works with abstract types (since\n  * this is only called for abstract types)\n  */\n-public class SimpleAbstractTypeResolver extends AbstractTypeResolver\n+public class SimpleAbstractTypeResolver\n+    extends AbstractTypeResolver\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 8635483102371490919L;\n+\n     /**\n      * Mappings from super types to subtypes\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n  * Unlike {@link SimpleSerializers}, this class does not currently support generic mappings;\n  * all mappings must be to exact declared deserialization type.\n  */\n-public class SimpleDeserializers implements Deserializers\n+public class SimpleDeserializers\n+   implements Deserializers, java.io.Serializable\n {\n+    private static final long serialVersionUID = -3006673354353448880L;\n+\n     protected HashMap<ClassKey,JsonDeserializer<?>> _classMappings = null;\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java\n  * Unlike {@link SimpleSerializers}, this class does not currently support generic mappings;\n  * all mappings must be to exact declared deserialization type.\n  */\n-public class SimpleKeyDeserializers implements KeyDeserializers\n+public class SimpleKeyDeserializers\n+    implements KeyDeserializers, java.io.Serializable // since 2.1\n {\n+    private static final long serialVersionUID = -6786398737835438187L;\n+\n     protected HashMap<ClassKey,KeyDeserializer> _classMappings = null;\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java\n  * of serializers and deserializers, and bean serializer\n  * and deserializer modifiers.\n  */\n-public class SimpleModule extends Module\n+public class SimpleModule\n+    extends Module\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 3132264350026957446L;\n+\n     protected final String _name;\n     protected final Version _version;\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java\n  * is found first. As an example, handler for {@link CharSequence} would also be used\n  * serializing {@link StringBuilder} instances, unless a direct mapping was found.\n  */\n-public class SimpleSerializers extends Serializers.Base\n+public class SimpleSerializers\n+    extends Serializers.Base\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 8531646511998456779L;\n+\n     /**\n      * Class-based mappings that are used both for exact and\n      * sub-class matches.\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleValueInstantiators.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleValueInstantiators.java\n \n public class SimpleValueInstantiators\n     extends ValueInstantiators.Base\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = -8929386427526115130L;\n+\n     /**\n      * Mappings from raw (type-erased, i.e. non-generic) types\n      * to matching {@link ValueInstantiator} instances.\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n  */\n public abstract class BasicSerializerFactory\n     extends SerializerFactory\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = -1416617628045738132L;\n+\n     /*\n     /**********************************************************\n     /* Configuration, lookup tables/maps\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n public class BeanSerializerFactory\n     extends BasicSerializerFactory\n {\n+    private static final long serialVersionUID = -5348294866902611332L;\n+\n     /**\n      * Like {@link BasicSerializerFactory}, this factory is stateless, and\n      * thus a single shared global (== singleton) instance can be used\n      * without thread-safety issues.\n      */\n     public final static BeanSerializerFactory instance = new BeanSerializerFactory(null);\n-\n \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n  * implementations must sub-class this class: {@link ObjectMapper}\n  * requires this type, not basic provider type.\n  */\n-public abstract class DefaultSerializerProvider extends SerializerProvider\n+public abstract class DefaultSerializerProvider\n+    extends SerializerProvider\n+    implements java.io.Serializable // since 2.1; only because ObjectWriter needs it\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /*\n     /**********************************************************\n     /* State, for non-blueprint instances: Object Id handling\n      * Per-serialization map Object Ids that have seen so far, iff\n      * Object Id handling is enabled.\n      */\n-    protected IdentityHashMap<Object, WritableObjectId> _seenObjectIds;\n-    \n-    protected ArrayList<ObjectIdGenerator<?>> _objectIdGenerators;\n+    protected transient IdentityHashMap<Object, WritableObjectId> _seenObjectIds;\n+    \n+    protected transient ArrayList<ObjectIdGenerator<?>> _objectIdGenerators;\n     \n     /*\n     /**********************************************************\n      */\n     public final static class Impl extends DefaultSerializerProvider\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         public Impl() { super(); }\n \n         protected Impl(SerializerProvider src,\n--- a/src/main/java/com/fasterxml/jackson/databind/type/ClassKey.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/ClassKey.java\n  * know what it is doing, if changing field values.\n  */\n public final class ClassKey\n-    implements Comparable<ClassKey>\n+    implements Comparable<ClassKey>,\n+        java.io.Serializable // since 2.1\n {\n+    private static final long serialVersionUID = 1L;\n+\n     private String _className;\n \n     private Class<?> _class;\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java\n         }\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     static class MyModule extends SimpleModule\n     {\n         public MyModule(Class<?> cls, ValueInstantiator inst)\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n \n+@SuppressWarnings(\"serial\")\n public class TestBeanDeserializer extends BaseMapTest\n {\n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java\n         }\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     protected static class CustomJsonSerializerFactory extends BeanSerializerFactory\n     {\n         public CustomJsonSerializerFactory() { super(null); }\n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java\n import com.fasterxml.jackson.databind.ser.std.StdScalarSerializer;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n+@SuppressWarnings(\"serial\")\n public class TestSimpleModule extends BaseMapTest\n {\n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers.java\n import com.fasterxml.jackson.databind.ser.Serializers;\n import com.fasterxml.jackson.databind.type.*;\n \n+@SuppressWarnings(\"serial\")\n public class TestTypeModifiers extends BaseMapTest\n {\n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n  * Unit tests for verifying that it is possible to configure\n  * construction of {@link BeanSerializer} instances.\n  */\n+@SuppressWarnings(\"serial\")\n public class TestBeanSerializer extends BaseMapTest\n {\n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestNullSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestNullSerialization.java\n         public String type = null;\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     static class MyNullProvider extends DefaultSerializerProvider\n     {\n         public MyNullProvider() { super(); }", "timestamp": 1349479322, "metainfo": ""}