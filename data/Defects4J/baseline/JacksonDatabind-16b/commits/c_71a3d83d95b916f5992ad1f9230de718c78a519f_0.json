{"sha": "71a3d83d95b916f5992ad1f9230de718c78a519f", "log": "javadoc improvement", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n         return EmptyIterator.instance();\n     }\n \n+    /**\n+     * Method for locating node specified by given JSON pointer instances.\n+     * Method will never return null; if no matching node exists, \n+     *   will return a node for which {@link #isMissingNode()} returns true.\n+     * \n+     * @return Node that matches given JSON Pointer: if no match exists,\n+     *   will return a node for which {@link #isMissingNode()} returns true.\n+     * \n+     * @since 2.3\n+     */\n     @Override\n     public final JsonNode at(JsonPointer ptr)\n     {\n         return n.at(ptr.tail());\n     }\n \n+    /**\n+     * Convenience method that is functionally equivalent to:\n+     *<pre>\n+     *   return at(JsonPointer.valueOf(jsonPointerExpression));\n+     *</pre>\n+     *<p>\n+     * Note that if the same expression is used often, it is preferable to construct\n+     * {@link JsonPointer} instance once and reuse it: this method will not perform\n+     * any caching of compiled expressions.\n+     * \n+     * @param jsonPtrExpr Expression to compile as a {@link JsonPointer}\n+     *   instance\n+     * \n+     * @return Node that matches given JSON Pointer: if no match exists,\n+     *   will return a node for which {@link TreeNode#isMissingNode()} returns true.\n+     * \n+     * @since 2.3\n+     */\n     @Override\n     public final JsonNode at(String jsonPtrExpr) {\n         return at(JsonPointer.compile(jsonPtrExpr));", "timestamp": 1384666765, "metainfo": ""}