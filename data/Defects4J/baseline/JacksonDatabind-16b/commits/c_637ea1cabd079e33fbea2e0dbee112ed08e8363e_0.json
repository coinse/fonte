{"sha": "637ea1cabd079e33fbea2e0dbee112ed08e8363e", "log": "more work on #124, support MapSerializer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n     /**********************************************************\n      */\n \n-//  @Override\n+    @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n         if (ser == null) {\n             ser = _valueSerializer;\n         }\n+        // #124: May have a content converter\n+        ser = findConvertingContentSerializer(provider, property, ser);\n         if (ser == null) {\n             // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,\n             //   we can consider it a static case as well.\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n         if (ser == null) {\n             ser = _elementSerializer;\n         }\n-        // 18-Feb-2013, tatu: May have a content converter:\n+        // #124: May have a content converter\n         ser = findConvertingContentSerializer(provider, property, ser);\n         if (ser == null) {\n             // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,\n--- a/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingSerializer.java\n package com.fasterxml.jackson.databind.convert;\n \n-import java.util.Arrays;\n-import java.util.List;\n+import java.util.*;\n \n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.util.Converter;\n         }\n     }\n     \n+    static class PointListWrapperMap {\n+        @JsonSerialize(contentConverter=PointConverter.class)\n+        public Map<String,Point> values;\n+\n+        public PointListWrapperMap(String key, int x, int y) {\n+            values = new HashMap<String,Point>();\n+            values.put(key, new Point(x, y));\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Test methods\n         assertEquals(\"{\\\"value\\\":[3,4]}\", json);\n     }\n \n-    public void testPropertyAnnotationForArrays() throws Exception\n-    {\n+    public void testPropertyAnnotationForArrays() throws Exception {\n         String json = objectWriter().writeValueAsString(new PointListWrapperArray(4, 5));\n         assertEquals(\"{\\\"values\\\":[[4,5],[5,4]]}\", json);\n     }\n \n-    public void testPropertyAnnotationForLists() throws Exception\n-    {\n+    public void testPropertyAnnotationForLists() throws Exception {\n         String json = objectWriter().writeValueAsString(new PointListWrapperList(7, 8));\n-System.err.println(\"JSON -> \"+json);\n-        \n         assertEquals(\"{\\\"values\\\":[[7,8],[8,7]]}\", json);\n     }\n+\n+    public void testPropertyAnnotationForMaps() throws Exception {\n+        String json = objectWriter().writeValueAsString(new PointListWrapperMap(\"a\", 1, 2));\n+        assertEquals(\"{\\\"values\\\":{\\\"a\\\":[1,2]}}\", json);\n+    }\n }", "timestamp": 1361251772, "metainfo": ""}