{"sha": "17390f08886a4fb01e78e9f179cca1eba3582cac", "log": "Add a unit test related to #430 to verify that use of @JsonProperty(\"\") can be used to specify \"no-name\" and force use of delegating construction", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n         if (instantiator.getIncompleteParameter() != null) {\n             final AnnotatedParameter nonAnnotatedParam = instantiator.getIncompleteParameter();\n             final AnnotatedWithParams ctor = nonAnnotatedParam.getOwner();\n-            throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()+\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n+            throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()+\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n         }\n \n         return instantiator;\n                     creators.addDelegatingCreator(factory, properties);\n                 } else { // otherwise, epic fail\n                     throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()\n-                            +\" of factory method \"+factory+\" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n+                            +\" of factory method \"+factory+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n                 }\n             }\n         }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/SingleArgCreatorTest.java\n+package com.fasterxml.jackson.databind.creators;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class SingleArgCreatorTest extends BaseMapTest\n+{\n+    // [Issue#430]: single arg BUT named; should not delegate\n+\n+    static class SingleNamedStringBean {\n+\n+        final String _ss;\n+\n+        @JsonCreator\n+        public SingleNamedStringBean(@JsonProperty(\"\") String ss){\n+            this._ss = ss;\n+        }\n+\n+        public String getSs() { return _ss; }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+    \n+    private final ObjectMapper MAPPER = objectMapper();\n+\n+    public void testNamedSingleArg() throws Exception\n+    {\n+        SingleNamedStringBean bean = MAPPER.readValue(quote(\"foobar\"),\n+                SingleNamedStringBean.class);\n+        assertEquals(\"foobar\", bean._ss);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators2.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators2.java\n         public Test431Container(@JsonProperty(\"items\") final List<Item431> i) {\n             items = i;\n         }\n-}    \n+    }    \n \n     @JsonIgnoreProperties(ignoreUnknown = true)\n     protected static class Item431 {\n     \n     /*\n     /**********************************************************\n-    /* Unit tests\n+    /* Test methods\n     /**********************************************************\n      */\n \n-    private final ObjectMapper MAPPER = new ObjectMapper();\n+    private final ObjectMapper MAPPER = objectMapper();\n     \n     // for [JACKSON-547]\n     public void testExceptionFromConstructor() throws Exception", "timestamp": 1396666319, "metainfo": ""}