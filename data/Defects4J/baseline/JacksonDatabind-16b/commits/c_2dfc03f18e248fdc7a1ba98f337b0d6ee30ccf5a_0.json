{"sha": "2dfc03f18e248fdc7a1ba98f337b0d6ee30ccf5a", "log": "More work on contextual serializers...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n         Class<?> elementRaw = type.getContentType().getRawClass();\n         if (isIndexedList(raw)) {\n             if (elementRaw == String.class) {\n-                return new IndexedStringListSerializer(property);\n+                return new IndexedStringListSerializer();\n             }\n             return StdContainerSerializers.indexedListSerializer(type.getContentType(), staticTyping,\n                     elementTypeSerializer, property, elementValueSerializer);\n             enums = EnumValues.construct(enumClass, config.getAnnotationIntrospector());\n         }\n         return new EnumMapSerializer(type.getContentType(), staticTyping, enums,\n-            elementTypeSerializer, property, elementValueSerializer);\n+            elementTypeSerializer, elementValueSerializer);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n         super(t, dummy);\n     }\n \n+    protected ContainerSerializer(ContainerSerializer<?> src) {\n+        super(src._handledType, false);\n+    }\n+    \n     /**\n      * Factory(-like) method that can be used to construct a new container\n      * serializer that uses specified {@link TypeSerializer} for decorating\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java\n import com.fasterxml.jackson.databind.ser.impl.FailingSerializer;\n import com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;\n import com.fasterxml.jackson.databind.ser.impl.SerializerCache;\n+import com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer;\n import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer;\n import com.fasterxml.jackson.databind.ser.std.NullSerializer;\n import com.fasterxml.jackson.databind.ser.std.StdKeySerializers;\n         TypeSerializer typeSer = _serializerFactory.createTypeSerializer(_config,\n                 _config.constructType(valueType), property);\n         if (typeSer != null) {\n-            ser = new WrappedSerializer(typeSer, ser);\n+            ser = new TypeWrappedSerializer(typeSer, ser);\n         }\n         if (cache) {\n             _serializerCache.addTypedSerializer(valueType, ser);\n         ser = findValueSerializer(valueType, property);\n         TypeSerializer typeSer = _serializerFactory.createTypeSerializer(_config, valueType, property);\n         if (typeSer != null) {\n-            ser = new WrappedSerializer(typeSer, ser);\n+            ser = new TypeWrappedSerializer(typeSer, ser);\n         }\n         if (cache) {\n             _serializerCache.addTypedSerializer(valueType, ser);\n         }\n         \n     }\n-    \n-    /**\n-     * Simple serializer that will call configured type serializer, passing\n-     * in configured data serializer, and exposing it all as a simple\n-     * serializer.\n-     */\n-    private final static class WrappedSerializer\n-        extends JsonSerializer<Object>\n-    {\n-        final protected TypeSerializer _typeSerializer;\n-        final protected JsonSerializer<Object> _serializer;\n-\n-        public WrappedSerializer(TypeSerializer typeSer, JsonSerializer<Object> ser)\n-        {\n-            super();\n-            _typeSerializer = typeSer;\n-            _serializer = ser;\n-        }\n-\n-        @Override\n-        public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonProcessingException\n-        {\n-            _serializer.serializeWithType(value, jgen, provider, _typeSerializer);\n-        }\n-\n-        @Override\n-        public void serializeWithType(Object value, JsonGenerator jgen, SerializerProvider provider,\n-                TypeSerializer typeSer)\n-            throws IOException, JsonProcessingException\n-        {\n-            /* Is this an erroneous call? For now, let's assume it is not, and\n-             * that type serializer is just overridden if so\n-             */\n-            _serializer.serializeWithType(value, jgen, provider, typeSer);\n-        }\n-        \n-        @Override\n-        public Class<Object> handledType() { return Object.class; }\n-    }\n }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/TypeWrappedSerializer.java\n+package com.fasterxml.jackson.databind.ser.impl;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+\n+/**\n+ * Simple serializer that will call configured type serializer, passing\n+ * in configured data serializer, and exposing it all as a simple\n+ * serializer.\n+ */\n+public final class TypeWrappedSerializer\n+    extends JsonSerializer<Object>\n+{\n+    final protected TypeSerializer _typeSerializer;\n+    final protected JsonSerializer<Object> _serializer;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public TypeWrappedSerializer(TypeSerializer typeSer, JsonSerializer<?> ser)\n+    {\n+        super();\n+        _typeSerializer = typeSer;\n+        _serializer = (JsonSerializer<Object>) ser;\n+    }\n+\n+    @Override\n+    public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider)\n+        throws IOException, JsonProcessingException\n+    {\n+        _serializer.serializeWithType(value, jgen, provider, _typeSerializer);\n+    }\n+\n+    @Override\n+    public void serializeWithType(Object value, JsonGenerator jgen, SerializerProvider provider,\n+            TypeSerializer typeSer)\n+        throws IOException, JsonProcessingException\n+    {\n+        /* Is this an erroneous call? For now, let's assume it is not, and\n+         * that type serializer is just overridden if so\n+         */\n+        _serializer.serializeWithType(value, jgen, provider, typeSer);\n+    }\n+    \n+    @Override\n+    public Class<Object> handledType() { return Object.class; }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n-import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n+import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n import com.fasterxml.jackson.databind.util.EnumValues;\n \n /**\n @JacksonStdImpl\n public class EnumMapSerializer\n     extends ContainerSerializer<EnumMap<? extends Enum<?>, ?>>\n-    implements ResolvableSerializer\n+    implements ContextualSerializer\n {\n     protected final boolean _staticTyping;\n \n     /**\n+     * Propery for which this serializer is being used, if any;\n+     * null for root values.\n+     */\n+    protected final BeanProperty _property;\n+    \n+    /**\n      * If we know enumeration used as key, this will contain\n      * value set to use for serialization\n      */\n     protected final EnumValues _keyEnums;\n \n     protected final JavaType _valueType;\n-\n-    /**\n-     * Property being serialized with this instance\n-     */\n-    protected final BeanProperty _property;\n     \n     /**\n      * Value serializer to use, if it can be statically determined\n      */\n-    protected JsonSerializer<Object> _valueSerializer;\n+    protected final JsonSerializer<Object> _valueSerializer;\n \n     /**\n      * Type serializer used for values, if any.\n      */\n     protected final TypeSerializer _valueTypeSerializer;\n \n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+    \n     public EnumMapSerializer(JavaType valueType, boolean staticTyping, EnumValues keyEnums,\n-            TypeSerializer vts, BeanProperty property, JsonSerializer<Object> valueSerializer)\n+            TypeSerializer vts, JsonSerializer<Object> valueSerializer)\n     {\n         super(EnumMap.class, false);\n+        _property = null; // not yet known\n         _staticTyping = staticTyping || (valueType != null && valueType.isFinal());\n         _valueType = valueType;\n         _keyEnums = keyEnums;\n         _valueTypeSerializer = vts;\n+        _valueSerializer = valueSerializer;\n+    }\n+\n+    /**\n+     * Constructor called when a contextual instance is created.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public EnumMapSerializer(EnumMapSerializer src, BeanProperty property,\n+            JsonSerializer<?> ser)\n+    {\n+        super(src);\n         _property = property;\n-        _valueSerializer = valueSerializer;\n-    }\n-\n-    @Override\n-    public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts)\n-    {\n-        return new EnumMapSerializer(_valueType, _staticTyping, _keyEnums, vts,  _property, _valueSerializer);\n-    }\n-\n+        _staticTyping = src._staticTyping;\n+        _valueType = src._valueType;\n+        _keyEnums = src._keyEnums;\n+        _valueTypeSerializer = src._valueTypeSerializer;\n+        _valueSerializer = (JsonSerializer<Object>) ser;\n+    }\n+    \n+    @Override\n+    public EnumMapSerializer _withValueTypeSerializer(TypeSerializer vts) {\n+        return new EnumMapSerializer(_valueType, _staticTyping, _keyEnums, vts,  _valueSerializer);\n+    }\n+\n+    public EnumMapSerializer withValueSerializer(BeanProperty prop, JsonSerializer<?> ser) {\n+        if (_property == prop && ser == _valueSerializer) {\n+            return this;\n+        }\n+        return new EnumMapSerializer(this, prop, ser);\n+    }\n+    \n+    @Override\n+    public JsonSerializer<?> createContextual(SerializerProvider provider,\n+            BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        if (_valueSerializer == null) {\n+            if (_staticTyping) {\n+                return withValueSerializer(property, provider.findValueSerializer(_valueType, property));\n+            }\n+        } else if (_valueSerializer instanceof ContextualSerializer) {\n+            return withValueSerializer(property, ((ContextualSerializer) _valueSerializer)\n+                    .createContextual(provider, property));\n+        }\n+        return this;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Accessors\n+    /**********************************************************\n+     */\n+    \n     @Override\n     public JavaType getContentType() {\n         return _valueType;\n     public boolean isEmpty(EnumMap<? extends Enum<?>,?> value) {\n         return (value == null) || value.isEmpty();\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Serialization\n+    /**********************************************************\n+     */\n     \n     @Override\n     public void serialize(EnumMap<? extends Enum<?>,?> value, JsonGenerator jgen, SerializerProvider provider)\n             }\n         }\n     }\n-\n-    @Override\n-    public void resolve(SerializerProvider provider)\n-        throws JsonMappingException\n-    {\n-        if (_staticTyping && _valueSerializer == null) {\n-            _valueSerializer = provider.findValueSerializer(_valueType, _property);\n-        }\n-    }\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/IndexedStringListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/IndexedStringListSerializer.java\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n-import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n-import com.fasterxml.jackson.databind.util.ClassUtil;\n+import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n \n /**\n  * Efficient implement for serializing {@link List}s that contains Strings and are random-accessible.\n @JacksonStdImpl\n public final class IndexedStringListSerializer\n     extends StaticListSerializerBase<List<String>>\n-    implements ResolvableSerializer\n+    implements ContextualSerializer\n {\n-    protected JsonSerializer<String> _serializer;\n+    protected final JsonSerializer<String> _serializer;\n+\n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n     \n-    public IndexedStringListSerializer(BeanProperty property) {\n-        super(List.class, property);\n+    public IndexedStringListSerializer() {\n+        this(null);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public IndexedStringListSerializer(JsonSerializer<?> ser) {\n+        super(List.class, null);\n+        _serializer = (JsonSerializer<String>) ser;\n+        \n     }\n \n     @Override protected JsonNode contentSchema() {\n         return createSchemaNode(\"string\", true);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n+    /*\n+    /**********************************************************\n+    /* Post-processing\n+    /**********************************************************\n+     */\n+    \n     @Override\n-    public void resolve(SerializerProvider provider) throws JsonMappingException\n+    public JsonSerializer<?> createContextual(SerializerProvider provider,\n+            BeanProperty property)\n+        throws JsonMappingException\n     {\n-        JsonSerializer<?> ser = provider.findValueSerializer(String.class, _property);\n-        if (!ClassUtil.isJacksonStdImpl(ser)) {\n-            _serializer = (JsonSerializer<String>) ser;\n+        JsonSerializer<?> ser = _serializer;\n+        if (ser == null) {\n+            ser = provider.findValueSerializer(String.class, _property);\n+        } else if (ser instanceof ContextualSerializer) {\n+            ser = ((ContextualSerializer) ser).createContextual(provider, property);\n         }\n+        // Optimization: default serializer just writes String, so we can avoid a call:\n+        if (isDefaultSerializer(ser)) {\n+            ser = null;\n+        }\n+        // note: will never have TypeSerializer, because Strings are \"natural\" type\n+        if (ser == _serializer) {\n+            return this;\n+        }\n+        return new IndexedStringListSerializer(ser);\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Actual serialization\n+    /**********************************************************\n+     */\n \n     @Override\n     public void serialize(List<String> value, JsonGenerator jgen, SerializerProvider provider)\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StringCollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StringCollectionSerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n \n             BeanProperty property)\n         throws JsonMappingException\n     {\n-        JsonSerializer<?> ser = provider.findValueSerializer(String.class, _property);\n+        JsonSerializer<?> ser = _serializer;\n+        if (ser == null) {\n+            ser = provider.findValueSerializer(String.class, _property);\n+        } else if (ser instanceof ContextualSerializer) {\n+            ser = ((ContextualSerializer) ser).createContextual(provider, property);\n+        }\n+        // Optimization: default serializer just writes String, so we can avoid a call:\n         if (isDefaultSerializer(ser)) {\n             ser = null;\n         }\n+        // note: will never have TypeSerializer, because Strings are \"natural\" type\n         if (ser == _serializer) {\n             return this;\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualSerialization.java\n                 throws JsonMappingException\n         {\n             String prefix = \"UNKNOWN\";\n-            Prefix ann = property.getAnnotation(Prefix.class);\n-            if (ann == null) {\n-                ann = property.getContextAnnotation(Prefix.class);\n+            Prefix ann = null;\n+            if (property != null) {\n+                ann = property.getAnnotation(Prefix.class);\n+                if (ann == null) {\n+                    ann = property.getContextAnnotation(Prefix.class);\n+                }\n             }\n             if (ann != null) {\n                 prefix = ann.value();", "timestamp": 1328057841, "metainfo": ""}