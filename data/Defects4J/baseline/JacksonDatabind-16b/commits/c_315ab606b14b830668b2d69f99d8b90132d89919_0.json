{"sha": "315ab606b14b830668b2d69f99d8b90132d89919", "log": "almost completed #120, only missing key serializer post-processing", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n             }\n             // 03-Aug-2012, tatu: As per [Issue#40], may require POJO serializer...\n             ser =  buildContainerSerializer(prov, type, beanDesc, staticTyping);\n+            // Will return right away, since called method does post-processing:\n             if (ser != null) {\n                 return (JsonSerializer<Object>) ser;\n             }\n             for (Serializers serializers : customSerializers()) {\n                 ser = serializers.findSerializer(config, type, beanDesc);\n                 if (ser != null) {\n-                    return (JsonSerializer<Object>) ser;\n+                    break;\n                 }\n             }\n         }\n          * indicate specific handling (JsonSerializable), or main types that have\n          * precedence over container types\n          */\n-        ser = findSerializerByLookup(type, config, beanDesc, staticTyping);\n         if (ser == null) {\n-            ser = findSerializerByPrimaryType(prov, type, beanDesc, staticTyping);\n+            ser = findSerializerByLookup(type, config, beanDesc, staticTyping);\n             if (ser == null) {\n-                /* And this is where this class comes in: if type is not a\n-                 * known \"primary JDK type\", perhaps it's a bean? We can still\n-                 * get a null, if we can't find a single suitable bean property.\n-                 */\n-                ser = findBeanSerializer(prov, type, beanDesc);\n-                /* Finally: maybe we can still deal with it as an\n-                 * implementation of some basic JDK interface?\n-                 */\n+                ser = findSerializerByPrimaryType(prov, type, beanDesc, staticTyping);\n                 if (ser == null) {\n-                    ser = findSerializerByAddonType(config, type, beanDesc, staticTyping);\n+                    /* And this is where this class comes in: if type is not a\n+                     * known \"primary JDK type\", perhaps it's a bean? We can still\n+                     * get a null, if we can't find a single suitable bean property.\n+                     */\n+                    ser = findBeanSerializer(prov, type, beanDesc);\n+                    /* Finally: maybe we can still deal with it as an\n+                     * implementation of some basic JDK interface?\n+                     */\n+                    if (ser == null) {\n+                        ser = findSerializerByAddonType(config, type, beanDesc, staticTyping);\n+                    }\n+                }\n+            }\n+        }\n+        if (ser != null) {\n+            // [Issue#120]: Allow post-processing\n+            if (_factoryConfig.hasSerializerModifiers()) {\n+                for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+                    ser = mod.modifySerializer(config, beanDesc, ser);\n                 }\n             }\n         }\n                 return null;\n             }\n         }\n-        JsonSerializer<Object> serializer = constructBeanSerializer(prov, beanDesc);\n-        // [JACKSON-440] Need to allow overriding actual serializer, as well...\n-        if (_factoryConfig.hasSerializerModifiers()) {\n-            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-                serializer = (JsonSerializer<Object>)mod.modifySerializer(prov.getConfig(),\n-                        beanDesc, serializer);\n-            }\n-        }\n-        return serializer;\n+        return constructBeanSerializer(prov, beanDesc);\n     }\n \n     /**", "timestamp": 1354341248, "metainfo": ""}