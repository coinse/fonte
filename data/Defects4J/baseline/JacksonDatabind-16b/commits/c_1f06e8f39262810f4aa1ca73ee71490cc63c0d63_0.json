{"sha": "1f06e8f39262810f4aa1ca73ee71490cc63c0d63", "log": "Improvement for #523, wrt EnumMapDeserializer, but only for 2.5 (due to minor refactorings).", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java\n package com.fasterxml.jackson.databind.deser.std;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n \n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n \n /**\n      * Accesor for deserializer use for deserializing content values.\n      */\n     public abstract JsonDeserializer<Object> getContentDeserializer();\n+\n+    /*\n+    /**********************************************************\n+    /* Shared methods for sub-classes\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Helper method called by various Map(-like) deserializers.\n+     */\n+    protected void wrapAndThrow(Throwable t, Object ref, String key) throws IOException\n+    {\n+        // to handle StackOverflow:\n+        while (t instanceof InvocationTargetException && t.getCause() != null) {\n+            t = t.getCause();\n+        }\n+        // Errors and \"plain\" IOExceptions to be passed as is\n+        if (t instanceof Error) {\n+            throw (Error) t;\n+        }\n+        // ... except for mapping exceptions\n+        if (t instanceof IOException && !(t instanceof JsonMappingException)) {\n+            throw (IOException) t;\n+        }\n+        throw JsonMappingException.wrapWithPath(t, ref, key);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n-import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n /**\n  * <p>\n  * Note: casting within this class is all messed up -- just could not figure out a way\n  * to properly deal with recursive definition of \"EnumMap<K extends Enum<K>, V>\n- * \n- * @author tsaloranta\n  */\n @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) \n public class EnumMapDeserializer\n-    extends StdDeserializer<EnumMap<?,?>>\n+    extends ContainerDeserializerBase<EnumMap<?,?>>\n     implements ContextualDeserializer\n {\n     private static final long serialVersionUID = 4564890642370311174L;\n \n     public EnumMapDeserializer(JavaType mapType, JsonDeserializer<?> keyDeserializer, JsonDeserializer<?> valueDeser, TypeDeserializer valueTypeDeser)\n     {\n-        super(EnumMap.class);\n+        super(mapType);\n         _mapType = mapType;\n         _enumClass = mapType.getKeyType().getRawClass();\n         _keyDeserializer = (JsonDeserializer<Enum<?>>) keyDeserializer;\n      */\n     @Override\n     public boolean isCachable() { return true; }\n-    \n+\n+    /*\n+    /**********************************************************\n+    /* ContainerDeserializerBase API\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public JavaType getContentType() {\n+        return _mapType.getContentType();\n+    }\n+\n+    @Override\n+    public JsonDeserializer<Object> getContentDeserializer() {\n+        return _valueDeserializer;\n+    }\n+\n     /*\n     /**********************************************************\n     /* Actual deserialization\n         final TypeDeserializer typeDeser = _valueTypeDeserializer;\n \n         while ((jp.nextToken()) != JsonToken.END_OBJECT) {\n+            String keyName = jp.getCurrentName(); // just for error message\n+            // but we need to let key deserializer handle it separately, nonetheless\n             Enum<?> key = _keyDeserializer.deserialize(jp, ctxt);\n             if (key == null) {\n                 if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n                     throw ctxt.weirdStringException(value, _enumClass, \"value not one of declared Enum instance names\");\n                 }\n                 /* 24-Mar-2012, tatu: Null won't work as a key anyway, so let's\n-                 *  just skip the entry then. But we must skip the value then.\n+                 *  just skip the entry then. But we must skip the value as well, if so.\n                  */\n                 jp.nextToken();\n                 jp.skipChildren();\n              * not handle them (and maybe fail or return bogus data)\n              */\n             Object value;\n-            \n-            if (t == JsonToken.VALUE_NULL) {\n-                value = valueDes.getNullValue();\n-            } else if (typeDeser == null) {\n-                value =  valueDes.deserialize(jp, ctxt);\n-            } else {\n-                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n+\n+            try {\n+                if (t == JsonToken.VALUE_NULL) {\n+                    value = valueDes.getNullValue();\n+                } else if (typeDeser == null) {\n+                    value =  valueDes.deserialize(jp, ctxt);\n+                } else {\n+                    value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n+                }\n+            } catch (Exception e) {\n+                wrapAndThrow(e, result, keyName);\n+                return null;\n             }\n             result.put(key, value);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n package com.fasterxml.jackson.databind.deser.std;\n \n import java.io.IOException;\n-import java.lang.reflect.InvocationTargetException;\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n         }\n         return withResolved(kd, vtd, vd, ignored);\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* ContainerDeserializerBase API\n     protected void wrapAndThrow(Throwable t, Object ref) throws IOException {\n         wrapAndThrow(t, ref, null);\n     }\n-    \n-    // note: copied from BeanDeserializer; should try to share somehow...\n-    protected void wrapAndThrow(Throwable t, Object ref, String key) throws IOException\n-    {\n-        // to handle StackOverflow:\n-        while (t instanceof InvocationTargetException && t.getCause() != null) {\n-            t = t.getCause();\n-        }\n-        // Errors and \"plain\" IOExceptions to be passed as is\n-        if (t instanceof Error) {\n-            throw (Error) t;\n-        }\n-        // ... except for mapping exceptions\n-        if (t instanceof IOException && !(t instanceof JsonMappingException)) {\n-            throw (IOException) t;\n-        }\n-        throw JsonMappingException.wrapWithPath(t, ref, key);\n-    }\n \n     private void handleUnresolvedReference(JsonParser jp, MapReferringAccumulator accumulator, Object key,\n             UnresolvedForwardReference reference)", "timestamp": 1408512914, "metainfo": ""}