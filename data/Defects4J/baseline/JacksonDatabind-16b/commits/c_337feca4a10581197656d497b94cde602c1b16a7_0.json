{"sha": "337feca4a10581197656d497b94cde602c1b16a7", "log": "Fixed [JACKSON-368]; one of infamous 'failing' cases... (yay!)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n package com.fasterxml.jackson.databind.deser;\n \n import java.io.IOException;\n+import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n     protected final JavaType _baseType;\n \n     protected final ObjectIdReader _objectIdReader;\n+\n+    protected final Map<String, SettableBeanProperty> _backRefProperties;\n     \n     // support for \"native\" types, which require special care:\n     \n     protected final boolean _acceptInt;\n     protected final boolean _acceptDouble;\n     \n-    public AbstractDeserializer(JavaType bt, ObjectIdReader oir)\n+    public AbstractDeserializer(BeanDeserializerBuilder builder,\n+            BeanDescription beanDesc, Map<String, SettableBeanProperty> backRefProps)\n     {\n-        _baseType = bt;\n-        _objectIdReader = oir;\n-        Class<?> cls = bt.getRawClass();\n+        _baseType = beanDesc.getType();\n+        _objectIdReader = builder.getObjectIdReader();\n+        _backRefProperties = backRefProps;\n+        Class<?> cls = _baseType.getRawClass();\n         _acceptString = cls.isAssignableFrom(String.class);\n         _acceptBoolean = (cls == Boolean.TYPE) || cls.isAssignableFrom(Boolean.class);\n         _acceptInt = (cls == Integer.TYPE) || cls.isAssignableFrom(Integer.class);\n         return _objectIdReader;\n     }\n \n+    /**\n+     * Method called by <code>BeanDeserializer</code> to resolve back reference\n+     * part of managed references.\n+     */\n+    public SettableBeanProperty findBackReference(String logicalName)\n+    {\n+        return (_backRefProperties == null) ? null : _backRefProperties.get(logicalName);\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Deserializer implementation\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n             }\n             backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n             isContainer = true;\n-        } else if (valueDeser instanceof AbstractDeserializer) { // [JACKSON-368]: not easy to fix, alas  \n-            throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \"+_beanType.getRawClass().getName()+\".\"+prop.getName()+\")\");\n+        } else if (valueDeser instanceof AbstractDeserializer) {\n+            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);\n         } else {\n             throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                     +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n      */\n     public AbstractDeserializer buildAbstract()\n     {\n-        return new AbstractDeserializer(_beanDesc.getType(), _objectIdReader);\n+        return new AbstractDeserializer(this, _beanDesc, _backRefProperties);\n     }\n     \n     /**", "timestamp": 1332209481, "metainfo": ""}