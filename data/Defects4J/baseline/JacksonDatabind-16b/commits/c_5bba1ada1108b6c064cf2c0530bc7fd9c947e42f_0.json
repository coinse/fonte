{"sha": "5bba1ada1108b6c064cf2c0530bc7fd9c947e42f", "log": "More manual perf tests to verify as-array approach efficiency", "commit": "\n--- /dev/null\n+++ b/src/test/java/perf/ManualReadPerfWithMedia.java\n+package perf;\n+\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.introspect.Annotated;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n+\n+public class ManualReadPerfWithMedia extends ObjectReaderBase\n+{\n+ \n+    public static void main(String[] args) throws Exception\n+    {\n+        if (args.length != 0) {\n+            System.err.println(\"Usage: java ...\");\n+            System.exit(1);\n+        }\n+        MediaItem.Content content = new MediaItem.Content();\n+        content.setTitle(\"content\");\n+        content.addPerson(\"William\");\n+        content.addPerson(\"Robert\");\n+        content.setWidth(900);\n+        content.setHeight(120);\n+        content.setBitrate(256000);\n+        content.setDuration(3600 * 1000L);\n+        content.setCopyright(\"none\");\n+        content.setPlayer(MediaItem.Player.FLASH);\n+\n+        MediaItem input = new MediaItem(content);\n+        input.addPhoto(new MediaItem.Photo(\"http://a\", \"title1\", 200, 100, MediaItem.Size.LARGE));\n+        input.addPhoto(new MediaItem.Photo(\"http://b\", \"title2\", 640, 480, MediaItem.Size.SMALL));\n+\n+        ObjectMapper m1 = new ObjectMapper();\n+        m1.setAnnotationIntrospector(new NoFormatIntrospector());\n+        ObjectMapper m2 = new ObjectMapper();\n+        new ManualReadPerfWithRecord().test(m1, \"JSON-as-Object\", input, MediaItem.class,\n+                m2, \"JSON-as-Array\", input, MediaItem.class);\n+    }\n+\n+    final static class NoFormatIntrospector extends JacksonAnnotationIntrospector\n+    {\n+        @Override\n+        public JsonFormat.Value findFormat(Annotated a) { return null; }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/perf/ManualReadPerfWithRecord.java\n+package perf;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Simple manually run micro-benchmark for checking effects of (de)serializer\n+ * pre-fetching\n+ */\n+public class ManualReadPerfWithRecord extends ObjectReaderBase\n+{\n+ \n+    public static void main(String[] args) throws Exception\n+    {\n+        if (args.length != 0) {\n+            System.err.println(\"Usage: java ...\");\n+            System.exit(1);\n+        }\n+        Record input = new Record(44, \"BillyBob\", \"Bumbler\", 'm', true);\n+        RecordAsArray input2 = new RecordAsArray(44, \"BillyBob\", \"Bumbler\", 'm', true);\n+        ObjectMapper m = new ObjectMapper();\n+        new ManualReadPerfWithRecord().test(m, \"JSON-as-Object\", input, Record.class,\n+                m, \"JSON-as-Array\", input2, RecordAsArray.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/perf/MediaItem.java\n+package perf;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+@JsonFormat(shape=JsonFormat.Shape.ARRAY)\n+@JsonPropertyOrder({\"content\", \"images\"})\n+public class MediaItem\n+{\n+    public enum Player { JAVA, FLASH;  }\n+    public enum Size { SMALL, LARGE; }\n+\n+    private List<Photo> _photos;\n+    private Content _content;\n+\n+    public MediaItem() { }\n+\n+    public MediaItem(Content c)\n+    {\n+        _content = c;\n+    }\n+\n+    public void addPhoto(Photo p) {\n+        if (_photos == null) {\n+            _photos = new ArrayList<Photo>();\n+        }\n+        _photos.add(p);\n+    }\n+    \n+    public List<Photo> getImages() { return _photos; }\n+    public void setImages(List<Photo> p) { _photos = p; }\n+\n+    public Content getContent() { return _content; }\n+    public void setContent(Content c) { _content = c; }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+    \n+    @JsonFormat(shape=JsonFormat.Shape.ARRAY)\n+    @JsonPropertyOrder({\"uri\",\"title\",\"width\",\"height\",\"size\"})\n+    public static class Photo\n+    {\n+        private String _uri;\n+        private String _title;\n+        private int _width;\n+        private int _height;\n+        private Size _size;\n+    \n+        public Photo() {}\n+        public Photo(String uri, String title, int w, int h, Size s)\n+        {\n+          _uri = uri;\n+          _title = title;\n+          _width = w;\n+          _height = h;\n+          _size = s;\n+        }\n+    \n+      public String getUri() { return _uri; }\n+      public String getTitle() { return _title; }\n+      public int getWidth() { return _width; }\n+      public int getHeight() { return _height; }\n+      public Size getSize() { return _size; }\n+    \n+      public void setUri(String u) { _uri = u; }\n+      public void setTitle(String t) { _title = t; }\n+      public void setWidth(int w) { _width = w; }\n+      public void setHeight(int h) { _height = h; }\n+      public void setSize(Size s) { _size = s; }\n+    }\n+      \n+    @JsonFormat(shape=JsonFormat.Shape.ARRAY)\n+    @JsonPropertyOrder({\"uri\",\"title\",\"width\",\"height\",\"format\",\"duration\",\"size\",\"bitrate\",\"persons\",\"player\",\"copyright\"})\n+    public static class Content\n+    {\n+        private Player _player;\n+        private String _uri;\n+        private String _title;\n+        private int _width;\n+        private int _height;\n+        private String _format;\n+        private long _duration;\n+        private long _size;\n+        private int _bitrate;\n+        private List<String> _persons;\n+        private String _copyright;\n+    \n+        public Content() { }\n+\n+        public void addPerson(String p) {\n+            if (_persons == null) {\n+                _persons = new ArrayList<String>();\n+            }\n+            _persons.add(p);\n+        }\n+        \n+        public Player getPlayer() { return _player; }\n+        public String getUri() { return _uri; }\n+        public String getTitle() { return _title; }\n+        public int getWidth() { return _width; }\n+        public int getHeight() { return _height; }\n+        public String getFormat() { return _format; }\n+        public long getDuration() { return _duration; }\n+        public long getSize() { return _size; }\n+        public int getBitrate() { return _bitrate; }\n+        public List<String> getPersons() { return _persons; }\n+        public String getCopyright() { return _copyright; }\n+    \n+        public void setPlayer(Player p) { _player = p; }\n+        public void setUri(String u) {  _uri = u; }\n+        public void setTitle(String t) {  _title = t; }\n+        public void setWidth(int w) {  _width = w; }\n+        public void setHeight(int h) {  _height = h; }\n+        public void setFormat(String f) {  _format = f;  }\n+        public void setDuration(long d) {  _duration = d; }\n+        public void setSize(long s) {  _size = s; }\n+        public void setBitrate(int b) {  _bitrate = b; }\n+        public void setPersons(List<String> p) {  _persons = p; }\n+        public void setCopyright(String c) {  _copyright = c; }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/perf/ObjectReaderBase.java\n+package perf;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+abstract class ObjectReaderBase\n+{\n+    protected int hash;\n+\n+    protected <T1, T2> void test(ObjectMapper mapper1, String desc1,\n+            T1 inputValue1, Class<T1> inputClass1,\n+            ObjectMapper mapper2, String desc2,\n+            T2 inputValue2, Class<T2> inputClass2)\n+        throws Exception\n+    {\n+        final byte[] byteInput1 = mapper1.writeValueAsBytes(inputValue1);\n+        final byte[] byteInput2 = mapper2.writeValueAsBytes(inputValue2);\n+\n+        desc1 = String.format(\"%s (%d bytes)\", desc1, byteInput1.length);\n+        desc2 = String.format(\"%s (%d bytes)\", desc2, byteInput2.length);\n+\n+        // sanity check:\n+        {\n+            /*T1 back1 =*/ mapper1.readValue(byteInput1, inputClass1);\n+            /*T2 back2 =*/ mapper2.readValue(byteInput2, inputClass2);\n+            System.out.println(\"Input successfully round-tripped for both styles...\");\n+        }\n+\n+        // Let's try to guestimate suitable size... to get to N megs to process\n+        final int REPS = (int) ((double) (8 * 1000 * 1000) / (double) byteInput1.length);\n+\n+        System.out.printf(\"Read %d bytes to bind (%d as array); will do %d repetitions\\n\",\n+                byteInput1.length, byteInput2.length, REPS);\n+\n+        final ObjectReader jsonReader = mapper1.reader()\n+                .with(DeserializationFeature.EAGER_DESERIALIZER_FETCH)\n+                .withType(inputClass1);\n+        final ObjectReader arrayReader = mapper2.reader()\n+                .with(DeserializationFeature.EAGER_DESERIALIZER_FETCH)\n+                .withType(inputClass2);\n+        \n+        int i = 0;\n+        int roundsDone = 0;\n+        final int TYPES = 2;\n+        final int WARMUP_ROUNDS = 5;\n+\n+        final long[] times = new long[TYPES];\n+        \n+        while (true) {\n+            try {  Thread.sleep(100L); } catch (InterruptedException ie) { }\n+            int round = (i++ % TYPES);\n+\n+            String msg;\n+            boolean lf = (round == 0);\n+\n+            long msecs;\n+            \n+            switch (round) {\n+            case 0:\n+                msg = desc1;\n+                msecs = testDeser(REPS, byteInput1, jsonReader);\n+                break;\n+            case 1:\n+                msg = desc2;\n+                msecs = testDeser(REPS, byteInput2, arrayReader);\n+                break;\n+            default:\n+                throw new Error();\n+            }\n+\n+            // skip first 5 rounds to let results stabilize\n+            if (roundsDone >= WARMUP_ROUNDS) {\n+                times[round] += msecs;\n+            }\n+            \n+            System.out.printf(\"Test '%s' [hash: 0x%s] -> %d msecs\\n\", msg, this.hash, msecs);\n+            if (lf) {\n+                ++roundsDone;\n+                if ((roundsDone % 3) == 0 && roundsDone > WARMUP_ROUNDS) {\n+                    double den = (double) (roundsDone - WARMUP_ROUNDS);\n+                    System.out.printf(\"Averages after %d rounds (Object / Array): %.1f / %.1f msecs\\n\",\n+                            (int) den,\n+                            times[0] / den, times[1] / den);\n+                            \n+                }\n+                System.out.println();\n+            }\n+            if ((i % 17) == 0) {\n+                System.out.println(\"[GC]\");\n+                Thread.sleep(100L);\n+                System.gc();\n+                Thread.sleep(100L);\n+            }\n+        }\n+    }\n+\n+    private final long testDeser(int REPS, byte[] input, ObjectReader reader) throws Exception\n+    {\n+        long start = System.currentTimeMillis();\n+        Object result = null;\n+        while (--REPS >= 0) {\n+            result = reader.readValue(input);\n+        }\n+        hash = result.hashCode();\n+        return System.currentTimeMillis() - start;\n+    }\n+}", "timestamp": 1342898649, "metainfo": ""}