{"sha": "b9733f7ba10c81c84ebcae9a9609b9b03e1190d6", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n             \tfilter.depositSchemaProperty(prop, propertiesNode, provider);\n             \t continue;\n             }\n-            JavaType propType = prop.getSerializationType();\n-\n             depositSchemaProperty(prop, propertiesNode, provider);\n \n         }\n      * \t\n      *  {@link BeanPropertyFilter#depositSchemaProperty(BeanPropertyWriter, ObjectNode, SerializerProvider)}\n      */\n-    public static void depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider) {\n-\t\tJavaType propType = writer.getSerializationType();\n-\n-\t\t// 03-Dec-2010, tatu: SchemaAware REALLY should use JavaType, but alas it doesn't...\n-\t\tType hint = (propType == null) ? writer.getGenericPropertyType() : propType.getRawClass();\n-\t\tJsonNode schemaNode;\n-\t\t// Maybe it already has annotated/statically configured serializer?\n-\t\tJsonSerializer<Object> ser = writer.getSerializer();\n-\n-\t\ttry {\n-\t\t\tif (ser == null) { // nope\n-\t\t\t\tClass<?> serType = writer.getRawSerializationType();\n-\t\t\t\tif (serType == null) {\n-\t\t\t\t\tserType = writer.getPropertyType();\n-\t\t\t\t}\n-\t\t\t\tser = provider.findValueSerializer(serType, writer);\n-\t\t\t}\n-\t\t\tboolean isOptional = !BeanSerializerBase.isPropertyRequired(writer, provider);\n-\t\t\tif (ser instanceof SchemaAware) {\n-\t\t\t\tschemaNode =  ((SchemaAware) ser).getSchema(provider, hint, isOptional) ;\n-\t\t\t} else {  \n-\t\t\t\tschemaNode = JsonSchema.getDefaultSchemaNode(); \n-\t\t\t}\n-\t\t} catch (JsonMappingException e) {\n-\t\t\tschemaNode = JsonSchema.getDefaultSchemaNode(); \n-\t\t\t//TODO: log error\n-\t\t}\n-\t\tpropertiesNode.put(writer.getName(), schemaNode);\n-\t}\n-    \n+    public static void depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)\n+    {\n+        JavaType propType = writer.getSerializationType();\n+\n+        // 03-Dec-2010, tatu: SchemaAware REALLY should use JavaType, but alas it doesn't...\n+        Type hint = (propType == null) ? writer.getGenericPropertyType() : propType.getRawClass();\n+        JsonNode schemaNode;\n+        // Maybe it already has annotated/statically configured serializer?\n+        JsonSerializer<Object> ser = writer.getSerializer();\n+\n+        try {\n+            if (ser == null) { // nope\n+                Class<?> serType = writer.getRawSerializationType();\n+                if (serType == null) {\n+                    serType = writer.getPropertyType();\n+                }\n+                ser = provider.findValueSerializer(serType, writer);\n+            }\n+            boolean isOptional = !BeanSerializerBase.isPropertyRequired(writer, provider);\n+            if (ser instanceof SchemaAware) {\n+                schemaNode =  ((SchemaAware) ser).getSchema(provider, hint, isOptional) ;\n+            } else {  \n+                schemaNode = JsonSchema.getDefaultSchemaNode(); \n+            }\n+        } catch (JsonMappingException e) {\n+            schemaNode = JsonSchema.getDefaultSchemaNode(); \n+            // TODO: handle in better way (why not throw?)\n+        }\n+        propertiesNode.put(writer.getName(), schemaNode);\n+    }\n }", "timestamp": 1343435597, "metainfo": ""}