{"sha": "ad0b7ed047d7e6f2a1652c4077d0d85812fbd847", "log": "Add bit more checking in new attribute tests", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextAttributeWithDeser.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextAttributeWithDeser.java\n \n import java.io.IOException;\n \n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.core.JsonParser;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;\n     \n     public void testSimplePerCall() throws Exception\n     {\n-        TestPOJO[] pojos = MAPPER.reader(TestPOJO[].class)\n-            .readValue(aposToQuotes(\"[{'value':'a'},{'value':'b'}]\"));\n+        final String INPUT = aposToQuotes(\"[{'value':'a'},{'value':'b'}]\");\n+        TestPOJO[] pojos = MAPPER.reader(TestPOJO[].class).readValue(INPUT);\n         assertEquals(2, pojos.length);\n         assertEquals(\"a/0\", pojos[0].value);\n         assertEquals(\"b/1\", pojos[1].value);\n+\n+        // and verify that state does not linger\n+        TestPOJO[] pojos2 = MAPPER.reader(TestPOJO[].class).readValue(INPUT);\n+        assertEquals(2, pojos2.length);\n+        assertEquals(\"a/0\", pojos2[0].value);\n+        assertEquals(\"b/1\", pojos2[1].value);\n     }\n \n     public void testSimpleDefaults() throws Exception\n     {\n+        final String INPUT = aposToQuotes(\"{'value':'x'}\");\n         TestPOJO pojo = MAPPER.reader(TestPOJO.class)\n                 .withAttribute(KEY, Integer.valueOf(3))\n-                .readValue(aposToQuotes(\"{'value':'x'}\"));\n+                .readValue(INPUT);\n         assertEquals(\"x/3\", pojo.value);\n+\n+        // as above, should not carry on state\n+        TestPOJO pojo2 = MAPPER.reader(TestPOJO.class)\n+                .withAttribute(KEY, Integer.valueOf(3))\n+                .readValue(INPUT);\n+        assertEquals(\"x/3\", pojo2.value);\n     }\n \n     public void testHierarchic() throws Exception\n     {\n+        final String INPUT = aposToQuotes(\"[{'value':'x'},{'value':'y'}]\");\n         ObjectReader r = MAPPER.reader(TestPOJO[].class).withAttribute(KEY, Integer.valueOf(2));\n-        TestPOJO[] pojos = r.readValue(aposToQuotes(\"[{'value':'x'},{'value':'y'}]\"));\n+        TestPOJO[] pojos = r.readValue(INPUT);\n         assertEquals(2, pojos.length);\n         assertEquals(\"x/2\", pojos[0].value);\n         assertEquals(\"y/3\", pojos[1].value);\n+\n+        // and once more to verify transiency of per-call state\n+        TestPOJO[] pojos2 = r.readValue(INPUT);\n+        assertEquals(2, pojos2.length);\n+        assertEquals(\"x/2\", pojos2[0].value);\n+        assertEquals(\"y/3\", pojos2[1].value);\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextAttributeWithSer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextAttributeWithSer.java\n     \n     public void testSimplePerCall() throws Exception\n     {\n+        final String EXP = aposToQuotes(\"[{'value':'0:a'},{'value':'1:b'}]\");\n         ObjectWriter w = MAPPER.writer();\n-        String json = w.writeValueAsString(new TestPOJO[] {\n-                new TestPOJO(\"a\"),\n-                new TestPOJO(\"b\") });\n-        assertEquals(aposToQuotes(\"[{'value':'0:a'},{'value':'1:b'}]\"), json);\n+        final TestPOJO[] INPUT = new TestPOJO[] {\n+                new TestPOJO(\"a\"), new TestPOJO(\"b\") };\n+        assertEquals(EXP, w.writeValueAsString(INPUT));\n+\n+        // also: ensure that we don't retain per-call state accidentally:\n+        assertEquals(EXP, w.writeValueAsString(INPUT));\n     }\n \n     public void testSimpleDefaults() throws Exception\n     {\n+        final String EXP = aposToQuotes(\"{'value':'3:xyz'}\");\n+        final TestPOJO INPUT = new TestPOJO(\"xyz\");\n         String json = MAPPER.writer().withAttribute(KEY, Integer.valueOf(3))\n-                .writeValueAsString(new TestPOJO(\"xyz\"));\n-        assertEquals(aposToQuotes(\"{'value':'3:xyz'}\"), json);\n+                .writeValueAsString(INPUT);\n+        assertEquals(EXP, json);\n+\n+        String json2 = MAPPER.writer().withAttribute(KEY, Integer.valueOf(3))\n+                .writeValueAsString(INPUT);\n+        assertEquals(EXP, json2);\n     }\n \n     public void testHierarchic() throws Exception\n     {\n+        final TestPOJO[] INPUT = new TestPOJO[] { new TestPOJO(\"a\"), new TestPOJO(\"b\") };\n+        final String EXP = aposToQuotes(\"[{'value':'2:a'},{'value':'3:b'}]\");\n         ObjectWriter w = MAPPER.writer().withAttribute(KEY, Integer.valueOf(2));\n-        String json = w.writeValueAsString(new TestPOJO[] {\n-                new TestPOJO(\"a\"),\n-                new TestPOJO(\"b\") });\n-        assertEquals(aposToQuotes(\"[{'value':'2:a'},{'value':'3:b'}]\"), json);\n+        assertEquals(EXP, w.writeValueAsString(INPUT));\n+\n+        // and verify state clearing:\n+        assertEquals(EXP, w.writeValueAsString(INPUT));\n     }\n }", "timestamp": 1381250444, "metainfo": ""}