{"sha": "e3be8a68ea16b4e02c6aa7eee401cb5d9a6776b2", "log": "minor cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/TextNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/TextNode.java\n         return _value;\n     }\n \n+    @Override\n     public String asText(String defaultValue) {\n         return (_value == null) ? defaultValue : _value;\n     }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestUnwrappedMap171.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.annotation.JsonUnwrapped;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+// Tests for [#171]\n+public class TestUnwrappedMap171 extends BaseMapTest\n+{\n+    static class MapUnwrap {\n+\n+        public MapUnwrap() { }\n+        public MapUnwrap(String key, Object value) {\n+            map = Collections.singletonMap(key, value);\n+        }\n+\n+        @JsonUnwrapped(prefix=\"map.\")\n+        public Map<String, Object> map;\n+    }\n+    \n+    // // // Reuse mapper to keep tests bit faster\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    /*\n+    /**********************************************************\n+    /* Tests, serialization\n+    /**********************************************************\n+     */\n+\n+    public void testMapUnwrapSerialize() throws Exception\n+    {\n+        String json = MAPPER.writeValueAsString(new MapUnwrap(\"test\", 6));\n+        assertEquals(\"{\\\"map.test\\\": 6}\", json);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Tests, deserialization\n+    /**********************************************************\n+     */\n+\n+    public void testMapUnwrapDeserialize() throws Exception\n+    {\n+        MapUnwrap root = MAPPER.readValue(\"{\\\"map.test\\\": 6}\", MapUnwrap.class);\n+\n+        assertEquals(1, root.map.size());\n+        assertEquals(6, ((Number)root.map.get(\"test\")).intValue());\n+    }\n+}", "timestamp": 1400990153, "metainfo": ""}