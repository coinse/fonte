{"sha": "d453182b63249c2c597a54229a4242e1ce1921d0", "log": "Refactoring Object Id handling, after realizing first attempt is too limiting", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n     }\n \n     /**\n-     * Method for checking whether given accessor claims to represent\n-     * object id: if so, its value may be used to represent value,\n-     * in cases where value (along with id, presumably) has been\n-     * or will  be serialized in its entirety in some point.\n-     * This allows serialization of a POJO value just once, and\n-     * afterwards referring to the value using an object id\n-     * (which has to be a JSON scalar value, usually String or\n-     * integer)\n+     * Method for checking whether given annotated thing\n+     * (type, or accessor) indicates that values\n+     * referenced (values of type of annotated class, or\n+     * values referenced by annotated property; latter\n+     * having precedence) should include Object Identifier,\n+     * and if so, specify details of Object Identity used.\n      * \n      * @since 2.0\n      */\n-    public Boolean isObjectId(AnnotatedMember member) {\n+    public ObjectIdInfo findObjectIdInfo(Annotated ann) {\n         return null;\n     }\n     \n      * An obvious consequence of priority is that it is easy to construct\n      * longer chains of introspectors by linking multiple pairs.\n      * Currently most likely combination is that of using the default\n-     * Jackson provider, along with JAXB annotation introspector (available\n-     * since version 1.1).\n+     * Jackson provider, along with JAXB annotation introspector.\n      */\n     public static class Pair\n         extends AnnotationIntrospector\n         }\n \n         @Override\n-        public Boolean isObjectId(AnnotatedMember member) {\n-            Boolean b = _primary.isObjectId(member);\n-            if (b == null) {\n-                b = _secondary.isObjectId(member);\n-            }\n-            return b;\n+        public ObjectIdInfo findObjectIdInfo(Annotated ann) {\n+            ObjectIdInfo result = _primary.findObjectIdInfo(ann);\n+            if (result == null) {\n+                result = _secondary.findObjectIdInfo(ann);\n+            }\n+            return result;\n         }\n         \n         // // // Serialization: class annotations\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n+import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n import com.fasterxml.jackson.databind.type.TypeBindings;\n import com.fasterxml.jackson.databind.util.Annotations;\n \n \n     public Class<?> getBeanClass() { return _type.getRawClass(); }\n \n+    /**\n+     * Method for accessing low-level information about Class this\n+     * item describes.\n+     */\n     public abstract AnnotatedClass getClassInfo();\n+\n+    /**\n+     * Accessor for getting information about Object Id expected to\n+     * be used for this POJO type, if any.\n+     */\n+    public abstract ObjectIdInfo getObjectIdInfo();\n     \n     /**\n      * Method for checking whether class being described has any\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n import java.text.DateFormat;\n import java.util.Date;\n \n+import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.*;\n import com.fasterxml.jackson.databind.ser.impl.*;\n     \n     /*\n     /**********************************************************\n-    /* Access to configuration\n+    /* Access to general configuration\n     /**********************************************************\n      */\n \n         return _config.getFilterProvider();\n     }\n \n-    /**\n-     * Method used to try to find the Object Id for given POJO.\n-     */\n-    public final Object findObjectId(Object pojo, AnnotatedMember idAccessor)\n+    /*\n+    /**********************************************************\n+    /* Access to type handling\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Convenience method for constructing {@link JavaType} for given JDK\n+     * type (usually {@link java.lang.Class})\n+     */\n+    public JavaType constructType(Type type) {\n+         return _config.getTypeFactory().constructType(type);\n+    }\n+\n+    /**\n+     * Convenience method for constructing subtypes, retaining generic\n+     * type parameter (if any)\n+     */\n+    public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {\n+        return _config.constructSpecializedType(baseType, subclass);\n+    }\n+\n+    public TypeFactory getTypeFactory() {\n+        return _config.getTypeFactory();\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Access to Object Id aspects\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method used to try to find the Object Id for given POJO; and\n+     * if one is not found, to generate id for it.\n+     */\n+    public final Object findObjectId(Object pojo)\n+    {\n+        if (_objectIds == null) {\n+            return null;\n+        }\n+        return _objectIds.findId(pojo);\n+    }\n+\n+    public final void addObjectId(Object pojo, Object id)\n     {\n         if (_objectIds == null) {\n             _objectIds = new ObjectIdMap();\n         }\n-        return _objectIds.findOrInsertId(pojo, idAccessor);\n-    }\n-\n-    /**\n-     * Convenience method for constructing {@link JavaType} for given JDK\n-     * type (usually {@link java.lang.Class})\n-     */\n-    public JavaType constructType(Type type) {\n-         return _config.getTypeFactory().constructType(type);\n-    }\n-\n-    /**\n-     * Convenience method for constructing subtypes, retaining generic\n-     * type parameter (if any)\n-     */\n-    public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {\n-        return _config.constructSpecializedType(baseType, subclass);\n+        _objectIds.insertId(pojo, id);\n     }\n     \n     /*\n         }\n         return (JsonSerializer<Object>) _handleResolvable(ser);\n     }\n+\n+    public ObjectIdGenerator<?> objectIdGeneratorInstance(Annotated annotated,\n+            Class<?> implClass)\n+        throws JsonMappingException\n+    {\n+        HandlerInstantiator hi = _config.getHandlerInstantiator();\n+\n+        if (hi != null) {\n+            return hi.objectIdGeneratorInstance(_config, annotated, implClass);\n+        }\n+        return (ObjectIdGenerator<?>) ClassUtil.createInstance(implClass,\n+                    _config.canOverrideAccessModifiers());\n+    }\n     \n     /*\n     /********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/HandlerInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/HandlerInstantiator.java\n package com.fasterxml.jackson.databind.cfg;\n \n-import com.fasterxml.jackson.databind.DeserializationConfig;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.KeyDeserializer;\n-import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n             Annotated annotated, Class<?> resolverClass) {\n         return null;\n     }\n+\n+    \n+    /**\n+     * Method called to construct a ObjectIdHandler instance of specified type.\n+     * \n+     * @since 2.0\n+     */\n+    public ObjectIdGenerator<?> objectIdGeneratorInstance(MapperConfig<?> config,\n+            Annotated annotated, Class<?> implClass) {\n+        return null;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n     /**********************************************************\n      */\n \n-    public BeanDeserializer(BeanDescription beanDesc,\n-            ValueInstantiator valueInstantiator,\n+    /**\n+     * Constructor used by {@link BeanDeserializerBuilder}.\n+     */\n+    public BeanDeserializer(BeanDeserializerBuilder builder,\n+            BeanDescription beanDesc,\n             BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs,\n             HashSet<String> ignorableProps, boolean ignoreAllUnknown,\n-            SettableAnyProperty anySetter, List<ValueInjector> injectables,\n             boolean hasViews)\n     {\n-        this(beanDesc.getClassInfo(), beanDesc.getType(),\n-                valueInstantiator,\n-                properties, backRefs,\n-                ignorableProps, ignoreAllUnknown,\n-                anySetter, injectables, hasViews);\n-    }\n-    \n-    protected BeanDeserializer(AnnotatedClass forClass, JavaType type,\n-            ValueInstantiator valueInstantiator,\n-            BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs,\n-            HashSet<String> ignorableProps, boolean ignoreAllUnknown,\n-            SettableAnyProperty anySetter, List<ValueInjector> injectables,\n-            boolean hasViews)\n-    {\n-        super(type);\n-        _forClass = forClass;\n-        _beanType = type;\n-\n-        _valueInstantiator = valueInstantiator;\n+        super(beanDesc.getType());\n+        _forClass = beanDesc.getClassInfo();\n+        _beanType = beanDesc.getType();\n+\n+        _valueInstantiator = builder.getValueInstantiator();\n         \n         _beanProperties = properties;\n         _backRefs = backRefs;\n         _ignorableProps = ignorableProps;\n         _ignoreAllUnknown = ignoreAllUnknown;\n-        _anySetter = anySetter;\n+\n+        _anySetter = builder.getAnySetter();\n+        List<ValueInjector> injectables = builder.getInjectables();\n         _injectables = (injectables == null || injectables.isEmpty()) ? null\n                 : injectables.toArray(new ValueInjector[injectables.size()]);\n \n         _nonStandardCreation = (_unwrappedPropertyHandler != null)\n-            || valueInstantiator.canCreateUsingDelegate()\n-            || valueInstantiator.canCreateFromObjectWith()\n-            || !valueInstantiator.canCreateUsingDefault()\n+            || _valueInstantiator.canCreateUsingDelegate()\n+            || _valueInstantiator.canCreateFromObjectWith()\n+            || !_valueInstantiator.canCreateUsingDefault()\n             ;\n \n         _needViewProcesing = hasViews;    \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n         return _properties.remove(name);\n     }\n \n+    public SettableAnyProperty getAnySetter() {\n+        return _anySetter;\n+    }\n+    \n     public ValueInstantiator getValueInstantiator() {\n         return _valueInstantiator;\n+    }\n+\n+    public List<ValueInjector> getInjectables() {\n+        return _injectables;\n     }\n     \n     /*\n             }\n         }\n         \n-        return new BeanDeserializer(_beanDesc,\n-                _valueInstantiator, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n-                _anySetter, _injectables, anyViews);\n+        return new BeanDeserializer(this,\n+                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n+                anyViews);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n      */\n     protected final List<BeanPropertyDefinition> _properties;\n \n+    /**\n+     * Details of Object Id to include, if any\n+     */\n+    protected ObjectIdInfo _objectIdInfo;\n+    \n     // // for deserialization\n     \n     protected AnnotatedMethod _anySetterMethod;\n     /**********************************************************\n      */\n \n-    protected BasicBeanDescription(MapperConfig<?> config, JavaType type,\n-            AnnotatedClass ac, List<BeanPropertyDefinition> properties)\n-    {\n-    \tsuper(type);\n-    \t_config = config;\n-    \t_annotationIntrospector = (config == null) ? null : config.getAnnotationIntrospector();\n-    \t_classInfo = ac;\n-    \t_properties = properties;\n+    protected BasicBeanDescription(MapperConfig<?> config,\n+            JavaType type, AnnotatedClass classDef,\n+            List<BeanPropertyDefinition> props)\n+    {\n+        super(type);\n+        _config = config;\n+        _annotationIntrospector = (_config == null) ? null : _config.getAnnotationIntrospector();\n+        _classInfo = classDef;\n+        _properties = props;\n+    }\n+    \n+    protected BasicBeanDescription(POJOPropertiesCollector coll)\n+    {\n+        this(coll.getConfig(), coll.getType(), coll.getClassDef(), coll.getProperties());\n+    \t_objectIdInfo = coll.getObjectIdInfo();\n     }\n \n     /**\n      */\n     public static BasicBeanDescription forDeserialization(POJOPropertiesCollector coll)\n     {\n-        BasicBeanDescription desc = new BasicBeanDescription(coll.getConfig(),\n-                coll.getType(), coll.getClassDef(), coll.getProperties());\n+        BasicBeanDescription desc = new BasicBeanDescription(coll);\n         desc._anySetterMethod = coll.getAnySetterMethod();\n         desc._ignoredPropertyNames = coll.getIgnoredPropertyNames();\n         desc._injectables = coll.getInjectables();\n      */\n     public static BasicBeanDescription forSerialization(POJOPropertiesCollector coll)\n     {\n-        BasicBeanDescription desc = new BasicBeanDescription(coll.getConfig(),\n-                coll.getType(), coll.getClassDef(), coll.getProperties());\n+        BasicBeanDescription desc = new BasicBeanDescription(coll);\n         desc._jsonValueMethod = coll.getJsonValueMethod();\n         desc._anyGetter = coll.getAnyGetter();\n         return desc;\n \n     @Override\n     public AnnotatedClass getClassInfo() { return _classInfo; }\n+\n+    @Override\n+    public ObjectIdInfo getObjectIdInfo() { return  _objectIdInfo; }\n     \n     @Override\n     public List<BeanPropertyDefinition> findProperties() {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n     }\n \n     /**\n-     * Method used to check whether this logical property has a marker\n-     * to indicate it represents Object Identity that can be used to\n-     * resolve cyclic dependencies (by being used in place of fully\n-     * value serialization)\n+     * Method used to check whether this logical property indicates that\n+     * value POJOs should be written using additional Object Identifier\n+     * (or, when multiple references exist, all but first AS Object Identifier).\n      */\n-    public boolean isObjectId() {\n-        return false;\n+    public ObjectIdInfo findObjectIdInfo() {\n+        return null;\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     }\n \n     @Override\n-    public Boolean isObjectId(AnnotatedMember member) {\n-        return member.hasAnnotation(JsonObjectId.class);\n+    public ObjectIdInfo findObjectIdInfo(Annotated ann) {\n+        JsonIdentityInfo info = ann.getAnnotation(JsonIdentityInfo.class);\n+        if (info == null) {\n+            return null;\n+        }\n+        return new ObjectIdInfo(info.property(), info.generator());\n     }\n     \n     /*\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java\n+package com.fasterxml.jackson.databind.introspect;\n+\n+import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+\n+/**\n+ * Container object that encapsulates information usually\n+ * derived from {@link JsonIdentityInfo} annotation or its\n+ * custom alternatives\n+ */\n+public class ObjectIdInfo\n+{\n+    protected final String _property;\n+    protected final Class<? extends ObjectIdGenerator<?>> _generator;\n+    \n+    public ObjectIdInfo(String prop, Class<? extends ObjectIdGenerator<?>> gen)\n+    {\n+        _property = prop;\n+        _generator = gen;\n+    }\n+\n+    public String getProperty() { return _property; }\n+    public Class<? extends ObjectIdGenerator<?>> getGenerator() { return _generator; }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n \n     public Set<String> getIgnoredPropertyNames() {\n         return _ignoredPropertyNames;\n+    }\n+\n+    /**\n+     * Accessor to find out whether type specified requires inclusion\n+     * of Object Identifier.\n+     */\n+    public ObjectIdInfo getObjectIdInfo() {\n+        return _annotationIntrospector.findObjectIdInfo(_classDef);\n     }\n     \n     // for unit tests:\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n     }\n \n     @Override\n-    public boolean isObjectId() {\n-        Boolean b = fromMemberAnnotation(new WithMember<Boolean>() {\n-            @Override public Boolean withMember(AnnotatedMember member) {\n-                return _annotationIntrospector.isObjectId(member);\n+    public ObjectIdInfo findObjectIdInfo() {\n+        return fromMemberAnnotation(new WithMember<ObjectIdInfo>() {\n+            @Override public ObjectIdInfo withMember(AnnotatedMember member) {\n+                return _annotationIntrospector.findObjectIdInfo(member);\n             }\n         });\n-        return (b != null) && b.booleanValue();\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n         throws IOException, JsonGenerationException\n     {\n         if (_objectIdHandler != null) {\n-            // We may want to serialize just a reference (object id):\n-            if (_objectIdHandler.handleReference(bean, jgen, provider)) {\n-                return;\n-            }\n+            serializeWithObjectId(bean, jgen, provider);\n+            return;\n         }\n         jgen.writeStartObject();\n         if (_propertyFilterId != null) {\n         jgen.writeEndObject();\n     }\n \n+    private final void serializeWithObjectId(Object bean, JsonGenerator jgen, SerializerProvider provider)\n+        throws IOException, JsonGenerationException\n+    {\n+        // Ok: if we have seen this POJO before, just write the reference:\n+        if (_objectIdHandler.handleReference(bean, jgen, provider)) {\n+            return;\n+        }\n+        // If not, need to inject the id:\n+        jgen.writeStartObject();\n+        _objectIdHandler.writeAsProperty(bean, jgen, provider);\n+        if (_propertyFilterId != null) {\n+            serializeFieldsFiltered(bean, jgen, provider);\n+        } else {\n+            serializeFields(bean, jgen, provider);\n+        }\n+        jgen.writeEndObject();\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Standard methods\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n \n /**\n  * Builder class used for aggregating deserialization information about\n     protected Object _filterId;\n \n     /**\n-     * Property that is used for object id\n-     */\n-    protected AnnotatedMember _objectId;\n-\n-    /**\n      * Property that is used for type id (and not serialized as regular\n      * property)\n      */\n     protected AnnotatedMember _typeId;\n+\n+    protected ObjectIdWriter _objectIdHandler;\n     \n     /*\n     /**********************************************************\n         _anyGetter = src._anyGetter;\n         _filterId = src._filterId;\n     }\n-    \n-    public boolean hasProperties() {\n-        return (_properties != null) && (_properties.size() > 0);\n-    }\n \n     public void setProperties(List<BeanPropertyWriter> properties) {\n         _properties = properties;\n     public void setFilterId(Object filterId) {\n         _filterId = filterId;\n     }\n-\n-    public void setObjectId(AnnotatedMember idProp) {\n-        // Not legal to use multiple ones...\n-        if (_objectId != null) {\n-            throw new IllegalArgumentException(\"Multiple object ids specified with \"+_objectId+\" and \"+idProp);\n-        }\n-        _objectId = idProp;\n-    }\n     \n     public void setTypeId(AnnotatedMember idProp) {\n         // Not legal to use multiple ones...\n         _typeId = idProp;\n     }\n \n+    public void setObjectIdHandler(ObjectIdWriter h) {\n+        _objectIdHandler = h;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Accessors for things BeanSerializer cares about:\n \n     public BeanDescription getBeanDescription() { return _beanDesc; }\n     public List<BeanPropertyWriter> getProperties() { return _properties; }\n+    public boolean hasProperties() {\n+        return (_properties != null) && (_properties.size() > 0);\n+    }\n+\n     public BeanPropertyWriter[] getFilteredProperties() { return _filteredProperties; }\n     \n     public AnyGetterWriter getAnyGetter() { return _anyGetter; }\n     \n     public Object getFilterId() { return _filterId; }\n-    \n-    public AnnotatedMember getObjectId() { return _objectId; }\n \n     public AnnotatedMember getTypeId() { return _typeId; }\n+\n+    public ObjectIdWriter getObjectIdHandler() { return _objectIdHandler; }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n \n import java.util.*;\n \n+import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter;\n+import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n import com.fasterxml.jackson.databind.ser.std.MapSerializer;\n import com.fasterxml.jackson.databind.type.*;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n                     beanDesc.getClassAnnotations(), anyGetter);\n             builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n         }\n-        // One more thing: need to gather view information, if any:\n+        // Next: need to gather view information, if any:\n         processViews(config, builder);\n-        // And maybe let interested parties mess with the result bit more...\n+\n+        // And if Object Id is needed, some preparation for that as well:\n+        builder.setObjectIdHandler(constructObjectIdHandler(prov, beanDesc));\n+        \n+        // Finally: let interested parties mess with the result bit more...\n         if (_factoryConfig.hasSerializerModifiers()) {\n             for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                 builder = mod.updateBuilder(config, beanDesc, builder);\n             }\n         }\n+        \n         JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n \n         /* However, after all modifications: no properties, no serializer\n         return ser;\n     }\n \n+    protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov,\n+            BeanDescription beanDesc)\n+        throws JsonMappingException\n+    {\n+        ObjectIdInfo oidInfo = beanDesc.getObjectIdInfo();\n+        if (oidInfo == null) {\n+            return null;\n+        }\n+        ObjectIdGenerator<?> gen;\n+        Class<?> implClass = oidInfo.getGenerator();\n+        JavaType type = prov.constructType(implClass);\n+        // Could require type to be passed explicitly, but we should be able to find it too:\n+        JavaType idType = prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+\n+        // Just one special case: Property-based generator is trickier\n+        if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work\n+            // !!! TODO\n+            gen = null;\n+            if (true) throw new IllegalStateException(\"Not yet implemented!\");\n+        } else { // other types need to be simpler\n+            gen = prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n+        }\n+        return ObjectIdWriter.construct(idType, oidInfo.getProperty(), gen);\n+    }\n+\n     /**\n      * Method called to construct a filtered writer, for given view\n      * definitions. Default implementation constructs filter that checks\n         // null is for value type serializer, which we don't have access to from here (ditto for bean prop)\n         boolean staticTyping = usesStaticTyping(config, beanDesc, null, null);\n         PropertyBuilder pb = constructPropertyBuilder(config, beanDesc);\n-\n+        \n         ArrayList<BeanPropertyWriter> result = new ArrayList<BeanPropertyWriter>(properties.size());\n         TypeBindings typeBind = beanDesc.bindingsForBeanType();\n         for (BeanPropertyDefinition property : properties) {\n             final AnnotatedMember accessor = property.getAccessor();\n-\n-            // [JACKSON-107]: object id is additional info\n-            if (property.isObjectId()) {\n-                builder.setObjectId(accessor);\n-                // but will also be serialized normally\n-            }\n             \n             // [JACKSON-762]: type id? Requires special handling:\n             if (property.isTypeId()) {\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/ObjectIdWriter.java\n+package com.fasterxml.jackson.databind.ser.impl;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+import com.fasterxml.jackson.core.JsonGenerationException;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Object that knows how to serialize Object Ids.\n+ */\n+public class ObjectIdWriter\n+{\n+    protected final JavaType _idType;\n+\n+    protected final String _propertyName;\n+    \n+    protected final ObjectIdGenerator<?> _generator;\n+\n+    /**\n+     * Logical property that represents the id.\n+     */\n+//    protected final BeanProperty _property;\n+    \n+    /**\n+     * Serializer used for serializing id values.\n+     */\n+    protected final JsonSerializer<Object> _serializer;\n+    \n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    protected ObjectIdWriter(JavaType idType, String propName, ObjectIdGenerator<?> gen,\n+            JsonSerializer<?> ser)\n+    {\n+        _idType = idType;\n+        _propertyName = propName;\n+        _generator = gen;\n+        _serializer = (JsonSerializer<Object>) ser;\n+    }\n+\n+    /**\n+     * Factory method called by {@link com.fasterxml.jackson.databind.ser.std.BeanSerializerBase}\n+     * with the initial information based on standard settings for the type\n+     * for which serializer is being built.\n+     */\n+    public static ObjectIdWriter construct(JavaType idType, String propertyName,\n+            ObjectIdGenerator<?> generator)\n+    {\n+        return new ObjectIdWriter(idType, propertyName, generator, null);\n+    }\n+\n+    public ObjectIdWriter withSerializer(SerializerProvider provider)\n+        throws JsonMappingException\n+    {\n+        JsonSerializer<?> ser = provider.findValueSerializer(_idType, null);\n+        return new ObjectIdWriter(_idType, _propertyName, _generator, ser);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Accessors\n+    /**********************************************************\n+     */\n+\n+    public JavaType getType() { return _idType; }\n+    public String getPropertyName() { return _propertyName; }\n+    \n+    /*\n+    /**********************************************************\n+    /* Serialization API\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method called to see if we could possibly just write a reference to previously\n+     * serialized POJO.\n+     */\n+    public boolean handleReference(Object pojo, JsonGenerator jgen, SerializerProvider provider)\n+            throws IOException, JsonGenerationException\n+    {\n+        Object id = provider.findObjectId(pojo);\n+        // if it has been serialized, just write reference:\n+        if (id == null) {\n+            return false;\n+        }\n+        _serializer.serialize(id, jgen, provider);\n+        return true;\n+    }        \n+\n+    /**\n+     * Method called to write Object Id as regular property, in case where POJO\n+     * has not yet been serialized.\n+     */\n+    public void writeAsProperty(Object pojo, JsonGenerator jgen, SerializerProvider provider)\n+            throws IOException, JsonGenerationException\n+    {\n+        Object id = _generator.generateId(pojo);\n+        provider.addObjectId(pojo, id);\n+        // if it has been serialized, just write reference:\n+        jgen.writeFieldName(_propertyName);\n+        _serializer.serialize(id, jgen, provider);\n+    }        \n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.*;\n-import com.fasterxml.jackson.databind.ser.impl.ObjectIdHandler;\n+import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n \n /**\n  */\n public abstract class BeanSerializerBase\n     extends StdSerializer<Object>\n-    implements ResolvableSerializer, SchemaAware\n+    implements ContextualSerializer, ResolvableSerializer,\n+        SchemaAware\n {\n     final protected static BeanPropertyWriter[] NO_PROPS = new BeanPropertyWriter[0];\n \n      * Note: not final since we need to get contextual instance during\n      * resolutuon.\n      */\n-    protected ObjectIdHandler _objectIdHandler;\n+    protected ObjectIdWriter _objectIdHandler;\n     \n     /**\n      * If using custom type ids (usually via getter, or field), this is the\n             _anyGetterWriter = builder.getAnyGetter();\n             _typeId = builder.getTypeId();\n             _propertyFilterId = builder.getFilterId();\n-            // need to create a property placeholder for object id:\n-            AnnotatedMember objectIdAcc = builder.getObjectId();\n-            if (objectIdAcc == null) {\n-                _objectIdHandler = null;\n-            } else {\n-                BeanDescription beanDesc = builder.getBeanDescription();\n-                AnnotatedMember oidMember = builder.getObjectId();\n-                JavaType oidType = beanDesc.resolveType(oidMember.getGenericType());\n-                BeanProperty.Std prop = new BeanProperty.Std(oidMember.getName(),\n-                        oidType, beanDesc.getClassAnnotations(), oidMember);\n-                _objectIdHandler = ObjectIdHandler.construct(prop);\n-            }\n+            _objectIdHandler = builder.getObjectIdHandler();\n         }\n     }\n \n         _objectIdHandler = src._objectIdHandler;\n         _typeId = src._typeId;\n         _propertyFilterId = src._propertyFilterId;\n+        _objectIdHandler = src._objectIdHandler;\n     }\n \n     /**\n \n     /*\n     /**********************************************************\n-    /* ResolvableSerializer impl\n+    /* Post-constriction processing: resolvable, contextual\n     /**********************************************************\n      */\n \n         }\n         // and ObjectIdHandler resolved, if there is one\n         if (_objectIdHandler != null) {\n-            _objectIdHandler = _objectIdHandler.createContextual(provider);\n-        }\n-    }    \n+            _objectIdHandler = _objectIdHandler.withSerializer(provider);\n+        }\n+    }\n+\n+    @Override\n+    public JsonSerializer<?> createContextual(SerializerProvider prov,\n+            BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        // Can't have any overrides for root values, so:\n+        if (property == null) {\n+            return this;\n+        }\n+\n+        /* Ok: here we may need to override ObjectIdHandler, if referring\n+         * property happens to redefine it.\n+         */\n+        final AnnotationIntrospector intr = prov.getAnnotationIntrospector();\n+        AnnotatedMember accessor = property.getMember();\n+        ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);\n+        if (objectIdInfo != null) {\n+            // !!! TODO: copy stuff from BeanSerializerFactory.constructObjectIdHandler(...)\n+            // ObjectIdGenerator<?> gen = prov.objectIdGeneratorInstance(property.getMember(), objectIdInfo.getGenerator());\n+        }\n+        return this;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Partial JsonSerializer implementation\n--- a/src/main/java/com/fasterxml/jackson/databind/util/ObjectIdMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ObjectIdMap.java\n package com.fasterxml.jackson.databind.util;\n \n import java.util.IdentityHashMap;\n-\n-import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n \n /**\n  * Map used during serialization, to keep track of referable Objects\n  * along with lazily evaluated ids.\n  */\n-public class ObjectIdMap\n+@SuppressWarnings(\"serial\")\n+public class ObjectIdMap extends IdentityHashMap<Object,Object>\n {\n-    public final IdentityHashMap<Object,Entry> _seenObjects;\n-    \n     public ObjectIdMap()\n     {\n-        _seenObjects = new IdentityHashMap<Object,Entry>(16);\n+        super(16);\n     }\n \n     /*\n      * it up as necessary); if not, we will mark down that we have\n      * seen it but return null.\n      */\n-    public Object findOrInsertId(Object pojo, AnnotatedMember idAccessor)\n+    public Object findId(Object pojo)\n     {\n-        Entry entry = _seenObjects.get(pojo);\n-        if (entry == null) { // no, first time: insert, return null\n-            _seenObjects.put(pojo, new Entry());\n-            return null;\n-        }\n-        Object id = entry.id;\n-        if (id == null) {\n-            id = idAccessor.getValue(pojo);\n-            entry.id = id;\n-        }\n-        return id;\n+        return get(pojo);\n     }\n     \n-    /*\n-    /**********************************************************\n-    /* Helper classes\n-    /**********************************************************\n-     */\n-\n-    protected final static class Entry\n+    public void insertId(Object pojo, Object id)\n     {\n-        /**\n-         * Lazily evaluated object id to use to represent object\n-         */\n-        public Object id;\n-\n-        public Entry() { }\n+        put(pojo, id);\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectId.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectId.java\n package com.fasterxml.jackson.databind.struct;\n \n-import com.fasterxml.jackson.annotation.JsonObjectId;\n+import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n \n import com.fasterxml.jackson.databind.*;\n \n public class TestObjectId extends BaseMapTest\n {\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"id\")\n     static class Identifiable\n     {\n-        @JsonObjectId\n-        public String id;\n-\n         public int value;\n \n         public Identifiable next;\n         \n-        public Identifiable() { this(null, 0); }\n-        public Identifiable(String id, int v) {\n-            this.id = id;\n+        public Identifiable() { this(0); }\n+        public Identifiable(int v) {\n             value = v;\n         }\n     }\n     \n     public void testSimpleCyclicSerialization() throws Exception\n     {\n-        Identifiable src = new Identifiable(\"x123\", 13);\n+        Identifiable src = new Identifiable(13);\n         src.next = src;\n         \n         // First, serialize:\n         String json = mapper.writeValueAsString(src);\n-        assertEquals(\"{\\\"id\\\":\\\"x123\\\",\\\"value\\\":13,\\\"next\\\":\\\"x123\\\"}\", json);\n+        assertEquals(\"{\\\"id\\\":1,\\\"value\\\":13,\\\"next\\\":1}\", json);\n     }\n         \n     public void testSimpleCyclicDeserialization() throws Exception\n     {\n         // then bring back...\n-        String input = \"{\\\"id\\\":\\\"x123\\\",\\\"value\\\":13,\\\"next\\\":\\\"x123\\\"}\";\n+        String input = \"{\\\"id\\\":1,\\\"value\\\":13,\\\"next\\\":1}\";\n         Identifiable result = mapper.readValue(input, Identifiable.class);\n         assertEquals(13, result.value);\n-        assertEquals(\"x123\", result.id);\n+//        assertEquals(1, result.id);\n         assertSame(result, result.next);\n     }\n }", "timestamp": 1328597080, "metainfo": ""}