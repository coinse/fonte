{"sha": "7b0913f9d7322295fb670b264f4ef02ac91a76a0", "log": "Improve javadocs wrt #555", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      *<p>\n      * NOTE: since this method does NOT throw exceptions, but internal\n      * processing may, caller usually has little information as to why\n-     * serialization would fail.\n+     * serialization would fail. If you want access to internal {@link Exception},\n+     * call {@link #canSerialize(Class, AtomicReference)} instead.\n      *\n      * @return True if mapper can find a serializer for instances of\n      *  given class (potentially serializable), false otherwise (not\n     /**\n      * Method that can be called to check whether mapper thinks\n      * it could deserialize an Object of given type.\n-     * Check is done\n-     * by checking whether a deserializer can be found for the type.\n+     * Check is done by checking whether a registered deserializer can\n+     * be found or built for the type; if not (either by no mapping being\n+     * found, or through an <code>Exception</code> being thrown, false\n+     * is returned.\n+     *<p>\n+     * <b>NOTE</b>: in case an exception is thrown during course of trying\n+     * co construct matching deserializer, it will be effectively swallowed.\n+     * If you want access to that exception, call\n+     * {@link #canDeserialize(JavaType, AtomicReference) instead.\n      *\n      * @return True if mapper can find a serializer for instances of\n      *  given class (potentially serializable), false otherwise (not", "timestamp": 1411509289, "metainfo": ""}