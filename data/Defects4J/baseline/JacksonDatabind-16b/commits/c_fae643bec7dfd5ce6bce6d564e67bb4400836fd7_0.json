{"sha": "fae643bec7dfd5ce6bce6d564e67bb4400836fd7", "log": "Completed #308, serialization speeded up by 4x as well", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java\n             v2.format(JsonValueFormat.DATE_TIME);\n         }\n     }\n-}\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n         sers.put(java.net.URI.class, sls);\n \n         sers.put(Currency.class, sls);\n-        sers.put(UUID.class, sls);\n+        sers.put(UUID.class, new UUIDSerializer());\n         sers.put(java.util.regex.Pattern.class, sls);\n         sers.put(Locale.class, sls);\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         throws JsonMappingException\n     {\n-        visitor.expectAnyFormat(typeHint);\n+        if (visitor != null) {\n+            // 13-Sep-2013, tatu: Let's assume it's usually a String, right?\n+//            visitor.expectAnyFormat(typeHint);\n+            visitor.expectStringFormat(typeHint);\n+        }\n     }\n }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java\n+package com.fasterxml.jackson.databind.ser.std;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonGenerationException;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.*;\n+\n+public class UUIDSerializer\n+    extends StdScalarSerializer<UUID>\n+{\n+    final static char[] HEX_CHARS = \"01234567890abcdef\".toCharArray();\n+    \n+    public UUIDSerializer() { super(UUID.class); }\n+\n+    @Override\n+    public boolean isEmpty(UUID value)\n+    {\n+        if (value == null) {\n+            return true;\n+        }\n+        // Null UUID is empty, so...\n+        if (value.getLeastSignificantBits() == 0L\n+                && value.getMostSignificantBits() == 0L) {\n+            return true;\n+        }\n+        return false;\n+    }\n+    \n+    @Override\n+    public void serialize(UUID value, JsonGenerator jgen, SerializerProvider provider)\n+        throws IOException, JsonGenerationException\n+    {\n+        // UUID.toString() works ok but we can make it go faster...\n+\n+        final char[] ch = new char[36];\n+        final long msb = value.getMostSignificantBits();\n+        _appendInt((int) (msb >> 32), ch, 0);\n+        ch[8] = '-';\n+        int i = (int) msb;\n+        _appendShort(i >>> 16, ch, 9);\n+        ch[13] = '-';\n+        _appendShort(i, ch, 14);\n+        ch[18] = '-';\n+\n+        final long lsb = value.getLeastSignificantBits();\n+        _appendShort((int) (lsb >>> 48), ch, 19);\n+        ch[23] = '-';\n+        _appendShort((int) (lsb >>> 32), ch, 24);\n+        _appendInt((int) lsb, ch, 28);\n+\n+        jgen.writeString(ch, 0, 36);\n+    }\n+\n+    private static void _appendInt(int bits, char[] ch, int offset)\n+    {\n+        _appendShort(bits >> 16, ch, offset);\n+        _appendShort(bits, ch, offset+4);\n+    }\n+    \n+    private static void _appendShort(int bits, char[] ch, int offset)\n+    {\n+        ch[offset] = HEX_CHARS[(bits >> 12) & 0xF];\n+        ch[++offset] = HEX_CHARS[(bits >> 8) & 0xF];\n+        ch[++offset] = HEX_CHARS[(bits >> 4) & 0xF];\n+        ch[++offset] = HEX_CHARS[bits  & 0xF];\n+\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java\n         bbuf2.put(INPUT_BYTES);\n         assertEquals(exp, MAPPER.writeValueAsString(bbuf2));\n     }\n+\n+    // Verify that efficient UUID codec won't mess things up:\n+    public void testUUIDs() throws IOException\n+    {\n+        // first, couple of generated UUIDs:\n+        for (String value : new String[] {\n+                \"76e6d183-5f68-4afa-b94a-922c1fdb83f8\",\n+                \"00000007-0000-0000-0000-000000000000\"\n+        }) {\n+            UUID uuid = UUID.fromString(value);\n+            assertEquals(quote(uuid.toString()), MAPPER.writeValueAsString(value));\n+        }\n+        // then use templating; note that these are not exactly valid UUIDs\n+        // wrt spec (type bits etc), but JDK UUID should deal ok\n+        final String TEMPL = \"00000000-0000-0000-0000-000000000000\";\n+        final String chars = \"123456789abcdef\";\n+\n+        for (int i = 0; i < chars.length(); ++i) {\n+            String value = TEMPL.replace('0', chars.charAt(i));\n+            UUID uuid = UUID.fromString(value);\n+            assertEquals(quote(uuid.toString()), MAPPER.writeValueAsString(value));\n+        }\n+    }\n }\n--- a/src/test/java/perf/ManualReadPerfWithRecord.java\n+++ b/src/test/java/perf/ManualReadPerfWithRecord.java\n  */\n public class ManualReadPerfWithRecord extends ObjectReaderBase\n {\n- \n     public static void main(String[] args) throws Exception\n     {\n         if (args.length != 0) {\n--- a/src/test/java/perf/ManualReadPerfWithUUID.java\n+++ b/src/test/java/perf/ManualReadPerfWithUUID.java\n \n         ObjectMapper m = new ObjectMapper();\n \n-        new ManualReadPerfWithRecord().test(m, \"JSON-as-Object\", input1, UUIDNative.class,\n+        new ManualReadPerfWithRecord().test(\n+                m, \"JSON-as-Object\", input1, UUIDNative.class,\n                 m, \"JSON-as-Array\", input2, UUIDWithJdk.class);\n     }\n }\n--- /dev/null\n+++ b/src/test/java/perf/ManualWritePerfWithRecord.java\n+package perf;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class ManualWritePerfWithRecord\n+    extends ObjectWriterBase<Record, RecordAsArray>\n+{\n+    public static void main(String[] args) throws Exception\n+    {\n+        if (args.length != 0) {\n+            System.err.println(\"Usage: java ...\");\n+            System.exit(1);\n+        }\n+        Record input1 = new Record(44, \"BillyBob\", \"Bumbler\", 'm', true);\n+        RecordAsArray input2 = new RecordAsArray(44, \"BillyBob\", \"Bumbler\", 'm', true);\n+        ObjectMapper m = new ObjectMapper();\n+        new ManualWritePerfWithRecord().test(m,\n+                \"JSON-as-Object\", input1, Record.class,\n+                \"JSON-as-Array\", input2, RecordAsArray.class);\n+              \n+        \n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/perf/ManulWritePerfWithUUID.java\n+package perf;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonGenerationException;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdScalarSerializer;\n+\n+public class ManulWritePerfWithUUID\n+    extends ObjectWriterBase<UUIDFast, UUIDSlow>\n+{\n+    \n+    public static void main(String[] args) throws Exception\n+    {\n+        if (args.length != 0) {\n+            System.err.println(\"Usage: java ...\");\n+            System.exit(1);\n+        }\n+        UUID[] uuids = new UUID[8];\n+        for (int i = 0; i < uuids.length; ++i) {\n+            uuids[i] = UUID.randomUUID();\n+        }\n+        ObjectMapper m = new ObjectMapper();\n+        new ManulWritePerfWithUUID().test(m,\n+                \"faster-UUID\", new UUIDFast(uuids), UUIDFast.class,\n+                \"JDK-UUID\", new UUIDSlow(uuids), UUIDSlow.class);\n+    }\n+}\n+\n+class UUIDFast\n+{\n+    public final UUID[] values;\n+\n+    public UUIDFast(UUID[] v) { values = v; }\n+}\n+\n+class UUIDSlow\n+{\n+    @JsonSerialize(contentUsing=SlowSer.class)\n+    public final UUID[] values;\n+    \n+    public UUIDSlow(UUID[] v) { values = v; }\n+}\n+\n+class SlowSer extends StdScalarSerializer<UUID>\n+{\n+    public SlowSer() { super(UUID.class); }\n+\n+    @Override\n+    public void serialize(UUID value, JsonGenerator jgen,\n+            SerializerProvider provider) throws IOException,\n+            JsonGenerationException {\n+        jgen.writeString(value.toString());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/perf/ObjectWriterBase.java\n+package perf;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+abstract class ObjectWriterBase<T1,T2>\n+{\n+    protected int hash;\n+    \n+    protected void test(ObjectMapper mapper,\n+            String desc1, T1 inputValue1, Class<T1> inputClass1,\n+            String desc2, T2 inputValue2, Class<T2> inputClass2)\n+        throws Exception\n+    {\n+        final int REPS;\n+        {\n+            final byte[] input1 = mapper.writeValueAsBytes(inputValue1);\n+            final byte[] input2 = mapper.writeValueAsBytes(inputValue2);\n+            \n+            // Let's try to guestimate suitable size, N megs of output\n+            REPS = (int) ((double) (9 * 1000 * 1000) / (double) input1.length);\n+            System.out.printf(\"Read %d bytes to bind (%d as array); will do %d repetitions\\n\",\n+                    input1.length, input2.length, REPS);\n+        }\n+\n+        final ObjectWriter writer0 = mapper.writer().with(SerializationFeature.EAGER_SERIALIZER_FETCH);\n+        final ObjectWriter jsonWriter = writer0.withType(inputClass1);\n+        final ObjectWriter arrayWriter = writer0.withType(inputClass2);\n+        \n+        int i = 0;\n+        int roundsDone = 0;\n+        final int TYPES = 2;\n+        final int WARMUP_ROUNDS = 5;\n+\n+        final long[] times = new long[TYPES];\n+\n+        while (true) {\n+            @SuppressWarnings(\"resource\")\n+            final NopOutputStream out = new NopOutputStream();\n+            try {  Thread.sleep(100L); } catch (InterruptedException ie) { }\n+            int round = (i++ % TYPES);\n+\n+            String msg;\n+            boolean lf = (round == 0);\n+\n+            long msecs;\n+            ObjectWriter writer;\n+            Object value;\n+            switch (round) {\n+            case 0:\n+                msg = desc1;\n+                writer = jsonWriter;\n+                value = inputValue1;\n+                break;\n+            case 1:\n+                msg = desc2;\n+                writer = arrayWriter;\n+                value = inputValue2;\n+                break;\n+            default:\n+               out.close(); // silly eclipse juno\n+                throw new Error();\n+            }\n+            msecs = testSer(REPS, value, writer, out);\n+\n+            // skip first 5 rounds to let results stabilize\n+            if (roundsDone >= WARMUP_ROUNDS) {\n+                times[round] += msecs;\n+            }\n+            \n+            System.out.printf(\"Test '%s' [hash: 0x%s] -> %d msecs\\n\", msg, this.hash, msecs);\n+            if (lf) {\n+                ++roundsDone;\n+                if ((roundsDone % 3) == 0 && roundsDone > WARMUP_ROUNDS) {\n+                    double den = (double) (roundsDone - WARMUP_ROUNDS);\n+                    System.out.printf(\"Averages after %d rounds (pre / no): %.1f / %.1f msecs\\n\",\n+                            (int) den,\n+                            times[0] / den, times[1] / den);\n+                            \n+                }\n+                System.out.println();\n+            }\n+            if ((i % 17) == 0) {\n+                System.out.println(\"[GC]\");\n+                Thread.sleep(100L);\n+                System.gc();\n+                Thread.sleep(100L);\n+            }\n+        }\n+    }\n+\n+    protected final long testSer(int REPS, Object value, ObjectWriter writer, NopOutputStream out) throws Exception\n+    {\n+        long start = System.currentTimeMillis();\n+        while (--REPS >= 0) {\n+            writer.writeValue(out, value);\n+        }\n+        hash = out.size();\n+        return System.currentTimeMillis() - start;\n+    }\n+}", "timestamp": 1379140471, "metainfo": ""}