{"sha": "09ebacb8e6e4271e9651bebe81cbc80c081b7d83", "log": "Implemented #319", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextAttributeWithDeser.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextAttributeWithDeser.java\n package com.fasterxml.jackson.databind.contextual;\n \n-import com.fasterxml.jackson.databind.BaseMapTest;\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;\n \n public class TestContextAttributeWithDeser extends BaseMapTest\n {\n+    final static String KEY = \"foobar\";\n+    \n+    @SuppressWarnings(\"serial\")\n+    static class PrefixStringDeserializer extends StdScalarDeserializer<String>\n+    {\n+        protected PrefixStringDeserializer() {\n+            super(String.class);\n+        }\n \n+        @Override\n+        public String deserialize(JsonParser jp, DeserializationContext ctxt)\n+            throws IOException\n+        {\n+            Integer I = (Integer) ctxt.getAttribute(KEY);\n+            if (I == null) {\n+                I = Integer.valueOf(0);\n+            }\n+            int i = I.intValue();\n+            ctxt.setAttribute(KEY, Integer.valueOf(i + 1));\n+            return jp.getText()+\"/\"+i;\n+        }\n+\n+    }\n+\n+    static class TestPOJO\n+    {\n+        @JsonDeserialize(using=PrefixStringDeserializer.class)\n+        public String value;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    final ObjectMapper MAPPER = objectMapper();\n+    \n+    public void testSimplePerCall() throws Exception\n+    {\n+        TestPOJO[] pojos = MAPPER.reader(TestPOJO[].class)\n+            .readValue(aposToQuotes(\"[{'value':'a'},{'value':'b'}]\"));\n+        assertEquals(2, pojos.length);\n+        assertEquals(\"a/0\", pojos[0].value);\n+        assertEquals(\"b/1\", pojos[1].value);\n+    }\n+\n+    public void testSimpleDefaults() throws Exception\n+    {\n+        TestPOJO pojo = MAPPER.reader(TestPOJO.class)\n+                .withAttribute(KEY, Integer.valueOf(3))\n+                .readValue(aposToQuotes(\"{'value':'x'}\"));\n+        assertEquals(\"x/3\", pojo.value);\n+    }\n+\n+    public void testHierarchic() throws Exception\n+    {\n+        ObjectReader r = MAPPER.reader(TestPOJO[].class).withAttribute(KEY, Integer.valueOf(2));\n+        TestPOJO[] pojos = r.readValue(aposToQuotes(\"[{'value':'x'},{'value':'y'}]\"));\n+        assertEquals(2, pojos.length);\n+        assertEquals(\"x/2\", pojos[0].value);\n+        assertEquals(\"y/3\", pojos[1].value);\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextAttributeWithSer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextAttributeWithSer.java\n                 I = Integer.valueOf(0);\n             }\n             int i = I.intValue();\n+            provider.setAttribute(KEY, Integer.valueOf(i + 1));\n             jgen.writeString(\"\" +i+\":\"+value);\n-            provider.setAttribute(KEY, Integer.valueOf(i + 1));\n         }\n     }\n ", "timestamp": 1381204733, "metainfo": ""}