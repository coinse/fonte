{"sha": "4cfa16fb7a0a349162270301c260a5d0146af020", "log": "Add a (failing) test for #622", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/JSOGDeserialize622Test.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class JSOGDeserialize622Test extends BaseMapTest\n+{\n+  /** the key of the property that holds the ref */\n+  public static final String REF_KEY = \"@ref\";\n+\n+  /**\n+   * JSON input\n+   */\n+  private static final String EXP_EXAMPLE_JSOG =  aposToQuotes(\n+          \"{'@id':'1','foo':66,'next':{'@ref':'1'}}\");\n+\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  /**\n+   * Customer IdGenerator\n+   */\n+  static class JSOGGenerator extends ObjectIdGenerator<JSOGRef>  {\n+\n+    private static final long serialVersionUID = 1L;\n+    protected transient int _nextValue;\n+    protected final Class<?> _scope;\n+\n+    protected JSOGGenerator() { this(null, -1); }\n+\n+    protected JSOGGenerator(Class<?> scope, int nextValue) {\n+        _scope = scope;\n+        _nextValue = nextValue;\n+    }\n+\n+    @Override\n+    public Class<?> getScope() {\n+        return _scope;\n+    }\n+\n+    @Override\n+    public boolean canUseFor(ObjectIdGenerator<?> gen) {\n+        return (gen.getClass() == getClass()) && (gen.getScope() == _scope);\n+    }\n+\n+    @Override\n+    public ObjectIdGenerator<JSOGRef> forScope(Class<?> scope) {\n+          return (_scope == scope) ? this : new JSOGGenerator(scope, _nextValue);\n+    }\n+\n+    @Override\n+    public ObjectIdGenerator<JSOGRef> newForSerialization(Object context) {\n+          return new JSOGGenerator(_scope, 1);\n+    }\n+\n+    @Override\n+    public com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey key(Object key) {\n+          return new IdKey(getClass(), _scope, key);\n+    }\n+\n+    @Override\n+    public JSOGRef generateId(Object forPojo) {\n+          int id = _nextValue;\n+          ++_nextValue;\n+          return new JSOGRef(id);\n+    }\n+  }\n+\n+  /**\n+   * The reference deserializer\n+   */\n+  static class JSOGRefDeserializer extends JsonDeserializer<JSOGRef>\n+  {\n+    @Override\n+    public JSOGRef deserialize(JsonParser jp, DeserializationContext ctx) throws IOException, JsonProcessingException {\n+      JsonNode node = jp.readValueAsTree();\n+      return node.isTextual()\n+              ? new JSOGRef(node.asInt()) : new JSOGRef(node.get(REF_KEY).asInt());\n+    }\n+  }\n+\n+  /**\n+   * The reference object\n+   */\n+  @JsonDeserialize(using=JSOGRefDeserializer.class)\n+  static class JSOGRef\n+  {\n+    @JsonProperty(REF_KEY)\n+    public int ref;\n+\n+    public JSOGRef() { }\n+\n+    public JSOGRef(int val) {\n+      ref = val;\n+    }\n+  }\n+\n+\n+  /**\n+   * Example class using JSOGGenerator\n+   */\n+  @JsonIdentityInfo(generator=JSOGGenerator.class)\n+  public static class IdentifiableExampleJSOG {\n+    public int foo;\n+    public IdentifiableExampleJSOG next;\n+  }\n+\n+  /*\n+  /**********************************************************************\n+  /* Test methods\n+  /**********************************************************************\n+   */\n+\n+  // for [databind#622]\n+  public void testStructJSOGRef() throws Exception {\n+\n+    // Because the value ({@ref:1}) is not scalar, parser thinks it is not an id \n+    // and tries to deserialize as normal a new IdentifiableExampleJSOG \n+    // then  complains about unrecognized field \"@ref\"\n+    IdentifiableExampleJSOG result = mapper.readValue(EXP_EXAMPLE_JSOG,\n+            IdentifiableExampleJSOG.class);\n+\n+    assertEquals(66, result.foo);\n+    assertSame(result, result.next);\n+  }\n+}", "timestamp": 1416629330, "metainfo": ""}