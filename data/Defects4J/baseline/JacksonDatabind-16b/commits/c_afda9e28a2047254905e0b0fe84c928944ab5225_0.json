{"sha": "afda9e28a2047254905e0b0fe84c928944ab5225", "log": "minor trimming, trying to diagnose #538", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n     @SuppressWarnings(\"resource\")\n     protected Object _deserializeUsingPropertyBased(final JsonParser jp, final DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n-    { \n+    {\n         final PropertyBasedCreator creator = _propertyBasedCreator;\n         PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt, _objectIdReader);\n         \n             unknown.writeFieldName(propName);\n             unknown.copyCurrentStructure(jp);\n         }\n-\n+        \n         // We hit END_OBJECT, so:\n         Object bean;\n         try {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n      * buffering in some cases, but usually just a simple lookup to ensure\n      * that ordering is correct.\n      */\n-    protected Object deserializeWithObjectId(JsonParser jp, DeserializationContext ctxt) throws IOException\n-    {\n+    protected Object deserializeWithObjectId(JsonParser jp, DeserializationContext ctxt) throws IOException {\n         return deserializeFromObject(jp, ctxt);\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n     public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType)\n     {\n         final ObjectIdGenerator.IdKey key = gen.key(id);\n+\n         if (_objectIds == null) {\n             _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey,ReadableObjectId>();\n         } else {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n      * @since 2.0\n      */\n     public abstract Object setAndReturn(Object instance, Object value)\n-            throws IOException;\n+        throws IOException;\n     \n     /**\n      * This method is needed by some specialized bean deserializers,\n      * this method should also not be called directly unless you really know\n      * what you are doing (and probably not even then).\n      */\n-    public final Object deserialize(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n+    public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n     {\n         JsonToken t = jp.getCurrentToken();\n         \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java\n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n import com.fasterxml.jackson.annotation.ObjectIdResolver;\n import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;\n+\n import com.fasterxml.jackson.core.JsonParser;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n+\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n \n      */\n     public final ObjectIdGenerator<?> generator;\n \n-    /**\n-     * \n-     */\n     public final ObjectIdResolver resolver;\n \n     /**\n         this(t,propName, gen, deser, idProp, new SimpleObjectIdResolver());\n     }\n \n-    @Deprecated // since 2.3\n-    protected ObjectIdReader(JavaType t, String propName, ObjectIdGenerator<?> gen,\n-            JsonDeserializer<?> deser, SettableBeanProperty idProp)\n-    {\n-        this(t, new PropertyName(propName), gen, deser, idProp);\n-    }\n-\n     /**\n      * Factory method called by {@link com.fasterxml.jackson.databind.ser.std.BeanSerializerBase}\n      * with the initial information based on standard settings for the type\n             SettableBeanProperty idProp)\n     {\n         return construct(idType, propName, generator, deser, idProp, new SimpleObjectIdResolver());\n-    }\n-    \n-    @Deprecated // since 2.3\n-    public static ObjectIdReader construct(JavaType idType, String propName,\n-            ObjectIdGenerator<?> generator, JsonDeserializer<?> deser,\n-            SettableBeanProperty idProp)\n-    {\n-        return construct(idType, new PropertyName(propName), generator, deser, idProp);\n     }\n \n     /*\n      * \n      * @since 2.3\n      */\n-    public Object readObjectReference(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n-    {\n+    public Object readObjectReference(JsonParser jp, DeserializationContext ctxt) throws IOException {\n         return _deserializer.deserialize(jp, ctxt);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty.java\n import java.lang.annotation.Annotation;\n \n import com.fasterxml.jackson.core.JsonParser;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.PropertyName;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;\n import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;\n import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n \n public class ObjectIdReferenceProperty extends SettableBeanProperty {\n-    private static final long serialVersionUID = 8465266677345565407L;\n-    private SettableBeanProperty _forward;\n+    private static final long serialVersionUID = 1L;\n+\n+    private final SettableBeanProperty _forward;\n \n     public ObjectIdReferenceProperty(SettableBeanProperty forward, ObjectIdInfo objectIdInfo)\n     {\n     }\n \n     @Override\n-    public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object instance)\n-        throws IOException, JsonProcessingException\n-    {\n+    public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n         deserializeSetAndReturn(jp, ctxt, instance);\n     }\n \n     @Override\n     public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance)\n-        throws IOException, JsonProcessingException\n+        throws IOException\n     {\n-        boolean usingIdentityInfo = (_objectIdInfo != null) || (_valueDeserializer.getObjectIdReader() != null);\n         try {\n             return setAndReturn(instance, deserialize(jp, ctxt));\n         } catch (UnresolvedForwardReference reference) {\n+            boolean usingIdentityInfo = (_objectIdInfo != null) || (_valueDeserializer.getObjectIdReader() != null);\n             if (!usingIdentityInfo) {\n                 throw JsonMappingException.from(jp, \"Unresolved forward reference but no identity info.\", reference);\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java\n     /**\n      * Helper method called to handle Object Id value collected earlier, if any\n      */\n-    public Object handleIdValue(final DeserializationContext ctxt, Object bean)\n-        throws IOException\n+    public Object handleIdValue(final DeserializationContext ctxt, Object bean) throws IOException\n     {\n         if (_objectIdReader != null) {\n             if (_idValue != null) {\n                 }\n             } else {\n                 // TODO: is this an error case?\n+                throw ctxt.mappingException(\"No _idValue when handleIdValue called, on instance of \"\n+                        +bean.getClass().getName());\n             }\n         }\n         return bean;\n--- a/src/test/java/com/fasterxml/jackson/failing/TestObjectIdWithInjectables538.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestObjectIdWithInjectables538.java\n     public static class A {\n         public B b;\n \n-        public A(@JacksonInject(\"i1\") String injected) {}\n+        public A(@JacksonInject(\"i1\") String injected) {\n+        }\n     }\n \n     @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class)\n     public static class B {\n         public A a;\n \n-        public B(@JacksonInject(\"i2\") String injected) {}\n+        public B(@JacksonInject(\"i2\") String injected) {\n+        }\n     } \n \n     /*\n \n     public void testWithInjectables538() throws Exception\n     {\n-        A a = new A(null);\n-        B b = new B(null);\n+        A a = new A(\"a\");\n+        B b = new B(\"b\");\n         a.b = b;\n         b.a = a;\n \n         String json = MAPPER.writeValueAsString(a);\n-        \n+\n         InjectableValues.Std inject = new InjectableValues.Std();\n         inject.addValue(\"i1\", \"e1\");\n         inject.addValue(\"i2\", \"e2\");", "timestamp": 1413519619, "metainfo": ""}