{"sha": "ec1820d591bbb51edb96942444d1806e2b86bc12", "log": "Fix #738", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n      * Method that will try to construct a value serializer; and if\n      * one is successfully created, cache it for reuse.\n      */\n-    protected JsonSerializer<Object> _createAndCacheUntypedSerializer(Class<?> type)\n-        throws JsonMappingException\n-    {        \n+    protected JsonSerializer<Object> _createAndCacheUntypedSerializer(Class<?> rawType)\n+        throws JsonMappingException\n+    {\n+        JavaType type = _config.constructType(rawType);\n         JsonSerializer<Object> ser;\n         try {\n-            ser = _createUntypedSerializer(_config.constructType(type));\n+            ser = _createUntypedSerializer(type);\n         } catch (IllegalArgumentException iae) {\n             /* We better only expose checked exceptions, since those\n              * are what caller is expected to handle\n     protected JsonSerializer<Object> _createUntypedSerializer(JavaType type)\n         throws JsonMappingException\n     {\n-        // 17-Feb-2013, tatu: Used to call deprecated method (that passed property)\n-        return (JsonSerializer<Object>)_serializerFactory.createSerializer(this, type);\n+        /* 27-Mar-2015, tatu: Wish I knew exactly why/what, but [databind#738]\n+         *    can be prevented by synchronizing on cache (not on 'this', however,\n+         *    since there's one instance per serialization).\n+         *   Perhaps not-yet-resolved instance might be exposed too early to callers.\n+         */\n+        synchronized (_serializerCache) {\n+            // 17-Feb-2013, tatu: Used to call deprecated method (that passed property)\n+            return (JsonSerializer<Object>)_serializerFactory.createSerializer(this, type);\n+        }\n     }\n \n     /**\n--- a/src/test/java/com/fasterxml/jackson/failing/RaceCondition738Test.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/RaceCondition738Test.java\n      */\n     \n     public void testRepeatedly() throws Exception {\n-        final int COUNT = 50;\n+        final int COUNT = 2000;\n         for (int i = 0; i < COUNT; i++) {\n             runOnce(i, COUNT);\n         }\n             JsonNode wrapped = tree.get(\"hasSubTypes\");\n \n             if (!wrapped.has(\"one\")) {\n-System.out.println(\"JSON wrong: \"+json);\n                 throw new IllegalStateException(\"Round #\"+round+\"/\"+max+\" ; missing property 'one', source: \"+json);\n             }\n-System.out.println(\"JSON fine: \"+json);\n         }\n     }\n ", "timestamp": 1427500552, "metainfo": ""}