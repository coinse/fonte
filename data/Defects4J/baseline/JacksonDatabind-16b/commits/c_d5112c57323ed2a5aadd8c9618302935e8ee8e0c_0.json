{"sha": "d5112c57323ed2a5aadd8c9618302935e8ee8e0c", "log": "Merge branch 'master' of github.com:FasterXML/jackson-databind", "commit": "\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n+package com.fasterxml.jackson.databind.deser.std;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.databind.util.Converter;\n+\n+/**\n+ * Deserializer implementation where given Java type is first deserialized\n+ * by a standard Jackson deserializer into a delegate type; and then\n+ * this delegate type is converted using a configured\n+ * {@link Converter} into desired target type.\n+ * Common delegate types to use are {@link java.util.Map}\n+ * and {@link com.fasterxml.jackson.databind.JsonNode}.\n+ *<p>\n+ * Note that although types (delegate, target) may be related, they must not be same; trying\n+ * to do this will result in an exception.\n+ * \n+ * @param <T> Target type to convert to, from delegate type\n+ * \n+ * @since 2.1\n+ */\n+public class StdDelegatingDeserializer<T>\n+    extends StdDeserializer<T>\n+    implements ContextualDeserializer\n+{\n+    protected final Converter<Object,T> _converter;\n+    \n+    /**\n+     * Fully resolved delegate type, with generic information if any available.\n+     */\n+    protected final JavaType _delegateType;\n+    \n+    /**\n+     * Underlying serializer for type <code>T<.code>.\n+     */\n+    protected final JsonDeserializer<Object> _delegateDeserializer;\n+    \n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public StdDelegatingDeserializer(Converter<?,T> converter)\n+    {\n+        super(Object.class);\n+        _converter = (Converter<Object,T>)converter;\n+        _delegateType = null;\n+        _delegateDeserializer = null;\n+    }\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    protected StdDelegatingDeserializer(Converter<Object,T> converter,\n+            JavaType delegateType, JsonDeserializer<?> delegateDeserializer)\n+    {\n+        super(delegateType);\n+        _converter = converter;\n+        _delegateType = delegateType;\n+        _delegateDeserializer = (JsonDeserializer<Object>) delegateDeserializer;\n+    }\n+\n+    /**\n+     * Method used for creating resolved contextual instances. Must be\n+     * overridden when sub-classing.\n+     */\n+    protected StdDelegatingDeserializer<T> withDelegate(Converter<Object,T> converter,\n+            JavaType delegateType, JsonDeserializer<?> delegateDeserializer)\n+    {\n+        if (getClass() != StdDelegatingDeserializer.class) {\n+            throw new IllegalStateException(\"Sub-class \"+getClass().getName()+\" must override 'withDelegate'\");\n+        }\n+        return new StdDelegatingDeserializer<T>(converter, delegateType, delegateDeserializer);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Contextualization\n+    /**********************************************************\n+     */\n+    \n+\n+    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        // First: figure out what is the fully generic delegate type:\n+        TypeFactory tf = ctxt.getTypeFactory();\n+        JavaType implType = tf.constructType(_converter.getClass());\n+        JavaType[] params = tf.findTypeParameters(implType, Converter.class);\n+        if (params == null || params.length != 2) {\n+            throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n+                    +implType);\n+        }\n+        // and then we can find serializer to delegate to, construct a new instance:\n+        JavaType delegateType = params[0];\n+        return withDelegate(_converter, delegateType,\n+                ctxt.findContextualValueDeserializer(delegateType, property));\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Serialization\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public T deserialize(JsonParser jp, DeserializationContext ctxt)\n+            throws IOException, JsonProcessingException {\n+        Object delegateValue = _delegateDeserializer.deserialize(jp, ctxt);\n+        return (delegateValue == null) ? null : _converter.convert(delegateValue);\n+    }\n+\n+    @Override\n+    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n+            TypeDeserializer typeDeserializer)\n+        throws IOException, JsonProcessingException\n+    {\n+        /* 03-Oct-2012, tatu: This is actually unlikely to work ok... but for now,\n+         *    let's give it a chance?\n+         */\n+        Object delegateValue = _delegateDeserializer.deserializeWithType(jp, ctxt,\n+                typeDeserializer);\n+        return (delegateValue == null) ? null : _converter.convert(delegateValue);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Serialization\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public JsonDeserializer<?> getDelegatee() {\n+        return _delegateDeserializer;\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\n     @SuppressWarnings(\"unchecked\")\n     public StdDelegatingSerializer(Converter<?,?> converter)\n     {\n-        super(Object.class, false);\n+        super(Object.class);\n         _converter = (Converter<Object,?>)converter;\n         _delegateType = null;\n         _delegateSerializer = null;\n      * Method used for creating resolved contextual instances. Must be\n      * overridden when sub-classing.\n      */\n-    protected JsonSerializer<?> withDelegate(Converter<Object,?> converter,\n+    protected StdDelegatingSerializer withDelegate(Converter<Object,?> converter,\n             JavaType delegateType, JsonSerializer<?> delegateSerializer)\n     {\n         if (getClass() != StdDelegatingSerializer.class) {\n             TypeSerializer typeSer)\n         throws IOException, JsonProcessingException\n     {\n+        /* 03-Oct-2012, tatu: This is actually unlikely to work ok... but for now,\n+         *    let's give it a chance?\n+         */\n         Object delegateValue = _converter.convert(value);\n         _delegateSerializer.serializeWithType(delegateValue, jgen, provider, typeSer);\n     }\n     /* Schema functionality\n     /**********************************************************\n      */\n-    \n+\n+    @Override\n     public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n         throws JsonMappingException\n     {\n         return super.getSchema(provider, typeHint);\n     }\n \n+    @Override\n     public JsonNode getSchema(SerializerProvider provider, Type typeHint,\n         boolean isOptional) throws JsonMappingException\n     {\n         return super.getSchema(provider, typeHint);\n     }\n \n+    @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n         if (_delegateSerializer instanceof JsonFormatVisitable) {\n         }\n         super.acceptJsonFormatVisitor(visitor, typeHint);\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Other\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public JsonSerializer<?> getDelegatee() {\n+        return _delegateSerializer;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n         _reportUnsupportedOperation();\n     }\n \n+    @Override\n     public void writeRaw(SerializableString text) throws IOException, JsonGenerationException {\n         _reportUnsupportedOperation();\n     }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n+package com.fasterxml.jackson.databind.deser;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.util.Converter;\n+\n+/**\n+ * Test to check that customizations work as expected.\n+ */\n+public class TestCustomDeserializers\n+    extends BaseMapTest\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper classes\n+    /**********************************************************\n+     */\n+\n+    static class DummyDeserializer<T>\n+        extends StdDeserializer<T>\n+    {\n+        final T value;\n+\n+        public DummyDeserializer(T v, Class<T> cls) {\n+            super(cls);\n+            value = v;\n+        }\n+\n+        @Override\n+        public T deserialize(JsonParser jp, DeserializationContext ctxt)\n+            throws IOException, JsonProcessingException\n+        {\n+            // need to skip, if structured...\n+            jp.skipChildren();\n+            return value;\n+        }\n+    }\n+\n+    static class TestBeans {\n+        public List<TestBean> beans;\n+    }\n+    static class TestBean {\n+        public CustomBean c;\n+        public String d;\n+    }\n+    @JsonDeserialize(using=CustomBeanDeserializer.class)\n+    static class CustomBean {\n+        protected final int a, b;\n+        public CustomBean(int a, int b) {\n+            this.a = a;\n+            this.b = b;\n+        }\n+    }\n+\n+    static class CustomBeanDeserializer extends JsonDeserializer<CustomBean>\n+    {\n+        @Override\n+        public CustomBean deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n+        {\n+            int a = 0, b = 0;\n+            JsonToken t = jp.getCurrentToken();\n+            if (t == JsonToken.START_OBJECT) {\n+                t = jp.nextToken();\n+            } else if (t != JsonToken.FIELD_NAME) {\n+                throw new Error();\n+            }\n+            while(t == JsonToken.FIELD_NAME) {\n+                final String fieldName = jp.getCurrentName();\n+                t = jp.nextToken();\n+                if (t != JsonToken.VALUE_NUMBER_INT) {\n+                    throw new JsonParseException(\"expecting number got \"+ t, jp.getCurrentLocation());\n+                }\n+                if (fieldName.equals(\"a\")) {\n+                    a = jp.getIntValue();\n+                } else if (fieldName.equals(\"b\")) {\n+                    b = jp.getIntValue();\n+                } else {\n+                    throw new Error();\n+                }\n+                t = jp.nextToken();\n+            }\n+            return new CustomBean(a, b);\n+        }\n+    }\n+\n+    public static class Immutable {\n+        protected int x, y;\n+        \n+        public Immutable(int x0, int y0) {\n+            x = x0;\n+            y = y0;\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    public void testCustomBeanDeserializer() throws Exception\n+    {\n+\n+        final ObjectMapper map = new ObjectMapper();\n+        String json = \"{\\\"beans\\\":[{\\\"c\\\":{\\\"a\\\":10,\\\"b\\\":20},\\\"d\\\":\\\"hello, tatu\\\"}]}\";\n+        TestBeans beans = map.readValue(json, TestBeans.class);\n+\n+        assertNotNull(beans);\n+        List<TestBean> results = beans.beans;\n+        assertNotNull(results);\n+        assertEquals(1, results.size());\n+        TestBean bean = results.get(0);\n+        assertEquals(\"hello, tatu\", bean.d);\n+        CustomBean c = bean.c;\n+        assertNotNull(c);\n+        assertEquals(10, c.a);\n+        assertEquals(20, c.b);\n+\n+        json = \"{\\\"beans\\\":[{\\\"c\\\":{\\\"b\\\":3,\\\"a\\\":-4},\\\"d\\\":\\\"\\\"},\"\n+            +\"{\\\"d\\\":\\\"abc\\\", \\\"c\\\":{\\\"b\\\":15}}]}\";\n+        beans = map.readValue(json, TestBeans.class);\n+\n+        assertNotNull(beans);\n+        results = beans.beans;\n+        assertNotNull(results);\n+        assertEquals(2, results.size());\n+\n+        bean = results.get(0);\n+        assertEquals(\"\", bean.d);\n+        c = bean.c;\n+        assertNotNull(c);\n+        assertEquals(-4, c.a);\n+        assertEquals(3, c.b);\n+\n+        bean = results.get(1);\n+        assertEquals(\"abc\", bean.d);\n+        c = bean.c;\n+        assertNotNull(c);\n+        assertEquals(0, c.a);\n+        assertEquals(15, c.b);\n+    }\n+\n+    // [Issue#87]: delegating deserializer\n+    public void testDelegating() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        SimpleModule module = new SimpleModule(\"test\", Version.unknownVersion());\n+        module.addDeserializer(Immutable.class,\n+            new StdDelegatingDeserializer<Immutable>(\n+                new Converter<JsonNode, Immutable>() {\n+                    //@Override\n+                    public Immutable convert(JsonNode value)\n+                    {\n+                        int x = value.path(\"x\").asInt();\n+                        int y = value.path(\"y\").asInt();\n+                        return new Immutable(x, y);\n+                    }\n+                }\n+                ));\n+\n+        mapper.registerModule(module);\n+        Immutable imm = mapper.readValue(\"{\\\"x\\\":3,\\\"y\\\":7}\", Immutable.class);\n+        assertEquals(3, imm.x);\n+        assertEquals(7, imm.y);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java\n         SimpleModule module = new SimpleModule(\"test\", Version.unknownVersion());\n         module.addSerializer(new StdDelegatingSerializer(Immutable.class,\n                 new Converter<Immutable, Map<String,Integer>>() {\n-                    @Override\n+                    //@Override\n                     public Map<String, Integer> convert(Immutable value)\n                     {\n                         HashMap<String,Integer> map = new LinkedHashMap<String,Integer>();\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestFiltering.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestFiltering.java\n         public String a = \"a\";\n         public String b = \"b\";\n     }\n+\n     \n+    // [Issue#89]\n+    static class Pod\n+    {\n+        protected String username;\n+\n+//        @JsonProperty(value = \"user_password\")\n+        protected String userPassword;\n+\n+        public String getUsername() {\n+            return username;\n+        }\n+\n+        public void setUsername(String value) {\n+            this.username = value;\n+        }\n+\n+        @JsonIgnore\n+        @JsonProperty(value = \"user_password\")\n+        public java.lang.String getUserPassword() {\n+            return userPassword;\n+        }\n+\n+        @JsonProperty(value = \"user_password\")\n+        public void setUserPassword(String value) {\n+            this.userPassword = value;\n+        }\n+\n+    }    \n     /*\n     /**********************************************************\n     /* Unit tests\n     /**********************************************************\n      */\n-\n+    \n     public void testSimpleInclusionFilter() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         FilterProvider prov = new SimpleFilterProvider().setDefaultFilter(SimpleBeanPropertyFilter.filterOutAllExcept(\"b\"));\n         assertEquals(\"{\\\"b\\\":\\\"b\\\"}\", mapper.writer(prov).writeValueAsString(new Bean()));\n     }\n+\n+    // [Issue#89] combining @JsonIgnore, @JsonProperty\n+    public void testIssue89() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        Pod pod = new Pod();\n+        pod.username = \"Bob\";\n+        pod.userPassword = \"s3cr3t!\";\n+\n+        String json = mapper.writeValueAsString(pod);\n+\n+        assertEquals(\"{\\\"username\\\":\\\"Bob\\\"}\", json);\n+\n+        Pod pod2 = mapper.readValue(\"{\\\"username\\\":\\\"Bill\\\",\\\"user_password\\\":\\\"foo!\\\"}\", Pod.class);\n+        assertEquals(\"Bill\", pod2.username);\n+        assertEquals(\"foo!\", pod2.userPassword);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitable.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitable.java\n package com.fasterxml.jackson.databind.jsonFormatVisitors;\n-\n \n import com.fasterxml.jackson.databind.JavaType;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n          */\n         JsonSerializer<Object> ser = findValueSerializer(javaType, null);\n         if (ser instanceof JsonFormatVisitable) {\n-        \t((JsonFormatVisitable) ser).acceptJsonFormatVisitor(visitor, javaType);\n-        } else {\n-        \tvisitor.expectAnyFormat(javaType);\n+            ((JsonFormatVisitable) ser).acceptJsonFormatVisitor(visitor, javaType);\n+        } else {\n+            visitor.expectAnyFormat(javaType);\n         }\n     }\n     ", "timestamp": 1349318298, "metainfo": ""}