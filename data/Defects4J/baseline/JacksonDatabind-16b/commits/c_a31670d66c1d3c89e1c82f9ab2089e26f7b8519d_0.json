{"sha": "a31670d66c1d3c89e1c82f9ab2089e26f7b8519d", "log": "Merge branch 'master' of github.com:FasterXML/jackson-databind", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JavaType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JavaType.java\n  * and as keys for deserializers.\n  *<p>\n  * Instances can (only) be constructed by\n- * <code>com.fasterxml.jackson.databind.TypeFactory</code>.\n+ * <code>com.fasterxml.jackson.databind.type.TypeFactory</code>.\n  *<p>\n  * Since 2.2 this implements {@link java.lang.reflect.Type} to allow\n  * it to be pushed through interfaces that only expose that type.\n--- a/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java\n      * \n      * @since 2.1\n      */\n-    USE_WRAPPER_NAME_AS_PROPERTY_NAME(false)\n+    USE_WRAPPER_NAME_AS_PROPERTY_NAME(false),\n+    \n+    /*\n+    /******************************************************\n+    /* Other features\n+    /******************************************************\n+     */\n+\n+    /**\n+     * Feature that determines whether multiple registrations of same module\n+     * should be ignored or not; if enabled, only the first registration call\n+     * results in module being called, and possible duplicate calls are silently\n+     * ignored; if disabled, no checking is done and all registration calls are\n+     * dispatched to module.\n+     *<p>\n+     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n+     * modules with same non-null <code>type id</code> are considered same for\n+     * purposes of duplicate registration. This also avoids having to keep track\n+     * of actual module instances; only ids will be kept track of (and only if\n+     * this feature is enabled).\n+     *<p>\n+     * Feature is enabled by default.\n+     *\n+     * @since 2.5\n+     */\n+    IGNORE_DUPLICATE_MODULE_REGISTRATIONS(true)\n+    \n     ;\n \n     private final boolean _defaultState;\n--- a/src/main/java/com/fasterxml/jackson/databind/Module.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/Module.java\n      */\n     \n     /**\n-     * Method that returns identifier for module; this can be used by Jackson\n+     * Method that returns a display that can be used by Jackson\n      * for informational purposes, as well as in associating extensions with\n      * module that provides them.\n      */\n     @Override\n     public abstract Version version();\n \n+    /**\n+     * Method that returns an id that may be used to determine if two {@link Module}\n+     * instances are considered to be of same type, for purpose of preventing\n+     * multiple registrations of \"same type of\" module\n+     * (see {@link com.fasterxml.jackson.databind.MapperFeature#IGNORE_DUPLICATE_MODULE_REGISTRATIONS})\n+     * If `null` is returned, every instance is considered unique.\n+     * If non-null value is returned, equality of id Objects is used to check whether\n+     * modules should be considered to be \"of same type\"\n+     *<p>\n+     * Default implementation returns value of class name ({@link Class#getName}).\n+     *\n+     * @since 2.5\n+     */\n+    public Object getTypeId() {\n+        return getClass().getName();\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Life-cycle: registration\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n \n     /*\n     /**********************************************************\n+    /* Module-related\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Set of module types (as per {@link Module#getTypeId()} that have been\n+     * registered; kept track of iff {@link MapperFeature#IGNORE_DUPLICATE_MODULE_REGISTRATIONS}\n+     * is enabled, so that duplicate registration calls can be ignored\n+     * (to avoid adding same handlers multiple times, mostly).\n+     * \n+     * @since 2.5\n+     */\n+    protected Set<Object> _registeredModuleTypes;\n+    \n+    /*\n+    /**********************************************************\n     /* Caching\n     /**********************************************************\n      */\n      */\n     public ObjectMapper registerModule(Module module)\n     {\n+        if (isEnabled(MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS)) {\n+            Object typeId = module.getTypeId();\n+            if (typeId != null) {\n+                if (_registeredModuleTypes == null) {\n+                    _registeredModuleTypes = new HashSet<Object>();\n+                }\n+                // try adding; if already had it, should skip\n+                if (!_registeredModuleTypes.add(typeId)) {\n+                    return this;\n+                }\n+            }\n+        }\n+        \n         /* Let's ensure we have access to name and version information, \n          * even if we do not have immediate use for either. This way we know\n          * that they will be available from beginning\n             \n             @Override\n             public void setMixInAnnotations(Class<?> target, Class<?> mixinSource) {\n-                mapper.addMixInAnnotations(target, mixinSource);\n+                mapper.addMixIn(target, mixinSource);\n             }\n             \n             @Override\n      * Method called to configure the generator as necessary and then\n      * call write functionality\n      */\n-    @SuppressWarnings(\"deprecation\")\n     protected final void _configAndWriteValue(JsonGenerator jgen, Object value)\n         throws IOException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n      * Note: whether {@link java.util.Map} keys are serialized as Strings\n      * or not is controlled using {@link #WRITE_DATE_KEYS_AS_TIMESTAMPS}.\n      *<p>\n-     * Feature is enabled by default.\n+     * Feature is enabled by default, so that date/time are by default\n+     * serialized as timestamps.\n      */\n     WRITE_DATES_AS_TIMESTAMPS(true),\n \n      * Note: whether {@link java.util.Map} keys are serialized as Strings\n      * or not is controlled using {@link #WRITE_DATE_KEYS_AS_TIMESTAMPS}.\n      *<p>\n-     * Feature is enabled by default.\n+     * Feature is enabled by default, so that period/duration are by default\n+     * serialized as timestamps.\n      * \n      * @since 2.5\n      */\n     WRITE_DURATIONS_AS_TIMESTAMPS(true),\n-    \n+\n     /**\n      * Feature that determines whether {@link java.util.Date}s\n      * (and sub-types) used as {@link java.util.Map} keys are serialized\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java\n public class DeserializerFactoryConfig\n     implements java.io.Serializable // since 2.1\n {\n-    private static final long serialVersionUID = 3683541151102256824L;\n+    private static final long serialVersionUID = 1L; // since 2.5\n \n     protected final static Deserializers[] NO_DESERIALIZERS = new Deserializers[0];\n     protected final static BeanDeserializerModifier[] NO_MODIFIERS = new BeanDeserializerModifier[0];\n      * are configured and constructed.\n      */\n     protected final BeanDeserializerModifier[] _modifiers;\n-\n \n     /**\n      * List of objects that may be able to resolve abstract types to\n      * or to support post-constructor functionality.\n      */\n     protected final ValueInstantiators[] _valueInstantiators;\n-    \n+\n     /**\n      * Constructor for creating basic configuration with no additional\n      * handlers.\n         return new DeserializerFactoryConfig(all, _additionalKeyDeserializers, _modifiers,\n                 _abstractTypeResolvers, _valueInstantiators);\n     }\n+\n     /**\n      * Fluent/factory method used to construct a configuration object that\n      * has same key deserializer providers as this instance, plus one specified\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n         if (typeStr != null) {\n             throw new IllegalArgumentException(\"Can not deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\");\n         }\n-    \treturn true;\n+        return true;\n     }\n \n     /**\n         if (status == null) {\n             BeanDescription desc = config.introspectClassAnnotations(type);\n             status = config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo());\n-            // We default to 'false', ie. not ignorable\n+            // We default to 'false', i.e. not ignorable\n             if (status == null) {\n                 status = Boolean.FALSE;\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java\n import java.util.Map;\n \n import com.fasterxml.jackson.core.Version;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n     extends Module\n     implements java.io.Serializable\n {\n-    // at 2.4.0:\n-    private static final long serialVersionUID = -8905749147637667249L;\n+    private static final long serialVersionUID = 1L; // 2.5.0\n \n     protected final String _name;\n     protected final Version _version;\n      * use actual name and version number information.\n      */\n     public SimpleModule() {\n-        // when passing 'this', can not chain constructors...\n-        _name = \"SimpleModule-\"+System.identityHashCode(this);\n+        // can't chain when making reference to 'this'\n+        // note: generate different name for direct instantiation, sub-classing\n+        _name = (getClass() == SimpleModule.class) ?\n+                \"SimpleModule-\"+System.identityHashCode(this)\n+                : getClass().getName();\n         _version = Version.unknownVersion();\n     }\n     \n             _serializers = new SimpleSerializers(serializers);\n         }\n     }\n+\n+    /**\n+     * Since instances are likely to be custom, implementation returns\n+     * <code>null</code> if (but only if!) this class is directly instantiated;\n+     * but class name (default impl) for sub-classes.\n+     */\n+    @Override\n+    public Object getTypeId() {\n+        if (getClass() == SimpleModule.class) {\n+            return null;\n+        }\n+        return super.getTypeId();\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         final SerializationConfig config = prov.getConfig();\n         BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n         builder.setConfig(config);\n-        \n+\n         // First: any detectable (auto-detect, annotations) properties to serialize?\n         List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n         if (props == null) {\n                 props = mod.changeProperties(config, beanDesc, props);\n             }\n         }\n-        \n+\n         // Any properties to suppress?\n         props = filterBeanProperties(config, beanDesc, props);\n-        \n+\n         // [JACKSON-440] Need to allow reordering of properties to serialize\n         if (_factoryConfig.hasSerializerModifiers()) {\n             for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestDuplicateRegistration.java\n+package com.fasterxml.jackson.databind.module;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestDuplicateRegistration extends BaseMapTest\n+{\n+    static class MyModule extends Module {\n+        public int regCount;\n+        \n+        public MyModule() {\n+            super();\n+        }\n+\n+        @Override\n+        public String getModuleName() {\n+            return \"TestModule\";\n+        }\n+\n+        @Override\n+        public Version version() {\n+            return Version.unknownVersion();\n+        }\n+\n+        @Override\n+        public void setupModule(SetupContext context) {\n+            ++regCount;\n+        }\n+    }\n+\n+    public void testDuplicateRegistration() throws Exception\n+    {\n+        // by default, duplicate registration should be prevented\n+        ObjectMapper mapper = new ObjectMapper();\n+        assertTrue(mapper.isEnabled(MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS));\n+        MyModule module = new MyModule();\n+        mapper.registerModule(module);\n+        mapper.registerModule(module);\n+        mapper.registerModule(module);\n+        assertEquals(1, module.regCount);\n+\n+        // but may be allowed by changing setting\n+        mapper.disable(MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS);\n+        mapper.registerModule(module);\n+        assertEquals(2, module.regCount);\n+\n+        // and ditto for a new instance\n+        ObjectMapper mapper2 = new ObjectMapper();\n+        mapper2.disable(MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS);\n+        MyModule module2 = new MyModule();\n+        mapper.registerModule(module2);\n+        mapper.registerModule(module2);\n+        mapper.registerModule(module2);\n+        assertEquals(3, module2.regCount);\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java\n     public final AnnotationMap getParameterAnnotations(int index)\n     {\n         if (_paramAnnotations != null) {\n-            if (index >= 0 && index <= _paramAnnotations.length) {\n+            if (index >= 0 && index < _paramAnnotations.length) {\n                 return _paramAnnotations[index];\n             }\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java\n     {\n         return readAndMapFromString(SHARED_MAPPER, input, cls);\n     }\n-    \n-    protected <T> T readAndMapFromString(ObjectMapper m, String input, Class<T> cls)\n-        throws IOException\n+\n+    protected <T> T readAndMapFromString(ObjectMapper m, String input, Class<T> cls) throws IOException\n     {\n         return (T) m.readValue(\"\\\"\"+input+\"\\\"\", cls);\n     }\n     /* Helper methods, other\n     /**********************************************************\n      */\n-    \n+\n     protected TimeZone getUTCTimeZone() {\n         return TimeZone.getTimeZone(\"GMT\");\n     }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/BrokenStringReader.java\n+package com.fasterxml.jackson.databind;\n+\n+import java.io.*;\n+\n+public class BrokenStringReader\n+    extends FilterReader\n+{\n+    final String _message;\n+\n+    public BrokenStringReader(String content, String msg)\n+    {\n+        super(new StringReader(content));\n+        _message = msg;\n+    }\n+\n+    @Override\n+    public int read(char[] cbuf, int off, int len)\n+        throws IOException\n+    {\n+        int i = super.read(cbuf, off, len);\n+        if (i < 0) {\n+            throw new IOException(_message);\n+        }\n+        return i;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/BrokenStringWriter.java\n+package com.fasterxml.jackson.databind;\n+\n+import java.io.*;\n+\n+public class BrokenStringWriter\n+    extends FilterWriter\n+{\n+    final String _message;\n+\n+    public BrokenStringWriter(String msg) {\n+        super(new StringWriter());\n+        _message = msg;\n+    }\n+\n+    @Override\n+    public void write(char[] cbuf, int off, int len) throws IOException\n+    {\n+        throw new IOException(_message);\n+    }\n+    \n+    @Override\n+    public void write(int c) throws IOException\n+    {\n+        throw new IOException(_message);\n+    }\n+    \n+    @Override\n+    public void write(String str, int off, int len)  throws IOException\n+    {\n+        throw new IOException(_message);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandling.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandling.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;\n-import com.fasterxml.jackson.test.BrokenStringReader;\n \n /**\n  * Unit test for verifying that exceptions are properly handled (caught,\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestExceptionHandling.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestExceptionHandling.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n-import com.fasterxml.jackson.test.BrokenStringWriter;\n \n /**\n  * Unit test for verifying that exceptions are properly handled (caught,", "timestamp": 1416420264, "metainfo": ""}