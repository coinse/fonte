{"sha": "662dc3d3856fb960e3b722aefd29a4cd778a28da", "log": "Unit test improvements for ObjectWriter.writeValues()", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.*;\n+import com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n /**\n     protected Prefetch _prefetchRootSerializer(SerializationConfig config, JavaType valueType)\n     {\n         if (valueType != null && _config.isEnabled(SerializationFeature.EAGER_SERIALIZER_FETCH)) {\n+            /* 17-Dec-2014, tatu: Need to be bit careful here; TypeSerializers are NOT cached,\n+             *   so although it'd seem like a good idea to look for those first, and avoid\n+             *   serializer for polymorphic types, it is actually more efficient to do the\n+             *   reverse here.\n+             */\n             try {\n-                TypeSerializer typeSer = _serializerFactory.createTypeSerializer(_config, valueType);\n-                // Polymorphic type? If so, can only do partial resolution\n-                if (typeSer != null) {\n-                    return Prefetch.construct(valueType, typeSer);\n+                JsonSerializer<Object> ser = _serializerProvider(config).findTypedValueSerializer(valueType, true, null);\n+                // Important: for polymorphic types, \"unwrap\"...\n+                if (ser instanceof TypeWrappedSerializer) {\n+                    return Prefetch.construct(valueType, ((TypeWrappedSerializer) ser).typeSerializer());\n                 }\n-                JsonSerializer<Object> ser = _serializerProvider(config).findValueSerializer(valueType,  null);\n                 return Prefetch.construct(valueType,  ser);\n             } catch (JsonProcessingException e) {\n                 // need to swallow?\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n      */\n \n     protected abstract Iterable<Serializers> customSerializers();\n-    \n+\n     /*\n     /**********************************************************\n     /* Overridable secondary serializer accessor methods\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/TypeWrappedSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/TypeWrappedSerializer.java\n     \n     @Override\n     public Class<Object> handledType() { return Object.class; }\n+\n+    /*\n+    /**********************************************************\n+    /* Extended API for other core classes\n+    /**********************************************************\n+     */\n+\n+    public JsonSerializer<Object> valueSerializer() {\n+        return _serializer;\n+    }\n+\n+    public TypeSerializer typeSerializer() {\n+        return _typeSerializer;\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/seq/ObjectReaderTest.java\n+package com.fasterxml.jackson.databind.seq;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class ObjectReaderTest extends BaseMapTest\n+{\n+    final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public void testParserFeatures() throws Exception\n+    {\n+        final String JSON = \"[ /* foo */ 7 ]\";\n+        // default won't accept comments, let's change that:\n+        ObjectReader reader = MAPPER.reader(int[].class)\n+                .with(JsonParser.Feature.ALLOW_COMMENTS);\n+\n+        int[] value = reader.readValue(JSON);\n+        assertNotNull(value);\n+        assertEquals(1, value.length);\n+        assertEquals(7, value[0]);\n+\n+        // but also can go back\n+        try {\n+            reader.without(JsonParser.Feature.ALLOW_COMMENTS).readValue(JSON);\n+            fail(\"Should not have passed\");\n+        } catch (JsonProcessingException e) {\n+            verifyException(e, \"foo\");\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/seq/ObjectWriterTest.java\n+package com.fasterxml.jackson.databind.seq;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.annotation.JsonTypeName;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+/**\n+ * Unit tests for checking features added to {@link ObjectWriter}, such\n+ * as adding of explicit pretty printer.\n+ */\n+public class ObjectWriterTest\n+    extends BaseMapTest\n+{\n+    final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = \"type\")\n+    static class PolyBase {\n+    }\n+\n+    @JsonTypeName(\"A\")\n+    static class ImplA extends PolyBase {\n+        public int value;\n+        \n+        public ImplA(int v) { value = v; }\n+    }\n+\n+    @JsonTypeName(\"B\")\n+    static class ImplB extends PolyBase {\n+        public int b;\n+        \n+        public ImplB(int v) { b = v; }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+    \n+    public void testPrettyPrinter() throws Exception\n+    {\n+        ObjectWriter writer = MAPPER.writer();\n+        HashMap<String, Integer> data = new HashMap<String,Integer>();\n+        data.put(\"a\", 1);\n+        \n+        // default: no indentation\n+        assertEquals(\"{\\\"a\\\":1}\", writer.writeValueAsString(data));\n+\n+        // and then with standard\n+        writer = writer.withDefaultPrettyPrinter();\n+\n+        // pretty printer uses system-specific line feeds, so we do that as well.\n+        String lf = System.getProperty(\"line.separator\");\n+        assertEquals(\"{\" + lf + \"  \\\"a\\\" : 1\" + lf + \"}\", writer.writeValueAsString(data));\n+\n+        // and finally, again without indentation\n+        writer = writer.with((PrettyPrinter) null);\n+        assertEquals(\"{\\\"a\\\":1}\", writer.writeValueAsString(data));\n+    }\n+\n+    public void testPrefetch() throws Exception\n+    {\n+        ObjectWriter writer = MAPPER.writer();\n+        assertFalse(writer.hasPrefetchedSerializer());\n+        writer = writer.forType(String.class);\n+        assertTrue(writer.hasPrefetchedSerializer());\n+    }\n+\n+    public void testObjectWriterFeatures() throws Exception\n+    {\n+        ObjectWriter writer = MAPPER.writer()\n+                .without(JsonGenerator.Feature.QUOTE_FIELD_NAMES);                \n+        Map<String,Integer> map = new HashMap<String,Integer>();\n+        map.put(\"a\", 1);\n+        assertEquals(\"{a:1}\", writer.writeValueAsString(map));\n+        // but can also reconfigure\n+        assertEquals(\"{\\\"a\\\":1}\", writer.with(JsonGenerator.Feature.QUOTE_FIELD_NAMES)\n+                .writeValueAsString(map));\n+    }\n+\n+    public void testObjectWriterWithNode() throws Exception\n+    {\n+        ObjectNode stuff = MAPPER.createObjectNode();\n+        stuff.put(\"a\", 5);\n+        ObjectWriter writer = MAPPER.writerFor(JsonNode.class);\n+        String json = writer.writeValueAsString(stuff);\n+        assertEquals(\"{\\\"a\\\":5}\", json);\n+    }\n+\n+    public void testPolymorpicWithTyping() throws Exception\n+    {\n+        ObjectWriter writer = MAPPER.writerFor(PolyBase.class);\n+        String json;\n+\n+        json = writer.writeValueAsString(new ImplA(3));\n+        assertEquals(aposToQuotes(\"{'type':'A','value':3}\"), json);\n+        json = writer.writeValueAsString(new ImplB(-5));\n+        assertEquals(aposToQuotes(\"{'type':'B','b':-5}\"), json);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/seq/SequenceWriterTest.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/seq/SequenceWriterTest.java\n         public int value;\n         \n         public ImplA(int v) { value = v; }\n+    }\n+\n+    @JsonTypeName(\"B\")\n+    static class ImplB extends PolyBase {\n+        public int b;\n+        \n+        public ImplB(int v) { b = v; }\n     }\n     \n     /*\n                 .forType(PolyBase.class)\n                 .writeValuesAsArray(strw);\n         w.write(new ImplA(-1))\n-            .write(new ImplA(6))\n+            .write(new ImplB(3))\n+            .write(new ImplA(7))\n             .close();\n-        assertEquals(aposToQuotes(\"[{'type':'A','value':-1},{'type':'A','value':6}]\"),\n+        assertEquals(aposToQuotes(\"[{'type':'A','value':-1},{'type':'B','b':3},{'type':'A','value':7}]\"),\n                 strw.toString());\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestEmptyClass.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestEmptyClass.java\n         }\n \n         @Override\n-        public boolean isEmpty(NonZero value) {\n+        public boolean isEmpty(SerializerProvider provider, NonZero value) {\n             if (value == null) return true;\n             return (value.nr == 0);\n         }", "timestamp": 1418870808, "metainfo": ""}