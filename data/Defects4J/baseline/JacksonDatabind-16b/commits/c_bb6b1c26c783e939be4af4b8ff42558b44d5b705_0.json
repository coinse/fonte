{"sha": "bb6b1c26c783e939be4af4b8ff42558b44d5b705", "log": "Failing test for scala style props", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestScalaLikeImplicitProperties.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Tests Scala-style JVM naming patterns for properties.\n+ *\n+ * Scala uses identifiers that are legal JVM names, but not legal Java names:\n+ *\n+ * <ul>\n+ *     <li><code>prop\u2423</code> (trailing space) for fields</li>\n+ *     <li><code>prop</code> for getters</li>\n+ *     <li><code>prop_=</code> for setters</li>\n+ * </ul>\n+ *\n+ * Scala sources turn property accesses into method calls in most cases; the\n+ * backing field and the particulars of the method names are implementation details.\n+ *\n+ * Since I can't reproduce them in Java, I've substituted legal but uncommonly\n+ * used characters as placeholders.\n+ */\n+public class TestScalaLikeImplicitProperties extends BaseMapTest\n+{\n+    static class ValProperty\n+    {\n+        public String prop\u203f = \"val\";\n+        public String prop() { return prop\u203f; }\n+    }\n+\n+    static class VarProperty\n+    {\n+        public String prop\u203f = \"var\";\n+        public String prop() { return prop\u203f; }\n+        public void prop_\u2040(String p) { prop\u203f = p; }\n+    }\n+\n+    static class GetterSetterProperty\n+    {\n+        // Different name to represent an arbitrary implementation, not necessarily local to this class.\n+        private String _prop_impl = \"get/set\";\n+        public String prop() { return _prop_impl; }\n+        public void prop_\u2040(String p) { _prop_impl = p; }\n+    }\n+\n+\n+    public void testValProperty() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+\n+        // TODO: Activate whatever handler implements the property detection style\n+\n+        assertEquals(\"{\\\"prop\\\":\\\"val\\\"}\", m.writeValueAsString(new ValProperty()));\n+    }\n+\n+\n+    public void testVarProperty() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+\n+        // TODO: Activate whatever handler implements the property detection style\n+\n+        assertEquals(\"{\\\"prop\\\":\\\"var\\\"}\", m.writeValueAsString(new VarProperty()));\n+        VarProperty result = m.readValue(\"{\\\"prop\\\":\\\"read\\\"}\", VarProperty.class);\n+        assertEquals(\"read\", result.prop());\n+    }\n+\n+\n+    public void testGetterSetterProperty() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+\n+        // TODO: Activate whatever handler implements the property detection style\n+\n+        assertEquals(\"{\\\"prop\\\":\\\"get/set\\\"}\", m.writeValueAsString(new GetterSetterProperty()));\n+        GetterSetterProperty result = m.readValue(\"{\\\"prop\\\":\\\"read\\\"}\", GetterSetterProperty.class);\n+        assertEquals(\"read\", result.prop());\n+    }\n+}", "timestamp": 1398831712, "metainfo": ""}