{"sha": "ab374c7a5ce68b8248a0bcf81e96e083585aa4dd", "log": "Complete [Issue#69] implementation", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n     \n     /*\n     /**********************************************************\n-    /* Deserialization: method annotations\n-    /**********************************************************\n-     */\n-\n+    /* Deserialization: property annotations\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method for checking whether given property accessors (method,\n+     * field) has an annotation that suggests property name to use\n+     * for deserialization (reading JSON into POJOs).\n+     * Should return null if no annotation\n+     * is found; otherwise a non-null name (possibly\n+     * {@link PropertyName#USE_DEFAULT}, which means \"use default heuristics\").\n+     * \n+     * @param a Property accessor to check\n+     * \n+     * @return Name to use if found; null if not.\n+     * \n+     * @since 2.1\n+     */\n+    public PropertyName findNameForDeserialization(Annotated a) {\n+        return null;\n+    }\n+    \n     /**\n      * Method for checking whether given method has an annotation\n      * that suggests property name associated with method that\n      * name, except for empty String (\"\") which is taken to mean\n      * \"use standard bean name detection if applicable;\n      * method name if not\".\n-     */\n+     * \n+     * @deprecated Since 2.1 should use {@link #findNameForDeserialization} instead\n+     */\n+    @Deprecated\n     public String findDeserializationName(AnnotatedMethod am) {\n         return null;\n     }\n \n+    /**\n+     * Method for checking whether given member field represent\n+     * a deserializable logical property; and if so, returns the\n+     * name of that property.\n+     * Should return null if no annotation is found (indicating it\n+     * is not a deserializable field); otherwise a non-null String.\n+     * If non-null value is returned, it is used as the property\n+     * name, except for empty String (\"\") which is taken to mean\n+     * \"use the field name as is\".\n+     * \n+     * @deprecated Since 2.1 should use {@link #findNameForDeserialization} instead\n+     */\n+    @Deprecated\n+    public String findDeserializationName(AnnotatedField af) {\n+        return null;\n+    }\n+\n+    /**\n+     * Method for checking whether given set of annotations indicates\n+     * property name for associated parameter.\n+     * No actual parameter object can be passed since JDK offers no\n+     * representation; just annotations.\n+     * \n+     * @deprecated Since 2.1 should use {@link #findNameForDeserialization} instead\n+     */\n+    @Deprecated\n+    public String findDeserializationName(AnnotatedParameter param) {\n+        return null;\n+    }\n+    \n     /**\n      * Method for checking whether given method has an annotation\n      * that suggests that the method is to serve as \"any setter\";\n      */\n     public boolean hasCreatorAnnotation(Annotated a) {\n         return false;\n-    }\n-\n-    /*\n-    /**********************************************************\n-    /* Deserialization: field annotations\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Method for checking whether given member field represent\n-     * a deserializable logical property; and if so, returns the\n-     * name of that property.\n-     * Should return null if no annotation is found (indicating it\n-     * is not a deserializable field); otherwise a non-null String.\n-     * If non-null value is returned, it is used as the property\n-     * name, except for empty String (\"\") which is taken to mean\n-     * \"use the field name as is\".\n-     */\n-    public String findDeserializationName(AnnotatedField af) {\n-        return null;\n-    }\n-\n-    /*\n-    /**********************************************************\n-    /* Deserialization: parameter annotations (for\n-    /* creator method parameters)\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Method for checking whether given set of annotations indicates\n-     * property name for associated parameter.\n-     * No actual parameter object can be passed since JDK offers no\n-     * representation; just annotations.\n-     */\n-    public String findDeserializationName(AnnotatedParameter param) {\n-        return null;\n     }\n \n     /*\n         // // // Deserialization: method annotations\n \n         @Override\n+        public PropertyName findNameForDeserialization(Annotated a)\n+        {\n+            PropertyName n = _primary.findNameForDeserialization(a);\n+            if (n != null) {\n+                n = _secondary.findNameForDeserialization(a);\n+            }\n+            return n;\n+        }\n+\n+        @Override\n         public String findDeserializationName(AnnotatedMethod am)\n         {\n             String result = _primary.findDeserializationName(am);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n             CreatorProperty[] properties = new CreatorProperty[argCount];\n             for (int i = 0; i < argCount; ++i) {\n                 AnnotatedParameter param = ctor.getParameter(i);\n-                String name = (param == null) ? null : intr.findDeserializationName(param);\n+                PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n+                String name = (pn == null) ? null : pn.getSimpleName();\n                 Object injectId = intr.findInjectableValueId(param);\n                 if (name != null && name.length() > 0) {\n                     ++namedCount;\n     {\n         // note: if we do have parameter name, it'll be \"property constructor\":\n         AnnotatedParameter param = ctor.getParameter(0);\n-        String name = intr.findDeserializationName(param);\n+        PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n+        String name = (pn == null) ? null : pn.getSimpleName();\n         Object injectId = intr.findInjectableValueId(param);\n     \n         if ((injectId != null) || (name != null && name.length() > 0)) { // property-based\n             // some single-arg factory methods (String, number) are auto-detected\n             if (argCount == 1) {\n                 AnnotatedParameter param = factory.getParameter(0);\n-                String name = intr.findDeserializationName(param);\n+                PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n+                String name = (pn == null) ? null : pn.getSimpleName();\n                 Object injectId = intr.findInjectableValueId(param);\n \n                 if ((injectId == null) && (name == null || name.length() == 0)) { // not property based\n             int injectCount = 0;            \n             for (int i = 0; i < argCount; ++i) {\n                 AnnotatedParameter param = factory.getParameter(i);\n-                String name = intr.findDeserializationName(param);\n+                PropertyName pn = (param == null) ? null : intr.findNameForDeserialization(param);\n+                String name = (pn == null) ? null : pn.getSimpleName();\n                 Object injectId = intr.findInjectableValueId(param);\n                 if (name != null && name.length() > 0) {\n                     ++namedCount;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n             for (AnnotatedWithParams creator : l) {\n                 int argCount = creator.getParameterCount();\n                 if (argCount < 1) continue;\n-                String name = _annotationIntrospector.findDeserializationName(creator.getParameter(0));\n-                if (name == null) continue;\n+                PropertyName name = _annotationIntrospector.findNameForDeserialization(creator.getParameter(0));\n+                if (name == null) {\n+                    continue;\n+                }\n                 if (names == null) {\n                     names = new ArrayList<String>();\n                 }\n-                names.add(name);\n+                names.add(name.getSimpleName());\n                 for (int p = 1; p < argCount; ++p) {\n-                    names.add(_annotationIntrospector.findDeserializationName(creator.getParameter(p)));\n+                    name = _annotationIntrospector.findNameForDeserialization(creator.getParameter(p));\n+                    names.add((name == null) ? null : name.getSimpleName());\n                 }\n             }\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n         }\n         return null;\n     }\n-\n+    \n     @Override\n     public String findSerializationName(AnnotatedField af)\n     {\n     \n     /*\n     /**********************************************************\n-    /* Deserialization: Method annotations\n-    /**********************************************************\n-     */\n-\n+    /* Deserialization: property annotations\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public PropertyName findNameForDeserialization(Annotated a)\n+    {\n+        // [Issue#69], need bit of delegation \n+        // !!! TODO: in 2.2, remove old methods?\n+        String name;\n+        if (a instanceof AnnotatedField) {\n+            name = findDeserializationName((AnnotatedField) a);\n+        } else if (a instanceof AnnotatedMethod) {\n+            name = findDeserializationName((AnnotatedMethod) a);\n+        } else if (a instanceof AnnotatedParameter) {\n+            name = findDeserializationName((AnnotatedParameter) a);\n+        } else {\n+            name = null;\n+        }\n+        if (name != null) {\n+            if (name.length() == 0) { // empty String means 'default'\n+                return PropertyName.USE_DEFAULT;\n+            }\n+            return new PropertyName(name);\n+        }\n+        return null;\n+    }\n+    \n     @Override\n     public String findDeserializationName(AnnotatedMethod am)\n     {\n     }\n \n     @Override\n-    public boolean hasAnySetterAnnotation(AnnotatedMethod am)\n-    {\n-        /* No dedicated disabling; regular @JsonIgnore used\n-         * if needs to be ignored (and if so, is handled prior\n-         * to this method getting called)\n-         */\n-        return am.hasAnnotation(JsonAnySetter.class);\n-    }\n-\n-    @Override\n-    public boolean hasAnyGetterAnnotation(AnnotatedMethod am)\n-    {\n-        /* No dedicated disabling; regular @JsonIgnore used\n-         * if needs to be ignored (handled separately\n-         */\n-        return am.hasAnnotation(JsonAnyGetter.class);\n-    }\n-    \n-    @Override\n-    public boolean hasCreatorAnnotation(Annotated a)\n-    {\n-        /* No dedicated disabling; regular @JsonIgnore used\n-         * if needs to be ignored (and if so, is handled prior\n-         * to this method getting called)\n-         */\n-        return a.hasAnnotation(JsonCreator.class);\n-    }\n-\n-    /*\n-    /**********************************************************\n-    /* Deserialization: field annotations\n-    /**********************************************************\n-     */\n-\n-    @Override\n     public String findDeserializationName(AnnotatedField af)\n     {\n         JsonProperty pann = af.getAnnotation(JsonProperty.class);\n         }\n         return null;\n     }\n-\n-    /*\n-    /**********************************************************\n-    /* Deserialization: parameters annotations\n-    /**********************************************************\n-     */\n-\n     @Override\n     public String findDeserializationName(AnnotatedParameter param)\n     {\n              */\n         }\n         return null;\n+    }\n+    \n+    @Override\n+    public boolean hasAnySetterAnnotation(AnnotatedMethod am)\n+    {\n+        /* No dedicated disabling; regular @JsonIgnore used\n+         * if needs to be ignored (and if so, is handled prior\n+         * to this method getting called)\n+         */\n+        return am.hasAnnotation(JsonAnySetter.class);\n+    }\n+\n+    @Override\n+    public boolean hasAnyGetterAnnotation(AnnotatedMethod am)\n+    {\n+        /* No dedicated disabling; regular @JsonIgnore used\n+         * if needs to be ignored (handled separately\n+         */\n+        return am.hasAnnotation(JsonAnyGetter.class);\n+    }\n+    \n+    @Override\n+    public boolean hasCreatorAnnotation(Annotated a)\n+    {\n+        /* No dedicated disabling; regular @JsonIgnore used\n+         * if needs to be ignored (and if so, is handled prior\n+         * to this method getting called)\n+         */\n+        return a.hasAnnotation(JsonCreator.class);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n                 PropertyName pn = ai.findNameForSerialization(f);\n                 explName = (pn == null) ? null : pn.getSimpleName();\n             } else {\n-                explName = ai.findDeserializationName(f);\n+                PropertyName pn = ai.findNameForDeserialization(f);\n+                explName = (pn == null) ? null : pn.getSimpleName();\n             }\n             if (\"\".equals(explName)) { // empty String meaning \"use default name\", here just means \"same as field name\"\n                 explName = implName;\n             }\n             for (int i = 0, len = ctor.getParameterCount(); i < len; ++i) {\n                 AnnotatedParameter param = ctor.getParameter(i);\n-                String name = ai.findDeserializationName(param);\n+                PropertyName pn = ai.findNameForDeserialization(param);\n+                String name = (pn == null) ? null : pn.getSimpleName();\n                 // is it legal not to have name?\n                 if (name != null) {\n                     // shouldn't need to worry about @JsonIgnore (no real point, so)\n             }\n             for (int i = 0, len = factory.getParameterCount(); i < len; ++i) {\n                 AnnotatedParameter param = factory.getParameter(i);\n-                String name = ai.findDeserializationName(param);\n+                PropertyName pn = ai.findNameForDeserialization(param);\n+                String name = (pn == null) ? null : pn.getSimpleName();\n                 // is it legal not to have name?\n                 if (name != null) {\n                     // shouldn't need to worry about @JsonIgnore (no real point, so)\n     {\n         String implName; // from naming convention\n         boolean visible;\n-        String explName = (ai == null) ? null : ai.findDeserializationName(m);\n+        PropertyName pn = (ai == null) ? null : ai.findNameForDeserialization(m);\n+        String explName = (pn == null) ? null : pn.getSimpleName();\n         if (explName == null) { // no explicit name; must follow naming convention\n             implName = BeanUtil.okNameForMutator(m, _mutatorPrefix);\n             if (implName == null) { // if not, must skip", "timestamp": 1346821852, "metainfo": ""}