{"sha": "faebde9f18e0dcff6a6a82ed0f3a276eb915f675", "log": "Convert CollectionDeserializer from resolvable to contextual", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n             // no value type deserializer because Strings are one of natural/native types:\n             return new StringCollectionDeserializer(type, contentDeser, inst);\n         }\n-        return new CollectionDeserializer(type, property, contentDeser, contentTypeDeser, inst);\n+        return new CollectionDeserializer(type, contentDeser, contentTypeDeser, inst);\n     }\n \n     // Copied almost verbatim from \"createCollectionDeserializer\" -- should try to share more code\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n+import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n /**\n @JacksonStdImpl\n public class CollectionDeserializer\n     extends ContainerDeserializerBase<Collection<Object>>\n-    implements ResolvableDeserializer\n+implements ContextualDeserializer\n {\n     // // Configuration\n \n     protected final JavaType _collectionType;\n-\n-    protected final BeanProperty _property;\n     \n     /**\n      * Value deserializer.\n      */\n-    protected JsonDeserializer<Object> _valueDeserializer;\n+    protected final JsonDeserializer<Object> _valueDeserializer;\n \n     /**\n      * If element instances have polymorphic type information, this\n      * Deserializer that is used iff delegate-based creator is\n      * to be used for deserializing from JSON Object.\n      */\n-    protected JsonDeserializer<Object> _delegateDeserializer;\n+    protected final JsonDeserializer<Object> _delegateDeserializer;\n \n     // NOTE: no PropertyBasedCreator, as JSON Arrays have no properties\n \n     /* Life-cycle\n     /**********************************************************\n      */\n-    \n-    public CollectionDeserializer(JavaType collectionType, BeanProperty prop,\n+\n+    /**\n+     * Constructor for context-free instances, where we do not yet know\n+     * which property is using this deserializer.\n+     */\n+    public CollectionDeserializer(JavaType collectionType,\n             JsonDeserializer<Object> valueDeser,\n             TypeDeserializer valueTypeDeser, ValueInstantiator valueInstantiator)\n     {\n+        this(collectionType, valueDeser, valueTypeDeser, valueInstantiator, null);\n+    }\n+\n+    /**\n+     * Constructor used when creating contextualized instances.\n+     */\n+    protected CollectionDeserializer(JavaType collectionType,\n+            JsonDeserializer<Object> valueDeser, TypeDeserializer valueTypeDeser,\n+            ValueInstantiator valueInstantiator,\n+            JsonDeserializer<Object> delegateDeser)\n+    {\n         super(collectionType.getRawClass());\n         _collectionType = collectionType;\n-        _property = prop;\n         _valueDeserializer = valueDeser;\n         _valueTypeDeserializer = valueTypeDeser;\n         _valueInstantiator = valueInstantiator;\n+        _delegateDeserializer = delegateDeser;\n     }\n \n     /**\n     {\n         super(src._valueClass);\n         _collectionType = src._collectionType;\n-        _property = src._property;\n         _valueDeserializer = src._valueDeserializer;\n         _valueTypeDeserializer = src._valueTypeDeserializer;\n         _valueInstantiator = src._valueInstantiator;\n \n     /**\n      * Method called to finalize setup of this deserializer,\n-     * after deserializer itself has been registered. This\n-     * is needed to handle recursive and transitive dependencies.\n-     */\n-    @Override\n-    public void resolve(DeserializationContext ctxt)\n-        throws JsonMappingException\n+     * when it is known for which property deserializer is needed\n+     * for.\n+     */\n+    @Override\n+    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n+            BeanProperty property) throws JsonMappingException\n     {\n         // May need to resolve types for delegate-based creators:\n-        if (_valueInstantiator.canCreateUsingDelegate()) {\n+        JsonDeserializer<Object> delegate = null;\n+        if ((_valueInstantiator != null) && _valueInstantiator.canCreateUsingDelegate()) {\n             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n             if (delegateType == null) {\n                 throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                         +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                         +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n             }\n-            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n-            // Need to create a temporary property to allow contextual deserializers:\n-            // Note: unlike BeanDeserializer, we don't have an AnnotatedClass around; hence no annotations passed\n-            BeanProperty.Std property = new BeanProperty.Std(null,\n-                    delegateType, null, delegateCreator);\n-            _delegateDeserializer = findDeserializer(ctxt, delegateType, property);\n+            delegate = findDeserializer(ctxt, delegateType, property);\n         }\n         // also, often value deserializer is resolved here:\n-        if (_valueDeserializer == null) {\n-            _valueDeserializer = ctxt.findValueDeserializer(_collectionType.getContentType(), _property);\n-        }\n+        JsonDeserializer<Object> valueDeser = _valueDeserializer;\n+        if (valueDeser == null) {\n+            valueDeser = (JsonDeserializer<Object>)ctxt.findValueDeserializer(_collectionType.getContentType(), property);\n+        }\n+        return new CollectionDeserializer(_collectionType, valueDeser,\n+                _valueTypeDeserializer, _valueInstantiator, delegate);\n+                \n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n             }\n         }\n         JsonDeserializer<?> valueDeser = _valueDeserializer;\n-        if (_valueDeserializer == null) {\n+        if (valueDeser == null) {\n             // And we may also need to get deserializer for String\n             JsonDeserializer<?> deser = ctxt.findValueDeserializer(_collectionType.getContentType(), property);\n             valueDeser = (JsonDeserializer<String>) deser;", "timestamp": 1327942047, "metainfo": ""}