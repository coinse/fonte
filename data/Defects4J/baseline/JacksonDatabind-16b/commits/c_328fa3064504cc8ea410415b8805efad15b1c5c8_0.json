{"sha": "328fa3064504cc8ea410415b8805efad15b1c5c8", "log": "Improve version handling code", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n import java.lang.annotation.Annotation;\n import java.util.*;\n \n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.Versioned;\n+import com.fasterxml.jackson.core.util.VersionUtil;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n  * This way added methods will not break backwards compatibility of custom annotation\n  * introspectors.\n  */\n-public abstract class AnnotationIntrospector\n+public abstract class AnnotationIntrospector implements Versioned\n {    \n     /*\n     /**********************************************************\n     \n     /*\n     /**********************************************************\n+    /* Default Versioned impl\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public Version version() {\n+        return VersionUtil.versionFor(getClass());\n+    }\n+    \n+    /*\n+    /**********************************************************\n     /* Generic annotation properties, lookup\n     /**********************************************************\n-    */\n-\n+     */\n+    \n     /**\n      * Method called by framework to determine whether given annotation\n      * is handled by this introspector.\n     /**********************************************************\n     /* General class annotations\n     /**********************************************************\n-    */\n+     */\n \n     /**\n      * Method for locating name used as \"root name\" (for use by\n     {\n         protected final AnnotationIntrospector _primary, _secondary;\n \n-        public Pair(AnnotationIntrospector p,\n-                    AnnotationIntrospector s)\n+        public Pair(AnnotationIntrospector p, AnnotationIntrospector s)\n         {\n             _primary = p;\n             _secondary = s;\n         }\n \n+        @Override\n+        public Version version() {\n+            return _primary.version();\n+        }\n+        \n         /**\n          * Helper method for constructing a Pair from two given introspectors (if\n          * neither is null); or returning non-null introspector if one is null\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/DatabindVersion.java\n+package com.fasterxml.jackson.databind;\n+\n+import com.fasterxml.jackson.core.util.VersionUtil;\n+\n+/**\n+ * Helper class used for finding and caching version information\n+ * for the databind bundle.\n+ * NOTE: although defined as public, should NOT be accessed directly\n+ * from outside databind bundle itself.\n+ */\n+public class DatabindVersion extends VersionUtil\n+{\n+    public final static DatabindVersion instance = new DatabindVersion();\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n-import com.fasterxml.jackson.databind.jsontype.NamedType;\n-import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;\n-import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n-import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n-import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.jsontype.*;\n import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;\n import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n import com.fasterxml.jackson.databind.node.*;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.type.TypeModifier;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n-\n \n /**\n  * This mapper (or, data binder, or codec) provides functionality for\n      */\n     @Override\n     public Version version() {\n-        return VersionUtil.versionFor(getClass());\n+        return DatabindVersion.instance.version();\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n import com.fasterxml.jackson.core.io.SerializedString;\n import com.fasterxml.jackson.core.type.ResolvedType;\n import com.fasterxml.jackson.core.type.TypeReference;\n-import com.fasterxml.jackson.core.util.VersionUtil;\n import com.fasterxml.jackson.databind.deser.StdDeserializationContext;\n import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n import com.fasterxml.jackson.databind.node.NullNode;\n import com.fasterxml.jackson.databind.node.TreeTraversingParser;\n import com.fasterxml.jackson.databind.type.SimpleType;\n-\n \n /**\n  * Builder object that can be used for per-serialization configuration of\n     /**\n      * Method that will return version information stored in and read from jar\n      * that contains this class.\n-     * \n-     * @since 1.6\n      */\n     @Override\n     public Version version() {\n-        return VersionUtil.versionFor(getClass());\n+        return DatabindVersion.instance.version();\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n import com.fasterxml.jackson.core.util.ByteArrayBuilder;\n import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;\n-import com.fasterxml.jackson.core.util.VersionUtil;\n import com.fasterxml.jackson.databind.ser.FilterProvider;\n import com.fasterxml.jackson.databind.ser.SerializerFactory;\n-\n \n /**\n  * Builder object that can be used for per-serialization configuration of\n  * reused in completely thread-safe manner with no explicit synchronization\n  * \n  * @author tatu\n- * @since 1.5\n  */\n public class ObjectWriter\n-    implements Versioned // since 1.6\n+    implements Versioned\n {\n     /**\n      * We need to keep track of explicit disabling of pretty printing;\n     /**\n      * Method that will return version information stored in and read from jar\n      * that contains this class.\n-     * \n-     * @since 1.6\n      */\n     @Override\n     public Version version() {\n-        return VersionUtil.versionFor(getClass());\n+        return DatabindVersion.instance.version();\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n \n import com.fasterxml.jackson.annotation.*;\n \n+import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.*;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n {\n     public JacksonAnnotationIntrospector() { }\n \n+    @Override\n+    public Version version() {\n+        return DatabindVersion.instance.version();\n+    }\n+    \n     /*\n     /**********************************************************\n     /* General annotation properties\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/NopAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/NopAnnotationIntrospector.java\n \n import java.lang.annotation.Annotation;\n \n-\n+import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.DatabindVersion;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.KeyDeserializer;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;\n-\n /**\n  * Dummy, \"no-operation\" implementation of {@link AnnotationIntrospector}.\n  * Can be used as is to suppress handling of annotations; or as a basis\n      */\n     public final static NopAnnotationIntrospector instance = new NopAnnotationIntrospector();\n \n+    @Override\n+    public Version version() {\n+        return DatabindVersion.instance.version();\n+    }\n+\n     /*\n     /**********************************************************\n     /* General annotation properties\n--- a/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.base.ParserMinimalBase;\n+import com.fasterxml.jackson.databind.DatabindVersion;\n \n /**\n  * Facade over {@link JsonNode} that implements {@link JsonParser} to allow\n         return _objectCodec;\n     }\n \n+    @Override\n+    public Version version() {\n+        return DatabindVersion.instance.version();\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Closeable implementation\n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n import com.fasterxml.jackson.core.json.JsonReadContext;\n import com.fasterxml.jackson.core.json.JsonWriteContext;\n import com.fasterxml.jackson.core.util.ByteArrayBuilder;\n+import com.fasterxml.jackson.databind.DatabindVersion;\n \n /**\n  * Utility class used for efficient storage of {@link JsonToken}\n         _first = _last = new Segment();\n         _appendOffset = 0;\n     }\n-    \n+\n+    @Override\n+    public Version version() {\n+        return DatabindVersion.instance.version();\n+    }\n+\n     /**\n      * Method used to create a {@link JsonParser} that can read contents\n      * stored in this buffer. Will use default <code>_objectCodec</code> for\n         @Override\n         public void setCodec(ObjectCodec c) { _codec = c; }\n \n+        @Override\n+        public Version version() {\n+            return DatabindVersion.instance.version();\n+        }\n+        \n         /*\n         /**********************************************************\n         /* Extended API beyond JsonParser\n--- a/src/test/java/com/fasterxml/jackson/databind/TestVersions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestVersions.java\n package com.fasterxml.jackson.databind;\n \n import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.Versioned;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n \n /**\n- * Tests to verify [JACKSON-278]\n+ * Tests to ensure that we get proper Version information via\n+ * things defined as Versioned.\n  */\n public class TestVersions extends com.fasterxml.jackson.test.BaseTest\n {\n-    /**\n-     * 18-Nov-2010, tatu: Not a good to do this, but has to do, for now...\n-     */\n+    // Not a good to do this, but has to do, for now...\n     private final static int MAJOR_VERSION = 2;\n     private final static int MINOR_VERSION = 0;\n+\n+    private final static String GROUP_ID = \"com.fasterxml.jackson.core\";\n+    private final static String ARTIFACT_ID = \"jackson-databind\";\n \n     public void testMapperVersions()\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        assertVersion(mapper.version(), MAJOR_VERSION, MINOR_VERSION);\n-        assertVersion(mapper.writer().version(), MAJOR_VERSION, MINOR_VERSION);\n-        assertVersion(mapper.reader().version(), MAJOR_VERSION, MINOR_VERSION);\n+        assertVersion(mapper);\n+        assertVersion(mapper.reader());\n+        assertVersion(mapper.writer());\n+        assertVersion(new JacksonAnnotationIntrospector());\n     }\n \n     /*\n     /**********************************************************\n      */\n     \n-    private void assertVersion(Version v, int major, int minor)\n+    private void assertVersion(Versioned vers)\n     {\n+        Version v = vers.version();\n         assertFalse(\"Should find version information (got \"+v+\")\", v.isUknownVersion());\n-        assertEquals(major, v.getMajorVersion());\n-        assertEquals(minor, v.getMinorVersion());\n-        // 07-Jan-2011, tatus: Check patch level initially, comment out for maint versions\n-\n-        //assertEquals(0, v.getPatchLevel());\n+        assertEquals(MAJOR_VERSION, v.getMajorVersion());\n+        assertEquals(MINOR_VERSION, v.getMinorVersion());\n+        // Check patch level initially, comment out for maint versions\n+        assertEquals(0, v.getPatchLevel());\n+        assertEquals(GROUP_ID, v.getGroupId());\n+        assertEquals(ARTIFACT_ID, v.getArtifactId());\n     }\n }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java\n     public void testSimpleBeanSerializer() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        SimpleModule mod = new SimpleModule(\"test\", new Version(1, 0, 0, null));\n+        SimpleModule mod = new SimpleModule(\"test\", Version.unknownVersion());\n         mod.addSerializer(new CustomBeanSerializer());\n         mapper.registerModule(mod);\n         assertEquals(quote(\"abcde|5\"), mapper.writeValueAsString(new CustomBean(\"abcde\", 5)));\n     public void testSimpleEnumSerializer() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        SimpleModule mod = new SimpleModule(\"test\", new Version(1, 0, 0, null));\n+        SimpleModule mod = new SimpleModule(\"test\", Version.unknownVersion());\n         mod.addSerializer(new SimpleEnumSerializer());\n         mapper.registerModule(mod);\n         assertEquals(quote(\"b\"), mapper.writeValueAsString(SimpleEnum.B));\n     public void testSimpleInterfaceSerializer() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        SimpleModule mod = new SimpleModule(\"test\", new Version(1, 0, 0, null));\n+        SimpleModule mod = new SimpleModule(\"test\", Version.unknownVersion());\n         mod.addSerializer(new BaseSerializer());\n         mapper.registerModule(mod);\n         assertEquals(quote(\"Base:1\"), mapper.writeValueAsString(new Impl1()));\n     public void testSimpleBeanDeserializer() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        SimpleModule mod = new SimpleModule(\"test\", new Version(1, 0, 0, null));\n+        SimpleModule mod = new SimpleModule(\"test\", Version.unknownVersion());\n         mod.addDeserializer(CustomBean.class, new CustomBeanDeserializer());\n         mapper.registerModule(mod);\n         CustomBean bean = mapper.readValue(quote(\"xyz|3\"), CustomBean.class);\n     public void testSimpleEnumDeserializer() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        SimpleModule mod = new SimpleModule(\"test\", new Version(1, 0, 0, null));\n+        SimpleModule mod = new SimpleModule(\"test\", Version.unknownVersion());\n         mod.addDeserializer(SimpleEnum.class, new SimpleEnumDeserializer());\n         mapper.registerModule(mod);\n         SimpleEnum result = mapper.readValue(quote(\"a\"), SimpleEnum.class);\n     // Simple verification of [JACKSON-455]\n     public void testMultipleModules() throws Exception\n     {\n-        MySimpleModule mod1 = new MySimpleModule(\"test1\", new Version(1, 0, 0, null));\n-        SimpleModule mod2 = new SimpleModule(\"test2\", new Version(1, 0, 0, null));\n+        MySimpleModule mod1 = new MySimpleModule(\"test1\", Version.unknownVersion());\n+        SimpleModule mod2 = new SimpleModule(\"test2\", Version.unknownVersion());\n         mod1.addSerializer(SimpleEnum.class, new SimpleEnumSerializer());\n         mod1.addDeserializer(CustomBean.class, new CustomBeanDeserializer());\n         mod2.addDeserializer(SimpleEnum.class, new SimpleEnumDeserializer());", "timestamp": 1325144416, "metainfo": ""}