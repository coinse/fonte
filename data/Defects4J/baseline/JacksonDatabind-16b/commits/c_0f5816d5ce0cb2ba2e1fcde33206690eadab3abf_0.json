{"sha": "0f5816d5ce0cb2ba2e1fcde33206690eadab3abf", "log": "javadoc improvements", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/annotation/JsonNaming.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotation/JsonNaming.java\n @com.fasterxml.jackson.annotation.JacksonAnnotation\n public @interface JsonNaming\n {\n-    public Class<? extends PropertyNamingStrategy> value();\n+    /**\n+     * @return Type of {@link PropertyNamingStrategy} to use, if any; default value of\n+     *    <code>PropertyNamingStrategy.class</code> means \"no strategy specified\"\n+     *    (and may also be used for overriding to remove otherwise applicable\n+     *    naming strategy)\n+     */\n+    public Class<? extends PropertyNamingStrategy> value() default PropertyNamingStrategy.class;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n \n         /* Also: must be a recognized factory method, meaning:\n          * (a) marked with @JsonCreator annotation, or\n-         * (a) \"valueOf\" (at this point, need not be public)\n+         * (b) \"valueOf\" (at this point, need not be public)\n          */\n         if (_annotationIntrospector.hasCreatorAnnotation(am)) {\n             return true;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n         //todo: (ryan) add a format for the date in the schema?\n         return createSchemaNode(_asTimestamp(provider) ? \"number\" : \"string\", true);\n     }\n-    \n+\n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n     {", "timestamp": 1412301452, "metainfo": ""}