{"sha": "dfa1b441141dfdd996a89c42de087dbd292da456", "log": "Fix #299", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n     FAIL_ON_IGNORED_PROPERTIES(false),\n \n     /**\n+     * Feature that determines what happens if an Object Id reference is encountered\n+     * that does not refer to an actual Object with that id (\"unresolved Object Id\"):\n+     * either an exception is thrown (<code>true</code>), or a null object is used\n+     * instead (<code>false</code>).\n+     * Note that if this is set to <code>false</code>, no further processing is done;\n+     * specifically, if reference is defined via setter method, that method will NOT\n+     * be called.\n+     *<p>\n+     * Feature is enabled by default, so that unknown Object Ids will result in an\n+     * exception being thrown, at the end of deserialization.\n+     * \n+     * @since 2.5\n+     */\n+    FAIL_ON_UNRESOLVED_OBJECT_IDS(true),\n+\n+    /**\n      * Feature that determines whether Jackson code should catch\n      * and wrap {@link Exception}s (but never {@link Error}s!)\n      * to add additional information about\n      * Feature is enabled by default.\n      */\n     WRAP_EXCEPTIONS(true),\n-    \n+\n     /*\n     /******************************************************\n     /* Structural conversion features\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n         if (_objectIds == null) {\n             return;\n         }\n-\n+        // 29-Dec-2014, tatu: As per [databind#299], may also just let unresolved refs be...\n+        if (!isEnabled(DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS)) {\n+            return;\n+        }\n         UnresolvedForwardReference exception = null;\n         for (Entry<IdKey,ReadableObjectId> entry : _objectIds.entrySet()) {\n             ReadableObjectId roid = entry.getValue();\n                 if (exception == null) {\n                     exception = new UnresolvedForwardReference(\"Unresolved forward references for: \");\n                 }\n-                for (Iterator<Referring> iterator = roid.referringProperties(); iterator.hasNext();) {\n+                for (Iterator<Referring> iterator = roid.referringProperties(); iterator.hasNext(); ) {\n                     Referring referring = iterator.next();\n                     exception.addUnresolvedId(roid.getKey().key, referring.getBeanType(), referring.getLocation());\n                 }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n      * {@link com.fasterxml.jackson.databind.SerializerProvider#findValueSerializer}.\n      */\n     public abstract JsonSerializer<?> getContentSerializer();\n-    \n+\n     /*\n     /**********************************************************\n     /* Abstract methods for sub-classes to implement\n     /**********************************************************\n      */\n-    \n+\n     /* Overridden as abstract, to force re-implementation; necessary for all\n      * collection types.\n      */\n     @Override\n-    public abstract boolean isEmpty(T value);\n+    @Deprecated\n+    public boolean isEmpty(T value) {\n+        return isEmpty(null, value);\n+    }\n+\n+    // since 2.5: should be declared abstract in future (2.6)\n+//    @Override\n+//    public abstract boolean isEmpty(SerializerProvider prov, T value);\n \n     /**\n      * Method called to determine if the given value (of type handled by\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedListSerializer.java\n      */\n     \n     @Override\n-    public boolean isEmpty(List<?> value) {\n+    public boolean isEmpty(SerializerProvider prov, List<?> value) {\n         return (value == null) || value.isEmpty();\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IteratorSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IteratorSerializer.java\n     }\n \n     @Override\n-    public boolean isEmpty(Iterator<?> value) {\n+    public boolean isEmpty(SerializerProvider prov, Iterator<?> value) {\n         return (value == null) || !value.hasNext();\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java\n     }\n \n     @Override\n-    public boolean isEmpty(Entry<?, ?> value) {\n+    public boolean isEmpty(SerializerProvider prov, Entry<?, ?> value) {\n         return (value == null);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n     }\n     \n     @Override\n-    public boolean isEmpty(String[] value) {\n+    public boolean isEmpty(SerializerProvider prov, String[] value) {\n         return (value == null) || (value.length == 0);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n      */\n \n     @Override\n-    public boolean isEmpty(Collection<?> value) {\n+    public boolean isEmpty(SerializerProvider prov, Collection<?> value) {\n         return (value == null) || value.isEmpty();\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n     }\n     \n     @Override\n-    public boolean isEmpty(EnumMap<? extends Enum<?>,?> value) {\n+    public boolean isEmpty(SerializerProvider prov, EnumMap<? extends Enum<?>,?> value) {\n         return (value == null) || value.isEmpty();\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java\n     }\n     \n     @Override\n-    public boolean isEmpty(EnumSet<? extends Enum<?>> value) {\n+    public boolean isEmpty(SerializerProvider prov, EnumSet<? extends Enum<?>> value) {\n         return (value == null) || value.isEmpty();\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n     }\n     \n     @Override\n-    public boolean isEmpty(Iterable<?> value) {\n+    public boolean isEmpty(SerializerProvider prov, Iterable<?> value) {\n         // Not really good way to implement this, but has to do for now:\n         return (value == null) || !value.iterator().hasNext();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n     }\n     \n     @Override\n-    public boolean isEmpty(Map<?,?> value) {\n+    public boolean isEmpty(SerializerProvider prov, Map<?,?> value) {\n         return (value == null) || value.isEmpty();\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n     }\n \n     @Override\n-    public boolean isEmpty(Object[] value) {\n+    public boolean isEmpty(SerializerProvider prov, Object[] value) {\n         return (value == null) || (value.length == 0);\n     }\n \n      */\n \n     @Override\n-    public final void serialize(Object[] value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+    public final void serialize(Object[] value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n     {\n     \tfinal int len = value.length;\n         if ((len == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) {\n     }\n     \n     @Override\n-    public void serializeContents(Object[] value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+    public void serializeContents(Object[] value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n     {\n         final int len = value.length;\n         if (len == 0) {\n     }\n \n     public void serializeContentsUsing(Object[] value, JsonGenerator jgen, SerializerProvider provider,\n-            JsonSerializer<Object> ser)\n-        throws IOException, JsonGenerationException\n+            JsonSerializer<Object> ser) throws IOException\n     {\n         final int len = value.length;\n         final TypeSerializer typeSer = _valueTypeSerializer;\n         }\n     }\n \n-    public void serializeTypedContents(Object[] value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+    public void serializeTypedContents(Object[] value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n     {\n         final int len = value.length;\n         final TypeSerializer typeSer = _valueTypeSerializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n         }\n         \n         @Override\n-        public boolean isEmpty(boolean[] value) {\n+        public boolean isEmpty(SerializerProvider prov, boolean[] value) {\n             return (value == null) || (value.length == 0);\n         }\n \n         }\n         \n         @Override\n-        public boolean isEmpty(short[] value) {\n+        public boolean isEmpty(SerializerProvider prov, short[] value) {\n             return (value == null) || (value.length == 0);\n         }\n \n         }\n         \n         @Override\n-        public boolean isEmpty(int[] value) {\n+        public boolean isEmpty(SerializerProvider prov, int[] value) {\n             return (value == null) || (value.length == 0);\n         }\n \n         }\n         \n         @Override\n-        public boolean isEmpty(long[] value) {\n+        public boolean isEmpty(SerializerProvider prov, long[] value) {\n             return (value == null) || (value.length == 0);\n         }\n \n         }\n         \n         @Override\n-        public boolean isEmpty(float[] value) {\n+        public boolean isEmpty(SerializerProvider prov, float[] value) {\n             return (value == null) || (value.length == 0);\n         }\n \n         }\n         \n         @Override\n-        public boolean isEmpty(double[] value) {\n+        public boolean isEmpty(SerializerProvider prov, double[] value) {\n             return (value == null) || (value.length == 0);\n         }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n import com.fasterxml.jackson.annotation.ObjectIdResolver;\n import com.fasterxml.jackson.databind.BaseMapTest;\n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.cfg.ContextAttributes;\n import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;\n         }\n     }\n \n+    // [databind#299]: Allow unresolved ids to become nulls\n+    public void testUnresolvableAsNull() throws Exception\n+    {\n+        IdWrapper w = mapper.reader(IdWrapper.class)\n+                .without(DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS)\n+                .readValue(aposToQuotes(\"{'node':123}\"));\n+        assertNotNull(w);\n+        assertNull(w.node);\n+    }\n+\n     public void testKeepCollectionOrdering() throws Exception\n     {\n         String json = \"{\\\"employees\\\":[2,1,\"", "timestamp": 1419897305, "metainfo": ""}