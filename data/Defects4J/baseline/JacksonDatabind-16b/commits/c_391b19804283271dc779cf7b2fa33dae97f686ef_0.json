{"sha": "391b19804283271dc779cf7b2fa33dae97f686ef", "log": "Starting to work on [JACKSON-608] (views for deser)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n         _problemHandlers = src._problemHandlers;\n         _nodeFactory = src._nodeFactory;\n     }\n+\n+    private DeserializationConfig(DeserializationConfig src, Class<?> view)\n+    {\n+        super(src, view);\n+        _deserFeatures = src._deserFeatures;\n+        _problemHandlers = src._problemHandlers;\n+        _nodeFactory = src._nodeFactory;\n+    }\n     \n     /*\n     /**********************************************************\n         return _withBase(_base.withAppendedAnnotationIntrospector(ai));\n     }\n \n+    @Override\n+    public DeserializationConfig withView(Class<?> view) {\n+        return (_view == view) ? this : new DeserializationConfig(this, view);\n+    }\n+    \n     private final DeserializationConfig _withBase(BaseSettings newBase) {\n         return (_base == newBase) ? this : new DeserializationConfig(this, newBase);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n         return new ObjectReader(this, getDeserializationConfig(), null, null,\n                 null, injectableValues);\n     }\n+\n+    /**\n+     * Factory method for constructing {@link ObjectReader} that will\n+     * deserialize objects using specified JSON View (filter).\n+     */\n+    public ObjectReader readerWithView(Class<?> view) {\n+        return new ObjectReader(this, getDeserializationConfig().withView(view));\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n      * with non-default values.\n      */\n     protected JsonInclude.Include _serializationInclusion = null;\n-\n-    /**\n-     * View to use for filtering out properties to serialize.\n-     * Null if none (will also be assigned null if <code>Object.class</code>\n-     * is defined), meaning that all properties are to be included.\n-     */\n-    protected Class<?> _serializationView;\n     \n     /**\n      * Object used for resolving filter ids to filter instances.\n      * Non-null if explicitly defined; null by default.\n      */\n-    protected FilterProvider _filterProvider;\n+    protected final FilterProvider _filterProvider;\n     \n     /*\n     /**********************************************************\n         super(src, str);\n         _serFeatures = src._serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n-        _serializationView = src._serializationView;\n         _filterProvider = src._filterProvider;\n     }\n \n         super(src, mapperFeatures);\n         _serFeatures = serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n-        _serializationView = src._serializationView;\n         _filterProvider = src._filterProvider;\n     }\n     \n         super(src, base);\n         _serFeatures = src._serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n-        _serializationView = src._serializationView;\n         _filterProvider = src._filterProvider;\n     }\n \n         super(src);\n         _serFeatures = src._serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n-        _serializationView = src._serializationView;\n         _filterProvider = filters;\n     }\n \n     private SerializationConfig(SerializationConfig src, Class<?> view)\n     {\n-        super(src);\n+        super(src, view);\n         _serFeatures = src._serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n-        _serializationView = view;\n         _filterProvider = src._filterProvider;\n     }\n \n         super(src);\n         _serFeatures = src._serFeatures;\n         _serializationInclusion = incl;\n-        _serializationView = src._serializationView;\n         _filterProvider = src._filterProvider;\n     }\n \n         super(src, rootName);\n         _serFeatures = src._serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n-        _serializationView = src._serializationView;\n         _filterProvider = src._filterProvider;\n     }\n     \n         return (newMapperFlags == _mapperFeatures) ? this\n                 : new SerializationConfig(this, newMapperFlags, _serFeatures);\n     }\n-    \n+\n+    @Override\n+    public SerializationConfig withAnnotationIntrospector(AnnotationIntrospector ai) {\n+        return _withBase(_base.withAnnotationIntrospector(ai));\n+    }\n+\n+    @Override\n+    public SerializationConfig withAppendedAnnotationIntrospector(AnnotationIntrospector ai) {\n+        return _withBase(_base.withAppendedAnnotationIntrospector(ai));\n+    }\n+\n+    @Override\n+    public SerializationConfig withInsertedAnnotationIntrospector(AnnotationIntrospector ai) {\n+        return _withBase(_base.withInsertedAnnotationIntrospector(ai));\n+    }\n+\n     @Override\n     public SerializationConfig withClassIntrospector(ClassIntrospector ci) {\n         return _withBase(_base.withClassIntrospector(ci));\n     }\n-\n-    @Override\n-    public SerializationConfig withAnnotationIntrospector(AnnotationIntrospector ai) {\n-        return _withBase(_base.withAnnotationIntrospector(ai));\n-    }\n-\n-    @Override\n-    public SerializationConfig withInsertedAnnotationIntrospector(AnnotationIntrospector ai) {\n-        return _withBase(_base.withInsertedAnnotationIntrospector(ai));\n-    }\n-\n-    @Override\n-    public SerializationConfig withAppendedAnnotationIntrospector(AnnotationIntrospector ai) {\n-        return _withBase(_base.withAppendedAnnotationIntrospector(ai));\n-    }\n-    \n-    @Override\n-    public SerializationConfig withVisibilityChecker(VisibilityChecker<?> vc) {\n-        return _withBase(_base.withVisibilityChecker(vc));\n-    }\n-\n-    @Override\n-    public SerializationConfig withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) {\n-        return _withBase(_base.withVisibility(forMethod, visibility));\n-    }\n-    \n-    @Override\n-    public SerializationConfig withTypeResolverBuilder(TypeResolverBuilder<?> trb) {\n-        return _withBase(_base.withTypeResolverBuilder(trb));\n-    }\n-    \n-    @Override\n-    public SerializationConfig withSubtypeResolver(SubtypeResolver str) {\n-        return (str == _subtypeResolver)? this : new SerializationConfig(this, str);\n+    \n+    /**\n+     * In addition to constructing instance with specified date format,\n+     * will enable or disable <code>Feature.WRITE_DATES_AS_TIMESTAMPS</code>\n+     * (enable if format set as null; disable if non-null)\n+     */\n+    @Override\n+    public SerializationConfig withDateFormat(DateFormat df) {\n+        SerializationConfig cfg =  new SerializationConfig(this, _base.withDateFormat(df));\n+        // Also need to toggle this feature based on existence of date format:\n+        if (df == null) {\n+            cfg = cfg.with(Feature.WRITE_DATES_AS_TIMESTAMPS);\n+        } else {\n+            cfg = cfg.without(Feature.WRITE_DATES_AS_TIMESTAMPS);\n+        }\n+        return cfg;\n+    }\n+    \n+    @Override\n+    public SerializationConfig withHandlerInstantiator(HandlerInstantiator hi) {\n+        return _withBase(_base.withHandlerInstantiator(hi));\n     }\n     \n     @Override\n         }\n         return new SerializationConfig(this, rootName);\n     }\n-    \n+\n+    @Override\n+    public SerializationConfig withSubtypeResolver(SubtypeResolver str) {\n+        return (str == _subtypeResolver)? this : new SerializationConfig(this, str);\n+    }\n+\n     @Override\n     public SerializationConfig withTypeFactory(TypeFactory tf) {\n         return _withBase(_base.withTypeFactory(tf));\n     }\n \n-    /**\n-     * In addition to constructing instance with specified date format,\n-     * will enable or disable <code>Feature.WRITE_DATES_AS_TIMESTAMPS</code>\n-     * (enable if format set as null; disable if non-null)\n-     */\n-    @Override\n-    public SerializationConfig withDateFormat(DateFormat df) {\n-        SerializationConfig cfg =  new SerializationConfig(this, _base.withDateFormat(df));\n-        // Also need to toggle this feature based on existence of date format:\n-        if (df == null) {\n-            cfg = cfg.with(Feature.WRITE_DATES_AS_TIMESTAMPS);\n-        } else {\n-            cfg = cfg.without(Feature.WRITE_DATES_AS_TIMESTAMPS);\n-        }\n-        return cfg;\n-    }\n-    \n-    @Override\n-    public SerializationConfig withHandlerInstantiator(HandlerInstantiator hi) {\n-        return _withBase(_base.withHandlerInstantiator(hi));\n-    }\n-\n+    @Override\n+    public SerializationConfig withTypeResolverBuilder(TypeResolverBuilder<?> trb) {\n+        return _withBase(_base.withTypeResolverBuilder(trb));\n+    }\n+    \n+    public SerializationConfig withView(Class<?> view) {\n+        return (_view == view) ? this : new SerializationConfig(this, view);\n+    }\n+\n+    @Override\n+    public SerializationConfig withVisibilityChecker(VisibilityChecker<?> vc) {\n+        return _withBase(_base.withVisibilityChecker(vc));\n+    }\n+\n+    @Override\n+    public SerializationConfig withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) {\n+        return _withBase(_base.withVisibility(forMethod, visibility));\n+    }\n+    \n     private final SerializationConfig _withBase(BaseSettings newBase) {\n         return (_base == newBase) ? this : new SerializationConfig(this, newBase);\n     }\n     /* Life-cycle, SerializationConfig specific factory methods\n     /**********************************************************\n      */\n-    \n-    public SerializationConfig withFilters(FilterProvider filterProvider) {\n-        return (filterProvider == _filterProvider) ? this : new SerializationConfig(this, filterProvider);\n-    }\n-\n-    public SerializationConfig withView(Class<?> view) {\n-        return (_serializationView == view) ? this : new SerializationConfig(this, view);\n-    }\n-\n-    public SerializationConfig withSerializationInclusion(JsonInclude.Include incl) {\n-        return (_serializationInclusion == incl) ? this:  new SerializationConfig(this, incl);\n-    }\n-    \n+        \n     /**\n      * Fluent factory method that will construct and return a new configuration\n      * object instance with specified feature enabled.\n         return (newSerFeatures == _serFeatures) ? this\n                 : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n     }\n+\n+    public SerializationConfig withFilters(FilterProvider filterProvider) {\n+        return (filterProvider == _filterProvider) ? this : new SerializationConfig(this, filterProvider);\n+    }\n+\n+    public SerializationConfig withSerializationInclusion(JsonInclude.Include incl) {\n+        return (_serializationInclusion == incl) ? this:  new SerializationConfig(this, incl);\n+    }\n     \n     /*\n     /**********************************************************\n      * Method for checking which serialization view is being used,\n      * if any; null if none.\n      */\n-    public Class<?> getSerializationView() { return _serializationView; }\n+    public Class<?> getSerializationView() { return _view; }\n \n     public JsonInclude.Include getSerializationInclusion()\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n      * use defaults\n      */\n     protected final String _rootName;\n+\n+    /**\n+     * View to use for filtering out properties to serialize\n+     * or deserialize.\n+     * Null if none (will also be assigned null if <code>Object.class</code>\n+     * is defined), meaning that all properties are to be included.\n+     */\n+    protected final Class<?> _view;\n     \n     /*\n     /**********************************************************\n         _mixInAnnotations = mixins;\n         _subtypeResolver = str;\n         _rootName = null;\n+        _view = null;\n     }\n     \n     /**\n      * Pass-through constructor used when no changes are needed to the\n      * base class.\n      */\n-    protected MapperConfigBase(MapperConfigBase<CFG,T> src) {\n-        super(src);\n-        _mixInAnnotations = src._mixInAnnotations;\n-        _subtypeResolver = src._subtypeResolver;\n-        _rootName = src._rootName;\n+    protected MapperConfigBase(MapperConfigBase<CFG,T> src)\n+    {\n+        super(src);\n+        _mixInAnnotations = src._mixInAnnotations;\n+        _subtypeResolver = src._subtypeResolver;\n+        _rootName = src._rootName;\n+        _view = src._view;\n     }\n \n     protected MapperConfigBase(MapperConfigBase<CFG,T> src, BaseSettings base)\n         _mixInAnnotations = src._mixInAnnotations;\n         _subtypeResolver = src._subtypeResolver;\n         _rootName = src._rootName;\n+        _view = src._view;\n     }\n     \n     protected MapperConfigBase(MapperConfigBase<CFG,T> src, int mapperFeatures)\n         _mixInAnnotations = src._mixInAnnotations;\n         _subtypeResolver = src._subtypeResolver;\n         _rootName = src._rootName;\n+        _view = src._view;\n     }\n \n     protected MapperConfigBase(MapperConfigBase<CFG,T> src, SubtypeResolver str) {\n         _mixInAnnotations = src._mixInAnnotations;\n         _subtypeResolver = str;\n         _rootName = src._rootName;\n+        _view = src._view;\n     }\n \n     protected MapperConfigBase(MapperConfigBase<CFG,T> src, String rootName) {\n         _mixInAnnotations = src._mixInAnnotations;\n         _subtypeResolver = src._subtypeResolver;\n         _rootName = rootName;\n+        _view = src._view;\n+    }\n+\n+    protected MapperConfigBase(MapperConfigBase<CFG,T> src, Class<?> view)\n+    {\n+        super(src);\n+        _mixInAnnotations = src._mixInAnnotations;\n+        _subtypeResolver = src._subtypeResolver;\n+        _rootName = src._rootName;\n+        _view = view;\n     }\n     \n     /*\n \n     /**\n      * Method for constructing and returning a new instance with different\n+     * view to use.\n+     */\n+    public abstract T withView(Class<?> view);\n+    \n+    /**\n+     * Method for constructing and returning a new instance with different\n      * {@link VisibilityChecker}\n      * to use.\n      */", "timestamp": 1327465765, "metainfo": ""}