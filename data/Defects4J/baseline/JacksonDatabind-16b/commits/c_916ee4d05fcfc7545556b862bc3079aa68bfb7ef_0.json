{"sha": "916ee4d05fcfc7545556b862bc3079aa68bfb7ef", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n         \n         for (AnnotatedField f : _classDef.fields()) {\n             String implName = f.getName();\n-\n-            String explName;\n+            PropertyName pn;\n+\n             if (ai == null) {\n-                explName = null;\n+                pn = null;\n             } else if (_forSerialization) {\n                 /* 18-Aug-2011, tatu: As per existing unit tests, we should only\n                  *   use serialization annotation (@JsonSerializer) when serializing\n                  *   fields, and similarly for deserialize-only annotations... so\n                  *   no fallbacks in this particular case.\n                  */\n-                PropertyName pn = ai.findNameForSerialization(f);\n-                explName = (pn == null) ? null : pn.getSimpleName();\n+                pn = ai.findNameForSerialization(f);\n             } else {\n-                PropertyName pn = ai.findNameForDeserialization(f);\n-                explName = (pn == null) ? null : pn.getSimpleName();\n-            }\n-            boolean nameExplicit = (explName != null);\n-            \n-            if (\"\".equals(explName)) { // empty String meaning \"use default name\", here just means \"same as field name\"\n-                explName = implName;\n-                nameExplicit= false;\n+                pn = ai.findNameForDeserialization(f);\n+            }\n+            boolean nameExplicit = (pn != null);\n+\n+            if (nameExplicit && pn.isEmpty()) { // empty String meaning \"use default name\", here just means \"same as field name\"\n+                pn = _propNameFromSimple(implName);\n+                nameExplicit = false;\n             }\n             // having explicit name means that field is visible; otherwise need to check the rules\n-            boolean visible = (explName != null);\n+            boolean visible = (pn != null);\n             if (!visible) {\n                 visible = _visibilityChecker.isFieldVisible(f);\n             }\n              *  Also: if 'ignored' is set, need to included until a later point, to\n              *  avoid losing ignoral information.\n              */\n-            if (pruneFinalFields && (explName == null) && !ignored && Modifier.isFinal(f.getModifiers())) {\n+            if (pruneFinalFields && (pn == null) && !ignored && Modifier.isFinal(f.getModifiers())) {\n                 continue;\n             }\n-            _property(implName).addField(f, explName, nameExplicit, visible, ignored);\n+            _property(implName).addField(f, pn, nameExplicit, visible, ignored);\n         }\n     }\n ", "timestamp": 1396238216, "metainfo": ""}