{"sha": "dd3485677ca295a8fcbf99dba90db5337755b8ef", "log": "Implemented [Issue-20], JsonFormatException", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;\n import com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n     /**\n      * Method that will construct an exception suitable for throwing when\n      * some String values are acceptable, but the one encountered is not.\n-     */\n+     * \n+     * \n+     * @deprecated Since 2.1 should use variant that takes value\n+     */\n+    @Deprecated\n     public JsonMappingException weirdStringException(Class<?> instClass, String msg) {\n-        return JsonMappingException.from(_parser, \"Can not construct instance of \"+instClass.getName()+\" from String value '\"+_valueDesc()+\"': \"+msg);\n+        return weirdStringException(null, instClass, msg);\n+    }\n+\n+    /**\n+     * Method that will construct an exception suitable for throwing when\n+     * some String values are acceptable, but the one encountered is not.\n+     * \n+     * @param value String value from input being deserialized\n+     * @param instClass Type that String should be deserialized into\n+     * @param msg Message that describes specific problem\n+     * \n+     * @since 2.1\n+     */\n+    public JsonMappingException weirdStringException(String value, Class<?> instClass, String msg) {\n+        return InvalidFormatException.from(_parser,\n+                \"Can not construct instance of \"+instClass.getName()+\" from String value '\"+_valueDesc()+\"': \"+msg,\n+                value, instClass);\n     }\n \n     /**\n      * Helper method for constructing exception to indicate that input JSON\n      * Number was not suitable for deserializing into given type.\n      */\n+    @Deprecated\n     public JsonMappingException weirdNumberException(Class<?> instClass, String msg) {\n-        return JsonMappingException.from(_parser, \"Can not construct instance of \"+instClass.getName()+\" from number value (\"+_valueDesc()+\"): \"+msg);\n-    }\n-\n+        return weirdStringException(null, instClass, msg);\n+    }\n+\n+    /**\n+     * Helper method for constructing exception to indicate that input JSON\n+     * Number was not suitable for deserializing into given target type.\n+     */\n+    public JsonMappingException weirdNumberException(Number value, Class<?> instClass, String msg) {\n+        return InvalidFormatException.from(_parser,\n+                \"Can not construct instance of \"+instClass.getName()+\" from number value (\"+_valueDesc()+\"): \"+msg,\n+                null, instClass);\n+    }\n+    \n     /**\n      * Helper method for constructing exception to indicate that given JSON\n      * Object field name was not in format to be able to deserialize specified\n      */\n     public JsonMappingException weirdKeyException(Class<?> keyClass, String keyValue, String msg)\n     {\n-        return JsonMappingException.from(_parser, \"Can not construct Map key of type \"+keyClass.getName()+\" from String \\\"\"+_desc(keyValue)+\"\\\": \"+msg);\n+        return InvalidFormatException.from(_parser,\n+                \"Can not construct Map key of type \"+keyClass.getName()+\" from String \\\"\"+_desc(keyValue)+\"\\\": \"+msg,\n+                keyValue, keyClass);\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java\n     }\n \n     public static JsonMappingException from(JsonParser jp, String msg,\n-                                            Throwable problem)\n+            Throwable problem)\n     {\n         return new JsonMappingException(msg, jp.getTokenLocation(), problem);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n             String name = jp.getText();\n             Enum<?> result = _resolver.findEnum(name);\n             if (result == null  && !ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n-                throw ctxt.weirdStringException(_resolver.getEnumClass(), \"value not one of declared Enum instance names\");\n+                throw ctxt.weirdStringException(name, _resolver.getEnumClass(),\n+                        \"value not one of declared Enum instance names\");\n             }\n             return result;\n         }\n             int index = jp.getIntValue();\n             Enum<?> result = _resolver.getEnum(index);\n             if (result == null && !ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n-                throw ctxt.weirdNumberException(_resolver.getEnumClass(), \"index value outside legal index range [0..\"+_resolver.lastValidIndex()+\"]\");\n+                throw ctxt.weirdNumberException(Integer.valueOf(index), _resolver.getEnumClass(),\n+                        \"index value outside legal index range [0..\"+_resolver.lastValidIndex()+\"]\");\n             }\n             return result;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n             Enum<?> key = _keyDeserializer.deserialize(jp, ctxt);\n             if (key == null) {\n                 if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n-                    throw ctxt.weirdStringException(_enumClass, \"value not one of declared Enum instance names\");\n+                    String value = null;\n+                    try { // bit ugly, but will have to do; works with usual scalars\n+                        if (jp.hasCurrentToken()) {\n+                            value = jp.getText();\n+                        }\n+                    } catch (Exception e) { }\n+                    throw ctxt.weirdStringException(value, _enumClass, \"value not one of declared Enum instance names\");\n                 }\n                 /* 24-Mar-2012, tatu: Null won't work as a key anyway, so let's\n                  *  just skip the entry then. But we must skip the value then.\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n             } catch (IllegalArgumentException iae) {\n                 // nothing to do here, yet? We'll fail anyway\n             }\n-            throw ctxt.weirdStringException(_valueClass, \"not a valid textual representation\");\n+            throw ctxt.weirdStringException(text, _valueClass, \"not a valid textual representation\");\n         }\n         if (jp.getCurrentToken() == JsonToken.VALUE_EMBEDDED_OBJECT) {\n             // Trivial cases; null to null, instance of type itself returned as is\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java\n                     }\n                     return Long.valueOf(value);\n                 } catch (IllegalArgumentException iae) {\n-                    throw ctxt.weirdStringException(_valueClass, \"not a valid number\");\n+                    throw ctxt.weirdStringException(text, _valueClass, \"not a valid number\");\n                 }\n             }\n             // Otherwise, no can do:\n             try {\n                 return new BigInteger(text);\n             } catch (IllegalArgumentException iae) {\n-                throw ctxt.weirdStringException(_valueClass, \"not a valid representation\");\n+                throw ctxt.weirdStringException(text, _valueClass, \"not a valid representation\");\n             }\n         }\n     }\n                 try {\n                     return new BigDecimal(text);\n                 } catch (IllegalArgumentException iae) {\n-                    throw ctxt.weirdStringException(_valueClass, \"not a valid representation\");\n+                    throw ctxt.weirdStringException(text, _valueClass, \"not a valid representation\");\n                 }\n             }\n             // Otherwise, no can do:\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n             if (\"false\".equals(text) || text.length() == 0) {\n                 return Boolean.FALSE;\n             }\n-            throw ctxt.weirdStringException(_valueClass, \"only \\\"true\\\" or \\\"false\\\" recognized\");\n+            throw ctxt.weirdStringException(text, _valueClass, \"only \\\"true\\\" or \\\"false\\\" recognized\");\n         }\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n             if (text.length() == 0) {\n                 return (Boolean) getEmptyValue();\n             }\n-            throw ctxt.weirdStringException(_valueClass, \"only \\\"true\\\" or \\\"false\\\" recognized\");\n+            throw ctxt.weirdStringException(text, _valueClass, \"only \\\"true\\\" or \\\"false\\\" recognized\");\n         }\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n                 }\n                 value = NumberInput.parseInt(text);\n             } catch (IllegalArgumentException iae) {\n-                throw ctxt.weirdStringException(_valueClass, \"not a valid Byte value\");\n+                throw ctxt.weirdStringException(text, _valueClass, \"not a valid Byte value\");\n             }\n             // So far so good: but does it fit?\n             // as per [JACKSON-804], allow range up to 255, inclusive\n             if (value < Byte.MIN_VALUE || value > 255) {\n-                throw ctxt.weirdStringException(_valueClass, \"overflow, value can not be represented as 8-bit value\");\n+                throw ctxt.weirdStringException(text, _valueClass, \"overflow, value can not be represented as 8-bit value\");\n             }\n             return Byte.valueOf((byte) value);\n         }\n                 }\n                 value = NumberInput.parseInt(text);\n             } catch (IllegalArgumentException iae) {\n-                throw ctxt.weirdStringException(_valueClass, \"not a valid Short value\");\n+                throw ctxt.weirdStringException(text, _valueClass, \"not a valid Short value\");\n             }\n             // So far so good: but does it fit?\n             if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {\n-                throw ctxt.weirdStringException(_valueClass, \"overflow, value can not be represented as 16-bit value\");\n+                throw ctxt.weirdStringException(text, _valueClass, \"overflow, value can not be represented as 16-bit value\");\n             }\n             return Short.valueOf((short) value);\n         }\n         int value = _parseIntPrimitive(jp, ctxt);\n         // So far so good: but does it fit?\n         if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {\n-            throw ctxt.weirdStringException(_valueClass, \"overflow, value can not be represented as 16-bit value\");\n+            throw ctxt.weirdStringException(String.valueOf(value),\n+                    _valueClass, \"overflow, value can not be represented as 16-bit value\");\n         }\n         return (short) value;\n     }\n                 if (len > 9) {\n                     long l = Long.parseLong(text);\n                     if (l < Integer.MIN_VALUE || l > Integer.MAX_VALUE) {\n-                        throw ctxt.weirdStringException(_valueClass,\n+                        throw ctxt.weirdStringException(text, _valueClass,\n                             \"Overflow: numeric value (\"+text+\") out of range of int (\"+Integer.MIN_VALUE+\" - \"+Integer.MAX_VALUE+\")\");\n                     }\n                     return (int) l;\n                 }\n                 return NumberInput.parseInt(text);\n             } catch (IllegalArgumentException iae) {\n-                throw ctxt.weirdStringException(_valueClass, \"not a valid int value\");\n+                throw ctxt.weirdStringException(text, _valueClass, \"not a valid int value\");\n             }\n         }\n         if (t == JsonToken.VALUE_NULL) {\n                 if (len > 9) {\n                     long l = Long.parseLong(text);\n                     if (l < Integer.MIN_VALUE || l > Integer.MAX_VALUE) {\n-                        throw ctxt.weirdStringException(_valueClass,\n+                        throw ctxt.weirdStringException(text, _valueClass,\n                             \"Overflow: numeric value (\"+text+\") out of range of Integer (\"+Integer.MIN_VALUE+\" - \"+Integer.MAX_VALUE+\")\");\n                     }\n                     return Integer.valueOf((int) l);\n                 }\n                 return Integer.valueOf(NumberInput.parseInt(text));\n             } catch (IllegalArgumentException iae) {\n-                throw ctxt.weirdStringException(_valueClass, \"not a valid Integer value\");\n+                throw ctxt.weirdStringException(text, _valueClass, \"not a valid Integer value\");\n             }\n         }\n         if (t == JsonToken.VALUE_NULL) {\n             try {\n                 return Long.valueOf(NumberInput.parseLong(text));\n             } catch (IllegalArgumentException iae) { }\n-            throw ctxt.weirdStringException(_valueClass, \"not a valid Long value\");\n+            throw ctxt.weirdStringException(text, _valueClass, \"not a valid Long value\");\n         }\n         if (t == JsonToken.VALUE_NULL) {\n             return (Long) getNullValue();\n             try {\n                 return NumberInput.parseLong(text);\n             } catch (IllegalArgumentException iae) { }\n-            throw ctxt.weirdStringException(_valueClass, \"not a valid long value\");\n+            throw ctxt.weirdStringException(text, _valueClass, \"not a valid long value\");\n         }\n         if (t == JsonToken.VALUE_NULL) {\n             return 0L;\n             try {\n                 return Float.parseFloat(text);\n             } catch (IllegalArgumentException iae) { }\n-            throw ctxt.weirdStringException(_valueClass, \"not a valid Float value\");\n+            throw ctxt.weirdStringException(text, _valueClass, \"not a valid Float value\");\n         }\n         if (t == JsonToken.VALUE_NULL) {\n             return (Float) getNullValue();\n             try {\n                 return Float.parseFloat(text);\n             } catch (IllegalArgumentException iae) { }\n-            throw ctxt.weirdStringException(_valueClass, \"not a valid float value\");\n+            throw ctxt.weirdStringException(text, _valueClass, \"not a valid float value\");\n         }\n         if (t == JsonToken.VALUE_NULL) {\n             return 0.0f;\n             try {\n                 return parseDouble(text);\n             } catch (IllegalArgumentException iae) { }\n-            throw ctxt.weirdStringException(_valueClass, \"not a valid Double value\");\n+            throw ctxt.weirdStringException(text, _valueClass, \"not a valid Double value\");\n         }\n         if (t == JsonToken.VALUE_NULL) {\n             return (Double) getNullValue();\n             try {\n                 return parseDouble(text);\n             } catch (IllegalArgumentException iae) { }\n-            throw ctxt.weirdStringException(_valueClass, \"not a valid double value\");\n+            throw ctxt.weirdStringException(text, _valueClass, \"not a valid double value\");\n         }\n         if (t == JsonToken.VALUE_NULL) {\n             return 0.0;\n             return (java.util.Date) getNullValue();\n         }\n         if (t == JsonToken.VALUE_STRING) {\n+            String value = null;\n             try {\n                 // As per [JACKSON-203], take empty Strings to mean\n-                String str = jp.getText().trim();\n-                if (str.length() == 0) {\n+                value = jp.getText().trim();\n+                if (value.length() == 0) {\n                     return (Date) getEmptyValue();\n                 }\n-                return ctxt.parseDate(str);\n+                return ctxt.parseDate(value);\n             } catch (IllegalArgumentException iae) {\n-                throw ctxt.weirdStringException(_valueClass, \"not a valid representation (error: \"+iae.getMessage()+\")\");\n+                throw ctxt.weirdStringException(value, _valueClass,\n+                        \"not a valid representation (error: \"+iae.getMessage()+\")\");\n             }\n         }\n         throw ctxt.mappingException(_valueClass, t);\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/exc/InvalidFormatException.java\n+package com.fasterxml.jackson.databind.exc;\n+\n+import com.fasterxml.jackson.core.JsonLocation;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+\n+/**\n+ * Specialized sub-class of {@link JsonMappingException}\n+ * that is used when the underlying problem appears to be that\n+ * of bad formatting of a value to deserialize.\n+ * \n+ * @since 2.1\n+ */\n+public class InvalidFormatException extends JsonMappingException\n+{\n+    private static final long serialVersionUID = 1L; // silly Eclipse, warnings\n+\n+    /**\n+     * Underlying value that could not be deserialized into\n+     * target type, if available.\n+     */\n+    protected final Object _value;\n+\n+    /**\n+     * Intended target type (type-erased class) that value could not\n+     * be deserialized into, if known.\n+     */\n+    protected final Class<?> _targetType;\n+    \n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+    \n+    public InvalidFormatException(String msg,\n+            Object value, Class<?> targetType)\n+    {\n+        super(msg);\n+        _value = value;\n+        _targetType = targetType;\n+    }\n+\n+    public InvalidFormatException(String msg, JsonLocation loc,\n+            Object value, Class<?> targetType)\n+    {\n+        super(msg, loc);\n+        _value = value;\n+        _targetType = targetType;\n+    }\n+    \n+    public static InvalidFormatException from(JsonParser jp, String msg,\n+            Object value, Class<?> targetType)\n+    {\n+        return new InvalidFormatException(msg, jp.getTokenLocation(),\n+                value, targetType);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Additional accessors\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Accessor for checking source value (String, Number usually) that could not\n+     * be deserialized into target type ({@link #getTargetType}).\n+     * Note that value may not be available, depending on who throws the exception\n+     * and when.\n+     */\n+    public Object getValue() {\n+        return _value;\n+    }\n+\n+    /**\n+     * Accessor for checking target type of value ({@link #getValue} that failed\n+     * to deserialize.\n+     * Note that type may not be available, depending on who throws the exception\n+     * and when.\n+     */\n+    public Class<?> getTargetType() {\n+        return _targetType;\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestDateDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestDateDeserialization.java\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n \n public class TestDateDeserialization\n     extends BaseMapTest\n \n     /*\n     /**********************************************************\n+    /* Tests to verify failing cases\n+    /**********************************************************\n+     */\n+\n+    public void testInvalidFormat() throws Exception\n+    {\n+        try {\n+            MAPPER.readValue(quote(\"foobar\"), Date.class);\n+            fail(\"Should have failed with an exception\");\n+        } catch (InvalidFormatException e) {\n+            verifyException(e, \"Can not construct instance\");\n+            assertEquals(\"foobar\", e.getValue());\n+            assertEquals(Date.class, e.getTargetType());\n+        } catch (Exception e) {\n+            fail(\"Wrong type of exception (\"+e.getClass().getName()+\"), should get \"\n+                    +InvalidFormatException.class.getName());\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n     /* Helper methods\n     /**********************************************************\n      */", "timestamp": 1342657502, "metainfo": ""}