{"sha": "2370828d9f11faa7bd663f4171ce16659394cf8f", "log": "Convert AtomicReferenceDeserializer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n                 referencedType = params[0];\n             }\n             \n-            JsonDeserializer<?> d2 = new JdkDeserializers.AtomicReferenceDeserializer(referencedType, property);\n+            JsonDeserializer<?> d2 = new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n             return (JsonDeserializer<Object>)d2;\n         }\n         // [JACKSON-386]: External/optional type handlers are handled somewhat differently\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n     \n     public static class AtomicReferenceDeserializer\n         extends StdScalarDeserializer<AtomicReference<?>>\n-        implements ResolvableDeserializer\n+        implements ContextualDeserializer\n     {\n         /**\n          * Type of value that we reference\n          */\n         protected final JavaType _referencedType;\n         \n-        protected final BeanProperty _property;\n-        \n-        protected JsonDeserializer<?> _valueDeserializer;\n+        protected final JsonDeserializer<?> _valueDeserializer;\n         \n         /**\n          * @param referencedType Parameterization of this reference\n          */\n-        public AtomicReferenceDeserializer(JavaType referencedType, BeanProperty property)\n+        public AtomicReferenceDeserializer(JavaType referencedType) {\n+            this(referencedType, null);\n+        }\n+        \n+        public AtomicReferenceDeserializer(JavaType referencedType,\n+                JsonDeserializer<?> deser)\n         {\n             super(AtomicReference.class);\n             _referencedType = referencedType;\n-            _property = property;\n+            _valueDeserializer = deser;\n         }\n         \n         @Override\n         }\n         \n         @Override\n-        public void resolve(DeserializationContext ctxt)\n-            throws JsonMappingException\n-        {\n-            if (_valueDeserializer == null) {\n-                _valueDeserializer = ctxt.findValueDeserializer(_referencedType, _property);\n-            }\n+        public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n+                BeanProperty property) throws JsonMappingException\n+        {\n+            JsonDeserializer<?> deser = _valueDeserializer;\n+            if (deser != null) {\n+                return this;\n+            }\n+            return new AtomicReferenceDeserializer(_referencedType,\n+                    ctxt.findValueDeserializer(_referencedType, property));\n         }\n     }\n ", "timestamp": 1327942320, "metainfo": ""}