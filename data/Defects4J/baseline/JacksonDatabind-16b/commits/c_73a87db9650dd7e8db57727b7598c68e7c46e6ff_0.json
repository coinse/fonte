{"sha": "73a87db9650dd7e8db57727b7598c68e7c46e6ff", "log": "Complete #638 implementation", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n     {\n         _member = member;\n         _contextAnnotations = contextAnnotations;\n+\n         _name = new SerializedString(propDef.getName());\n         _wrapperName = propDef.getWrapperName();\n+        _metadata = propDef.getMetadata();\n+        _includeInViews = propDef.findViews();\n+\n         _declaredType = declaredType;\n         _serializer = (JsonSerializer<Object>) ser;\n         _dynamicSerializers = (ser == null) ? PropertySerializerMap.emptyMap() : null;\n         _typeSerializer = typeSer;\n         _cfgSerializationType = serType;\n-        _metadata = propDef.getMetadata();\n \n         if (member instanceof AnnotatedField) {\n             _accessorMethod = null;\n             _accessorMethod = (Method) member.getMember();\n             _field = null;\n         } else {\n-            // 01-Dec-2014, tatu: Used to be illegal, but now explicitly allowed\n+            // 01-Dec-2014, tatu: Used to be illegal, but now explicitly allowed for virtual props\n             _accessorMethod = null;\n             _field = null;\n         }\n         _suppressNulls = suppressNulls;\n         _suppressableValue = suppressableValue;\n-        _includeInViews = propDef.findViews();\n \n         // this will be resolved later on, unless nulls are to be suppressed\n         _nullSerializer = null;\n     }\n-    \n+\n+    /**\n+     * Constructor that may be of use to virtual properties, when there is need for\n+     * the zero-arg (\"default\") constructor, and actual initialization is done\n+     * after constructor call.\n+     * \n+     * @since 2.5\n+     */\n+    protected BeanPropertyWriter() {\n+        _member = null;\n+        _contextAnnotations = null;\n+\n+        _name = null;\n+        _wrapperName = null;\n+        _metadata = null;\n+        _includeInViews = null;\n+\n+        _declaredType = null;\n+        _serializer = null;\n+        _dynamicSerializers = null;\n+        _typeSerializer = null;\n+        _cfgSerializationType = null;\n+\n+        _accessorMethod = null;\n+        _field = null;\n+        _suppressNulls = false;\n+        _suppressableValue = null;\n+\n+        _nullSerializer = null;\n+    }\n+\n     /**\n      * \"Copy constructor\" to be used by filtering sub-classes\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/VirtualBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/VirtualBeanPropertyWriter.java\n  * to add \"virtual\" properties in addition to regular ones.\n  * \n  * @since 2.5\n+ * \n+ * @see com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter\n  */\n public abstract class VirtualBeanPropertyWriter\n     extends BeanPropertyWriter\n {\n+    /**\n+     * Constructor used by most sub-types.\n+     */\n     protected VirtualBeanPropertyWriter(BeanPropertyDefinition propDef,\n-            Annotations contextAnnotations, JavaType declaredType,\n-            JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType) {\n-        this(propDef, contextAnnotations, declaredType, ser, typeSer, serType,\n+            Annotations contextAnnotations, JavaType declaredType)\n+    {\n+        this(propDef, contextAnnotations, declaredType, null, null, null,\n                 propDef.findInclusion());\n+    }\n+\n+    /**\n+     * Constructor that may be used by sub-classes for constructing a \"blue-print\" instance;\n+     * one that will only become (or create) actual usable instance when its\n+     * {@link #withConfig} method is called.\n+     */\n+    protected VirtualBeanPropertyWriter() {\n+        super();\n     }\n \n     /**\n         }\n         return null;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Standard accessor overrides\n \n     /**\n      * Contextualization method called on a newly constructed virtual bean property.\n-     * If information is used to change behavior, it is recommended that a new instance\n-     * is constructed with given information and returned; however, this is not mandatory\n-     * and modifying (and returning) this instance is legal as well as calls are made\n-     * in thread-safe manner.\n+     * Usually a new intance needs to be created due to finality of some of configuration\n+     * members; otherwise while recommended, creating a new instance is not strictly-speaking\n+     * mandatory because calls are made in thread-safe manner, as part of initialization\n+     * before use.\n      *\n      * @param config Currenct configuration; guaranteed to be {@link SerializationConfig}\n-     *   (but not typed since caller does not have full typing)\n+     *   (just not typed since caller does not have dependency to serialization-specific types)\n      * @param declaringClass Class that contains this property writer\n      * @param propDef Nominal property definition to use\n      * @param type Declared type for the property\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestVirtualProperties.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestVirtualProperties.java\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.core.JsonGenerator;\n \n-import com.fasterxml.jackson.databind.BaseMapTest;\n-import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonAppend;\n+import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n+import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n+import com.fasterxml.jackson.databind.util.Annotations;\n \n /**\n  * Tests for verifying that one can append virtual properties after regular ones.\n     @JsonAppend(prepend=true, attrs={ @JsonAppend.Attr(\"id\"),\n             @JsonAppend.Attr(value=\"internal\", propName=\"extra\")\n         })\n-        static class SimpleBeanPrepend\n-        {\n-            public int value = 13;\n-        }\n+    static class SimpleBeanPrepend\n+    {\n+        public int value = 13;\n+    }\n \n     enum ABC {\n         A, B, C;\n     static class OptionalsBean\n     {\n         public int value = 28;\n+    }\n+\n+    static class CustomVProperty\n+        extends VirtualBeanPropertyWriter\n+    {\n+        private CustomVProperty() { super(); }\n+\n+        private CustomVProperty(BeanPropertyDefinition propDef,\n+                Annotations ctxtAnn, JavaType type) {\n+            super(propDef, ctxtAnn, type);\n+        }\n+\n+        @Override\n+        protected Object value(Object bean, JsonGenerator jgen, SerializerProvider prov) {\n+            if (_name.toString().equals(\"id\")) {\n+                return \"abc123\";\n+            }\n+            if (_name.toString().equals(\"extra\")) {\n+                return new int[] { 42 };\n+            }\n+            return \"???\";\n+        }\n+\n+        @Override\n+        public VirtualBeanPropertyWriter withConfig(MapperConfig<?> config,\n+                AnnotatedClass declaringClass, BeanPropertyDefinition propDef,\n+                JavaType type)\n+        {\n+            return new CustomVProperty(propDef, declaringClass.getAnnotations(), type);\n+        }\n+    }\n+\n+    @JsonAppend(prepend=true, props={ @JsonAppend.Prop(value=CustomVProperty.class, name=\"id\"),\n+            @JsonAppend.Prop(value=CustomVProperty.class, name=\"extra\")\n+        })\n+    static class CustomVBean\n+    {\n+        public int value = 72;\n     }\n     \n     /*\n                 .writeValueAsString(new OptionalsBean());\n         assertEquals(aposToQuotes(\"{'value':28}\"), json);\n     }\n+\n+    public void testCustomProperties() throws Exception\n+    {\n+        String json = WRITER.withAttribute(\"desc\", \"nice\")\n+                .writeValueAsString(new CustomVBean());\n+        assertEquals(aposToQuotes(\"{'id':'abc123','extra':[42],'value':72}\"), json);\n+    }\n }", "timestamp": 1418087008, "metainfo": ""}