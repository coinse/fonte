{"sha": "67942a586ad1e6e5a39dae40115e47d3224df837", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n             }\n         }\n         return new ObjectArraySerializer(type.getContentType(), staticTyping, elementTypeSerializer,\n-                property, elementValueSerializer);\n+                elementValueSerializer);\n     }\n \n     /*\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java\n+package com.fasterxml.jackson.databind.ser.std;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.*;\n+\n+public abstract class ArraySerializerBase<T>\n+    extends ContainerSerializer<T>\n+{\n+    protected final TypeSerializer _valueTypeSerializer;\n+\n+    protected final BeanProperty _property;\n+    \n+    protected ArraySerializerBase(Class<T> cls, TypeSerializer vts, BeanProperty property)\n+    {\n+        super(cls);\n+        _valueTypeSerializer = vts;\n+        _property = property;\n+    }\n+    \n+    protected ArraySerializerBase(ArraySerializerBase<?> src, TypeSerializer vts)\n+    {\n+        super(src._handledType, false);\n+        _valueTypeSerializer = vts;\n+        _property = src._property;\n+    }\n+    \n+    protected ArraySerializerBase(ArraySerializerBase<?> src, BeanProperty property)\n+    {\n+        super(src._handledType, false);\n+        _valueTypeSerializer = src._valueTypeSerializer;\n+        _property = property;\n+    }\n+\n+    \n+    @Override\n+    public final void serialize(T value, JsonGenerator jgen, SerializerProvider provider)\n+        throws IOException, JsonGenerationException\n+    {\n+        jgen.writeStartArray();\n+        serializeContents(value, jgen, provider);\n+        jgen.writeEndArray();\n+    }\n+    \n+    @Override\n+    public final void serializeWithType(T value, JsonGenerator jgen, SerializerProvider provider,\n+            TypeSerializer typeSer)\n+        throws IOException, JsonGenerationException\n+    {\n+        typeSer.writeTypePrefixForArray(value, jgen);\n+        serializeContents(value, jgen, provider);\n+        typeSer.writeTypeSuffixForArray(value, jgen);\n+    }\n+\n+    protected abstract void serializeContents(T value, JsonGenerator jgen, SerializerProvider provider)\n+        throws IOException, JsonGenerationException;\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n import com.fasterxml.jackson.core.*;\n \n \n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n-import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n+import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n import com.fasterxml.jackson.databind.type.ArrayType;\n \n  */\n @JacksonStdImpl\n public class ObjectArraySerializer\n-    extends StdArraySerializers.ArraySerializerBase<Object[]>\n-    implements ResolvableSerializer\n+    extends ArraySerializerBase<Object[]>\n+    implements ContextualSerializer\n {\n     /**\n      * Whether we are using static typing (using declared types, ignoring\n      * runtime type to serializer is handled using this object\n      */\n     protected PropertySerializerMap _dynamicSerializers;\n-    \n+\n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n     \n     public ObjectArraySerializer(JavaType elemType, boolean staticTyping,\n-            TypeSerializer vts, BeanProperty property, JsonSerializer<Object> elementSerializer)\n-    {\n-        super(Object[].class, vts, property);\n+            TypeSerializer vts, JsonSerializer<Object> elementSerializer)\n+    {\n+        super(Object[].class, vts, null);\n         _elementType = elemType;\n         _staticTyping = staticTyping;\n         _dynamicSerializers = PropertySerializerMap.emptyMap();\n         _elementSerializer = elementSerializer;\n     }\n \n+    public ObjectArraySerializer(ObjectArraySerializer src, TypeSerializer typeSer)\n+    {\n+        super(src, typeSer);\n+        _elementType = src._elementType;\n+        _staticTyping = src._staticTyping;\n+        _dynamicSerializers = src._dynamicSerializers;\n+        _elementSerializer = src._elementSerializer;\n+    }\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    public ObjectArraySerializer(ObjectArraySerializer src,\n+            BeanProperty property, JsonSerializer<?> elementSerializer)\n+    {\n+        super(src, property);\n+        _elementType = src._elementType;\n+        _staticTyping = src._staticTyping;\n+        _dynamicSerializers = src._dynamicSerializers;\n+        _elementSerializer = (JsonSerializer<Object>) elementSerializer;\n+    }\n+    \n     @Override\n     public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts)\n     {\n-        return new ObjectArraySerializer(_elementType, _staticTyping, vts, _property, _elementSerializer);\n-    }\n-\n+        return new ObjectArraySerializer(_elementType, _staticTyping, vts, _elementSerializer);\n+    }\n+\n+    public ObjectArraySerializer withValueSerializer(BeanProperty prop, JsonSerializer<?> ser) {\n+        if (_property == prop && ser == _elementSerializer) {\n+            return this;\n+        }\n+        return new ObjectArraySerializer(this, prop, ser);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Post-processing\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public JsonSerializer<?> createContextual(SerializerProvider provider,\n+            BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        if (_elementSerializer == null) {\n+            if (_staticTyping) {\n+                return withValueSerializer(property, provider.findValueSerializer(_elementType, property));\n+            }\n+        } else if (_elementSerializer instanceof ContextualSerializer) {\n+            return withValueSerializer(property, ((ContextualSerializer) _elementSerializer)\n+                    .createContextual(provider, property));\n+        }\n+        return this;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Accessors\n+    /**********************************************************\n+     */\n+        \n     @Override\n     public JavaType getContentType() {\n         return _elementType;\n     public boolean isEmpty(Object[] value) {\n         return (value == null) || (value.length == 0);\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Actual serialization\n+    /**********************************************************\n+     */\n     \n     @Override\n     public void serializeContents(Object[] value, JsonGenerator jgen, SerializerProvider provider)\n         return o;\n     }\n \n-    /**\n-     * Need to get callback to resolve value serializer, if static typing\n-     * is used (either being forced, or because value type is final)\n-     */\n-    @Override\n-    public void resolve(SerializerProvider provider)\n-        throws JsonMappingException\n-    {\n-        if (_staticTyping && _elementSerializer == null) {\n-            _elementSerializer = provider.findValueSerializer(_elementType, _property);\n-        }\n-    }        \n-\n     protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,\n             Class<?> type, SerializerProvider provider) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n     /* Base classes\n     /**********************************************************\n      */\n-    \n-    /**\n-     * Base class for serializers that will output contents as JSON\n-     * arrays.\n-     */\n-    public abstract static class ArraySerializerBase<T>\n-        extends ContainerSerializer<T>\n-    {\n-         /**\n-         * Type serializer used for values, if any.\n-         */\n-        protected final TypeSerializer _valueTypeSerializer;\n-\n-        /**\n-         * Array-valued property being serialized with this instance\n-         */\n-        protected final BeanProperty _property;\n-        \n-        protected ArraySerializerBase(Class<T> cls, TypeSerializer vts, BeanProperty property)\n-        {\n-            super(cls);\n-            _valueTypeSerializer = vts;\n-            _property = property;\n-        }\n-        \n-        @Override\n-        public final void serialize(T value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n-        {\n-            jgen.writeStartArray();\n-            serializeContents(value, jgen, provider);\n-            jgen.writeEndArray();\n-        }\n-        \n-        @Override\n-        public final void serializeWithType(T value, JsonGenerator jgen, SerializerProvider provider,\n-                TypeSerializer typeSer)\n-            throws IOException, JsonGenerationException\n-        {\n-            typeSer.writeTypePrefixForArray(value, jgen);\n-            serializeContents(value, jgen, provider);\n-            typeSer.writeTypeSuffixForArray(value, jgen);\n-        }\n-\n-        protected abstract void serializeContents(T value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException;\n-    }\n \n     /*\n      ****************************************************************", "timestamp": 1328058820, "metainfo": ""}