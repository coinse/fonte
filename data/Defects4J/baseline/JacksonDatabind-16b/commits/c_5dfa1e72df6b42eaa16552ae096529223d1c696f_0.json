{"sha": "5dfa1e72df6b42eaa16552ae096529223d1c696f", "log": "Javadoc improvement", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n import java.math.BigInteger;\n import java.util.*;\n \n-import com.fasterxml.jackson.core.JsonPointer;\n-import com.fasterxml.jackson.core.TreeNode;\n+import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.node.JsonNodeType;\n import com.fasterxml.jackson.databind.node.MissingNode;\n import com.fasterxml.jackson.databind.util.EmptyIterator;\n  *<p>\n  * Actual concrete sub-classes can be found from package\n  * {@link com.fasterxml.jackson.databind.node}.\n+ *<p>\n+ * Note that it is possible to \"read\" from nodes, using\n+ * method {@link TreeNode#traverse(ObjectCodec)}, which will result in\n+ * a {@link JsonParser} being constructed. This can be used for (relatively)\n+ * efficient conversations between different representations; and it is what\n+ * core databind uses for methods like {@link ObjectMapper#treeToValue(TreeNode, Class)}\n+ * and {@link ObjectMapper#treeAsTokens(TreeNode)}\n  */\n public abstract class JsonNode\n     implements TreeNode, Iterable<JsonNode>\n     /**********************************************************\n      */\n \n-//    public abstract JsonToken asToken();\n-\n-//    public abstract JsonParser.NumberType numberType();\n-\n-//    public abstract JsonParser traverse();\n+//  public abstract JsonToken asToken();\n+//  public abstract JsonToken traverse();\n+//  public abstract JsonToken traverse(ObjectCodec codec);\n+//  public abstract JsonParser.NumberType numberType();\n \n     @Override\n     public int size() { return 0; }", "timestamp": 1416422998, "metainfo": ""}