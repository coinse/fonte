{"sha": "a2e27204ebde827a382dbbb8865a8edbfd08247b", "log": "Trying to straighten out resolution/contextualization of 'untyped' deserializer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n     /**\n      * Method for checking whether we could find a deserializer\n      * for given type.\n-     * \n+     *\n      * @param type\n      * @since 2.3\n      */\n     }\n \n     /**\n+     * Variant that will try to locate deserializer for current type, but without\n+     * performing any contextualization (unlike {@link #findContextualValueDeserializer})\n+     * or checking for need to create a {@link TypeDeserializer} (unlike\n+     * {@link #findRootValueDeserializer(JavaType)}.\n+     * This method is usually called from within {@link ResolvableDeserializer#resolve},\n+     * and expectation is that caller then calls either\n+     * {@link #handlePrimaryContextualization(JsonDeserializer, BeanProperty)} or\n+     * {@link #handleSecondaryContextualization(JsonDeserializer, BeanProperty)} at a\n+     * later point, as necessary.\n+     *\n+     * @since 2.5\n+     */\n+    public final JsonDeserializer<Object> findNonContextualValueDeserializer(JavaType type)\n+        throws JsonMappingException\n+    {\n+        return _cache.findValueDeserializer(this, _factory, type);\n+    }\n+    \n+    /**\n      * Method for finding a deserializer for root-level value.\n      */\n     @SuppressWarnings(\"unchecked\")\n             BeanProperty prop)\n         throws JsonMappingException\n     {\n-        if (deser != null) {\n-            if (deser instanceof ContextualDeserializer) {\n-                deser = ((ContextualDeserializer) deser).createContextual(this, prop);\n-            }\n+        if (deser instanceof ContextualDeserializer) {\n+            deser = ((ContextualDeserializer) deser).createContextual(this, prop);\n         }\n         return deser;\n     }\n      */\n     public JsonDeserializer<?> handleSecondaryContextualization(JsonDeserializer<?> deser,\n             BeanProperty prop)\n-        throws JsonMappingException {\n-        if (deser != null && (deser instanceof ContextualDeserializer)) {\n+        throws JsonMappingException\n+    {\n+        if (deser instanceof ContextualDeserializer) {\n             deser = ((ContextualDeserializer) deser).createContextual(this, prop);\n         }\n         return deser;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java\n         _stringDeserializer = (JsonDeserializer<Object>) stringDeser;\n         _numberDeserializer = (JsonDeserializer<Object>) numberDeser;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Initialization\n     protected JsonDeserializer<Object> _findCustomDeser(DeserializationContext ctxt, JavaType type)\n         throws JsonMappingException\n     {\n-        // NOTE: since we don't yet have the referring property, this should be fine:\n-        JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(type);\n+        // Since we are calling from `resolve`, we should NOT try to contextualize yet;\n+        // contextualization will only occur at a later point\n+        JsonDeserializer<?> deser = ctxt.findNonContextualValueDeserializer(type);\n         if (ClassUtil.isJacksonStdImpl(deser)) {\n             return null;\n         }\n                 &&  getClass() == UntypedObjectDeserializer.class) {\n             return Vanilla.std;\n         }\n-        JsonDeserializer<?> mapDeserializer = _mapDeserializer;\n-        if (mapDeserializer instanceof ContextualDeserializer) {\n-            mapDeserializer = ((ContextualDeserializer)mapDeserializer).createContextual(ctxt, property);\n-        }\n-        JsonDeserializer<?> listDeserializer = _listDeserializer;\n-        if (listDeserializer instanceof ContextualDeserializer) {\n-            listDeserializer = ((ContextualDeserializer)listDeserializer).createContextual(ctxt, property);\n-        }\n-        JsonDeserializer<?> stringDeserializer = _stringDeserializer;\n-        if (stringDeserializer instanceof ContextualDeserializer) {\n-            stringDeserializer = ((ContextualDeserializer)stringDeserializer).createContextual(ctxt, property);\n-        }\n-        JsonDeserializer<?> numberDeserializer = _numberDeserializer;\n-        if (numberDeserializer instanceof ContextualDeserializer) {\n-            numberDeserializer = ((ContextualDeserializer)numberDeserializer).createContextual(ctxt, property);\n-        }\n+        JsonDeserializer<?> mapDeserializer = ctxt.handlePrimaryContextualization(_mapDeserializer, property);\n+        JsonDeserializer<?> listDeserializer = ctxt.handlePrimaryContextualization(_listDeserializer, property);\n+        JsonDeserializer<?> stringDeserializer = ctxt.handlePrimaryContextualization(_stringDeserializer, property);\n+        JsonDeserializer<?> numberDeserializer = ctxt.handlePrimaryContextualization(_numberDeserializer, property);\n \n         // And if anything changed, we'll need to change too!\n         if ((mapDeserializer != _mapDeserializer)", "timestamp": 1416964072, "metainfo": ""}