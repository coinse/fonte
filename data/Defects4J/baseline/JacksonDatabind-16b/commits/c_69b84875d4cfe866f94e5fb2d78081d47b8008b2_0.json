{"sha": "69b84875d4cfe866f94e5fb2d78081d47b8008b2", "log": "Fixed #370", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\n     public JsonSerializer<?> build()\n     {\n         BeanPropertyWriter[] properties;\n-        // No properties or any getter? No real serializer; caller gets to handle\n+        // No properties, any getter or object id writer?\n+        // No real serializer; caller gets to handle\n         if (_properties == null || _properties.isEmpty()) {\n-            if (_anyGetter == null) {\n+            if (_anyGetter == null && _objectIdWriter == null) {\n                 return null;\n             }\n             properties = NO_PROPERTIES;\n         } else {\n             properties = _properties.toArray(new BeanPropertyWriter[_properties.size()]);\n-            \n         }\n         return new BeanSerializer(_beanDesc.getType(), this,\n                 properties, _filteredProperties);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         }\n         \n         JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-\n+        \n         /* However, after all modifications: no properties, no serializer\n          * (note; as per [JACKSON-670], check was moved later on from an earlier location)\n          */\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdSerialization.java\n import com.fasterxml.jackson.annotation.JsonIdentityReference;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n-\n import com.fasterxml.jackson.databind.*;\n \n /**\n         public int value;\n         public int customId;\n     }\n-    \n+\n+    // [Issue#370]\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"@id\")\n+    public static class EmptyObject { }\n+\n     /*\n     /*****************************************************\n     /* Unit tests, external id serialization\n \n     private final static String EXP_SIMPLE_INT_CLASS = \"{\\\"id\\\":1,\\\"value\\\":13,\\\"next\\\":1}\";\n     \n-    private final ObjectMapper MAPPER = new ObjectMapper();\n+    private final ObjectMapper MAPPER = objectMapper();\n \n     public void testSimpleSerializationClass() throws Exception\n     {\n         json = MAPPER.writeValueAsString(src);\n         assertEquals(EXP_SIMPLE_INT_PROP, json);\n     }\n+\n+    // [Issue#370]\n+    public void testEmptyObjectWithId() throws Exception\n+    {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        String json = mapper.writeValueAsString(new EmptyObject());\n+        assertEquals(aposToQuotes(\"{'@id':1}\"), json);\n+    }    \n \n     /*\n     /*****************************************************", "timestamp": 1387426644, "metainfo": ""}