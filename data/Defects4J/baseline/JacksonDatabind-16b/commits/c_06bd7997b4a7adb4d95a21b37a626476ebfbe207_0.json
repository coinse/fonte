{"sha": "06bd7997b4a7adb4d95a21b37a626476ebfbe207", "log": "Cleanup; adding one more test case...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n-import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n-import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;\n import com.fasterxml.jackson.databind.type.ClassKey;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.*;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n      */\n     public static class Base implements Deserializers\n     {\n-//      @Override\n+        @Override\n         public JsonDeserializer<?> findArrayDeserializer(ArrayType type,\n                 DeserializationConfig config, BeanDescription beanDesc,\n                 TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n             return null;\n         }\n \n-//      @Override\n+        @Override\n         public JsonDeserializer<?> findCollectionDeserializer(CollectionType type,\n                 DeserializationConfig config, BeanDescription beanDesc,\n                 TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n             return null;\n         }\n \n-//      @Override\n+        @Override\n         public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type,\n                 DeserializationConfig config, BeanDescription beanDesc,\n                 TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n             return null;\n         }\n \n-//      @Override\n+        @Override\n         public JsonDeserializer<?> findMapDeserializer(MapType type,\n                 DeserializationConfig config, BeanDescription beanDesc,\n                 KeyDeserializer keyDeserializer,\n             return null;\n         }\n \n-//      @Override\n+        @Override\n         public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type,\n                 DeserializationConfig config, BeanDescription beanDesc,\n                 KeyDeserializer keyDeserializer,\n             return null;\n         }\n \n-//      @Override\n+        @Override\n         public JsonDeserializer<?> findEnumDeserializer(Class<?> type,\n                 DeserializationConfig config, BeanDescription beanDesc)\n             throws JsonMappingException\n             return null;\n         }\n         \n-//      @Override\n+        @Override\n         public JsonDeserializer<?> findTreeNodeDeserializer(Class<? extends JsonNode> nodeType,\n                 DeserializationConfig config, BeanDescription beanDesc)\n             throws JsonMappingException\n             return null;\n         }\n \n-//      @Override\n+        @Override\n         public JsonDeserializer<?> findBeanDeserializer(JavaType type,\n                 DeserializationConfig config, BeanDescription beanDesc)\n             throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayBuilderDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayBuilderDeserializer.java\n      * due to non-guaranteed ordering possibly some other properties\n      * as well.\n      */\n+    @Override\n     protected final Object _deserializeUsingPropertyBased(final JsonParser jp,\n             final DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayDeserializer.java\n      * due to non-guaranteed ordering possibly some other properties\n      * as well.\n      */\n+    @Override\n     protected final Object _deserializeUsingPropertyBased(final JsonParser jp, final DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n     /* Iterable, for convenient iterating over all properties\n     /**********************************************************\n      */\n-    \n+\n     /**\n      * Accessor for traversing over all contained properties.\n      */\n-//    @Override\n+    @Override\n     public Iterator<SettableBeanProperty> iterator() {\n         return new IteratorImpl(_buckets);\n     }\n             _nextBucketIndex = i;\n         }\n \n-//        @Override\n+        @Override\n         public boolean hasNext() {\n             return _currentBucket != null;\n         }\n \n-//        @Override\n+        @Override\n         public SettableBeanProperty next()\n         {\n             Bucket curr = _currentBucket;\n             return curr.value;\n         }\n \n-//       @Override\n+        @Override\n         public void remove() {\n             throw new UnsupportedOperationException();\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n     /**********************************************************************\n      */\n \n+    @Override\n     public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n         if (_delegatee instanceof ResolvableDeserializer) {\n             ((ResolvableDeserializer) _delegatee).resolve(ctxt);\n         }\n     }\n \n+    @Override\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n     /* Validation, post-processing\n     /**********************************************************\n      */\n-\n-//    @Override\n-    @SuppressWarnings(\"unchecked\")\n+    @Override\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n     {\n         }\n         JsonDeserializer<?> valueDeser = _valueDeserializer;\n         if (valueDeser == null) {\n+            // #125: May have a content converter\n+            valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n+            if (valueDeser == null) {\n             // And we may also need to get deserializer for String\n-            JsonDeserializer<?> deser = ctxt.findContextualValueDeserializer(\n-                    _collectionType.getContentType(), property);\n-            valueDeser = (JsonDeserializer<String>) deser;\n+                valueDeser = ctxt.findContextualValueDeserializer( _collectionType.getContentType(), property);\n+            }\n         } else { // if directly assigned, probably not yet contextual, so:\n             if (valueDeser instanceof ContextualDeserializer) {\n                 valueDeser = ((ContextualDeserializer) valueDeser).createContextual(ctxt, property);\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java\n      * Method called by {@link com.fasterxml.jackson.databind.deser.BasicDeserializerFactory}\n      * to register deserializers this class provides.\n      */\n-//    @Override\n+    @Override\n     public Collection<StdDeserializer<?>> provide()\n     {\n         return Arrays.asList(new StdDeserializer<?>[] {\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonMapFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonMapFormatVisitor.java\n         public Base() { }\n         public Base(SerializerProvider p) { _provider = p; }\n \n+        @Override\n         public SerializerProvider getProvider() { return _provider; }\n \n+        @Override\n         public void setProvider(SerializerProvider p) { _provider = p; }\n \n+        @Override\n         public void keyFormat(JsonFormatVisitable handler, JavaType keyType) throws JsonMappingException { }\n+        @Override\n         public void valueFormat(JsonFormatVisitable handler, JavaType valueType) throws JsonMappingException { }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonNumberFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonNumberFormatVisitor.java\n      */\n     public static class Base extends JsonValueFormatVisitor.Base\n         implements JsonNumberFormatVisitor {\n-        //@Override\n+        @Override\n         public void numberType(JsonParser.NumberType type) { }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonValueFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonValueFormatVisitor.java\n      * of the interface, even if new methods are getting added.\n      */\n     public static class Base implements JsonValueFormatVisitor {\n+        @Override\n         public void format(JsonValueFormat format) { }\n+        @Override\n         public void enumTypes(Set<String> enums) { }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java\n     /**********************************************************\n      */\n \n-//  @Override\n+    @Override\n     public KeyDeserializer findKeyDeserializer(JavaType type,\n             DeserializationConfig config, BeanDescription beanDesc)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n      */\n     protected abstract boolean include(BeanPropertyWriter writer);\n \n+    @Override\n     public void serializeAsField(Object bean, JsonGenerator jgen,\n             SerializerProvider provider, BeanPropertyWriter writer) throws Exception\n     {\n         }\n     }\n \n-    \n+    @Override\n     public void depositSchemaProperty(BeanPropertyWriter writer,\n             ObjectNode propertiesNode, SerializerProvider provider)\n         throws JsonMappingException\n         }\n     }\n \n+    @Override\n     public void depositSchemaProperty(BeanPropertyWriter writer,\n             JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n      * We can try to find the actual serializer for value, if we can\n      * statically figure out what the result type must be.\n      */\n-//  @Override\n+    @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n     /**********************************************************\n      */\n \n-//  @Override\n+    @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/type/ClassKey.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/ClassKey.java\n     /**********************************************************\n      */\n \n-//  @Override\n+    @Override\n     public int compareTo(ClassKey other)\n     {\n         // Just need to sort by name, ok to collide (unless used in TreeMap/Set!)\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualDeserialization.java\n             return new StringValue(\"\"+_fieldName+\"=\"+jp.getText());\n         }\n \n-//      @Override\n+        @Override\n         public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n                 BeanProperty property)\n             throws JsonMappingException\n             return new StringValue(\"\"+_fieldName+\"=\"+jp.getText());\n         }\n     \n-//      @Override\n+        @Override\n         public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n                 BeanProperty property)\n             throws JsonMappingException\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualKeyTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualKeyTypes.java\n             }\n             jgen.writeFieldName(value);\n         }\n-    \n-//      @Override\n+\n+        @Override\n         public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property)\n             throws JsonMappingException\n         {\n             return _prefix + \":\" + key;\n         }\n \n-//      @Override\n+        @Override\n         public KeyDeserializer createContextual(DeserializationContext ctxt,\n                 BeanProperty property) throws JsonMappingException\n         {\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualSerialization.java\n             jgen.writeString(_prefix + value);\n         }\n \n-//      @Override\n+        @Override\n         public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property)\n                 throws JsonMappingException\n         {\n             jgen.writeString(\"contextual=\"+isContextual+\",resolved=\"+isResolved);\n         }\n \n-//      @Override\n+        @Override\n         public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property)\n                 throws JsonMappingException\n         {\n             return new ContextualAndResolvable(isResolved, isContextual+1);\n         }\n \n-//      @Override\n+        @Override\n         public void resolve(SerializerProvider provider) {\n             ++isResolved;\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualWithAnnDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualWithAnnDeserializer.java\n             return new StringValue(\"\"+_fieldName+\"=\"+jp.getText());\n         }\n \n-//      @Override\n+        @Override\n         public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n                 BeanProperty property)\n             throws JsonMappingException\n         {\n             return new StringValue(\"\"+_fieldName+\"=\"+jp.getText());\n         }\n-    \n-//      @Override\n+\n+        @Override\n         public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n                 BeanProperty property)\n             throws JsonMappingException\n--- a/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingDeserializer.java\n             return new ConvertingBean(values[0], values[1]);\n         }\n     }\n-\n+    \n     static class PointConverter implements Converter<int[], Point>\n     {\n         @Override public Point convert(int[] value) {\n         public Map<String,Point> values;\n     }\n \n+    static class LowerCaser implements Converter<String, String>\n+    {\n+        @Override\n+        public String convert(String value) {\n+            return value.toLowerCase();\n+        }\n+        \n+    }\n+\n+    static class LowerCaseText {\n+        @JsonDeserialize(converter=LowerCaser.class)\n+        public String text;\n+    }\n+\n+    static class LowerCaseTextArray {\n+        @JsonDeserialize(contentConverter=LowerCaser.class)\n+        public String[] texts;\n+    }\n+     \n     /*\n     /**********************************************************\n     /* Test methods\n         assertNotNull(wrapper.value);\n         assertEquals(3, wrapper.value.x);\n         assertEquals(4, wrapper.value.y);\n+    }\n+\n+    public void testPropertyAnnotationLowerCasing() throws Exception\n+    {\n+        LowerCaseText text = objectReader(LowerCaseText.class).readValue(\"{\\\"text\\\":\\\"Yay!\\\"}\");\n+        assertNotNull(text);\n+        assertNotNull(text.text);\n+        assertEquals(\"yay!\", text.text);\n+    }\n+\n+    public void testPropertyAnnotationArrayLC() throws Exception\n+    {\n+        LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue(\"{\\\"texts\\\":[\\\"ABC\\\"]}\");\n+        assertNotNull(texts);\n+        assertNotNull(texts.texts);\n+        assertEquals(1, texts.texts.length);\n+        assertEquals(\"abc\", texts.texts[0]);\n     }\n \n     public void testPropertyAnnotationForArrays() throws Exception\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n     enum EnumABC { A, B, C; }\n     \n     static class ArrayDeserializerModifier extends BeanDeserializerModifier {\n+        @Override\n         public JsonDeserializer<?> modifyArrayDeserializer(DeserializationConfig config, ArrayType valueType,\n                 BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n             return (JsonDeserializer<?>) new StdDeserializer<Object>(Object.class) {\n     }\n \n     static class CollectionDeserializerModifier extends BeanDeserializerModifier {\n+        @Override\n         public JsonDeserializer<?> modifyCollectionDeserializer(DeserializationConfig config, CollectionType valueType,\n                 BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n             return (JsonDeserializer<?>) new StdDeserializer<Object>(Object.class) {\n     }\n \n     static class MapDeserializerModifier extends BeanDeserializerModifier {\n+        @Override\n         public JsonDeserializer<?> modifyMapDeserializer(DeserializationConfig config, MapType valueType,\n                 BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n             return (JsonDeserializer<?>) new StdDeserializer<Object>(Object.class) {\n     }\n \n     static class EnumDeserializerModifier extends BeanDeserializerModifier {\n+        @Override\n         public JsonDeserializer<?> modifyEnumDeserializer(DeserializationConfig config, JavaType valueType,\n                 BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n             return (JsonDeserializer<?>) new StdDeserializer<Object>(Object.class) {\n     }\n \n     static class KeyDeserializerModifier extends BeanDeserializerModifier {\n+        @Override\n         public KeyDeserializer modifyKeyDeserializer(DeserializationConfig config, JavaType valueType,\n                 KeyDeserializer kd) {\n             return new KeyDeserializer() {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n         module.addDeserializer(Immutable.class,\n             new StdDelegatingDeserializer<Immutable>(\n                 new Converter<JsonNode, Immutable>() {\n-                    //@Override\n+                    @Override\n                     public Immutable convert(JsonNode value)\n                     {\n                         int x = value.path(\"x\").asInt();", "timestamp": 1362276984, "metainfo": ""}