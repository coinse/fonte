{"sha": "6262dd76625e16d10ee45bc90ae76b02101cd65a", "log": "Last refactoring wr #706, to make new base class public for other uses too", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n         JsonSerializer<Object> ser = provider\n                 .findValueSerializer(this.getType(), this)\n                 .unwrappingSerializer(_nameTransformer);\n-        \n+\n         if (ser.isUnwrappingSerializer()) {\n-            ser.acceptJsonFormatVisitor(new JsonFormatVisitorNullWrapper(provider) {\n+            ser.acceptJsonFormatVisitor(new JsonFormatVisitorWrapper.Base(provider) {\n                 // an unwrapping serializer will always expect ObjectFormat,\n                 // hence, the other cases do not have to be implemented\n                 @Override\n             super.depositSchemaProperty(visitor);\n         }\n     }\n-    \n+\n     // Override needed to support legacy JSON Schema generator\n     @Override\n     protected void _depositSchemaProperty(ObjectNode propertiesNode, JsonNode schemaNode)", "timestamp": 1424207224, "metainfo": ""}