{"sha": "e88a87c856421b4181b6a56ae9a5a320db9a62ad", "log": "Yet more fixing for #506.. :)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n                 chunk[ix++] = value;\n             }\n         } catch (Exception e) {\n-            throw JsonMappingException.wrapWithPath(e, chunk, ix);\n+            throw JsonMappingException.wrapWithPath(e, chunk, buffer.bufferedSize() + ix);\n         }\n \n         Object[] result;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java\n                     chunk[ix++] = value;\n                 }\n             } catch (Exception e) {\n-                throw JsonMappingException.wrapWithPath(e, chunk, ix);\n+                throw JsonMappingException.wrapWithPath(e, chunk, builder.bufferedSize() + ix);\n             }\n             return builder.completeAndClearBuffer(chunk, ix);\n         }\n                     chunk[ix++] = value;\n                 }\n             } catch (Exception e) {\n-                throw JsonMappingException.wrapWithPath(e, chunk, ix);\n+                throw JsonMappingException.wrapWithPath(e, chunk, builder.bufferedSize() + ix);\n             }\n             return builder.completeAndClearBuffer(chunk, ix);\n         }\n                     chunk[ix++] = value;\n                 }\n             } catch (Exception e) {\n-                throw JsonMappingException.wrapWithPath(e, chunk, ix);\n+                throw JsonMappingException.wrapWithPath(e, chunk, builder.bufferedSize() + ix);\n             }\n             return builder.completeAndClearBuffer(chunk, ix);\n         }\n                     chunk[ix++] = value;\n                 }\n             } catch (Exception e) {\n-                throw JsonMappingException.wrapWithPath(e, chunk, ix);\n+                throw JsonMappingException.wrapWithPath(e, chunk, builder.bufferedSize() + ix);\n             }\n             return builder.completeAndClearBuffer(chunk, ix);\n         }\n                     chunk[ix++] = value;\n                 }\n             } catch (Exception e) {\n-                throw JsonMappingException.wrapWithPath(e, chunk, ix);\n+                throw JsonMappingException.wrapWithPath(e, chunk, builder.bufferedSize() + ix);\n             }\n             return builder.completeAndClearBuffer(chunk, ix);\n         }\n                     chunk[ix++] = value;\n                 }\n             } catch (Exception e) {\n-                throw JsonMappingException.wrapWithPath(e, chunk, ix);\n+                throw JsonMappingException.wrapWithPath(e, chunk, builder.bufferedSize() + ix);\n             }\n             return builder.completeAndClearBuffer(chunk, ix);\n         }\n                     chunk[ix++] = value;\n                 }\n             } catch (Exception e) {\n-                throw JsonMappingException.wrapWithPath(e, chunk, ix);\n+                throw JsonMappingException.wrapWithPath(e, chunk, builder.bufferedSize() + ix);\n             }\n             return builder.completeAndClearBuffer(chunk, ix);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java\n     extends StdDeserializer<String[]>\n     implements ContextualDeserializer\n {\n-    private static final long serialVersionUID = -7589512013334920693L;\n+    private static final long serialVersionUID = 1L;\n \n     public final static StringArrayDeserializer instance = new StringArrayDeserializer();\n     \n                 chunk[ix++] = value;\n             }\n         } catch (Exception e) {\n-            throw JsonMappingException.wrapWithPath(e, chunk, ix);\n+            throw JsonMappingException.wrapWithPath(e, chunk, buffer.bufferedSize() + ix);\n         }\n         String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);\n         ctxt.returnObjectBuffer(buffer);\n--- a/src/main/java/com/fasterxml/jackson/databind/util/PrimitiveArrayBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/PrimitiveArrayBuilder.java\n     /**********************************************************\n      */\n \n+    public int bufferedSize() { return _bufferedEntryCount; }\n+    \n     public T resetAndStart()\n     {\n         _reset();", "timestamp": 1407997801, "metainfo": ""}