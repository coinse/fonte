{"sha": "712905e71de2d61b05214ed8748d96663db487f7", "log": "Improve JDK serialization handling of inner-non-static class properties", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java\n     /**\n      * Constructor used for JDK Serialization when reading persisted object\n      */\n-    protected FieldProperty(FieldProperty src, Field f)\n+    protected FieldProperty(FieldProperty src)\n     {\n         super(src);\n         _annotated = src._annotated;\n+        Field f = _annotated.getAnnotated();\n         if (f == null) {\n-            throw new IllegalArgumentException(\"No Field passed for property '\"+src.getName()\n-                    +\"' (class \"+src.getDeclaringClass().getName()+\")\");\n+            throw new IllegalArgumentException(\"Missing field (broken JDK (de)serialization?)\");\n         }\n         _field = f;\n     }\n      */\n \n     Object readResolve() {\n-        return new FieldProperty(this, _annotated.getAnnotated());\n+        return new FieldProperty(this);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Constructor;\n \n-import com.fasterxml.jackson.core.JsonParser;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.core.JsonToken;\n-import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.PropertyName;\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n \n /**\n     protected final SettableBeanProperty _delegate;\n \n     /**\n-     * Single-arg constructor we use for value instantiation.\n+     * Constructor used when deserializing this property.\n+     * Transient since there is no need to persist; only needed during\n+     * construction of objects.\n      */\n-    protected final Constructor<?> _creator;\n+    final protected transient Constructor<?> _creator;\n     \n+    /**\n+     * Serializable version of single-arg constructor we use for value instantiation.\n+     */\n+    protected AnnotatedConstructor _annotated;\n+\n     public InnerClassProperty(SettableBeanProperty delegate,\n             Constructor<?> ctor)\n     {\n         _creator = ctor;\n     }\n \n+    /**\n+     * Constructor used with JDK Serialization; needed to handle transient\n+     * Constructor, wrap/unwrap in/out-of Annotated variant.\n+     */\n+    protected InnerClassProperty(InnerClassProperty src, AnnotatedConstructor ann)\n+    {\n+        super(src);\n+        _delegate = src._delegate;\n+        _annotated = ann;\n+        _creator = (_annotated == null) ? null : _annotated.getAnnotated();\n+        if (_creator == null) {\n+            throw new IllegalArgumentException(\"Missing constructor (broken JDK (de)serialization?)\");\n+        }\n+    }\n+    \n     protected InnerClassProperty(InnerClassProperty src, JsonDeserializer<?> deser)\n     {\n         super(src, deser);\n      */\n \n     @Override\n-    public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt,\n-            Object bean)\n-        throws IOException, JsonProcessingException\n+    public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object bean)\n+        throws IOException\n     {\n         JsonToken t = jp.getCurrentToken();\n         Object value;\n     @Override\n     public Object deserializeSetAndReturn(JsonParser jp,\n     \t\tDeserializationContext ctxt, Object instance)\n-        throws IOException, JsonProcessingException\n+        throws IOException\n     {\n         return setAndReturn(instance, deserialize(jp, ctxt));\n     }\n     \n     @Override\n-    public final void set(Object instance, Object value) throws IOException\n-    {\n+    public final void set(Object instance, Object value) throws IOException {\n         _delegate.set(instance, value);\n     }\n \n     @Override\n-    public Object setAndReturn(Object instance, Object value)\n-            throws IOException\n-    {\n-    \treturn _delegate.setAndReturn(instance, value);\n+    public Object setAndReturn(Object instance, Object value) throws IOException {\n+        return _delegate.setAndReturn(instance, value);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* JDK serialization handling\n+    /**********************************************************\n+     */\n+\n+    // When reading things back, \n+    Object readResolve() {\n+        return new InnerClassProperty(this, _annotated);\n+    }\n+\n+    Object writeReplace() {\n+        // need to construct a fake instance to support serialization\n+        if (_annotated != null) {\n+            return this;\n+        }\n+        return new InnerClassProperty(this, new AnnotatedConstructor(_creator, null, null));\n     }\n }", "timestamp": 1407995367, "metainfo": ""}