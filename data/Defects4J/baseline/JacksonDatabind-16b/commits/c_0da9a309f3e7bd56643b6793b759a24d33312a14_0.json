{"sha": "0da9a309f3e7bd56643b6793b759a24d33312a14", "log": "Added specific tests for ArrayBlockingQueue and EnumMap based deserialization with object id.", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n package com.fasterxml.jackson.databind.struct;\n \n+import java.util.EnumMap;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.concurrent.ArrayBlockingQueue;\n \n import com.fasterxml.jackson.annotation.JsonAnySetter;\n import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference.UnresolvedId;\n import com.fasterxml.jackson.databind.struct.TestObjectId.Company;\n import com.fasterxml.jackson.databind.struct.TestObjectId.Employee;\n+import com.fasterxml.jackson.databind.struct.TestObjectIdDeserialization.EnumMapCompany.FooEnum;\n \n /**\n  * Unit test to verify handling of Object Id deserialization\n \n     static class ArrayCompany {\n         public Employee[] employees;\n+    }\n+\n+    static class ArrayBlockingQueueCompany {\n+        public ArrayBlockingQueue<Employee> employees;\n+    }\n+\n+    static class EnumMapCompany {\n+        public EnumMap<FooEnum,Employee> employees;\n+\n+        static enum FooEnum {\n+            A, B\n+        }\n     }\n \n     @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class)\n         assertEquals(3, company.employees.length);\n         Employee firstEmployee = company.employees[0];\n         Employee secondEmployee = company.employees[1];\n+        assertEmployees(firstEmployee, secondEmployee);\n+    }\n+\n+    // Do a specific test for ArrayBlockingQueue since it has its own deser.\n+    public void testForwardReferenceInQueue()\n+        throws Exception\n+    {\n+        String json = \"{\\\"employees\\\":[\"\n+                      + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n+                      + \"2,\"\n+                      +\"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n+                      + \"]}\";\n+        ArrayBlockingQueueCompany company = mapper.readValue(json, ArrayBlockingQueueCompany.class);\n+        assertEquals(3, company.employees.size());\n+        Employee firstEmployee = company.employees.take();\n+        Employee secondEmployee = company.employees.take();\n+        assertEmployees(firstEmployee, secondEmployee);\n+    }\n+\n+    public void testForwardReferenceInEnumMap()\n+        throws Exception\n+   {\n+        String json = \"{\\\"employees\\\":{\"\n+                      + \"\\\"A\\\":{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n+                      + \"\\\"B\\\": 2,\"\n+                      + \"\\\"C\\\":{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n+                      + \"}}\";\n+        EnumMapCompany company = mapper.readValue(json, EnumMapCompany.class);\n+        assertEquals(3, company.employees.size());\n+        Employee firstEmployee = company.employees.get(FooEnum.A);\n+        Employee secondEmployee = company.employees.get(FooEnum.B);\n         assertEmployees(firstEmployee, secondEmployee);\n     }\n ", "timestamp": 1389625653, "metainfo": ""}