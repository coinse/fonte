{"sha": "256c606b0b3251054b714dfe8ca19901e7b82046", "log": "Start work on #227; add support for serialization", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java\n      */\n     protected HashMap<ClassKey,JsonSerializer<?>> _interfaceMappings = null;\n \n+    /**\n+     * Flag to help find \"generic\" enum serializer, if one has been registered.\n+     * \n+     * @since 2.3\n+     */\n+    protected boolean _hasEnumSerializer = false;\n+    \n     /*\n     /**********************************************************\n     /* Life-cycle, construction and configuring\n             addSerializer(ser);\n         }\n     }\n-\n-    private void _addSerializer(Class<?> cls, JsonSerializer<?> ser)\n-    {\n-        ClassKey key = new ClassKey(cls);\n-        // Interface or class type?\n-        if (cls.isInterface()) {\n-            if (_interfaceMappings == null) {\n-                _interfaceMappings = new HashMap<ClassKey,JsonSerializer<?>>();\n-            }\n-            _interfaceMappings.put(key, ser);\n-        } else { // nope, class:\n-            if (_classMappings == null) {\n-                _classMappings = new HashMap<ClassKey,JsonSerializer<?>>();\n-            }\n-            _classMappings.put(key, ser);\n-        }\n-    }\n     \n     /*\n     /**********************************************************\n         Class<?> cls = type.getRawClass();\n         ClassKey key = new ClassKey(cls);\n         JsonSerializer<?> ser = null;\n-\n+        \n         // First: direct match?\n         if (cls.isInterface()) {\n             if (_interfaceMappings != null) {\n                 if (ser != null) {\n                     return ser;\n                 }\n+\n+                // [Issue#227]: Handle registration of plain `Enum` serializer\n+                if (_hasEnumSerializer && type.isEnumType()) {\n+                    key.reset(Enum.class);\n+                    ser = _classMappings.get(key);\n+                    if (ser != null) {\n+                        return ser;\n+                    }\n+                }\n+                \n                 // If not direct match, maybe super-class match?\n                 for (Class<?> curr = cls; (curr != null); curr = curr.getSuperclass()) {\n                     key.reset(curr);\n         }\n         return null;\n     }\n+\n+    protected void _addSerializer(Class<?> cls, JsonSerializer<?> ser)\n+    {\n+        ClassKey key = new ClassKey(cls);\n+        // Interface or class type?\n+        if (cls.isInterface()) {\n+            if (_interfaceMappings == null) {\n+                _interfaceMappings = new HashMap<ClassKey,JsonSerializer<?>>();\n+            }\n+            _interfaceMappings.put(key, ser);\n+        } else { // nope, class:\n+            if (_classMappings == null) {\n+                _classMappings = new HashMap<ClassKey,JsonSerializer<?>>();\n+            }\n+            _classMappings.put(key, ser);\n+            if (cls == Enum.class) {\n+                _hasEnumSerializer = true;\n+            }\n+        }\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonValue;\n \n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;\n \n /**\n     {\n         A, B;\n     }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    static class LowerCasingEnumSerializer extends StdSerializer<Enum>\n+    {\n+        public LowerCasingEnumSerializer() { super(Enum.class); }\n+        @Override\n+        public void serialize(Enum value, JsonGenerator jgen,\n+                SerializerProvider provider) throws IOException {\n+            jgen.writeString(value.name().toLowerCase());\n+        }\n+    }\n     \n     /*\n     /**********************************************************\n         String json = mapper.writeValueAsString(bean);\n         assertEquals(\"{\\\"map\\\":{\\\"b\\\":3}}\", json);\n     }\n-    \n+\n     // [JACKSON-684]\n     public void testAsIndex() throws Exception\n     {\n         } catch (JsonMappingException e) {\n             verifyException(e, \"Unsupported serialization shape\");\n         }\n+    }\n+    \n+    // [Issue#227]\n+    public void testGenericEnumSerializer() throws Exception\n+    {\n+        // By default, serialize using name\n+        ObjectMapper mapper = new ObjectMapper();\n+        SimpleModule module = new SimpleModule(\"foobar\");\n+        module.addSerializer(Enum.class, new LowerCasingEnumSerializer());\n+        mapper.registerModule(module);\n+        assertEquals(quote(\"b\"), mapper.writeValueAsString(TestEnum.B));\n     }\n }\n ", "timestamp": 1370562443, "metainfo": ""}