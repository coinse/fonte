{"sha": "6dd78d098d4de830f3e3c09dbbb69d103cda8ebb", "log": "Implement #180 in master", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n     public void serialize(List<String> value, JsonGenerator jgen, SerializerProvider provider)\n         throws IOException, JsonGenerationException\n     {\n+        final int len = value.size();\n+        // [JACKSON-805]\n+        if ((len == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) {\n+            _serializeUnwrapped(value, jgen, provider);\n+            return;\n+        }\n+        \n         jgen.writeStartArray();\n         if (_serializer == null) {\n-            serializeContents(value, jgen, provider);\n+            serializeContents(value, jgen, provider, len);\n         } else {\n-            serializeUsingCustom(value, jgen, provider);\n+            serializeUsingCustom(value, jgen, provider, len);\n         }\n         jgen.writeEndArray();\n+    }\n+\n+    private final void _serializeUnwrapped(List<String> value, JsonGenerator jgen, SerializerProvider provider)\n+        throws IOException, JsonGenerationException\n+    {\n+        if (_serializer == null) {\n+            serializeContents(value, jgen, provider, 1);\n+        } else {\n+            serializeUsingCustom(value, jgen, provider, 1);\n+        }\n     }\n     \n     @Override\n             TypeSerializer typeSer)\n         throws IOException, JsonGenerationException\n     {\n+        final int len = value.size();\n         typeSer.writeTypePrefixForArray(value, jgen);\n         if (_serializer == null) {\n-            serializeContents(value, jgen, provider);\n+            serializeContents(value, jgen, provider, len);\n         } else {\n-            serializeUsingCustom(value, jgen, provider);\n+            serializeUsingCustom(value, jgen, provider, len);\n         }\n         typeSer.writeTypeSuffixForArray(value, jgen);\n     }\n     \n-    private final void serializeContents(List<String> value, JsonGenerator jgen, SerializerProvider provider)\n+    private final void serializeContents(List<String> value, JsonGenerator jgen, SerializerProvider provider,\n+            int len)\n         throws IOException, JsonGenerationException\n     {\n         int i = 0;\n         try {\n-            final int len = value.size();\n             for (; i < len; ++i) {\n                 String str = value.get(i);\n                 if (str == null) {\n         }\n     }\n \n-    private final void serializeUsingCustom(List<String> value, JsonGenerator jgen, SerializerProvider provider)\n+    private final void serializeUsingCustom(List<String> value, JsonGenerator jgen, SerializerProvider provider,\n+            int len)\n         throws IOException, JsonGenerationException\n     {\n         int i = 0;\n         try {\n-            final int len = value.size();\n             final JsonSerializer<String> ser = _serializer;\n             for (i = 0; i < len; ++i) {\n                 String str = value.get(i);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n     public void serialize(Collection<String> value, JsonGenerator jgen, SerializerProvider provider)\n         throws IOException, JsonGenerationException\n     {\n+        // [JACKSON-805]\n+        if ((value.size() == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) {\n+            _serializeUnwrapped(value, jgen, provider);\n+            return;\n+        }      \n         jgen.writeStartArray();\n         if (_serializer == null) {\n             serializeContents(value, jgen, provider);\n         }\n         jgen.writeEndArray();\n     }\n-    \n+\n+    private final void _serializeUnwrapped(Collection<String> value, JsonGenerator jgen, SerializerProvider provider)\n+        throws IOException, JsonGenerationException\n+    {\n+        if (_serializer == null) {\n+            serializeContents(value, jgen, provider);\n+        } else {\n+            serializeUsingCustom(value, jgen, provider);\n+        }\n+    }\n+\n     @Override\n     public void serializeWithType(Collection<String> value, JsonGenerator jgen, SerializerProvider provider,\n             TypeSerializer typeSer)\n         }\n         typeSer.writeTypeSuffixForArray(value, jgen);\n     }\n-    \n+\n     private final void serializeContents(Collection<String> value, JsonGenerator jgen, SerializerProvider provider)\n         throws IOException, JsonGenerationException\n     {\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestFeatures.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestFeatures.java\n     }\n \n     private static class StringListBean {\n-        public List<String> values;\n-        \n-        public StringListBean(List<String> v) { values = v; }\n+        @SuppressWarnings(\"unused\")\n+        public Collection<String> values;\n+        \n+        public StringListBean(Collection<String> v) { values = v; }\n     }\n     \n     /*\n         // [Issue#180]\n         final String EXP_STRINGS = \"{\\\"values\\\":\\\"foo\\\"}\";\n         assertEquals(EXP_STRINGS, writer.writeValueAsString(new StringListBean(Collections.singletonList(\"foo\"))));\n+\n+        final Set<String> SET = new HashSet<String>();\n+        SET.add(\"foo\");\n+        assertEquals(EXP_STRINGS, writer.writeValueAsString(new StringListBean(SET)));\n         \n         // arrays:\n         assertEquals(\"true\", writer.writeValueAsString(new boolean[] { true }));", "timestamp": 1362460335, "metainfo": ""}