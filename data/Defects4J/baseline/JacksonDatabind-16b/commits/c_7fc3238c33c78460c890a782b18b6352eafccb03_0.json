{"sha": "7fc3238c33c78460c890a782b18b6352eafccb03", "log": "Improve error message for unresolved subtype ids.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n      * Helper method for constructing exception to indicate that given\n      * type id (parsed from JSON) could not be converted to a Java type.\n      */\n+    @Deprecated // since 2.5, use overloaded variant\n     public JsonMappingException unknownTypeException(JavaType type, String id) {\n         return JsonMappingException.from(_parser, \"Could not resolve type id '\"+id+\"' into a subtype of \"+type);\n+    }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    public JsonMappingException unknownTypeException(JavaType type, String id,\n+            String extraDesc) {\n+        String msg = \"Could not resolve type id '\"+id+\"' into a subtype of \"+type;\n+        if (extraDesc != null) {\n+            msg = msg + \": \"+extraDesc;\n+        }\n+        return JsonMappingException.from(_parser, msg);\n     }\n \n     public JsonMappingException endOfInputException(Class<?> instClass) {\n         return JsonMappingException.from(_parser, \"Unexpected end-of-input when trying to deserialize a \"\n                 +instClass.getName());\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Overridable internal methods\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java\n         }\n         return str;\n     }\n+\n+    @Override\n+    public String getDescForKnownTypeIds() {\n+        return \"class name used as type id\";\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n                     // As per [JACKSON-614], use the default impl if no type id available:\n                     deser = _findDefaultImplDeserializer(ctxt);\n                     if (deser == null) {\n-                        throw ctxt.unknownTypeException(_baseType, typeId);\n+                        deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                     }\n                 } else {\n                     /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,\n         }\n         return deser.deserialize(jp, ctxt);\n     }\n+\n+    /**\n+     * Helper method called when given type id can not be resolved into \n+     * concrete deserializer either directly (using given {@link  TypeIdResolver}),\n+     * or using default type.\n+     * Default implementation simply throws a {@link JsonMappingException} to\n+     * indicate the problem; sub-classes may choose\n+     *\n+     * @return If it is possible to resolve type id into a {@link JsonDeserializer}\n+     *   should return that deserializer; otherwise throw an exception to indicate\n+     *   the problem.\n+     *\n+     * @since 2.5\n+     */\n+    protected JsonDeserializer<Object> _handleUnknownTypeId(DeserializationContext ctxt, String typeId,\n+            TypeIdResolver idResolver, JavaType baseType)\n+        throws IOException\n+    {\n+        String extraDesc;\n+        if (idResolver instanceof TypeIdResolverBase) {\n+            extraDesc = ((TypeIdResolverBase) idResolver).getDescForKnownTypeIds();\n+            if (extraDesc == null) {\n+                extraDesc = \"known type ids are not statically known\";\n+            } else {\n+                extraDesc = \"known type ids = \" + extraDesc;\n+            }\n+        } else {\n+            extraDesc = null;\n+        }\n+        throw ctxt.unknownTypeException(_baseType, typeId, extraDesc);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java\n     public JavaType typeFromId(DatabindContext context, String id) {\n         return typeFromId(id);\n     }\n+\n+    /**\n+     * Helper method used to get a simple description of all known type ids,\n+     * for use in error messages.\n+     *<p>\n+     * TODO: demote down to be part of {@link TypeIdResolver} in 2.6 or 2.7\n+     */\n+    public String getDescForKnownTypeIds() {\n+        return null;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n          */\n         return _idToType.get(id);\n     }    \n-    \n+\n+    @Override\n+    public String getDescForKnownTypeIds() {\n+        return new TreeSet<String>(_idToType.keySet()).toString();\n+    }\n+\n     @Override\n     public String toString() {\n         StringBuilder sb = new StringBuilder();\n--- a/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation.java\n         public CustomIdResolver(String idForBean) {\n             _id = idForBean;\n         }\n-        \n+\n         @Override\n         public Id getMechanism() {\n             return Id.CUSTOM;\n         }\n+\n         @Override\n         public String idFromValue(Object value)\n         {\n             }\n             return \"unknown\";\n         }\n+\n         @Override\n         public String idFromValueAndType(Object value, Class<?> type) {\n             return idFromValue(value);\n         }\n+\n         @Override\n         public void init(JavaType baseType) {\n             if (initTypes != null) {\n                 initTypes.add(baseType);\n             }\n         }\n+\n         @Override\n         public JavaType typeFromId(DatabindContext context, String id)\n         {\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java\n \n \n import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.annotation.JsonTypeName;\n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n     static class DefaultImpl505 extends SuperTypeWithoutDefault {\n         public int a;\n     }\n-    \n+\n+    @JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=As.PROPERTY, property=\"type\")\n+    @JsonSubTypes({ @JsonSubTypes.Type(ImplX.class),\n+          @JsonSubTypes.Type(ImplY.class) })\n+    static abstract class BaseX { }\n+\n+    @JsonTypeName(\"x\")\n+    static class ImplX extends BaseX {\n+        public int x;\n+    }\n+\n+    @JsonTypeName(\"y\")\n+    static class ImplY extends BaseX {\n+        public int y;\n+    }\n+\n     /*\n     /**********************************************************\n     /* Unit tests\n         assertEquals(0, ((DefaultImpl505) bean).a);\n     \n     }\n+\n+    public void testErrorMessage() throws Exception {\n+        ObjectMapper mapper = new ObjectMapper();\n+        try {\n+            mapper.readValue(\"{ \\\"type\\\": \\\"z\\\"}\", BaseX.class);\n+            fail(\"Should have failed\");\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"known type ids =\");\n+        }\n+    }\n }\n-", "timestamp": 1419643149, "metainfo": ""}