{"sha": "102abfbdfb0ecf90df1b9c49a95fd5221066eb63", "log": "Incremental work for #633, to suppress serialization of null type id, if possible (not possible with as-array wrapper)_", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java\n     @Override\n     public void writeTypePrefixForObject(Object value, JsonGenerator jgen) throws IOException {\n         final String typeId = idFromValue(value);\n-        if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n+        // NOTE: can not always avoid writing type id, even if null\n+        if (jgen.canWriteTypeId()) {\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n         } else {\n             jgen.writeStartArray();\n             jgen.writeString(typeId);\n     @Override\n     public void writeTypePrefixForObject(Object value, JsonGenerator jgen, Class<?> type) throws IOException {\n         final String typeId = idFromValueAndType(value, type);\n-        if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n+        // NOTE: can not always avoid writing type id, even if null\n+        if (jgen.canWriteTypeId()) {\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n         } else {\n             jgen.writeStartArray();\n             jgen.writeString(typeId);\n     public void writeTypePrefixForArray(Object value, JsonGenerator jgen) throws IOException {\n         final String typeId = idFromValue(value);\n         if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n         } else {\n             jgen.writeStartArray();\n             jgen.writeString(typeId);\n     public void writeTypePrefixForArray(Object value, JsonGenerator jgen, Class<?> type) throws IOException {\n         final String typeId = idFromValueAndType(value, type);\n         if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n         } else {\n             jgen.writeStartArray();\n             jgen.writeString(typeId);\n     public void writeTypePrefixForScalar(Object value, JsonGenerator jgen) throws IOException {\n         final String typeId = idFromValue(value);\n         if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n         } else {\n             // only need the wrapper array\n             jgen.writeStartArray();\n     public void writeTypePrefixForScalar(Object value, JsonGenerator jgen, Class<?> type) throws IOException {\n         final String typeId = idFromValueAndType(value, type);\n         if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n         } else {\n             // only need the wrapper array\n             jgen.writeStartArray();\n     @Override\n     public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n         } else {\n             jgen.writeStartArray();\n             jgen.writeString(typeId);\n     @Override\n     public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n         } else {\n             jgen.writeStartArray();\n             jgen.writeString(typeId);\n     @Override\n     public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n         } else {\n             jgen.writeStartArray();\n             jgen.writeString(typeId);\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExistingPropertyTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExistingPropertyTypeSerializer.java\n     public void writeTypePrefixForObject(Object value, JsonGenerator jgen) throws IOException\n     {\n         final String typeId = idFromValue(value);\n-        if (jgen.canWriteTypeId()) {\n+        if ((typeId != null) && jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n-            jgen.writeStartObject();\n-        } else {\n-            jgen.writeStartObject();\n         }\n+        jgen.writeStartObject();\n     }\n \n     @Override\n     public void writeTypePrefixForObject(Object value, JsonGenerator jgen, Class<?> type) throws IOException\n     {\n         final String typeId = idFromValueAndType(value, type);\n-        if (jgen.canWriteTypeId()) {\n+        if ((typeId != null) && jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n-            jgen.writeStartObject();\n-        } else {\n-            jgen.writeStartObject();\n         }\n+        jgen.writeStartObject();\n     }\n     \n     @Override\n     public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId) throws IOException\n     {\n-    \tif (jgen.canWriteTypeId()) {\n+        if ((typeId != null) && jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n-            jgen.writeStartObject();\n-        } else {\n-            jgen.writeStartObject();\n         }\n+        jgen.writeStartObject();\n     }\n-\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java\n    }\n    \n    protected final void _writeScalarSuffix(Object value, JsonGenerator jgen, String typeId) throws IOException {\n-       jgen.writeStringField(_typePropertyName, typeId);\n+       if (typeId != null) {\n+           jgen.writeStringField(_typePropertyName, typeId);\n+       }\n    }\n    \n    protected final void _writeObjectSuffix(Object value, JsonGenerator jgen, String typeId) throws IOException {\n        jgen.writeEndObject();\n-       jgen.writeStringField(_typePropertyName, typeId);\n+       if (typeId != null) {\n+           jgen.writeStringField(_typePropertyName, typeId);\n+       }\n    }\n \n    protected final void _writeArraySuffix(Object value, JsonGenerator jgen, String typeId) throws IOException {\n        jgen.writeEndArray();\n-       jgen.writeStringField(_typePropertyName, typeId);\n+       if (typeId != null) {\n+           jgen.writeStringField(_typePropertyName, typeId);\n+       }\n    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.java\n     public void writeTypePrefixForObject(Object value, JsonGenerator jgen) throws IOException\n     {\n         final String typeId = idFromValue(value);\n-        if (jgen.canWriteTypeId()) {\n+        if (typeId == null) {\n+            jgen.writeStartObject();\n+        } else if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n             jgen.writeStartObject();\n         } else {\n     public void writeTypePrefixForObject(Object value, JsonGenerator jgen, Class<?> type) throws IOException\n     {\n         final String typeId = idFromValueAndType(value, type);\n-        if (jgen.canWriteTypeId()) {\n+        if (typeId == null) {\n+            jgen.writeStartObject();\n+        } else if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n             jgen.writeStartObject();\n         } else {\n     @Override\n     public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId) throws IOException\n     {\n-        if (jgen.canWriteTypeId()) {\n+        if (typeId == null) {\n+            jgen.writeStartObject();\n+        } else if (jgen.canWriteTypeId()) {\n             jgen.writeTypeId(typeId);\n             jgen.writeStartObject();\n         } else {\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java\n     @Override\n     public void writeTypePrefixForObject(Object value, JsonGenerator jgen) throws IOException\n     {\n-        final String typeId = idFromValue(value);\n-        if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n+        String typeId = idFromValue(value);\n+        if (jgen.canWriteTypeId()) {\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n             jgen.writeStartObject();\n         } else {\n             // wrapper\n             jgen.writeStartObject();\n             // and then JSON Object start caller wants\n-            jgen.writeObjectFieldStart(typeId);\n+\n+            // 28-Jan-2015, tatu: No really good answer here; can not really change\n+            //   structure, so change null to empty String...\n+            jgen.writeObjectFieldStart(_validTypeId(typeId));\n         }\n     }\n \n     @Override\n     public void writeTypePrefixForObject(Object value, JsonGenerator jgen, Class<?> type) throws IOException\n     {\n+        String typeId = idFromValueAndType(value, type);\n+        if (jgen.canWriteTypeId()) {\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n+            jgen.writeStartObject();\n+        } else {\n+            // wrapper\n+            jgen.writeStartObject();\n+            // and then JSON Object start caller wants\n+\n+            // 28-Jan-2015, tatu: No really good answer here; can not really change\n+            //   structure, so change null to empty String...\n+            jgen.writeObjectFieldStart(_validTypeId(typeId));\n+        }\n+    }\n+    \n+    @Override\n+    public void writeTypePrefixForArray(Object value, JsonGenerator jgen) throws IOException\n+    {\n+        String typeId = idFromValue(value);\n+        if (jgen.canWriteTypeId()) {\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n+            jgen.writeStartArray();\n+        } else {\n+            // can still wrap ok\n+            jgen.writeStartObject();\n+            jgen.writeArrayFieldStart(_validTypeId(typeId));\n+        }\n+    }\n+\n+    @Override\n+    public void writeTypePrefixForArray(Object value, JsonGenerator jgen, Class<?> type) throws IOException\n+    {\n         final String typeId = idFromValueAndType(value, type);\n         if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n-            jgen.writeStartObject();\n-        } else {\n-            // wrapper\n-            jgen.writeStartObject();\n-            // and then JSON Object start caller wants\n-            jgen.writeObjectFieldStart(typeId);\n-        }\n-    }\n-    \n-    @Override\n-    public void writeTypePrefixForArray(Object value, JsonGenerator jgen) throws IOException\n-    {\n-        final String typeId = idFromValue(value);\n-        if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n-            jgen.writeStartObject();\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n+            jgen.writeStartArray();\n         } else {\n             // can still wrap ok\n             jgen.writeStartObject();\n             // and then JSON Array start caller wants\n-            jgen.writeArrayFieldStart(typeId);\n-        }\n-    }\n-\n-    @Override\n-    public void writeTypePrefixForArray(Object value, JsonGenerator jgen, Class<?> type) throws IOException\n-    {\n-        final String typeId = idFromValueAndType(value, type);\n-        if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n-            jgen.writeStartObject();\n-        } else {\n-            // can still wrap ok\n-            jgen.writeStartObject();\n-            // and then JSON Array start caller wants\n-            jgen.writeArrayFieldStart(typeId);\n+            jgen.writeArrayFieldStart(_validTypeId(typeId));\n         }\n     }\n \n     public void writeTypePrefixForScalar(Object value, JsonGenerator jgen) throws IOException {\n         final String typeId = idFromValue(value);\n         if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n-        } else {\n-            // can still wrap ok\n-            jgen.writeStartObject();\n-            jgen.writeFieldName(typeId);\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n+        } else {\n+            // can still wrap ok\n+            jgen.writeStartObject();\n+            jgen.writeFieldName(_validTypeId(typeId));\n         }\n     }\n \n     {\n         final String typeId = idFromValueAndType(value, type);\n         if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n-        } else {\n-            // can still wrap ok\n-            jgen.writeStartObject();\n-            jgen.writeFieldName(typeId);\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n+        } else {\n+            // can still wrap ok\n+            jgen.writeStartObject();\n+            jgen.writeFieldName(_validTypeId(typeId));\n         }\n     }\n     \n     @Override\n     public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n-            jgen.writeStartObject();\n-        } else {\n-            jgen.writeStartObject();\n-            jgen.writeObjectFieldStart(typeId);\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n+            jgen.writeStartObject();\n+        } else {\n+            jgen.writeStartObject();\n+            jgen.writeObjectFieldStart(_validTypeId(typeId));\n         }\n     }\n     \n     @Override\n     public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n             jgen.writeStartArray();\n         } else {\n             jgen.writeStartObject();\n-            jgen.writeArrayFieldStart(typeId);\n+            jgen.writeArrayFieldStart(_validTypeId(typeId));\n         }\n     }\n \n     @Override\n     public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId) throws IOException {\n         if (jgen.canWriteTypeId()) {\n-            jgen.writeTypeId(typeId);\n-        } else {\n-            jgen.writeStartObject();\n-            jgen.writeFieldName(typeId);\n+            if (typeId != null) {\n+                jgen.writeTypeId(typeId);\n+            }\n+        } else {\n+            jgen.writeStartObject();\n+            jgen.writeFieldName(_validTypeId(typeId));\n         }\n     }\n \n             writeTypeSuffixForScalar(value, jgen); // standard impl works fine\n         }\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Internal helper methods\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * @since 2.6.0\n+     */\n+    protected String _validTypeId(String typeId) {\n+        return (typeId == null) ? \"\" : typeId;\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java\n     /**********************************************************\n      */\n \n-    \n     /**\n      * Beyond basic features, it should be possible to even implement\n      * polymorphic handling...\n         assertEquals(\"Axel\", ((PolymorphicBean) result).name);\n     }\n \n-    public void testJackson633() throws Exception\n+    public void testEmptyBean() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         AnnotatedBean bean = mapper.readValue(\"{}\", AnnotatedBean.class);", "timestamp": 1422500594, "metainfo": ""}