{"sha": "f412e85aee296fdfdbbc7f3c40ed11af248c88c9", "log": "Fix issues with wrapper-based property-renaming", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.util.Named;\n \n /**\n     implements Named\n {\n     /*\n-    /*****************************************************\n+    /**********************************************************\n     /* Fluent factory methods for creating modified copies\n-    /*****************************************************\n+    /**********************************************************\n      */\n \n     /**\n     public abstract BeanPropertyDefinition withName(String newName);\n     \n     /*\n-    /*****************************************************\n+    /**********************************************************\n     /* Basic property information, name, type\n-    /*****************************************************\n+    /**********************************************************\n      */\n \n     /**\n     public abstract boolean isExplicitlyIncluded();\n     \n     /*\n-    /*****************************************************\n+    /**********************************************************\n     /* Capabilities\n-    /*****************************************************\n+    /**********************************************************\n      */\n \n     public boolean couldDeserialize() {\n     }\n     \n     /*\n-    /*****************************************************\n+    /**********************************************************\n     /* Access to accessors (fields, methods etc)\n-    /*****************************************************\n+    /**********************************************************\n      */\n     \n     public abstract boolean hasGetter();\n      */\n     public abstract AnnotatedMember getMutator();\n \n+    /**\n+     * Method used to find the property member (getter, setter, field) that has\n+     * the highest precedence in current context (getter method when serializing,\n+     * if available, and so forth), if any.\n+     * \n+     * @since 2.1\n+     */\n+    public AnnotatedMember getPrimaryMember() {\n+        return null;\n+    }\n+    \n     /*\n-    /*****************************************************\n+    /**********************************************************\n     /* More refined access to configuration features\n     /* (usually based on annotations)\n     /* Since most trivial implementations do not support\n     /* these methods, they are implemented as no-ops.\n-    /*****************************************************\n+    /**********************************************************\n      */\n     \n     /**\n     public ObjectIdInfo findObjectIdInfo() {\n         return null;\n     }\n-\n-    /**\n-     * Method used to find possible wrapper name this logical property\n-     * may have.\n-     */\n-    public PropertyName findWrapperName() {\n-        return null;\n-    }\n     \n     /**\n      * Method used to check if this property is expected to have a value;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n         if (naming != null) {\n             _renameUsing(naming);\n         }\n-        // and, if required, apply wrapper name\n-        if (_config.isEnabled(MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME)) {\n-            _renameWithWrappers();\n-        }\n \n         /* Sort by visibility (explicit over implicit); drop all but first\n          * of member type (getter, setter etc) if there is visibility\n         // and then \"merge\" annotations\n         for (POJOPropertyBuilder property : _properties.values()) {\n             property.mergeAnnotations(_forSerialization);\n+        }\n+\n+        /* and, if required, apply wrapper name: note, MUST be done after\n+         * annotations are merged.\n+         */\n+        if (_config.isEnabled(MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME)) {\n+            _renameWithWrappers();\n         }\n         \n         // well, almost last: there's still ordering...\n         while (it.hasNext()) {\n             Map.Entry<String, POJOPropertyBuilder> entry = it.next();\n             POJOPropertyBuilder prop = entry.getValue();\n-            PropertyName wrapperName = prop.findWrapperName();\n+            AnnotatedMember member = prop.getPrimaryMember();\n+            if (member == null) {\n+                continue;\n+            }\n+            PropertyName wrapperName = _annotationIntrospector.findWrapperName(member);\n             if (wrapperName == null || !wrapperName.hasSimpleName()) {\n                 continue;\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n package com.fasterxml.jackson.databind.introspect;\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n-import com.fasterxml.jackson.databind.PropertyName;\n \n /**\n  * Helper class used for aggregating information about a single\n         }\n         return m;\n     }\n-\n-    /*\n-    /*****************************************************\n+    \n+    @Override\n+    public AnnotatedMember getPrimaryMember() {\n+        if (_forSerialization) {\n+            return getAccessor();\n+        }\n+        return getMutator();\n+    }\n+\n+    /*\n+    /**********************************************************\n     /* Implementations of refinement accessors\n-    /*****************************************************\n+    /**********************************************************\n      */\n     \n     @Override\n     public Class<?>[] findViews() {\n-        return fromMemberAnnotation(new WithMember<Class<?>[]>() {\n+        return fromMemberAnnotations(new WithMember<Class<?>[]>() {\n             public Class<?>[] withMember(AnnotatedMember member) {\n                 return _annotationIntrospector.findViews(member);\n             }\n \n     @Override\n     public AnnotationIntrospector.ReferenceProperty findReferenceType() {\n-        return fromMemberAnnotation(new WithMember<AnnotationIntrospector.ReferenceProperty>() {\n+        return fromMemberAnnotations(new WithMember<AnnotationIntrospector.ReferenceProperty>() {\n             public AnnotationIntrospector.ReferenceProperty withMember(AnnotatedMember member) {\n                 return _annotationIntrospector.findReferenceType(member);\n             }\n \n     @Override\n     public boolean isTypeId() {\n-        Boolean b = fromMemberAnnotation(new WithMember<Boolean>() {\n+        Boolean b = fromMemberAnnotations(new WithMember<Boolean>() {\n             public Boolean withMember(AnnotatedMember member) {\n                 return _annotationIntrospector.isTypeId(member);\n             }\n \n     @Override\n     public boolean isRequired() {\n-        Boolean b = fromMemberAnnotation(new WithMember<Boolean>() {\n+        Boolean b = fromMemberAnnotations(new WithMember<Boolean>() {\n             public Boolean withMember(AnnotatedMember member) {\n                 return _annotationIntrospector.hasRequiredMarker(member);\n             }\n     \n     @Override\n     public ObjectIdInfo findObjectIdInfo() {\n-        return fromMemberAnnotation(new WithMember<ObjectIdInfo>() {\n+        return fromMemberAnnotations(new WithMember<ObjectIdInfo>() {\n             public ObjectIdInfo withMember(AnnotatedMember member) {\n                 ObjectIdInfo info = _annotationIntrospector.findObjectIdInfo(member);\n                 if (info != null) {\n                     info = _annotationIntrospector.findObjectReferenceInfo(member, info);\n                 }\n                 return info;\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public PropertyName findWrapperName() {\n-        return fromMemberAnnotation(new WithMember<PropertyName>() {\n-            public PropertyName withMember(AnnotatedMember member) {\n-                PropertyName name = _annotationIntrospector.findWrapperName(member);\n-                if (name != null) {\n-                    name = _annotationIntrospector.findWrapperName(member);\n-                }\n-                return name;\n             }\n         });\n     }\n      */\n \n     /**\n-     * Helper method used for finding annotation values\n-     */\n-    protected <T> T fromMemberAnnotation(WithMember<T> func)\n+     * Helper method used for finding annotation values, from accessors\n+     * relevant to current usage (deserialization, serialization)\n+     */\n+    protected <T> T fromMemberAnnotations(WithMember<T> func)\n     {\n         T result = null;\n         if (_annotationIntrospector != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n     }\n     \n     /*\n-    /*****************************************************\n+    /**********************************************************\n     /* Basic property information, name, type\n-    /*****************************************************\n+    /**********************************************************\n      */\n \n     @Override\n     public boolean isExplicitlyIncluded() { return false; }\n     \n     /*\n-    /*****************************************************\n+    /**********************************************************\n     /* Access to accessors (fields, methods etc)\n-    /*****************************************************\n+    /**********************************************************\n      */\n \n     @Override\n         }\n         return acc;\n     }\n+\n+    @Override\n+    public AnnotatedMember getPrimaryMember() {\n+        return _member;\n+    }\n }", "timestamp": 1347426351, "metainfo": ""}