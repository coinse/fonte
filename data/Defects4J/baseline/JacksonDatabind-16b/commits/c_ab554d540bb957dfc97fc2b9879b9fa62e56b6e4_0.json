{"sha": "ab554d540bb957dfc97fc2b9879b9fa62e56b6e4", "log": "Starting to work on adding SequenceWriter, counterpart to MappingIterator on reader side", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n import com.fasterxml.jackson.core.util.*;\n import com.fasterxml.jackson.databind.cfg.ContextAttributes;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n-import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n-import com.fasterxml.jackson.databind.ser.FilterProvider;\n-import com.fasterxml.jackson.databind.ser.SerializerFactory;\n+import com.fasterxml.jackson.databind.ser.*;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n /**\n         _rootSerializer = base._rootSerializer;\n         _prettyPrinter = base._prettyPrinter;\n     }\n-    \n+\n     /**\n      * Method that will return version information stored in and read from jar\n      * that contains this class.\n     /*\n     /**********************************************************\n     /* Methods sub-classes MUST override, used for constructing\n-    /* reader instances, (re)configuring parser instances.\n+    /* writer instances, (re)configuring parser instances.\n     /* Added in 2.5\n     /**********************************************************\n      */\n             JavaType rootType, JsonSerializer<Object> rootSer,\n             PrettyPrinter pp, FormatSchema s, CharacterEscapes escapes) {\n         return new ObjectWriter(base, config, rootType, rootSer, pp, s, escapes);\n+    }\n+\n+    /**\n+     * Overridable factory method called by {@link #createSequenceWriter(JsonGenerator)}\n+     * method (and its various overrides), and initializes it as necessary.\n+     * \n+     * @since 2.5\n+     */\n+    @SuppressWarnings(\"resource\")\n+    protected SequenceWriter _newSequenceWriter(boolean wrapInArray,\n+            JsonGenerator gen, boolean managedInput)\n+        throws IOException\n+    {\n+        return new SequenceWriter(_serializerProvider(_config),\n+                _configureGenerator(gen), managedInput, _rootType, _rootSerializer)\n+            .init(wrapInArray);\n     }\n \n     /*\n         SerializationConfig newConfig = _config.withoutAttribute(key);\n         return (newConfig == _config) ? this :  _new(this, newConfig);\n     }\n-    \n+\n+    /*\n+    /**********************************************************\n+    /* Factory methods for sequence writers (2.5)\n+    /**********************************************************\n+     */\n+\n+    public SequenceWriter createSequenceWriter(File out) throws IOException {\n+        return _newSequenceWriter(false,\n+                _generatorFactory.createGenerator(out, JsonEncoding.UTF8), true);\n+    }\n+\n+    public SequenceWriter createSequenceWriter(JsonGenerator gen) throws IOException {\n+        return _newSequenceWriter(false, _configureGenerator(gen), false);\n+    }\n+\n+    public SequenceWriter createSequenceWriter(Writer out) throws IOException {\n+        return _newSequenceWriter(false,\n+                _generatorFactory.createGenerator(out), true);\n+    }\n+\n+    public SequenceWriter createSequenceWriter(OutputStream out) throws IOException {\n+        return _newSequenceWriter(false,\n+                _generatorFactory.createGenerator(out, JsonEncoding.UTF8), true);\n+    }\n+    \n+    public SequenceWriter createArrayWriter(File out) throws IOException {\n+        return _newSequenceWriter(true,\n+                _generatorFactory.createGenerator(out, JsonEncoding.UTF8), true);\n+    }\n+\n+    public SequenceWriter createArrayWriter(JsonGenerator gen) throws IOException {\n+        return _newSequenceWriter(true, gen, false);\n+    }\n+\n+    public SequenceWriter createArrayWriter(Writer out) throws IOException {\n+        return _newSequenceWriter(true, _generatorFactory.createGenerator(out), true);\n+    }\n+\n+    public SequenceWriter createArrayWriter(OutputStream out) throws IOException {\n+        return _newSequenceWriter(true,\n+                _generatorFactory.createGenerator(out, JsonEncoding.UTF8), true);\n+    }\n+\n     /*\n     /**********************************************************\n     /* Simple accessors\n      * Method that can be used to serialize any Java value as\n      * JSON output, using provided {@link JsonGenerator}.\n      */\n-    public void writeValue(JsonGenerator jgen, Object value)\n+    public void writeValue(JsonGenerator gen, Object value)\n         throws IOException, JsonGenerationException, JsonMappingException\n     {\n-        // 10-Aug-2012, tatu: As per [Issue#12], may need to force PrettyPrinter settings, so:\n-        _configureJsonGenerator(jgen);\n+        _configureGenerator(gen);\n         if (_config.isEnabled(SerializationFeature.CLOSE_CLOSEABLE)\n                 && (value instanceof Closeable)) {\n-            _writeCloseableValue(jgen, value, _config);\n+            _writeCloseableValue(gen, value, _config);\n         } else {\n             if (_rootType == null) {\n-                _serializerProvider(_config).serializeValue(jgen, value);\n+                _serializerProvider(_config).serializeValue(gen, value);\n             } else {\n-                _serializerProvider(_config).serializeValue(jgen, value, _rootType, _rootSerializer);\n+                _serializerProvider(_config).serializeValue(gen, value, _rootType, _rootSerializer);\n             }\n             if (_config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\n-                jgen.flush();\n+                gen.flush();\n             }\n         }\n     }\n      * Method called to configure the generator as necessary and then\n      * call write functionality\n      */\n-    protected final void _configAndWriteValue(JsonGenerator jgen, Object value) throws IOException\n-    {\n-        _configureJsonGenerator(jgen);\n+    protected final void _configAndWriteValue(JsonGenerator gen, Object value) throws IOException\n+    {\n+        _configureGenerator(gen);\n         // [JACKSON-282]: consider Closeable\n         if (_config.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) && (value instanceof Closeable)) {\n-            _writeCloseable(jgen, value, _config);\n+            _writeCloseable(gen, value, _config);\n             return;\n         }\n         boolean closed = false;\n         try {\n             if (_rootType == null) {\n-                _serializerProvider(_config).serializeValue(jgen, value);\n+                _serializerProvider(_config).serializeValue(gen, value);\n             } else {\n-                _serializerProvider(_config).serializeValue(jgen, value, _rootType, _rootSerializer);\n+                _serializerProvider(_config).serializeValue(gen, value, _rootType, _rootSerializer);\n             }\n             closed = true;\n-            jgen.close();\n+            gen.close();\n         } finally {\n             /* won't try to close twice; also, must catch exception (so it \n              * will not mask exception that is pending)\n                 /* 04-Mar-2014, tatu: But! Let's try to prevent auto-closing of\n                  *    structures, which typically causes more damage.\n                  */\n-                jgen.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n+                gen.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n                 try {\n-                    jgen.close();\n+                    gen.close();\n                 } catch (IOException ioe) { }\n             }\n         }\n      * Helper method used when value to serialize is {@link Closeable} and its <code>close()</code>\n      * method is to be called right after serialization has been called\n      */\n-    private final void _writeCloseable(JsonGenerator jgen, Object value, SerializationConfig cfg)\n+    private final void _writeCloseable(JsonGenerator gen, Object value, SerializationConfig cfg)\n         throws IOException\n     {\n         Closeable toClose = (Closeable) value;\n         try {\n             if (_rootType == null) {\n-                _serializerProvider(cfg).serializeValue(jgen, value);\n+                _serializerProvider(cfg).serializeValue(gen, value);\n             } else {\n-                _serializerProvider(cfg).serializeValue(jgen, value, _rootType, _rootSerializer);\n+                _serializerProvider(cfg).serializeValue(gen, value, _rootType, _rootSerializer);\n             }\n-            JsonGenerator tmpJgen = jgen;\n-            jgen = null;\n-            tmpJgen.close();\n+            JsonGenerator tmpGen = gen;\n+            gen = null;\n+            tmpGen.close();\n             Closeable tmpToClose = toClose;\n             toClose = null;\n             tmpToClose.close();\n             /* Need to close both generator and value, as long as they haven't yet\n              * been closed\n              */\n-            if (jgen != null) {\n+            if (gen != null) {\n                 /* 04-Mar-2014, tatu: But! Let's try to prevent auto-closing of\n                  *    structures, which typically causes more damage.\n                  */\n-                jgen.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n+                gen.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n                 try {\n-                    jgen.close();\n+                    gen.close();\n                 } catch (IOException ioe) { }\n             }\n             if (toClose != null) {\n      * Helper method used when value to serialize is {@link Closeable} and its <code>close()</code>\n      * method is to be called right after serialization has been called\n      */\n-    private final void _writeCloseableValue(JsonGenerator jgen, Object value, SerializationConfig cfg)\n+    private final void _writeCloseableValue(JsonGenerator gen, Object value, SerializationConfig cfg)\n         throws IOException\n     {\n         Closeable toClose = (Closeable) value;\n         try {\n             if (_rootType == null) {\n-                _serializerProvider(cfg).serializeValue(jgen, value);\n+                _serializerProvider(cfg).serializeValue(gen, value);\n             } else {\n-                _serializerProvider(cfg).serializeValue(jgen, value, _rootType, _rootSerializer);\n+                _serializerProvider(cfg).serializeValue(gen, value, _rootType, _rootSerializer);\n             }\n             if (_config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\n-                jgen.flush();\n+                gen.flush();\n             }\n             Closeable tmpToClose = toClose;\n             toClose = null;\n      * {@link JsonGenerator}\n      * \n      * @since 2.1\n-     */\n-    protected void _configureJsonGenerator(JsonGenerator gen)\n+     * \n+     * @deprecated Since 2.5 (to be removed from 2.6 or later)\n+     */\n+    @Deprecated\n+    protected void _configureJsonGenerator(JsonGenerator gen) {\n+        _configureGenerator(gen);\n+    }\n+\n+    /**\n+     * Helper method called to set or override settings of passed-in\n+     * {@link JsonGenerator}\n+     * \n+     * @since 2.5\n+     */\n+    protected JsonGenerator _configureGenerator(JsonGenerator gen)\n     {\n         if (_prettyPrinter != null) {\n             PrettyPrinter pp = _prettyPrinter;\n             gen.setSchema(_schema);\n         }\n         _config.initialize(gen); // since 2.5\n+        return gen;\n     }\n }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/SequenceWriter.java\n+package com.fasterxml.jackson.databind;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n+\n+/**\n+ * Writer class similar to {@link ObjectWriter}, except that it can be used\n+ * for writing sequences of values, not just a single value.\n+ * The main use case is in writing very long sequences, or sequences where\n+ * values are incrementally produced; cases where it would be impractical\n+ * or at least inconvenient to construct a wrapper container around values\n+ * (or where no JSON array is desired around values).\n+ *<p>\n+ * Differences from {@link ObjectWriter} include:\n+ *<ul>\n+ *  <li>Instances of {@link SequenceWriter} are stateful, and not thread-safe:\n+ *    if sharing, external synchronization must be used.\n+ *  <li>Explicit {@link #close} is needed after all values have been written\n+ *     ({@link ObjectWriter} can auto-close after individual value writes)\n+ *</ul>\n+ * \n+ * @since 2.5\n+ */\n+public class SequenceWriter\n+    implements Versioned, java.io.Closeable\n+{\n+    /*\n+    /**********************************************************\n+    /* Configuration\n+    /**********************************************************\n+     */\n+\n+    protected final DefaultSerializerProvider _provider;\n+    protected final SerializationConfig _config;\n+    protected final JsonGenerator _generator;\n+\n+    protected final JavaType _rootType;\n+    protected final JsonSerializer<Object> _rootSerializer;\n+    \n+    protected final boolean _closeGenerator;\n+    protected final boolean _cfgFlush;\n+    protected final boolean _cfgCloseCloseable;\n+\n+    /*\n+    /**********************************************************\n+    /* State\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * State flag for keeping track of need to write matching END_ARRAY,\n+     * if a START_ARRAY was written during initialization\n+     */\n+    protected boolean _openArray;\n+    protected boolean _closed;\n+\n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+\n+    public SequenceWriter(DefaultSerializerProvider prov, JsonGenerator gen,\n+            boolean closeGenerator, JavaType rootType, JsonSerializer<Object> rootSerializer)\n+                    throws IOException\n+    {\n+        _provider = prov;\n+        _generator = gen;\n+        _closeGenerator = closeGenerator;\n+        _rootType = rootType;\n+        _rootSerializer = rootSerializer;\n+        _config = prov.getConfig();\n+        _cfgFlush = _config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE);\n+        _cfgCloseCloseable = _config.isEnabled(SerializationFeature.CLOSE_CLOSEABLE);\n+    }\n+\n+    public SequenceWriter init(boolean wrapInArray) throws IOException\n+    {\n+        if (wrapInArray) {\n+            _generator.writeStartArray();\n+            _openArray = true;\n+        }\n+        return this;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, basic accessors\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method that will return version information stored in and read from jar\n+     * that contains this class.\n+     */\n+    @Override\n+    public Version version() {\n+        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, write operations, related\n+    /**********************************************************\n+     */\n+\n+    public void writeValue(Object value) throws IOException\n+    {\n+        if (_cfgCloseCloseable && (value instanceof Closeable)) {\n+            _writeCloseableValue(value);\n+        } else {\n+            if (_rootType == null) {\n+                _provider.serializeValue(_generator, value);\n+            } else {\n+                _provider.serializeValue(_generator, value, _rootType, _rootSerializer);\n+            }\n+            if (_cfgFlush) {\n+                _generator.flush();\n+            }\n+        }\n+    }\n+\n+    protected void _writeCloseableValue(Object value) throws IOException\n+    {\n+        Closeable toClose = (Closeable) value;\n+        try {\n+            if (_rootType == null) {\n+                _provider.serializeValue(_generator, value);\n+            } else {\n+                _provider.serializeValue(_generator, value, _rootType, _rootSerializer);\n+            }\n+            if (_cfgFlush) {\n+                _generator.flush();\n+            }\n+            Closeable tmpToClose = toClose;\n+            toClose = null;\n+            tmpToClose.close();\n+        } finally {\n+            if (toClose != null) {\n+                try {\n+                    toClose.close();\n+                } catch (IOException ioe) { }\n+            }\n+        }\n+    }\n+    \n+    @Override\n+    public void close() throws IOException\n+    {\n+        if (!_closed) {\n+            _closed = true;\n+            if (_openArray) {\n+                _openArray = false;\n+                _generator.writeEndArray();\n+            }\n+        }\n+    }\n+}", "timestamp": 1418626483, "metainfo": ""}