{"sha": "393172ff1f7e4150c4202200891b97472aacf39e", "log": "Adding bit more testing for #581", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n {\n     private static final long serialVersionUID = 1L;\n \n+    protected final As _inclusion;\n+\n     public AsPropertyTypeDeserializer(JavaType bt, TypeIdResolver idRes,\n             String typePropertyName, boolean typeIdVisible, Class<?> defaultImpl)\n     {\n+        this(bt, idRes, typePropertyName, typeIdVisible, defaultImpl, As.PROPERTY);\n+    }\n+    \n+    public AsPropertyTypeDeserializer(JavaType bt, TypeIdResolver idRes,\n+            String typePropertyName, boolean typeIdVisible, Class<?> defaultImpl,\n+            As inclusion)\n+    {\n         super(bt, idRes, typePropertyName, typeIdVisible, defaultImpl);\n+        _inclusion = inclusion;\n     }\n \n     public AsPropertyTypeDeserializer(AsPropertyTypeDeserializer src, BeanProperty property) {\n         super(src, property);\n+        _inclusion = src._inclusion;\n     }\n     \n     @Override\n     }\n     \n     @Override\n-    public As getTypeInclusion() { return As.PROPERTY; }\n+    public As getTypeInclusion() { return _inclusion; }\n \n     /**\n      * This is the trickiest thing to handle, since property we are looking\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java\n             return new AsArrayTypeDeserializer(baseType, idRes,\n                     _typeProperty, _typeIdVisible, _defaultImpl);\n         case PROPERTY:\n+        case EXISTING_PROPERTY: // as per [#528] same class as PROPERTY\n             return new AsPropertyTypeDeserializer(baseType, idRes,\n-                    _typeProperty, _typeIdVisible, _defaultImpl);\n+                    _typeProperty, _typeIdVisible, _defaultImpl, _includeAs);\n         case WRAPPER_OBJECT:\n             return new AsWrapperTypeDeserializer(baseType, idRes,\n                     _typeProperty, _typeIdVisible, _defaultImpl);\n         case EXTERNAL_PROPERTY:\n             return new AsExternalTypeDeserializer(baseType, idRes,\n-                    _typeProperty, _typeIdVisible, _defaultImpl);\n-        case EXISTING_PROPERTY:\n-        \t// as per [#528]\n-        \treturn new AsPropertyTypeDeserializer(baseType, idRes,\n                     _typeProperty, _typeIdVisible, _defaultImpl);\n         }\n         throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \"+_includeAs);\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypesExistingProperty.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypesExistingProperty.java\n package com.fasterxml.jackson.databind.jsontype;\n \n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-\n-import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.annotation.JsonSubTypes.Type;\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\n-import com.fasterxml.jackson.annotation.JsonTypeName;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n import com.fasterxml.jackson.databind.BaseMapTest;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n     /**\n      * Polymorphic base class - existing property as simple property on subclasses\n      */\n-\t@JsonTypeInfo(use = Id.NAME, include = As.EXISTING_PROPERTY, property = \"type\")\n+\t@JsonTypeInfo(use = Id.NAME, include = As.EXISTING_PROPERTY, property = \"type\",\n+\t        visible=true)\n \t@JsonSubTypes({\n \t\t@Type(value = Apple.class, name = \"apple\") ,\n \t\t@Type(value = Orange.class, name = \"orange\") \n     @JsonTypeName(\"apple\")\n     static class Apple extends Fruit\n     {\n-    \tpublic int seedCount;\n-    \tpublic String type;\n-        \n-        private Apple() { super(null); type = \"apple\"; }\n+        public int seedCount;\n+        public String type;\n+\n+        private Apple() { super(null);; }\n         public Apple(String name, int b) {\n             super(name);\n             seedCount = b;\n         public String color;\n         public String type;\n         \n-        private Orange() { super(null); type = \"orange\"; }\n+        private Orange() { super(null); }\n         public Orange(String name, String c) {\n             super(name);\n             color = c;\n      */\n     public void testSimpleClassAsExistingPropertyDeserializationFruits() throws Exception\n     {\n-    \tFruit pinguoDeserialized = MAPPER.readValue(pinguoJson, Fruit.class);\n-    \tassertTrue(pinguoDeserialized instanceof Apple);\n+        Fruit pinguoDeserialized = MAPPER.readValue(pinguoJson, Fruit.class);\n+        assertTrue(pinguoDeserialized instanceof Apple);\n         assertSame(pinguoDeserialized.getClass(), Apple.class);\n-    \tassertEquals(pinguo.name, pinguoDeserialized.name);\n-    \tassertEquals(pinguo.seedCount, ((Apple) pinguoDeserialized).seedCount);\n-    \tassertEquals(pinguo.type, ((Apple) pinguoDeserialized).type);\n-\n-    \tFruitWrapper pinguoWrapperDeserialized = MAPPER.readValue(pinguoWrapperJson, FruitWrapper.class);\n-    \tFruit pinguoExtracted = pinguoWrapperDeserialized.fruit;\n-    \tassertTrue(pinguoExtracted instanceof Apple);\n+        assertEquals(pinguo.name, pinguoDeserialized.name);\n+        assertEquals(pinguo.seedCount, ((Apple) pinguoDeserialized).seedCount);\n+        assertEquals(pinguo.type, ((Apple) pinguoDeserialized).type);\n+\n+        FruitWrapper pinguoWrapperDeserialized = MAPPER.readValue(pinguoWrapperJson, FruitWrapper.class);\n+        Fruit pinguoExtracted = pinguoWrapperDeserialized.fruit;\n+        assertTrue(pinguoExtracted instanceof Apple);\n         assertSame(pinguoExtracted.getClass(), Apple.class);\n-    \tassertEquals(pinguo.name, pinguoExtracted.name);\n-    \tassertEquals(pinguo.seedCount, ((Apple) pinguoExtracted).seedCount);\n-    \tassertEquals(pinguo.type, ((Apple) pinguoExtracted).type);\n-\n-    \t@SuppressWarnings(\"unchecked\")\n-\t\tList<Fruit> fruitListDeserialized = MAPPER.readValue(fruitListJson, List.class);\n-    \tassertNotNull(fruitListDeserialized);\n-    \tassertTrue(fruitListDeserialized.size() == 2);\n-    \tFruit apple = MAPPER.convertValue(fruitListDeserialized.get(0), Apple.class);\n-    \tassertTrue(apple instanceof Apple);\n-        assertSame(apple.getClass(), Apple.class);\n-    \tFruit orange = MAPPER.convertValue(fruitListDeserialized.get(1), Orange.class);\n-    \tassertTrue(orange instanceof Orange);\n-        assertSame(orange.getClass(), Orange.class);\n-    }\n-\n+        assertEquals(pinguo.name, pinguoExtracted.name);\n+        assertEquals(pinguo.seedCount, ((Apple) pinguoExtracted).seedCount);\n+        assertEquals(pinguo.type, ((Apple) pinguoExtracted).type);\n+\n+        Fruit[] fruits = MAPPER.readValue(fruitListJson, Fruit[].class);\n+        assertEquals(2, fruits.length);\n+        assertEquals(Apple.class, fruits[0].getClass());\n+        assertEquals(\"apple\", ((Apple) fruits[0]).type);\n+        assertEquals(Orange.class, fruits[1].getClass());\n+        assertEquals(\"orange\", ((Orange) fruits[1]).type);\n+        \n+        List<Fruit> f2 = MAPPER.readValue(fruitListJson,\n+                new TypeReference<List<Fruit>>() { });\n+        assertNotNull(f2);\n+        assertTrue(f2.size() == 2);\n+        assertEquals(Apple.class, f2.get(0).getClass());\n+        assertEquals(Orange.class, f2.get(1).getClass());\n+    }\n \n     /**\n      * Animals - serialization tests for abstract method in base class\n      */\n     public void testSimpleClassAsExistingPropertyDeserializationAnimals() throws Exception\n     {\n-    \tAnimal beelzebubDeserialized = MAPPER.readValue(beelzebubJson, Animal.class);\n-    \tassertTrue(beelzebubDeserialized instanceof Cat);\n+        Animal beelzebubDeserialized = MAPPER.readValue(beelzebubJson, Animal.class);\n+        assertTrue(beelzebubDeserialized instanceof Cat);\n         assertSame(beelzebubDeserialized.getClass(), Cat.class);\n-    \tassertEquals(beelzebub.name, beelzebubDeserialized.name);\n-    \tassertEquals(beelzebub.furColor, ((Cat) beelzebubDeserialized).furColor);\n-    \tassertEquals(beelzebub.getType(), beelzebubDeserialized.getType());\n-\n-    \tAnimalWrapper beelzebubWrapperDeserialized = MAPPER.readValue(beelzebubWrapperJson, AnimalWrapper.class);\n-    \tAnimal beelzebubExtracted = beelzebubWrapperDeserialized.animal;\n-    \tassertTrue(beelzebubExtracted instanceof Cat);\n+        assertEquals(beelzebub.name, beelzebubDeserialized.name);\n+        assertEquals(beelzebub.furColor, ((Cat) beelzebubDeserialized).furColor);\n+        assertEquals(beelzebub.getType(), beelzebubDeserialized.getType());\n+\n+        AnimalWrapper beelzebubWrapperDeserialized = MAPPER.readValue(beelzebubWrapperJson, AnimalWrapper.class);\n+        Animal beelzebubExtracted = beelzebubWrapperDeserialized.animal;\n+        assertTrue(beelzebubExtracted instanceof Cat);\n         assertSame(beelzebubExtracted.getClass(), Cat.class);\n-    \tassertEquals(beelzebub.name, beelzebubExtracted.name);\n-    \tassertEquals(beelzebub.furColor, ((Cat) beelzebubExtracted).furColor);\n-    \tassertEquals(beelzebub.getType(), beelzebubExtracted.getType());\n+        assertEquals(beelzebub.name, beelzebubExtracted.name);\n+        assertEquals(beelzebub.furColor, ((Cat) beelzebubExtracted).furColor);\n+        assertEquals(beelzebub.getType(), beelzebubExtracted.getType());\n     \t\n-    \t@SuppressWarnings(\"unchecked\")\n-\t\tList<Animal> animalListDeserialized = MAPPER.readValue(animalListJson, List.class);\n-    \tassertNotNull(animalListDeserialized);\n-    \tassertTrue(animalListDeserialized.size() == 2);\n-    \tAnimal cat = MAPPER.convertValue(animalListDeserialized.get(0), Animal.class);\n-    \tassertTrue(cat instanceof Cat);\n+        @SuppressWarnings(\"unchecked\")\n+        List<Animal> animalListDeserialized = MAPPER.readValue(animalListJson, List.class);\n+        assertNotNull(animalListDeserialized);\n+        assertTrue(animalListDeserialized.size() == 2);\n+        Animal cat = MAPPER.convertValue(animalListDeserialized.get(0), Animal.class);\n+        assertTrue(cat instanceof Cat);\n         assertSame(cat.getClass(), Cat.class);\n-    \tAnimal dog = MAPPER.convertValue(animalListDeserialized.get(1), Animal.class);\n-    \tassertTrue(dog instanceof Dog);\n+        Animal dog = MAPPER.convertValue(animalListDeserialized.get(1), Animal.class);\n+        assertTrue(dog instanceof Dog);\n         assertSame(dog.getClass(), Dog.class);\n     }\n \n-    \n     /**\n      * Cars - serialization tests for no abstract method or type variable in base class\n      */\n      */\n     public void testSimpleClassAsExistingPropertyDeserializationCars() throws Exception\n     {\n-    \tCar camryDeserialized = MAPPER.readValue(camryJson, Camry.class);\n-    \tassertTrue(camryDeserialized instanceof Camry);\n+        Car camryDeserialized = MAPPER.readValue(camryJson, Camry.class);\n+        assertTrue(camryDeserialized instanceof Camry);\n         assertSame(camryDeserialized.getClass(), Camry.class);\n-    \tassertEquals(camry.name, camryDeserialized.name);\n-    \tassertEquals(camry.exteriorColor, ((Camry) camryDeserialized).exteriorColor);\n-    \tassertEquals(camry.getType(), ((Camry) camryDeserialized).getType());\n-\n-    \tCarWrapper camryWrapperDeserialized = MAPPER.readValue(camryWrapperJson, CarWrapper.class);\n-    \tCar camryExtracted = camryWrapperDeserialized.car;\n-    \tassertTrue(camryExtracted instanceof Camry);\n+        assertEquals(camry.name, camryDeserialized.name);\n+        assertEquals(camry.exteriorColor, ((Camry) camryDeserialized).exteriorColor);\n+        assertEquals(camry.getType(), ((Camry) camryDeserialized).getType());\n+\n+        CarWrapper camryWrapperDeserialized = MAPPER.readValue(camryWrapperJson, CarWrapper.class);\n+        Car camryExtracted = camryWrapperDeserialized.car;\n+        assertTrue(camryExtracted instanceof Camry);\n         assertSame(camryExtracted.getClass(), Camry.class);\n-    \tassertEquals(camry.name, camryExtracted.name);\n-    \tassertEquals(camry.exteriorColor, ((Camry) camryExtracted).exteriorColor);\n-    \tassertEquals(camry.getType(), ((Camry) camryExtracted).getType());\n-    \t\n-    \t@SuppressWarnings(\"unchecked\")\n-\t\tList<Car> carListDeserialized = MAPPER.readValue(carListJson, List.class);\n-    \tassertNotNull(carListDeserialized);\n-    \tassertTrue(carListDeserialized.size() == 2);\n-    \tCar camry = MAPPER.convertValue(carListDeserialized.get(0), Car.class);\n-    \tassertTrue(camry instanceof Camry);\n-        assertSame(camry.getClass(), Camry.class);\n-    \tCar accord = MAPPER.convertValue(carListDeserialized.get(1), Car.class);\n-    \tassertTrue(accord instanceof Accord);\n-        assertSame(accord.getClass(), Accord.class);\n-    }\n-\n-    \n-}\n+        assertEquals(camry.name, camryExtracted.name);\n+        assertEquals(camry.exteriorColor, ((Camry) camryExtracted).exteriorColor);\n+        assertEquals(camry.getType(), ((Camry) camryExtracted).getType());\n+\n+        @SuppressWarnings(\"unchecked\")\n+        List<Car> carListDeserialized = MAPPER.readValue(carListJson, List.class);\n+        assertNotNull(carListDeserialized);\n+        assertTrue(carListDeserialized.size() == 2);\n+        Car result = MAPPER.convertValue(carListDeserialized.get(0), Car.class);\n+        assertTrue(result instanceof Camry);\n+        assertSame(result.getClass(), Camry.class);\n+\n+        result = MAPPER.convertValue(carListDeserialized.get(1), Car.class);\n+        assertTrue(result instanceof Accord);\n+        assertSame(result.getClass(), Accord.class);\n+    }\n+}    ", "timestamp": 1413430866, "metainfo": ""}