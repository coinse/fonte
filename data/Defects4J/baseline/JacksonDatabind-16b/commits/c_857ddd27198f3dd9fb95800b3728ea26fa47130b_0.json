{"sha": "857ddd27198f3dd9fb95800b3728ea26fa47130b", "log": "Cosmetic refactoring: making Deserializers callbacks more similar, passing same common args", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n     /**********************************************************\n      */\n     \n-    protected abstract JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type,\n-            DeserializationConfig config, BeanProperty property,\n-            TypeDeserializer elementTypeDeser, JsonDeserializer<?> elementDeser)\n-        throws JsonMappingException;\n-    \n-    protected abstract JsonDeserializer<?> _findCustomCollectionDeserializer(\n-            CollectionType type, DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property,\n-            TypeDeserializer elementTypeDeser, JsonDeserializer<?> elementDeser)\n-        throws JsonMappingException;\n-\n-    protected abstract JsonDeserializer<?> _findCustomCollectionLikeDeserializer(\n-            CollectionLikeType type, DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property,\n-            TypeDeserializer elementTypeDeser, JsonDeserializer<?> elementDeser)\n-        throws JsonMappingException;\n-    \n-    protected abstract JsonDeserializer<?> _findCustomEnumDeserializer(Class<?> type,\n-            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property)\n-        throws JsonMappingException;\n-\n-    protected abstract JsonDeserializer<?> _findCustomMapDeserializer(MapType type,\n+    protected JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type,\n             DeserializationConfig config,\n             BeanDescription beanDesc, BeanProperty property,\n-            KeyDeserializer keyDeser,\n-            TypeDeserializer elementTypeDeser, JsonDeserializer<?> elementDeser)\n-        throws JsonMappingException;\n-\n-    protected abstract JsonDeserializer<?> _findCustomMapLikeDeserializer(MapLikeType type,\n+            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+        throws JsonMappingException\n+    {\n+        for (Deserializers d  : _factoryConfig.deserializers()) {\n+            JsonDeserializer<?> deser = d.findArrayDeserializer(type, config,\n+                    beanDesc, property, elementTypeDeserializer, elementDeserializer);\n+            if (deser != null) {\n+                return deser;\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    protected JsonDeserializer<?> _findCustomCollectionDeserializer(CollectionType type,\n             DeserializationConfig config,\n             BeanDescription beanDesc, BeanProperty property,\n-            KeyDeserializer keyDeser,\n-            TypeDeserializer elementTypeDeser, JsonDeserializer<?> elementDeser)\n-        throws JsonMappingException;\n-    \n-    protected abstract JsonDeserializer<?> _findCustomTreeNodeDeserializer(Class<? extends JsonNode> type,\n-            DeserializationConfig config, BeanProperty property)\n-        throws JsonMappingException;\n+            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+        throws JsonMappingException\n+    {\n+        for (Deserializers d  : _factoryConfig.deserializers()) {\n+            JsonDeserializer<?> deser = d.findCollectionDeserializer(type, config, beanDesc, property,\n+                    elementTypeDeserializer, elementDeserializer);\n+            if (deser != null) {\n+                return deser;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    protected JsonDeserializer<?> _findCustomCollectionLikeDeserializer(CollectionLikeType type,\n+            DeserializationConfig config,\n+            BeanDescription beanDesc, BeanProperty property,\n+            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+        throws JsonMappingException\n+    {\n+        for (Deserializers d  : _factoryConfig.deserializers()) {\n+            JsonDeserializer<?> deser = d.findCollectionLikeDeserializer(type, config, beanDesc, property,\n+                    elementTypeDeserializer, elementDeserializer);\n+            if (deser != null) {\n+                return deser;\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    protected JsonDeserializer<?> _findCustomEnumDeserializer(Class<?> type,\n+            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        for (Deserializers d  : _factoryConfig.deserializers()) {\n+            JsonDeserializer<?> deser = d.findEnumDeserializer(type, config, beanDesc, property);\n+            if (deser != null) {\n+                return deser;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    protected JsonDeserializer<?> _findCustomMapDeserializer(MapType type,\n+            DeserializationConfig config, \n+            BeanDescription beanDesc, BeanProperty property,\n+            KeyDeserializer keyDeserializer,\n+            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+        throws JsonMappingException\n+    {\n+        for (Deserializers d  : _factoryConfig.deserializers()) {\n+            JsonDeserializer<?> deser = d.findMapDeserializer(type, config, beanDesc, property,\n+                    keyDeserializer, elementTypeDeserializer, elementDeserializer);\n+            if (deser != null) {\n+                return deser;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    protected JsonDeserializer<?> _findCustomMapLikeDeserializer(MapLikeType type,\n+            DeserializationConfig config,\n+            BeanDescription beanDesc, BeanProperty property,\n+            KeyDeserializer keyDeserializer,\n+            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+        throws JsonMappingException\n+    {\n+        for (Deserializers d  : _factoryConfig.deserializers()) {\n+            JsonDeserializer<?> deser = d.findMapLikeDeserializer(type, config, beanDesc, property,\n+                    keyDeserializer, elementTypeDeserializer, elementDeserializer);\n+            if (deser != null) {\n+                return deser;\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    protected JsonDeserializer<?> _findCustomTreeNodeDeserializer(Class<? extends JsonNode> type,\n+            DeserializationConfig config,\n+            BeanDescription beanDesc, BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        for (Deserializers d  : _factoryConfig.deserializers()) {\n+            JsonDeserializer<?> deser = d.findTreeNodeDeserializer(type, config, beanDesc, property);\n+            if (deser != null) {\n+                return deser;\n+            }\n+        }\n+        return null;\n+    }\n     \n     /*\n     /**********************************************************\n                  *   so let's allow this\n                  */\n                 JsonDeserializer<?> custom = _findCustomArrayDeserializer(type,\n-                        ctxt.getConfig(), property, null, null);\n+                        ctxt.getConfig(), beanDesc, property, null, contentDeser);\n                 if (custom != null) {\n                     return custom;\n                 }\n         }\n         // 23-Nov-2010, tatu: Custom array deserializer?\n         JsonDeserializer<?> custom = _findCustomArrayDeserializer(type,\n-                ctxt.getConfig(), property, elemTypeDeser, contentDeser);\n+                ctxt.getConfig(), beanDesc, property, elemTypeDeser, contentDeser);\n         if (custom != null) {\n             return custom;\n         }\n         @SuppressWarnings(\"unchecked\")\n         Class<? extends JsonNode> nodeClass = (Class<? extends JsonNode>) nodeType.getRawClass();\n         // 23-Nov-2010, tatu: Custom deserializer?\n-        JsonDeserializer<?> custom = _findCustomTreeNodeDeserializer(nodeClass, config, property);\n+        JsonDeserializer<?> custom = _findCustomTreeNodeDeserializer(nodeClass, config,\n+                beanDesc, property);\n         if (custom != null) {\n             return custom;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n \n import java.util.*;\n \n-import com.fasterxml.jackson.core.JsonNode;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.deser.impl.CreatorCollector;\n     /* custom deserializers\n     /**********************************************************\n      */\n-    \n-    @Override\n-    protected JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type,\n-            DeserializationConfig config,\n-            BeanProperty property,\n-            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n-        throws JsonMappingException\n-    {\n-        for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findArrayDeserializer(type, config, property,\n-                        elementTypeDeserializer, elementDeserializer);\n-            if (deser != null) {\n-                return deser;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    protected JsonDeserializer<?> _findCustomCollectionDeserializer(CollectionType type,\n-            DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property,\n-            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n-        throws JsonMappingException\n-    {\n-        for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findCollectionDeserializer(type, config, beanDesc, property,\n-                    elementTypeDeserializer, elementDeserializer);\n-            if (deser != null) {\n-                return deser;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    protected JsonDeserializer<?> _findCustomCollectionLikeDeserializer(CollectionLikeType type,\n-            DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property,\n-            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n-        throws JsonMappingException\n-    {\n-        for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findCollectionLikeDeserializer(type, config, beanDesc, property,\n-                    elementTypeDeserializer, elementDeserializer);\n-            if (deser != null) {\n-                return deser;\n-            }\n-        }\n-        return null;\n-    }\n-    \n-    @Override\n-    protected JsonDeserializer<?> _findCustomEnumDeserializer(Class<?> type,\n-            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property)\n-        throws JsonMappingException\n-    {\n-        for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findEnumDeserializer(type, config, beanDesc, property);\n-            if (deser != null) {\n-                return deser;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    protected JsonDeserializer<?> _findCustomMapDeserializer(MapType type,\n-            DeserializationConfig config, \n-            BeanDescription beanDesc, BeanProperty property,\n-            KeyDeserializer keyDeserializer,\n-            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n-        throws JsonMappingException\n-    {\n-        for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findMapDeserializer(type, config, beanDesc, property,\n-                    keyDeserializer, elementTypeDeserializer, elementDeserializer);\n-            if (deser != null) {\n-                return deser;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    protected JsonDeserializer<?> _findCustomMapLikeDeserializer(MapLikeType type,\n-            DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property,\n-            KeyDeserializer keyDeserializer,\n-            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n-        throws JsonMappingException\n-    {\n-        for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findMapLikeDeserializer(type, config, beanDesc, property,\n-                    keyDeserializer, elementTypeDeserializer, elementDeserializer);\n-            if (deser != null) {\n-                return deser;\n-            }\n-        }\n-        return null;\n-    }\n-    \n-    @Override\n-    protected JsonDeserializer<?> _findCustomTreeNodeDeserializer(Class<? extends JsonNode> type,\n-            DeserializationConfig config, BeanProperty property)\n-        throws JsonMappingException\n-    {\n-        for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findTreeNodeDeserializer(type, config, property);\n-            if (deser != null) {\n-                return deser;\n-            }\n-        }\n-        return null;\n-    }\n \n     // Note: NOT overriding, superclass has no matching method\n     @SuppressWarnings(\"unchecked\")\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java\n package com.fasterxml.jackson.databind.deser;\n \n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.DeserializationConfig;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.*;\n \n /**\n  * Add-on interface that {@link JsonDeserializer}s can implement to get a callback\n  * resolution -- that is, implements both this interface and {@link ResolvableDeserializer}\n  * -- resolution via {@link ResolvableDeserializer} occurs first, and contextual\n  * resolution (via this interface) later on.\n- *\n- * @param <T> Type of deserializer to contextualize\n  */\n public interface ContextualDeserializer<T>\n {\n      * and return a new instance. This instance should only be returned as-is, in case\n      * it is already suitable for use.\n      * \n-     * @param config Current deserialization configuration\n+     * @param ctxt Deserialization context to access configuration, additional \n+     *    deserializers that may be needed by this deserializer\n      * @param property Method, field or constructor parameter that represents the property\n      *   (and is used to assign deserialized value).\n      *   Should be available; but there may be cases where caller can not provide it and\n      * \n      * @throws JsonMappingException\n      */\n-    public JsonDeserializer<T> createContextual(DeserializationConfig config,\n+    public JsonDeserializer<T> createContextual(DeserializationContext ctxt,\n             BeanProperty property)\n         throws JsonMappingException;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ContextualKeyDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ContextualKeyDeserializer.java\n package com.fasterxml.jackson.databind.deser;\n \n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.DeserializationConfig;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.KeyDeserializer;\n+import com.fasterxml.jackson.databind.*;\n \n /**\n  * Add-on interface that {@link KeyDeserializer}s can implement to get a callback\n      * and return a new instance. This instance should only be returned as-is, in case\n      * it is already suitable for use.\n      * \n-     * @param config Current deserialization configuration\n+     * @param ctxt Deserialization context to access configuration, additional \n+     *    deserializers that may be needed by this deserializer\n      * @param property Method, field or constructor parameter that declared Map for which\n      *   contextual instance will be used. Will not be available when deserializing root-level\n      *   Map value; otherwise should not be null.\n      * @return Key deserializer to use for deserializing keys specified Map property,\n      *   may be this instance or a new instance.\n      */\n-    public KeyDeserializer createContextual(DeserializationConfig config,\n+    public KeyDeserializer createContextual(DeserializationContext ctxt,\n             BeanProperty property)\n         throws JsonMappingException;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n         if (deser != null) {\n             // [JACKSON-385]: need to support contextualization:\n             if (deser instanceof ContextualDeserializer<?>) {\n-                JsonDeserializer<?> d = ((ContextualDeserializer<?>) deser).createContextual(ctxt.getConfig(), property);\n+                JsonDeserializer<?> d = ((ContextualDeserializer<?>) deser).createContextual(ctxt, property);\n                 deser = (JsonDeserializer<Object>) d;\n             }\n             return deser;\n         }\n         // [JACKSON-385]: need to support contextualization:\n         if (deser instanceof ContextualDeserializer<?>) {\n-            JsonDeserializer<?> d = ((ContextualDeserializer<?>) deser).createContextual(ctxt.getConfig(), property);\n+            JsonDeserializer<?> d = ((ContextualDeserializer<?>) deser).createContextual(ctxt, property);\n             deser = (JsonDeserializer<Object>) d;\n         }\n         return deser;\n         }\n         // Second: contextualize?\n         if (kd instanceof ContextualKeyDeserializer) {\n-            kd = ((ContextualKeyDeserializer) kd).createContextual(ctxt.getConfig(), property);\n+            kd = ((ContextualKeyDeserializer) kd).createContextual(ctxt, property);\n         }\n         return kd;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n      * \n      * @param type Type of array instances to deserialize\n      * @param config Configuration in effect\n+     * @param beanDesc Definition of the enumeration type that contains class annotations and\n+     *    other information typically needed for building deserializers\n      * @param property Property that contains array value  (null for root values)\n      * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n      *    the type information deserializer to use; should usually be used as is when constructing\n      * \n      * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n      */\n-    public JsonDeserializer<?> findArrayDeserializer(ArrayType type, DeserializationConfig config,\n-            BeanProperty property,\n+    public JsonDeserializer<?> findArrayDeserializer(ArrayType type,\n+            DeserializationConfig config,\n+            BeanDescription beanDesc, BeanProperty property,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException;\n \n      * \n      * @param type Type of collection instances to deserialize\n      * @param config Configuration in effect\n-     * @param provider Provider that can be used to locate dependant deserializers if and as necessary\n-     *   (but note that in many cases resolution must be deferred by using {@link ResolvableDeserializer} callback)\n      * @param property Property that contains array value  (null for root values)\n      * @param beanDesc Definition of the enumeration type that contains class annotations and\n      *    other information typically needed for building deserializers\n-     * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n-     *    the type information deserializer to use; should usually be used as is when constructing\n-     *    array deserializer.\n-     * @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using\n-     *    annotations, for exmple). May be null, in which case it should be resolved here (or using\n-     *    {@link ResolvableDeserializer} callback)\n-     * \n-     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n-     */\n-    public JsonDeserializer<?> findCollectionDeserializer(CollectionType type, DeserializationConfig config,\n+     * @param property Property that contains array value  (null for root values)\n+     * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n+     *    the type information deserializer to use; should usually be used as is when constructing\n+     *    array deserializer.\n+     * @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using\n+     *    annotations, for exmple). May be null, in which case it should be resolved here (or using\n+     *    {@link ResolvableDeserializer} callback)\n+     * \n+     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n+     */\n+    public JsonDeserializer<?> findCollectionDeserializer(CollectionType type,\n+            DeserializationConfig config,\n             BeanDescription beanDesc, BeanProperty property,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException;\n      * \n      * @param type Type of instances to deserialize\n      * @param config Configuration in effect\n-     * @param provider Provider that can be used to locate dependant deserializers if and as necessary\n-     *   (but note that in many cases resolution must be deferred by using {@link ResolvableDeserializer} callback)\n-     * @param property Property that contains array value  (null for root values)\n-     * @param beanDesc Definition of the enumeration type that contains class annotations and\n-     *    other information typically needed for building deserializers\n-     * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n-     *    the type information deserializer to use; should usually be used as is when constructing\n-     *    array deserializer.\n-     * @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using\n-     *    annotations, for exmple). May be null, in which case it should be resolved here (or using\n-     *    {@link ResolvableDeserializer} callback)\n-     * \n-     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n-     */\n-    public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type, DeserializationConfig config,\n+     * @param beanDesc Definition of the enumeration type that contains class annotations and\n+     *    other information typically needed for building deserializers\n+     * @param property Property that contains value  (null for root values)\n+     * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n+     *    the type information deserializer to use; should usually be used as is when constructing\n+     *    array deserializer.\n+     * @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using\n+     *    annotations, for exmple). May be null, in which case it should be resolved here (or using\n+     *    {@link ResolvableDeserializer} callback)\n+     * \n+     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n+     */\n+    public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type,\n+            DeserializationConfig config,\n             BeanDescription beanDesc, BeanProperty property,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException;\n      * @param config Configuration in effect\n      * @param beanDesc Definition of the enumeration type that contains class annotations and\n      *    other information typically needed for building deserializers\n-     * \n-     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n-     */\n-    public JsonDeserializer<?> findEnumDeserializer(Class<?> type, DeserializationConfig config,\n+     * @param property Property that contains value  (null for root values)\n+     * \n+     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n+     */\n+    public JsonDeserializer<?> findEnumDeserializer(Class<?> type,\n+            DeserializationConfig config,\n             BeanDescription beanDesc, BeanProperty property)\n         throws JsonMappingException;\n \n      * \n      * @param type Type of {@link java.util.Map} instances to deserialize\n      * @param config Configuration in effect\n-     * @param provider Provider that can be used to locate dependant deserializers if and as necessary\n-     *   (but note that in many cases resolution must be deferred by using {@link ResolvableDeserializer} callback)\n-     * @param beanDesc Definition of the enumeration type that contains class annotations and\n-     *    other information typically needed for building deserializers\n+     * @param beanDesc Definition of the enumeration type that contains class annotations and\n+     *    other information typically needed for building deserializers\n+     * @param property Property that contains value  (null for root values)\n      * @param keyDeserializer Key deserializer use, if it is defined via annotations or other configuration;\n      *    null if default key deserializer for key type can be used.\n      * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n      * \n      * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n      */\n-    public JsonDeserializer<?> findMapDeserializer(MapType type, DeserializationConfig config,\n+    public JsonDeserializer<?> findMapDeserializer(MapType type,\n+            DeserializationConfig config,\n             BeanDescription beanDesc, BeanProperty property,\n             KeyDeserializer keyDeserializer,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n      * \n      * @param type Type of {@link java.util.Map} instances to deserialize\n      * @param config Configuration in effect\n-     * @param provider Provider that can be used to locate dependant deserializers if and as necessary\n-     *   (but note that in many cases resolution must be deferred by using {@link ResolvableDeserializer} callback)\n-     * @param beanDesc Definition of the enumeration type that contains class annotations and\n-     *    other information typically needed for building deserializers\n+     * @param beanDesc Definition of the enumeration type that contains class annotations and\n+     *    other information typically needed for building deserializers\n+     * @param property Property that contains value  (null for root values)\n      * @param keyDeserializer Key deserializer use, if it is defined via annotations or other configuration;\n      *    null if default key deserializer for key type can be used.\n      * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n      * \n      * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n      */\n-    public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type, DeserializationConfig config,\n+    public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type,\n+            DeserializationConfig config,\n             BeanDescription beanDesc, BeanProperty property,\n             KeyDeserializer keyDeserializer,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n      * \n      * @param nodeType Specific type of JSON tree nodes to deserialize (subtype of {@link com.fasterxml.jackson.core.JsonNode})\n      * @param config Configuration in effect\n-     * \n-     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n-     */\n-    public JsonDeserializer<?> findTreeNodeDeserializer(Class<? extends JsonNode> nodeType, DeserializationConfig config,\n-            BeanProperty property)\n+     * @param property Property that contains value  (null for root values)\n+     * \n+     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n+     */\n+    public JsonDeserializer<?> findTreeNodeDeserializer(Class<? extends JsonNode> nodeType,\n+            DeserializationConfig config,\n+            BeanDescription beanDesc, BeanProperty property)\n         throws JsonMappingException;\n     \n     /**\n      * \n      * @param type Bean type to deserialize\n      * @param config Configuration in effect\n-     * @param provider Provider that can be used to locate dependant deserializers if and as necessary\n-     *   (but note that in many cases resolution must be deferred by using {@link ResolvableDeserializer} callback)\n-     * @param beanDesc Definition of the enumeration type that contains class annotations and\n-     *    other information typically needed for building deserializers\n-     * \n-     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n-     */\n-    public JsonDeserializer<?> findBeanDeserializer(JavaType type, DeserializationConfig config,\n+     * @param beanDesc Definition of the enumeration type that contains class annotations and\n+     *    other information typically needed for building deserializers\n+     * @param property Property that contains value  (null for root values)\n+     * \n+     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n+     */\n+    public JsonDeserializer<?> findBeanDeserializer(JavaType type,\n+            DeserializationConfig config,\n             BeanDescription beanDesc, BeanProperty property)\n         throws JsonMappingException;\n \n     public static class Base implements Deserializers\n     {\n         @Override\n-        public JsonDeserializer<?> findArrayDeserializer(ArrayType type, DeserializationConfig config,\n-                BeanProperty property,\n+        public JsonDeserializer<?> findArrayDeserializer(ArrayType type,\n+                DeserializationConfig config,\n+                BeanDescription beanDesc, BeanProperty property,\n                 TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n             throws JsonMappingException\n         {\n         @Override\n         public JsonDeserializer<?> findTreeNodeDeserializer(Class<? extends JsonNode> nodeType,\n                 DeserializationConfig config,\n-                BeanProperty property)\n+                BeanDescription beanDesc, BeanProperty property)\n             throws JsonMappingException\n         {\n             return null;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializationContext.java\n         }\n         // Second: contextualize:\n         if (deser instanceof ContextualDeserializer<?>) {\n-            deser = ((ContextualDeserializer<?>) deser).createContextual(_config, property);\n+            deser = ((ContextualDeserializer<?>) deser).createContextual(this, property);\n         }\n         return (JsonDeserializer<Object>) deser;\n     }\n         }\n         // Second: contextualize:\n         if (deser instanceof ContextualKeyDeserializer) {\n-            deser = ((ContextualKeyDeserializer) deser).createContextual(_config, property);\n+            deser = ((ContextualKeyDeserializer) deser).createContextual(this, property);\n         }\n         return deser;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n     @Override\n     public JsonDeserializer<?> findArrayDeserializer(ArrayType type,\n             DeserializationConfig config, \n-            BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     {\n     \n     @Override\n     public JsonDeserializer<?> findTreeNodeDeserializer(Class<? extends JsonNode> nodeType,\n-            DeserializationConfig config, BeanProperty property)\n+            DeserializationConfig config,\n+            BeanDescription beanDesc, BeanProperty property)\n         throws JsonMappingException\n     {\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(nodeType));\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualDeserialization.java\n         }\n \n         @Override\n-        public JsonDeserializer<ContextualType> createContextual(DeserializationConfig config,\n+        public JsonDeserializer<ContextualType> createContextual(DeserializationContext ctxt,\n                 BeanProperty property)\n             throws JsonMappingException\n         {\n         }\n     \n         @Override\n-        public JsonDeserializer<ContextualType> createContextual(DeserializationConfig config,\n+        public JsonDeserializer<ContextualType> createContextual(DeserializationContext ctxt,\n                 BeanProperty property)\n             throws JsonMappingException\n         {\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualKeyTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualKeyTypes.java\n         }\n \n         @Override\n-        public KeyDeserializer createContextual(DeserializationConfig config,\n+        public KeyDeserializer createContextual(DeserializationContext ctxt,\n                 BeanProperty property) throws JsonMappingException\n         {\n             return new ContextualDeser((property == null) ? \"ROOT\" : property.getName());\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n         }\n \n         @Override\n-        public JsonDeserializer<Object> createContextual(DeserializationConfig config, BeanProperty property) throws JsonMappingException {\n+        public JsonDeserializer<Object> createContextual(DeserializationContext ctxt,\n+                BeanProperty property) throws JsonMappingException {\n             propCount++;\n             return this;\n         }        ", "timestamp": 1327452675, "metainfo": ""}