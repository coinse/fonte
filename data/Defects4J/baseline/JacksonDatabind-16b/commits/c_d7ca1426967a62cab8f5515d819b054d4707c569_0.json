{"sha": "d7ca1426967a62cab8f5515d819b054d4707c569", "log": "Minor performance improvement by allowing ObjectReader to pre-fetch root Deserializer", "commit": "\n--- /dev/null\n+++ b/src/test/java/perf/ManualObjectReaderPerf.java\n+package perf;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Simple manually run micro-benchmark for checking effects of (de)serializer\n+ * pre-fetching\n+ */\n+public class ManualObjectReaderPerf\n+{\n+    protected int hash;\n+    \n+    private <T> void test(ObjectMapper mapper, T inputValue, Class<T> inputClass)\n+        throws Exception\n+    {\n+        final byte[] input = mapper.writeValueAsBytes(inputValue);\n+        \n+        // Let's try to guestimate suitable size... to get to 6 megs to process\n+        final int REPS = (int) ((double) (6 * 1000 * 1000) / (double) input.length);\n+\n+        System.out.println(\"Read \"+input.length+\" bytes to hash; will do \"+REPS+\" repetitions\");\n+\n+        final ObjectReader cachingReader = mapper.reader(inputClass);\n+        final ObjectReader nonCachingReader = mapper.reader()\n+                .without(DeserializationFeature.EAGER_DESERIALIZER_FETCH)\n+                .withType(inputClass);\n+        \n+        int i = 0;\n+        int roundsDone = 0;\n+        final int TYPES = 2;\n+        final int WARMUP_ROUNDS = 5;\n+\n+        final long[] times = new long[TYPES];\n+        \n+        while (true) {\n+            try {  Thread.sleep(100L); } catch (InterruptedException ie) { }\n+            int round = (i++ % TYPES);\n+\n+            String msg;\n+            boolean lf = (round == 0);\n+\n+            long msecs;\n+            \n+            switch (round) {\n+            case 0:\n+                msg = \"Pre-fetch\";\n+                msecs = testDeser(REPS, input, cachingReader);\n+                break;\n+            case 1:\n+                msg = \"NO pre-fetch\";\n+                msecs = testDeser(REPS, input, nonCachingReader);\n+                break;\n+            default:\n+                throw new Error();\n+            }\n+            // skip first 5 rounds to let results stabilize\n+            if (roundsDone >= WARMUP_ROUNDS) {\n+                times[round] += msecs;\n+            }\n+            \n+            System.out.printf(\"Test '%s' [hash: 0x%s] -> %d msecs\\n\", msg, this.hash, msecs);\n+            if (lf) {\n+                ++roundsDone;\n+                if ((roundsDone % 3) == 0 && roundsDone > WARMUP_ROUNDS) {\n+                    double den = (double) (roundsDone - WARMUP_ROUNDS);\n+                    System.out.printf(\"Averages after %d rounds (pre / no): %.1f / %.1f msecs\\n\",\n+                            (int) den,\n+                            times[0] / den, times[1] / den);\n+                            \n+                }\n+                System.out.println();\n+            }\n+            if ((i % 17) == 0) {\n+                System.out.println(\"[GC]\");\n+                Thread.sleep(100L);\n+                System.gc();\n+                Thread.sleep(100L);\n+            }\n+        }\n+    }\n+\n+    private final long testDeser(int REPS, byte[] input, ObjectReader reader) throws Exception\n+    {\n+        long start = System.currentTimeMillis();\n+        Object result = null;\n+        while (--REPS >= 0) {\n+            result = reader.readValue(input);\n+        }\n+        hash = result.hashCode();\n+        return System.currentTimeMillis() - start;\n+    }\n+\n+    public static void main(String[] args) throws Exception\n+    {\n+        if (args.length != 0) {\n+            System.err.println(\"Usage: java ...\");\n+            System.exit(1);\n+        }\n+        Record input = new Record(44, \"BillyBob\", \"Bumbler\", 'm', true);\n+        ObjectMapper m = new ObjectMapper();\n+        new ManualObjectReaderPerf().test(m, input, Record.class);\n+    }\n+    \n+    /**\n+     * Simple test class \n+     */\n+    protected final static class Record\n+    {\n+        public int age;\n+        public String firstName, lastName;\n+        public char gender;\n+        public boolean insured;\n+\n+        public Record() { }\n+        public Record(int a, String fn, String ln, char g, boolean ins)\n+        {\n+            age = a;\n+            firstName = fn;\n+            lastName = ln;\n+            gender = g;\n+            insured = ins;\n+        }\n+    }\n+}", "timestamp": 1340912174, "metainfo": ""}