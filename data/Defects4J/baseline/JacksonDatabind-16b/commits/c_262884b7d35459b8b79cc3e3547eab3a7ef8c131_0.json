{"sha": "262884b7d35459b8b79cc3e3547eab3a7ef8c131", "log": "Add basic version of JSON Pointer based traversal for JsonNode", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n import java.math.BigInteger;\n import java.util.*;\n \n+import com.fasterxml.jackson.core.JsonPointer;\n import com.fasterxml.jackson.core.TreeNode;\n import com.fasterxml.jackson.databind.node.JsonNodeType;\n import com.fasterxml.jackson.databind.util.EmptyIterator;\n         return EmptyIterator.instance();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public final <T extends TreeNode> T find(JsonPointer ptr)\n+    {\n+        // Basically: value nodes only match if we have \"empty\" path left\n+        if (ptr.matches()) {\n+            return (T) this;\n+        }\n+        return (T) _find(ptr);\n+    }\n+\n+    protected abstract JsonNode _find(JsonPointer ptr);\n+    \n     /*\n     /**********************************************************\n     /* Public API, type introspection\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n package com.fasterxml.jackson.databind.node;\n \n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n     public ArrayNode(JsonNodeFactory nc) { super(nc); }\n \n+    @Override\n+    protected JsonNode _find(JsonPointer ptr)\n+    {\n+        return get(ptr.getMatchingIndex());\n+    }\n+    \n     // note: co-variant to allow caller-side type safety\n     @SuppressWarnings(\"unchecked\")\n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java\n         }\n         return value;\n     }\n-\n+    \n     /*\n     /**********************************************************\n     /* Support for traversal-as-stream\n--- a/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n     public <T extends JsonNode> T deepCopy() { return (T) this; }\n     \n     public static MissingNode getInstance() { return instance; }\n-\n+    \n     @Override\n     public JsonNodeType getNodeType()\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n package com.fasterxml.jackson.databind.node;\n \n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n     public ObjectNode(JsonNodeFactory nc) { super(nc); }\n \n+    @Override\n+    protected JsonNode _find(JsonPointer ptr)\n+    {\n+        return get(ptr.getMatchingProperty());\n+    }\n+    \n     /* Question: should this delegate to `JsonNodeFactory`? It does not absolutely\n      * have to, as long as sub-types override the method but...\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java\n import java.util.List;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n {\n     protected ValueNode() { }\n \n+    @Override\n+    protected JsonNode _find(JsonPointer ptr)\n+    {\n+        return MissingNode.getInstance();\n+    }\n+    \n     /**\n      * All current value nodes are immutable, so we can just return\n      * them as is.", "timestamp": 1377925522, "metainfo": ""}