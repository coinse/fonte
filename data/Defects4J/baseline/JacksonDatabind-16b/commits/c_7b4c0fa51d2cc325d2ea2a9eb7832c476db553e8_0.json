{"sha": "7b4c0fa51d2cc325d2ea2a9eb7832c476db553e8", "log": "stylistic fixup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java\n  *<p>\n  * Note on type declaration: funky recursive type is necessary to\n  * support builder/fluent pattern.\n- * \n- * @author tatu\n  */\n public interface VisibilityChecker<T extends VisibilityChecker<T>>\n {\n         implements VisibilityChecker<Std>,\n             java.io.Serializable\n     {\n-        private static final long serialVersionUID = -7073939237187922755L;\n+        private static final long serialVersionUID = 1;\n \n         /**\n          * This is the canonical base instance, configured with default\n         }\n \n         /**\n-         * Costructor that will assign given visibility value for all\n+         * Constructor that will assign given visibility value for all\n          * properties.\n          * \n          * @param v level to use for all property types\n         /********************************************************\n          */\n \n-    @Override\n-    public Std with(JsonAutoDetect ann)\n-    {\n-        Std curr = this;\n-        if (ann != null) {\n-    \t    curr = curr.withGetterVisibility(ann.getterVisibility());\n-    \t    curr = curr.withIsGetterVisibility(ann.isGetterVisibility());\n-                curr  = curr.withSetterVisibility(ann.setterVisibility());\n-                curr = curr.withCreatorVisibility(ann.creatorVisibility());\n-                curr = curr.withFieldVisibility(ann.fieldVisibility());\n-\t    }\n-\t    return curr;\n-\t}\n-\n-    @Override\n-    public Std with(Visibility v)\n-    {\n-        if (v == Visibility.DEFAULT) {\n-            return DEFAULT;\n-        }\n-        return new Std(v);\n-    }\n-\n-    @Override\n-    public Std withVisibility(PropertyAccessor method, Visibility v)\n-    {\n-\t    switch (method) {\n-\t    case GETTER:\n-\t        return withGetterVisibility(v);\n-\t    case SETTER:\n-\t        return withSetterVisibility(v);\n-\t    case CREATOR:\n-\t        return withCreatorVisibility(v);\n-\t    case FIELD:\n-\t        return withFieldVisibility(v);\n-\t    case IS_GETTER:\n-\t        return withIsGetterVisibility(v);\n+        @Override\n+        public Std with(JsonAutoDetect ann)\n+        {\n+            Std curr = this;\n+            if (ann != null) {\n+        \t    curr = curr.withGetterVisibility(ann.getterVisibility());\n+        \t    curr = curr.withIsGetterVisibility(ann.isGetterVisibility());\n+                    curr  = curr.withSetterVisibility(ann.setterVisibility());\n+                    curr = curr.withCreatorVisibility(ann.creatorVisibility());\n+                    curr = curr.withFieldVisibility(ann.fieldVisibility());\n+            }\n+            return curr;\n+        }\n+\n+        @Override\n+        public Std with(Visibility v)\n+        {\n+            if (v == Visibility.DEFAULT) {\n+                return DEFAULT;\n+            }\n+            return new Std(v);\n+        }\n+    \n+        @Override\n+        public Std withVisibility(PropertyAccessor method, Visibility v)\n+        {\n+            switch (method) {\n+            case GETTER:\n+                return withGetterVisibility(v);\n+            case SETTER:\n+                return withSetterVisibility(v);\n+            case CREATOR:\n+                return withCreatorVisibility(v);\n+            case FIELD:\n+                return withFieldVisibility(v);\n+            case IS_GETTER:\n+                return withIsGetterVisibility(v);\n             case ALL:\n                 return with(v);\n-        //case NONE:\n-        default:\n-            // break;\n-            return this;\n-\t    }\n-\t}\n+            //case NONE:\n+            default:\n+                // break;\n+                return this;\n+            }\n+        }\n \t\n-    @Override\n-\tpublic Std withGetterVisibility(Visibility v) {\n-\t    if (v == Visibility.DEFAULT)  v = DEFAULT._getterMinLevel;\n+        @Override\n+        public Std withGetterVisibility(Visibility v) {\n+            if (v == Visibility.DEFAULT)  v = DEFAULT._getterMinLevel;\n             if (_getterMinLevel == v) return this;\n-\t    return new Std(v, _isGetterMinLevel, _setterMinLevel, _creatorMinLevel, _fieldMinLevel);\n-\t}\n-\n-    @Override\n+            return new Std(v, _isGetterMinLevel, _setterMinLevel, _creatorMinLevel, _fieldMinLevel);\n+        }\n+\n+        @Override\n         public Std withIsGetterVisibility(Visibility v) {\n             if (v == Visibility.DEFAULT)  v = DEFAULT._isGetterMinLevel;\n             if (_isGetterMinLevel == v) return this;\n             return new Std(_getterMinLevel, v, _setterMinLevel, _creatorMinLevel, _fieldMinLevel);\n         }\n+\n+        @Override\n+        public Std withSetterVisibility(Visibility v) {\n+            if (v == Visibility.DEFAULT)  v = DEFAULT._setterMinLevel;\n+            if (_setterMinLevel == v) return this;\n+            return new Std(_getterMinLevel, _isGetterMinLevel, v, _creatorMinLevel, _fieldMinLevel);\n+        }\n+    \n+        @Override\n+        public Std withCreatorVisibility(Visibility v) {\n+            if (v == Visibility.DEFAULT)  v = DEFAULT._creatorMinLevel;\n+            if (_creatorMinLevel == v) return this;\n+            return new Std(_getterMinLevel, _isGetterMinLevel, _setterMinLevel, v, _fieldMinLevel);\n+        }\n+    \n+        @Override\n+        public Std withFieldVisibility(Visibility v) {\n+            if (v == Visibility.DEFAULT)  v = DEFAULT._fieldMinLevel;\n+            if (_fieldMinLevel == v) return this;\n+            return new Std(_getterMinLevel, _isGetterMinLevel, _setterMinLevel, _creatorMinLevel, v);\n+        }\n \t\t\n-    @Override\n-    public Std withSetterVisibility(Visibility v) {\n-        if (v == Visibility.DEFAULT)  v = DEFAULT._setterMinLevel;\n-        if (_setterMinLevel == v) return this;\n-        return new Std(_getterMinLevel, _isGetterMinLevel, v, _creatorMinLevel, _fieldMinLevel);\n-    }\n-\n-    @Override\n-    public Std withCreatorVisibility(Visibility v) {\n-        if (v == Visibility.DEFAULT)  v = DEFAULT._creatorMinLevel;\n-        if (_creatorMinLevel == v) return this;\n-        return new Std(_getterMinLevel, _isGetterMinLevel, _setterMinLevel, v, _fieldMinLevel);\n-    }\n-\n-    @Override\n-    public Std withFieldVisibility(Visibility v) {\n-        if (v == Visibility.DEFAULT)  v = DEFAULT._fieldMinLevel;\n-        if (_fieldMinLevel == v) return this;\n-        return new Std(_getterMinLevel, _isGetterMinLevel, _setterMinLevel, _creatorMinLevel, v);\n-    }\n-\t\t\n-    /*\n-    /********************************************************\n-    /* Public API impl\n-    /********************************************************\n-     */\n-\n-    @Override\n-    public boolean isCreatorVisible(Member m) {\n-        return _creatorMinLevel.isVisible(m);\n-    }\n-\t\n-    @Override\n-    public boolean isCreatorVisible(AnnotatedMember m) {\n-        return isCreatorVisible(m.getMember());\n-    }\n-    \n-    @Override\n-    public boolean isFieldVisible(Field f) {\n-        return _fieldMinLevel.isVisible(f);\n-    }\n-    \n-    @Override\n-    public boolean isFieldVisible(AnnotatedField f) {\n-        return isFieldVisible(f.getAnnotated());\n-    }\n-    \n-    @Override\n-    public boolean isGetterVisible(Method m) {\n-        return _getterMinLevel.isVisible(m);\n-    }\n-\n-    @Override\n-    public boolean isGetterVisible(AnnotatedMethod m) {\n-         return isGetterVisible(m.getAnnotated());\n-    }\n-\n-    @Override\n-    public boolean isIsGetterVisible(Method m) {\n-        return _isGetterMinLevel.isVisible(m);\n-    }    \n-\n-    @Override\n-    public boolean isIsGetterVisible(AnnotatedMethod m) {\n-        return isIsGetterVisible(m.getAnnotated());\n-    }\n-\n-    @Override\n-    public boolean isSetterVisible(Method m) {\n-        return _setterMinLevel.isVisible(m);\n-    }\n-    \n-    @Override\n-    public boolean isSetterVisible(AnnotatedMethod m) {\n-        return isSetterVisible(m.getAnnotated());\n-    }\n-\n-    /*\n-    /********************************************************\n-    /* Standard methods\n-    /********************************************************\n-     */\n-\n-    @Override\n-    public String toString() {\n-        return new StringBuilder(\"[Visibility:\")\n-        .append(\" getter: \").append(_getterMinLevel)\n-        .append(\", isGetter: \").append(_isGetterMinLevel)\n-        .append(\", setter: \").append(_setterMinLevel)\n-        .append(\", creator: \").append(_creatorMinLevel)\n-        .append(\", field: \").append(_fieldMinLevel)\n-        .append(\"]\").toString();\n-    }\n+        /*\n+        /********************************************************\n+        /* Public API impl\n+        /********************************************************\n+         */\n+\n+        @Override\n+        public boolean isCreatorVisible(Member m) {\n+            return _creatorMinLevel.isVisible(m);\n+        }\n+    \t\n+        @Override\n+        public boolean isCreatorVisible(AnnotatedMember m) {\n+            return isCreatorVisible(m.getMember());\n+        }\n+\n+        @Override\n+        public boolean isFieldVisible(Field f) {\n+            return _fieldMinLevel.isVisible(f);\n+        }\n+        \n+        @Override\n+        public boolean isFieldVisible(AnnotatedField f) {\n+            return isFieldVisible(f.getAnnotated());\n+        }\n+        \n+        @Override\n+        public boolean isGetterVisible(Method m) {\n+            return _getterMinLevel.isVisible(m);\n+        }\n+    \n+        @Override\n+        public boolean isGetterVisible(AnnotatedMethod m) {\n+             return isGetterVisible(m.getAnnotated());\n+        }\n+    \n+        @Override\n+        public boolean isIsGetterVisible(Method m) {\n+            return _isGetterMinLevel.isVisible(m);\n+        }    \n+    \n+        @Override\n+        public boolean isIsGetterVisible(AnnotatedMethod m) {\n+            return isIsGetterVisible(m.getAnnotated());\n+        }\n+    \n+        @Override\n+        public boolean isSetterVisible(Method m) {\n+            return _setterMinLevel.isVisible(m);\n+        }\n+        \n+        @Override\n+        public boolean isSetterVisible(AnnotatedMethod m) {\n+            return isSetterVisible(m.getAnnotated());\n+        }\n+\n+        /*\n+        /********************************************************\n+        /* Standard methods\n+        /********************************************************\n+         */\n+    \n+        @Override\n+        public String toString() {\n+            return new StringBuilder(\"[Visibility:\")\n+            .append(\" getter: \").append(_getterMinLevel)\n+            .append(\", isGetter: \").append(_isGetterMinLevel)\n+            .append(\", setter: \").append(_setterMinLevel)\n+            .append(\", creator: \").append(_creatorMinLevel)\n+            .append(\", field: \").append(_fieldMinLevel)\n+            .append(\"]\").toString();\n+        }\n     }\n }", "timestamp": 1412050412, "metainfo": ""}