{"sha": "e39ce3e0d3b85f7ab4e8eb1bf09ad48286eec793", "log": "Allow retaining of supported type for ToStringSerializer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n      */\n     public ToStringSerializer() { super(Object.class); }\n \n+    /**\n+     * Sometimes it may actually make sense to retain actual handled type, so...\n+     * \n+     * @since 2.5\n+     */\n+    public ToStringSerializer(Class<?> handledType) {\n+        super(handledType, false);\n+    }\n+    \n     @Override\n     public boolean isEmpty(Object value) {\n         if (value == null) {\n             return true;\n         }\n         String str = value.toString();\n-        // would use String.isEmpty(), but that's JDK 1.6\n-        return (str == null) || (str.length() == 0);\n+        return str.isEmpty();\n     }\n     \n     @Override\n     public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+        throws IOException\n     {\n         jgen.writeString(value.toString());\n     }\n     @Override\n     public void serializeWithType(Object value, JsonGenerator jgen, SerializerProvider provider,\n             TypeSerializer typeSer)\n-        throws IOException, JsonGenerationException\n+        throws IOException\n     {\n         typeSer.writeTypePrefixForScalar(value, jgen);\n         serialize(value, jgen, provider);\n     }\n     \n     @Override\n-    public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-        throws JsonMappingException\n-    {\n+    public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n         return createSchemaNode(\"string\", true);\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-            throws JsonMappingException\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n     {\n         if (visitor != null) {\n             visitor.expectStringFormat(typeHint);", "timestamp": 1412791789, "metainfo": ""}