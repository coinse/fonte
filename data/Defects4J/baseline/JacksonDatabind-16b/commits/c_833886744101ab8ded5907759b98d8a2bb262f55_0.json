{"sha": "833886744101ab8ded5907759b98d8a2bb262f55", "log": "ObjectNode: remove unneeded constructor  The Map container now being final, we don't need this constructor anymore.  Just create a base ObjectNode and .put() entries into _children instead.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n \n     public ObjectNode(JsonNodeFactory nc) { super(nc); }\n \n-    protected ObjectNode(JsonNodeFactory nc, Map<String, JsonNode> children) {\n-        super(nc);\n-        _children.putAll(children);\n-    }\n-    \n     /* Question: should this delegate to `JsonNodeFactory`? It does not absolutely\n      * have to, as long as sub-types override the method but...\n      */\n     protected ObjectNode _defaultDeepCopy()\n     {\n         final int len = _children.size();\n-        Map<String, JsonNode> newKids\n-            = new LinkedHashMap<String, JsonNode>(Math.max(4, len));\n-        for (Map.Entry<String, JsonNode> entry : _children.entrySet()) {\n-            newKids.put(entry.getKey(), entry.getValue().deepCopy());\n-        }\n-        return new ObjectNode(_nodeFactory, newKids);\n+        final ObjectNode ret = new ObjectNode(_nodeFactory);\n+\n+        for (Map.Entry<String, JsonNode> entry : _children.entrySet())\n+            ret._children.put(entry.getKey(), entry.getValue().deepCopy());\n+\n+        return ret;\n     }\n     \n     /*", "timestamp": 1359000869, "metainfo": ""}