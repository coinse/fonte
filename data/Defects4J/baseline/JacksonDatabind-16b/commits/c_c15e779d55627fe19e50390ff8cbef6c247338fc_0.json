{"sha": "c15e779d55627fe19e50390ff8cbef6c247338fc", "log": "Add `AnnotatedMember.getContext()` to help in access of class annotations, from within `AnnotatedMember`", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java\n         if (_annotated != null) {\n             return this;\n         }\n-        return new InnerClassProperty(this, new AnnotatedConstructor(_creator, null, null));\n+        return new InnerClassProperty(this, new AnnotatedConstructor(null, _creator, null, null));\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n          * -- at least not yet!\n          */\n         if (_annotationIntrospector == null) { // when annotation processing is disabled\n-            return new AnnotatedMethod(m, _emptyAnnotationMap(), null);\n-        }\n-        return new AnnotatedMethod(m, _collectRelevantAnnotations(m.getDeclaredAnnotations()), null);\n+            return new AnnotatedMethod(this, m, _emptyAnnotationMap(), null);\n+        }\n+        return new AnnotatedMethod(this, m, _collectRelevantAnnotations(m.getDeclaredAnnotations()), null);\n     }\n \n     protected AnnotatedConstructor _constructConstructor(Constructor<?> ctor, boolean defaultCtor)\n     {\n         if (_annotationIntrospector == null) { // when annotation processing is disabled\n-            return new AnnotatedConstructor(ctor, _emptyAnnotationMap(), _emptyAnnotationMaps(ctor.getParameterTypes().length));\n+            return new AnnotatedConstructor(this, ctor, _emptyAnnotationMap(), _emptyAnnotationMaps(ctor.getParameterTypes().length));\n         }\n         if (defaultCtor) {\n-            return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), null);\n+            return new AnnotatedConstructor(this, ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), null);\n         }\n         Annotation[][] paramAnns = ctor.getParameterAnnotations();\n         int paramCount = ctor.getParameterTypes().length;\n         } else {\n             resolvedAnnotations = _collectRelevantAnnotations(paramAnns);\n         }\n-        return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()),\n-                resolvedAnnotations);\n+        return new AnnotatedConstructor(this, ctor,\n+                _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), resolvedAnnotations);\n     }\n \n     protected AnnotatedMethod _constructCreatorMethod(Method m)\n     {\n         if (_annotationIntrospector == null) { // when annotation processing is disabled\n-            return new AnnotatedMethod(m, _emptyAnnotationMap(), _emptyAnnotationMaps(m.getParameterTypes().length));\n-        }\n-        return new AnnotatedMethod(m, _collectRelevantAnnotations(m.getDeclaredAnnotations()),\n+            return new AnnotatedMethod(this, m, _emptyAnnotationMap(), _emptyAnnotationMaps(m.getParameterTypes().length));\n+        }\n+        return new AnnotatedMethod(this, m, _collectRelevantAnnotations(m.getDeclaredAnnotations()),\n                                    _collectRelevantAnnotations(m.getParameterAnnotations()));\n     }\n \n     protected AnnotatedField _constructField(Field f)\n     {\n         if (_annotationIntrospector == null) { // when annotation processing is disabled\n-            return new AnnotatedField(f, _emptyAnnotationMap());\n-        }\n-        return new AnnotatedField(f, _collectRelevantAnnotations(f.getDeclaredAnnotations()));\n+            return new AnnotatedField(this, f, _emptyAnnotationMap());\n+        }\n+        return new AnnotatedField(this, f, _collectRelevantAnnotations(f.getDeclaredAnnotations()));\n     }\n  \n     private AnnotationMap _emptyAnnotationMap() {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java\n     /**********************************************************\n      */\n \n-    public AnnotatedConstructor(Constructor<?> constructor,\n+    public AnnotatedConstructor(AnnotatedClass ctxt, Constructor<?> constructor,\n             AnnotationMap classAnn, AnnotationMap[] paramAnn)\n     {\n-        super(classAnn, paramAnn);\n+        super(ctxt, classAnn, paramAnn);\n         if (constructor == null) {\n             throw new IllegalArgumentException(\"Null constructor not allowed\");\n         }\n      */\n     protected AnnotatedConstructor(Serialization ser)\n     {\n-        super(null, null);\n+        super(null, null, null);\n         _constructor = null;\n         _serialization = ser;\n     }\n     \n     @Override\n     public AnnotatedConstructor withAnnotations(AnnotationMap ann) {\n-        return new AnnotatedConstructor(_constructor, ann, _paramAnnotations);\n+        return new AnnotatedConstructor(_context, _constructor, ann, _paramAnnotations);\n     }\n     \n     /*\n             if (!ctor.isAccessible()) {\n                 ClassUtil.checkAndFixAccess(ctor);\n             }\n-            return new AnnotatedConstructor(ctor, null, null);\n+            return new AnnotatedConstructor(null, ctor, null, null);\n         } catch (Exception e) {\n             throw new IllegalArgumentException(\"Could not find constructor with \"\n                     +_serialization.args.length+\" args from Class '\"+clazz.getName());\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java\n     /**********************************************************\n      */\n \n-    public AnnotatedField(Field field, AnnotationMap annMap)\n+    public AnnotatedField(AnnotatedClass contextClass, Field field, AnnotationMap annMap)\n     {\n-        super(annMap);\n+        super(contextClass, annMap);\n         _field = field;\n     }\n     \n     @Override\n     public AnnotatedField withAnnotations(AnnotationMap ann) {\n-        return new AnnotatedField(_field, ann);\n+        return new AnnotatedField(_context, _field, ann);\n     }\n \n     /**\n      */\n     protected AnnotatedField(Serialization ser)\n     {\n-        super(null);\n+        super(null, null);\n         _field = null;\n         _serialization = ser;\n     }\n             if (!f.isAccessible()) {\n                 ClassUtil.checkAndFixAccess(f);\n             }\n-            return new AnnotatedField(f, null);\n+            return new AnnotatedField(null, f, null);\n         } catch (Exception e) {\n             throw new IllegalArgumentException(\"Could not find method '\"+_serialization.name\n                         +\"' from Class '\"+clazz.getName());\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java\n {\n     private static final long serialVersionUID = 1L; // since 2.5\n \n+    // 19-Dec-2014, tatu: Similarly, assumed NOT to be needed in cases where\n+    //    owning object (ObjectMapper or relatives) is being JDK-serialized\n+    /**\n+     * Class that was resolved to produce this member instance; either class that declared\n+     * the member, or one of its subtypes that inherited it.\n+     * \n+     * @since 2.5\n+     */\n+    protected final transient AnnotatedClass _context;\n+\n     // Transient since information not needed after construction, so\n     // no need to persist\n     protected final transient AnnotationMap _annotations;\n \n+    /*\n+    @Deprecated // since 2.5\n     protected AnnotatedMember(AnnotationMap annotations) {\n+        this(null, annotations);\n+    }\n+    */\n+\n+    protected AnnotatedMember(AnnotatedClass ctxt, AnnotationMap annotations) {\n         super();\n+        _context = ctxt;\n         _annotations = annotations;\n     }\n \n+    /**\n+     * Copy-constructor.\n+     *\n+     * @since 2.5\n+     */\n+    protected AnnotatedMember(AnnotatedMember base) {\n+        _context = base._context;\n+        _annotations = base._annotations;\n+    }\n+    \n+    /**\n+     * Actual physical class in which this memmber was declared.\n+     * Note that this may be different from what {@link #getContextClass()} returns;\n+     * \"owner\" may be a sub-type of \"declaring class\".\n+     */\n     public abstract Class<?> getDeclaringClass();\n \n     public abstract Member getMember();\n \n+    /**\n+     * Accessor for {@link AnnotatedClass} that was the type that was resolved\n+     * and that contains this member: this is either the {@link java.lang.Class}\n+     * in which member was declared, or one of its super types. If distinction\n+     * between result type, and actual class in which declaration was found matters,\n+     * you can compare return value to that of {@link #getDeclaringClass()}.\n+     * The main use for this accessor is (usually) to access class annotations.\n+     *<p>\n+     * Also note that owner property is NOT (JDK-)serialized; this should usually not\n+     * matter, but means that while it is accessible during construction of various\n+     * (de)serializers, it may not be available on per-call basis, if (but only if)\n+     * <code>ObjectMapper</code> (etc) has been serialized/deserialized.\n+     * \n+     * @since 2.5\n+     */\n+    public AnnotatedClass getContextClass() {\n+        return _context;\n+    }\n+    \n     @Override\n     public Iterable<Annotation> annotations() {\n         if (_annotations == null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n     /*****************************************************\n      */\n \n-    public AnnotatedMethod(Method method, AnnotationMap classAnn, AnnotationMap[] paramAnnotations)\n-    {\n-        super(classAnn, paramAnnotations);\n+    public AnnotatedMethod(AnnotatedClass ctxt, Method method,\n+            AnnotationMap classAnn, AnnotationMap[] paramAnnotations)\n+    {\n+        super(ctxt, classAnn, paramAnnotations);\n         if (method == null) {\n             throw new IllegalArgumentException(\"Can not construct AnnotatedMethod with null Method\");\n         }\n      */\n     protected AnnotatedMethod(Serialization ser)\n     {\n-        super(null, null);\n+        super(null, null, null);\n         _method = null;\n         _serialization = ser;\n     }\n      * Method that constructs a new instance with settings (annotations, parameter annotations)\n      * of this instance, but with different physical {@link Method}.\n      */\n-    public AnnotatedMethod withMethod(Method m)\n-    {\n-        return new AnnotatedMethod(m, _annotations, _paramAnnotations);\n+    public AnnotatedMethod withMethod(Method m) {\n+        return new AnnotatedMethod(_context, m, _annotations, _paramAnnotations);\n     }\n     \n     @Override\n     public AnnotatedMethod withAnnotations(AnnotationMap ann) {\n-        return new AnnotatedMethod(_method, ann, _paramAnnotations);\n+        return new AnnotatedMethod(_context, _method, ann, _paramAnnotations);\n     }\n \n     /*\n             if (!m.isAccessible()) {\n                 ClassUtil.checkAndFixAccess(m);\n             }\n-            return new AnnotatedMethod(m, null, null);\n+            return new AnnotatedMethod(null, m, null, null);\n         } catch (Exception e) {\n             throw new IllegalArgumentException(\"Could not find method '\"+_serialization.name\n                         +\"' from Class '\"+clazz.getName());\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java\n     public AnnotatedParameter(AnnotatedWithParams owner, Type type,  AnnotationMap annotations,\n             int index)\n     {\n-        super(annotations);\n+        super((owner == null) ? null : owner.getContextClass(), annotations);\n         _owner = owner;\n         _type = type;\n         _index = index;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java\n     /**********************************************************\n      */\n \n-    protected AnnotatedWithParams(AnnotationMap annotations, AnnotationMap[] paramAnnotations)\n+    protected AnnotatedWithParams(AnnotatedClass ctxt, AnnotationMap annotations, AnnotationMap[] paramAnnotations)\n     {\n-        super(annotations);\n+        super(ctxt, annotations);\n         _paramAnnotations = paramAnnotations;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n             propName = new PropertyName(attrName);\n         }\n         // now, then, we need a placeholder for member (no real Field/Method):\n-        AnnotatedMember member = new VirtualAnnotatedMember(ac.getRawType(),\n+        AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(),\n                 attrName, type.getRawClass());\n         // and with that and property definition\n         SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,\n         PropertyName propName = _propertyName(prop.name(), prop.namespace());\n         JavaType type = config.constructType(prop.type());\n         // now, then, we need a placeholder for member (no real Field/Method):\n-        AnnotatedMember member = new VirtualAnnotatedMember(ac.getRawType(),\n+        AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(),\n                 propName.getSimpleName(), type.getRawClass());\n         // and with that and property definition\n         SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/VirtualAnnotatedMember.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/VirtualAnnotatedMember.java\n  * @since 2.5\n  */\n public class VirtualAnnotatedMember extends AnnotatedMember\n+    implements java.io.Serializable\n {\n     private static final long serialVersionUID = 1L;\n \n     protected final Class<?> _rawType;\n \n     protected final String _name;\n-    \n+\n     /*\n     /**********************************************************\n     /* Life-cycle\n     /**********************************************************\n      */\n \n-    public VirtualAnnotatedMember(Class<?> declaringClass, String name, Class<?> rawType)\n+    public VirtualAnnotatedMember(AnnotatedClass contextClass, Class<?> declaringClass,\n+            String name, Class<?> rawType)\n     {\n-        super(/* AnnotationMap*/ null);\n+        super(contextClass, /* AnnotationMap*/ null);\n         _declaringClass = declaringClass;\n         _rawType = rawType;\n         _name = name;\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n             // we need a valid BeanPropertyDefinition; this will do (just need name to match)\n             POJOPropertyBuilder prop = new POJOPropertyBuilder(new PropertyName(\"bogus\"), null, true);\n             try {\n-                AnnotatedField f = new AnnotatedField(EmptyBean.class.getDeclaredField(\"name\"), null);\n+                AnnotatedField f = new AnnotatedField(null, EmptyBean.class.getDeclaredField(\"name\"), null);\n                 beanProperties.add(new BeanPropertyWriter(prop, f, null,\n                         strType,\n                         null, null, strType,", "timestamp": 1419032481, "metainfo": ""}