{"sha": "2c67dce1784428cdb7a5a7a4079d1581b8ec90eb", "log": "Continue implementing JsonAppend", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.databind.util.Converter;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n \n     \n     /*\n     /**********************************************************\n-    /* Class annotations for Polymorphic type handling (1.5+)\n+    /* Class annotations for Polymorphic type handling\n     /**********************************************************\n     */\n     \n     public Boolean findSerializationSortAlphabetically(AnnotatedClass ac) {\n         return null;\n     }\n+\n+    /**\n+     * Method for adding possible virtual properties to be serialized along\n+     * with regular properties.\n+     * \n+     * @since 2.5\n+     */\n+    public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass ac,\n+            List<BeanPropertyWriter> properties) { }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n         @Override public AnnotatedMember getMember() { return _member; }\n \n         /**\n+         *<p>\n+         * TODO: move to {@link BeanProperty} in near future, once all standard\n+         * implementations define it.\n+         * \n+         * @since 2.5\n+         */\n+        public boolean isVirtual() { return false; }\n+\n+        /**\n          * Implementation of this method throws\n          * {@link UnsupportedOperationException}, since instances of this\n          * implementation should not be used as part of actual structure\n--- a/src/main/java/com/fasterxml/jackson/databind/PropertyName.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/PropertyName.java\n public class PropertyName\n     implements java.io.Serializable\n {\n-    private static final long serialVersionUID = 7930806520033045126L;\n+    private static final long serialVersionUID = 1L; // 2.5\n \n     private final static String _USE_DEFAULT = \"\";\n     private final static String _NO_NAME = \"\";\n     public SerializableString simpleAsEncoded(MapperConfig<?> config) {\n         SerializableString sstr = _encodedSimple;\n         if (sstr == null) {\n-            sstr = config.compileString(_simpleName);\n+            if (config == null) {\n+                sstr = new SerializedString(_simpleName);\n+            } else {\n+                sstr = config.compileString(_simpleName);\n+            }\n             _encodedSimple = sstr;\n         }\n         return sstr;\n--- a/src/main/java/com/fasterxml/jackson/databind/annotation/JsonAppend.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotation/JsonAppend.java\n package com.fasterxml.jackson.databind.annotation;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;\n \n /**\n  */\n public @interface JsonAppend\n {\n-    public String[] attrs() default { };\n+    /**\n+     * Set of attribute-backed properties to include when serializing\n+     * a POJO.\n+     */\n+    public Attr[] attrs() default { };\n \n+    /**\n+     * Set of general virtual properties to include when serializing a POJO.\n+     */\n+    public Prop[] props() default { };\n+    \n+    /**\n+     * Definition of a single attribute-backed property.\n+     */\n+    public @interface Attr\n+    {\n+        /**\n+         * Name of attribute of which value to serialize. Is also used as the\n+         * name of external property to write, unless overridden by\n+         * assigning a value for {@link #propName()}.\n+         */\n+        public String value();\n+\n+        /**\n+         * Name to use for serializing value of the attribute; if not defined,\n+         * {@link #value} will be used instead.\n+         */\n+        public String propName() default \"\";\n+\n+        /**\n+         * When to include attribute-property. Default value indicates that\n+         * property should only be written if specified attribute has a non-null\n+         * value.\n+         */\n+        public JsonInclude.Include include() default JsonInclude.Include.NON_NULL;\n+\n+        /**\n+         * Metadata about property, similar to\n+         * {@link com.fasterxml.jackson.annotation.JsonProperty#required()}.\n+         */\n+        public boolean required() default false;\n+    }\n+    \n+    /**\n+     * Definition of a single general virtual property.\n+     */\n     public @interface Prop\n     {\n         public Class<? extends VirtualBeanPropertyWriter> value();\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n \n         Boolean r = _primary.findSerializationSortAlphabetically(ann);\n         return (r == null) ? _secondary.findSerializationSortAlphabetically(ann) : r;\n     }\n-    \n+\n+    @Override\n+    public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass ac,\n+            List<BeanPropertyWriter> properties) {\n+        // first secondary, then primary, to give proper precedence\n+        _primary.findAndAddVirtualProperties(config, ac, properties);\n+        _secondary.findAndAddVirtualProperties(config, ac, properties);\n+    }\n+\n     // // // Serialization: property annotations\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n \n     @Deprecated // since 2.3\n     public BeanPropertyDefinition withName(String newName) { return withSimpleName(newName); }\n-    \n+\n     /**\n      * Method that can be used to create a definition with\n      * same settings as this one, but with different\n      * @since 2.3\n      */\n     public abstract BeanPropertyDefinition withSimpleName(String newSimpleName);\n-    \n+\n     /*\n     /**********************************************************\n     /* Basic property information, name, type\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.databind.ser.std.RawSerializer;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.Converter;\n         JsonPropertyOrder order = _findAnnotation(ann, JsonPropertyOrder.class);\n         return (order == null) ? null : order.alphabetic();\n     }\n-    \n+\n+    @Override\n+    public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass ac,\n+            List<BeanPropertyWriter> properties) {\n+        JsonAppend ann = _findAnnotation(ac, JsonAppend.class);\n+        if (ann == null) {\n+            return;\n+        }\n+        // !!! TODO: implement\n+    }\n+\n     /*\n     /**********************************************************\n     /* Serialization: property annotations\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n         this(base, base._name);\n     }\n \n-    protected BeanPropertyWriter(BeanPropertyWriter base, SerializedString name) {\n-        _name = name;\n+    /**\n+     * @since 2.5\n+     */\n+    protected BeanPropertyWriter(BeanPropertyWriter base, PropertyName name)\n+    {\n+        /* 02-Dec-2014, tatu: This is a big mess, alas, what with dependency\n+         *   to MapperConfig to encode, and Afterburner having heartburn\n+         *   for SerializableString (vs SerializedString).\n+         *   Hope it can be resolved/reworker in 2.6 timeframe\n+         */\n+        _name = new SerializedString(name.getSimpleName());\n         _wrapperName = base._wrapperName;\n \n         _member = base._member;\n         _metadata = base._metadata;\n     }\n \n+    protected BeanPropertyWriter(BeanPropertyWriter base, SerializedString name) {\n+        _name = name;\n+        _wrapperName = base._wrapperName;\n+\n+        _member = base._member;\n+        _contextAnnotations = base._contextAnnotations;\n+        _declaredType = base._declaredType;\n+        _accessorMethod = base._accessorMethod;\n+        _field = base._field;\n+        _serializer = base._serializer;\n+        _nullSerializer = base._nullSerializer;\n+        // one more thing: copy internal settings, if any (since 1.7)\n+        if (base._internalSettings != null) {\n+            _internalSettings = new HashMap<Object,Object>(base._internalSettings);\n+        }\n+        _cfgSerializationType = base._cfgSerializationType;\n+        _dynamicSerializers = base._dynamicSerializers;\n+        _suppressNulls = base._suppressNulls;\n+        _suppressableValue = base._suppressableValue;\n+        _includeInViews = base._includeInViews;\n+        _typeSerializer = base._typeSerializer;\n+        _nonTrivialBaseType = base._nonTrivialBaseType;\n+        _metadata = base._metadata;\n+    }\n+\n     public BeanPropertyWriter rename(NameTransformer transformer) {\n         String newName = transformer.transform(_name.getValue());\n         if (newName.equals(_name.toString())) {\n             return this;\n         }\n-        return new BeanPropertyWriter(this, new SerializedString(newName));\n+        return new BeanPropertyWriter(this, new PropertyName(newName));\n     }\n     \n     /**\n     // Note: also part of 'PropertyWriter'\n     @Override\n     public <A extends Annotation> A getAnnotation(Class<A> acls) {\n-        return _member.getAnnotation(acls);\n+        return (_member == null) ? null : _member.getAnnotation(acls);\n     }\n \n     // Note: also part of 'PropertyWriter'\n     @Override\n     public <A extends Annotation> A getContextAnnotation(Class<A> acls) {\n-        return _contextAnnotations.get(acls);\n+        return (_contextAnnotations == null) ? null : _contextAnnotations.get(acls);\n     }\n \n     @Override public AnnotatedMember getMember() { return _member; }\n     protected void _depositSchemaProperty(ObjectNode propertiesNode, JsonNode schemaNode) {\n         propertiesNode.set(getName(), schemaNode);\n     }\n+\n+    /**\n+     * Note: will be defined in {@link BeanProperty}; as of now is not yet.\n+     *<p>\n+     * TODO: move to {@link BeanProperty} in near future, once all standard\n+     * implementations define it.\n+     * \n+     * @since 2.5\n+     */\n+    public boolean isVirtual() { return false; }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/VirtualBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/VirtualBeanPropertyWriter.java\n package com.fasterxml.jackson.databind.ser;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n public abstract class VirtualBeanPropertyWriter\n     extends BeanPropertyWriter\n {\n-    /*\n-    protected VirtualBeanPropertyWriter() {\n-        \n-    }\n-    */\n-\n     /**\n      * Pass-through constructor that may be used by sub-classes that\n      * want full control over implementation.\n      */\n     protected VirtualBeanPropertyWriter(BeanPropertyDefinition propDef,\n-            AnnotatedMember member, Annotations contextAnnotations,\n-            JavaType declaredType,\n+            Annotations contextAnnotations, JavaType declaredType,\n             JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType,\n             boolean suppressNulls, Object suppressableValue)\n     {\n-        super(propDef, member, contextAnnotations, declaredType,\n+        super(propDef, /*AnnotatedMember*/ null, contextAnnotations, declaredType,\n                 ser, typeSer, serType, suppressNulls, suppressableValue);\n     }\n \n+    protected VirtualBeanPropertyWriter(VirtualBeanPropertyWriter base) {\n+        super(base);\n+    }\n+\n+    protected VirtualBeanPropertyWriter(VirtualBeanPropertyWriter base, PropertyName name) {\n+        super(base, name);\n+    }\n+    \n+    // made abstract again to ensure sub-classes redefine\n+    public abstract BeanPropertyDefinition withName(PropertyName newName);\n+\n+    // made abstract again to ensure sub-classes redefine\n+    public abstract BeanPropertyDefinition withSimpleName(String newSimpleName);\n+    \n+    /*\n+    /**********************************************************\n+    /* Standard accessor overrides\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public boolean isVirtual() { return true; }\n+    \n     /*\n     /**********************************************************\n     /* PropertyWriter serialization method overrides\n     /**********************************************************\n      */\n \n-    protected abstract Object value(Object bean) throws Exception;\n+    /**\n+     * Method called to \n+     */\n+    protected abstract Object value(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception;\n     \n     @Override\n-    public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception\n+    public void serializeAsField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception\n     {\n         // NOTE: mostly copied from base class, but off-lined get() access\n-        final Object value = value(bean);\n+        final Object value = value(bean, gen, prov);\n \n         if (value == null) {\n             if (_nullSerializer != null) {\n-                jgen.writeFieldName(_name);\n-                _nullSerializer.serialize(null, jgen, prov);\n+                gen.writeFieldName(_name);\n+                _nullSerializer.serialize(null, gen, prov);\n             }\n             return;\n         }\n         }\n         if (value == bean) { // simple check for direct cycles\n             // three choices: exception; handled by call; or pass-through\n-            if (_handleSelfReference(bean, jgen, prov, ser)) {\n+            if (_handleSelfReference(bean, gen, prov, ser)) {\n                 return;\n             }\n         }\n-        jgen.writeFieldName(_name);\n+        gen.writeFieldName(_name);\n         if (_typeSerializer == null) {\n-            ser.serialize(value, jgen, prov);\n+            ser.serialize(value, gen, prov);\n         } else {\n-            ser.serializeWithType(value, jgen, prov, _typeSerializer);\n+            ser.serializeWithType(value, gen, prov, _typeSerializer);\n         }\n     }\n \n     //public void serializeAsOmittedField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception\n     \n     @Override\n-    public void serializeAsElement(Object bean, JsonGenerator jgen, SerializerProvider prov)\n+    public void serializeAsElement(Object bean, JsonGenerator gen, SerializerProvider prov)\n         throws Exception\n     {\n         // NOTE: mostly copied from base class, but off-lined get() access\n-        final Object value = value(bean);\n+        final Object value = value(bean, gen, prov);\n \n         if (value == null) {\n             if (_nullSerializer != null) {\n-                _nullSerializer.serialize(null, jgen, prov);\n+                _nullSerializer.serialize(null, gen, prov);\n             } else {\n-                jgen.writeNull();\n+                gen.writeNull();\n             }\n             return;\n         }\n         if (_suppressableValue != null) {\n             if (MARKER_FOR_EMPTY == _suppressableValue) {\n                 if (ser.isEmpty(value)) {\n-                    serializeAsPlaceholder(bean, jgen, prov);\n+                    serializeAsPlaceholder(bean, gen, prov);\n                     return;\n                 }\n             } else if (_suppressableValue.equals(value)) {\n-                serializeAsPlaceholder(bean, jgen, prov);\n+                serializeAsPlaceholder(bean, gen, prov);\n                 return;\n             }\n         }\n         if (value == bean) {\n-            if (_handleSelfReference(bean, jgen, prov, ser)) {\n+            if (_handleSelfReference(bean, gen, prov, ser)) {\n                 return;\n             }\n         }\n         if (_typeSerializer == null) {\n-            ser.serialize(value, jgen, prov);\n+            ser.serialize(value, gen, prov);\n         } else {\n-            ser.serializeWithType(value, jgen, prov, _typeSerializer);\n+            ser.serializeWithType(value, gen, prov, _typeSerializer);\n         }\n     }\n \n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/AttributePropertyWriter.java\n+package com.fasterxml.jackson.databind.ser.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n+import com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;\n+import com.fasterxml.jackson.databind.util.Annotations;\n+\n+/**\n+ * {@link VirtualBeanPropertyWriter} implementation used for\n+ * {@link com.fasterxml.jackson.databind.annotation.JsonAppend},\n+ * to serialize properties backed-by dynamically assignable attribute\n+ * values.\n+ * \n+ * @since 2.5\n+ */\n+public class AttributePropertyWriter\n+    extends VirtualBeanPropertyWriter\n+{\n+    protected final String _attrName;\n+\n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+    \n+/*\n+    protected VirtualBeanPropertyWriter(BeanPropertyDefinition propDef,\n+            Annotations contextAnnotations, JavaType declaredType,\n+            JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType,\n+            boolean suppressNulls, Object suppressableValue)\n+ */\n+    \n+    public AttributePropertyWriter(String attrName,\n+            BeanPropertyDefinition propDef,\n+            Annotations contextAnnotations, JavaType declaredType,\n+            JsonInclude.Include inclusion)\n+    {\n+        super(propDef, contextAnnotations, declaredType,\n+                /* value serializer */ null, /* type serializer */ null, /* ser type */ null,\n+                _suppressNulls(inclusion), null);\n+        _attrName = attrName;\n+    }\n+\n+    protected AttributePropertyWriter(AttributePropertyWriter base) {\n+        super(base);\n+        _attrName = base._attrName;\n+    }\n+\n+    @Override\n+    public BeanPropertyDefinition withName(PropertyName newName) {\n+        // !!! TODO\n+        return null;\n+    }\n+\n+    @Override\n+    public BeanPropertyDefinition withSimpleName(String newSimpleName) {\n+        // !!! TODO\n+        return null;\n+    }\n+\n+    protected static boolean _suppressNulls(JsonInclude.Include inclusion) {\n+        return (inclusion != JsonInclude.Include.ALWAYS);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Overrides for actual serialization, value access\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    protected Object value(Object bean, JsonGenerator jgen, SerializerProvider prov)\n+        throws Exception\n+    {\n+        return prov.getAttribute(_attrName);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestNoClassDefFoundDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestNoClassDefFoundDeserializer.java\n package com.fasterxml.jackson.databind.deser;\n-\n \n import javax.measure.Measure;\n \n     }\n \n     public static class Child {\n-        public Measure measure;\n+        public Measure<?> measure;\n     }\n \n     public void testClassIsMissing()", "timestamp": 1417590343, "metainfo": ""}