{"sha": "995e377e3657493e136d92e9878624e2958f0abb", "log": "Start rewriting most ResolvableDeserializers as ContextualDeserializers", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n @JacksonStdImpl\n public final class StringCollectionDeserializer\n     extends ContainerDeserializerBase<Collection<String>>\n-    implements ResolvableDeserializer\n+    implements ContextualDeserializer\n {\n     // // Configuration\n \n     protected final JavaType _collectionType;\n-\n-    protected final BeanProperty _property;\n     \n     /**\n      * Value deserializer to use, if NOT the standard one\n      * (if it is, will be null).\n      */\n-    protected JsonDeserializer<String> _valueDeserializer;\n+    protected final JsonDeserializer<String> _valueDeserializer;\n \n     // // Instance construction settings:\n     \n      * Deserializer that is used iff delegate-based creator is\n      * to be used for deserializing from JSON Object.\n      */\n-    protected JsonDeserializer<Object> _delegateDeserializer;\n+    protected final JsonDeserializer<Object> _delegateDeserializer;\n \n     // NOTE: no PropertyBasedCreator, as JSON Arrays have no properties\n \n      */\n     \n     @SuppressWarnings(\"unchecked\")\n-    public StringCollectionDeserializer(JavaType collectionType, BeanProperty prop,\n-            JsonDeserializer<?> valueDeser,\n-            ValueInstantiator valueInstantiator)\n+    public StringCollectionDeserializer(JavaType collectionType,\n+            JsonDeserializer<?> valueDeser, ValueInstantiator valueInstantiator)\n+    {\n+        this(collectionType, (JsonDeserializer<String>) valueDeser,\n+                valueInstantiator, null);\n+    }\n+\n+    protected StringCollectionDeserializer(JavaType collectionType,\n+            JsonDeserializer<String> valueDeser, ValueInstantiator valueInstantiator,\n+            JsonDeserializer<Object> delegateDeser)\n     {\n         super(collectionType.getRawClass());\n-        _property = prop;\n         _collectionType = collectionType;\n-        _valueDeserializer = (JsonDeserializer<String>) valueDeser;\n+        _valueDeserializer = valueDeser;\n         _valueInstantiator = valueInstantiator;\n-    }\n-\n-    /*\n-    /**********************************************************\n-    /* Validation, post-processing (ResolvableDeserializer)\n-    /**********************************************************\n-     */\n-\n-    @SuppressWarnings(\"unchecked\")\n-    /**\n-     * Method called to finalize setup of this deserializer,\n-     * after deserializer itself has been registered. This\n-     * is needed to handle recursive and transitive dependencies.\n-     */\n-    @Override\n-    public void resolve(DeserializationContext ctxt)\n-        throws JsonMappingException\n+        _delegateDeserializer = delegateDeser;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Validation, post-processing\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n+            BeanProperty property) throws JsonMappingException\n     {\n         // May need to resolve types for delegate-based creators:\n-        AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n-        if (delegateCreator != null) {\n-            JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n-            // Need to create a temporary property to allow contextual deserializers:\n-            BeanProperty.Std property = new BeanProperty.Std(null,\n-                    delegateType, null, delegateCreator);\n-            _delegateDeserializer = findDeserializer(ctxt, delegateType, property);\n-        }\n+        JsonDeserializer<Object> delegate = null;\n+        if (_valueInstantiator != null) {\n+            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n+            if (delegateCreator != null) {\n+                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n+                delegate = findDeserializer(ctxt, delegateType, property);\n+            }\n+        }\n+        JsonDeserializer<?> valueDeser = _valueDeserializer;\n         if (_valueDeserializer == null) {\n             // And we may also need to get deserializer for String\n-            JsonDeserializer<?> deser = ctxt.findValueDeserializer(_collectionType.getContentType(), _property);\n-            _valueDeserializer = (JsonDeserializer<String>) deser;\n-        }\n-        if (isDefaultDeserializer(_valueDeserializer)) {\n-            _valueDeserializer = null;\n-        }\n+            JsonDeserializer<?> deser = ctxt.findContextualValueDeserializer(_collectionType.getContentType(), property);\n+            valueDeser = (JsonDeserializer<String>) deser;\n+            if (isDefaultDeserializer(valueDeser)) {\n+                valueDeser = null;\n+            }\n+        }\n+        return new StringCollectionDeserializer(_collectionType,\n+                (JsonDeserializer<String>)valueDeser, _valueInstantiator, delegate);\n     }\n     \n     /*\n         result.add(value);\n         return result;\n     }\n-    \n }", "timestamp": 1327905013, "metainfo": ""}