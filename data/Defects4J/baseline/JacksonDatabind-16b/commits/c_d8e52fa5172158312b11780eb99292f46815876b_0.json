{"sha": "d8e52fa5172158312b11780eb99292f46815876b", "log": "Fixed [JACKSON-806]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n      */\n     public abstract String getInternalName();\n \n+    /**\n+     * Accessor that can be called to check whether property was included\n+     * due to an explicit marker (usually annotation), or just by naming\n+     * convention.\n+     * \n+     * @return True if property was explicitly included (usually by having\n+     *   one of components being annotated); false if inclusion was purely\n+     *   due to naming or visibility definitions (that is, implicit)\n+     */\n+    public abstract boolean isExplicitlyIncluded();\n+    \n     /*\n     /*****************************************************\n     /* Capabilities\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n             // Otherwise, check ignorals\n             if (prop.anyIgnorals()) {\n                 // first: if one or more ignorals, and no explicit markers, remove the whole thing\n-                if (!prop.anyExplicitNames()) {\n+                if (!prop.isExplicitlyIncluded()) {\n                     it.remove();\n                     _addIgnored(prop.getName());\n                     continue;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n \n     @Override\n     public String getInternalName() { return _internalName; }\n+\n+    @Override\n+    public boolean isExplicitlyIncluded() {\n+        return _anyExplicitNames(_fields)\n+                || _anyExplicitNames(_getters)\n+                || _anyExplicitNames(_setters)\n+                || _anyExplicitNames(_ctorParameters)\n+                ;\n+    }\n+\n     \n     @Override\n     public boolean hasGetter() { return _getters != null; }\n     /**********************************************************\n      */\n \n-    public boolean anyExplicitNames() {\n-        return _anyExplicitNames(_fields)\n-                || _anyExplicitNames(_getters)\n-                || _anyExplicitNames(_setters)\n-                || _anyExplicitNames(_ctorParameters)\n-                ;\n-    }\n-\n     private <T> boolean _anyExplicitNames(Linked<T> n)\n     {\n         for (; n != null; n = n.next) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         Iterator<BeanPropertyDefinition> it = properties.iterator();\n         while (it.hasNext()) {\n             BeanPropertyDefinition property = it.next();\n-            if (!property.couldDeserialize()) {\n+            // one caveat: as per [JACKSON-806], only remove implicit properties;\n+            // explicitly annotated ones should remain\n+            if (!property.couldDeserialize() && !property.isExplicitlyIncluded()) {\n                 it.remove();\n             }\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n \n     @Override\n     public String getInternalName() { return getName(); }\n+\n+    // hmmh. what should we claim here?\n+    @Override\n+    public boolean isExplicitlyIncluded() { return false; }\n     \n     /*\n     /*****************************************************", "timestamp": 1331619465, "metainfo": ""}