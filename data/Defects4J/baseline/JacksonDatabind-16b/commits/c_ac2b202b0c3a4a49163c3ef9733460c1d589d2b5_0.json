{"sha": "ac2b202b0c3a4a49163c3ef9733460c1d589d2b5", "log": "fixes #528 - Code refactoring to eliminate duplicate code between inclusion mechanism EXISTING_PROPERTY and PROPERTY via inheritance.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExistingPropertyTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExistingPropertyTypeSerializer.java\n  * Type serializer used with {@link As#EXISTING_PROPERTY} inclusion mechanism.\n  * Expects type information to be a well-defined property on all sub-classes.\n  * \n- * 10/15/2014 - At time of commit, deserialization identical to deserializer\n- * for {@link As#PROPERTY} inclusion mechanism\n- * \n  * @author fleeman (modeled after code by tatus)\n  */\n public class AsExistingPropertyTypeSerializer\n-    extends AsArrayTypeSerializer\n+    extends AsPropertyTypeSerializer\n {\n-    protected final String _typePropertyName;\n \n     public AsExistingPropertyTypeSerializer(TypeIdResolver idRes, BeanProperty property, String propName)\n     {\n-        super(idRes, property);\n-        _typePropertyName = propName;\n+        super(idRes, property, propName);\n     }\n \n     @Override\n         return (_property == prop) ? this : new AsExistingPropertyTypeSerializer(this._idResolver, prop, this._typePropertyName);\n     }\n     \n-    @Override\n-    public String getPropertyName() { return _typePropertyName; }\n-\n     @Override\n     public As getTypeInclusion() { return As.EXISTING_PROPERTY; }\n     \n     }\n     \n     @Override\n-    public void writeTypeSuffixForObject(Object value, JsonGenerator jgen) throws IOException {\n-        // always need to close, regardless of whether its native type id or not\n-    \tjgen.writeEndObject();\n-    }\n-\n-\n-    /*\n-    /**********************************************************\n-    /* Writing with custom type id\n-    /**********************************************************\n-     */\n-\n-    // Only need to override Object-variants\n-    \n-    @Override\n     public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId) throws IOException\n     {\n     \tif (jgen.canWriteTypeId()) {\n         }\n     }\n \n-    @Override\n-    public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId) throws IOException {\n-        jgen.writeEndObject();\n-    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java\n                     _typeProperty, _typeIdVisible, _defaultImpl);\n         case EXISTING_PROPERTY:\n         \t// as per [#528]\n-        \treturn new AsExistingPropertyTypeDeserializer(baseType, idRes,\n+        \treturn new AsPropertyTypeDeserializer(baseType, idRes,\n                     _typeProperty, _typeIdVisible, _defaultImpl);\n         }\n         throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \"+_includeAs);", "timestamp": 1413394266, "metainfo": ""}