{"sha": "ad9a43ff235cd00f94ebce43fddb0d95262a0eb0", "log": "Rewrote test for #380, to test expected behavior", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestIgnoredTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestIgnoredTypes.java\n package com.fasterxml.jackson.databind.deser;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n import com.fasterxml.jackson.annotation.*;\n-\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n \n /**\n  * Test for [JACKSON-429]\n         public IgnoredType ignored;\n     }\n \n+    // // And test for mix-in annotations\n+    \n+    @JsonIgnoreType\n+    static class Person {\n+        public String name;\n+        public Person() { }\n+        public Person(String name) {\n+            this.name = name;\n+        }\n+    }\n+\n+    static class PersonWrapper {\n+        public int value = 1;\n+        public Person person = new Person(\"Foo\");\n+    }\n+    \n+    @JsonIgnoreType\n+    static abstract class PersonMixin {\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Unit tests\n         assertNotNull(bean);\n         assertEquals(9, bean.value);\n     }\n+\n+    public void testSingleWithMixins() throws Exception {\n+        SimpleModule module = new SimpleModule();\n+        module.setMixInAnnotation(Person.class, PersonMixin.class);\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(module);\n+        PersonWrapper input = new PersonWrapper();\n+        String json = mapper.writeValueAsString(input);\n+        assertEquals(\"{\\\"value\\\":1}\", json);\n+    }\n+    \n+    public void testListWithMixins() throws Exception {\n+        SimpleModule module = new SimpleModule();\n+        module.setMixInAnnotation(Person.class, PersonMixin.class);\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(module);\n+        List<Person> persons = new ArrayList<Person>();\n+        persons.add(new Person(\"Bob\"));\n+        String json = mapper.writeValueAsString(persons);\n+        assertEquals(\"[{\\\"name\\\":\\\"Bob\\\"}]\", json);\n+    }\n }", "timestamp": 1389117236, "metainfo": ""}