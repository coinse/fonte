{"sha": "83341f7530d341139e5613455dd7a8893d4f0d68", "log": "Starting to add configurability for \"untyped\" deserializer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n         if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n             // Object (\"untyped\"), String equivalents:\n             if (rawType == CLASS_OBJECT) {\n-                return UntypedObjectDeserializer.instance;\n+                return new UntypedObjectDeserializer();\n             }\n             if (rawType == CLASS_STRING || rawType == CLASS_CHAR_BUFFER) {\n                 return StringDeserializer.instance;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java\n \n import com.fasterxml.jackson.core.*;\n \n+import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n+import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.ObjectBuffer;\n \n /**\n @JacksonStdImpl\n public class UntypedObjectDeserializer\n     extends StdDeserializer<Object>\n+    implements ResolvableDeserializer, ContextualDeserializer\n {\n     private static final long serialVersionUID = 1L;\n \n     private final static Object[] NO_OBJECTS = new Object[0];\n \n     /**\n-     * @since 2.2\n-     */\n+     * @deprecated Since 2.3, construct a new instance, needs to be resolved\n+     */\n+    @Deprecated\n     public final static UntypedObjectDeserializer instance = new UntypedObjectDeserializer();\n-    \n-    public UntypedObjectDeserializer() { super(Object.class); }\n-\n+\n+    /*\n+    /**********************************************************\n+    /* Possible custom deserializer overrides we need to use\n+    /**********************************************************\n+     */\n+\n+    protected JsonDeserializer<Object> _mapDeserializer;\n+\n+    protected JsonDeserializer<Object> _listDeserializer;\n+\n+    protected JsonDeserializer<Object> _stringDeserializer;\n+\n+    protected JsonDeserializer<Object> _numberDeserializer;\n+    \n+    public UntypedObjectDeserializer() {\n+        super(Object.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public UntypedObjectDeserializer(UntypedObjectDeserializer base,\n+            JsonDeserializer<?> mapDeser, JsonDeserializer<?> listDeser,\n+            JsonDeserializer<?> stringDeser, JsonDeserializer<?> numberDeser)\n+    {\n+        super(Object.class);\n+        _mapDeserializer = (JsonDeserializer<Object>) mapDeser;\n+        _listDeserializer = (JsonDeserializer<Object>) listDeser;\n+        _stringDeserializer = (JsonDeserializer<Object>) stringDeser;\n+        _numberDeserializer = (JsonDeserializer<Object>) numberDeser;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Initialization\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * We need to implement this method to properly find things to delegate\n+     * to: it can not be done earlier since delegated deserializers almost\n+     * certainly require access to this instance (at least \"List\" and \"Map\" ones)\n+     */\n+    @Override\n+    public void resolve(DeserializationContext ctxt) throws JsonMappingException\n+    {\n+        JavaType obType = ctxt.constructType(Object.class);\n+        JavaType stringType = ctxt.constructType(String.class);\n+        TypeFactory tf = ctxt.getTypeFactory();\n+        _mapDeserializer = _findCustomDeser(ctxt, tf.constructMapType(Map.class, stringType, obType));\n+        _listDeserializer = _findCustomDeser(ctxt, tf.constructCollectionType(List.class, obType));\n+        _stringDeserializer = _findCustomDeser(ctxt, stringType);\n+        _numberDeserializer = _findCustomDeser(ctxt, tf.constructType(Number.class));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected JsonDeserializer<Object> _findCustomDeser(DeserializationContext ctxt, JavaType type)\n+        throws JsonMappingException\n+    {\n+        // NOTE: since we don't yet have the referring property, this should be fine:\n+        JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(type);\n+        if (ClassUtil.isJacksonStdImpl(deser)) {\n+            return null;\n+        }\n+        return (JsonDeserializer<Object>) deser;\n+    }\n+    \n+    @Override\n+    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n+            BeanProperty property) throws JsonMappingException\n+    {\n+        JsonDeserializer<?> mapDeserializer = _mapDeserializer;\n+        if (mapDeserializer instanceof ContextualDeserializer) {\n+            mapDeserializer = ((ContextualDeserializer)mapDeserializer).createContextual(ctxt, property);\n+        }\n+        JsonDeserializer<?> listDeserializer = _listDeserializer;\n+        if (listDeserializer instanceof ContextualDeserializer) {\n+            listDeserializer = ((ContextualDeserializer)listDeserializer).createContextual(ctxt, property);\n+        }\n+        JsonDeserializer<?> stringDeserializer = _stringDeserializer;\n+        if (stringDeserializer instanceof ContextualDeserializer) {\n+            stringDeserializer = ((ContextualDeserializer)stringDeserializer).createContextual(ctxt, property);\n+        }\n+        JsonDeserializer<?> numberDeserializer = _numberDeserializer;\n+        if (numberDeserializer instanceof ContextualDeserializer) {\n+            numberDeserializer = ((ContextualDeserializer)numberDeserializer).createContextual(ctxt, property);\n+        }\n+\n+        // And if anything changed, we'll need to change too!\n+        if ((mapDeserializer != _mapDeserializer)\n+                || (listDeserializer != _listDeserializer)\n+                || (stringDeserializer != _stringDeserializer)\n+                || (numberDeserializer != _numberDeserializer)\n+                ) {\n+            return _withResolved(mapDeserializer, listDeserializer,\n+                    stringDeserializer, numberDeserializer);\n+        }\n+        return this;\n+    }\n+\n+    protected JsonDeserializer<?> _withResolved(JsonDeserializer<?> mapDeser,\n+            JsonDeserializer<?> listDeser,\n+            JsonDeserializer<?> stringDeser, JsonDeserializer<?> numberDeser) {\n+        return new UntypedObjectDeserializer(this,\n+                mapDeser, listDeser, stringDeser, numberDeser);\n+    }\n+        \n     /*\n     /**********************************************************\n     /* Deserializer API\n         case VALUE_EMBEDDED_OBJECT:\n             return jp.getEmbeddedObject();\n         case VALUE_STRING:\n+            if (_stringDeserializer != null) {\n+                return _stringDeserializer.deserialize(jp, ctxt);\n+            }\n             return jp.getText();\n \n         case VALUE_NUMBER_INT:\n          * naturally and thus do not need or use type ids)\n          */\n         case VALUE_STRING:\n+            if (_stringDeserializer != null) {\n+                return _stringDeserializer.deserialize(jp, ctxt);\n+            }\n             return jp.getText();\n \n         case VALUE_NUMBER_INT:\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestUntypedDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestUntypedDeserialization.java\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;\n+import com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n \n /**\n  * Unit tests for verifying \"old\" data binding from JSON to JDK objects;\n public class TestUntypedDeserialization\n     extends com.fasterxml.jackson.test.BaseTest\n {\n+    @SuppressWarnings(\"serial\")\n+    static class UCStringDeserializer\n+        extends StdScalarDeserializer<String>\n+    {\n+        public UCStringDeserializer() { super(String.class); }\n+\n+        @Override\n+        public String deserialize(JsonParser jp, DeserializationContext ctxt)\n+            throws IOException, JsonProcessingException\n+        {\n+            return jp.getText().toUpperCase();\n+        }\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    static class CustomNumberDeserializer\n+        extends StdScalarDeserializer<Number>\n+    {\n+        protected final Integer value;\n+        \n+        public CustomNumberDeserializer(int nr) {\n+            super(Number.class);\n+            value = nr;\n+        }\n+\n+        @Override\n+        public Number deserialize(JsonParser jp, DeserializationContext ctxt)\n+            throws IOException, JsonProcessingException\n+        {\n+            return value;\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n     @SuppressWarnings(\"unchecked\")\n-    public void testSampleDoc()\n-        throws Exception\n+    public void testSampleDoc() throws Exception\n     {\n         final String JSON = SAMPLE_DOC_JSON_SPEC;\n \n         assertSame(Long.class, n.getClass());\n         assertEquals(Long.valueOf(VALUE), n);\n     }\n+\n+    public void testUntypedWithCustomDesers() throws IOException\n+    {\n+        SimpleModule m = new SimpleModule(\"test-module\");\n+        m.addDeserializer(String.class, new UCStringDeserializer());\n+        m.addDeserializer(Number.class, new CustomNumberDeserializer(13));\n+        final ObjectMapper mapper = new ObjectMapper()\n+            .registerModule(m);\n+\n+        Object ob = mapper.readValue(\"{\\\"a\\\":\\\"b\\\", \\\"nr\\\":1 }\", Object.class);\n+        assertTrue(ob instanceof Map);\n+        Object value = ((Map<?,?>) ob).get(\"a\");\n+        assertNotNull(value);\n+        assertTrue(value instanceof String);\n+        assertEquals(\"B\", value);\n+\n+        value = ((Map<?,?>) ob).get(\"nr\");\n+        assertNotNull(value);\n+        assertTrue(value instanceof Number);\n+        assertEquals(Integer.valueOf(13), value);\n+    }\n }", "timestamp": 1379723618, "metainfo": ""}