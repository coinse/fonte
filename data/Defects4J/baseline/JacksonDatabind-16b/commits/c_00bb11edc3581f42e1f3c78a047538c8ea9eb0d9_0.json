{"sha": "00bb11edc3581f42e1f3c78a047538c8ea9eb0d9", "log": "Fix #682", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n \n     @Override\n     public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n-        if (value instanceof Date) {\n+        String str;\n+        Class<?> cls = value.getClass();\n+        \n+        if (cls == String.class) {\n+            str = (String) value;\n+        } else if (Date.class.isAssignableFrom(cls)) {\n             provider.defaultSerializeDateKey((Date) value, jgen);\n+            return;\n+        } else if (cls == Class.class) {\n+            str = ((Class<?>) value).getName();\n         } else {\n-            jgen.writeFieldName(value.toString());\n+            str = value.toString();\n         }\n+        jgen.writeFieldName(str);\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n             if (rawKeyType == Object.class || rawKeyType.isPrimitive()\n                     || Number.class.isAssignableFrom(rawKeyType)) {\n                 return DEFAULT_KEY_SERIALIZER;\n+            }\n+            if (rawKeyType == Class.class) {\n+                return (JsonSerializer<Object>) ClassKeySerializer.instance;\n             }\n             if (Date.class.isAssignableFrom(rawKeyType)) {\n                 return (JsonSerializer<Object>) DateKeySerializer.instance;\n             provider.defaultSerializeDateKey(value.getTimeInMillis(), jgen);\n         }\n     }\n+\n+    public static class ClassKeySerializer extends StdSerializer<Class<?>> {\n+        protected final static JsonSerializer<?> instance = new ClassKeySerializer();\n+\n+        public ClassKeySerializer() { super(Class.class, false); }\n+        \n+        @Override\n+        public void serialize(Class<?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+            jgen.writeFieldName(value.getName());\n+        }\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java\n             .add(\"c\", \"bar\"));\n         assertEquals(aposToQuotes(\"{'stuff':{'a':'foo','c':'bar'}}\"), json);\n     }\n+\n+    public void testClassKey() throws IOException\n+    {\n+        Map<Class<?>,Integer> map = new LinkedHashMap<Class<?>,Integer>();\n+        map.put(String.class, 2);\n+        String json = MAPPER.writeValueAsString(map);\n+        assertEquals(aposToQuotes(\"{'java.lang.String':2}\"), json);\n+    }\n }", "timestamp": 1421734454, "metainfo": ""}