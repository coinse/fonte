{"sha": "839bbd659117a352919b462a6ca807920d62c696", "log": "Added polymorphic test for #622; somewhat surprisingly it passes right away...", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/JSOGDeserialize622Test.java\n+package com.fasterxml.jackson.databind.struct;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Unit test(s) for [databind#622], supporting non-scalar-Object-ids,\n+ * to support things like JSOG.\n+ */\n+public class JSOGDeserialize622Test extends BaseMapTest\n+{\n+    /** the key of the property that holds the ref */\n+    public static final String REF_KEY = \"@ref\";\n+\n+    /**\n+     * JSON input\n+     */\n+    private static final String EXP_EXAMPLE_JSOG =  aposToQuotes(\n+            \"{'@id':'1','foo':66,'next':{'\"+REF_KEY+\"':'1'}}\");\n+\n+    /**\n+     * Customer IdGenerator\n+     */\n+    static class JSOGGenerator extends ObjectIdGenerator<JSOGRef>  {\n+\n+    private static final long serialVersionUID = 1L;\n+    protected transient int _nextValue;\n+    protected final Class<?> _scope;\n+\n+    protected JSOGGenerator() { this(null, -1); }\n+\n+    protected JSOGGenerator(Class<?> scope, int nextValue) {\n+        _scope = scope;\n+        _nextValue = nextValue;\n+    }\n+\n+    @Override\n+    public Class<?> getScope() {\n+        return _scope;\n+    }\n+\n+    @Override\n+    public boolean canUseFor(ObjectIdGenerator<?> gen) {\n+        return (gen.getClass() == getClass()) && (gen.getScope() == _scope);\n+    }\n+\n+    @Override\n+    public ObjectIdGenerator<JSOGRef> forScope(Class<?> scope) {\n+          return (_scope == scope) ? this : new JSOGGenerator(scope, _nextValue);\n+    }\n+\n+    @Override\n+    public ObjectIdGenerator<JSOGRef> newForSerialization(Object context) {\n+          return new JSOGGenerator(_scope, 1);\n+    }\n+\n+    @Override\n+    public com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey key(Object key) {\n+          return new IdKey(getClass(), _scope, key);\n+    }\n+\n+    // important: otherwise won't get proper handling\n+    @Override\n+    public boolean maySerializeAsObject() { return true; }\n+\n+    // ditto: needed for handling Object-valued Object references\n+    @Override\n+    public boolean isValidReferencePropertyName(String name, Object parser) {\n+        return REF_KEY.equals(name);\n+    }\n+\n+    @Override\n+    public JSOGRef generateId(Object forPojo) {\n+          int id = _nextValue;\n+          ++_nextValue;\n+          return new JSOGRef(id);\n+    }\n+    }\n+\n+    /**\n+     * The reference deserializer\n+     */\n+    static class JSOGRefDeserializer extends JsonDeserializer<JSOGRef>\n+    {\n+      @Override\n+      public JSOGRef deserialize(JsonParser jp, DeserializationContext ctx) throws IOException {\n+          JsonNode node = jp.readValueAsTree();\n+          return node.isTextual()\n+                  ? new JSOGRef(node.asInt()) : new JSOGRef(node.get(REF_KEY).asInt());\n+      }\n+    }\n+\n+    /**\n+     * The reference object\n+     */\n+    @JsonDeserialize(using=JSOGRefDeserializer.class)\n+    static class JSOGRef\n+    {\n+        @JsonProperty(REF_KEY)\n+        public int ref;\n+\n+        public JSOGRef() { }\n+\n+        public JSOGRef(int val) {\n+            ref = val;\n+        }\n+\n+        @Override\n+        public String toString() { return \"[JSOGRef#\"+ref+\"]\"; }\n+\n+        @Override\n+        public int hashCode() {\n+            return ref;\n+        }\n+        \n+        @Override\n+        public boolean equals(Object other) {\n+            return (other instanceof JSOGRef)\n+                    && ((JSOGRef) other).ref == this.ref;\n+        }\n+    }\n+\n+    /**\n+     * Example class using JSOGGenerator\n+     */\n+    @JsonIdentityInfo(generator=JSOGGenerator.class, property=\"@id\")\n+    public static class IdentifiableExampleJSOG {\n+        public int foo;\n+        public IdentifiableExampleJSOG next;\n+\n+        protected IdentifiableExampleJSOG() { }\n+        public IdentifiableExampleJSOG(int v) {\n+            foo = v;\n+        }\n+    }\n+\n+    public static class JSOGWrapper {\n+        public int value;\n+\n+        @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)\n+        public Object jsog;\n+\n+        JSOGWrapper() { }\n+        public JSOGWrapper(int v) { value = v; }\n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* Test methods\n+    /**********************************************************************\n+     */\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+    \n+    // Basic for [#622]\n+    public void testStructJSOGRef() throws Exception\n+    {\n+        IdentifiableExampleJSOG result = MAPPER.readValue(EXP_EXAMPLE_JSOG,\n+                IdentifiableExampleJSOG.class);\n+        assertEquals(66, result.foo);\n+        assertSame(result, result.next);\n+    }\n+\n+    // polymorphic alternative for [#622]\n+    public void testPolymorphicRoundTrip() throws Exception\n+    {\n+        JSOGWrapper w = new JSOGWrapper(15);\n+        // create a nice little loop\n+        IdentifiableExampleJSOG ex = new IdentifiableExampleJSOG(123);\n+        ex.next = ex;\n+        w.jsog = ex;\n+\n+        String json = MAPPER.writeValueAsString(w);\n+\n+        JSOGWrapper out = MAPPER.readValue(json, JSOGWrapper.class);\n+        assertNotNull(out);\n+        assertEquals(15, out.value);\n+        assertTrue(out.jsog instanceof IdentifiableExampleJSOG);\n+        IdentifiableExampleJSOG jsog = (IdentifiableExampleJSOG) out.jsog;\n+        assertEquals(123, jsog.foo);\n+        assertSame(jsog, jsog.next);\n+    }\n+}", "timestamp": 1418193040, "metainfo": ""}