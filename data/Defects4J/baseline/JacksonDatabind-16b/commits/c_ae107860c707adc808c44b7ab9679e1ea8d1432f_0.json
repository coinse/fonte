{"sha": "ae107860c707adc808c44b7ab9679e1ea8d1432f", "log": "bacport test for 761", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple.java\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonSetter;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n             return new CreatorValue(a, b, c);\n         }\n     }\n-        \n-\t/*\n+\n+    // for [databind#761]\n+\n+    @JsonDeserialize(builder=ValueInterfaceBuilder.class)\n+    interface ValueInterface {\n+        int getX();\n+    }\n+\n+    @JsonDeserialize(builder=ValueInterface2Builder.class)\n+    interface ValueInterface2 {\n+        int getX();\n+    }\n+    \n+    static class ValueInterfaceImpl implements ValueInterface\n+    {\n+        final int _x;\n+\n+        protected ValueInterfaceImpl(int x) {\n+            _x = x+1;\n+        }\n+\n+        @Override\n+        public int getX() {\n+            return _x;\n+        }\n+    }\n+\n+    static class ValueInterface2Impl implements ValueInterface2\n+    {\n+        final int _x;\n+\n+        protected ValueInterface2Impl(int x) {\n+            _x = x+1;\n+        }\n+\n+        @Override\n+        public int getX() {\n+            return _x;\n+        }\n+    }\n+    \n+    static class ValueInterfaceBuilder\n+    {\n+        public int x;\n+\n+        public ValueInterfaceBuilder withX(int x0) {\n+            this.x = x0;\n+            return this;\n+        }\n+\n+        public ValueInterface build() {\n+            return new ValueInterfaceImpl(x);\n+        }\n+    }\n+\n+    static class ValueInterface2Builder\n+    {\n+        public int x;\n+\n+        public ValueInterface2Builder withX(int x0) {\n+            this.x = x0;\n+            return this;\n+        }\n+\n+        // should also be ok: more specific type\n+        public ValueInterface2Impl build() {\n+            return new ValueInterface2Impl(x);\n+        }\n+    }\n+    \n+    // for [databind#761]\n+    @JsonDeserialize(builder = ValueBuilderWrongBuildType.class)\n+    static class ValueClassWrongBuildType {\n+    }\n+\n+    static class ValueBuilderWrongBuildType\n+    {\n+        public int x;\n+\n+        public ValueBuilderWrongBuildType withX(int x0) {\n+            this.x = x0;\n+            return this;\n+        }\n+\n+        public ValueClassXY build() {\n+            return null;\n+        }\n+    }\n+\n+    /*\n     /**********************************************************\n     /* Unit tests\n     /**********************************************************\n     \n     public void testSimple() throws Exception\n     {\n-    \tString json = \"{\\\"x\\\":1,\\\"y\\\":2}\";\n-    \tObject o = mapper.readValue(json, ValueClassXY.class);\n-    \tassertNotNull(o);\n-    \tassertSame(ValueClassXY.class, o.getClass());\n-    \tValueClassXY value = (ValueClassXY) o;\n-    \t// note: ctor adds one to both values\n-    \tassertEquals(value._x, 2);\n-    \tassertEquals(value._y, 3);\n+        String json = \"{\\\"x\\\":1,\\\"y\\\":2}\";\n+        Object o = mapper.readValue(json, ValueClassXY.class);\n+        assertNotNull(o);\n+    \t    assertSame(ValueClassXY.class, o.getClass());\n+    \t    ValueClassXY value = (ValueClassXY) o;\n+    \t    // note: ctor adds one to both values\n+    \t    assertEquals(value._x, 2);\n+    \t    assertEquals(value._y, 3);\n     }\n \n     public void testMultiAccess() throws Exception\n     {\n-    \tString json = \"{\\\"c\\\":3,\\\"a\\\":2,\\\"b\\\":-9}\";\n-    \tValueClassABC value = mapper.readValue(json, ValueClassABC.class);\n-    \tassertNotNull(value);\n-    \t// note: ctor adds one to both values\n-    \tassertEquals(value.a, 2);\n-    \tassertEquals(value.b, -9);\n-    \tassertEquals(value.c, 3);\n+        String json = \"{\\\"c\\\":3,\\\"a\\\":2,\\\"b\\\":-9}\";\n+        ValueClassABC value = mapper.readValue(json, ValueClassABC.class);\n+        assertNotNull(value);\n+    \t    // note: ctor adds one to both values\n+        assertEquals(value.a, 2);\n+        assertEquals(value.b, -9);\n+        assertEquals(value.c, 3);\n     }\n \n     // test for Immutable builder, to ensure return value is used\n         assertEquals(2, value.b);\n         assertEquals(3, value.c);\n     }\n+\n+    // for [databind#761]\n+    \n+    public void testBuilderMethodReturnMoreGeneral() throws Exception\n+    {\n+        final String json = \"{\\\"x\\\":1}\";\n+        ValueInterface value = mapper.readValue(json, ValueInterface.class);\n+        assertEquals(2, value.getX());\n+    }\n+\n+    public void testBuilderMethodReturnMoreSpecific() throws Exception\n+    {\n+        final String json = \"{\\\"x\\\":1}\";\n+        ValueInterface2 value = mapper.readValue(json, ValueInterface2.class);\n+        assertEquals(2, value.getX());\n+    }\n+    \n+    public void testBuilderMethodReturnInvalidType() throws Exception\n+    {\n+        final String json = \"{\\\"x\\\":1}\";\n+        try {\n+            mapper.readValue(json, ValueClassWrongBuildType.class);\n+            fail(\"Missing expected JsonProcessingException exception\");\n+        } catch(JsonProcessingException e) {\n+            assertTrue(\n+                    \"Exception cause must be IllegalArgumentException\",\n+                    e.getCause() instanceof IllegalArgumentException);\n+        }\n+    }\n+\n }", "timestamp": 1429648283, "metainfo": ""}