{"sha": "f6c2494d91f3fb76983a35a50c6ac84822440884", "log": "Implemented #161", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n      * Convenience method for reading all entries accessible via\n      * this iterator\n      * \n-     * @return\n+     * @return List of entries read\n      * \n      * @since 2.2\n      */\n     public List<T> readAll() throws IOException {\n-    \treturn readAll(new ArrayList<T>());\n+        return readAll(new ArrayList<T>());\n     }\n \n     /**\n      * Convenience method for reading all entries accessible via\n      * this iterator\n      * \n-     * @return\n+     * @return List of entries read (same as passed-in argument)\n      * \n      * @since 2.2\n      */\n     public List<T> readAll(List<T> resultList) throws IOException\n     {\n-    \twhile (hasNextValue()) {\n-    \t\tresultList.add(nextValue());\n-    \t}\n-    \treturn resultList;\n+        while (hasNextValue()) {\n+    \t\t    resultList.add(nextValue());\n+        }\n+        return resultList;\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n                 beanDesc = config.introspectForCreation(type);\n             }\n             ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc);\n+            if (!inst.canCreateUsingDefault()) {\n+                // [Issue#161]: No default constructor for ArrayBlockingQueue...\n+                if (type.getRawClass() == ArrayBlockingQueue.class) {\n+                    return new ArrayBlockingQueueDeserializer(type, contentDeser, contentTypeDeser, inst, null);\n+                }\n+            }\n             // 13-Dec-2010, tatu: Can use more optimal deserializer if content type is String, so:\n             if (contentType.getRawClass() == String.class) {\n                 // no value type deserializer because Strings are one of natural/native types:\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n package com.fasterxml.jackson.databind.deser;\n \n import java.io.IOException;\n-import java.util.Collections;\n-import java.util.List;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.DeserializationConfig;\n-import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n+\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n-\n \n /**\n  * Class that defines simple API implemented by objects that create value\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ArrayBlockingQueueDeserializer.java\n+package com.fasterxml.jackson.databind.deser.std;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.concurrent.ArrayBlockingQueue;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+\n+/**\n+ * We need a custom deserializer both because {@link ArrayBlockingQueue} has no\n+ * default constructor AND because it has size limit used for constructing\n+ * underlying storage automatically.\n+ */\n+public class ArrayBlockingQueueDeserializer\n+    extends CollectionDeserializer\n+{\n+    private static final long serialVersionUID = 5471961369237518580L;\n+\n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Constructor used when creating contextualized instances.\n+     */\n+    public ArrayBlockingQueueDeserializer(JavaType collectionType,\n+            JsonDeserializer<Object> valueDeser, TypeDeserializer valueTypeDeser,\n+            ValueInstantiator valueInstantiator,\n+            JsonDeserializer<Object> delegateDeser)\n+    {\n+        super(collectionType, valueDeser, valueTypeDeser, valueInstantiator, delegateDeser);\n+    }\n+\n+    /**\n+     * Copy-constructor that can be used by sub-classes to allow\n+     * copy-on-write styling copying of settings of an existing instance.\n+     */\n+    protected ArrayBlockingQueueDeserializer(ArrayBlockingQueueDeserializer src) {\n+        super(src);\n+    }\n+\n+    /**\n+     * Fluent-factory method call to construct contextual instance.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    protected ArrayBlockingQueueDeserializer withResolved(JsonDeserializer<?> dd,\n+            JsonDeserializer<?> vd, TypeDeserializer vtd)\n+    {\n+        if ((dd == _delegateDeserializer) && (vd == _valueDeserializer) && (vtd == _valueTypeDeserializer)) {\n+            return this;\n+        }\n+        return new ArrayBlockingQueueDeserializer(_collectionType,\n+                (JsonDeserializer<Object>) vd, vtd,\n+                _valueInstantiator, (JsonDeserializer<Object>) dd);\n+                \n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* JsonDeserializer API\n+    /**********************************************************\n+     */\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt)\n+        throws IOException, JsonProcessingException\n+    {\n+        if (_delegateDeserializer != null) {\n+            return (Collection<Object>) _valueInstantiator.createUsingDelegate(ctxt,\n+                    _delegateDeserializer.deserialize(jp, ctxt));\n+        }\n+        if (jp.getCurrentToken() == JsonToken.VALUE_STRING) {\n+            String str = jp.getText();\n+            if (str.length() == 0) {\n+                return (Collection<Object>) _valueInstantiator.createFromString(ctxt, str);\n+            }\n+        }\n+        return deserialize(jp, ctxt, null);\n+    }\n+\n+    @Override\n+    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n+            Collection<Object> result0)\n+        throws IOException, JsonProcessingException\n+    {\n+        // Ok: must point to START_ARRAY (or equivalent)\n+        if (!jp.isExpectedStartArrayToken()) {\n+            return handleNonArray(jp, ctxt, new ArrayBlockingQueue<Object>(1));\n+        }\n+        ArrayList<Object> tmp = new ArrayList<Object>();\n+        \n+        JsonDeserializer<Object> valueDes = _valueDeserializer;\n+        JsonToken t;\n+        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n+\n+        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n+            Object value;\n+            \n+            if (t == JsonToken.VALUE_NULL) {\n+                value = null;\n+            } else if (typeDeser == null) {\n+                value = valueDes.deserialize(jp, ctxt);\n+            } else {\n+                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n+            }\n+            tmp.add(value);\n+        }\n+        if (result0 != null) {\n+            result0.addAll(tmp);\n+            return result0;\n+        }\n+        return new ArrayBlockingQueue<Object>(tmp.size(), false, tmp);\n+    }\n+\n+    @Override\n+    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n+            TypeDeserializer typeDeserializer)\n+        throws IOException, JsonProcessingException\n+    {\n+        // In future could check current token... for now this should be enough:\n+        return typeDeserializer.deserializeTypedFromArray(jp, ctxt);\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n      * throw an exception, or try to handle value as if member of implicit\n      * array, depending on configuration.\n      */\n-    private final Collection<Object> handleNonArray(JsonParser jp, DeserializationContext ctxt,\n+    protected final Collection<Object> handleNonArray(JsonParser jp, DeserializationContext ctxt,\n             Collection<Object> result)\n         throws IOException, JsonProcessingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n \n+/**\n+ * Container class that contains serializers for JDK types that\n+ * require special handling for some reason.\n+ */\n @SuppressWarnings(\"serial\")\n public class JdkDeserializers\n {\n             new LocaleDeserializer(),\n             new InetAddressDeserializer(),\n             new CharsetDeserializer(),\n-\n+            \n             // other types:\n \n             // (note: AtomicInteger/Long work due to single-arg constructor;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n package com.fasterxml.jackson.databind.deser.std;\n \n import java.io.IOException;\n-import java.util.List;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.DeserializationConfig;\n-import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.DeserializationFeature;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.deser.CreatorProperty;\n-import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n-import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n-\n \n /**\n  * Default {@link ValueInstantiator} implementation, which supports\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCollectionDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCollectionDeserialization.java\n \n import java.io.IOException;\n import java.util.*;\n+import java.util.concurrent.ArrayBlockingQueue;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.type.TypeReference;\n         List<?> result = r.withType(List.class).readValue(quote(\"\"));\n         assertNull(result);\n     }\n+\n+    // [Issue#161]\n+    public void testArrayBlockingQueue() throws Exception\n+    {\n+        // ok to skip polymorphic type to get Object\n+        ArrayBlockingQueue<?> q = MAPPER.readValue(\"[1, 2, 3]\", ArrayBlockingQueue.class);\n+        assertNotNull(q);\n+        assertEquals(3, q.size());\n+        assertEquals(Integer.valueOf(1), q.take());\n+        assertEquals(Integer.valueOf(2), q.take());\n+        assertEquals(Integer.valueOf(3), q.take());\n+    }\n }", "timestamp": 1360213431, "metainfo": ""}