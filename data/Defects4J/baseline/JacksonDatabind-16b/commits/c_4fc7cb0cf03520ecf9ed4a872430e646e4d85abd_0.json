{"sha": "4fc7cb0cf03520ecf9ed4a872430e646e4d85abd", "log": "Implemented #607, #608", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n     /**\n      * Bitflag of {@link JsonParser.Feature}s to enable/disable\n      */\n-    protected final int _parserFeatureMask;\n+    protected final int _parserFeaturesToChange;\n \n     /*\n     /**********************************************************\n         _nodeFactory = JsonNodeFactory.instance;\n         _problemHandlers = null;\n         _parserFeatures = 0;\n-        _parserFeatureMask = 0;\n-    }\n-\n+        _parserFeaturesToChange = 0;\n+    }\n+\n+    private DeserializationConfig(DeserializationConfig src,\n+            int mapperFeatures, int deserFeatures,\n+            int parserFeatures, int parserFeatureMask)\n+    {\n+        super(src, mapperFeatures);\n+        _deserFeatures = deserFeatures;\n+        _nodeFactory = src._nodeFactory;\n+        _problemHandlers = src._problemHandlers;\n+        _parserFeatures = parserFeatures;\n+        _parserFeaturesToChange = parserFeatureMask;\n+    }\n+    \n     /**\n      * Copy constructor used to create a non-shared instance with given mix-in\n      * annotation definitions and subtype resolver.\n         _nodeFactory = src._nodeFactory;\n         _problemHandlers = src._problemHandlers;\n         _parserFeatures = src._parserFeatures;\n-        _parserFeatureMask = src._parserFeatureMask;\n-    }\n-\n-    private DeserializationConfig(DeserializationConfig src,\n-            int mapperFeatures, int deserFeatures,\n-            int parserFeatures, int parserFeatureMask)\n-    {\n-        super(src, mapperFeatures);\n-        _deserFeatures = deserFeatures;\n-        _nodeFactory = src._nodeFactory;\n-        _problemHandlers = src._problemHandlers;\n-        _parserFeatures = parserFeatures;\n-        _parserFeatureMask = parserFeatureMask;\n+        _parserFeaturesToChange = src._parserFeaturesToChange;\n     }\n     \n     private DeserializationConfig(DeserializationConfig src, BaseSettings base)\n         _nodeFactory = src._nodeFactory;\n         _problemHandlers = src._problemHandlers;\n         _parserFeatures = src._parserFeatures;\n-        _parserFeatureMask = src._parserFeatureMask;\n+        _parserFeaturesToChange = src._parserFeaturesToChange;\n     }\n     \n     private DeserializationConfig(DeserializationConfig src, JsonNodeFactory f)\n         _problemHandlers = src._problemHandlers;\n         _nodeFactory = f;\n         _parserFeatures = src._parserFeatures;\n-        _parserFeatureMask = src._parserFeatureMask;\n+        _parserFeaturesToChange = src._parserFeaturesToChange;\n     }\n \n     private DeserializationConfig(DeserializationConfig src,\n         _problemHandlers = problemHandlers;\n         _nodeFactory = src._nodeFactory;\n         _parserFeatures = src._parserFeatures;\n-        _parserFeatureMask = src._parserFeatureMask;\n+        _parserFeaturesToChange = src._parserFeaturesToChange;\n     }\n \n     private DeserializationConfig(DeserializationConfig src, String rootName)\n         _problemHandlers = src._problemHandlers;\n         _nodeFactory = src._nodeFactory;\n         _parserFeatures = src._parserFeatures;\n-        _parserFeatureMask = src._parserFeatureMask;\n+        _parserFeaturesToChange = src._parserFeaturesToChange;\n     }\n \n     private DeserializationConfig(DeserializationConfig src, Class<?> view)\n         _problemHandlers = src._problemHandlers;\n         _nodeFactory = src._nodeFactory;\n         _parserFeatures = src._parserFeatures;\n-        _parserFeatureMask = src._parserFeatureMask;\n+        _parserFeaturesToChange = src._parserFeaturesToChange;\n     }\n \n     /**\n         _problemHandlers = src._problemHandlers;\n         _nodeFactory = src._nodeFactory;\n         _parserFeatures = src._parserFeatures;\n-        _parserFeatureMask = src._parserFeatureMask;\n+        _parserFeaturesToChange = src._parserFeaturesToChange;\n     }\n \n     /**\n         _problemHandlers = src._problemHandlers;\n         _nodeFactory = src._nodeFactory;\n         _parserFeatures = src._parserFeatures;\n-        _parserFeatureMask = src._parserFeatureMask;\n+        _parserFeaturesToChange = src._parserFeaturesToChange;\n     }\n     \n     // for unit tests only:\n         }\n         return (newMapperFlags == _mapperFeatures) ? this :\n             new DeserializationConfig(this, newMapperFlags, _deserFeatures,\n-                    _parserFeatures, _parserFeatureMask);\n+                    _parserFeatures, _parserFeaturesToChange);\n                     \n     }\n \n         }\n         return (newMapperFlags == _mapperFeatures) ? this :\n             new DeserializationConfig(this, newMapperFlags, _deserFeatures,\n-                    _parserFeatures, _parserFeatureMask);\n+                    _parserFeatures, _parserFeaturesToChange);\n     }\n \n     @Override\n         }\n         return (newMapperFlags == _mapperFeatures) ? this :\n             new DeserializationConfig(this, newMapperFlags, _deserFeatures,\n-                    _parserFeatures, _parserFeatureMask);\n+                    _parserFeatures, _parserFeaturesToChange);\n     }\n \n     @Override\n         int newDeserFeatures = (_deserFeatures | feature.getMask());\n         return (newDeserFeatures == _deserFeatures) ? this :\n             new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n-                    _parserFeatures, _parserFeatureMask);\n+                    _parserFeatures, _parserFeaturesToChange);\n     }\n \n     /**\n         }\n         return (newDeserFeatures == _deserFeatures) ? this :\n             new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n-                    _parserFeatures, _parserFeatureMask);\n+                    _parserFeatures, _parserFeaturesToChange);\n     }\n \n     /**\n         }\n         return (newDeserFeatures == _deserFeatures) ? this :\n             new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n-                    _parserFeatures, _parserFeatureMask);\n+                    _parserFeatures, _parserFeaturesToChange);\n     }\n     \n     /**\n         int newDeserFeatures = _deserFeatures & ~feature.getMask();\n         return (newDeserFeatures == _deserFeatures) ? this :\n             new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n-                    _parserFeatures, _parserFeatureMask);\n+                    _parserFeatures, _parserFeaturesToChange);\n     }\n \n     /**\n         }\n         return (newDeserFeatures == _deserFeatures) ? this :\n             new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n-                    _parserFeatures, _parserFeatureMask);\n+                    _parserFeatures, _parserFeaturesToChange);\n     }\n \n     /**\n         }\n         return (newDeserFeatures == _deserFeatures) ? this :\n             new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n-                    _parserFeatures, _parserFeatureMask);\n+                    _parserFeatures, _parserFeaturesToChange);\n     }\n \n     /*\n     /**\n      * Fluent factory method that will construct and return a new configuration\n      * object instance with specified features enabled.\n+     *\n+     * @since 2.5\n      */\n     public DeserializationConfig with(JsonParser.Feature feature)\n     {\n         int newSet = _parserFeatures | feature.getMask();\n-        int newMask = _parserFeatureMask | feature.getMask();\n-        return ((_parserFeatures == newSet) && (_parserFeatureMask == newMask)) ? this :\n+        int newMask = _parserFeaturesToChange | feature.getMask();\n+        return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :\n             new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                     newSet, newMask);\n     }\n     /**\n      * Fluent factory method that will construct and return a new configuration\n      * object instance with specified features enabled.\n+     *\n+     * @since 2.5\n      */\n     public DeserializationConfig withFeatures(JsonParser.Feature... features)\n     {\n         int newSet = _parserFeatures;\n-        int newMask = _parserFeatureMask;\n+        int newMask = _parserFeaturesToChange;\n         for (JsonParser.Feature f : features) {\n             int mask = f.getMask();\n             newSet |= mask;\n             newMask |= mask;\n         }\n-        return ((_parserFeatures == newSet) && (_parserFeatureMask == newMask)) ? this :\n+        return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :\n             new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                     newSet, newMask);\n     }\n     /**\n      * Fluent factory method that will construct and return a new configuration\n      * object instance with specified feature disabled.\n+     *\n+     * @since 2.5\n      */\n     public DeserializationConfig without(JsonParser.Feature feature)\n     {\n-        int newSet = _parserFeatureMask & ~feature.getMask();\n+        int newSet = _parserFeaturesToChange & ~feature.getMask();\n         int newMask = _parserFeatures | feature.getMask();\n-        return ((_parserFeatures == newSet) && (_parserFeatureMask == newMask)) ? this :\n+        return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :\n             new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                     newSet, newMask);\n     }\n     /**\n      * Fluent factory method that will construct and return a new configuration\n      * object instance with specified features disabled.\n+     *\n+     * @since 2.5\n      */\n     public DeserializationConfig withoutFeatures(JsonParser.Feature... features)\n     {\n         int newSet = _parserFeatures;\n-        int newMask = _parserFeatureMask;\n+        int newMask = _parserFeaturesToChange;\n         for (JsonParser.Feature f : features) {\n             int mask = f.getMask();\n             newSet &= ~mask;\n             newMask |= mask;\n         }\n-        return ((_parserFeatures == newSet) && (_parserFeatureMask == newMask)) ? this :\n+        return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :\n             new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                     newSet, newMask);\n     }    \n      */\n \n     /**\n-     * Method called by {@link ObjectMapper} and {@link ObjectWriter}\n-     * to modify those {@link com.fasterxml.jackson.core.JsonGenerator.Feature} settings\n+     * Method called by {@link ObjectMapper} and {@link ObjectReader}\n+     * to modify those {@link com.fasterxml.jackson.core.JsonParser.Feature} settings\n      * that have been configured via this config instance.\n      * \n      * @since 2.5\n      */\n     public void initialize(JsonParser p) {\n-        if (_parserFeatureMask != 0) {\n+        if (_parserFeaturesToChange != 0) {\n             int orig = p.getFeatureMask();\n-            int newFlags = (orig & ~_parserFeatureMask) | _parserFeatures;\n+            int newFlags = (orig & ~_parserFeaturesToChange) | _parserFeatures;\n             if (orig != newFlags) {\n                 p.setFeatureMask(newFlags);\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n     ;\n \n     private final boolean _defaultState;\n+    private final int _mask;\n     \n     private DeserializationFeature(boolean defaultState) {\n         _defaultState = defaultState;\n+        _mask = (1 << ordinal());\n     }\n \n     @Override\n     public boolean enabledByDefault() { return _defaultState; }\n \n     @Override\n-    public int getMask() { return (1 << ordinal()); }\n+    public int getMask() { return _mask; }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    public boolean enabledIn(int flags) { return (flags & _mask) != 0; }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java\n     ;\n \n     private final boolean _defaultState;\n+    private final int _mask;\n     \n     private MapperFeature(boolean defaultState) {\n         _defaultState = defaultState;\n+        _mask = (1 << ordinal());\n     }\n     \n     @Override\n     public boolean enabledByDefault() { return _defaultState; }\n \n     @Override\n-    public int getMask() { return (1 << ordinal()); }\n+    public int getMask() { return _mask; }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    public boolean enabledIn(int flags) { return (flags & _mask) != 0; }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      * Method called to configure the generator as necessary and then\n      * call write functionality\n      */\n+    @SuppressWarnings(\"deprecation\")\n     protected final void _configAndWriteValue(JsonGenerator jgen, Object value)\n-        throws IOException, JsonGenerationException, JsonMappingException\n+        throws IOException\n     {\n         SerializationConfig cfg = getSerializationConfig();\n-        // [JACKSON-96]: allow enabling pretty printing for ObjectMapper directly\n-        if (cfg.isEnabled(SerializationFeature.INDENT_OUTPUT)) {\n-            jgen.useDefaultPrettyPrinter();\n-        }\n-        // [Issue#232]\n-        if (cfg.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-            jgen.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\n-        }\n-        // [JACKSON-282]: consider Closeable\n+        cfg.initialize(jgen); // since 2.5\n         if (cfg.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) && (value instanceof Closeable)) {\n             _configAndWriteCloseable(jgen, value, cfg);\n             return;\n         }\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     protected final void _configAndWriteValue(JsonGenerator jgen, Object value, Class<?> viewClass)\n-        throws IOException, JsonGenerationException, JsonMappingException\n+        throws IOException\n     {\n         SerializationConfig cfg = getSerializationConfig().withView(viewClass);\n-        if (cfg.isEnabled(SerializationFeature.INDENT_OUTPUT)) {\n-            jgen.useDefaultPrettyPrinter();\n-        }\n-        // [Issue#232]\n-        if (cfg.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-            jgen.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\n-        }\n+        cfg.initialize(jgen); // since 2.5\n \n         // [JACKSON-282]: consider Closeable\n         if (cfg.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) && (value instanceof Closeable)) {\n      * Can be overridden if a custom context is needed.\n      */\n     protected DefaultDeserializationContext createDeserializationContext(JsonParser jp,\n-            DeserializationConfig cfg)\n-    {\n-        return _deserializationContext.createInstance(cfg,\n-                jp, _injectableValues);\n+            DeserializationConfig cfg) {\n+        return _deserializationContext.createInstance(cfg, jp, _injectableValues);\n     }\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n     implements Versioned,\n         java.io.Serializable // since 2.1\n {\n-    private static final long serialVersionUID = -7040667122552707164L;\n+    private static final long serialVersionUID = 1; // since 2.5\n \n     /**\n      * We need to keep track of explicit disabling of pretty printing;\n \n     /*\n     /**********************************************************\n-    /* Derived settings\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * @since 2.3\n-     */\n-    protected final boolean  _cfgBigDecimalAsPlain;\n-\n-    /*\n-    /**********************************************************\n     /* Life-cycle, constructors\n     /**********************************************************\n      */\n             JavaType rootType, PrettyPrinter pp)\n     {\n         _config = config;\n-        _cfgBigDecimalAsPlain = _config.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);\n-\n         _serializerProvider = mapper._serializerProvider;\n         _serializerFactory = mapper._serializerFactory;\n         _generatorFactory = mapper._jsonFactory;\n     protected ObjectWriter(ObjectMapper mapper, SerializationConfig config)\n     {\n         _config = config;\n-        _cfgBigDecimalAsPlain = _config.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);\n-\n         _serializerProvider = mapper._serializerProvider;\n         _serializerFactory = mapper._serializerFactory;\n         _generatorFactory = mapper._jsonFactory;\n             FormatSchema s)\n     {\n         _config = config;\n-        _cfgBigDecimalAsPlain = _config.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);\n \n         _serializerProvider = mapper._serializerProvider;\n         _serializerFactory = mapper._serializerFactory;\n             PrettyPrinter pp, FormatSchema s, CharacterEscapes escapes)\n     {\n         _config = config;\n-        _cfgBigDecimalAsPlain = _config.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);\n \n         _serializerProvider = base._serializerProvider;\n         _serializerFactory = base._serializerFactory;\n     protected ObjectWriter(ObjectWriter base, SerializationConfig config)\n     {\n         _config = config;\n-        _cfgBigDecimalAsPlain = _config.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);\n \n         _serializerProvider = base._serializerProvider;\n         _serializerFactory = base._serializerFactory;\n         // may need to override ordering, based on data format capabilities\n         _config = base._config\n             .with(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, f.requiresPropertyOrdering());\n-        _cfgBigDecimalAsPlain = base._cfgBigDecimalAsPlain;\n \n         _serializerProvider = base._serializerProvider;\n         _serializerFactory = base._serializerFactory;\n     \n     /*\n     /**********************************************************\n-    /* Life-cycle, fluent factories\n+    /* Life-cycle, fluent factories for SerializationFeature\n     /**********************************************************\n      */\n \n     public ObjectWriter withoutFeatures(SerializationFeature... features) {\n         SerializationConfig newConfig = _config.withoutFeatures(features);\n         return (newConfig == _config) ? this : new ObjectWriter(this, newConfig);\n-    }    \n-    \n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Life-cycle, fluent factories for JsonGenerator.Feature\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * @since 2.5\n+     */\n+    public ObjectWriter with(JsonGenerator.Feature feature)  {\n+        SerializationConfig newConfig = _config.with(feature);\n+        return (newConfig == _config) ? this : new ObjectWriter(this, newConfig);\n+    }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    public ObjectWriter withFeatures(JsonGenerator.Feature... features) {\n+        SerializationConfig newConfig = _config.withFeatures(features);\n+        return (newConfig == _config) ? this : new ObjectWriter(this, newConfig);\n+    }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    public ObjectWriter without(JsonGenerator.Feature feature) {\n+        SerializationConfig newConfig = _config.without(feature);\n+        return (newConfig == _config) ? this : new ObjectWriter(this, newConfig);\n+    }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    public ObjectWriter withoutFeatures(JsonGenerator.Feature... features) {\n+        SerializationConfig newConfig = _config.withoutFeatures(features);\n+        return (newConfig == _config) ? this : new ObjectWriter(this, newConfig);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Life-cycle, fluent factories, other\n+    /**********************************************************\n+     */\n+\n     /**\n      * Fluent factory method that will construct a new writer instance that will\n      * use specified date format for serializing dates; or if null passed, one\n      * method is to be called right after serialization has been called\n      */\n     private final void _writeCloseable(JsonGenerator jgen, Object value, SerializationConfig cfg)\n-        throws IOException, JsonGenerationException, JsonMappingException\n+        throws IOException\n     {\n         Closeable toClose = (Closeable) value;\n         try {\n      * method is to be called right after serialization has been called\n      */\n     private final void _writeCloseableValue(JsonGenerator jgen, Object value, SerializationConfig cfg)\n-        throws IOException, JsonGenerationException, JsonMappingException\n+        throws IOException\n     {\n         Closeable toClose = (Closeable) value;\n         try {\n      * \n      * @since 2.1\n      */\n-    private void _configureJsonGenerator(JsonGenerator jgen)\n+    protected void _configureJsonGenerator(JsonGenerator gen)\n     {\n         if (_prettyPrinter != null) {\n             PrettyPrinter pp = _prettyPrinter;\n             if (pp == NULL_PRETTY_PRINTER) {\n-                jgen.setPrettyPrinter(null);\n+                gen.setPrettyPrinter(null);\n             } else {\n                 /* [JACKSON-851]: Better take care of stateful PrettyPrinters...\n                  *   like the DefaultPrettyPrinter.\n                 if (pp instanceof Instantiatable<?>) {\n                     pp = (PrettyPrinter) ((Instantiatable<?>) pp).createInstance();\n                 }\n-                jgen.setPrettyPrinter(pp);\n+                gen.setPrettyPrinter(pp);\n             }\n         } else if (_config.isEnabled(SerializationFeature.INDENT_OUTPUT)) {\n-            jgen.useDefaultPrettyPrinter();\n+            gen.useDefaultPrettyPrinter();\n         }\n         if (_characterEscapes != null) {\n-            jgen.setCharacterEscapes(_characterEscapes);\n+            gen.setCharacterEscapes(_characterEscapes);\n         }\n         // [JACKSON-520]: add support for pass-through schema:\n         if (_schema != null) {\n-            jgen.setSchema(_schema);\n-        }\n-        if (_cfgBigDecimalAsPlain) { // should only set if explicitly set; this should work for now:\n-            jgen.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\n-        }\n+            gen.setSchema(_schema);\n+        }\n+        _config.initialize(gen); // since 2.5\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n \n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n-import com.fasterxml.jackson.core.Base64Variant;\n+import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.cfg.BaseSettings;\n import com.fasterxml.jackson.databind.cfg.ContextAttributes;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n     extends MapperConfigBase<SerializationFeature, SerializationConfig>\n     implements java.io.Serializable // since 2.1\n {\n-    // Valid as of 2.4\n-    private static final long serialVersionUID = -1278867172535832879L;\n-\n-    /**\n-     * Set of features enabled; actual type (kind of features)\n-     * depends on sub-classes.\n+    // since 2.5\n+    private static final long serialVersionUID = 1;\n+\n+    /**\n+     * Set of {@link SerializationFeature}s enabled.\n      */\n     protected final int _serFeatures;\n     \n      * Non-null if explicitly defined; null by default.\n      */\n     protected final FilterProvider _filterProvider;\n+\n+    /**\n+     * States of {@link JsonGenerator.Feature}s to enable/disable.\n+     */\n+    protected final int _generatorFeatures;\n+\n+    /**\n+     * Bitflag of {@link JsonGenerator.Feature}s to enable/disable\n+     */\n+    protected final int _generatorFeaturesToChange;\n     \n     /*\n     /**********************************************************\n         super(base, str, mixins);\n         _serFeatures = collectFeatureDefaults(SerializationFeature.class);\n         _filterProvider = null;\n+        _generatorFeatures = 0;\n+        _generatorFeaturesToChange = 0;\n     }\n     \n     private SerializationConfig(SerializationConfig src, SubtypeResolver str)\n         _serFeatures = src._serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n         _filterProvider = src._filterProvider;\n-    }\n-\n-    private SerializationConfig(SerializationConfig src, int mapperFeatures, int serFeatures)\n+        _generatorFeatures = src._generatorFeatures;\n+        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n+    }\n+\n+    private SerializationConfig(SerializationConfig src,\n+            int mapperFeatures, int serFeatures,\n+            int generatorFeatures, int generatorFeatureMask)\n     {\n         super(src, mapperFeatures);\n         _serFeatures = serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n         _filterProvider = src._filterProvider;\n+        _generatorFeatures = generatorFeatures;\n+        _generatorFeaturesToChange = generatorFeatureMask;\n     }\n     \n     private SerializationConfig(SerializationConfig src, BaseSettings base)\n         _serFeatures = src._serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n         _filterProvider = src._filterProvider;\n+        _generatorFeatures = src._generatorFeatures;\n+        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n     }\n \n     private SerializationConfig(SerializationConfig src, FilterProvider filters)\n         _serFeatures = src._serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n         _filterProvider = filters;\n+        _generatorFeatures = src._generatorFeatures;\n+        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n     }\n \n     private SerializationConfig(SerializationConfig src, Class<?> view)\n         _serFeatures = src._serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n         _filterProvider = src._filterProvider;\n+        _generatorFeatures = src._generatorFeatures;\n+        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n     }\n \n     private SerializationConfig(SerializationConfig src, JsonInclude.Include incl)\n         _serFeatures = src._serFeatures;\n         _serializationInclusion = incl;\n         _filterProvider = src._filterProvider;\n+        _generatorFeatures = src._generatorFeatures;\n+        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n     }\n \n     private SerializationConfig(SerializationConfig src, String rootName)\n         _serFeatures = src._serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n         _filterProvider = src._filterProvider;\n+        _generatorFeatures = src._generatorFeatures;\n+        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n     }\n \n     /**\n         _serFeatures = src._serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n         _filterProvider = src._filterProvider;\n+        _generatorFeatures = src._generatorFeatures;\n+        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n     }\n \n     /**\n         _serFeatures = src._serFeatures;\n         _serializationInclusion = src._serializationInclusion;\n         _filterProvider = src._filterProvider;\n+        _generatorFeatures = src._generatorFeatures;\n+        _generatorFeaturesToChange = src._generatorFeaturesToChange;\n     }\n     \n     /*\n             newMapperFlags |= f.getMask();\n         }\n         return (newMapperFlags == _mapperFeatures) ? this\n-                : new SerializationConfig(this, newMapperFlags, _serFeatures);\n+                : new SerializationConfig(this, newMapperFlags, _serFeatures,\n+                        _generatorFeatures, _generatorFeaturesToChange);\n     }\n     \n     /**\n              newMapperFlags &= ~f.getMask();\n         }\n         return (newMapperFlags == _mapperFeatures) ? this\n-                : new SerializationConfig(this, newMapperFlags, _serFeatures);\n+                : new SerializationConfig(this, newMapperFlags, _serFeatures,\n+                        _generatorFeatures, _generatorFeaturesToChange);\n     }\n \n     @Override\n         } else {\n             newMapperFlags = _mapperFeatures & ~feature.getMask();\n         }\n-        return (newMapperFlags == _mapperFeatures) ? this :\n-            new SerializationConfig(this, newMapperFlags, _serFeatures);\n+        return (newMapperFlags == _mapperFeatures) ? this\n+            : new SerializationConfig(this, newMapperFlags, _serFeatures,\n+                    _generatorFeatures, _generatorFeaturesToChange);\n     }\n     \n     @Override\n     public SerializationConfig with(ClassIntrospector ci) {\n         return _withBase(_base.withClassIntrospector(ci));\n     }\n-    \n+\n     /**\n      * In addition to constructing instance with specified date format,\n      * will enable or disable <code>SerializationFeature.WRITE_DATES_AS_TIMESTAMPS</code>\n         }\n         return cfg;\n     }\n-    \n+\n     @Override\n     public SerializationConfig with(HandlerInstantiator hi) {\n         return _withBase(_base.withHandlerInstantiator(hi));\n     }\n-    \n+\n     @Override\n     public SerializationConfig with(PropertyNamingStrategy pns) {\n         return _withBase(_base.withPropertyNamingStrategy(pns));\n     public SerializationConfig with(TypeResolverBuilder<?> trb) {\n         return _withBase(_base.withTypeResolverBuilder(trb));\n     }\n-    \n+\n     @Override\n     public SerializationConfig withView(Class<?> view) {\n         return (_view == view) ? this : new SerializationConfig(this, view);\n     public SerializationConfig with(ContextAttributes attrs) {\n         return (attrs == _attributes) ? this : new SerializationConfig(this, attrs);\n     }\n-    \n+\n     private final SerializationConfig _withBase(BaseSettings newBase) {\n         return (_base == newBase) ? this : new SerializationConfig(this, newBase);\n     }\n-    \n-    /*\n-    /**********************************************************\n-    /* Life-cycle, SerializationConfig specific factory methods\n-    /**********************************************************\n-     */\n-        \n+\n+    /*\n+    /**********************************************************\n+    /* Factory methods for SerializationFeature\n+    /**********************************************************\n+     */\n+\n     /**\n      * Fluent factory method that will construct and return a new configuration\n      * object instance with specified feature enabled.\n     {\n         int newSerFeatures = _serFeatures | feature.getMask();\n         return (newSerFeatures == _serFeatures) ? this\n-                : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n+                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n+                        _generatorFeatures, _generatorFeaturesToChange);\n     }\n \n     /**\n             newSerFeatures |= f.getMask();\n         }\n         return (newSerFeatures == _serFeatures) ? this\n-                : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n-    }\n-    \n+                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n+                        _generatorFeatures, _generatorFeaturesToChange);\n+    }\n+\n     /**\n      * Fluent factory method that will construct and return a new configuration\n      * object instance with specified features enabled.\n             newSerFeatures |= f.getMask();\n         }\n         return (newSerFeatures == _serFeatures) ? this\n-                : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n+                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n+                        _generatorFeatures, _generatorFeaturesToChange);\n     }\n \n     /**\n     {\n         int newSerFeatures = _serFeatures & ~feature.getMask();\n         return (newSerFeatures == _serFeatures) ? this\n-                : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n+                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n+                        _generatorFeatures, _generatorFeaturesToChange);\n     }\n \n     /**\n             newSerFeatures &= ~f.getMask();\n         }\n         return (newSerFeatures == _serFeatures) ? this\n-                : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n+                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n+                        _generatorFeatures, _generatorFeaturesToChange);\n     }\n \n     /**\n             newSerFeatures &= ~f.getMask();\n         }\n         return (newSerFeatures == _serFeatures) ? this\n-                : new SerializationConfig(this, _mapperFeatures, newSerFeatures);\n-    }\n+                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,\n+                        _generatorFeatures, _generatorFeaturesToChange);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Factory methods for JsonGenerator.Feature\n+    /**********************************************************\n+     */\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified feature enabled.\n+     *\n+     * @since 2.5\n+     */\n+    public SerializationConfig with(JsonGenerator.Feature feature)\n+    {\n+        int newSet = _generatorFeatures | feature.getMask();\n+        int newMask = _generatorFeatures | feature.getMask();\n+        return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :\n+            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n+                    newSet, newMask);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features enabled.\n+     *\n+     * @since 2.5\n+     */\n+    public SerializationConfig withFeatures(JsonGenerator.Feature... features)\n+    {\n+        int newSet = _generatorFeatures;\n+        int newMask = _generatorFeaturesToChange;\n+        for (JsonGenerator.Feature f : features) {\n+            int mask = f.getMask();\n+            newSet |= mask;\n+            newMask |= mask;\n+        }\n+        return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :\n+            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n+                    newSet, newMask);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified feature disabled.\n+     *\n+     * @since 2.5\n+     */\n+    public SerializationConfig without(JsonGenerator.Feature feature)\n+    {\n+        int newSet = _generatorFeatures & ~feature.getMask();\n+        int newMask = _generatorFeatures | feature.getMask();\n+        return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :\n+            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n+                    newSet, newMask);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features disabled.\n+     *\n+     * @since 2.5\n+     */\n+    public SerializationConfig withoutFeatures(JsonGenerator.Feature... features)\n+    {\n+        int newSet = _generatorFeatures;\n+        int newMask = _generatorFeaturesToChange;\n+        for (JsonGenerator.Feature f : features) {\n+            int mask = f.getMask();\n+            newSet &= ~mask;\n+            newMask |= mask;\n+        }\n+        return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :\n+            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n+                    newSet, newMask);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Factory methods, other\n+    /**********************************************************\n+     */\n     \n     public SerializationConfig withFilters(FilterProvider filterProvider) {\n         return (filterProvider == _filterProvider) ? this : new SerializationConfig(this, filterProvider);\n     public SerializationConfig withSerializationInclusion(JsonInclude.Include incl) {\n         return (_serializationInclusion == incl) ? this:  new SerializationConfig(this, incl);\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* JsonParser initialization\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method called by {@link ObjectMapper} and {@link ObjectWriter}\n+     * to modify those {@link com.fasterxml.jackson.core.JsonGenerator.Feature} settings\n+     * that have been configured via this config instance.\n+     * \n+     * @since 2.5\n+     */\n+    public void initialize(JsonGenerator g)\n+    {\n+        if (SerializationFeature.INDENT_OUTPUT.enabledIn(_serFeatures)) {\n+            g.useDefaultPrettyPrinter();\n+        }\n+        @SuppressWarnings(\"deprecation\")\n+        boolean useBigDec = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_serFeatures);\n+        if ((_generatorFeaturesToChange != 0) || useBigDec) {\n+            int orig = g.getFeatureMask();\n+            int newFlags = (orig & ~_generatorFeaturesToChange) | _generatorFeatures;\n+            // although deprecated, needs to be supported for now\n+            if (useBigDec) {\n+                newFlags |= JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN.getMask();\n+            }\n+            if (orig != newFlags) {\n+                g.setFeatureMask(newFlags);\n+            }\n+        }\n+    }\n     \n     /*\n     /**********************************************************\n     /* MapperConfig implementation/overrides\n     /**********************************************************\n      */\n-    \n+\n     @Override\n     public boolean useRootWrapping()\n     {\n         }\n         return isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n     }\n-    \n+\n     @Override\n     public AnnotationIntrospector getAnnotationIntrospector()\n     {\n-        /* 29-Jul-2009, tatu: it's now possible to disable use of\n-         *   annotations; can be done using \"no-op\" introspector\n-         */\n         if (isEnabled(MapperFeature.USE_ANNOTATIONS)) {\n             return super.getAnnotationIntrospector();\n         }\n     public BeanDescription introspectDirectClassAnnotations(JavaType type) {\n         return getClassIntrospector().forDirectClassAnnotations(this, type, this);\n     }\n-    \n+\n     @Override\n     public VisibilityChecker<?> getDefaultVisibilityChecker()\n     {\n         }\n         return vchecker;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Configuration: other\n     public final int getSerializationFeatures() {\n         return _serFeatures;\n     }\n-    \n+\n     public JsonInclude.Include getSerializationInclusion()\n     {\n         if (_serializationInclusion != null) {\n         }\n         return JsonInclude.Include.ALWAYS;\n     }\n-    \n+\n     /**\n      * Method for getting provider used for locating filters given\n      * id (which is usually provided with filter annotations).\n     public FilterProvider getFilterProvider() {\n         return _filterProvider;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Introspection methods\n     /* Debug support\n     /**********************************************************\n      */\n-    \n-    @Override public String toString()\n-    {\n+\n+    @Override\n+    public String toString() {\n         return \"[SerializationConfig: flags=0x\"+Integer.toHexString(_serFeatures)+\"]\";\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n      * support it.\n      *<p>\n      * Feature is disabled by default.\n-     */\n+     * \n+     * @deprecated Since 2.5: use {@link com.fasterxml.jackson.core.JsonGenerator.Feature#WRITE_BIGDECIMAL_AS_PLAIN} directly\n+     *    (using {@link ObjectWriter#with(com.fasterxml.jackson.core.JsonGenerator.Feature)}).\n+     */\n+    @Deprecated // since 2.5\n     WRITE_BIGDECIMAL_AS_PLAIN(false),\n \n     /**\n     ;\n \n     private final boolean _defaultState;\n-\n+    private final int _mask;\n+    \n     private SerializationFeature(boolean defaultState) {\n         _defaultState = defaultState;\n+        _mask = (1 << ordinal());\n     }\n \n     @Override\n     public boolean enabledByDefault() { return _defaultState; }\n \n+\n     @Override\n-    public int getMask() { return (1 << ordinal()); }\n+    public int getMask() { return _mask; }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    public boolean enabledIn(int flags) { return (flags & _mask) != 0; }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestObjectWriter.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestObjectWriter.java\n         writer = writer.withType(String.class);\n         assertTrue(writer.hasPrefetchedSerializer());\n     }\n+\n+    public void testObjectWriterFeatures() throws Exception\n+    {\n+        ObjectWriter writer = MAPPER.writer()\n+                .without(JsonGenerator.Feature.QUOTE_FIELD_NAMES);                \n+        Map<String,Integer> map = new HashMap<String,Integer>();\n+        map.put(\"a\", 1);\n+        assertEquals(\"{a:1}\", writer.writeValueAsString(map));\n+        // but can also reconfigure\n+        assertEquals(\"{\\\"a\\\":1}\", writer.with(JsonGenerator.Feature.QUOTE_FIELD_NAMES)\n+                .writeValueAsString(map));\n+    }\n } ", "timestamp": 1415490464, "metainfo": ""}