{"sha": "d10146c3535c4e8301e6c755037cf6ab2a5e7b96", "log": "...", "commit": "\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedListSerializer.java\n+package com.fasterxml.jackson.databind.ser.impl;\n+\n+import java.io.IOException;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonGenerationException;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n+import com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase;\n+\n+/**\n+ * This is an optimized serializer for Lists that can be efficiently\n+ * traversed by index (as opposed to others, such as {@link LinkedList}\n+ * that can not}.\n+ */\n+@JacksonStdImpl\n+public final class IndexedListSerializer\n+    extends AsArraySerializerBase<List<?>>\n+{\n+    public IndexedListSerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts,\n+            BeanProperty property, JsonSerializer<Object> valueSerializer)\n+    {\n+        super(List.class, elemType, staticTyping, vts, property, valueSerializer);\n+    }\n+\n+    public IndexedListSerializer(IndexedListSerializer src, BeanProperty property,\n+            JsonSerializer<?> valueSerializer)\n+    {\n+        super(src, property, valueSerializer);\n+    }\n+\n+    @Override\n+    public IndexedListSerializer withResolved(BeanProperty property,\n+            JsonSerializer<?> elementSerializer) {\n+        return new IndexedListSerializer(this, property, elementSerializer);\n+    }\n+\n+    @Override\n+    public boolean isEmpty(List<?> value) {\n+        return (value == null) || value.isEmpty();\n+    }\n+    \n+    @Override\n+    public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n+        return new IndexedListSerializer(_elementType, _staticTyping, vts, _property, _elementSerializer);\n+    }\n+    \n+    @Override\n+    public void serializeContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n+        throws IOException, JsonGenerationException\n+    {\n+        if (_elementSerializer != null) {\n+            serializeContentsUsing(value, jgen, provider, _elementSerializer);\n+            return;\n+        }\n+        if (_valueTypeSerializer != null) {\n+            serializeTypedContents(value, jgen, provider);\n+            return;\n+        }\n+        final int len = value.size();\n+        if (len == 0) {\n+            return;\n+        }\n+        int i = 0;\n+        try {\n+            PropertySerializerMap serializers = _dynamicSerializers;\n+            for (; i < len; ++i) {\n+                Object elem = value.get(i);\n+                if (elem == null) {\n+                    provider.defaultSerializeNull(jgen);\n+                } else {\n+                    Class<?> cc = elem.getClass();\n+                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n+                    if (serializer == null) {\n+                        // To fix [JACKSON-508]\n+                        if (_elementType.hasGenericTypes()) {\n+                            serializer = _findAndAddDynamic(serializers,\n+                                    provider.constructSpecializedType(_elementType, cc), provider);\n+                        } else {\n+                            serializer = _findAndAddDynamic(serializers, cc, provider);\n+                        }\n+                        serializers = _dynamicSerializers;\n+                    }\n+                    serializer.serialize(elem, jgen, provider);\n+                }\n+            }\n+        } catch (Exception e) {\n+            // [JACKSON-55] Need to add reference information\n+            wrapAndThrow(provider, e, value, i);\n+        }\n+    }\n+    \n+    public void serializeContentsUsing(List<?> value, JsonGenerator jgen, SerializerProvider provider,\n+            JsonSerializer<Object> ser)\n+        throws IOException, JsonGenerationException\n+    {\n+        final int len = value.size();\n+        if (len == 0) {\n+            return;\n+        }\n+        final TypeSerializer typeSer = _valueTypeSerializer;\n+        for (int i = 0; i < len; ++i) {\n+            Object elem = value.get(i);\n+            try {\n+                if (elem == null) {\n+                    provider.defaultSerializeNull(jgen);\n+                } else if (typeSer == null) {\n+                    ser.serialize(elem, jgen, provider);\n+                } else {\n+                    ser.serializeWithType(elem, jgen, provider, typeSer);\n+                }\n+            } catch (Exception e) {\n+                // [JACKSON-55] Need to add reference information\n+                wrapAndThrow(provider, e, value, i);\n+            }\n+        }\n+    }\n+\n+    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n+        throws IOException, JsonGenerationException\n+    {\n+        final int len = value.size();\n+        if (len == 0) {\n+            return;\n+        }\n+        int i = 0;\n+        try {\n+            final TypeSerializer typeSer = _valueTypeSerializer;\n+            PropertySerializerMap serializers = _dynamicSerializers;\n+            for (; i < len; ++i) {\n+                Object elem = value.get(i);\n+                if (elem == null) {\n+                    provider.defaultSerializeNull(jgen);\n+                } else {\n+                    Class<?> cc = elem.getClass();\n+                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n+                    if (serializer == null) {\n+                        // To fix [JACKSON-508]\n+                        if (_elementType.hasGenericTypes()) {\n+                            serializer = _findAndAddDynamic(serializers,\n+                                    provider.constructSpecializedType(_elementType, cc), provider);\n+                        } else {\n+                            serializer = _findAndAddDynamic(serializers, cc, provider);\n+                        }\n+                        serializers = _dynamicSerializers;\n+                    }\n+                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n+                }\n+            }\n+        } catch (Exception e) {\n+            // [JACKSON-55] Need to add reference information\n+            wrapAndThrow(provider, e, value, i);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IteratorSerializer.java\n+package com.fasterxml.jackson.databind.ser.impl;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+\n+import com.fasterxml.jackson.core.JsonGenerationException;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n+import com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase;\n+\n+@JacksonStdImpl\n+public class IteratorSerializer\n+    extends AsArraySerializerBase<Iterator<?>>\n+{\n+    public IteratorSerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts,\n+            BeanProperty property)\n+    {\n+        super(Iterator.class, elemType, staticTyping, vts, property, null);\n+    }\n+\n+    public IteratorSerializer(IteratorSerializer src, BeanProperty property,\n+            JsonSerializer<?> valueSerializer)\n+    {\n+        super(src, property, valueSerializer);\n+    }\n+\n+    @Override\n+    public boolean isEmpty(Iterator<?> value) {\n+        return (value == null) || !value.hasNext();\n+    }\n+    \n+    @Override\n+    public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n+        return new IteratorSerializer(_elementType, _staticTyping, vts, _property);\n+    }\n+\n+    @Override\n+    public IteratorSerializer withResolved(BeanProperty property,\n+            JsonSerializer<?> elementSerializer) {\n+        return new IteratorSerializer(this, property, elementSerializer);\n+    }\n+\n+    @Override\n+    public void serializeContents(Iterator<?> value, JsonGenerator jgen, SerializerProvider provider)\n+        throws IOException, JsonGenerationException\n+    {\n+        if (value.hasNext()) {\n+            final TypeSerializer typeSer = _valueTypeSerializer;\n+            JsonSerializer<Object> prevSerializer = null;\n+            Class<?> prevClass = null;\n+            do {\n+                Object elem = value.next();\n+                if (elem == null) {\n+                    provider.defaultSerializeNull(jgen);\n+                } else {\n+                    // Minor optimization to avoid most lookups:\n+                    Class<?> cc = elem.getClass();\n+                    JsonSerializer<Object> currSerializer;\n+                    if (cc == prevClass) {\n+                        currSerializer = prevSerializer;\n+                    } else {\n+                        currSerializer = provider.findValueSerializer(cc, _property);\n+                        prevSerializer = currSerializer;\n+                        prevClass = cc;\n+                    }\n+                    if (typeSer == null) {\n+                        currSerializer.serialize(elem, jgen, provider);\n+                    } else {\n+                        currSerializer.serializeWithType(elem, jgen, provider, typeSer);\n+                    }\n+                }\n+            } while (value.hasNext());\n+        }\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n-import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n+import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n \n /**\n  */\n public abstract class AsArraySerializerBase<T>\n     extends ContainerSerializer<T>\n-    implements ResolvableSerializer\n+    implements ContextualSerializer\n {\n     protected final boolean _staticTyping;\n \n     /**\n      * Value serializer to use, if it can be statically determined\n      */\n-    protected JsonSerializer<Object> _elementSerializer;\n+    protected final JsonSerializer<Object> _elementSerializer;\n \n     /**\n      * Collection-valued property being serialized with this instance\n         _dynamicSerializers = PropertySerializerMap.emptyMap();\n     }\n \n-    /**\n-     * Need to get callback to resolve value serializer, if static typing\n-     * is used (either being forced, or because value type is final)\n-     */\n-    @Override\n-    public void resolve(SerializerProvider provider)\n+    @SuppressWarnings(\"unchecked\")\n+    protected AsArraySerializerBase(AsArraySerializerBase<?> src,\n+            BeanProperty property, JsonSerializer<?> elementSerializer)\n+    {\n+        super(src);\n+        _elementType = src._elementType;\n+        _staticTyping = src._staticTyping;\n+        _valueTypeSerializer = src._valueTypeSerializer;\n+        _property = src._property;\n+        _elementSerializer = (JsonSerializer<Object>) elementSerializer;\n+        _dynamicSerializers = src._dynamicSerializers;\n+    }\n+    \n+    public abstract AsArraySerializerBase<T> withResolved(BeanProperty property,\n+            JsonSerializer<?> elementSerializer);\n+\n+    /*\n+    /**********************************************************\n+    /* Post-processing\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public JsonSerializer<?> createContextual(SerializerProvider provider,\n+            BeanProperty property)\n         throws JsonMappingException\n     {\n-        if (_staticTyping && _elementType != null && _elementSerializer == null) {\n-            _elementSerializer = provider.findValueSerializer(_elementType, _property);\n-        }\n+        JsonSerializer<?> ser = _elementSerializer;\n+        if (ser == null) {\n+            if (_staticTyping && _elementType != null) {\n+                ser = provider.findValueSerializer(_elementType, property);\n+            }\n+        } else if (ser instanceof ContextualSerializer) {\n+            ser = ((ContextualSerializer) ser).createContextual(provider, property);\n+        }\n+        if ((ser != _elementSerializer) || (property != _property)) {\n+            return withResolved(property, ser);\n+        }\n+        return this;\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n public class CollectionSerializer\n     extends AsArraySerializerBase<Collection<?>>\n {\n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+    \n     public CollectionSerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts,\n             BeanProperty property, JsonSerializer<Object> valueSerializer)\n     {\n         super(Collection.class, elemType, staticTyping, vts, property, valueSerializer);\n+    }\n+\n+    public CollectionSerializer(CollectionSerializer src, BeanProperty property,\n+            JsonSerializer<?> valueSerializer)\n+    {\n+        super(src, property, valueSerializer);\n     }\n     \n     @Override\n     }\n \n     @Override\n+    public CollectionSerializer withResolved(BeanProperty property,\n+            JsonSerializer<?> elementSerializer) {\n+        return new CollectionSerializer(this, property, elementSerializer);\n+    }\n+    \n+    @Override\n     public boolean isEmpty(Collection<?> value) {\n         return (value == null) || value.isEmpty();\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Actual serialization\n+    /**********************************************************\n+     */\n     \n     @Override\n     public void serializeContents(Collection<?> value, JsonGenerator jgen, SerializerProvider provider)\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n-import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n \n public class EnumSetSerializer\n     extends AsArraySerializerBase<EnumSet<? extends Enum<?>>>\n         super(EnumSet.class, elemType, true, null, property, null);\n     }\n \n+    public EnumSetSerializer(EnumSetSerializer src, BeanProperty property,\n+            JsonSerializer<?> valueSerializer)\n+    {\n+        super(src, property, valueSerializer);\n+    }\n+    \n     @Override\n-    public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n+    public EnumSetSerializer _withValueTypeSerializer(TypeSerializer vts) {\n         // no typing for enums (always \"hard\" type)\n         return this;\n     }\n \n+    @Override\n+    public EnumSetSerializer withResolved(BeanProperty property,\n+            JsonSerializer<?> elementSerializer) {\n+        return new EnumSetSerializer(this, property, elementSerializer);\n+    }\n+    \n     @Override\n     public boolean isEmpty(EnumSet<? extends Enum<?>> value) {\n         return (value == null) || value.isEmpty();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n         super(Iterable.class, elemType, staticTyping, vts, property, null);\n     }\n \n+    public IterableSerializer(IterableSerializer src, BeanProperty property,\n+            JsonSerializer<?> valueSerializer)\n+    {\n+        super(src, property, valueSerializer);\n+    }\n+    \n     @Override\n     public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n         return new IterableSerializer(_elementType, _staticTyping, vts, _property);\n     }\n \n+    @Override\n+    public IterableSerializer withResolved(BeanProperty property,\n+            JsonSerializer<?> elementSerializer) {\n+        return new IterableSerializer(this, property, elementSerializer);\n+    }\n+    \n     @Override\n     public boolean isEmpty(Iterable<?> value) {\n         // Not really good way to implement this, but has to do for now:\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java\n package com.fasterxml.jackson.databind.ser.std;\n \n-import java.io.IOException;\n-import java.util.*;\n-\n-import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n-import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n+import com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer;\n+import com.fasterxml.jackson.databind.ser.impl.IteratorSerializer;\n import com.fasterxml.jackson.databind.ser.std.CollectionSerializer;\n \n /**\n public class StdContainerSerializers\n {\n     protected StdContainerSerializers() { }\n-\n-    /*\n-    /**********************************************************\n-    /* Factory methods\n-    /**********************************************************\n-     */\n-        \n+    \n     public static ContainerSerializer<?> indexedListSerializer(JavaType elemType,\n             boolean staticTyping, TypeSerializer vts, BeanProperty property,\n             JsonSerializer<Object> valueSerializer)\n     {\n         return new EnumSetSerializer(enumType, property);\n     }\n-    \n-    /*\n-    /**********************************************************\n-    /* Concrete serializers, Lists/collections\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * This is an optimized serializer for Lists that can be efficiently\n-     * traversed by index (as opposed to others, such as {@link LinkedList}\n-     * that can not}.\n-     */\n-    @JacksonStdImpl\n-    public static class IndexedListSerializer\n-        extends AsArraySerializerBase<List<?>>\n-    {\n-        public IndexedListSerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts,\n-                BeanProperty property, JsonSerializer<Object> valueSerializer)\n-        {\n-            super(List.class, elemType, staticTyping, vts, property, valueSerializer);\n-        }\n-\n-        @Override\n-        public boolean isEmpty(List<?> value) {\n-            return (value == null) || value.isEmpty();\n-        }\n-        \n-        @Override\n-        public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n-            return new IndexedListSerializer(_elementType, _staticTyping, vts, _property, _elementSerializer);\n-        }\n-        \n-        @Override\n-        public void serializeContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n-        {\n-            if (_elementSerializer != null) {\n-                serializeContentsUsing(value, jgen, provider, _elementSerializer);\n-                return;\n-            }\n-            if (_valueTypeSerializer != null) {\n-                serializeTypedContents(value, jgen, provider);\n-                return;\n-            }\n-            final int len = value.size();\n-            if (len == 0) {\n-                return;\n-            }\n-            int i = 0;\n-            try {\n-                PropertySerializerMap serializers = _dynamicSerializers;\n-                for (; i < len; ++i) {\n-                    Object elem = value.get(i);\n-                    if (elem == null) {\n-                        provider.defaultSerializeNull(jgen);\n-                    } else {\n-                        Class<?> cc = elem.getClass();\n-                        JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n-                        if (serializer == null) {\n-                            // To fix [JACKSON-508]\n-                            if (_elementType.hasGenericTypes()) {\n-                                serializer = _findAndAddDynamic(serializers,\n-                                        provider.constructSpecializedType(_elementType, cc), provider);\n-                            } else {\n-                                serializer = _findAndAddDynamic(serializers, cc, provider);\n-                            }\n-                            serializers = _dynamicSerializers;\n-                        }\n-                        serializer.serialize(elem, jgen, provider);\n-                    }\n-                }\n-            } catch (Exception e) {\n-                // [JACKSON-55] Need to add reference information\n-                wrapAndThrow(provider, e, value, i);\n-            }\n-        }\n-        \n-        public void serializeContentsUsing(List<?> value, JsonGenerator jgen, SerializerProvider provider,\n-                JsonSerializer<Object> ser)\n-            throws IOException, JsonGenerationException\n-        {\n-            final int len = value.size();\n-            if (len == 0) {\n-                return;\n-            }\n-            final TypeSerializer typeSer = _valueTypeSerializer;\n-            for (int i = 0; i < len; ++i) {\n-                Object elem = value.get(i);\n-                try {\n-                    if (elem == null) {\n-                        provider.defaultSerializeNull(jgen);\n-                    } else if (typeSer == null) {\n-                        ser.serialize(elem, jgen, provider);\n-                    } else {\n-                        ser.serializeWithType(elem, jgen, provider, typeSer);\n-                    }\n-                } catch (Exception e) {\n-                    // [JACKSON-55] Need to add reference information\n-                    wrapAndThrow(provider, e, value, i);\n-                }\n-            }\n-        }\n-\n-        public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n-        {\n-            final int len = value.size();\n-            if (len == 0) {\n-                return;\n-            }\n-            int i = 0;\n-            try {\n-                final TypeSerializer typeSer = _valueTypeSerializer;\n-                PropertySerializerMap serializers = _dynamicSerializers;\n-                for (; i < len; ++i) {\n-                    Object elem = value.get(i);\n-                    if (elem == null) {\n-                        provider.defaultSerializeNull(jgen);\n-                    } else {\n-                        Class<?> cc = elem.getClass();\n-                        JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n-                        if (serializer == null) {\n-                            // To fix [JACKSON-508]\n-                            if (_elementType.hasGenericTypes()) {\n-                                serializer = _findAndAddDynamic(serializers,\n-                                        provider.constructSpecializedType(_elementType, cc), provider);\n-                            } else {\n-                                serializer = _findAndAddDynamic(serializers, cc, provider);\n-                            }\n-                            serializers = _dynamicSerializers;\n-                        }\n-                        serializer.serializeWithType(elem, jgen, provider, typeSer);\n-                    }\n-                }\n-            } catch (Exception e) {\n-                // [JACKSON-55] Need to add reference information\n-                wrapAndThrow(provider, e, value, i);\n-            }\n-        }\n-    }\n-\n-    @JacksonStdImpl\n-    public static class IteratorSerializer\n-        extends AsArraySerializerBase<Iterator<?>>\n-    {\n-        public IteratorSerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts,\n-                BeanProperty property)\n-        {\n-            super(Iterator.class, elemType, staticTyping, vts, property, null);\n-        }\n-\n-        @Override\n-        public boolean isEmpty(Iterator<?> value) {\n-            return (value == null) || !value.hasNext();\n-        }\n-        \n-        @Override\n-        public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n-            return new IteratorSerializer(_elementType, _staticTyping, vts, _property);\n-        }\n-        \n-        @Override\n-        public void serializeContents(Iterator<?> value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n-        {\n-            if (value.hasNext()) {\n-                final TypeSerializer typeSer = _valueTypeSerializer;\n-                JsonSerializer<Object> prevSerializer = null;\n-                Class<?> prevClass = null;\n-                do {\n-                    Object elem = value.next();\n-                    if (elem == null) {\n-                        provider.defaultSerializeNull(jgen);\n-                    } else {\n-                        // Minor optimization to avoid most lookups:\n-                        Class<?> cc = elem.getClass();\n-                        JsonSerializer<Object> currSerializer;\n-                        if (cc == prevClass) {\n-                            currSerializer = prevSerializer;\n-                        } else {\n-                            currSerializer = provider.findValueSerializer(cc, _property);\n-                            prevSerializer = currSerializer;\n-                            prevClass = cc;\n-                        }\n-                        if (typeSer == null) {\n-                            currSerializer.serialize(elem, jgen, provider);\n-                        } else {\n-                            currSerializer.serializeWithType(elem, jgen, provider, typeSer);\n-                        }\n-                    }\n-                } while (value.hasNext());\n-            }\n-        }\n-    }\n }", "timestamp": 1328069248, "metainfo": ""}