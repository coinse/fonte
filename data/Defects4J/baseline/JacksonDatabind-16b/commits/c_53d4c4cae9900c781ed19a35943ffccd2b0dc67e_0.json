{"sha": "53d4c4cae9900c781ed19a35943ffccd2b0dc67e", "log": "Slightly improved javadoco for `ObjectMapper.readValue()`", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      * type (it can be an array type, however): typically a bean, array\n      * or a wrapper type (like {@link java.lang.Boolean}).\n      *<p>\n-     * If a low-level I/O problem (missing input, network error) occurs,\n-     * a {@link IOException} will be thrown.\n-     * If a parsing problem occurs (invalid JSON),\n-     * {@link JsonParseException} will be thrown.\n-     * If the input JSON structure does not match structure expected for\n-     * result type (or has other mismatch issues), a {@link JsonMappingException}\n-     * will be thrown.\n-     *<p>\n      * Note: this method should NOT be used if the result type is a\n      * container ({@link java.util.Collection} or {@link java.util.Map}.\n      * The reason is that due to type erasure, key and value types\n      * can not be introspected when using this method.\n+     * \n+     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n+     *   network error) occurs (passed through as-is without additional wrapping -- note\n+     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n+     *   does NOT result in wrapping of exception even if enabled)\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n+     * @throws JsonMappingException if the input JSON structure does not match structure\n+     *   expected for result type (or has other mismatch issues)\n      */\n     @Override\n     @SuppressWarnings(\"unchecked\")\n      * \"super type token\" (see )\n      * and specifically needs to be used if the root type is a \n      * parameterized (generic) container type.\n-     *<p>\n-     * If a low-level I/O problem (missing input, network error) occurs,\n-     * a {@link IOException} will be thrown.\n-     * If a parsing problem occurs (invalid JSON),\n-     * {@link JsonParseException} will be thrown.\n-     * If the input JSON structure does not match structure expected for\n-     * result type (or has other mismatch issues), a {@link JsonMappingException}\n-     * will be thrown.\n+     * \n+     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n+     *   network error) occurs (passed through as-is without additional wrapping -- note\n+     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n+     *   does NOT result in wrapping of exception even if enabled)\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n+     * @throws JsonMappingException if the input JSON structure does not match structure\n+     *   expected for result type (or has other mismatch issues)\n      */\n     @Override\n     @SuppressWarnings(\"unchecked\")\n      * to which is passed as argument. Type is passed using \n      * Jackson specific type; instance of which can be constructed using\n      * {@link TypeFactory}.\n-     *<p>\n-     * If a low-level I/O problem (missing input, network error) occurs,\n-     * a {@link IOException} will be thrown.\n-     * If a parsing problem occurs (invalid JSON),\n-     * {@link JsonParseException} will be thrown.\n-     * If the input JSON structure does not match structure expected for\n-     * result type (or has other mismatch issues), a {@link JsonMappingException}\n-     * will be thrown.\n+     * \n+     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n+     *   network error) occurs (passed through as-is without additional wrapping -- note\n+     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n+     *   does NOT result in wrapping of exception even if enabled)\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n+     * @throws JsonMappingException if the input JSON structure does not match structure\n+     *   expected for result type (or has other mismatch issues)\n      */\n     @Override\n     @SuppressWarnings(\"unchecked\")\n \n     /**\n      * Type-safe overloaded method, basically alias for {@link #readValue(JsonParser, Class)}.\n+     * \n+     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n+     *   network error) occurs (passed through as-is without additional wrapping -- note\n+     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n+     *   does NOT result in wrapping of exception even if enabled)\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n+     * @throws JsonMappingException if the input JSON structure does not match structure\n+     *   expected for result type (or has other mismatch issues)\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <T> T readValue(JsonParser jp, JavaType valueType)\n      * root of the resulting tree (where root can consist\n      * of just a single node if the current event is a\n      * value event, not container).\n-     *<p>\n-     * If a low-level I/O problem (missing input, network error) occurs,\n-     * a {@link IOException} will be thrown.\n-     * If a parsing problem occurs (invalid JSON),\n-     * {@link JsonParseException} will be thrown.\n-     * If no content is found from input (end-of-input), Java\n-     * <code>null</code> will be returned.\n      * \n      * @return a {@link JsonNode}, if valid JSON content found; null\n      *   if input has no content to bind -- note, however, that if\n      *   JSON <code>null</code> token is found, it will be represented\n      *   as a non-null {@link JsonNode} (one that returns <code>true</code>\n      *   for {@link JsonNode#isNull()}\n+     * \n+     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n+     *   network error) occurs (passed through as-is without additional wrapping -- note\n+     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n+     *   does NOT result in wrapping of exception even if enabled)\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n      */\n     @Override\n     public <T extends TreeNode> T readTree(JsonParser jp)\n      *   JSON <code>null</code> token is found, it will be represented\n      *   as a non-null {@link JsonNode} (one that returns <code>true</code>\n      *   for {@link JsonNode#isNull()}\n+     *   \n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n      */\n     public JsonNode readTree(InputStream in)\n         throws IOException, JsonProcessingException\n      *   JSON <code>null</code> token is found, it will be represented\n      *   as a non-null {@link JsonNode} (one that returns <code>true</code>\n      *   for {@link JsonNode#isNull()}\n+     *\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n      */\n     public JsonNode readTree(String content)\n         throws IOException, JsonProcessingException\n      * event is a value event, not container).\n      *\n      * @param content JSON content to parse to build the JSON tree.\n+     * \n+     * @return a {@link JsonNode}, if valid JSON content found; null\n+     *   if input has no content to bind -- note, however, that if\n+     *   JSON <code>null</code> token is found, it will be represented\n+     *   as a non-null {@link JsonNode} (one that returns <code>true</code>\n+     *   for {@link JsonNode#isNull()}\n+     *\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n      */\n     public JsonNode readTree(byte[] content)\n         throws IOException, JsonProcessingException\n      * event is a value event, not container).\n      *\n      * @param file File of which contents to parse as JSON for building a tree instance\n+     * \n+     * @return a {@link JsonNode}, if valid JSON content found; null\n+     *   if input has no content to bind -- note, however, that if\n+     *   JSON <code>null</code> token is found, it will be represented\n+     *   as a non-null {@link JsonNode} (one that returns <code>true</code>\n+     *   for {@link JsonNode#isNull()}\n+     * \n+     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n+     *   network error) occurs (passed through as-is without additional wrapping -- note\n+     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n+     *   does NOT result in wrapping of exception even if enabled)\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n      */\n     public JsonNode readTree(File file)\n         throws IOException, JsonProcessingException\n      * event is a value event, not container).\n      *\n      * @param source URL to use for fetching contents to parse as JSON for building a tree instance\n+     * \n+     * @return a {@link JsonNode}, if valid JSON content found; null\n+     *   if input has no content to bind -- note, however, that if\n+     *   JSON <code>null</code> token is found, it will be represented\n+     *   as a non-null {@link JsonNode} (one that returns <code>true</code>\n+     *   for {@link JsonNode#isNull()}\n+     * \n+     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n+     *   network error) occurs (passed through as-is without additional wrapping -- note\n+     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n+     *   does NOT result in wrapping of exception even if enabled)\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n      */\n     public JsonNode readTree(URL source)\n         throws IOException, JsonProcessingException\n     /**********************************************************\n      */\n \n+    /**\n+     * Method to deserialize JSON content from given file into given Java type.\n+     * \n+     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n+     *   network error) occurs (passed through as-is without additional wrapping -- note\n+     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n+     *   does NOT result in wrapping of exception even if enabled)\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n+     * @throws JsonMappingException if the input JSON structure does not match structure\n+     *   expected for result type (or has other mismatch issues)\n+     */\n     @SuppressWarnings(\"unchecked\")\n     public <T> T readValue(File src, Class<T> valueType)\n         throws IOException, JsonParseException, JsonMappingException\n         return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType));\n     } \n \n+    /**\n+     * Method to deserialize JSON content from given file into given Java type.\n+     * \n+     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n+     *   network error) occurs (passed through as-is without additional wrapping -- note\n+     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n+     *   does NOT result in wrapping of exception even if enabled)\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n+     * @throws JsonMappingException if the input JSON structure does not match structure\n+     *   expected for result type (or has other mismatch issues)\n+     */\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public <T> T readValue(File src, TypeReference valueTypeRef)\n         throws IOException, JsonParseException, JsonMappingException\n         return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef));\n     } \n \n+    /**\n+     * Method to deserialize JSON content from given file into given Java type.\n+     * \n+     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n+     *   network error) occurs (passed through as-is without additional wrapping -- note\n+     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n+     *   does NOT result in wrapping of exception even if enabled)\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n+     * @throws JsonMappingException if the input JSON structure does not match structure\n+     *   expected for result type (or has other mismatch issues)\n+     */\n     @SuppressWarnings(\"unchecked\")\n     public <T> T readValue(File src, JavaType valueType)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n         return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);\n-    } \n-\n+    }\n+\n+    /**\n+     * Method to deserialize JSON content from given resource into given Java type.\n+     * \n+     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n+     *   network error) occurs (passed through as-is without additional wrapping -- note\n+     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n+     *   does NOT result in wrapping of exception even if enabled)\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n+     * @throws JsonMappingException if the input JSON structure does not match structure\n+     *   expected for result type (or has other mismatch issues)\n+     */\n     @SuppressWarnings(\"unchecked\")\n     public <T> T readValue(URL src, Class<T> valueType)\n         throws IOException, JsonParseException, JsonMappingException\n         return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType));\n     } \n \n+    /**\n+     * Method to deserialize JSON content from given resource into given Java type.\n+     * \n+     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n+     *   network error) occurs (passed through as-is without additional wrapping -- note\n+     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n+     *   does NOT result in wrapping of exception even if enabled)\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n+     * @throws JsonMappingException if the input JSON structure does not match structure\n+     *   expected for result type (or has other mismatch issues)\n+     */\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public <T> T readValue(URL src, TypeReference valueTypeRef)\n         throws IOException, JsonParseException, JsonMappingException\n         return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);\n     } \n \n+    /**\n+     * Method to deserialize JSON content from given JSON content String.\n+     * \n+     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n+     *   network error) occurs (passed through as-is without additional wrapping -- note\n+     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n+     *   does NOT result in wrapping of exception even if enabled)\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n+     * @throws JsonMappingException if the input JSON structure does not match structure\n+     *   expected for result type (or has other mismatch issues)\n+     */\n     @SuppressWarnings(\"unchecked\")\n     public <T> T readValue(String content, Class<T> valueType)\n         throws IOException, JsonParseException, JsonMappingException\n         return (T) _readMapAndClose(_jsonFactory.createParser(content), _typeFactory.constructType(valueType));\n     } \n \n+    /**\n+     * Method to deserialize JSON content from given JSON content String.\n+     * \n+     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n+     *   network error) occurs (passed through as-is without additional wrapping -- note\n+     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n+     *   does NOT result in wrapping of exception even if enabled)\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n+     * @throws JsonMappingException if the input JSON structure does not match structure\n+     *   expected for result type (or has other mismatch issues)\n+     */\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public <T> T readValue(String content, TypeReference valueTypeRef)\n         throws IOException, JsonParseException, JsonMappingException\n         return (T) _readMapAndClose(_jsonFactory.createParser(content), _typeFactory.constructType(valueTypeRef));\n     } \n \n+    /**\n+     * Method to deserialize JSON content from given JSON content String.\n+     * \n+     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n+     *   network error) occurs (passed through as-is without additional wrapping -- note\n+     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n+     *   does NOT result in wrapping of exception even if enabled)\n+     * @throws JsonParseException if underlying input contains invalid content\n+     *    of type {@link JsonParser} supports (JSON for default case)\n+     * @throws JsonMappingException if the input JSON structure does not match structure\n+     *   expected for result type (or has other mismatch issues)\n+     */\n     @SuppressWarnings(\"unchecked\")\n     public <T> T readValue(String content, JavaType valueType)\n         throws IOException, JsonParseException, JsonMappingException", "timestamp": 1419656070, "metainfo": ""}