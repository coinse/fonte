{"sha": "0a42b40d0119cc9309684fdc2ec4b501e8e10246", "log": "Add a unit test to verify that #240 is fixed.", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestFieldSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestFieldSerialization.java\n         @JsonProperty(\"z\") public int getZ() { return z+1; }\n     }\n \n+    @JsonInclude(JsonInclude.Include.NON_EMPTY)\n+    public class Item240 {\n+        @JsonProperty\n+        private String id;\n+        // only include annotation to ensure it won't override settings\n+        @JsonSerialize(typing=JsonSerialize.Typing.STATIC)\n+        private String state;\n+\n+        public Item240(String id, String state) {\n+            this.id = id;\n+            this.state = state;\n+        }\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Main tests, success\n      */\n \n     private final ObjectMapper MAPPER = new ObjectMapper();\n-    \n+\n     public void testSimpleAutoDetect() throws Exception\n     {\n         SimpleFieldBean bean = new SimpleFieldBean();\n         assertEquals(Integer.valueOf(2), json.get(\"y\"));\n     }\n \n+    public void testIssue240() throws Exception\n+    {\n+        Item240 bean = new Item240(\"a12\", null);\n+        assertEquals(MAPPER.writeValueAsString(bean), \"{\\\"id\\\":\\\"a12\\\"}\");\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Main tests, failure cases", "timestamp": 1375846752, "metainfo": ""}