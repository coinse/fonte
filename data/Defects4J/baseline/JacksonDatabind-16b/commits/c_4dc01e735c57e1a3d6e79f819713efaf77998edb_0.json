{"sha": "4dc01e735c57e1a3d6e79f819713efaf77998edb", "log": "Completed [JACKSON-669] implementation", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n \n /**\n  * Abstract class that defines API used for introspecting annotation-based\n      * Method called to check whether given property is marked to be \"unwrapped\"\n      * when being serialized (and appropriately handled in reverse direction,\n      * i.e. expect unwrapped representation during deserialization).\n-     * Return value is the prefix to use for properties (empty String\n-     * meaning no prefix), if not null; or null to indicate that no\n-     * unwrapping is expected.\n-     */\n-    public String findUnwrapPrefix(AnnotatedMember member) {\n+     * Return value is the name transformation to use, if wrapping/unwrapping\n+     * should  be done, or null if not -- note that transformation may simply\n+     * be identity transformation (no changes).\n+     */\n+    public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member) {\n         return null;\n     }\n \n         }\n \n         @Override        \n-        public String findUnwrapPrefix(AnnotatedMember member)\n-        {\n-            String value = _primary.findUnwrapPrefix(member);\n+        public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member)\n+        {\n+            NameTransformer value = _primary.findUnwrappingNameTransformer(member);\n             if (value == null) {\n-                value = _secondary.findUnwrapPrefix(member);\n+                value = _secondary.findUnwrappingNameTransformer(member);\n             }\n             return value;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n \n /**\n  * Abstract class that defines API used by {@link ObjectMapper} (and\n      * Default implementation just returns 'this'\n      * indicating that no unwrapped variant exists\n      */\n-    public JsonDeserializer<T> unwrappingDeserializer(String prefix) {\n+    public JsonDeserializer<T> unwrappingDeserializer(NameTransformer unwrapper) {\n         return this;\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n \n /**\n  * Abstract class that defines API used by {@link ObjectMapper} (and\n      * Default implementation just returns serializer as-is,\n      * indicating that no unwrapped variant exists\n      * \n-     * @param prefix Prefix to use for embedded properties, if any\n+     * @param unwrapper Name transformation to use to convert between names\n+     *   of unwrapper properties\n      */\n-    public JsonSerializer<T> unwrappingSerializer(String prefix) {\n+    public JsonSerializer<T> unwrappingSerializer(NameTransformer unwrapper) {\n         return this;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.type.ClassKey;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n /**\n         _unwrappedPropertyHandler = src._unwrappedPropertyHandler;\n     }\n     \n-    protected BeanDeserializer(BeanDeserializer src, String unwrapPrefix)\n+    protected BeanDeserializer(BeanDeserializer src, NameTransformer unwrapper)\n     {\n         super(src._beanType);\n     \n         _delegateDeserializer = src._delegateDeserializer;\n         _propertyBasedCreator = src._propertyBasedCreator;\n \n-        _beanProperties = src._beanProperties.withPrefix(unwrapPrefix);\n+        _beanProperties = src._beanProperties.renameAll(unwrapper);\n \n         _backRefs = src._backRefs;\n         _ignorableProps = src._ignorableProps;\n-        _ignoreAllUnknown = (unwrapPrefix != null) || src._ignoreAllUnknown;\n+        _ignoreAllUnknown = (unwrapper != null) || src._ignoreAllUnknown;\n         _anySetter = src._anySetter;\n         _injectables = src._injectables;\n \n     }\n \n     @Override\n-    public JsonDeserializer<Object> unwrappingDeserializer(String prefix)\n+    public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper)\n     {\n         /* bit kludgy but we don't want to accidentally change type;\n          * sub-classes MUST override this method to support unwrapped\n          * properties; since there may be multiple unwrapped values\n          * and properties for all may be interleaved...\n          */\n-        return new BeanDeserializer(this, prefix);\n+        return new BeanDeserializer(this, unwrapper);\n     }\n     \n     /*\n     {\n         AnnotatedMember am = prop.getMember();\n         if (am != null) {\n-            String prefix = config.getAnnotationIntrospector().findUnwrapPrefix(am);\n-            if (prefix != null) {\n+            NameTransformer unwrapper = config.getAnnotationIntrospector().findUnwrappingNameTransformer(am);\n+            if (unwrapper != null) {\n                 JsonDeserializer<Object> orig = prop.getValueDeserializer();\n-                JsonDeserializer<Object> unwrapping = orig.unwrappingDeserializer(prefix);\n+                JsonDeserializer<Object> unwrapping = orig.unwrappingDeserializer(unwrapper);\n                 if (unwrapping != orig && unwrapping != null) {\n                     // might be cleaner to create new instance; but difficult to do reliably, so:\n                     return prop.withValueDeserializer(unwrapping);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n import java.util.*;\n \n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n \n /**\n  * Helper class used for storing mapping from property name to\n      * Factory method for constructing a map where all entries use given\n      * prefix\n      */\n-    public BeanPropertyMap withPrefix(String prefix)\n-    {\n-        if (prefix == null || prefix.length() == 0) {\n+    public BeanPropertyMap renameAll(NameTransformer transformer)\n+    {\n+        if (transformer == null || (transformer == NameTransformer.NOP)) {\n             return this;\n         }\n         Iterator<SettableBeanProperty> it = allProperties();\n         ArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>();\n         while (it.hasNext()) {\n             SettableBeanProperty prop = it.next();\n-            newProps.add(prop.withName(prefix + prop.getName()));\n+            newProps.add(prop.withName(transformer.transform(prop.getName())));\n         }\n         // should we try to re-index? Ordering probably changed but called probably doesn't want changes...\n         return new BeanPropertyMap(newProps);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.BeanDeserializer;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n \n /**\n  * Deserializer that builds on basic {@link BeanDeserializer} but\n     /**\n      * Alternative constructor used when creating \"unwrapping\" deserializers\n      */\n-    protected ThrowableDeserializer(BeanDeserializer src, String unwrapPrefix)\n+    protected ThrowableDeserializer(BeanDeserializer src, NameTransformer unwrapper)\n     {\n-        super(src, unwrapPrefix);\n+        super(src, unwrapper);\n     }\n     \n     @Override\n-    public JsonDeserializer<Object> unwrappingDeserializer(String prefix)\n+    public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper)\n     {\n         if (getClass() != ThrowableDeserializer.class) {\n             return this;\n          * properties; since there may be multiple unwrapped values\n          * and properties for all may be interleaved...\n          */\n-        return new ThrowableDeserializer(this, prefix);\n+        return new ThrowableDeserializer(this, unwrapper);\n     }\n \n     \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n import com.fasterxml.jackson.databind.ser.std.RawSerializer;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n \n /**\n  * {@link AnnotationIntrospector} implementation that handles standard\n     }\n \n     @Override\n-    public String findUnwrapPrefix(AnnotatedMember member)\n+    public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member)\n     {\n         JsonUnwrapped ann = member.getAnnotation(JsonUnwrapped.class);\n         // if not enabled, just means annotation is not enabled; not necessarily\n         // that unwrapping should not be done (relevant when using chained introspectors)\n-        if (ann != null && ann.enabled()) {\n-            return ann.prefix();\n-        }\n-        return null;\n+        if (ann == null || !ann.enabled()) {\n+            return null;\n+        }\n+        String prefix = ann.prefix();\n+        String suffix = ann.suffix();\n+        return NameTransformer.simpleTransformer(prefix, suffix);\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter;\n import com.fasterxml.jackson.databind.util.Annotations;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n \n /**\n  * Base bean property handler class, which implements common parts of\n      * Method called create an instance that handles details of unwrapping\n      * contained value.\n      */\n-    public BeanPropertyWriter unwrappingWriter(String prefix) {\n-        return new UnwrappingBeanPropertyWriter(this, prefix);\n+    public BeanPropertyWriter unwrappingWriter(NameTransformer unwrapper) {\n+        return new UnwrappingBeanPropertyWriter(this, unwrapper);\n     }\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n \n \n /**\n     }\n \n     @Override\n-    public JsonSerializer<Object> unwrappingSerializer(String prefix) {\n-        return new UnwrappingBeanSerializer(this, prefix);\n+    public JsonSerializer<Object> unwrappingSerializer(NameTransformer unwrapper) {\n+        return new UnwrappingBeanSerializer(this, unwrapper);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n                 ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n         \n         // [JACKSON-132]: Unwrapping\n-        String unwrapPrefix = _annotationIntrospector.findUnwrapPrefix(am);\n-        if (unwrapPrefix != null) {\n-            bpw = bpw.unwrappingWriter(unwrapPrefix);\n+        NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);\n+        if (unwrapper != null) {\n+            bpw = bpw.unwrappingWriter(unwrapper);\n         }\n         return bpw;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.ser.*;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n \n /**\n  * Variant of {@link BeanPropertyWriter} which will handle unwrapping\n public class UnwrappingBeanPropertyWriter\n     extends BeanPropertyWriter\n {\n-    protected final String _prefix;\n+    protected final NameTransformer _unwrapper;\n     \n-    public UnwrappingBeanPropertyWriter(BeanPropertyWriter base, String prefix) {\n+    public UnwrappingBeanPropertyWriter(BeanPropertyWriter base, NameTransformer unwrapper) {\n         super(base);\n-        _prefix = (prefix == null || prefix.length() == 0) ? null : prefix;\n+        _unwrapper = unwrapper;\n     }\n \n     private UnwrappingBeanPropertyWriter(UnwrappingBeanPropertyWriter base, SerializedString name) {\n-        super(base);\n-        _prefix = base._prefix;\n+        super(base, name);\n+        _unwrapper = base._unwrapper;\n     }\n \n     @Override\n             serializer = provider.findValueSerializer(type, this);\n         }\n         if (!serializer.isUnwrappingSerializer()) {\n-            serializer = serializer.unwrappingSerializer(_prefix);\n+            serializer = serializer.unwrappingSerializer(_unwrapper);\n         }\n         _dynamicSerializers = _dynamicSerializers.newWith(type, serializer);\n         return serializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.ser.*;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n \n public class UnwrappingBeanSerializer\n     extends BeanSerializerBase\n      * Constructor used for creating unwrapping instance of a\n      * standard <code>BeanSerializer</code>\n      */\n-    public UnwrappingBeanSerializer(BeanSerializerBase src, String prefix) {\n-        super(src, prefix);\n+    public UnwrappingBeanSerializer(BeanSerializerBase src, NameTransformer unwrapper) {\n+        super(src, unwrapper);\n     }\n \n     /*\n      */\n \n     @Override\n-    public JsonSerializer<Object> unwrappingSerializer(String prefix) {\n+    public JsonSerializer<Object> unwrappingSerializer(NameTransformer unwrapper) {\n         /* !!! 13-Jan-2011, tatu: do we need to do something here?\n          *    Would this affect multi-level unwrapping?\n          */\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.*;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n \n /**\n  * Base class both for the standard bean serializer, and couple\n      * Copy-constructor that will also rename properties with given prefix\n      * (if it's non-empty)\n      */\n-    protected BeanSerializerBase(BeanSerializerBase src, String propertyPrefix) {\n+    protected BeanSerializerBase(BeanSerializerBase src, NameTransformer unwrapper) {\n         this(src._handledType,\n-                appendPrefix(src._props, propertyPrefix),\n-                appendPrefix(src._filteredProps, propertyPrefix),\n+                rename(src._props, unwrapper),\n+                rename(src._filteredProps, unwrapper),\n                 src._anyGetterWriter, src._propertyFilterId);\n     }\n \n-    private final static BeanPropertyWriter[] appendPrefix(BeanPropertyWriter[] props,\n-            String prefix)\n-    {\n-        if (prefix == null || prefix.length() == 0 || props == null || props.length == 0) {\n+    private final static BeanPropertyWriter[] rename(BeanPropertyWriter[] props,\n+            NameTransformer transformer)\n+    {\n+        if (props == null || props.length == 0 || transformer == null || transformer == NameTransformer.NOP) {\n             return props;\n         }\n         final int len = props.length;\n         for (int i = 0; i < len; ++i) {\n             BeanPropertyWriter bpw = props[i];\n             if (bpw != null) {\n-                result[i] = bpw.withName(prefix + bpw.getName());\n+                result[i] = bpw.withName(transformer.transform(bpw.getName()));\n             }\n         }\n         return result;\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/NameTransformer.java\n+package com.fasterxml.jackson.databind.util;\n+\n+/**\n+ * Helper class used to encapsulate details of name mangling, transforming\n+ * of names using different strategies (prefixes, suffixes).\n+ * Default implementation is \"no-operation\" (aka identity transformation).\n+ */\n+public class NameTransformer\n+{\n+    /**\n+     * Singleton \"no-operation\" transformer which simply returns given\n+     * name as is. Used commonly as placeholder or marker.\n+     */\n+    public final static NameTransformer NOP = new NameTransformer();\n+\n+    protected NameTransformer() { }\n+\n+    /**\n+     * Factory method for constructing a simple transformer based on\n+     * prefix and/or suffix.\n+     */\n+    public static NameTransformer simpleTransformer(final String prefix, final String suffix)\n+    {\n+        boolean hasPrefix = (prefix != null) && (prefix.length() > 0);\n+        boolean hasSuffix = (suffix != null) && (suffix.length() > 0);\n+\n+        if (hasPrefix) {\n+            if (hasSuffix) {\n+                return new NameTransformer() {\n+                    @Override\n+                    public String transform(String name) { return prefix + name + suffix; }\n+                };\n+            }\n+            return new NameTransformer() {\n+                @Override\n+                public String transform(String name) { return prefix + name; }\n+            };\n+        }\n+        if (hasSuffix) {\n+            return new NameTransformer() {\n+                @Override\n+                public String transform(String name) { return name + suffix; }\n+            };\n+        }\n+        return NOP;\n+    }\n+    \n+    /**\n+     * Method called when transformation is needed\n+     */\n+    public String transform(String name) { return name; }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrapping.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrapping.java\n         }\n     }\n \n-    /*\n     static class DeepPrefixUnwrap\n     {\n-        @JsonUnwrapped(prefix=\"u\")\n+        @JsonUnwrapped(prefix=\"u.\")\n         public PrefixUnwrap unwrapped;\n \n         public DeepPrefixUnwrap() { }\n         public DeepPrefixUnwrap(String str, int x, int y) {\n             unwrapped = new PrefixUnwrap(str, x, y);\n         }\n-    }*/\n+    }\n     \n     /*\n     /**********************************************************\n                 mapper.writeValueAsString(new DeepUnwrapping(\"Tatu\", 1, 2)));\n     }\n \n-    // 13-Jan-2012, tatu: does not quite work yet -- should, need to investigate:\n-    /*\n+    // 13-Jan-2012, tatu: sorta kinda works; but not 100% sure it's like it\n+    //    really SHOULD work?\n     public void testDeepPrefixedUnwrappingSerialize() throws Exception\n     {\n-        assertEquals(\"{\\\"name\\\":\\\"Bubba\\\",\\\"u_x\\\":1,\\\"u_y\\\":1}\",\n+        assertEquals(\"{\\\"u.name\\\":\\\"Bubba\\\",\\\"_x\\\":1,\\\"_y\\\":1}\",\n                 mapper.writeValueAsString(new DeepPrefixUnwrap(\"Bubba\", 1, 1)));\n     }\n-    */\n     \n     /*\n     /**********************************************************", "timestamp": 1326522339, "metainfo": ""}