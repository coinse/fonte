{"sha": "d48b64371329ede6aa206edc5ae631986498c52f", "log": "Fix [JACKSON-816], test failures on Windows", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n     {\n         // Not portable etc... has to do:\n         File src = new File(\"/test\").getAbsoluteFile();\n-        File result = mapper.readValue(\"\\\"\"+src.getAbsolutePath()+\"\\\"\", File.class);\n-        assertEquals(src.getAbsolutePath(), result.getAbsolutePath());\n+        String abs = src.getAbsolutePath();\n+\n+        // escape backslashes (for portability with windows)\n+        String json = mapper.writeValueAsString(abs);\n+        \n+        File result = mapper.readValue(json, File.class);\n+        assertEquals(abs, result.getAbsolutePath());\n     }\n \n     public void testRegexps() throws IOException\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJacksonTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJacksonTypes.java\n {\n     public void testLocation() throws IOException\n     {\n-        JsonLocation loc = new JsonLocation(new File(\"/tmp/test.json\"),\n-                                            -1, 100, 13);\n+        File f = new File(\"/tmp/test.json\");\n+        JsonLocation loc = new JsonLocation(f, -1, 100, 13);\n         ObjectMapper mapper = new ObjectMapper();\n         Map<String,Object> result = writeAndMap(mapper, loc);\n         assertEquals(5, result.size());\n-        assertEquals(\"/tmp/test.json\", result.get(\"sourceRef\"));\n+        assertEquals(f.getAbsolutePath(), result.get(\"sourceRef\"));\n         assertEquals(Integer.valueOf(-1), result.get(\"charOffset\"));\n         assertEquals(Integer.valueOf(-1), result.get(\"byteOffset\"));\n         assertEquals(Integer.valueOf(100), result.get(\"lineNr\"));\n     /**\n      * Verify that {@link TokenBuffer} can be properly serialized\n      * automatically, using the \"standard\" JSON sample document\n-     *\n-     * @since 1.5\n      */\n     public void testTokenBuffer() throws Exception\n     {\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java\n      */\n     public void testFile() throws IOException\n     {\n-        /* Not sure if this gets translated differently on Windows, Mac?\n-         * It'd be hard to make truly portable test tho...\n-         */\n-        File f = new File(\"/tmp/foo.txt\");\n-        String str = serializeAsString(MAPPER, f);\n-        assertEquals(\"\\\"\"+f.getAbsolutePath()+\"\\\"\", str);\n+        // this may get translated to different representation on Windows, maybe Mac:\n+        File f = new File(new File(\"/tmp\"), \"foo.text\");\n+        String str = MAPPER.writeValueAsString(f);\n+        // escape backslashes (for portability with windows)\n+        String escapedAbsPath = f.getAbsolutePath().replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"); \n+        assertEquals(quote(escapedAbsPath), str);\n     }\n \n     public void testRegexps() throws IOException\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestObjectWriter.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestObjectWriter.java\n \n         // and then with standard\n         writer = writer.withDefaultPrettyPrinter();\n-        assertEquals(\"{\\n  \\\"a\\\" : 1\\n}\", writer.writeValueAsString(data));\n+\n+        // pretty printer uses system-specific line feeds, so we do that as well.\n+        String lf = System.getProperty(\"line.separator\");\n+        assertEquals(\"{\" + lf + \"  \\\"a\\\" : 1\" + lf + \"}\", writer.writeValueAsString(data));\n \n         // and finally, again without indentation\n         writer = writer.with((PrettyPrinter) null);", "timestamp": 1332285230, "metainfo": ""}