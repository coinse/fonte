{"sha": "ead4e32095e885e73d038824a845f228d860aaed", "log": "Fix #47, one of oldest open bugs (yay!): support @JsonValue for Map keys", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n         }\n         return factory.isEnabled(f);\n     }\n-    \n+\n     /**\n      * \"Bulk\" access method for checking that all features specified by\n      * mask are enabled.\n     /* Other configuration\n     /**********************************************************\n      */\n-    \n+\n     /**\n      * Method for getting head of the problem handler chain. May be null,\n      * if no handlers have been added.\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.JsonInclude;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;\n             JavaType keyType, JsonSerializer<Object> defaultImpl)\n     {\n         // We should not need any member method info; at most class annotations for Map type\n+        // ... at least, not here.\n         BeanDescription beanDesc = config.introspectClassAnnotations(keyType.getRawClass());\n         JsonSerializer<?> ser = null;\n         // Minor optimization: to avoid constructing beanDesc, bail out if none registered\n         if (ser == null) {\n             ser = defaultImpl;\n             if (ser == null) {\n-                ser = StdKeySerializers.getStdKeySerializer(keyType);\n+                ser = StdKeySerializers.getStdKeySerializer(config, keyType.getRawClass(), false);\n+                // As per [databind#47], also need to support @JsonValue\n+                if (ser == null) {\n+                    beanDesc = config.introspect(keyType);\n+                    AnnotatedMethod am = beanDesc.findJsonValueMethod();\n+                    if (am != null) {\n+                        final Class<?> rawType = am.getRawReturnType();\n+                        JsonSerializer<?> delegate = StdKeySerializers.getStdKeySerializer(config,\n+                                rawType, true);\n+                        ser = new JsonValueSerializer(am.getAnnotated(), delegate);\n+                    } else {\n+                        ser = StdKeySerializers.getDefault();\n+                    }\n+                }\n             }\n         }\n         \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n      *    {@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using}), otherwise\n      *    null\n      */\n-    public JsonValueSerializer(Method valueMethod, JsonSerializer<Object> ser)\n-    {\n-        super(Object.class);\n+    @SuppressWarnings(\"unchecked\")\n+    public JsonValueSerializer(Method valueMethod, JsonSerializer<?> ser)\n+    {\n+        super(valueMethod.getReturnType(), false);\n         _accessorMethod = valueMethod;\n-        _valueSerializer = ser;\n+        _valueSerializer = (JsonSerializer<Object>) ser;\n         _property = null;\n         _forceTypeInformation = true; // gets reconsidered when we are contextualized\n     }\n      */\n \n     @Override\n-    public String toString()\n-    {\n+    public String toString() {\n         return \"(@JsonValue serializer for method \" + _accessorMethod.getDeclaringClass() + \"#\" + _accessorMethod.getName() + \")\";\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n public class StdKeySerializer extends StdSerializer<Object>\n {\n     public StdKeySerializer() { super(Object.class); }\n-    \n+\n     @Override\n-    public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+    public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n         if (value instanceof Date) {\n             provider.defaultSerializeDateKey((Date) value, jgen);\n         } else {\n     public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n         return createSchemaNode(\"string\");\n     }\n-    \n+\n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n         visitor.expectStringFormat(typeHint);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n import java.util.Date;\n \n import com.fasterxml.jackson.core.*;\n-\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.*;\n \n public class StdKeySerializers\n {\n \n     private StdKeySerializers() { }\n \n+    /**\n+     * @param config Serialization configuration in use, may be needed in choosing\n+     *    serializer to use\n+     * @param rawKeyType Type of key values to serialize\n+     * @param useDefault If no match is found, should we return fallback deserializer\n+     *    (true), or null (false)?\n+     */\n     @SuppressWarnings(\"unchecked\")\n-    public static JsonSerializer<Object> getStdKeySerializer(JavaType keyType)\n+    public static JsonSerializer<Object> getStdKeySerializer(SerializationConfig config,\n+            Class<?> rawKeyType, boolean useDefault)\n     {\n-        if (keyType == null) {\n-            return DEFAULT_KEY_SERIALIZER;\n+        if (rawKeyType != null) {\n+            if (rawKeyType == String.class) {\n+                return DEFAULT_STRING_SERIALIZER;\n+            }\n+            if (rawKeyType == Object.class || rawKeyType.isPrimitive()\n+                    || Number.class.isAssignableFrom(rawKeyType)) {\n+                return DEFAULT_KEY_SERIALIZER;\n+            }\n+            if (Date.class.isAssignableFrom(rawKeyType)) {\n+                return (JsonSerializer<Object>) DateKeySerializer.instance;\n+            }\n+            if (Calendar.class.isAssignableFrom(rawKeyType)) {\n+                return (JsonSerializer<Object>) CalendarKeySerializer.instance;\n+            }\n         }\n-        Class<?> cls = keyType.getRawClass();\n-        if (cls == String.class) {\n-            return DEFAULT_STRING_SERIALIZER;\n-        }\n-        if (cls == Object.class || cls.isPrimitive() || Number.class.isAssignableFrom(cls)) {\n-            return DEFAULT_KEY_SERIALIZER;\n-        }\n-        if (Date.class.isAssignableFrom(cls)) {\n-            return (JsonSerializer<Object>) DateKeySerializer.instance;\n-        }\n-        if (Calendar.class.isAssignableFrom(cls)) {\n-            return (JsonSerializer<Object>) CalendarKeySerializer.instance;\n-        }\n-        /* 14-Mar-2014, tatu: Should support @JsonValue, as per #47; but that\n-         *   requires extensive introspection, and passing in more information\n-         *   to this method.\n-         */\n-        // If no match, just use default one:\n+        return useDefault ? DEFAULT_KEY_SERIALIZER : null;\n+    }\n+\n+    /**\n+     * @deprecated Since 2.5\n+     */\n+    @Deprecated\n+    public static JsonSerializer<Object> getStdKeySerializer(JavaType keyType) {\n+        return getStdKeySerializer(null, keyType.getRawClass(), true);\n+    }\n+\n+    public static JsonSerializer<Object> getDefault() {\n         return DEFAULT_KEY_SERIALIZER;\n     }\n-\n+    \n     /*\n     /**********************************************************\n     /* Standard implementations\n--- a/src/test/java/com/fasterxml/jackson/failing/TestMapJsonValueKey47.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestMapJsonValueKey47.java\n \n         ObjectMapper mapper = new ObjectMapper();\n         String json = mapper.writeValueAsString(input);\n-        assertEquals(aposToQuotes(\"{'3':'true'}\"), json);\n+        assertEquals(aposToQuotes(\"{'3':true}\"), json);\n     }\n }", "timestamp": 1418443336, "metainfo": ""}