{"sha": "203f23ce6463674c06a99b24647c3bafa45ecf0c", "log": "add bit more missing init wrt parser features", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      *   content to map (note: Json \"null\" value is considered content;\n      *   enf-of-stream not)\n      */\n-    protected JsonToken _initForReading(JsonParser jp)\n-        throws IOException, JsonParseException, JsonMappingException\n-    {\n+    protected JsonToken _initForReading(JsonParser p) throws IOException\n+    {\n+        _deserializationConfig.initialize(p); // since 2.5\n+\n         /* First: must point to a token; if not pointing to one, advance.\n          * This occurs before first read from JsonParser, as well as\n          * after clearing of current token.\n          */\n-        JsonToken t = jp.getCurrentToken();\n+        JsonToken t = p.getCurrentToken();\n         if (t == null) {\n             // and then we must get something...\n-            t = jp.nextToken();\n+            t = p.nextToken();\n             if (t == null) {\n                 /* [JACKSON-546] Throw mapping exception, since it's failure to map,\n                  *   not an actual parsing problem\n                  */\n-                throw JsonMappingException.from(jp, \"No content to map due to end-of-input\");\n+                throw JsonMappingException.from(p, \"No content to map due to end-of-input\");\n             }\n         }\n         return t;\n     }\n \n-    protected Object _unwrapAndDeserialize(JsonParser jp, DeserializationContext ctxt, \n+    protected Object _unwrapAndDeserialize(JsonParser p, DeserializationContext ctxt, \n             DeserializationConfig config,\n             JavaType rootType, JsonDeserializer<Object> deser)\n-        throws IOException, JsonParseException, JsonMappingException\n+        throws IOException\n     {\n         String expName = config.getRootName();\n         if (expName == null) {\n             PropertyName pname = _rootNames.findRootName(rootType, config);\n             expName = pname.getSimpleName();\n         }\n-        if (jp.getCurrentToken() != JsonToken.START_OBJECT) {\n-            throw JsonMappingException.from(jp, \"Current token not START_OBJECT (needed to unwrap root name '\"\n-                    +expName+\"'), but \"+jp.getCurrentToken());\n-        }\n-        if (jp.nextToken() != JsonToken.FIELD_NAME) {\n-            throw JsonMappingException.from(jp, \"Current token not FIELD_NAME (to contain expected root name '\"\n-                    +expName+\"'), but \"+jp.getCurrentToken());\n-        }\n-        String actualName = jp.getCurrentName();\n+        if (p.getCurrentToken() != JsonToken.START_OBJECT) {\n+            throw JsonMappingException.from(p, \"Current token not START_OBJECT (needed to unwrap root name '\"\n+                    +expName+\"'), but \"+p.getCurrentToken());\n+        }\n+        if (p.nextToken() != JsonToken.FIELD_NAME) {\n+            throw JsonMappingException.from(p, \"Current token not FIELD_NAME (to contain expected root name '\"\n+                    +expName+\"'), but \"+p.getCurrentToken());\n+        }\n+        String actualName = p.getCurrentName();\n         if (!expName.equals(actualName)) {\n-            throw JsonMappingException.from(jp, \"Root name '\"+actualName+\"' does not match expected ('\"\n+            throw JsonMappingException.from(p, \"Root name '\"+actualName+\"' does not match expected ('\"\n                     +expName+\"') for type \"+rootType);\n         }\n         // ok, then move to value itself....\n-        jp.nextToken();\n-        Object result = deser.deserialize(jp, ctxt);\n+        p.nextToken();\n+        Object result = deser.deserialize(p, ctxt);\n         // and last, verify that we now get matching END_OBJECT\n-        if (jp.nextToken() != JsonToken.END_OBJECT) {\n-            throw JsonMappingException.from(jp, \"Current token not END_OBJECT (to match wrapper object with root name '\"\n-                    +expName+\"'), but \"+jp.getCurrentToken());\n+        if (p.nextToken() != JsonToken.END_OBJECT) {\n+            throw JsonMappingException.from(p, \"Current token not END_OBJECT (to match wrapper object with root name '\"\n+                    +expName+\"'), but \"+p.getCurrentToken());\n         }\n         return result;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n         if (_schema != null) {\n             p.setSchema(_schema);\n         }\n-        _config.initialize(p);\n+        _config.initialize(p); // since 2.5\n \n         /* First: must point to a token; if not pointing to one, advance.\n          * This occurs before first read from JsonParser, as well as\n         if (_schema != null) {\n             p.setSchema(_schema);\n         }\n+        _config.initialize(p); // since 2.5\n     }\n \n     /*", "timestamp": 1415424048, "metainfo": ""}