{"sha": "093f210b22493b252be07e7fd993a8368d452a59", "log": "Add back two semi-internal methods, marked as deprecated, to make migration from pre-2.3 versions smoother", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n      */\n \n     /**\n+     * @deprecated Since 2.3 (and to be removed from 2.4); use\n+     *   {@link #handlePrimaryContextualization} or {@link #handleSecondaryContextualization}\n+     *   instead\n+     */\n+    @Deprecated\n+    public JsonSerializer<?> handleContextualization(JsonSerializer<?> ser,\n+            BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        return handleSecondaryContextualization(ser, property);\n+    }\n+    \n+    /**\n      * Method called for primary property serializers (ones\n      * directly created to serialize values of a POJO property),\n      * to handle details of resolving\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap.java\n     public abstract JsonSerializer<Object> serializerFor(Class<?> type);\n \n     /**\n+     * @deprecated Since 2.3; use either <code>findAndAddPrimarySerializer</code> or\n+     *    <code>findAndAddSecondarySerializer</code>.\n+     *    To be removed from 2.4\n+     */\n+    @Deprecated\n+    public final SerializerAndMapResult findAndAddSerializer(Class<?> type,\n+            SerializerProvider provider, BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        return findAndAddSecondarySerializer(type, provider, property);\n+    }\n+\n+    /**\n+     * @deprecated Since 2.3; use either <code>findAndAddPrimarySerializer</code> or\n+     *    <code>findAndAddSecondarySerializer</code>.\n+     *    To be removed from 2.4\n+     */\n+    @Deprecated\n+    public final SerializerAndMapResult findAndAddSerializer(JavaType type,\n+            SerializerProvider provider, BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        return findAndAddSecondarySerializer(type, provider, property);\n+    }\n+\n+    /**\n+     * Method called if initial lookup fails, when looking for a primary\n+     * serializer (one that is directly attached to a property).\n+     * Will both find serializer\n+     * and construct new map instance if warranted, and return both.\n+     * \n+     * @since 2.3\n+     * \n+     * @throws JsonMappingException \n+     */\n+    public final SerializerAndMapResult findAndAddPrimarySerializer(Class<?> type,\n+            SerializerProvider provider, BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        JsonSerializer<Object> serializer = provider.findPrimaryPropertySerializer(type, property);\n+        return new SerializerAndMapResult(serializer, newWith(type, serializer));\n+    }\n+\n+    public final SerializerAndMapResult findAndAddPrimarySerializer(JavaType type,\n+            SerializerProvider provider, BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        JsonSerializer<Object> serializer = provider.findPrimaryPropertySerializer(type, property);\n+        return new SerializerAndMapResult(serializer, newWith(type.getRawClass(), serializer));\n+    }\n+    \n+    /**\n      * Method called if initial lookup fails, when looking for a non-primary\n      * serializer (one that is not directly attached to a property).\n      * Will both find serializer\n         throws JsonMappingException\n     {\n         JsonSerializer<Object> serializer = provider.findValueSerializer(type, property);\n-        return new SerializerAndMapResult(serializer, newWith(type.getRawClass(), serializer));\n-    }\n-\n-    /**\n-     * Method called if initial lookup fails, when looking for a primary\n-     * serializer (one that is directly attached to a property).\n-     * Will both find serializer\n-     * and construct new map instance if warranted, and return both.\n-     * \n-     * @since 2.3\n-     * \n-     * @throws JsonMappingException \n-     */\n-    public final SerializerAndMapResult findAndAddPrimarySerializer(Class<?> type,\n-            SerializerProvider provider, BeanProperty property)\n-        throws JsonMappingException\n-    {\n-        JsonSerializer<Object> serializer = provider.findPrimaryPropertySerializer(type, property);\n-        return new SerializerAndMapResult(serializer, newWith(type, serializer));\n-    }\n-\n-    public final SerializerAndMapResult findAndAddPrimarySerializer(JavaType type,\n-            SerializerProvider provider, BeanProperty property)\n-        throws JsonMappingException\n-    {\n-        JsonSerializer<Object> serializer = provider.findPrimaryPropertySerializer(type, property);\n         return new SerializerAndMapResult(serializer, newWith(type.getRawClass(), serializer));\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestPropertyConflicts.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestPropertyConflicts.java\n package com.fasterxml.jackson.databind.introspect;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.BaseMapTest;\n import com.fasterxml.jackson.databind.ObjectMapper;", "timestamp": 1382111590, "metainfo": ""}