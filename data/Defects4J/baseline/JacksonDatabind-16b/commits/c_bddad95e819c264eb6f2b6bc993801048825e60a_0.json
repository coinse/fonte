{"sha": "bddad95e819c264eb6f2b6bc993801048825e60a", "log": "Convert EnumMapDeserializer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n             if (kt == null || !kt.isEnum()) {\n                 throw new IllegalArgumentException(\"Can not construct EnumMap; generic (key) type not available\");\n             }\n-            return new EnumMapDeserializer(type, property, null, contentDeser);\n+            return new EnumMapDeserializer(type, null, contentDeser);\n         }\n \n         // Otherwise, generic handler works ok.\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) \n public class EnumMapDeserializer\n     extends StdDeserializer<EnumMap<?,?>>\n-    implements ResolvableDeserializer\n+    implements ContextualDeserializer\n {\n     protected final JavaType _mapType;\n-    \n-    protected final BeanProperty _property;\n     \n     protected final Class<?> _enumClass;\n \n     /**********************************************************\n      */\n     \n-    public EnumMapDeserializer(JavaType mapType, BeanProperty prop,\n-            JsonDeserializer<?> keyDeserializer, JsonDeserializer<Object> valueDeser)\n+    public EnumMapDeserializer(JavaType mapType,\n+            JsonDeserializer<?> keyDeserializer, JsonDeserializer<?> valueDeser)\n     {\n         super(EnumMap.class);\n         _mapType = mapType;\n-        _property = prop;\n         _enumClass = mapType.getKeyType().getRawClass();\n         _keyDeserializer = (JsonDeserializer<Enum<?>>) keyDeserializer;\n-        _valueDeserializer = valueDeser;\n+        _valueDeserializer = (JsonDeserializer<Object>) valueDeser;\n     }\n \n+    public EnumMapDeserializer withResolved(JsonDeserializer<?> keyDeserializer,\n+            JsonDeserializer<?> valueDeserializer) {\n+        return new EnumMapDeserializer(_mapType,\n+                keyDeserializer, valueDeserializer);\n+    }\n+    \n+    /**\n+     * Method called to finalize setup of this deserializer,\n+     * when it is known for which property deserializer is needed for.\n+     */\n     @Override\n-    public void resolve(DeserializationContext ctxt) throws JsonMappingException\n+    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n+            BeanProperty property) throws JsonMappingException\n     {\n-        if (_keyDeserializer == null) {\n-            // note: instead of finding key deserializer, with enums we actually\n-            // work with regular deserializers (less code duplication; but not\n-            // quite as clean as it ought to be)\n-            _keyDeserializer = (JsonDeserializer<Enum<?>>)(JsonDeserializer<?>)\n-                ctxt.findValueDeserializer(_mapType.getKeyType(), _property);\n+        // already good as is? No change then\n+        if (_keyDeserializer != null && _valueDeserializer != null) {\n+            return this;\n         }\n-        if (_valueDeserializer == null) {\n-            // 'null' -> arrays have no referring fields\n-            _valueDeserializer = ctxt.findValueDeserializer(_mapType.getContentType(), _property);\n+\n+        // note: instead of finding key deserializer, with enums we actually\n+        // work with regular deserializers (less code duplication; but not\n+        // quite as clean as it ought to be)\n+        JsonDeserializer<?> kd = _keyDeserializer;\n+        if (kd == null) {\n+            kd = ctxt.findValueDeserializer(_mapType.getKeyType(), property);\n         }\n+        JsonDeserializer<?> vd = _valueDeserializer;\n+        if (vd == null) {\n+            vd = ctxt.findValueDeserializer(_mapType.getContentType(), property);\n+        }\n+        return withResolved(kd, vd);\n     }\n     \n     /**\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestGenericMapDeser.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestGenericMapDeser.java\n package com.fasterxml.jackson.databind.deser;\n-\n \n import java.util.*;\n ", "timestamp": 1327976701, "metainfo": ""}