{"sha": "0b05963e7980d95ee35f683461714e2ac383e267", "log": "support json schema generation for @JsonUnwrapped (#271)", "commit": "\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/JsonFormatVisitorNullWrapper.java\n+package com.fasterxml.jackson.databind.ser.impl;\n+\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.*;\n+\n+/**\n+ * Default \"empty\" implementation, useful as the base to start on; especially as\n+ * it is guaranteed to implement all the method of the interface, even if new\n+ * methods are getting added.\n+ */\n+class JsonFormatVisitorNullWrapper implements JsonFormatVisitorWrapper {\n+\tprotected SerializerProvider _provider;\n+\n+\tpublic JsonFormatVisitorNullWrapper() {\n+\t}\n+\n+\tpublic JsonFormatVisitorNullWrapper(SerializerProvider p) {\n+\t\t_provider = p;\n+\t}\n+\n+\t@Override\n+\tpublic SerializerProvider getProvider() {\n+\t\treturn _provider;\n+\t}\n+\n+\t@Override\n+\tpublic void setProvider(SerializerProvider p) {\n+\t\t_provider = p;\n+\t}\n+\n+\t@Override\n+\tpublic JsonObjectFormatVisitor expectObjectFormat(JavaType type)\n+\t\t\tthrows JsonMappingException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic JsonArrayFormatVisitor expectArrayFormat(JavaType type)\n+\t\t\tthrows JsonMappingException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic JsonStringFormatVisitor expectStringFormat(JavaType type)\n+\t\t\tthrows JsonMappingException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic JsonNumberFormatVisitor expectNumberFormat(JavaType type)\n+\t\t\tthrows JsonMappingException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic JsonIntegerFormatVisitor expectIntegerFormat(JavaType type)\n+\t\t\tthrows JsonMappingException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic JsonBooleanFormatVisitor expectBooleanFormat(JavaType type)\n+\t\t\tthrows JsonMappingException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic JsonNullFormatVisitor expectNullFormat(JavaType type)\n+\t\t\tthrows JsonMappingException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic JsonAnyFormatVisitor expectAnyFormat(JavaType type)\n+\t\t\tthrows JsonMappingException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic JsonMapFormatVisitor expectMapFormat(JavaType type)\n+\t\t\tthrows JsonMappingException {\n+\t\treturn null;\n+\t}\n+\n+};\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java\n import java.util.Iterator;\n import java.util.Map.Entry;\n \n-import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.io.SerializedString;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.fasterxml.jackson.databind.ser.*;\n+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n \n /**\n     /**********************************************************\n      */\n \n-    // TODO: if/how to change this? Base class has this\n-/*    \n-    @Override\n-    public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)\n-        throws JsonMappingException\n-    {\n-        if (objectVisitor != null) {\n-            if (isRequired()) {\n-                objectVisitor.property(this); \n-            } else {\n-                objectVisitor.optionalProperty(this);\n-            }\n-        }\n-    }\n-    */\n+    @Override\n+    public void depositSchemaProperty(final JsonObjectFormatVisitor visitor)\n+            throws JsonMappingException {\n+        SerializerProvider provider = visitor.getProvider();\n+        JsonSerializer<Object> ser = provider\n+                .findValueSerializer(this.getType(), this)\n+                .unwrappingSerializer(_nameTransformer);\n+        \n+        if (ser.isUnwrappingSerializer()) {\n+            ser.acceptJsonFormatVisitor(new JsonFormatVisitorNullWrapper(provider) {\n+                // an unwrapping serializer will always expect ObjectFormat,\n+                // hence, the other cases do not have to be implemented\n+                @Override\n+                public JsonObjectFormatVisitor expectObjectFormat(JavaType type)\n+                        throws JsonMappingException {\n+                    return visitor;\n+                }\n+            }, this.getType());\n+        } else {\n+            super.depositSchemaProperty(visitor);\n+        }\n+    }\n     \n     // Override needed to support legacy JSON Schema generator\n     @Override", "timestamp": 1424117452, "metainfo": ""}