{"sha": "9e6c28f2ec520cc669e05c6d2f13b4486fa3f026", "log": "Fix [JACKSON-712], inability to use Injectables with delegation constructor", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n             // [JACKSON-541] improved handling a bit so:\n             // 2 or more args; all params must have name annotations\n             // ... or @JacksonInject (or equivalent)\n-            // But if it was auto-detected and there's no annotations, keep silent (was not meant to be a creator?)\n-            boolean annotationFound = false;\n-            /* [JACKSON-712] One more possibility; can have 1 or more injectables, and\n+            /* [JACKSON-711] One more possibility; can have 1 or more injectables, and\n              * exactly one non-annotated parameter: if so, it's still delegating.\n              */\n             AnnotatedParameter nonAnnotatedParam = null;\n                 if ((namedCount + injectCount) == argCount) {\n                     creators.addPropertyCreator(ctor, properties);\n                 } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n-                    // secondary: all but one injectable, one un-annotated (un-named)\n-                    // [JACKSON-712] SHOULD support; but we won't yet (tricky to do, not impossible)\n-                    throw new IllegalArgumentException(\"Delegated constructor with Injectables not yet supported (see [JACKSON-712]) for \"\n-                            +ctor);\n+                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n+                    creators.addDelegatingCreator(ctor, properties);\n                 } else { // otherwise, epic fail\n                     throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()+\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n                 }\n-            }\n-            if (annotationFound) {\n-            \tcreators.addPropertyCreator(ctor, properties);\n             }\n         }\n     }\n     \n         // Delegating Creator ok iff it has @JsonCreator (etc)\n         if (isCreator) {\n-            creators.addDelegatingCreator(ctor);\n+            creators.addDelegatingCreator(ctor, null);\n             return true;\n         }\n         return false;\n                 }\n             }\n             // 1 or more args; all params must have name annotations\n+            AnnotatedParameter nonAnnotatedParam = null;            \n             CreatorProperty[] properties = new CreatorProperty[argCount];\n+            int namedCount = 0;\n+            int injectCount = 0;            \n             for (int i = 0; i < argCount; ++i) {\n                 AnnotatedParameter param = factory.getParameter(i);\n                 String name = intr.findDeserializationName(param);\n-                Object injectableId = intr.findInjectableValueId(param);\n-                // At this point, name annotation is NOT optional\n-                if ((name == null || name.length() == 0) && (injectableId == null)) {\n-                    throw new IllegalArgumentException(\"Argument #\"+i+\" of factory method \"+factory+\" has no property name annotation; must have when multiple-paramater static method annotated as Creator\");\n-                }\n-                properties[i] = constructCreatorProperty(config, beanDesc, name, i, param, injectableId);\n-            }\n-            creators.addPropertyCreator(factory, properties);\n+                Object injectId = intr.findInjectableValueId(param);\n+                if (name != null && name.length() > 0) {\n+                    ++namedCount;\n+                    properties[i] = constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n+                } else if (injectId != null) {\n+                    ++injectCount;\n+                    properties[i] = constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n+                } else if (nonAnnotatedParam == null) {\n+                    nonAnnotatedParam = param;\n+                }\n+            }\n+\n+            // Ok: if named or injectable, we have more work to do\n+            if (isCreator || namedCount > 0 || injectCount > 0) {\n+                // simple case; everything covered:\n+                if ((namedCount + injectCount) == argCount) {\n+                    creators.addPropertyCreator(factory, properties);\n+                } else if ((namedCount == 0) && ((injectCount + 1) == argCount)) {\n+                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n+                    creators.addDelegatingCreator(factory, properties);\n+                } else { // otherwise, epic fail\n+                    throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()\n+                            +\" of factory method \"+factory+\" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n+                }\n+            }\n         }\n     }\n \n             return true;\n         }\n         if (intr.hasCreatorAnnotation(factory)) {\n-            creators.addDelegatingCreator(factory);\n+            creators.addDelegatingCreator(factory, null);\n             return true;\n         }\n         return false;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n  * It is not a full-featured implementation in that its set method\n  * should never be called -- instead, value must separately passed.\n  *<p>\n- * Note on injectable values (1.9): unlike with other mutators, where\n+ * Note on injectable values: unlike with other mutators, where\n  * deserializer and injecting are separate, here we deal the two as related\n  * things. This is necessary to add proper priority, as well as to simplify\n  * coordination.\n     public Object getInjectableValueId() {\n         return _injectableValueId;\n     }\n+\n+    @Override\n+    public String toString() { return \"[creator property, name '\"+getName()+\"'; inject id '\"+_injectableValueId+\"']\"; }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n     protected AnnotatedWithParams _doubleCreator, _booleanCreator;\n \n     protected AnnotatedWithParams _delegateCreator;\n+    // when there are injectable values along with delegate:\n+    protected CreatorProperty[] _delegateArgs;\n     \n     protected AnnotatedWithParams _propertyBasedCreator;\n     protected CreatorProperty[] _propertyBasedArgs = null;\n         if (_delegateCreator == null) {\n             delegateType = null;\n         } else {\n+            // need to find type...\n+            int ix = 0;\n+            if (_delegateArgs != null) {\n+                for (int i = 0, len = _delegateArgs.length; i < len; ++i) {\n+                    if (_delegateArgs[i] == null) { // marker for delegate itself\n+                        ix = i;\n+                        break;\n+                    }\n+                }\n+            }\n             TypeBindings bindings = _beanDesc.bindingsForBeanType();\n-            delegateType = bindings.resolveType(_delegateCreator.getParameterType(0));\n+            delegateType = bindings.resolveType(_delegateCreator.getParameterType(ix));\n         }\n         \n         inst.configureFromObjectSettings(_defaultConstructor,\n-                _delegateCreator, delegateType,\n+                _delegateCreator, delegateType, _delegateArgs,\n                 _propertyBasedCreator, _propertyBasedArgs);\n         inst.configureFromStringCreator(_stringCreator);\n         inst.configureFromIntCreator(_intCreator);\n         _booleanCreator = verifyNonDup(creator, _booleanCreator, \"boolean\");\n     }\n \n-    public void addDelegatingCreator(AnnotatedWithParams creator) {\n+    public void addDelegatingCreator(AnnotatedWithParams creator,\n+            CreatorProperty[] injectables)\n+    {\n         _delegateCreator = verifyNonDup(creator, _delegateCreator, \"delegate\");\n+        _delegateArgs = injectables;\n     }\n     \n     public void addPropertyCreator(AnnotatedWithParams creator, CreatorProperty[] properties)\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n \n \n /**\n- * Basic {@link ValueInstantiator} implementation, which only\n- * supports use of default constructor. Sub-types can add\n- * support for alternate construction methods, such as using\n- * argument-taking constructors or static factory methods.\n+ * Default {@link ValueInstantiator} implementation, which supports\n+ * Creator methods that can be indicated by standard Jackson\n+ * annotations.\n  */\n public class StdValueInstantiator\n     extends ValueInstantiator\n \n     // // // With-args (property-based) construction\n \n+    protected AnnotatedWithParams _withArgsCreator;\n     protected CreatorProperty[] _constructorArguments;\n-    protected AnnotatedWithParams _withArgsCreator;\n \n     // // // Delegate construction\n     \n     protected JavaType _delegateType;\n     protected AnnotatedWithParams _delegateCreator;\n+    protected CreatorProperty[] _delegateArguments;\n     \n     // // // Scalar construction\n \n \n         _delegateType = src._delegateType;\n         _delegateCreator = src._delegateCreator;\n+        _delegateArguments = src._delegateArguments;\n         \n         _fromStringCreator = src._fromStringCreator;\n         _fromIntCreator = src._fromIntCreator;\n      * three), and clear other properties\n      */\n     public void configureFromObjectSettings(AnnotatedWithParams defaultCreator,\n-            AnnotatedWithParams delegateCreator, JavaType delegateType,\n+            AnnotatedWithParams delegateCreator, JavaType delegateType, CreatorProperty[] delegateArgs,\n             AnnotatedWithParams withArgsCreator, CreatorProperty[] constructorArgs)\n     {\n         _defaultCreator = defaultCreator;\n         _delegateCreator = delegateCreator;\n         _delegateType = delegateType;\n+        _delegateArguments = delegateArgs;\n         _withArgsCreator = withArgsCreator;\n         _constructorArguments = constructorArgs;\n     }\n             throw new IllegalStateException(\"No delegate constructor for \"+getValueTypeDesc());\n         }\n         try {\n-            return _delegateCreator.call1(delegate);\n+            // First simple case: just delegate, no injectables\n+            if (_delegateArguments == null) {\n+                return _delegateCreator.call1(delegate);\n+            }\n+            // And then the case with at least one injectable...\n+            final int len = _delegateArguments.length;\n+            Object[] args = new Object[len];\n+            for (int i = 0; i < len; ++i) {\n+                CreatorProperty prop = _delegateArguments[i];\n+                if (prop == null) { // delegate\n+                    args[i] = delegate;\n+                } else { // nope, injectable:\n+                    args[i] = ctxt.findInjectableValue(prop.getInjectableValueId(), prop, null);\n+                }\n+            }\n+            // and then try calling with full set of arguments\n+            return _delegateCreator.call(args);\n         } catch (ExceptionInInitializerError e) {\n             throw wrapException(e);\n         } catch (Exception e) {\n--- a/src/test/java/com/fasterxml/jackson/failing/TestDelegatingCreators.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestDelegatingCreators.java\n             age = a;\n         }\n     }\n+\n+    static class FactoryBean711\n+    {\n+        protected String name1;\n+        protected String name2;\n+        protected int age;\n+        \n+        private FactoryBean711(int a, String n1, String n2) {\n+            age = a;\n+            name1 = n1;\n+            name2 = n2;\n+        }\n+        \n+        @JsonCreator\n+        public static FactoryBean711 create(@JacksonInject String n1, int a, @JacksonInject String n2) {\n+            return new FactoryBean711(a, n1, n2);\n+        }\n+    }\n     \n     /*\n     /**********************************************************\n         assertEquals(38, bean.age);\n         assertEquals(\"Pooka\", bean.name);\n     }\n+\n+    public void testWithFactoryAndDelegate() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.setInjectableValues(new InjectableValues.Std()\n+            .addValue(String.class, \"Fygar\")\n+            );\n+        FactoryBean711 bean = null;\n+        try {\n+            bean = mapper.readValue(\"38\", FactoryBean711.class);\n+        } catch (JsonMappingException e) {\n+            fail(\"Did not expect problems, got: \"+e.getMessage());\n+        }\n+        assertEquals(38, bean.age);\n+        assertEquals(\"Fygar\", bean.name1);\n+        assertEquals(\"Fygar\", bean.name2);\n+    }\n }", "timestamp": 1327017488, "metainfo": ""}