{"sha": "64fd181b503bf725fd9b510c6bb398573e11e07f", "log": "Start using `JsonGenerator.writeStartArray(int)` (introduced in 2.4)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n     @Override\n     public void serialize(JsonGenerator jg, SerializerProvider provider) throws IOException, JsonProcessingException\n     {\n-        jg.writeStartArray();\n-        for (JsonNode n : _children) {\n-            /* 17-Feb-2009, tatu: Can we trust that all nodes will always\n-             *   extend BaseJsonNode? Or if not, at least implement\n-             *   JsonSerializable? Let's start with former, change if\n-             *   we must.\n-             */\n-            ((BaseJsonNode)n).serialize(jg, provider);\n+    \tfinal List<JsonNode> c = _children;\n+    \tfinal int size = c.size();\n+        jg.writeStartArray(size);\n+        for (int i = 0; i < size; ++i) { // we'll typically have array list\n+        \t// Can we trust that all nodes will always extend BaseJsonNode? Or if not,\n+        \t// at least implement JsonSerializable? Let's start with former, change if must\n+            ((BaseJsonNode) c.get(i)).serialize(jg, provider);\n         }\n         jg.writeEndArray();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedListSerializer.java\n package com.fasterxml.jackson.databind.ser.impl;\n \n import java.io.IOException;\n-import java.util.LinkedList;\n-import java.util.List;\n+import java.util.*;\n \n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n     public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n         return new IndexedListSerializer(_elementType, _staticTyping, vts, _property, _elementSerializer);\n     }\n+\n+    @Override\n+    public final void serialize(List<?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n+    {\n+    \tfinal int len = value.size();\n+        if ((len == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) {\n+            serializeContents(value, jgen, provider);\n+            return;\n+        }\n+        jgen.writeStartArray(len);\n+        serializeContents(value, jgen, provider);\n+        jgen.writeEndArray();\n+    }\n     \n     @Override\n     public void serializeContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n                 }\n             }\n         } catch (Exception e) {\n-            // [JACKSON-55] Need to add reference information\n             wrapAndThrow(provider, e, value, i);\n         }\n     }\n     \n     public void serializeContentsUsing(List<?> value, JsonGenerator jgen, SerializerProvider provider,\n             JsonSerializer<Object> ser)\n-        throws IOException, JsonGenerationException\n+        throws IOException\n     {\n         final int len = value.size();\n         if (len == 0) {\n     }\n \n     public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+        throws IOException\n     {\n         final int len = value.size();\n         if (len == 0) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n             return;\n         }\n         \n-        jgen.writeStartArray();\n+        jgen.writeStartArray(len);\n         if (_serializer == null) {\n             serializeContents(value, jgen, provider, len);\n         } else {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IteratorSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IteratorSerializer.java\n import java.io.IOException;\n import java.util.Iterator;\n \n-import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n     }\n \n     @Override\n+    public final void serialize(Iterator<?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n+    {\n+        if (provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED) && hasSingleElement(value)) {\n+            serializeContents(value, jgen, provider);\n+            return;\n+        }\n+        jgen.writeStartArray();\n+        serializeContents(value, jgen, provider);\n+        jgen.writeEndArray();\n+    }\n+    \n+    @Override\n     public void serializeContents(Iterator<?> value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+        throws IOException\n     {\n         if (value.hasNext()) {\n             final TypeSerializer typeSer = _valueTypeSerializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n \n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n     /* Actual serialization\n     /**********************************************************\n      */\n+    \n+    @Override\n+    public final void serialize(String[] value, JsonGenerator jgen, SerializerProvider provider)\n+        throws IOException, JsonGenerationException\n+    {\n+    \tfinal int len = value.length;\n+        if ((len == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) {\n+            serializeContents(value, jgen, provider);\n+            return;\n+        }\n+        jgen.writeStartArray(len);\n+        serializeContents(value, jgen, provider);\n+        jgen.writeEndArray();\n+    }\n     \n     @Override\n     public void serializeContents(String[] value, JsonGenerator jgen, SerializerProvider provider)\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n         throws IOException, JsonGenerationException\n     {\n         // [JACKSON-805]\n-        if ((value.size() == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) {\n+    \tfinal int len = value.size();\n+        if ((len == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) {\n             _serializeUnwrapped(value, jgen, provider);\n             return;\n         }      \n-        jgen.writeStartArray();\n+        jgen.writeStartArray(len);\n         if (_serializer == null) {\n             serializeContents(value, jgen, provider);\n         } else {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java\n         super(src._handledType, false);\n         _property = property;\n     }\n-    \n+\n+    // NOTE: as of 2.5, sub-classes SHOULD override (in 2.4 and before, was final),\n+    // at least if they can provide access to actual size of value and use `writeStartArray()`\n+    // variant that passes size of array to output, which is helpful with some data formats\n     @Override\n-    public final void serialize(T value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+    public void serialize(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n     {\n-        // [JACKSON-805]\n         if (provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)\n                 && hasSingleElement(value)) {\n             serializeContents(value, jgen, provider);\n         serializeContents(value, jgen, provider);\n         jgen.writeEndArray();\n     }\n-    \n+\n     @Override\n     public final void serializeWithType(T value, JsonGenerator jgen, SerializerProvider provider,\n             TypeSerializer typeSer)\n         serializeContents(value, jgen, provider);\n         typeSer.writeTypeSuffixForArray(value, jgen);\n     }\n-\n+    \n     protected abstract void serializeContents(T value, JsonGenerator jgen, SerializerProvider provider)\n         throws IOException, JsonGenerationException;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n     /* Serialization\n     /**********************************************************\n      */\n-    \n-    @Override\n-    public final void serialize(T value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n-    {\n-        // [JACKSON-805]\n+\n+    // NOTE: as of 2.5, sub-classes SHOULD override (in 2.4 and before, was final),\n+    // at least if they can provide access to actual size of value and use `writeStartArray()`\n+    // variant that passes size of array to output, which is helpful with some data formats\n+    @Override\n+    public void serialize(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n+    {\n         if (provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)\n                 && hasSingleElement(value)) {\n             serializeContents(value, jgen, provider);\n         jgen.writeEndArray();\n     }\n \n-    // Note: was 'final' modifier in 2.2 and before; no real need to be, removed\n     @Override\n     public void serializeWithType(T value, JsonGenerator jgen, SerializerProvider provider,\n-            TypeSerializer typeSer)\n-        throws IOException, JsonGenerationException\n+            TypeSerializer typeSer) throws IOException\n     {\n         // note: let's NOT consider [JACKSON-805] here; gets too complicated, and probably just won't work\n         typeSer.writeTypePrefixForArray(value, jgen);\n     }\n \n     protected abstract void serializeContents(T value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException;\n+        throws IOException;\n \n     @SuppressWarnings(\"deprecation\")\n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n         it.next();\n         return !it.hasNext();\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Actual serialization\n     /**********************************************************\n      */\n+\n+    @Override\n+    public final void serialize(Collection<?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n+    {\n+    \tfinal int len = value.size();\n+        if ((len == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) {\n+            serializeContents(value, jgen, provider);\n+            return;\n+        }\n+        jgen.writeStartArray(len);\n+        serializeContents(value, jgen, provider);\n+        jgen.writeEndArray();\n+    }\n     \n     @Override\n-    public void serializeContents(Collection<?> value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+    public void serializeContents(Collection<?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n     {\n         if (_elementSerializer != null) {\n             serializeContentsUsing(value, jgen, provider, _elementSerializer);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n-import java.util.EnumSet;\n+import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n     public boolean hasSingleElement(EnumSet<? extends Enum<?>> value) {\n         return value.size() == 1;\n     }\n+\n+    @Override\n+    public final void serialize(EnumSet<? extends Enum<?>> value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n+    {\n+    \tfinal int len = value.size();\n+        if ((len == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) {\n+            serializeContents(value, jgen, provider);\n+            return;\n+        }\n+        jgen.writeStartArray(len);\n+        serializeContents(value, jgen, provider);\n+        jgen.writeEndArray();\n+    }\n     \n     @Override\n     public void serializeContents(EnumSet<? extends Enum<?>> value, JsonGenerator jgen, SerializerProvider provider)\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n-import java.util.Iterator;\n+import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n         }\n         return false;\n     }\n+\n+    @Override\n+    public final void serialize(Iterable<?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n+    {\n+        if (provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED) && hasSingleElement(value)) {\n+            serializeContents(value, jgen, provider);\n+            return;\n+        }\n+        jgen.writeStartArray();\n+        serializeContents(value, jgen, provider);\n+        jgen.writeEndArray();\n+    }\n     \n     @Override\n     public void serializeContents(Iterable<?> value, JsonGenerator jgen, SerializerProvider provider)\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n     /* Actual serialization\n     /**********************************************************\n      */\n+\n+    @Override\n+    public final void serialize(Object[] value, JsonGenerator jgen, SerializerProvider provider)\n+        throws IOException, JsonGenerationException\n+    {\n+    \tfinal int len = value.length;\n+        if ((len == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) {\n+            serializeContents(value, jgen, provider);\n+            return;\n+        }\n+        jgen.writeStartArray(len);\n+        serializeContents(value, jgen, provider);\n+        jgen.writeEndArray();\n+    }\n     \n     @Override\n     public void serializeContents(Object[] value, JsonGenerator jgen, SerializerProvider provider)\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n import java.util.HashMap;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;\n         public boolean hasSingleElement(boolean[] value) {\n             return (value.length == 1);\n         }\n+\n+        @Override\n+        public final void serialize(boolean[] value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n+        {\n+        \tfinal int len = value.length;\n+            if ((len == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) {\n+                serializeContents(value, jgen, provider);\n+                return;\n+            }\n+            jgen.writeStartArray(len);\n+            serializeContents(value, jgen, provider);\n+            jgen.writeEndArray();\n+        }\n         \n         @Override\n         public void serializeContents(boolean[] value, JsonGenerator jgen, SerializerProvider provider)\n         public boolean hasSingleElement(short[] value) {\n             return (value.length == 1);\n         }\n+\n+        @Override\n+        public final void serialize(short[] value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n+        {\n+        \tfinal int len = value.length;\n+            if ((len == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) {\n+                serializeContents(value, jgen, provider);\n+                return;\n+            }\n+            jgen.writeStartArray(len);\n+            serializeContents(value, jgen, provider);\n+            jgen.writeEndArray();\n+        }\n         \n         @SuppressWarnings(\"cast\")\n         @Override\n         {\n             // [JACKSON-289] allows serializing as 'sparse' char array too:\n             if (provider.isEnabled(SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS)) {\n-                jgen.writeStartArray();\n+                jgen.writeStartArray(value.length);\n                 _writeArrayContents(jgen, value);\n                 jgen.writeEndArray();\n             } else {\n         }\n \n         @Override\n+        public final void serialize(int[] value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n+        {\n+        \tfinal int len = value.length;\n+            if ((len == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) {\n+                serializeContents(value, jgen, provider);\n+                return;\n+            }\n+            jgen.writeStartArray(len);\n+            serializeContents(value, jgen, provider);\n+            jgen.writeEndArray();\n+        }\n+\n+        @Override\n         public void serializeContents(int[] value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n+            throws IOException\n         {\n             for (int i = 0, len = value.length; i < len; ++i) {\n                 jgen.writeNumber(value[i]);\n         public boolean hasSingleElement(long[] value) {\n             return (value.length == 1);\n         }\n+\n+        @Override\n+        public final void serialize(long[] value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n+        {\n+        \tfinal int len = value.length;\n+            if ((len == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) {\n+                serializeContents(value, jgen, provider);\n+                return;\n+            }\n+            jgen.writeStartArray(len);\n+            serializeContents(value, jgen, provider);\n+            jgen.writeEndArray();\n+        }\n         \n         @Override\n         public void serializeContents(long[] value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n+            throws IOException\n         {\n             if (_valueTypeSerializer != null) {\n                 for (int i = 0, len = value.length; i < len; ++i) {\n         public boolean hasSingleElement(float[] value) {\n             return (value.length == 1);\n         }\n+\n+        @Override\n+        public final void serialize(float[] value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n+        {\n+        \tfinal int len = value.length;\n+            if ((len == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) {\n+                serializeContents(value, jgen, provider);\n+                return;\n+            }\n+            jgen.writeStartArray(len);\n+            serializeContents(value, jgen, provider);\n+            jgen.writeEndArray();\n+        }\n         \n         @Override\n         public void serializeContents(float[] value, JsonGenerator jgen, SerializerProvider provider)\n         public boolean hasSingleElement(double[] value) {\n             return (value.length == 1);\n         }\n-        \n-        @Override\n-        public void serializeContents(double[] value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n+\n+        @Override\n+        public final void serialize(double[] value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n+        {\n+        \tfinal int len = value.length;\n+            if ((len == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) {\n+                serializeContents(value, jgen, provider);\n+                return;\n+            }\n+            jgen.writeStartArray(len);\n+            serializeContents(value, jgen, provider);\n+            jgen.writeEndArray();\n+        }\n+        \n+        @Override\n+        public void serializeContents(double[] value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n         {\n             for (int i = 0, len = value.length; i < len; ++i) {\n                 jgen.writeNumber(value[i]);\n         \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-                throws JsonMappingException\n+            throws JsonMappingException\n         {\n             if (visitor != null) {\n                 JsonArrayFormatVisitor v2 = visitor.expectArrayFormat(typeHint);\n--- a/src/test/java/com/fasterxml/jackson/databind/TestObjectMapper.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestObjectMapper.java\n         assertEquals(0, m.getDeserializationConfig().mixInCount());\n         assertEquals(0, m2.getDeserializationConfig().mixInCount());\n \n-        m.addMixInAnnotations(String.class, Integer.class);\n+        m.addMixIn(String.class, Integer.class);\n         assertEquals(1, m.getSerializationConfig().mixInCount());\n         assertEquals(0, m2.getSerializationConfig().mixInCount());\n         assertEquals(1, m.getDeserializationConfig().mixInCount());\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators.java\n     public void testFactoryCreatorWithMixin() throws Exception\n     {\n         ObjectMapper m = new ObjectMapper();\n-        m.addMixInAnnotations(CreatorBean.class, MixIn.class);\n+        m.addMixIn(CreatorBean.class, MixIn.class);\n         CreatorBean bean = m.readValue\n             (\"{ \\\"a\\\" : \\\"xyz\\\", \\\"x\\\" : 12 }\", CreatorBean.class);\n         assertEquals(11, bean.x);\n     public void testFactoryCreatorWithRenamingMixin() throws Exception\n     {\n         ObjectMapper m = new ObjectMapper();\n-        m.addMixInAnnotations(FactoryBean.class, FactoryBeanMixIn.class);\n+        m.addMixIn(FactoryBean.class, FactoryBeanMixIn.class);\n         // override changes property name from \"f\" to \"mixed\"\n         FactoryBean bean = m.readValue(\"{ \\\"mixed\\\" :  20.5 }\", FactoryBean.class);\n         assertEquals(20.5, bean.d);\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedArrayDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedArrayDeserialization.java\n     {\n         ObjectMapper m = new ObjectMapper();\n         // use class name, WRAPPER_OBJECT\n-        m.addMixInAnnotations(long[].class, WrapperMixIn.class);\n+        m.addMixIn(long[].class, WrapperMixIn.class);\n         String JSON = \"{\\\"\"+long[].class.getName()+\"\\\":[5, 6, 7]}\";\n         long[] value = m.readValue(JSON, long[].class);\n         assertNotNull(value);\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedArraySerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedArraySerialization.java\n     public void testIntArray() throws Exception\n     {\n         ObjectMapper m = new ObjectMapper();\n-        m.addMixInAnnotations(int[].class, WrapperMixIn.class);\n+        m.addMixIn(int[].class, WrapperMixIn.class);\n         int[] input = new int[] { 1, 2, 3 };\n         String clsName = int[].class.getName();\n         assertEquals(\"{\\\"\"+clsName+\"\\\":[1,2,3]}\", serializeAsString(m, input));\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedDeserialization.java\n     public void testTypeAsWrapper() throws Exception\n     {\n         ObjectMapper m = new ObjectMapper();\n-        m.addMixInAnnotations(Animal.class, TypeWithWrapper.class);\n+        m.addMixIn(Animal.class, TypeWithWrapper.class);\n         String JSON = \"{\\\".TestTypedDeserialization$Dog\\\" : \"\n             +asJSONObjectValueString(m, \"name\", \"Scooby\", \"boneCount\", \"6\")+\" }\";\n         Animal a = m.readValue(JSON, Animal.class);\n     public void testTypeAsArray() throws Exception\n     {\n         ObjectMapper m = new ObjectMapper();\n-        m.addMixInAnnotations(Animal.class, TypeWithArray.class);\n+        m.addMixIn(Animal.class, TypeWithArray.class);\n         // hmmh. Not good idea to rely on exact output, order may change. But...\n         String JSON = \"[\\\"\"+Dog.class.getName()+\"\\\", \"\n             +asJSONObjectValueString(m, \"name\", \"Martti\", \"boneCount\", \"11\")+\" ]\";\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedSerialization.java\n     public void testTypeAsWrapper() throws Exception\n     {\n         ObjectMapper m = new ObjectMapper();\n-        m.addMixInAnnotations(Animal.class, TypeWithWrapper.class);\n+        m.addMixIn(Animal.class, TypeWithWrapper.class);\n         Map<String,Object> result = writeAndMap(m, new Cat(\"Venla\", \"black\"));\n         // should get a wrapper; keyed by minimal class name (\"Cat\" here)\n         assertEquals(1, result.size());\n     public void testTypeAsArray() throws Exception\n     {\n         ObjectMapper m = new ObjectMapper();\n-        m.addMixInAnnotations(Animal.class, TypeWithArray.class);\n+        m.addMixIn(Animal.class, TypeWithArray.class);\n         // hmmh. Not good idea to rely on exact output, order may change. But...\n         Map<String,Object> result = writeAndMap(m, new AnimalWrapper(new Dog(\"Amadeus\", 7)));\n         // First level, wrapper\n--- a/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinDeserForClass.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinDeserForClass.java\n          * use field\n          */\n         m = new ObjectMapper();\n-        m.addMixInAnnotations(LeafClass.class, MixIn.class);\n+        m.addMixIn(LeafClass.class, MixIn.class);\n         result = m.readValue(\"{\\\"a\\\":\\\"value\\\"}\", LeafClass.class);\n         assertEquals(\"value\", result.a);\n     }\n     public void testClassMixInsMidLevel() throws IOException\n     {\n         ObjectMapper m = new ObjectMapper();\n-        m.addMixInAnnotations(BaseClass.class, MixIn.class);\n+        m.addMixIn(BaseClass.class, MixIn.class);\n         {\n             BaseClass result = m.readValue(\"{\\\"a\\\":\\\"value\\\"}\", BaseClass.class);\n             assertEquals(\"value\", result.a);\n     public void testClassMixInsForObjectClass() throws IOException\n     {\n         ObjectMapper m = new ObjectMapper();\n-        m.addMixInAnnotations(Object.class, MixIn.class);\n+        m.addMixIn(Object.class, MixIn.class);\n         // will be seen for BaseClass\n         {\n             BaseClass result = m.readValue(\"{\\\"a\\\":\\\"\\\"}\", BaseClass.class);\n--- a/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinDeserForCreators.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinDeserForCreators.java\n     public void testForConstructor() throws IOException\n     {\n         ObjectMapper m = new ObjectMapper();\n-        m.addMixInAnnotations(BaseClassWithPrivateCtor.class, MixInForPrivate.class);\n+        m.addMixIn(BaseClassWithPrivateCtor.class, MixInForPrivate.class);\n         BaseClassWithPrivateCtor result = m.readValue(\"\\\"?\\\"\", BaseClassWithPrivateCtor.class);\n         assertEquals(\"?...\", result._a);\n     }\n \n         // Then with simple mix-in: should change to use the factory method\n         m = new ObjectMapper();\n-        m.addMixInAnnotations(BaseClass.class, MixIn.class);\n+        m.addMixIn(BaseClass.class, MixIn.class);\n         result = m.readValue(\"\\\"string\\\"\", BaseClass.class);\n         assertEquals(\"stringX\", result._a);\n     }\n     public void testFactoryMixIn() throws IOException\n     {\n         ObjectMapper m = new ObjectMapper();\n-        m.addMixInAnnotations(StringWrapper.class, StringWrapperMixIn.class);\n+        m.addMixIn(StringWrapper.class, StringWrapperMixIn.class);\n         StringWrapper result = m.readValue(\"\\\"a\\\"\", StringWrapper.class);\n         assertEquals(\"a\", result._value);\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinDeserForMethods.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinDeserForMethods.java\n     public void testWithAnySetter() throws IOException\n     {\n         ObjectMapper m = new ObjectMapper();\n-        m.addMixInAnnotations(BaseClass.class, MixIn.class);\n+        m.addMixIn(BaseClass.class, MixIn.class);\n         BaseClass result = m.readValue(\"{ \\\"a\\\" : 3, \\\"b\\\" : true }\", BaseClass.class);\n         assertNotNull(result);\n         assertEquals(2, result.values.size());\n--- a/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinInheritance.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinInheritance.java\n     public void testMixinFieldInheritance() throws IOException\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        mapper.addMixInAnnotations(Beano.class, BeanoMixinSub.class);\n+        mapper.addMixIn(Beano.class, BeanoMixinSub.class);\n         Map<String,Object> result;\n         result = writeAndMap(mapper, new Beano());\n         assertEquals(2, result.size());\n     public void testMixinMethodInheritance() throws IOException\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        mapper.addMixInAnnotations(Beano2.class, BeanoMixinSub2.class);\n+        mapper.addMixIn(Beano2.class, BeanoMixinSub2.class);\n         Map<String,Object> result;\n         result = writeAndMap(mapper, new Beano2());\n         assertEquals(2, result.size());\n--- a/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerForClass.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerForClass.java\n \n         // then with top-level override\n         mapper = new ObjectMapper();\n-        mapper.addMixInAnnotations(LeafClass.class, MixIn.class);\n+        mapper.addMixIn(LeafClass.class, MixIn.class);\n         result = writeAndMap(mapper, new LeafClass(\"abc\"));\n         assertEquals(2, result.size());\n         assertEquals(\"abc\", result.get(\"a\"));\n \n         // mid-level override; should not have any effect\n         mapper = new ObjectMapper();\n-        mapper.addMixInAnnotations(BaseClass.class, MixIn.class);\n+        mapper.addMixIn(BaseClass.class, MixIn.class);\n         result = writeAndMap(mapper, new LeafClass(\"abc\"));\n         assertEquals(1, result.size());\n         assertEquals(\"abc\", result.get(\"a\"));\n \n         // then with working mid-level override, which effectively suppresses 'a'\n         mapper = new ObjectMapper();\n-        mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class);\n+        mapper.addMixIn(BaseClass.class, MixInAutoDetect.class);\n         result = writeAndMap(mapper, bean);\n         assertEquals(1, result.size());\n         assertEquals(\"c2\", result.get(\"c\"));\n--- a/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerForFields.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerForFields.java\n \n         // and then with simple mix-in\n         mapper = new ObjectMapper();\n-        mapper.addMixInAnnotations(BaseClass.class, MixIn.class);\n+        mapper.addMixIn(BaseClass.class, MixIn.class);\n         result = writeAndMap(mapper, bean);\n         assertEquals(2, result.size());\n         assertEquals(\"1\", result.get(\"a\"));\n         HashMap<Class<?>,Class<?>> mixins = new HashMap<Class<?>,Class<?>>();\n         mixins.put(SubClass.class, MixIn.class);\n         mixins.put(BaseClass.class, MixIn2.class);\n-        mapper.setMixInAnnotations(mixins);\n+        mapper.setMixIns(mixins);\n \n         Map<String,Object> result;\n         result = writeAndMap(mapper, new SubClass(\"1\", \"2\"));\n--- a/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerForMethods.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerForMethods.java\n \n         // then with leaf-level mix-in\n         mapper = new ObjectMapper();\n-        mapper.addMixInAnnotations(BaseClass.class, MixIn.class);\n+        mapper.addMixIn(BaseClass.class, MixIn.class);\n         result = writeAndMap(mapper, bean);\n         assertEquals(2, result.size());\n         assertEquals(\"b2\", result.get(\"b2\"));\n         Map<String,Object> result;\n         LeafClass bean = new LeafClass(\"XXX\", \"b2\");\n \n-        mapper.addMixInAnnotations(BaseClass.class, MixIn.class);\n+        mapper.addMixIn(BaseClass.class, MixIn.class);\n         result = writeAndMap(mapper, bean);\n         assertEquals(1, result.size());\n         assertEquals(\"XXX\", result.get(\"a\"));\n     public void testIntermediateMixin2() throws IOException\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        mapper.addMixInAnnotations(EmptyBean.class, MixInForSimple.class);\n+        mapper.addMixIn(EmptyBean.class, MixInForSimple.class);\n         Map<String,Object> result = writeAndMap(mapper, new SimpleBean());\n         assertEquals(1, result.size());\n         assertEquals(Integer.valueOf(42), result.get(\"x\"));\n     public void testObjectMixin() throws IOException\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        mapper.addMixInAnnotations(Object.class, ObjectMixIn.class);\n+        mapper.addMixIn(Object.class, ObjectMixIn.class);\n \n         // First, with our bean...\n         Map<String,Object> result = writeAndMap(mapper, new BaseClass(\"a\", \"b\"));\n--- a/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerWithViews.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerWithViews.java\n \n         // Property SerializationConfig.SerializationFeature.DEFAULT_VIEW_INCLUSION set to false\n         mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, Boolean.FALSE);\n-        mapper.addMixInAnnotations(A.class, AMixInAnnotation.class);\n+        mapper.addMixIn(A.class, AMixInAnnotation.class);\n         String json = mapper.writerWithView(AView.class).writeValueAsString(a);\n \n         assertTrue(json.indexOf(\"\\\"name\\\"\") > 0);\n       sourceMixins.put( SimpleTestData.class, TestDataJAXBMixin.class );\n       sourceMixins.put( ComplexTestData.class, TestComplexDataJAXBMixin.class );\n       \n-      objectMapper.setMixInAnnotations(sourceMixins);\n+      objectMapper.setMixIns(sourceMixins);\n       return objectMapper;\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifierNameResolution.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifierNameResolution.java\n \t{\n \t\tObjectMapper mapper = new ObjectMapper();\n \t\tmapper.setTypeFactory(mapper.getTypeFactory().withModifier(new CustomTypeModifier()));\n-\t\tmapper.addMixInAnnotations(MyType.class, Mixin.class);\n+\t\tmapper.addMixIn(MyType.class, Mixin.class);\n \n \t\tMyType obj = new MyTypeImpl();\n \t\tobj.setData(\"something\");\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n     {\n         String JSON = \"{\\\"leaf\\\":{\\\"value\\\":13}}\";\n         ObjectMapper mapper = new ObjectMapper();\n-        mapper.addMixInAnnotations(Leaf.class, LeafMixIn.class);\n+        mapper.addMixIn(Leaf.class, LeafMixIn.class);\n         JsonNode root = mapper.readTree(JSON);\n         // Ok, try converting to bean using two mechanisms\n         Root r1 = mapper.treeToValue(root, Root.class);\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java\n     public void testCustomization() throws Exception\n     {\n         ObjectMapper objectMapper = new ObjectMapper();\n-        objectMapper.addMixInAnnotations(Element.class, ElementMixin.class);\n+        objectMapper.addMixIn(Element.class, ElementMixin.class);\n         Element element = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument().createElement(\"el\");\n         StringWriter sw = new StringWriter();\n         objectMapper.writeValue(sw, element);\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestEmptyClass.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestEmptyClass.java\n \n         // Including class annotation through mix-ins\n         ObjectMapper m2 = new ObjectMapper();\n-        m2.addMixInAnnotations(Empty.class, EmptyWithAnno.class);\n+        m2.addMixIn(Empty.class, EmptyWithAnno.class);\n         assertEquals(\"{}\", m2.writeValueAsString(new Empty()));\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n     {\n         // can't share, as new mix-ins are added\n         ObjectMapper m = new ObjectMapper();\n-        m.addMixInAnnotations(TestEnum.class, ToStringMixin.class);\n+        m.addMixIn(TestEnum.class, ToStringMixin.class);\n         assertEquals(\"\\\"b\\\"\", m.writeValueAsString(TestEnum.B));\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestSerializationOrder.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestSerializationOrder.java\n     public void testOrderWithMixins() throws Exception\n     {\n         ObjectMapper m = new ObjectMapper();\n-        m.addMixInAnnotations(BeanWithOrder.class, OrderMixIn.class);\n+        m.addMixIn(BeanWithOrder.class, OrderMixIn.class);\n         assertEquals(\"{\\\"b\\\":2,\\\"a\\\":1,\\\"c\\\":3,\\\"d\\\":4}\",\n                 serializeAsString(m, new BeanWithOrder(1, 2, 3, 4)));\n     }", "timestamp": 1413078514, "metainfo": ""}