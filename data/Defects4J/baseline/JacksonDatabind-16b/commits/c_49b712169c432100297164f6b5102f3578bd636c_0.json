{"sha": "49b712169c432100297164f6b5102f3578bd636c", "log": "Removing BeanProperty from TypeDeserializer constructors, now added via fluent factories", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n \n         @Override\n         public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,\n-                JavaType baseType, Collection<NamedType> subtypes, BeanProperty property)\n+                JavaType baseType, Collection<NamedType> subtypes)\n         {\n-            return useForType(baseType) ? super.buildTypeDeserializer(config, baseType, subtypes, property) : null;\n+            return useForType(baseType) ? super.buildTypeDeserializer(config, baseType, subtypes) : null;\n         }\n \n         @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n         TypeDeserializer typeDeser = (TypeDeserializer) type.getTypeHandler();\n         // or if not, based on type being referenced:\n         if (typeDeser == null) {\n-            typeDeser = findTypeDeserializer(config, type, property);\n+            typeDeser = findTypeDeserializer(config, type);\n         }\n         CreatorProperty prop = new CreatorProperty(name, type, typeDeser,\n                 beanDesc.getClassAnnotations(), param, index, injectableValueId);\n         TypeDeserializer elemTypeDeser = elemType.getTypeHandler();\n         // but if not, may still be possible to find:\n         if (elemTypeDeser == null) {\n-            elemTypeDeser = findTypeDeserializer(ctxt.getConfig(), elemType, property);\n+            elemTypeDeser = findTypeDeserializer(ctxt.getConfig(), elemType);\n         }\n         // 23-Nov-2010, tatu: Custom array deserializer?\n         JsonDeserializer<?> custom = _findCustomArrayDeserializer(type,\n         TypeDeserializer contentTypeDeser = contentType.getTypeHandler();\n         // but if not, may still be possible to find:\n         if (contentTypeDeser == null) {\n-            contentTypeDeser = findTypeDeserializer(ctxt.getConfig(), contentType, property);\n+            contentTypeDeser = findTypeDeserializer(ctxt.getConfig(), contentType);\n         }\n \n         // 23-Nov-2010, tatu: Custom deserializer?\n     // Copied almost verbatim from \"createCollectionDeserializer\" -- should try to share more code\n     @Override\n     public JsonDeserializer<?> createCollectionLikeDeserializer(DeserializationContext ctxt,\n-            CollectionLikeType type, final BeanDescription beanDesc, BeanProperty property)\n+            CollectionLikeType type, final BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         JavaType contentType = type.getContentType();\n         TypeDeserializer contentTypeDeser = contentType.getTypeHandler();\n         // but if not, may still be possible to find:\n         if (contentTypeDeser == null) {\n-            contentTypeDeser = findTypeDeserializer(ctxt.getConfig(), contentType, property);\n+            contentTypeDeser = findTypeDeserializer(ctxt.getConfig(), contentType);\n         }\n         return _findCustomCollectionLikeDeserializer(type, ctxt.getConfig(), beanDesc,\n                 contentTypeDeser, contentDeser);\n         TypeDeserializer contentTypeDeser = contentType.getTypeHandler();\n         // but if not, may still be possible to find:\n         if (contentTypeDeser == null) {\n-            contentTypeDeser = findTypeDeserializer(config, contentType, property);\n+            contentTypeDeser = findTypeDeserializer(config, contentType);\n         }\n \n         // 23-Nov-2010, tatu: Custom deserializer?\n     // Copied almost verbatim from \"createMapDeserializer\" -- should try to share more code\n     @Override\n     public JsonDeserializer<?> createMapLikeDeserializer(DeserializationContext ctxt,\n-            MapLikeType type, final BeanDescription beanDesc, BeanProperty property)\n+            MapLikeType type, final BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         JavaType keyType = type.getKeyType();\n         TypeDeserializer contentTypeDeser = contentType.getTypeHandler();\n         // but if not, may still be possible to find:\n         if (contentTypeDeser == null) {\n-            contentTypeDeser = findTypeDeserializer(ctxt.getConfig(), contentType, property);\n+            contentTypeDeser = findTypeDeserializer(ctxt.getConfig(), contentType);\n         }\n         return _findCustomMapLikeDeserializer(type, ctxt.getConfig(),\n                 beanDesc, keyDes, contentTypeDeser, contentDeser);\n      */\n     @Override\n     public JsonDeserializer<?> createEnumDeserializer(DeserializationContext ctxt,\n-            JavaType type, BeanDescription beanDesc, BeanProperty property)\n+            JavaType type, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         Class<?> enumClass = type.getRawClass();\n \n     @Override\n     public TypeDeserializer findTypeDeserializer(DeserializationConfig config,\n-            JavaType baseType, BeanProperty property)\n+            JavaType baseType)\n         throws JsonMappingException\n     {\n         Class<?> cls = baseType.getRawClass();\n                 b = b.defaultImpl(defaultType.getRawClass());\n             }\n         }\n-        return b.buildTypeDeserializer(config, baseType, subtypes, property);\n+        return b.buildTypeDeserializer(config, baseType, subtypes);\n     }\n \n     /*\n      * \n      * @return Type deserializer to use for given base type, if one is needed; null if not.\n      */\n-    public TypeDeserializer findPropertyTypeDeserializer(DeserializationConfig config, JavaType baseType,\n-           AnnotatedMember annotated, BeanProperty property)\n+    public TypeDeserializer findPropertyTypeDeserializer(DeserializationConfig config,\n+            JavaType baseType, AnnotatedMember annotated)\n         throws JsonMappingException\n     {\n         AnnotationIntrospector ai = config.getAnnotationIntrospector();\n         TypeResolverBuilder<?> b = ai.findPropertyTypeResolver(config, annotated, baseType);        \n         // Defaulting: if no annotations on member, check value class\n         if (b == null) {\n-            return findTypeDeserializer(config, baseType, property);\n+            return findTypeDeserializer(config, baseType);\n         }\n         // but if annotations found, may need to resolve subtypes:\n-        Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypes(annotated, config, ai);\n-        return b.buildTypeDeserializer(config, baseType, subtypes, property);\n+        Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypes(annotated,\n+                config, ai);\n+        return b.buildTypeDeserializer(config, baseType, subtypes);\n     }\n     \n     /**\n      * @param containerType Type of property; must be a container type\n      * @param propertyEntity Field or method that contains container property\n      */    \n-    public TypeDeserializer findPropertyContentTypeDeserializer(DeserializationConfig config, JavaType containerType,\n-            AnnotatedMember propertyEntity, BeanProperty property)\n+    public TypeDeserializer findPropertyContentTypeDeserializer(DeserializationConfig config,\n+            JavaType containerType, AnnotatedMember propertyEntity)\n         throws JsonMappingException\n     {\n         AnnotationIntrospector ai = config.getAnnotationIntrospector();\n         JavaType contentType = containerType.getContentType();\n         // Defaulting: if no annotations on member, check class\n         if (b == null) {\n-            return findTypeDeserializer(config, contentType, property);\n+            return findTypeDeserializer(config, contentType);\n         }\n         // but if annotations found, may need to resolve subtypes:\n         Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypes(propertyEntity, config, ai);\n-        return b.buildTypeDeserializer(config, contentType, subtypes, property);\n-    }\n-    \n-    /*\n-    /**********************************************************\n-    /* Helper methods, factories\n-    /**********************************************************\n-     */\n+        return b.buildTypeDeserializer(config, contentType, subtypes);\n+    }\n \n     /*\n     /**********************************************************\n              */\n             if (member instanceof AnnotatedMember) {\n             \tTypeDeserializer contentTypeDeser = findPropertyContentTypeDeserializer(\n-            \t        ctxt.getConfig(), type, (AnnotatedMember) member, property);            \t\n+            \t        ctxt.getConfig(), type, (AnnotatedMember) member);            \t\n             \tif (contentTypeDeser != null) {\n             \t    type = type.withContentTypeHandler(contentTypeDeser);\n             \t}\n \n         if (member instanceof AnnotatedMember) { // JAXB allows per-property annotations\n             valueTypeDeser = findPropertyTypeDeserializer(ctxt.getConfig(),\n-                    type, (AnnotatedMember) member, property);\n+                    type, (AnnotatedMember) member);\n         } else { // classes just have Jackson annotations\n             // probably only occurs if 'property' is null anyway\n-            valueTypeDeser = findTypeDeserializer(ctxt.getConfig(), type, null);\n+            valueTypeDeser = findTypeDeserializer(ctxt.getConfig(), type);\n         }\n     \tif (valueTypeDeser != null) {\n             type = type.withTypeHandler(valueTypeDeser);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n         throws JsonMappingException\n     {\n         JsonDeserializer<Object> deser = findValueDeserializer(ctxt, type, null);\n-        TypeDeserializer typeDeser = _factory.findTypeDeserializer(ctxt.getConfig(), type, null);\n+        TypeDeserializer typeDeser = _factory.findTypeDeserializer(ctxt.getConfig(), type);\n         if (typeDeser != null) {\n+            // important: contextualize\n+            typeDeser = typeDeser.forProperty(null);\n             return new WrappedDeserializer(typeDeser, deser);\n         }\n         return deser;\n \n         // If not, let's see which factory method to use:\n         if (type.isEnumType()) {\n-            return (JsonDeserializer<Object>) _factory.createEnumDeserializer(ctxt, type,\n-                    beanDesc, property);\n+            return (JsonDeserializer<Object>) _factory.createEnumDeserializer(ctxt,\n+                    type, beanDesc);\n         }\n         if (type.isContainerType()) {\n             if (type.isArrayType()) {\n                             (MapType) mlt, beanDesc, property);\n                 }\n                 return (JsonDeserializer<Object>)_factory.createMapLikeDeserializer(ctxt,\n-                        mlt, beanDesc, property);\n+                        mlt, beanDesc);\n             }\n             if (type.isCollectionLikeType()) {\n                 CollectionLikeType clt = (CollectionLikeType) type;\n                             (CollectionType) clt, beanDesc, property);\n                 }\n                 return (JsonDeserializer<Object>)_factory.createCollectionLikeDeserializer(ctxt,\n-                        clt, beanDesc, property);\n+                        clt, beanDesc);\n             }\n         }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n         throws JsonMappingException;\n \n     public abstract JsonDeserializer<?> createCollectionLikeDeserializer(DeserializationContext ctxt,\n-            CollectionLikeType type, BeanDescription beanDesc, BeanProperty property)\n+            CollectionLikeType type, BeanDescription beanDesc)\n         throws JsonMappingException;\n     \n     public abstract JsonDeserializer<?> createEnumDeserializer(DeserializationContext ctxt,\n-            JavaType type, BeanDescription beanDesc, BeanProperty property)\n+            JavaType type, BeanDescription beanDesc)\n         throws JsonMappingException;\n \n     public abstract JsonDeserializer<?> createMapDeserializer(DeserializationContext ctxt,\n         throws JsonMappingException;\n \n     public abstract JsonDeserializer<?> createMapLikeDeserializer(DeserializationContext ctxt,\n-            MapLikeType type, BeanDescription beanDesc, BeanProperty property)\n+            MapLikeType type, BeanDescription beanDesc)\n         throws JsonMappingException;\n \n     /**\n      * @return Type deserializer to use for given base type, if one is needed; null if not.\n      */\n     public abstract TypeDeserializer findTypeDeserializer(DeserializationConfig config,\n-            JavaType baseType, BeanProperty property)\n+            JavaType baseType)\n         throws JsonMappingException;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n         }\n         _type = type;\n         _contextAnnotations = contextAnnotations;\n+        _viewMatcher = null;\n+\n+        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n+        if (typeDeser != null) {\n+            typeDeser = typeDeser.forProperty(this);\n+        }\n         _valueTypeDeserializer = typeDeser;\n-        _viewMatcher = null;\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n         _delegateDeserializer = src._delegateDeserializer;\n     }\n \n+    /**\n+     * Fluent-factory method call to construct contextual instance.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    protected CollectionDeserializer withResolved(JsonDeserializer<?> delegateDeser,\n+            JsonDeserializer<?> valueDeser, TypeDeserializer valueTypeDeser)\n+    {\n+        return new CollectionDeserializer(_collectionType,\n+                (JsonDeserializer<Object>) valueDeser, valueTypeDeser,\n+                _valueInstantiator, (JsonDeserializer<Object>) delegateDeser);\n+                \n+    }\n+    \n     /*\n     /**********************************************************\n     /* Validation, post-processing (ResolvableDeserializer)\n             BeanProperty property) throws JsonMappingException\n     {\n         // May need to resolve types for delegate-based creators:\n-        JsonDeserializer<Object> delegate = null;\n+        JsonDeserializer<Object> delegateDeser = null;\n         if ((_valueInstantiator != null) && _valueInstantiator.canCreateUsingDelegate()) {\n             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n             if (delegateType == null) {\n                         +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                         +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n             }\n-            delegate = findDeserializer(ctxt, delegateType, property);\n+            delegateDeser = findDeserializer(ctxt, delegateType, property);\n         }\n         // also, often value deserializer is resolved here:\n         JsonDeserializer<Object> valueDeser = _valueDeserializer;\n         if (valueDeser == null) {\n             valueDeser = (JsonDeserializer<Object>)ctxt.findValueDeserializer(_collectionType.getContentType(), property);\n         }\n-        return new CollectionDeserializer(_collectionType, valueDeser,\n-                _valueTypeDeserializer, _valueInstantiator, delegate);\n-                \n+        // and finally, type deserializer needs context as well\n+        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n+        if (valueTypeDeser != null) {\n+            valueTypeDeser = valueTypeDeser.forProperty(property);\n+        }\n+        return withResolved(delegateDeser, valueDeser, valueTypeDeser);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n     }\n \n     protected MapDeserializer(MapDeserializer src,\n-            KeyDeserializer keyDeser, JsonDeserializer<Object> valueDeser)\n+            KeyDeserializer keyDeser, JsonDeserializer<Object> valueDeser,\n+            TypeDeserializer valueTypeDeser)\n     {\n         super(src._valueClass);\n         _mapType = src._mapType;\n         _keyDeserializer = keyDeser;\n         _valueDeserializer = valueDeser;\n-        _valueTypeDeserializer = src._valueTypeDeserializer;\n+        _valueTypeDeserializer = valueTypeDeser;\n         _valueInstantiator = src._valueInstantiator;\n         _propertyBasedCreator = src._propertyBasedCreator;\n         _delegateDeserializer = src._delegateDeserializer;\n      * different settings. When sub-classing, MUST be overridden.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    protected MapDeserializer withResolved(//JsonDeserializer<Object> delegateDeser, PropertyBasedCreator propBasedCreator,\n-            KeyDeserializer keyDeser, JsonDeserializer<?> valueDeser)\n-    {\n-        return new MapDeserializer(this, // delegateDeser, propBasedCreator,\n-                keyDeser, (JsonDeserializer<Object>) valueDeser);\n+    protected MapDeserializer withResolved(KeyDeserializer keyDeser, JsonDeserializer<?> valueDeser,\n+            TypeDeserializer valueTypeDeser)\n+    {\n+        return new MapDeserializer(this,\n+                keyDeser, (JsonDeserializer<Object>) valueDeser, valueTypeDeser);\n     }\n     \n     /**\n         if (vd == null) {\n             vd = ctxt.findValueDeserializer(_mapType.getContentType(), property);\n         }\n-        return withResolved(kd, vd);\n+        TypeDeserializer vtd = _valueTypeDeserializer;\n+        if (vtd != null) {\n+            vtd = vtd.forProperty(property);\n+        }\n+        return withResolved(kd, vd, vtd);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n      * Overridable fluent-factory method used to create contextual instances\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public ObjectArrayDeserializer withDeserializer(JsonDeserializer<?> deser) {\n+    public ObjectArrayDeserializer withDeserializer(JsonDeserializer<?> elemDeser,\n+            TypeDeserializer elemTypeDeser) {\n         return new ObjectArrayDeserializer(_arrayType,\n-                (JsonDeserializer<Object>) deser, _elementTypeDeserializer);\n+                (JsonDeserializer<Object>) elemDeser, elemTypeDeser);\n     }\n \n     @Override\n         if (deser != null) {\n             return this;\n         }\n-        return withDeserializer(ctxt.findValueDeserializer(_arrayType.getContentType(), property));\n+        TypeDeserializer elemTypeDeser = _elementTypeDeserializer;\n+        if (elemTypeDeser != null) {\n+            elemTypeDeser = elemTypeDeser.forProperty(property);\n+        }\n+        return withDeserializer(ctxt.findValueDeserializer(_arrayType.getContentType(), property),\n+                elemTypeDeser);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n  */\n public abstract class TypeDeserializer\n {\n+    /*\n+    /**********************************************************\n+    /* Initialization\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method called to create contextual version, to be used for\n+     * values of given property. This may be the type itself\n+     * (as is the case for bean properties), or values contained\n+     * (for {@link java.util.Collection} or {@link java.util.Map}\n+     * valued properties).\n+     * \n+     * @since 2.0\n+     */\n+    public abstract TypeDeserializer forProperty(BeanProperty prop);\n+    \n     /*\n     /**********************************************************\n     /* Introspection\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java\n      *    handle; super type of all types it will be used for.\n      */\n     public TypeSerializer buildTypeSerializer(SerializationConfig config,\n-            JavaType baseType, Collection<NamedType> subtypes, BeanProperty property);\n+            JavaType baseType, Collection<NamedType> subtypes,\n+            BeanProperty property);            \n \n     /**\n      * Method for building type deserializer based on current configuration\n      *    handle; super type of all types it will be used for.\n      * @param subtypes Known subtypes of the base type.\n      */\n-    public TypeDeserializer buildTypeDeserializer( DeserializationConfig config,\n-            JavaType baseType, Collection<NamedType> subtypes, BeanProperty property);\n+    public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,\n+            JavaType baseType, Collection<NamedType> subtypes);\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java\n import com.fasterxml.jackson.core.util.JsonParserSequence;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n  */\n public class AsArrayTypeDeserializer extends TypeDeserializerBase\n {\n-    public AsArrayTypeDeserializer(JavaType bt, TypeIdResolver idRes, BeanProperty property,\n+    public AsArrayTypeDeserializer(JavaType bt, TypeIdResolver idRes,\n             String typePropertyName, boolean typeIdVisible, Class<?> defaultImpl)\n     {\n-        super(bt, idRes, property, typePropertyName, typeIdVisible, defaultImpl);\n+        super(bt, idRes, typePropertyName, typeIdVisible, defaultImpl);\n+    }\n+\n+    public AsArrayTypeDeserializer(AsArrayTypeDeserializer src, BeanProperty property) {\n+        super(src, property);\n+    }\n+    \n+    @Override\n+    public TypeDeserializer forProperty(BeanProperty prop) {\n+        if (prop == _property) { // usually if it's null\n+            return this;\n+        }\n+        return new AsArrayTypeDeserializer(this, prop);\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeDeserializer.java\n \n import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n \n /**\n  */\n public class AsExternalTypeDeserializer extends AsArrayTypeDeserializer\n {\n-    public AsExternalTypeDeserializer(JavaType bt, TypeIdResolver idRes, BeanProperty property,\n+    public AsExternalTypeDeserializer(JavaType bt, TypeIdResolver idRes,\n             String typePropertyName, boolean typeIdVisible, Class<?> defaultImpl)\n     {\n-        super(bt, idRes, property, typePropertyName, typeIdVisible, defaultImpl);\n+        super(bt, idRes, typePropertyName, typeIdVisible, defaultImpl);\n     }\n \n+    public AsExternalTypeDeserializer(AsExternalTypeDeserializer src, BeanProperty property) {\n+        super(src, property);\n+    }\n+    \n+    @Override\n+    public TypeDeserializer forProperty(BeanProperty prop)\n+    {\n+        if (prop == _property) { // usually if it's null\n+            return this;\n+        }\n+        return new AsExternalTypeDeserializer(this, prop);\n+    }\n+    \n     @Override\n     public As getTypeInclusion() {\n         return As.EXTERNAL_PROPERTY;\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n import com.fasterxml.jackson.core.util.JsonParserSequence;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n  */\n public class AsPropertyTypeDeserializer extends AsArrayTypeDeserializer\n {\n-    public AsPropertyTypeDeserializer(JavaType bt, TypeIdResolver idRes, BeanProperty property,\n+    public AsPropertyTypeDeserializer(JavaType bt, TypeIdResolver idRes,\n             String typePropertyName, boolean typeIdVisible, Class<?> defaultImpl)\n     {\n-        super(bt, idRes, property, typePropertyName, typeIdVisible, defaultImpl);\n-    }\n-\n+        super(bt, idRes, typePropertyName, typeIdVisible, defaultImpl);\n+    }\n+\n+    public AsPropertyTypeDeserializer(AsPropertyTypeDeserializer src, BeanProperty property) {\n+        super(src, property);\n+    }\n+    \n+    @Override\n+    public TypeDeserializer forProperty(BeanProperty prop) {\n+        if (prop == _property) { // usually if it's null\n+            return this;\n+        }\n+        return new AsPropertyTypeDeserializer(this, prop);\n+    }\n+    \n     @Override\n     public As getTypeInclusion() {\n         return As.PROPERTY;\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java\n import com.fasterxml.jackson.core.util.JsonParserSequence;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n  */\n public class AsWrapperTypeDeserializer extends TypeDeserializerBase\n {\n-    public AsWrapperTypeDeserializer(JavaType bt, TypeIdResolver idRes, BeanProperty property,\n+    public AsWrapperTypeDeserializer(JavaType bt, TypeIdResolver idRes,\n             String typePropertyName, boolean typeIdVisible, Class<?> defaultImpl)\n     {\n-        super(bt, idRes, property, typePropertyName, typeIdVisible, null);\n+        super(bt, idRes, typePropertyName, typeIdVisible, null);\n     }\n \n+    protected AsWrapperTypeDeserializer(AsWrapperTypeDeserializer src, BeanProperty property) {\n+        super(src, property);\n+    }\n+    \n+    @Override\n+    public TypeDeserializer forProperty(BeanProperty prop)\n+    {\n+        if (prop == _property) { // usually if it's null\n+            return this;\n+        }\n+        return new AsWrapperTypeDeserializer(this, prop);\n+    }\n+    \n     @Override\n     public As getTypeInclusion() {\n         return As.WRAPPER_OBJECT;\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java\n     \n     @Override\n     public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,\n-            JavaType baseType, Collection<NamedType> subtypes, BeanProperty property)\n+            JavaType baseType, Collection<NamedType> subtypes)\n     {\n         if (_idType == JsonTypeInfo.Id.NONE) {\n             return null;\n         // First, method for converting type info to type id:\n         switch (_includeAs) {\n         case WRAPPER_ARRAY:\n-            return new AsArrayTypeDeserializer(baseType, idRes, property,\n+            return new AsArrayTypeDeserializer(baseType, idRes,\n                     _typeProperty, _typeIdVisible, _defaultImpl);\n         case PROPERTY:\n-            return new AsPropertyTypeDeserializer(baseType, idRes, property,\n+            return new AsPropertyTypeDeserializer(baseType, idRes,\n                     _typeProperty, _typeIdVisible, _defaultImpl);\n         case WRAPPER_OBJECT:\n-            return new AsWrapperTypeDeserializer(baseType, idRes, property,\n+            return new AsWrapperTypeDeserializer(baseType, idRes,\n                     _typeProperty, _typeIdVisible, _defaultImpl);\n         case EXTERNAL_PROPERTY:\n-            return new AsExternalTypeDeserializer(baseType, idRes, property,\n+            return new AsExternalTypeDeserializer(baseType, idRes,\n                     _typeProperty, _typeIdVisible, _defaultImpl);\n         }\n         throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \"+_includeAs);\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n     \n     protected final JavaType _baseType;\n \n+    /**\n+     * Property that contains value for which type information\n+     * is included; null if value is a root value.\n+     * Note that this value is not assigned during construction\n+     * but only when {@link #forProperty} is called to create\n+     * a copy.\n+     */\n     protected final BeanProperty _property;\n \n     /**\n \n     protected JsonDeserializer<Object> _defaultImplDeserializer;\n \n-    protected TypeDeserializerBase(JavaType baseType, TypeIdResolver idRes, BeanProperty property,\n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+    \n+    protected TypeDeserializerBase(JavaType baseType, TypeIdResolver idRes,\n             String typePropertyName, boolean typeIdVisible, Class<?> defaultImpl)\n     {\n         _baseType = baseType;\n         _idResolver = idRes;\n-        _property = property;\n         _typePropertyName = typePropertyName;\n         _typeIdVisible = typeIdVisible;\n         _deserializers = new HashMap<String,JsonDeserializer<Object>>();\n              */\n             _defaultImpl = baseType.forcedNarrowBy(defaultImpl);\n         }\n+\n+        _property = null;\n     }\n \n+    protected TypeDeserializerBase(TypeDeserializerBase src, BeanProperty property)\n+    {\n+        _baseType = src._baseType;\n+        _idResolver = src._idResolver;\n+        _typePropertyName = src._typePropertyName;\n+        _typeIdVisible = src._typeIdVisible;\n+        _deserializers = src._deserializers;\n+        _defaultImpl = src._defaultImpl;\n+        _defaultImplDeserializer = src._defaultImplDeserializer;\n+\n+        _property = property;\n+    }\n+\n+    @Override\n+    public abstract TypeDeserializer forProperty(BeanProperty prop);\n+    \n+    /*\n+    /**********************************************************\n+    /* Accessors\n+    /**********************************************************\n+     */\n+    \n     @Override\n     public abstract JsonTypeInfo.As getTypeInclusion();\n \n     /**********************************************************\n      */\n \n-    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId)\n+    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n+            String typeId)\n         throws IOException, JsonProcessingException\n     {\n         JsonDeserializer<Object> deser;", "timestamp": 1327990401, "metainfo": ""}