{"sha": "effb8fd3a0d93c099d4a7b111cb93e6708a91b69", "log": "Start working on [JACKSON-107], added annotation, unit test", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n \n     /**\n      * Method for checking whether given accessor claims to represent\n+     * object id: if so, its value may be used to represent value,\n+     * in cases where value (along with id, presumably) has been\n+     * or will  be serialized in its entirety in some point.\n+     * This allows serialization of a POJO value just once, and\n+     * afterwards referring to the value using an object id\n+     * (which has to be a JSON scalar value, usually String or\n+     * integer)\n+     * \n+     * @since 2.0\n+     */\n+    public Boolean isObjectId(AnnotatedMember member) {\n+        return null;\n+    }\n+    \n+    /**\n+     * Method for checking whether given accessor claims to represent\n      * type id: if so, its value may be used as an override,\n      * instead of generated type id.\n      * \n             }\n             return b;\n         }\n+\n+        @Override\n+        public Boolean isObjectId(AnnotatedMember member) {\n+            Boolean b = _primary.isObjectId(member);\n+            if (b == null) {\n+                b = _secondary.isObjectId(member);\n+            }\n+            return b;\n+        }\n         \n         // // // Serialization: class annotations\n \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n     /*****************************************************\n     /* More refined access to configuration features\n     /* (usually based on annotations)\n+    /* Since most trivial implementations do not support\n+    /* these methods, they are implemented as no-ops.\n     /*****************************************************\n      */\n     \n     }\n \n     /**\n-     * Method used to check whether this logical property has marker(s)\n+     * Method used to check whether this logical property has a marker\n      * to indicate it should be used as the type id for polymorphic type\n      * handling.\n      */\n     public boolean isTypeId() {\n         return false;\n     }\n+\n+    /**\n+     * Method used to check whether this logical property has a marker\n+     * to indicate it represents Object Identity that can be used to\n+     * resolve cyclic dependencies (by being used in place of fully\n+     * value serialization)\n+     */\n+    public boolean isObjectId() {\n+        return false;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     public Boolean isTypeId(AnnotatedMember member) {\n         return member.hasAnnotation(JsonTypeId.class);\n     }\n+\n+    @Override\n+    public Boolean isObjectId(AnnotatedMember member) {\n+        return member.hasAnnotation(JsonObjectId.class);\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n         });\n     }\n \n+    @Override\n     public boolean isTypeId() {\n         Boolean b = fromMemberAnnotation(new WithMember<Boolean>() {\n             @Override public Boolean withMember(AnnotatedMember member) {\n                 return _annotationIntrospector.isTypeId(member);\n+            }\n+        });\n+        return (b != null) && b.booleanValue();\n+    }\n+\n+    @Override\n+    public boolean isObjectId() {\n+        Boolean b = fromMemberAnnotation(new WithMember<Boolean>() {\n+            @Override public Boolean withMember(AnnotatedMember member) {\n+                return _annotationIntrospector.isObjectId(member);\n             }\n         });\n         return (b != null) && b.booleanValue();\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectId.java\n+package com.fasterxml.jackson.databind.struct;\n+\n+import com.fasterxml.jackson.annotation.JsonObjectId;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestObjectId extends BaseMapTest\n+{\n+    static class Identifiable\n+    {\n+        @JsonObjectId\n+        public String id;\n+\n+        public int value;\n+\n+        public Identifiable next;\n+        \n+        public Identifiable() { this(null, 0); }\n+        public Identifiable(String id, int v) {\n+            this.id = id;\n+            value = v;\n+        }\n+    }\n+    \n+    /*\n+    /*****************************************************\n+    /* Unit tests\n+    /*****************************************************\n+     */\n+\n+    private final ObjectMapper mapper = new ObjectMapper();\n+    \n+    public void testSimpleCyclic() throws Exception\n+    {\n+        Identifiable src = new Identifiable(\"x123\", 13);\n+        src.next = src;\n+        \n+        // First, serialize:\n+        String json = mapper.writeValueAsString(src);\n+        assertEquals(\"{\\\"id\\\":\\\"x123\\\",\\\"value\\\":13,\\\"next\\\":\\\"x123\\\"}\", json);\n+        \n+        // then bring bacj...\n+        Identifiable result = mapper.readValue(json, Identifiable.class);\n+        assertEquals(13, result.value);\n+        assertEquals(\"x123\", result.id);\n+        assertSame(result, result.next);\n+    }\n+}", "timestamp": 1328412010, "metainfo": ""}