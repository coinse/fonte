{"sha": "cab3bf23a4a0f0811a74543d767fd4773d4d086d", "log": "Add unit test for #306", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestFiltering.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestFiltering.java\n         public void setUserPassword(String value) {\n             this.userPassword = value;\n         }\n+    }    \n \n-    }    \n+    // [Issue#306]: JsonFilter for properties, too!\n+\n+    @JsonPropertyOrder(alphabetic=true)\n+    static class FilteredProps\n+    {\n+        // will default to using \"RootFilter\", only including 'a'\n+        public Bean first = new Bean();\n+\n+        // but minimal includes 'b'\n+        @JsonFilter(\"b\")\n+        public Bean second = new Bean();\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Unit tests\n     /**********************************************************\n      */\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n     \n     public void testSimpleInclusionFilter() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         FilterProvider prov = new SimpleFilterProvider().addFilter(\"RootFilter\",\n                 SimpleBeanPropertyFilter.filterOutAllExcept(\"a\"));\n-        assertEquals(\"{\\\"a\\\":\\\"a\\\"}\", mapper.writer(prov).writeValueAsString(new Bean()));\n+        assertEquals(\"{\\\"a\\\":\\\"a\\\"}\", MAPPER.writer(prov).writeValueAsString(new Bean()));\n \n         // [JACKSON-504]: also verify it works via mapper\n-        mapper = new ObjectMapper();\n+        ObjectMapper mapper = new ObjectMapper();\n         mapper.setFilters(prov);\n         assertEquals(\"{\\\"a\\\":\\\"a\\\"}\", mapper.writeValueAsString(new Bean()));\n     }\n \n     public void testSimpleExclusionFilter() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         FilterProvider prov = new SimpleFilterProvider().addFilter(\"RootFilter\",\n                 SimpleBeanPropertyFilter.serializeAllExcept(\"a\"));\n-        assertEquals(\"{\\\"b\\\":\\\"b\\\"}\", mapper.writer(prov).writeValueAsString(new Bean()));\n+        assertEquals(\"{\\\"b\\\":\\\"b\\\"}\", MAPPER.writer(prov).writeValueAsString(new Bean()));\n     }\n \n     // should handle missing case gracefully\n     public void testMissingFilter() throws Exception\n     {\n         // First: default behavior should be to throw an exception\n-        ObjectMapper mapper = new ObjectMapper();\n         try {\n-            mapper.writeValueAsString(new Bean());\n+            MAPPER.writeValueAsString(new Bean());\n             fail(\"Should have failed without configured filter\");\n         } catch (JsonMappingException e) { // should be resolved to a MappingException (internally may be something else)\n             verifyException(e, \"Can not resolve BeanPropertyFilter with id 'RootFilter'\");\n         \n         // but when changing behavior, should work difference\n         SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false);\n+        ObjectMapper mapper = new ObjectMapper();\n         mapper.setFilters(fp);\n         String json = mapper.writeValueAsString(new Bean());\n         assertEquals(\"{\\\"a\\\":\\\"a\\\",\\\"b\\\":\\\"b\\\"}\", json);\n     // defaulting, as per [JACKSON-449]\n     public void testDefaultFilter() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         FilterProvider prov = new SimpleFilterProvider().setDefaultFilter(SimpleBeanPropertyFilter.filterOutAllExcept(\"b\"));\n-        assertEquals(\"{\\\"b\\\":\\\"b\\\"}\", mapper.writer(prov).writeValueAsString(new Bean()));\n+        assertEquals(\"{\\\"b\\\":\\\"b\\\"}\", MAPPER.writer(prov).writeValueAsString(new Bean()));\n     }\n-\n+    \n     // [Issue#89] combining @JsonIgnore, @JsonProperty\n     public void testIssue89() throws Exception\n     {\n         assertEquals(\"Bill\", pod2.username);\n         assertEquals(\"foo!\", pod2.userPassword);\n     }\n+\n+    // Wrt [Issue#306]\n+    public void testFilterOnProperty() throws Exception\n+    {\n+        FilterProvider prov = new SimpleFilterProvider()\n+            .addFilter(\"RootFilter\", SimpleBeanPropertyFilter.filterOutAllExcept(\"a\"))\n+            .addFilter(\"minimal\", SimpleBeanPropertyFilter.filterOutAllExcept(\"b\"));\n+\n+        assertEquals(\"{\\\"first\\\":{\\\"a\\\":\\\"a\\\"},\\\"second\\\":{\\\"b\\\":\\\"b\\\"}}\",\n+                MAPPER.writer(prov).writeValueAsString(new FilteredProps()));\n+    }\n }", "timestamp": 1379035366, "metainfo": ""}