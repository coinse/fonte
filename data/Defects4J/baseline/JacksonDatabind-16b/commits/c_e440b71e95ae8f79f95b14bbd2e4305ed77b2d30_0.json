{"sha": "e440b71e95ae8f79f95b14bbd2e4305ed77b2d30", "log": "Try to streamline property handling for deser", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n         }\n         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n             String propName = p.getCurrentName();\n-            // Skip field name:\n             p.nextToken();\n-            SettableBeanProperty prop = _beanProperties.find(propName);\n-            \n-            if (prop != null) { // normal case\n-                try {\n-                    prop.deserializeAndSet(p, ctxt, bean);\n-                } catch (Exception e) {\n-                    wrapAndThrow(e, bean, propName, ctxt);\n-                }\n-                continue;\n+            try {\n+                if (_beanProperties.findDeserializeAndSet(p, ctxt, bean, propName)) {\n+                    continue;\n+                }\n+            } catch (Exception e) {\n+                wrapAndThrow(e, bean, propName, ctxt);\n             }\n             handleUnknownVanilla(p, ctxt, bean, propName);\n         }\n         p.setCurrentValue(bean);\n         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n             String propName = p.getCurrentName();\n-            // Skip field name:\n             p.nextToken();\n-            SettableBeanProperty prop = _beanProperties.find(propName);\n-            if (prop != null) { // normal case\n-                try {\n-                    prop.deserializeAndSet(p, ctxt, bean);\n-                } catch (Exception e) {\n-                    wrapAndThrow(e, bean, propName, ctxt);\n-                }\n-            } else {\n-                handleUnknownVanilla(p, ctxt, bean, propName);\n-            }\n+            try {\n+                if (_beanProperties.findDeserializeAndSet(p, ctxt, bean, propName)) {\n+                    continue;\n+                }\n+            } catch (Exception e) {\n+                wrapAndThrow(e, bean, propName, ctxt);\n+            }\n+            handleUnknownVanilla(p, ctxt, bean, propName);\n         }\n         return bean;\n     }\n         JsonToken t = p.getCurrentToken();\n         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n             String propName = p.getCurrentName();\n-            // Skip field name:\n             p.nextToken();\n-            SettableBeanProperty prop = _beanProperties.find(propName);\n-            if (prop != null) { // normal case\n-                try {\n-                    prop.deserializeAndSet(p, ctxt, bean);\n-                } catch (Exception e) {\n-                    wrapAndThrow(e, bean, propName, ctxt);\n-                }\n-                continue;\n+            try {\n+                if (_beanProperties.findDeserializeAndSet(p, ctxt, bean, propName)) {\n+                    continue;\n+                }\n+            } catch (Exception e) {\n+                wrapAndThrow(e, bean, propName, ctxt);\n             }\n             handleUnknownVanilla(p, ctxt, bean, propName);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n     private final int _hashMask;\n \n     private final int _size;\n-    \n-    private final boolean _caseInsensitivePropertyComparison;\n+\n+    /**\n+     * @since 2.5\n+     */\n+    private final boolean _caseInsensitive;\n \n     /**\n      * Counter we use to keep track of insertion order of properties\n \n     public BeanPropertyMap(Collection<SettableBeanProperty> properties, boolean caseInsensitivePropertyComparison)\n     {\n-        _caseInsensitivePropertyComparison = caseInsensitivePropertyComparison;\n+        _caseInsensitive = caseInsensitivePropertyComparison;\n         _size = properties.size();\n         int bucketCount = findSize(_size);\n         _hashMask = bucketCount-1;\n         _size = size;\n         _hashMask = buckets.length-1;\n         _nextBucketIndex = index;\n-        _caseInsensitivePropertyComparison = caseInsensitivePropertyComparison;\n+        _caseInsensitive = caseInsensitivePropertyComparison;\n     }\n     \n     /**\n     \t        int index = propName.hashCode() & _hashMask;\n     \t        newBuckets[index] = new Bucket(newBuckets[index],\n     \t                propName, newProperty, _nextBucketIndex++);\n-    \t        return new BeanPropertyMap(newBuckets, _size+1, _nextBucketIndex, _caseInsensitivePropertyComparison);\n+    \t        return new BeanPropertyMap(newBuckets, _size+1, _nextBucketIndex, _caseInsensitive);\n         }\n         // replace: easy, close + replace\n-        BeanPropertyMap newMap = new BeanPropertyMap(newBuckets, bcount, _nextBucketIndex, _caseInsensitivePropertyComparison);\n+        BeanPropertyMap newMap = new BeanPropertyMap(newBuckets, bcount, _nextBucketIndex, _caseInsensitive);\n         newMap.replace(newProperty);\n         return newMap;\n     }\n             newProps.add(prop);\n         }\n         // should we try to re-index? Ordering probably changed but called probably doesn't want changes...\n-        return new BeanPropertyMap(newProps, _caseInsensitivePropertyComparison);\n+        return new BeanPropertyMap(newProps, _caseInsensitive);\n     }\n     \n     public BeanPropertyMap assignIndexes()\n     // Confining this case insensitivity to this function (and the find method) in case we want to\n     // apply a particular locale to the lower case function.  For now, using the default.\n     private String getPropertyName(SettableBeanProperty prop) {\n-    \treturn _caseInsensitivePropertyComparison ? prop.getName().toLowerCase() : prop.getName();\n+    \treturn _caseInsensitive ? prop.getName().toLowerCase() : prop.getName();\n     }\n \n     /*\n         if (key == null) {\n             throw new IllegalArgumentException(\"Can not pass null property name\");\n         }\n-        \n-        if (_caseInsensitivePropertyComparison) {\n-        \tkey = key.toLowerCase();\n-        }\n-        \n+        if (_caseInsensitive) {\n+            key = key.toLowerCase();\n+        }\n         int index = key.hashCode() & _hashMask;\n         Bucket bucket = _buckets[index];\n         // Let's unroll first lookup since that is null or match in 90+% cases\n     public boolean findDeserializeAndSet(JsonParser p, DeserializationContext ctxt,\n             Object bean, String key) throws IOException\n     {\n+        if (_caseInsensitive) {\n+            key = key.toLowerCase();\n+        }\n         int index = key.hashCode() & _hashMask;\n         Bucket bucket = _buckets[index];\n         // Let's unroll first lookup since that is null or match in 90+% cases", "timestamp": 1418448426, "metainfo": ""}