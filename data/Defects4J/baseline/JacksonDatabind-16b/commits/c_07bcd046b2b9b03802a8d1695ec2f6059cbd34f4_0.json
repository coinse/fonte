{"sha": "07bcd046b2b9b03802a8d1695ec2f6059cbd34f4", "log": "Fix #280", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/annotation/JsonSerialize.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotation/JsonSerialize.java\n      * Whether type detection used is dynamic or static: that is,\n      * whether actual runtime type is used (dynamic), or just the\n      * declared type (static).\n-     */\n-    public Typing typing() default Typing.DYNAMIC;\n+     *<p>\n+     * Note that Jackson 2.3 changed default to <code>DEFAULT_TYPING</code>,\n+     * which is roughly same as saying \"whatever\".\n+     * This is important as it allows avoiding accidental overrides\n+     * at property level.\n+     */\n+    public Typing typing() default Typing.DEFAULT_TYPING;\n \n     // // // Annotations for specifying intermediate Converters (2.2+)\n     \n      * and \"properties that have non-default value\" (i.e. default value\n      * being property setting for a Bean constructed with default no-arg\n      * constructor, often null).\n+     *<p>\n+     * Note that Jackson 2.3 changed default to <code>DEFAULT_INCLUSION</code>,\n+     * which is roughly same as saying \"whatever\". This is important because\n+     * it allows hierarchic default values to be used.\n      *\n      * @deprecated As of Jackson 2.0, this annotation has been replaced\n      *    by {@link com.fasterxml.jackson.annotation.JsonInclude}\n      */\n     @Deprecated\n-    public Inclusion include() default Inclusion.ALWAYS;\n+    public Inclusion include() default Inclusion.DEFAULT_INCLUSION;\n     \n     /*\n     /**********************************************************\n          * <ul>\n          *  For other types, non-null values are to be included.\n          */\n-        NON_EMPTY\n+        NON_EMPTY,\n+\n+        /**\n+         * Pseudo-value that is used to indicate\n+         * \"use whatever is default used at higher level\".\n+         * \n+         * @since 2.3\n+         */\n+        DEFAULT_INCLUSION\n         ;\n     }\n \n          * Value that indicates that the static declared type is to\n          * be used.\n          */\n-        STATIC\n+        STATIC,\n+        \n+        /**\n+         * Pseudo-value that is used to indicate\n+         * \"use whatever is default used at higher level\".\n+         * \n+         * @since 2.3\n+         */\n+        DEFAULT_TYPING\n         ;\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n                 return JsonInclude.Include.NON_DEFAULT;\n             case NON_EMPTY:\n                 return JsonInclude.Include.NON_EMPTY;\n+            case DEFAULT_INCLUSION: // since 2.3 -- fall through, use default\n+                break;\n             }\n         }\n         return defValue;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n         }\n         AnnotationIntrospector intr = config.getAnnotationIntrospector();\n         JsonSerialize.Typing t = intr.findSerializationTyping(beanDesc.getClassInfo());\n-        if (t != null) {\n+        if (t != null && t != JsonSerialize.Typing.DEFAULT_TYPING) {\n             return (t == JsonSerialize.Typing.STATIC);\n         }\n         return config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n         /* [JACKSON-114]: if using static typing, declared type is known\n          * to be the type...\n          */\n-        if (!useStaticTyping) {\n-            JsonSerialize.Typing typing = _annotationIntrospector.findSerializationTyping(a);\n-            if (typing != null) {\n-                useStaticTyping = (typing == JsonSerialize.Typing.STATIC);\n-            }\n+        JsonSerialize.Typing typing = _annotationIntrospector.findSerializationTyping(a);\n+        if (typing != null && typing != JsonSerialize.Typing.DEFAULT_TYPING) {\n+            useStaticTyping = (typing == JsonSerialize.Typing.STATIC);\n         }\n         return useStaticTyping ? declaredType : null;\n     }\n     /* Helper methods for default value handling\n     /**********************************************************\n      */\n-    \n+\n     protected Object getDefaultBean()\n     {\n         if (_defaultBean == null) {", "timestamp": 1375844212, "metainfo": ""}