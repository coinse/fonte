{"sha": "2322ce6a6a26ff604fe05cb0da92a51466fcc0d6", "log": "Implement #334: make ArrayNode, ObjectNode non-final again", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n import java.util.List;\n \n /**\n- * Node class that represents Arrays mapped from Json content.\n+ * Node class that represents Arrays mapped from JSON content.\n+ *<p>\n+ * Note: class was <code>final</code> temporarily for Jackson 2.2.\n  */\n-public final class ArrayNode\n+public class ArrayNode\n     extends ContainerNode<ArrayNode>\n {\n     private final List<JsonNode> _children = new ArrayList<JsonNode>();\n \n     /*\n     /**********************************************************\n-    /* Internal methods\n-    /**********************************************************\n-     */\n-\n-    private ArrayNode _add(JsonNode node)\n+    /* Internal methods (overridable)\n+    /**********************************************************\n+     */\n+\n+    protected ArrayNode _add(JsonNode node)\n     {\n         _children.add(node);\n         return this;\n     }\n \n-    private ArrayNode _insert(int index, JsonNode node)\n+    protected ArrayNode _insert(int index, JsonNode node)\n     {\n         if (index < 0) {\n             _children.add(0, node);\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java\n     @Override\n     public final NumericNode numberNode(int v) { return _nodeFactory.numberNode(v); }\n     @Override\n-    public final NumericNode numberNode(long v) { return _nodeFactory.numberNode(v); }\n+    public final NumericNode numberNode(long v) {\n+        return _nodeFactory.numberNode(v);\n+    }\n \n     // was missing from 2.2 and before\n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n \n /**\n  * Node that maps to JSON Object structures in JSON content.\n+ *<p>\n+ * Note: class was <code>final</code> temporarily for Jackson 2.2.\n  */\n-public final class ObjectNode\n+public class ObjectNode\n     extends ContainerNode<ObjectNode>\n {\n     // Note: LinkedHashMap for backwards compatibility\n     public ArrayNode putArray(String fieldName)\n     {\n         ArrayNode n  = arrayNode();\n-        _children.put(fieldName, n);\n+        _put(fieldName, n);\n         return n;\n     }\n \n      */\n     public ObjectNode putObject(String fieldName)\n     {\n-        ObjectNode n  = objectNode();\n-        _children.put(fieldName, n);\n+        ObjectNode n = objectNode();\n+        _put(fieldName, n);\n         return n;\n     }\n \n      * @return This node (to allow chaining)\n      */\n     public ObjectNode putPOJO(String fieldName, Object pojo) {\n-        _children.put(fieldName, pojoNode(pojo));\n-        return this;\n+        return _put(fieldName, pojoNode(pojo));\n     }\n \n     /**\n      * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, short v) {\n-        _children.put(fieldName, numberNode(v));\n-        return this;\n+        return _put(fieldName, numberNode(v));\n     }\n \n     /**\n      * \n      * @return This node (to allow chaining)\n      */\n-    public ObjectNode put(String fieldName, Short value) {\n-        if (value == null) {\n-            _children.put(fieldName, nullNode());\n-        } else {\n-            _children.put(fieldName, numberNode(value.shortValue()));\n-        }\n-        return this;\n+    public ObjectNode put(String fieldName, Short v) {\n+        return _put(fieldName, (v == null) ? nullNode()\n+                : numberNode(v.shortValue()));\n     }\n \n     /**\n      * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, int v) {\n-        _children.put(fieldName, numberNode(v));\n-        return this;\n+        return _put(fieldName, numberNode(v));\n     }\n \n     /**\n      * \n      * @return This node (to allow chaining)\n      */\n-    public ObjectNode put(String fieldName, Integer value) {\n-        if (value == null) {\n-            _children.put(fieldName, nullNode());\n-        } else {\n-            _children.put(fieldName, numberNode(value.intValue()));\n-        }\n-        return this;\n+    public ObjectNode put(String fieldName, Integer v) {\n+        return _put(fieldName, (v == null) ? nullNode()\n+                : numberNode(v.intValue()));\n     }\n     \n     /**\n      * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, long v) {\n-        _children.put(fieldName, numberNode(v));\n-        return this;\n+        return _put(fieldName, numberNode(v));\n     }\n \n     /**\n      * \n      * @return This node (to allow chaining)\n      */\n-    public ObjectNode put(String fieldName, Long value) {\n-        if (value == null) {\n-            _children.put(fieldName, nullNode());\n-        } else {\n-            _children.put(fieldName, numberNode(value.longValue()));\n-        }\n-        return this;\n+    public ObjectNode put(String fieldName, Long v) {\n+        return _put(fieldName, (v == null) ? nullNode()\n+                : numberNode(v.longValue()));\n     }\n     \n     /**\n      * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, float v) {\n-        _children.put(fieldName, numberNode(v));\n-        return this;\n+        return _put(fieldName, numberNode(v));\n     }\n \n     /**\n      * \n      * @return This node (to allow chaining)\n      */\n-    public ObjectNode put(String fieldName, Float value) {\n-        if (value == null) {\n-            _children.put(fieldName, nullNode());\n-        } else {\n-            _children.put(fieldName, numberNode(value.floatValue()));\n-        }\n-        return this;\n+    public ObjectNode put(String fieldName, Float v) {\n+        return _put(fieldName, (v == null) ? nullNode()\n+                : numberNode(v.floatValue()));\n     }\n     \n     /**\n      * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, double v) {\n-        _children.put(fieldName, numberNode(v));\n-        return this;\n+        return _put(fieldName, numberNode(v));\n     }\n \n     /**\n      * \n      * @return This node (to allow chaining)\n      */\n-    public ObjectNode put(String fieldName, Double value) {\n-        if (value == null) {\n-            _children.put(fieldName, nullNode());\n-        } else {\n-            _children.put(fieldName, numberNode(value.doubleValue()));\n-        }\n-        return this;\n+    public ObjectNode put(String fieldName, Double v) {\n+        return _put(fieldName, (v == null) ? nullNode()\n+                : numberNode(v.doubleValue()));\n     }\n     \n     /**\n      * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, BigDecimal v) {\n-        if (v == null) {\n-            putNull(fieldName);\n-        } else {\n-            _children.put(fieldName, numberNode(v));\n-        }\n-        return this;\n+        return _put(fieldName, (v == null) ? nullNode()\n+                : numberNode(v));\n     }\n \n     /**\n      * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, String v) {\n-        if (v == null) {\n-            putNull(fieldName);\n-        } else {\n-            _children.put(fieldName, textNode(v));\n-        }\n-        return this;\n+        return _put(fieldName, (v == null) ? nullNode()\n+                : textNode(v));\n     }\n \n     /**\n      * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, boolean v) {\n-        _children.put(fieldName, booleanNode(v));\n-        return this;\n+        return _put(fieldName, booleanNode(v));\n     }\n \n     /**\n      * \n      * @return This node (to allow chaining)\n      */\n-    public ObjectNode put(String fieldName, Boolean value) {\n-        if (value == null) {\n-            _children.put(fieldName, nullNode());\n-        } else {\n-            _children.put(fieldName, booleanNode(value.booleanValue()));\n-        }\n-        return this;\n+    public ObjectNode put(String fieldName, Boolean v) {\n+        return _put(fieldName, (v == null) ? nullNode()\n+                : booleanNode(v.booleanValue()));\n     }\n     \n     /**\n      * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, byte[] v) {\n-        if (v == null) {\n-            _children.put(fieldName, nullNode());\n-        } else {\n-            _children.put(fieldName, binaryNode(v));\n-        }\n-        return this;\n-    }\n-\n+        return _put(fieldName, (v == null) ? nullNode()\n+                : binaryNode(v));\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Standard methods\n         sb.append(\"}\");\n         return sb.toString();\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Internal methods (overridable)\n+    /**********************************************************\n+     */\n+\n+    protected ObjectNode _put(String fieldName, JsonNode value)\n+    {\n+        _children.put(fieldName, value);\n+        return this;\n+    }\n }", "timestamp": 1382591912, "metainfo": ""}