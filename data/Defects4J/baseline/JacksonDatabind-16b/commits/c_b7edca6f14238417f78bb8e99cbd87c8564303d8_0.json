{"sha": "b7edca6f14238417f78bb8e99cbd87c8564303d8", "log": "More work on trying to make per-call configuration of JsonParser.Feature/JsonGenerator.Feature more reliable", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n      */\n     public DeserializationConfig without(JsonParser.Feature feature)\n     {\n-        int newSet = _parserFeaturesToChange & ~feature.getMask();\n-        int newMask = _parserFeatures | feature.getMask();\n+        int newSet = _parserFeatures & ~feature.getMask();\n+        int newMask = _parserFeaturesToChange | feature.getMask();\n         return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :\n             new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                     newSet, newMask);\n         return (_deserFeatures & f.getMask()) != 0;\n     }\n \n+    public final boolean isEnabled(JsonParser.Feature f, JsonFactory factory) {\n+        int mask = f.getMask();\n+        if ((_parserFeaturesToChange & mask) != 0) {\n+            return (_parserFeatures & f.getMask()) != 0;\n+        }\n+        return factory.isEnabled(f);\n+    }\n+    \n     /**\n      * \"Bulk\" access method for checking that all features specified by\n      * mask are enabled.\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n     /* Configuration, deserialization\n     /**********************************************************\n      */\n+\n+    /**\n+     * Method that can be used to get hold of {@link JsonNodeFactory}\n+     * that this mapper will use when directly constructing\n+     * root {@link JsonNode} instances for Trees.\n+     *<p>\n+     * Note: this is just a shortcut for calling\n+     *<pre>\n+     *   getDeserializationConfig().getNodeFactory()\n+     *</pre>\n+     */\n+    public JsonNodeFactory getNodeFactory() {\n+        return _deserializationConfig.getNodeFactory();\n+    }\n     \n     /**\n      * Method for specifying {@link JsonNodeFactory} to use for\n      * @since 2.4\n      */\n     public ObjectMapper setConfig(SerializationConfig config) {\n-    \t_serializationConfig = config;\n-    \treturn this;\n+        _serializationConfig = config;\n+        return this;\n     }\n     \n     /*\n     \n     /*\n     /**********************************************************\n-    /* Configuration, simple features\n-    /**********************************************************\n-     */\n-\n+    /* Configuration, simple features: MapperFeature\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method for checking whether given {@link MapperFeature} is enabled.\n+     */\n+    public boolean isEnabled(MapperFeature f) {\n+        // ok to use either one, should be kept in sync\n+        return _serializationConfig.isEnabled(f);\n+    }\n+    \n     /**\n      * Method for changing state of an on/off mapper feature for\n      * this mapper instance.\n                 _deserializationConfig.with(f) : _deserializationConfig.without(f);\n         return this;\n     }\n-    \n+\n+    /**\n+     * Method for enabling specified {@link MapperConfig} features.\n+     * Modifies and returns this instance; no new object is created.\n+     */\n+    public ObjectMapper enable(MapperFeature... f) {\n+        _deserializationConfig = _deserializationConfig.with(f);\n+        _serializationConfig = _serializationConfig.with(f);\n+        return this;\n+    }\n+\n+    /**\n+     * Method for enabling specified {@link DeserializationConfig} features.\n+     * Modifies and returns this instance; no new object is created.\n+     */\n+    public ObjectMapper disable(MapperFeature... f) {\n+        _deserializationConfig = _deserializationConfig.without(f);\n+        _serializationConfig = _serializationConfig.without(f);\n+        return this;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Configuration, simple features: SerializationFeature\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method for checking whether given serialization-specific\n+     * feature is enabled.\n+     */\n+    public boolean isEnabled(SerializationFeature f) {\n+        return _serializationConfig.isEnabled(f);\n+    }\n+\n     /**\n      * Method for changing state of an on/off serialization feature for\n      * this object mapper.\n     }\n \n     /**\n+     * Method for enabling specified {@link DeserializationConfig} feature.\n+     * Modifies and returns this instance; no new object is created.\n+     */\n+    public ObjectMapper enable(SerializationFeature f) {\n+        _serializationConfig = _serializationConfig.with(f);\n+        return this;\n+    }\n+\n+    /**\n+     * Method for enabling specified {@link DeserializationConfig} features.\n+     * Modifies and returns this instance; no new object is created.\n+     */\n+    public ObjectMapper enable(SerializationFeature first,\n+            SerializationFeature... f) {\n+        _serializationConfig = _serializationConfig.with(first, f);\n+        return this;\n+    }\n+    \n+    /**\n+     * Method for enabling specified {@link DeserializationConfig} features.\n+     * Modifies and returns this instance; no new object is created.\n+     */\n+    public ObjectMapper disable(SerializationFeature f) {\n+        _serializationConfig = _serializationConfig.without(f);\n+        return this;\n+    }\n+\n+    /**\n+     * Method for enabling specified {@link DeserializationConfig} features.\n+     * Modifies and returns this instance; no new object is created.\n+     */\n+    public ObjectMapper disable(SerializationFeature first,\n+            SerializationFeature... f) {\n+        _serializationConfig = _serializationConfig.without(first, f);\n+        return this;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Configuration, simple features: DeserializationFeature\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method for checking whether given deserialization-specific\n+     * feature is enabled.\n+     */\n+    public boolean isEnabled(DeserializationFeature f) {\n+        return _deserializationConfig.isEnabled(f);\n+    }\n+\n+    /**\n      * Method for changing state of an on/off deserialization feature for\n      * this object mapper.\n      */\n     }\n \n     /**\n-     * Method for changing state of an on/off {@link JsonParser} feature for\n-     * {@link JsonFactory} instance this object mapper uses.\n-     *<p>\n-     * This is method is basically a shortcut method for calling\n-     * {@link JsonFactory#enable} on the shared\n-     * {@link JsonFactory} this mapper uses (which is accessible\n-     * using {@link #getJsonFactory}).\n-     */\n-    public ObjectMapper configure(JsonParser.Feature f, boolean state) {\n-        _jsonFactory.configure(f, state);\n-        return this;\n-    }\n-\n-    /**\n-     * Method for changing state of an on/off {@link JsonGenerator} feature for\n-     * {@link JsonFactory} instance this object mapper uses.\n-     *<p>\n-     * This is method is basically a shortcut method for calling\n-     * {@link JsonFactory#enable} on the shared\n-     * {@link JsonFactory} this mapper uses (which is accessible\n-     * using {@link #getJsonFactory}).\n-     */\n-    public ObjectMapper configure(JsonGenerator.Feature f, boolean state) {\n-        _jsonFactory.configure(f, state);\n-        return this;\n-    }\n-\n-    /**\n-     * Method for enabling specified {@link MapperConfig} features.\n-     * Modifies and returns this instance; no new object is created.\n-     */\n-    public ObjectMapper enable(MapperFeature... f) {\n-        _deserializationConfig = _deserializationConfig.with(f);\n-        _serializationConfig = _serializationConfig.with(f);\n-        return this;\n-    }\n-\n-    /**\n-     * Method for enabling specified {@link DeserializationConfig} features.\n-     * Modifies and returns this instance; no new object is created.\n-     */\n-    public ObjectMapper disable(MapperFeature... f) {\n-        _deserializationConfig = _deserializationConfig.without(f);\n-        _serializationConfig = _serializationConfig.without(f);\n-        return this;\n-    }\n-    \n-    /**\n      * Method for enabling specified {@link DeserializationConfig} features.\n      * Modifies and returns this instance; no new object is created.\n      */\n         return this;\n     }\n     \n-    /**\n-     * Method for enabling specified {@link DeserializationConfig} feature.\n-     * Modifies and returns this instance; no new object is created.\n-     */\n-    public ObjectMapper enable(SerializationFeature f) {\n-        _serializationConfig = _serializationConfig.with(f);\n-        return this;\n-    }\n-\n-    /**\n-     * Method for enabling specified {@link DeserializationConfig} features.\n-     * Modifies and returns this instance; no new object is created.\n-     */\n-    public ObjectMapper enable(SerializationFeature first,\n-            SerializationFeature... f) {\n-        _serializationConfig = _serializationConfig.with(first, f);\n-        return this;\n-    }\n-    \n-    /**\n-     * Method for enabling specified {@link DeserializationConfig} features.\n-     * Modifies and returns this instance; no new object is created.\n-     */\n-    public ObjectMapper disable(SerializationFeature f) {\n-        _serializationConfig = _serializationConfig.without(f);\n-        return this;\n-    }\n-\n-    /**\n-     * Method for enabling specified {@link DeserializationConfig} features.\n-     * Modifies and returns this instance; no new object is created.\n-     */\n-    public ObjectMapper disable(SerializationFeature first,\n-            SerializationFeature... f) {\n-        _serializationConfig = _serializationConfig.without(first, f);\n-        return this;\n-    }\n-\n-    /**\n-     * Method for checking whether given Mapper\n-     * feature is enabled.\n-     */\n-    public boolean isEnabled(MapperFeature f) {\n-        // ok to use either one, should be kept in sync\n-        return _serializationConfig.isEnabled(f);\n-    }\n-\n-    /**\n-     * Method for checking whether given serialization-specific\n-     * feature is enabled.\n-     */\n-    public boolean isEnabled(SerializationFeature f) {\n-        return _serializationConfig.isEnabled(f);\n-    }\n-    \n-    /**\n-     * Method for checking whether given deserialization-specific\n-     * feature is enabled.\n-     */\n-    public boolean isEnabled(DeserializationFeature f) {\n-        return _deserializationConfig.isEnabled(f);\n-    }\n-\n+    /*\n+    /**********************************************************\n+    /* Configuration, simple features: JsonParser.Feature\n+    /**********************************************************\n+     */\n+\n+    public boolean isEnabled(JsonParser.Feature f) {\n+        return _deserializationConfig.isEnabled(f, _jsonFactory);\n+    }\n+    \n+    /**\n+     * Method for changing state of specified {@link com.fasterxml.jackson.core.JsonParser.Feature}s\n+     * for parser instances this object mapper creates.\n+     *<p>\n+     * Note that this is equivalent to directly calling same method\n+     * on {@link #getFactory}.\n+     */\n+    public ObjectMapper configure(JsonParser.Feature f, boolean state) {\n+        _jsonFactory.configure(f, state);\n+        return this;\n+    }\n+\n+    /**\n+     * Method for enabling specified {@link com.fasterxml.jackson.core.JsonParser.Feature}s\n+     * for parser instances this object mapper creates.\n+     *<p>\n+     * Note that this is equivalent to directly calling same method on {@link #getFactory}.\n+     *\n+     * @since 2.5\n+     */\n+    public ObjectMapper enable(JsonParser.Feature... features) {\n+        for (JsonParser.Feature f : features) {\n+            _jsonFactory.enable(f);\n+        }\n+        return this;\n+    }\n+    \n+    /**\n+     * Method for disabling specified {@link com.fasterxml.jackson.core.JsonParser.Feature}s\n+     * for parser instances this object mapper creates.\n+     *<p>\n+     * Note that this is equivalent to directly calling same method on {@link #getFactory}.\n+     *\n+     * @since 2.5\n+     */\n+    public ObjectMapper disable(JsonParser.Feature... features) {\n+        for (JsonParser.Feature f : features) {\n+            _jsonFactory.disable(f);\n+        }\n+        return this;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Configuration, simple features: JsonGenerator.Feature\n+    /**********************************************************\n+     */\n+\n+    public boolean isEnabled(JsonGenerator.Feature f) {\n+        return _serializationConfig.isEnabled(f, _jsonFactory);\n+    }\n+\n+    /**\n+     * Method for changing state of an on/off {@link JsonGenerator} feature for\n+     * generator instances this object mapper creates.\n+     *<p>\n+     * Note that this is equivalent to directly calling same method\n+     * on {@link #getFactory}.\n+     */\n+    public ObjectMapper configure(JsonGenerator.Feature f, boolean state) {\n+        _jsonFactory.configure(f,  state);\n+        return this;\n+    }\n+\n+    /**\n+     * Method for enabling specified {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s\n+     * for parser instances this object mapper creates.\n+     *<p>\n+     * Note that this is equivalent to directly calling same method on {@link #getFactory}.\n+     *\n+     * @since 2.5\n+     */\n+    public ObjectMapper enable(JsonGenerator.Feature... features) {\n+        for (JsonGenerator.Feature f : features) {\n+            _jsonFactory.enable(f);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Method for disabling specified {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s\n+     * for parser instances this object mapper creates.\n+     *<p>\n+     * Note that this is equivalent to directly calling same method on {@link #getFactory}.\n+     *\n+     * @since 2.5\n+     */\n+    public ObjectMapper disable(JsonGenerator.Feature... features) {\n+        for (JsonGenerator.Feature f : features) {\n+            _jsonFactory.disable(f);\n+        }\n+        return this;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Configuration, simple features: JsonFactory.Feature\n+    /**********************************************************\n+     */\n+    \n     /**\n      * Convenience method, equivalent to:\n      *<pre>\n      */\n     public boolean isEnabled(JsonFactory.Feature f) {\n         return _jsonFactory.isEnabled(f);\n-    }\n-\n-    /**\n-     * Convenience method, equivalent to:\n-     *<pre>\n-     *  getJsonFactory().isEnabled(f);\n-     *</pre>\n-     */\n-    public boolean isEnabled(JsonParser.Feature f) {\n-        return _jsonFactory.isEnabled(f);\n-    }\n-    \n-    /**\n-     * Convenience method, equivalent to:\n-     *<pre>\n-     *  getJsonFactory().isEnabled(f);\n-     *</pre>\n-     */\n-    public boolean isEnabled(JsonGenerator.Feature f) {\n-        return _jsonFactory.isEnabled(f);\n-    }\n-    \n-    /**\n-     * Method that can be used to get hold of {@link JsonNodeFactory}\n-     * that this mapper will use when directly constructing\n-     * root {@link JsonNode} instances for Trees.\n-     *<p>\n-     * Note: this is just a shortcut for calling\n-     *<pre>\n-     *   getDeserializationConfig().getNodeFactory()\n-     *</pre>\n-     */\n-    public JsonNodeFactory getNodeFactory() {\n-        return _deserializationConfig.getNodeFactory();\n     }\n \n     /*\n         }\n     }\n \n-    @SuppressWarnings(\"deprecation\")\n     protected final void _configAndWriteValue(JsonGenerator jgen, Object value, Class<?> viewClass)\n         throws IOException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n     public SerializationConfig with(JsonGenerator.Feature feature)\n     {\n         int newSet = _generatorFeatures | feature.getMask();\n-        int newMask = _generatorFeatures | feature.getMask();\n+        int newMask = _generatorFeaturesToChange | feature.getMask();\n         return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :\n             new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                     newSet, newMask);\n     public SerializationConfig without(JsonGenerator.Feature feature)\n     {\n         int newSet = _generatorFeatures & ~feature.getMask();\n-        int newMask = _generatorFeatures | feature.getMask();\n+        int newMask = _generatorFeaturesToChange | feature.getMask();\n         return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :\n             new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                     newSet, newMask);\n     }\n \n     /**\n+     * Accessor method that first checks if we have any overrides\n+     * for feature, and only if not, checks state of passed-in\n+     * factory.\n+     * \n+     * @since 2.5\n+     */\n+    public final boolean isEnabled(JsonGenerator.Feature f, JsonFactory factory) {\n+        int mask = f.getMask();\n+        if ((_generatorFeaturesToChange & mask) != 0) {\n+            return (_generatorFeatures & f.getMask()) != 0;\n+        }\n+        return factory.isEnabled(f);\n+    }\n+    \n+    /**\n      * \"Bulk\" access method for checking that all features specified by\n      * mask are enabled.\n      * \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n  * and if not, it can only be gotten from actual instance.\n  * \n  * @deprecated Since 2.4.4; standard {@link MapSerializer} works better.\n+ *   (to be removed from 2.6)\n  */\n @JacksonStdImpl\n @Deprecated\n         }\n     }\n     \n-    @SuppressWarnings({ \"unchecked\", \"deprecation\" })\n+    @SuppressWarnings({ \"unchecked\" })\n     @Override\n     public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n         throws JsonMappingException\n--- a/src/test/java/com/fasterxml/jackson/databind/TestParserUsingMapper.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestParserUsingMapper.java\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         mapper.configure(JsonGenerator.Feature.ESCAPE_NON_ASCII, true);\n-        assertEquals(quote(\"\\\\u0101\"), mapper.writeValueAsString(String.valueOf((char) 257)));\n+        mapper.writeValueAsString(String.valueOf((char) 257));\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n     public void testBigDecimalAsPlainStringTreeConversion() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        mapper.enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);\n+        mapper.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\n         Map<String, Object> map = new HashMap<String, Object>();\n         String PI_STR = \"3.00000000\";\n         map.put(\"pi\", new BigDecimal(PI_STR));\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n+import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonToken;\n-\n import com.fasterxml.jackson.databind.*;\n \n /**\n     {\n         ObjectMapper mapper = new ObjectMapper()\n                 .enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)\n-                .enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);\n+                .enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\n         final String INPUT = \"{\\\"x\\\":1e2}\";\n         final JsonNode node = mapper.readTree(INPUT);\n         String result = mapper.writeValueAsString(node);\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java\n import java.util.*;\n import java.util.regex.Pattern;\n \n+import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.*;\n \n /**\n     public void testBigDecimalAsPlainString()\n         throws Exception\n     {\n-        MAPPER.enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);\n+        final ObjectMapper mapper = new ObjectMapper();\n+\n+        mapper.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\n         Map<String, Object> map = new HashMap<String, Object>();\n         String PI_STR = \"3.00000000\";\n         map.put(\"pi\", new BigDecimal(PI_STR));\n-        String str = MAPPER.writeValueAsString(map);\n+        String str = mapper.writeValueAsString(map);\n         assertEquals(\"{\\\"pi\\\":3.00000000}\", str);\n     }\n     ", "timestamp": 1415569076, "metainfo": ""}