{"sha": "a55bbb63c72a54d310a517d7546060dc8e5d34ed", "log": "final touches to allow consistent sub-classing of JsonNode implementations", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n     {\n         if (o == this) return true;\n         if (o == null) return false;\n-        if (getClass() != o.getClass()) {\n-            return false;\n-        }\n-        return _children.equals(((ArrayNode) o)._children);\n-    }\n-\n+        if (o instanceof ArrayNode) {\n+            return _children.equals(((ArrayNode) o)._children);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    protected boolean _childrenEqual(ArrayNode other)\n+    {\n+        return _children.equals(other._children);\n+    }\n+    \n     @Override\n     public int hashCode()\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java\n     {\n         if (o == this) return true;\n         if (o == null) return false;\n-        if (!(o instanceof DecimalNode)) {\n-            return false;\n+        if (o instanceof DecimalNode) {\n+            return ((DecimalNode) o)._value.equals(_value);\n         }\n-        return ((DecimalNode) o)._value.equals(_value);\n+        return false;\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/node/DoubleNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/DoubleNode.java\n  * Numeric node that contains 64-bit (\"double precision\")\n  * floating point values simple 32-bit integer values.\n  */\n-public final class DoubleNode\n+public class DoubleNode\n     extends NumericNode\n {\n     protected final double _value;\n     {\n         if (o == this) return true;\n         if (o == null) return false;\n-        if (o.getClass() != getClass()) { // final class, can do this\n-            return false;\n+        if (o instanceof DoubleNode) {\n+            // We must account for NaNs: NaN does not equal NaN, therefore we have\n+            // to use Double.compare().\n+            final double otherValue = ((DoubleNode) o)._value;\n+            return Double.compare(_value, otherValue) == 0;\n         }\n-\n-        // We must account for NaNs: NaN does not equal NaN, therefore we have\n-        // to use Double.compare().\n-        final double otherValue = ((DoubleNode) o)._value;\n-        return Double.compare(_value, otherValue) == 0;\n+        return false;\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/node/FloatNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/FloatNode.java\n  * \n  * @since 2.2\n  */\n-public final class FloatNode extends NumericNode\n+public class FloatNode extends NumericNode\n {\n     protected final float _value;\n \n     {\n         if (o == this) return true;\n         if (o == null) return false;\n-        if (o.getClass() != getClass()) { // final class, can do this\n-            return false;\n+        if (o instanceof FloatNode) {\n+            // We must account for NaNs: NaN does not equal NaN, therefore we have\n+            // to use Double.compare().\n+            final float otherValue = ((FloatNode) o)._value;\n+            return Float.compare(_value, otherValue) == 0;\n         }\n-\n-        // We must account for NaNs: NaN does not equal NaN, therefore we have\n-        // to use Double.compare().\n-        final float otherValue = ((FloatNode) o)._value;\n-        return Float.compare(_value, otherValue) == 0;\n+        return false;\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/node/IntNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/IntNode.java\n /**\n  * Numeric node that contains simple 32-bit integer values.\n  */\n-public final class IntNode\n+public class IntNode\n     extends NumericNode\n {\n     // // // Let's cache small set of common value\n     /**\n      * Integer value this node contains\n      */\n-    final int _value;\n+    protected final int _value;\n \n     /* \n     ************************************************\n     {\n         if (o == this) return true;\n         if (o == null) return false;\n-        if (o.getClass() != getClass()) { // final class, can do this\n-            return false;\n+        if (o instanceof IntNode) {\n+            return ((IntNode) o)._value == _value;\n         }\n-        return ((IntNode) o)._value == _value;\n+        return false;\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/node/LongNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/LongNode.java\n /**\n  * Numeric node that contains simple 64-bit integer values.\n  */\n-public final class LongNode\n+public class LongNode\n     extends NumericNode\n {\n-    final long _value;\n+    protected final long _value;\n \n     /* \n     ************************************************\n     {\n         if (o == this) return true;\n         if (o == null) return false;\n-        if (o.getClass() != getClass()) { // final class, can do this\n-            return false;\n+        if (o instanceof LongNode) {\n+            return ((LongNode) o)._value == _value;\n         }\n-        return ((LongNode) o)._value == _value;\n+        return false;\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n         /* Hmmh. Since there's just a singleton instance, this\n          * fails in all cases but with identity comparison.\n          * However: if this placeholder value was to be considered\n-         * similar to Sql NULL, it shouldn't even equal itself?\n+         * similar to SQL NULL, it shouldn't even equal itself?\n          * That might cause problems when dealing with collections\n          * like Sets... so for now, let's let identity comparison\n          * return true.\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n     {\n         if (o == this) return true;\n         if (o == null) return false;\n-        \n-        // minor improvement, wrt [Issue#70]\n-        if (getClass() != o.getClass()) {\n-            return false;\n-        }\n-        return _children.equals(((ObjectNode) o)._children);\n+        if (o instanceof ObjectNode) {\n+            return _childrenEqual((ObjectNode) o);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    protected boolean _childrenEqual(ObjectNode other)\n+    {\n+        return _children.equals(other._children);\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java\n  * a JSON constructed through data mapping (usually done by\n  * calling {@link com.fasterxml.jackson.databind.ObjectMapper}).\n  */\n-public final class POJONode\n+public class POJONode\n     extends ValueNode\n {\n     protected final Object _value;\n     {\n         if (o == this) return true;\n         if (o == null) return false;\n-        if (o.getClass() != getClass()) { // final class, can do this\n-            return false;\n+        if (o instanceof POJONode) {\n+            return _pojoEquals((POJONode) o);\n         }\n-        POJONode other = (POJONode) o;\n+        return false;\n+    }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    protected boolean _pojoEquals(POJONode other)\n+    {\n         if (_value == null) {\n             return other._value == null;\n         }\n         return _value.equals(other._value);\n     }\n-\n+    \n     @Override\n     public int hashCode() { return _value.hashCode(); }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/node/ShortNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ShortNode.java\n /**\n  * Numeric node that contains simple 16-bit integer values.\n  */\n-public final class ShortNode\n+public class ShortNode\n     extends NumericNode\n {\n-    final short _value;\n+    protected final short _value;\n \n     /* \n     ************************************************\n     {\n         if (o == this) return true;\n         if (o == null) return false;\n-        if (o.getClass() != getClass()) { // final class, can do this\n-            return false;\n+        if (o instanceof ShortNode) {\n+            return ((ShortNode) o)._value == _value;\n         }\n-        return ((ShortNode) o)._value == _value;\n+        return false;\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/node/TextNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/TextNode.java\n /**\n  * Value node that contains a text value.\n  */\n-public final class TextNode\n+public class TextNode\n     extends ValueNode\n {\n     final static int INT_SPACE = ' ';\n     {\n         if (o == this) return true;\n         if (o == null) return false;\n-        if (o.getClass() != getClass()) { // final class, can do this\n-            return false;\n-        }\n-        return ((TextNode) o)._value.equals(_value);\n+        if (o instanceof TextNode) {\n+            return ((TextNode) o)._value.equals(_value);\n+        }\n+        return false;\n     }\n     \n     @Override", "timestamp": 1382753521, "metainfo": ""}