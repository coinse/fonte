{"sha": "499a7b6368720f36edc55c9d1fcbe10bade00c1d", "log": "Implemented #654", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.io.CharacterEscapes;\n import com.fasterxml.jackson.core.io.SegmentedStringWriter;\n+import com.fasterxml.jackson.core.io.SerializedString;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.core.util.*;\n import com.fasterxml.jackson.databind.cfg.ContextAttributes;\n         _serializerFactory = mapper._serializerFactory;\n         _generatorFactory = mapper._jsonFactory;\n         _generatorSettings = (pp == null) ? GeneratorSettings.empty\n-                : new GeneratorSettings(pp, null, null);\n+                : new GeneratorSettings(pp, null, null, null);\n \n         // 29-Apr-2014, tatu: There is no \"untyped serializer\", so:\n         if (rootType == null || rootType.hasRawClass(Object.class)) {\n \n         _prefetch = Prefetch.empty;\n         _generatorSettings = (s == null) ? GeneratorSettings.empty\n-                : new GeneratorSettings(null, s, null);\n+                : new GeneratorSettings(null, s, null, null);\n     }\n     \n     /**\n     public ObjectWriter withoutAttribute(Object key) {\n         SerializationConfig newConfig = _config.withoutAttribute(key);\n         return (newConfig == _config) ? this :  _new(this, newConfig);\n+    }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    public ObjectWriter withRootValueSeparator(String sep) {\n+        GeneratorSettings genSet = _generatorSettings.withRootValueSeparator(sep);\n+        if (genSet == _generatorSettings) {\n+            return this;\n+        }\n+        return _new(genSet, _prefetch);\n+    }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    public ObjectWriter withRootValueSeparator(SerializableString sep) {\n+        GeneratorSettings genSet = _generatorSettings.withRootValueSeparator(sep);\n+        if (genSet == _generatorSettings) {\n+            return this;\n+        }\n+        return _new(genSet, _prefetch);\n     }\n \n     /*\n         if (esc != null) {\n             gen.setCharacterEscapes(esc);\n         }\n-        // [JACKSON-520]: add support for pass-through schema:\n         FormatSchema sch = genSet.schema;\n         if (sch != null) {\n             gen.setSchema(sch);\n         }\n+        SerializableString sep = genSet.rootValueSeparator;\n+        if (sep != null) {\n+            gen.setRootValueSeparator(sep);\n+        }\n         _config.initialize(gen); // since 2.5\n         return gen;\n     }\n     {\n         private static final long serialVersionUID = 1L;\n \n-        public final static GeneratorSettings empty = new GeneratorSettings(null, null, null);\n-        \n+        public final static GeneratorSettings empty = new GeneratorSettings(null, null, null, null);\n+\n         /**\n          * To allow for dynamic enabling/disabling of pretty printing,\n          * pretty printer can be optionally configured for writer\n          * as well\n          */\n         public final PrettyPrinter prettyPrinter;\n-    \n+\n         /**\n          * When using data format that uses a schema, schema is passed\n          * to generator.\n          */\n         public final FormatSchema schema;\n-    \n+\n         /**\n          * Caller may want to specify character escaping details, either as\n          * defaults, or on call-by-call basis.\n          */\n         public final CharacterEscapes characterEscapes;\n \n-        public GeneratorSettings(PrettyPrinter pp, FormatSchema sch, CharacterEscapes esc) {\n+        /**\n+         * Caller may want to override so-called \"root value separator\",\n+         * String added (verbatim, with no quoting or escaping) between\n+         * values in root context. Default value is a single space character,\n+         * but this is often changed to linefeed.\n+         */\n+        public final SerializableString rootValueSeparator;\n+\n+        public GeneratorSettings(PrettyPrinter pp, FormatSchema sch,\n+                CharacterEscapes esc, SerializableString rootSep) {\n             prettyPrinter = pp;\n             schema = sch;\n             characterEscapes = esc;\n+            rootValueSeparator = rootSep;\n         }\n \n         public GeneratorSettings with(PrettyPrinter pp) {\n                 pp = NULL_PRETTY_PRINTER;\n             }\n             return (pp == prettyPrinter) ? this\n-                    : new GeneratorSettings(pp, schema, characterEscapes);\n+                    : new GeneratorSettings(pp, schema, characterEscapes, rootValueSeparator);\n         }\n \n         public GeneratorSettings with(FormatSchema sch) {\n             return (schema == sch) ? this\n-                    : new GeneratorSettings(prettyPrinter, sch, characterEscapes);\n+                    : new GeneratorSettings(prettyPrinter, sch, characterEscapes, rootValueSeparator);\n         }\n \n         public GeneratorSettings with(CharacterEscapes esc) {\n             return (characterEscapes == esc) ? this\n-                    : new GeneratorSettings(prettyPrinter, schema, esc);\n+                    : new GeneratorSettings(prettyPrinter, schema, esc, rootValueSeparator);\n+        }\n+\n+        public GeneratorSettings withRootValueSeparator(String sep) {\n+            if (sep == null) {\n+                if (rootValueSeparator == null) {\n+                    return this;\n+                }\n+            } else if (sep.equals(rootValueSeparator)) {\n+                return this;\n+            }\n+            return new GeneratorSettings(prettyPrinter, schema, characterEscapes,\n+                    (sep == null) ? null : new SerializedString(sep));\n+        }\n+\n+        public GeneratorSettings withRootValueSeparator(SerializableString sep) {\n+            if (sep == null) {\n+                if (rootValueSeparator == null) {\n+                    return this;\n+                }\n+            } else {\n+                if (rootValueSeparator != null\n+                        && sep.getValue().equals(rootValueSeparator.getValue())) {\n+                    return this;\n+                }\n+            }\n+            return new GeneratorSettings(prettyPrinter, schema, characterEscapes, sep);\n         }\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/seq/SequenceWriterTest.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/seq/SequenceWriterTest.java\n      */\n \n     private final ObjectMapper MAPPER = new ObjectMapper();\n-    {\n-        MAPPER.getFactory().setRootValueSeparator(\"\\n\");\n-    }\n-    private final ObjectWriter WRITER = MAPPER.writer();\n+    private final ObjectWriter WRITER = MAPPER.writer()\n+            .withRootValueSeparator(\"\\n\");\n \n     public void testSimpleNonArray() throws Exception\n     {", "timestamp": 1418875342, "metainfo": ""}