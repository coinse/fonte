{"sha": "2d052467a20991cadd167ddf4f927072a217050e", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n+import com.fasterxml.jackson.databind.util.ArrayIterator;\n \n /**\n  * Configuration settings container class for {@link DeserializerFactory}.\n     public boolean hasValueInstantiators() { return _valueInstantiators.length > 0; }\n     \n     public Iterable<Deserializers> deserializers() {\n-        return ArrayBuilders.arrayAsIterable(_additionalDeserializers);\n+        return new ArrayIterator<Deserializers>(_additionalDeserializers);\n     }\n \n     public Iterable<KeyDeserializers> keyDeserializers() {\n-        return ArrayBuilders.arrayAsIterable(_additionalKeyDeserializers);\n+        return new ArrayIterator<KeyDeserializers>(_additionalKeyDeserializers);\n     }\n     \n     public Iterable<BeanDeserializerModifier> deserializerModifiers() {\n-        return ArrayBuilders.arrayAsIterable(_modifiers);\n+        return new ArrayIterator<BeanDeserializerModifier>(_modifiers);\n     }\n \n     public Iterable<AbstractTypeResolver> abstractTypeResolvers() {\n-        return ArrayBuilders.arrayAsIterable(_abstractTypeResolvers);\n+        return new ArrayIterator<AbstractTypeResolver>(_abstractTypeResolvers);\n     }\n \n     public Iterable<ValueInstantiators> valueInstantiators() {\n-        return ArrayBuilders.arrayAsIterable(_valueInstantiators);\n+        return new ArrayIterator<ValueInstantiators>(_valueInstantiators);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java\n \n import com.fasterxml.jackson.databind.ser.*;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n+import com.fasterxml.jackson.databind.util.ArrayIterator;\n \n /**\n  * Configuration settings container class for\n     }\n \n     public boolean hasSerializers() { return _additionalSerializers.length > 0; }\n-\n     public boolean hasKeySerializers() { return _additionalKeySerializers.length > 0; }\n-    \n     public boolean hasSerializerModifiers() { return _modifiers.length > 0; }\n-    \n-    public Iterable<Serializers> serializers() {\n-        return ArrayBuilders.arrayAsIterable(_additionalSerializers);\n-    }\n-\n-    public Iterable<Serializers> keySerializers() {\n-        return ArrayBuilders.arrayAsIterable(_additionalKeySerializers);\n-    }\n-    \n-    public Iterable<BeanSerializerModifier> serializerModifiers() {\n-        return ArrayBuilders.arrayAsIterable(_modifiers);\n-    }\n+    public Iterable<Serializers> serializers() { return new ArrayIterator<Serializers>(_additionalSerializers); }\n+    public Iterable<Serializers> keySerializers() { return new ArrayIterator<Serializers>(_additionalKeySerializers); }\n+    public Iterable<BeanSerializerModifier> serializerModifiers() { return new ArrayIterator<BeanSerializerModifier>(_modifiers); }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java\n  * reuse scheme, which assumes that caller knows not to use instances\n  * concurrently (which works ok with primitive arrays since they can\n  * not contain other non-primitive types).\n+ * Also note that instances are not thread safe; the intent is that\n+ * a builder is constructed on per-call (deserialization) basis.\n  */\n public final class ArrayBuilders\n {\n         result[0] = element;\n         return result;\n     }\n-    \n-    /**\n-     * Helper method for exposing contents of arrays using a read-only iterator\n-     */\n-    public static <T> Iterator<T> arrayAsIterator(T[] array)\n-    {\n-        return new ArrayIterator<T>(array);\n-    }\n-\n-    public static <T> Iterable<T> arrayAsIterable(T[] array)\n-    {\n-        return new ArrayIterator<T>(array);\n-    }\n-\n-    /*\n-    /**********************************************************\n-    /* Helper classes\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Iterator implementation used to efficiently expose contents of an\n-     * Array as read-only iterator.\n-     */\n-    private final static class ArrayIterator<T>\n-        implements Iterator<T>, Iterable<T>\n-    {\n-        private final T[] _array;\n-        \n-        private int _index;\n-\n-        public ArrayIterator(T[] array) {\n-            _array = array;\n-            _index = 0;\n-        }\n-        \n-       @Override\n-        public boolean hasNext() {\n-            return _index < _array.length;\n-        }\n-\n-        @Override\n-        public T next()\n-        {\n-            if (_index >= _array.length) {\n-                throw new NoSuchElementException();\n-            }\n-            return _array[_index++];\n-        }\n-\n-        @Override\n-        public void remove() {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public Iterator<T> iterator() {\n-            return this;\n-        }\n-    }\n }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ArrayIterator.java\n+package com.fasterxml.jackson.databind.util;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Iterator implementation used to efficiently expose contents of an\n+ * Array as read-only iterator.\n+ */\n+public class ArrayIterator<T> implements Iterator<T>, Iterable<T>\n+{\n+    private final T[] _a;\n+    \n+    private int _index;\n+\n+    public ArrayIterator(T[] a) {\n+        _a = a;\n+        _index = 0;\n+    }\n+    \n+    @Override\n+    public boolean hasNext() { return _index < _a.length; }\n+\n+    @Override\n+    public T next() {\n+        if (_index >= _a.length) {\n+            throw new NoSuchElementException();\n+        }\n+        return _a[_index++];\n+    }\n+\n+    @Override public void remove() { throw new UnsupportedOperationException(); }\n+    @Override public Iterator<T> iterator() { return this; }\n+}", "timestamp": 1388728548, "metainfo": ""}