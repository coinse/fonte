{"sha": "184701524e5a3ba3903c8c10a35250fa2e9121b7", "log": "Implemented #149", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n             String name = jp.getText();\n             Enum<?> result = _resolver.findEnum(name);\n             if (result == null) {\n-                if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n-                    if (name.length() == 0 || name.trim().length() == 0) {\n+                name = name.trim();\n+                if (name.length() == 0) {\n+                    if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n                         return null;\n+                    }\n+                } else {\n+                    // [#149]: Allow use of 'String' indexes as well\n+                    char c = name.charAt(0);\n+                    if (c >= '0' && c <= '9') {\n+                        try {\n+                            int ix = Integer.parseInt(name);\n+                            result = _resolver.getEnum(ix);\n+                            if (result != null) {\n+                                return result;\n+                            }\n+                        } catch (NumberFormatException e) {\n+                            // fine, ignore, was not an integer\n+                        }\n                     }\n                 }\n                 if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n public class TestEnumDeserialization\n     extends BaseMapTest\n {\n-    /*\n-    /**********************************************************\n-    /* Helper classes, enums\n-    /**********************************************************\n-     */\n-\n     enum TestEnum { JACKSON, RULES, OK; }\n \n     /**\n             //exception as thrown correctly\n         }\n     }\n+\n+    // [Issue#149]: 'stringified' indexes for enums\n+    public void testIndexAsString() throws Exception\n+    {\n+        // first, regular index ought to work fine\n+        TestEnum en = MAPPER.readValue(\"2\", TestEnum.class);\n+        assertSame(TestEnum.values()[2], en);\n+\n+        // but also with quoted Strings\n+        en = MAPPER.readValue(quote(\"1\"), TestEnum.class);\n+        assertSame(TestEnum.values()[1], en);\n+    }\n }", "timestamp": 1395035764, "metainfo": ""}