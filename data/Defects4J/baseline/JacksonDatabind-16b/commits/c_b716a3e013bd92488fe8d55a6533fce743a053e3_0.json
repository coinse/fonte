{"sha": "b716a3e013bd92488fe8d55a6533fce743a053e3", "log": "more work for #120", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n         JavaType contentType = type.getContentType();\n         // Very first thing: is deserializer hard-coded for elements?\n         JsonDeserializer<Object> contentDeser = contentType.getValueHandler();\n+        final DeserializationConfig config = ctxt.getConfig();\n \n         // Then optional type info (1.5): if type has been resolved, we may already know type deserializer:\n         TypeDeserializer contentTypeDeser = contentType.getTypeHandler();\n         // but if not, may still be possible to find:\n         if (contentTypeDeser == null) {\n-            contentTypeDeser = findTypeDeserializer(ctxt.getConfig(), contentType);\n+            contentTypeDeser = findTypeDeserializer(config, contentType);\n         }\n \n         // 23-Nov-2010, tatu: Custom deserializer?\n-        JsonDeserializer<?> custom = _findCustomCollectionDeserializer(type,\n-                ctxt.getConfig(), beanDesc, contentTypeDeser, contentDeser);\n-        if (custom != null) {\n-            return custom;\n-        }\n-        \n-        Class<?> collectionClass = type.getRawClass();\n-        if (contentDeser == null) { // not defined by annotation\n-            // One special type: EnumSet:\n-            if (EnumSet.class.isAssignableFrom(collectionClass)) {\n-                return new EnumSetDeserializer(contentType, null);\n+        JsonDeserializer<?> deser = _findCustomCollectionDeserializer(type,\n+                config, beanDesc, contentTypeDeser, contentDeser);\n+        if (deser == null) {\n+            Class<?> collectionClass = type.getRawClass();\n+            if (contentDeser == null) { // not defined by annotation\n+                // One special type: EnumSet:\n+                if (EnumSet.class.isAssignableFrom(collectionClass)) {\n+                    deser = new EnumSetDeserializer(contentType, null);\n+                }\n             }\n         }\n         \n          * fail later on (as the primary type is not the interface we'd\n          * be implementing)\n          */\n-        if (type.isInterface() || type.isAbstract()) {\n-            @SuppressWarnings({ \"rawtypes\" })\n-            Class<? extends Collection> fallback = _collectionFallbacks.get(collectionClass.getName());\n-            if (fallback == null) {\n-                throw new IllegalArgumentException(\"Can not find a deserializer for non-concrete Collection type \"+type);\n-            }\n-            collectionClass = fallback;\n-            type = (CollectionType) ctxt.getConfig().constructSpecializedType(type, collectionClass);\n-            // But if so, also need to re-check creators...\n-            beanDesc = ctxt.getConfig().introspectForCreation(type);\n-        }\n-        ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc);\n-        // 13-Dec-2010, tatu: Can use more optimal deserializer if content type is String, so:\n-        if (contentType.getRawClass() == String.class) {\n-            // no value type deserializer because Strings are one of natural/native types:\n-            return new StringCollectionDeserializer(type, contentDeser, inst);\n-        }\n-        return new CollectionDeserializer(type, contentDeser, contentTypeDeser, inst);\n+        if (deser == null) {\n+            if (type.isInterface() || type.isAbstract()) {\n+                Class<?> collectionClass = type.getRawClass();\n+                @SuppressWarnings({ \"rawtypes\" })\n+                Class<? extends Collection> fallback = _collectionFallbacks.get(collectionClass.getName());\n+                if (fallback == null) {\n+                    throw new IllegalArgumentException(\"Can not find a deserializer for non-concrete Collection type \"+type);\n+                }\n+                collectionClass = fallback;\n+                type = (CollectionType) config.constructSpecializedType(type, collectionClass);\n+                // But if so, also need to re-check creators...\n+                beanDesc = config.introspectForCreation(type);\n+            }\n+            ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc);\n+            // 13-Dec-2010, tatu: Can use more optimal deserializer if content type is String, so:\n+            if (contentType.getRawClass() == String.class) {\n+                // no value type deserializer because Strings are one of natural/native types:\n+                deser = new StringCollectionDeserializer(type, contentDeser, inst);\n+            } else {\n+                deser = new CollectionDeserializer(type, contentDeser, contentTypeDeser, inst);\n+            }\n+        }\n+        // and then new with 2.2: ability to post-process it too (Issue#120)\n+        if (_factoryConfig.hasDeserializerModifiers()) {\n+            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n+                deser = mod.modifyCollectionDeserializer(config, type, beanDesc, deser);\n+            }\n+        }\n+        return deser;\n     }\n \n     // Copied almost verbatim from \"createCollectionDeserializer\" -- should try to share more code\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier.java\n import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;\n import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n import com.fasterxml.jackson.databind.type.ArrayType;\n+import com.fasterxml.jackson.databind.type.CollectionLikeType;\n+import com.fasterxml.jackson.databind.type.CollectionType;\n+import com.fasterxml.jackson.databind.type.MapLikeType;\n+import com.fasterxml.jackson.databind.type.MapType;\n \n /**\n  * Abstract class that defines API for objects that can be registered\n      * @since 2.2\n      */\n     public JsonDeserializer<?> modifyArrayDeserializer(DeserializationConfig config,\n-            ArrayType valueType,\n-            BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n+            ArrayType valueType, BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n+        return deserializer;\n+    }\n+\n+    /**\n+     * @since 2.2\n+     */\n+    public JsonDeserializer<?> modifyCollectionDeserializer(DeserializationConfig config,\n+            CollectionType type, BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n+        return deserializer;\n+    }\n+\n+    /**\n+     * @since 2.2\n+     */\n+    public JsonDeserializer<?> modifyCollectionLikeDeserializer(DeserializationConfig config,\n+            CollectionLikeType type, BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n         return deserializer;\n     }\n     \n+    /*\n+    \n+    public abstract JsonDeserializer<?> createEnumDeserializer(DeserializationContext ctxt,\n+            JavaType type, BeanDescription beanDesc)\n+        throws JsonMappingException;\n+\n+    public abstract JsonDeserializer<?> createMapDeserializer(DeserializationContext ctxt,\n+            MapType type, BeanDescription beanDesc)\n+        throws JsonMappingException;\n+\n+    public abstract JsonDeserializer<?> createMapLikeDeserializer(DeserializationContext ctxt,\n+            MapLikeType type, BeanDescription beanDesc)\n+        throws JsonMappingException;\n+\n+    public abstract KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n+            JavaType type)\n+        throws JsonMappingException;\n+     */\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n package com.fasterxml.jackson.databind.deser;\n \n import java.io.IOException;\n+import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n-import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n import com.fasterxml.jackson.databind.type.ArrayType;\n+import com.fasterxml.jackson.databind.type.CollectionType;\n \n @SuppressWarnings(\"serial\")\n public class TestBeanDeserializer extends BaseMapTest\n     }\n \n     \n-    // [Issue#121], arrays:\n-\n-    static class ArrayListModifier extends BeanDeserializerModifier {\n-        public JsonDeserializer<?> modifyArrayDeserializer(DeserializationConfig config,\n-                ArrayType valueType,\n+    // [Issue#121], arrays, collections, maps\n+\n+    static class ArrayDeserializerModifier extends BeanDeserializerModifier {\n+        public JsonDeserializer<?> modifyArrayDeserializer(DeserializationConfig config, ArrayType valueType,\n                 BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n             return (JsonDeserializer<?>) new StdDeserializer<Object>(Object.class) {\n-                @Override\n-                public Object deserialize(JsonParser jp,\n-                        DeserializationContext ctxt) throws IOException,\n-                        JsonProcessingException {\n+                @Override public Object deserialize(JsonParser jp,\n+                        DeserializationContext ctxt) {\n                     return new String[] { \"foo\" };\n+                }\n+            };\n+        }\n+    }\n+\n+    static class CollectionDeserializerModifier extends BeanDeserializerModifier {\n+        public JsonDeserializer<?> modifyCollectionDeserializer(DeserializationConfig config, CollectionType valueType,\n+                BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n+            return (JsonDeserializer<?>) new StdDeserializer<Object>(Object.class) {\n+                @Override public Object deserialize(JsonParser jp,\n+                        DeserializationContext ctxt) {\n+                    ArrayList<String> list = new ArrayList<String>();\n+                    list.add(\"foo\");\n+                    return list;\n                 }\n             };\n         }\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         mapper.registerModule(new SimpleModule(\"test\")\n-            .setDeserializerModifier(new ArrayListModifier()));\n+            .setDeserializerModifier(new ArrayDeserializerModifier()));\n         Object[] result = mapper.readValue(\"[1,2]\", Object[].class);\n         assertEquals(1, result.length);\n         assertEquals(\"foo\", result[0]);\n     }\n+\n+    public void testModifyCollectionDeserializer() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new SimpleModule(\"test\")\n+            .setDeserializerModifier(new CollectionDeserializerModifier())\n+        );\n+        List<?> result = mapper.readValue(\"[1,2]\", List.class);\n+        assertEquals(1, result.size());\n+        assertEquals(\"foo\", result.get(0));\n+    }\n }", "timestamp": 1354323259, "metainfo": ""}