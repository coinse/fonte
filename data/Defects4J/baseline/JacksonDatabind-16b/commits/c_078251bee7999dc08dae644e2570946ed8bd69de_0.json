{"sha": "078251bee7999dc08dae644e2570946ed8bd69de", "log": "Further refinements for cachability handling; nothing with value type deserializer should be cached", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n     extends ContainerDeserializerBase<Collection<Object>>\n     implements ContextualDeserializer\n {\n-    private static final long serialVersionUID = 3917273725180652224L;\n+    private static final long serialVersionUID = -1L; // since 2.5\n \n     // // Configuration\n \n                 (JsonDeserializer<Object>) vd, vtd,\n                 _valueInstantiator, (JsonDeserializer<Object>) dd);\n     }\n-    \n+\n+    // Important: do NOT cache if polymorphic values\n+    @Override // since 2.5\n+    public boolean isCachable() {\n+        return (_valueTypeDeserializer == null);\n+    }\n+\n     /*\n     /**********************************************************\n     /* Validation, post-processing (ResolvableDeserializer)\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java\n     /* Overrides\n     /**********************************************************\n      */\n-\n-    /**\n-     * Turns out that these are expensive enough to create so that caching\n-     * does make sense (in addition to Bean, Enum deserializers).\n-     * \n-     * @since 2.5\n-     */\n-    @Override\n-    public boolean isCachable() { return true; }\n \n     @Override\n     public SettableBeanProperty findBackReference(String refName) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n      * let's cache instances by default.\n      */\n     @Override\n-    public boolean isCachable() { return true; }\n+    public boolean isCachable() {\n+        // Important: do NOT cache if polymorphic values\n+        return (_valueTypeDeserializer == null);\n+    }\n \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n     extends StdDeserializer<EnumSet<?>>\n     implements ContextualDeserializer\n {\n-    private static final long serialVersionUID = 3479455075597887177L;\n+    private static final long serialVersionUID = 1L; // since 2.5\n \n     protected final JavaType _enumType;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n             elemTypeDeser = elemTypeDeser.forProperty(property);\n         }\n         return withDeserializer(elemTypeDeser, deser);\n+    }\n+\n+    @Override // since 2.5\n+    public boolean isCachable() {\n+        // Important: do NOT cache if polymorphic values\n+        return (_elementTypeDeserializer == null);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n                 _valueInstantiator, delegateDeser, valueDeser);\n     }\n \n+    @Override // since 2.5\n+    public boolean isCachable() {\n+        return true;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Validation, post-processing", "timestamp": 1416955111, "metainfo": ""}