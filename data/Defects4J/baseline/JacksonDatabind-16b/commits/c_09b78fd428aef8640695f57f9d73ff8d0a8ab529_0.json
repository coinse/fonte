{"sha": "09b78fd428aef8640695f57f9d73ff8d0a8ab529", "log": "Improve testing of untyped value handlign", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators3.java\n+package com.fasterxml.jackson.databind.creators;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestCreators3 extends BaseMapTest\n+{\n+    static class MultiCtor\n+    {\n+        protected String _a, _b;\n+        \n+        @JsonCreator\n+        MultiCtor(@JsonProperty(\"a\") String a, @JsonProperty(\"b\") String b) {\n+            _a = a;\n+            _b = b;\n+        }\n+\n+        MultiCtor(String a, String b, Object c) {\n+            throw new RuntimeException(\"Wrong factory!\");\n+        }\n+        \n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public void testMulitCtor421() throws Exception\n+    {\n+        MultiCtor bean = MAPPER.readValue(aposToQuotes(\"{'a':'123','b':'foo'}\"), MultiCtor.class);\n+        assertNotNull(bean);\n+        assertEquals(\"123\", bean._a);\n+        assertEquals(\"foo\", bean._b);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n         assertNull(result.get(3));\n     }\n \n+    public void testBigUntypedMap() throws Exception\n+    {\n+        Map<String,Object> map = new LinkedHashMap<String,Object>();\n+        for (int i = 0; i < 1100; ++i) {\n+            if ((i & 1) == 0) {\n+                map.put(String.valueOf(i), Integer.valueOf(i));\n+            } else {\n+                Map<String,Object> map2 = new LinkedHashMap<String,Object>();\n+                map2.put(\"x\", Integer.valueOf(i));\n+                map.put(String.valueOf(i), map2);\n+            }\n+        }\n+        String json = MAPPER.writeValueAsString(map);\n+        Object bound = MAPPER.readValue(json, Object.class);\n+        assertEquals(map, bound);\n+    }\n+    \n     /**\n      * Let's also try another way to express \"gimme a Map\" deserialization;\n      * this time by specifying a Map class, to reduce need to cast\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestUntypedDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestUntypedDeserialization.java\n     {\n         final String JSON = SAMPLE_DOC_JSON_SPEC;\n \n-        JsonFactory jf = new JsonFactory();\n-\n         /* To get \"untyped\" Mapping (to Maps, Lists, instead of beans etc),\n          * we'll specify plain old Object.class as the target.\n          */\n-        Object root = new ObjectMapper().readValue(jf.createParser(new StringReader(JSON)), Object.class);\n+        Object root = new ObjectMapper().readValue(JSON, Object.class);\n \n         assertType(root, Map.class);\n         Map<?,?> rootMap = (Map<?,?>) root;\n--- a/src/test/java/perf/ManualReadPerfUntyped.java\n+++ b/src/test/java/perf/ManualReadPerfUntyped.java\n         JsonNode input2 = m.readTree(data);\n \n         new ManualReadPerfUntyped()\n-            .testFromBytes(\n-//            .testFromString(\n+//            .testFromBytes(\n+            .testFromString(\n                 m, \"JSON-as-Object\", input1, Object.class\n                 ,m, \"JSON-as-Object2\", input2, Object.class\n //               ,m, \"JSON-as-Node\", input2, JsonNode.class", "timestamp": 1398652826, "metainfo": ""}