{"sha": "ad932edca2b142f55a0d6cfb2f83d9681114a76c", "log": "Add unit tests to reproduce issues with hierarchich/nested @JsonUnwrapped with prefixes", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrapped.java\n+package com.fasterxml.jackson.databind.struct;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Unit tests for verifying [JACKSON-132] implementation.\n+ */\n+public class TestUnwrapped extends BaseMapTest\n+{\n+    static class Unwrapping {\n+        public String name;\n+        @JsonUnwrapped\n+        public Location location;\n+\n+        public Unwrapping() { }\n+        public Unwrapping(String str, int x, int y) {\n+            name = str;\n+            location = new Location(x, y);\n+        }\n+    }\n+\n+    static class DeepUnwrapping\n+    {\n+        @JsonUnwrapped\n+        public Unwrapping unwrapped;\n+\n+        public DeepUnwrapping() { }\n+        public DeepUnwrapping(String str, int x, int y) {\n+            unwrapped = new Unwrapping(str, x, y);\n+        }\n+    }\n+    \n+    static class UnwrappingWithCreator {\n+        public String name;\n+\n+        @JsonUnwrapped\n+        public Location location;\n+\n+        @JsonCreator\n+        public UnwrappingWithCreator(@JsonProperty(\"name\") String n) {\n+            name = n;\n+        }\n+    }\n+    \n+    static class Location {\n+        public int x;\n+        public int y;\n+\n+        public Location() { }\n+        public Location(int x, int y) {\n+            this.x = x;\n+            this.y = y;\n+        }\n+    }\n+\n+    // Class with two unwrapped properties\n+    static class TwoUnwrappedProperties {\n+        @JsonUnwrapped\n+        public Location location;\n+        @JsonUnwrapped\n+        public Name name;\n+\n+        public TwoUnwrappedProperties() { }\n+    }\n+\n+    static class Name {\n+        public String first, last;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Tests, serialization\n+    /**********************************************************\n+     */\n+\n+    private final ObjectMapper mapper = new ObjectMapper();\n+    \n+    public void testSimpleUnwrappingSerialize() throws Exception\n+    {\n+        assertEquals(\"{\\\"name\\\":\\\"Tatu\\\",\\\"x\\\":1,\\\"y\\\":2}\",\n+                mapper.writeValueAsString(new Unwrapping(\"Tatu\", 1, 2)));\n+    }\n+    public void testDeepUnwrappingSerialize() throws Exception\n+    {\n+        assertEquals(\"{\\\"name\\\":\\\"Tatu\\\",\\\"x\\\":1,\\\"y\\\":2}\",\n+                mapper.writeValueAsString(new DeepUnwrapping(\"Tatu\", 1, 2)));\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Tests, deserialization\n+    /**********************************************************\n+     */\n+    \n+    public void testSimpleUnwrappedDeserialize() throws Exception\n+    {\n+        Unwrapping bean = mapper.readValue(\"{\\\"name\\\":\\\"Tatu\\\",\\\"y\\\":7,\\\"x\\\":-13}\",\n+                Unwrapping.class);\n+        assertEquals(\"Tatu\", bean.name);\n+        Location loc = bean.location;\n+        assertNotNull(loc);\n+        assertEquals(-13, loc.x);\n+        assertEquals(7, loc.y);\n+    }\n+    \n+    public void testDoubleUnwrapping() throws Exception\n+    {\n+        TwoUnwrappedProperties bean = mapper.readValue(\"{\\\"first\\\":\\\"Joe\\\",\\\"y\\\":7,\\\"last\\\":\\\"Smith\\\",\\\"x\\\":-13}\",\n+                TwoUnwrappedProperties.class);\n+        Location loc = bean.location;\n+        assertNotNull(loc);\n+        assertEquals(-13, loc.x);\n+        assertEquals(7, loc.y);\n+        Name name = bean.name;\n+        assertNotNull(name);\n+        assertEquals(\"Joe\", name.first);\n+        assertEquals(\"Smith\", name.last);\n+    }\n+    \n+    public void testDeepUnwrapping() throws Exception\n+    {\n+        DeepUnwrapping bean = mapper.readValue(\"{\\\"x\\\":3,\\\"name\\\":\\\"Bob\\\",\\\"y\\\":27}\",\n+                DeepUnwrapping.class);\n+        Unwrapping uw = bean.unwrapped;\n+        assertNotNull(uw);\n+        assertEquals(\"Bob\", uw.name);\n+        Location loc = uw.location;\n+        assertNotNull(loc);\n+        assertEquals(3, loc.x);\n+        assertEquals(27, loc.y);\n+    }\n+    \n+    public void testUnwrappedDeserializeWithCreator() throws Exception\n+    {\n+        UnwrappingWithCreator bean = mapper.readValue(\"{\\\"x\\\":1,\\\"y\\\":2,\\\"name\\\":\\\"Tatu\\\"}\",\n+                UnwrappingWithCreator.class);\n+        assertEquals(\"Tatu\", bean.name);\n+        Location loc = bean.location;\n+        assertNotNull(loc);\n+        assertEquals(1, loc.x);\n+        assertEquals(2, loc.y);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedWithPrefix.java\n+package com.fasterxml.jackson.databind.struct;\n+\n+import com.fasterxml.jackson.annotation.JsonUnwrapped;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class TestUnwrappedWithPrefix extends BaseMapTest\n+{\n+    static class Unwrapping {\n+        public String name;\n+        @JsonUnwrapped\n+        public Location location;\n+\n+        public Unwrapping() { }\n+        public Unwrapping(String str, int x, int y) {\n+            name = str;\n+            location = new Location(x, y);\n+        }\n+    }\n+    static class DeepUnwrapping\n+    {\n+        @JsonUnwrapped\n+        public Unwrapping unwrapped;\n+\n+        public DeepUnwrapping() { }\n+        public DeepUnwrapping(String str, int x, int y) {\n+            unwrapped = new Unwrapping(str, x, y);\n+        }\n+    }\n+\n+    static class Location {\n+        public int x;\n+        public int y;\n+\n+        public Location() { }\n+        public Location(int x, int y) {\n+            this.x = x;\n+            this.y = y;\n+        }\n+    }\n+\n+    // Class with unwrapping using prefixes\n+    static class PrefixUnwrap\n+    {\n+        public String name;\n+        @JsonUnwrapped(prefix=\"_\")\n+        public Location location;\n+\n+        public PrefixUnwrap() { }\n+        public PrefixUnwrap(String str, int x, int y) {\n+            name = str;\n+            location = new Location(x, y);\n+        }\n+    }\n+    \n+    static class DeepPrefixUnwrap\n+    {\n+        @JsonUnwrapped(prefix=\"u.\")\n+        public PrefixUnwrap unwrapped;\n+\n+        public DeepPrefixUnwrap() { }\n+        public DeepPrefixUnwrap(String str, int x, int y) {\n+            unwrapped = new PrefixUnwrap(str, x, y);\n+        }\n+    }\n+\n+    // Let's actually test hierarchic names with unwrapping bit more:\n+    \n+    static class ConfigRoot\n+    {\n+        @JsonUnwrapped(prefix=\"general.\")\n+        public ConfigGeneral general = new ConfigGeneral();\n+        \n+        @JsonUnwrapped(prefix=\"misc.\")\n+        public ConfigMisc misc = new ConfigMisc();\n+\n+        public ConfigRoot() { }\n+        public ConfigRoot(String name, int value)\n+        {\n+            general = new ConfigGeneral(name);\n+            misc.value = value;\n+        }\n+    }\n+\n+    static class ConfigGeneral\n+    {\n+        @JsonUnwrapped(prefix=\"names.\")\n+        public ConfigNames names = new ConfigNames();\n+        \n+        public ConfigGeneral() { }\n+        public ConfigGeneral(String name) {\n+            names.name = name;\n+        }\n+    }\n+\n+    static class ConfigNames {\n+        public String name = \"x\";\n+    }\n+\n+    static class ConfigMisc {\n+        public int value;\n+    }\n+    \n+    // // // Reuse mapper to keep tests bit faster\n+\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    /*\n+    /**********************************************************\n+    /* Tests, serialization\n+    /**********************************************************\n+     */\n+\n+    public void testPrefixedUnwrappingSerialize() throws Exception\n+    {\n+        assertEquals(\"{\\\"name\\\":\\\"Tatu\\\",\\\"_x\\\":1,\\\"_y\\\":2}\",\n+                mapper.writeValueAsString(new PrefixUnwrap(\"Tatu\", 1, 2)));\n+    }\n+\n+    public void testDeepPrefixedUnwrappingSerialize() throws Exception\n+    {\n+        assertEquals(\"{\\\"u.name\\\":\\\"Bubba\\\",\\\"_x\\\":1,\\\"_y\\\":1}\",\n+                mapper.writeValueAsString(new DeepPrefixUnwrap(\"Bubba\", 1, 1)));\n+    }\n+\n+    public void testHierarchicConfigSerialize() throws Exception\n+    {\n+        assertEquals(\"{\\\"general.names.name\\\":\\\"Fred\\\",\\\"misc.value\\\":25}\",\n+                mapper.writeValueAsString(new ConfigRoot(\"Fred\", 25)));\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Tests, deserialization\n+    /**********************************************************\n+     */\n+\n+    public void testPrefixedUnwrapping() throws Exception\n+    {\n+        PrefixUnwrap bean = mapper.readValue(\"{\\\"name\\\":\\\"Axel\\\",\\\"_x\\\":4,\\\"_y\\\":7}\", PrefixUnwrap.class);\n+        assertNotNull(bean);\n+        assertEquals(\"Axel\", bean.name);\n+        assertNotNull(bean.location);\n+        assertEquals(4, bean.location.x);\n+        assertEquals(7, bean.location.y);\n+    }\n+    \n+    public void testDeepPrefixedUnwrappingDeserialize() throws Exception\n+    {\n+        DeepPrefixUnwrap bean = mapper.readValue(\"{\\\"u.name\\\":\\\"Bubba\\\",\\\"_x\\\":2,\\\"_y\\\":3}\",\n+                DeepPrefixUnwrap.class);\n+        assertNotNull(bean.unwrapped);\n+        assertEquals(\"Bubba\", bean.unwrapped.name);\n+        assertNotNull(bean.unwrapped.location);\n+        assertEquals(2, bean.unwrapped.location.x);\n+        assertEquals(3, bean.unwrapped.location.y);\n+    }\n+    \n+    public void testHierarchicConfigDeserialize() throws Exception\n+    {\n+        ConfigRoot root = mapper.readValue(\"{\\\"general.names.name\\\":\\\"Bob\\\",\\\"misc.value\\\":3}\",\n+                ConfigRoot.class);\n+        assertNotNull(root.general);\n+        assertNotNull(root.general.names);\n+        assertEquals(\"Bob\", root.general.names.name);\n+        assertNotNull(root.misc);\n+        assertEquals(3, root.misc.value);\n+    }\n+\n+}", "timestamp": 1327353430, "metainfo": ""}