{"sha": "be00482ca3972c97c6eb43f8bc001ef4f1a23bdd", "log": "minor test refactoring for better grouping", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyCustom.java\n+package com.fasterxml.jackson.databind.introspect;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonNaming;\n+import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedField;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n+\n+/**\n+ * Unit tests to verify functioning of {@link PropertyNamingStrategy} which\n+ * was added in Jackson 1.8, as per [JACKSON-178].\n+ */\n+@SuppressWarnings(\"serial\")\n+public class TestNamingStrategyCustom extends BaseMapTest\n+{\n+    /*\n+    /**********************************************************************\n+    /* Helper classes\n+    /**********************************************************************\n+     */\n+\n+\tstatic class PrefixStrategy extends PropertyNamingStrategy\n+    {\n+        @Override\n+        public String nameForField(MapperConfig<?> config,\n+                AnnotatedField field, String defaultName)\n+        {\n+            return \"Field-\"+defaultName;\n+        }\n+\n+        @Override\n+        public String nameForGetterMethod(MapperConfig<?> config,\n+                AnnotatedMethod method, String defaultName)\n+        {\n+            return \"Get-\"+defaultName;\n+        }\n+\n+        @Override\n+        public String nameForSetterMethod(MapperConfig<?> config,\n+                AnnotatedMethod method, String defaultName)\n+        {\n+            return \"Set-\"+defaultName;\n+        }\n+    }\n+    \n+    static class CStyleStrategy extends PropertyNamingStrategy\n+    {\n+        @Override\n+        public String nameForField(MapperConfig<?> config, AnnotatedField field, String defaultName)\n+        {\n+            return convert(defaultName);\n+        }\n+\n+        @Override\n+        public String nameForGetterMethod(MapperConfig<?> config, AnnotatedMethod method, String defaultName)\n+        {\n+            return convert(defaultName);\n+        }\n+\n+        @Override\n+        public String nameForSetterMethod(MapperConfig<?> config, AnnotatedMethod method, String defaultName)\n+        {\n+            return convert(defaultName);\n+        }\n+\n+        private String convert(String input)\n+        {\n+            // easy: replace capital letters with underscore, lower-cases equivalent\n+            StringBuilder result = new StringBuilder();\n+            for (int i = 0, len = input.length(); i < len; ++i) {\n+                char c = input.charAt(i);\n+                if (Character.isUpperCase(c)) {\n+                    result.append('_');\n+                    c = Character.toLowerCase(c);\n+                }\n+                result.append(c);\n+            }\n+            return result.toString();\n+        }\n+    }\n+    \n+    static class GetterBean {\n+        public int getKey() { return 123; }\n+    }\n+\n+    static class SetterBean {\n+        protected int value;\n+        \n+        public void setKey(int v) {\n+            value = v;\n+        }\n+    }\n+\n+    static class FieldBean {\n+        public int key;\n+\n+        public FieldBean() { this(0); }\n+        public FieldBean(int v) { key = v; }\n+    }\n+\n+    @JsonPropertyOrder({\"first_name\", \"last_name\"})\n+    static class PersonBean {\n+        public String firstName;\n+        public String lastName;\n+        public int age;\n+\n+        public PersonBean() { this(null, null, 0); }\n+        public PersonBean(String f, String l, int a)\n+        {\n+            firstName = f;\n+            lastName = l;\n+            age = a;\n+        }\n+    }\n+\n+    static class Value {\n+        public int intValue;\n+        \n+        public Value() { this(0); }\n+        public Value(int v) { intValue = v; }\n+    }\n+\n+    static class SetterlessWithValue\n+    {\n+        protected ArrayList<Value> values = new ArrayList<Value>();\n+\n+        public List<Value> getValueList() { return values; }\n+\n+        public SetterlessWithValue add(int v) {\n+            values.add(new Value(v));\n+            return this;\n+        }\n+    }\n+\n+    // [JACKSON-687]\n+    static class LcStrategy extends PropertyNamingStrategy.PropertyNamingStrategyBase\n+    {\n+        @Override\n+        public String translate(String propertyName) {\n+            return propertyName.toLowerCase();\n+        }\n+    }\n+    \n+    static class RenamedCollectionBean\n+    {\n+        @JsonDeserialize\n+        private List<String> THEvalues = Collections.emptyList();\n+        \n+        // intentionally odd name, to be renamed by naming strategy\n+        public List<String> getTheVALUEs() { return THEvalues; }\n+    }\n+\n+    // [Issue#45]: Support @JsonNaming\n+    @JsonNaming(PrefixStrategy.class)\n+    static class BeanWithPrefixNames\n+    {\n+        protected int a = 3;\n+        \n+        public int getA() { return a; }\n+        public void setA(int value) { a = value; }\n+    }\n+    \n+    /*\n+    /**********************************************************************\n+    /* Test methods\n+    /**********************************************************************\n+     */\n+    \n+    public void testSimpleGetters() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.setPropertyNamingStrategy(new PrefixStrategy());\n+        assertEquals(\"{\\\"Get-key\\\":123}\", mapper.writeValueAsString(new GetterBean()));\n+    }\n+\n+    public void testSimpleSetters() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.setPropertyNamingStrategy(new PrefixStrategy());\n+        SetterBean bean = mapper.readValue(\"{\\\"Set-key\\\":13}\", SetterBean.class);\n+        assertEquals(13, bean.value);\n+    }\n+\n+    public void testSimpleFields() throws Exception\n+    {\n+        // First serialize\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.setPropertyNamingStrategy(new PrefixStrategy());\n+        String json = mapper.writeValueAsString(new FieldBean(999));\n+        assertEquals(\"{\\\"Field-key\\\":999}\", json);\n+\n+        // then deserialize\n+        FieldBean result = mapper.readValue(json, FieldBean.class);\n+        assertEquals(999, result.key);\n+    }\n+\n+    public void testCStyleNaming() throws Exception\n+    {\n+        // First serialize\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.setPropertyNamingStrategy(new CStyleStrategy());\n+        String json = mapper.writeValueAsString(new PersonBean(\"Joe\", \"Sixpack\", 42));\n+        assertEquals(\"{\\\"first_name\\\":\\\"Joe\\\",\\\"last_name\\\":\\\"Sixpack\\\",\\\"age\\\":42}\", json);\n+        \n+        // then deserialize\n+        PersonBean result = mapper.readValue(json, PersonBean.class);\n+        assertEquals(\"Joe\", result.firstName);\n+        assertEquals(\"Sixpack\", result.lastName);\n+        assertEquals(42, result.age);\n+    }\n+\n+    public void testWithGetterAsSetter() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.setPropertyNamingStrategy(new CStyleStrategy());\n+        SetterlessWithValue input = new SetterlessWithValue().add(3);\n+        String json = mapper.writeValueAsString(input);\n+        assertEquals(\"{\\\"value_list\\\":[{\\\"int_value\\\":3}]}\", json);\n+\n+        SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class);\n+        assertNotNull(result.values);\n+        assertEquals(1, result.values.size());\n+        assertEquals(3, result.values.get(0).intValue);\n+    }\n+\n+    // For [JACKSON-687]\n+    public void testJson() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.setPropertyNamingStrategy(new LcStrategy());\n+//        mapper.disable(DeserializationConfig.DeserializationFeature.USE_GETTERS_AS_SETTERS);\n+        RenamedCollectionBean foo = mapper.readValue(\"{\\\"thevalues\\\":[\\\"a\\\"]}\", RenamedCollectionBean.class);\n+        assertNotNull(foo.getTheVALUEs());\n+        assertEquals(1, foo.getTheVALUEs().size());\n+        assertEquals(\"a\", foo.getTheVALUEs().get(0));\n+    }\n+\n+    // @JsonNaming / [Issue#45]\n+    public void testPerClassAnnotation() throws Exception\n+    {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.setPropertyNamingStrategy(new LcStrategy());\n+        BeanWithPrefixNames input = new BeanWithPrefixNames();\n+        String json = mapper.writeValueAsString(input);\n+        assertEquals(\"{\\\"Get-a\\\":3}\", json);\n+\n+        BeanWithPrefixNames output = mapper.readValue(\"{\\\"Set-a\\\":7}\",\n+                BeanWithPrefixNames.class);\n+        assertEquals(7, output.a);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyStd.java\n+package com.fasterxml.jackson.databind.introspect;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n+import com.fasterxml.jackson.databind.introspect.TestNamingStrategyCustom.PersonBean;\n+\n+/**\n+ * Unit tests to verify functioning of \n+ * {@link PropertyNamingStrategy#CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES} \n+ * and\n+ * {@link PropertyNamingStrategy#PASCAL_CASE_TO_CAMEL_CASE } \n+ * inside the context of an ObjectMapper.\n+ * PASCAL_CASE_TO_CAMEL_CASE was added in Jackson 2.1,\n+ * as per [JACKSON-63].\n+ */\n+public class TestNamingStrategyStd extends BaseMapTest\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+\n+    @JsonPropertyOrder({\"www\", \"some_url\", \"some_uris\"})\n+    static class Acronyms\n+    {\n+        public String WWW;\n+        public String someURL;\n+        public String someURIs;\n+        \n+        public Acronyms() {this(null, null, null);}\n+        public Acronyms(String WWW, String someURL, String someURIs)\n+        {\n+            this.WWW = WWW;\n+            this.someURL = someURL;\n+            this.someURIs = someURIs;\n+        }\n+    }\n+    \n+    @JsonPropertyOrder({\"from_user\", \"user\", \"from$user\", \"from7user\", \"_\"})\n+    static class UnchangedNames\n+    {\n+        public String from_user;\n+        public String _user;\n+        public String from$user;\n+        public String from7user;\n+        public String _;\n+        \n+        public UnchangedNames() {this(null, null, null, null, null);}\n+        public UnchangedNames(String from_user, String _user, String from$user, String from7user, String _)\n+        {\n+            this.from_user = from_user;\n+            this._user = _user;\n+            this.from$user = from$user;\n+            this.from7user = from7user;\n+            this._ = _;\n+        }\n+    }\n+    \n+    @JsonPropertyOrder({\"results\", \"user\", \"__\", \"$_user\"})\n+    static class OtherNonStandardNames\n+    {\n+        public String Results;\n+        public String _User;\n+        public String ___;\n+        public String $User;\n+        \n+        public OtherNonStandardNames() {this(null, null, null, null);}\n+        public OtherNonStandardNames(String Results, String _User, String ___, String $User)\n+        {\n+            this.Results = Results;\n+            this._User = _User;\n+            this.___ = ___;\n+            this.$User = $User;\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Set up\n+    /**********************************************************\n+     */\n+\n+    public static List<Object[]> NAME_TRANSLATIONS = Arrays.asList(new Object[][] {\n+                {null, null},\n+                {\"\", \"\"},\n+                {\"a\", \"a\"},\n+                {\"abc\", \"abc\"},\n+                {\"1\", \"1\"},\n+                {\"123\", \"123\"},\n+                {\"1a\", \"1a\"},\n+                {\"a1\", \"a1\"},\n+                {\"$\", \"$\"},\n+                {\"$a\", \"$a\"},\n+                {\"a$\", \"a$\"},\n+                {\"$_a\", \"$_a\"},\n+                {\"a_$\", \"a_$\"},\n+                {\"a$a\", \"a$a\"},\n+                {\"$A\", \"$_a\"},\n+                {\"$_A\", \"$_a\"},\n+                {\"_\", \"_\"},\n+                {\"__\", \"_\"},\n+                {\"___\", \"__\"},\n+                {\"A\", \"a\"},\n+                {\"A1\", \"a1\"},\n+                {\"1A\", \"1_a\"},\n+                {\"_a\", \"a\"},\n+                {\"_A\", \"a\"},\n+                {\"a_a\", \"a_a\"},\n+                {\"a_A\", \"a_a\"},\n+                {\"A_A\", \"a_a\"},\n+                {\"A_a\", \"a_a\"},\n+                {\"WWW\", \"www\"},\n+                {\"someURI\", \"some_uri\"},\n+                {\"someURIs\", \"some_uris\"},\n+                {\"Results\", \"results\"},\n+                {\"_Results\", \"results\"},\n+                {\"_results\", \"results\"},\n+                {\"__results\", \"_results\"},\n+                {\"__Results\", \"_results\"},\n+                {\"___results\", \"__results\"},\n+                {\"___Results\", \"__results\"},\n+                {\"userName\", \"user_name\"},\n+                {\"user_name\", \"user_name\"},\n+                {\"user__name\", \"user__name\"},\n+                {\"UserName\", \"user_name\"},\n+                {\"User_Name\", \"user_name\"},\n+                {\"User__Name\", \"user__name\"},\n+                {\"_user_name\", \"user_name\"},\n+                {\"_UserName\", \"user_name\"},\n+                {\"_User_Name\", \"user_name\"},\n+                {\"UGLY_NAME\", \"ugly_name\"},\n+                {\"_Bars\", \"bars\" }\n+    });\n+    \n+    private ObjectMapper mapper;\n+    \n+    @Override\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+        mapper = new ObjectMapper();\n+        mapper.setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods for CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Unit test to verify translations of \n+     * {@link PropertyNamingStrategy#CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES} \n+     * outside the context of an ObjectMapper.\n+     * CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES was added in Jackson 1.9, \n+     * as per [JACKSON-598].\n+     */\n+    @Test\n+    public void testLowerCaseStrategyStandAlone()\n+    {\n+        for (Object[] pair : NAME_TRANSLATIONS) {\n+            String translatedJavaName = PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES.nameForField(null, null,\n+                    (String) pair[0]);\n+            assertEquals((String) pair[1], translatedJavaName);\n+        }\n+    }\n+    \n+    public void testLowerCaseTranslations() throws Exception\n+    {\n+        // First serialize\n+        String json = mapper.writeValueAsString(new PersonBean(\"Joe\", \"Sixpack\", 42));\n+        assertEquals(\"{\\\"first_name\\\":\\\"Joe\\\",\\\"last_name\\\":\\\"Sixpack\\\",\\\"age\\\":42}\", json);\n+        \n+        // then deserialize\n+        PersonBean result = mapper.readValue(json, PersonBean.class);\n+        assertEquals(\"Joe\", result.firstName);\n+        assertEquals(\"Sixpack\", result.lastName);\n+        assertEquals(42, result.age);\n+    }\n+    \n+    public void testLowerCaseAcronymsTranslations() throws Exception\n+    {\n+        // First serialize\n+        String json = mapper.writeValueAsString(new Acronyms(\"world wide web\", \"http://jackson.codehaus.org\", \"/path1/,/path2/\"));\n+        assertEquals(\"{\\\"www\\\":\\\"world wide web\\\",\\\"some_url\\\":\\\"http://jackson.codehaus.org\\\",\\\"some_uris\\\":\\\"/path1/,/path2/\\\"}\", json);\n+        \n+        // then deserialize\n+        Acronyms result = mapper.readValue(json, Acronyms.class);\n+        assertEquals(\"world wide web\", result.WWW);\n+        assertEquals(\"http://jackson.codehaus.org\", result.someURL);\n+        assertEquals(\"/path1/,/path2/\", result.someURIs);\n+    }\n+\n+    public void testLowerCaseOtherNonStandardNamesTranslations() throws Exception\n+    {\n+        // First serialize\n+        String json = mapper.writeValueAsString(new OtherNonStandardNames(\"Results\", \"_User\", \"___\", \"$User\"));\n+        assertEquals(\"{\\\"results\\\":\\\"Results\\\",\\\"user\\\":\\\"_User\\\",\\\"__\\\":\\\"___\\\",\\\"$_user\\\":\\\"$User\\\"}\", json);\n+        \n+        // then deserialize\n+        OtherNonStandardNames result = mapper.readValue(json, OtherNonStandardNames.class);\n+        assertEquals(\"Results\", result.Results);\n+        assertEquals(\"_User\", result._User);\n+        assertEquals(\"___\", result.___);\n+        assertEquals(\"$User\", result.$User);\n+    }\n+\n+    public void testLowerCaseUnchangedNames() throws Exception\n+    {\n+        // First serialize\n+        String json = mapper.writeValueAsString(new UnchangedNames(\"from_user\", \"_user\", \"from$user\", \"from7user\", \"_\"));\n+        assertEquals(\"{\\\"from_user\\\":\\\"from_user\\\",\\\"user\\\":\\\"_user\\\",\\\"from$user\\\":\\\"from$user\\\",\\\"from7user\\\":\\\"from7user\\\",\\\"_\\\":\\\"_\\\"}\", json);\n+        \n+        // then deserialize\n+        UnchangedNames result = mapper.readValue(json, UnchangedNames.class);\n+        assertEquals(\"from_user\", result.from_user);\n+        assertEquals(\"_user\", result._user);\n+        assertEquals(\"from$user\", result.from$user);\n+        assertEquals(\"from7user\", result.from7user);\n+        assertEquals(\"_\", result._);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods for PASCAL_CASE_TO_CAMEL_CASE (added in 2.1)\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Unit test to verify translations of \n+     * {@link PropertyNamingStrategy#PASCAL_CASE_TO_CAMEL_CASE } \n+     * outside the context of an ObjectMapper.\n+     * PASCAL_CASE_TO_CAMEL_CASE was added in Jackson 2.1.0, \n+     * as per [JACKSON-63].\n+     */\n+    @Test\n+    public void testPascalCaseStandAlone()\n+    {\n+    \tString translatedJavaName = PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE.nameForField\n+    \t        (null, null, \"userName\");\n+        assertEquals(\"UserName\", translatedJavaName);\n+\n+        translatedJavaName = PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE.nameForField\n+                (null, null, \"User\");\n+        assertEquals(\"User\", translatedJavaName);\n+\n+        translatedJavaName = PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE.nameForField\n+                (null, null, \"user\");\n+        assertEquals(\"User\", translatedJavaName);\n+        translatedJavaName = PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE.nameForField\n+                (null, null, \"x\");\n+        assertEquals(\"X\", translatedJavaName);\n+    }\n+}", "timestamp": 1381890762, "metainfo": ""}