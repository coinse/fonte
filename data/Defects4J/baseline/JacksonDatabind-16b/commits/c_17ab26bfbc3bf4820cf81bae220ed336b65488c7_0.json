{"sha": "17ab26bfbc3bf4820cf81bae220ed336b65488c7", "log": "Cleaning up #576 slightly; add another related fluent-style method", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n     /* Configuration: mix-in annotations\n     /**********************************************************\n      */\n-    \n+\n     /**\n      * Method to use for defining mix-in annotations to use for augmenting\n      * annotations that processable (serializable / deserializable)\n      * Annotations from source classes (and their supertypes)\n      * will <b>override</b>\n      * annotations that target classes (and their super-types) have.\n-     */\n-    public final void setMixInAnnotations(Map<Class<?>, Class<?>> sourceMixins)\n+     *\n+     * @since 2.5\n+     */\n+    public ObjectMapper setMixIns(Map<Class<?>, Class<?>> sourceMixins)\n     {\n         _mixInAnnotations.clear();\n         if (sourceMixins != null && sourceMixins.size() > 0) {\n                 _mixInAnnotations.put(new ClassKey(en.getKey()), en.getValue());\n             }\n         }\n+        return this;\n+    }\n+\n+    /**\n+     * @deprecated Since 2.5: replaced by a fluent form of the method; {@link #setMixIns(Class, Class)}.\n+     */\n+    public void setMixInAnnotations(Map<Class<?>, Class<?>> sourceMixins) {\n+        setMixIns(sourceMixins);\n+    }\n+\n+    /**\n+     * @deprecated Since 2.5: replaced by a fluent form of the method; {@link #addMixIn(Class, Class)}.\n+     */\n+    @Deprecated\n+    public final void addMixInAnnotations(Class<?> target, Class<?> mixinSource) {\n+        addMixIn(target, mixinSource);\n     }\n \n     /**\n      * @param mixinSource Class (or interface) whose annotations are to\n      *   be \"added\" to target's annotations, overriding as necessary\n      *\n-     * @deprecated Replaced by a fluent form of the method; {@link #addMixIn(Class, Class)}.\n-     */\n-    @Deprecated\n-    public final void addMixInAnnotations(Class<?> target, Class<?> mixinSource)\n+     * @since 2.5\n+     */\n+    public ObjectMapper addMixIn(Class<?> target, Class<?> mixinSource)\n     {\n         _mixInAnnotations.put(new ClassKey(target), mixinSource);\n-    }\n-\n-    /**\n-     * Method to use for adding mix-in annotations to use for augmenting\n-     * specified class or interface. All annotations from\n-     * <code>mixinSource</code> are taken to override annotations\n-     * that <code>target</code> (or its supertypes) has.\n-     *\n-     * @param target Class (or interface) whose annotations to effectively override\n-     * @param mixinSource Class (or interface) whose annotations are to\n-     *   be \"added\" to target's annotations, overriding as necessary\n-     */\n-    public final ObjectMapper addMixIn(Class<?> target, Class<?> mixinSource)\n-    {\n-        _mixInAnnotations.put(new ClassKey(target), mixinSource);\n-        return this;\n-    }\n-\n-    public final Class<?> findMixInClassFor(Class<?> cls) {\n+        return this;\n+    }\n+\n+    public Class<?> findMixInClassFor(Class<?> cls) {\n         return (_mixInAnnotations == null) ? null : _mixInAnnotations.get(new ClassKey(cls));\n     }\n \n-    public final int mixInCount() {\n+    public int mixInCount() {\n         return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size();\n     }\n     ", "timestamp": 1412786682, "metainfo": ""}