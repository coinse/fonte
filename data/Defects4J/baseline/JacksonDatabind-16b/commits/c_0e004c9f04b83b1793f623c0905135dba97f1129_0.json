{"sha": "0e004c9f04b83b1793f623c0905135dba97f1129", "log": "Minor tweaks to better support unwrapped properties", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n import java.lang.reflect.Method;\n import java.lang.reflect.Type;\n import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.Map.Entry;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.io.SerializedString;\n         } else {  \n             schemaNode = com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode(); \n         }\n-        if (isUnwrapping()) {\n-            JsonNode props = schemaNode.get(\"properties\");\n-            if (props != null) {\n-                Iterator<Entry<String, JsonNode>> it = props.fields();\n-                while (it.hasNext()) {\n-                    Entry<String,JsonNode> entry = it.next();\n-                    propertiesNode.put(entry.getKey(), entry.getValue());\n-                }\n-            }\n-        } else {\n-            propertiesNode.put(getName(), schemaNode);\n-        }\n+        _depositSchemaProperty(propertiesNode, schemaNode);\n+    }\n+\n+    // @since 2.3 \n+    protected void _depositSchemaProperty(ObjectNode propertiesNode, JsonNode schemaNode)\n+    {\n+        propertiesNode.put(getName(), schemaNode);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java\n package com.fasterxml.jackson.databind.ser.impl;\n+\n+import java.util.Iterator;\n+import java.util.Map.Entry;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.io.SerializedString;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.*;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n \n             _serializer = _serializer.unwrappingSerializer(t);\n         }\n     }\n+\n+    // Override needed to support legacy JSON Schema generator\n+    @Override\n+    protected void _depositSchemaProperty(ObjectNode propertiesNode, JsonNode schemaNode)\n+    {\n+        JsonNode props = schemaNode.get(\"properties\");\n+        if (props != null) {\n+            Iterator<Entry<String, JsonNode>> it = props.fields();\n+            while (it.hasNext()) {\n+                Entry<String,JsonNode> entry = it.next();\n+                String name = entry.getKey();\n+                if (_nameTransformer != null) {\n+                    name = _nameTransformer.transform(name);\n+                }\n+                propertiesNode.put(name, entry.getValue());\n+            }\n+        }\n+    }\n     \n     // need to override as we must get unwrapping instance...\n     @Override\n--- a/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n     {\n         public int age;\n \n-        @JsonUnwrapped\n+        @JsonUnwrapped(prefix=\"name.\")\n         public Name name;\n     }\n \n     static class Name {\n-        public String firstName, lastName;\n+        public String first, last;\n     }\n     \n     /*\n         assertNotNull(jsonSchema.toString());\n         assertNotNull(JsonSchema.getDefaultSchemaNode());\n \n-\tObjectNode root = jsonSchema.getSchemaNode();\n+        ObjectNode root = jsonSchema.getSchemaNode();\n         assertEquals(\"object\", root.get(\"type\").asText());\n         assertEquals(false, root.path(\"required\").booleanValue());\n         JsonNode propertiesSchema = root.get(\"properties\");\n         String json = jsonSchema.toString().replaceAll(\"\\\"\", \"'\");\n         String EXP = \"{'type':'object',\"\n                 +\"'properties':{'age':{'type':'integer'},\"\n-                +\"'firstName':{'type':'string'},'lastName':{'type':'string'}}}\";\n+                +\"'name.first':{'type':'string'},'name.last':{'type':'string'}}}\";\n         assertEquals(EXP, json);\n     }\n ", "timestamp": 1379647764, "metainfo": ""}