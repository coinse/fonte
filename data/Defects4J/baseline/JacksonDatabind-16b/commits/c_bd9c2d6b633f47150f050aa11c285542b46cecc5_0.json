{"sha": "bd9c2d6b633f47150f050aa11c285542b46cecc5", "log": "fix ObjectNode.equals()", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n      */\n \n     @Override\n-    public boolean equals(Object o)\n+    public final boolean equals(Object o)\n     {\n         if (o == this) return true;\n         if (o == null) return false;\n-        if (o.getClass() != getClass()) {\n+        \n+        // minor improvement, wrt [Issue#70]\n+        if (o.getClass() != getClass() && !(o instanceof ObjectNode)) {\n             return false;\n         }\n-        ObjectNode other = (ObjectNode) o;\n+        /* This is bit convoluted, but the goal is to make it possible to\n+         * fully override equality comparison, even though it is\n+         * asymmetric (i.e. can be called on either side, but we\n+         * want behavior to match).\n+         */\n+        return _equals((ObjectNode) o);\n+    }\n+    \n+    /**\n+     * Method that sub-classes should override, if equality comparison\n+     * needs additional verification beyond defaults.\n+     * \n+     * @since 2.1\n+     */\n+    protected boolean _equals(ObjectNode other)\n+    {\n+        return _stdEquals(other)\n+                &&_customEquals(other)\n+                && other._customEquals(this)\n+                ;\n+    }\n+    \n+    /**\n+     * Method that sub-classes should override, if equality comparison\n+     * needs additional verification beyond defaults.\n+     *\n+     * @since 2.1\n+     */\n+    protected boolean _customEquals(ObjectNode other) {\n+        return true;\n+    }\n+\n+    /**\n+     * Standard equality checks, which may also be overridden by\n+     * sub-classes if necessary (but usually isn't).\n+     *\n+     * @since 2.1\n+     */\n+    protected final boolean _stdEquals(ObjectNode other)\n+    {\n         if (other.size() != size()) {\n             return false;\n         }", "timestamp": 1353351067, "metainfo": ""}