{"sha": "fcb1c2560541e2ff2f3fd6da99a95f69c2b28a8a", "log": "Eliminated JsonSerializableWithType, by moving method down to JsonSerializable", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JavaType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JavaType.java\n      *<p>\n      * Note: untyped (i.e. caller has to cast) because it is used for\n      * different kinds of handlers, with unrelated types.\n-     *<p>\n-     * TODO: make final and possibly promote to sub-classes\n-     */\n-    protected /*final*/ Object _valueHandler;\n+     */\n+    protected final Object _valueHandler;\n \n     /**\n      * Optional handler that can be attached to indicate how to handle\n      *<p>\n      * Note: untyped (i.e. caller has to cast) because it is used for\n      * different kinds of handlers, with unrelated types.\n-     *<p>\n-     * TODO: make final and possibly promote to sub-classes\n-     */\n-    protected /*final*/ Object _typeHandler;\n+     */\n+    protected final Object _typeHandler;\n     \n     /*\n     /**********************************************************\n      * @param additionalHash Additional hash code to use, in addition\n      *   to hash code of the class name \n      */\n-    protected JavaType(Class<?> raw, int additionalHash)\n+    protected JavaType(Class<?> raw, int additionalHash,\n+            Object valueHandler, Object typeHandler)\n     {\n         _class = raw;\n         _hashCode = raw.getName().hashCode() + additionalHash;\n-        _valueHandler = null;\n-        _typeHandler = null;\n-    }\n+        _valueHandler = valueHandler;\n+        _typeHandler = typeHandler;\n+    }\n+\n+    /**\n+     * Serialization method called when no additional type information is\n+     * to be included in serialization.\n+     */\n     \n     /**\n      * \"Copy method\" that will construct a new instance that is identical to\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonSerializable.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonSerializable.java\n  * so -- if class is a bean, it can be serialized without\n  * implementing this interface.\n  *<p>\n- * NOTE: as of version 1.5, this interface is missing one crucial\n- * aspect, that of dealing with type information embedding.\n- * Because of this, this interface is deprecated, although will be\n- * fully supported for all 1.x releases, and will work except for\n- * cases where polymorphic type information handling is needed for\n- * type (in which case implementing if {@link JsonSerializableWithType} is crucial).\n- *\n- * @see com.fasterxml.jackson.databind.JsonSerializableWithType\n- *\n- * @since 1.5\n+ * NOTE: Jackson 2.0 added another method (from former \"JsonSerializableWithType\"),\n+ * which is required for proper handling of case where additional type information\n+ * is needed.\n  */\n-@Deprecated\n public interface JsonSerializable\n {\n+    /**\n+     * Serialization method called when no additional type information is\n+     * to be included in serialization.\n+     */\n     public void serialize(JsonGenerator jgen, SerializerProvider provider)\n         throws IOException, JsonProcessingException;\n+\n+    /**\n+     * Serialization method called when additional type information is\n+     * expected to be included in serialization, for deserialization to use.\n+     *<p>\n+     * Usually implementation consists of a call to one of methods\n+     * in {@link TypeSerializer} (such as {@link TypeSerializer#writeTypePrefixForObject(Object, JsonGenerator)})\n+     * followed by serialization of contents,\n+     * followed by another call to {@link TypeSerializer}\n+     * (such as {@link TypeSerializer#writeTypeSuffixForObject(Object, JsonGenerator)}).\n+     * Exact methods to call in {@link TypeSerializer} depend on shape of JSON Object used\n+     * (Array, Object or scalar like String/Number/Boolean).\n+     *<p>\n+     * Note that some types (most notably, \"natural\" types: String, Integer,\n+     * Double and Boolean) never include type information.\n+     */\n+    public void serializeWithType(JsonGenerator jgen, SerializerProvider provider,\n+            TypeSerializer typeSer)\n+        throws IOException, JsonProcessingException;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n      * This does not include \"secondary\" interfaces, but\n      * mostly concrete or abstract base classes.\n      */\n-    @SuppressWarnings(\"deprecation\")\n     public final JsonSerializer<?> findSerializerByPrimaryType(JavaType type, SerializationConfig config,\n             BasicBeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping)\n         Class<?> raw = type.getRawClass();\n         // First: JsonSerializable and related\n         if (JsonSerializable.class.isAssignableFrom(raw)) {\n-            if (JsonSerializableWithType.class.isAssignableFrom(raw)) {\n-                return SerializableWithTypeSerializer.instance;\n-            }\n             return SerializableSerializer.instance;\n         }\n         // Second: as per [JACKSON-193] consider @JsonValue for any types:\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/StdSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/StdSerializers.java\n import com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase;\n import com.fasterxml.jackson.databind.ser.std.ScalarSerializerBase;\n \n-\n /**\n  * Container class for serializers used for handling standard JDK-provided types.\n- * \n- * @since 1.5\n  */\n public class StdSerializers\n {\n              *   'forPrimitive' flag...\n              */\n             return createSchemaNode(\"boolean\", !_forPrimitive);\n-        }\n-    }\n-\n-    /**\n-     * @deprecated Since 1.9, use {@link com.fasterxml.jackson.databind.ser.std.StringSerializer} instead\n-     */\n-    @Deprecated\n-    @JacksonStdImpl\n-    public final static class StringSerializer\n-        extends NonTypedScalarSerializerBase<String>\n-    {\n-        public StringSerializer() { super(String.class); }\n-\n-        @Override\n-        public void serialize(String value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n-        {\n-            jgen.writeString(value);\n-        }\n-\n-        @Override\n-        public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-        {\n-            return createSchemaNode(\"string\", true);\n         }\n     }\n \n             return createSchemaNode(\"string\", true);\n         }\n     }\n-\n-    \n-    /*\n-    /**********************************************************\n-    / Other serializers\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * @deprecated Since 1.9, use {@link com.fasterxml.jackson.databind.ser.std.DateSerializer} instead\n-     */\n-    @Deprecated\n-    @JacksonStdImpl\n-    public final static class SerializableSerializer\n-        extends com.fasterxml.jackson.databind.ser.std.SerializableSerializer { }\n-\n-    /**\n-     * @deprecated Since 1.9, use {@link com.fasterxml.jackson.databind.ser.std.DateSerializer} instead\n-     */\n-    @Deprecated\n-    @JacksonStdImpl\n-    public final static class SerializableWithTypeSerializer\n-        extends com.fasterxml.jackson.databind.ser.std.SerializableWithTypeSerializer {\n-    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n \n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializable;\n-import com.fasterxml.jackson.databind.JsonSerializableWithType;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.TypeSerializer;\n  * interface, can not be checked for direct class equivalence.\n  */\n @JacksonStdImpl\n-@SuppressWarnings(\"deprecation\")\n public class SerializableSerializer\n     extends SerializerBase<JsonSerializable>\n {\n             TypeSerializer typeSer)\n         throws IOException, JsonGenerationException\n     {\n-        /* 24-Jan-2009, tatus: This is not quite optimal (perhaps we should\n-         *   just create separate serializer...), but works until 2.0 will\n-         *   deprecate non-typed interface\n-         */\n-        if (value instanceof JsonSerializableWithType) {\n-            ((JsonSerializableWithType) value).serializeWithType(jgen, provider, typeSer);\n-        } else {\n-            this.serialize(value, jgen, provider);\n-        }\n+        value.serializeWithType(jgen, provider, typeSer);\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeBase.java\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonSerializableWithType;\n+import com.fasterxml.jackson.databind.JsonSerializable;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.TypeSerializer;\n \n-\n public abstract class TypeBase\n     extends JavaType\n-    implements JsonSerializableWithType\n+    implements JsonSerializable\n {\n     /**\n      * Lazily initialized external representation of the type\n      */\n     volatile String _canonicalName;\n \n-    @Deprecated // since 1.9; to remove from 2.0\n-    protected TypeBase(Class<?> raw, int hash) {\n-        super(raw, hash);\n-    }\n-\n     /**\n      * Main constructor to use by extending classes.\n-     * \n-     * @since 1.9\n      */\n     protected TypeBase(Class<?> raw, int hash,\n             Object valueHandler, Object typeHandler)\n     {\n-        super(raw, hash);\n-        // @TODO: !!! 16-Aug-2011, tatu: With 2.0, we will move value and type\n-        //   handles higher in type hierarchy, make final\n-\n-        // and then comment out these:\n-        _valueHandler = valueHandler;\n-        _typeHandler = typeHandler;\n+        super(raw, hash, valueHandler, typeHandler);\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/util/JSONPObject.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/JSONPObject.java\n  * @author tatu\n  */\n public class JSONPObject\n-    implements JsonSerializableWithType\n+    implements JsonSerializable\n {\n     /**\n      * JSONP function name to use for serialization\n--- a/src/main/java/com/fasterxml/jackson/databind/util/JSONWrappedObject.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/JSONWrappedObject.java\n  * @author tatu\n  */\n public class JSONWrappedObject\n-    implements JsonSerializableWithType\n+    implements JsonSerializable\n {\n     /**\n      * Literal String to output before serialized value.\n--- a/src/main/java/org/codehaus/jackson/node/BaseJsonNode.java\n+++ b/src/main/java/org/codehaus/jackson/node/BaseJsonNode.java\n import java.util.List;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.databind.JsonSerializableWithType;\n+import com.fasterxml.jackson.databind.JsonSerializable;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.TypeSerializer;\n \n  */\n public abstract class BaseJsonNode\n     extends JsonNode\n-    implements JsonSerializableWithType\n+    implements JsonSerializable\n {\n     protected BaseJsonNode() { }\n ", "timestamp": 1324694067, "metainfo": ""}