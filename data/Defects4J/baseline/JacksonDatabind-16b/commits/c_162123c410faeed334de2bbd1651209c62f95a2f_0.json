{"sha": "162123c410faeed334de2bbd1651209c62f95a2f", "log": "Clean up, resolving compiler access warnings (synthetic calls to access private members)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n         tokens.writeEndObject();\n         _unwrappedPropertyHandler.processUnwrapped(jp, ctxt, bean, tokens);\n         return bean;\n-    }    \n+    }\n \n     @SuppressWarnings(\"resource\")\n     protected Object deserializeWithUnwrapped(JsonParser jp, DeserializationContext ctxt, Object bean)\n--- a/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java\n {\n     static class MyPojo {\n         public int x;\n-        private int y;\n+        protected int y;\n         \n         public MyPojo() { }\n         public MyPojo(int x0, int y0) {\n--- a/src/test/java/com/fasterxml/jackson/databind/TestObjectMapperBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestObjectMapperBeanSerializer.java\n         THIS_IS_AN_ENUM_VALUE_3,\n     }\n \n-    @SuppressWarnings(\"unused\")\n-    private static class FixtureObjectBase\n+    static class FixtureObjectBase\n     {\n         public static final String       VALUE_STRING = \"foobar\";\n         public static final EFixtureEnum VALUE_ENUM   = EFixtureEnum.THIS_IS_AN_ENUM_VALUE_2;\n         }\n     }\n \n-    @SuppressWarnings(\"unused\")\n-    private static class FixtureObject extends FixtureObjectBase\n-    {\n-        public Exception getTestError()\n-        {\n+    static class FixtureObject extends FixtureObjectBase\n+    {\n+        public Exception getTestError() {\n             return new Exception(VALUE_ERRTXT);\n         }\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorNullValue.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorNullValue.java\n package com.fasterxml.jackson.databind.creators;\n \n+import java.io.IOException;\n+import java.util.UUID;\n+\n import com.fasterxml.jackson.annotation.*;\n-\n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.*;\n \n-// Mostly for [JACSON-774]\n public class TestCreatorNullValue extends BaseMapTest\n {\n     protected static class Container {\n         }\n     }\n \n-    private static interface Contained<T> {}\n+    protected static interface Contained<T> {}\n \n-    private static class NullContained implements Contained<Object> {}\n+    protected static class NullContained implements Contained<Object> {}\n \n-    private static final NullContained NULL_CONTAINED = new NullContained();\n+    protected static final NullContained NULL_CONTAINED = new NullContained();\n \n-    private static class ContainedDeserializer extends JsonDeserializer<Contained<?>> {\n+    protected static class ContainedDeserializer extends JsonDeserializer<Contained<?>> {\n         @Override\n         public Contained<?> deserialize(JsonParser jp, DeserializationContext ctxt) throws JsonProcessingException {\n             return null;\n         }\n     }\n \n-    private static class ContainerDeserializerResolver extends Deserializers.Base {\n+    protected static class ContainerDeserializerResolver extends Deserializers.Base {\n         @Override\n         public JsonDeserializer<?> findBeanDeserializer(JavaType type,\n                 DeserializationConfig config, BeanDescription beanDesc)\n         {\n             if (!Contained.class.isAssignableFrom(type.getRawClass())) {\n                 return null;\n-            } else {\n-                return new ContainedDeserializer();\n             }\n+            return new ContainedDeserializer();\n         }\n     }\n \n-    private static class TestModule extends Module\n+    protected static class TestModule extends Module\n     {\n         @Override\n         public String getModuleName() {\n         }\n     }\n \n+    // [databind#597]\n+    static class JsonEntity {\n+        protected final String type;\n+        protected final UUID id;\n+\n+        private JsonEntity(String type, UUID id) {\n+            this.type = type;\n+            this.id = id;\n+        }\n+\n+        @JsonCreator\n+        public static JsonEntity create(@JsonProperty(\"type\") String type, @JsonProperty(\"id\") UUID id) {\n+            if (type != null && !type.contains(\" \") && (id != null)) {\n+                return new JsonEntity(type, id);\n+            }\n+\n+            return null;\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Unit tests\n         Container container = mapper.readValue(\"{}\", Container.class);\n         assertEquals(NULL_CONTAINED, container.contained);\n     }\n+\n+    // [databind#597]: ensure that a useful exception is thrown\n+    public void testCreatorReturningNull() throws IOException {\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        String json = \"{ \\\"type\\\" : \\\"     \\\", \\\"id\\\" : \\\"000c0ffb-a0d6-4d2e-a379-4aeaaf283599\\\" }\";\n+        try {\n+            objectMapper.readValue(json, JsonEntity.class);\n+            fail(\"Should not have succeeded\");\n+        } catch (JsonMappingException e) {\n+            e.printStackTrace();\n+            verifyException(e, \"JSON creator returned null\");\n+        }\n+    }    \n }\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestPolymorphicCreators.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestPolymorphicCreators.java\n public class TestPolymorphicCreators\n     extends BaseMapTest\n {\n-    /*\n-    /**********************************************************\n-    /* Helper beans\n-    /**********************************************************\n-     */\n-\n     static class Animal\n     {\n         // All animals have names, for our demo purposes...\n \n     abstract static class AbstractRoot\n     {\n-        private final String opt;\n+        protected final String opt;\n \n-        private AbstractRoot(String opt) {\n+        protected AbstractRoot(String opt) {\n             this.opt = opt;\n         }\n \n         @JsonCreator\n         public static final AbstractRoot make(@JsonProperty(\"which\") int which,\n             @JsonProperty(\"opt\") String opt) {\n-            if(1 == which) {\n+            if (1 == which) {\n                 return new One(opt);\n             }\n             throw new RuntimeException(\"cannot instantiate \" + which);\n         abstract public int getWhich();\n \n         public final String getOpt() {\n-                return opt;\n+            return opt;\n         }\n     }\n \n     static final class One extends AbstractRoot {\n-        private One(String opt) {\n+        protected One(String opt) {\n             super(opt);\n         }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestInjectables.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestInjectables.java\n \n     static class IssueGH471Bean {\n \n-        private final Object constructorInjected;\n-        private final String constructorValue;\n+        protected final Object constructorInjected;\n+        protected final String constructorValue;\n \n-        @JacksonInject(\"field_injected\") private Object fieldInjected;\n-        @JsonProperty(\"field_value\")     private String fieldValue;\n+        @JacksonInject(\"field_injected\") protected Object fieldInjected;\n+        @JsonProperty(\"field_value\")     protected String fieldValue;\n \n-        private Object methodInjected;\n-        private String methodValue;\n+        protected Object methodInjected;\n+        protected String methodValue;\n \n         public int x;\n         \n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n \n         @JsonProperty(\"Location\")\n         @JsonDeserialize(using=MyStackTraceElementDeserializer.class)\n-        private StackTraceElement location;    \n+        protected StackTraceElement location;    \n     }\n \n     @SuppressWarnings(\"serial\")\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestParentChildReferences.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestParentChildReferences.java\n     static class SimpleTreeNode2\n     {\n         public String name;\n-        private SimpleTreeNode2 parent;\n-        private SimpleTreeNode2 child;\n+        protected SimpleTreeNode2 parent;\n+        protected SimpleTreeNode2 child;\n \n         public SimpleTreeNode2() { this(null); }\n         public SimpleTreeNode2(String n) { name = n; }\n \n     public static class Parent {\n         @JsonManagedReference\n-        private final List<Child> children = new ArrayList<Child>();\n+        protected final List<Child> children = new ArrayList<Child>();\n \n         public List<Child> getChildren() { return children; }\n \n     }\n \n     public static class Child {\n-        private Parent parent;\n-        private final String value; // So that the bean is not empty of properties\n+        protected Parent parent;\n+        protected final String value; // So that the bean is not empty of properties\n \n         public Child(@JsonProperty(\"value\") String value) { this.value = value; }\n \n         public Parent getParent() { return parent; }\n \n         public void setParent(Parent parent) { this.parent = parent; }\n-    }    \n-\n-    // [JACKSON-368]\n+    }\n \n     @JsonTypeInfo(use=Id.NAME)\n     @JsonSubTypes({@JsonSubTypes.Type(ConcreteNode.class)})\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestInferredMutators.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestInferredMutators.java\n public class TestInferredMutators extends BaseMapTest\n {\n     public static class Point {\n-        private int x;\n+        protected int x;\n         \n         public int getX() { return x; }\n     }\n \n     public static class FixedPoint {\n-        private final int x;\n+        protected final int x;\n \n         public FixedPoint() { x = 0; }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestJacksonAnnotationIntrospector.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestJacksonAnnotationIntrospector.java\n \n     public static class JacksonExample\n     {\n-        private String attributeProperty;\n-        private String elementProperty;\n-        private List<String> wrappedElementProperty;\n-        private EnumExample enumProperty;\n-        private QName qname;\n+        protected String attributeProperty;\n+        protected String elementProperty;\n+        protected List<String> wrappedElementProperty;\n+        protected EnumExample enumProperty;\n+        protected QName qname;\n \n         @JsonSerialize(using=QNameSerializer.class)\n         public QName getQname()\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestNameConflicts.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestNameConflicts.java\n     @JsonAutoDetect\n     (fieldVisibility= JsonAutoDetect.Visibility.NONE,getterVisibility= JsonAutoDetect.Visibility.NONE, setterVisibility= JsonAutoDetect.Visibility.NONE, isGetterVisibility= JsonAutoDetect.Visibility.NONE)\n     static class CoreBean158 {\n-        private String bar = \"x\";\n+        protected String bar = \"x\";\n \n         @JsonProperty\n         public String getBar() {\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestNoTypeInfo.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestNoTypeInfo.java\n {\n     @JsonTypeInfo(use=JsonTypeInfo.Id.NONE)\n     @JsonDeserialize(as=NoType.class)\n-    private static interface NoTypeInterface {\n+    static interface NoTypeInterface {\n     }\n     \n-    private final static class NoType implements NoTypeInterface {\n+    final static class NoType implements NoTypeInterface {\n         public int a = 3;\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestPropertyTypeInfo.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestPropertyTypeInfo.java\n     \n     static class MethodWrapperBean\n     {\n-        private Object value;\n+        protected Object value;\n         \n         @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_ARRAY)\n         public Object getValue() { return value; }\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java\n         public MyParam(T v) { value = v; }\n     }\n \n-    private static class SomeObject {\n-        @SuppressWarnings(\"unused\")\n+    static class SomeObject {\n         public String someValue = UUID.randomUUID().toString();\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonRawValue.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonRawValue.java\n     @JsonPropertyOrder(alphabetic=true)\n     final static class ClassGetter<T>\n     {\n-    \tprivate final T _value;\n+        protected final T _value;\n     \t\n-        private ClassGetter(T value) { _value = value;}\n+        protected ClassGetter(T value) { _value = value;}\n  \n         public T getNonRaw() { return _value; }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize.java\n     }\n \n     static class Bar294{\n-        @JsonProperty private String id;\n-        @JsonProperty private String name;\n+        @JsonProperty protected String id;\n+        @JsonProperty protected String name;\n \n         public Bar294() { }\n         public Bar294(String id) {\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestNumbers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestNumbers.java\n {\n     private final ObjectMapper MAPPER = objectMapper();\n \n-    private static class IntAsString {\n+    static class IntAsString {\n         @JsonFormat(shape=JsonFormat.Shape.STRING)\n         public int value = 3;\n     }\n \n-    private static class LongAsString {\n+    static class LongAsString {\n         @JsonFormat(shape=JsonFormat.Shape.STRING)\n         public long value = 4;\n     }\n-    \n-    private static class DoubleAsString {\n+\n+    static class DoubleAsString {\n         @JsonFormat(shape=JsonFormat.Shape.STRING)\n         public double value = -0.5;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Test methods\n     /**********************************************************\n      */\n-    \n+\n     public void testDouble() throws Exception\n     {\n         double[] values = new double[] {\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n     static class ValueNodeExt\n     {\n         public int value;\n-        private int customId;\n+        protected int customId;\n         public IdWrapperExt next;\n         \n         public ValueNodeExt() { this(0); }\n \n     @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class)\n     static class AnySetterObjectId {\n-        private Map<String, AnySetterObjectId> values = new HashMap<String, AnySetterObjectId>();\n+        protected Map<String, AnySetterObjectId> values = new HashMap<String, AnySetterObjectId>();\n \n         @JsonAnySetter\n         public void anySet(String field, AnySetterObjectId value) {\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdWithPolymorphic.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdWithPolymorphic.java\n     static abstract class Base\n     {\n         public int value;\n+        public Base next;\n \n-        public Base next;\n-        \n         public Base() { this(0); }\n         public Base(int v) {\n             value = v;\n         public int id;\n         public Base811 owner;\n             \n-        private Base811() {}\n+        protected Base811() {}\n         public Base811(Process owner) {\n             this.owner = owner;\n             if (owner == null) {\n                 super(owner);\n                 this.parent = parent;\n         }\n-        private Activity() {\n-                super();\n+        protected Activity() {\n+            super();\n         }\n     }\n     \n         public Scope(Process owner, Activity parent) {\n             super(owner, parent);\n         }\n-        private Scope() {\n+        protected Scope() {\n             super();\n         }\n     }", "timestamp": 1415123288, "metainfo": ""}