{"sha": "beb73f7707c0241eac8a8383e0c2ea1d3e00765a", "log": "Implemented [JACKSON-528], change signature of treeToValue()", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      */\n     @Override\n     public <T> T treeToValue(JsonNode n, Class<T> valueType)\n-        throws IOException, JsonParseException, JsonMappingException\n-    {\n-        return readValue(treeAsTokens(n), valueType);\n+        throws JsonProcessingException\n+    {\n+        try {\n+            return readValue(treeAsTokens(n), valueType);\n+        } catch (JsonProcessingException e) {\n+            throw e;\n+        } catch (IOException e) { // should not occur, no real i/o...\n+            throw new IllegalArgumentException(e.getMessage(), e);\n+        }\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n     protected final DeserializationConfig _config;\n \n     /**\n-     * Flag that indicates whether root values are expected to be unwrapped\n-     * or not\n-     * \n-     * @since 1.9\n+     * Flag that indicates whether root values are expected to be unwrapped or not\n      */\n     protected final boolean _unwrapRoot;\n     \n     /**\n      * When using data format that uses a schema, schema is passed\n      * to parser.\n-     * \n-     * @since 1.8\n      */\n     protected final FormatSchema _schema;\n \n     /**\n      * Values that can be injected during deserialization, if any.\n-     * \n-     * @since 1.9\n      */\n     protected final InjectableValues _injectableValues;\n     \n \n     /**\n      * Constructor used by {@link ObjectMapper} for initial instantiation\n-     * \n-     * @since 1.8\n      */\n     protected ObjectReader(ObjectMapper mapper, DeserializationConfig config)\n     {\n      *<p>\n      * Note that the method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n-     * \n-     * @since 1.8\n      */\n     public ObjectReader withType(TypeReference<?> valueTypeRef)\n     {\n      *<p>\n      * Note that the method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n-     * \n-     * @since 1.8\n      */\n     public ObjectReader withSchema(FormatSchema schema)\n     {\n      *<p>\n      * Note that the method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n-     * \n-     * @since 1.9\n      */\n     public ObjectReader withInjectableValues(InjectableValues injectableValues)\n     {\n     \n     /**\n      * Method for reading sequence of Objects from parser stream.\n-     * \n-     * @since 1.8\n      */\n     public <T> MappingIterator<T> readValues(JsonParser jp)\n         throws IOException, JsonProcessingException\n     \n     /**\n      * Method for reading sequence of Objects from parser stream.\n-     * \n-     * @since 1.8\n      */\n     public <T> MappingIterator<T> readValues(InputStream src)\n         throws IOException, JsonProcessingException\n     \n     /**\n      * Method for reading sequence of Objects from parser stream.\n-     * \n-     * @since 1.8\n      */\n     public <T> MappingIterator<T> readValues(String json)\n         throws IOException, JsonProcessingException\n \n     /**\n      * Method for reading sequence of Objects from parser stream.\n-     * \n-     * @since 1.8\n      */\n     public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n         throws IOException, JsonProcessingException\n                 _findRootDeserializer(_config, _valueType), true, _valueToUpdate);\n     }\n \n-    /**\n-     * Since 1.9.3\n-     */\n     public final <T> MappingIterator<T> readValues(byte[] src)\n             throws IOException, JsonProcessingException {\n         return readValues(src, 0, src.length);\n     \n     /**\n      * Method for reading sequence of Objects from parser stream.\n-     * \n-     * @since 1.8\n      */\n     public <T> MappingIterator<T> readValues(File src)\n         throws IOException, JsonProcessingException\n \n     /**\n      * Method for reading sequence of Objects from parser stream.\n-     * \n-     * @since 1.8\n      */\n     public <T> MappingIterator<T> readValues(URL src)\n         throws IOException, JsonProcessingException\n \n     @Override\n     public <T> T treeToValue(JsonNode n, Class<T> valueType)\n-            throws IOException, JsonProcessingException\n-    {\n-        return readValue(treeAsTokens(n), valueType);\n+        throws JsonProcessingException\n+    {\n+        try {\n+            return readValue(treeAsTokens(n), valueType);\n+        } catch (JsonProcessingException e) {\n+            throw e;\n+        } catch (IOException e) { // should not occur, no real i/o...\n+            throw new IllegalArgumentException(e.getMessage(), e);\n+        }\n     }\n \n     /**", "timestamp": 1326854147, "metainfo": ""}