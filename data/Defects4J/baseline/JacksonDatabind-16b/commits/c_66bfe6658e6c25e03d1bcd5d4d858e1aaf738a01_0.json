{"sha": "66bfe6658e6c25e03d1bcd5d4d858e1aaf738a01", "log": "Fix #609, Fix #728", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java\n         }\n         return _bindings.size();\n     }\n-    \n-    public JavaType findType(String name)\n+\n+    @Deprecated // since 2.6, remove from 2.7\n+    public JavaType findType(String name) {\n+        return findType(name, true);\n+    }\n+    \n+    public JavaType findType(String name, boolean mustFind)\n     {\n         if (_bindings == null) {\n             _resolve();\n                 }\n                 */\n             }\n+        }\n+\n+        if (!mustFind) {\n+            return null;\n         }\n         \n         String className;\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n             context = new TypeBindings(this, cls);\n         }\n         */\n-        \n+\n         // First: do we have an array type?\n         if (clz.isArray()) {\n             result = ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);\n \n         // Ok: Map or Collection?\n         if (Map.class.isAssignableFrom(rawType)) {\n-            JavaType subtype = constructSimpleType(rawType, pt);\n+            JavaType subtype = constructSimpleType(rawType, rawType, pt);\n             JavaType[] mapParams = findTypeParameters(subtype, Map.class);\n             if (mapParams.length != 2) {\n                 throw new IllegalArgumentException(\"Could not find 2 type parameters for Map class \"+rawType.getName()+\" (found \"+mapParams.length+\")\");\n             return MapType.construct(rawType, mapParams[0], mapParams[1]);\n         }\n         if (Collection.class.isAssignableFrom(rawType)) {\n-            JavaType subtype = constructSimpleType(rawType, pt);\n+            JavaType subtype = constructSimpleType(rawType, rawType, pt);\n             JavaType[] collectionParams = findTypeParameters(subtype, Collection.class);\n             if (collectionParams.length != 1) {\n                 throw new IllegalArgumentException(\"Could not find 1 type parameter for Collection class \"+rawType.getName()+\" (found \"+collectionParams.length+\")\");\n \n     protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)\n     {\n-        /* 26-Sep-2009, tatus: It should be possible to try \"partial\"\n-         *  resolution; meaning that it is ok not to find bindings.\n-         *  For now this is indicated by passing null context.\n-         */\n+        final String name = type.getName();\n+        // 19-Mar-2015: Without context, all we can check are bounds.\n         if (context == null) {\n-            return _unknownType();\n-        }\n-\n-        // Ok: here's where context might come in handy!\n-        String name = type.getName();\n-        JavaType actualType = context.findType(name);\n-        if (actualType != null) {\n-            return actualType;\n+            // And to prevent infinite loops, now need this:\n+            context = new TypeBindings(this, (Class<?>) null);\n+        } else {\n+            // Ok: here's where context might come in handy!\n+            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow\n+             *   unresolved type variables to handle some cases where bounds\n+             *   are enough. Let's hope it does not hide real fail cases.\n+             */\n+            JavaType actualType = context.findType(name, false);\n+            if (actualType != null) {\n+                return actualType;\n+            }\n         }\n \n         /* 29-Jan-2010, tatu: We used to throw exception here, if type was\n          *   (T extends Comparable<T>). Need to add \"placeholder\"\n          *   for resolution to catch those.\n          */\n-        context._addPlaceholder(name);        \n+        context._addPlaceholder(name);\n         return _constructType(bounds[0], context);\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java\n import java.util.*;\n import java.util.concurrent.ConcurrentHashMap;\n \n-import com.fasterxml.jackson.annotation.JsonInclude;\n-import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\n-import com.fasterxml.jackson.annotation.JsonTypeName;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n     @JsonTypeInfo(use = Id.CLASS)\n     public static class Mixin691 { }\n \n+    // For [databind#47]\n+    \n+    public static class Wat\n+    {\n+        private final String wat;\n+\n+        @JsonCreator\n+        Wat(String wat) {\n+            this.wat = wat;\n+        }\n+\n+        @JsonValue\n+        public String getWat() {\n+            return wat;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"(String)[Wat: \" + wat + \"]\";\n+        }\n+    }\n+\n+    // For [databind#47]\n+    @SuppressWarnings(\"serial\")\n+    static class WatMap extends HashMap<Wat,Boolean> { }\n+\n     /*\n     /**********************************************************\n     /* Test methods\n         String json = mapper.writeValueAsString(map);\n         assertEquals(\"{\\\"@class\\\":\\\"java.util.HashMap\\\",\\\"NULL\\\":null}\", json);\n     }\n+\n+    public void testMapJsonValueKey47() throws Exception\n+    {\n+        WatMap input = new WatMap();\n+        input.put(new Wat(\"3\"), true);\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String json = mapper.writeValueAsString(input);\n+        assertEquals(aposToQuotes(\"{'3':true}\"), json);\n+    }    \n }\n-\n--- a/src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java\n package com.fasterxml.jackson.databind.type;\n \n+import java.lang.reflect.Method;\n import java.util.*;\n \n import com.fasterxml.jackson.databind.BaseMapTest;\n         private MyEnum2(int value) { }\n     }\n \n+    // [databind#728]\n+    static class Issue728 {\n+        public <C extends CharSequence> C method(C input) { return null; }\n+    }\n+    public void testLocalType728() throws Exception\n+    {\n+        TypeFactory tf = TypeFactory.defaultInstance();\n+        Method m = Issue728.class.getMethod(\"method\", CharSequence.class);\n+        assertNotNull(m);\n+\n+        // Start with return type\n+        // first type-erased\n+        JavaType t = tf.constructType(m.getReturnType());\n+        assertEquals(CharSequence.class, t.getRawClass());\n+        // then generic\n+        t = tf.constructType(m.getGenericReturnType());\n+        assertEquals(CharSequence.class, t.getRawClass());\n+\n+        // then parameter type\n+        t = tf.constructType(m.getParameterTypes()[0]);\n+        assertEquals(CharSequence.class, t.getRawClass());\n+        t = tf.constructType(m.getGenericParameterTypes()[0]);\n+        assertEquals(CharSequence.class, t.getRawClass());\n+    }\n+\n     /*\n     /**********************************************************\n     /* Test methods\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/type/TestLocalType609.java\n+package com.fasterxml.jackson.databind.type;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Failing test related to [databind#609]\n+ */\n+public class TestLocalType609 extends BaseMapTest\n+{\n+    static class EntityContainer {\n+        RuleForm entity;\n+        \n+        @SuppressWarnings(\"unchecked\")\n+        public <T extends RuleForm> T getEntity() { return (T) entity; }\n+        public <T extends RuleForm> void setEntity(T e) { entity = e; }\n+    }\n+\n+    static class RuleForm {\n+        public int value;\n+\n+        public RuleForm() { }\n+        public RuleForm(int v) { value = v; }\n+    }\n+\n+    public void testLocalPartialType609() throws Exception {\n+        ObjectMapper mapper = new ObjectMapper();\n+        \n+        EntityContainer input = new EntityContainer(); \n+        input.entity = new RuleForm(12);\n+        String json = mapper.writeValueAsString(input);\n+        \n+        EntityContainer output = mapper.readValue(json, EntityContainer.class);\n+        assertEquals(12, output.getEntity().value);\n+    }\n+}\n+", "timestamp": 1426821644, "metainfo": ""}