{"sha": "4bbda5a1111ac5e383bb0b7e25a894fe6d3f700f", "log": "Work on #749, solving one problem, parts remain", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n     public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config,\n             BeanDescription beanDesc, JsonFormat.Value format)\n     {\n-        // [JACKSON-212]: If toString() is to be used instead, leave EnumValues null\n-        EnumValues v = EnumValues.construct(config, (Class<Enum<?>>) enumClass);\n+        /* 08-Apr-2015, tatu: As per [databind#749], we can not statically determine\n+         *   between name() and toString(), need to construct `EnumValues` with names,\n+         *   handle toString() case dynamically (for example)\n+         */\n+        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n         Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n         return new EnumSerializer(v, serializeAsIndex);\n     }\n      */\n     \n     @Override\n-    public final void serialize(Enum<?> en, JsonGenerator jgen, SerializerProvider provider)\n+    public final void serialize(Enum<?> en, JsonGenerator gen, SerializerProvider serializers)\n         throws IOException\n     {\n         // [JACKSON-684]: serialize as index?\n-        if (_serializeAsIndex(provider)) {\n-            jgen.writeNumber(en.ordinal());\n+        if (_serializeAsIndex(serializers)) {\n+            gen.writeNumber(en.ordinal());\n             return;\n         }\n-        jgen.writeString(_values.serializedValueFor(en));\n+        // [databind#749]: or via toString()?\n+        if (serializers.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {\n+            gen.writeString(en.toString());\n+            return;\n+        }\n+        gen.writeString(_values.serializedValueFor(en));\n     }\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         throws JsonMappingException\n     {\n-        // [JACKSON-684]: serialize as index?\n-        if (_serializeAsIndex(visitor.getProvider())) {\n+        SerializerProvider serializers = visitor.getProvider();\n+        if (_serializeAsIndex(serializers)) {\n             JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);\n             if (v2 != null) { // typically serialized as a small number (byte or int)\n                 v2.numberType(JsonParser.NumberType.INT);\n             }\n-        } else {\n-    \t\tJsonStringFormatVisitor stringVisitor = visitor.expectStringFormat(typeHint);\n-    \t\tif (typeHint != null && stringVisitor != null) {\n-    \t\t\tif (typeHint.isEnumType()) {\n-    \t\t\t\tSet<String> enums = new LinkedHashSet<String>();\n-    \t\t\t\tfor (SerializableString value : _values.values()) {\n-    \t\t\t\t\tenums.add(value.getValue());\n-    \t\t\t\t}\n-    \t\t\t\tstringVisitor.enumTypes(enums);\n-    \t\t\t}\n-    \t\t}\n+            return;\n+        }\n+        boolean usingToString = (serializers != null)  && \n+                serializers.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);\n+\n+        JsonStringFormatVisitor stringVisitor = visitor.expectStringFormat(typeHint);\n+        if (typeHint != null && stringVisitor != null) {\n+            Set<String> enums = new LinkedHashSet<String>();\n+            for (SerializableString value : _values.values()) {\n+                if (usingToString) {\n+                    enums.add(value.toString());\n+                } else {\n+                    enums.add(value.getValue());\n+                }\n+            }\n+            stringVisitor.enumTypes(enums);\n         }\n     }\n \n     /**********************************************************\n      */\n     \n-    protected final boolean _serializeAsIndex(SerializerProvider provider)\n+    protected final boolean _serializeAsIndex(SerializerProvider serializers)\n     {\n         if (_serializeAsIndex != null) {\n             return _serializeAsIndex.booleanValue();\n         }\n-        return provider.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n-        \n+        return serializers.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n     }\n \n     /**\n                     +\" annotation\");\n     }\n }\n-\n--- a/src/main/java/com/fasterxml/jackson/databind/util/EnumValues.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/EnumValues.java\n         _values = new EnumMap(v);\n     }\n \n+    /**\n+     * NOTE: do NOT call this if configuration may change, and choice between toString()\n+     *   and name() might change dynamically.\n+     */\n     public static EnumValues construct(SerializationConfig config, Class<Enum<?>> enumClass) {\n         if (config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {\n             return constructFromToString(config, enumClass);", "timestamp": 1428523399, "metainfo": ""}