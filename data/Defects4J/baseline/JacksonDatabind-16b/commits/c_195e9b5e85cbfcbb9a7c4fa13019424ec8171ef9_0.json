{"sha": "195e9b5e85cbfcbb9a7c4fa13019424ec8171ef9", "log": "Backport #703 fix by Francisco", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n             ser = _serializerCache.untypedValueSerializer(runtimeType);\n             if (ser == null) {\n                 ser = _createAndCacheUntypedSerializer(runtimeType);\n-                /* 18-Sep-2014, tatu: This is unfortunate patch over related change\n-                 *    that pushes creation of \"unknown type\" serializer deeper down\n-                 *    in BeanSerializerFactory; as a result, we need to \"undo\" creation\n-                 *    here.\n-                 */\n-                if (isUnknownTypeSerializer(ser)) {\n-                    return null;\n-                }\n             }\n+        }\n+        /* 18-Sep-2014, tatu: This is unfortunate patch over related change\n+         *    that pushes creation of \"unknown type\" serializer deeper down\n+         *    in BeanSerializerFactory; as a result, we need to \"undo\" creation\n+         *    here.\n+         */\n+        if (isUnknownTypeSerializer(ser)) {\n+            return null;\n         }\n         return ser;\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/TestObjectMapper.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestObjectMapper.java\n         assertEquals(MyAnnotationIntrospector.class,\n                 m2.getSerializationConfig().getAnnotationIntrospector().getClass());\n     }\n+\n+    // For [databind#703]\n+    public void testNonSerializabilityOfObject()\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        assertFalse(m.canSerialize(Object.class));\n+        // but this used to pass, incorrectly\n+        assertFalse(m.canSerialize(Object.class));\n+    }\n }", "timestamp": 1423854319, "metainfo": ""}