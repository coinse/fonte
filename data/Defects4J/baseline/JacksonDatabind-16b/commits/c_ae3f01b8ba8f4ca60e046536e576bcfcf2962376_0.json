{"sha": "ae3f01b8ba8f4ca60e046536e576bcfcf2962376", "log": "Fix #684", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n         // But let's consider int acceptable as well (if within ordinal range)\n         if (curr == JsonToken.VALUE_NUMBER_INT) {\n             // ... unless told not to do that. :-) (as per [JACKSON-412]\n-            if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {\n-                throw ctxt.mappingException(\"Not allowed to deserialize Enum value out of JSON number (disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow)\");\n-            }\n+            _checkFailOnNumber(ctxt);\n             \n             int index = jp.getIntValue();\n             Enum<?> result = _resolver.getEnum(index);\n             if (c >= '0' && c <= '9') {\n                 try {\n                     int ix = Integer.parseInt(name);\n+                    _checkFailOnNumber(ctxt);\n                     Enum<?> result = _resolver.getEnum(ix);\n                     if (result != null) {\n                         return result;\n         return null;\n     }\n \n-    private final Enum<?> _deserializeOther(JsonParser jp, DeserializationContext ctxt) throws IOException\n+    protected Enum<?> _deserializeOther(JsonParser jp, DeserializationContext ctxt) throws IOException\n     {\n         JsonToken curr = jp.getCurrentToken();\n         // Issue#381\n         }\n         throw ctxt.mappingException(_resolver.getEnumClass());\n     }\n-    \n+\n+    protected void _checkFailOnNumber(DeserializationContext ctxt) throws IOException\n+    {\n+        if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {\n+            throw ctxt.mappingException(\"Not allowed to deserialize Enum value out of JSON number (disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow)\");\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Additional helper classes\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n         assertSame(TestEnum.RULES, value);\n \n         // but can also be changed to errors:\n-        ObjectMapper m = new ObjectMapper();\n-        m.configure(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS, true);\n+        ObjectReader r = MAPPER.reader(TestEnum.class)\n+                .with(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS);\n         try {\n-            value = m.readValue(\"1\", TestEnum.class);\n+            value = r.readValue(\"1\");\n+            fail(\"Expected an error\");\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"Not allowed to deserialize Enum value out of JSON number\");\n+        }\n+\n+        // and [databind#684]\n+        try {\n+            value = r.readValue(quote(\"1\"));\n             fail(\"Expected an error\");\n         } catch (JsonMappingException e) {\n             verifyException(e, \"Not allowed to deserialize Enum value out of JSON number\");", "timestamp": 1421969861, "metainfo": ""}