{"sha": "72de08e38ce847d906ce09f9da89d5e1e0bed859", "log": "Fixed #630", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\n import java.io.IOException;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URL;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.Locale;\n     public final static int TYPE_DATE = 10;\n     public final static int TYPE_CALENDAR = 11;\n     public final static int TYPE_UUID = 12;\n+    public final static int TYPE_URI = 13;\n+    public final static int TYPE_URL = 14;\n+    public final static int TYPE_CLASS = 15;\n \n     final protected int _kind;\n     final protected Class<?> _keyClass;\n             kind = TYPE_FLOAT;\n         } else if (raw == Double.class) {\n             kind = TYPE_DOUBLE;\n+        } else if (raw == URI.class) {\n+            kind = TYPE_URI;\n+        } else if (raw == URL.class) {\n+            kind = TYPE_URL;\n+        } else if (raw == Class.class) {\n+            kind = TYPE_CLASS;\n         } else if (raw == Locale.class) {\n             FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class);\n             return new StdKeyDeserializer(TYPE_LOCALE, raw, deser);\n             return (date == null)  ? null : ctxt.constructCalendar(date);\n         case TYPE_UUID:\n             return UUID.fromString(key);\n+        case TYPE_URI:\n+            return URI.create(key);\n+        case TYPE_URL:\n+            return new URL(key);\n+        case TYPE_CLASS:\n+            try {\n+                return ctxt.findClass(key);\n+            } catch (Exception e) {\n+                throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as Class\");\n+            }\n         }\n         return null;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n          * Method called to append given node(s) at the end of this\n          * node chain.\n          */\n-        private Linked<T> append(Linked<T> appendable) {\n+        protected Linked<T> append(Linked<T> appendable) {\n             if (next == null) {\n                 return withNext(appendable);\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeIdResolver.java\n package com.fasterxml.jackson.databind.jsontype;\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.databind.DatabindContext;\n import com.fasterxml.jackson.databind.JavaType;\n \n /**\n      * available for some reason.\n      */\n     public String idFromBaseType();\n-    \n+\n+    /**\n+     * @deprecated since 2.5; call {@link #typeFromId(DatabindContext, String)} instead\n+     */\n+    @Deprecated // since 2.4\n+    public JavaType typeFromId(String id);\n+\n     /**\n      * Method called to resolve type from given type identifier.\n+     * \n+     * @since 2.5 -- but since 2.3 has existed in {@link com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase}\n      */\n-    public JavaType typeFromId(String id);\n+    public JavaType typeFromId(DatabindContext context, String id);\n \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n                  * for base class, not via interface. Later on we can add this\n                  * to the interface, assuming deprecation at base class helps.\n                  */\n-                JavaType type;\n-                if (_idResolver instanceof TypeIdResolverBase) {\n-                    type = ((TypeIdResolverBase) _idResolver).typeFromId(ctxt, typeId);\n-                } else {\n-                    type = _idResolver.typeFromId(typeId);\n-                }\n+                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n                 if (type == null) {\n                     // As per [JACKSON-614], use the default impl if no type id available:\n                     deser = _findDefaultImplDeserializer(ctxt);\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java\n      */\n     @Deprecated\n     @Override\n-    public abstract JavaType typeFromId(String id);\n+    public JavaType typeFromId(String id) {\n+        return typeFromId(null, id);\n+    }\n \n     /**\n      * New method, replacement for {@link #typeFromId(String)}, which is given\n      * \n      * @since 2.3\n      */\n+    @Override\n     public JavaType typeFromId(DatabindContext context, String id) {\n         return typeFromId(id);\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation.java\n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\n-\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n+import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n public class TestHandlerInstantiation extends BaseMapTest\n     }\n     \n     // copied from \"TestCustomTypeIdResolver\"\n-    static class CustomIdResolver implements TypeIdResolver\n+    static class CustomIdResolver extends TypeIdResolverBase\n     {\n         static List<JavaType> initTypes;\n \n             }\n         }\n         @Override\n-        public JavaType typeFromId(String id)\n+        public JavaType typeFromId(DatabindContext context, String id)\n         {\n             if (id.equals(_id)) {\n                 return TypeFactory.defaultInstance().constructType(TypeIdBean.class);\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators541.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators541.java\n     static final class Foo {\n \n         @JsonProperty(\"foo\")\n-        private Map<Integer, Bar> foo;\n+        protected Map<Integer, Bar> foo;\n         @JsonProperty(\"anumber\")\n-        private long anumber;\n+        protected long anumber;\n \n         public Foo() {\n             anumber = 0;\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBasicAnnotations.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBasicAnnotations.java\n \n     static class Issue442Bean {\n         @JsonUnwrapped\n-        private IntWrapper w = new IntWrapper(13);\n+        protected IntWrapper w = new IntWrapper(13);\n     }\n     \n     final static class SizeClassSetter2\n     }\n \n     static class BeanWithDeserialize {\n-        @JsonDeserialize private int a;\n+        @JsonDeserialize protected int a;\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCyclicTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCyclicTypes.java\n     }\n \n     static class LinkB {\n-        private LinkA a;\n+        protected LinkA a;\n \n         public void setA(LinkA a) { this.a = a; }\n         public LinkA getA() { return a; }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n     public static enum ConcreteType implements ITestType {\n         ONE, TWO;\n     }\n+\n+    static class ClassStringMap extends HashMap<Class<?>,String> { }\n     \n     /*\n     /**********************************************************\n         key = map.keySet().iterator().next();\n         assertEquals(\"foo\", key.value);\n     }\n+\n+    public void testClassKeyMap() throws Exception {\n+        ClassStringMap map = MAPPER.readValue(aposToQuotes(\"{'java.lang.String':'foo'}\"),\n+                ClassStringMap.class);\n+        assertNotNull(map);\n+        assertEquals(1, map.size());\n+        assertEquals(\"foo\", map.get(String.class));\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver.java\n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\n \n-import com.fasterxml.jackson.databind.BaseMapTest;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;\n-import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n+import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n public class TestCustomTypeIdResolver extends BaseMapTest\n         }\n     }\n \n-    static class CustomResolverBase implements TypeIdResolver\n+    static class CustomResolverBase extends TypeIdResolverBase\n     {\n         protected final Class<?> superType;\n         protected final Class<?> subType;\n         public void init(JavaType baseType) { }\n \n         @Override\n-        public JavaType typeFromId(String id)\n+        public JavaType typeFromId(DatabindContext context, String id)\n         {\n             if (\"*\".equals(id)) {\n                 return TypeFactory.defaultInstance().constructType(subType);", "timestamp": 1416956333, "metainfo": ""}