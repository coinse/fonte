{"sha": "d2613e9f4206d4e67122688906e8cb8731602cd9", "log": "And more refactoring: configs are now immutable", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n         super(base, defaultFeatures, null, mixins);\n         _nodeFactory = JsonNodeFactory.instance;\n     }\n-    \n-    private DeserializationConfig(DeserializationConfig src) {\n-        this(src, src._base);\n-    }\n \n     /**\n      * Copy constructor used to create a non-shared instance with given mix-in\n      */\n     private DeserializationConfig(DeserializationConfig src, SubtypeResolver str)\n     {\n-        this(src, src._base);\n-        _subtypeResolver = str;\n+        super(src, str);\n+        _problemHandlers = src._problemHandlers;\n+        _nodeFactory = src._nodeFactory;\n+        _sortPropertiesAlphabetically = src._sortPropertiesAlphabetically;\n     }\n \n     private DeserializationConfig(DeserializationConfig src, SubtypeResolver str,\n     }\n \n     @Override\n-    public DeserializationConfig withSubtypeResolver(SubtypeResolver str)\n-    {\n-        DeserializationConfig cfg = new DeserializationConfig(this);\n-        cfg._subtypeResolver = str;\n-        return cfg;\n+    public DeserializationConfig withSubtypeResolver(SubtypeResolver str) {\n+        return new DeserializationConfig(this, str);\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      * custom implementation.\n      */\n     protected final static DateFormat DEFAULT_DATE_FORMAT = StdDateFormat.instance;\n+\n+    protected final static BaseSettings DEFAULT_BASE = new BaseSettings(DEFAULT_INTROSPECTOR,\n+            DEFAULT_ANNOTATION_INTROSPECTOR, STD_VISIBILITY_CHECKER, null, TypeFactory.defaultInstance(),\n+            null, DEFAULT_DATE_FORMAT, null);\n     \n     /*\n     /**********************************************************\n                 _jsonFactory.setCodec(this);\n             }\n         }\n+        _subtypeResolver = new StdSubtypeResolver();\n         // and default type factory is shared one\n         _typeFactory = TypeFactory.defaultInstance();\n         _serializationConfig = (sconfig != null) ? sconfig :\n             new SerializationConfig(DEFAULT_BASE, collectFeatureDefaults(SerializationConfig.Feature.class),\n-                    null, _mixInAnnotations);\n+                    _subtypeResolver, _mixInAnnotations);\n         _deserializationConfig = (dconfig != null) ? dconfig :\n             new DeserializationConfig(DEFAULT_BASE, collectFeatureDefaults(DeserializationConfig.Feature.class),\n-                    null, _mixInAnnotations);\n+                    _subtypeResolver, _mixInAnnotations);\n         _serializerProvider = (sp == null) ? new StdSerializerProvider.Impl() : sp;\n         _deserializerProvider = (dp == null) ? new StdDeserializerProvider() : dp;\n \n         // Default serializer factory is stateless, can just assign\n         _serializerFactory = BeanSerializerFactory.instance;\n     }\n-\n-    /*\n-    public BaseSettings(ClassIntrospector<? extends BeanDescription> ci, AnnotationIntrospector ai,\n-            VisibilityChecker<?> vc, PropertyNamingStrategy pns, TypeFactory tf,\n-            TypeResolverBuilder<?> typer, DateFormat dateFormat, HandlerInstantiator hi)\n-     */\n-    protected final static BaseSettings DEFAULT_BASE = new BaseSettings(DEFAULT_INTROSPECTOR,\n-            DEFAULT_ANNOTATION_INTROSPECTOR, STD_VISIBILITY_CHECKER, null, TypeFactory.defaultInstance(),\n-            null, DEFAULT_DATE_FORMAT, null);\n \n     /**\n      * Method that calculates bit set (flags) of all features that\n      * Method for accessing subtype resolver in use.\n      */\n     public SubtypeResolver getSubtypeResolver() {\n-        if (_subtypeResolver == null) {\n-            _subtypeResolver = new StdSubtypeResolver();\n-        }\n         return _subtypeResolver;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n         _filterProvider = null;\n     }\n     \n-    private SerializationConfig(SerializationConfig src) {\n-        this(src, src._base);\n+    private SerializationConfig(SerializationConfig src, SubtypeResolver str) {\n+        super(src, str);\n+        _serializationInclusion = src._serializationInclusion;\n+        _serializationView = src._serializationView;\n+        _filterProvider = src._filterProvider;\n     }\n \n     private SerializationConfig(SerializationConfig src, int features) {\n \n     @Override\n     public SerializationConfig withSubtypeResolver(SubtypeResolver str) {\n-        SerializationConfig cfg =  new SerializationConfig(this);\n-        cfg._subtypeResolver = str;\n-        return cfg;\n+        return new SerializationConfig(this, str);\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n import java.util.Map;\n \n import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;\n-import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;\n import com.fasterxml.jackson.databind.type.ClassKey;\n \n public abstract class MapperConfigBase<CFG extends ConfigFeature,\n     /**********************************************************\n      */\n \n+    /**\n+     * Set of features enabled; actual type (kind of features)\n+     * depends on sub-classes.\n+     */\n     protected int _featureFlags;\n \n     /**\n      */\n     protected final Map<ClassKey,Class<?>> _mixInAnnotations;\n \n-    /*\n-    /**********************************************************\n-    /* \"Late bound\" settings\n-    /**********************************************************\n-     */\n-\n     /**\n      * Registered concrete subtypes that can be used instead of (or\n      * in addition to) ones declared using annotations.\n-     * Unlike most other settings, it is not configured as early\n-     * as it is set, but rather only when a non-shared instance\n-     * is constructed by <code>ObjectMapper</code> (or -Reader\n-     * or -Writer)\n-     *<p>\n-     * Note: this is the only property left as non-final, to allow\n-     * lazy construction of the instance as necessary.\n      */\n-    protected SubtypeResolver _subtypeResolver;\n+    protected final SubtypeResolver _subtypeResolver;\n     \n     /*\n     /**********************************************************\n     /* Construction\n     /**********************************************************\n      */\n-    \n-    /*\n-    protected MapperConfigBase(ClassIntrospector<? extends BeanDescription> ci, AnnotationIntrospector ai,\n-            VisibilityChecker<?> vc, SubtypeResolver str, PropertyNamingStrategy pns, TypeFactory tf,\n-            HandlerInstantiator hi,\n-            int defaultFeatures, Map<ClassKey,Class<?>> mixins)\n-    {\n-        super(new BaseSettings(ci, ai, vc, pns, tf, null, DEFAULT_DATE_FORMAT, hi));\n-        _featureFlags = defaultFeatures;\n-        _mixInAnnotations = mixins;\n-        _subtypeResolver = str;\n-    }\n-    */\n \n     protected MapperConfigBase(BaseSettings base,\n             int defaultFeatures, SubtypeResolver str, Map<ClassKey,Class<?>> mixins)\n         _subtypeResolver = src._subtypeResolver;\n     }\n \n+    protected MapperConfigBase(MapperConfigBase<CFG,T> src, SubtypeResolver str) {\n+        super(src._base);\n+        _featureFlags = src._featureFlags;\n+        _mixInAnnotations = src._mixInAnnotations;\n+        _subtypeResolver = str;\n+    }\n     \n     protected MapperConfigBase(MapperConfigBase<CFG,T> src, SubtypeResolver str,\n             int features)\n      * of class name (or custom scheme).\n      */\n     public final SubtypeResolver getSubtypeResolver() {\n-        if (_subtypeResolver == null) {\n-            _subtypeResolver = new StdSubtypeResolver();\n-        }\n         return _subtypeResolver;\n     }\n     ", "timestamp": 1326954482, "metainfo": ""}