{"sha": "cded3a2f9fbeec552629d4d879bd7d50ffb19b97", "log": "Implement #270", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n      * \n      * @since 2.1\n      */\n-    EAGER_SERIALIZER_FETCH(true)    \n+    EAGER_SERIALIZER_FETCH(true),\n+\n+    /**\n+     * Feature that determines whether Object Identity is compared using\n+     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n+     * Latter is sometimes useful when dealing with Database-bound objects with\n+     * ORM libraries (like Hibernate).\n+     *<p>\n+     * Feature is disabled by default; meaning that strict identity is used, not\n+     * <code>equals()</code>\n+     * \n+     * @since 2.3\n+     */\n+    USE_EQUALITY_FOR_OBJECT_ID(false)\n     ;\n \n     private final boolean _defaultState;\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n      * exists or not.\n      */\n     public abstract WritableObjectId findObjectId(Object forPojo,\n-            ObjectIdGenerator<?> generatorType);\n+        ObjectIdGenerator<?> generatorType);\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n      * Per-serialization map Object Ids that have seen so far, iff\n      * Object Id handling is enabled.\n      */\n-    protected transient IdentityHashMap<Object, WritableObjectId> _seenObjectIds;\n+    protected transient Map<Object, WritableObjectId> _seenObjectIds;\n     \n     protected transient ArrayList<ObjectIdGenerator<?>> _objectIdGenerators;\n     \n             ObjectIdGenerator<?> generatorType)\n     {\n         if (_seenObjectIds == null) {\n-            _seenObjectIds = new IdentityHashMap<Object,WritableObjectId>();\n+            _seenObjectIds = _createObjectIdMap();\n         } else {\n             WritableObjectId oid = _seenObjectIds.get(forPojo);\n             if (oid != null) {\n         return oid;\n     }\n \n+    /**\n+     * Overridable helper method used for creating {@link java.util.Map}\n+     * used for storing mappings from serializable objects to their\n+     * Object Ids.\n+     * \n+     * @since 2.3\n+     */\n+    protected Map<Object,WritableObjectId> _createObjectIdMap()\n+    {\n+        /* 06-Aug-2013, tatu: We may actually want to use equality,\n+         *   instead of identity... so:\n+         */\n+        if (isEnabled(SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID)) {\n+            return new HashMap<Object,WritableObjectId>();\n+        }\n+        return new IdentityHashMap<Object,WritableObjectId>();\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Factory method impls\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdWithEquals.java\n+package com.fasterxml.jackson.databind.struct;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestObjectIdWithEquals extends BaseMapTest\n+{\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.PropertyGenerator.class, property=\"id\", scope=Foo.class)\n+    static class Foo {\n+        public int id;\n+\n+        public List<Bar> bars = new ArrayList<Bar>();\n+        public List<Bar> otherBars = new ArrayList<Bar>();\n+\n+        public Foo() { }\n+        public Foo(int i) { id = i; }\n+    }\n+\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.PropertyGenerator.class, property=\"id\", scope=Bar.class)\n+    static class Bar\n+    {\n+        public int id;\n+\n+        public Bar() { }\n+        public Bar(int i) {\n+            id = i;\n+        }\n+        \n+        @Override\n+        public int hashCode() {\n+            return id;\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (!(obj instanceof Bar)) {\n+                return false;\n+            }\n+            return ((Bar) obj).id == id;\n+        }\n+    }\n+\n+    /*\n+    /******************************************************\n+    /* Test methods\n+    /******************************************************\n+     */\n+\n+    public void testSimpleEquals() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        // Verify default state too\n+        assertFalse(mapper.isEnabled(SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID));\n+        mapper.enable(SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID);\n+\n+        Foo foo = new Foo(1);\n+\n+        Bar bar1 = new Bar(1);\n+        Bar bar2 = new Bar(2);\n+        // this is another bar which is supposed to be \"equal\" to bar1\n+        // due to the same ID and \n+        // Bar class' equals() method will return true.\n+        Bar anotherBar1 = new Bar(1);\n+\n+        foo.bars.add(bar1);\n+        foo.bars.add(bar2);\n+        // this anotherBar1 object will confuse the serializer.\n+        foo.otherBars.add(anotherBar1);\n+        foo.otherBars.add(bar2);\n+\n+        String json = mapper.writeValueAsString(foo);\n+        assertEquals(\"{\\\"id\\\":1,\\\"bars\\\":[{\\\"id\\\":1},{\\\"id\\\":2}],\\\"otherBars\\\":[1,2]}\", json);\n+\n+        Foo foo2 = mapper.readValue(json, Foo.class);       \n+        assertNotNull(foo2);\n+        assertEquals(foo.id, foo2.id);\n+    }\n+}", "timestamp": 1375846158, "metainfo": ""}