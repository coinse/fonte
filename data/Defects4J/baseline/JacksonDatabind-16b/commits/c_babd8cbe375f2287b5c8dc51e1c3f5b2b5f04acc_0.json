{"sha": "babd8cbe375f2287b5c8dc51e1c3f5b2b5f04acc", "log": "minor javadoc changes", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n      * Note that this method is never called for JSON null literal,\n      * and thus deserializers need (and should) not check for it.\n      *\n-     * @param jp Parsed used for reading JSON content\n+     * @param p Parsed used for reading JSON content\n      * @param ctxt Context that can be used to access information about\n      *   this deserialization activity.\n      *\n      * @return Deserialized value\n      */\n-    public abstract T deserialize(JsonParser jp, DeserializationContext ctxt)\n+    public abstract T deserialize(JsonParser p, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException;\n \n     /**\n      * that do not explicitly add support do not necessarily support\n      * update-existing-value operation (esp. immutable types)\n      */\n-    public T deserialize(JsonParser jp, DeserializationContext ctxt,\n+    public T deserialize(JsonParser p, DeserializationContext ctxt,\n             T intoValue)\n         throws IOException, JsonProcessingException\n     {\n      * \n      * @param typeDeserializer Deserializer to use for handling type information\n      */\n-    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n+    public Object deserializeWithType(JsonParser p, DeserializationContext ctxt,\n             TypeDeserializer typeDeserializer)\n-        throws IOException, JsonProcessingException\n+        throws IOException\n     {\n         // We could try calling \n-        return typeDeserializer.deserializeTypedFromAny(jp, ctxt);\n+        return typeDeserializer.deserializeTypedFromAny(p, ctxt);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonSerializable.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonSerializable.java\n      * Serialization method called when no additional type information is\n      * to be included in serialization.\n      */\n-    public void serialize(JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonProcessingException;\n+    public void serialize(JsonGenerator gen, SerializerProvider serializers) throws IOException;\n \n     /**\n      * Serialization method called when additional type information is\n      * Note that some types (most notably, \"natural\" types: String, Integer,\n      * Double and Boolean) never include type information.\n      */\n-    public void serializeWithType(JsonGenerator jgen, SerializerProvider provider,\n-            TypeSerializer typeSer)\n-        throws IOException, JsonProcessingException;\n+    public void serializeWithType(JsonGenerator gen, SerializerProvider serializers,\n+            TypeSerializer typeSer) throws IOException;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n      *\n      * @param value Value to serialize; can <b>not</b> be null.\n      * @param gen Generator used to output resulting Json content\n-     * @param provider Provider that can be used to get serializers for\n+     * @param serializers Provider that can be used to get serializers for\n      *   serializing Objects value contains, if any.\n      */\n-    public abstract void serialize(T value, JsonGenerator gen, SerializerProvider provider)\n+    public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers)\n         throws IOException, JsonProcessingException;\n \n     /**\n      *\n      * @param value Value to serialize; can <b>not</b> be null.\n      * @param gen Generator used to output resulting Json content\n-     * @param provider Provider that can be used to get serializers for\n+     * @param serializers Provider that can be used to get serializers for\n      *   serializing Objects value contains, if any.\n      * @param typeSer Type serializer to use for including type information\n      */\n-    public void serializeWithType(T value, JsonGenerator gen, SerializerProvider provider,\n+    public void serializeWithType(T value, JsonGenerator gen, SerializerProvider serializers,\n             TypeSerializer typeSer)\n-        throws IOException, JsonProcessingException\n+        throws IOException\n     {\n         Class<?> clz = handledType();\n         if (clz == null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n  */\n public abstract class StdSerializer<T>\n     extends JsonSerializer<T>\n-    implements JsonFormatVisitable, SchemaAware\n+    implements JsonFormatVisitable, SchemaAware, java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /**\n      * Nominal type supported, usually declared type of\n      * property for which serializer is used.", "timestamp": 1418970383, "metainfo": ""}