{"sha": "7a27bc22bb530765b187d2835b463f0df194cbd8", "log": "Refactoring to eliminate deprecated introspection methods", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n      * \n      * @since 2.1\n      */\n-    public PropertyName findNameForSerialization(Annotated a)\n-    {\n-        // [Issue#69], need bit of delegation \n-        // !!! TODO: in 2.2, remove old methods?\n-        String name;\n-        if (a instanceof AnnotatedField) {\n-            name = findSerializationName((AnnotatedField) a);\n-        } else if (a instanceof AnnotatedMethod) {\n-            name = findSerializationName((AnnotatedMethod) a);\n-        } else {\n-            name = null;\n-        }\n+    public PropertyName findNameForSerialization(Annotated a) {\n+        /*\n         if (name != null) {\n             if (name.length() == 0) { // empty String means 'default'\n                 return PropertyName.USE_DEFAULT;\n             }\n             return new PropertyName(name);\n         }\n-        return null;\n-    }\n-    \n-    /**\n-     * Method for checking whether given method has an annotation\n-     * that suggests property name associated with method that\n-     * may be a \"getter\". Should return null if no annotation\n-     * is found; otherwise a non-null String.\n-     * If non-null value is returned, it is used as the property\n-     * name, except for empty String (\"\") which is taken to mean\n-     * \"use standard bean name detection if applicable;\n-     * method name if not\".\n-     * \n-     * @deprecated Since 2.1 should use {@link #findNameForSerialization} instead\n-     */\n-    @Deprecated\n-    public String findSerializationName(AnnotatedMethod am) {\n-        return null;\n-    }\n-\n-    /**\n-     * Method for checking whether given member field represent\n-     * a serializable logical property; and if so, returns the\n-     * name of that property.\n-     * Should return null if no annotation is found (indicating it\n-     * is not a serializable field); otherwise a non-null String.\n-     * If non-null value is returned, it is used as the property\n-     * name, except for empty String (\"\") which is taken to mean\n-     * \"use the field name as is\".\n-     * \n-     * @deprecated Since 2.1 should use {@link #findNameForSerialization} instead\n-     */\n-    @Deprecated\n-    public String findSerializationName(AnnotatedField af) {\n-        return null;\n-    }\n-    \n+        */\n+        return null;\n+    }\n+\n     /**\n      * Method for checking whether given method has an annotation\n      * that suggests that the return value of annotated method\n      * \n      * @since 2.1\n      */\n-    public PropertyName findNameForDeserialization(Annotated a)\n-    {\n-        // [Issue#69], need bit of delegation \n-        // !!! TODO: in 2.2, remove old methods?\n-        String name;\n-        if (a instanceof AnnotatedField) {\n-            name = findDeserializationName((AnnotatedField) a);\n-        } else if (a instanceof AnnotatedMethod) {\n-            name = findDeserializationName((AnnotatedMethod) a);\n-        } else if (a instanceof AnnotatedParameter) {\n-            name = findDeserializationName((AnnotatedParameter) a);\n-        } else {\n-            name = null;\n-        }\n+    public PropertyName findNameForDeserialization(Annotated a) {\n+        /*\n         if (name != null) {\n             if (name.length() == 0) { // empty String means 'default'\n                 return PropertyName.USE_DEFAULT;\n             }\n             return new PropertyName(name);\n         }\n-        return null;\n-    }\n-    \n-    /**\n-     * Method for checking whether given method has an annotation\n-     * that suggests property name associated with method that\n-     * may be a \"setter\". Should return null if no annotation\n-     * is found; otherwise a non-null String.\n-     * If non-null value is returned, it is used as the property\n-     * name, except for empty String (\"\") which is taken to mean\n-     * \"use standard bean name detection if applicable;\n-     * method name if not\".\n-     * \n-     * @deprecated Since 2.1 should use {@link #findNameForDeserialization} instead\n-     */\n-    @Deprecated\n-    public String findDeserializationName(AnnotatedMethod am) {\n-        return null;\n-    }\n-\n-    /**\n-     * Method for checking whether given member field represent\n-     * a deserializable logical property; and if so, returns the\n-     * name of that property.\n-     * Should return null if no annotation is found (indicating it\n-     * is not a deserializable field); otherwise a non-null String.\n-     * If non-null value is returned, it is used as the property\n-     * name, except for empty String (\"\") which is taken to mean\n-     * \"use the field name as is\".\n-     * \n-     * @deprecated Since 2.1 should use {@link #findNameForDeserialization} instead\n-     */\n-    @Deprecated\n-    public String findDeserializationName(AnnotatedField af) {\n-        return null;\n-    }\n-\n-    /**\n-     * Method for checking whether given set of annotations indicates\n-     * property name for associated parameter.\n-     * No actual parameter object can be passed since JDK offers no\n-     * representation; just annotations.\n-     * \n-     * @deprecated Since 2.1 should use {@link #findNameForDeserialization} instead\n-     */\n-    @Deprecated\n-    public String findDeserializationName(AnnotatedParameter param) {\n+        */\n         return null;\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n     {\n         return _primary.hasCreatorAnnotation(a) || _secondary.hasCreatorAnnotation(a);\n     }\n- \n-    /*\n-    /******************************************************\n-    /* Deprecated methods\n-    /******************************************************\n-     */\n-\n-    // // // Deserialization: property annotations\n-\n-    @Deprecated\n-    @Override\n-    public String findDeserializationName(AnnotatedMethod am)\n-    {\n-        String result = _primary.findDeserializationName(am);\n-        if (result == null) {\n-            result = _secondary.findDeserializationName(am);\n-        } else if (result.length() == 0) {\n-            /* Empty String is a default; can be overridden by\n-             * more explicit answer from secondary entry\n-             */\n-            String str2 = _secondary.findDeserializationName(am);\n-            if (str2 != null) {\n-                result = str2;\n-            }\n-        }\n-        return result;\n-    }\n-    \n-    @Deprecated\n-    @Override\n-    public String findDeserializationName(AnnotatedField af)\n-    {\n-        String result = _primary.findDeserializationName(af);\n-        if (result == null) {\n-            result = _secondary.findDeserializationName(af);\n-        } else if (result.length() == 0) {\n-            /* Empty String is a default; can be overridden by\n-             * more explicit answer from secondary entry\n-             */\n-            String str2 = _secondary.findDeserializationName(af);\n-            if (str2 != null) {\n-                result = str2;\n-            }\n-        }\n-        return result;\n-    }\n-\n-    @Deprecated\n-    @Override\n-    public String findDeserializationName(AnnotatedParameter param)\n-    {\n-        String result = _primary.findDeserializationName(param);\n-        if (result == null) {\n-            result = _secondary.findDeserializationName(param);\n-        }\n-        return result;\n-    }\n-\n-    // // // Serialization: property annotations\n-    \n-    @Deprecated\n-    @Override\n-    public String findSerializationName(AnnotatedMethod am)\n-    {\n-        String result = _primary.findSerializationName(am);\n-        if (result == null) {\n-            result = _secondary.findSerializationName(am);\n-        } else if (result.length() == 0) {\n-            /* Empty String is a default; can be overridden by\n-             * more explicit answer from secondary entry\n-             */\n-            String str2 = _secondary.findSerializationName(am);\n-            if (str2 != null) {\n-                result = str2;\n-            }\n-        }\n-        return result;\n-    }\n-\n-    @Deprecated\n-    @Override\n-    public String findSerializationName(AnnotatedField af)\n-    {\n-        String result = _primary.findSerializationName(af);\n-        if (result == null) {\n-            result = _secondary.findSerializationName(af);\n-        } else if (result.length() == 0) {\n-            /* Empty String is a default; can be overridden by\n-             * more explicit answer from secondary entry\n-             */\n-            String str2 = _secondary.findSerializationName(af);\n-            if (str2 != null) {\n-                result = str2;\n-            }\n-        }\n-        return result;\n-    }\n-\n-}\n+ }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     public Version version() {\n         return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n     }\n-    \n-    /**\n-     *\n-     * @deprecated Not used since 2.0; deprecated since 2.1; moved from {@link AnnotationIntrospector} in 2.3\n-     */\n-    @Deprecated\n-    public boolean isHandled(Annotation ann) {\n-        return false;\n-    }\n-    \n+\n     /*\n     /**********************************************************\n     /* General annotation properties\n     }\n \n     /**\n-     * @deprecated Use {@link #findFilterId(Annotated)} instead\n+     * @deprecated (since 2.3) Use {@link #findFilterId(Annotated)} instead\n      */\n     @Deprecated\n     @Override\n     @Override\n     public PropertyName findNameForSerialization(Annotated a)\n     {\n-        // [Issue#69], need bit of delegation \n-        // !!! TODO: in 2.2, remove old methods?\n-        String name;\n-        if (a instanceof AnnotatedField) {\n-            name = findSerializationName((AnnotatedField) a);\n-        } else if (a instanceof AnnotatedMethod) {\n-            name = findSerializationName((AnnotatedMethod) a);\n+        String name = null;\n+\n+        JsonGetter jg = a.getAnnotation(JsonGetter.class);\n+        if (jg != null) {\n+            name = jg.value();\n         } else {\n-            name = null;\n-        }\n-        if (name != null) {\n-            if (name.length() == 0) { // empty String means 'default'\n-                return PropertyName.USE_DEFAULT;\n-            }\n-            return new PropertyName(name);\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    @Deprecated\n-    public String findSerializationName(AnnotatedField af)\n-    {\n-        JsonProperty pann = af.getAnnotation(JsonProperty.class);\n-        if (pann != null) {\n-            return pann.value();\n-        }\n-        // Also: having JsonSerialize implies it is such a property\n-        // 09-Apr-2010, tatu: Ditto for JsonView\n-        if (af.hasAnnotation(JsonSerialize.class) || af.hasAnnotation(JsonView.class)) {\n-            return \"\";\n-        }\n-        return null;\n-    }\n-    \n-    @Override\n-    @Deprecated\n-    public String findSerializationName(AnnotatedMethod am)\n-    {\n-        // @JsonGetter is most specific, has precedence\n-        JsonGetter ann = am.getAnnotation(JsonGetter.class);\n-        if (ann != null) {\n-            return ann.value();\n-        }\n-        JsonProperty pann = am.getAnnotation(JsonProperty.class);\n-        if (pann != null) {\n-            return pann.value();\n-        }\n-        /* 22-May-2009, tatu: And finally, JsonSerialize implies\n-         *   that there is a property, although doesn't define name\n-         */\n-        // 09-Apr-2010, tatu: Ditto for JsonView\n-        if (am.hasAnnotation(JsonSerialize.class) || am.hasAnnotation(JsonView.class)) {\n-            return \"\";\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public boolean hasAsValueAnnotation(AnnotatedMethod am)\n-    {\n+            JsonProperty pann = a.getAnnotation(JsonProperty.class);\n+            if (pann != null) {\n+                name = pann.value();\n+            } else if (a.hasAnnotation(JsonSerialize.class) || a.hasAnnotation(JsonView.class)) {\n+                name = \"\";\n+            } else {\n+                return null;\n+            }\n+        }\n+        if (name.length() == 0) { // empty String means 'default'\n+            return PropertyName.USE_DEFAULT;\n+        }\n+        return new PropertyName(name);\n+    }\n+\n+    @Override\n+    public boolean hasAsValueAnnotation(AnnotatedMethod am) {\n         JsonValue ann = am.getAnnotation(JsonValue.class);\n         // value of 'false' means disabled...\n         return (ann != null && ann.value());\n     @Override\n     public PropertyName findNameForDeserialization(Annotated a)\n     {\n-        // [Issue#69], need bit of delegation \n-        // !!! TODO: in 2.2, remove old methods?\n         String name;\n-        if (a instanceof AnnotatedField) {\n-            name = findDeserializationName((AnnotatedField) a);\n-        } else if (a instanceof AnnotatedMethod) {\n-            name = findDeserializationName((AnnotatedMethod) a);\n-        } else if (a instanceof AnnotatedParameter) {\n-            name = findDeserializationName((AnnotatedParameter) a);\n+\n+        // @JsonSetter has precedence over @JsonProperty, being more specific\n+        // @JsonDeserialize implies that there is a property, but no name\n+        JsonSetter js = a.getAnnotation(JsonSetter.class);\n+        if (js != null) {\n+            name = js.value();\n         } else {\n-            name = null;\n-        }\n-        if (name != null) {\n-            if (name.length() == 0) { // empty String means 'default'\n-                return PropertyName.USE_DEFAULT;\n-            }\n-            return new PropertyName(name);\n-        }\n-        return null;\n-    }\n-    \n-    @Deprecated\n-    @Override\n-    public String findDeserializationName(AnnotatedMethod am)\n-    {\n-        // @JsonSetter has precedence over @JsonProperty, being more specific\n-        JsonSetter ann = am.getAnnotation(JsonSetter.class);\n-        if (ann != null) {\n-            return ann.value();\n-        }\n-        JsonProperty pann = am.getAnnotation(JsonProperty.class);\n-        if (pann != null) {\n-            return pann.value();\n-        }\n-        // @JsonSerialize implies that there is a property, but no name\n-        // 09-Apr-2010, tatu: Ditto for JsonView\n-        // 19-Oct-2011, tatu: And JsonBackReference/JsonManagedReference\n-    \tif (am.hasAnnotation(JsonDeserialize.class)\n-    \t        || am.hasAnnotation(JsonView.class)\n-                || am.hasAnnotation(JsonBackReference.class)\n-                || am.hasAnnotation(JsonManagedReference.class)\n-    \t        ) {\n-            return \"\";\n-        }\n-        return null;\n-    }\n-\n-    @Deprecated\n-    @Override\n-    public String findDeserializationName(AnnotatedField af)\n-    {\n-        JsonProperty pann = af.getAnnotation(JsonProperty.class);\n-        if (pann != null) {\n-            return pann.value();\n-        }\n-        // Also: having JsonDeserialize implies it is such a property\n-        // 09-Apr-2010, tatu: Ditto for JsonView\n-        if (af.hasAnnotation(JsonDeserialize.class)\n-                || af.hasAnnotation(JsonView.class)\n-                || af.hasAnnotation(JsonBackReference.class)\n-                || af.hasAnnotation(JsonManagedReference.class)\n-                ) {\n-            return \"\";\n-        }\n-        return null;\n-    }\n-\n-    @Deprecated\n-    @Override\n-    public String findDeserializationName(AnnotatedParameter param)\n-    {\n-        if (param != null) {\n-            JsonProperty pann = param.getAnnotation(JsonProperty.class);\n+            JsonProperty pann = a.getAnnotation(JsonProperty.class);\n             if (pann != null) {\n-                return pann.value();\n-            }\n-            /* And can not use JsonDeserialize as we can not use\n-             * name auto-detection (names of local variables including\n-             * parameters are not necessarily preserved in bytecode)\n-             */\n-        }\n-        return null;\n+                name = pann.value();\n+            } else if (a.hasAnnotation(JsonDeserialize.class)\n+                    || a.hasAnnotation(JsonView.class)\n+                    || a.hasAnnotation(JsonBackReference.class)\n+                    || a.hasAnnotation(JsonManagedReference.class)) {\n+                    name = \"\";\n+            } else {\n+                return null;\n+            }\n+        }\n+        if (name.length() == 0) { // empty String means 'default'\n+            return PropertyName.USE_DEFAULT;\n+        }\n+        return new PropertyName(name);\n     }\n     \n     @Override", "timestamp": 1388460862, "metainfo": ""}