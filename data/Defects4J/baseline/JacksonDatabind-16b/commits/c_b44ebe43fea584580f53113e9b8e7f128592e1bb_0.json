{"sha": "b44ebe43fea584580f53113e9b8e7f128592e1bb", "log": "Warnings cleanup, minor refactoring of XMLGregorianCalendarSerializer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n package com.fasterxml.jackson.databind.ext;\n \n import java.io.IOException;\n-import java.lang.reflect.Type;\n+import java.util.Calendar;\n \n import javax.xml.datatype.Duration;\n import javax.xml.datatype.XMLGregorianCalendar;\n import javax.xml.namespace.QName;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n import com.fasterxml.jackson.databind.ser.Serializers;\n import com.fasterxml.jackson.databind.ser.std.CalendarSerializer;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n             return ToStringSerializer.instance;\n         }\n         if (XMLGregorianCalendar.class.isAssignableFrom(raw)) {\n-            return new XMLGregorianCalendarSerializer();\n+            return XMLGregorianCalendarSerializer.instance;\n         }\n         return null;\n     }\n \n-    public static class XMLGregorianCalendarSerializer extends StdSerializer<XMLGregorianCalendar>\n+    @SuppressWarnings(\"serial\")\n+    public static class XMLGregorianCalendarSerializer\n+        extends StdSerializer<XMLGregorianCalendar>\n+        implements ContextualSerializer\n     {\n+        final static XMLGregorianCalendarSerializer instance = new XMLGregorianCalendarSerializer();\n+\n+        final JsonSerializer<Object> _delegate;\n+        \n         public XMLGregorianCalendarSerializer() {\n+            this(CalendarSerializer.instance);\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        protected XMLGregorianCalendarSerializer(JsonSerializer<?> del) {\n             super(XMLGregorianCalendar.class);\n+            _delegate = (JsonSerializer<Object>) del;\n+        }\n+\n+        @Override\n+        public JsonSerializer<?> getDelegatee() {\n+            return _delegate;\n+        }\n+\n+        @Deprecated\n+        @Override\n+        public boolean isEmpty(XMLGregorianCalendar value) {\n+            return _delegate.isEmpty(_convert(value));\n+        }\n+\n+        @Override\n+        public boolean isEmpty(SerializerProvider provider, XMLGregorianCalendar value) {\n+            return _delegate.isEmpty(provider, _convert(value));\n         }\n \n         @Override\n         public void serialize(XMLGregorianCalendar value, JsonGenerator jgen, SerializerProvider provider)\n-                throws IOException, JsonGenerationException {\n-            CalendarSerializer.instance.serialize(value.toGregorianCalendar(), jgen, provider);\n+                throws IOException {\n+            _delegate.serialize(_convert(value), jgen, provider);\n         }\n-        \n+\n         @Override\n-        public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n-            return CalendarSerializer.instance.getSchema(provider, typeHint);\n+        public void serializeWithType(XMLGregorianCalendar value, JsonGenerator gen, SerializerProvider provider,\n+                TypeSerializer typeSer) throws IOException\n+        {\n+            _delegate.serializeWithType(_convert(value), gen, provider, typeSer);\n         }\n \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-            CalendarSerializer.instance.acceptJsonFormatVisitor(visitor, null);\n+            _delegate.acceptJsonFormatVisitor(visitor, null);\n+        }\n+\n+        @Override\n+        public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property)\n+                throws JsonMappingException {\n+            JsonSerializer<?> ser = prov.handlePrimaryContextualization(_delegate, property);\n+            if (ser != _delegate) {\n+                return new XMLGregorianCalendarSerializer(ser);\n+            }\n+            return this;\n+        }\n+\n+        protected Calendar _convert(XMLGregorianCalendar input) {\n+            return (input == null) ? null : input.toGregorianCalendar();\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n package com.fasterxml.jackson.databind.ext;\n \n import java.io.IOException;\n+\n import org.w3c.dom.Node;\n import  org.w3c.dom.bootstrap.DOMImplementationRegistry;\n import  org.w3c.dom.ls.DOMImplementationLS;\n import  org.w3c.dom.ls.LSSerializer;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n+@SuppressWarnings(\"serial\")\n public class DOMSerializer extends StdSerializer<Node>\n {\n     protected final DOMImplementationLS _domImpl;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n  * etc) and {@link java.util.Map}s and iterable things\n  * ({@link java.util.Iterator}s).\n  */\n+@SuppressWarnings(\"serial\")\n public abstract class ContainerSerializer<T>\n     extends StdSerializer<T>\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java\n import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n  * as well as for catching unintended usage (like trying to use null\n  * as Map/Object key).\n  */\n-public final class FailingSerializer\n+@SuppressWarnings(\"serial\")\n+public class FailingSerializer\n     extends StdSerializer<Object>\n {\n-    final String _msg;\n+    protected final String _msg;\n     \n     public FailingSerializer(String msg) {\n         super(Object.class);\n     }\n     \n     @Override\n-    public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+    public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n     {\n         throw new JsonGenerationException(_msg);\n     }\n \n     @Override\n-    public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-        throws JsonMappingException\n-    {\n+    public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n         return null;\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedListSerializer.java\n public final class IndexedListSerializer\n     extends AsArraySerializerBase<List<?>>\n {\n+    private static final long serialVersionUID = 1L;\n+\n     public IndexedListSerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts,\n             BeanProperty property, JsonSerializer<Object> valueSerializer)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.*;\n  * \n  * @param <T> Type of arrays serializer handles\n  */\n+@SuppressWarnings(\"serial\")\n public abstract class ArraySerializerBase<T>\n     extends ContainerSerializer<T>\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n  * arrays; typically serializers used for {@link java.util.Collection}\n  * and array types.\n  */\n+@SuppressWarnings(\"serial\")\n public abstract class AsArraySerializerBase<T>\n     extends ContainerSerializer<T>\n     implements ContextualSerializer\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n public class CollectionSerializer\n     extends AsArraySerializerBase<Collection<?>>\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /*\n     /**********************************************************\n     /* Life-cycle\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateSerializer.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n \n  * potentially more readable Strings.\n  */\n @JacksonStdImpl\n+@SuppressWarnings(\"serial\")\n public class DateSerializer\n     extends DateTimeSerializerBase<Date>\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n import com.fasterxml.jackson.databind.util.StdDateFormat;\n \n+@SuppressWarnings(\"serial\")\n public abstract class DateTimeSerializerBase<T>\n     extends StdScalarSerializer<T>\n     implements ContextualSerializer\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/FileSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/FileSerializer.java\n import java.io.IOException;\n import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n  * For now, File objects get serialized by just outputting\n  * absolute (but not canonical) name as String value\n  */\n+@SuppressWarnings(\"serial\")\n public class FileSerializer\n     extends StdScalarSerializer<File>\n {\n     public FileSerializer() { super(File.class); }\n \n     @Override\n-    public void serialize(File value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n-    {\n+    public void serialize(File value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n         jgen.writeString(value.getAbsolutePath());\n     }\n \n     @Override\n-    public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-    {\n+    public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n         return createSchemaNode(\"string\", true);\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n /**\n  * Container class for serializers used for handling standard JDK-provided types.\n  */\n+@SuppressWarnings(\"serial\")\n public class NumberSerializers\n {\n     protected NumberSerializers() { }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n  * Dummy container class to group standard homogenous array serializer implementations\n  * (primitive arrays and String array).\n  */\n+@SuppressWarnings(\"serial\")\n public class StdArraySerializers\n {\n     protected final static HashMap<String, JsonSerializer<?>> _arraySerializers =\n      */\n \n     @JacksonStdImpl\n-    public final static class BooleanArraySerializer extends ArraySerializerBase<boolean[]>\n+    public static class BooleanArraySerializer extends ArraySerializerBase<boolean[]>\n     {\n         // as above, assuming no one re-defines primitive/wrapper types\n         private final static JavaType VALUE_TYPE = TypeFactory.defaultInstance().uncheckedSimpleType(Boolean.class);\n      * NOTE: since it is NOT serialized as an array, can not use AsArraySerializer as base\n      */\n     @JacksonStdImpl\n-    public final static class ByteArraySerializer extends StdSerializer<byte[]>\n+    public static class ByteArraySerializer extends StdSerializer<byte[]>\n     {\n         public ByteArraySerializer() {\n             super(byte[].class);\n     }\n \n     @JacksonStdImpl\n-    public final static class ShortArraySerializer extends TypedPrimitiveArraySerializer<short[]>\n+    public static class ShortArraySerializer extends TypedPrimitiveArraySerializer<short[]>\n     {\n         // as above, assuming no one re-defines primitive/wrapper types\n         private final static JavaType VALUE_TYPE = TypeFactory.defaultInstance().uncheckedSimpleType(Short.TYPE);\n      * NOTE: since it is NOT serialized as an array, can not use AsArraySerializer as base\n      */\n     @JacksonStdImpl\n-    public final static class CharArraySerializer extends StdSerializer<char[]>\n+    public static class CharArraySerializer extends StdSerializer<char[]>\n     {\n         public CharArraySerializer() { super(char[].class); }\n         \n     }\n \n     @JacksonStdImpl\n-    public final static class IntArraySerializer extends ArraySerializerBase<int[]>\n+    public static class IntArraySerializer extends ArraySerializerBase<int[]>\n     {\n         // as above, assuming no one re-defines primitive/wrapper types\n         private final static JavaType VALUE_TYPE = TypeFactory.defaultInstance().uncheckedSimpleType(Integer.TYPE);\n     }\n \n     @JacksonStdImpl\n-    public final static class LongArraySerializer extends TypedPrimitiveArraySerializer<long[]>\n+    public static class LongArraySerializer extends TypedPrimitiveArraySerializer<long[]>\n     {\n         // as above, assuming no one re-defines primitive/wrapper types\n         private final static JavaType VALUE_TYPE = TypeFactory.defaultInstance().uncheckedSimpleType(Long.TYPE);\n     }\n \n     @JacksonStdImpl\n-    public final static class FloatArraySerializer extends TypedPrimitiveArraySerializer<float[]>\n+    public static class FloatArraySerializer extends TypedPrimitiveArraySerializer<float[]>\n     {\n         // as above, assuming no one re-defines primitive/wrapper types\n         private final static JavaType VALUE_TYPE = TypeFactory.defaultInstance().uncheckedSimpleType(Float.TYPE);\n     }\n \n     @JacksonStdImpl\n-    public final static class DoubleArraySerializer extends ArraySerializerBase<double[]>\n+    public static class DoubleArraySerializer extends ArraySerializerBase<double[]>\n     {\n         // as above, assuming no one re-defines primitive/wrapper types\n         private final static JavaType VALUE_TYPE = TypeFactory.defaultInstance().uncheckedSimpleType(Double.TYPE);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n  *\n  * @since 2.1\n  */\n+@SuppressWarnings(\"serial\")\n public class StdDelegatingSerializer\n     extends StdSerializer<Object>\n     implements ContextualSerializer, ResolvableSerializer,\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n import java.util.concurrent.atomic.*;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;\n  * are serializer as scalars; some using basic {@link ToStringSerializer},\n  * others explicit serializers.\n  */\n+@SuppressWarnings(\"serial\")\n public class StdJdkSerializers\n {\n     /**\n     /**********************************************************\n      */\n \n-    public final static class AtomicBooleanSerializer\n+    public static class AtomicBooleanSerializer\n         extends StdScalarSerializer<AtomicBoolean>\n     {\n         public AtomicBooleanSerializer() { super(AtomicBoolean.class, false); }\n         }\n     }\n     \n-    public final static class AtomicIntegerSerializer\n+    public static class AtomicIntegerSerializer\n         extends StdScalarSerializer<AtomicInteger>\n     {\n         public AtomicIntegerSerializer() { super(AtomicInteger.class, false); }\n         }\n     }\n \n-    public final static class AtomicLongSerializer\n+    public static class AtomicLongSerializer\n         extends StdScalarSerializer<AtomicLong>\n     {\n         public AtomicLongSerializer() { super(AtomicLong.class, false); }\n             }\n         }\n     }\n-    \n-    public final static class AtomicReferenceSerializer\n+\n+    public static class AtomicReferenceSerializer\n         extends StdSerializer<AtomicReference<?>>\n     {\n         public AtomicReferenceSerializer() { super(AtomicReference.class, false); }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n \n+@SuppressWarnings(\"serial\")\n public class StdKeySerializers\n {\n     protected final static JsonSerializer<Object> DEFAULT_KEY_SERIALIZER = new StdKeySerializer();", "timestamp": 1419369671, "metainfo": ""}