{"sha": "7d791d6a86ecbf32d23bc0586da9b72b4a163459", "log": "Additional unit test: ok to not have object id", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n         serializeTypedFields(value, gen, provider,\n                 provider.isEnabled(SerializationFeature.WRITE_NULL_MAP_VALUES) ? null : JsonInclude.Include.NON_NULL);\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Schema related functionality\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n     private static final String POOL_KEY = \"POOL\";\n \n     // // Classes for external id use\n-    \n+\n     @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"id\")\n     static class Identifiable\n     {\n         public int value;\n \n         public Identifiable next;\n-        \n+\n         public Identifiable() { this(0); }\n         public Identifiable(int v) {\n             value = v;\n         public UUIDNode() { this(0); }\n         public UUIDNode(int v) { value = v; }\n     }\n-    \n+\n     // // Classes for external id from property annotations:\n-    \n+\n     static class IdWrapper\n     {\n         @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"@id\")\n         assertSame(result, result.next);\n     }\n \n+    // Should be ok NOT to have Object id, as well\n+    public void testMissingObjectId() throws Exception\n+    {\n+        Identifiable result = mapper.readValue(aposToQuotes(\"{'value':28, 'next':{'value':29}}\"),\n+                Identifiable.class);\n+        assertNotNull(result);\n+        assertEquals(28, result.value);\n+        assertNotNull(result.next);\n+        assertEquals(29, result.next.value);\n+    }\n+    \n     public void testSimpleUUIDForClassRoundTrip() throws Exception\n     {\n         UUIDNode root = new UUIDNode(1);", "timestamp": 1417905289, "metainfo": ""}