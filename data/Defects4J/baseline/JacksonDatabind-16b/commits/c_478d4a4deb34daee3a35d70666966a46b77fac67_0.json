{"sha": "478d4a4deb34daee3a35d70666966a46b77fac67", "log": "Implement #375", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n      * Constructor used for creating actual per-call instances.\n      */\n     protected DeserializationContext(DeserializationContext src,\n-            DeserializationConfig config, JsonParser jp,\n+            DeserializationConfig config, JsonParser p,\n             InjectableValues injectableValues)\n     {\n         _cache = src._cache;\n         _config = config;\n         _featureFlags = config.getDeserializationFeatures();\n         _view = config.getActiveView();\n-        _parser = jp;\n+        _parser = p;\n         _injectableValues = injectableValues;\n         _attributes = config.getAttributes();\n     }\n     public TimeZone getTimeZone() {\n         return _config.getTimeZone();\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Public API, pass-through to DeserializerCache\n      */\n     @SuppressWarnings(\"unchecked\")\n     public final JsonDeserializer<Object> findContextualValueDeserializer(JavaType type,\n-            BeanProperty property) throws JsonMappingException\n-    {\n-        JsonDeserializer<Object> deser = _cache.findValueDeserializer(this,\n-                _factory, type);\n+            BeanProperty prop) throws JsonMappingException\n+    {\n+        JsonDeserializer<Object> deser = _cache.findValueDeserializer(this, _factory, type);\n         if (deser != null) {\n-            deser = (JsonDeserializer<Object>) handleSecondaryContextualization(deser, property);\n+            deser = (JsonDeserializer<Object>) handleSecondaryContextualization(deser, prop);\n         }\n         return deser;\n     }\n-    \n+\n     /**\n      * Method for finding a deserializer for root-level value.\n      */\n     /**\n      * Convenience method, functionally same as:\n      *<pre>\n-     *  getDeserializerProvider().findKeyDeserializer(getConfig(), propertyType, property);\n+     *  getDeserializerProvider().findKeyDeserializer(getConfig(), prop.getType(), prop);\n      *</pre>\n      */\n     public final KeyDeserializer findKeyDeserializer(JavaType keyType,\n-            BeanProperty property) throws JsonMappingException {\n+            BeanProperty prop) throws JsonMappingException {\n         KeyDeserializer kd = _cache.findKeyDeserializer(this,\n                 _factory, keyType);\n         // Second: contextualize?\n         if (kd instanceof ContextualKeyDeserializer) {\n-            kd = ((ContextualKeyDeserializer) kd).createContextual(this, property);\n+            kd = ((ContextualKeyDeserializer) kd).createContextual(this, prop);\n         }\n         return kd;\n     }\n      * to handle details of resolving\n      * {@link ContextualDeserializer} with given property context.\n      * \n-     * @param property Property for which the given primary deserializer is used; never null.\n+     * @param prop Property for which the given primary deserializer is used; never null.\n      * \n      * @since 2.3\n      */\n     public JsonDeserializer<?> handlePrimaryContextualization(JsonDeserializer<?> deser,\n-            BeanProperty property)\n+            BeanProperty prop)\n         throws JsonMappingException\n     {\n         if (deser != null) {\n             if (deser instanceof ContextualDeserializer) {\n-                deser = ((ContextualDeserializer) deser).createContextual(this, property);\n+                deser = ((ContextualDeserializer) deser).createContextual(this, prop);\n             }\n         }\n         return deser;\n      * (or, in case of root value property, to any property), annotations\n      * accessible may or may not be relevant.\n      * \n-     * @param property Property for which deserializer is used, if any; null\n+     * @param prop Property for which deserializer is used, if any; null\n      *    when deserializing root values\n      * \n      * @since 2.3\n      */\n     public JsonDeserializer<?> handleSecondaryContextualization(JsonDeserializer<?> deser,\n-            BeanProperty property)\n-        throws JsonMappingException\n-    {\n-        if (deser != null) {\n-            if (deser instanceof ContextualDeserializer) {\n-                deser = ((ContextualDeserializer) deser).createContextual(this, property);\n-            }\n+            BeanProperty prop)\n+        throws JsonMappingException {\n+        if (deser != null && (deser instanceof ContextualDeserializer)) {\n+            deser = ((ContextualDeserializer) deser).createContextual(this, prop);\n         }\n         return deser;\n     }\n      * date format is cloned, and cloned instance will be retained\n      * for use during this deserialization round.\n      */\n-    public Date parseDate(String dateStr)\n-        throws IllegalArgumentException\n+    public Date parseDate(String dateStr) throws IllegalArgumentException\n     {\n         try {\n             DateFormat df = getDateFormat();\n      * Convenience method for constructing Calendar instance set\n      * to specified time, to be modified and used by caller.\n      */\n-    public Calendar constructCalendar(Date d)\n-    {\n-        /* 08-Jan-2008, tatu: not optimal, but should work for the\n-         *   most part; let's revise as needed.\n-         */\n+    public Calendar constructCalendar(Date d) {\n+        // 08-Jan-2008, tatu: not optimal, but should work for the most part; let's revise as needed.\n         Calendar c = Calendar.getInstance(getTimeZone());\n         c.setTime(d);\n         return c;\n \n     /*\n     /**********************************************************\n+    /* Convenience methods for reading parsed values\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Convenience method that may be used by composite or container deserializers,\n+     * for reading one-off values contained (for sequences, it is more efficient\n+     * to actually fetch deserializer once for the whole collection).\n+     *<p>\n+     * NOTE: when deserializing values of properties contained in composite types,\n+     * rather use {@link #readPropertyValue(JsonParser, BeanProperty, Class)};\n+     * this method does not allow use of contextual annotations.\n+     * \n+     * @since 2.4\n+     */\n+    public <T> T readValue(JsonParser p, Class<T> type) throws IOException {\n+        return readValue(p, getTypeFactory().constructType(type));\n+    }\n+\n+    /**\n+     * @since 2.4\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T readValue(JsonParser p, JavaType type) throws IOException {\n+        JsonDeserializer<Object> deser = findRootValueDeserializer(type);\n+        if (deser == null) {\n+        }\n+        return (T) deser.deserialize(p, this);\n+    }\n+\n+    /**\n+     * Convenience method that may be used by composite or container deserializers,\n+     * for reading one-off values for the composite type, taking into account\n+     * annotations that the property (passed to this method -- usually property that\n+     * has custom serializer that called this method) has.\n+     * \n+     * @since 2.4\n+     */\n+    public <T> T readPropertyValue(JsonParser p, BeanProperty prop, Class<T> type) throws IOException {\n+        return readPropertyValue(p, prop, getTypeFactory().constructType(type));\n+    }\n+\n+    /**\n+     * @since 2.4\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T readPropertyValue(JsonParser p, BeanProperty prop, JavaType type) throws IOException {\n+        JsonDeserializer<Object> deser = findContextualValueDeserializer(type, prop);\n+        if (deser == null) {\n+            \n+        }\n+        return (T) deser.deserialize(p, this);\n+    }\n+    \n+    /*\n+    /**********************************************************\n     /* Methods for problem handling, reporting\n     /**********************************************************\n      */\n      * Method deserializers can call to inform configured {@link DeserializationProblemHandler}s\n      * of an unrecognized property.\n      */\n-    public boolean handleUnknownProperty(JsonParser jp, JsonDeserializer<?> deser,\n+    public boolean handleUnknownProperty(JsonParser p, JsonDeserializer<?> deser,\n             Object instanceOrClass, String propName)\n         throws IOException, JsonProcessingException\n     {\n         if (h != null) {\n             while (h != null) {\n                 // Can bail out if it's handled\n-                if (h.value().handleUnknownProperty(this, jp, deser, instanceOrClass, propName)) {\n+                if (h.value().handleUnknownProperty(this, p, deser, instanceOrClass, propName)) {\n                     return true;\n                 }\n                 h = h.next();\n      * Helper method for indicating that the current token was expected to be another\n      * token.\n      */\n-    public JsonMappingException wrongTokenException(JsonParser jp, JsonToken expToken, String msg) {\n-        return JsonMappingException.from(jp, \"Unexpected token (\"+jp.getCurrentToken()+\"), expected \"+expToken+\": \"+msg);\n+    public JsonMappingException wrongTokenException(JsonParser p, JsonToken expToken, String msg) {\n+        return JsonMappingException.from(p, \"Unexpected token (\"+p.getCurrentToken()+\"), expected \"+expToken+\": \"+msg);\n     }\n \n     /**\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n package com.fasterxml.jackson.databind.deser;\n \n import java.io.*;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-\n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n             return new CustomKey(Integer.valueOf(key));\n         }\n     }\n+\n+    // [#375]\n+\n+    @Target({ElementType.FIELD})\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @interface Negative { }\n+\n+    static class Bean375Wrapper {\n+        @Negative\n+        public Bean375Outer value;\n+    }\n+    \n+    static class Bean375Outer {\n+        protected Bean375Inner inner;\n+\n+        public Bean375Outer(Bean375Inner v) { inner = v; }\n+    }\n+\n+    static class Bean375Inner {\n+        protected int x;\n+\n+        public Bean375Inner(int x) { this.x = x; }\n+    }\n+\n+    static class Bean375OuterDeserializer extends StdDeserializer<Bean375Outer>\n+        implements ContextualDeserializer\n+    {\n+        protected BeanProperty prop;\n+        \n+        protected Bean375OuterDeserializer() { this(null); }\n+        protected Bean375OuterDeserializer(BeanProperty p) {\n+            super(Bean375Outer.class);\n+            prop = p;\n+        }\n+\n+        @Override\n+        public Bean375Outer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException,\n+                JsonProcessingException {\n+            Object ob = ctxt.readPropertyValue(p, prop, Bean375Inner.class);\n+            return new Bean375Outer((Bean375Inner) ob);\n+        }\n+        @Override\n+        public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n+                throws JsonMappingException {\n+            return new Bean375OuterDeserializer(property);\n+        }\n+    }\n+\n+    static class Bean375InnerDeserializer extends StdDeserializer<Bean375Inner>\n+        implements ContextualDeserializer\n+    {\n+        protected boolean negative;\n+        \n+        protected Bean375InnerDeserializer() { this(false); }\n+        protected Bean375InnerDeserializer(boolean n) {\n+            super(Bean375Inner.class);\n+            negative = n;\n+        }\n+\n+        @Override\n+        public Bean375Inner deserialize(JsonParser jp, DeserializationContext ctxt)\n+                throws IOException, JsonProcessingException {\n+            int x = jp.getIntValue();\n+            if (negative) {\n+                x = -x;\n+            } else {\n+                x += x;\n+            }\n+            return new Bean375Inner(x);\n+        }\n+\n+        @Override\n+        public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n+                throws JsonMappingException {\n+            if (property != null) {\n+                Negative n = property.getAnnotation(Negative.class);\n+                if (n != null) {\n+                    return new Bean375InnerDeserializer(true);\n+                }\n+            }\n+            return this;\n+        }\n+        \n+    }\n     \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n \n-    final ObjectMapper MAPPER = new ObjectMapper();\n+    final ObjectMapper MAPPER = objectMapper();\n     \n     public void testCustomBeanDeserializer() throws Exception\n     {\n         assertNotNull(deserialized.map);\n         assertEquals(1, deserialized.map.size());\n     }\n+\n+    // [#337]: convenience methods for custom deserializers to use\n+    public void testContextReadValue() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        SimpleModule module = new SimpleModule(\"test\", Version.unknownVersion());\n+        module.addDeserializer(Bean375Outer.class, new Bean375OuterDeserializer());\n+        module.addDeserializer(Bean375Inner.class, new Bean375InnerDeserializer());\n+        mapper.registerModule(module);\n+\n+        // First, without property; doubles up value:\n+        Bean375Outer outer = mapper.readValue(\"13\", Bean375Outer.class);\n+        assertEquals(26, outer.inner.x);\n+\n+        // then with property; should find annotation, turn negative\n+        Bean375Wrapper w = mapper.readValue(\"{\\\"value\\\":13}\", Bean375Wrapper.class);\n+        assertNotNull(w.value);\n+        assertNotNull(w.value.inner);\n+        assertEquals(-13, w.value.inner.x);\n+    }\n }", "timestamp": 1395032013, "metainfo": ""}