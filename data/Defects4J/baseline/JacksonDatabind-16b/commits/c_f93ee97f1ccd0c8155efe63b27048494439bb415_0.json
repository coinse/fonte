{"sha": "f93ee97f1ccd0c8155efe63b27048494439bb415", "log": "Verify that [JACKSON-677] is also fixed", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/type/TestGenericFieldInSubtype.java\n+package com.fasterxml.jackson.databind.type;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestGenericFieldInSubtype extends BaseMapTest\n+{\n+    // [JACKSON-677]\n+    public void test677() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        // and bit more checking as per later comments\n+        JavaType t677 = mapper.constructType(Result677.Success677.class);\n+        assertNotNull(t677);\n+        Result677.Success677<Integer> s = new Result677.Success677<Integer>(Integer.valueOf(4));\n+        String json = mapper.writeValueAsString(s);\n+        assertEquals(\"{\\\"value\\\":4}\", json);\n+    }\n+\n+ // [JACKSON-887]\n+    public void testInnerType() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        BaseType.SubType<?> r = mapper.readValue(\"{}\", BaseType.SubType.class);\n+        assertNotNull(r);\n+    }\n+\n+}\n+\n+class Result677<T> {\n+    public static class Success677<K> extends Result677<K> {\n+     public K value;\n+     \n+     public Success677() { }\n+     public Success677(K k) { value = k; }\n+    }\n+}\n+\n+abstract class BaseType<T> {\n+    public T value;\n+\n+    public final static class SubType<T extends Number> extends BaseType<T>\n+    {\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/failing/TestInnerClass.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestInnerClass.java\n     /* Tests\n     /**********************************************************\n      */\n-\n-    // additional part of [JACKSON-677]\n-    public void test677() throws Exception\n-    {\n-        ObjectMapper mapper = new ObjectMapper();\n-        // and bit more checking as per later comments\n-        JavaType t677 = mapper.constructType(Result677.Success677.class);\n-        assertNotNull(t677);\n-        Result677.Success677<Integer> s = new Result677.Success677<Integer>(Integer.valueOf(4));\n-        String json = mapper.writeValueAsString(s);\n-        assertEquals(\"{\\\"value\\\":4}\", json);\n-    }\n     \n     // core/[Issue#32]\n     public void testInnerList() throws Exception\n     }\n }\n \n-// more fails with [JACKSON-677]\n-class Result677<T> {\n-    public static class Success677<K> extends Result677<K> {\n-        public K value;\n-        \n-        public Success677() { }\n-        public Success677(K k) { value = k; }\n-    }\n-}\n \n-", "timestamp": 1360391316, "metainfo": ""}