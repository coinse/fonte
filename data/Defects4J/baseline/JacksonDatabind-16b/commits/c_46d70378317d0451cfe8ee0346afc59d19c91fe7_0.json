{"sha": "46d70378317d0451cfe8ee0346afc59d19c91fe7", "log": "Merge branch '2.5' of github.com:FasterXML/jackson-databind into 2.5", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n+\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.databind.util.LRUMap;\n \n /**\n  * Tests to verify that most core Jackson components can be serialized\n         assertEquals(p.x, p2.x);\n         assertEquals(p.y, p2.y);\n     }\n-    \n+\n+    public void testTypeFactory() throws Exception\n+    {\n+        TypeFactory orig = TypeFactory.defaultInstance();\n+        JavaType t = orig.constructType(JavaType.class);\n+        assertNotNull(t);\n+\n+        byte[] bytes = jdkSerialize(orig);\n+        TypeFactory result = jdkDeserialize(bytes);\n+        assertNotNull(result);\n+        t = orig.constructType(JavaType.class);\n+        assertEquals(JavaType.class, t.getRawClass());\n+    }\n+\n+    public void testLRUMap() throws Exception\n+    {\n+        LRUMap<String,Integer> map = new LRUMap<String,Integer>(32, 32);\n+        map.put(\"a\", 1);\n+\n+        byte[] bytes = jdkSerialize(map);\n+        LRUMap<String,Integer> result = jdkDeserialize(bytes);\n+        // transient implementation, will be read as empty\n+        assertEquals(0, result.size());\n+\n+        // but should be possible to re-populate\n+        result.put(\"a\", 2);\n+        assertEquals(1, result.size());\n+    }\n+\n     /*\n     /**********************************************************\n     /* Helper methods", "timestamp": 1429827163, "metainfo": ""}