{"sha": "d860ea523583285c7f89ea9bc215c97ce4ae4ba4", "log": "Adding separate handling for Map type, distinct from generic \"JSON Object\"; while JSON Schema is lame enough to not make distinction, we shouldn't be", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n     extends StdDeserializer<Object>\n     implements ContextualDeserializer, ResolvableDeserializer\n {\n+    private static final long serialVersionUID = 1L;\n+\n     protected final JsonDeserializer<?> _delegatee;\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n public abstract class FromStringDeserializer<T>\n     extends StdScalarDeserializer<T>\n {\n+    private static final long serialVersionUID = 1L;\n+\n     protected FromStringDeserializer(Class<?> vc) {\n         super(vc);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n     extends ContainerDeserializerBase<Map<Object,Object>>\n     implements ContextualDeserializer, ResolvableDeserializer\n {\n+    private static final long serialVersionUID = -3378654289961736240L;\n+\n     // // Configuration: typing, deserializers\n \n     protected final JavaType _mapType;\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java\n     public static class DurationDeserializer\n         extends FromStringDeserializer<Duration>\n     {\n+        private static final long serialVersionUID = 1L;\n         public DurationDeserializer() { super(Duration.class); }\n     \n         @Override\n     public static class GregorianCalendarDeserializer\n         extends StdScalarDeserializer<XMLGregorianCalendar>\n     {\n+        private static final long serialVersionUID = 1L;\n         public GregorianCalendarDeserializer() { super(XMLGregorianCalendar.class); }\n         \n         @Override\n     public static class QNameDeserializer\n         extends FromStringDeserializer<QName>\n     {\n+        private static final long serialVersionUID = 1L;\n         public QNameDeserializer() { super(QName.class); }\n         \n         @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/DOMDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/DOMDeserializer.java\n  */\n public abstract class DOMDeserializer<T> extends FromStringDeserializer<T>\n {\n-    final static DocumentBuilderFactory _parserFactory;\n+    private static final long serialVersionUID = 1L;\n+\n+    private final static DocumentBuilderFactory _parserFactory;\n     static {\n         _parserFactory = DocumentBuilderFactory.newInstance();\n         // yup, only cave men do XML without recognizing namespaces...\n     \n     public static class NodeDeserializer extends DOMDeserializer<Node>\n     {\n+        private static final long serialVersionUID = 1L;\n         public NodeDeserializer() { super(Node.class); }\n         @Override\n         public Node _deserialize(String value, DeserializationContext ctxt) throws IllegalArgumentException {\n \n     public static class DocumentDeserializer extends DOMDeserializer<Document>\n     {\n+        private static final long serialVersionUID = 1L;\n         public DocumentDeserializer() { super(Document.class); }\n         @Override\n         public Document _deserialize(String value, DeserializationContext ctxt) throws IllegalArgumentException {\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n \n+/**\n+ * Interface for visitor callbacks, when type in question can be any of\n+ * legal JSON types.\n+ */\n public interface JsonFormatVisitorWrapper extends JsonFormatVisitorWithSerializerProvider\n {\n     public JsonObjectFormatVisitor expectObjectFormat(JavaType convertedType) throws JsonMappingException;\n+\n     public JsonArrayFormatVisitor expectArrayFormat(JavaType convertedType) throws JsonMappingException;\n     public JsonStringFormatVisitor expectStringFormat(JavaType convertedType) throws JsonMappingException;\n     public JsonNumberFormatVisitor expectNumberFormat(JavaType convertedType) throws JsonMappingException;\n     public JsonBooleanFormatVisitor expectBooleanFormat(JavaType convertedType) throws JsonMappingException;\n     public JsonNullFormatVisitor expectNullFormat(JavaType convertedType) throws JsonMappingException;\n     public JsonAnyFormatVisitor expectAnyFormat(JavaType convertedType) throws JsonMappingException;\n+\n+    /**\n+     * Method called when type is of Java {@link java.util.Map} type, and will\n+     * be serialized as a JSON Object.\n+     * \n+     * @since 2.2\n+     */\n+    public JsonMapFormatVisitor expectMapFormat(JavaType type) throws JsonMappingException;\n }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonMapFormatVisitor.java\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+\n+public interface JsonMapFormatVisitor extends JsonFormatVisitorWithSerializerProvider\n+{\n+    /**\n+     * Visit method called to indicate type of keys of the Map type\n+     * being visited\n+     */\n+    public void keyFormat(JsonFormatVisitable handler, JavaType keyType) throws JsonMappingException;\n+\n+    /**\n+     * Visit method called after {@link #keyFormat} to allow visiting of\n+     * the value type\n+     */\n+    public void valueFormat(JsonFormatVisitable handler, JavaType valueType) throws JsonMappingException;\n+    \n+    /**\n+     * Default \"empty\" implementation, useful as the base to start on;\n+     * especially as it is guaranteed to implement all the method\n+     * of the interface, even if new methods are getting added.\n+     */\n+    public static class Base\n+        implements JsonMapFormatVisitor\n+    {\n+        protected SerializerProvider provider;\n+\n+        public SerializerProvider getProvider() { return provider; }\n+\n+        public void setProvider(SerializerProvider p) { provider = p; }\n+\n+        public void keyFormat(JsonFormatVisitable handler, JavaType keyType) throws JsonMappingException { }\n+        public void valueFormat(JsonFormatVisitable handler, JavaType valueType) throws JsonMappingException { }\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         throws JsonMappingException\n     {\n-        //jackphel Aug 17 2012 : this can definitely more more exact. \n-        visitor.expectObjectFormat(typeHint);\n+        JsonMapFormatVisitor v2 = (visitor == null) ? null : visitor.expectMapFormat(typeHint);\n+        if (v2 != null) {\n+            v2.keyFormat(_keySerializer, _keyType);\n+            JsonSerializer<?> valueSer = _valueSerializer;\n+            if (valueSer == null) {\n+                valueSer = _findAndAddDynamic(_dynamicValueSerializers,\n+                            _valueType, visitor.getProvider());\n+            }\n+            v2.valueFormat(valueSer, _valueType);\n+        }\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n         throws JsonMappingException\n     {\n         JsonArrayFormatVisitor arrayVisitor = visitor.expectArrayFormat(typeHint);\n-        if (arrayVisitor == null) { // not sure if this is legal but...\n-            return; \n-        }\n-        TypeFactory tf = visitor.getProvider().getTypeFactory();\n-        JavaType contentType = tf.moreSpecificType(_elementType, typeHint.getContentType());\n-        if (contentType == null) {\n-            throw new JsonMappingException(\"Could not resolve type\");\n-        }\n-        JsonSerializer<?> valueSer = _elementSerializer;\n-        if (valueSer == null) {\n-            valueSer = visitor.getProvider().findValueSerializer(contentType, _property);\n-        }\n-        arrayVisitor.itemsFormat(valueSer, contentType);\n+        if (arrayVisitor != null) {\n+            TypeFactory tf = visitor.getProvider().getTypeFactory();\n+            JavaType contentType = tf.moreSpecificType(_elementType, typeHint.getContentType());\n+            if (contentType == null) {\n+                throw new JsonMappingException(\"Could not resolve type\");\n+            }\n+            JsonSerializer<?> valueSer = _elementSerializer;\n+            if (valueSer == null) {\n+                valueSer = visitor.getProvider().findValueSerializer(contentType, _property);\n+            }\n+            arrayVisitor.itemsFormat(valueSer, contentType);\n+        }\n     }\n \n     protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,", "timestamp": 1353613905, "metainfo": ""}