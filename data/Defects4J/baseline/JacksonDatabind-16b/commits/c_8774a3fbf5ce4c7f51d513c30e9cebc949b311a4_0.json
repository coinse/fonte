{"sha": "8774a3fbf5ce4c7f51d513c30e9cebc949b311a4", "log": "further refinements wrt [Issue-11]...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         throws JsonMappingException\n     {\n         // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+        // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n         if (beanDesc.getBeanClass() == Object.class) {\n-            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+            return prov.getUnknownTypeSerializer(Object.class);\n+//            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n         }\n         final SerializationConfig config = prov.getConfig();\n         BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n--- a/src/test/java/com/fasterxml/jackson/databind/convert/TestBeanConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestBeanConversions.java\n package com.fasterxml.jackson.databind.convert;\n \n+import java.util.LinkedHashMap;\n+import java.util.Map;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.TreeNode;\n         public void setData(Object data) { this.data = data; }\n     }\n \n+    static class Leaf {\n+        public int value;\n+\n+        public Leaf() { }\n+        public Leaf(int v) { value = v; }\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Test methods\n         assertEquals(2, output.y);\n         assertEquals(3, output.z);\n     }\n+\n+    /**\n+     * Need to test \"shortcuts\" introduced by [Issue-11]\n+     */\n+    public void testIssue11() throws Exception\n+    {\n+        // First the expected use case, Node specification\n+        ObjectNode root = MAPPER.createObjectNode();\n+        JsonNode n = root;\n+        ObjectNode ob2 = MAPPER.convertValue(n, ObjectNode.class);\n+        assertSame(root, ob2);\n+\n+        JsonNode n2 = MAPPER.convertValue(n, JsonNode.class);\n+        assertSame(root, n2);\n+        \n+        // then some other no-op conversions\n+        String STR = \"test\";\n+        CharSequence seq = MAPPER.convertValue(STR, CharSequence.class);\n+        assertSame(STR, seq);\n+\n+        // and then something that should NOT use short-cut\n+        Leaf l = new Leaf(13);\n+        Map<?,?> m = MAPPER.convertValue(l, Map.class);\n+        assertNotNull(m);\n+        assertEquals(1, m.size());\n+        assertEquals(Integer.valueOf(13), m.get(\"value\"));\n+\n+        // and reverse too\n+        Leaf l2 = MAPPER.convertValue(m, Leaf.class);\n+        assertEquals(13, l2.value);\n+\n+        // also; ok to use \"untyped\" (Object):\n+        Object ob = MAPPER.convertValue(l, Object.class);\n+        assertNotNull(ob);\n+        assertEquals(LinkedHashMap.class, ob.getClass());\n+\n+        // And one more: this time with a minor twist\n+        final Object plaino = new Object();\n+        // first, a failed attempt:\n+        try {\n+            m = MAPPER.convertValue(plaino, Map.class);\n+            fail(\"Conversion should have failed\");\n+        } catch (IllegalArgumentException e) {\n+            verifyException(e, \"no properties discovered\");\n+        }\n+        \n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n+        try {\n+            assertEquals(\"{}\", mapper.writeValueAsString(plaino));\n+        } catch (Exception e) {\n+            throw (Exception) e.getCause();\n+        }\n+        // should now work, via serialization/deserialization:\n+        m = mapper.convertValue(plaino, Map.class);\n+        assertNotNull(m);\n+        assertEquals(0, m.size());\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n package com.fasterxml.jackson.databind.node;\n \n import java.io.IOException;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n \n import static org.junit.Assert.*;\n \n         assertTrue(n.isPojo());\n         assertSame(MARKER, ((POJONode) n).getPojo());\n     }\n-\n-    /**\n-     * Need to test \"shortcuts\" introduced by [Issue-11]\n-     */\n-    public void testIssue11() throws Exception\n-    {\n-        // First the expected use case, Node specification\n-        ObjectNode root = MAPPER.createObjectNode();\n-        JsonNode n = root;\n-        ObjectNode ob2 = MAPPER.convertValue(n, ObjectNode.class);\n-        assertSame(root, ob2);\n-\n-        JsonNode n2 = MAPPER.convertValue(n, JsonNode.class);\n-        assertSame(root, n2);\n-        \n-        // then some other no-op conversions\n-        String STR = \"test\";\n-        CharSequence seq = MAPPER.convertValue(STR, CharSequence.class);\n-        assertSame(STR, seq);\n-\n-        // and then something that should NOT use short-cut\n-        Leaf l = new Leaf(13);\n-        Map<?,?> m = MAPPER.convertValue(l, Map.class);\n-        assertNotNull(m);\n-        assertEquals(1, m.size());\n-        assertEquals(Integer.valueOf(13), m.get(\"value\"));\n-\n-        // and reverse too\n-        Leaf l2 = MAPPER.convertValue(m, Leaf.class);\n-        assertEquals(13, l2.value);\n-\n-        // also; ok to use \"untyped\" (Object):\n-        Object ob = MAPPER.convertValue(l, Object.class);\n-        assertNotNull(ob);\n-        assertEquals(LinkedHashMap.class, ob.getClass());\n-    }\n }\n ", "timestamp": 1341549477, "metainfo": ""}