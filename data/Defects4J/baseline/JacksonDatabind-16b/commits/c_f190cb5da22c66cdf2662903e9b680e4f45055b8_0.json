{"sha": "f190cb5da22c66cdf2662903e9b680e4f45055b8", "log": "Adding additional test cases for Issue # 381", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n         result = mapper.readValue(new StringReader(\"{\\\"v\\\":[true]}\"), BooleanBean.class);\n         assertTrue(result._v);\n         \n+        try {\n+            mapper.readValue(new StringReader(\"[{\\\"v\\\":[true,true]}]\"), BooleanBean.class);\n+            fail(\"Did not throw exception while reading a value from a multi value array with UNWRAP_SINGLE_VALUE_ARRAY feature enabled\");\n+        } catch (JsonMappingException exp) {\n+            //threw exception as required\n+        }\n+        \n         result = mapper.readValue(new StringReader(\"{\\\"v\\\":[null]}\"), BooleanBean.class);\n         assertNotNull(result);\n         assertFalse(result._v);\n         \n         // [Issue#381]\n         final ObjectMapper mapper = new ObjectMapper();\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        try {\n+            mapper.readValue(new StringReader(\"{\\\"v\\\":[3]}\"), IntBean.class);\n+            fail(\"Did not throw exception when reading a value from a single value array with the UNWRAP_SINGLE_VALUE_ARRAYS feature disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Correctly threw exception\n+        }\n+        \n         mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n         \n         result = mapper.readValue(new StringReader(\"{\\\"v\\\":[3]}\"), IntBean.class);\n         \n         result = mapper.readValue(new StringReader(\"[{\\\"v\\\":[3]}]\"), IntBean.class);\n         assertEquals(3, result._v);\n+        \n+        try {\n+            mapper.readValue(new StringReader(\"[{\\\"v\\\":[3,3]}]\"), IntBean.class);\n+            fail(\"Did not throw exception while reading a value from a multi value array with UNWRAP_SINGLE_VALUE_ARRAY feature enabled\");\n+        } catch (JsonMappingException exp) {\n+            //threw exception as required\n+        }\n         \n         result = mapper.readValue(new StringReader(\"{\\\"v\\\":[null]}\"), IntBean.class);\n         assertNotNull(result);\n         assertNotNull(array);\n         assertEquals(1, array.length);\n         assertEquals(0.0, array[0]);\n+        \n+        // [Issue#381]\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        try {\n+            mapper.readValue(new StringReader(\"{\\\"v\\\":[\" + value + \"]}\"), DoubleBean.class);\n+            fail(\"Did not throw exception when reading a value from a single value array with the UNWRAP_SINGLE_VALUE_ARRAYS feature disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Correctly threw exception\n+        }\n+        \n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        result = mapper.readValue(new StringReader(\"{\\\"v\\\":[\" + value + \"]}\"), DoubleBean.class);\n+        assertEquals(value, result._v);\n+        \n+        result = mapper.readValue(new StringReader(\"[{\\\"v\\\":[\" + value + \"]}]\"), DoubleBean.class);\n+        assertEquals(value, result._v);\n+        \n+        try {\n+            mapper.readValue(new StringReader(\"[{\\\"v\\\":[\" + value + \",\" + value + \"]}]\"), DoubleBean.class);\n+            fail(\"Did not throw exception while reading a value from a multi value array with UNWRAP_SINGLE_VALUE_ARRAY feature enabled\");\n+        } catch (JsonMappingException exp) {\n+            //threw exception as required\n+        }\n+        \n+        result = mapper.readValue(new StringReader(\"{\\\"v\\\":[null]}\"), DoubleBean.class);\n+        assertNotNull(result);\n+        assertEquals(0d, result._v);\n+\n+        array = mapper.readValue(new StringReader(\"[ [ null ] ]\"), double[].class);\n+        assertNotNull(array);\n+        assertEquals(1, array.length);\n+        assertEquals(0d, array[0]);\n     }\n \n     public void testDoublePrimitiveNonNumeric() throws Exception\n         String result = MAPPER.readValue(new StringReader(\"\\\"\"+value+\"\\\"\"), String.class);\n         assertEquals(value, result);\n     }\n+    \n+    public void testSingleStringWrapped() throws Exception\n+    {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        String value = \"FOO!\";\n+        try {\n+            mapper.readValue(new StringReader(\"[\\\"\"+value+\"\\\"]\"), String.class);\n+            fail(\"Exception not thrown when attempting to unwrap a single value 'String' array into a simple String\");\n+        } catch (JsonMappingException exp) {\n+            //exception thrown correctly\n+        }\n+        \n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        try {\n+            mapper.readValue(new StringReader(\"[\\\"\"+value+\"\\\",\\\"\"+value+\"\\\"]\"), String.class);\n+            fail(\"Exception not thrown when attempting to unwrap a single value 'String' array that contained more than one value into a simple String\");\n+        } catch (JsonMappingException exp) {\n+            //exception thrown correctly\n+        }\n+        \n+        String result = mapper.readValue(new StringReader(\"[\\\"\"+value+\"\\\"]\"), String.class);\n+        assertEquals(value, result);\n+    }\n \n     public void testNull() throws Exception\n     {\n         // null doesn't really have a type, fake by assuming Object\n         Object result = MAPPER.readValue(\"   null\", Object.class);\n         assertNull(result);\n-    }\n+    }  \n \n     public void testClass() throws Exception\n     {\n-        Class<?> result = MAPPER.readValue(\"\\\"java.lang.String\\\"\", Class.class);\n+        final ObjectMapper mapper = new ObjectMapper();        \n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);        \n+        \n+        Class<?> result = mapper.readValue(quote(String.class.getName()), Class.class);\n         assertEquals(String.class, result);\n+        \n+        //[Issue#381]\n+        try {\n+            mapper.readValue(\"[\" + quote(String.class.getName()) + \"]\", Class.class);\n+            fail(\"Did not throw exception when UNWRAP_SINGLE_VALUE_ARRAYS feature was disabled and attempted to read a Class array containing one element\");\n+        } catch (JsonMappingException exp) {\n+            \n+        }\n+        \n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        try {\n+           mapper.readValue(\"[\" + quote(Object.class.getName()) + \",\" + quote(Object.class.getName()) +\"]\", Class.class); \n+           fail(\"Did not throw exception when UNWRAP_SINGLE_VALUE_ARRAYS feature was enabled and attempted to read a Class array containing two elements\");\n+        } catch (JsonMappingException exp) {\n+            \n+        }               \n+        result = mapper.readValue(\"[\" + quote(String.class.getName()) + \"]\", Class.class);\n+        assertEquals(String.class, result);\n     }\n \n     public void testBigDecimal() throws Exception\n     {\n+        final ObjectMapper mapper = objectMapper();\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n         BigDecimal value = new BigDecimal(\"0.001\");\n-        BigDecimal result = MAPPER.readValue(new StringReader(value.toString()), BigDecimal.class);\n+        BigDecimal result = mapper.readValue(value.toString(), BigDecimal.class);\n         assertEquals(value, result);\n+        \n+        //Issue#381\n+        try {\n+            mapper.readValue(\"[\" + value.toString() + \"]\", BigDecimal.class);\n+            fail(\"Exception was not thrown when attempting to read a single value array of BigDecimal when UNWRAP_SINGLE_VALUE_ARRAYS feature is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        result = mapper.readValue(\"[\" + value.toString() + \"]\", BigDecimal.class);\n+        assertEquals(value, result);\n+        \n+        try {\n+            mapper.readValue(\"[\" + value.toString() + \",\" + value.toString() + \"]\", BigDecimal.class);\n+            fail(\"Exception was not thrown when attempting to read a muti value array of BigDecimal when UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n     }\n \n     public void testBigInteger() throws Exception\n     {\n+        final ObjectMapper mapper = objectMapper();\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n         BigInteger value = new BigInteger(\"-1234567890123456789012345567809\");\n-        BigInteger result = MAPPER.readValue(new StringReader(value.toString()), BigInteger.class);\n+        BigInteger result = mapper.readValue(new StringReader(value.toString()), BigInteger.class);\n         assertEquals(value, result);\n+        \n+        //Issue#381\n+        try {\n+            mapper.readValue(\"[\" + value.toString() + \"]\", BigInteger.class);\n+            fail(\"Exception was not thrown when attempting to read a single value array of BigInteger when UNWRAP_SINGLE_VALUE_ARRAYS feature is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        result = mapper.readValue(\"[\" + value.toString() + \"]\", BigInteger.class);\n+        assertEquals(value, result);\n+        \n+        try {\n+            mapper.readValue(\"[\" + value.toString() + \",\" + value.toString() + \"]\", BigInteger.class);\n+            fail(\"Exception was not thrown when attempting to read a muti value array of BigInteger when UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }        \n     }\n \n     public void testUUID() throws Exception\n     {\n+        final ObjectMapper mapper = objectMapper();\n+        \n         final String NULL_UUID = \"00000000-0000-0000-0000-000000000000\";\n         // first, couple of generated UUIDs:\n         for (String value : new String[] {\n                 \"82994ac2-7b23-49f2-8cc5-e24cf6ed77be\",\n                 \"00000007-0000-0000-0000-000000000000\"\n         }) {\n+            \n+            mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+            \n             UUID uuid = UUID.fromString(value);\n             assertEquals(uuid,\n-                    MAPPER.readValue(quote(value), UUID.class));\n+                    mapper.readValue(quote(value), UUID.class));\n+            \n+            try {\n+                mapper.readValue(\"[\" + quote(value) + \"]\", UUID.class);\n+                fail(\"Exception was not thrown when UNWRAP_SINGLE_VALUE_ARRAYS is disabled and attempted to read a single value array as a single element\");\n+            } catch (JsonMappingException exp) {\n+                //Exception thrown successfully\n+            }\n+            \n+            mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+            \n+            assertEquals(uuid,\n+                    mapper.readValue(\"[\" + quote(value) + \"]\", UUID.class));\n+            \n+            try {\n+                mapper.readValue(\"[\" + quote(value) + \",\" + quote(value) + \"]\", UUID.class);\n+                fail(\"Exception was not thrown when UNWRAP_SINGLE_VALUE_ARRAYS is enabled and attempted to read a multi value array as a single element\");\n+            } catch (JsonMappingException exp) {\n+                //Exception thrown successfully\n+            }\n         }\n         // then use templating; note that these are not exactly valid UUIDs\n         // wrt spec (type bits etc), but JDK UUID should deal ok\n         for (int i = 0; i < chars.length(); ++i) {\n             String value = TEMPL.replace('0', chars.charAt(i));\n             assertEquals(UUID.fromString(value).toString(),\n-                    MAPPER.readValue(quote(value), UUID.class).toString());\n+                    mapper.readValue(quote(value), UUID.class).toString());\n         }\n \n         // also: see if base64 encoding works as expected\n         String base64 = Base64Variants.getDefaultVariant().encode(new byte[16]);\n         assertEquals(UUID.fromString(NULL_UUID),\n-                MAPPER.readValue(quote(base64), UUID.class));\n+                mapper.readValue(quote(base64), UUID.class));\n     }\n \n     public void testUUIDAux() throws Exception", "timestamp": 1389322467, "metainfo": ""}