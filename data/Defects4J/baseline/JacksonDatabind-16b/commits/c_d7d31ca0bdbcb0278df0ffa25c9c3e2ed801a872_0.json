{"sha": "d7d31ca0bdbcb0278df0ffa25c9c3e2ed801a872", "log": "Minor improvement to handling of custom value instantiator, for delegating creator", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n import com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;\n import com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer;\n import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n \n         }\n         JsonDeserializer<?> vd = _valueDeserializer;\n         // #125: May have a content converter\n-        vd = findConvertingContentDeserializer(ctxt, property, vd);\n+        if (property != null) {\n+            vd = findConvertingContentDeserializer(ctxt, property, vd);\n+        }\n         final JavaType vt = _mapType.getContentType();\n         if (vd == null) {\n             vd = ctxt.findContextualValueDeserializer(vt, property);\n         HashSet<String> ignored = _ignorableProperties;\n         AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n         if (intr != null && property != null) {\n-            String[] moreToIgnore = intr.findPropertiesToIgnore(property.getMember());\n-            if (moreToIgnore != null) {\n-                ignored = (ignored == null) ? new HashSet<String>() : new HashSet<String>(ignored);\n-                for (String str : moreToIgnore) {\n-                    ignored.add(str);\n+            AnnotatedMember member = property.getMember();\n+            if (member != null) {\n+                String[] moreToIgnore = intr.findPropertiesToIgnore(member);\n+                if (moreToIgnore != null) {\n+                    ignored = (ignored == null) ? new HashSet<String>() : new HashSet<String>(ignored);\n+                    for (String str : moreToIgnore) {\n+                        ignored.add(str);\n+                    }\n                 }\n             }\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n import com.fasterxml.jackson.core.io.NumberInput;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.Converter;\n     {\n         final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n         if (intr != null && prop != null) {\n-            Object convDef = intr.findDeserializationContentConverter(prop.getMember());\n-            if (convDef != null) {\n-                Converter<Object,Object> conv = ctxt.converterInstance(prop.getMember(), convDef);\n-                JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());\n-                if (existingDeserializer == null) {\n-                    existingDeserializer = ctxt.findContextualValueDeserializer(delegateType, prop);\n-                }\n-                return new StdDelegatingDeserializer<Object>(conv, delegateType, existingDeserializer);\n+            AnnotatedMember member = prop.getMember();\n+            if (member != null) {\n+                Object convDef = intr.findDeserializationContentConverter(member);\n+                if (convDef != null) {\n+                    Converter<Object,Object> conv = ctxt.converterInstance(prop.getMember(), convDef);\n+                    JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());\n+                    if (existingDeserializer == null) {\n+                        existingDeserializer = ctxt.findContextualValueDeserializer(delegateType, prop);\n+                    }\n+                    return new StdDelegatingDeserializer<Object>(conv, delegateType, existingDeserializer);\n+                }\n             }\n         }\n         return existingDeserializer;\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java\n package com.fasterxml.jackson.databind.creators;\n \n+import java.io.IOException;\n import java.util.*;\n \n import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonValueInstantiator;\n import com.fasterxml.jackson.databind.deser.*;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n     {\n         @Override\n         public String getValueTypeDesc() {\n-            return MyMap.class.getName();\n+            return AnnotatedBean.class.getName();\n         }\n         \n         @Override\n             this.addValueInstantiator(cls, inst);\n         }\n     }\n-    \n+\n+    @JsonValueInstantiator(AnnotatedBeanDelegatingInstantiator.class)\n+    static class AnnotatedBeanDelegating {\n+        protected final Object value;\n+\n+        public AnnotatedBeanDelegating(Object v, boolean bogus) {\n+            value = v;\n+        }\n+    }\n+\n+    static class AnnotatedBeanDelegatingInstantiator extends InstantiatorBase\n+    {\n+        @Override\n+        public String getValueTypeDesc() {\n+            return AnnotatedBeanDelegating.class.getName();\n+        }\n+        \n+        @Override\n+        public boolean canCreateUsingDelegate() { return true; }\n+\n+        @Override\n+        public JavaType getDelegateType(DeserializationConfig config) {\n+            return config.constructType(Map.class);\n+        }\n+\n+        @Override\n+        public AnnotatedWithParams getDelegateCreator() {\n+            return null;\n+        }\n+        \n+        @Override\n+        public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) throws IOException {\n+            return new AnnotatedBeanDelegating(delegate, false);\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Unit tests for default creators\n     /**********************************************************\n      */\n \n+    private final ObjectMapper MAPPER = objectMapper();\n+    \n     public void testCustomBeanInstantiator() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         assertNotNull(result);\n         assertEquals(1, result.size());\n         assertEquals(Integer.valueOf(123), result.values().iterator().next());\n+    }\n+\n+    public void testCustomDelegateInstantiator() throws Exception\n+    {\n+        AnnotatedBeanDelegating value = MAPPER.readValue(\"{\\\"a\\\":3}\", AnnotatedBeanDelegating.class);\n+        assertNotNull(value);\n+        Object ob = value.value;\n+        assertNotNull(ob);\n+        assertTrue(ob instanceof Map);\n     }\n \n     /*\n \n     public void testEmptyBean() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        AnnotatedBean bean = mapper.readValue(\"{}\", AnnotatedBean.class);\n+        AnnotatedBean bean = MAPPER.readValue(\"{}\", AnnotatedBean.class);\n         assertNotNull(bean);\n         assertEquals(\"foo\", bean.a);\n         assertEquals(3, bean.b);", "timestamp": 1424990577, "metainfo": ""}