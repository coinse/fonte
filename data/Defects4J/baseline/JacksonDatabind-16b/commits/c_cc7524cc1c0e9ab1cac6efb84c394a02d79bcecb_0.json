{"sha": "cc7524cc1c0e9ab1cac6efb84c394a02d79bcecb", "log": "Implemented #307", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n                 ser = new EnumMapSerializer(type.getContentType(), staticTyping, enums,\n                     elementTypeSerializer, elementValueSerializer);\n             } else {\n+                Object filterId = findFilterId(config, beanDesc);\n                 ser = MapSerializer.construct(config.getAnnotationIntrospector().findPropertiesToIgnore(beanDesc.getClassInfo()),\n                     type, staticTyping, elementTypeSerializer,\n-                    keySerializer, elementValueSerializer);\n+                    keySerializer, elementValueSerializer, filterId);\n             }\n         }\n         // [Issue#120]: Allow post-processing\n     }\n \n     /**\n+     * Method called to find filter that is configured to be used with bean\n+     * serializer being built, if any.\n+     */\n+    protected Object findFilterId(SerializationConfig config, BeanDescription beanDesc)\n+    {\n+        return config.getAnnotationIntrospector().findFilterId((Annotated)beanDesc.getClassInfo());\n+    }\n+    \n+    /**\n      * @deprecated Since 2.1: use method without 'property'\n      */\n     @Deprecated\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         builder.setFilterId(findFilterId(config, beanDesc));\n         \n         AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-        if (anyGetter != null) { // since 1.6\n+        if (anyGetter != null) {\n             if (config.canOverrideAccessModifiers()) {\n                 anyGetter.fixAccess();\n             }\n             JavaType valueType = type.getContentType();\n             TypeSerializer typeSer = createTypeSerializer(config, valueType);\n             // last 2 nulls; don't know key, value serializers (yet)\n+            // TODO: support '@JsonIgnoreProperties' with any setter?\n             MapSerializer mapSer = MapSerializer.construct(/* ignored props*/ null, type, staticTyping,\n-                    typeSer, null, null);\n+                    typeSer, null, null, /*filterId*/ null);\n             // TODO: can we find full PropertyName?\n             PropertyName name = new PropertyName(anyGetter.getName());\n             BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null,\n     protected BeanSerializerBuilder constructBeanSerializerBuilder(BeanDescription beanDesc) {\n         return new BeanSerializerBuilder(beanDesc);\n     }\n-\n-    /**\n-     * Method called to find filter that is configured to be used with bean\n-     * serializer being built, if any.\n-     */\n-    protected Object findFilterId(SerializationConfig config, BeanDescription beanDesc)\n-    {\n-        return config.getAnnotationIntrospector().findFilterId((Annotated)beanDesc.getClassInfo());\n-    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor;\n         return new MapSerializer(this, property, keySerializer, valueSerializer, ignored);\n     }\n \n+    /**\n+     * @since 2.3\n+     */\n     public MapSerializer withFilterId(Object filterId) {\n         return (_filterId == filterId) ? this : new MapSerializer(this, filterId);\n     }\n-    \n+\n+    /**\n+     * @deprecated Since 2.3 use the method that takes `filterId`\n+     */\n+    @Deprecated\n     public static MapSerializer construct(String[] ignoredList, JavaType mapType,\n             boolean staticValueType, TypeSerializer vts,\n             JsonSerializer<Object> keySerializer, JsonSerializer<Object> valueSerializer)\n+    {\n+        return construct(ignoredList, mapType, staticValueType, vts,\n+                keySerializer, valueSerializer);\n+    }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    public static MapSerializer construct(String[] ignoredList, JavaType mapType,\n+            boolean staticValueType, TypeSerializer vts,\n+            JsonSerializer<Object> keySerializer, JsonSerializer<Object> valueSerializer,\n+            Object filterId)\n     {\n         HashSet<String> ignoredEntries = toSet(ignoredList);\n         JavaType keyType, valueType;\n                 staticValueType = false;\n             }\n         }\n-        return new MapSerializer(ignoredEntries, keyType, valueType, staticValueType, vts,\n+        MapSerializer ser = new MapSerializer(ignoredEntries, keyType, valueType, staticValueType, vts,\n                 keySerializer, valueSerializer);\n+        if (filterId != null) {\n+            ser = ser.withFilterId(filterId);\n+        }\n+        return ser;\n     }\n \n     private static HashSet<String> toSet(String[] ignoredEntries) {\n--- a/src/test/java/com/fasterxml/jackson/databind/filter/TestMapFiltering.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/filter/TestMapFiltering.java\n public class TestMapFiltering extends BaseMapTest\n {\n     @SuppressWarnings(\"serial\")\n+    @JsonFilter(\"filterForMaps\")\n     static class FilteredBean extends LinkedHashMap<String,Integer> { }\n     \n     static class MapBean {\n         FilteredBean bean = new FilteredBean();\n         bean.put(\"a\", 4);\n         bean.put(\"b\", 3);\n-        FilterProvider prov = new SimpleFilterProvider().addFilter(\"filterX\",\n+        FilterProvider prov = new SimpleFilterProvider().addFilter(\"filterForMaps\",\n                 SimpleBeanPropertyFilter.filterOutAllExcept(\"b\"));\n         assertEquals(aposToQuotes(\"{'b':3}\"),\n                 MAPPER.writer(prov).writeValueAsString(bean));", "timestamp": 1382226377, "metainfo": ""}