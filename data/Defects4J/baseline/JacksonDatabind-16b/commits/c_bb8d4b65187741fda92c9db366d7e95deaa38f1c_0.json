{"sha": "bb8d4b65187741fda92c9db366d7e95deaa38f1c", "log": "cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n import java.math.BigInteger;\n import java.net.InetAddress;\n import java.util.*;\n-\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n         _arraySerializers.put(float[].class.getName(), new StdArraySerializers.FloatArraySerializer());\n         _arraySerializers.put(double[].class.getName(), new StdArraySerializers.DoubleArraySerializer());\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* State\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Configuration settings for this factory; immutable instance (just like this\n+     * factory), new version created via copy-constructor (fluent-style)\n+     */\n+    protected final Config _factoryConfig;\n     \n     /**\n      * Helper object used to deal with serializers for optional JDK types (like ones\n      * but make it protected so that no non-singleton instances of\n      * the class will be instantiated.\n      */\n-    protected BasicSerializerFactory() { }\n+    protected BasicSerializerFactory(Config config) {\n+        _factoryConfig = config;\n+    }\n \n     /*\n     /**********************************************************\n \n     // Implemented by sub-classes\n     @Override\n-    public abstract JsonSerializer<Object> createSerializer(SerializationConfig config, JavaType type,\n-            BeanProperty property)\n+    public abstract JsonSerializer<Object> createSerializer(SerializationConfig config,\n+            JavaType type, BeanProperty property)\n         throws JsonMappingException;\n \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public JsonSerializer<Object> createKeySerializer(SerializationConfig config,\n+            JavaType type, BeanProperty property)\n+    {\n+        // Minor optimization: to avoid constructing beanDesc, bail out if none registered\n+        if (!_factoryConfig.hasKeySerializers()) {\n+            return null;\n+        }\n+        \n+        // We should not need any member method info; at most class annotations for Map type\n+        BasicBeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n+        JsonSerializer<?> ser = null;\n+        \n+        // Only thing we have here are module-provided key serializers:\n+        for (Serializers serializers : _factoryConfig.keySerializers()) {\n+            ser = serializers.findSerializer(config, type, beanDesc, property);\n+            if (ser != null) {\n+                break;\n+            }\n+        }\n+        return (JsonSerializer<Object>) ser;\n+    }\n+    \n     /**\n      * Method called to construct a type serializer for values with given declared\n      * base type. This is called for values other than those of bean property\n      * types.\n      */\n     @Override\n-    public TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType,\n-            BeanProperty property)\n+    public TypeSerializer createTypeSerializer(SerializationConfig config,\n+            JavaType baseType, BeanProperty property)\n     {\n         BasicBeanDescription bean = config.introspectClassAnnotations(baseType.getRawClass());\n         AnnotatedClass ac = bean.getClassInfo();\n         }\n         return (b == null) ? null : b.buildTypeSerializer(config, baseType, subtypes, property);\n     }\n-\n     \n     /*\n     /**********************************************************\n      * Method that will use fast lookup (and identity comparison) methods to\n      * see if we know serializer to use for given type.\n      */\n-    public final JsonSerializer<?> findSerializerByLookup(JavaType type, SerializationConfig config,\n-            BasicBeanDescription beanDesc, BeanProperty property,\n+    protected final JsonSerializer<?> findSerializerByLookup(JavaType type,\n+            SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping)\n     {\n         Class<?> raw = type.getRawClass();\n      * This does not include \"secondary\" interfaces, but\n      * mostly concrete or abstract base classes.\n      */\n-    public final JsonSerializer<?> findSerializerByPrimaryType(JavaType type, SerializationConfig config,\n-            BasicBeanDescription beanDesc, BeanProperty property,\n+    protected final JsonSerializer<?> findSerializerByPrimaryType(JavaType type,\n+            SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping)\n         throws JsonMappingException\n     {\n      * bean classes may implement {@link Iterable}, but their main\n      * function is usually something else. The reason for\n      */\n-    public final JsonSerializer<?> findSerializerByAddonType(SerializationConfig config, JavaType javaType,\n+    protected final JsonSerializer<?> findSerializerByAddonType(SerializationConfig config, JavaType javaType,\n             BasicBeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping)\n         throws JsonMappingException\n      * Helper method that handles configuration details when constructing serializers for\n      * <code>Object[]</code> (and subtypes, except for String).\n      */\n-    protected JsonSerializer<?> buildArraySerializer(SerializationConfig config, ArrayType type,\n-            BasicBeanDescription beanDesc, BeanProperty property,\n+    protected JsonSerializer<?> buildArraySerializer(SerializationConfig config,\n+            ArrayType type, BasicBeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n         throws JsonMappingException\n     /**********************************************************\n      */\n \n-    protected JsonSerializer<?> buildIteratorSerializer(SerializationConfig config, JavaType type,\n-            BasicBeanDescription beanDesc, BeanProperty property,\n+    protected JsonSerializer<?> buildIteratorSerializer(SerializationConfig config,\n+            JavaType type, BasicBeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping)\n         throws JsonMappingException\n     {\n                 usesStaticTyping(config, beanDesc, vts, property), vts, property);\n     }\n     \n-    protected JsonSerializer<?> buildIterableSerializer(SerializationConfig config, JavaType type,\n-            BasicBeanDescription beanDesc, BeanProperty property,\n+    protected JsonSerializer<?> buildIterableSerializer(SerializationConfig config,\n+            JavaType type, BasicBeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping)\n         throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n      */\n     public final static BeanSerializerFactory instance = new BeanSerializerFactory(null);\n \n-    /**\n-     * Configuration settings for this factory; immutable instance (just like this\n-     * factory), new version created via copy-constructor (fluent-style)\n-     */\n-    protected final Config _factoryConfig;\n-\n     /*\n     /**********************************************************\n     /* Config class implementation\n      */\n     protected BeanSerializerFactory(Config config)\n     {\n-        if (config == null) {\n-            config = new ConfigImpl();\n-        }\n-        _factoryConfig = config;\n+        super((config == null) ? new ConfigImpl() : config);\n     }\n \n     @Override public Config getConfig() { return _factoryConfig; }\n         }\n         return (JsonSerializer<Object>) ser;\n     }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public JsonSerializer<Object> createKeySerializer(SerializationConfig config, JavaType type,\n-            BeanProperty property)\n-    {\n-        // Minor optimization: to avoid constructing beanDesc, bail out if none registered\n-        if (!_factoryConfig.hasKeySerializers()) {\n-            return null;\n-        }\n-        \n-        // We should not need any member method info; at most class annotations for Map type\n-        BasicBeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n-        JsonSerializer<?> ser = null;\n-        \n-        // Only thing we have here are module-provided key serializers:\n-        for (Serializers serializers : _factoryConfig.keySerializers()) {\n-            ser = serializers.findSerializer(config, type, beanDesc, property);\n-            if (ser != null) {\n-                break;\n-            }\n-        }\n-        return (JsonSerializer<Object>) ser;\n-    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java\n         \n         public abstract Iterable<BeanSerializerModifier> serializerModifiers();\n     }\n-\n+    \n     /*\n     /**********************************************************\n-    /* Additional configuration\n+    /* Additional configuration methods\n     /**********************************************************\n      */\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java\n     /**********************************************************\n      */\n \n-    @SuppressWarnings(\"unchecked\")\n     @Override\n     public JsonSerializer<Object> findKeySerializer(JavaType keyType, BeanProperty property)\n         throws JsonMappingException\n             }\n         }\n         // 25-Feb-2011, tatu: As per [JACKSON-519], need to ensure contextuality works here, too\n-        if (ser instanceof ContextualSerializer<?>) {\n-            ContextualSerializer<?> contextual = (ContextualSerializer<?>) ser;\n-            ser = (JsonSerializer<Object>)contextual.createContextual(_config, property);\n-        }\n-        return ser;\n+        return _handleContextualResolvable(ser, property);\n     }\n \n     @Override", "timestamp": 1326670144, "metainfo": ""}