{"sha": "9fb0c8df13778d37a0b6b2e1de2b513950c21224", "log": "Complete #125 implementation", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.impl.*;\n import com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase;\n+import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n+import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;\n import com.fasterxml.jackson.databind.type.ClassKey;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.*;\n \n /**\n             SettableBeanProperty prop = origProp;\n             // May already have deserializer from annotations, if so, skip:\n             if (!prop.hasValueDeserializer()) {\n-                prop = prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n+                // [Issue#125]: allow use of converters\n+                JsonDeserializer<?> deser = findConvertingDeserializer(ctxt, prop);\n+                if (deser == null) {\n+                    deser = findDeserializer(ctxt, prop.getType(), prop);\n+                }\n+                prop = prop.withValueDeserializer(deser);\n             } else { // may need contextual version\n                 JsonDeserializer<Object> deser = prop.getValueDeserializer();\n                 if (deser instanceof ContextualDeserializer) {\n         _vanillaProcessing = _vanillaProcessing && !_nonStandardCreation;\n     }\n \n+    /**\n+     * Helper method that can be used to see if specified property is annotated\n+     * to indicate use of a converter for property value (in case of container types,\n+     * it is container type itself, not key or content type).\n+     * \n+     * @since 2.2\n+     */\n+    protected JsonDeserializer<Object> findConvertingDeserializer(DeserializationContext ctxt,\n+            SettableBeanProperty prop)\n+        throws JsonMappingException\n+    {\n+        final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n+        if (intr != null) {\n+            Object convDef = intr.findDeserializationConverter(prop.getMember());\n+            if (convDef != null) {\n+                Converter<Object,Object> conv = ctxt.converterInstance(prop.getMember(), convDef);\n+                TypeFactory tf = ctxt.getTypeFactory();\n+                JavaType converterType = tf.constructType(conv.getClass());\n+                JavaType[] params = tf.findTypeParameters(converterType, Converter.class);\n+                if (params == null || params.length != 2) {\n+                    throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n+                            +converterType);\n+                }\n+                JavaType delegateType = params[0];\n+                JsonDeserializer<?> ser = ctxt.findContextualValueDeserializer(delegateType, prop);\n+                return new StdDelegatingDeserializer<Object>(conv, delegateType, ser);\n+            }\n+        }\n+        return null;\n+    }\n+    \n     /**\n      * Although most of post-processing is done in resolve(), we only get\n      * access to referring property's annotations here; and this is needed\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n                 continue;\n             }\n             // [Issue#124]: allow use of converters\n-            JsonSerializer<Object> ser = findConvertingSerializer(provider, prop);  \n+            JsonSerializer<Object> ser = findConvertingSerializer(provider, prop);\n             if (ser == null) {\n                 // Was the serialization type hard-coded? If so, use it\n                 JavaType type = prop.getSerializationType();", "timestamp": 1362276252, "metainfo": ""}