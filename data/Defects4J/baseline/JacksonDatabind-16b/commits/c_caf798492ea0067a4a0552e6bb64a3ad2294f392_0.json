{"sha": "caf798492ea0067a4a0552e6bb64a3ad2294f392", "log": "Add support for-reader (re)configuration of JsonParser.Features", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n  * \"fluent factory\" methods.\n  * Note also that unlike with Jackson 1, these instances can not be\n  * assigned to {@link ObjectMapper}; in fact, application code should\n- * rarely interact directly with these instance (unlike core Jackson code)\n+ * rarely interact directly with these instances.\n  */\n public final class DeserializationConfig\n     extends MapperConfigBase<DeserializationFeature, DeserializationConfig>\n     implements java.io.Serializable // since 2.1\n {\n-    // for 2.1.0\n-    private static final long serialVersionUID = -4227480407273773599L;\n-\n-    /**\n-     * Set of features enabled; actual type (kind of features)\n-     * depends on sub-classes.\n+    // since 2.5\n+    private static final long serialVersionUID = 1;\n+\n+    /**\n+     * Set of {@link DeserializationFeature}s enabled.\n      */\n     protected final int _deserFeatures;\n \n      * Factory used for constructing {@link com.fasterxml.jackson.databind.JsonNode} instances.\n      */\n     protected final JsonNodeFactory _nodeFactory;\n-    \n+\n+    /**\n+     * States of {@link JsonParser.Feature}s to enable/disable.\n+     */\n+    protected final int _parserFeatures;\n+\n+    /**\n+     * Bitflag of {@link JsonParser.Feature}s to enable/disable\n+     */\n+    protected final int _parserFeatureMask;\n+\n     /*\n     /**********************************************************\n     /* Life-cycle, constructors\n         _deserFeatures = collectFeatureDefaults(DeserializationFeature.class);\n         _nodeFactory = JsonNodeFactory.instance;\n         _problemHandlers = null;\n+        _parserFeatures = 0;\n+        _parserFeatureMask = 0;\n     }\n \n     /**\n         _deserFeatures = src._deserFeatures;\n         _nodeFactory = src._nodeFactory;\n         _problemHandlers = src._problemHandlers;\n+        _parserFeatures = src._parserFeatures;\n+        _parserFeatureMask = src._parserFeatureMask;\n     }\n \n     private DeserializationConfig(DeserializationConfig src,\n-            int mapperFeatures, int deserFeatures)\n+            int mapperFeatures, int deserFeatures,\n+            int parserFeatures, int parserFeatureMask)\n     {\n         super(src, mapperFeatures);\n         _deserFeatures = deserFeatures;\n         _nodeFactory = src._nodeFactory;\n         _problemHandlers = src._problemHandlers;\n+        _parserFeatures = parserFeatures;\n+        _parserFeatureMask = parserFeatureMask;\n     }\n     \n     private DeserializationConfig(DeserializationConfig src, BaseSettings base)\n         _deserFeatures = src._deserFeatures;\n         _nodeFactory = src._nodeFactory;\n         _problemHandlers = src._problemHandlers;\n+        _parserFeatures = src._parserFeatures;\n+        _parserFeatureMask = src._parserFeatureMask;\n     }\n     \n     private DeserializationConfig(DeserializationConfig src, JsonNodeFactory f)\n         _deserFeatures = src._deserFeatures;\n         _problemHandlers = src._problemHandlers;\n         _nodeFactory = f;\n+        _parserFeatures = src._parserFeatures;\n+        _parserFeatureMask = src._parserFeatureMask;\n     }\n \n     private DeserializationConfig(DeserializationConfig src,\n         _deserFeatures = src._deserFeatures;\n         _problemHandlers = problemHandlers;\n         _nodeFactory = src._nodeFactory;\n+        _parserFeatures = src._parserFeatures;\n+        _parserFeatureMask = src._parserFeatureMask;\n     }\n \n     private DeserializationConfig(DeserializationConfig src, String rootName)\n         _deserFeatures = src._deserFeatures;\n         _problemHandlers = src._problemHandlers;\n         _nodeFactory = src._nodeFactory;\n+        _parserFeatures = src._parserFeatures;\n+        _parserFeatureMask = src._parserFeatureMask;\n     }\n \n     private DeserializationConfig(DeserializationConfig src, Class<?> view)\n         _deserFeatures = src._deserFeatures;\n         _problemHandlers = src._problemHandlers;\n         _nodeFactory = src._nodeFactory;\n+        _parserFeatures = src._parserFeatures;\n+        _parserFeatureMask = src._parserFeatureMask;\n     }\n \n     /**\n         _deserFeatures = src._deserFeatures;\n         _problemHandlers = src._problemHandlers;\n         _nodeFactory = src._nodeFactory;\n+        _parserFeatures = src._parserFeatures;\n+        _parserFeatureMask = src._parserFeatureMask;\n     }\n \n     /**\n         _deserFeatures = src._deserFeatures;\n         _problemHandlers = src._problemHandlers;\n         _nodeFactory = src._nodeFactory;\n+        _parserFeatures = src._parserFeatures;\n+        _parserFeatureMask = src._parserFeatureMask;\n     }\n     \n     // for unit tests only:\n             newMapperFlags |= f.getMask();\n         }\n         return (newMapperFlags == _mapperFeatures) ? this :\n-            new DeserializationConfig(this, newMapperFlags, _deserFeatures);\n+            new DeserializationConfig(this, newMapperFlags, _deserFeatures,\n+                    _parserFeatures, _parserFeatureMask);\n+                    \n     }\n \n     @Override\n              newMapperFlags &= ~f.getMask();\n         }\n         return (newMapperFlags == _mapperFeatures) ? this :\n-            new DeserializationConfig(this, newMapperFlags, _deserFeatures);\n+            new DeserializationConfig(this, newMapperFlags, _deserFeatures,\n+                    _parserFeatures, _parserFeatureMask);\n     }\n \n     @Override\n             newMapperFlags = _mapperFeatures & ~feature.getMask();\n         }\n         return (newMapperFlags == _mapperFeatures) ? this :\n-            new DeserializationConfig(this, newMapperFlags, _deserFeatures);\n+            new DeserializationConfig(this, newMapperFlags, _deserFeatures,\n+                    _parserFeatures, _parserFeatureMask);\n     }\n \n     @Override\n     private final DeserializationConfig _withBase(BaseSettings newBase) {\n         return (_base == newBase) ? this : new DeserializationConfig(this, newBase);\n     }\n-    \n+\n+    /*\n+    /**********************************************************\n+    /* Life-cycle, DeserializationFeature-based factory methods\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features enabled.\n+     */\n+    public DeserializationConfig with(DeserializationFeature feature)\n+    {\n+        int newDeserFeatures = (_deserFeatures | feature.getMask());\n+        return (newDeserFeatures == _deserFeatures) ? this :\n+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n+                    _parserFeatures, _parserFeatureMask);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features enabled.\n+     */\n+    public DeserializationConfig with(DeserializationFeature first,\n+            DeserializationFeature... features)\n+    {\n+        int newDeserFeatures = _deserFeatures | first.getMask();\n+        for (DeserializationFeature f : features) {\n+            newDeserFeatures |= f.getMask();\n+        }\n+        return (newDeserFeatures == _deserFeatures) ? this :\n+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n+                    _parserFeatures, _parserFeatureMask);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features enabled.\n+     */\n+    public DeserializationConfig withFeatures(DeserializationFeature... features)\n+    {\n+        int newDeserFeatures = _deserFeatures;\n+        for (DeserializationFeature f : features) {\n+            newDeserFeatures |= f.getMask();\n+        }\n+        return (newDeserFeatures == _deserFeatures) ? this :\n+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n+                    _parserFeatures, _parserFeatureMask);\n+    }\n+    \n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified feature disabled.\n+     */\n+    public DeserializationConfig without(DeserializationFeature feature)\n+    {\n+        int newDeserFeatures = _deserFeatures & ~feature.getMask();\n+        return (newDeserFeatures == _deserFeatures) ? this :\n+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n+                    _parserFeatures, _parserFeatureMask);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features disabled.\n+     */\n+    public DeserializationConfig without(DeserializationFeature first,\n+            DeserializationFeature... features)\n+    {\n+        int newDeserFeatures = _deserFeatures & ~first.getMask();\n+        for (DeserializationFeature f : features) {\n+            newDeserFeatures &= ~f.getMask();\n+        }\n+        return (newDeserFeatures == _deserFeatures) ? this :\n+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n+                    _parserFeatures, _parserFeatureMask);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features disabled.\n+     */\n+    public DeserializationConfig withoutFeatures(DeserializationFeature... features)\n+    {\n+        int newDeserFeatures = _deserFeatures;\n+        for (DeserializationFeature f : features) {\n+            newDeserFeatures &= ~f.getMask();\n+        }\n+        return (newDeserFeatures == _deserFeatures) ? this :\n+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,\n+                    _parserFeatures, _parserFeatureMask);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Life-cycle, JsonParser.Feature-based factory methods\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features enabled.\n+     */\n+    public DeserializationConfig with(JsonParser.Feature feature)\n+    {\n+        int newSet = _parserFeatures | feature.getMask();\n+        int newMask = _parserFeatureMask | feature.getMask();\n+        return ((_parserFeatures == newSet) && (_parserFeatureMask == newMask)) ? this :\n+            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n+                    newSet, newMask);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features enabled.\n+     */\n+    public DeserializationConfig withFeatures(JsonParser.Feature... features)\n+    {\n+        int newSet = _parserFeatures;\n+        int newMask = _parserFeatureMask;\n+        for (JsonParser.Feature f : features) {\n+            int mask = f.getMask();\n+            newSet |= mask;\n+            newMask |= mask;\n+        }\n+        return ((_parserFeatures == newSet) && (_parserFeatureMask == newMask)) ? this :\n+            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n+                    newSet, newMask);\n+    }\n+    \n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified feature disabled.\n+     */\n+    public DeserializationConfig without(JsonParser.Feature feature)\n+    {\n+        int newSet = _parserFeatureMask & ~feature.getMask();\n+        int newMask = _parserFeatures | feature.getMask();\n+        return ((_parserFeatures == newSet) && (_parserFeatureMask == newMask)) ? this :\n+            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n+                    newSet, newMask);\n+    }\n+\n+    /**\n+     * Fluent factory method that will construct and return a new configuration\n+     * object instance with specified features disabled.\n+     */\n+    public DeserializationConfig withoutFeatures(JsonParser.Feature... features)\n+    {\n+        int newSet = _parserFeatures;\n+        int newMask = _parserFeatureMask;\n+        for (JsonParser.Feature f : features) {\n+            int mask = f.getMask();\n+            newSet &= ~mask;\n+            newMask |= mask;\n+        }\n+        return ((_parserFeatures == newSet) && (_parserFeatureMask == newMask)) ? this :\n+            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n+                    newSet, newMask);\n+    }    \n+\n     /*\n     /**********************************************************\n     /* Life-cycle, deserialization-specific factory methods\n                 (LinkedNode<DeserializationProblemHandler>) null);\n     }\n \n-    /**\n-     * Fluent factory method that will construct and return a new configuration\n-     * object instance with specified features enabled.\n-     */\n-    public DeserializationConfig with(DeserializationFeature feature)\n-    {\n-        int newDeserFeatures = (_deserFeatures | feature.getMask());\n-        return (newDeserFeatures == _deserFeatures) ? this :\n-            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures);\n-    }\n-\n-    /**\n-     * Fluent factory method that will construct and return a new configuration\n-     * object instance with specified features enabled.\n-     */\n-    public DeserializationConfig with(DeserializationFeature first,\n-            DeserializationFeature... features)\n-    {\n-        int newDeserFeatures = _deserFeatures | first.getMask();\n-        for (DeserializationFeature f : features) {\n-            newDeserFeatures |= f.getMask();\n-        }\n-        return (newDeserFeatures == _deserFeatures) ? this :\n-            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures);\n-    }\n-\n-    /**\n-     * Fluent factory method that will construct and return a new configuration\n-     * object instance with specified features enabled.\n-     */\n-    public DeserializationConfig withFeatures(DeserializationFeature... features)\n-    {\n-        int newDeserFeatures = _deserFeatures;\n-        for (DeserializationFeature f : features) {\n-            newDeserFeatures |= f.getMask();\n-        }\n-        return (newDeserFeatures == _deserFeatures) ? this :\n-            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures);\n-    }\n-    \n-    /**\n-     * Fluent factory method that will construct and return a new configuration\n-     * object instance with specified feature disabled.\n-     */\n-    public DeserializationConfig without(DeserializationFeature feature)\n-    {\n-        int newDeserFeatures = _deserFeatures & ~feature.getMask();\n-        return (newDeserFeatures == _deserFeatures) ? this :\n-            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures);\n-    }\n-\n-    /**\n-     * Fluent factory method that will construct and return a new configuration\n-     * object instance with specified features disabled.\n-     */\n-    public DeserializationConfig without(DeserializationFeature first,\n-            DeserializationFeature... features)\n-    {\n-        int newDeserFeatures = _deserFeatures & ~first.getMask();\n-        for (DeserializationFeature f : features) {\n-            newDeserFeatures &= ~f.getMask();\n-        }\n-        return (newDeserFeatures == _deserFeatures) ? this :\n-            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures);\n-    }\n-\n-    /**\n-     * Fluent factory method that will construct and return a new configuration\n-     * object instance with specified features disabled.\n-     */\n-    public DeserializationConfig withoutFeatures(DeserializationFeature... features)\n-    {\n-        int newDeserFeatures = _deserFeatures;\n-        for (DeserializationFeature f : features) {\n-            newDeserFeatures &= ~f.getMask();\n-        }\n-        return (newDeserFeatures == _deserFeatures) ? this :\n-            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures);\n+    /*\n+    /**********************************************************\n+    /* JsonParser initialization\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method called by {@link ObjectMapper} and {@link ObjectWriter}\n+     * to modify those {@link com.fasterxml.jackson.core.JsonGenerator.Feature} settings\n+     * that have been configured via this config instance.\n+     * \n+     * @since 2.5\n+     */\n+    public void initialize(JsonParser p) {\n+        if (_parserFeatureMask != 0) {\n+            int orig = p.getFeatureMask();\n+            int newFlags = (orig & ~_parserFeatureMask) | _parserFeatures;\n+            if (orig != newFlags) {\n+                p.setFeatureMask(newFlags);\n+            }\n+        }\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n     extends ObjectCodec\n     implements Versioned, java.io.Serializable // since 2.1\n {\n-    private static final long serialVersionUID = -4251443320039569153L;\n+    private static final long serialVersionUID = 1L; // since 2.5\n \n     private final static JavaType JSON_NODE_TYPE = SimpleType.constructUnsafe(JsonNode.class);\n \n         if (_schema != null) {\n             p.setSchema(_schema);\n         }\n+        _config.initialize(p);\n+\n         /* First: must point to a token; if not pointing to one, advance.\n          * This occurs before first read from JsonParser, as well as\n          * after clearing of current token.\n             p.setSchema(_schema);\n         }\n     }\n-    \n-    /*\n-    /**********************************************************\n-    /* Life-cycle, fluent factory methods\n-    /**********************************************************\n-     */\n-\n-    public ObjectReader with(DeserializationConfig config) {\n-        return _with(config);\n-    }    \n-    \n+\n+    /*\n+    /**********************************************************\n+    /* Life-cycle, fluent factory methods for DeserializationFeatures\n+    /**********************************************************\n+     */\n+\n     /**\n      * Method for constructing a new reader instance that is configured\n      * with specified feature enabled.\n     public ObjectReader withoutFeatures(DeserializationFeature... features) {\n         return _with(_config.withoutFeatures(features));\n     }    \n-    \n+\n+    /*\n+    /**********************************************************\n+    /* Life-cycle, fluent factory methods for JsonParser.Features\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method for constructing a new reader instance that is configured\n+     * with specified feature enabled.\n+     */\n+    public ObjectReader with(JsonParser.Feature feature) {\n+        return _with(_config.with(feature));\n+    }\n+\n+    /**\n+     * Method for constructing a new reader instance that is configured\n+     * with specified features enabled.\n+     */\n+    public ObjectReader withFeatures(JsonParser.Feature... features) {\n+        return _with(_config.withFeatures(features));\n+    }    \n+\n+    /**\n+     * Method for constructing a new reader instance that is configured\n+     * with specified feature disabled.\n+     */\n+    public ObjectReader without(JsonParser.Feature feature) {\n+        return _with(_config.without(feature)); \n+    }\n+\n+    /**\n+     * Method for constructing a new reader instance that is configured\n+     * with specified features disabled.\n+     */\n+    public ObjectReader withoutFeatures(JsonParser.Feature... features) {\n+        return _with(_config.withoutFeatures(features));\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Life-cycle, fluent factory methods, other\n+    /**********************************************************\n+     */\n+\n+    public ObjectReader with(DeserializationConfig config) {\n+        return _with(config);\n+    }    \n+\n     /**\n      * Method for constructing a new instance with configuration that uses\n      * passed {@link InjectableValues} to provide injectable values.\n \n     /*\n     /**********************************************************\n-    /* Overridable factory methods that sub-classes MUST override\n+    /* Overridable factory methods may override\n     /**********************************************************\n      */\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestNumbers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestNumbers.java\n /**\n  * Tests related to [JACKSON-139]\n  */\n-public class TestNumbers\n-    extends BaseMapTest\n+public class TestNumbers extends BaseMapTest\n {\n     /*\n     /**********************************************************************\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestObjectReader.java\n+package com.fasterxml.jackson.databind.deser;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestObjectReader extends BaseMapTest\n+{\n+    final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public void testParserFeatures() throws Exception\n+    {\n+        final String JSON = \"[ /* foo */ 7 ]\";\n+        // default won't accept comments, let's change that:\n+        ObjectReader reader = MAPPER.reader(int[].class)\n+                .with(JsonParser.Feature.ALLOW_COMMENTS);\n+\n+        int[] value = reader.readValue(JSON);\n+        assertNotNull(value);\n+        assertEquals(1, value.length);\n+        assertEquals(7, value[0]);\n+\n+        // but also can go back\n+        try {\n+            reader.without(JsonParser.Feature.ALLOW_COMMENTS).readValue(JSON);\n+            fail(\"Should not have passed\");\n+        } catch (JsonProcessingException e) {\n+            verifyException(e, \"foo\");\n+        }\n+    }\n+\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestObjectWriter.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestObjectWriter.java\n \n import java.util.*;\n \n-\n-import com.fasterxml.jackson.core.PrettyPrinter;\n+import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n \n /**\n public class TestObjectWriter\n     extends BaseMapTest\n {\n+    final ObjectMapper MAPPER = new ObjectMapper();\n+\n     public void testPrettyPrinter() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        ObjectWriter writer = mapper.writer();\n+        ObjectWriter writer = MAPPER.writer();\n         HashMap<String, Integer> data = new HashMap<String,Integer>();\n         data.put(\"a\", 1);\n         \n \n     public void testPrefetch() throws Exception\n     {\n-        ObjectWriter writer = objectWriter();\n+        ObjectWriter writer = MAPPER.writer();\n         assertFalse(writer.hasPrefetchedSerializer());\n-        writer = objectWriter().withType(String.class);\n+        writer = writer.withType(String.class);\n         assertTrue(writer.hasPrefetchedSerializer());\n     }\n } ", "timestamp": 1415423623, "metainfo": ""}