{"sha": "cc9623ef7c2e9d48102558b283d5930eb03e9f73", "log": "Change master to be 2.5.0-SNAPSHOT", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n \n         for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n             int argCount = ctor.getParameterCount();\n-            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n+            boolean isCreator = intr.hasCreatorAnnotation(ctor) || (ctor == propertyCtor);\n+//            boolean isCreator = intr.hasCreatorAnnotation(ctor);\n+            \n             boolean isVisible =  vchecker.isCreatorVisible(ctor);\n             // some single-arg constructors (String, number) are auto-detected\n             if (argCount == 1) {\n             PropertyName name)\n         throws JsonMappingException\n     {\n-        // note: if we do have parameter name, it'll be \"property constructor\":\n+        // note: if we do have EXPLICIT parameter name, it'll be \"property constructor\":\n         AnnotatedParameter param = ctor.getParameter(0);\n         if (name == null) {\n-            name = _findParamName(param, intr);\n+            name = _findExplicitParamName(param, intr);\n         }\n         Object injectId = intr.findInjectableValueId(param);\n     \n         if ((injectId != null) || (name != null && name.hasSimpleName())) { // property-based\n-            // We know there's a name and it's only 1 parameter.\n+            // We know there's EXPLICIT name and it's only 1 parameter.\n             CreatorProperty[] properties = new CreatorProperty[1];\n             properties[0] = constructCreatorProperty(ctxt, beanDesc, name, 0, param, injectId);\n             creators.addPropertyCreator(ctor, properties);\n             // some single-arg factory methods (String, number) are auto-detected\n             if (argCount == 1) {\n                 AnnotatedParameter param = factory.getParameter(0);\n-                PropertyName pn = _findParamName(param, intr);\n+                // NOTE: only consider EXPLICIT names for auto-detection\n+                PropertyName pn = _findExplicitParamName(param, intr);\n                 String name = (pn == null) ? null : pn.getSimpleName();\n                 Object injectId = intr.findInjectableValueId(param);\n \n         }\n         return prop;\n     }\n-\n+    \n     protected PropertyName _findParamName(AnnotatedParameter param, AnnotationIntrospector intr)\n     {\n         if (param != null && intr != null) {\n             }\n         }\n         return null;\n+    }\n+\n+    protected PropertyName _findExplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)\n+    {\n+        if (param != null && intr != null) {\n+            return intr.findNameForDeserialization(param);\n+        }\n+        return null;\n+    }\n+    \n+    protected boolean _hasExplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)\n+    {\n+        if (param != null && intr != null) {\n+            PropertyName n = intr.findNameForDeserialization(param);\n+            return (n != null) && n.hasSimpleName();\n+        }\n+        return false;\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators3.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators3.java\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n \n public class TestCreators3 extends BaseMapTest\n {\n \n         private MultiCtor() { }\n \n-        private MultiCtor(String a, String b, Object c) {\n+        private MultiCtor(String a, String b, Boolean c) {\n             if (c == null) {\n                 throw new RuntimeException(\"Wrong factory!\");\n             }\n         }\n         \n     }\n+\n+    @SuppressWarnings(\"serial\")\n+    static class MyParamIntrospector extends JacksonAnnotationIntrospector\n+    {\n+        @Override\n+        public String findImplicitPropertyName(AnnotatedMember param) {\n+            if (param instanceof AnnotatedParameter) {\n+                AnnotatedParameter ap = (AnnotatedParameter) param;\n+                switch (ap.getIndex()) {\n+                case 0: return \"a\";\n+                case 1: return \"b\";\n+                case 2: return \"c\";\n+                default:\n+                    return \"param\"+ap.getIndex();\n+                }\n+            }\n+            return super.findImplicitPropertyName(param);\n+        }\n+    }\n     \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n \n-    private final ObjectMapper MAPPER = new ObjectMapper();\n-\n     // [Issue#421]\n     public void testMultiCtor421() throws Exception\n     {\n-        MultiCtor bean = MAPPER.readValue(aposToQuotes(\"{'a':'123','b':'foo'}\"), MultiCtor.class);\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.setAnnotationIntrospector(new MyParamIntrospector());\n+\n+        MultiCtor bean = mapper.readValue(aposToQuotes(\"{'a':'123','b':'foo'}\"), MultiCtor.class);\n         assertNotNull(bean);\n         assertEquals(\"123\", bean._a);\n         assertEquals(\"foo\", bean._b);", "timestamp": 1407958689, "metainfo": ""}