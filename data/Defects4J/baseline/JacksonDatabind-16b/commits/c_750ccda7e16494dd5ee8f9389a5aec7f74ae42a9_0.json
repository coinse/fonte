{"sha": "750ccda7e16494dd5ee8f9389a5aec7f74ae42a9", "log": "Implement #133", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.JsonInclude;\n-\n import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.core.Versioned;\n-\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n     public boolean hasCreatorAnnotation(Annotated a) {\n         return false;\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Overridable methods: may be used as low-level extension\n+    /* points.\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method that should be used by sub-classes for ALL\n+     * annotation access;\n+     * overridable so \n+     * that sub-classes may, if they choose to, mangle actual access to\n+     * block access (\"hide\" annotations) or perhaps change it.\n+     *<p>\n+     * Default implementation is simply:\n+     *<code>\n+     *  return annotated.getAnnotation(annoClass);\n+     *</code>\n+     * \n+     * @since 2.5\n+     */\n+    protected <A extends Annotation> A _findAnnotation(Annotated annotated,\n+            Class<A> annoClass) {\n+        return annotated.getAnnotation(annoClass);\n+    }\n+\n+    /**\n+     * Method that should be used by sub-classes for ALL\n+     * annotation existence access;\n+     * overridable so  that sub-classes may, if they choose to, mangle actual access to\n+     * block access (\"hide\" annotations) or perhaps change value seen.\n+     *<p>\n+     * Default implementation is simply:\n+     *<code>\n+     *  return annotated.hasAnnotation(annoClass);\n+     *</code>\n+     * \n+     * @since 2.5\n+     */\n+    protected boolean _hasAnnotation(Annotated annotated, Class<? extends Annotation> annoClass) {\n+        return annotated.hasAnnotation(annoClass);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     @Override\n     public PropertyName findRootName(AnnotatedClass ac)\n     {\n-        JsonRootName ann = ac.getAnnotation(JsonRootName.class);\n+        JsonRootName ann = _findAnnotation(ac, JsonRootName.class);\n         if (ann == null) {\n             return null;\n         }\n \n     @Override\n     public String[] findPropertiesToIgnore(Annotated ac) {\n-        JsonIgnoreProperties ignore = ac.getAnnotation(JsonIgnoreProperties.class);\n+        JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);\n         return (ignore == null) ? null : ignore.value();\n     }\n \n     @Override\n     public Boolean findIgnoreUnknownProperties(AnnotatedClass ac) {\n-        JsonIgnoreProperties ignore = ac.getAnnotation(JsonIgnoreProperties.class);\n+        JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);\n         return (ignore == null) ? null : ignore.ignoreUnknown();\n     }\n \n     @Override\n     public Boolean isIgnorableType(AnnotatedClass ac) {\n-        JsonIgnoreType ignore = ac.getAnnotation(JsonIgnoreType.class);\n+        JsonIgnoreType ignore = _findAnnotation(ac, JsonIgnoreType.class);\n         return (ignore == null) ? null : ignore.value();\n     }\n \n \n     protected final Object _findFilterId(Annotated a)\n     {\n-        JsonFilter ann = a.getAnnotation(JsonFilter.class);\n+        JsonFilter ann = _findAnnotation(a, JsonFilter.class);\n         if (ann != null) {\n             String id = ann.value();\n             // Empty String is same as not having annotation, to allow overrides\n     @Override\n     public Object findNamingStrategy(AnnotatedClass ac)\n     {\n-        JsonNaming ann = ac.getAnnotation(JsonNaming.class);\n+        JsonNaming ann = _findAnnotation(ac, JsonNaming.class);\n         return (ann == null) ? null : ann.value();\n     } \n \n     public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac,\n         VisibilityChecker<?> checker)\n     {\n-        JsonAutoDetect ann = ac.getAnnotation(JsonAutoDetect.class);\n+        JsonAutoDetect ann = _findAnnotation(ac, JsonAutoDetect.class);\n         return (ann == null) ? checker : checker.with(ann);\n     }\n \n     @Override        \n     public ReferenceProperty findReferenceType(AnnotatedMember member)\n     {\n-        JsonManagedReference ref1 = member.getAnnotation(JsonManagedReference.class);\n+        JsonManagedReference ref1 = _findAnnotation(member, JsonManagedReference.class);\n         if (ref1 != null) {\n             return AnnotationIntrospector.ReferenceProperty.managed(ref1.value());\n         }\n-        JsonBackReference ref2 = member.getAnnotation(JsonBackReference.class);\n+        JsonBackReference ref2 = _findAnnotation(member, JsonBackReference.class);\n         if (ref2 != null) {\n             return AnnotationIntrospector.ReferenceProperty.back(ref2.value());\n         }\n     @Override\n     public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member)\n     {\n-        JsonUnwrapped ann = member.getAnnotation(JsonUnwrapped.class);\n+        JsonUnwrapped ann = _findAnnotation(member, JsonUnwrapped.class);\n         // if not enabled, just means annotation is not enabled; not necessarily\n         // that unwrapping should not be done (relevant when using chained introspectors)\n         if (ann == null || !ann.enabled()) {\n     @Override\n     public Boolean hasRequiredMarker(AnnotatedMember m)\n     {\n-        JsonProperty ann = m.getAnnotation(JsonProperty.class);\n+        JsonProperty ann = _findAnnotation(m, JsonProperty.class);\n         if (ann != null) {\n             return ann.required();\n         }\n     @Override\n     public Object findInjectableValueId(AnnotatedMember m)\n     {\n-        JacksonInject ann = m.getAnnotation(JacksonInject.class);\n+        JacksonInject ann = _findAnnotation(m, JacksonInject.class);\n         if (ann == null) {\n             return null;\n         }\n     @Override\n     public List<NamedType> findSubtypes(Annotated a)\n     {\n-        JsonSubTypes t = a.getAnnotation(JsonSubTypes.class);\n+        JsonSubTypes t = _findAnnotation(a, JsonSubTypes.class);\n         if (t == null) return null;\n         JsonSubTypes.Type[] types = t.value();\n         ArrayList<NamedType> result = new ArrayList<NamedType>(types.length);\n     @Override        \n     public String findTypeName(AnnotatedClass ac)\n     {\n-        JsonTypeName tn = ac.getAnnotation(JsonTypeName.class);\n+        JsonTypeName tn = _findAnnotation(ac, JsonTypeName.class);\n         return (tn == null) ? null : tn.value();\n     }\n \n     @Override\n     public Object findSerializer(Annotated a)\n     {\n-        JsonSerialize ann = a.getAnnotation(JsonSerialize.class);\n+        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n         if (ann != null) {\n             Class<? extends JsonSerializer<?>> serClass = ann.using();\n             if (serClass != JsonSerializer.None.class) {\n          *  if we need to get raw indicator from other sources need to add\n          *  separate accessor within {@link AnnotationIntrospector} interface.\n          */\n-        JsonRawValue annRaw =  a.getAnnotation(JsonRawValue.class);\n+        JsonRawValue annRaw =  _findAnnotation(a, JsonRawValue.class);\n         if ((annRaw != null) && annRaw.value()) {\n             // let's construct instance with nominal type:\n             Class<?> cls = a.getRawType();\n     @Override\n     public Class<? extends JsonSerializer<?>> findKeySerializer(Annotated a)\n     {\n-        JsonSerialize ann = a.getAnnotation(JsonSerialize.class);\n+        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n         if (ann != null) {\n             Class<? extends JsonSerializer<?>> serClass = ann.keyUsing();\n             if (serClass != JsonSerializer.None.class) {\n     @Override\n     public Class<? extends JsonSerializer<?>> findContentSerializer(Annotated a)\n     {\n-        JsonSerialize ann = a.getAnnotation(JsonSerialize.class);\n+        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n         if (ann != null) {\n             Class<? extends JsonSerializer<?>> serClass = ann.contentUsing();\n             if (serClass != JsonSerializer.None.class) {\n     @Override\n     public Object findNullSerializer(Annotated a)\n     {\n-        JsonSerialize ann = a.getAnnotation(JsonSerialize.class);\n+        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n         if (ann != null) {\n             Class<? extends JsonSerializer<?>> serClass = ann.nullsUsing();\n             if (serClass != JsonSerializer.None.class) {\n     @Override\n     public JsonInclude.Include findSerializationInclusion(Annotated a, JsonInclude.Include defValue)\n     {\n-        JsonInclude inc = a.getAnnotation(JsonInclude.class);\n+        JsonInclude inc = _findAnnotation(a, JsonInclude.class);\n         if (inc != null) {\n             return inc.value();\n         }\n-        JsonSerialize ann = a.getAnnotation(JsonSerialize.class);\n+        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n         if (ann != null) {\n             @SuppressWarnings(\"deprecation\")\n             JsonSerialize.Inclusion i2 = ann.include();\n     @Override\n     public Class<?> findSerializationType(Annotated am)\n     {\n-        JsonSerialize ann = am.getAnnotation(JsonSerialize.class);\n+        JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);\n         return (ann == null) ? null : _classIfExplicit(ann.as());\n     }\n     \n     @Override\n     public Class<?> findSerializationKeyType(Annotated am, JavaType baseType)\n     {\n-        JsonSerialize ann = am.getAnnotation(JsonSerialize.class);\n+        JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);\n         return (ann == null) ? null : _classIfExplicit(ann.keyAs());\n     }\n \n     @Override\n     public Class<?> findSerializationContentType(Annotated am, JavaType baseType)\n     {\n-        JsonSerialize ann = am.getAnnotation(JsonSerialize.class);\n+        JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);\n         return (ann == null) ? null : _classIfExplicit(ann.contentAs());\n     }\n     \n     @Override\n     public JsonSerialize.Typing findSerializationTyping(Annotated a)\n     {\n-        JsonSerialize ann = a.getAnnotation(JsonSerialize.class);\n+        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n         return (ann == null) ? null : ann.typing();\n     }\n \n     @Override\n     public Object findSerializationConverter(Annotated a) {\n-        JsonSerialize ann = a.getAnnotation(JsonSerialize.class);\n+        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n         return (ann == null) ? null : _classIfExplicit(ann.converter(), Converter.None.class);\n     }\n \n     @Override\n     public Object findSerializationContentConverter(AnnotatedMember a) {\n-        JsonSerialize ann = a.getAnnotation(JsonSerialize.class);\n+        JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\n         return (ann == null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);\n     }\n     \n     @Override\n     public Class<?>[] findViews(Annotated a)\n     {\n-        JsonView ann = a.getAnnotation(JsonView.class);\n+        JsonView ann = _findAnnotation(a, JsonView.class);\n         return (ann == null) ? null : ann.value();\n     }\n \n     @Override\n     public Boolean isTypeId(AnnotatedMember member) {\n-        return member.hasAnnotation(JsonTypeId.class);\n+        return _hasAnnotation(member, JsonTypeId.class);\n     }\n \n     @Override\n     public ObjectIdInfo findObjectIdInfo(Annotated ann) {\n-        JsonIdentityInfo info = ann.getAnnotation(JsonIdentityInfo.class);\n+        JsonIdentityInfo info = _findAnnotation(ann, JsonIdentityInfo.class);\n         if (info == null || info.generator() == ObjectIdGenerators.None.class) {\n             return null;\n         }\n \n     @Override\n     public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n-        JsonIdentityReference ref = ann.getAnnotation(JsonIdentityReference.class);\n+        JsonIdentityReference ref = _findAnnotation(ann, JsonIdentityReference.class);\n         if (ref != null) {\n             objectIdInfo = objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n         }\n     }\n     \n     @Override\n-    public JsonFormat.Value findFormat(Annotated annotated) {\n-        JsonFormat ann = annotated.getAnnotation(JsonFormat.class);\n-        return (ann == null)  ? null : new JsonFormat.Value(ann);\n-    }\n-\n-    @Override\n-    public String findPropertyDescription(Annotated annotated) {\n-        JsonPropertyDescription desc = annotated.getAnnotation(JsonPropertyDescription.class);\n+    public JsonFormat.Value findFormat(Annotated ann) {\n+        JsonFormat f = _findAnnotation(ann, JsonFormat.class);\n+        return (f == null)  ? null : new JsonFormat.Value(f);\n+    }\n+\n+    @Override\n+    public String findPropertyDescription(Annotated ann) {\n+        JsonPropertyDescription desc = _findAnnotation(ann, JsonPropertyDescription.class);\n         return (desc == null) ? null : desc.value();\n     }\n \n     @Override\n-    public Integer findPropertyIndex(Annotated annotated) {\n-        JsonProperty ann = annotated.getAnnotation(JsonProperty.class);\n-        if (ann != null) {\n-        \tint ix = ann.index();\n+    public Integer findPropertyIndex(Annotated ann) {\n+        JsonProperty prop = _findAnnotation(ann, JsonProperty.class);\n+        if (prop != null) {\n+        \tint ix = prop.index();\n         \tif (ix != JsonProperty.INDEX_UNKNOWN) {\n         \t\treturn Integer.valueOf(ix);\n         \t}\n \n     @Override\n     public String[] findSerializationPropertyOrder(AnnotatedClass ac) {\n-        JsonPropertyOrder order = ac.getAnnotation(JsonPropertyOrder.class);\n+        JsonPropertyOrder order = _findAnnotation(ac, JsonPropertyOrder.class);\n         return (order == null) ? null : order.value();\n     }\n \n     }\n \n     private final Boolean _findSortAlpha(Annotated ann) {\n-        JsonPropertyOrder order = ann.getAnnotation(JsonPropertyOrder.class);\n+        JsonPropertyOrder order = _findAnnotation(ann, JsonPropertyOrder.class);\n         return (order == null) ? null : order.alphabetic();\n     }\n     \n     {\n         String name = null;\n \n-        JsonGetter jg = a.getAnnotation(JsonGetter.class);\n+        JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n         if (jg != null) {\n             name = jg.value();\n         } else {\n-            JsonProperty pann = a.getAnnotation(JsonProperty.class);\n+            JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n             if (pann != null) {\n                 name = pann.value();\n-            } else if (a.hasAnnotation(JsonSerialize.class) || a.hasAnnotation(JsonView.class)) {\n+            } else if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class)) {\n                 name = \"\";\n             } else {\n                 return null;\n \n     @Override\n     public boolean hasAsValueAnnotation(AnnotatedMethod am) {\n-        JsonValue ann = am.getAnnotation(JsonValue.class);\n+        JsonValue ann = _findAnnotation(am, JsonValue.class);\n         // value of 'false' means disabled...\n         return (ann != null && ann.value());\n     }\n     @Override\n     public Class<? extends JsonDeserializer<?>> findDeserializer(Annotated a)\n     {\n-        JsonDeserialize ann = a.getAnnotation(JsonDeserialize.class);\n+        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n         if (ann != null) {\n             Class<? extends JsonDeserializer<?>> deserClass = ann.using();\n             if (deserClass != JsonDeserializer.None.class) {\n     @Override\n     public Class<? extends KeyDeserializer> findKeyDeserializer(Annotated a)\n     {\n-        JsonDeserialize ann = a.getAnnotation(JsonDeserialize.class);\n+        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n         if (ann != null) {\n             Class<? extends KeyDeserializer> deserClass = ann.keyUsing();\n             if (deserClass != KeyDeserializer.None.class) {\n     @Override\n     public Class<? extends JsonDeserializer<?>> findContentDeserializer(Annotated a)\n     {\n-        JsonDeserialize ann = a.getAnnotation(JsonDeserialize.class);\n+        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n         if (ann != null) {\n             Class<? extends JsonDeserializer<?>> deserClass = ann.contentUsing();\n             if (deserClass != JsonDeserializer.None.class) {\n \n     @Override\n     public Class<?> findDeserializationType(Annotated am, JavaType baseType) {\n-        JsonDeserialize ann = am.getAnnotation(JsonDeserialize.class);\n+        JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);\n         return (ann == null) ? null : _classIfExplicit(ann.as());\n     }\n \n     @Override\n     public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType) {\n-        JsonDeserialize ann = am.getAnnotation(JsonDeserialize.class);\n+        JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);\n         return (ann == null) ? null : _classIfExplicit(ann.keyAs());\n     }\n \n     @Override\n     public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType)\n     {\n-        JsonDeserialize ann = am.getAnnotation(JsonDeserialize.class);\n+        JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);\n         return (ann == null) ? null : _classIfExplicit(ann.contentAs());\n     }\n \n     @Override\n     public Object findDeserializationConverter(Annotated a)\n     {\n-        JsonDeserialize ann = a.getAnnotation(JsonDeserialize.class);\n+        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n         return (ann == null) ? null : _classIfExplicit(ann.converter(), Converter.None.class);\n     }\n \n     @Override\n     public Object findDeserializationContentConverter(AnnotatedMember a)\n     {\n-        JsonDeserialize ann = a.getAnnotation(JsonDeserialize.class);\n+        JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);\n         return (ann == null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);\n     }\n \n     @Override\n     public Object findValueInstantiator(AnnotatedClass ac)\n     {\n-        JsonValueInstantiator ann = ac.getAnnotation(JsonValueInstantiator.class);\n+        JsonValueInstantiator ann = _findAnnotation(ac, JsonValueInstantiator.class);\n         // no 'null' marker yet, so:\n         return (ann == null) ? null : ann.value();\n     }\n     @Override\n     public Class<?> findPOJOBuilder(AnnotatedClass ac)\n     {\n-        JsonDeserialize ann = ac.getAnnotation(JsonDeserialize.class);\n+        JsonDeserialize ann = _findAnnotation(ac, JsonDeserialize.class);\n         return (ann == null) ? null : _classIfExplicit(ann.builder());\n     }\n \n     @Override\n     public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac)\n     {\n-        JsonPOJOBuilder ann = ac.getAnnotation(JsonPOJOBuilder.class);\n+        JsonPOJOBuilder ann = _findAnnotation(ac, JsonPOJOBuilder.class);\n         return (ann == null) ? null : new JsonPOJOBuilder.Value(ann);\n     }\n     \n \n         // @JsonSetter has precedence over @JsonProperty, being more specific\n         // @JsonDeserialize implies that there is a property, but no name\n-        JsonSetter js = a.getAnnotation(JsonSetter.class);\n+        JsonSetter js = _findAnnotation(a, JsonSetter.class);\n         if (js != null) {\n             name = js.value();\n         } else {\n-            JsonProperty pann = a.getAnnotation(JsonProperty.class);\n+            JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n             if (pann != null) {\n                 name = pann.value();\n                 /* 22-Apr-2014, tatu: Should figure out a better way to do this, but\n                  *   it's actually bit tricky to do it more efficiently (meta-annotations\n                  *   add more lookups; AnnotationMap costs etc)\n                  */\n-            } else if (a.hasAnnotation(JsonDeserialize.class)\n-                    || a.hasAnnotation(JsonView.class)\n-                    || a.hasAnnotation(JsonUnwrapped.class) // [#442]\n-                    || a.hasAnnotation(JsonBackReference.class)\n-                    || a.hasAnnotation(JsonManagedReference.class)) {\n+            } else if (_hasAnnotation(a, JsonDeserialize.class)\n+                    || _hasAnnotation(a, JsonView.class)\n+                    || _hasAnnotation(a, JsonUnwrapped.class) // [#442]\n+                    || _hasAnnotation(a, JsonBackReference.class)\n+                    || _hasAnnotation(a, JsonManagedReference.class)) {\n                     name = \"\";\n             } else {\n                 return null;\n          * if needs to be ignored (and if so, is handled prior\n          * to this method getting called)\n          */\n-        return am.hasAnnotation(JsonAnySetter.class);\n+        return _hasAnnotation(am, JsonAnySetter.class);\n     }\n \n     @Override\n         /* No dedicated disabling; regular @JsonIgnore used\n          * if needs to be ignored (handled separately\n          */\n-        return am.hasAnnotation(JsonAnyGetter.class);\n+        return _hasAnnotation(am, JsonAnyGetter.class);\n     }\n     \n     @Override\n          * if needs to be ignored (and if so, is handled prior\n          * to this method getting called)\n          */\n-        return a.hasAnnotation(JsonCreator.class);\n-    }\n-\n+        return _hasAnnotation(a, JsonCreator.class);\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Helper methods\n \n     protected boolean _isIgnorable(Annotated a)\n     {\n-        JsonIgnore ann = a.getAnnotation(JsonIgnore.class);\n+        JsonIgnore ann = _findAnnotation(a, JsonIgnore.class);\n         return (ann != null && ann.value());\n     }\n \n     {\n         // First: maybe we have explicit type resolver?\n         TypeResolverBuilder<?> b;\n-        JsonTypeInfo info = ann.getAnnotation(JsonTypeInfo.class);\n-        JsonTypeResolver resAnn = ann.getAnnotation(JsonTypeResolver.class);\n+        JsonTypeInfo info = _findAnnotation(ann, JsonTypeInfo.class);\n+        JsonTypeResolver resAnn = _findAnnotation(ann, JsonTypeResolver.class);\n         \n         if (resAnn != null) {\n             if (info == null) {\n             b = _constructStdTypeResolverBuilder();\n         }\n         // Does it define a custom type id resolver?\n-        JsonTypeIdResolver idResInfo = ann.getAnnotation(JsonTypeIdResolver.class);\n+        JsonTypeIdResolver idResInfo = _findAnnotation(ann, JsonTypeIdResolver.class);\n         TypeIdResolver idRes = (idResInfo == null) ? null\n                 : config.typeIdResolverInstance(ann, idResInfo.value());\n         if (idRes != null) { // [JACKSON-359]", "timestamp": 1411691318, "metainfo": ""}