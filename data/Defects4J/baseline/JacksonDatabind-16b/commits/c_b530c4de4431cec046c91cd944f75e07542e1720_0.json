{"sha": "b530c4de4431cec046c91cd944f75e07542e1720", "log": "Groundwork for #225, centralizing contextualization of JsonSerializer instances", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n     /**********************************************************\n      */\n \n+    /**\n+     * Method that should be called to take of possible calls to resolve\n+     * {@link ContextualDeserializer} with given property context (if any;\n+     * none for root-value deserializers).\n+     * \n+     * @param property Property for which deserializer is used, if any; null\n+     *    when deserializing root values\n+     * \n+     * @since 2.3\n+     */\n     public JsonDeserializer<?> handleContextualization(JsonDeserializer<?> deser,\n             BeanProperty property)\n         throws JsonMappingException\n         }\n         return deser;\n     }\n-           \n-    \n+\n     /*\n     /**********************************************************\n     /* Parsing methods that may use reusable/-cyclable objects\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n \n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.*;\n      *   accessing suitable serializer; including that of not\n      *   finding any serializer\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public JsonSerializer<Object> findValueSerializer(Class<?> valueType,\n             BeanProperty property)\n         throws JsonMappingException\n             }\n         }\n         // at this point, resolution has occured, but not contextualization\n-        return _handleContextual(ser, property);\n+        return (JsonSerializer<Object>) handleContextualization(ser, property);\n     }\n \n     /**\n      *   serializer is needed: annotations of the property (or bean that contains it)\n      *   may be checked to create contextual serializers.\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public JsonSerializer<Object> findValueSerializer(JavaType valueType, BeanProperty property)\n         throws JsonMappingException\n     {\n                 }\n             }\n         }\n-        return _handleContextual(ser, property);\n+        return (JsonSerializer<Object>) handleContextualization(ser, property);\n     }\n     \n     /**\n         throws JsonMappingException;\n \n     /*\n+    /**********************************************************\n+    /* Support for contextualization\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method that should be called to take of possible calls to resolve\n+     * {@link ContextualSerializer} with given property context (if any;\n+     * none for root-value serializers).\n+     * \n+     * @param property Property for which serializer is used, if any; null\n+     *    when serializing root values\n+     * \n+     * @since 2.3\n+     */\n+    public JsonSerializer<?> handleContextualization(JsonSerializer<?> ser,\n+            BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        if (ser == null) {\n+            return ser;\n+        }\n+        if (ser instanceof ContextualSerializer) {\n+            ser = ((ContextualSerializer) ser).createContextual(this, property);\n+        }\n+        return ser;\n+    }\n+    \n+    /*\n     /********************************************************\n     /* Convenience methods\n     /********************************************************\n      * Helper method called to resolve and contextualize given\n      * serializer, if and as necessary.\n      */\n+    @SuppressWarnings(\"unchecked\")\n     protected JsonSerializer<Object> _handleContextualResolvable(JsonSerializer<?> ser,\n             BeanProperty property)\n         throws JsonMappingException\n         if (ser instanceof ResolvableSerializer) {\n             ((ResolvableSerializer) ser).resolve(this);\n         }\n-        return _handleContextual(ser, property);\n+        return (JsonSerializer<Object>) handleContextualization(ser, property);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     {\n         if (ser instanceof ResolvableSerializer) {\n             ((ResolvableSerializer) ser).resolve(this);\n-        }\n-        return (JsonSerializer<Object>) ser;\n-    }\n-    \n-    @SuppressWarnings(\"unchecked\")\n-    protected JsonSerializer<Object> _handleContextual(JsonSerializer<?> ser,\n-            BeanProperty property)\n-        throws JsonMappingException\n-    {\n-        if (ser instanceof ContextualSerializer) {\n-            ser = ((ContextualSerializer) ser).createContextual(this, property);\n         }\n         return (JsonSerializer<Object>) ser;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java\n     // Note: NOT part of ResolvableSerializer...\n     public void resolve(SerializerProvider provider) throws JsonMappingException\n     {\n-        _serializer = (MapSerializer) _serializer.createContextual(provider, _property);\n+        _serializer = (MapSerializer) provider.handleContextualization(_serializer, _property);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         if (annotatedSerializer instanceof ResolvableSerializer) {\n             ((ResolvableSerializer) annotatedSerializer).resolve(prov);\n         }\n-        if (annotatedSerializer instanceof ContextualSerializer) {\n-            annotatedSerializer = ((ContextualSerializer) annotatedSerializer).createContextual(prov, property);\n-        }\n+        annotatedSerializer = prov.handleContextualization(annotatedSerializer, property);\n         // And how about polymorphic typing? First special to cover JAXB per-field settings:\n         TypeSerializer contentTypeSer = null;\n         if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n             contentTypeSer = findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);\n         }\n-\n         // and if not JAXB collection/array with annotations, maybe regular type info?\n         TypeSerializer typeSer = findPropertyTypeSerializer(type, prov.getConfig(), accessor);\n         BeanPropertyWriter pbw = pb.buildWriter(propDef, type, annotatedSerializer,\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n         ser = findConvertingContentSerializer(provider, property, ser);\n         if (ser == null) {\n             ser = provider.findValueSerializer(String.class, property);\n-        } else if (ser instanceof ContextualSerializer) {\n-            ser = ((ContextualSerializer) ser).createContextual(provider, property);\n+        } else {\n+            ser = provider.handleContextualization(ser, property);\n         }\n         // Optimization: default serializer just writes String, so we can avoid a call:\n         if (isDefaultSerializer(ser)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n         ser = findConvertingContentSerializer(provider, property, ser);\n         if (ser == null) {\n             ser = provider.findValueSerializer(String.class, property);\n-        } else if (ser instanceof ContextualSerializer) {\n-            ser = ((ContextualSerializer) ser).createContextual(provider, property);\n+        } else {\n+            ser = provider.handleContextualization(ser, property);\n         }\n         // Optimization: default serializer just writes String, so we can avoid a call:\n         if (isDefaultSerializer(ser)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n         ser = findConvertingContentSerializer(provider, property, ser);\n         if (ser == null) {\n             ser = provider.findValueSerializer(String.class, property);\n-        } else if (ser instanceof ContextualSerializer) {\n-            ser = ((ContextualSerializer) ser).createContextual(provider, property);\n+        } else {\n+            ser = provider.handleContextualization(ser, property);\n         }\n         // Optimization: default serializer just writes String, so we can avoid a call:\n         if (isDefaultSerializer(ser)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n                 }\n             }\n         } else {\n-            if (ser instanceof ContextualSerializer) {\n-                ser = ((ContextualSerializer) ser).createContextual(provider, property);\n-            }\n+            ser = provider.handleContextualization(ser, property);\n         }\n         if ((ser != _elementSerializer) || (property != _property) || _valueTypeSerializer != typeSer) {\n             return withResolved(property, typeSer, ser);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n             if (_staticTyping) {\n                 return withValueSerializer(property, provider.findValueSerializer(_valueType, property));\n             }\n-        } else if (_valueSerializer instanceof ContextualSerializer) {\n-            ser = ((ContextualSerializer) ser).createContextual(provider, property);\n+        } else {\n+            ser = provider.handleContextualization(ser, property);\n         }\n         if (ser != _valueSerializer) {\n             return withValueSerializer(property, ser);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n                 boolean forceTypeInformation = isNaturalTypeWithStdHandling(t.getRawClass(), ser);\n                 return withResolved(property, ser, forceTypeInformation);\n             }\n-        } else if (ser instanceof ContextualSerializer) {\n-            ser = ((ContextualSerializer) ser).createContextual(provider, property);\n+        } else {\n+            ser = provider.handleContextualization(ser, property);\n             return withResolved(property, ser, _forceTypeInformation);\n         }\n         return this;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n                     || hasContentTypeAnnotation(provider, property)) {\n                 ser = provider.findValueSerializer(_valueType, property);\n             }\n-        } else if (ser instanceof ContextualSerializer) {\n-            ser = ((ContextualSerializer) ser).createContextual(provider, property);\n+        } else {\n+            ser = provider.handleContextualization(ser, property);\n         }\n         if (keySer == null) {\n             keySer = _keySerializer;\n         }\n         if (keySer == null) {\n             keySer = provider.findKeySerializer(_keyType, property);\n-        } else if (keySer instanceof ContextualSerializer) {\n-            keySer = ((ContextualSerializer) keySer).createContextual(provider, property);\n+        } else {\n+            keySer = provider.handleContextualization(keySer, property);\n         }\n         HashSet<String> ignored = this._ignoredEntries;\n         AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n                     ser = provider.findValueSerializer(_elementType, property);\n                 }\n             }\n-        } else if (ser instanceof ContextualSerializer) {\n-            ser = ((ContextualSerializer) ser).createContextual(provider, property);\n+        } else {\n+            ser = provider.handleContextualization(ser, property);\n         }\n         return withResolved(property, vts, ser);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\n         // First: if already got serializer to delegate to, contextualize it:\n         if (_delegateSerializer != null) {\n             if (_delegateSerializer instanceof ContextualSerializer) {\n-                JsonSerializer<?> ser = ((ContextualSerializer)_delegateSerializer).createContextual(provider, property);\n+                JsonSerializer<?> ser = provider.handleContextualization(_delegateSerializer, property);\n                 if (ser == _delegateSerializer) {\n                     return this;\n                 }", "timestamp": 1378358413, "metainfo": ""}