{"sha": "d0a64d141367867db5b745734f5c7330644b71ca", "log": "Added support for non-lenient mode   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/JXPathContext.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathContext.java,v 1.3 2001/09/26 01:21:54 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2001/09/26 01:21:54 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathContext.java,v 1.4 2001/09/26 23:37:39 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2001/09/26 23:37:39 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * See <a href=\"http://www.w3.org/TR/xpath\">XML Path Language (XPath) Version 1.0 </a>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2001/09/26 01:21:54 $\n+ * @version $Revision: 1.4 $ $Date: 2001/09/26 23:37:39 $\n  */\n public abstract class JXPathContext {\n     protected JXPathContext parentContext;\n     protected Variables vars;\n     protected Functions functions;\n     protected Locale locale;\n+    protected boolean lenient = false;\n \n     /**\n      * Creates a new JXPathContext with the specified bean as the root node.\n             locale = Locale.getDefault();\n         }\n         return locale;\n+    }\n+\n+    /**\n+     * If the context is in the lenient mode, then getValue() returns null\n+     * for inexistent paths.  Otherwise, a path that does not map to\n+     * an existing property will throw an exception.  Note that if the\n+     * property exists, but its value is null, the exception is <i>not</i>\n+     * thrown.\n+     * <p>\n+     * By default, lenient = false\n+     */\n+    public void setLenient(boolean lenient){\n+        this.lenient = lenient;\n+    }\n+\n+    /**\n+     * @see #setLenient(boolean)\n+     */\n+    public boolean isLenient(){\n+        return lenient;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/EvalContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/EvalContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/EvalContext.java,v 1.4 2001/09/26 01:21:54 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2001/09/26 01:21:54 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/EvalContext.java,v 1.5 2001/09/26 23:37:38 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2001/09/26 23:37:38 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * implement behavior of various XPath axes: \"child::\", \"parent::\" etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2001/09/26 01:21:54 $\n+ * @version $Revision: 1.5 $ $Date: 2001/09/26 23:37:38 $\n  */\n public abstract class EvalContext implements ExpressionContext {\n     protected EvalContext parentContext;\n         if (set instanceof EvalContext){\n             EvalContext ctx = (EvalContext)set;\n             if (ctx.nextSet() && ctx.next()){\n-                return ctx.getCurrentNodePointer().getNamespaceURI();\n+                String str = ctx.getCurrentNodePointer().getNamespaceURI();\n+                return str == null ? \"\" : str;\n             }\n         }\n         return \"\";\n \n     protected Object functionNull(CoreFunction function){\n         assertArgCount(function, 0);\n-        return null;\n+        return new NullPointer(null, getRootContext().getCurrentNodePointer().getLocale());\n     }\n \n     protected Object functionNumber(CoreFunction function){\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.5 2001/09/26 01:21:54 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2001/09/26 01:21:54 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.6 2001/09/26 23:37:38 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2001/09/26 23:37:38 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2001/09/26 01:21:54 $\n+ * @version $Revision: 1.6 $ $Date: 2001/09/26 23:37:38 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext\n {\n      */\n     public Object getValue(String xpath){\n         Object result = eval(xpath, true);\n+        if (result == null && !lenient){\n+            throw new RuntimeException(\"No value for xpath: \" + xpath);\n+        }\n+\n         if (result instanceof EvalContext){\n             EvalContext ctx = (EvalContext)result;\n             result = ctx.getContextNodePointer();\n         }\n         else if (result instanceof EvalContext){\n             EvalContext ctx = (EvalContext)result;\n-            while(ctx.nextSet()){\n-                if (ctx.next()){\n-                    ctx.getCurrentNodePointer().setValue(value);\n-                    return;\n-                }\n-            }\n-            throw new RuntimeException(\"Cannot set value for xpath: \" + xpath + \": no such property\");\n-        }\n-        else {\n-            System.err.println(\"RESULT: \" + result);\n+            Pointer ptr = ctx.getContextNodePointer();\n+            if (ptr != null){\n+                ptr.setValue(value);\n+            }\n+            else {\n+                throw new RuntimeException(\"Cannot set value for xpath: \" + xpath + \": no such property\");\n+            }\n+        }\n+        else {\n             throw new RuntimeException(\"Cannot set value for xpath: \" + xpath);\n         }\n     }\n--- a/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.8 2001/09/26 01:21:54 dmitri Exp $\n- * $Revision: 1.8 $\n- * $Date: 2001/09/26 01:21:54 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.9 2001/09/26 23:37:38 dmitri Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2001/09/26 23:37:38 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * </p>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.8 $ $Date: 2001/09/26 01:21:54 $\n+ * @version $Revision: 1.9 $ $Date: 2001/09/26 23:37:38 $\n  */\n \n public class JXPathTestCase extends TestCase\n             JXPathContext context = JXPathContext.newContext(new TestNull());\n             testGetValue(context, \"nothing\", null);\n             testGetValue(context, \"child/nothing\", null);\n+            testGetValue(context, \"array[2]\", null);\n+            context.setLenient(true);\n             testGetValue(context, \"nothing/something\", null);\n-            testGetValue(context, \"array[2]\", null);\n             testGetValue(context, \"array[2]/something\", null);\n         }\n     }\n                         actual = ctx.eval(xpath_tests[i].xpath);\n                     }\n                     else {\n+                        ctx.setLenient(xpath_tests[i].lenient);\n                         actual = ctx.getValue(xpath_tests[i].xpath);\n+                        ctx.setLenient(false);\n                     }\n                 }\n                 assertEquals(\"Evaluating <\" + xpath_tests[i].xpath + \">\", xpath_tests[i].expected, actual);\n         public Object expected;\n         public boolean eval;\n         public boolean path;\n-\n-        public XP(String xpath,  Object expected, boolean eval, boolean path){\n+        public boolean lenient;\n+\n+        public XP(String xpath,  Object expected, boolean eval, boolean path, boolean lenient){\n             this.xpath = xpath;\n             this.expected = expected;\n             this.eval = eval;\n             this.path = path;\n+            this.lenient = lenient;\n         }\n     }\n \n     private static XP test(String xpath, Object expected){\n-        return new XP(xpath, expected, false, false);\n+        return new XP(xpath, expected, false, false, false);\n+    }\n+\n+    private static XP testLenient(String xpath, Object expected){\n+        return new XP(xpath, expected, false, false, true);\n     }\n \n     private static XP testEval(String xpath, Object expected){\n-        return new XP(xpath, expected, true, false);\n+        return new XP(xpath, expected, true, false, false);\n     }\n \n     private static XP testPath(String xpath, Object expected){\n-        return new XP(xpath, expected, false, true);\n+        return new XP(xpath, expected, false, true, false);\n     }\n \n     private static XP testEvalPath(String xpath, Object expected){\n-        return new XP(xpath, expected, true, true);\n+        return new XP(xpath, expected, true, true, false);\n     }\n \n     static final XP[] xpath_tests = new XP[]{\n         test(\"null()\", null),\n         test(\"@xml:lang\", \"en-US\"),\n         test(\"count(@xml:*)\", new Double(1)),\n-        test(\"@foo\", null),\n+        testLenient(\"@foo\", null),\n         test(\"lang('en')\", Boolean.TRUE),\n         test(\"lang('fr')\", Boolean.FALSE),\n \n         test(\"local-name(vendor/nsnode/foo:bar/@foo:attr)\", \"attr\"),\n         test(\"name(vendor/nsnode/foo:bar/@foo:attr)\", \"foonamespace:attr\"),\n         test(\"vendor/nsnode/foo:bar/@attr\", \"B\"),\n-        test(\"namespace-uri(vendor/nsnode/foo:bar/@attr)\", null),\n+        test(\"namespace-uri(vendor/nsnode/foo:bar/@attr)\", \"\"),\n         test(\"local-name(vendor/nsnode/foo:bar/@attr)\", \"attr\"),\n         test(\"name(vendor/nsnode/foo:bar/@attr)\", \"attr\"),\n         test(\"vendor/nsnode/foo:x/y/ancestor::foo:x/y\", \"why\"),\n         test(\"vendor/nsnode/foo:x/y/parent::foo:*\" + \"/y\", \"why\"),\n         test(\"//location/following::foo:x/y\", \"why\"),\n         test(\"//foo:x/self::foo:x/y\", \"why\"),\n-        test(\"//foo:x/self::x/y\", null),\n+        testLenient(\"//foo:x/self::x/y\", null),\n \n         test(\"//nsnode/comment()\", \"z\"),\n         test(\"//nsnode/text()\", \"text\"),\n         test(\"//nsnode/baz[lang('fr')]\", \"BAZ\"),\n         test(\"//nsnode/foo:x[lang('en')]/y\", \"why\"),\n         test(\"vendor/location/@blank\", \"\"),\n-        test(\"vendor/location/@missing\", null),\n+        testLenient(\"vendor/location/@missing\", null),\n         test(\"count(vendor/location[1]/@*)\", new Double(3)),\n         test(\"vendor/location[@id='101']//street\", \"Other street\"),\n         test(\"$test/int\", new Integer(1)),", "timestamp": 1001547459, "metainfo": ""}