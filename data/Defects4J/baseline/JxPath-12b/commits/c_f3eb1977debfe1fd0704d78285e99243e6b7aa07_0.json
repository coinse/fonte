{"sha": "f3eb1977debfe1fd0704d78285e99243e6b7aa07", "log": "Refactoring of CoreOperation and expression.toString()   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/Constant.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/Constant.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/Constant.java,v 1.4 2003/01/11 05:41:23 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/01/11 05:41:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/Constant.java,v 1.5 2003/01/19 23:59:23 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2003/01/19 23:59:23 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * A compile tree element containing a constant number or string.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2003/01/11 05:41:23 $\n+ * @version $Revision: 1.5 $ $Date: 2003/01/19 23:59:23 $\n  */\n public class Constant extends Expression {\n \n     private Object value;\n \n     public Constant(Number number) {\n-        super(Expression.OP_CONSTANT);\n         this.value = number;\n     }\n \n     public Constant(String string) {\n-        super(Expression.OP_CONSTANT);\n         this.value = string;\n     }\n \n     }\n \n     public String toString() {\n-        return \"(CONST \" + value + \")\";\n+        if (value instanceof Number) {\n+            double doubleValue = ((Number) value).doubleValue();\n+            long longValue = ((Number) value).longValue();\n+            if (doubleValue == longValue) {\n+                return String.valueOf(longValue);\n+            }\n+            else {\n+                return String.valueOf(doubleValue);\n+            }\n+        }\n+        else {\n+            return \"'\" + value + \"'\";\n+        }\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java,v 1.9 2003/01/11 05:41:23 dmitri Exp $\n- * $Revision: 1.9 $\n- * $Date: 2003/01/11 05:41:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java,v 1.10 2003/01/19 23:59:23 dmitri Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2003/01/19 23:59:23 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * like \"position()\" or \"number()\".\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2003/01/11 05:41:23 $\n+ * @version $Revision: 1.10 $ $Date: 2003/01/19 23:59:23 $\n  */\n public class CoreFunction extends Operation {\n \n     private int functionCode;\n \n     public CoreFunction(int functionCode, Expression args[]) {\n-        super(Expression.OP_CORE_FUNCTION, args);\n+        super(args);\n         this.functionCode = functionCode;\n     }\n \n     public int getFunctionCode() {\n         return functionCode;\n+    }\n+    \n+    protected String getFunctionName() {\n+        switch (functionCode) {\n+            case Compiler.FUNCTION_LAST :\n+                return \"last\";\n+            case Compiler.FUNCTION_POSITION :\n+                return \"position\";\n+            case Compiler.FUNCTION_COUNT :\n+                return \"count\";\n+            case Compiler.FUNCTION_ID :\n+                return \"id\";\n+            case Compiler.FUNCTION_LOCAL_NAME :\n+                return \"local-name\";\n+            case Compiler.FUNCTION_NAMESPACE_URI :\n+                return \"namespace-uri\";\n+            case Compiler.FUNCTION_NAME :\n+                return \"name\";\n+            case Compiler.FUNCTION_STRING :\n+                return \"string\";\n+            case Compiler.FUNCTION_CONCAT :\n+                return \"concat\";\n+            case Compiler.FUNCTION_STARTS_WITH :\n+                return \"starts-with\";\n+            case Compiler.FUNCTION_CONTAINS :\n+                return \"contains\";\n+            case Compiler.FUNCTION_SUBSTRING_BEFORE :\n+                return \"substring-before\";\n+            case Compiler.FUNCTION_SUBSTRING_AFTER :\n+                return \"substring-after\";\n+            case Compiler.FUNCTION_SUBSTRING :\n+                return \"substring\";\n+            case Compiler.FUNCTION_STRING_LENGTH :\n+                return \"string-length\";\n+            case Compiler.FUNCTION_NORMALIZE_SPACE :\n+                return \"normalize-space\";\n+            case Compiler.FUNCTION_TRANSLATE :\n+                return \"translate\";\n+            case Compiler.FUNCTION_BOOLEAN :\n+                return \"boolean\";\n+            case Compiler.FUNCTION_NOT :\n+                return \"not\";\n+            case Compiler.FUNCTION_TRUE :\n+                return \"true\";\n+            case Compiler.FUNCTION_FALSE :\n+                return \"false\";\n+            case Compiler.FUNCTION_LANG :\n+                return \"lang\";\n+            case Compiler.FUNCTION_NUMBER :\n+                return \"number\";\n+            case Compiler.FUNCTION_SUM :\n+                return \"sum\";\n+            case Compiler.FUNCTION_FLOOR :\n+                return \"floor\";\n+            case Compiler.FUNCTION_CEILING :\n+                return \"ceiling\";\n+            case Compiler.FUNCTION_ROUND :\n+                return \"round\";\n+            case Compiler.FUNCTION_KEY :\n+                return \"key\";\n+        }\n+        return \"unknownFunction\" + functionCode + \"()\";\n     }\n \n     public Expression getArg1() {\n \n         return false;\n     }\n-\n-    protected String opCodeToString() {\n-        String function = null;\n-        switch (functionCode) {\n-            case Compiler.FUNCTION_LAST :\n-                function = \"last\";\n-                break;\n-            case Compiler.FUNCTION_POSITION :\n-                function = \"position\";\n-                break;\n-            case Compiler.FUNCTION_COUNT :\n-                function = \"count\";\n-                break;\n-            case Compiler.FUNCTION_ID :\n-                function = \"id\";\n-                break;\n-            case Compiler.FUNCTION_LOCAL_NAME :\n-                function = \"local-name\";\n-                break;\n-            case Compiler.FUNCTION_NAMESPACE_URI :\n-                function = \"namespace-uri\";\n-                break;\n-            case Compiler.FUNCTION_NAME :\n-                function = \"name\";\n-                break;\n-            case Compiler.FUNCTION_STRING :\n-                function = \"string\";\n-                break;\n-            case Compiler.FUNCTION_CONCAT :\n-                function = \"concat\";\n-                break;\n-            case Compiler.FUNCTION_STARTS_WITH :\n-                function = \"starts-with\";\n-                break;\n-            case Compiler.FUNCTION_CONTAINS :\n-                function = \"contains\";\n-                break;\n-            case Compiler.FUNCTION_SUBSTRING_BEFORE :\n-                function = \"substring-before\";\n-                break;\n-            case Compiler.FUNCTION_SUBSTRING_AFTER :\n-                function = \"substring-after\";\n-                break;\n-            case Compiler.FUNCTION_SUBSTRING :\n-                function = \"substring\";\n-                break;\n-            case Compiler.FUNCTION_STRING_LENGTH :\n-                function = \"string-length\";\n-                break;\n-            case Compiler.FUNCTION_NORMALIZE_SPACE :\n-                function = \"normalize-space\";\n-                break;\n-            case Compiler.FUNCTION_TRANSLATE :\n-                function = \"translate\";\n-                break;\n-            case Compiler.FUNCTION_BOOLEAN :\n-                function = \"boolean\";\n-                break;\n-            case Compiler.FUNCTION_NOT :\n-                function = \"not\";\n-                break;\n-            case Compiler.FUNCTION_TRUE :\n-                function = \"true\";\n-                break;\n-            case Compiler.FUNCTION_FALSE :\n-                function = \"false\";\n-                break;\n-            case Compiler.FUNCTION_LANG :\n-                function = \"lang\";\n-                break;\n-            case Compiler.FUNCTION_NUMBER :\n-                function = \"number\";\n-                break;\n-            case Compiler.FUNCTION_SUM :\n-                function = \"sum\";\n-                break;\n-            case Compiler.FUNCTION_FLOOR :\n-                function = \"floor\";\n-                break;\n-            case Compiler.FUNCTION_CEILING :\n-                function = \"ceiling\";\n-                break;\n-            case Compiler.FUNCTION_ROUND :\n-                function = \"round\";\n-                break;\n-            case Compiler.FUNCTION_KEY :\n-                function = \"key\";\n-                break;\n-        }\n-        return super.opCodeToString() + ':' + function;\n+    \n+    public String toString() {\n+        StringBuffer buffer = new StringBuffer();\n+        buffer.append(getFunctionName());\n+        buffer.append('(');\n+        Expression args[] = getArguments();\n+        if (args != null) {\n+            for (int i = 0; i < args.length; i++) {\n+                if (i > 0) {\n+                    buffer.append(\", \");\n+                }\n+                buffer.append(args[i]);\n+            }\n+        }\n+        buffer.append(')');\n+        return buffer.toString();\n     }\n \n     public Object compute(EvalContext context) {\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java,v 1.9 2003/01/12 01:52:57 dmitri Exp $\n- * $Revision: 1.9 $\n- * $Date: 2003/01/12 01:52:57 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java,v 1.10 2003/01/19 23:59:23 dmitri Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2003/01/19 23:59:23 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.jxpath.ri.compiler;\n \n-import java.util.HashSet;\n-import java.util.Iterator;\n-\n-import org.apache.commons.jxpath.Pointer;\n import org.apache.commons.jxpath.ri.EvalContext;\n-import org.apache.commons.jxpath.ri.InfoSetUtil;\n-import org.apache.commons.jxpath.ri.axes.InitialContext;\n-import org.apache.commons.jxpath.ri.axes.SelfContext;\n-import org.apache.commons.jxpath.ri.axes.UnionContext;\n-import org.apache.commons.jxpath.util.ValueUtils;\n \n /**\n- * A compile tree element representing one of the core operations like \"+\",\n- * \"-\", \"*\" etc.\n+ * The common subclass for tree elements representing core operations like \"+\",\n+ * \"- \", \"*\" etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2003/01/12 01:52:57 $\n+ * @version $Revision: 1.10 $ $Date: 2003/01/19 23:59:23 $\n  */\n-public class CoreOperation extends Operation {\n-    public CoreOperation(int code, Expression args[]) {\n-        super(code, args);\n-    }\n-\n-    public CoreOperation(int code, Expression arg) {\n-        super(code, new Expression[]{arg});\n-    }\n-\n-    public CoreOperation(int code, Expression arg1, Expression arg2) {\n-        super(code, new Expression[]{arg1, arg2});\n-    }\n-\n-    public Expression getArg1() {\n-        return args[0];\n-    }\n-\n-    public Expression getArg2() {\n-        return args[1];\n+public abstract class CoreOperation extends Operation {\n+        \n+    public CoreOperation(Expression args[]) {\n+        super(args);\n     }\n \n     public Object compute(EvalContext context) {\n         return computeValue(context);\n     }\n \n-    public Object computeValue(EvalContext context) {\n-        switch (getExpressionTypeCode()) {\n-            case Expression.OP_UNION:\n-                return union(context, args[0], args[1]);\n-\n-            case Expression.OP_UNARY_MINUS:\n-                return minus(context, args[0]);\n-\n-            case Expression.OP_SUM:\n-                return sum(context, args);\n-\n-            case Expression.OP_MINUS:\n-                return minus(context, args[0], args[1]);\n-\n-            case Expression.OP_MULT:\n-                return mult(context, args[0], args[1]);\n-\n-            case Expression.OP_DIV:\n-                return div(context, args[0], args[1]);\n-\n-            case Expression.OP_MOD:\n-                return mod(context, args[0], args[1]);\n-\n-            case Expression.OP_LT:\n-                return lt(context, args[0], args[1]);\n-\n-            case Expression.OP_GT:\n-                return gt(context, args[0], args[1]);\n-\n-            case Expression.OP_LTE:\n-                return lte(context, args[0], args[1]);\n-\n-            case Expression.OP_GTE:\n-                return gte(context, args[0], args[1]);\n-\n-            case Expression.OP_EQ:\n-                return eq(context, args[0], args[1]);\n-\n-            case Expression.OP_NE:\n-                return ne(context, args[0], args[1]);\n-\n-            case Expression.OP_AND:\n-                return and(context, args);\n-\n-            case Expression.OP_OR:\n-                return or(context, args);\n-        }\n-        return null; // Should never happen\n-    }\n-\n+    public abstract Object computeValue(EvalContext context);\n+    \n     /**\n-     * Computes <code>\"left | right\"<code>\n+     * Returns the XPath symbol for this operation, e.g. \"+\", \"div\", etc.\n      */\n-    protected Object union(\n-        EvalContext context,\n-        Expression left,\n-        Expression right) \n-    {\n-        Object l = left.compute(context);\n-        Object r = right.compute(context);\n-        EvalContext lctx;\n-        if (l instanceof EvalContext) {\n-            lctx = (EvalContext) l;\n+    public abstract String getSymbol();\n+    \n+    /**\n+     * Returns true if the operation is not sensitive to the order of arguments,\n+     * e.g. \"=\", \"and\" etc, and false if it is, e.g. \"&lt;=\", \"div\".\n+     */\n+    protected abstract boolean isSymmetric();\n+    \n+    /**\n+     * Computes the precedence of the operation.\n+     */\n+    protected abstract int getPrecedence();\n+    \n+    public String toString() {\n+        if (args.length == 1) {\n+            return getSymbol() + parenthesize(args[0], false);\n         }\n         else {\n-            lctx = context.getRootContext().getConstantContext(l);\n-        }\n-        EvalContext rctx;\n-        if (r instanceof EvalContext) {\n-            rctx = (EvalContext) r;\n-        }\n-        else {\n-            rctx = context.getRootContext().getConstantContext(r);\n-        }\n-        return new UnionContext(\n-            context.getRootContext(),\n-            new EvalContext[] { lctx, rctx });\n-    }\n-\n-    /**\n-     * Computes <code>\"-arg\"<code>\n-     */\n-    protected Object minus(EvalContext context, Expression arg) {\n-        double a = InfoSetUtil.doubleValue(arg.computeValue(context));\n-        return new Double(-a);\n-    }\n-\n-    /**\n-     * Computes <code>\"a + b + c + d\"<code>\n-     */\n-    protected Object sum(EvalContext context, Expression[] arguments) {\n-        double s = 0.0;\n-        for (int i = 0; i < arguments.length; i++) {\n-            s += InfoSetUtil.doubleValue(arguments[i].computeValue(context));\n-        }\n-        return new Double(s);\n-    }\n-\n-    /**\n-     * Computes <code>\"left - right\"<code>\n-     */\n-    protected Object minus(\n-        EvalContext context,\n-        Expression left,\n-        Expression right) \n-    {\n-        double l = InfoSetUtil.doubleValue(left.computeValue(context));\n-        double r = InfoSetUtil.doubleValue(right.computeValue(context));\n-        return new Double(l - r);\n-    }\n-\n-    /**\n-     * Computes <code>\"left div right\"<code>\n-     */\n-    protected Object div(\n-        EvalContext context,\n-        Expression left,\n-        Expression right) \n-    {\n-        double l = InfoSetUtil.doubleValue(left.computeValue(context));\n-        double r = InfoSetUtil.doubleValue(right.computeValue(context));\n-        return new Double(l / r);\n-    }\n-\n-    /**\n-     * Computes <code>\"left * right\"<code>\n-     */\n-    protected Object mult(\n-        EvalContext context,\n-        Expression left,\n-        Expression right) \n-    {\n-        double l = InfoSetUtil.doubleValue(left.computeValue(context));\n-        double r = InfoSetUtil.doubleValue(right.computeValue(context));\n-        return new Double(l * r);\n-    }\n-\n-    /**\n-     * Computes <code>\"left mod right\"<code>\n-     */\n-    protected Object mod(\n-        EvalContext context,\n-        Expression left,\n-        Expression right) \n-    {\n-        long l = (long) InfoSetUtil.doubleValue(left.computeValue(context));\n-        long r = (long) InfoSetUtil.doubleValue(right.computeValue(context));\n-        return new Double(l % r);\n-    }\n-\n-    /**\n-     * Computes <code>\"left &lt; right\"<code>\n-     */\n-    protected Object lt(\n-        EvalContext context,\n-        Expression left,\n-        Expression right) \n-    {\n-        return test(context, left, right, LT_TEST)\n-            ? Boolean.TRUE\n-            : Boolean.FALSE;\n-    }\n-\n-    /**\n-     * Computes <code>\"left &gt; right\"<code>\n-     */\n-    protected Object gt(\n-        EvalContext context,\n-        Expression left,\n-        Expression right) \n-    {\n-        return test(context, left, right, GT_TEST)\n-            ? Boolean.TRUE\n-            : Boolean.FALSE;\n-    }\n-\n-    /**\n-     * Computes <code>\"left &lt;= right\"<code>\n-     */\n-    protected Object lte(\n-        EvalContext context,\n-        Expression left,\n-        Expression right) \n-    {\n-        return test(context, left, right, LTE_TEST)\n-            ? Boolean.TRUE\n-            : Boolean.FALSE;\n-    }\n-\n-    /**\n-     * Computes <code>\"left &gt;= right\"<code>\n-     */\n-    protected Object gte(\n-        EvalContext context,\n-        Expression left,\n-        Expression right) \n-    {\n-        return test(context, left, right, GTE_TEST)\n-            ? Boolean.TRUE\n-            : Boolean.FALSE;\n-    }\n-\n-    /**\n-     * Computes <code>\"left = right\"<code>\n-     */\n-    protected Object eq(\n-        EvalContext context,\n-        Expression left,\n-        Expression right) \n-    {\n-        return test(context, left, right, EQUAL_TEST)\n-            ? Boolean.TRUE\n-            : Boolean.FALSE;\n-    }\n-\n-    /**\n-     * Computes <code>\"left != right\"<code>\n-     */\n-    protected Object ne(\n-        EvalContext context,\n-        Expression left,\n-        Expression right) \n-    {\n-        return test(context, left, right, EQUAL_TEST)\n-            ? Boolean.FALSE\n-            : Boolean.TRUE;\n-    }\n-    \n-    /**\n-     * When the left and/or right side of a comparisons like =, &lt;, &gt;, \n-     * &lt;= and &gt;= is a NodeSet (i.e. a collection), we are supposed to\n-     * perform a search for a pair of matching nodes. That's exactly what this\n-     * method does.  It takes a \"PairTest\" static object that implements the\n-     * comparison of two nodes.\n-     */\n-    protected boolean test(EvalContext context,\n-            Expression left,\n-            Expression right,\n-            NodeComparator pairTest)\n-    {\n-        Object l = left.compute(context);\n-        Object r = right.compute(context);\n-\n-//        System.err.println(\"COMPARING: \" +\n-//            (l == null ? \"null\" : l.getClass().getName()) + \" \" +\n-//            (r == null ? \"null\" : r.getClass().getName()));\n-\n-        if (l instanceof InitialContext || l instanceof SelfContext) {\n-            l = ((EvalContext) l).getSingleNodePointer().getValue();\n-        }\n-\n-        if (r instanceof InitialContext || r instanceof SelfContext) {\n-            r = ((EvalContext) r).getSingleNodePointer().getValue();\n-        }\n-\n-        if (ValueUtils.isCollection(l)) {\n-            l = ValueUtils.iterate(l);\n-        }\n-\n-        if (ValueUtils.isCollection(r)) {\n-            r = ValueUtils.iterate(r);\n-        }\n-\n-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n-            return contains((Iterator) l, r, pairTest);\n-        }\n-        else if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n-            Iterator it = (Iterator) r;\n-            while (it.hasNext()) {\n-                Object element = it.next();\n-                if (pairTest.isTrue(element, l)) {\n-                    return true;\n+            StringBuffer buffer = new StringBuffer();\n+            for (int i = 0; i < args.length; i++) {\n+                if (i > 0) {\n+                    buffer.append(' ');\n+                    buffer.append(getSymbol());\n+                    buffer.append(' ');\n                 }\n+                buffer.append(parenthesize(args[i], i == 0));\n             }\n-            return false;\n-        }\n-        else if (l instanceof Iterator && r instanceof Iterator) {\n-            return findMatch((Iterator) l, (Iterator) r, pairTest);\n-        }\n-\n-        return pairTest.isTrue(l, r);\n-    }\n-\n-    protected boolean contains(\n-        Iterator it,\n-        Object value,\n-        NodeComparator pairTest) \n-    {\n-        while (it.hasNext()) {\n-            Object element = it.next();\n-            if (pairTest.isTrue(element, value)) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    protected boolean findMatch(Iterator lit, Iterator rit, NodeComparator pairTest) {\n-        HashSet left = new HashSet();\n-        while (lit.hasNext()) {\n-            left.add(lit.next());\n-        }\n-        while (rit.hasNext()) {\n-            if (contains(left.iterator(), rit.next(), pairTest)) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private static abstract class NodeComparator {\n-        abstract boolean compare(Object left, Object right);\n-\n-        boolean isTrue(Object left, Object right){\n-            if (left instanceof Pointer) {\n-                left = ((Pointer) left).getValue();\n-            }\n-\n-            if (right instanceof Pointer) {\n-                right = ((Pointer) right).getValue();\n-            }\n-            return compare(left, right);\n+            return buffer.toString();\n         }\n     }\n     \n-    private static final NodeComparator EQUAL_TEST = new NodeComparator() {\n-        public boolean isTrue(Object l, Object r) {\n-            if (l instanceof Pointer && r instanceof Pointer) {\n-                if (l.equals(r)) {\n-                    return true;\n-                }\n+    private String parenthesize(Expression expression, boolean left) {\n+        if (!(expression instanceof CoreOperation)) {\n+            return expression.toString();\n+        }\n+        CoreOperation op = (CoreOperation) expression;\n+        int myPrecedence = getPrecedence();\n+        int thePrecedence = op.getPrecedence();\n+\n+        boolean needParens = true;\n+        if (myPrecedence < thePrecedence) {\n+            needParens = false;\n+        }\n+        else if (myPrecedence == thePrecedence) {\n+            if (isSymmetric()){\n+                needParens = false;\n             }\n-\n-            if (l instanceof Pointer) {\n-                l = ((Pointer) l).getValue();\n-            }\n-\n-            if (r instanceof Pointer) {\n-                r = ((Pointer) r).getValue();\n-            }\n-\n-            if (l == r) {\n-                return true;\n-            }\n-\n-            if (l instanceof Boolean || r instanceof Boolean) {\n-                return (\n-                    InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r));\n-            }\n-            else if (l instanceof Number || r instanceof Number) {\n-                return (\n-                    InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r));\n-            }\n-            else if (l instanceof String || r instanceof String) {\n-                return (\n-                    InfoSetUtil.stringValue(l).equals(\n-                        InfoSetUtil.stringValue(r)));\n-            }\n-            else if (l == null) {\n-                return r == null;\n-            }\n-            return l.equals(r);\n-        }\n-        \n-        boolean compare(Object left, Object right){\n-            // Not used\n-            return false;\n-        }\n-    };\n-\n-    private static final NodeComparator LT_TEST = new NodeComparator() {\n-        public boolean compare(Object l, Object r) {\n-            return InfoSetUtil.doubleValue(l) < InfoSetUtil.doubleValue(r);\n-        }\n-    };\n-    \n-    private static final NodeComparator GT_TEST = new NodeComparator() {\n-        public boolean compare(Object l, Object r) {\n-            return InfoSetUtil.doubleValue(l) > InfoSetUtil.doubleValue(r);\n-        }\n-    };\n-    \n-    private static final NodeComparator LTE_TEST = new NodeComparator() {\n-        public boolean compare(Object l, Object r) {\n-            return InfoSetUtil.doubleValue(l) <= InfoSetUtil.doubleValue(r);\n-        }\n-    };\n-\n-    private static final NodeComparator GTE_TEST = new NodeComparator() {\n-        public boolean compare(Object l, Object r) {\n-            return InfoSetUtil.doubleValue(l) >= InfoSetUtil.doubleValue(r);\n-        }\n-    };\n-\n-    /**\n-     * Computes <code>\"left and right\"<code>\n-     */\n-    protected Object and(EvalContext context, Expression[] arguments) {\n-        for (int i = 0; i < arguments.length; i++) {\n-            if (!InfoSetUtil.booleanValue(arguments[i].computeValue(context))) {\n-                return Boolean.FALSE;\n+            else {\n+                needParens = !left;\n             }\n         }\n-        return Boolean.TRUE;\n-    }\n \n-    /**\n-     * Computes <code>\"left or right\"<code>\n-     */\n-    protected Object or(EvalContext context, Expression[] arguments) {\n-        for (int i = 0; i < arguments.length; i++) {\n-            if (InfoSetUtil.booleanValue(arguments[i].computeValue(context))) {\n-                return Boolean.TRUE;\n-            }\n+        if (needParens) {\n+            return \"(\" + expression.toString() + \")\";\n         }\n-        return Boolean.FALSE;\n-    }\n-    \n+        else {\n+            return expression.toString();\n+        }\n+    }    \n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAdd.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.compiler;\n+\n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n+\n+/**\n+ * Implementation of Expression for the operation \"+\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/01/19 23:59:24 $\n+ */\n+public class CoreOperationAdd extends CoreOperation {\n+\n+    public CoreOperationAdd(Expression[] args) {\n+        super(args);\n+    }\n+\n+    public Object computeValue(EvalContext context) {\n+        double s = 0.0;\n+        for (int i = 0; i < args.length; i++) {\n+            s += InfoSetUtil.doubleValue(args[i].computeValue(context));\n+        }\n+        return new Double(s);\n+    }\n+    \n+    protected int getPrecedence() {\n+        return 4;\n+    }\n+\n+    protected boolean isSymmetric() {\n+        return true;\n+    }\n+    \n+    public String getSymbol() {\n+        return \"+\";\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAnd.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.compiler;\n+\n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n+\n+/**\n+ * Implementation of Expression for the operation \"and\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/01/19 23:59:24 $\n+ */\n+public class CoreOperationAnd extends CoreOperation {\n+\n+    public CoreOperationAnd(Expression[] args) {\n+        super(args);\n+    }\n+\n+    public Object computeValue(EvalContext context) {\n+        for (int i = 0; i < args.length; i++) {\n+            if (!InfoSetUtil.booleanValue(args[i].computeValue(context))) {\n+                return Boolean.FALSE;\n+            }\n+        }\n+        return Boolean.TRUE;\n+    }\n+    \n+    protected int getPrecedence() {\n+        return 1;\n+    }\n+\n+    protected boolean isSymmetric() {\n+        return true;\n+    }\n+    \n+    public String getSymbol() {\n+        return \"and\";\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.compiler;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+\n+import org.apache.commons.jxpath.Pointer;\n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n+import org.apache.commons.jxpath.ri.axes.InitialContext;\n+import org.apache.commons.jxpath.ri.axes.SelfContext;\n+\n+/**\n+ * Common superclass for the implementations of Expression for the operations\n+ * \"=\" and \"!=\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/01/19 23:59:24 $\n+ */\n+public abstract class CoreOperationCompare extends CoreOperation {\n+\n+    public CoreOperationCompare(Expression arg1, Expression arg2) {\n+        super(new Expression[] { arg1, arg2 });\n+    }\n+\n+    /**\n+     * Compares two values\n+     */\n+    protected boolean equal(\n+        EvalContext context,\n+        Expression left,\n+        Expression right) \n+    {\n+        Object l = left.compute(context);\n+        Object r = right.compute(context);\n+\n+//        System.err.println(\"COMPARING: \" +\n+//            (l == null ? \"null\" : l.getClass().getName()) + \" \" +\n+//            (r == null ? \"null\" : r.getClass().getName()));\n+\n+        if (l instanceof InitialContext || l instanceof SelfContext) {\n+            l = ((EvalContext) l).getSingleNodePointer();\n+        }\n+\n+        if (r instanceof InitialContext || r instanceof SelfContext) {\n+            r = ((EvalContext) r).getSingleNodePointer();\n+        }\n+\n+        if (l instanceof Collection) {\n+            l = ((Collection) l).iterator();\n+        }\n+\n+        if (r instanceof Collection) {\n+            r = ((Collection) r).iterator();\n+        }\n+\n+        if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n+            return contains((Iterator) l, r);\n+        }\n+        else if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n+            return contains((Iterator) r, l);\n+        }\n+        else if (l instanceof Iterator && r instanceof Iterator) {\n+            return findMatch((Iterator) l, (Iterator) r);\n+        }\n+\n+        return equal(l, r);\n+    }\n+\n+    protected boolean contains(Iterator it, Object value) {\n+        while (it.hasNext()) {\n+            Object element = it.next();\n+            if (equal(element, value)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    protected boolean findMatch(Iterator lit, Iterator rit) {\n+        HashSet left = new HashSet();\n+        while (lit.hasNext()) {\n+            left.add(lit.next());\n+        }\n+        while (rit.hasNext()) {\n+            if (contains(left.iterator(), rit.next())) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    protected boolean equal(Object l, Object r) {\n+        if (l instanceof Pointer && r instanceof Pointer) {\n+            if (l.equals(r)) {\n+                return true;\n+            }\n+        }\n+\n+        if (l instanceof Pointer) {\n+            l = ((Pointer) l).getValue();\n+        }\n+\n+        if (r instanceof Pointer) {\n+            r = ((Pointer) r).getValue();\n+        }\n+\n+        if (l == r) {\n+            return true;\n+        }\n+\n+//        System.err.println(\"COMPARING VALUES: \" + l + \" \" + r);\n+        if (l instanceof Boolean || r instanceof Boolean) {\n+            return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r));\n+        }\n+        else if (l instanceof Number || r instanceof Number) {\n+            return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r));\n+        }\n+        else if (l instanceof String || r instanceof String) {\n+            return (\n+                InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r)));\n+        }\n+        else if (l == null) {\n+            return r == null;\n+        }\n+        return l.equals(r);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationDivide.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.compiler;\n+\n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n+\n+/**\n+ * Implementation of Expression for the operation \"div\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/01/19 23:59:24 $\n+ */\n+public class CoreOperationDivide extends CoreOperation {\n+\n+    public CoreOperationDivide(Expression arg1, Expression arg2) {\n+        super(new Expression[] { arg1, arg2 });\n+    }\n+\n+    public Object computeValue(EvalContext context) {\n+        double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n+        double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n+        return new Double(l / r);\n+    }\n+    \n+    protected int getPrecedence() {\n+        return 5;\n+    }\n+\n+    protected boolean isSymmetric() {\n+        return false;\n+    }\n+    \n+    public String getSymbol() {\n+        return \"div\";\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.compiler;\n+\n+import org.apache.commons.jxpath.ri.EvalContext;\n+\n+/**\n+ * Implementation of Expression for the operation \"=\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/01/19 23:59:24 $\n+ */\n+public class CoreOperationEqual extends CoreOperationCompare {\n+\n+    public CoreOperationEqual(Expression arg1, Expression arg2) {\n+        super(arg1, arg2);\n+    }\n+\n+    public Object computeValue(EvalContext context) {\n+        return equal(context, args[0], args[1]) ? Boolean.TRUE : Boolean.FALSE;\n+    }\n+    \n+    protected int getPrecedence() {\n+        return 2;\n+    }\n+\n+    protected boolean isSymmetric() {\n+        return true;\n+    }\n+    \n+    public String getSymbol() {\n+        return \"=\";\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.compiler;\n+\n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n+\n+/**\n+ * Implementation of Expression for the operation \"&gt;\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/01/19 23:59:24 $\n+ */\n+public class CoreOperationGreaterThan extends CoreOperation {\n+\n+    public CoreOperationGreaterThan(Expression arg1, Expression arg2) {\n+        super(new Expression[] { arg1, arg2 });\n+    }\n+\n+    public Object computeValue(EvalContext context) {\n+        double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n+        double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n+        return l > r ? Boolean.TRUE : Boolean.FALSE;\n+    }\n+    \n+    protected int getPrecedence() {\n+        return 3;\n+    }\n+\n+    protected boolean isSymmetric() {\n+        return false;\n+    }\n+    \n+    public String getSymbol() {\n+        return \">\";\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.compiler;\n+\n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n+\n+/**\n+ * Implementation of Expression for the operation \"&gt;=\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/01/19 23:59:24 $\n+ */\n+public class CoreOperationGreaterThanOrEqual extends CoreOperation {\n+\n+    public CoreOperationGreaterThanOrEqual(Expression arg1, Expression arg2) {\n+        super(new Expression[] { arg1, arg2 });\n+    }\n+\n+    public Object computeValue(EvalContext context) {\n+        double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n+        double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n+        return l >= r ? Boolean.TRUE : Boolean.FALSE;\n+    }\n+    \n+    protected int getPrecedence() {\n+        return 3;\n+    }\n+\n+    protected boolean isSymmetric() {\n+        return false;\n+    }\n+    \n+    public String getSymbol() {\n+        return \">=\";\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.compiler;\n+\n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n+\n+/**\n+ * Implementation of Expression for the operation \"&lt;\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/01/19 23:59:24 $\n+ */\n+public class CoreOperationLessThan extends CoreOperation {\n+\n+    public CoreOperationLessThan(Expression arg1, Expression arg2) {\n+        super(new Expression[] { arg1, arg2 });\n+    }\n+\n+    public Object computeValue(EvalContext context) {\n+        double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n+        double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n+        return l < r ? Boolean.TRUE : Boolean.FALSE;\n+    }\n+    \n+    protected int getPrecedence() {\n+        return 3;\n+    }\n+\n+    protected boolean isSymmetric() {\n+        return false;\n+    }\n+    \n+    public String getSymbol() {\n+        return \"<\";\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.compiler;\n+\n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n+\n+/**\n+ * Implementation of Expression for the operation \"&lt;=\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/01/19 23:59:24 $\n+ */\n+public class CoreOperationLessThanOrEqual extends CoreOperation {\n+\n+    public CoreOperationLessThanOrEqual(Expression arg1, Expression arg2) {\n+        super(new Expression[] { arg1, arg2 });\n+    }\n+\n+    public Object computeValue(EvalContext context) {\n+        double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n+        double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n+        return l <= r ? Boolean.TRUE : Boolean.FALSE;\n+    }\n+    \n+    protected int getPrecedence() {\n+        return 3;\n+    }\n+\n+    protected boolean isSymmetric() {\n+        return false;\n+    }\n+    \n+    public String getSymbol() {\n+        return \"<=\";\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMod.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.compiler;\n+\n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n+\n+/**\n+ * Implementation of Expression for the operation \"mod\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/01/19 23:59:24 $\n+ */\n+public class CoreOperationMod extends CoreOperation {\n+\n+    public CoreOperationMod(Expression arg1, Expression arg2) {\n+        super(new Expression[] { arg1, arg2 });\n+    }\n+\n+    public Object computeValue(EvalContext context) {\n+        long l = (long) InfoSetUtil.doubleValue(args[0].computeValue(context));\n+        long r = (long) InfoSetUtil.doubleValue(args[1].computeValue(context));\n+        return new Double(l % r);\n+    }\n+    \n+    protected int getPrecedence() {\n+        return 5;\n+    }\n+\n+    protected boolean isSymmetric() {\n+        return false;\n+    }\n+    \n+    public String getSymbol() {\n+        return \"mod\";\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMultiply.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.compiler;\n+\n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n+\n+/**\n+ * Implementation of Expression for the operation \"*\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/01/19 23:59:24 $\n+ */\n+public class CoreOperationMultiply extends CoreOperation {\n+\n+    public CoreOperationMultiply(Expression arg1, Expression arg2) {\n+        super(new Expression[] { arg1, arg2 });\n+    }\n+\n+    public Object computeValue(EvalContext context) {\n+        double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n+        double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n+        return new Double(l * r);\n+    }\n+    \n+    protected int getPrecedence() {\n+        return 5;\n+    }\n+\n+    protected boolean isSymmetric() {\n+        return true;\n+    }\n+    \n+    public String getSymbol() {\n+        return \"*\";\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNegate.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.compiler;\n+\n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n+\n+/**\n+ * Implementation of Expression for the operation unary \"-\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/01/19 23:59:24 $\n+ */\n+public class CoreOperationNegate extends CoreOperation {\n+\n+    public CoreOperationNegate(Expression arg) {\n+        super(new Expression[] { arg });\n+    }\n+\n+    public Object computeValue(EvalContext context) {\n+        double a = InfoSetUtil.doubleValue(args[0].computeValue(context));\n+        return new Double(-a);\n+    }\n+    \n+    protected int getPrecedence() {\n+        return 6;\n+    }\n+\n+    protected boolean isSymmetric() {\n+        return false;\n+    }\n+    \n+    public String getSymbol() {\n+        return \"-\";\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.compiler;\n+\n+import org.apache.commons.jxpath.ri.EvalContext;\n+\n+/**\n+ * Implementation of Expression for the operation \"!=\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/01/19 23:59:24 $\n+ */\n+public class CoreOperationNotEqual extends CoreOperationCompare {\n+\n+    public CoreOperationNotEqual(Expression arg1, Expression arg2) {\n+        super(arg1, arg2);\n+    }\n+\n+    public Object computeValue(EvalContext context) {\n+        return equal(context, args[0], args[1]) ? Boolean.FALSE : Boolean.TRUE;\n+    }\n+    \n+    protected int getPrecedence() {\n+        return 2;\n+    }\n+\n+    protected boolean isSymmetric() {\n+        return true;\n+    }\n+    \n+    public String getSymbol() {\n+        return \"!=\";\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationOr.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.compiler;\n+\n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n+\n+/**\n+ * Implementation of Expression for the operation \"or\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/01/19 23:59:24 $\n+ */\n+public class CoreOperationOr extends CoreOperation {\n+\n+    public CoreOperationOr(Expression[] args) {\n+        super(args);\n+    }\n+\n+    public Object computeValue(EvalContext context) {\n+        for (int i = 0; i < args.length; i++) {\n+            if (InfoSetUtil.booleanValue(args[i].computeValue(context))) {\n+                return Boolean.TRUE;\n+            }\n+        }\n+        return Boolean.FALSE;\n+    }\n+    \n+    protected int getPrecedence() {\n+        return 0;\n+    }\n+\n+    protected boolean isSymmetric() {\n+        return true;\n+    }\n+    \n+    public String getSymbol() {\n+        return \"or\";\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationSubtract.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.compiler;\n+\n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n+\n+/**\n+ * Implementation of Expression for the operation \"-\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/01/19 23:59:24 $\n+ */\n+public class CoreOperationSubtract extends CoreOperation {\n+\n+    public CoreOperationSubtract(Expression arg1, Expression arg2) {\n+        super(new Expression[] { arg1, arg2 });\n+    }\n+\n+    public Object computeValue(EvalContext context) {\n+        double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n+        double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n+        return new Double(l - r);\n+    }\n+    \n+    protected int getPrecedence() {\n+        return 4;\n+    }\n+\n+    protected boolean isSymmetric() {\n+        return false;\n+    }\n+    \n+    public String getSymbol() {\n+        return \"-\";\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationUnion.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.compiler;\n+\n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.axes.UnionContext;\n+\n+/**\n+ * Implementation of Expression for the operation \"|\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2003/01/19 23:59:24 $\n+ */\n+public class CoreOperationUnion extends CoreOperation {\n+\n+    public CoreOperationUnion(Expression args[]) {\n+        super(args);\n+    }\n+\n+    public Object computeValue(EvalContext context) {\n+        EvalContext argCtxs[] = new EvalContext[args.length];\n+        for (int i = 0; i < args.length; i++) {\n+            Object value = args[i].compute(context);\n+            if (value instanceof EvalContext) {\n+                argCtxs[i] = (EvalContext) value;\n+            }\n+            else {\n+                argCtxs[i] = context.getRootContext().getConstantContext(value);\n+            }\n+        }\n+        return new UnionContext(context.getRootContext(), argCtxs);\n+    }\n+    \n+    protected int getPrecedence() {\n+        return 7;\n+    }\n+\n+    protected boolean isSymmetric() {\n+        return true;\n+    }\n+    \n+    public String getSymbol() {\n+        return \"|\";\n+    }\n+}\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java,v 1.4 2003/01/11 05:41:23 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/01/11 05:41:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java,v 1.5 2003/01/19 23:59:24 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2003/01/19 23:59:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * provides that hint.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2003/01/11 05:41:23 $\n+ * @version $Revision: 1.5 $ $Date: 2003/01/19 23:59:24 $\n  */\n public abstract class Expression {\n-\n-    public static final int OP_SUM = 1;\n-    public static final int OP_MINUS = 2;\n-    public static final int OP_MULT = 3;\n-    public static final int OP_DIV = 4;\n-\n-    public static final int OP_CONSTANT = 5;\n-    public static final int OP_STEP = 6;\n-\n-    public static final int OP_AND = 7;\n-    public static final int OP_OR = 8;\n-\n-    public static final int OP_UNARY_MINUS = 9;\n-    public static final int OP_MOD = 10;\n-\n-    public static final int OP_LT = 11;\n-    public static final int OP_GT = 12;\n-    public static final int OP_LTE = 13;\n-    public static final int OP_GTE = 14;\n-    public static final int OP_EQ = 15;\n-    public static final int OP_NE = 16;\n-\n-    public static final int OP_VAR = 17;\n-\n-    public static final int OP_FUNCTION = 18;\n-\n-    public static final int OP_UNION = 19;\n-    public static final int OP_LOCATION_PATH = 20;\n-    public static final int OP_EXPRESSION_PATH = 21;\n-\n-    public static final int OP_CORE_FUNCTION = 22;\n-\n-    public static final int OP_KEY_LOOKUP = 23;\n \n     protected static final Double ZERO = new Double(0);\n     protected static final Double ONE = new Double(1);\n     protected static final Double NOT_A_NUMBER = new Double(Double.NaN);\n \n-    private int typeCode;\n-\n     private boolean contextDependencyKnown = false;\n     private boolean contextDependent;\n-\n-    protected Expression(int typeCode) {\n-        this.typeCode = typeCode;\n-    }\n-\n-    public int getExpressionTypeCode() {\n-        return typeCode;\n-    }\n-\n-    protected Expression[] getArguments() {\n-        return null;\n-    }\n \n     /**\n      * Returns true if this expression should be re-evaluated\n      * Implemented by subclasses and result is cached by isContextDependent()\n      */\n     public abstract boolean computeContextDependent();\n-\n-    public String toString() {\n-        StringBuffer buffer = new StringBuffer();\n-        buffer.append('(');\n-        buffer.append(opCodeToString());\n-        Expression args[] = getArguments();\n-        if (args != null) {\n-            buffer.append(' ');\n-            for (int i = 0; i < args.length; i++) {\n-                if (i > 0) {\n-                    buffer.append(\", \");\n-                }\n-                buffer.append(args[i]);\n-            }\n-        }\n-        buffer.append(')');\n-        return buffer.toString();\n-    }\n-\n-    protected String opCodeToString() {\n-        switch(typeCode) {\n-            case OP_CONSTANT: return \"CONST\";\n-            case OP_STEP: return \"STEP\";\n-            case OP_SUM: return \"SUM\";\n-            case OP_UNION: return \"UNION\";\n-            case OP_MINUS: return \"MINUS\";\n-            case OP_UNARY_MINUS: return \"UNARY_MINUS\";\n-            case OP_MULT: return \"MULT\";\n-            case OP_DIV: return \"DIV\";\n-            case OP_MOD: return \"MOD\";\n-            case OP_AND: return \"AND\";\n-            case OP_OR: return \"OR\";\n-            case OP_LT: return \"LT\";\n-            case OP_GT: return \"GT\";\n-            case OP_LTE: return \"LTE\";\n-            case OP_GTE: return \"GTE\";\n-            case OP_EQ: return \"EQ\";\n-            case OP_NE: return \"NE\";\n-            case OP_VAR: return \"VAR\";\n-            case OP_FUNCTION: return \"FUNCTION\";\n-            case OP_LOCATION_PATH: return \"LOCATION_PATH\";\n-            case OP_EXPRESSION_PATH: return \"EXPRESSION_PATH\";\n-            case OP_CORE_FUNCTION: return \"CORE_FUNCTION\";\n-        }\n-        return \"UNKNOWN\";\n-    }\n \n     /**\n      * Evaluates the expression. If the result is a node set, returns\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/ExpressionPath.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/ExpressionPath.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/ExpressionPath.java,v 1.6 2003/01/11 05:41:23 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2003/01/11 05:41:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/ExpressionPath.java,v 1.7 2003/01/19 23:59:24 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2003/01/19 23:59:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * /bar</code>.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2003/01/11 05:41:23 $\n+ * @version $Revision: 1.7 $ $Date: 2003/01/19 23:59:24 $\n  */\n public class ExpressionPath extends Path {\n \n         Expression[] predicates,\n         Step[] steps) \n     {\n-        super(Expression.OP_EXPRESSION_PATH, steps);\n+        super(steps);\n         this.expression = expression;\n         this.predicates = predicates;\n     }\n \n     public String toString() {\n         StringBuffer buffer = new StringBuffer();\n-        buffer.append(\"(EXPRESSION-PATH \");\n-        buffer.append(expression);\n-\n+        if (expression instanceof CoreOperation\n+            || expression instanceof ExpressionPath\n+            || expression instanceof LocationPath) {\n+            buffer.append('(');\n+            buffer.append(expression);\n+            buffer.append(')');\n+        }\n+        else {\n+            buffer.append(expression);\n+        }\n         if (predicates != null) {\n-            buffer.append(' ');\n             for (int i = 0; i < predicates.length; i++) {\n                 buffer.append('[');\n                 buffer.append(predicates[i]);\n \n         Step steps[] = getSteps();\n         if (steps != null) {\n-            buffer.append(' ');\n             for (int i = 0; i < steps.length; i++) {\n-                if (i > 0) {\n-                    buffer.append(\", \");\n-                }\n+                buffer.append(\"/\");\n                 buffer.append(steps[i]);\n             }\n         }\n-        buffer.append(')');\n         return buffer.toString();\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunction.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunction.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunction.java,v 1.6 2003/01/11 05:41:23 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2003/01/11 05:41:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunction.java,v 1.7 2003/01/19 23:59:24 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2003/01/19 23:59:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * call.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2003/01/11 05:41:23 $\n+ * @version $Revision: 1.7 $ $Date: 2003/01/19 23:59:24 $\n  */\n public class ExtensionFunction extends Operation {\n \n     private QName functionName;\n \n     public ExtensionFunction(QName functionName, Expression args[]) {\n-        super(Expression.OP_FUNCTION, args);\n+        super(args);\n         this.functionName = functionName;\n     }\n \n         return true;\n     }\n \n-    public String opCodeToString() {\n-        return super.opCodeToString() + ':' + functionName;\n+    public String toString() {\n+        StringBuffer buffer = new StringBuffer();\n+        buffer.append(functionName);\n+        buffer.append('(');\n+        Expression args[] = getArguments();\n+        if (args != null) {\n+            for (int i = 0; i < args.length; i++) {\n+                if (i > 0) {\n+                    buffer.append(\", \");\n+                }\n+                buffer.append(args[i]);\n+            }\n+        }\n+        buffer.append(')');\n+        return buffer.toString();\n     }\n-\n+    \n     public Object compute(EvalContext context) {\n         return computeValue(context);\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/LocationPath.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/LocationPath.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/LocationPath.java,v 1.6 2003/01/11 05:41:23 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2003/01/11 05:41:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/LocationPath.java,v 1.7 2003/01/19 23:59:24 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2003/01/19 23:59:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2003/01/11 05:41:23 $\n+ * @version $Revision: 1.7 $ $Date: 2003/01/19 23:59:24 $\n  */\n public class LocationPath extends Path {\n \n     private boolean absolute;\n \n     public LocationPath(boolean absolute, Step[] steps) {\n-        super(Expression.OP_LOCATION_PATH, steps);\n+        super(steps);\n         this.absolute = absolute;\n     }\n \n \n     public String toString() {\n         StringBuffer buffer = new StringBuffer();\n-        buffer.append(\"(PATH\");\n-        if (absolute) {\n-            buffer.append(\"[absolute] \");\n-        }\n-        else {\n-            buffer.append(\"[relative] \");\n-        }\n-        Step args[] = getSteps();\n-        if (args != null) {\n-            buffer.append(' ');\n-            for (int i = 0; i < args.length; i++) {\n-                if (i > 0) {\n-                    buffer.append(\", \");\n+        Step steps[] = getSteps();\n+        if (steps != null) {\n+            for (int i = 0; i < steps.length; i++) {\n+                if (i > 0 || absolute) {\n+                    buffer.append('/');\n                 }\n-                buffer.append(args[i]);\n+                buffer.append(steps[i]);\n             }\n         }\n-        buffer.append(')');\n         return buffer.toString();\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/compiler/NameAttributeTest.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/NameAttributeTest.java\n  * or maps.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2003/01/11 05:41:23 $\n+ * @version $Revision: 1.4 $ $Date: 2003/01/19 23:59:24 $\n  */\n-public class NameAttributeTest extends CoreOperation {\n+public class NameAttributeTest extends CoreOperationEqual {\n \n     public NameAttributeTest(Expression namePath, Expression nameValue) {\n-        super(OP_EQ, namePath, nameValue);\n+        super(namePath, nameValue);\n     }\n \n     public Expression getNameTestExpression() {\n-        return getArg2();\n+        return args[1];\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/NodeNameTest.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/NodeNameTest.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/NodeNameTest.java,v 1.5 2003/01/11 05:41:23 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2003/01/11 05:41:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/NodeNameTest.java,v 1.6 2003/01/19 23:59:24 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2003/01/19 23:59:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2003/01/11 05:41:23 $\n+ * @version $Revision: 1.6 $ $Date: 2003/01/19 23:59:24 $\n  */\n public class NodeNameTest extends NodeTest {\n     private QName qname;\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/NodeTypeTest.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/NodeTypeTest.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/NodeTypeTest.java,v 1.4 2003/01/11 05:41:23 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/01/11 05:41:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/NodeTypeTest.java,v 1.5 2003/01/19 23:59:24 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2003/01/19 23:59:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2003/01/11 05:41:23 $\n+ * @version $Revision: 1.5 $ $Date: 2003/01/19 23:59:24 $\n  */\n public class NodeTypeTest extends NodeTest {\n     private int nodeType;\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/Operation.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/Operation.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/Operation.java,v 1.4 2003/01/11 05:41:23 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/01/11 05:41:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/Operation.java,v 1.5 2003/01/19 23:59:24 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2003/01/19 23:59:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2003/01/11 05:41:23 $\n+ * @version $Revision: 1.5 $ $Date: 2003/01/19 23:59:24 $\n  */\n public abstract class Operation extends Expression {\n \n     protected Expression args[];\n \n-    public Operation(int code, Expression args[]) {\n-        super(code);\n+    public Operation(Expression args[]) {\n         this.args = args;\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/compiler/Path.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/Path.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/Path.java,v 1.7 2003/01/11 05:41:23 dmitri Exp $\n- * $Revision: 1.7 $\n- * $Date: 2003/01/11 05:41:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/Path.java,v 1.8 2003/01/19 23:59:24 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2003/01/19 23:59:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2003/01/11 05:41:23 $\n+ * @version $Revision: 1.8 $ $Date: 2003/01/19 23:59:24 $\n  */\n public abstract class Path extends Expression {\n \n     private boolean basicKnown = false;\n     private boolean basic;\n \n-    public Path(int typeCode, Step[] steps) {\n-        super(typeCode);\n+    public Path(Step[] steps) {\n         this.steps = steps;\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/compiler/ProcessingInstructionTest.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/ProcessingInstructionTest.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/ProcessingInstructionTest.java,v 1.4 2003/01/11 05:41:23 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/01/11 05:41:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/ProcessingInstructionTest.java,v 1.5 2003/01/19 23:59:24 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2003/01/19 23:59:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2003/01/11 05:41:23 $\n+ * @version $Revision: 1.5 $ $Date: 2003/01/19 23:59:24 $\n  */\n public class ProcessingInstructionTest extends NodeTest {\n     private String target;\n     }\n \n     public String toString() {\n-        return \"processing-instruction(\" + target + \")\";\n+        return \"processing-instruction('\" + target + \"')\";\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/Step.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/Step.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/Step.java,v 1.5 2003/01/11 05:41:23 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2003/01/11 05:41:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/Step.java,v 1.6 2003/01/19 23:59:24 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2003/01/19 23:59:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2003/01/11 05:41:23 $\n+ * @version $Revision: 1.6 $ $Date: 2003/01/19 23:59:24 $\n  */\n public class Step {\n     private int axis;\n \n     public String toString() {\n         StringBuffer buffer = new StringBuffer();\n-        buffer.append(axisToString(getAxis()));\n-        buffer.append(\"::\");\n-        buffer.append(nodeTest);\n+        int axis = getAxis();\n+        if (axis == Compiler.AXIS_CHILD) {\n+            buffer.append(nodeTest);\n+        }\n+        else if (axis == Compiler.AXIS_ATTRIBUTE) {\n+            buffer.append('@');\n+            buffer.append(nodeTest);\n+        }\n+        else if (axis == Compiler.AXIS_SELF\n+                && nodeTest instanceof NodeTypeTest\n+                && ((NodeTypeTest) nodeTest).getNodeType()\n+                    == Compiler.NODE_TYPE_NODE) {\n+            buffer.append(\".\");\n+        }\n+        else if (axis == Compiler.AXIS_PARENT\n+                && nodeTest instanceof NodeTypeTest\n+                && ((NodeTypeTest) nodeTest).getNodeType()\n+                    == Compiler.NODE_TYPE_NODE) {\n+            buffer.append(\"..\");\n+        }\n+        else if (axis == Compiler.AXIS_DESCENDANT_OR_SELF\n+                && nodeTest instanceof NodeTypeTest\n+                && ((NodeTypeTest) nodeTest).getNodeType()\n+                    == Compiler.NODE_TYPE_NODE \n+                && (predicates == null || predicates.length == 0)) {\n+            buffer.append(\"\");\n+        }\n+        else {\n+            buffer.append(axisToString(axis));\n+            buffer.append(\"::\");\n+            buffer.append(nodeTest);\n+        }\n         Expression[] predicates = getPredicates();\n         if (predicates != null) {\n             for (int i = 0; i < predicates.length; i++) {\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/TreeCompiler.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/TreeCompiler.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/TreeCompiler.java,v 1.6 2003/01/11 05:41:23 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2003/01/11 05:41:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/TreeCompiler.java,v 1.7 2003/01/19 23:59:24 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2003/01/19 23:59:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2003/01/11 05:41:23 $\n+ * @version $Revision: 1.7 $ $Date: 2003/01/19 23:59:24 $\n  */\n public class TreeCompiler implements Compiler {\n \n     }\n \n     public Object sum(Object[] arguments) {\n-        return new CoreOperation(\n-            Expression.OP_SUM,\n-            toExpressionArray(arguments));\n+        return new CoreOperationAdd(toExpressionArray(arguments));\n     }\n \n     public Object minus(Object left, Object right) {\n-        return new CoreOperation(\n-            Expression.OP_MINUS,\n+        return new CoreOperationSubtract(\n             (Expression) left,\n             (Expression) right);\n     }\n \n     public Object multiply(Object left, Object right) {\n-        return new CoreOperation(\n-            Expression.OP_MULT,\n-            (Expression) left,\n-            (Expression) right);\n+        return new CoreOperationMultiply((Expression) left, (Expression) right);\n     }\n \n     public Object divide(Object left, Object right) {\n-        return new CoreOperation(\n-            Expression.OP_DIV,\n-            (Expression) left,\n-            (Expression) right);\n+        return new CoreOperationDivide((Expression) left, (Expression) right);\n     }\n \n     public Object mod(Object left, Object right) {\n-        return new CoreOperation(\n-            Expression.OP_MOD,\n-            (Expression) left,\n-            (Expression) right);\n+        return new CoreOperationMod((Expression) left, (Expression) right);\n     }\n \n     public Object lessThan(Object left, Object right) {\n-        return new CoreOperation(\n-            Expression.OP_LT,\n-            (Expression) left,\n-            (Expression) right);\n+        return new CoreOperationLessThan((Expression) left, (Expression) right);\n     }\n \n     public Object lessThanOrEqual(Object left, Object right) {\n-        return new CoreOperation(\n-            Expression.OP_LTE,\n+        return new CoreOperationLessThanOrEqual(\n             (Expression) left,\n             (Expression) right);\n     }\n \n     public Object greaterThan(Object left, Object right) {\n-        return new CoreOperation(\n-            Expression.OP_GT,\n+        return new CoreOperationGreaterThan(\n             (Expression) left,\n             (Expression) right);\n     }\n \n     public Object greaterThanOrEqual(Object left, Object right) {\n-        return new CoreOperation(\n-            Expression.OP_GTE,\n+        return new CoreOperationGreaterThanOrEqual(\n             (Expression) left,\n             (Expression) right);\n     }\n             return new NameAttributeTest((Expression) left, (Expression) right);\n         }\n         else {\n-            return new CoreOperation(\n-                Expression.OP_EQ,\n+            return new CoreOperationEqual(\n                 (Expression) left,\n                 (Expression) right);\n         }\n     }\n \n     public Object notEqual(Object left, Object right) {\n-        return new CoreOperation(\n-            Expression.OP_NE,\n+        return new CoreOperationNotEqual(\n             (Expression) left,\n             (Expression) right);\n     }\n \n     public Object minus(Object argument) {\n-        return new CoreOperation(\n-            Expression.OP_UNARY_MINUS,\n-            (Expression) argument);\n+        return new CoreOperationNegate((Expression) argument);\n     }\n \n     public Object variableReference(Object qName) {\n     }\n \n     public Object and(Object arguments[]) {\n-        return new CoreOperation(\n-            Expression.OP_AND,\n+        return new CoreOperationAnd(\n             toExpressionArray(arguments));\n     }\n \n     public Object or(Object arguments[]) {\n-        return new CoreOperation(\n-            Expression.OP_OR,\n+        return new CoreOperationOr(\n             toExpressionArray(arguments));\n     }\n \n     public Object union(Object[] arguments) {\n-        return new CoreOperation(\n-            Expression.OP_UNION,\n+        return new CoreOperationUnion(\n             toExpressionArray(arguments));\n     }\n \n     }\n \n     private boolean isNameAttributeTest(Expression arg) {\n-        if (arg.getExpressionTypeCode() != Expression.OP_LOCATION_PATH) {\n+        if (!(arg instanceof LocationPath)) {\n             return false;\n         }\n \n--- a/src/java/org/apache/commons/jxpath/ri/compiler/VariableReference.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/VariableReference.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/VariableReference.java,v 1.5 2003/01/11 05:41:23 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2003/01/11 05:41:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/VariableReference.java,v 1.6 2003/01/19 23:59:24 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2003/01/19 23:59:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * An element of the compile tree holding a variable reference.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2003/01/11 05:41:23 $\n+ * @version $Revision: 1.6 $ $Date: 2003/01/19 23:59:24 $\n  */\n public class VariableReference extends Expression {\n \n     private QName varName;\n \n     public VariableReference(QName varName) {\n-        super(Expression.OP_VAR);\n         this.varName = varName;\n     }\n \n     }\n \n     public String toString() {\n-        return \"(VAR \" + varName + \")\";\n+        return \"$\" + varName;\n     }\n \n     public boolean isContextDependent() {", "timestamp": 1043020764, "metainfo": ""}