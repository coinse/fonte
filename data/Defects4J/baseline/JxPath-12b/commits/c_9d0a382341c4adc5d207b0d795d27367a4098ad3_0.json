{"sha": "9d0a382341c4adc5d207b0d795d27367a4098ad3", "log": "Fixed inheritance of functions and leniency Cached context factory   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/JXPathContext.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathContext.java,v 1.16 2003/03/11 00:59:12 dmitri Exp $\n- * $Revision: 1.16 $\n- * $Date: 2003/03/11 00:59:12 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathContext.java,v 1.17 2003/05/04 23:51:59 dmitri Exp $\n+ * $Revision: 1.17 $\n+ * $Date: 2003/05/04 23:51:59 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.16 $ $Date: 2003/03/11 00:59:12 $\n+ * @version $Revision: 1.17 $ $Date: 2003/05/04 23:51:59 $\n  */\n public abstract class JXPathContext {\n     protected JXPathContext parentContext;\n     protected Functions functions;\n     protected AbstractFactory factory;\n     protected Locale locale;\n+    protected boolean lenientSet = false;\n     protected boolean lenient = false;\n     protected IdentityManager idManager;\n     protected KeyManager keyManager;\n     protected HashMap decimalFormats;\n \n+    private static JXPathContextFactory contextFactory;\n     private static JXPathContext compilationContext;\n \n     /**\n      * Creates a new JXPathContext with the specified object as the root node.\n      */\n     public static JXPathContext newContext(Object contextBean) {\n-        return JXPathContextFactory.newInstance().newContext(null, contextBean);\n+        return getContextFactory().newContext(null, contextBean);\n     }\n \n     /**\n         JXPathContext parentContext,\n         Object contextBean) \n     {\n-        return JXPathContextFactory.newInstance().newContext(\n-            parentContext,\n-            contextBean);\n-    }\n-\n+        return getContextFactory().newContext(parentContext, contextBean);\n+    }\n+\n+    /**\n+     * Acquires a context factory and caches it. \n+     */\n+    private static JXPathContextFactory getContextFactory () {\n+        if (contextFactory == null) {\n+            contextFactory = JXPathContextFactory.newInstance();            \n+        }\n+        return contextFactory;\n+    }\n+    \n     /**\n      * This  constructor should remain protected - it is to be overridden by\n      * subclasses, but never explicitly invoked by clients.\n     public Object getContextBean() {\n         return contextBean;\n     }\n-\n+    \n     /**\n      * Returns a Pointer for the context bean.\n      */\n      */\n     public DecimalFormatSymbols getDecimalFormatSymbols(String name) {\n         if (decimalFormats == null) {\n+            if (parentContext != null) {\n+                return parentContext.getDecimalFormatSymbols(name);\n+            }\n             return null;\n         }\n         return (DecimalFormatSymbols) decimalFormats.get(name);\n      */\n     public void setLenient(boolean lenient) {\n         this.lenient = lenient;\n+        lenientSet = true;\n     }\n \n     /**\n      * @see #setLenient(boolean)\n      */\n     public boolean isLenient() {\n+        if (!lenientSet && parentContext != null) {\n+            return parentContext.isLenient();\n+        }\n         return lenient;\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.31 2003/03/25 02:41:33 dmitri Exp $\n- * $Revision: 1.31 $\n- * $Date: 2003/03/25 02:41:33 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.32 2003/05/04 23:51:59 dmitri Exp $\n+ * $Revision: 1.32 $\n+ * $Date: 2003/05/04 23:51:59 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * The reference implementation of JXPathContext.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.31 $ $Date: 2003/03/25 02:41:33 $\n+ * @version $Revision: 1.32 $ $Date: 2003/05/04 23:51:59 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext {\n     \n         return new JXPathContextReferenceImpl(this, contextBean, pointer);\n     }\n     \n-    public synchronized Pointer getContextPointer() {\n+    public Pointer getContextPointer() {\n         return contextPointer;\n     }\n \n-    private synchronized NodePointer getAbsoluteRootPointer() {\n+    private NodePointer getAbsoluteRootPointer() {\n         return (NodePointer) rootPointer;\n     }\n \n                 if (func != null) {\n                     return func;\n                 }\n-\n-                funcCtx = funcCtx.getParentContext();\n-            }\n-            else {\n-                break;\n-            }\n+            }\n+            funcCtx = funcCtx.getParentContext();\n         }\n         func = GENERIC_FUNCTIONS.getFunction(namespace, name, parameters);\n         if (func != null) {\n--- a/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java,v 1.13 2003/03/25 02:41:35 dmitri Exp $\n- * $Revision: 1.13 $\n- * $Date: 2003/03/25 02:41:35 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java,v 1.14 2003/05/04 23:51:59 dmitri Exp $\n+ * $Revision: 1.14 $\n+ * $Date: 2003/05/04 23:51:59 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import java.util.Locale;\n \n import org.apache.commons.jxpath.AbstractFactory;\n+import org.apache.commons.jxpath.ClassFunctions;\n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathTestCase;\n import org.apache.commons.jxpath.NestedTestBean;\n import org.apache.commons.jxpath.Pointer;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.compiler.NodeNameTest;\n+import org.apache.commons.jxpath.ri.compiler.TestFunctions;\n import org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer;\n import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;\n \n  * Abstract superclass for Bean access with JXPath.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.13 $ $Date: 2003/03/25 02:41:35 $\n+ * @version $Revision: 1.14 $ $Date: 2003/05/04 23:51:59 $\n  */\n \n public abstract class BeanModelTestCase extends JXPathTestCase {\n             new Integer(2), \n             \"/integers[2]\");\n     }\n+    \n+    public void testRelativeContextInheritance() {\n+        context.setFunctions(new ClassFunctions(TestFunctions.class, \"test\"));\n+        JXPathContext relative =\n+            context.getRelativeContext(context.getPointer(\"nestedBean\"));\n+        \n+        assertXPathValue(relative, \n+            \"test:countPointers(strings)\", \n+            new Integer(3));\n+    }\n }", "timestamp": 1052092319, "metainfo": ""}