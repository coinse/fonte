{"sha": "58b0867cf0cb12e44d319dbd5893dfa786670145", "log": "Tested changes   ", "commit": "\n--- a/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.19 2002/05/14 23:08:25 dmitri Exp $\n- * $Revision: 1.19 $\n- * $Date: 2002/05/14 23:08:25 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.20 2002/05/29 00:42:06 dmitri Exp $\n+ * $Revision: 1.20 $\n+ * $Date: 2002/05/29 00:42:06 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * </p>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.19 $ $Date: 2002/05/14 23:08:25 $\n+ * @version $Revision: 1.20 $ $Date: 2002/05/29 00:42:06 $\n  */\n \n public class JXPathTestCase extends TestCase\n         testGetValue(context, \"2 + 3\",                  Boolean.TRUE, boolean.class);\n         testGetValue(context, \"'true'\",                 Boolean.TRUE, Boolean.class);\n \n+        Map tm = new HashMap();\n+        tm.put(\"bar\", \"zz\");\n+        bean.getMap().put(\"foo\", new Map[]{tm, tm});\n+        testGetValue(context, \"map/foo[2]/bar/../bar\", \"zz\");\n+\n         boolean exception = false;\n         try {\n             testGetValue(context, \"'foo'\",              null, Date.class);\n         }\n         assertTrue(\"Type conversion exception\", exception);\n     }\n+\n+    /**\n+     * Test JXPath.iterate() with various arguments\n+     */\n+    public void testIterate(){\n+        if (!enabled){\n+            return;\n+        }\n+        Map map = new HashMap();\n+        map.put(\"foo\", new String[]{\"a\", \"b\", \"c\"});\n+        JXPathContext context = JXPathContext.newContext(map);\n+        testIterate(context, \"foo\", list(\"a\", \"b\", \"c\"));\n+\n+//        context = JXPathContext.newContext(bean);\n+//        testIterate(context, \"nestedBean/strings[2]/following::node()\", null);\n+    }\n+\n+    private void testIterate(JXPathContext context, String xpath, List expected) {\n+        Iterator it = context.iterate(xpath);\n+        List actual = new ArrayList();\n+        while (it.hasNext()){\n+            actual.add(it.next());\n+        }\n+        assertEquals(\"Iterating <\" + xpath + \">\", expected, actual);\n+    }\n+\n \n     /**\n      * Test JXPath.getValue() with variables\n     }\n \n     static final XP[] xpath_tests = new XP[]{\n-/*\n+\n         // Numbers\n         test(\"1\", new Double(1.0)),\n         testEval(\"1\", list(new Double(1.0))),\n         test(\"self::node() = /\", Boolean.TRUE),\n         test(\"self::root = /\", Boolean.TRUE),\n \n-        // Union\n+        // Union - note corrected document order\n         testEval(\"integers | beans[1]/strings\",\n-            list(new Integer(1), new Integer(2), new Integer(3), new Integer(4), \"String 1\", \"String 2\", \"String 3\")),\n+            list(\"String 1\", \"String 2\", \"String 3\",\n+              new Integer(1), new Integer(2), new Integer(3), new Integer(4))),\n \n         test(\"count((integers | beans[1]/strings)[contains(., '1')])\", new Double(2)),\n         test(\"count((integers | beans[1]/strings)[name(.) = 'strings'])\", new Double(3)),\n \n         test(\"name(integers)\", \"integers\"),\n         testEval(\"*[name(.) = 'integers']\", list(new Integer(1), new Integer(2), new Integer(3), new Integer(4))),\n-*/\n+\n         // Dynamic properties\n         test(\"nestedBean[@name = 'int']\", new Integer(1)),    // Not implemented in Xalan\n         testPath(\"nestedBean[@name = 'int']\", \"/nestedBean/int\"),\n         testPath(\"$test/object/vendor/location[1]//street\", \"$test/object/vendor[1]/location[1]/address[1]/street[1]\"),\n         test(\"$object//street\", \"Orchard Road\"),\n         testPath(\"$object//street\", \"$object/vendor[1]/location[1]/address[1]/street[1]\"),\n+\n+        testEval(\"vendor/contact/following::location//street\",\n+            list(\"Orchard Road\", \"Tangerine Drive\")),\n     };\n \n     public void testTypeConversions(){", "timestamp": 1022632927, "metainfo": ""}