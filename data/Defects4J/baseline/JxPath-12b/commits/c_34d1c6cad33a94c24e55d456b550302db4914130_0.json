{"sha": "34d1c6cad33a94c24e55d456b550302db4914130", "log": "Improved error reporting   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/JXPathException.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathException.java,v 1.1 2002/04/26 03:28:36 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/04/26 03:28:36 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath;\n+\n+/**\n+ * Thrown in various situations by JXPath; may contain a nested exception.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2002/04/26 03:28:36 $\n+ */\n+\n+public class JXPathException extends RuntimeException {\n+\n+    /** @serial */\n+    private Throwable exception;\n+\n+    /**\n+     * Create a new <code>JXPathException</code> with no\n+     * detail mesage.\n+     */\n+\n+     public JXPathException() {\n+         super();\n+         this.exception = null;\n+     }\n+\n+    /**\n+     * Create a new <code>JXPathException</code> with\n+     * the <code>String </code> specified as an error message.\n+     *\n+     * @param msg The error message for the exception.\n+     */\n+    public JXPathException(String msg) {\n+        super(msg);\n+        this.exception = null;\n+    }\n+\n+\n+    /**\n+     * Create a new <code>JXPathException</code> with a\n+     * given <code>Throwable</code> base cause of the error.\n+     *\n+     * @param e The exception to be encapsulated in a\n+     * JXPathException.\n+     */\n+    public JXPathException(Throwable e) {\n+        super(e.toString());\n+        this.exception = e;\n+    }\n+\n+    /**\n+     * Create a new <code>JXPathException</code> with the\n+     * given <code>Exception</code> base cause and detail message.\n+     *\n+     * @param e The exception to be encapsulated in a\n+     * JXPathException\n+     * @param msg The detail message.\n+     */\n+    public JXPathException(String msg, Throwable e) {\n+        super(msg);\n+        this.exception = e;\n+    }\n+\n+\n+    /**\n+     * Return the message (if any) for this error . If there is no\n+     * message for the exception and there is an encapsulated\n+     * exception then the message of that exception will be returned.\n+     *\n+     * @return The error message.\n+     */\n+    public String getMessage () {\n+        String message = super.getMessage ();\n+\n+        if (exception != null) {\n+            if (message == null){\n+                if (exception.getMessage() != null){\n+                    return exception.getMessage();\n+                }\n+                else {\n+                    return exception.getClass().getName();\n+                }\n+            }\n+            else {\n+                if (exception.getMessage() != null){\n+                    return message + \"; \" + exception.getMessage();\n+                }\n+                else {\n+                    return message + \"; \" + exception.getClass().getName();\n+                }\n+            }\n+        }\n+\n+        return message;\n+    }\n+\n+    /**\n+     * Return the actual exception (if any) that caused this exception to\n+     * be raised.\n+     *\n+     * @return The encapsulated exception, or null if there is none.\n+     */\n+    public Throwable getException () {\n+        return exception;\n+    }\n+}\n--- a/src/java/org/apache/commons/jxpath/PackageFunctions.java\n+++ b/src/java/org/apache/commons/jxpath/PackageFunctions.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/PackageFunctions.java,v 1.4 2002/04/24 03:29:33 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/04/24 03:29:33 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/PackageFunctions.java,v 1.5 2002/04/26 03:28:36 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/04/26 03:28:36 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/04/24 03:29:33 $\n+ * @version $Revision: 1.5 $ $Date: 2002/04/26 03:28:36 $\n  */\n public class PackageFunctions implements Functions {\n     private String classPrefix;\n      * <li><b>subpackage.subpackage.Classname.new</b>, if looking for a constructor in\n      *      a subpackage</li>\n      * <li><b>Classname.methodname</b>, if looking for a static method</li>\n-     * <li><b>subpackage.subpackage.Classname.methodname</b>, if looking for a \n+     * <li><b>subpackage.subpackage.Classname.methodname</b>, if looking for a\n      *      static method of a class in a subpackage</li>\n      * </ul>\n-     * \n+     *\n      * @return a MethodFunction, a ConstructorFunction or null if no function is found\n      */\n     public Function getFunction(String namespace, String name, Object[] parameters) {\n             functionClass = Class.forName(className);\n         }\n         catch (ClassNotFoundException ex) {\n-            throw new RuntimeException(\"Class not found: \" + ex);\n+            throw new JXPathException(\"Cannot invoke extension function \"\n+                + (namespace != null ? namespace + \":\" + name : name),\n+                ex);\n         }\n \n         if (methodName.endsWith(\"new\")) {\n--- a/src/java/org/apache/commons/jxpath/XMLDocumentContainer.java\n+++ b/src/java/org/apache/commons/jxpath/XMLDocumentContainer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/XMLDocumentContainer.java,v 1.3 2002/04/24 03:30:17 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/24 03:30:17 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/XMLDocumentContainer.java,v 1.4 2002/04/26 03:28:36 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/04/26 03:28:36 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * read at all.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/24 03:30:17 $\n+ * @version $Revision: 1.4 $ $Date: 2002/04/26 03:28:36 $\n  */\n public class XMLDocumentContainer implements Container {\n \n     public XMLDocumentContainer(URL xmlURL){\n         this.xmlURL = xmlURL;\n         if (xmlURL == null){\n-            throw new RuntimeException(\"Source is null\");\n+            throw new JXPathException(\"URL is null\");\n         }\n     }\n \n                 }\n             }\n             catch (Exception ex){\n-                throw new RuntimeException(\"Cannot read XML from: \" +\n-                    (xmlURL != null ? xmlURL.toString() :\n-                        (source != null ? source.getSystemId() : \"<<undefined source>>\")) + \"\\n\" + ex);\n+                throw new JXPathException(\n+                    \"Cannot read XML from: \" +\n+                        (xmlURL != null ? xmlURL.toString() :\n+                            (source != null ?\n+                                source.getSystemId() : \"<<undefined source>>\")),\n+                    ex);\n             }\n         }\n         return document;\n--- a/src/java/org/apache/commons/jxpath/functions/ConstructorFunction.java\n+++ b/src/java/org/apache/commons/jxpath/functions/ConstructorFunction.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/functions/ConstructorFunction.java,v 1.4 2002/04/24 04:05:41 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/04/24 04:05:41 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/functions/ConstructorFunction.java,v 1.5 2002/04/26 03:28:37 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/04/26 03:28:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.jxpath.ExpressionContext;\n import org.apache.commons.jxpath.Function;\n+import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.util.TypeUtils;\n \n /**\n  * An extension function that creates an instance using a constructor.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/04/24 04:05:41 $\n+ * @version $Revision: 1.5 $ $Date: 2002/04/26 03:28:37 $\n  */\n public class ConstructorFunction implements Function {\n \n             return constructor.newInstance(args);\n         }\n         catch (Exception exception){\n-            // TBD\n-            exception.printStackTrace();\n-            throw new RuntimeException(\"Cannot invoke constructor \" + constructor + \": \" + exception);\n+            throw new JXPathException(\"Cannot invoke constructor \" + constructor, exception);\n         }\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/functions/MethodFunction.java\n+++ b/src/java/org/apache/commons/jxpath/functions/MethodFunction.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/functions/MethodFunction.java,v 1.4 2002/04/24 04:05:41 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/04/24 04:05:41 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/functions/MethodFunction.java,v 1.5 2002/04/26 03:28:37 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/04/26 03:28:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.jxpath.ExpressionContext;\n import org.apache.commons.jxpath.Function;\n+import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.util.TypeUtils;\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/04/24 04:05:41 $\n+ * @version $Revision: 1.5 $ $Date: 2002/04/26 03:28:37 $\n  */\n public class MethodFunction implements Function {\n \n             return method.invoke(target, args);\n         }\n         catch (Exception exception){\n-            exception.printStackTrace();\n-            // TBD\n-            throw new RuntimeException(\"Cannot invoke \" + method + \": \" + exception);\n+            throw new JXPathException(\"Cannot invoke \" + method, exception);\n         }\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/EvalContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/EvalContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/EvalContext.java,v 1.11 2002/04/26 01:00:38 dmitri Exp $\n- * $Revision: 1.11 $\n- * $Date: 2002/04/26 01:00:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/EvalContext.java,v 1.12 2002/04/26 03:28:37 dmitri Exp $\n+ * $Revision: 1.12 $\n+ * $Date: 2002/04/26 03:28:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * implement behavior of various XPath axes: \"child::\", \"parent::\" etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.11 $ $Date: 2002/04/26 01:00:38 $\n+ * @version $Revision: 1.12 $ $Date: 2002/04/26 03:28:37 $\n  */\n public abstract class EvalContext implements ExpressionContext {\n     protected EvalContext parentContext;\n         }\n         return list;\n     }\n-    \n+\n     /**\n      * Returns the list of all node values in this context\n      */\n         }\n         Function function = getRootContext().getFunction(functionName, parameters);\n         if (function == null){\n-            throw new RuntimeException(\"No such function: \" + functionName +\n+            throw new JXPathException(\"No such function: \" + functionName +\n                  Arrays.asList(parameters));\n         }\n \n             }\n             return new Double(sum);\n         }\n-        throw new RuntimeException(\"Invalid argument type for 'sum': \" + v.getClass().getName());\n+        throw new JXPathException(\"Invalid argument type for 'sum': \"\n+            + v.getClass().getName());\n     }\n \n     protected Object functionFloor(CoreFunction function){\n \n     private void assertArgCount(CoreFunction function, int count){\n         if (function.getArgumentCount() != count){\n-            throw new RuntimeException(\"Incorrect number of argument: \" + function);\n+            throw new JXPathException(\"Incorrect number of argument: \"\n+                + function);\n         }\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.12 2002/04/26 01:00:38 dmitri Exp $\n- * $Revision: 1.12 $\n- * $Date: 2002/04/26 01:00:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.13 2002/04/26 03:28:37 dmitri Exp $\n+ * $Revision: 1.13 $\n+ * $Date: 2002/04/26 03:28:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import java.util.*;\n \n import org.apache.commons.jxpath.*;\n+import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.ri.axes.RootContext;\n import org.apache.commons.jxpath.ri.compiler.Expression;\n import org.apache.commons.jxpath.ri.compiler.TreeCompiler;\n import org.apache.commons.jxpath.util.TypeUtils;\n \n /**\n+ * The reference implementation of JXPathContext.\n+ *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.12 $ $Date: 2002/04/26 01:00:38 $\n+ * @version $Revision: 1.13 $ $Date: 2002/04/26 03:28:37 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext\n {\n     private static final Compiler compiler = new TreeCompiler();\n     private static final Map compiled = new HashMap();\n-    private static final PackageFunctions genericFunctions = new PackageFunctions(\"\", null);\n+    private static final PackageFunctions genericFunctions =\n+        new PackageFunctions(\"\", null);\n     private static boolean useSoftCache = true;\n     private static int cleanupCount = 0;\n     private static Vector nodeFactories = new Vector();\n     // The frequency of the cache cleanup\n     private static final int CLEANUP_THRESHOLD = 500;\n \n-    protected JXPathContextReferenceImpl(JXPathContext parentContext, Object contextBean){\n+    protected JXPathContextReferenceImpl(JXPathContext parentContext,\n+                                         Object contextBean){\n         super(parentContext, contextBean);\n         synchronized (nodeFactories){\n             createNodeFactoryArray();\n     private static void createNodeFactoryArray() {\n         if (nodeFactoryArray == null) {\n             nodeFactoryArray =\n-                (NodePointerFactory[]) nodeFactories.toArray(new NodePointerFactory[0]);\n+                (NodePointerFactory[]) nodeFactories.\n+                    toArray(new NodePointerFactory[0]);\n             Arrays.sort(nodeFactoryArray, new Comparator() {\n                 public int compare(Object a, Object b) {\n                     int orderA = ((NodePointerFactory) a).getOrder();\n             });\n         }\n     }\n-\n     /**\n      * Call this with a custom NodePointerFactory to add support for\n      * additional types of objects.  Make sure the factory returns\n //        System.err.println(\"XPATH: \" + xpath);\n         Object result = eval(xpath, true);\n         if (result == null && !lenient){\n-            throw new RuntimeException(\"No value for xpath: \" + xpath);\n+            throw new JXPathException(\"No value for xpath: \" + xpath);\n         }\n \n         if (result instanceof EvalContext){\n         Object value = getValue(xpath);\n         if (value != null && requiredType != null){\n             if (!TypeUtils.canConvert(value, requiredType)){\n-                throw new RuntimeException(\"Invalid expression type. '\" + xpath +\n+                throw new JXPathException(\"Invalid expression type. '\" + xpath +\n                     \"' returns \" + value.getClass().getName() +\n                     \". It cannot be converted to \" + requiredType.getName());\n             }\n             setValue(xpath, value, false);\n         }\n         catch (Throwable ex){\n-            throw new RuntimeException(\"Exception trying to set value with xpath \" +\n-                    xpath + \". \" + ex.getMessage());\n+            throw new JXPathException(\n+                \"Exception trying to set value with xpath \" + xpath, ex);\n         }\n     }\n \n             setValue(xpath, value, true);\n         }\n         catch (Throwable ex){\n-            ex.printStackTrace();\n-            throw new RuntimeException(\"Exception trying to create xpath \" +\n-                    xpath + \". \" + ex.getMessage());\n+            throw new JXPathException(\n+                \"Exception trying to create xpath \" + xpath, ex);\n         }\n     }\n \n         }\n         else {\n             // This should never happen\n-            throw new RuntimeException(\"Cannot set value for xpath: \" + xpath);\n+            throw new JXPathException(\"Cannot set value for xpath: \" + xpath);\n         }\n         if (create){\n             ((NodePointer)pointer).createPath(this, value);\n             return Collections.singletonList((Pointer)result);\n         }\n         else {\n-            return Collections.singletonList(NodePointer.newNodePointer(null, result, getLocale()));\n+            return Collections.singletonList(\n+                    NodePointer.newNodePointer(null, result, getLocale()));\n         }\n     }\n \n     private void printPointer(NodePointer pointer){\n         Pointer p = pointer;\n         while (p != null){\n-            System.err.println((p == pointer ? \"POINTER: \" : \" PARENT: \") + p.getClass() + \" \" + p.asPath());\n+            System.err.println((p == pointer ? \"POINTER: \" : \" PARENT: \")\n+                + p.getClass() + \" \" + p.asPath());\n             if (p instanceof NodePointer){\n                 p = ((NodePointer)p).getParent();\n             }\n         if (func != null){\n             return func;\n         }\n-        throw new RuntimeException(\"Undefined function: \" + functionName.toString());\n+        throw new JXPathException(\n+            \"Undefined function: \" + functionName.toString());\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/Parser.java\n+++ b/src/java/org/apache/commons/jxpath/ri/Parser.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/Parser.java,v 1.3 2002/04/24 04:05:40 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/24 04:05:40 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/Parser.java,v 1.4 2002/04/26 03:28:37 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/04/26 03:28:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n import java.io.StringReader;\n \n+import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.ri.parser.ParseException;\n+import org.apache.commons.jxpath.ri.parser.TokenMgrError;\n import org.apache.commons.jxpath.ri.parser.XPathParser;\n \n /**\n  * XPath parser\n- * \n+ *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/24 04:05:40 $\n+ * @version $Revision: 1.4 $ $Date: 2002/04/26 03:28:37 $\n  */\n public class Parser {\n \n-    private static XPathParser parser;\n+    private static XPathParser parser = new XPathParser(new StringReader(\"\"));\n \n+    /**\n+     * Parses the XPath expression. Throws a JXPathException in case\n+     * of a syntax error.\n+     */\n     public static Object parseExpression(String expression, Compiler compiler){\n-        if (parser == null){\n-            parser = new XPathParser(new StringReader(\"\"));\n+        synchronized (parser){\n+            parser.setCompiler(compiler);\n+            Object expr = null;\n+            try {\n+                parser.ReInit(new StringReader(expression));\n+                expr = parser.parseExpression();\n+            }\n+            catch (TokenMgrError e) {\n+                throw new JXPathException(\"Invalid XPath: '\"\n+                    + addEscapes(expression)\n+                    + \"'. Invalid symbol '\"\n+                    + addEscapes(String.valueOf(e.getCharacter()))\n+                    + \"' \"\n+                    + describePosition(expression, e.getPosition()));\n+            }\n+            catch (ParseException e) {\n+                throw new JXPathException(\"Invalid XPath: '\"\n+                    + addEscapes(expression)\n+                    + \"'. Syntax error \"\n+                    + describePosition(expression, e.currentToken.beginColumn));\n+            }\n+            return expr;\n         }\n+    }\n \n-        parser.setCompiler(compiler);\n-        parser.ReInit(new StringReader(expression));\n+    private static String describePosition(String expression, int position){\n+        if (position <= 0){\n+            return \"at the beginning of the expression\";\n+        }\n+        else if (position >= expression.length()){\n+            return \"- expression incomplete\";\n+        }\n+        else {\n+            return \"after: '\"\n+                + addEscapes(expression.substring(0, position)) + \"'\";\n+        }\n+    }\n \n-        Object expr = null;\n-        try {\n-            expr = parser.parseExpression();\n-        }\n-        catch (ParseException e) {\n-//            System.err.println(\"Failed: \" + expression );\n-//            e.printStackTrace();\n-            throw new RuntimeException(e.getMessage());\n-        }\n-        return expr;\n+    private static String addEscapes(String string){\n+        // Piggy-back on the code generated by JavaCC\n+        return TokenMgrError.addEscapes(string);\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java\n             value = ((NodePointer)value).getValue();\n         }\n         if (value == null){\n-            throw new RuntimeException(\"Predicate is null: \" + value);\n+            throw new JXPathException(\"Predicate is null: \" + value);\n         }\n \n         if (value instanceof Number){\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.3 2002/04/26 01:00:37 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/26 01:00:37 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.4 2002/04/26 03:28:36 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/04/26 03:28:36 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import java.util.Locale;\n \n import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.JXPathIntrospector;\n import org.apache.commons.jxpath.Pointer;\n import org.apache.commons.jxpath.ri.Compiler;\n  * context-independent predicates.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/26 01:00:37 $\n+ * @version $Revision: 1.4 $ $Date: 2002/04/26 03:28:36 $\n  */\n public abstract class NodePointer implements Pointer, Cloneable, Comparable {\n \n                 return pointer;\n             }\n         }\n-        throw new RuntimeException(\n+        throw new JXPathException(\n             \"Could not allocate a NodePointer for object of \" + bean.getClass());\n     }\n \n                 return pointer;\n             }\n         }\n-        throw new RuntimeException(\n+        throw new JXPathException(\n             \"Could not allocate a NodePointer for object of \" + bean.getClass());\n     }\n \n      * to a \"canonical\" type.\n      */\n     public abstract Object getNodeValue();\n-    \n+\n     /**\n      * Converts the value to the required type and changes the corresponding\n      * object to that value.\n      * node. This method must may have to expand the collection in order to\n      * assign the element.\n      */\n-    public void createChild(\n-        JXPathContext context,\n-        QName name,\n-        int index,\n-        Object value) {\n-        throw new RuntimeException(\n+    public void createChild(JXPathContext context, QName name,\n+                            int index, Object value) {\n+        throw new JXPathException(\n             \"Cannot create an object for path \"\n                 + asPath()\n                 + \", operation is not allowed for this type of node\");\n      * newly created element.\n      */\n     public NodePointer createChild(JXPathContext context, QName name, int index) {\n-        throw new RuntimeException(\n+        throw new JXPathException(\n             \"Cannot create an object for path \"\n                 + asPath()\n                 + \", operation is not allowed for this type of node\");\n         }\n \n         if (depth1 == 1){\n-            throw new RuntimeException(\n-                \"Cannot compare pointers that do not belong to the same tree\");\n+            throw new JXPathException(\n+                \"Cannot compare pointers that do not belong to the same tree: '\"\n+                + p1 + \"' and '\" + p2 + \"'\");\n         }\n         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n         if (r != 0){\n--- a/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java,v 1.3 2002/04/26 01:00:37 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/26 01:00:37 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java,v 1.4 2002/04/26 03:28:36 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/04/26 03:28:36 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.jxpath.AbstractFactory;\n import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.Variables;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.compiler.NodeTest;\n  * Pointer to a context variable.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/26 01:00:37 $\n+ * @version $Revision: 1.4 $ $Date: 2002/04/26 03:28:36 $\n  */\n public class VariablePointer extends NodePointer {\n     private Variables variables;\n \n     public Object getBaseValue(){\n         if (!actual){\n-            throw new RuntimeException(\"Undefined variable: \" + name);\n+            throw new JXPathException(\"Undefined variable: \" + name);\n         }\n         return variables.getVariable(name.getName());\n     }\n \n     public void setValue(Object value){\n         if (!actual){\n-            throw new RuntimeException(\"Cannot set undefined variable: \" + name);\n+            throw new JXPathException(\"Cannot set undefined variable: \" + name);\n         }\n         valuePointer = null;\n         if (index != WHOLE_COLLECTION){\n         if (!actual){\n             AbstractFactory factory = getAbstractFactory(context);\n             if (!factory.declareVariable(context, name.toString())){\n-                throw new RuntimeException(\"Factory cannot define variable '\" + name + \"' for path: \" + asPath());\n+                throw new JXPathException(\"Factory cannot define variable '\" + name + \"' for path: \" + asPath());\n             }\n             findVariables(context);\n             // Assert: actual == true\n             AbstractFactory factory = getAbstractFactory(context);\n             // Ignore the name passed as a parameter, pass the name of the variable instead\n             if (!factory.createObject(context, this, collection, getName().toString(), index)){\n-                throw new RuntimeException(\"Factory could not create object path: \" + asPath());\n+                throw new JXPathException(\"Factory could not create object path: \" + asPath());\n             }\n             setIndex(index);\n         }\n \n         Object collection = getBaseValue();\n         if (collection == null){\n-            throw new RuntimeException(\"Factory did not assign a collection to variable '\" + name + \"' for path: \" + asPath());\n+            throw new JXPathException(\"Factory did not assign a collection to variable '\" + name + \"' for path: \" + asPath());\n         }\n \n         if (index == WHOLE_COLLECTION){\n             index = 0;\n         }\n         else if (index < 0){\n-            throw new RuntimeException(\"Index is less than 1: \" + asPath());\n+            throw new JXPathException(\"Index is less than 1: \" + asPath());\n         }\n \n         if (index >= getLength()){\n     private AbstractFactory getAbstractFactory(JXPathContext context){\n         AbstractFactory factory = context.getFactory();\n         if (factory == null){\n-            throw new RuntimeException(\"Factory is not set on the JXPathContext - cannot create path: \" + asPath());\n+            throw new JXPathException(\n+              \"Factory is not set on the JXPathContext - cannot create path: \"\n+              + asPath());\n         }\n         return factory;\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java,v 1.3 2002/04/26 01:00:37 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/26 01:00:37 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java,v 1.4 2002/04/26 03:28:37 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/04/26 03:28:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.AbstractFactory;\n import org.apache.commons.jxpath.JXPathBeanInfo;\n import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n import org.apache.commons.jxpath.util.ValueUtils;\n  * Pointer pointing to a property of a JavaBean.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/26 01:00:37 $\n+ * @version $Revision: 1.4 $ $Date: 2002/04/26 03:28:37 $\n  */\n public class BeanPropertyPointer extends PropertyPointer {\n     private String propertyName;\n     public void setValue(Object value){\n         PropertyDescriptor pd = getPropertyDescriptor();\n         if (pd == null){\n-            throw new RuntimeException(\"Cannot set property: \" + asPath() + \" - no such property\");\n+            throw new JXPathException(\"Cannot set property: \" + asPath() + \" - no such property\");\n         }\n \n         if (index == WHOLE_COLLECTION){\n             AbstractFactory factory = getAbstractFactory(context);\n             int inx = (index == WHOLE_COLLECTION ? 0 : index);\n             if (!factory.createObject(context, this, getBean(), getPropertyName(), inx)){\n-                throw new RuntimeException(\"Factory could not create an object for path: \" + asPath());\n+                throw new JXPathException(\"Factory could not create an object for path: \" + asPath());\n             }\n             baseValue = UNINITIALIZED;\n             value = UNINITIALIZED;\n         // Ignore the name passed to us, use our own information\n         PropertyDescriptor pd = getPropertyDescriptor();\n         if (pd == null){\n-            throw new RuntimeException(\"Cannot create path: \" + asPath() +\n+            throw new JXPathException(\"Cannot create path: \" + asPath() +\n                     \" - property '\" + getPropertyName() + \"' does not exist\");\n         }\n \n         if (index < 0){\n-            throw new RuntimeException(\"Index is less than 1: \" + asPath());\n+            throw new JXPathException(\"Index is less than 1: \" + asPath());\n         }\n \n         if (index >= getLength()){\n             AbstractFactory factory = getAbstractFactory(context);\n             if (!factory.createObject(context, this, getBean(), getPropertyName(), index)){\n-                throw new RuntimeException(\"Factory could not create path \" + asPath());\n+                throw new JXPathException(\"Factory could not create path \" + asPath());\n             }\n         }\n         BeanPropertyPointer clone = (BeanPropertyPointer)this.clone();\n     private AbstractFactory getAbstractFactory(JXPathContext context){\n         AbstractFactory factory = context.getFactory();\n         if (factory == null){\n-            throw new RuntimeException(\"Factory is not set on the JXPathContext - cannot create path: \" + asPath());\n+            throw new JXPathException(\"Factory is not set on the JXPathContext - cannot create path: \" + asPath());\n         }\n         return factory;\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/DynamicPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/DynamicPropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/Attic/DynamicPropertyPointer.java,v 1.3 2002/04/26 01:00:37 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/26 01:00:37 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/Attic/DynamicPropertyPointer.java,v 1.4 2002/04/26 03:28:37 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/04/26 03:28:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.AbstractFactory;\n import org.apache.commons.jxpath.DynamicPropertyHandler;\n import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n import org.apache.commons.jxpath.util.ValueUtils;\n  * Pointer pointing to a property of an object with dynamic properties.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/26 01:00:37 $\n+ * @version $Revision: 1.4 $ $Date: 2002/04/26 03:28:37 $\n  */\n public class DynamicPropertyPointer extends PropertyPointer {\n     private DynamicPropertyHandler handler;\n             if (collection == null){\n                 AbstractFactory factory = getAbstractFactory(context);\n                 if (!factory.createObject(context, this, getBean(), getPropertyName(), 0)){\n-                    throw new RuntimeException(\"Factory could not create an object for path: \" + asPath());\n+                    throw new JXPathException(\"Factory could not create an object for path: \" + asPath());\n                 }\n                 collection = getBaseValue();\n             }\n \n             if (index < 0){\n-                throw new RuntimeException(\"Index is less than 1: \" + asPath());\n+                throw new JXPathException(\"Index is less than 1: \" + asPath());\n             }\n \n             if (index >= getLength()){\n         if (collection == null){\n             AbstractFactory factory = getAbstractFactory(context);\n             if (!factory.createObject(context, this, getBean(), getPropertyName(), 0)){\n-                throw new RuntimeException(\"Factory could not create an object for path: \" + asPath());\n+                throw new JXPathException(\"Factory could not create an object for path: \" + asPath());\n             }\n             collection = getBaseValue();\n         }\n \n         if (index < 0){\n-            throw new RuntimeException(\"Index is less than 1: \" + asPath());\n+            throw new JXPathException(\"Index is less than 1: \" + asPath());\n         }\n \n         if (index >= getLength()){\n             AbstractFactory factory = getAbstractFactory(context);\n             int inx = (index == WHOLE_COLLECTION ? 0 : index);\n             if (!factory.createObject(context, this, getBean(), getPropertyName(), inx)){\n-                throw new RuntimeException(\"Factory could not create an object for path: \" + asPath());\n+                throw new JXPathException(\"Factory could not create an object for path: \" + asPath());\n             }\n         }\n         return this;\n     private AbstractFactory getAbstractFactory(JXPathContext context){\n         AbstractFactory factory = context.getFactory();\n         if (factory == null){\n-            throw new RuntimeException(\"Factory is not set on the JXPathContext - cannot create path: \" + asPath());\n+            throw new JXPathException(\"Factory is not set on the JXPathContext - cannot create path: \" + asPath());\n         }\n         return factory;\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java,v 1.3 2002/04/26 01:00:37 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/26 01:00:37 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java,v 1.4 2002/04/26 03:28:37 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/04/26 03:28:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n package org.apache.commons.jxpath.ri.model.beans;\n \n import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n \n  * as the parent.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/26 01:00:37 $\n+ * @version $Revision: 1.4 $ $Date: 2002/04/26 03:28:37 $\n  */\n public class NullElementPointer extends PropertyOwnerPointer {\n \n \n     public void createChild(JXPathContext context, QName name, int index, Object value){\n         if (index != 0 && index != WHOLE_COLLECTION){\n-            throw new RuntimeException(\"Internal error. \" +\n+            throw new JXPathException(\"Internal error. \" +\n                 \"Indexed passed to NullElementPointer.createChild() is not 0: \" + index);\n         }\n         if (parent instanceof PropertyPointer){\n \n     public NodePointer createChild(JXPathContext context, QName name, int index){\n         if (index != 0 && index != WHOLE_COLLECTION){\n-            throw new RuntimeException(\"Internal error. \" +\n+            throw new JXPathException(\"Internal error. \" +\n                 \"Indexed passed to NullElementPointer.createChild() is not 0: \" + index);\n         }\n         if (parent instanceof PropertyPointer){\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java,v 1.3 2002/04/26 01:00:37 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/26 01:00:37 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java,v 1.4 2002/04/26 03:28:37 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/04/26 03:28:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n package org.apache.commons.jxpath.ri.model.beans;\n \n import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/26 01:00:37 $\n+ * @version $Revision: 1.4 $ $Date: 2002/04/26 03:28:37 $\n  */\n public class NullPropertyPointer extends PropertyPointer {\n \n     }\n \n     public void setValue(Object value){\n-        throw new RuntimeException(\"Cannot set property \" + asPath() +\n+        throw new JXPathException(\"Cannot set property \" + asPath() +\n             \", the target object is null\");\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java,v 1.2 2002/04/24 04:05:40 dmitri Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/04/24 04:05:40 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java,v 1.3 2002/04/26 03:28:37 dmitri Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/04/26 03:28:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.jxpath.ri.model.beans;\n \n+import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.ri.model.NodeIterator;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n \n  * Examples of such objects are JavaBeans and objects with Dynamic Properties.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.2 $ $Date: 2002/04/24 04:05:40 $\n+ * @version $Revision: 1.3 $ $Date: 2002/04/26 03:28:37 $\n  */\n public class PropertyIterator implements NodeIterator {\n     private boolean empty = false;\n                 startWith = startWith.getParent();\n             }\n             if (startWith == null){\n-                throw new RuntimeException(\n+                throw new JXPathException(\n                     \"PropertyIerator startWith parameter is not a child of the supplied parent\");\n             }\n             this.startPropertyIndex = ((PropertyPointer)startWith).getPropertyIndex();\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java,v 1.3 2002/04/26 01:00:38 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/26 01:00:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java,v 1.4 2002/04/26 03:28:37 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/04/26 03:28:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.jxpath.AbstractFactory;\n import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.compiler.NodeNameTest;\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/26 01:00:38 $\n+ * @version $Revision: 1.4 $ $Date: 2002/04/26 03:28:37 $\n  */\n public class DOMNodePointer extends NodePointer {\n     private Node node;\n             index = 0;\n         }\n         if (!getAbstractFactory(context).createObject(context, this, node, name.toString(), index)){\n-            throw new RuntimeException(\"Factory could not create a child node for path: \" +\n+            throw new JXPathException(\"Factory could not create a child node for path: \" +\n                     asPath() + \"/\" + name + \"[\" + (index+1) + \"]\");\n         }\n         NodeIterator it = childIterator(new NodeNameTest(name), false, null);\n         if (it == null || !it.setPosition(index + 1)){\n-            throw new RuntimeException(\"Factory could not create a child node for path: \" +\n+            throw new JXPathException(\"Factory could not create a child node for path: \" +\n                     asPath() + \"/\" + name + \"[\" + (index+1) + \"]\");\n         }\n         return it.getNodePointer();\n     private AbstractFactory getAbstractFactory(JXPathContext context){\n         AbstractFactory factory = context.getFactory();\n         if (factory == null){\n-            throw new RuntimeException(\"Factory is not set on the JXPathContext - cannot create path: \" + asPath());\n+            throw new JXPathException(\"Factory is not set on the JXPathContext - cannot create path: \" + asPath());\n         }\n         return factory;\n     }\n-    \n+\n     public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2){\n         Node node1 = (Node)pointer1.getNodeValue();\n         Node node2 = (Node)pointer2.getNodeValue();\n         if (node1 == node2){\n             return 0;\n         }\n-        \n+\n         Node current = node.getFirstChild();\n         while (current != null){\n             if (current == node1){\n         }\n \n         return 0;\n-    }    \n+    }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/parser/TokenMgrError.java\n+++ b/src/java/org/apache/commons/jxpath/ri/parser/TokenMgrError.java\n-/* Generated By:JavaCC: Do not edit this line. TokenMgrError.java Version 0.7pre2 */\n+/* Generated By:JavaCC: Do not edit this line. MODIFIED BY DMITRI PLOTNIKOV - DO NOT REGENERATE */\n package org.apache.commons.jxpath.ri.parser;\n \n public class TokenMgrError extends Error\n {\n+    private int position;\n+    private char character;\n+\n+\n    /*\n     * Ordinals for various reasons why an Error of this type can be thrown.\n     */\n     * Replaces unprintable characters by their espaced (or unicode escaped)\n     * equivalents in the given string\n     */\n-   protected static final String addEscapes(String str) {\n+   public static final String addEscapes(String str) {\n       StringBuffer retval = new StringBuffer();\n       char ch;\n       for (int i = 0; i < str.length(); i++) {\n    /**\n     * Returns a detailed message for the Error when it is thrown by the\n     * token manager to indicate a lexical error.\n-    * Parameters : \n+    * Parameters :\n     *    EOFSeen     : indicates if EOF caused the lexicl error\n     *    curLexState : lexical state in which this error occured\n     *    errorLine   : line number when the error occured\n    /**\n     * You can also modify the body of this method to customize your error messages.\n     * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not\n-    * of end-users concern, so you can return something like : \n+    * of end-users concern, so you can return something like :\n     *\n     *     \"Internal Error : Please file a bug report .... \"\n     *\n \n    public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason) {\n       this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);\n+      position = errorColumn - 1;\n+      character = curChar;\n+   }\n+\n+\n+   // ADDED BY ME - DMITRI PLOTNIKOV\n+   public int getPosition(){\n+    return position;\n+   }\n+\n+   public char getCharacter(){\n+    return character;\n    }\n }\n--- a/src/java/org/apache/commons/jxpath/util/TypeUtils.java\n+++ b/src/java/org/apache/commons/jxpath/util/TypeUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/util/TypeUtils.java,v 1.3 2002/04/26 00:57:11 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/26 00:57:11 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/util/TypeUtils.java,v 1.4 2002/04/26 03:28:37 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/04/26 03:28:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import java.util.*;\n \n import org.apache.commons.jxpath.ExpressionContext;\n+import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.Pointer;\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/26 00:57:11 $\n+ * @version $Revision: 1.4 $ $Date: 2002/04/26 03:28:37 $\n  */\n public class TypeUtils {\n \n             }\n         }\n         if (ambiguous){\n-            throw new RuntimeException(\"Ambigous constructor \" + Arrays.asList(parameters));\n+            throw new JXPathException(\"Ambigous constructor \" + Arrays.asList(parameters));\n         }\n         return constructor;\n     }\n             }\n         }\n         if (ambiguous){\n-            throw new RuntimeException(\"Ambigous method call: \" + name);\n+            throw new JXPathException(\"Ambigous method call: \" + name);\n         }\n         return method;\n     }\n             }\n         }\n         if (ambiguous){\n-            throw new RuntimeException(\"Ambigous method call: \" + name);\n+            throw new JXPathException(\"Ambigous method call: \" + name);\n         }\n         return method;\n     }\n--- a/src/java/org/apache/commons/jxpath/util/ValueUtils.java\n+++ b/src/java/org/apache/commons/jxpath/util/ValueUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/util/ValueUtils.java,v 1.2 2002/04/24 04:05:39 dmitri Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/04/24 04:05:39 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/util/ValueUtils.java,v 1.3 2002/04/26 03:28:37 dmitri Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/04/26 03:28:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import java.lang.reflect.*;\n import java.util.*;\n \n+import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.DynamicPropertyHandler;\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.2 $ $Date: 2002/04/24 04:05:39 $\n+ * @version $Revision: 1.3 $ $Date: 2002/04/26 03:28:37 $\n  */\n public class ValueUtils {\n     private static Map dynamicPropertyHandlerMap = new HashMap();\n             return collection;\n         }\n         else {\n-            throw new RuntimeException(\"Cannot turn \" + collection.getClass().getName() +\n+            throw new JXPathException(\"Cannot turn \" + collection.getClass().getName() +\n                     \" into a collection of size \" + size);\n         }\n     }\n                 }\n             }\n             catch (Exception ex){\n-                throw new RuntimeException(\"Cannot access property: \" + propertyDescriptor.getName() +\n-                    \", \" + ex.getMessage());\n+                throw new JXPathException(\n+                    \"Cannot access property: \" + propertyDescriptor.getName(),\n+                    ex);\n             }\n         }\n         // We will fall through if there is no indexed read\n         try {\n             Method method = getAccessibleMethod(propertyDescriptor.getReadMethod());\n             if (method == null){\n-                throw new RuntimeException(\"No read method\");\n+                throw new JXPathException(\"No read method\");\n             }\n             value = method.invoke(bean, new Object[0]);\n         }\n         catch (Exception ex){\n-            ex.printStackTrace();\n-            throw new RuntimeException(\"Cannot access property: \" + propertyDescriptor.getName() +\n-                \", \" + ex.getMessage());\n+            throw new JXPathException(\n+                \"Cannot access property: \" + propertyDescriptor.getName(), ex);\n         }\n         return value;\n     }\n         try {\n             Method method = getAccessibleMethod(propertyDescriptor.getWriteMethod());\n             if (method == null){\n-                throw new RuntimeException(\"No write method\");\n+                throw new JXPathException(\"No write method\");\n             }\n             value = convert(value, propertyDescriptor.getPropertyType());\n             value = method.invoke(bean, new Object[]{value});\n         }\n         catch (Exception ex){\n-            throw new RuntimeException(\"Cannot modify property: \" + propertyDescriptor.getName() +\n-                \", \" + ex);\n+            throw new JXPathException(\n+                \"Cannot modify property: \" + propertyDescriptor.getName(), ex);\n         }\n     }\n \n     private static Object convert(Object value, Class type){\n         if (!TypeUtils.canConvert(value, type)){\n-            throw new RuntimeException(\"Cannot convert value of class \" +\n+            throw new JXPathException(\"Cannot convert value of class \" +\n                     (value == null ? \"null\" : value.getClass().getName()) +\n                     \" to type \" + type);\n         }\n                 handler = (DynamicPropertyHandler)clazz.newInstance();\n             }\n             catch (Exception ex){\n-                throw new RuntimeException(\"Cannot allocate dynamic property handler \" +\n-                    \" of class \" + clazz + \".\\n\" + ex);\n+                throw new JXPathException(\n+                    \"Cannot allocate dynamic property handler of class \"\n+                    + clazz.getName(), ex);\n             }\n             dynamicPropertyHandlerMap.put(clazz, handler);\n         }\n--- a/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.13 2002/04/26 01:00:38 dmitri Exp $\n- * $Revision: 1.13 $\n- * $Date: 2002/04/26 01:00:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.14 2002/04/26 03:28:37 dmitri Exp $\n+ * $Revision: 1.14 $\n+ * $Date: 2002/04/26 03:28:37 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * </p>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.13 $ $Date: 2002/04/26 01:00:38 $\n+ * @version $Revision: 1.14 $ $Date: 2002/04/26 03:28:37 $\n  */\n \n public class JXPathTestCase extends TestCase\n         return list;\n     }\n \n-    public void testDOM(){\n+    public void testDOM() throws Exception {\n         if (!enabled){\n             return;\n         }\n         System.setProperty(JXPathContextFactory.FACTORY_NAME_PROPERTY,\n                 \"org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl\");\n-        try {\n-            XMLDocumentContainer docCtr = new XMLDocumentContainer(getClass().getResource(\"Vendor.xml\"));\n-            Document doc = (Document)docCtr.getValue();\n-            JXPathContext ctx = JXPathContextFactory.newInstance().newContext(null, doc);\n-            ctx.setLocale(Locale.US);\n-            ctx.getVariables().declareVariable(\"dom\", doc);\n-            ctx.getVariables().declareVariable(\"object\", docCtr);\n-            ctx.getVariables().declareVariable(\"null\", null);\n-            TestBeanWithDOM tbwdom = createTestBeanWithDOM();\n-            ctx.getVariables().declareVariable(\"test\", tbwdom);\n-            testXPaths(ctx, dom_tests, false);\n-        }\n-        catch (Exception ex){\n-            ex.printStackTrace();\n-            throw new RuntimeException(\"Test failed\");\n-        }\n+        XMLDocumentContainer docCtr = new XMLDocumentContainer(getClass().getResource(\"Vendor.xml\"));\n+        Document doc = (Document)docCtr.getValue();\n+        JXPathContext ctx = JXPathContextFactory.newInstance().newContext(null, doc);\n+        ctx.setLocale(Locale.US);\n+        ctx.getVariables().declareVariable(\"dom\", doc);\n+        ctx.getVariables().declareVariable(\"object\", docCtr);\n+        ctx.getVariables().declareVariable(\"null\", null);\n+        TestBeanWithDOM tbwdom = createTestBeanWithDOM();\n+        ctx.getVariables().declareVariable(\"test\", tbwdom);\n+        testXPaths(ctx, dom_tests, false);\n     }\n \n     private TestBeanWithDOM createTestBeanWithDOM(){", "timestamp": 1019791717, "metainfo": ""}