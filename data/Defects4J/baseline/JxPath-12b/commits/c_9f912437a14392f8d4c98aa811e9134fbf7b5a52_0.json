{"sha": "9f912437a14392f8d4c98aa811e9134fbf7b5a52", "log": "[JXPATH-83] respect xml:space='preserve'  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n                 : current.toUpperCase().startsWith(lang.toUpperCase());\n     }\n \n-    protected String getLanguage() {\n-        Node n = node;\n+    protected static String findEnclosingAttribute(Node n, String attrName) {\n         while (n != null) {\n             if (n.getNodeType() == Node.ELEMENT_NODE) {\n                 Element e = (Element) n;\n-                String attr = e.getAttribute(\"xml:lang\");\n+                String attr = e.getAttribute(attrName);\n                 if (attr != null && !attr.equals(\"\")) {\n                     return attr;\n                 }\n             n = n.getParentNode();\n         }\n         return null;\n+    }\n+\n+    protected String getLanguage() {\n+        return findEnclosingAttribute(node, \"xml:lang\");\n     }\n \n     /**\n     }\n \n     public Object getValue() {\n+        if (node.getNodeType() == Node.COMMENT_NODE) {\n+            String text = ((Comment) node).getData();\n+            return text == null ? \"\" : text.trim();\n+        }\n         return stringValue(node);\n     }\n \n     private String stringValue(Node node) {\n         int nodeType = node.getNodeType();\n         if (nodeType == Node.COMMENT_NODE) {\n-            String text = ((Comment) node).getData();\n-            return text == null ? \"\" : text.trim();\n-        }\n-        if (\n-            nodeType == Node.TEXT_NODE\n-                || nodeType == Node.CDATA_SECTION_NODE) {\n+            return \"\";\n+        }\n+        boolean trim = !\"preserve\".equals(findEnclosingAttribute(node, \"xml:space\"));\n+        if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) {\n             String text = node.getNodeValue();\n-            return text == null ? \"\" : text.trim();\n+            return text == null ? \"\" : trim ? text.trim() : text;\n         }\n         if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) {\n             String text = ((ProcessingInstruction) node).getData();\n-            return text == null ? \"\" : text.trim();\n+            return text == null ? \"\" : trim ? text.trim() : text;\n         }\n         NodeList list = node.getChildNodes();\n         StringBuffer buf = new StringBuffer(16);\n         for (int i = 0; i < list.getLength(); i++) {\n             Node child = list.item(i);\n-            if (child.getNodeType() == Node.TEXT_NODE) {\n-                buf.append(child.getNodeValue());\n-            }\n-            else {\n-                buf.append(stringValue(child));\n-            }\n-        }\n-        return buf.toString().trim();\n+            buf.append(stringValue(child));\n+        }\n+        return buf.toString();\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n  */\n public class JDOMNodePointer extends NodePointer {\n     private static final long serialVersionUID = -6346532297491082651L;\n-    \n+\n     private Object node;\n     private String id;\n \n \n     public Object getValue() {\n         if (node instanceof Element) {\n-            return ((Element) node).getTextTrim();\n+            StringBuffer buf = new StringBuffer();\n+            for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) {\n+                NodePointer ptr = children.getNodePointer();\n+                if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {\n+                    buf.append(ptr.getValue());\n+                }\n+            }\n+            return buf.toString();\n         }\n         if (node instanceof Comment) {\n             String text = ((Comment) node).getText();\n             }\n             return text;\n         }\n+        String result = null;\n         if (node instanceof Text) {\n-            return ((Text) node).getTextTrim();\n-        }\n-        if (node instanceof CDATA) {\n-            return ((CDATA) node).getTextTrim();\n+            result = ((Text) node).getText();\n         }\n         if (node instanceof ProcessingInstruction) {\n-            String text = ((ProcessingInstruction) node).getData();\n-            if (text != null) {\n-                text = text.trim();\n-            }\n-            return text;\n-        }\n-        return null;\n+            result = ((ProcessingInstruction) node).getData();\n+        }\n+        boolean trim = !\"preserve\".equals(findEnclosingAttribute(node, \"space\", Namespace.XML_NAMESPACE));\n+        return result != null && trim ? result.trim() : result;\n     }\n \n     public void setValue(Object value) {\n     }\n \n     protected String getLanguage() {\n-        Object n = node;\n+        return findEnclosingAttribute(node, \"lang\", Namespace.XML_NAMESPACE);\n+    }\n+\n+    protected static String findEnclosingAttribute(Object n, String attrName, Namespace ns) {\n         while (n != null) {\n             if (n instanceof Element) {\n                 Element e = (Element) n;\n-                String attr =\n-                    e.getAttributeValue(\"lang\", Namespace.XML_NAMESPACE);\n+                String attr = e.getAttributeValue(attrName, ns);\n                 if (attr != null && !attr.equals(\"\")) {\n                     return attr;\n                 }\n         }\n         return null;\n     }\n-    \n-    private Element nodeParent(Object node) {\n+\n+    private static Element nodeParent(Object node) {\n         if (node instanceof Element) {\n             Object parent = ((Element) node).getParent();\n             return parent instanceof Element ? (Element) parent : null;\n         JDOMNodePointer other = (JDOMNodePointer) object;\n         return node == other.node;\n     }\n+\n     private AbstractFactory getAbstractFactory(JXPathContext context) {\n         AbstractFactory factory = context.getFactory();\n         if (factory == null) {\n         }\n         return factory;\n     }\n+\n }\n--- a/src/test/org/apache/commons/jxpath/JXPathTestSuite.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestSuite.java\n import org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest;\n import org.apache.commons.jxpath.ri.compiler.VariableTest;\n import org.apache.commons.jxpath.ri.model.MixedModelTest;\n+import org.apache.commons.jxpath.ri.model.XMLSpaceTest;\n import org.apache.commons.jxpath.ri.model.beans.BeanModelTest;\n import org.apache.commons.jxpath.ri.model.container.ContainerModelTest;\n import org.apache.commons.jxpath.ri.model.dom.DOMModelTest;\n         suite.addTestSuite(MixedModelTest.class);\n         suite.addTestSuite(BasicTypeConverterTest.class);\n         suite.addTestSuite(RecursiveAxesTest.class);\n+        suite.addTestSuite(XMLSpaceTest.class);\n         return suite;\n     }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.jxpath.ri.model;\n+\n+import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.JXPathTestCase;\n+import org.apache.commons.jxpath.xml.DocumentContainer;\n+\n+/**\n+ * Test for text trimming from JXPATH-83.\n+ *\n+ * @author Matt Benson\n+ * @version $Revision$ $Date$\n+ */\n+public class XMLSpaceTest extends JXPathTestCase {\n+    protected JXPathContext context;\n+\n+    /**\n+     * Construct a new instance of this test case.\n+     *\n+     * @param name Name of the test case\n+     */\n+    public XMLSpaceTest(String name) {\n+        super(name);\n+    }\n+\n+    protected DocumentContainer createDocumentContainer(String model) {\n+        return new DocumentContainer(JXPathTestCase.class\n+                .getResource(\"XmlSpace.xml\"), model);\n+    }\n+\n+    protected JXPathContext createContext(String model) {\n+        JXPathContext context = JXPathContext\n+                .newContext(createDocumentContainer(model));\n+        return context;\n+    }\n+\n+    protected void doTest(String id, String model, String expectedValue) {\n+        JXPathContext context = JXPathContext\n+                .newContext(createDocumentContainer(model));\n+        assertEquals(context.getValue(\"test/text[@id='\" + id + \"']\"), expectedValue);\n+    }\n+\n+    public void testUnspecifiedDOM() {\n+        doTest(\"unspecified\", DocumentContainer.MODEL_DOM, \"foo\");\n+    }\n+\n+    public void testDefaultDOM() {\n+        doTest(\"default\", DocumentContainer.MODEL_DOM, \"foo\");\n+    }\n+\n+    public void testPreserveDOM() {\n+        doTest(\"preserve\", DocumentContainer.MODEL_DOM, \" foo \");\n+    }\n+\n+    public void testNestedDOM() {\n+        doTest(\"nested\", DocumentContainer.MODEL_DOM, \"foo;bar; baz \");\n+    }\n+\n+    public void testNestedWithCommentsDOM() {\n+        doTest(\"nested-with-comments\", DocumentContainer.MODEL_DOM, \"foo;bar; baz \");\n+    }\n+\n+    public void testUnspecifiedJDOM() {\n+        doTest(\"unspecified\", DocumentContainer.MODEL_JDOM, \"foo\");\n+    }\n+\n+    public void testDefaultJDOM() {\n+        doTest(\"default\", DocumentContainer.MODEL_JDOM, \"foo\");\n+    }\n+\n+    public void testPreserveJDOM() {\n+        doTest(\"preserve\", DocumentContainer.MODEL_JDOM, \" foo \");\n+    }\n+\n+    public void testNestedJDOM() {\n+        doTest(\"nested\", DocumentContainer.MODEL_JDOM, \"foo;bar; baz \");\n+    }\n+\n+    public void testNestedWithCommentsJDOM() {\n+        doTest(\"nested-with-comments\", DocumentContainer.MODEL_JDOM, \"foo;bar; baz \");\n+    }\n+}", "timestamp": 1179344867, "metainfo": ""}