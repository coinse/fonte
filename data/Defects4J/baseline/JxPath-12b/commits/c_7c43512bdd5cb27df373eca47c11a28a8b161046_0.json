{"sha": "7c43512bdd5cb27df373eca47c11a28a8b161046", "log": "Added support for external namespace registration   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/BasicNamespaceManager.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/Attic/BasicNamespaceManager.java,v 1.1 2004/01/18 01:43:29 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2004/01/18 01:43:29 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath;\n+\n+import java.util.HashMap;\n+\n+/**\n+ * The default implementation of NamespaceManager based on a simple HashMap.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2004/01/18 01:43:29 $\n+ */\n+public class BasicNamespaceManager implements NamespaceManager\n+{\n+    private HashMap prefixMap = new HashMap();\n+    \n+    /**\n+     * @see NamespaceManager#getNamespaceURI(String, Pointer)\n+     */\n+    public String getNamespaceURI(String prefix, Pointer context) {\n+        return (String) prefixMap.get(prefix);\n+    }\n+\n+    /**\n+     * @see NamespaceManager#registerNamespace(String, String)\n+     */\n+    public void registerNamespace(String prefix, String namespaceURI) {\n+        prefixMap.put(prefix, namespaceURI);\n+    }\n+}\n--- a/src/java/org/apache/commons/jxpath/JXPathContext.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathContext.java,v 1.19 2003/10/09 21:31:38 rdonkin Exp $\n- * $Revision: 1.19 $\n- * $Date: 2003/10/09 21:31:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathContext.java,v 1.20 2004/01/18 01:43:29 dmitri Exp $\n+ * $Revision: 1.20 $\n+ * $Date: 2004/01/18 01:43:29 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.19 $ $Date: 2003/10/09 21:31:38 $\n+ * @version $Revision: 1.20 $ $Date: 2004/01/18 01:43:29 $\n  */\n public abstract class JXPathContext {\n     protected JXPathContext parentContext;\n     protected IdentityManager idManager;\n     protected KeyManager keyManager;\n     protected HashMap decimalFormats;\n+    protected NamespaceManager namespaceManager;\n \n     private static JXPathContextFactory contextFactory;\n     private static JXPathContext compilationContext;\n                     + \"no KeyManager has been specified\");\n         }\n     }\n+    \n+    /**\n+     * Install a namespace manager that will be used by the context\n+     * to look up namespace URI's for prefixes.\n+     */\n+    public void setNamespaceManager(NamespaceManager namespaceManager) {\n+        this.namespaceManager = namespaceManager;\n+    }\n+\n+    /**\n+     * Returns this context's namespace manager. If none has been installed,\n+     * returns the key manager of the parent context, or the default\n+     * namespace manager.\n+     */\n+    public NamespaceManager getNamespaceManager() {\n+        if (keyManager == null && parentContext != null) {\n+            return parentContext.getNamespaceManager();\n+        }\n+        if (namespaceManager == null) {\n+            namespaceManager = new BasicNamespaceManager();\n+        }\n+        return namespaceManager;\n+    }\n+\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/NamespaceManager.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/Attic/NamespaceManager.java,v 1.1 2004/01/18 01:43:29 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2004/01/18 01:43:29 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath;\n+\n+/**\n+ * A delegate of JXPathContext that resolves prefixes into namespaceURI's.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2004/01/18 01:43:29 $\n+ */\n+public interface NamespaceManager {\n+\n+    /**\n+     * Given a prefix, returns a registered namespace URI.\n+     * @param prefix The namespace prefix to look up\n+     * @param context The location in the object graph (or XML file) defining\n+     *    the context for the lookup. \n+     * @return namespace URI or null if the prefix is undefined.\n+     */\n+    String getNamespaceURI(String prefix, Pointer context);\n+    \n+    /**\n+     * Registers a namespace defined in the global context.\n+     * \n+     * @param prefix\n+     * @param namespaceURI\n+     */\n+    void registerNamespace(String prefix, String namespaceURI);    \n+}\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.35 2003/10/09 21:31:38 rdonkin Exp $\n- * $Revision: 1.35 $\n- * $Date: 2003/10/09 21:31:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.36 2004/01/18 01:43:30 dmitri Exp $\n+ * $Revision: 1.36 $\n+ * $Date: 2004/01/18 01:43:30 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * The reference implementation of JXPathContext.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.35 $ $Date: 2003/10/09 21:31:38 $\n+ * @version $Revision: 1.36 $ $Date: 2004/01/18 01:43:30 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext {\n     \n                 NodePointer.newNodePointer(\n                     new QName(null, \"root\"),\n                     contextPointer.getRootNode(),\n-                    getLocale());\n+                    getLocale(),\n+                    getNamespaceManager());\n         }\n         else {\n             this.contextPointer =\n                 NodePointer.newNodePointer(\n                     new QName(null, \"root\"),\n                     contextBean,\n-                    getLocale());\n+                    getLocale(),\n+                    getNamespaceManager());\n             this.rootPointer = this.contextPointer;\n         }\n     }\n             return (Pointer) result;\n         }\n         else {\n-            return NodePointer.newNodePointer(null, result, getLocale());\n+            return NodePointer.newNodePointer(\n+                    null,\n+                    result,\n+                    getLocale(),\n+                    getNamespaceManager());\n         }\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/axes/RootContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/RootContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/RootContext.java,v 1.13 2003/10/09 21:31:39 rdonkin Exp $\n- * $Revision: 1.13 $\n- * $Date: 2003/10/09 21:31:39 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/RootContext.java,v 1.14 2004/01/18 01:43:29 dmitri Exp $\n+ * $Revision: 1.14 $\n+ * $Date: 2004/01/18 01:43:29 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * EvalContext that is used to hold the root node for the path traversal.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.13 $ $Date: 2003/10/09 21:31:39 $\n+ * @version $Revision: 1.14 $ $Date: 2004/01/18 01:43:29 $\n  */\n public class RootContext extends EvalContext {\n     private JXPathContextReferenceImpl jxpathContext;\n             pointer = (NodePointer) constant;\n         }\n         else {\n-            pointer =\n-                NodePointer.newNodePointer(new QName(null, \"\"), constant, null);\n+            pointer = NodePointer.newNodePointer(\n+                    new QName(null, \"\"),\n+                    constant,\n+                    null,\n+                    jxpathContext.getNamespaceManager());\n         }\n         return new InitialContext(new RootContext(jxpathContext, pointer));\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java,v 1.7 2003/10/09 21:31:39 rdonkin Exp $\n- * $Revision: 1.7 $\n- * $Date: 2003/10/09 21:31:39 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java,v 1.8 2004/01/18 01:43:30 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2004/01/18 01:43:30 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.jxpath.ri.compiler;\n \n+import org.apache.commons.jxpath.NamespaceManager;\n import org.apache.commons.jxpath.Pointer;\n import org.apache.commons.jxpath.ri.EvalContext;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n  * provides that hint.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2003/10/09 21:31:39 $\n+ * @version $Revision: 1.8 $ $Date: 2004/01/18 01:43:30 $\n  */\n public abstract class Expression {\n \n         private Iterator iterator;\n         private QName qname;\n         private Locale locale;\n-\n+        private NamespaceManager namespaceManager;\n+\n+        /**\n+         * @deprecated Use the method that takes a NamespaceManager\n+         */\n         public PointerIterator(Iterator it, QName qname, Locale locale) {\n+            this(it, qname, locale, null);\n+        }\n+\n+        public PointerIterator(\n+                Iterator it,\n+                QName qname,\n+                Locale locale,\n+                NamespaceManager namespaceManager) \n+        {\n             this.iterator = it;\n             this.qname = qname;\n             this.locale = locale;\n+            this.namespaceManager = namespaceManager;\n         }\n \n         public boolean hasNext() {\n \n         public Object next() {\n             Object o = iterator.next();\n-            return NodePointer.newNodePointer(qname, o, locale);\n+            return NodePointer.newNodePointer(\n+                    qname,\n+                    o,\n+                    locale,\n+                    namespaceManager);\n         }\n \n         public void remove() {\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.19 2003/10/09 21:31:40 rdonkin Exp $\n- * $Revision: 1.19 $\n- * $Date: 2003/10/09 21:31:40 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.20 2004/01/18 01:43:30 dmitri Exp $\n+ * $Revision: 1.20 $\n+ * $Date: 2004/01/18 01:43:30 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathException;\n+import org.apache.commons.jxpath.NamespaceManager;\n import org.apache.commons.jxpath.Pointer;\n import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;\n  * attribute and only simple, context-independent predicates.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.19 $ $Date: 2003/10/09 21:31:40 $\n+ * @version $Revision: 1.20 $ $Date: 2004/01/18 01:43:30 $\n  */\n public abstract class NodePointer implements Pointer {\n \n     /**\n      * Allocates an entirely new NodePointer by iterating through all installed\n      * NodePointerFactories until it finds one that can create a pointer.\n+     * \n+     * @deprecated Use instead\n+     *   {@link #newNodePointer(QName, Object, Locale, NamespaceManager) \n+     *          newNodePointer(QName, Object, Locale, NamespaceManager)}\n      */\n     public static NodePointer newNodePointer(\n         QName name,\n         Object bean,\n         Locale locale) \n     {\n+        return newNodePointer(name, bean, locale, null);\n+    }\n+    \n+    /**\n+     * Allocates an entirely new NodePointer by iterating through all installed\n+     * NodePointerFactories until it finds one that can create a pointer.\n+     */\n+    public static NodePointer newNodePointer(\n+            QName name,\n+            Object bean,\n+            Locale locale,\n+            NamespaceManager namespaceManager)\n+    {\n+        NodePointer pointer = null;\n         if (bean == null) {\n-            return new NullPointer(name, locale);\n-        }\n+            pointer = new NullPointer(name, locale);\n+            pointer.setNamespaceManager(namespaceManager);\n+            return pointer;\n+        }\n+        \n         NodePointerFactory[] factories =\n             JXPathContextReferenceImpl.getNodePointerFactories();\n         for (int i = 0; i < factories.length; i++) {\n-            NodePointer pointer =\n-                factories[i].createNodePointer(name, bean, locale);\n+            pointer = factories[i].createNodePointer(name, bean, locale);\n             if (pointer != null) {\n+                pointer.setNamespaceManager(namespaceManager);\n                 return pointer;\n             }\n         }\n \n     protected NodePointer parent;\n     protected Locale locale;\n+    private NamespaceManager namespaceManager;\n \n     protected NodePointer(NodePointer parent) {\n         this.parent = parent;\n     }\n \n     /**\n+     * Installs the supplied manager as the namespace manager for this node\n+     * pointer. The {@link #getNamespaceURI(String) getNamespaceURI(prefix)}\n+     * uses this manager to resolve namespace prefixes.\n+     * \n+     * @param namespaceManager\n+     */\n+    public void setNamespaceManager(NamespaceManager namespaceManager) {\n+        this.namespaceManager = namespaceManager;\n+    }\n+    \n+    public NamespaceManager getNamespaceManager() {\n+        if (namespaceManager != null) {\n+            return namespaceManager;\n+        }\n+        if (parent != null) {\n+            return parent.getNamespaceManager();\n+        }        \n+        return null;\n+    }\n+    \n+    /**\n      * Returns a NodeIterator that iterates over all children or all children\n      * that match the given NodeTest, starting with the specified one.\n      */\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointerFactory.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointerFactory.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointerFactory.java,v 1.5 2003/10/09 21:31:40 rdonkin Exp $\n- * $Revision: 1.5 $\n- * $Date: 2003/10/09 21:31:40 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointerFactory.java,v 1.6 2004/01/18 01:43:30 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2004/01/18 01:43:30 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * by the \"getOrder\" method and always queried in that order.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2003/10/09 21:31:40 $\n+ * @version $Revision: 1.6 $ $Date: 2004/01/18 01:43:30 $\n  */\n public interface NodePointerFactory {\n \n     /**\n-     * The factory name determines its position between other factories.\n+     * The factory order number determines its position between other factories.\n      */\n     int getOrder();\n \n     /**\n      * Create a NodePointer for the supplied object.  The node will represent\n-     * the \"root\" object a path.\n+     * the \"root\" object for a path.\n      *\n      * @return  null if this factory does not recognize objects of the supplied\n      * type.\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java,v 1.18 2003/10/09 21:31:41 rdonkin Exp $\n- * $Revision: 1.18 $\n- * $Date: 2003/10/09 21:31:41 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java,v 1.19 2004/01/18 01:43:30 dmitri Exp $\n+ * $Revision: 1.19 $\n+ * $Date: 2004/01/18 01:43:30 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.AbstractFactory;\n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathException;\n+import org.apache.commons.jxpath.NamespaceManager;\n import org.apache.commons.jxpath.Pointer;\n import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.QName;\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.18 $ $Date: 2003/10/09 21:31:41 $\n+ * @version $Revision: 1.19 $ $Date: 2004/01/18 01:43:30 $\n  */\n public class DOMNodePointer extends NodePointer {\n     private Node node;\n                     }\n                 }\n                 aNode = aNode.getParentNode();\n+            }\n+            if (namespace == null) {\n+                NamespaceManager manager = getNamespaceManager();\n+                if (manager != null) {\n+                    namespace = manager.getNamespaceURI(prefix, this);\n+                }\n             }\n             if (namespace == null || namespace.equals(\"\")) {\n                 namespace = NodePointer.UNKNOWN_NAMESPACE;\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java,v 1.10 2003/10/09 21:31:41 rdonkin Exp $\n- * $Revision: 1.10 $\n- * $Date: 2003/10/09 21:31:41 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java,v 1.11 2004/01/18 01:43:30 dmitri Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2004/01/18 01:43:30 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.AbstractFactory;\n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathException;\n+import org.apache.commons.jxpath.NamespaceManager;\n import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.compiler.NodeNameTest;\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.10 $ $Date: 2003/10/09 21:31:41 $\n+ * @version $Revision: 1.11 $ $Date: 2004/01/18 01:43:30 $\n  */\n public class JDOMNodePointer extends NodePointer {\n     private Object node;\n             Element element = (Element) node;\n             Namespace ns = element.getNamespace(prefix);\n             if (ns == null) {\n+                NamespaceManager manager = getNamespaceManager();\n+                if (manager != null) {\n+                    return manager.getNamespaceURI(prefix, this);\n+                }\n+\n                 return null;\n             }\n             return ns.getURI();\n--- a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java,v 1.6 2003/10/09 21:31:43 rdonkin Exp $\n- * $Revision: 1.6 $\n- * $Date: 2003/10/09 21:31:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java,v 1.7 2004/01/18 01:43:30 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2004/01/18 01:43:30 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Test basic functionality of JXPath - core functions.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2003/10/09 21:31:43 $\n+ * @version $Revision: 1.7 $ $Date: 2004/01/18 01:43:30 $\n  */\n \n public class CoreFunctionTest extends JXPathTestCase {\n                 String key,\n                 String value) \n             {\n-                return NodePointer.newNodePointer(null, \"42\", null);\n+                return NodePointer.newNodePointer(null, \"42\", null, null);\n             }\n         });\n \n--- a/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java,v 1.9 2003/10/09 21:31:43 rdonkin Exp $\n- * $Revision: 1.9 $\n- * $Date: 2003/10/09 21:31:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java,v 1.10 2004/01/18 01:43:30 dmitri Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2004/01/18 01:43:30 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Test extension functions.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2003/10/09 21:31:43 $\n+ * @version $Revision: 1.10 $ $Date: 2004/01/18 01:43:30 $\n  */\n \n public class ExtensionFunctionTest extends JXPathTestCase {\n             return NodePointer.newNodePointer(\n                 null,\n                 object,\n-                Locale.getDefault());\n+                Locale.getDefault(),\n+                null);\n         }\n \n         public List getContextNodeList() {\n--- a/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java,v 1.16 2004/01/17 03:25:14 dmitri Exp $\n- * $Revision: 1.16 $\n- * $Date: 2004/01/17 03:25:14 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java,v 1.17 2004/01/18 01:43:30 dmitri Exp $\n+ * $Revision: 1.17 $\n+ * $Date: 2004/01/18 01:43:30 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Abstract superclass for Bean access with JXPath.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.16 $ $Date: 2004/01/17 03:25:14 $\n+ * @version $Revision: 1.17 $ $Date: 2004/01/18 01:43:30 $\n  */\n \n public abstract class BeanModelTestCase extends JXPathTestCase {\n             (PropertyOwnerPointer) NodePointer.newNodePointer(\n                 new QName(null, \"root\"),\n                 createContextBean(),\n-                Locale.getDefault());\n+                Locale.getDefault(),\n+                null);\n \n         NodeIterator it;\n \n             (PropertyOwnerPointer) NodePointer.newNodePointer(\n                 new QName(null, \"root\"),\n                 createContextBean(),\n-                Locale.getDefault());\n+                Locale.getDefault(),\n+                null);\n         NodeIterator it;\n \n         PropertyPointer start = null;\n--- a/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java,v 1.14 2004/01/17 03:25:14 dmitri Exp $\n- * $Revision: 1.14 $\n- * $Date: 2004/01/17 03:25:14 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java,v 1.15 2004/01/18 01:43:30 dmitri Exp $\n+ * $Revision: 1.15 $\n+ * $Date: 2004/01/18 01:43:30 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.IdentityManager;\n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathTestCase;\n+import org.apache.commons.jxpath.NamespaceManager;\n import org.apache.commons.jxpath.Pointer;\n import org.apache.commons.jxpath.Variables;\n import org.apache.commons.jxpath.xml.DocumentContainer;\n  * DOM, JDOM etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.14 $ $Date: 2004/01/17 03:25:14 $\n+ * @version $Revision: 1.15 $ $Date: 2004/01/18 01:43:30 $\n  */\n \n public abstract class XMLModelTestCase extends JXPathTestCase {\n     }\n     \n     protected abstract AbstractFactory getAbstractFactory();\n-\n+    \n+    protected abstract boolean isExternalNamespaceSupported();\n+    \n     protected JXPathContext createContext() {\n         JXPathContext context =\n             JXPathContext.newContext(createDocumentContainer());\n             context,\n             \"vendor/location/address/city\",\n             \"Fruit Market\");\n+        \n         // local-name(qualified)\n         assertXPathValue(\n             context,\n             \"local-name(vendor/product/price:amount)\",\n             \"amount\");\n-\n+        \n         // local-name(non-qualified)\n         assertXPathValue(context, \"local-name(vendor/location)\", \"location\");\n \n \n         // default namespace does not affect search\n         assertXPathValue(context, \"vendor/product/prix\", \"934.99\");\n-\n+        \n         // child:: with a wildcard\n         assertXPathValue(\n             context,\n                 \"vendor//location[last()]\",\n                 \"/vendor[1]/location[2]\");\n     }\n+    \n+    public void testExternalNamespace() {\n+        if (isExternalNamespaceSupported()) {\n+             DocumentContainer container = new DocumentContainer(\n+                    XMLModelTestCase.class.getResource(\"ExternalNamespaceTest.xml\"),\n+                    getModel());\n+            JXPathContext context = JXPathContext.newContext(container);             \n+            NamespaceManager nsm = context.getNamespaceManager();\n+            nsm.registerNamespace(\"quality\", \"qualityNS\");\n+            nsm.registerNamespace(\"money\", \"priceNS\");\n+            \n+            assertXPathValueAndPointer(\n+                    context,\n+                    \"//quality:color\",\n+                    \"orange\",\n+                    \"/vendor[1]/product[1]/quality:color[1]\");\n+            \n+            // It is supposed to figure out that the prefixes \"money\" and\n+            // \"value\" map to the same namespaceURI\n+            assertXPathValueAndPointer(\n+                    context,\n+                    \"//value:price\",\n+                    \"1000.00\",\n+                    \"/vendor[1]/product[1]/money:price[1]\");\n+            \n+            assertXPathValue(\n+                    context,\n+                    \"local-name(vendor/product/value:price)\",\n+                    \"price\");\n+            \n+            assertXPathValue(\n+                    context,\n+                    \"name(vendor/product/quality:color)\",\n+                    \"qualityNS:color\");\n+\n+            assertXPathValue(\n+                    context,\n+                    \"namespace-uri(vendor/product/value:price)\",\n+                    \"priceNS\");\n+        }\n+    }\n }\n--- a/src/test/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java,v 1.8 2003/10/09 21:31:44 rdonkin Exp $\n- * $Revision: 1.8 $\n- * $Date: 2003/10/09 21:31:44 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java,v 1.9 2004/01/18 01:43:30 dmitri Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2004/01/18 01:43:30 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Tests JXPath with DOM\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.8 $ $Date: 2003/10/09 21:31:44 $\n+ * @version $Revision: 1.9 $ $Date: 2004/01/18 01:43:30 $\n  */\n \n public class DOMModelTest extends XMLModelTestCase {\n+    \n     /**\n      * Construct a new instance of this test case.\n      *\n         return new TestDOMFactory();\n     }\n \n+    protected boolean isExternalNamespaceSupported() {\n+        return true;\n+    }\n+    \n     protected String getXMLSignature(\n         Object node,\n         boolean elements,\n--- a/src/test/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java,v 1.8 2003/10/09 21:31:44 rdonkin Exp $\n- * $Revision: 1.8 $\n- * $Date: 2003/10/09 21:31:44 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java,v 1.9 2004/01/18 01:43:30 dmitri Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2004/01/18 01:43:30 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Tests JXPath with JDOM\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.8 $ $Date: 2003/10/09 21:31:44 $\n+ * @version $Revision: 1.9 $ $Date: 2004/01/18 01:43:30 $\n  */\n \n public class JDOMModelTest extends XMLModelTestCase {\n     protected String getModel() {\n         return DocumentContainer.MODEL_JDOM;\n     }\n-\n+    \n+    protected boolean isExternalNamespaceSupported() {\n+        return false;  // Until a bug preventing external NS in JDOM B9 is fixed\n+    }\n+        \n     public void testID() {\n         // id() is not supported by JDOM\n     }", "timestamp": 1074390210, "metainfo": ""}