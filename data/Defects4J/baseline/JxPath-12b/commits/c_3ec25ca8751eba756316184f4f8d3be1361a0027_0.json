{"sha": "3ec25ca8751eba756316184f4f8d3be1361a0027", "log": "Implemented lang() and @xml:lang   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/JXPathContext.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathContext.java,v 1.2 2001/09/08 20:59:58 dmitri Exp $\n- * $Revision: 1.2 $\n- * $Date: 2001/09/08 20:59:58 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathContext.java,v 1.3 2001/09/26 01:21:54 dmitri Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2001/09/26 01:21:54 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n import java.util.List;\n import org.w3c.dom.Node;\n+import java.util.Locale;\n \n /**\n  * JXPathContext provides APIs for the traversal of graphs of JavaBeans using\n  * See <a href=\"http://www.w3.org/TR/xpath\">XML Path Language (XPath) Version 1.0 </a>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.2 $ $Date: 2001/09/08 20:59:58 $\n+ * @version $Revision: 1.3 $ $Date: 2001/09/26 01:21:54 $\n  */\n public abstract class JXPathContext {\n     protected JXPathContext parentContext;\n     protected Object contextBean;\n     protected Variables vars;\n     protected Functions functions;\n+    protected Locale locale;\n \n     /**\n      * Creates a new JXPathContext with the specified bean as the root node.\n     public Functions getFunctions(){\n         // TBD: default lib\n         return functions;\n+    }\n+\n+    /**\n+     * Set the locale for this context.  The value of the \"lang\"\n+     * attribute as well as the the lang() function will be\n+     * affected by the locale.  By default, JXPath uses\n+     * <code>Locale.getDefault()</code>\n+     */\n+    public void setLocale(Locale locale){\n+        this.locale = locale;\n+    }\n+\n+    /**\n+     * Returns the locale set with setLocale or Locale.getDefault()\n+     * by default.\n+     */\n+    protected Locale getLocale(){\n+        if (locale == null){\n+            locale = Locale.getDefault();\n+        }\n+        return locale;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/EvalContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/EvalContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/EvalContext.java,v 1.3 2001/09/21 23:22:43 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2001/09/21 23:22:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/EvalContext.java,v 1.4 2001/09/26 01:21:54 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2001/09/26 01:21:54 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * implement behavior of various XPath axes: \"child::\", \"parent::\" etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2001/09/21 23:22:43 $\n+ * @version $Revision: 1.4 $ $Date: 2001/09/26 01:21:54 $\n  */\n public abstract class EvalContext implements ExpressionContext {\n     protected EvalContext parentContext;\n             case Compiler.FUNCTION_LAST:                return functionLast(function);\n             case Compiler.FUNCTION_POSITION:            return functionPosition(function);\n             case Compiler.FUNCTION_COUNT:               return functionCount(function);\n-\n-            case Compiler.FUNCTION_LANG:\n+            case Compiler.FUNCTION_LANG:                return functionLang(function);\n             case Compiler.FUNCTION_ID:\n             {\n                 System.err.println(\"UNIMPLEMENTED: \" + function);\n         return new Double(count);\n     }\n \n+    protected Object functionLang(CoreFunction function){\n+        assertArgCount(function, 1);\n+        String lang = stringValue(eval(function.getArg1()));\n+        NodePointer pointer = (NodePointer)getContextNodePointer();\n+        if (pointer == null){\n+            return Boolean.FALSE;\n+        }\n+        return pointer.isLanguage(lang) ? Boolean.TRUE: Boolean.FALSE;\n+    }\n+\n     protected Object functionNamespaceURI(CoreFunction function){\n         if (function.getArgumentCount() == 0){\n             return getCurrentNodePointer();\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.4 2001/09/21 23:22:43 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2001/09/21 23:22:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.5 2001/09/26 01:21:54 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2001/09/26 01:21:54 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2001/09/21 23:22:43 $\n+ * @version $Revision: 1.5 $ $Date: 2001/09/26 01:21:54 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext\n {\n             return (Pointer)result;\n         }\n         else {\n-            return NodePointer.createNodePointer(null, result);\n+            return NodePointer.createNodePointer(null, result, getLocale());\n         }\n     }\n \n             list.add((Pointer)result);\n         }\n         else {\n-            list.add(NodePointer.createNodePointer(null, result));\n+            list.add(NodePointer.createNodePointer(null, result, getLocale()));\n         }\n         return list;\n     }\n \n     private Object eval(String xpath, boolean firstMatchLookup) {\n         Expression expr = compile(xpath);\n-        NodePointer pointer = NodePointer.createNodePointer(new QName(null, \"root\"), getContextBean());\n+        NodePointer pointer = NodePointer.createNodePointer(new QName(null, \"root\"), getContextBean(), getLocale());\n         EvalContext ctx = new RootContext(this, pointer);\n //        System.err.println(\"XPATH = \" + xpath);\n         return ctx.eval(expr, firstMatchLookup);\n--- a/src/java/org/apache/commons/jxpath/ri/axes/RootContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/RootContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/RootContext.java,v 1.2 2001/09/21 23:22:44 dmitri Exp $\n- * $Revision: 1.2 $\n- * $Date: 2001/09/21 23:22:44 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/RootContext.java,v 1.3 2001/09/26 01:21:54 dmitri Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2001/09/26 01:21:54 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * EvalContext that is used to hold the root node for the path traversal.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.2 $ $Date: 2001/09/21 23:22:44 $\n+ * @version $Revision: 1.3 $ $Date: 2001/09/26 01:21:54 $\n  */\n public class RootContext extends EvalContext {\n     private boolean startedSet = false;\n     }\n \n     public EvalContext getConstantContext(Object constant){\n-        NodePointer pointer = NodePointer.createNodePointer(new QName(null, \"\"), constant);\n+        NodePointer pointer = NodePointer.createNodePointer(new QName(null, \"\"), constant, null);\n         return new InitialContext(new RootContext(parent, pointer));\n     }\n \n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/BeanAttributeIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/BeanAttributeIterator.java,v 1.1 2001/09/26 01:21:54 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2001/09/26 01:21:54 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.pointers;\n+\n+import org.apache.commons.jxpath.*;\n+import org.apache.commons.jxpath.ri.Compiler;\n+import org.apache.commons.jxpath.ri.compiler.*;\n+\n+import java.lang.reflect.*;\n+import java.util.*;\n+import java.beans.*;\n+import org.w3c.dom.*;\n+\n+/**\n+ * An iterator of attributes of a JavaBean. Currently supports only one\n+ * attribute - \"lang\".\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2001/09/26 01:21:54 $\n+ */\n+public class BeanAttributeIterator implements NodeIterator {\n+    private NodePointer parent;\n+    private QName name;\n+    private int position = 0;\n+\n+    public BeanAttributeIterator(NodePointer parent, QName name){\n+        this.parent = parent;\n+        this.name = name;\n+    }\n+\n+    public NodePointer getNodePointer(){\n+        return new LangAttributePointer(parent);\n+    }\n+\n+    public int getPosition(){\n+        return position;\n+    }\n+\n+    public boolean setPosition(int position){\n+        this.position = position;\n+        return position == 1 && name.getPrefix() != null && name.getPrefix().equals(\"xml\") &&\n+            (name.getName().equals(\"lang\") || name.getName().equals(\"*\"));\n+    }\n+}\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/BeanPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/BeanPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/BeanPointer.java,v 1.3 2001/09/21 23:22:45 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2001/09/21 23:22:45 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/BeanPointer.java,v 1.4 2001/09/26 01:21:54 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2001/09/26 01:21:54 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * a path, following elements will by of type PropertyPointer.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2001/09/21 23:22:45 $\n+ * @version $Revision: 1.4 $ $Date: 2001/09/26 01:21:54 $\n  */\n public class BeanPointer extends PropertyOwnerPointer {\n     private QName name;\n     private PropertyDescriptor propertyDescriptors[];\n     private String[] names;\n \n-    public BeanPointer(QName name, Object bean, JXPathBeanInfo beanInfo){\n-        this(null, name, bean, beanInfo);\n+    public BeanPointer(QName name, Object bean, JXPathBeanInfo beanInfo, Locale locale){\n+        super(null, locale);\n+        this.name = name;\n+        this.bean = bean;\n+        this.beanInfo = beanInfo;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/ContainerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/ContainerPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/ContainerPointer.java,v 1.2 2001/09/21 23:22:45 dmitri Exp $\n- * $Revision: 1.2 $\n- * $Date: 2001/09/21 23:22:45 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/ContainerPointer.java,v 1.3 2001/09/26 01:21:54 dmitri Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2001/09/26 01:21:54 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * itself.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.2 $ $Date: 2001/09/21 23:22:45 $\n+ * @version $Revision: 1.3 $ $Date: 2001/09/26 01:21:54 $\n  */\n public class ContainerPointer extends NodePointer {\n     private Container container;\n     private NodePointer valuePointer;\n \n-    public ContainerPointer(Container container){\n-        this(null, container);\n+    public ContainerPointer(Container container, Locale locale){\n+        super(null, locale);\n+        this.container = container;\n     }\n \n     public ContainerPointer(NodePointer parent, Container container){\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/DOMNodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/DOMNodePointer.java,v 1.2 2001/09/21 23:22:45 dmitri Exp $\n- * $Revision: 1.2 $\n- * $Date: 2001/09/21 23:22:45 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/DOMNodePointer.java,v 1.3 2001/09/26 01:21:54 dmitri Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2001/09/26 01:21:54 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.2 $ $Date: 2001/09/21 23:22:45 $\n+ * @version $Revision: 1.3 $ $Date: 2001/09/26 01:21:54 $\n  */\n public class DOMNodePointer extends NodePointer {\n     private Node node;\n     public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n     public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n \n-    public DOMNodePointer(Node node){\n-        super(null);\n+    public DOMNodePointer(Node node, Locale locale){\n+        super(null, locale);\n         this.node = node;\n     }\n \n \n     public boolean isLeaf(){\n         return !node.hasChildNodes();\n+    }\n+\n+    /**\n+     * Returns true if the xml:lang attribute for the current node\n+     * or its parent has the specified prefix <i>lang</i>.\n+     * If no node has this prefix, calls <code>super.isLanguage(lang)</code>.\n+     */\n+    public boolean isLanguage(String lang){\n+        String current = getLanguage();\n+        if (current == null){\n+            return super.isLanguage(lang);\n+        }\n+        return current.toUpperCase().startsWith(lang.toUpperCase());\n+    }\n+\n+    protected String getLanguage(){\n+        Node n = node;\n+        while (n != null){\n+            if (n.getNodeType() == Node.ELEMENT_NODE){\n+                Element e = (Element)n;\n+                String attr = e.getAttribute(\"xml:lang\");\n+                if (attr != null && !attr.equals(\"\")){\n+                    return attr;\n+                }\n+            }\n+            n = n.getParentNode();\n+        }\n+        return null;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/DynamicPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/DynamicPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/DynamicPointer.java,v 1.3 2001/09/21 23:22:45 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2001/09/21 23:22:45 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/DynamicPointer.java,v 1.4 2001/09/26 01:21:54 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2001/09/26 01:21:54 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * for the first element of a path; following elements will by of type PropertyPointer.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2001/09/21 23:22:45 $\n+ * @version $Revision: 1.4 $ $Date: 2001/09/26 01:21:54 $\n  */\n public class DynamicPointer extends PropertyOwnerPointer {\n     private QName name;\n     private DynamicPropertyHandler handler;\n     private String[] names;\n \n-    public DynamicPointer(QName name, Object bean, DynamicPropertyHandler handler){\n-        this(null, name, bean, handler);\n+    public DynamicPointer(QName name, Object bean, DynamicPropertyHandler handler, Locale locale){\n+        super(null, locale);\n+        this.name = name;\n+        this.bean = bean;\n+        this.handler = handler;\n     }\n \n     public DynamicPointer(NodePointer parent, QName name, Object bean, DynamicPropertyHandler handler){\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/LangAttributePointer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/LangAttributePointer.java,v 1.1 2001/09/26 01:21:54 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2001/09/26 01:21:54 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.ri.pointers;\n+\n+import org.apache.commons.jxpath.*;\n+import org.apache.commons.jxpath.ri.Compiler;\n+import org.apache.commons.jxpath.ri.compiler.*;\n+\n+import java.lang.reflect.*;\n+import java.util.*;\n+import java.beans.*;\n+import org.w3c.dom.*;\n+\n+/**\n+ * A Pointer that points to the \"lang\" attribute of a JavaBean. The value\n+ * of the attribute is based on the locale supplied to it in the constructor.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2001/09/26 01:21:54 $\n+ */\n+public class LangAttributePointer extends NodePointer {\n+    public LangAttributePointer(NodePointer parent){\n+        super(parent);\n+    }\n+\n+    public QName getName(){\n+        return new QName(null, \"lang\");\n+    }\n+\n+    public QName getExpandedName(){\n+        return getName();\n+    }\n+\n+    public String getNamespaceURI(){\n+        return null;\n+    }\n+\n+    public Object getBaseValue(){\n+        return parent.getLocale().toString().replace('_', '-');\n+    }\n+\n+    public Object getValue(){\n+        return getBaseValue();\n+    }\n+\n+    public boolean isLeaf(){\n+        return true;\n+    }\n+\n+    /**\n+     * Throws UnsupportedOperationException.\n+     */\n+    public void setValue(Object value){\n+        throw new UnsupportedOperationException(\"Cannot change locale using the 'lang' attribute\");\n+    }\n+\n+    /**\n+     */\n+    public String asPath(){\n+        StringBuffer buffer = new StringBuffer();\n+        if (parent != null){\n+            buffer.append(parent.asPath());\n+            buffer.append('/');\n+        }\n+        buffer.append(\"@xml:lang\");\n+        return buffer.toString();\n+    }\n+\n+    public int hashCode(){\n+        return 0;\n+    }\n+\n+    public boolean equals(Object object){\n+        if (object == this){\n+            return true;\n+        }\n+\n+        if (!(object instanceof LangAttributePointer)){\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    public boolean testNode(NodeTest test){\n+        return false;\n+    }\n+}\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/NodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/NodePointer.java,v 1.3 2001/09/21 23:22:45 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2001/09/21 23:22:45 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/NodePointer.java,v 1.4 2001/09/26 01:21:54 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2001/09/26 01:21:54 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Common superclass for Poitners of all kinds.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2001/09/21 23:22:45 $\n+ * @version $Revision: 1.4 $ $Date: 2001/09/26 01:21:54 $\n  */\n public abstract class NodePointer implements Pointer, Cloneable {\n \n     protected int index = WHOLE_COLLECTION;\n     public static String UNKNOWN_NAMESPACE = \"<<unknown namespace>>\";\n \n-    public static NodePointer createNodePointer(QName name, Object bean){\n+    public static NodePointer createNodePointer(QName name, Object bean, Locale locale){\n         if (bean == null){\n-            return new NullPointer(name);\n+            return new NullPointer(name, locale);\n         }\n         if (bean instanceof Node){\n-            return new DOMNodePointer((Node)bean);\n+            return new DOMNodePointer((Node)bean, locale);\n         }\n         if (bean instanceof Container){\n-            return new ContainerPointer((Container)bean);\n+            return new ContainerPointer((Container)bean, locale);\n         }\n \n         JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());\n         if (bi.isDynamic()){\n             DynamicPropertyHandler handler = PropertyAccessHelper.getDynamicPropertyHandler(bi.getDynamicPropertyHandlerClass());\n-            return new DynamicPointer(name, bean, handler);\n+            return new DynamicPointer(name, bean, handler, locale);\n         }\n         else {\n-            return new BeanPointer(name, bean, bi);\n+            return new BeanPointer(name, bean, bi, locale);\n         }\n     }\n \n     }\n \n     protected NodePointer parent;\n+    protected Locale locale;\n \n     protected NodePointer(NodePointer parent){\n         this.parent = parent;\n+    }\n+\n+    protected NodePointer(NodePointer parent, Locale locale){\n+        this.parent = parent;\n+        this.locale = locale;\n     }\n \n     public NodePointer getParent(){\n     public abstract Object getBaseValue();\n     public abstract void setValue(Object value);\n     public abstract boolean testNode(NodeTest nodeTest);\n+\n+    public Locale getLocale(){\n+        if (locale == null){\n+            if (parent != null){\n+                locale = parent.getLocale();\n+            }\n+        }\n+        return locale;\n+    }\n+\n+    /**\n+     * Returns true if the selected locale name starts\n+     * with the specified prefix <i>lang</i>, case-insensitive.\n+     */\n+    public boolean isLanguage(String lang){\n+        Locale loc = getLocale();\n+        String name = loc.toString().replace('_', '-');\n+        return name.toUpperCase().startsWith(lang.toUpperCase());\n+    }\n \n     public String asPath(){\n         StringBuffer buffer = new StringBuffer();\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/NullPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/NullPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/NullPointer.java,v 1.3 2001/09/21 23:22:45 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2001/09/21 23:22:45 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/NullPointer.java,v 1.4 2001/09/26 01:21:54 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2001/09/26 01:21:54 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2001/09/21 23:22:45 $\n+ * @version $Revision: 1.4 $ $Date: 2001/09/26 01:21:54 $\n  */\n public class NullPointer extends PropertyOwnerPointer {\n     private QName name;\n \n-    public NullPointer(QName name){\n-        this(null, name);\n+    public NullPointer(QName name, Locale locale){\n+        super(null, locale);\n+        this.name = name;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/pointers/PropertyOwnerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/pointers/PropertyOwnerPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/PropertyOwnerPointer.java,v 1.2 2001/09/21 23:22:45 dmitri Exp $\n- * $Revision: 1.2 $\n- * $Date: 2001/09/21 23:22:45 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/pointers/Attic/PropertyOwnerPointer.java,v 1.3 2001/09/26 01:21:54 dmitri Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2001/09/26 01:21:54 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * a collection.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.2 $ $Date: 2001/09/21 23:22:45 $\n+ * @version $Revision: 1.3 $ $Date: 2001/09/26 01:21:54 $\n  */\n public abstract class PropertyOwnerPointer extends NodePointer {\n \n         return true;\n     }\n \n+    public NodeIterator attributeIterator(QName name){\n+        return new BeanAttributeIterator(this, name);\n+    }\n+\n     public static int UNSPECIFIED_PROPERTY = Integer.MIN_VALUE;\n+\n+    protected PropertyOwnerPointer(NodePointer parent, Locale locale){\n+        super(parent, locale);\n+    }\n \n     protected PropertyOwnerPointer(NodePointer parent){\n         super(parent);\n--- a/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.7 2001/09/21 23:30:32 dmitri Exp $\n- * $Revision: 1.7 $\n- * $Date: 2001/09/21 23:30:32 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.8 2001/09/26 01:21:54 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2001/09/26 01:21:54 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * </p>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2001/09/21 23:30:32 $\n+ * @version $Revision: 1.8 $ $Date: 2001/09/26 01:21:54 $\n  */\n \n public class JXPathTestCase extends TestCase\n     }\n \n     private void testIndividual(int relativePropertyIndex, int offset, boolean useStartLocation, boolean reverse, int expected){\n-        PropertyOwnerPointer root = (PropertyOwnerPointer)NodePointer.createNodePointer(new QName(null, \"root\"), bean);\n+        PropertyOwnerPointer root = (PropertyOwnerPointer)NodePointer.createNodePointer(new QName(null, \"root\"), bean, Locale.getDefault());\n         NodeIterator it;\n \n         if (useStartLocation){\n     }\n \n     private void testMultiple(int propertyIndex, int offset, boolean useStartLocation, boolean reverse, int expected){\n-        PropertyOwnerPointer root = (PropertyOwnerPointer)NodePointer.createNodePointer(new QName(null, \"root\"), bean);\n+        PropertyOwnerPointer root = (PropertyOwnerPointer)NodePointer.createNodePointer(new QName(null, \"root\"), bean, Locale.getDefault());\n         NodeIterator it;\n \n         if (useStartLocation){\n     }\n \n     public void testParser(JXPathContext ctx, boolean ignorePath){\n+        ctx.setLocale(Locale.US);\n         ctx.getVariables().declareVariable(\"a\", new Double(1));\n         ctx.getVariables().declareVariable(\"b\", new Double(1));\n         ctx.getVariables().declareVariable(\"nan\", new Double(Double.NaN));\n         test(\"count(set)\", new Double(3)),\n         test(\"boolean\", Boolean.FALSE),\n         testEval(\"foo:boolean\", list()),\n-        test(\"@*\", null),\n+        test(\"count(@*)\", new Double(0)),\n         testPath(\"boolean\", \"/boolean\"),\n         testEvalPath(\"boolean\", list(\"/boolean\")),\n         test(\"nestedBean/name\", \"Name 0\"),\n         test(\"round(1.5)\", new Double(2)),\n         test(\"round(-1.5)\", new Double(-1)),\n         test(\"null()\", null),\n+        test(\"@xml:lang\", \"en-US\"),\n+        test(\"count(@xml:*)\", new Double(1)),\n+        test(\"@foo\", null),\n+        test(\"lang('en')\", Boolean.TRUE),\n+        test(\"lang('fr')\", Boolean.FALSE),\n+\n \n         // Extension functions\n         test(\"string(test:new())\", \"foo=0; bar=null\"),\n             XMLDocumentContainer docCtr = new XMLDocumentContainer(getClass().getResource(\"Test.properties\"));\n             Document doc = (Document)docCtr.getValue();\n             JXPathContext ctx = JXPathContextFactory.newInstance().newContext(null, doc);\n+            ctx.setLocale(Locale.US);\n             ctx.getVariables().declareVariable(\"dom\", doc);\n             ctx.getVariables().declareVariable(\"object\", docCtr);\n             TestBeanWithDOM tbwdom = new TestBeanWithDOM();\n         testPath(\"//nsnode/processing-instruction('do')\", \"/vendor[1]/nsnode[1]/processing-instruction('do')[1]\"),\n         test(\"name(//nsnode/processing-instruction()[1])\", \"go\"),\n \n+        test(\"//nsnode/baz/@xml:lang\", \"fr\"),\n+        test(\"//nsnode/baz[lang('fr')]\", \"BAZ\"),\n+        test(\"//nsnode/foo:x[lang('en')]/y\", \"why\"),\n         test(\"vendor/location/@blank\", \"\"),\n         test(\"vendor/location/@missing\", null),\n         test(\"count(vendor/location[1]/@*)\", new Double(3)),", "timestamp": 1001467314, "metainfo": ""}