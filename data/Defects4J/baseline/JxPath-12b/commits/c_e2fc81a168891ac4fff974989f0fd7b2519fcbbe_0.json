{"sha": "e2fc81a168891ac4fff974989f0fd7b2519fcbbe", "log": "Fix problems with document order   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/EvalContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/EvalContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/EvalContext.java,v 1.14 2002/05/08 00:40:00 dmitri Exp $\n- * $Revision: 1.14 $\n- * $Date: 2002/05/08 00:40:00 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/EvalContext.java,v 1.15 2002/05/29 00:41:33 dmitri Exp $\n+ * $Revision: 1.15 $\n+ * $Date: 2002/05/29 00:41:33 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * implement behavior of various XPath axes: \"child::\", \"parent::\" etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.14 $ $Date: 2002/05/08 00:40:00 $\n+ * @version $Revision: 1.15 $ $Date: 2002/05/29 00:41:33 $\n  */\n public abstract class EvalContext implements ExpressionContext, Iterator {\n     protected EvalContext parentContext;\n     protected int position = 0;\n     private boolean startedSetIteration = false;\n     private boolean done = false;\n+    private Iterator pointerIterator;\n+\n+    // Sorts in the reverse order to the one defined by the Comparable\n+    // interface.\n+    private static final Comparator REVERSE_COMPARATOR = new Comparator(){\n+        public int compare(Object o1, Object o2){\n+            return ((Comparable)o2).compareTo(o1);\n+        }\n+    };\n \n     public EvalContext(EvalContext parentContext){\n         this.parentContext = parentContext;\n     }\n \n     /**\n+     * Determines the document order for this context.\n+     *\n+     * @return 1 ascending order, -1 descending order,\n+     *  0 - does not require ordering\n+     */\n+    public int getDocumentOrder(){\n+        // Default behavior: if the parent needs to be ordered,\n+        // this one needs to be ordered too\n+        if (parentContext != null && parentContext.getDocumentOrder() != 0){\n+            return 1;\n+        }\n+        return 0;\n+    }\n+\n+    /**\n      * Returns true if there are mode nodes matching the context's constraints.\n      */\n     public boolean hasNext(){\n-        if (done){\n-            return false;\n-        }\n-        if (position == 0){\n-            while (nextSet()){\n-                if (nextNode()){\n-                    return true;\n+        if (pointerIterator != null){\n+            return pointerIterator.hasNext();\n+        }\n+\n+        if (getDocumentOrder() != 0){\n+            return constructIterator();\n+        }\n+        else {\n+            if (done){\n+                return false;\n+            }\n+            if (position == 0){\n+                while (nextSet()){\n+                    if (nextNode()){\n+                        return true;\n+                    }\n                 }\n-            }\n-            return false;\n-        }\n-        return true;\n+                return false;\n+            }\n+            return true;\n+        }\n     }\n \n     /**\n      * Returns the next node pointer in the context\n      */\n     public Object next(){\n-        if (done || (position == 0 && !hasNext())){\n-            throw new NoSuchElementException();\n-        }\n-        NodePointer pointer = getCurrentNodePointer();\n-        if (!nextNode()){\n-            done = true;\n-            while (nextSet()){\n-                if (nextNode()){\n-                    done = false;\n-                    break;\n+        if (pointerIterator != null){\n+            return pointerIterator.next();\n+        }\n+\n+        if (getDocumentOrder() != 0){\n+            if (!constructIterator()){\n+                throw new NoSuchElementException();\n+            }\n+            return pointerIterator.next();\n+        }\n+        else {\n+            if (done || (position == 0 && !hasNext())){\n+                throw new NoSuchElementException();\n+            }\n+            NodePointer pointer = getCurrentNodePointer();\n+            if (!nextNode()){\n+                done = true;\n+                while (nextSet()){\n+                    if (nextNode()){\n+                        done = false;\n+                        break;\n+                    }\n                 }\n             }\n-        }\n-        return pointer;\n+            return pointer;\n+        }\n     }\n \n     /**\n     public void remove(){\n         throw new UnsupportedOperationException(\n             \"JXPath iterators cannot remove nodes\");\n+    }\n+\n+    private boolean constructIterator(){\n+        HashSet set = new HashSet();\n+        ArrayList list = new ArrayList();\n+        while (nextSet()){\n+            while (nextNode()){\n+                NodePointer pointer = getCurrentNodePointer();\n+                if (!set.contains(pointer)){\n+                    set.add(pointer);\n+                    list.add(pointer);\n+                }\n+            }\n+        }\n+        if (list.isEmpty()){\n+            return false;\n+        }\n+\n+        if (getDocumentOrder() == 1){\n+            Collections.sort(list);\n+        }\n+        else {\n+            Collections.sort(list, REVERSE_COMPARATOR);\n+        }\n+        pointerIterator = list.iterator();\n+        return true;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/axes/AncestorContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/AncestorContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/AncestorContext.java,v 1.7 2002/04/28 04:35:48 dmitri Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/04/28 04:35:48 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/AncestorContext.java,v 1.8 2002/05/29 00:41:32 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/05/29 00:41:32 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * EvalContext that walks the \"ancestor::\" and \"ancestor-or-self::\" axes.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2002/04/28 04:35:48 $\n+ * @version $Revision: 1.8 $ $Date: 2002/05/29 00:41:32 $\n  */\n public class AncestorContext extends EvalContext {\n     private NodeTest nodeTest;\n \n     public NodePointer getCurrentNodePointer(){\n         return currentNodePointer;\n+    }\n+\n+    public int getDocumentOrder(){\n+        return -1;\n     }\n \n     public void reset(){\n--- a/src/java/org/apache/commons/jxpath/ri/axes/ParentContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/ParentContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/ParentContext.java,v 1.6 2002/04/28 04:35:48 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/04/28 04:35:48 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/ParentContext.java,v 1.7 2002/05/29 00:41:32 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/05/29 00:41:32 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * EvalContext that walks the \"parent::\" axis.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2002/04/28 04:35:48 $\n+ * @version $Revision: 1.7 $ $Date: 2002/05/29 00:41:32 $\n  */\n public class ParentContext extends EvalContext {\n     private NodeTest nodeTest;\n \n     public int getCurrentPosition(){\n         return 1;\n+    }\n+\n+    public int getDocumentOrder(){\n+        return -1;\n     }\n \n     public void reset(){\n--- a/src/java/org/apache/commons/jxpath/ri/axes/PrecedingOrFollowingContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/PrecedingOrFollowingContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/PrecedingOrFollowingContext.java,v 1.7 2002/04/28 04:35:48 dmitri Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/04/28 04:35:48 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/PrecedingOrFollowingContext.java,v 1.8 2002/05/29 00:41:32 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/05/29 00:41:32 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * EvalContext that walks the \"preceding::\" and \"following::\" axes.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2002/04/28 04:35:48 $\n+ * @version $Revision: 1.8 $ $Date: 2002/05/29 00:41:32 $\n  */\n public class PrecedingOrFollowingContext extends EvalContext {\n     private NodeTest nodeTest;\n         return currentNodePointer;\n     }\n \n+    public int getDocumentOrder(){\n+        return reverse ? -1 : 1;\n+    }\n+\n     public void reset(){\n         super.reset();\n         stack = new Stack();\n--- a/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java,v 1.6 2002/04/28 04:35:48 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/04/28 04:35:48 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java,v 1.7 2002/05/29 00:41:32 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/05/29 00:41:32 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * of a union operation like (a | b)\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2002/04/28 04:35:48 $\n+ * @version $Revision: 1.7 $ $Date: 2002/05/29 00:41:32 $\n  */\n public class UnionContext extends EvalContext {\n     private boolean startedSet = false;\n     public UnionContext(EvalContext parentContext, EvalContext contexts[]){\n         super(parentContext);\n         this.contexts = contexts;\n+    }\n+\n+    public int getDocumentOrder(){\n+        if (contexts.length > 1){\n+            return 1;\n+        }\n+        return super.getDocumentOrder();\n     }\n \n     public NodePointer getCurrentNodePointer(){", "timestamp": 1022632893, "metainfo": ""}