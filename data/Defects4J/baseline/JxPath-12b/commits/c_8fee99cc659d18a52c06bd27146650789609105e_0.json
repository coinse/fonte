{"sha": "8fee99cc659d18a52c06bd27146650789609105e", "log": "Opening containers   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/util/ValueUtils.java\n+++ b/src/java/org/apache/commons/jxpath/util/ValueUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/util/ValueUtils.java,v 1.12 2003/01/11 05:41:27 dmitri Exp $\n- * $Revision: 1.12 $\n- * $Date: 2003/01/11 05:41:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/util/ValueUtils.java,v 1.13 2003/01/17 02:02:57 dmitri Exp $\n+ * $Revision: 1.13 $\n+ * $Date: 2003/01/17 02:02:57 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.commons.jxpath.Container;\n import org.apache.commons.jxpath.DynamicPropertyHandler;\n import org.apache.commons.jxpath.JXPathException;\n \n  * Collection and property access utilities.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.12 $ $Date: 2003/01/11 05:41:27 $\n+ * @version $Revision: 1.13 $ $Date: 2003/01/17 02:02:57 $\n  */\n public class ValueUtils {\n     private static Map dynamicPropertyHandlerMap = new HashMap();\n      * Returns the index'th element from the supplied collection.\n      */\n     public static Object remove(Object collection, int index) {\n+        collection = openContainers(collection);\n         if (collection == null) {\n             return null;\n         }\n      * Returns the index'th element of the supplied collection.\n      */\n     public static Object getValue(Object collection, int index) {\n+        collection = openContainers(collection);\n         Object value = collection;\n         if (collection != null) {\n             if (collection.getClass().isArray()) {\n      * Converts the value to the required type if necessary.\n      */\n     public static void setValue(Object collection, int index, Object value) {\n+        collection = openContainers(collection);\n         if (collection != null) {\n             if (collection.getClass().isArray()) {\n                 Array.set(\n         }\n         // We will fall through if there is no indexed read\n         Object collection = getValue(bean, propertyDescriptor);\n-        if (isCollection(collection)) {\n+        if (isCollection(openContainers(collection))) {\n             setValue(collection, index, value);\n         }\n         else if (index == 0) {\n         }\n     }\n \n+    /**\n+     * If the parameter is a container, opens the container and\n+     * return the contents.  The method is recursive.\n+     */\n+    private static Object openContainers(Object collection) {\n+        while (collection instanceof Container) {\n+            collection = ((Container) collection).getValue();\n+        }\n+        return collection;\n+    }\n+    \n     /**\n      * Returns a shared instance of the dynamic property handler class\n      * returned by <code>getDynamicPropertyHandlerClass()</code>.", "timestamp": 1042768977, "metainfo": ""}