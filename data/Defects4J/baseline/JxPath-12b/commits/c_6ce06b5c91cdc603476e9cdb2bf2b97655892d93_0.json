{"sha": "6ce06b5c91cdc603476e9cdb2bf2b97655892d93", "log": "[JXPATH-10] Provide 1.1 backward-compatibility workaround with 1.3   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/util/JXPath11CompatibleTypeConverter.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.jxpath.util;\n+\n+import org.apache.commons.jxpath.NodeSet;\n+\n+/**\n+ * TypeConverter implementation to circumvent automagic NodeSet decoding. Suggested by JIRA issue JXPATH-10.\n+ *\n+ * @since JXPath 1.3\n+ * @author Matt Benson\n+ * @version $Revision$ $Date$\n+ */\n+public class JXPath11CompatibleTypeConverter extends BasicTypeConverter {\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public boolean canConvert(Object object, Class toType) {\n+        return object instanceof NodeSet ? toType.isInstance(object) : super.canConvert(object, toType);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public Object convert(Object object, Class toType) {\n+        return object instanceof NodeSet && toType.isInstance(object) ? object : super.convert(object, toType);\n+    }\n+}\n--- a/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java\n import org.apache.commons.jxpath.Functions;\n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathTestCase;\n+import org.apache.commons.jxpath.NodeSet;\n import org.apache.commons.jxpath.PackageFunctions;\n import org.apache.commons.jxpath.Pointer;\n import org.apache.commons.jxpath.TestBean;\n import org.apache.commons.jxpath.Variables;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n+import org.apache.commons.jxpath.util.JXPath11CompatibleTypeConverter;\n+import org.apache.commons.jxpath.util.TypeConverter;\n+import org.apache.commons.jxpath.util.TypeUtils;\n \n /**\n  * Test extension functions.\n     private Functions functions;\n     private JXPathContext context;\n     private TestBean testBean;\n+    private TypeConverter typeConverter;\n \n     public static void main(String[] args) {\n         TestRunner.run(ExtensionFunctionTest.class);\n                     \"jxpathtest\"));\n             lib.addFunctions(new PackageFunctions(\"\", null));\n             context.setFunctions(lib);\n+            context.getVariables().declareVariable(\"List.class\", List.class);\n+            context.getVariables().declareVariable(\"NodeSet.class\", NodeSet.class);\n         }\n         functions = new ClassFunctions(TestFunctions.class, \"test\");\n+        typeConverter = TypeUtils.getTypeConverter();\n+    }\n+\n+    public void tearDown() {\n+        TypeUtils.setTypeConverter(typeConverter);\n     }\n \n     public void testConstructorLookup() {\n             \"/beans[1]/@name\");\n     }\n \n+    public void testEstablishNodeSetBaseline() {\n+        assertXPathValue(\n+            context,\n+            \"test:isInstance(//strings, $List.class)\",\n+            Boolean.TRUE);\n+        assertXPathValue(\n+            context,\n+            \"test:isInstance(//strings, $NodeSet.class)\",\n+            Boolean.FALSE);\n+    }\n+\n+    public void testBCNodeSetHack() {\n+        TypeUtils.setTypeConverter(new JXPath11CompatibleTypeConverter());\n+        assertXPathValue(\n+            context,\n+            \"test:isInstance(//strings, $List.class)\",\n+            Boolean.FALSE);\n+        assertXPathValue(\n+            context,\n+            \"test:isInstance(//strings, $NodeSet.class)\",\n+            Boolean.TRUE);\n+    }\n+\n     private static class Context implements ExpressionContext {\n         private Object object;\n \n             return 0;\n         }\n     }\n-}\n+}\n--- a/src/test/org/apache/commons/jxpath/ri/compiler/TestFunctions.java\n+++ b/src/test/org/apache/commons/jxpath/ri/compiler/TestFunctions.java\n     public static Collection items(Collection arg) {\n         return arg;\n     }\n+\n+    public static Boolean isInstance(Object o, Class c) {\n+        return c.isInstance(o) ? Boolean.TRUE : Boolean.FALSE;\n+    }\n+\n }", "timestamp": 1168470933, "metainfo": ""}