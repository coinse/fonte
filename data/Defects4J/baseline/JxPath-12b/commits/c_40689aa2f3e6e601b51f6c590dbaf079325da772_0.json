{"sha": "40689aa2f3e6e601b51f6c590dbaf079325da772", "log": "[JXPATH-95] part 2: fix NaN inequality comparisons  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java\n  * @version $Revision$ $Date$\n  */\n public abstract class CoreOperationCompare extends CoreOperation {\n+    private boolean invert;\n \n     public CoreOperationCompare(Expression arg1, Expression arg2) {\n+        this(arg1, arg2, false);\n+    }\n+\n+    protected CoreOperationCompare(Expression arg1, Expression arg2, boolean invert) {\n         super(new Expression[] { arg1, arg2 });\n+        this.invert = invert;\n+    }\n+\n+    public Object computeValue(EvalContext context) {\n+        return equal(context, args[0], args[1]) ? Boolean.TRUE : Boolean.FALSE;\n+    }\n+\n+    protected int getPrecedence() {\n+        return 2;\n+    }\n+\n+    protected boolean isSymmetric() {\n+        return true;\n     }\n \n     /**\n     }\n \n     protected boolean equal(Object l, Object r) {\n-        if (l instanceof Pointer && r instanceof Pointer) {\n-            if (l.equals(r)) {\n-                return true;\n-            }\n-        }\n-\n         if (l instanceof Pointer) {\n             l = ((Pointer) l).getValue();\n         }\n             r = ((Pointer) r).getValue();\n         }\n \n-        if (l == r) {\n-            return true;\n+        boolean result;\n+        if (l instanceof Boolean || r instanceof Boolean) {\n+            result = l == r || InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r);\n+        } else if (l instanceof Number || r instanceof Number) {\n+            //if either side is NaN, no comparison returns true:\n+            double ld = InfoSetUtil.doubleValue(l);\n+            if (Double.isNaN(ld)) {\n+                return false;\n+            }\n+            double rd = InfoSetUtil.doubleValue(r);\n+            if (Double.isNaN(rd)) {\n+                return false;\n+            }\n+            result = ld == rd;\n+        } else {\n+            if (l instanceof String || r instanceof String) {\n+                l = InfoSetUtil.stringValue(l);\n+                r = InfoSetUtil.stringValue(r);\n+            }\n+            result = l == r || l != null && l.equals(r);\n         }\n-\n-        if (l instanceof Boolean || r instanceof Boolean) {\n-            return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r));\n-        }\n-        if (l instanceof Number || r instanceof Number) {\n-            return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r));\n-        }\n-        if (l instanceof String || r instanceof String) {\n-            return (\n-                InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r)));\n-        }\n-        return l != null && l.equals(r);\n+        return result ^ invert;\n     }\n \n }\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java\n  */\n package org.apache.commons.jxpath.ri.compiler;\n \n-import org.apache.commons.jxpath.ri.EvalContext;\n-\n /**\n  * Implementation of Expression for the operation \"=\".\n  *\n         super(arg1, arg2);\n     }\n \n-    public Object computeValue(EvalContext context) {\n-        return equal(context, args[0], args[1]) ? Boolean.TRUE : Boolean.FALSE;\n-    }\n-    \n-    protected int getPrecedence() {\n-        return 2;\n-    }\n-\n-    protected boolean isSymmetric() {\n-        return true;\n-    }\n-    \n     public String getSymbol() {\n         return \"=\";\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java\n  */\n package org.apache.commons.jxpath.ri.compiler;\n \n-import org.apache.commons.jxpath.ri.EvalContext;\n-\n /**\n  * Implementation of Expression for the operation \"!=\".\n  *\n public class CoreOperationNotEqual extends CoreOperationCompare {\n \n     public CoreOperationNotEqual(Expression arg1, Expression arg2) {\n-        super(arg1, arg2);\n+        super(arg1, arg2, true);\n     }\n \n-    public Object computeValue(EvalContext context) {\n-        return equal(context, args[0], args[1]) ? Boolean.FALSE : Boolean.TRUE;\n-    }\n-    \n-    protected int getPrecedence() {\n-        return 2;\n-    }\n-\n-    protected boolean isSymmetric() {\n-        return true;\n-    }\n-    \n     public String getSymbol() {\n         return \"!=\";\n     }\n--- a/src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java\n         assertXPathValue(context, \"$nan < $nan\", Boolean.FALSE, Boolean.class);\n         assertXPathValue(context, \"$nan >= $nan\", Boolean.FALSE, Boolean.class);\n         assertXPathValue(context, \"$nan <= $nan\", Boolean.FALSE, Boolean.class);\n-        //note that \"<= and >=\" implies a test of numerical, rather than object, equality. ;)\n         assertXPathValue(context, \"$nan >= $nan and $nan <= $nan\", Boolean.FALSE, Boolean.class);\n-        assertXPathValue(context, \"$nan = $nan\", Boolean.TRUE, Boolean.class);\n+        assertXPathValue(context, \"$nan = $nan\", Boolean.FALSE, Boolean.class);\n         assertXPathValue(context, \"$nan != $nan\", Boolean.FALSE, Boolean.class);\n         assertXPathValue(context, \"$nan > 0\", Boolean.FALSE, Boolean.class);\n         assertXPathValue(context, \"$nan < 0\", Boolean.FALSE, Boolean.class);\n         assertXPathValue(context, \"$nan <= 0\", Boolean.FALSE, Boolean.class);\n         assertXPathValue(context, \"$nan >= 0 and $nan <= 0\", Boolean.FALSE, Boolean.class);\n         assertXPathValue(context, \"$nan = 0\", Boolean.FALSE, Boolean.class);\n-        assertXPathValue(context, \"$nan != 0\", Boolean.TRUE, Boolean.class);\n+        assertXPathValue(context, \"$nan != 0\", Boolean.FALSE, Boolean.class);\n         assertXPathValue(context, \"$nan > 1\", Boolean.FALSE, Boolean.class);\n         assertXPathValue(context, \"$nan < 1\", Boolean.FALSE, Boolean.class);\n         assertXPathValue(context, \"$nan >= 1\", Boolean.FALSE, Boolean.class);\n         assertXPathValue(context, \"$nan <= 1\", Boolean.FALSE, Boolean.class);\n         assertXPathValue(context, \"$nan >= 1 and $nan <= 1\", Boolean.FALSE, Boolean.class);\n         assertXPathValue(context, \"$nan = 1\", Boolean.FALSE, Boolean.class);\n-        assertXPathValue(context, \"$nan != 1\", Boolean.TRUE, Boolean.class);\n+        assertXPathValue(context, \"$nan != 1\", Boolean.FALSE, Boolean.class);\n     }\n }", "timestamp": 1184182197, "metainfo": ""}