{"sha": "b59050d6f0fe675ddc8555b99fc83915b4a20079", "log": "Removed Xalan implementation of JXPath   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/JXPathIntrospector.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathIntrospector.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathIntrospector.java,v 1.1 2001/08/23 00:46:58 dmitri Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/08/23 00:46:58 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathIntrospector.java,v 1.2 2001/09/11 23:34:26 dmitri Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2001/09/11 23:34:26 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n package org.apache.commons.jxpath;\n \n import java.util.*;\n-import org.apache.commons.jxpath.tree.MapDynamicPropertyHandler;\n+import org.apache.commons.jxpath.MapDynamicPropertyHandler;\n \n /**\n  * JXPathIntrospector maintains a registry of {@link JXPathBeanInfo JXPathBeanInfo} objects\n  * for Java classes.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.1 $ $Date: 2001/08/23 00:46:58 $\n+ * @version $Revision: 1.2 $ $Date: 2001/09/11 23:34:26 $\n  */\n public class JXPathIntrospector {\n \n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/MapDynamicPropertyHandler.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/MapDynamicPropertyHandler.java,v 1.1 2001/09/11 23:34:26 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2001/09/11 23:34:26 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath;\n+\n+import java.util.*;\n+\n+/**\n+ * Implements the DynamicPropertyHandler interface for java.util.Map.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2001/09/11 23:34:26 $\n+ */\n+public class MapDynamicPropertyHandler implements DynamicPropertyHandler {\n+\n+    private static final String[] STRING_ARRAY = new String[0];\n+\n+    /**\n+     * Returns string representations of all keys in the map.\n+     */\n+    public String[] getPropertyNames(Object object){\n+        Map map = (Map)object;\n+        String names[] = new String[map.size()];\n+        Iterator it = map.keySet().iterator();\n+        for (int i = 0; i < names.length; i++){\n+            names[i] = String.valueOf(it.next());\n+        }\n+        return names;\n+    }\n+\n+    /**\n+     * Returns the value for the specified key.\n+     */\n+    public Object getProperty(Object object, String propertyName){\n+        return ((Map)object).get(propertyName);\n+    }\n+\n+    /**\n+     * Sets the specified key value.\n+     */\n+    public void setProperty(Object object, String propertyName, Object value){\n+        ((Map)object).put(propertyName, value);\n+    }\n+}\n--- a/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.4 2001/09/08 20:59:58 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2001/09/08 20:59:58 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.5 2001/09/11 23:34:26 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2001/09/11 23:34:26 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.ri.pointers.*;\n import org.apache.commons.jxpath.ri.axes.*;\n import org.apache.commons.jxpath.ri.compiler.*;\n-import org.apache.commons.jxpath.tree.DOMWrapper;\n import java.beans.*;\n \n \n  * </p>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2001/09/08 20:59:58 $\n+ * @version $Revision: 1.5 $ $Date: 2001/09/11 23:34:26 $\n  */\n \n public class JXPathTestCase extends TestCase\n             func = funcs.getFunction(\"test\", \"getFoo\", args);\n             assertEquals(\"test:getFoo($test, 1, x)\", func.invoke(args).toString(), \"0\");\n         }\n-    }\n-\n-    /*\n-     * Remove the underscore from the method name if you want to see the output\n-     */\n-    public void _testXSLT(){\n-        Node node = DOMWrapper.createNode(bean, \"test\");\n-        printXML(node, System.err);\n-    }\n-\n-    private static void printXML(Node node, java.io.OutputStream outputStream){\n-        try {\n-            javax.xml.transform.dom.DOMSource source = new javax.xml.transform.dom.DOMSource(node);\n-            javax.xml.transform.stream.StreamResult result = new javax.xml.transform.stream.StreamResult(outputStream);\n-            javax.xml.transform.Transformer trans = javax.xml.transform.TransformerFactory.newInstance().newTransformer();\n-            trans.setOutputProperty(javax.xml.transform.OutputKeys.INDENT, \"yes\");\n-            trans.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n-            trans.transform(source, result);\n-        }\n-        catch (Exception ex){\n-            // We don't care about this. The method is only for debugging\n-            ex.printStackTrace();\n-        }\n-   }\n-\n-   // Fails most tests. Remove \"_\" and run to see them.\n-    public void _testParserXalan(){\n-        System.setProperty(JXPathContextFactory.FACTORY_NAME_PROPERTY,\n-                \"org.apache.commons.jxpath.xalan.JXPathContextFactoryXalanImpl\");\n-        testParser(JXPathContextFactory.newInstance().newContext(null, bean), true);\n     }\n \n     public void testParserReferenceImpl(){", "timestamp": 1000251266, "metainfo": ""}