{"sha": "6ff8b63f6ab36abcbe49ddfe2c73d3e1a4e43ac0", "log": "Added \"remove\"   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/util/ValueUtils.java\n+++ b/src/java/org/apache/commons/jxpath/util/ValueUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/util/ValueUtils.java,v 1.4 2002/04/28 04:31:13 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/04/28 04:31:13 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/util/ValueUtils.java,v 1.5 2002/05/08 23:03:28 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/05/08 23:03:28 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/04/28 04:31:13 $\n+ * @version $Revision: 1.5 $ $Date: 2002/05/08 23:03:28 $\n  */\n public class ValueUtils {\n     private static Map dynamicPropertyHandlerMap = new HashMap();\n             return 1;\n         }\n     }\n-    \n+\n     public static Iterator iterate(Object collection){\n         if (collection == null){\n             return Collections.EMPTY_LIST.iterator();\n         else {\n             throw new JXPathException(\"Cannot turn \" + collection.getClass().getName() +\n                     \" into a collection of size \" + size);\n+        }\n+    }\n+\n+    public static Object remove(Object collection, int index){\n+        if (collection == null){\n+            return null;\n+        }\n+        else if (collection.getClass().isArray()){\n+            int length = Array.getLength(collection);\n+            Object smaller = Array.newInstance(collection.getClass().getComponentType(), length-1);\n+            if (index > 0){\n+                System.arraycopy(collection, 0, smaller, 0, index);\n+            }\n+            if (index < length - 1){\n+                System.arraycopy(collection, index + 1, smaller,\n+                        index, length - index - 1);\n+            }\n+            return smaller;\n+        }\n+        else if (collection instanceof List){\n+            int size = ((List)collection).size();\n+            if (index < size){\n+                ((List)collection).remove(index);\n+            }\n+            return collection;\n+        }\n+        else if (collection instanceof Collection){\n+            Iterator it = ((Collection)collection).iterator();\n+            for (int i = 0; i < index; i++){\n+                if (!it.hasNext()){\n+                    break;\n+                }\n+                it.next();\n+            }\n+            if (it.hasNext()){\n+                it.next();\n+                it.remove();\n+            }\n+            return collection;\n+        }\n+        else {\n+            throw new JXPathException(\"Cannot remove \" +\n+                    collection.getClass().getName() + \"[\" + index + \"]\");\n         }\n     }\n \n             value = method.invoke(bean, new Object[]{value});\n         }\n         catch (Exception ex){\n+            ex.printStackTrace();\n             throw new JXPathException(\n                 \"Cannot modify property: \" + propertyDescriptor.getName(), ex);\n         }\n     }\n \n     private static Object convert(Object value, Class type){\n-        if (!TypeUtils.canConvert(value, type)){\n+        try {\n+            return TypeUtils.convert(value, type);\n+        }\n+        catch (Exception ex){\n             throw new JXPathException(\"Cannot convert value of class \" +\n                     (value == null ? \"null\" : value.getClass().getName()) +\n-                    \" to type \" + type);\n-        }\n-        return TypeUtils.convert(value, type);\n+                    \" to type \" + type, ex);\n+        }\n     }\n \n     /**", "timestamp": 1020899008, "metainfo": ""}