{"sha": "aef71309b6d84d2806b7aadd117d06bb6a845f06", "log": "Add some matcher implementations as discussed on the ML http://markmail.org/message/k7gzqhbgfyiszyph  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/csv/TokenMatchers.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.csv;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeDiagnosingMatcher;\n+import static org.hamcrest.core.AllOf.allOf;\n+\n+/**\n+ * Collection of matchers for asserting the type and content of tokens.\n+ */\n+final class TokenMatchers {\n+\n+    public static Matcher<Token> hasType(final Token.Type expectedType) {\n+        return new TypeSafeDiagnosingMatcher<Token>() {\n+\n+            public void describeTo(Description description) {\n+                description.appendText(\"token has type \");\n+                description.appendValue(expectedType);\n+            }\n+\n+            @Override\n+            protected boolean matchesSafely(Token item,\n+                    Description mismatchDescription) {\n+                mismatchDescription.appendText(\"token type is \");\n+                mismatchDescription.appendValue(item.type);\n+                if (item.type == expectedType) {\n+                    return true;\n+                }\n+                return false;\n+            }\n+        };\n+    }\n+\n+    public static Matcher<Token> hasContent(final String expectedContent) {\n+        return new TypeSafeDiagnosingMatcher<Token>() {\n+\n+            public void describeTo(Description description) {\n+                description.appendText(\"token has content \");\n+                description.appendValue(expectedContent);\n+            }\n+\n+            @Override\n+            protected boolean matchesSafely(Token item,\n+                    Description mismatchDescription) {\n+                mismatchDescription.appendText(\"token content is \");\n+                mismatchDescription.appendValue(item.content.toString());\n+                if (expectedContent.equals(item.content.toString())) {\n+                    return true;\n+                }\n+                return false;\n+            }\n+        };\n+    }\n+\n+    public static Matcher<Token> isReady() {\n+        return new TypeSafeDiagnosingMatcher<Token>() {\n+\n+            public void describeTo(Description description) {\n+                description.appendText(\"token is ready \");\n+            }\n+\n+            @Override\n+            protected boolean matchesSafely(Token item,\n+                    Description mismatchDescription) {\n+                mismatchDescription.appendText(\"token is not ready \");\n+                return item.isReady;\n+            }\n+        };\n+    }\n+\n+    public static Matcher<Token> matches(final Token.Type expectedType, final String expectedContent) {\n+        return allOf(hasType(expectedType), hasContent(expectedContent));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/csv/TokenMatchersTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.csv;\n+\n+import static org.apache.commons.csv.TokenMatchers.hasContent;\n+import static org.apache.commons.csv.TokenMatchers.hasType;\n+import static org.apache.commons.csv.TokenMatchers.isReady;\n+import static org.apache.commons.csv.TokenMatchers.matches;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class TokenMatchersTest {\n+\n+    private Token token;\n+\n+    @Before\n+    public void setUp() {\n+        token = new Token();\n+        token.type = Token.Type.TOKEN;\n+        token.isReady = true;\n+        token.content.append(\"content\");\n+    }\n+\n+    @Test\n+    public void testHasType() {\n+        assertFalse(hasType(Token.Type.COMMENT).matches(token));\n+        assertFalse(hasType(Token.Type.EOF).matches(token));\n+        assertFalse(hasType(Token.Type.EORECORD).matches(token));\n+        assertTrue(hasType(Token.Type.TOKEN).matches(token));\n+    }\n+\n+    @Test\n+    public void testHasContent() {\n+        assertFalse(hasContent(\"This is not the token's content\").matches(token));\n+        assertTrue(hasContent(\"content\").matches(token));\n+    }\n+\n+    @Test\n+    public void testIsReady() {\n+        assertTrue(isReady().matches(token));\n+        token.isReady = false;\n+        assertFalse(isReady().matches(token));\n+    }\n+\n+    @Test\n+    public void testMatches() {\n+        assertTrue(matches(Token.Type.TOKEN, \"content\").matches(token));\n+        assertFalse(matches(Token.Type.EOF, \"content\").matches(token));\n+        assertFalse(matches(Token.Type.TOKEN, \"not the content\").matches(token));\n+        assertFalse(matches(Token.Type.EORECORD, \"not the content\").matches(token));\n+    }\n+\n+}", "timestamp": 1364836164, "metainfo": ""}