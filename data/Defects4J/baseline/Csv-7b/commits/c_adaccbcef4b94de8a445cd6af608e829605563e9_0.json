{"sha": "adaccbcef4b94de8a445cd6af608e829605563e9", "log": "This patch reduces the amount of intermediate garbage significantly. PR: SANDBOX-166 Contributed by: Ortwin Gl\u00fcck Reviewed by: Henri Yandell  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/csv/CharBuffer.java\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.csv;\n+\n+/**\n+ * A simple StringBuffer replacement that aims to \n+ * reduce copying as much as possible. The buffer\n+ * grows as necessary.\n+ * This class is not thread safe.\n+ * \n+ * @author Ortwin Glck\n+ */\n+public class CharBuffer {\n+    private char[] c;\n+    /**\n+     * Actually used number of characters in the array. \n+     * It is also the index at which\n+     * a new character will be inserted into <code>c</code>. \n+     */ \n+    private int length;\n+    \n+    /**\n+     * Creates a new CharBuffer with an initial capacity of 32 characters.\n+     */\n+    public CharBuffer() {\n+        this(32);\n+    }\n+    \n+    /**\n+     * Creates a new CharBuffer with an initial capacity \n+     * of <code>length</code> characters.\n+     */\n+    public CharBuffer(final int length) {\n+        if (length == 0) throw new IllegalArgumentException(\"Can't create an empty CharBuffer\");\n+        this.c = new char[length];\n+    }\n+    \n+    /**\n+     * Empties the buffer. The capacity still remains the same, so no memory is freed.\n+     */\n+    public void clear() {\n+        length = 0;\n+    }\n+    \n+    /**\n+     * Returns the number of characters in the buffer.\n+     * @return the number of characters\n+     */\n+    public int length() {\n+        return length;\n+    }\n+    \n+    /**\n+     * Returns the current capacity of the buffer.\n+     * @return the maximum number of characters that can be stored in this buffer without\n+     * resizing it.\n+     */\n+    public int capacity() {\n+        return c.length;\n+    }\n+    \n+    /**\n+     * Appends the contents of <code>cb</code> to the end of this CharBuffer.\n+     * @param cb the CharBuffer to append or null\n+     */\n+    public void append(final CharBuffer cb) {\n+        if (cb == null) return;\n+        provideCapacity(length + cb.length);\n+        System.arraycopy(cb.c, 0, c, length, cb.length);\n+        length += cb.length;\n+    }\n+    \n+    /**\n+     * Appends <code>s</code> to the end of this CharBuffer.\n+     * This method involves copying the new data once!\n+     * @param s the String to append or null\n+     */\n+    public void append(final String s) {\n+        if (s == null) return;\n+        append(s.toCharArray());\n+    }\n+    \n+    /**\n+     * Appends <code>sb</code> to the end of this CharBuffer.\n+     * This method involves copying the new data once!\n+     * @param sb the StringBuffer to append or null\n+     */\n+    public void append(final StringBuffer sb) {\n+        if (sb == null) return;\n+        provideCapacity(length + sb.length());\n+        sb.getChars(0, sb.length(), c, length);\n+        length += sb.length();\n+    }\n+    \n+    /**\n+     * Appends <code>data</code> to the end of this CharBuffer.\n+     * This method involves copying the new data once!\n+     * @param data the char[] to append or null\n+     */\n+    public void append(final char[] data) {\n+        if (data == null) return;\n+        provideCapacity(length + data.length);\n+        System.arraycopy(data, 0, c, length, data.length);\n+        length += data.length;\n+    }\n+    \n+    /**\n+     * Appends a single character to the end of this CharBuffer.\n+     * This method involves copying the new data once!\n+     * @param data the char to append\n+     */\n+    public void append(final char data) {\n+        provideCapacity(length + 1);\n+        c[length] = data;\n+        length++;\n+    }\n+    \n+    /**\n+     * Shrinks the capacity of the buffer to the current length if necessary.\n+     * This method involves copying the data once!\n+     */\n+    public void shrink() {\n+        if (c.length == length) return;\n+        char[] newc = new char[length];\n+        System.arraycopy(c, 0, newc, 0, length);\n+        c = newc;\n+    }\n+\n+    /**\n+     * Returns the contents of the buffer as a char[]. The returned array may\n+     * be the internal array of the buffer, so the caller must take care when\n+     * modifying it.\n+     * This method allows to avoid copying if the caller knows the exact capacity\n+     * before.\n+     * @return\n+     */\n+    public char[] getCharacters() {\n+        if (c.length == length) return c;\n+        char[] chars = new char[length];\n+        System.arraycopy(c, 0, chars, 0, length);\n+        return chars;\n+    }\n+    \n+    /**\n+     * Converts the contents of the buffer into a StringBuffer.\n+     * This method involves copying the new data once!\n+     * @return\n+     */\n+    public StringBuffer toStringBuffer() {\n+        StringBuffer sb = new StringBuffer(length);\n+        sb.append(c, 0, length);\n+        return sb;\n+    }\n+    \n+    /**\n+     * Converts the contents of the buffer into a StringBuffer.\n+     * This method involves copying the new data once!\n+     * @return\n+     */\n+    public String toString() {\n+        return new String(c, 0, length);\n+    }\n+    \n+    /**\n+     * Copies the data into a new array of at least <code>capacity</code> size.\n+     * @param capacity\n+     */\n+    public void provideCapacity(final int capacity) {\n+        if (c.length >= capacity) return;\n+        int newcapacity = capacity;\n+        char[] newc = new char[newcapacity];\n+        System.arraycopy(c, 0, newc, 0, length);\n+        c = newc;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/csv/CharBufferTest.java\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.csv;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * \n+ * @author Ortwin Glck\n+ */\n+public class CharBufferTest extends TestCase {\n+    public void testCreate() {\n+        CharBuffer cb = new CharBuffer();\n+        assertEquals(0, cb.length());\n+        try {\n+            cb = new CharBuffer(0);\n+            fail(\"Should not be possible\");\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        cb = new CharBuffer(128);\n+        assertEquals(0, cb.length());\n+    }\n+    \n+    public void testAppendChar() {\n+        CharBuffer cb = new CharBuffer(1);\n+        String expected = \"\";\n+        for (char c = 'a'; c < 'z'; c++) {\n+            cb.append(c);\n+            expected += c;\n+            assertEquals(expected, cb.toString());\n+            assertEquals(expected.length(), cb.length());\n+        }\n+    }\n+    \n+    public void testAppendCharArray() {\n+        CharBuffer cb = new CharBuffer(1);\n+        char[] abcd = \"abcd\".toCharArray();\n+        String expected = \"\";\n+        for (int i=0; i<10; i++) {\n+            cb.append(abcd);\n+            expected += \"abcd\";\n+            assertEquals(expected, cb.toString());\n+            assertEquals(4*(i+1), cb.length());\n+        }\n+    }\n+    \n+    public void testAppendString() {\n+        CharBuffer cb = new CharBuffer(1);\n+        String abcd = \"abcd\";\n+        String expected = \"\";\n+        for (int i=0; i<10; i++) {\n+            cb.append(abcd);\n+            expected += abcd;\n+            assertEquals(expected, cb.toString());\n+            assertEquals(4*(i+1), cb.length());\n+        }\n+    }\n+    \n+    public void testAppendStringBuffer() {\n+        CharBuffer cb = new CharBuffer(1);\n+        StringBuffer abcd = new StringBuffer(\"abcd\");\n+        String expected = \"\";\n+        for (int i=0; i<10; i++) {\n+            cb.append(abcd);\n+            expected += \"abcd\";\n+            assertEquals(expected, cb.toString());\n+            assertEquals(4*(i+1), cb.length());\n+        }\n+    }\n+    \n+    public void testAppendCharBuffer() {\n+        CharBuffer cb = new CharBuffer(1);\n+        CharBuffer abcd = new CharBuffer(17);\n+        abcd.append(\"abcd\");\n+        String expected = \"\";\n+        for (int i=0; i<10; i++) {\n+            cb.append(abcd);\n+            expected += \"abcd\";\n+            assertEquals(expected, cb.toString());\n+            assertEquals(4*(i+1), cb.length());\n+        }\n+    }\n+    \n+    public void testShrink() {\n+        String data = \"123456789012345678901234567890\";\n+        \n+        CharBuffer cb = new CharBuffer(data.length() + 100);\n+        assertEquals(data.length() + 100, cb.capacity());\n+        cb.append(data);\n+        assertEquals(data.length() + 100, cb.capacity());\n+        assertEquals(data.length(), cb.length());\n+        cb.shrink();\n+        assertEquals(data.length(), cb.capacity());\n+        assertEquals(data.length(), cb.length());\n+        assertEquals(data, cb.toString());\n+    }\n+    \n+    //-- the following test cases have been adapted from the HttpComponents project\n+    //-- written by Oleg Kalnichevski\n+    \n+    public void testSimpleAppend() throws Exception {\n+        CharBuffer buffer = new CharBuffer(16);\n+        assertEquals(16, buffer.capacity()); \n+        assertEquals(0, buffer.length());\n+        char[] b1 = buffer.getCharacters();\n+        assertNotNull(b1);\n+        assertEquals(0, b1.length);\n+        assertEquals(0, buffer.length());\n+        \n+        char[] tmp = new char[] { '1', '2', '3', '4'};\n+        buffer.append(tmp);\n+        assertEquals(16, buffer.capacity()); \n+        assertEquals(4, buffer.length());\n+        \n+        char[] b2 = buffer.getCharacters();\n+        assertNotNull(b2);\n+        assertEquals(4, b2.length);\n+        for (int i = 0; i < tmp.length; i++) {\n+            assertEquals(tmp[i], b2[i]);\n+        }\n+        assertEquals(\"1234\", buffer.toString());\n+        \n+        buffer.clear();\n+        assertEquals(16, buffer.capacity()); \n+        assertEquals(0, buffer.length());\n+    }\n+    \n+    public void testAppendString2() throws Exception {\n+        CharBuffer buffer = new CharBuffer(8);\n+        buffer.append(\"stuff\");\n+        buffer.append(\" and more stuff\");\n+        assertEquals(\"stuff and more stuff\", buffer.toString());\n+    }\n+    \n+    public void testAppendNull() throws Exception {\n+        CharBuffer buffer = new CharBuffer(8);\n+        \n+        buffer.append((StringBuffer)null);\n+        assertEquals(\"\", buffer.toString());\n+        \n+        buffer.append((String)null);\n+        assertEquals(\"\", buffer.toString());\n+\n+        buffer.append((CharBuffer)null);\n+        assertEquals(\"\", buffer.toString());\n+\n+        buffer.append((char[])null);\n+        assertEquals(\"\", buffer.toString());\n+    }\n+    \n+    public void testAppendCharArrayBuffer() throws Exception {\n+        CharBuffer buffer1 = new CharBuffer(8);\n+        buffer1.append(\" and more stuff\");\n+        CharBuffer buffer2 = new CharBuffer(8);\n+        buffer2.append(\"stuff\");\n+        buffer2.append(buffer1);\n+        assertEquals(\"stuff and more stuff\", buffer2.toString());\n+    }\n+    \n+    public void testAppendSingleChar() throws Exception {\n+        CharBuffer buffer = new CharBuffer(4);\n+        buffer.append('1');\n+        buffer.append('2');\n+        buffer.append('3');\n+        buffer.append('4');\n+        buffer.append('5');\n+        buffer.append('6');\n+        assertEquals(\"123456\", buffer.toString());\n+    }\n+    \n+    public void testProvideCapacity() throws Exception {\n+        CharBuffer buffer = new CharBuffer(4);\n+        buffer.provideCapacity(2);\n+        assertEquals(4, buffer.capacity());\n+        buffer.provideCapacity(8);\n+        assertTrue(buffer.capacity() >= 8);\n+    }\n+}", "timestamp": 1155200533, "metainfo": ""}