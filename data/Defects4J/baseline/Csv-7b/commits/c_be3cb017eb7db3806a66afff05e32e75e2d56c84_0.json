{"sha": "be3cb017eb7db3806a66afff05e32e75e2d56c84", "log": "Removed the deprecated constructors  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.csv;\n \n import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n import java.io.Reader;\n import java.util.ArrayList;\n import java.util.List;\n     // ======================================================\n \n     /**\n-     * Default strategy for the parser follows the default {@link CSVStrategy}.\n-     *\n-     * @param input an InputStream containing \"csv-formatted\" stream\n-     * @deprecated use {@link #CSVParser(Reader)}.\n-     */\n-    public CSVParser(InputStream input) {\n-        this(new InputStreamReader(input));\n-    }\n-\n-    /**\n      * CSV parser using the default {@link CSVStrategy}.\n      *\n      * @param input a Reader containing \"csv-formatted\" input\n      */\n     public CSVParser(Reader input) {\n         this(input, (CSVStrategy) CSVStrategy.DEFAULT_STRATEGY.clone());\n-    }\n-\n-    /**\n-     * Customized value delimiter parser.\n-     * <p/>\n-     * The parser follows the default {@link CSVStrategy}\n-     * except for the delimiter setting.\n-     *\n-     * @param input     a Reader based on \"csv-formatted\" input\n-     * @param delimiter a Char used for value separation\n-     * @deprecated use {@link #CSVParser(Reader, CSVStrategy)}.\n-     */\n-    public CSVParser(Reader input, char delimiter) {\n-        this(input, delimiter, '\"', CSVStrategy.COMMENTS_DISABLED);\n-    }\n-\n-    /**\n-     * Customized csv parser.\n-     * <p/>\n-     * The parser parses according to the given CSV dialect settings.\n-     * Leading whitespaces are truncated, unicode escapes are\n-     * not interpreted and empty lines are ignored.\n-     *\n-     * @param input        a Reader based on \"csv-formatted\" input\n-     * @param delimiter    a Char used for value separation\n-     * @param encapsulator a Char used as value encapsulation marker\n-     * @param commentStart a Char used for comment identification\n-     * @deprecated use {@link #CSVParser(Reader, CSVStrategy)}.\n-     */\n-    public CSVParser(Reader input, char delimiter, char encapsulator, char commentStart) {\n-        this(input, new CSVStrategy(delimiter, encapsulator, commentStart));\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/csv/CSVStrategy.java\n+++ b/src/main/java/org/apache/commons/csv/CSVStrategy.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.csv;\n \n import java.io.Serializable;\n \n \n     public CSVStrategy(char delimiter, char encapsulator, char commentStart) {\n-        this(delimiter, encapsulator, commentStart, true, false, true);\n+        this(delimiter, encapsulator, commentStart, ESCAPE_DISABLED, true, true, false, true);\n     }\n \n     /**\n         this.ignoreTrailingWhitespaces = ignoreTrailingWhitespaces;\n         this.interpretUnicodeEscapes = interpretUnicodeEscapes;\n         this.ignoreEmptyLines = ignoreEmptyLines;\n-    }\n-\n-    /**\n-     * @deprecated\n-     */\n-    public CSVStrategy(\n-            char delimiter,\n-            char encapsulator,\n-            char commentStart,\n-            boolean ignoreLeadingWhitespaces,\n-            boolean interpretUnicodeEscapes,\n-            boolean ignoreEmptyLines) {\n-        this(delimiter, encapsulator, commentStart, CSVStrategy.ESCAPE_DISABLED, ignoreLeadingWhitespaces,\n-                true, interpretUnicodeEscapes, ignoreEmptyLines);\n     }\n \n     public void setDelimiter(char delimiter) {", "timestamp": 1320849100, "metainfo": ""}