{"sha": "50b7f793381ca6d8fd74a01d55d214c1c3e5762d", "log": "CSVRecord.get(String) throws IAE if the column is not mapped (does not exist). This is similar to what JDBC does in ResultSet. Add getBoolean(String) API and tests.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n      *\n      * @param name\n      *            the name of the column to be retrieved.\n-     * @return the column value, or {@code null} if the column name is not found\n+     * @return the column value, maybe null depending on {@link CSVFormat#getNullString()}.\n      * @throws IllegalStateException\n      *             if no header mapping was provided\n      * @throws IllegalArgumentException\n-     *             if the record is inconsistent\n+     *             if {@code name} is not mapped or if the record is inconsistent\n      * @see #isConsistent()\n+     * @see CSVFormat#withNullString(String)\n      */\n     public String get(final String name) {\n         if (mapping == null) {\n                     \"No header mapping was specified, the record values can't be accessed by name\");\n         }\n         final Integer index = mapping.get(name);\n+        if (index == null) {\n+            throw new IllegalArgumentException(String.format(\"Mapping for %s not found, expected one of %s\", name,\n+                    mapping.keySet()));\n+        }\n         try {\n-            return index != null ? values[index.intValue()] : null;\n+            return values[index.intValue()];\n         } catch (final ArrayIndexOutOfBoundsException e) {\n-            throw new IllegalArgumentException(\n-                    String.format(\n-                            \"Index for header '%s' is %d but CSVRecord only has %d values!\",\n-                            name, index, Integer.valueOf(values.length)));\n+            throw new IllegalArgumentException(String.format(\n+                    \"Index for header '%s' is %d but CSVRecord only has %d values!\", name, index,\n+                    Integer.valueOf(values.length)));\n         }\n     }\n \n+    /**\n+     * Returns a value by name.\n+     *\n+     * @param name\n+     *            the name of the column to be retrieved.\n+     * @return the column value\n+     * @throws IllegalStateException\n+     *             if no header mapping was provided\n+     * @throws IllegalArgumentException\n+     *             if the record is inconsistent\n+     * @see #isConsistent()\n+     */\n+    public boolean getBoolean(String name) {\n+        String s = this.get(name);\n+        return s != null ? Boolean.parseBoolean(s) : false;\n+    }\n+   \n     /**\n      * Returns the comment for this record, if any.\n      *\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/csv/CSVRecordBooleanTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.csv;\n+\n+import java.io.IOException;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class CSVRecordBooleanTest {\n+\n+    private CSVRecord record;\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        this.record = createTestRecord();\n+    }\n+\n+    @Test\n+    public void testGetBooleanByString() {\n+        Assert.assertEquals(Boolean.TRUE, Boolean.valueOf(record.getBoolean(\"A\")));\n+        Assert.assertEquals(Boolean.TRUE, Boolean.valueOf(record.getBoolean(\"B\")));\n+        Assert.assertEquals(Boolean.FALSE, Boolean.valueOf(record.getBoolean(\"C\")));\n+        Assert.assertEquals(Boolean.FALSE, Boolean.valueOf(record.getBoolean(\"D\")));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetBooleanByMissingString() {\n+        Assert.assertEquals(null, Boolean.valueOf(record.getBoolean(\"ABSENT\")));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetBooleanByNullString() {\n+        Assert.assertEquals(null, Boolean.valueOf(record.getBoolean(null)));\n+    }\n+\n+    /**\n+     * @return\n+     * @throws IOException\n+     */\n+    private CSVRecord createTestRecord() throws IOException {\n+        String csv = \"A,B,C,D\\ntrue, TRUE, false, foo\";\n+        CSVRecord record = CSVParser.parseString(csv, CSVFormat.DEFAULT.withHeader().withIgnoreSurroundingSpaces(true))\n+                .iterator().next();\n+        return record;\n+    }\n+\n+}\n--- a/src/test/java/org/apache/commons/csv/CSVRecordTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVRecordTest.java\n \n public class CSVRecordTest {\n \n+    private enum EnumFixture { UNKNOWN_COLUMN };\n+    \n     private String[] values;\n     private CSVRecord record, recordWithHeader;\n     private Map<String, Integer> header;\n         recordWithHeader.get(\"fourth\");\n     }\n \n-    @Test\n-    public void testGetUnmapped() {\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetUnmappedName() {\n         assertNull(recordWithHeader.get(\"fourth\"));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetUnmappedEnum() {\n+        assertNull(recordWithHeader.get(EnumFixture.UNKNOWN_COLUMN));\n+    }\n+\n+    @Test(expected = ArrayIndexOutOfBoundsException.class)\n+    public void testGetUnmappedNegativeInt() {\n+        assertNull(recordWithHeader.get(Integer.MIN_VALUE));\n+    }\n+\n+    @Test(expected = ArrayIndexOutOfBoundsException.class)\n+    public void testGetUnmappedPositiveInt() {\n+        assertNull(recordWithHeader.get(Integer.MAX_VALUE));\n     }\n \n     @Test", "timestamp": 1375391470, "metainfo": ""}