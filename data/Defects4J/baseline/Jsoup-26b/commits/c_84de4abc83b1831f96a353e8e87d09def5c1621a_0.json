{"sha": "84de4abc83b1831f96a353e8e87d09def5c1621a", "log": "Added ability to load and parse HTML from an input stream.", "commit": "\n--- a/src/main/java/org/jsoup/Jsoup.java\n+++ b/src/main/java/org/jsoup/Jsoup.java\n \n import java.io.File;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.net.URL;\n \n /**\n      @param in          file to load HTML from\n      @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, if\n      present, or fall back to {@code UTF-8} (which is often safe to do).\n-     @param baseUri     The URL where the HTML was retrieved from, to generate absolute URLs relative to.\n+     @param baseUri     The URL where the HTML was retrieved from, to resolve relative links against.\n      @return sane HTML\n \n      @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n      */\n     public static Document parse(File in, String charsetName) throws IOException {\n         return DataUtil.load(in, charsetName, in.getAbsolutePath());\n+    }\n+\n+     /**\n+     Read an input stream, and parse it to a Document.\n+\n+     @param in          input stream to read. Make sure to close it after parsing.\n+     @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, if\n+     present, or fall back to {@code UTF-8} (which is often safe to do).\n+     @param baseUri     The URL where the HTML was retrieved from, to resolve relative links against.\n+     @return sane HTML\n+\n+     @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n+     */\n+    public static Document parse(InputStream in, String charsetName, String baseUri) throws IOException {\n+        return DataUtil.load(in, charsetName, baseUri);\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n     private DataUtil() {}\n \n     /**\n-     * Loads a file to a String.\n-     * @param in\n-     * @param charsetName\n-     * @return\n-     * @throws IOException\n+     * Loads a file to a Document.\n+     * @param in file to load\n+     * @param charsetName character set of input\n+     * @param baseUri base URI of document, to resolve relative links against\n+     * @return Document\n+     * @throws IOException on IO error\n      */\n     public static Document load(File in, String charsetName, String baseUri) throws IOException {\n         InputStream inStream = null;\n         try {\n             inStream = new FileInputStream(in);\n-            ByteBuffer byteData = readToByteBuffer(inStream);\n-            return parseByteData(byteData, charsetName, baseUri);\n+            return load(inStream, charsetName, baseUri);\n         } finally {\n             if (inStream != null)\n                 inStream.close();\n         }\n+    }\n+\n+    /**\n+     * Parses a Document from an input steam.\n+     * @param in input stream to parse. You will need to close it.\n+     * @param charsetName character set of input\n+     * @param baseUri base URI of document, to resolve relative links against\n+     * @return Document\n+     * @throws IOException on IO error\n+     */\n+    public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {\n+        ByteBuffer byteData = readToByteBuffer(in);\n+        return parseByteData(byteData, charsetName, baseUri);\n     }\n \n     // reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support", "timestamp": 1309605121, "metainfo": ""}