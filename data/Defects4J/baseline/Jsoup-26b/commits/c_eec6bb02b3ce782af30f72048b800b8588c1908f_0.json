{"sha": "eec6bb02b3ce782af30f72048b800b8588c1908f", "log": "Draft  / in progress implementation of Connection", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/jsoup/Connection.java\n+package org.jsoup;\n+\n+import org.jsoup.nodes.Document;\n+\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Collection;\n+\n+/**\n+ * DRAFT interface to support HTTP connections.\n+ */\n+public interface Connection {\n+    public enum Method {\n+        GET, POST\n+    }\n+\n+    public Connection url(URL url);\n+\n+    public Connection url(String url);\n+\n+    public Connection userAgent(String userAgent);\n+\n+    public Connection timeout(int seconds);\n+\n+    public Connection referrer(String referrer);\n+\n+    public Connection method(Method method);\n+\n+    public Connection data(String key, String value);\n+\n+    public Connection data(Map<String, String> data);\n+\n+    public Connection data(String... keyvals);\n+\n+    public Connection header(String name, String value);\n+\n+    public Connection cookie(String name, String value);\n+\n+    public Document get();\n+\n+    public Document post();\n+\n+    public Response execute();\n+\n+    public Request request();\n+\n+    public Connection request(Request request);\n+\n+    public Response response();\n+\n+    public Connection response(Response response);\n+\n+\n+    interface Base<T extends Base> { // todo: better name for request / response base.\n+\n+        public URL url();\n+\n+        public T url(URL url);\n+\n+        public Method method();\n+\n+        public T method(Method method);\n+\n+        public String header(String name);\n+\n+        public T header(String name, String value);\n+\n+        public boolean hasHeader(String name);\n+\n+        public T removeHeader(String name);\n+\n+        public Map<String, String> headers();\n+\n+        public String cookie(String name);\n+\n+        public T cookie(String name, String value);\n+\n+        public boolean hasCookie(String name);\n+\n+        public T removeCookie(String name);\n+\n+        public Map<String, String> cookies();\n+\n+    }\n+\n+    public interface Request extends Base<Request> {\n+        public int timeout();\n+\n+        public Request timeout(int seconds);\n+\n+        public Request data(KeyVal keyval);\n+\n+        public Collection<KeyVal> data();\n+\n+    }\n+\n+    public interface Response extends Base<Response> {\n+        public int statusCode();\n+\n+        public String body();\n+\n+        public byte[] bodyAsBytes();\n+    }\n+\n+    public interface KeyVal {\n+        public KeyVal key(String key);\n+        public String key();\n+\n+        public KeyVal value(String value);\n+        public String value();\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n+package org.jsoup.helper;\n+\n+import org.jsoup.Connection;\n+import org.jsoup.nodes.Document;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Collection;\n+import java.util.ArrayList;\n+\n+/**\n+ * DRAFT implementation of Connection.\n+ */\n+public class HttpConnection implements Connection {\n+    private Connection.Request req;\n+    private Connection.Response res;\n+\n+    private HttpConnection() {\n+        req = new Request();\n+        res = new Response();\n+    }\n+\n+    public Connection url(URL url) {\n+        req.url(url);\n+        return this;\n+    }\n+\n+    public Connection url(String url) {\n+        try {\n+            req.url(new URL(url));\n+        } catch (MalformedURLException e) {\n+            throw new IllegalArgumentException(\"Malformed URL: \" + url, e);\n+        }\n+        return this;\n+    }\n+\n+    public Connection userAgent(String userAgent) {\n+        req.header(\"User-Agent\", userAgent);\n+        return this;\n+    }\n+\n+    public Connection timeout(int seconds) {\n+        req.timeout(seconds);\n+        return this;\n+    }\n+\n+    public Connection referrer(String referrer) {\n+        req.header(\"Referer\", referrer);\n+        return this;\n+    }\n+\n+    public Connection method(Method method) {\n+        req.method(method);\n+        return this;\n+    }\n+\n+    public Connection data(String key, String value) {\n+        req.data(KeyVal.create(key, value));\n+        return this;\n+    }\n+\n+    public Connection data(Map<String, String> data) {\n+        for (Map.Entry<String, String> entry : data.entrySet()) {\n+            req.data(KeyVal.create(entry.getKey(), entry.getValue()));\n+        }\n+        return this;\n+    }\n+\n+    public Connection data(String... keyvals) {\n+        for (int i = 0; i < keyvals.length; i+=2) {\n+            req.data(KeyVal.create(keyvals[i], keyvals[i+1]));\n+        }\n+        return this;\n+    }\n+\n+    public Connection header(String name, String value) {\n+        req.header(name, value);\n+        return this;\n+    }\n+\n+    public Connection cookie(String name, String value) {\n+        req.cookie(name, value);\n+        return this;\n+    }\n+\n+    public Document get() {\n+        req.method(Method.GET);\n+        execute();\n+        // todo: parse for doc\n+        return null;\n+    }\n+\n+    public Document post() {\n+        req.method(Method.POST);\n+        execute();\n+        // todo: parse for doc\n+        return null;\n+    }\n+\n+    public Connection.Response execute() {\n+        // todo: execute\n+        return res;\n+    }\n+\n+    public Connection.Request request() {\n+        return req;\n+    }\n+\n+    public Connection request(Connection.Request request) {\n+        req = request;\n+        return this;\n+    }\n+\n+    public Connection.Response response() {\n+        return res;\n+    }\n+\n+    public Connection response(Connection.Response response) {\n+        res = response;\n+        return this;\n+    }\n+\n+    @SuppressWarnings({\"unchecked\"})\n+    private static abstract class Base<T extends Connection.Base> implements Connection.Base<T> {\n+        private URL url;\n+        private Method method;\n+        private Map<String, String> headers;\n+        private Map<String, String> cookies;\n+\n+        private Base() {\n+            headers = new LinkedHashMap<String, String>();\n+            cookies = new LinkedHashMap<String, String>();\n+        }\n+\n+        public URL url() {\n+            return url;\n+        }\n+\n+        public T url(URL url) {\n+            this.url = url;\n+            return (T) this;\n+        }\n+\n+        public Method method() {\n+            return method;\n+        }\n+\n+        public T method(Method method) {\n+            this.method = method;\n+            return (T) this;\n+        }\n+\n+        public String header(String name) {\n+            return headers.get(name);\n+        }\n+\n+        public T header(String name, String value) {\n+            headers.put(name, value);\n+            return (T) this;\n+        }\n+\n+        public boolean hasHeader(String name) {\n+            return headers.containsKey(name);\n+        }\n+\n+        public T removeHeader(String name) {\n+            headers.remove(name);\n+            return (T) this;\n+        }\n+\n+        public Map<String, String> headers() {\n+            return headers;\n+        }\n+\n+        public String cookie(String name) {\n+            return cookies.get(name);\n+        }\n+\n+        public T cookie(String name, String value) {\n+            cookies.put(name, value);\n+            return (T) this;\n+        }\n+\n+        public boolean hasCookie(String name) {\n+            return cookies.containsKey(name);\n+        }\n+\n+        public T removeCookie(String name) {\n+            cookies.remove(name);\n+            return (T) this;\n+        }\n+\n+        public Map<String, String> cookies() {\n+            return cookies;\n+        }\n+    }\n+\n+    public static class Request extends Base<Connection.Request> implements Connection.Request {\n+        private int timeoutSeconds;\n+        private Collection<Connection.KeyVal> data;\n+\n+        private Request() {\n+            data = new ArrayList<Connection.KeyVal>();\n+        }\n+\n+        public int timeout() {\n+            return timeoutSeconds;\n+        }\n+\n+        public Request timeout(int seconds) {\n+            this.timeoutSeconds = seconds;\n+            return this;\n+        }\n+\n+        public Request data(Connection.KeyVal keyval) {\n+            data.add(keyval);\n+            return this;\n+        }\n+\n+        public Collection<Connection.KeyVal> data() {\n+            return data;\n+        }\n+    }\n+\n+    public static class Response extends Base<Connection.Response> implements Connection.Response {\n+        private int statusCode;\n+\n+        public int statusCode() {\n+            return statusCode;\n+        }\n+\n+        public String body() {\n+            return null;\n+        }\n+\n+        public byte[] bodyAsBytes() {\n+            return new byte[0];\n+        }\n+    }\n+\n+    public static class KeyVal implements Connection.KeyVal {\n+        private String key;\n+        private String value;\n+\n+        public static KeyVal create(String key, String value) {\n+            return new KeyVal(key, value);\n+        }\n+\n+        public KeyVal(String key, String value) {\n+            this.key = key;\n+            this.value = value;\n+        }\n+\n+        public KeyVal key(String key) {\n+            this.key = key;\n+            return this;\n+        }\n+\n+        public String key() {\n+            return key;\n+        }\n+\n+        public KeyVal value(String value) {\n+            this.value = value;\n+            return this;\n+        }\n+\n+        public String value() {\n+            return value;\n+        }\n+    }\n+}", "timestamp": 1309605118, "metainfo": ""}