{"sha": "eb8a107f679bc2778e55cfc71f27a147ef9aa455", "log": "Merge pull request #193 from OKA133/master  For issue #191", "commit": "\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n import java.nio.charset.Charset;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+import java.util.Locale;\n \n /**\n  * Internal static utilities for handling data.\n         if (contentType == null) return null;\n         Matcher m = charsetPattern.matcher(contentType);\n         if (m.find()) {\n-            return m.group(1).trim().toUpperCase();\n+            return m.group(1).trim().toUpperCase(Locale.ENGLISH);\n         }\n         return null;\n     }\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n     public Response execute() throws IOException;\n \n     /**\n-     * Get the request object associatated with this connection\n+     * Get the request object associated with this connection\n      * @return request\n      */\n     public Request request();\n     public Response response();\n \n     /**\n-     * Set the conenction's response\n+     * Set the connection's response\n      * @param response new response\n      * @return this Connection, for chaining\n      */\n         /**\n          * Remove a header by name\n          * @param name name of header to remove (case insensitive)\n-         * @return this, for chianing\n+         * @return this, for chaining\n          */\n         public T removeHeader(String name);\n \n          * Set a cookie in this request/response.\n          * @param name name of cookie\n          * @param value value of cookie\n-         * @return this, for chianing\n+         * @return this, for chaining\n          */\n         public T cookie(String name, String value);\n \n         /**\n          * Remove a cookie by name\n          * @param name name of cookie to remove\n-         * @return this, for chianing\n+         * @return this, for chaining\n          */\n         public T removeCookie(String name);\n \n \n         /**\n     \t * Configures the request to ignore the Content-Type of the response.\n-    \t * @param ignoreContentType set to true to ignore the contenet type.\n+    \t * @param ignoreContentType set to true to ignore the content type.\n          * @return this Request, for chaining\n     \t */\n         public Request ignoreContentType(boolean ignoreContentType);\n--- a/src/main/java/org/jsoup/Jsoup.java\n+++ b/src/main/java/org/jsoup/Jsoup.java\n      Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted\n      tags and attributes.\n \n-     @param bodyHtml  input untrusted HMTL\n+     @param bodyHtml  input untrusted HTML\n      @param baseUri   URL to resolve relative URLs against\n      @param whitelist white-list of permitted HTML elements\n      @return safe HTML\n--- a/src/main/java/org/jsoup/examples/HtmlToPlainText.java\n+++ b/src/main/java/org/jsoup/examples/HtmlToPlainText.java\n         return formatter.toString();\n     }\n \n-    // the formatting rules, implemented in a breadth-first DOM travarse\n+    // the formatting rules, implemented in a breadth-first DOM traverse\n     private class FormattingVisitor implements NodeVisitor {\n         private static final int maxWidth = 80;\n         private int width = 0;\n--- a/src/main/java/org/jsoup/helper/StringUtil.java\n+++ b/src/main/java/org/jsoup/helper/StringUtil.java\n import java.util.Iterator;\n \n /**\n- * A minimal String utility class. Designed for interal jsoup use only.\n+ * A minimal String utility class. Designed for internal jsoup use only.\n  */\n public final class StringUtil {\n     // memoised padding up to 10\n--- a/src/main/java/org/jsoup/helper/Validate.java\n+++ b/src/main/java/org/jsoup/helper/Validate.java\n     private Validate() {}\n \n     /**\n-     * Validates that the obect is not null\n+     * Validates that the object is not null\n      * @param obj object to test\n      */\n     public static void notNull(Object obj) {\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n     }\n \n     /**\n-     * Create a new Attribute from an unencoded key and a HMTL attribute encoded value.\n+     * Create a new Attribute from an unencoded key and a HTML attribute encoded value.\n      * @param unencodedKey assumes the key is not encoded, as can be only run of simple \\w chars.\n      * @param encodedValue HTML attribute encoded value\n      * @return attribute\n     @Override\n     public Attribute clone() {\n         try {\n-            return (Attribute) super.clone(); // only fields are immutable strings key and value, so no more deep copy reqd\n+            return (Attribute) super.clone(); // only fields are immutable strings key and value, so no more deep copy required\n         } catch (CloneNotSupportedException e) {\n             throw new RuntimeException(e);\n         }\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n \n     /**\n      Get the string contents of the document's {@code title} element.\n-     @return Trimed title, or empty string if none set.\n+     @return Trimmed title, or empty string if none set.\n      */\n     public String title() {\n         Element titleEl = getElementsByTag(\"title\").first();\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n \n     /**\n-     * Insert the specified HTML into the DOM before this element (i.e. as a preceeding sibling).\n+     * Insert the specified HTML into the DOM before this element (i.e. as a preceding sibling).\n      *\n      * @param html HTML to add before this element\n      * @return this element, for chaining\n     }\n \n     /**\n-     * Insert the specified node into the DOM before this node (i.e. as a preceeding sibling).\n+     * Insert the specified node into the DOM before this node (i.e. as a preceding sibling).\n      * @param node to add before this element\n      * @return this Element, for chaining\n      * @see #after(Node)\n     /**\n      * Find elements that have attributes whose values match the supplied regular expression.\n      * @param key name of the attribute\n-     * @param regex regular expression to match agaisnt attribute values. You can use <a href=\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\">embedded flags</a> (such as (?i) and (?m) to control regex options.\n+     * @param regex regular expression to match against attribute values. You can use <a href=\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\">embedded flags</a> (such as (?i) and (?m) to control regex options.\n      * @return elements that have attributes matching this regular expression\n      */\n     public Elements getElementsByAttributeValueMatching(String key, String regex) {\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n     }\n \n     /**\n-     * Insert the specified HTML into the DOM before this node (i.e. as a preceeding sibling).\n+     * Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling).\n      * @param html HTML to add before this node\n      * @return this node, for chaining\n      * @see #after(String)\n     }\n \n     /**\n-     * Insert the specified node into the DOM before this node (i.e. as a preceeding sibling).\n+     * Insert the specified node into the DOM before this node (i.e. as a preceding sibling).\n      * @param node to add before this node\n      * @return this node, for chaining\n      * @see #after(Node)\n--- a/src/main/java/org/jsoup/parser/CharacterReader.java\n+++ b/src/main/java/org/jsoup/parser/CharacterReader.java\n import org.jsoup.helper.Validate;\n \n /**\n- CharacterReader cosumes tokens off a string. To replace the old TokenQueue.\n+ CharacterReader consumes tokens off a string. To replace the old TokenQueue.\n  */\n class CharacterReader {\n     static final char EOF = (char) -1;\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n \n     List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors) {\n         // context may be null\n+        state = HtmlTreeBuilderState.Initial;\n         initialiseParse(inputFragment, baseUri, errors);\n         contextElement = context;\n         fragmentParsing = true;\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n                             Element adopter = new Element(Tag.valueOf(name), tb.getBaseUri());\n                             Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()]);\n                             for (Node childNode : childNodes) {\n-                                adopter.appendChild(childNode); // append will reparent. thus the clone to avvoid concurrent mod.\n+                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                             }\n                             furthestBlock.appendChild(adopter);\n                             tb.removeFromActiveFormattingElements(formatEl);\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n     /**\n      * Get if this is an empty tag\n      *\n-     * @return if this is an emtpy tag\n+     * @return if this is an empty tag\n      */\n     public boolean isEmpty() {\n         return empty;\n--- a/src/main/java/org/jsoup/parser/Tokeniser.java\n+++ b/src/main/java/org/jsoup/parser/Tokeniser.java\n     }\n \n     boolean currentNodeInHtmlNS() {\n-        // todo: implememnt namespaces correctly\n+        // todo: implement namespaces correctly\n         return true;\n         // Element currentNode = currentNode();\n         // return currentNode != null && currentNode.namespace().equals(\"HTML\");\n--- a/src/main/java/org/jsoup/safety/Cleaner.java\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n     }\n \n     /**\n-     Dertmines if the input document is valid, against the whitelist. It is considered valid if all the tags and attributes\n+     Determines if the input document is valid, against the whitelist. It is considered valid if all the tags and attributes\n      in the input HTML are allowed by the whitelist.\n      <p/>\n      This method can be used as a validator for user input forms. An invalid document will still be cleaned successfully\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n     /**\n      Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.)\n      <p/>\n+     E.g.: <code>addAttributes(\"a\", \"href\", \"class\")</code> allows <code>href</code> and <code>class</code> attributes\n+     on <code>a</code> tags.\n+     <p/>\n      To make an attribute valid for <b>all tags</b>, use the pseudo tag <code>:all</code>, e.g.\n      <code>addAttributes(\":all\", \"class\")</code>.\n \n-     @param tag  The tag the attributes are for\n+     @param tag  The tag the attributes are for. The tag will be added to the allowed tag list if necessary.\n      @param keys List of valid attributes for the tag\n      @return this (for chaining)\n      */\n     public Whitelist addAttributes(String tag, String... keys) {\n         Validate.notEmpty(tag);\n         Validate.notNull(keys);\n+        Validate.isTrue(keys.length > 0, \"No attributes supplied.\");\n \n         TagName tagName = TagName.valueOf(tag);\n+        if (!tagNames.contains(tagName))\n+            tagNames.add(tagName);\n         Set<AttributeKey> attributeSet = new HashSet<AttributeKey>();\n         for (String key : keys) {\n             Validate.notEmpty(key);\n      E.g.: <code>addEnforcedAttribute(\"a\", \"rel\", \"nofollow\")</code> will make all <code>a</code> tags output as\n      <code>&lt;a href=\"...\" rel=\"nofollow\"></code>\n \n-     @param tag   The tag the enforced attribute is for\n+     @param tag   The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary.\n      @param key   The attribute key\n      @param value The enforced attribute value\n      @return this (for chaining)\n         Validate.notEmpty(value);\n \n         TagName tagName = TagName.valueOf(tag);\n+        if (!tagNames.contains(tagName))\n+            tagNames.add(tagName);\n         AttributeKey attrKey = AttributeKey.valueOf(key);\n         AttributeValue attrVal = AttributeValue.valueOf(value);\n \n--- a/src/main/java/org/jsoup/safety/package-info.java\n+++ b/src/main/java/org/jsoup/safety/package-info.java\n /**\n- Contains the jsoup HMTL cleaner, and whitelist definitions.\n+ Contains the jsoup HTML cleaner, and whitelist definitions.\n  */\n package org.jsoup.safety;\n--- a/src/main/java/org/jsoup/select/Evaluator.java\n+++ b/src/main/java/org/jsoup/select/Evaluator.java\n     }\n \n     /**\n-     * Evaluator for attibute name matching\n+     * Evaluator for attribute name matching\n      */\n     public static final class Attribute extends Evaluator {\n         private String key;\n     }\n \n     /**\n-     * Evaluator for matching Element (and its descendents) text\n+     * Evaluator for matching Element (and its descendants) text\n      */\n     public static final class ContainsText extends Evaluator {\n         private String searchText;\n     }\n \n     /**\n-     * Evaluator for matching Element (and its descendents) text with regex\n+     * Evaluator for matching Element (and its descendants) text with regex\n      */\n     public static final class Matches extends Evaluator {\n         private Pattern pattern;\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n  * CSS-like element selector, that finds elements matching a query.\n  * <p/>\n  * <h2>Selector syntax</h2>\n- * A selector is a chain of simple selectors, seperated by combinators. Selectors are case insensitive (including against\n+ * A selector is a chain of simple selectors, separated by combinators. Selectors are case insensitive (including against\n  * elements, attributes, and attribute values).\n  * <p/>\n  * The universal selector (*) is implicit when no element selector is supplied (i.e. {@code *.header} and {@code .header}\n  * is equivalent).\n  * <p/>\n  * <table>\n- * <tr><th>Pattern</th><th>Matches</th><th>Example</th></tr>\n+ * <tr><th align=\"left\">Pattern</th><th align=\"left\">Matches</th><th align=\"left\">Example</th></tr>\n  * <tr><td><code>*</code></td><td>any element</td><td><code>*</code></td></tr>\n  * <tr><td><code>tag</code></td><td>elements with the given tag name</td><td><code>div</code></td></tr>\n  * <tr><td><code>ns|E</code></td><td>elements of type E in the namespace <i>ns</i></td><td><code>fb|name</code> finds <code>&lt;fb:name></code> elements</td></tr>\n  * <tr><td><code>:gt(<em>n</em>)</code></td><td>elements whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n  * <tr><td><code>:eq(<em>n</em>)</code></td><td>elements whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n  * <tr><td><code>:has(<em>selector</em>)</code></td><td>elements that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n- * <tr><td><code>:not(<em>selector</em>)</code></td><td>elements that do not match the <em>selector</em>. See also {@link Elements#not(String)}</td><code>div:not(.logo)</code> finds all divs that do not have the \"logo\" class.<br /><code>div:not(:has(div))</code> finds divs that do not contain divs.</code></td></tr>\n+ * <tr><td><code>:not(<em>selector</em>)</code></td><td>elements that do not match the <em>selector</em>. See also {@link Elements#not(String)}</td><td><code>div:not(.logo)</code> finds all divs that do not have the \"logo\" class.<br /><code>div:not(:has(div))</code> finds divs that do not contain divs.</code></td></tr>\n  * <tr><td><code>:contains(<em>text</em>)</code></td><td>elements that contains the specified text. The search is case insensitive. The text may appear in the found element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n  * <tr><td><code>:matches(<em>regex</em>)</code></td><td>elements whose text matches the specified regular expression. The text may appear in the found element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n  * <tr><td><code>:containsOwn(<em>text</em>)</code></td><td>elements that directly contains the specified text. The search is case insensitive. The text must appear in the found element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n \n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n-import org.jsoup.nodes.Comment;\n-import org.jsoup.nodes.Document;\n-import org.jsoup.nodes.Element;\n-import org.jsoup.nodes.TextNode;\n+import org.jsoup.helper.StringUtil;\n+import org.jsoup.nodes.*;\n import org.jsoup.select.Elements;\n import org.junit.Test;\n \n                 \"  // -->\\n\" +\n                 \"</script>\", node.body().html());\n     }\n+\n+    @Test public void handleNullContextInParseFragment() {\n+        String html = \"<ol><li>One</li></ol><p>Two</p>\";\n+        List<Node> nodes = Parser.parseFragment(html, null, \"http://example.com/\");\n+        assertEquals(1, nodes.size()); // returns <html> node (not document) -- no context means doc gets created\n+        assertEquals(\"html\", nodes.get(0).nodeName());\n+        assertEquals(\"<html> <head></head> <body> <ol> <li>One</li> </ol> <p>Two</p> </body> </html>\", StringUtil.normaliseWhitespace(nodes.get(0).outerHtml()));\n+    }\n }\n--- a/src/test/java/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/safety/CleanerTest.java\n         String clean = Jsoup.clean(html, whitelist);\n         assertEquals(\"<p class=\\\"foo\\\"><a class=\\\"qux\\\">link</a></p>\", clean);\n     }\n+\n+    @Test public void addsTagOnAttributesIfNotSet() {\n+        String html = \"<p class='foo' src='bar'>One</p>\";\n+        Whitelist whitelist = new Whitelist()\n+            .addAttributes(\"p\", \"class\");\n+        // ^^ whitelist does not have explicit tag add for p, inferred from add attributes.\n+        String clean = Jsoup.clean(html, whitelist);\n+        assertEquals(\"<p class=\\\"foo\\\">One</p>\", clean);\n+    }\n }", "timestamp": 1338228846, "metainfo": ""}