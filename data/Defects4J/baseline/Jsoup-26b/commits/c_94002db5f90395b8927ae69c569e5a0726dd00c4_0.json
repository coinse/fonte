{"sha": "94002db5f90395b8927ae69c569e5a0726dd00c4", "log": "Fixed whitespace preservation in <textarea> tags.  Fixes #167.", "commit": "\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n     private static final String[] formatAsInlineTags = {\n             \"title\", \"a\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"pre\", \"address\", \"li\", \"th\", \"td\", \"script\", \"style\"\n     };\n-    private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};\n+    private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\", \"textarea\"};\n \n     static {\n         // creates\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         Elements els = doc.select(\"textarea\");\n         assertEquals(\"Hello\", els.text());\n         assertEquals(\"Hello\", els.val());\n+    }\n+\n+    @Test public void preservesSpaceInTextArea() {\n+        // preserve because the tag is marked as preserve white space\n+        Document doc = Jsoup.parse(\"<textarea>\\n\\tOne\\n\\tTwo\\n\\tThree\\n</textarea>\");\n+        String expect = \"One\\n\\tTwo\\n\\tThree\"; // the leading and trailing spaces are dropped as a convenience to authors\n+        Element el = doc.select(\"textarea\").first();\n+        assertEquals(expect, el.text());\n+        assertEquals(expect, el.val());\n+        assertEquals(expect, el.html());\n+        assertEquals(\"<textarea>\\n\\t\" + expect + \"\\n</textarea>\", el.outerHtml()); // but preserved in round-trip html\n+    }\n+\n+    @Test public void preservesSpaceInScript() {\n+        // preserve because it's content is a data node\n+        Document doc = Jsoup.parse(\"<script>\\nOne\\n\\tTwo\\n\\tThree\\n</script>\");\n+        String expect = \"\\nOne\\n\\tTwo\\n\\tThree\\n\";\n+        Element el = doc.select(\"script\").first();\n+        assertEquals(expect, el.data());\n+        assertEquals(\"One\\n\\tTwo\\n\\tThree\", el.html());\n+        assertEquals(\"<script>\" + expect + \"</script>\", el.outerHtml());\n     }\n \n     @Test public void doesNotCreateImplicitLists() {", "timestamp": 1338230947, "metainfo": ""}