{"sha": "128b3f8212e357468cb608546a52da3826903fad", "log": "Fixed normalisation of carriage returns to newlines on input HTML  Fixes #110", "commit": "\n--- a/src/main/java/org/jsoup/parser/CharacterReader.java\n+++ b/src/main/java/org/jsoup/parser/CharacterReader.java\n package org.jsoup.parser;\n+\n+import org.jsoup.helper.Validate;\n \n /**\n  CharacterReader cosumes tokens off a string. To replace the old TokenQueue.\n     private int mark = 0;\n \n     CharacterReader(String input) {\n+        Validate.notNull(input);\n+        input = input.replaceAll(\"\\r\\n?\", \"\\n\"); // normalise carriage returns to newlines\n+\n         this.input = input;\n         this.length = input.length();\n     }\n     }\n \n     String consumeToEnd() {\n-        String data = input.substring(pos, input.length() - 1);\n+        String data = input.substring(pos, input.length());\n         pos = input.length();\n         return data;\n     }\n--- a/src/test/java/org/jsoup/parser/CharacterReaderTest.java\n+++ b/src/test/java/org/jsoup/parser/CharacterReaderTest.java\n         r.rewindToMark();\n         assertEquals('n', r.consume());\n     }\n+\n+    @Test public void handleCarriageReturnAsLineFeed() {\n+        String in = \"one \\r two \\r\\n three\";\n+        CharacterReader r = new CharacterReader(in);\n+\n+        String first = r.consumeTo('\\n');\n+        assertEquals(\"one \", first);\n+        assertEquals(\"\\n two \\n three\", r.consumeToEnd());\n+    }\n+\n+    @Test public void consumeToEnd() {\n+        String in = \"one two three\";\n+        CharacterReader r = new CharacterReader(in);\n+        String toEnd = r.consumeToEnd();\n+        assertEquals(in, toEnd);\n+        assertTrue(r.isEmpty());\n+    }\n }\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n         Document doc = Jsoup.parse(\"<p id=\\u0000>Blah \\u0000</p>\");\n         assertEquals(\"<p id=\\\"\\uFFFD\\\">Blah \\u0000</p>\", doc.body().html()); // replaced in attr, NOT replaced in data\n     }\n+\n+    @Test public void handlesNewlinesAndWhitespaceInTag() {\n+        Document doc = Jsoup.parse(\"<a \\n href=\\\"one\\\" \\r\\n id=\\\"two\\\" \\f >\");\n+        assertEquals(\"<a href=\\\"one\\\" id=\\\"two\\\"></a>\", doc.body().html());\n+    }\n }", "timestamp": 1309605131, "metainfo": ""}