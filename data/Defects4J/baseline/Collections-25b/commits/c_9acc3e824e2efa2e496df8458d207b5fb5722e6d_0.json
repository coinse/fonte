{"sha": "9acc3e824e2efa2e496df8458d207b5fb5722e6d", "log": "Avoid generic return parameter, specify the actual interface being used to avoid compilation problems.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n      * Partitions all elements from inputCollection into separate output collections,\n      * based on the evaluation of the given predicate.\n      * <p>\n-     * For each predicate, the returned list will contain a collection holding\n-     * all elements of the input collection matching the predicate. The last collection\n-     * contained in the list will hold all elements which didn't match any predicate:\n+     * For each predicate, the result will contain a list holding all elements of the\n+     * input collection matching the predicate. The last list will hold all elements\n+     * which didn't match any predicate:\n      * <pre>\n      *  [C1, R] = partition(I, P1) with\n      *  I = input collection\n      * will result in the following output: [[1, 2], [3, 4, 5]].\n      *\n      * @param <O>  the type of object the {@link Iterable} contains\n-     * @param <R>  the type of the output {@link Collection}\n      * @param inputCollection  the collection to get the input from, may be null\n      * @param predicate  the predicate to use, may be null\n      * @return a list containing the output collections\n      * @since 4.1\n      */\n-    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n+    public static <O> List<List<O>> partition(final Iterable<? extends O> inputCollection,\n             final Predicate<? super O> predicate) {\n \n-        @SuppressWarnings(\"unchecked\") // safe\n-        final Factory<R> factory = (Factory<R>) FactoryUtils.instantiateFactory(ArrayList.class);\n+        @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) // safe\n+        final Factory<List<O>> factory = FactoryUtils.instantiateFactory((Class) ArrayList.class);\n         @SuppressWarnings(\"unchecked\") // safe\n         final Predicate<? super O>[] predicates = new Predicate[] { predicate };\n         return partition(inputCollection, factory, predicates);\n      * Partitions all elements from inputCollection into separate output collections,\n      * based on the evaluation of the given predicates.\n      * <p>\n-     * For each predicate, the returned list will contain a collection holding\n-     * all elements of the input collection matching the predicate. The last collection\n-     * contained in the list will hold all elements which didn't match any predicate:\n+     * For each predicate, the result will contain a list holding all elements of the\n+     * input collection matching the predicate. The last list will hold all elements\n+     * which didn't match any predicate:\n      * <pre>\n      *  [C1, C2, R] = partition(I, P1, P2) with\n      *  I = input collection\n      * and [x &lt; 5] will result in the following output: [[1, 2], [3, 4], [5]].\n      *\n      * @param <O>  the type of object the {@link Iterable} contains\n-     * @param <R>  the type of the output {@link Collection}\n      * @param inputCollection  the collection to get the input from, may be null\n      * @param predicates  the predicates to use, may be null\n      * @return a list containing the output collections\n      * @since 4.1\n      */\n-    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n+    public static <O> List<List<O>> partition(final Iterable<? extends O> inputCollection,\n             final Predicate<? super O>... predicates) {\n \n-        @SuppressWarnings(\"unchecked\") // safe\n-        final Factory<R> factory = (Factory<R>) FactoryUtils.instantiateFactory(ArrayList.class);\n+        @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) // safe\n+        final Factory<List<O>> factory = FactoryUtils.instantiateFactory((Class) ArrayList.class);\n         return partition(inputCollection, factory, predicates);\n     }\n \n--- a/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n         assertTrue(output1.contains(4L));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Test\n     public void partition() {\n         List<Integer> input = new ArrayList<Integer>();\n         input.add(2);\n         input.add(3);\n         input.add(4);\n-        List<Collection<Integer>> partitions = CollectionUtils.partition(input, EQUALS_TWO);\n+        List<List<Integer>> partitions = CollectionUtils.partition(input, EQUALS_TWO);\n         assertEquals(2, partitions.size());\n         \n         // first partition contains 2\n         input.add(2);\n         input.add(3);\n         input.add(4);\n-        List<Collection<Integer>> partitions = CollectionUtils.partition(input, EQUALS_TWO, EVEN);\n+        @SuppressWarnings(\"unchecked\")\n+        List<List<Integer>> partitions = CollectionUtils.partition(input, EQUALS_TWO, EVEN);\n \n         // first partition contains 2\n         Collection<Integer> partition = partitions.get(0);", "timestamp": 1420133215, "metainfo": ""}