{"sha": "3ae25b6189301638ff5305d1b0bbb98c2fdcd719", "log": "Added tests for PredicatedMap, PredicatedSortedMap. Modified TestMapUtils to test only the factory method for PredicatedMap.   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMapUtils.java,v 1.10 2003/08/31 17:52:13 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMapUtils.java,v 1.11 2003/09/13 16:12:47 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Set;\n import java.util.TreeMap;\n \n+import org.apache.commons.collections.decorators.PredicatedMap;\n+\n import junit.framework.Test;\n \n /**\n  * Tests for MapUtils.\n  * \n- * @version $Revision: 1.10 $ $Date: 2003/08/31 17:52:13 $\n+ * @version $Revision: 1.11 $ $Date: 2003/09/13 16:12:47 $\n  * \n  * @author Stephen Colebourne\n  * @author Arun Mammen Thomas\n         };\n     }\n \n-\n-    public void testPredicatedMapIllegalPut() {\n+    public void testPredicatedMap() {\n         Predicate p = getPredicate();\n         Map map = MapUtils.predicatedMap(new HashMap(), p, p);\n+        assertTrue(\"returned object should be a PredicatedMap\",\n+            map instanceof PredicatedMap);\n+        try {\n+            map = MapUtils.predicatedMap(null, p, p);\n+            fail(\"Expecting IllegalArgumentException for null map.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }     \n+    }\n+\n+    // Since a typed map is a predicated map, I copied the tests for predicated map\n+    public void testTypedMapIllegalPut() {\n+        final Map map = MapUtils.typedMap(new HashMap(), String.class, String.class);\n+        \n         try {\n             map.put(\"Hi\", new Integer(3));\n             fail(\"Illegal value should raise IllegalArgument\");\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n-    }\n-\n-    // Since a typed map is a predicated map, I copied the tests for predicated map\n-    public void testTypedMapIllegalPut() {\n-        final Map map = MapUtils.typedMap(new HashMap(), String.class, String.class);\n-        \n-        try {\n-            map.put(\"Hi\", new Integer(3));\n-            fail(\"Illegal value should raise IllegalArgument\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n-\n-        try {\n-            map.put(new Integer(3), \"Hi\");\n-            fail(\"Illegal key should raise IllegalArgument\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n-\n-        assertTrue(!map.containsKey(new Integer(3)));\n-        assertTrue(!map.containsValue(new Integer(3)));\n-\n-        Map map2 = new HashMap();\n-        map2.put(\"A\", \"a\");\n-        map2.put(\"B\", \"b\");\n-        map2.put(\"C\", \"c\");\n-        map2.put(\"c\", new Integer(3));\n-\n-        try {\n-            map.putAll(map2);\n-            fail(\"Illegal value should raise IllegalArgument\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n-\n-        map.put(\"E\", \"e\");\n-        Iterator iterator = map.entrySet().iterator();\n-        try {\n-            Map.Entry entry = (Map.Entry)iterator.next();\n-            entry.setValue(new Integer(3));\n-            fail(\"Illegal value should raise IllegalArgument\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n-    \n-    }\n-\n-    public BulkTest bulkTestPredicatedMap() {\n-        return new TestMap(\"\") {\n-            public boolean useNullKey() {\n-                return false;\n-            }\n-\n-            public boolean useNullValue() {\n-                return false;\n-            }\n-\n-            public Map makeEmptyMap() {\n-                Predicate p = getPredicate();\n-                return MapUtils.predicatedMap(new HashMap(), p, p);\n-            }\n-        };\n+    \n     }\n     \n     public BulkTest bulkTestTypedMap() {\n--- a/src/test/org/apache/commons/collections/decorators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.10 2003/09/12 03:59:00 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.11 2003/09/13 16:12:47 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for all collections decorators tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.10 $ $Date: 2003/09/12 03:59:00 $\n+ * @version $Revision: 1.11 $ $Date: 2003/09/13 16:12:47 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestPredicatedBuffer.suite());\n         suite.addTest(TestPredicatedList.suite());\n         suite.addTest(TestPredicatedSet.suite());\n+        suite.addTest(TestPredicatedMap.suite());\n+        suite.addTest(TestPredicatedSortedMap.suite());\n         \n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestPredicatedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedMap.java,v 1.1 2003/09/13 16:12:47 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections.TestMap;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n+/**\n+ * Extension of {@link TestMap} for exercising the \n+ * {@link PredicatedMap} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/13 16:12:47 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedMap extends TestMap{\n+    \n+    public TestPredicatedMap(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedMap.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------\n+    \n+    protected Predicate truePredicate = PredicateUtils.truePredicate();\n+    \n+    protected Map decorateMap(Map map, Predicate keyPredicate, \n+        Predicate valuePredicate) {\n+        return PredicatedMap.decorate(map, keyPredicate, valuePredicate);\n+    }\n+    \n+    public Map makeEmptyMap() {\n+        return decorateMap(new HashMap(), truePredicate, truePredicate);\n+    }\n+    \n+//--------------------------------------------------------------------   \n+    \n+     protected Predicate testPredicate =  \n+        new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return o instanceof String;\n+            }\n+        };      \n+    \n+    public Map makeTestMap() {\n+        return decorateMap(new HashMap(), testPredicate, testPredicate);\n+    }\n+    \n+    public void testEntrySet() {\n+        Map map = makeTestMap();\n+        assertTrue(\"returned entryset should not be null\",\n+            map.entrySet() != null);\n+        map = decorateMap(new HashMap(), null, null);\n+        map.put(\"oneKey\", \"oneValue\");\n+        assertTrue(\"returned entryset should contain one entry\",\n+            map.entrySet().size() == 1); \n+        map = decorateMap(map, null, null);\n+    }\n+    \n+    public void testPut() {\n+        Map map = makeTestMap();\n+        try {\n+            map.put(\"Hi\", new Integer(3));\n+            fail(\"Illegal value should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        try {\n+            map.put(new Integer(3), \"Hi\");\n+            fail(\"Illegal key should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        assertTrue(!map.containsKey(new Integer(3)));\n+        assertTrue(!map.containsValue(new Integer(3)));\n+\n+        Map map2 = new HashMap();\n+        map2.put(\"A\", \"a\");\n+        map2.put(\"B\", \"b\");\n+        map2.put(\"C\", \"c\");\n+        map2.put(\"c\", new Integer(3));\n+\n+        try {\n+            map.putAll(map2);\n+            fail(\"Illegal value should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        map.put(\"E\", \"e\");\n+        Iterator iterator = map.entrySet().iterator();\n+        try {\n+            Map.Entry entry = (Map.Entry)iterator.next();\n+            entry.setValue(new Integer(3));\n+            fail(\"Illegal value should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        map.put(\"F\", \"f\");\n+        iterator = map.entrySet().iterator();\n+        Map.Entry entry = (Map.Entry)iterator.next();\n+        entry.setValue(\"x\");\n+        \n+    }\n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestPredicatedSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedSortedMap.java,v 1.1 2003/09/13 16:12:47 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import java.util.Map;\n+import java.util.Iterator;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Extension of {@link TestPredicatedMap} for exercising the \n+ * {@link PredicatedSortedMap} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/13 16:12:47 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedSortedMap extends TestPredicatedMap{\n+    \n+    public TestPredicatedSortedMap(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedSortedMap.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedSortedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------    \n+    \n+    protected SortedMap decorateMap(SortedMap map, Predicate keyPredicate, \n+        Predicate valuePredicate) {\n+        return PredicatedSortedMap.decorate(map, keyPredicate, valuePredicate);\n+    }\n+    \n+    public Map makeEmptyMap() {\n+        return decorateMap(new TreeMap(), truePredicate, truePredicate);\n+    }\n+   \n+    public Map makeTestMap() {\n+        return decorateMap(new TreeMap(), testPredicate, testPredicate);\n+    } \n+    \n+    protected boolean useNullKey() {\n+        return false;\n+    }\n+    \n+//--------------------------------------------------------------------   \n+    \n+    public SortedMap makeTestSortedMap() {\n+        return decorateMap(new TreeMap(), testPredicate, testPredicate);\n+    }\n+    \n+    public void testSortOrder() {\n+        SortedMap map = makeTestSortedMap();\n+        map.put(\"A\",  \"a\");\n+        map.put(\"B\", \"b\");\n+        try {\n+            map.put(null, \"c\");\n+            fail(\"Null key should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        map.put(\"C\", \"c\");\n+        try {\n+            map.put(\"D\", null);\n+            fail(\"Null value should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertEquals(\"First key should be A\", map.firstKey(), \"A\");\n+        assertEquals(\"Last key should be C\", map.lastKey(), \"C\");\n+        assertEquals(\"First key in tail map should be B\", \n+            map.tailMap(\"B\").firstKey(), \"B\");\n+        assertEquals(\"Last key in head map should be B\", \n+            map.headMap(\"C\").lastKey(), \"B\");\n+        assertEquals(\"Last key in submap should be B\",\n+           map.subMap(\"A\",\"C\").lastKey(), \"B\");\n+        \n+        Comparator c = map.comparator();\n+        assertTrue(\"natural order, so comparator should be null\", \n+            c == null);\n+    }\n+        \n+}", "timestamp": 1063469567, "metainfo": ""}