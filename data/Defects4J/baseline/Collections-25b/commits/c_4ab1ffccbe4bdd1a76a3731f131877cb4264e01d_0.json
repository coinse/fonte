{"sha": "4ab1ffccbe4bdd1a76a3731f131877cb4264e01d", "log": "The indexOf(Object) and lastIndexOf(Object) were incorrectly raising a NullPointerException if null were passed as the argument. This patch file fixes the behavior so that these methods will correctly find a null element.  Submitted by: Paul Jack ( pjack at sfaf dot org )   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CursorableLinkedList.java\n+++ b/src/java/org/apache/commons/collections/CursorableLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CursorableLinkedList.java,v 1.8 2002/06/16 03:39:40 mas Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/06/16 03:39:40 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CursorableLinkedList.java,v 1.9 2002/06/21 03:26:15 mas Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/06/21 03:26:15 $\n  *\n  * ====================================================================\n  *\n  *\n  * @since 1.0\n  * @author Rodney Waldhoff\n- * @version $Id: CursorableLinkedList.java,v 1.8 2002/06/16 03:39:40 mas Exp $\n+ * @version $Id: CursorableLinkedList.java,v 1.9 2002/06/21 03:26:15 mas Exp $\n  * @see java.util.LinkedList\n  */\n public class CursorableLinkedList implements List, Serializable {\n      */\n     public int indexOf(Object o) {\n         int ndx = 0;\n-        for(Listable elt = _head.next(), past = null; null != elt && past != _head.prev(); elt = (past = elt).next()) {\n-            if(null == o && null == elt.value()) {\n-                return ndx;\n-            } else if(o.equals(elt.value())) {\n-                return ndx;\n-            }\n-            ndx++;\n+\n+        // perform the null check outside of the loop to save checking every\n+        // single time through the loop.\n+        if (null == o) {\n+            for(Listable elt = _head.next(), past = null; null != elt && past != _head.prev(); elt = (past = elt).next()) {\n+                if (null == elt.value()) {\n+                    return ndx;\n+                }\n+                ndx++;\n+            }\n+        } else {\n+\n+            for(Listable elt = _head.next(), past = null; null != elt && past != _head.prev(); elt = (past = elt).next()) {\n+                if (o.equals(elt.value())) {\n+                    return ndx;\n+                }\n+                ndx++;\n+            }\n         }\n         return -1;\n     }\n      */\n     public int lastIndexOf(Object o) {\n         int ndx = _size-1;\n-        for(Listable elt = _head.prev(), past = null; null != elt && past != _head.next(); elt = (past = elt).prev()) {\n-            if(null == o && null == elt.value()) {\n-                return ndx;\n-            } else if(o.equals(elt.value())) {\n-                return ndx;\n-            }\n-            ndx--;\n+\n+        // perform the null check outside of the loop to save checking every\n+        // single time through the loop.\n+        if (null == o) {\n+            for(Listable elt = _head.prev(), past = null; null != elt && past != _head.next(); elt = (past = elt).prev()) {\n+                if (null == elt.value()) {\n+                    return ndx;\n+                }\n+                ndx--;\n+            }\n+        } else {\n+            for(Listable elt = _head.prev(), past = null; null != elt && past != _head.next(); elt = (past = elt).prev()) {\n+                if (o.equals(elt.value())) {\n+                    return ndx;\n+                }\n+                ndx--;\n+            }\n         }\n         return -1;\n     }", "timestamp": 1024629975, "metainfo": ""}