{"sha": "0f5b35aa8d60b03f1974f1ebb784fc85054c67f3", "log": "Code simplification  ", "commit": "\n--- a/src/test/java/org/apache/commons/collections4/BulkTest.java\n+++ b/src/test/java/org/apache/commons/collections4/BulkTest.java\n     private static <T extends BulkTest> BulkTest makeTestCase(final Class<T> c, final Method m) {\n         final Constructor<T> con = getTestCaseConstructor(c);\n         try {\n-            return con.newInstance(new Object[] { m.getName() });\n+            return con.newInstance(m.getName());\n         } catch (final InvocationTargetException e) {\n             e.printStackTrace();\n             throw new RuntimeException(); // FIXME;\n--- a/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n         lastElement = CollectionUtils.forAllButLastDo(col, testClosure);\n         assertNull(lastElement);\n \n-        Collection<String> strings = Arrays.asList(new String[]{\"a\", \"b\", \"c\"});\n+        Collection<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n         final StringBuffer result = new StringBuffer();\n         result.append(CollectionUtils.forAllButLastDo(strings, new Closure<String>() {\n             public void execute(String input) {\n         }));\n         assertEquals(\"a;b;c\", result.toString());\n \n-        Collection<String> oneString = Arrays.asList(new String[]{\"a\"});\n+        Collection<String> oneString = Arrays.asList(\"a\");\n         final StringBuffer resultOne = new StringBuffer();\n         resultOne.append(CollectionUtils.forAllButLastDo(oneString, new Closure<String>() {\n             public void execute(String input) {\n             }\n         }));\n         assertEquals(\"a\", resultOne.toString());\n-        assertNull(CollectionUtils.forAllButLastDo(strings, (Closure<String>) null));\n-        assertNull(CollectionUtils.forAllButLastDo((Collection<String>) null, (Closure<String>) null));\n+        assertNull(CollectionUtils.forAllButLastDo(strings, null));\n+        assertNull(CollectionUtils.forAllButLastDo((Collection<String>) null, null));\n     }\n \n     @Test\n         assertTrue(collectionA.isEmpty() && !collectionB.isEmpty());\n \n         assertNull(CollectionUtils.forAllButLastDo(col.iterator(), (Closure<List<? extends Number>>) null));\n-        assertNull(CollectionUtils.forAllButLastDo((Iterator<String>) null, (Closure<String>) null));\n+        assertNull(CollectionUtils.forAllButLastDo((Iterator<String>) null, null));\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/collections4/ListUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/ListUtilsTest.java\n     }\n \n     public void testEquals() {\n-        final Collection<String> data = Arrays.asList( new String[] { \"a\", \"b\", \"c\" });\n+        final Collection<String> data = Arrays.asList(\"a\", \"b\", \"c\");\n \n         final List<String> a = new ArrayList<String>( data );\n         final List<String> b = new ArrayList<String>( data );\n     }\n \n     public void testHashCode() {\n-        final Collection<String> data = Arrays.asList( new String[] { \"a\", \"b\", \"c\" });\n+        final Collection<String> data = Arrays.asList(\"a\", \"b\", \"c\");\n \n         final List<String> a = new ArrayList<String>(data);\n         final List<String> b = new ArrayList<String>(data);\n--- a/src/test/java/org/apache/commons/collections4/SetUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/SetUtilsTest.java\n     }\n \n     public void testEquals() {\n-        final Collection<String> data = Arrays.asList( new String[] { \"a\", \"b\", \"c\" });\n+        final Collection<String> data = Arrays.asList(\"a\", \"b\", \"c\");\n \n         final Set<String> a = new HashSet<String>(data);\n         final Set<String> b = new HashSet<String>(data);\n     }\n \n     public void testHashCode() {\n-        final Collection<String> data = Arrays.asList( new String[] { \"a\", \"b\", \"c\" });\n+        final Collection<String> data = Arrays.asList(\"a\", \"b\", \"c\");\n \n         final Set<String> a = new HashSet<String>(data);\n         final Set<String> b = new HashSet<String>(data);\n--- a/src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java\n             final String element = (String) i.next();\n             // ignore the first A, remove the second via Iterator.remove()\n             if (element.equals(\"A\")) {\n-                if (foundA == false) {\n+                if (!foundA) {\n                     foundA = true;\n                 } else {\n                     i.remove();\n--- a/src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java\n     //-----------------------------------------------------------------------\n     @SuppressWarnings(\"unchecked\")\n     public void testBidiPut() {\n-        if (isPutAddSupported() == false || isPutChangeSupported() == false) {\n+        if (!isPutAddSupported() || !isPutChangeSupported()) {\n             return;\n         }\n \n             getSampleKeys()[0]);\n     }\n \n-    private final void doTestGetKey(final BidiMap<?, ?> map, final Object key, final Object value) {\n+    private void doTestGetKey(final BidiMap<?, ?> map, final Object key, final Object value) {\n         assertEquals(\"Value not found for key.\", value, map.get(key));\n         assertEquals(\"Key not found for value.\", key, map.getKey(value));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testBidiModifyEntrySet() {\n-        if (isSetValueSupported() == false) {\n+        if (!isSetValueSupported()) {\n             return;\n         }\n \n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private final <T> void modifyEntrySet(final BidiMap<?, T> map) {\n+    private <T> void modifyEntrySet(final BidiMap<?, T> map) {\n         // Gets first entry\n         final Map.Entry<?, T> entry = map.entrySet().iterator().next();\n \n \n     //-----------------------------------------------------------------------\n     public void testBidiClear() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             try {\n                 makeFullMap().clear();\n                 fail();\n \n     //-----------------------------------------------------------------------\n     public void testBidiRemove() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             try {\n                 makeFullMap().remove(getSampleKeys()[0]);\n                 fail();\n         assertEquals(null, makeFullMap().removeValue(\"NotPresent\"));\n     }\n \n-    private final void remove(final BidiMap<?, ?> map, final Object key) {\n+    private void remove(final BidiMap<?, ?> map, final Object key) {\n         final Object value = map.remove(key);\n         assertTrue(\"Key was not removed.\", !map.containsKey(key));\n         assertNull(\"Value was not removed.\", map.getKey(value));\n     }\n \n-    private final void removeValue(final BidiMap<?, ?> map, final Object value) {\n+    private void removeValue(final BidiMap<?, ?> map, final Object value) {\n         final Object key = map.removeValue(value);\n         assertTrue(\"Key was not removed.\", !map.containsKey(key));\n         assertNull(\"Value was not removed.\", map.getKey(value));\n \n     //-----------------------------------------------------------------------\n     public void testBidiRemoveByKeySet() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             return;\n         }\n \n         removeByKeySet(makeFullMap().inverseBidiMap(), getSampleValues()[0], getSampleKeys()[0]);\n     }\n \n-    private final void removeByKeySet(final BidiMap<?, ?> map, final Object key, final Object value) {\n+    private void removeByKeySet(final BidiMap<?, ?> map, final Object key, final Object value) {\n         map.keySet().remove(key);\n \n         assertTrue(\"Key was not removed.\", !map.containsKey(key));\n \n     //-----------------------------------------------------------------------\n     public void testBidiRemoveByEntrySet() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             return;\n         }\n \n         removeByEntrySet(makeFullMap().inverseBidiMap(), getSampleValues()[0], getSampleKeys()[0]);\n     }\n \n-    private final void removeByEntrySet(final BidiMap<?, ?> map, final Object key, final Object value) {\n+    private void removeByEntrySet(final BidiMap<?, ?> map, final Object key, final Object value) {\n         final Map<Object, Object> temp = new HashMap<Object, Object>();\n         temp.put(key, value);\n         map.entrySet().remove(temp.entrySet().iterator().next());\n             final Map.Entry<K, V> entryConfirmed2 = getEntry(itConfirmed, key2);\n             TestBidiMapEntrySet.this.verify();\n \n-            if (isSetValueSupported() == false) {\n+            if (!isSetValueSupported()) {\n                 try {\n                     entry1.setValue(newValue1);\n                 } catch (final UnsupportedOperationException ex) {\n         assertEquals(true, it.hasNext());\n         final K key1 = it.next();\n \n-        if (isSetValueSupported() == false) {\n+        if (!isSetValueSupported()) {\n             try {\n                 it.setValue(newValue1);\n                 fail();\n--- a/src/test/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapTest.java\n         resetEmpty();\n         OrderedBidiMap<K, V> bidi = (OrderedBidiMap<K, V>) map;\n         assertEquals(null, bidi.nextKey(getOtherKeys()[0]));\n-        if (isAllowNullKey() == false) {\n+        if (!isAllowNullKey()) {\n             try {\n                 assertEquals(null, bidi.nextKey(null)); // this is allowed too\n             } catch (final NullPointerException ex) {}\n         }\n         assertEquals(null, bidi.nextKey(confirmedLast));\n \n-        if (isAllowNullKey() == false) {\n+        if (!isAllowNullKey()) {\n             try {\n                 bidi.nextKey(null);\n                 fail();\n         resetEmpty();\n         OrderedBidiMap<K, V> bidi = getMap();\n         assertEquals(null, bidi.previousKey(getOtherKeys()[0]));\n-        if (isAllowNullKey() == false) {\n+        if (!isAllowNullKey()) {\n             try {\n                 assertEquals(null, bidi.previousKey(null)); // this is allowed too\n             } catch (final NullPointerException ex) {}\n         }\n         assertEquals(null, bidi.previousKey(confirmedLast));\n \n-        if (isAllowNullKey() == false) {\n+        if (!isAllowNullKey()) {\n             try {\n                 bidi.previousKey(null);\n                 fail();\n--- a/src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java\n \n     //-----------------------------------------------------------------------\n     public void testBidiClearByHeadMap() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             return;\n         }\n \n \n     //-----------------------------------------------------------------------\n     public void testBidiRemoveByHeadMap() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             return;\n         }\n \n \n     //-----------------------------------------------------------------------\n     public void testBidiRemoveByHeadMapEntrySet() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             return;\n         }\n \n \n     //-----------------------------------------------------------------------\n     public void testBidiClearByTailMap() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             return;\n         }\n \n \n     //-----------------------------------------------------------------------\n     public void testBidiRemoveByTailMap() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             return;\n         }\n \n \n     //-----------------------------------------------------------------------\n     public void testBidiRemoveByTailMapEntrySet() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             return;\n         }\n \n \n     //-----------------------------------------------------------------------\n     public void testBidiClearBySubMap() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             return;\n         }\n \n \n     //-----------------------------------------------------------------------\n     public void testBidiRemoveBySubMap() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             return;\n         }\n \n \n     //-----------------------------------------------------------------------\n     public void testBidiRemoveBySubMapEntrySet() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             return;\n         }\n \n--- a/src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java\n+++ b/src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java\n \n         resetFull();\n         elements = getOtherElements();\n-        for (int i = 0; i < elements.length; i++) {\n+        for (Object element : elements) {\n             assertTrue(\"Full collection shouldn't contain element\",\n-                    !getCollection().contains(elements[i]));\n+                    !getCollection().contains(element));\n         }\n     }\n \n \n         resetEmpty();\n         final E[] elements = getFullElements();\n-        for (int i = 0; i < elements.length; i++) {\n-            assertTrue(\"Shouldn't remove nonexistent element\", !getCollection().remove(elements[i]));\n+        for (E element : elements) {\n+            assertTrue(\"Shouldn't remove nonexistent element\", !getCollection().remove(element));\n             verify();\n         }\n \n         final E[] other = getOtherElements();\n \n         resetFull();\n-        for (int i = 0; i < other.length; i++) {\n-            assertTrue(\"Shouldn't remove nonexistent other element\", !getCollection().remove(other[i]));\n+        for (E element : other) {\n+            assertTrue(\"Shouldn't remove nonexistent other element\", !getCollection().remove(element));\n             verify();\n         }\n \n         verify();\n \n         assertTrue(\"Collection should shrink after removeAll\", getCollection().size() < size);\n-        final Iterator<E> iter = all.iterator();\n-        while (iter.hasNext()) {\n-            assertTrue(\"Collection shouldn't contain removed element\",\n-                    !getCollection().contains(iter.next()));\n+        for (E element : all) {\n+            assertTrue(\"Collection shouldn't contain removed element\", !getCollection().contains(element));\n         }\n     }\n \n             getConfirmed().retainAll(elements.subList(min, max));\n             verify();\n \n-            final Iterator<E> iter = getCollection().iterator();\n-            while (iter.hasNext()) {\n-                assertTrue(\"Collection only contains retained element\",\n-                        elements.subList(min, max).contains(iter.next()));\n+            for (E element : getCollection()) {\n+                assertTrue(\"Collection only contains retained element\", elements.subList(min, max).contains(element));\n             }\n         }\n \n--- a/src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java\n+++ b/src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n \n import org.apache.commons.collections4.Transformer;\n     public void testTransformedCollection() {\n         final Collection<Object> coll = TransformedCollection.transformingCollection(new ArrayList<Object>(), STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(0, coll.size());\n-        final Object[] els = getFullElements();\n-        for (int i = 0; i < els.length; i++) {\n-            coll.add(els[i]);\n+        final Object[] elements = getFullElements();\n+        for (int i = 0; i < elements.length; i++) {\n+            coll.add(elements[i]);\n             assertEquals(i + 1, coll.size());\n-            assertEquals(true, coll.contains(Integer.valueOf((String) els[i])));\n-            assertEquals(false, coll.contains(els[i]));\n+            assertEquals(true, coll.contains(Integer.valueOf((String) elements[i])));\n+            assertEquals(false, coll.contains(elements[i]));\n         }\n \n-        assertEquals(true, coll.remove(Integer.valueOf((String) els[0])));\n+        assertEquals(true, coll.remove(Integer.valueOf((String) elements[0])));\n     }\n \n     public void testTransformedCollection_decorateTransform() {\n         final Collection<Object> originalCollection = new ArrayList<Object>();\n-        final Object[] els = getFullElements();\n-        for (final Object el : els) {\n-            originalCollection.add(el);\n-        }\n+        final Object[] elements = getFullElements();\n+        Collections.addAll(originalCollection, elements);\n         final Collection<Object> collection = TransformedCollection.transformedCollection(originalCollection, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n-        assertEquals(els.length, collection.size());\n-        for (final Object el : els) {\n-            assertEquals(true, collection.contains(Integer.valueOf((String) el)));\n-            assertEquals(false, collection.contains(el));\n+        assertEquals(elements.length, collection.size());\n+        for (final Object element : elements) {\n+            assertEquals(true, collection.contains(Integer.valueOf((String) element)));\n+            assertEquals(false, collection.contains(element));\n         }\n \n-        assertEquals(false, collection.remove(els[0]));\n-        assertEquals(true, collection.remove(Integer.valueOf((String) els[0])));\n+        assertEquals(false, collection.remove(elements[0]));\n+        assertEquals(true, collection.remove(Integer.valueOf((String) elements[0])));\n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java\n \n         boolean isInNewOrder = false;\n         final Random rand = new Random();\n-        while (keys.length > 1 && isInNewOrder == false) {\n+        while (keys.length > 1 && !isInNewOrder) {\n             // shuffle:\n             for (int i = keys.length-1; i > 0; i--) {\n                 final String swap = keys[i];\n--- a/src/test/java/org/apache/commons/collections4/iterators/AbstractIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/iterators/AbstractIteratorTest.java\n      * Test the empty iterator.\n      */\n     public void testEmptyIterator() {\n-        if (supportsEmptyIterator() == false) {\n+        if (!supportsEmptyIterator()) {\n             return;\n         }\n \n      * Test normal iteration behaviour.\n      */\n     public void testFullIterator() {\n-        if (supportsFullIterator() == false) {\n+        if (!supportsFullIterator()) {\n             return;\n         }\n \n     public void testRemove() {\n         final Iterator<E> it = makeObject();\n \n-        if (supportsRemove() == false) {\n+        if (!supportsRemove()) {\n             // check for UnsupportedOperationException if not supported\n             try {\n                 it.remove();\n--- a/src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java\n      * Test that the empty list iterator contract is correct.\n      */\n     public void testEmptyListIteratorIsIndeedEmpty() {\n-        if (supportsEmptyIterator() == false) {\n+        if (!supportsEmptyIterator()) {\n             return;\n         }\n \n         ListIterator<E> it = makeObject();\n \n         final E addValue = addSetValue();\n-        if (supportsAdd() == false) {\n+        if (!supportsAdd()) {\n             // check for UnsupportedOperationException if not supported\n             try {\n                 it.add(addValue);\n     public void testSet() {\n         final ListIterator<E> it = makeObject();\n \n-        if (supportsSet() == false) {\n+        if (!supportsSet()) {\n             // check for UnsupportedOperationException if not supported\n             try {\n                 it.set(addSetValue());\n--- a/src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java\n      * Test that the empty list iterator contract is correct.\n      */\n     public void testEmptyMapIterator() {\n-        if (supportsEmptyIterator() == false) {\n+        if (!supportsEmptyIterator()) {\n             return;\n         }\n \n             fail();\n         } catch (final IllegalStateException ex) {}\n \n-        if (supportsSetValue() == false) {\n+        if (!supportsSetValue()) {\n             // setValue() should throw an UnsupportedOperationException/IllegalStateException\n             try {\n                 it.setValue(addSetValues()[0]);\n      * Test that the full list iterator contract is correct.\n      */\n     public void testFullMapIterator() {\n-        if (supportsFullIterator() == false) {\n+        if (!supportsFullIterator()) {\n             return;\n         }\n \n \n             // getValue\n             final V value = it.getValue();\n-            if (isGetStructuralModify() == false) {\n+            if (!isGetStructuralModify()) {\n                 assertSame(\"Value must be mapped to key\", map.get(key), value);\n             }\n             assertTrue(\"Value must be in map\",  map.containsValue(value));\n \n     //-----------------------------------------------------------------------\n     public void testMapIteratorSet() {\n-        if (supportsFullIterator() == false) {\n+        if (!supportsFullIterator()) {\n             return;\n         }\n \n         final K key = it.next();\n         final V value = it.getValue();\n \n-        if (supportsSetValue() == false) {\n+        if (!supportsSetValue()) {\n             try {\n                 it.setValue(newValue);\n                 fail();\n         assertEquals(true, it.hasNext());\n         final K key = it.next();\n \n-        if (supportsRemove() == false) {\n+        if (!supportsRemove()) {\n             try {\n                 it.remove();\n                 fail();\n \n     //-----------------------------------------------------------------------\n     public void testMapIteratorSetRemoveSet() {\n-        if (supportsSetValue() == false || supportsRemove() == false) {\n+        if (!supportsSetValue() || !supportsRemove()) {\n             return;\n         }\n         final V newValue = addSetValues()[0];\n \n     //-----------------------------------------------------------------------\n     public void testMapIteratorRemoveGetKey() {\n-        if (supportsRemove() == false) {\n+        if (!supportsRemove()) {\n             return;\n         }\n         final MapIterator<K, V> it = makeObject();\n \n     //-----------------------------------------------------------------------\n     public void testMapIteratorRemoveGetValue() {\n-        if (supportsRemove() == false) {\n+        if (!supportsRemove()) {\n             return;\n         }\n         final MapIterator<K, V> it = makeObject();\n--- a/src/test/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorTest.java\n      */\n     @Override\n     public void testEmptyMapIterator() {\n-        if (supportsEmptyIterator() == false) {\n+        if (!supportsEmptyIterator()) {\n             return;\n         }\n \n      */\n     @Override\n     public void testFullMapIterator() {\n-        if (supportsFullIterator() == false) {\n+        if (!supportsFullIterator()) {\n             return;\n         }\n \n \n             // getValue\n             final V value = it.getValue();\n-            if (isGetStructuralModify() == false) {\n+            if (!isGetStructuralModify()) {\n                 assertSame(\"Value must be mapped to key\", map.get(key), value);\n             }\n             assertTrue(\"Value must be in map\",  map.containsValue(value));\n \n             // getValue\n             final Object value = it.getValue();\n-            if (isGetStructuralModify() == false) {\n+            if (!isGetStructuralModify()) {\n                 assertSame(\"Value must be mapped to key\", map.get(key), value);\n             }\n             assertTrue(\"Value must be in map\",  map.containsValue(value));\n      * Test that the iterator order matches the keySet order.\n      */\n     public void testMapIteratorOrder() {\n-        if (supportsFullIterator() == false) {\n+        if (!supportsFullIterator()) {\n             return;\n         }\n \n--- a/src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java\n     public void testLooping0() throws Exception {\n         final List<Object> list = new ArrayList<Object>();\n         final LoopingIterator<Object> loop = new LoopingIterator<Object>(list);\n-        assertTrue(\"hasNext should return false\", loop.hasNext() == false);\n+        assertTrue(\"hasNext should return false\", !loop.hasNext());\n \n         try {\n             loop.next();\n      * @throws Exception  If something unexpected occurs.\n      */\n     public void testLooping1() throws Exception {\n-        final List<String> list = Arrays.asList(new String[] { \"a\" });\n+        final List<String> list = Arrays.asList(\"a\");\n         final LoopingIterator<String> loop = new LoopingIterator<String>(list);\n \n         assertTrue(\"1st hasNext should return true\", loop.hasNext());\n      * @throws Exception  If something unexpected occurs.\n      */\n     public void testLooping2() throws Exception {\n-        final List<String> list = Arrays.asList(new String[] { \"a\", \"b\" });\n+        final List<String> list = Arrays.asList(\"a\", \"b\");\n         final LoopingIterator<String> loop = new LoopingIterator<String>(list);\n \n         assertTrue(\"1st hasNext should return true\", loop.hasNext());\n      * @throws Exception  If something unexpected occurs.\n      */\n     public void testLooping3() throws Exception {\n-        final List<String> list = Arrays.asList(new String[] { \"a\", \"b\", \"c\" });\n+        final List<String> list = Arrays.asList(\"a\", \"b\", \"c\");\n         final LoopingIterator<String> loop = new LoopingIterator<String>(list);\n \n         assertTrue(\"1st hasNext should return true\", loop.hasNext());\n      * @throws Exception  If something unexpected occurs.\n      */\n     public void testRemoving1() throws Exception {\n-        final List<String> list = new ArrayList<String>(Arrays.asList(new String[] { \"a\", \"b\", \"c\" }));\n+        final List<String> list = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\"));\n         final LoopingIterator<String> loop = new LoopingIterator<String>(list);\n         assertEquals(\"list should have 3 elements.\", 3, list.size());\n \n         loop.remove();  // removes c\n         assertEquals(\"list should have 0 elements.\", 0, list.size());\n \n-        assertTrue(\"4th hasNext should return false\", loop.hasNext() == false);\n+        assertFalse(\"4th hasNext should return false\", loop.hasNext());\n         try {\n             loop.next();\n             fail(\"Expected NoSuchElementException to be thrown.\");\n      * @throws Exception  If something unexpected occurs.\n      */\n     public void testReset() throws Exception {\n-        final List<String> list = Arrays.asList(new String[] { \"a\", \"b\", \"c\" });\n+        final List<String> list = Arrays.asList(\"a\", \"b\", \"c\");\n         final LoopingIterator<String> loop = new LoopingIterator<String>(list);\n \n         assertEquals(\"a\", loop.next());\n      * @throws Exception  If something unexpected occurs.\n      */\n     public void testSize() throws Exception {\n-        final List<String> list = new ArrayList<String>(Arrays.asList(new String[] { \"a\", \"b\", \"c\" }));\n+        final List<String> list = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\"));\n         final LoopingIterator<String> loop = new LoopingIterator<String>(list);\n \n         assertEquals(3, loop.size());\n--- a/src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java\n      * one element.\n      */\n     public void testLooping1() throws Exception {\n-        final List<String> list = Arrays.asList(new String[] { \"a\" });\n+        final List<String> list = Arrays.asList(\"a\");\n         final LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <a>\n \n         assertTrue(loop.hasNext());\n      * elements.\n      */\n     public void testLooping2() throws Exception {\n-        final List<String> list = Arrays.asList(new String[] { \"a\", \"b\" });\n+        final List<String> list = Arrays.asList(\"a\", \"b\");\n         final LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <a> b\n \n         assertTrue(loop.hasNext());\n      * the begin/end boundary of the list.\n      */\n     public void testJoggingNotOverBoundary() {\n-        final List<String> list = Arrays.asList(new String[] { \"a\", \"b\" });\n+        final List<String> list = Arrays.asList(\"a\", \"b\");\n         final LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <a> b\n \n         // Try jogging back and forth between the elements, but not\n      * begin/end boundary of the list.\n      */\n     public void testJoggingOverBoundary() {\n-        final List<String> list = Arrays.asList(new String[] { \"a\", \"b\" });\n+        final List<String> list = Arrays.asList(\"a\", \"b\");\n         final LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <a> b\n \n         // Try jogging back and forth between the elements, but not\n      * Tests removing an element from a wrapped ArrayList.\n      */\n     public void testRemovingElementsAndIteratingForward() {\n-        final List<String> list = new ArrayList<String>(Arrays.asList(new String[] { \"a\", \"b\", \"c\" }));\n+        final List<String> list = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\"));\n         final LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <a> b c\n \n         assertTrue(loop.hasNext());\n      * Tests removing an element from a wrapped ArrayList.\n      */\n     public void testRemovingElementsAndIteratingBackwards() {\n-        final List<String> list = new ArrayList<String>(Arrays.asList(new String[] { \"a\", \"b\", \"c\" }));\n+        final List<String> list = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\"));\n         final LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <a> b c\n \n         assertTrue(loop.hasPrevious());\n      * Tests the reset method.\n      */\n     public void testReset() {\n-        final List<String> list = Arrays.asList(new String[] { \"a\", \"b\", \"c\" });\n+        final List<String> list = Arrays.asList(\"a\", \"b\", \"c\");\n         final LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <a> b c\n \n         assertEquals(\"a\", loop.next()); // a <b> c\n      * Tests the add method.\n      */\n     public void testAdd() {\n-        List<String> list = new ArrayList<String>(Arrays.asList(new String[] { \"b\", \"e\", \"f\" }));\n+        List<String> list = new ArrayList<String>(Arrays.asList(\"b\", \"e\", \"f\"));\n         LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <b> e f\n \n         loop.add(\"a\");                      // <a> b e f\n         assertEquals(\"f\", loop.next());     // <a> b c d e f\n         assertEquals(\"a\", loop.next());     // a <b> c d e f\n \n-        list = new ArrayList<String>(Arrays.asList(new String[] { \"b\", \"e\", \"f\" }));\n+        list = new ArrayList<String>(Arrays.asList(\"b\", \"e\", \"f\"));\n         loop = new LoopingListIterator<String>(list); // <b> e f\n \n         loop.add(\"a\");                      // a <b> e f\n      * Tests nextIndex and previousIndex.\n      */\n     public void testNextAndPreviousIndex() {\n-        final List<String> list = Arrays.asList(new String[] { \"a\", \"b\", \"c\" });\n+        final List<String> list = Arrays.asList(\"a\", \"b\", \"c\");\n         final LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <a> b c\n \n         assertEquals(0, loop.nextIndex());\n      * Tests using the set method to change elements.\n      */\n     public void testSet() {\n-        final List<String> list = Arrays.asList(new String[] { \"q\", \"r\", \"z\" });\n+        final List<String> list = Arrays.asList(\"q\", \"r\", \"z\");\n         final LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <q> r z\n \n         assertEquals(\"z\", loop.previous()); // q r <z>\n--- a/src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java\n+++ b/src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java\n \n     //-----------------------------------------------------------------------\n     public void testConstructors() throws Exception {\n-        MultiKey<Integer> mk = null;\n+        MultiKey<Integer> mk;\n         mk = new MultiKey<Integer>(ONE, TWO);\n         assertTrue(Arrays.equals(new Object[] { ONE, TWO }, mk.getKeys()));\n \n     }\n \n     public void testConstructorsByArray() throws Exception {\n-        MultiKey<Integer> mk = null;\n+        MultiKey<Integer> mk;\n         Integer[] keys = new Integer[] { THREE, FOUR, ONE, TWO };\n         mk = new MultiKey<Integer>(keys);\n         assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n \n         assertEquals(mk1, mk1);\n         assertEquals(mk1, mk2);\n-        assertTrue(mk1.equals(mk3) == false);\n-        assertTrue(mk1.equals(\"\") == false);\n-        assertTrue(mk1.equals(null) == false);\n+        assertFalse(mk1.equals(mk3));\n+        assertFalse(mk1.equals(\"\"));\n+        assertFalse(mk1.equals(null));\n     }\n \n     static class SystemHashCodeSimulatingKey implements Serializable {\n--- a/src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java\n     public void testRemoveFirst() {\n         resetEmpty();\n         final AbstractLinkedList<E> list = getCollection();\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             try {\n                 list.removeFirst();\n             } catch (final UnsupportedOperationException ex) {}\n     public void testRemoveLast() {\n         resetEmpty();\n         final AbstractLinkedList<E> list = getCollection();\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             try {\n                 list.removeLast();\n             } catch (final UnsupportedOperationException ex) {}\n     public void testAddNodeAfter() {\n         resetEmpty();\n         final AbstractLinkedList<E> list = getCollection();\n-        if (isAddSupported() == false) {\n+        if (!isAddSupported()) {\n             try {\n                 list.addFirst(null);\n             } catch (final UnsupportedOperationException ex) {}\n     @SuppressWarnings(\"unchecked\")\n     public void testRemoveNode() {\n         resetEmpty();\n-        if (isAddSupported() == false || isRemoveSupported() == false) {\n+        if (!isAddSupported() || !isRemoveSupported()) {\n             return;\n         }\n         final AbstractLinkedList<E> list = getCollection();\n--- a/src/test/java/org/apache/commons/collections4/list/AbstractListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/AbstractListTest.java\n         final List<E> list1 = getCollection();\n         final List<E> list2 = getConfirmed();\n \n-        final Iterator<E> iterator = list2.iterator();\n-        while (iterator.hasNext()) {\n-            final Object element = iterator.next();\n+        for (E element : list2) {\n             assertEquals(\"indexOf should return correct result\",\n-                list1.indexOf(element), list2.indexOf(element));\n+                    list1.indexOf(element), list2.indexOf(element));\n             verify();\n         }\n \n      * Tests remove on list iterator is correct.\n      */\n     public void testListListIteratorPreviousRemoveNext() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             return;\n         }\n         resetFull();\n      * Tests remove on list iterator is correct.\n      */\n     public void testListListIteratorPreviousRemovePrevious() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             return;\n         }\n         resetFull();\n      * Tests remove on list iterator is correct.\n      */\n     public void testListListIteratorNextRemoveNext() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             return;\n         }\n         resetFull();\n      * Tests remove on list iterator is correct.\n      */\n     public void testListListIteratorNextRemovePrevious() {\n-        if (isRemoveSupported() == false) {\n+        if (!isRemoveSupported()) {\n             return;\n         }\n         resetFull();\n--- a/src/test/java/org/apache/commons/collections4/list/NodeCachingLinkedListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/NodeCachingLinkedListTest.java\n     //-----------------------------------------------------------------------\n     @SuppressWarnings(\"unchecked\")\n     public void testShrinkCache() {\n-        if (isRemoveSupported() == false || isAddSupported() == false) {\n+        if (!isRemoveSupported() || !isAddSupported()) {\n             return;\n         }\n         resetEmpty();\n--- a/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java\n       // add two new unique elements at index 0\n       final Integer firstNewElement = Integer.valueOf(2);\n       final Integer secondNewElement = Integer.valueOf(3);\n-      Collection<Integer> collection = Arrays.asList(new Integer[] {firstNewElement, secondNewElement});\n+      Collection<Integer> collection = Arrays.asList(firstNewElement, secondNewElement);\n       list.addAll(0, collection);\n       assertEquals(\"Unique elements should be added.\", 3, list.size());\n       assertEquals(\"First new element should be at index 0\", firstNewElement, list.get(0));\n \n       // add a duplicate element and a unique element at index 0\n       final Integer thirdNewElement = Integer.valueOf(4);\n-      collection = Arrays.asList(new Integer[] {existingElement, thirdNewElement});\n+      collection = Arrays.asList(existingElement, thirdNewElement);\n       list.addAll(0, collection);\n       assertEquals(\"Duplicate element should not be added, unique element should be added.\",\n         4, list.size());\n--- a/src/test/java/org/apache/commons/collections4/map/AbstractIterableMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/AbstractIterableMapTest.java\n \n     //-----------------------------------------------------------------------\n     public void testFailFastEntrySet() {\n-        if (isRemoveSupported() == false) {\n-            return;\n-        }\n-        if (isFailFastExpected() == false) {\n+        if (!isRemoveSupported()) {\n+            return;\n+        }\n+        if (!isFailFastExpected()) {\n             return;\n         }\n         resetFull();\n     }\n \n     public void testFailFastKeySet() {\n-        if (isRemoveSupported() == false) {\n-            return;\n-        }\n-        if (isFailFastExpected() == false) {\n+        if (!isRemoveSupported()) {\n+            return;\n+        }\n+        if (!isFailFastExpected()) {\n             return;\n         }\n         resetFull();\n     }\n \n     public void testFailFastValues() {\n-        if (isRemoveSupported() == false) {\n-            return;\n-        }\n-        if (isFailFastExpected() == false) {\n+        if (!isRemoveSupported()) {\n+            return;\n+        }\n+        if (!isFailFastExpected()) {\n             return;\n         }\n         resetFull();\n--- a/src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java\n         final Object[] keys = getSampleKeys();\n \n         resetEmpty();\n-        for(int i = 0; i < keys.length; i++) {\n+        for (Object key : keys) {\n             assertTrue(\"Map must not contain key when map is empty\",\n-                       !getMap().containsKey(keys[i]));\n-        }\n-        verify();\n-\n-        resetFull();\n-        for (final Object key : keys) {\n+                    !getMap().containsKey(key));\n+        }\n+        verify();\n+\n+        resetFull();\n+        for (Object key : keys) {\n             assertTrue(\"Map must contain key for a mapping in the map. \" +\n                        \"Missing: \" + key, getMap().containsKey(key));\n         }\n                 final Map.Entry<K, V> entry = it.next();\n                 assertEquals(true, AbstractMapTest.this.getMap().containsKey(entry.getKey()));\n                 assertEquals(true, AbstractMapTest.this.getMap().containsValue(entry.getValue()));\n-                if (isGetStructuralModify() == false) {\n+                if (!isGetStructuralModify()) {\n                     assertEquals(AbstractMapTest.this.getMap().get(entry.getKey()), entry.getValue());\n                 }\n                 count++;\n             final Map.Entry<K, V> entryConfirmed2 = getEntry(itConfirmed, key2);\n             verify();\n \n-            if (isSetValueSupported() == false) {\n+            if (!isSetValueSupported()) {\n                 try {\n                     entry1.setValue(newValue1);\n                 } catch (final UnsupportedOperationException ex) {\n         }\n \n         public void testMapEntrySetRemoveNonMapEntry() {\n-            if (isRemoveSupported() == false) {\n+            if (!isRemoveSupported()) {\n                 return;\n             }\n             resetFull();\n--- a/src/test/java/org/apache/commons/collections4/map/AbstractOrderedMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/AbstractOrderedMapTest.java\n         }\n         assertEquals(null, ordered.nextKey(confirmedLast));\n \n-        if (isAllowNullKey() == false) {\n+        if (!isAllowNullKey()) {\n             try {\n                 ordered.nextKey(null);\n                 fail();\n         resetEmpty();\n         OrderedMap<K, V> ordered = getMap();\n         assertEquals(null, ordered.previousKey(getOtherKeys()[0]));\n-        if (isAllowNullKey() == false) {\n+        if (!isAllowNullKey()) {\n             try {\n                 assertEquals(null, ordered.previousKey(null)); // this is allowed too\n             } catch (final NullPointerException ex) {}\n         }\n         assertEquals(null, ordered.previousKey(confirmedLast));\n \n-        if (isAllowNullKey() == false) {\n+        if (!isAllowNullKey()) {\n             try {\n                 ordered.previousKey(null);\n                 fail();\n             } catch (final NullPointerException ex) {}\n         } else {\n-            if (isAllowNullKey() == false) {\n+            if (!isAllowNullKey()) {\n                 assertEquals(null, ordered.previousKey(null));\n             }\n         }\n--- a/src/test/java/org/apache/commons/collections4/map/AbstractSortedMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/AbstractSortedMapTest.java\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n     public void testLastKey() {\n         final SortedMap<K, V> sm = makeFullMap();\n         K obj = null;\n-        for (final Iterator<K> it = sm.keySet().iterator(); it.hasNext();) {\n-            obj = it.next();\n+        for (K k : sm.keySet()) {\n+            obj = k;\n         }\n         assertSame(obj, sm.lastKey());\n     }\n             return ((SortedMap<K, V>) main.makeFullMap()).headMap(toKey);\n         }\n         public void testHeadMapOutOfRange() {\n-            if (isPutAddSupported() == false) {\n+            if (!isPutAddSupported()) {\n                 return;\n             }\n             resetEmpty();\n             return ((SortedMap<K, V>) main.makeFullMap()).tailMap(fromKey);\n         }\n         public void testTailMapOutOfRange() {\n-            if (isPutAddSupported() == false) {\n+            if (!isPutAddSupported()) {\n                 return;\n             }\n             resetEmpty();\n             return ((SortedMap<K, V>) main.makeFullMap()).subMap(fromKey, toKey);\n         }\n         public void testSubMapOutOfRange() {\n-            if (isPutAddSupported() == false) {\n+            if (!isPutAddSupported()) {\n                 return;\n             }\n             resetEmpty();\n--- a/src/test/java/org/apache/commons/collections4/map/IdentityMap.java\n+++ b/src/test/java/org/apache/commons/collections4/map/IdentityMap.java\n             if (obj == this) {\n                 return true;\n             }\n-            if (obj instanceof Map.Entry == false) {\n+            if (!(obj instanceof Entry)) {\n                 return false;\n             }\n             final Map.Entry<?, ?> other = (Map.Entry<?, ?>) obj;\n--- a/src/test/java/org/apache/commons/collections4/map/LRUMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/LRUMapTest.java\n \n     //-----------------------------------------------------------------------\n     public void testLRU() {\n-        if (isPutAddSupported() == false || isPutChangeSupported() == false) {\n+        if (!isPutAddSupported() || !isPutChangeSupported()) {\n             return;\n         }\n         final K[] keys = getSampleKeys();\n \n     //-----------------------------------------------------------------------\n     public void testAccessOrder() {\n-        if (isPutAddSupported() == false || isPutChangeSupported() == false) {\n+        if (!isPutAddSupported() || !isPutChangeSupported()) {\n             return;\n         }\n         final K[] keys = getSampleKeys();\n \n     @SuppressWarnings(\"unchecked\")\n     public void testInternalState_Buckets() {\n-        if (isPutAddSupported() == false || isPutChangeSupported() == false) {\n+        if (!isPutAddSupported() || !isPutChangeSupported()) {\n             return;\n         }\n         final SingleHashCode one = new SingleHashCode(\"1\");\n \n     @SuppressWarnings(\"unchecked\")\n     public void testInternalState_getEntry_int() {\n-        if (isPutAddSupported() == false || isPutChangeSupported() == false) {\n+        if (!isPutAddSupported() || !isPutChangeSupported()) {\n             return;\n         }\n         final SingleHashCode one = new SingleHashCode(\"1\");\n--- a/src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java\n \n     //-----------------------------------------------------------------------\n     public void testInsertionOrder() {\n-        if (isPutAddSupported() == false || isPutChangeSupported() == false) {\n+        if (!isPutAddSupported() || !isPutChangeSupported()) {\n             return;\n         }\n         final K[] keys = getSampleKeys();\n--- a/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java\n     public void testKeyedIterator() {\n         final MultiValueMap<K, V> map = createTestMap();\n         final ArrayList<Object> actual = new ArrayList<Object>(IteratorUtils.toList(map.iterator(\"one\")));\n-        final ArrayList<Object> expected = new ArrayList<Object>(Arrays.asList(new String[]{ \"uno\", \"un\" }));\n+        final ArrayList<Object> expected = new ArrayList<Object>(Arrays.asList(\"uno\", \"un\"));\n         assertEquals(expected, actual);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     public void testPutAll_KeyCollection() {\n         final MultiValueMap<K, V> map = new MultiValueMap<K, V>();\n-        Collection<V> coll = (Collection<V>) Arrays.asList(new Object[] { \"X\", \"Y\", \"Z\" });\n+        Collection<V> coll = (Collection<V>) Arrays.asList(\"X\", \"Y\", \"Z\");\n \n         assertEquals(true, map.putAll((K) \"A\", coll));\n         assertEquals(3, map.size(\"A\"));\n         assertEquals(true, map.containsValue(\"A\", \"Y\"));\n         assertEquals(true, map.containsValue(\"A\", \"Z\"));\n \n-        coll = (Collection<V>) Arrays.asList(new Object[] { \"M\" });\n+        coll = (Collection<V>) Arrays.asList(\"M\");\n         assertEquals(true, map.putAll((K) \"A\", coll));\n         assertEquals(4, map.size(\"A\"));\n         assertEquals(true, map.containsValue(\"A\", \"X\"));\n--- a/src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java\n+++ b/src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java\n     public void verify() {\n         super.verify();\n         final Iterator<E> iterator1 = getCollection().iterator();\n-        final Iterator<E> iterator2 = getConfirmed().iterator();\n-        while (iterator2.hasNext()) {\n+        for (E e : getConfirmed()) {\n             assertTrue(iterator1.hasNext());\n             final Object o1 = iterator1.next();\n-            final Object o2 = iterator2.next();\n+            final Object o2 = e;\n             assertEquals(o1, o2);\n         }\n     }\n--- a/src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java\n+++ b/src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java\n     public void verify() {\n         super.verify();\n         final Iterator<E> iterator1 = getCollection().iterator();\n-        final Iterator<E> iterator2 = getConfirmed().iterator();\n-        while (iterator2.hasNext()) {\n+        for (E e : getConfirmed()) {\n             assertTrue(iterator1.hasNext());\n             final Object o1 = iterator1.next();\n-            final Object o2 = iterator2.next();\n+            final Object o2 = e;\n             assertEquals(o1, o2);\n         }\n     }\n--- a/src/test/java/org/apache/commons/collections4/queue/TransformedQueueTest.java\n+++ b/src/test/java/org/apache/commons/collections4/queue/TransformedQueueTest.java\n package org.apache.commons.collections4.queue;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.LinkedList;\n import java.util.Queue;\n \n         final Queue<Object> queue = TransformedQueue.transformingQueue(new LinkedList<Object>(),\n                 TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(0, queue.size());\n-        final Object[] els = new Object[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n-        for (int i = 0; i < els.length; i++) {\n-            queue.add(els[i]);\n+        final Object[] elements = new Object[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n+        for (int i = 0; i < elements.length; i++) {\n+            queue.add(elements[i]);\n             assertEquals(i + 1, queue.size());\n-            assertEquals(true, queue.contains(Integer.valueOf((String) els[i])));\n-            assertEquals(false, queue.contains(els[i]));\n+            assertEquals(true, queue.contains(Integer.valueOf((String) elements[i])));\n+            assertEquals(false, queue.contains(elements[i]));\n         }\n \n-        assertEquals(false, queue.remove(els[0]));\n-        assertEquals(true, queue.remove(Integer.valueOf((String) els[0])));\n+        assertEquals(false, queue.remove(elements[0]));\n+        assertEquals(true, queue.remove(Integer.valueOf((String) elements[0])));\n \n     }\n \n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     public void testTransformedQueue_decorateTransform() {\n         final Queue originalQueue = new LinkedList();\n-        final Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n-        for (final Object el : els) {\n-            originalQueue.add(el);\n-        }\n+        final Object[] elements = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        Collections.addAll(originalQueue, elements);\n         final Queue<?> queue = TransformedQueue.transformedQueue(originalQueue,\n                 TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n-        assertEquals(els.length, queue.size());\n-        for (final Object el : els) {\n+        assertEquals(elements.length, queue.size());\n+        for (final Object el : elements) {\n             assertEquals(true, queue.contains(Integer.valueOf((String) el)));\n             assertEquals(false, queue.contains(el));\n         }\n \n-        assertEquals(false, queue.remove(els[0]));\n-        assertEquals(true, queue.remove(Integer.valueOf((String) els[0])));\n+        assertEquals(false, queue.remove(elements[0]));\n+        assertEquals(true, queue.remove(Integer.valueOf((String) elements[0])));\n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java\n         final ExecutionVisitor<String> ev = new ExecutionVisitor<String>();\n \n         for (int i = 0; i < shadokSentences.size(); ++i) {\n-            for (int j = 0; j < shadokSentences.size(); ++j) {\n+            for (List<String> shadokSentence : shadokSentences) {\n                 ev.setList(shadokSentences.get(i));\n                 new SequencesComparator<String>(shadokSentences.get(i),\n-                        shadokSentences.get(j)).getScript().visit(ev);\n+                        shadokSentence).getScript().visit(ev);\n \n                 final StringBuilder concat = new StringBuilder();\n-                for (final String s : shadokSentences.get(j)) {\n+                for (final String s : shadokSentence) {\n                     concat.append(s);\n                 }\n                 Assert.assertEquals(concat.toString(), ev.getString());\n         }\n \n         public String getString() {\n-            final StringBuffer buffer = new StringBuffer();\n+            final StringBuilder buffer = new StringBuilder();\n             for (final T c : v) {\n                 buffer.append(c);\n             }\n     @Before\n     public void setUp() {\n \n-        before = Arrays.asList(new String[] {\n+        before = Arrays.asList(\n             \"bottle\",\n             \"nematode knowledge\",\n             \"\",\n             \"ABCABBA\",\n             \"glop glop\",\n             \"coq\",\n-            \"spider-man\"\n-        });\n-\n-        after = Arrays.asList(new String[] {\n+            \"spider-man\");\n+\n+        after = Arrays.asList(\n             \"noodle\",\n             \"empty bottle\",\n             \"\",\n             \"CBABAC\",\n             \"pas glop pas glop\",\n             \"ane\",\n-            \"klingon\"\n-        });\n+            \"klingon\");\n \n         length = new int[] {\n             6,\n--- a/src/test/java/org/apache/commons/collections4/set/AbstractSetTest.java\n+++ b/src/test/java/org/apache/commons/collections4/set/AbstractSetTest.java\n         assertEquals(\"Sets should have equal hashCodes\",\n                      getConfirmed().hashCode(), getCollection().hashCode());\n         final Collection<E> set = makeConfirmedCollection();\n-        final Iterator<E> iterator = getCollection().iterator();\n-        while (iterator.hasNext()) {\n-            assertTrue(\"Set.iterator should only return unique elements\", set.add(iterator.next()));\n+        for (E element : getCollection()) {\n+            assertTrue(\"Set.iterator should only return unique elements\", set.add(element));\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/collections4/set/TransformedSetTest.java\n+++ b/src/test/java/org/apache/commons/collections4/set/TransformedSetTest.java\n package org.apache.commons.collections4.set;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n \n     public void testTransformedSet_decorateTransform() {\n         final Set<Object> originalSet = new HashSet<Object>();\n         final Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n-        for (final Object el : els) {\n-            originalSet.add(el);\n-        }\n+        Collections.addAll(originalSet, els);\n         final Set<?> set = TransformedSet.transformedSet(originalSet, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, set.size());\n         for (final Object el : els) {\n--- a/src/test/java/org/apache/commons/collections4/set/TransformedSortedSetTest.java\n+++ b/src/test/java/org/apache/commons/collections4/set/TransformedSortedSetTest.java\n package org.apache.commons.collections4.set;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.TreeSet;\n import java.util.Set;\n import java.util.SortedSet;\n     public void testTransformedSet_decorateTransform() {\n         final Set<Object> originalSet = new TreeSet<Object>();\n         final Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n-        for (final Object el : els) {\n-            originalSet.add(el);\n-        }\n+        Collections.addAll(originalSet, els);\n         final Set<?> set = TransformedSortedSet.transformedSet(originalSet, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, set.size());\n         for (final Object el : els) {", "timestamp": 1384207107, "metainfo": ""}