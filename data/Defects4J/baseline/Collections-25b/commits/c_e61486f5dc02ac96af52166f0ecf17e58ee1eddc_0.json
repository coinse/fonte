{"sha": "e61486f5dc02ac96af52166f0ecf17e58ee1eddc", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471189 | scolebourne | 2006-11-04 05:57:57 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getMap(), getOrderedMap() and getSortedMap() - use decorated()     ------------------------------------------------------------------------     r471180 | scolebourne | 2006-11-04 05:27:44 -0800 (Sat, 04 Nov 2006) | 1 line          Abstract*Decorator - Generify and use covariant return types     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/AbstractOrderedMapDecorator.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractOrderedMapDecorator.java\n  */\n package org.apache.commons.collections.map;\n \n-import org.apache.commons.collections.MapIterator;\n import org.apache.commons.collections.OrderedMap;\n import org.apache.commons.collections.OrderedMapIterator;\n \n  *\n  * @author Stephen Colebourne\n  */\n-public abstract class AbstractOrderedMapDecorator\n-        extends AbstractMapDecorator implements OrderedMap {\n+public abstract class AbstractOrderedMapDecorator<K, V> extends AbstractMapDecorator<K, V>\n+        implements OrderedMap<K, V> {\n \n     /**\n      * Constructor only used in deserialization, do not use otherwise.\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if the collection is null\n      */\n-    public AbstractOrderedMapDecorator(OrderedMap map) {\n+    public AbstractOrderedMapDecorator(OrderedMap<K, V> map) {\n         super(map);\n     }\n \n      * \n      * @return the decorated map\n      */\n-    protected OrderedMap getOrderedMap() {\n-        return (OrderedMap) map;\n+    protected OrderedMap<K, V> decorated() {\n+        return (OrderedMap<K, V>) super.decorated();\n     }\n \n     //-----------------------------------------------------------------------\n-    public Object firstKey() {\n-        return getOrderedMap().firstKey();\n+    public K firstKey() {\n+        return decorated().firstKey();\n     }\n \n-    public Object lastKey() {\n-        return getOrderedMap().lastKey();\n+    public K lastKey() {\n+        return decorated().lastKey();\n     }\n \n-    public Object nextKey(Object key) {\n-        return getOrderedMap().nextKey(key);\n+    public K nextKey(K key) {\n+        return decorated().nextKey(key);\n     }\n \n-    public Object previousKey(Object key) {\n-        return getOrderedMap().previousKey(key);\n+    public K previousKey(K key) {\n+        return decorated().previousKey(key);\n     }\n \n-    public MapIterator mapIterator() {\n-        return getOrderedMap().mapIterator();\n-    }\n-\n-    public OrderedMapIterator orderedMapIterator() {\n-        return getOrderedMap().orderedMapIterator();\n+    public OrderedMapIterator<K, V> mapIterator() {\n+        return decorated().mapIterator();\n     }\n \n }", "timestamp": 1252994155, "metainfo": ""}