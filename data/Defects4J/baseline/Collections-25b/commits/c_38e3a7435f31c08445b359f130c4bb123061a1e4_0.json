{"sha": "38e3a7435f31c08445b359f130c4bb123061a1e4", "log": "Complete javadoc.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections/IteratorUtils.java\n      * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n      * Use <code>EmptyIterator.INSTANCE</code> for compatibility with Commons Collections 2.1.1.\n      *\n+     * @param <E>  the element type\n      * @return  an iterator over nothing\n      */\n     public static <E> ResettableIterator<E> emptyIterator() {\n      * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n      * Use <code>EmptyListIterator.INSTANCE</code> for compatibility with Commons Collections 2.1.1.\n      *\n+     * @param <E>  the element type\n      * @return  a list iterator over nothing\n      */\n     public static <E> ResettableListIterator<E> emptyListIterator() {\n      * This iterator is a valid iterator object that will iterate\n      * over nothing.\n      *\n+     * @param <E>  the element type\n      * @return  an ordered iterator over nothing\n      */\n     public static <E> OrderedIterator<E> emptyOrderedIterator() {\n      * This iterator is a valid map iterator object that will iterate\n      * over nothing.\n      *\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n      * @return  a map iterator over nothing\n      */\n     public static <K, V> MapIterator<K, V> emptyMapIterator() {\n      * This iterator is a valid map iterator object that will iterate\n      * over nothing.\n      *\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n      * @return  a map iterator over nothing\n      */\n     public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator() {\n      * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n      * Use <code>new SingletonIterator(object)</code> for compatibility.\n      *\n+     * @param <E>  the element type\n      * @param object  the single object over which to iterate\n      * @return  a singleton iterator over the object\n      */\n      * This iterator is a valid list iterator object that will iterate over\n      * the specified object.\n      *\n+     * @param <E>  the element type\n      * @param object  the single object over which to iterate\n      * @return  a singleton list iterator over the object\n      */\n      * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n      * Use <code>new ArrayIterator(array)</code> for compatibility.\n      *\n+     * @param <E>  the element type\n      * @param array  the array over which to iterate\n      * @return  an iterator over the array\n      * @throws NullPointerException if array is null\n      * This method will handle primitive arrays as well as object arrays.\n      * The primitives will be wrapped in the appropriate wrapper class.\n      *\n+     * @param <E>  the element type\n      * @param array  the array over which to iterate\n      * @return  an iterator over the array\n      * @throws IllegalArgumentException if the array is not an array\n      * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n      * Use <code>new ArrayIterator(array,start)</code> for compatibility.\n      *\n+     * @param <E>  the element type\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @return an iterator over part of the array\n      * @throws IndexOutOfBoundsException if start is less than zero or greater\n-     *  than the length of the array\n+     *   than the length of the array\n      * @throws NullPointerException if array is null\n      */\n     public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start) {\n      * This method will handle primitive arrays as well as object arrays.\n      * The primitives will be wrapped in the appropriate wrapper class.\n      *\n+     * @param <E>  the element type\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @return an iterator over part of the array\n      * @throws IllegalArgumentException if the array is not an array\n      * @throws IndexOutOfBoundsException if start is less than zero or greater\n-     *  than the length of the array\n+     *   than the length of the array\n      * @throws NullPointerException if array is null\n      */\n     public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start) {\n      * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n      * Use <code>new ArrayIterator(array,start,end)</code> for compatibility.\n      *\n+     * @param <E>  the element type\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @param end  the index to finish iterating at\n      * This method will handle primitive arrays as well as object arrays.\n      * The primitives will be wrapped in the appropriate wrapper class.\n      *\n+     * @param <E>  the element type\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @param end  the index to finish iterating at\n      * @return an iterator over part of the array\n-     * @throws IllegalArgumentException if the array is not an array\n+     * @throws IllegalArgumentException if the array is not an array or end is before start\n      * @throws IndexOutOfBoundsException if array bounds are invalid\n-     * @throws IllegalArgumentException if end is before start\n      * @throws NullPointerException if array is null\n      */\n     public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end) {\n     /**\n      * Gets a list iterator over an object array.\n      *\n+     * @param <E>  the element type\n      * @param array  the array over which to iterate\n      * @return  a list iterator over the array\n      * @throws NullPointerException if array is null\n      * This method will handle primitive arrays as well as object arrays.\n      * The primitives will be wrapped in the appropriate wrapper class.\n      *\n+     * @param <E>  the element type\n      * @param array  the array over which to iterate\n      * @return  a list iterator over the array\n      * @throws IllegalArgumentException if the array is not an array\n     /**\n      * Gets a list iterator over the end part of an object array.\n      *\n+     * @param <E>  the element type\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @return a list iterator over part of the array\n      * This method will handle primitive arrays as well as object arrays.\n      * The primitives will be wrapped in the appropriate wrapper class.\n      *\n+     * @param <E>  the element type\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @return a list iterator over part of the array\n     /**\n      * Gets a list iterator over part of an object array.\n      *\n+     * @param <E>  the element type\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @param end  the index to finish iterating at\n      * This method will handle primitive arrays as well as object arrays.\n      * The primitives will be wrapped in the appropriate wrapper class.\n      *\n+     * @param <E>  the element type\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @param end  the index to finish iterating at\n      * @return a list iterator over part of the array\n-     * @throws IllegalArgumentException if the array is not an array\n+     * @throws IllegalArgumentException if the array is not an array or end is before start\n      * @throws IndexOutOfBoundsException if array bounds are invalid\n-     * @throws IllegalArgumentException if end is before start\n      * @throws NullPointerException if array is null\n      */\n     public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end) {\n      * will always throw an {@link UnsupportedOperationException} for\n      * the {@link Iterator#remove} method.\n      *\n+     * @param <E>  the element type\n      * @param iterator  the iterator to make immutable\n      * @return an immutable version of the iterator\n      */\n      * the {@link Iterator#remove}, {@link ListIterator#add} and\n      * {@link ListIterator#set} methods.\n      *\n+     * @param <E>  the element type\n      * @param listIterator  the iterator to make immutable\n      * @return an immutable version of the iterator\n      */\n      * will always throw an {@link UnsupportedOperationException} for\n      * the {@link Iterator#remove}, {@link MapIterator#setValue(Object)} methods.\n      *\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n      * @param mapIterator  the iterator to make immutable\n      * @return an immutable version of the iterator\n      */\n      * Gets an iterator that iterates through two {@link Iterator}s\n      * one after another.\n      *\n-     * @param iterator1  the first iterators to use, not null\n-     * @param iterator2  the first iterators to use, not null\n+     * @param <E>  the element type\n+     * @param iterator1  the first iterator to use, not null\n+     * @param iterator2  the second iterator to use, not null\n      * @return a combination iterator over the iterators\n      * @throws NullPointerException if either iterator is null\n      */\n      * Gets an iterator that iterates through an array of {@link Iterator}s\n      * one after another.\n      *\n+     * @param <E>  the element type\n      * @param iterators  the iterators to use, not null or empty or contain nulls\n      * @return a combination iterator over the iterators\n      * @throws NullPointerException if iterators array is null or contains a null\n      * Gets an iterator that iterates through a collections of {@link Iterator}s\n      * one after another.\n      *\n+     * @param <E>  the element type\n      * @param iterators  the iterators to use, not null or empty or contain nulls\n      * @return a combination iterator over the iterators\n      * @throws NullPointerException if iterators collection is null or contains a null\n      * <p>\n      * The comparator is optional. If null is specified then natural order is used.\n      *\n+     * @param <E>  the element type\n      * @param comparator  the comparator to use, may be null for natural order\n      * @param iterator1  the first iterators to use, not null\n      * @param iterator2  the first iterators to use, not null\n      * <p>\n      * The comparator is optional. If null is specified then natural order is used.\n      *\n+     * @param <E>  the element type\n      * @param comparator  the comparator to use, may be null for natural order\n      * @param iterators  the iterators to use, not null or empty or contain nulls\n      * @return a combination iterator over the iterators\n-     * @throws NullPointerException if iterators array is null or contains a null\n+     * @throws NullPointerException if iterators array is null or contains a null value\n      */\n     public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator,\n                                                    final Iterator<? extends E>[] iterators) {\n      * <p>\n      * The comparator is optional. If null is specified then natural order is used.\n      *\n+     * @param <E>  the element type\n      * @param comparator  the comparator to use, may be null for natural order\n      * @param iterators  the iterators to use, not null or empty or contain nulls\n      * @return a combination iterator over the iterators\n      * Under many circumstances, linking Iterators together in this manner is\n      * more efficient (and convenient) than using nested for loops to extract a list.\n      *\n+     * @param <E>  the element type\n      * @param root  the root object to start iterating from, null results in an empty iterator\n      * @param transformer  the transformer to use, see above, null uses no effect transformer\n      * @return a new object graph iterator\n      * The transformation occurs during the next() method and the underlying\n      * iterator is unaffected by the transformation.\n      *\n+     * @param <I>  the input type\n+     * @param <O>  the output type\n      * @param iterator  the iterator to use, not null\n      * @param transform  the transform to use, not null\n      * @return a new transforming iterator\n      * The returned iterator will only return objects that match the specified\n      * filtering predicate.\n      *\n+     * @param <E>  the element type\n      * @param iterator  the iterator to use, not null\n      * @param predicate  the predicate to use as a filter, not null\n      * @return a new filtered iterator\n      * The returned iterator will only return objects that match the specified\n      * filtering predicate.\n      *\n+     * @param <E>  the element type\n      * @param listIterator  the list iterator to use, not null\n      * @param predicate  the predicate to use as a filter, not null\n      * @return a new filtered iterator\n      * enough times to empty the collection, or if the collection is empty\n      * to start with.\n      *\n+     * @param <E>  the element type\n      * @param coll  the collection to iterate over, not null\n      * @return a new looping iterator\n      * @throws NullPointerException if the collection is null\n      * The iterator will only stop looping if the remove method is called\n      * enough times to empty the list, or if the list is empty to start with.\n      *\n+     * @param <E>  the element type\n      * @param list  the list to iterate over, not null\n      * @return a new looping iterator\n      * @throws NullPointerException if the list is null\n     /**\n      * Gets an iterator that provides an iterator view of the given enumeration.\n      *\n+     * @param <E>  the element type\n      * @param enumeration  the enumeration to use\n      * @return a new iterator\n      */\n      * Gets an iterator that provides an iterator view of the given enumeration\n      * that will remove elements from the specified collection.\n      *\n+     * @param <E>  the element type\n      * @param enumeration  the enumeration to use\n      * @param removeCollection  the collection to remove elements from\n      * @return a new iterator\n     /**\n      * Gets an enumeration that wraps an iterator.\n      *\n+     * @param <E>  the element type\n      * @param iterator  the iterator to use, not null\n      * @return a new enumeration\n      * @throws NullPointerException if iterator is null\n     }\n \n     /**\n-     * Gets an iterable that wraps an iterator.  The returned iterable can be\n+     * Gets an {@link Iterable} that wraps an iterator.  The returned {@link Iterable} can be\n      * used for a single iteration.\n      *\n+     * @param <E>  the element type\n      * @param iterator  the iterator to use, not null\n-     * @return a new, single use iterable\n+     * @return a new, single use {@link Iterable}\n      * @throws NullPointerException if iterator is null\n      */\n     public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator) {\n      * Gets an iterable that wraps an iterator.  The returned iterable can be\n      * used for multiple iterations.\n      *\n+     * @param <E>  the element type\n      * @param iterator  the iterator to use, not null\n      * @return a new, multiple use iterable\n      * @throws NullPointerException if iterator is null\n      * As the wrapped Iterator is traversed, a LinkedList of its values is\n      * cached, permitting all required operations of ListIterator.\n      *\n+     * @param <E>  the element type\n      * @param iterator  the iterator to use, not null\n      * @return a new iterator\n      * @throws NullPointerException if iterator parameter is null\n      * As the wrapped Iterator is traversed, an ArrayList of its values is\n      * created. At the end, this is converted to an array.\n      *\n+     * @param <E>  the element type\n      * @param iterator  the iterator to use, not null\n      * @param arrayClass  the class of array to create\n      * @return an array of the iterator contents\n-     * @throws NullPointerException if iterator parameter is null\n-     * @throws NullPointerException if arrayClass is null\n+     * @throws NullPointerException if iterator parameter or arrayClass is null\n      * @throws ClassCastException if the arrayClass is invalid\n      */\n     public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n      * As the wrapped Iterator is traversed, an ArrayList of its values is\n      * created. At the end, the list is returned.\n      *\n+     * @param <E>  the element type\n      * @param iterator  the iterator to use, not null\n      * @return a list of the iterator contents\n      * @throws NullPointerException if iterator parameter is null\n      * As the wrapped Iterator is traversed, an ArrayList of its values is\n      * created. At the end, the list is returned.\n      *\n+     * @param <E>  the element type\n      * @param iterator  the iterator to use, not null\n      * @param estimatedSize  the initial size of the ArrayList\n      * @return a list of the iterator contents", "timestamp": 1358848451, "metainfo": ""}