{"sha": "3c5ad2e9ae648de0729d9af6dba2147780e8e55a", "log": "Use the Unmodifiable decorators everywhere   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BeanMap.java\n+++ b/src/java/org/apache/commons/collections/BeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.22 2003/10/03 23:19:32 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.23 2003/12/03 11:37:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.AbstractSet;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Set;\n \n+import org.apache.commons.collections.list.UnmodifiableList;\n import org.apache.commons.collections.pairs.AbstractMapEntry;\n+import org.apache.commons.collections.set.UnmodifiableSet;\n \n /** \n  * An implementation of Map for JavaBeans which uses introspection to\n  * property is considered non existent in the Map\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.22 $ $Date: 2003/10/03 23:19:32 $\n+ * @version $Revision: 1.23 $ $Date: 2003/12/03 11:37:44 $\n  * \n  * @author James Strachan\n  * @author Stephen Colebourne\n      *        modifiable.\n      */\n     public Set keySet() {\n-        return Collections.unmodifiableSet(readMethods.keySet());\n+        return UnmodifiableSet.decorate(readMethods.keySet());\n     }\n \n     /**\n      * @return the unmodifiable set of mappings\n      */\n     public Set entrySet() {\n-        return Collections.unmodifiableSet(new AbstractSet() {\n+        return new AbstractSet() {\n             public Iterator iterator() {\n                 return new Iterator() {\n \n             public int size() {\n               return BeanMap.this.readMethods.size();\n             }\n-        });\n+        };\n     }\n \n     /**\n         for ( Iterator iter = valueIterator(); iter.hasNext(); ) {\n             answer.add( iter.next() );\n         }\n-        return Collections.unmodifiableList(answer);\n+        return UnmodifiableList.decorate(answer);\n     }\n \n \n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.49 2003/11/29 18:14:20 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.50 2003/12/03 11:37:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Enumeration;\n import java.util.HashMap;\n import java.util.HashSet;\n  * Provides utility methods and decorators for {@link Collection} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.49 $ $Date: 2003/11/29 18:14:20 $\n+ * @version $Revision: 1.50 $ $Date: 2003/12/03 11:37:44 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n      * this purpose. However they could be cast to Set or List which might be\n      * undesirable. This implementation only implements Collection.\n      */\n-    public static final Collection EMPTY_COLLECTION = Collections.unmodifiableCollection(new ArrayList());\n+    public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.decorate(new ArrayList());\n \n     /**\n      * <code>CollectionUtils</code> should not normally be instantiated.\n--- a/src/java/org/apache/commons/collections/DefaultMapBag.java\n+++ b/src/java/org/apache/commons/collections/DefaultMapBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapBag.java,v 1.11 2003/12/02 23:36:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapBag.java,v 1.12 2003/12/03 11:37:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.ConcurrentModificationException;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+\n+import org.apache.commons.collections.set.UnmodifiableSet;\n \n /**\n  * A skeletal implementation of the {@link Bag}\n  *\n  * @deprecated Moved to bag subpackage as AbstractMapBag. Due to be removed in v4.0.\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.11 $ $Date: 2003/12/02 23:36:12 $\n+ * @version $Revision: 1.12 $ $Date: 2003/12/03 11:37:44 $\n  * \n  * @author Chuck Burdick\n  * @author Michael A. Smith\n      * @return the set of unique elements in this bag\n      */\n     public Set uniqueSet() {\n-        return Collections.unmodifiableSet(_map.keySet());\n+        return UnmodifiableSet.decorate(_map.keySet());\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.39 2003/11/16 00:05:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.40 2003/12/03 11:37:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *  </ul>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.39 $ $Date: 2003/11/16 00:05:44 $\n+ * @version $Revision: 1.40 $ $Date: 2003/12/03 11:37:44 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n      * An empty unmodifiable map.\n      * This was not provided in JDK1.2.\n      */\n-    public static final Map EMPTY_MAP = Collections.unmodifiableMap(new HashMap(1));\n+    public static final Map EMPTY_MAP = UnmodifiableMap.decorate(new HashMap(1));\n     /**\n      * An empty unmodifiable sorted map.\n      * This is not provided in the JDK.\n      */\n-    public static final SortedMap EMPTY_SORTED_MAP = Collections.unmodifiableSortedMap(new TreeMap());\n+    public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.decorate(new TreeMap());\n     /**\n      * String used to indent the verbose and debug Map prints.\n      */\n--- a/src/java/org/apache/commons/collections/SequencedHashMap.java\n+++ b/src/java/org/apache/commons/collections/SequencedHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.21 2003/11/23 14:40:41 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.22 2003/12/03 11:37:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.AbstractSet;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.ConcurrentModificationException;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.NoSuchElementException;\n import java.util.Set;\n+\n+import org.apache.commons.collections.list.UnmodifiableList;\n \n /**\n  * A map of objects whose mapping entries are sequenced based on the order in\n  *\n  * @see org.apache.commons.collections.set.ListOrderedSet\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.21 $ $Date: 2003/11/23 14:40:41 $\n+ * @version $Revision: 1.22 $ $Date: 2003/12/03 11:37:44 $\n  * \n  * @author Michael A. Smith\n  * @author Daniel Rall\n             l.add(iter.next());\n         }\n \n-        return Collections.unmodifiableList(l);\n+        return UnmodifiableList.decorate(l);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/java/org/apache/commons/collections/SetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.20 2003/11/27 22:55:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.21 2003/12/03 11:37:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link Set} and {@link SortedSet} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.20 $ $Date: 2003/11/27 22:55:16 $\n+ * @version $Revision: 1.21 $ $Date: 2003/12/03 11:37:44 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n      * An empty unmodifiable sorted set.\n      * This is not provided in the JDK.\n      */\n-    public static final SortedSet EMPTY_SORTED_SET = Collections.unmodifiableSortedSet(new TreeSet());\n+    public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.decorate(new TreeSet());\n \n     /**\n      * <code>SetUtils</code> should not normally be instantiated.\n--- a/src/java/org/apache/commons/collections/collection/CompositeCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/CompositeCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/CompositeCollection.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/CompositeCollection.java,v 1.2 2003/12/03 11:37:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Iterator;\n \n import org.apache.commons.collections.IteratorUtils;\n import org.apache.commons.collections.iterators.IteratorChain;\n+import org.apache.commons.collections.list.UnmodifiableList;\n \n /**\n  * Decorates a other collections to provide a single unified view.\n  * strategy is provided then add and remove are unsupported.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 11:37:44 $\n  *\n  * @author Brian McCallister\n  * @author Stephen Colebourne\n      * @return Unmodifiable collection of all collections in this composite.\n      */\n     public Collection getCollections() {\n-        return Collections.unmodifiableList(Arrays.asList(this.all));\n+        return UnmodifiableList.decorate(Arrays.asList(this.all));\n     }\n     \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/decorators/CompositeCollection.java\n+++ b/src/java/org/apache/commons/collections/decorators/CompositeCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/CompositeCollection.java,v 1.2 2003/11/16 00:39:37 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/CompositeCollection.java,v 1.3 2003/12/03 11:37:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Iterator;\n \n import org.apache.commons.collections.IteratorUtils;\n import org.apache.commons.collections.iterators.IteratorChain;\n+import org.apache.commons.collections.list.UnmodifiableList;\n \n /**\n  * A <code>Collection</code> implementation that decorates other collections\n  * strategy is provided then add and remove are unsupported.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 00:39:37 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/03 11:37:44 $\n  * @deprecated TO BE REMOVED BEFORE v3.0\n  *\n  * @author Brian McCallister\n      * @return Unmodifiable collection of all collections in this composite.\n      */\n     public Collection getCollections() {\n-        return Collections.unmodifiableList(Arrays.asList(this.all));\n+        return UnmodifiableList.decorate(Arrays.asList(this.all));\n     }\n     \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/decorators/OrderedSet.java\n+++ b/src/java/org/apache/commons/collections/decorators/OrderedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/OrderedSet.java,v 1.5 2003/11/16 00:39:37 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/OrderedSet.java,v 1.6 2003/12/03 11:37:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n+\n+import org.apache.commons.collections.list.UnmodifiableList;\n \n /**\n  * Decorates a <code>Set</code> to ensure that the order of addition\n  * various interface methods (notably equals/hashCode) are incompatable with a set.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/11/16 00:39:37 $\n+ * @version $Revision: 1.6 $ $Date: 2003/12/03 11:37:44 $\n  * @deprecated TO BE REMOVED BEFORE v3.0\n  * \n  * @author Stephen Colebourne\n      * @return an unmodifiable list view\n      */\n     public List asList() {\n-        return Collections.unmodifiableList(setOrder);\n+        return UnmodifiableList.decorate(setOrder);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/decorators/SetList.java\n+++ b/src/java/org/apache/commons/collections/decorators/SetList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/SetList.java,v 1.4 2003/11/16 00:39:37 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/SetList.java,v 1.5 2003/12/03 11:37:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n import java.util.Set;\n+\n+import org.apache.commons.collections.set.UnmodifiableSet;\n \n /**\n  * SetList combines the <code>List</code> and <code>Set</code> interfaces\n  * This class offers the <code>List</code> interface implementation as well.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/11/16 00:39:37 $\n+ * @version $Revision: 1.5 $ $Date: 2003/12/03 11:37:44 $\n  * @deprecated TO BE REMOVED BEFORE v3.0\n  * \n  * @author Matthew Hawthorne\n      * @return an unmodifiable set view\n      */\n     public Set asSet() {\n-        return Collections.unmodifiableSet(set);\n+        return UnmodifiableSet.decorate(set);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/iterators/CollatingIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/CollatingIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/CollatingIterator.java,v 1.9 2003/09/29 22:37:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/CollatingIterator.java,v 1.10 2003/12/03 11:37:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.ArrayList;\n import java.util.BitSet;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.list.UnmodifiableList;\n \n /**\n  * Provides an ordered iteration over the elements contained in\n  * <code>A.next()</code> and <code>B.next()</code>.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.9 $ $Date: 2003/09/29 22:37:40 $\n+ * @version $Revision: 1.10 $ $Date: 2003/12/03 11:37:44 $\n  * \n  * @author Rodney Waldhoff\n  * @author Stephen Colebourne\n      * @return the unmodifiable list of iterators added\n      */\n     public List getIterators() {\n-        return Collections.unmodifiableList(iterators);\n+        return UnmodifiableList.decorate(iterators);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n+++ b/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/IteratorChain.java,v 1.6 2003/09/29 22:02:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/IteratorChain.java,v 1.7 2003/12/03 11:37:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.list.UnmodifiableList;\n+\n /**\n  * <p>An IteratorChain is an Iterator that wraps one or\n  * more Iterators.  When any method from the\n  * to not alter the underlying List of Iterators.</p>\n  * \n  * @since Commons Collections 2.1\n- * @version $Revision: 1.6 $ $Date: 2003/09/29 22:02:33 $\n+ * @version $Revision: 1.7 $ $Date: 2003/12/03 11:37:44 $\n  * \n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n      * @return the unmodifiable list of iterators added\n      */\n     public List getIterators() {\n-        return Collections.unmodifiableList(iteratorChain);\n+        return UnmodifiableList.decorate(iteratorChain);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/list/SetUniqueList.java\n+++ b/src/java/org/apache/commons/collections/list/SetUniqueList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/SetUniqueList.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/SetUniqueList.java,v 1.2 2003/12/03 11:37:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n \n import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n import org.apache.commons.collections.iterators.AbstractListIteratorDecorator;\n+import org.apache.commons.collections.set.UnmodifiableSet;\n \n /**\n  * Decorates a <code>List</code> to ensure that no duplicates are present\n  * This class offers the <code>List</code> interface implementation as well.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 11:37:44 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n      * @return an unmodifiable set view\n      */\n     public Set asSet() {\n-        return Collections.unmodifiableSet(set);\n+        return UnmodifiableSet.decorate(set);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/set/ListOrderedSet.java\n+++ b/src/java/org/apache/commons/collections/set/ListOrderedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/ListOrderedSet.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/ListOrderedSet.java,v 1.2 2003/12/03 11:37:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n \n import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n+import org.apache.commons.collections.list.UnmodifiableList;\n \n /**\n  * Decorates another <code>Set</code> to ensure that the order of addition\n  * various interface methods (notably equals/hashCode) are incompatable with a set.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 11:37:44 $\n  * \n  * @author Stephen Colebourne\n  * @author Henning P. Schmiedehausen\n      * @return an unmodifiable list view\n      */\n     public List asList() {\n-        return Collections.unmodifiableList(setOrder);\n+        return UnmodifiableList.decorate(setOrder);\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1070451464, "metainfo": ""}