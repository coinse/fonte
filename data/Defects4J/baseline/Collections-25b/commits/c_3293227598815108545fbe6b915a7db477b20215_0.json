{"sha": "3293227598815108545fbe6b915a7db477b20215", "log": "[COLLECTIONS-231] apply signature change to factory method.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/collection/PredicatedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/PredicatedCollection.java\n      * @throws IllegalArgumentException if collection or predicate is null\n      * @throws IllegalArgumentException if the collection contains invalid elements\n      */\n-    public static <T> Collection<T> predicatedCollection(Collection<T> coll, Predicate<? super T> predicate) {\n+    public static <T> PredicatedCollection<T> predicatedCollection(Collection<T> coll,\n+                                                                   Predicate<? super T> predicate) {\n         return new PredicatedCollection<T>(coll, predicate);\n     }\n \n      */\n     protected void validate(E object) {\n         if (predicate.evaluate(object) == false) {\n-            throw new IllegalArgumentException(\"Cannot add Object '\" + object + \"' - Predicate '\" + predicate + \"' rejected it\");\n+            throw new IllegalArgumentException(\"Cannot add Object '\" + object + \"' - Predicate '\" +\n+                                               predicate + \"' rejected it\");\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n      * @return a new synchronized collection\n      * @throws IllegalArgumentException if collection is null\n      */\n-    public static <T> Collection<T> synchronizedCollection(Collection<T> coll) {\n+    public static <T> SynchronizedCollection<T> synchronizedCollection(Collection<T> coll) {\n         return new SynchronizedCollection<T>(coll);\n     }\n \n--- a/src/main/java/org/apache/commons/collections/collection/TransformedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/TransformedCollection.java\n      * are NOT transformed.\n      * Contrast this with {@link #transformedCollection(Collection, Transformer)}.\n      * \n+     * @param <E> the type of the elements in the collection\n      * @param coll  the collection to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed collection\n      * @throws IllegalArgumentException if collection or transformer is null\n      */\n-    public static <E> Collection<E> transformingCollection(Collection<E> coll, Transformer<? super E, ? extends E> transformer) {\n+    public static <E> TransformedCollection<E> transformingCollection(Collection<E> coll,\n+                                                                      Transformer<? super E, ? extends E> transformer) {\n         return new TransformedCollection<E>(coll, transformer);\n     }\n \n      * will be transformed by this method.\n      * Contrast this with {@link #transformingCollection(Collection, Transformer)}.\n      * \n+     * @param <E> the type of the elements in the collection\n      * @param collection  the collection to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed Collection\n      * @throws IllegalArgumentException if collection or transformer is null\n      * @since Commons Collections 3.3\n      */\n-    public static <E> Collection<E> transformedCollection(Collection<E> collection, Transformer<? super E, ? extends E> transformer) {\n+    public static <E> TransformedCollection<E> transformedCollection(Collection<E> collection,\n+                                                                     Transformer<? super E, ? extends E> transformer) {\n         TransformedCollection<E> decorated = new TransformedCollection<E>(collection, transformer);\n         // null collection & transformer are disallowed by the constructor call above \n         if (collection.size() > 0) {\n--- a/src/main/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n     /**\n      * Factory method to create an unmodifiable bounded collection.\n      *\n+     * @param <E> the type of the elements in the collection\n      * @param coll  the <code>BoundedCollection</code> to decorate, must not be null\n      * @return a new unmodifiable bounded collection\n      * @throws IllegalArgumentException if {@code coll} is {@code null}\n      * This method is capable of drilling down through up to 1000 other decorators\n      * to find a suitable BoundedCollection.\n      *\n+     * @param <E> the type of the elements in the collection\n      * @param coll  the <code>BoundedCollection</code> to decorate, must not be null\n      * @return a new unmodifiable bounded collection\n      * @throws IllegalArgumentException if {@code coll} is {@code null}", "timestamp": 1340473168, "metainfo": ""}