{"sha": "936fd069c78b100ac9666b17b55d0a1469b257ad", "log": "COLLECTIONS-313.  Added abstract closure that is capable of handling thrown exceptions from closure execution.  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/CatchAndRethrowClosure.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import org.apache.commons.collections.Closure;\n+import org.apache.commons.collections.FunctorException;\n+\n+/**\n+ * {@link Closure} that catches any checked exception and re-throws it as a\n+ * {@link FunctorException} runtime exception. Example usage:\n+ * \n+ * <pre>\n+ * // Create a catch and re-throw closure via anonymous subclass\n+ * CatchAndRethrowClosure&lt;String&gt; writer = new ThrowingClosure() {\n+ *     private java.io.Writer out = // some writer\n+ *     \n+ *     protected void executeAndThrow(String input) throws IOException {\n+ *         out.write(input); // throwing of IOException allowed\n+ *     }\n+ * };\n+ * \n+ * // use catch and re-throw closure\n+ * java.util.List<String> strList = // some list\n+ * try {\n+ *     CollctionUtils.forAllDo(strList, writer);\n+ * } catch (FunctorException ex) {\n+ *     Throwable originalError = ex.getCause();\n+ *     // handle error\n+ * }\n+ * </pre>\n+ * \n+ * @since Commons Collections 4.0\n+ * @version $Revision: $ $Date: $\n+ */\n+public abstract class CatchAndRethrowClosure<E> implements Closure<E> {\n+\n+    /**\n+     * Execute this closure on the specified input object.\n+     * \n+     * @param input the input to execute on\n+     * @throws ClosureException (runtime) if the closure execution resulted in a\n+     *             checked exception.\n+     */\n+    public void execute(E input) {\n+        try {\n+            executeAndThrow(input);\n+        } catch (RuntimeException ex) {\n+            throw ex;\n+        } catch (Throwable t) {\n+            throw new FunctorException(t);\n+        }\n+    }\n+\n+    /**\n+     * Execute this closure on the specified input object.\n+     * \n+     * @param input the input to execute on\n+     * @throws Throwable if the closure execution resulted in a checked\n+     *             exception.\n+     */\n+    protected abstract void executeAndThrow(E input) throws Throwable;\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/functors/BasicClosureTestBase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import org.apache.commons.collections.Closure;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public abstract class BasicClosureTestBase {\n+\n+    @Test\n+    public void closureSanityTests() throws Exception {\n+        Closure<?> closure = generateClosure();\n+        Assert.assertNotNull(closure);\n+    }\n+\n+    /**\n+     * @return a closure for general sanity tests.\n+     */\n+    protected abstract <T> Closure<T> generateClosure();\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/functors/TestCatchAndRethrowClosure.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.IOException;\n+\n+import org.apache.commons.collections.Closure;\n+import org.apache.commons.collections.FunctorException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestCatchAndRethrowClosure extends BasicClosureTestBase {\n+\n+    private static <T> Closure<T> generateIOExceptionClosure() {\n+        return new CatchAndRethrowClosure<T>() {\n+\n+            @Override\n+            protected void executeAndThrow(T input) throws IOException  {\n+                throw new IOException();\n+            }\n+        };\n+    }\n+\n+    private static <T> Closure<T> generateNullPointerExceptionClosure() {\n+        return new CatchAndRethrowClosure<T>() {\n+\n+            @Override\n+            protected void executeAndThrow(T input) {\n+                throw new NullPointerException();\n+            }\n+        };\n+    }\n+\n+    private static <T> Closure<T> generateNoExceptionClosure() {\n+        return new CatchAndRethrowClosure<T>() {\n+\n+            @Override\n+            protected void executeAndThrow(T input) {\n+            }\n+        };\n+    }\n+\n+    @Override\n+    protected <T> Closure<T> generateClosure() {\n+        return generateNoExceptionClosure();\n+    }\n+    \n+    @Test\n+    public void testThrowingClosure() {\n+        Closure<Integer> closure = generateNoExceptionClosure();\n+        try {\n+            closure.execute(Integer.valueOf(0));\n+        } catch (FunctorException ex) {\n+            Assert.fail();\n+        } catch (RuntimeException ex) {\n+            Assert.fail();\n+        }\n+        \n+        closure = generateIOExceptionClosure();\n+        try {\n+            closure.execute(Integer.valueOf(0));\n+            Assert.fail();\n+        } catch (FunctorException ex) {\n+            Assert.assertTrue(ex.getCause() instanceof IOException);\n+        } catch (RuntimeException ex) {\n+            Assert.fail();\n+        }\n+\n+        closure = generateNullPointerExceptionClosure();\n+        try {\n+            closure.execute(Integer.valueOf(0));\n+            Assert.fail();\n+        } catch (FunctorException ex) {\n+            Assert.fail();\n+        } catch (RuntimeException ex) {\n+            Assert.assertTrue(ex instanceof NullPointerException);\n+        }\n+    }\n+}", "timestamp": 1306261693, "metainfo": ""}