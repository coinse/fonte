{"sha": "5bd1ed25de6233520975d9a2aad855bf09d90022", "log": "Add getters to functor classes bug 27515   ", "commit": "\n--- a/src/java/org/apache/commons/collections/functors/AllPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AllPredicate.java\n  * Predicate implementation that returns true if all the predicates return true.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n         }\n         return true;\n     }\n-    \n+\n+    /**\n+     * Gets the predicates, do not modify the array.\n+     * @return the predicates\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate[] getPredicates() {\n+        return iPredicates;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/AndPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AndPredicate.java\n  * Predicate implementation that returns true if both the predicates return true.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n     public boolean evaluate(Object object) {\n        return (iPredicate1.evaluate(object) && iPredicate2.evaluate(object));\n     }\n-    \n+\n+    /**\n+     * Gets the first predicate.\n+     * @return the predicate\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate getPredicate1() {\n+        return iPredicate1;\n+    }\n+\n+    /**\n+     * Gets the second predicate.\n+     * @return the predicate\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate getPredicate2() {\n+        return iPredicate2;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/AnyPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AnyPredicate.java\n  * Predicate implementation that returns true if any of the predicates return true.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n         }\n         return false;\n     }\n-    \n+\n+    /**\n+     * Gets the predicates, do not modify the array.\n+     * @return the predicates\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate[] getPredicates() {\n+        return iPredicates;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/ChainedClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/ChainedClosure.java\n  * Closure implementation that chains the specified closures together.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n             iClosures[i].execute(input);\n         }\n     }\n-    \n+\n+    /**\n+     * Gets the closures, do not modify the array.\n+     * @return the closures\n+     * @since Commons Collections 3.1\n+     */\n+    public Closure[] getClosures() {\n+        return iClosures;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/ChainedTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ChainedTransformer.java\n  * Transformer implementation that chains the specified closures together.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.6 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n         }\n         return object;\n     }\n-    \n+\n+    /**\n+     * Gets the transformers, do not modify the array.\n+     * @return the transformers\n+     * @since Commons Collections 3.1\n+     */\n+    public Transformer[] getTransformers() {\n+        return iTransformers;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/ClosureTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ClosureTransformer.java\n  * and then returns the input.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n         iClosure.execute(input);\n         return input;\n     }\n-    \n+\n+    /**\n+     * Gets the closure.\n+     * @return the closure\n+     * @since Commons Collections 3.1\n+     */\n+    public Closure getClosure() {\n+        return iClosure;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/ConstantFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/ConstantFactory.java\n  * use the prototype factory.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n     public Object create() {\n         return iConstant;\n     }\n-    \n+\n+    /**\n+     * Gets the constant.\n+     * @return the constant\n+     * @since Commons Collections 3.1\n+     */\n+    public Object getConstant() {\n+        return iConstant;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/ConstantTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ConstantTransformer.java\n  * use the prototype factory.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n     public Object transform(Object input) {\n         return iConstant;\n     }\n-    \n+\n+    /**\n+     * Gets the constant.\n+     * @return the constant\n+     * @since Commons Collections 3.1\n+     */\n+    public Object getConstant() {\n+        return iConstant;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/EqualPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/EqualPredicate.java\n  * as the one stored in this predicate by equals.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n     public boolean evaluate(Object object) {\n         return (iValue.equals(object));\n     }\n-    \n+\n+    /**\n+     * Gets the value.\n+     * @return the value\n+     * @since Commons Collections 3.1\n+     */\n+    public Object getValue() {\n+        return iValue;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/FactoryTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/FactoryTransformer.java\n  * Transformer implementation that calls a Factory and returns the result.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n     public Object transform(Object input) {\n         return iFactory.create();\n     }\n-    \n+\n+    /**\n+     * Gets the factory.\n+     * @return the factory\n+     * @since Commons Collections 3.1\n+     */\n+    public Factory getFactory() {\n+        return iFactory;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/ForClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/ForClosure.java\n  * Closure implementation that calls another closure n times, like a for loop.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n             iClosure.execute(input);\n         }\n     }\n-    \n+\n+    /**\n+     * Gets the closure.\n+     * @return the closure\n+     * @since Commons Collections 3.1\n+     */\n+    public Closure getClosure() {\n+        return iClosure;\n+    }\n+\n+    /**\n+     * Gets the count.\n+     * @return the count\n+     * @since Commons Collections 3.1\n+     */\n+    public int getCount() {\n+        return iCount;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/IdentityPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/IdentityPredicate.java\n  * as the one stored in this predicate.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n     public boolean evaluate(Object object) {\n         return (iValue == object);\n     }\n-    \n+\n+    /**\n+     * Gets the value.\n+     * @return the value\n+     * @since Commons Collections 3.1\n+     */\n+    public Object getValue() {\n+        return iValue;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/IfClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/IfClosure.java\n  * based on a predicate.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n             iFalseClosure.execute(input);\n         }\n     }\n-    \n+\n+    /**\n+     * Gets the predicate.\n+     * @return the predicate\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate getPredicate() {\n+        return iPredicate;\n+    }\n+\n+    /**\n+     * Gets the closure called when true.\n+     * @return the closure\n+     * @since Commons Collections 3.1\n+     */\n+    public Closure getTrueClosure() {\n+        return iTrueClosure;\n+    }\n+\n+    /**\n+     * Gets the closure called when false.\n+     * @return the closure\n+     * @since Commons Collections 3.1\n+     */\n+    public Closure getFalseClosure() {\n+        return iFalseClosure;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/InstanceofPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/InstanceofPredicate.java\n  * the type stored in this predicate.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n     public boolean evaluate(Object object) {\n         return (iType.isInstance(object));\n     }\n-    \n+\n+    /**\n+     * Gets the type to compare to.\n+     * @return the type\n+     * @since Commons Collections 3.1\n+     */\n+    public Class getType() {\n+        return iType;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/MapTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/MapTransformer.java\n  * using the input parameter as a key.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.6 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n     public Object transform(Object input) {\n         return iMap.get(input);\n     }\n-    \n+\n+    /**\n+     * Gets the map to lookup in.\n+     * @return the map\n+     * @since Commons Collections 3.1\n+     */\n+    public Map getMap() {\n+        return iMap;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/NonePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NonePredicate.java\n  * Predicate implementation that returns true if none of the predicates return true.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n         }\n         return true;\n     }\n-    \n+\n+    /**\n+     * Gets the predicates, do not modify the array.\n+     * @return the predicates\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate[] getPredicates() {\n+        return iPredicates;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/NotPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NotPredicate.java\n  * Predicate implementation that returns the opposite of the decorated predicate.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n     public boolean evaluate(Object object) {\n         return !(iPredicate.evaluate(object));\n     }\n-    \n+\n+    /**\n+     * Gets the predicate.\n+     * @return the predicate\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate getPredicate() {\n+        return iPredicate;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java\n  * Predicate implementation that throws an exception if the input is null.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n         }\n         return iPredicate.evaluate(object);\n     }\n-    \n+\n+    /**\n+     * Gets the predicate.\n+     * @return the predicate\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate getPredicate() {\n+        return iPredicate;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/NullIsFalsePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NullIsFalsePredicate.java\n  * Predicate implementation that returns false if the input is null.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n         }\n         return iPredicate.evaluate(object);\n     }\n-    \n+\n+    /**\n+     * Gets the predicate.\n+     * @return the predicate\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate getPredicate() {\n+        return iPredicate;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/NullIsTruePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NullIsTruePredicate.java\n  * Predicate implementation that returns true if the input is null.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n         }\n         return iPredicate.evaluate(object);\n     }\n-    \n+\n+    /**\n+     * Gets the predicate.\n+     * @return the predicate\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate getPredicate() {\n+        return iPredicate;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/OnePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/OnePredicate.java\n  * Predicate implementation that returns true if only one of the predicates return true.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n         }\n         return match;\n     }\n-    \n+\n+    /**\n+     * Gets the predicates, do not modify the array.\n+     * @return the predicates\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate[] getPredicates() {\n+        return iPredicates;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/OrPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/OrPredicate.java\n  * Predicate implementation that returns true if either of the predicates return true.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n     public boolean evaluate(Object object) {\n        return (iPredicate1.evaluate(object) || iPredicate2.evaluate(object));\n     }\n-    \n+\n+    /**\n+     * Gets the first predicate.\n+     * @return the predicate\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate getPredicate1() {\n+        return iPredicate1;\n+    }\n+\n+    /**\n+     * Gets the second predicate.\n+     * @return the predicate\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate getPredicate2() {\n+        return iPredicate2;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/PredicateTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/PredicateTransformer.java\n  * and then returns the input.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n     public Object transform(Object input) {\n         return (iPredicate.evaluate(input) ? Boolean.TRUE : Boolean.FALSE);\n     }\n-    \n+\n+    /**\n+     * Gets the predicate.\n+     * @return the predicate\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate getPredicate() {\n+        return iPredicate;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/SwitchClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/SwitchClosure.java\n  * like a switch statement.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n         }\n         iDefault.execute(input);\n     }\n-    \n+\n+    /**\n+     * Gets the predicates, do not modify the array.\n+     * @return the predicates\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate[] getPredicates() {\n+        return iPredicates;\n+    }\n+\n+    /**\n+     * Gets the closures, do not modify the array.\n+     * @return the closures\n+     * @since Commons Collections 3.1\n+     */\n+    public Closure[] getClosures() {\n+        return iClosures;\n+    }\n+\n+    /**\n+     * Gets the default closure.\n+     * @return the default closure\n+     * @since Commons Collections 3.1\n+     */\n+    public Closure getDefaultClosure() {\n+        return iDefault;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/SwitchTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/SwitchTransformer.java\n  * like a switch statement.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n public class SwitchTransformer implements Transformer, Serializable {\n \n     /** Serial version UID */\n-\n+    static final long serialVersionUID = -6404460890903469332L;\n \n     /** The tests to consider */\n     private final Predicate[] iPredicates;\n         }\n         return iDefault.transform(input);\n     }\n-    \n+\n+    /**\n+     * Gets the predicates, do not modify the array.\n+     * @return the predicates\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate[] getPredicates() {\n+        return iPredicates;\n+    }\n+\n+    /**\n+     * Gets the transformers, do not modify the array.\n+     * @return the transformers\n+     * @since Commons Collections 3.1\n+     */\n+    public Transformer[] getTransformers() {\n+        return iTransformers;\n+    }\n+\n+    /**\n+     * Gets the default transformer.\n+     * @return the default transformer\n+     * @since Commons Collections 3.1\n+     */\n+    public Transformer getDefaultTransformer() {\n+        return iDefault;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/TransformerClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/TransformerClosure.java\n  * and ignore the result.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n     public void execute(Object input) {\n         iTransformer.transform(input);\n     }\n-    \n+\n+    /**\n+     * Gets the transformer.\n+     * @return the transformer\n+     * @since Commons Collections 3.1\n+     */\n+    public Transformer getTransformer() {\n+        return iTransformer;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/TransformerPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/TransformerPredicate.java\n  * Predicate implementation that returns the result of a transformer.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n         }\n         return ((Boolean) result).booleanValue();\n     }\n-    \n+\n+    /**\n+     * Gets the transformer.\n+     * @return the transformer\n+     * @since Commons Collections 3.1\n+     */\n+    public Transformer getTransformer() {\n+        return iTransformer;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/WhileClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/WhileClosure.java\n  * like a do-while or while loop.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n  *\n  * @author Stephen Colebourne\n  */\n             iClosure.execute(input);\n         }\n     }\n-    \n+\n+    /**\n+     * Gets the predicate in use.\n+     * @return the predicate\n+     * @since Commons Collections 3.1\n+     */\n+    public Predicate getPredicate() {\n+        return iPredicate;\n+    }\n+\n+    /**\n+     * Gets the closure.\n+     * @return the closure\n+     * @since Commons Collections 3.1\n+     */\n+    public Closure getClosure() {\n+        return iClosure;\n+    }\n+\n+    /**\n+     * Is the loop a do-while loop.\n+     * @return true is do-while, false if while\n+     * @since Commons Collections 3.1\n+     */\n+    public boolean isDoLoop() {\n+        return iDoLoop;\n+    }\n+\n }\n-", "timestamp": 1079198223, "metainfo": ""}