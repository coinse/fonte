{"sha": "1bec2d62d76e9ca47236be297ff452ff850dd3f8", "log": "Enable iterator testing to better integrate with collection/map tests   ", "commit": "\n--- a/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java,v 1.2 2003/10/02 22:14:34 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java,v 1.3 2003/11/02 19:47:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * overriding the supportsXxx() methods if necessary.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/10/02 22:14:34 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/02 19:47:10 $\n  * \n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n         return true;\n     }\n \n+    /**\n+     * Allows subclasses to add complex cross verification\n+     */\n+    protected void verify() {\n+        // do nothing\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Test the empty iterator.\n             fail(\"NoSuchElementException must be thrown when Iterator is exhausted\");\n         } catch (NoSuchElementException e) {\n         }\n+        verify();\n     }\n \n     /**\n         // iterate through\n         while (it.hasNext()) {\n             it.next();\n+            verify();\n         }\n \n         // next() must throw NoSuchElementException now\n             it.remove();\n             fail();\n         } catch (IllegalStateException ex) {}\n+        verify();\n         \n         // remove after next should be fine\n         it.next();\n         it.remove();\n+        verify();\n         \n         // should throw IllegalStateException for second remove()\n         try {\n             it.remove();\n             fail();\n         } catch (IllegalStateException ex) {}\n+        verify();\n     }\n     \n }\n--- a/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java,v 1.1 2003/11/02 18:29:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java,v 1.2 2003/11/02 19:47:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * overriding the supportsXxx() methods if necessary.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/02 18:29:59 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/02 19:47:10 $\n  * \n  * @author Stephen Colebourne\n  */\n         }\n \n         MapIterator it = makeEmptyMapIterator();\n+        Map map = getMap();\n         assertEquals(false, it.hasNext());\n         \n         // next() should throw a NoSuchElementException\n             lastEntry = entry;\n             lastKey = key;\n             lastValue = value;\n+            verify();\n         }\n     }\n     \n             assertTrue(\"Value must be in map\",  map.containsValue(newValue));\n             assertSame(\"Value must be mapped to key\", map.get(key), newValue);\n         }\n+        verify();\n         \n         it.setValue(newValue);  // same value - should be OK\n         assertSame(\"Key must not change after setValue\", key, it.getKey());\n             assertTrue(\"Value must be in map\",  map.containsValue(newValue));\n             assertSame(\"Value must be mapped to key\", map.get(key), newValue);\n         }\n+        verify();\n     }\n \n     //-----------------------------------------------------------------------\n             assertTrue(\"Value must be in map\",  map.containsValue(newValue));\n             assertSame(\"Value must be mapped to key\", map.get(key), newValue);\n         }\n+        verify();\n         \n         entry.setValue(newValue);  // same value - should be OK\n         assertSame(\"Key must not change after setValue\", key, it.getKey());\n             assertTrue(\"Value must be in map\",  map.containsValue(newValue));\n             assertSame(\"Value must be mapped to key\", map.get(key), newValue);\n         }\n+        verify();\n     }\n \n     //-----------------------------------------------------------------------\n         Object newValue = addSetValue();\n         \n         MapIterator it = makeFullMapIterator();\n+        Map map = getMap();\n         assertEquals(true, it.hasNext());\n         Object key = it.next();\n         \n         it.setValue(newValue);\n         it.remove();\n+        verify();\n         \n         try {\n             it.setValue(newValue);\n             fail();\n         } catch (IllegalStateException ex) {}\n+        verify();\n     }\n \n }", "timestamp": 1067802430, "metainfo": ""}