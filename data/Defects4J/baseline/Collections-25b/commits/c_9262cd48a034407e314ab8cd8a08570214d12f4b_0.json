{"sha": "9262cd48a034407e314ab8cd8a08570214d12f4b", "log": "add basic adapters   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/CollectionIntCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/CollectionIntCollection.java,v 1.1 2003/01/05 03:03:42 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/01/05 03:03:42 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Adapts a {@link java.lang.Number Number} valued\n+ * {@link java.util.Collection Collection} to the\n+ * {@link IntCollection} interface.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/01/05 03:03:42 $\n+ * @author Rodney Waldhoff \n+ */\n+public class CollectionIntCollection implements IntCollection {\n+    public CollectionIntCollection(Collection collection) {\n+        _collection = collection;\n+    }\n+          \n+    public boolean add(int element) {\n+        return _collection.add(new Integer(element));\n+    }\n+        \n+    public boolean addAll(IntCollection c) {\n+        return _collection.addAll(IntCollectionCollection.wrap(c));\n+    }\n+    \n+    public void clear() {\n+        _collection.clear();\n+    }\n+\n+    public boolean contains(int element) {\n+        return _collection.contains(new Integer(element));\n+    }\n+    \n+    public boolean containsAll(IntCollection c) {\n+        return _collection.containsAll(IntCollectionCollection.wrap(c));\n+    }        \n+    \n+    public boolean equals(Object o) {\n+        return _collection.equals(o);\n+    }\n+    \n+    public int hashCode() {\n+        return _collection.hashCode();\n+    }\n+    \n+    public boolean isEmpty() {\n+        return _collection.isEmpty();\n+    }\n+    \n+    public IntIterator iterator() {\n+        return IteratorIntIterator.wrap(_collection.iterator());\n+    }\n+     \n+    public boolean removeElement(int element) {\n+        return _collection.remove(new Integer(element));\n+    }\n+    \n+    public boolean removeAll(IntCollection c) {\n+        return _collection.removeAll(IntCollectionCollection.wrap(c));\n+    }\n+        \n+    public boolean retainAll(IntCollection c) {\n+        return _collection.retainAll(IntCollectionCollection.wrap(c));\n+    }\n+    \n+    public int size() {\n+        return _collection.size();\n+    }\n+    \n+    public int[] toArray() {\n+        Object[] src = _collection.toArray();\n+        int[] dest = new int[src.length];\n+        for(int i=0;i<src.length;i++) {\n+            dest[i] = ((Number)(src[i])).intValue();\n+        }\n+        return dest;\n+    }\n+    \n+    public int[] toArray(int[] dest) {\n+        Object[] src = _collection.toArray();\n+        if(dest.length < src.length) {\n+            dest = new int[src.length];\n+        }\n+        for(int i=0;i<src.length;i++) {\n+            dest[i] = ((Number)(src[i])).intValue();\n+        }\n+        return dest;\n+    }\n+    \n+    public static IntCollection wrap(Collection collection) {\n+        return null == collection ? null : new CollectionIntCollection(collection);\n+    }\n+    \n+    private Collection _collection = null;\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/IntCollectionCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntCollectionCollection.java,v 1.1 2003/01/05 03:03:42 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/01/05 03:03:42 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.lang.reflect.Array;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+/**\n+ * Adapts an {@link IntCollection} to the\n+ * {@link java.util.Collection Collection} interface.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/01/05 03:03:42 $\n+ * @author Rodney Waldhoff \n+ */\n+public class IntCollectionCollection implements Collection {\n+    \n+    public IntCollectionCollection(IntCollection collection) {\n+        _collection = collection;\n+    }\n+    \n+    public boolean add(Object element) {\n+        return _collection.add(((Number)element).intValue());\n+    }\n+\n+    public boolean addAll(Collection c) {\n+        return _collection.addAll(CollectionIntCollection.wrap(c));\n+    }\n+        \n+    public void clear() {\n+        _collection.clear();\n+    }\n+\n+    public boolean contains(Object element) {\n+        return _collection.contains(((Number)element).intValue());\n+    }\n+   \n+    \n+    public boolean containsAll(Collection c) {\n+        return _collection.containsAll(CollectionIntCollection.wrap(c));\n+    }        \n+    \n+    public boolean equals(Object o) {\n+        return _collection.equals(o);\n+    }\n+    \n+    public int hashCode() {\n+        return _collection.hashCode();\n+    }\n+    \n+    public boolean isEmpty() {\n+        return _collection.isEmpty();\n+    }\n+    \n+    public Iterator iterator() {\n+        return IntIteratorIterator.wrap(_collection.iterator());\n+    }\n+     \n+    public boolean remove(Object element) {\n+        return _collection.removeElement(((Number)element).intValue());\n+    }\n+    \n+    public boolean removeAll(Collection c) {\n+        return _collection.removeAll(CollectionIntCollection.wrap(c));\n+    }\n+    \n+    public boolean retainAll(Collection c) {\n+        return _collection.removeAll(CollectionIntCollection.wrap(c));\n+    }\n+    \n+    public int size() {\n+        return _collection.size();\n+    }\n+    \n+    public Object[] toArray() {\n+        int[] a = _collection.toArray();\n+        Object[] A = new Object[a.length];\n+        for(int i=0;i<a.length;i++) {\n+            A[i] = new Integer(a[i]);\n+        }\n+        return A;\n+    }\n+    \n+    public Object[] toArray(Object[] A) {\n+        int[] a = _collection.toArray();\n+        if(A.length < a.length) {\n+            A = (Object[])(Array.newInstance(A.getClass().getComponentType(), a.length));\n+        }\n+        for(int i=0;i<a.length;i++) {\n+            A[i] = new Integer(a[i]);\n+        }\n+        if(A.length > a.length) {\n+            A[a.length] = null;\n+        }\n+\n+        return A;\n+    }\n+    \n+    public static Collection wrap(IntCollection collection) {\n+        return null == collection ? null : new IntCollectionCollection(collection);\n+    }\n+    \n+    private IntCollection _collection = null;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/IntIteratorIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntIteratorIterator.java,v 1.1 2003/01/05 03:03:42 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/01/05 03:03:42 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Adapts an {@link IntIterator} to the\n+ * {@link java.util.Iterator Iterator} interface.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/01/05 03:03:42 $\n+ * @author Rodney Waldhoff \n+ */\n+public class IntIteratorIterator implements Iterator {\n+    \n+    public IntIteratorIterator(IntIterator iterator) {\n+        _iterator = iterator;\n+    }\n+    \n+    public boolean hasNext() {\n+        return _iterator.hasNext();\n+    }\n+    \n+    public Object next() {\n+        return new Integer(_iterator.next());\n+    }\n+    \n+    public void remove() {\n+        _iterator.remove();\n+    }\n+    \n+    public static Iterator wrap(IntIterator iterator) {\n+        return null == iterator ? null : new IntIteratorIterator(iterator);\n+    }\n+    \n+    private IntIterator _iterator = null;\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/IteratorIntIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IteratorIntIterator.java,v 1.1 2003/01/05 03:03:42 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/01/05 03:03:42 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Adapts a {@link java.lang.Number Number}-valued \n+ * {@link java.util.Iterator Iterator} \n+ * to the {@link IntIterator} interface.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/01/05 03:03:42 $\n+ * @author Rodney Waldhoff \n+ *  \n+ */\n+public class IteratorIntIterator implements IntIterator {\n+    \n+    public IteratorIntIterator(Iterator iterator) {\n+        _iterator = iterator;\n+    }\n+    \n+    public boolean hasNext() {\n+        return _iterator.hasNext();\n+    }\n+    \n+    public int next() {\n+        return ((Number)(_iterator.next())).intValue();\n+    }\n+    \n+    public void remove() {\n+        _iterator.remove();\n+    }\n+    \n+    public static IntIterator wrap(Iterator iterator) {\n+        return null == iterator ? null : new IteratorIntIterator(iterator);\n+    }\n+\n+    private Iterator _iterator = null;\n+\n+}", "timestamp": 1041735822, "metainfo": ""}