{"sha": "4eb9212972062d863a5c0e71dff202a7d59ed62c", "log": "Add sequenced decorator   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/SequencedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/SequencedSet.java,v 1.1 2003/05/10 15:10:22 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * <code>SequencedSet</code> decorates another <code>Set</code>\n+ * to ensure that the order of addition is retained and used by the iterator.\n+ * <p>\n+ * If an object is added to the Set for a second time, it will remain in the\n+ * original position in the iteration.\n+ * <p>\n+ * The order can be observed via the iterator or toArray methods.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/10 15:10:22 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Henning P. Schmiedehausen\n+ */\n+public class SequencedSet extends AbstractSetDecorator implements Set {\n+\n+    /** Internal list to hold the sequence of objects */\n+    protected final List setOrder = new ArrayList();\n+\n+    /**\n+     * Factory method to create an unmodifiable set.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    public static Set decorate(Set set) {\n+        return new SequencedSet(set);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    protected SequencedSet(Set set) {\n+        super(set);\n+        setOrder.addAll(set);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void clear() {\n+        collection.clear();\n+        setOrder.clear();\n+    }\n+\n+    public Iterator iterator() {\n+        return new SequencedSetIterator(setOrder.iterator(), collection);\n+    }\n+\n+    public boolean add(Object object) {\n+        if (collection.contains(object)) {\n+            // re-adding doesn't change order\n+            return collection.add(object);\n+        } else {\n+            // first add, so add to both set and list\n+            boolean result = collection.add(object);\n+            setOrder.add(object);\n+            return result;\n+        }\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        boolean result = false;\n+        for (Iterator it = coll.iterator(); it.hasNext();) {\n+            Object object = it.next();\n+            result = result | add(object);\n+        }\n+        return result;\n+    }\n+\n+    public boolean remove(Object object) {\n+        boolean result = collection.remove(object);\n+        setOrder.remove(object);\n+        return result;\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        boolean result = false;\n+        for (Iterator it = coll.iterator(); it.hasNext();) {\n+            Object object = it.next();\n+            result = result | remove(object);\n+        }\n+        return result;\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        boolean result = collection.retainAll(coll);\n+        if (result == false) {\n+            return false;\n+        } else if (collection.size() == 0) {\n+            setOrder.clear();\n+        } else {\n+            for (Iterator it = setOrder.iterator(); it.hasNext();) {\n+                Object object = (Object) it.next();\n+                if (collection.contains(object) == false) {\n+                    it.remove();\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    public Object[] toArray() {\n+        return setOrder.toArray();\n+    }\n+\n+    public Object[] toArray(Object a[]) {\n+        return setOrder.toArray(a);\n+    }\n+\n+    /**\n+     * Internal iterator handle remove.\n+     */\n+    protected static class SequencedSetIterator extends AbstractIteratorDecorator {\n+        \n+        /** Object we iterate on */\n+        protected final Collection set;\n+        /** Last object retrieved */\n+        protected Object last;\n+\n+        private SequencedSetIterator(Iterator iterator, Collection set) {\n+            super(iterator);\n+            this.set = set;\n+        }\n+\n+        public Object next() {\n+            last = iterator.next();\n+            return last;\n+        }\n+\n+        public void remove() {\n+            set.remove(last);\n+            iterator.remove();\n+            last = null;\n+        }\n+    }\n+\n+}", "timestamp": 1052579422, "metainfo": ""}