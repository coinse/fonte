{"sha": "1064cdbedb6ee25295a2d40cdadbacd8f9740a02", "log": "Update and make consistent the Unmodifiable decorators   ", "commit": "\n--- a/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.3 2003/12/03 01:02:32 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.4 2003/12/03 11:19:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.io.ObjectOutputStream;\n import java.lang.reflect.Array;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.ConcurrentModificationException;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Set;\n \n import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.set.UnmodifiableSet;\n \n /**\n  * Abstract implementation of the {@link Bag} interface to simplify the creation\n  * the number of occurrences of that element in the bag.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/12/03 01:02:32 $\n+ * @version $Revision: 1.4 $ $Date: 2003/12/03 11:19:10 $\n  * \n  * @author Chuck Burdick\n  * @author Michael A. Smith\n      */\n     public Set uniqueSet() {\n         if (uniqueSet == null) {\n-            uniqueSet = Collections.unmodifiableSet(map.keySet());\n+            uniqueSet = UnmodifiableSet.decorate(map.keySet());\n         }\n         return uniqueSet;\n     }\n--- a/src/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n+++ b/src/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/UnmodifiableBag.java,v 1.1 2003/11/16 00:05:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/UnmodifiableBag.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.bag;\n \n+import java.util.Collection;\n+import java.util.Iterator;\n import java.util.Set;\n \n import org.apache.commons.collections.Bag;\n import org.apache.commons.collections.Unmodifiable;\n-import org.apache.commons.collections.collection.UnmodifiableCollection;\n+import org.apache.commons.collections.iterators.UnmodifiableIterator;\n import org.apache.commons.collections.set.UnmodifiableSet;\n \n /**\n  * Decorates another <code>Bag</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:43 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiableBag extends UnmodifiableCollection implements Bag {\n+public class UnmodifiableBag extends AbstractBagDecorator implements Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable bag.\n         super(bag);\n     }\n \n-    /**\n-     * Gets the bag being decorated.\n-     * \n-     * @return the decorated bag\n-     */\n-    protected Bag getBag() {\n-        return (Bag) getCollection();\n+    //-----------------------------------------------------------------------\n+    public Iterator iterator() {\n+        return UnmodifiableIterator.decorate(getCollection().iterator());\n+    }\n+\n+    public boolean add(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean remove(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n     }\n \n     //-----------------------------------------------------------------------\n-    public boolean add(Object o, int count) {\n+    public boolean add(Object object, int count) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public boolean remove(Object o, int count) {\n+    public boolean remove(Object object, int count) {\n         throw new UnsupportedOperationException();\n     }\n \n         return UnmodifiableSet.decorate(set);\n     }\n \n-    public int getCount(Object o) {\n-        return getBag().getCount(o);\n-    }\n-    \n }\n--- a/src/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java,v 1.1 2003/11/16 00:05:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.bag;\n \n-import java.util.Comparator;\n+import java.util.Collection;\n+import java.util.Iterator;\n \n import org.apache.commons.collections.SortedBag;\n import org.apache.commons.collections.Unmodifiable;\n+import org.apache.commons.collections.iterators.UnmodifiableIterator;\n \n /**\n  * Decorates another <code>SortedBag</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:43 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiableSortedBag extends UnmodifiableBag implements SortedBag {\n+public class UnmodifiableSortedBag extends AbstractSortedBagDecorator implements Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable bag.\n         super(bag);\n     }\n \n-    /**\n-     * Gets the bag being decorated.\n-     * \n-     * @return the decorated bag\n-     */\n-    protected SortedBag getSortedBag() {\n-        return (SortedBag) getCollection();\n+    //-----------------------------------------------------------------------\n+    public Iterator iterator() {\n+        return UnmodifiableIterator.decorate(getCollection().iterator());\n     }\n \n-    //-----------------------------------------------------------------------\n-    public Object first() {\n-        return getSortedBag().first();\n+    public boolean add(Object object) {\n+        throw new UnsupportedOperationException();\n     }\n \n-    public Object last() {\n-        return getSortedBag().last();\n+    public boolean addAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n     }\n \n-    public Comparator comparator() {\n-        return getSortedBag().comparator();\n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean remove(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n     }\n \n }\n--- a/src/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.buffer;\n \n+import java.util.Collection;\n+import java.util.Iterator;\n+\n import org.apache.commons.collections.Buffer;\n import org.apache.commons.collections.Unmodifiable;\n-import org.apache.commons.collections.collection.UnmodifiableCollection;\n+import org.apache.commons.collections.iterators.UnmodifiableIterator;\n \n /**\n  * Decorates another <code>Buffer</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiableBuffer extends UnmodifiableCollection implements Buffer {\n+public class UnmodifiableBuffer extends AbstractBufferDecorator implements Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable buffer.\n         super(buffer);\n     }\n \n-    /**\n-     * Gets the buffer being decorated.\n-     * \n-     * @return the decorated buffer\n-     */\n-    protected Buffer getBuffer() {\n-        return (Buffer) getCollection();\n+    //-----------------------------------------------------------------------\n+    public Iterator iterator() {\n+        return UnmodifiableIterator.decorate(getCollection().iterator());\n+    }\n+\n+    public boolean add(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean remove(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n     }\n \n     //-----------------------------------------------------------------------\n-    public Object get() {\n-        return getBuffer().get();\n-    }\n-\n     public Object remove() {\n         throw new UnsupportedOperationException();\n     }\n--- a/src/java/org/apache/commons/collections/buffer/UnmodifiablePriorityQueue.java\n+++ b/src/java/org/apache/commons/collections/buffer/UnmodifiablePriorityQueue.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/Attic/UnmodifiablePriorityQueue.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/Attic/UnmodifiablePriorityQueue.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.NoSuchElementException;\n \n import org.apache.commons.collections.PriorityQueue;\n+import org.apache.commons.collections.Unmodifiable;\n \n /**\n  * <code>UnmodifiablePriorityQueue</code> decorates another <code>PriorityQueue</code>\n  * to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiablePriorityQueue implements PriorityQueue {\n+public class UnmodifiablePriorityQueue implements PriorityQueue, Unmodifiable {\n \n     /** The priority queue to decorate */\n     protected final PriorityQueue priorityQueue;\n      * @throws IllegalArgumentException if priority queue is null\n      */\n     public static PriorityQueue decorate(PriorityQueue priorityQueue) {\n+        if (priorityQueue instanceof Unmodifiable) {\n+            return priorityQueue;\n+        }\n         return new UnmodifiablePriorityQueue(priorityQueue);\n     }\n     \n+    //-----------------------------------------------------------------------\n     /**\n      * Constructs a new synchronized priority queue.\n      *\n         this.priorityQueue = priorityQueue;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Clear all elements from queue - Unsupported as unmodifiable.\n      */\n--- a/src/java/org/apache/commons/collections/collection/UnmodifiableCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/UnmodifiableCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/UnmodifiableCollection.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/UnmodifiableCollection.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Collection;\n import java.util.Iterator;\n \n-import org.apache.commons.collections.IteratorUtils;\n import org.apache.commons.collections.Unmodifiable;\n+import org.apache.commons.collections.iterators.UnmodifiableIterator;\n \n /**\n  * Decorates another <code>Collection</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n  * \n  * @author Stephen Colebourne\n  */\n     }\n \n     //-----------------------------------------------------------------------\n-    /**\n-     * Override as method unsupported.\n-     * @throws UnsupportedOperationException\n-     */\n+    public Iterator iterator() {\n+        return UnmodifiableIterator.decorate(getCollection().iterator());\n+    }\n+\n     public boolean add(Object object) {\n         throw new UnsupportedOperationException();\n     }\n \n-    /**\n-     * Override as method unsupported.\n-     * @throws UnsupportedOperationException\n-     */\n     public boolean addAll(Collection coll) {\n         throw new UnsupportedOperationException();\n     }\n \n-    /**\n-     * Override as method unsupported.\n-     * @throws UnsupportedOperationException\n-     */\n     public void clear() {\n         throw new UnsupportedOperationException();\n     }\n \n-    /**\n-     * Override to return an unmodifiable iterator.\n-     * \n-     * @return unmodifiable iterator\n-     */\n-    public Iterator iterator() {\n-        return IteratorUtils.unmodifiableIterator(getCollection().iterator());\n-    }\n-\n-    /**\n-     * Override as method unsupported.\n-     * @throws UnsupportedOperationException\n-     */\n     public boolean remove(Object object) {\n         throw new UnsupportedOperationException();\n     }\n \n-    /**\n-     * Override as method unsupported.\n-     * @throws UnsupportedOperationException\n-     */\n     public boolean removeAll(Collection coll) {\n         throw new UnsupportedOperationException();\n     }\n \n-    /**\n-     * Override as method unsupported.\n-     * @throws UnsupportedOperationException\n-     */\n     public boolean retainAll(Collection coll) {\n         throw new UnsupportedOperationException();\n     }\n--- a/src/java/org/apache/commons/collections/list/UnmodifiableList.java\n+++ b/src/java/org/apache/commons/collections/list/UnmodifiableList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/UnmodifiableList.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/UnmodifiableList.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n package org.apache.commons.collections.list;\n \n import java.util.Collection;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n \n-import org.apache.commons.collections.IteratorUtils;\n import org.apache.commons.collections.Unmodifiable;\n-import org.apache.commons.collections.collection.UnmodifiableCollection;\n+import org.apache.commons.collections.iterators.UnmodifiableIterator;\n+import org.apache.commons.collections.iterators.UnmodifiableListIterator;\n \n /**\n  * Decorates another <code>List</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiableList extends UnmodifiableCollection implements List {\n+public class UnmodifiableList extends AbstractListDecorator implements Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable list.\n     }\n \n     //-----------------------------------------------------------------------\n-    public void add(int index, Object object) {\n+    public Iterator iterator() {\n+        return UnmodifiableIterator.decorate(getCollection().iterator());\n+    }\n+\n+    public boolean add(Object object) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public boolean addAll(int index, Collection coll) {\n+    public boolean addAll(Collection coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean remove(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public Object get(int index) {\n         return getList().get(index);\n     }\n     }\n \n     public ListIterator listIterator() {\n-        return IteratorUtils.unmodifiableListIterator(getList().listIterator());\n+        return UnmodifiableListIterator.decorate(getList().listIterator());\n     }\n \n     public ListIterator listIterator(int index) {\n-        return IteratorUtils.unmodifiableListIterator(getList().listIterator(index));\n+        return UnmodifiableListIterator.decorate(getList().listIterator(index));\n+    }\n+\n+    public void add(int index, Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean addAll(int index, Collection coll) {\n+        throw new UnsupportedOperationException();\n     }\n \n     public Object remove(int index) {\n--- a/src/java/org/apache/commons/collections/set/UnmodifiableSet.java\n+++ b/src/java/org/apache/commons/collections/set/UnmodifiableSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/UnmodifiableSet.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/UnmodifiableSet.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.set;\n \n+import java.util.Collection;\n+import java.util.Iterator;\n import java.util.Set;\n \n import org.apache.commons.collections.Unmodifiable;\n-import org.apache.commons.collections.collection.UnmodifiableCollection;\n+import org.apache.commons.collections.iterators.UnmodifiableIterator;\n \n /**\n  * Decorates another <code>Set</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiableSet extends UnmodifiableCollection implements Set {\n+public class UnmodifiableSet extends AbstractSetDecorator implements Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable set.\n         super(set);\n     }\n \n-    /**\n-     * Gets the set being decorated.\n-     * \n-     * @return the decorated set\n-     */\n-    protected Set getSet() {\n-        return (Set) getCollection();\n+    //-----------------------------------------------------------------------\n+    public Iterator iterator() {\n+        return UnmodifiableIterator.decorate(getCollection().iterator());\n+    }\n+\n+    public boolean add(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean remove(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n     }\n \n }\n--- a/src/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n+++ b/src/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.set;\n \n-import java.util.Comparator;\n+import java.util.Collection;\n+import java.util.Iterator;\n import java.util.SortedSet;\n \n import org.apache.commons.collections.Unmodifiable;\n+import org.apache.commons.collections.iterators.UnmodifiableIterator;\n \n /**\n  * Decorates another <code>SortedSet</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiableSortedSet extends UnmodifiableSet implements SortedSet {\n+public class UnmodifiableSortedSet extends AbstractSortedSetDecorator implements Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable set.\n         super(set);\n     }\n \n-    /**\n-     * Gets the set being decorated.\n-     * \n-     * @return the decorated set\n-     */\n-    protected SortedSet getSortedSet() {\n-        return (SortedSet) getCollection();\n+    //-----------------------------------------------------------------------\n+    public Iterator iterator() {\n+        return UnmodifiableIterator.decorate(getCollection().iterator());\n+    }\n+\n+    public boolean add(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean remove(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n     }\n \n     //-----------------------------------------------------------------------\n         return new UnmodifiableSortedSet(sub);\n     }\n \n-    public Object first() {\n-        return getSortedSet().first();\n-    }\n-\n-    public Object last() {\n-        return getSortedSet().last();\n-    }\n-\n-    public Comparator comparator() {\n-        return getSortedSet().comparator();\n-    }\n-\n }\n--- a/src/test/org/apache/commons/collections/collection/TestAll.java\n+++ b/src/test/org/apache/commons/collections/collection/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/TestAll.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/TestAll.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestCompositeCollection.suite());\n         suite.addTest(TestPredicatedCollection.suite());\n         suite.addTest(TestTransformedCollection.suite());\n+        suite.addTest(TestUnmodifiableCollection.suite());\n         \n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/collection/TestUnmodifiableCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/TestUnmodifiableCollection.java,v 1.1 2003/12/03 11:19:10 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.collection;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Extension of {@link AbstractTestCollection} for exercising the \n+ * {@link UnmodifiableCollection} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/03 11:19:10 $\n+ * \n+ * @author Phil Steitz\n+ * @author Stephen Colebourne\n+ */\n+public class TestUnmodifiableCollection extends AbstractTestCollection {\n+    \n+    public TestUnmodifiableCollection(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestUnmodifiableCollection.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestUnmodifiableCollection.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    public Collection makeCollection() {\n+        return UnmodifiableCollection.decorate(new ArrayList());\n+    }\n+    \n+    public Collection makeFullCollection() {\n+        List list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return UnmodifiableCollection.decorate(list);\n+    }\n+    \n+    public Collection makeConfirmedCollection() {\n+        ArrayList list = new ArrayList();\n+        return list;\n+    }\n+\n+    public Collection makeConfirmedFullCollection() {\n+        ArrayList list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+\n+    public boolean isAddSupported() {\n+        return false;\n+    }\n+    \n+    public boolean isRemoveSupported() {\n+        return false;\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/list/TestUnmodifiableList.java\n+++ b/src/test/org/apache/commons/collections/list/TestUnmodifiableList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestUnmodifiableList.java,v 1.3 2003/11/18 22:37:14 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestUnmodifiableList.java,v 1.4 2003/12/03 11:19:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.map.TestPredicatedSortedMap;\n-\n /**\n  * Extension of {@link AbstractTestList} for exercising the \n  * {@link UnmodifiableList} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:14 $\n+ * @version $Revision: 1.4 $ $Date: 2003/12/03 11:19:10 $\n  * \n  * @author Phil Steitz\n  */\n-public class TestUnmodifiableList extends AbstractTestList{\n+public class TestUnmodifiableList extends AbstractTestList {\n     \n     public TestUnmodifiableList(String testName) {\n         super(testName);\n     }\n     \n     public static void main(String args[]) {\n-        String[] testCaseName = { TestPredicatedSortedMap.class.getName()};\n+        String[] testCaseName = { TestUnmodifiableList.class.getName()};\n         junit.textui.TestRunner.main(testCaseName);\n     }\n-    \n- //-------------------------------------------------------------------       \n+\n+    //-----------------------------------------------------------------------    \n     public List makeEmptyList() {\n         return UnmodifiableList.decorate(new ArrayList());\n     }\n     \n     public boolean isRemoveSupported() {\n         return false;\n-    }   \n-//--------------------------------------------------------------------   \n+    }\n+    \n+    //-----------------------------------------------------------------------    \n     protected UnmodifiableList list = null;\n     protected ArrayList array = null;\n     \n             // expected\n         }\n     }\n-}\n+}\n--- a/src/test/org/apache/commons/collections/set/AbstractTestSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/AbstractTestSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/AbstractTestSortedSet.java,v 1.2 2003/11/18 22:37:17 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/AbstractTestSortedSet.java,v 1.3 2003/12/03 11:19:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * elements may be added; see {@link AbstractTestCollection} for more details.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:17 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/03 11:19:10 $\n  * \n  * @author Stephen Colebourne\n  * @author Dieter Wimberger\n             //System.out.println(new TreeSet(Arrays.asList(m_FullElements)));\n             //System.out.println(new TreeSet(Arrays.asList(m_OtherElements)));\n \n-        } //TestSortedSetSubSet\n+        }\n \n         public boolean isNullSupported() {\n             return AbstractTestSortedSet.this.isNullSupported();\n-        } //useNullValue\n+        }\n+        public boolean isAddSupported() {\n+            return AbstractTestSortedSet.this.isAddSupported();\n+        }\n+        public boolean isRemoveSupported() {\n+            return AbstractTestSortedSet.this.isRemoveSupported();\n+        }\n+        public boolean isFailFastSupported() {\n+            return AbstractTestSortedSet.this.isFailFastSupported();\n+        }\n \n         public Object[] getFullElements() {\n-            //System.out.println(\"getFullElements()\");\n             return m_FullElements;\n         }\n-\n         public Object[] getOtherElements() {\n             return m_OtherElements;\n         }\n                 default :\n                     return null;\n             }\n-        } //getSubSet\n+        }\n \n         public Set makeEmptySet() {\n-            SortedSet s = (SortedSet) AbstractTestSortedSet.this.makeFullSet();\n-            s = getSubSet(s);\n-            s.clear();\n-            return s;\n-        } //makeEmptySet\n+            SortedSet s = (SortedSet) AbstractTestSortedSet.this.makeEmptySet();\n+            return getSubSet(s);\n+        }\n \n         public Set makeFullSet() {\n             SortedSet s = (SortedSet) AbstractTestSortedSet.this.makeFullCollection();\n             return getSubSet(s);\n-        } //makeFullSet\n-\n-        public void resetFull() {\n-            AbstractTestSortedSet.this.resetFull();\n-            TestSortedSetSubSet.this.confirmed = getSubSet((SortedSet) AbstractTestSortedSet.this.confirmed);\n-            TestSortedSetSubSet.this.collection = getSubSet((SortedSet) AbstractTestSortedSet.this.collection);\n-        }\n-\n-        public void resetEmpty() {\n-            TestSortedSetSubSet.this.resetFull();\n-            TestSortedSetSubSet.this.confirmed.clear();\n-            TestSortedSetSubSet.this.collection.clear();\n         }\n \n         public BulkTest bulkTestSortedSetSubSet() {\n-            //Override returning null to prevent endless\n-            //loop of bulk tests\n-            return null;\n-        } //bulkTestSortedSetSubSet\n-\n+            return null;  // prevent infinite recursion\n+        }\n         public BulkTest bulkTestSortedSetHeadSet() {\n-            return null;\n-        }\n-\n+            return null;  // prevent infinite recursion\n+        }\n         public BulkTest bulkTestSortedSetTailSet() {\n-            return null;\n+            return null;  // prevent infinite recursion\n         }\n \n         static final int TYPE_SUBSET = 0;\n--- a/src/test/org/apache/commons/collections/set/TestAll.java\n+++ b/src/test/org/apache/commons/collections/set/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestAll.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestAll.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestTransformedSet.suite());\n         suite.addTest(TestTransformedSortedSet.suite());\n         suite.addTest(TestTypedSortedSet.suite());\n+        suite.addTest(TestUnmodifiableSet.suite());\n         suite.addTest(TestUnmodifiableSortedSet.suite());\n         \n         return suite;\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/TestUnmodifiableSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestUnmodifiableSet.java,v 1.1 2003/12/03 11:19:10 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * Extension of {@link AbstractTestSet} for exercising the \n+ * {@link UnmodifiableSet} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/03 11:19:10 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestUnmodifiableSet extends AbstractTestSet{\n+    \n+    public TestUnmodifiableSet(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestUnmodifiableSet.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestUnmodifiableSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    //-------------------------------------------------------------------  \n+    public Set makeEmptySet() {\n+        return UnmodifiableSet.decorate(new HashSet());\n+    }\n+    \n+    public Set makeFullSet() {\n+        HashSet set = new HashSet();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return UnmodifiableSet.decorate(set);\n+    }\n+    \n+    public boolean isAddSupported() {\n+        return false;\n+    }\n+    \n+    public boolean isRemoveSupported() {\n+        return false;\n+    }\n+           \n+}\n--- a/src/test/org/apache/commons/collections/set/TestUnmodifiableSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestUnmodifiableSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestUnmodifiableSortedSet.java,v 1.3 2003/11/18 22:37:17 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestUnmodifiableSortedSet.java,v 1.4 2003/12/03 11:19:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.TreeSet;\n \n import junit.framework.Test;\n-import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.BulkTest;\n \n /**\n  * Extension of {@link AbstractTestSortedSet} for exercising the \n  * {@link UnmodifiableSortedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:17 $\n+ * @version $Revision: 1.4 $ $Date: 2003/12/03 11:19:10 $\n  * \n  * @author Phil Steitz\n  */\n     }\n     \n     public static Test suite() {\n-        // Can't run bulk tests in AbstractTestSet -- subset tests modify set\n-        return new TestSuite(TestUnmodifiableSortedSet.class);\n+        return BulkTest.makeSuite(TestUnmodifiableSortedSet.class);\n     }\n     \n     public static void main(String args[]) {", "timestamp": 1070450350, "metainfo": ""}