{"sha": "2a90a1d77264b8581b8e6a064c06c4906c62a2d1", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r555925 | skestle | 2007-07-13 03:39:24 -0700 (Fri, 13 Jul 2007) | 2 lines          Added Edwin Tellman's patch for COLLECTIONS-243.       It all seems pretty reasonable, and it should all be checked again as the project is worked through     ------------------------------------------------------------------------     r471166 | scolebourne | 2006-11-04 03:33:22 -0800 (Sat, 04 Nov 2006) | 1 line          Removed Typed* containers such as TypedList and TypedMap as generics now provides type safety     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/java/org/apache/commons/collections/SetUtils.java\n \n import java.util.Collection;\n import java.util.Collections;\n-import java.util.Iterator;\n import java.util.Set;\n import java.util.SortedSet;\n import java.util.TreeSet;\n import org.apache.commons.collections.set.SynchronizedSortedSet;\n import org.apache.commons.collections.set.TransformedSet;\n import org.apache.commons.collections.set.TransformedSortedSet;\n-import org.apache.commons.collections.set.TypedSet;\n-import org.apache.commons.collections.set.TypedSortedSet;\n import org.apache.commons.collections.set.UnmodifiableSet;\n import org.apache.commons.collections.set.UnmodifiableSortedSet;\n \n      * This uses the {@link Collections} implementation \n      * and is provided for completeness.\n      */\n-    public static final Set EMPTY_SET = Collections.EMPTY_SET;\n+    public static final Set<?> EMPTY_SET = Collections.EMPTY_SET;\n+\n+    /**\n+     * Get a typed empty unmodifiable Set.\n+     * @param <E>\n+     * @return Set<E>\n+     */\n+    public static <E> Set<E> emptySet() {\n+        return Collections.<E>emptySet();\n+    }\n+\n     /**\n      * An empty unmodifiable sorted set.\n      * This is not provided in the JDK.\n      */\n-    public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.decorate(new TreeSet());\n+    public static final SortedSet<?> EMPTY_SORTED_SET = UnmodifiableSortedSet.decorate(new TreeSet<Object>());\n+\n+    /**\n+     * Get a typed empty unmodifiable sorted set.\n+     * @param <E>\n+     * @return SortedSet<E>\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <E> SortedSet<E> emptySortedSet() {\n+        return (SortedSet<E>) EMPTY_SORTED_SET;\n+    }\n \n     /**\n      * <code>SetUtils</code> should not normally be instantiated.\n      * @param set2  the second set, may be null\n      * @return whether the sets are equal by value comparison\n      */\n-    public static boolean isEqualSet(final Collection set1, final Collection set2) {\n+    public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2) {\n         if (set1 == set2) {\n             return true;\n         }\n      * @param set  the set to calculate the hash code for, may be null\n      * @return the hash code\n      */\n-    public static int hashCodeForSet(final Collection set) {\n+    public static <T> int hashCodeForSet(final Collection<T> set) {\n         if (set == null) {\n             return 0;\n         }\n+\n         int hashCode = 0;\n-        Iterator it = set.iterator();\n-        Object obj = null;\n-\n-        while (it.hasNext()) {\n-            obj = it.next();\n+        for (T obj : set) {\n             if (obj != null) {\n                 hashCode += obj.hashCode();\n             }\n      * @return a synchronized set backed by the given set\n      * @throws IllegalArgumentException  if the set is null\n      */\n-    public static Set synchronizedSet(Set set) {\n+    public static <T> Set<T> synchronizedSet(Set<T> set) {\n         return SynchronizedSet.decorate(set);\n     }\n \n      * @return an unmodifiable set backed by the given set\n      * @throws IllegalArgumentException  if the set is null\n      */\n-    public static Set unmodifiableSet(Set set) {\n+    public static <E> Set<E> unmodifiableSet(Set<E> set) {\n         return UnmodifiableSet.decorate(set);\n     }\n \n      * @return a predicated set backed by the given set\n      * @throws IllegalArgumentException  if the Set or Predicate is null\n      */\n-    public static Set predicatedSet(Set set, Predicate predicate) {\n+    public static <T> Set<T> predicatedSet(Set<T> set, Predicate<? super T> predicate) {\n         return PredicatedSet.decorate(set, predicate);\n     }\n \n-    /**\n-     * Returns a typed set backed by the given set.\n-     * <p>\n-     * Only objects of the specified type can be added to the set.\n-     * \n-     * @param set  the set to limit to a specific type, must not be null\n-     * @param type  the type of objects which may be added to the set\n-     * @return a typed set backed by the specified set\n-     */\n-    public static Set typedSet(Set set, Class type) {\n-        return TypedSet.decorate(set, type);\n-    }\n-    \n     /**\n      * Returns a transformed set backed by the given set.\n      * <p>\n      * @return a transformed set backed by the given set\n      * @throws IllegalArgumentException  if the Set or Transformer is null\n      */\n-    public static Set transformedSet(Set set, Transformer transformer) {\n+    public static <E> Set<E> transformedSet(Set<E> set, Transformer<? super E, ? extends E> transformer) {\n         return TransformedSet.decorate(set, transformer);\n     }\n     \n      * @return an ordered set backed by the given set\n      * @throws IllegalArgumentException  if the Set is null\n      */\n-    public static Set orderedSet(Set set) {\n+    public static <E> Set<E> orderedSet(Set<E> set) {\n         return ListOrderedSet.decorate(set);\n     }\n     \n      * @return a synchronized set backed by the given set\n      * @throws IllegalArgumentException  if the set is null\n      */\n-    public static SortedSet synchronizedSortedSet(SortedSet set) {\n+    public static <T> SortedSet<T> synchronizedSortedSet(SortedSet<T> set) {\n         return SynchronizedSortedSet.decorate(set);\n     }\n \n      * @return an unmodifiable set backed by the given set\n      * @throws IllegalArgumentException  if the set is null\n      */\n-    public static SortedSet unmodifiableSortedSet(SortedSet set) {\n+    public static <T> SortedSet<T> unmodifiableSortedSet(SortedSet<T> set) {\n         return UnmodifiableSortedSet.decorate(set);\n     }\n \n      * @return a predicated sorted set backed by the given sorted set\n      * @throws IllegalArgumentException  if the Set or Predicate is null\n      */\n-    public static SortedSet predicatedSortedSet(SortedSet set, Predicate predicate) {\n+    public static <T> SortedSet<T> predicatedSortedSet(SortedSet<T> set, Predicate<? super T> predicate) {\n         return PredicatedSortedSet.decorate(set, predicate);\n     }\n \n-    /**\n-     * Returns a typed sorted set backed by the given set.\n-     * <p>\n-     * Only objects of the specified type can be added to the set.\n-     * \n-     * @param set  the set to limit to a specific type, must not be null\n-     * @param type  the type of objects which may be added to the set\n-     * @return a typed set backed by the specified set\n-     */\n-    public static SortedSet typedSortedSet(SortedSet set, Class type) {\n-        return TypedSortedSet.decorate(set, type);\n-    }\n-    \n     /**\n      * Returns a transformed sorted set backed by the given set.\n      * <p>\n      * @return a transformed set backed by the given set\n      * @throws IllegalArgumentException  if the Set or Transformer is null\n      */\n-    public static SortedSet transformedSortedSet(SortedSet set, Transformer transformer) {\n+    public static <E> SortedSet<E> transformedSortedSet(SortedSet<E> set, Transformer<? super E, ? extends E> transformer) {\n         return TransformedSortedSet.decorate(set, transformer);\n     }\n     ", "timestamp": 1252994207, "metainfo": ""}