{"sha": "c55fe26ab94fb11b4d1d867b725aee3fa510e66c", "log": "added separate methods for setting/changing sort order on a Comparator in the chain   ", "commit": "\n--- a/src/java/org/apache/commons/collections/comparators/ComparatorChain.java\n+++ b/src/java/org/apache/commons/collections/comparators/ComparatorChain.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/ComparatorChain.java,v 1.1 2002/03/01 23:29:24 morgand Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/03/01 23:29:24 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/ComparatorChain.java,v 1.2 2002/03/01 23:40:43 morgand Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/03/01 23:40:43 $\n  *\n  * ====================================================================\n  *\n         }\n     }\n \n+    public void setForwardSort(int index) {\n+        checkLocked();\n+        orderingBits.clear(index);\n+    }\n+\n+    public void setReverseSort(int index) {\n+        checkLocked();\n+        orderingBits.set(index);\n+    }\n+\n     public void checkLocked() {\n         if (isLocked == true) {\n             throw new UnsupportedOperationException(\"Comparator ordering cannot be changed after the first comparison is performed\");", "timestamp": 1015026043, "metainfo": ""}