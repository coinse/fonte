{"sha": "f9588d4debbe6651633483f61ea1af607bd097b4", "log": "Avoid object creation in predicate factory methods bug 38703, from Matt Benson  ", "commit": "\n--- a/src/java/org/apache/commons/collections/functors/AllPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AllPredicate.java\n      */\n     public static Predicate getInstance(Predicate[] predicates) {\n         FunctorUtils.validate(predicates);\n+        if (predicates.length == 0) {\n+            return TruePredicate.INSTANCE;\n+        }\n+        if (predicates.length == 1) {\n+            return predicates[0];\n+        }\n         predicates = FunctorUtils.copy(predicates);\n         return new AllPredicate(predicates);\n     }\n      */\n     public static Predicate getInstance(Collection predicates) {\n         Predicate[] preds = FunctorUtils.validate(predicates);\n+        if (preds.length == 0) {\n+            return TruePredicate.INSTANCE;\n+        }\n+        if (preds.length == 1) {\n+            return preds[0];\n+        }\n         return new AllPredicate(preds);\n     }\n \n--- a/src/java/org/apache/commons/collections/functors/AnyPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AnyPredicate.java\n      */\n     public static Predicate getInstance(Predicate[] predicates) {\n         FunctorUtils.validate(predicates);\n-        predicates = FunctorUtils.copy(predicates);\n-        return new AnyPredicate(predicates);\n+        if (predicates.length == 0) {\n+            return FalsePredicate.INSTANCE;\n+        }\n+        if (predicates.length == 1) {\n+            return predicates[0];\n+        }\n+        return new AnyPredicate(FunctorUtils.copy(predicates));\n     }\n \n     /**\n      */\n     public static Predicate getInstance(Collection predicates) {\n         Predicate[] preds = FunctorUtils.validate(predicates);\n+        if (preds.length == 0) {\n+            return FalsePredicate.INSTANCE;\n+        }\n+        if (preds.length == 1) {\n+            return preds[0];\n+        }\n         return new AnyPredicate(preds);\n     }\n \n--- a/src/java/org/apache/commons/collections/functors/NonePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NonePredicate.java\n      */\n     public static Predicate getInstance(Predicate[] predicates) {\n         FunctorUtils.validate(predicates);\n+        if (predicates.length == 0) {\n+            return TruePredicate.INSTANCE;\n+        }\n         predicates = FunctorUtils.copy(predicates);\n         return new NonePredicate(predicates);\n     }\n      */\n     public static Predicate getInstance(Collection predicates) {\n         Predicate[] preds = FunctorUtils.validate(predicates);\n+        if (preds.length == 0) {\n+            return TruePredicate.INSTANCE;\n+        }\n         return new NonePredicate(preds);\n     }\n \n--- a/src/java/org/apache/commons/collections/functors/OnePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/OnePredicate.java\n      */\n     public static Predicate getInstance(Predicate[] predicates) {\n         FunctorUtils.validate(predicates);\n+        if (predicates.length == 0) {\n+            return FalsePredicate.INSTANCE;\n+        }\n+        if (predicates.length == 1) {\n+            return predicates[0];\n+        }\n         predicates = FunctorUtils.copy(predicates);\n         return new OnePredicate(predicates);\n     }\n--- a/src/test/org/apache/commons/collections/TestPredicateUtils.java\n+++ b/src/test/org/apache/commons/collections/TestPredicateUtils.java\n     //------------------------------------------------------------------\n \n     public void testAllPredicate() {\n+        assertTrue(PredicateUtils.allPredicate(\n+            new Predicate[] {}).evaluate(null));\n         assertEquals(true, PredicateUtils.allPredicate(new Predicate[] {\n             PredicateUtils.truePredicate(), PredicateUtils.truePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n         assertEquals(false, PredicateUtils.allPredicate(new Predicate[] {\n     //------------------------------------------------------------------\n \n     public void testAnyPredicate() {\n+        assertFalse(PredicateUtils.anyPredicate(\n+            new Predicate[] {}).evaluate(null));\n         assertEquals(true, PredicateUtils.anyPredicate(new Predicate[] {\n             PredicateUtils.truePredicate(), PredicateUtils.truePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n         assertEquals(true, PredicateUtils.anyPredicate(new Predicate[] {\n     //------------------------------------------------------------------\n \n     public void testOnePredicate() {\n+        assertFalse(PredicateUtils.onePredicate(\n+            new Predicate[] {}).evaluate(null));\n         assertEquals(false, PredicateUtils.onePredicate(new Predicate[] {\n             PredicateUtils.truePredicate(), PredicateUtils.truePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n         assertEquals(false, PredicateUtils.onePredicate(new Predicate[] {\n     //------------------------------------------------------------------\n \n     public void testNonePredicate() {\n+        assertTrue(PredicateUtils.nonePredicate(\n+            new Predicate[] {}).evaluate(null));\n         assertEquals(false, PredicateUtils.nonePredicate(new Predicate[] {\n             PredicateUtils.truePredicate(), PredicateUtils.truePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n         assertEquals(false, PredicateUtils.nonePredicate(new Predicate[] {", "timestamp": 1141326156, "metainfo": ""}