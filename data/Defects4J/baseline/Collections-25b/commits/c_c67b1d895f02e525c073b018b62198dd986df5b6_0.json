{"sha": "c67b1d895f02e525c073b018b62198dd986df5b6", "log": "Fixing accidentally checked in code.  ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n \n /**\n  * Tests for MapUtils.\n- * \n+ *\n  * @version $Revision$ $Date$\n- * \n+ *\n  * @author Stephen Colebourne\n  * @author Arun Mammen Thomas\n  * @author Max Rydahl Andersen\n             fail(\"Expecting IllegalArgumentException for null map.\");\n         } catch (IllegalArgumentException e) {\n             // expected\n-        }     \n+        }\n     }\n \n     // Since a typed map is a predicated map, I copied the tests for predicated map\n     public void testTypedMapIllegalPut() {\n         final Map map = MapUtils.typedMap(new HashMap(), String.class, String.class);\n-        \n+\n         try {\n             map.put(\"Hi\", new Integer(3));\n             fail(\"Illegal value should raise IllegalArgument\");\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n-    \n-    }\n-    \n+\n+    }\n+\n     public BulkTest bulkTestTypedMap() {\n         return new TestPredicatedMap(\"\") {\n             public boolean isAllowNullKey() {\n \n     public void testLazyMapFactory() {\n         Factory factory = FactoryUtils.constantFactory(new Integer(5));\n-        Map map = MapUtils.lazyMap(new HashMap(), factory);       \n-        assertTrue(map instanceof LazyMap);        \n+        Map map = MapUtils.lazyMap(new HashMap(), factory);\n+        assertTrue(map instanceof LazyMap);\n         try {\n             map = MapUtils.lazyMap(new HashMap(), (Factory) null);\n             fail(\"Expecting IllegalArgumentException for null factory\");\n             // expected\n         }\n         Transformer transformer = TransformerUtils.asTransformer(factory);\n-        map = MapUtils.lazyMap(new HashMap(), transformer);       \n-        assertTrue(map instanceof LazyMap);  \n+        map = MapUtils.lazyMap(new HashMap(), transformer);\n+        assertTrue(map instanceof LazyMap);\n          try {\n             map = MapUtils.lazyMap(new HashMap(), (Transformer) null);\n             fail(\"Expecting IllegalArgumentException for null transformer\");\n             fail(\"Expecting IllegalArgumentException for null map\");\n         } catch (IllegalArgumentException e) {\n             // expected\n-        }              \n+        }\n     }\n \n     public void testLazyMapTransformer() {\n         in.put( \"3\" , \"C\" );\n         in.put( \"4\" , \"D\" );\n         in.put( \"5\" , \"E\" );\n-    \n+\n         final Set inKeySet = new HashSet( in.keySet() );\n         final Set inValSet = new HashSet( in.values() );\n-        \n+\n         final Map out =  MapUtils.invertMap(in);\n \n         final Set outKeySet = new HashSet( out.keySet() );\n         final Set outValSet = new HashSet( out.values() );\n-        \n+\n         assertTrue( inKeySet.equals( outValSet ));\n         assertTrue( inValSet.equals( outKeySet ));\n-        \n+\n         assertEquals( out.get(\"A\"), \"1\" );\n         assertEquals( out.get(\"B\"), \"2\" );\n         assertEquals( out.get(\"C\"), \"3\" );\n             MapUtils.putAll(null, new Object[0]);\n             fail();\n         } catch (NullPointerException ex) {}\n-        \n+\n         Map test = MapUtils.putAll(new HashMap(), new String[0]);\n         assertEquals(0, test.size());\n-        \n+\n         // sub array\n         test = MapUtils.putAll(new HashMap(), new String[][] {\n             {\"RED\", \"#FF0000\"},\n         assertEquals(true, test.containsKey(\"BLUE\"));\n         assertEquals(\"#0000FF\", test.get(\"BLUE\"));\n         assertEquals(3, test.size());\n-        \n+\n         try {\n             MapUtils.putAll(new HashMap(), new String[][] {\n                 {\"RED\", \"#FF0000\"},\n             });\n             fail();\n         } catch (IllegalArgumentException ex) {}\n-        \n+\n         try {\n             MapUtils.putAll(new HashMap(), new String[][] {\n                 {\"RED\", \"#FF0000\"},\n             });\n             fail();\n         } catch (IllegalArgumentException ex) {}\n-        \n+\n         try {\n             MapUtils.putAll(new HashMap(), new String[][] {\n                 {\"RED\", \"#FF0000\"},\n             });\n             fail();\n         } catch (IllegalArgumentException ex) {}\n-        \n+\n         // flat array\n         test = MapUtils.putAll(new HashMap(), new String[] {\n             \"RED\", \"#FF0000\",\n         assertEquals(true, test.containsKey(\"BLUE\"));\n         assertEquals(\"#0000FF\", test.get(\"BLUE\"));\n         assertEquals(3, test.size());\n-        \n+\n         test = MapUtils.putAll(new HashMap(), new String[] {\n             \"RED\", \"#FF0000\",\n             \"GREEN\", \"#00FF00\",\n         assertEquals(true, test.containsKey(\"BLUE\"));\n         assertEquals(\"#0000FF\", test.get(\"BLUE\"));\n         assertEquals(3, test.size());\n-        \n+\n         // map entry\n         test = MapUtils.putAll(new HashMap(), new Object[] {\n             new DefaultMapEntry(\"RED\", \"#FF0000\"),\n         assertEquals(true, test.containsKey(\"BLUE\"));\n         assertEquals(\"#0000FF\", test.get(\"BLUE\"));\n         assertEquals(3, test.size());\n-        \n+\n         // key value\n         test = MapUtils.putAll(new HashMap(), new Object[] {\n             new DefaultKeyValue(\"RED\", \"#FF0000\"),\n         in.put( \"3\" , \"C\" );\n         in.put( \"4\" , \"D\" );\n         in.put( \"5\" , \"E\" );\n-    \n+\n         ResourceBundle b = new ListResourceBundle() {\n             public Object[][] getContents() {\n                 final Object[][] contents = new Object[ in.size() ][2];\n                 return contents;\n             }\n         };\n-        \n-        final Map out = MapUtils.toMap(b); \n+\n+        final Map out = MapUtils.toMap(b);\n \n         assertTrue( in.equals(out));\n     }\n         outer.put( new Integer(0) , inner );\n         outer.put( new Integer(1) , \"A\");\n \n- \n-        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n-        final PrintStream outPrint = new PrintStream(out);\n-        \n+\n+        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        final PrintStream outPrint = new PrintStream(out);\n+\n         try {\n             MapUtils.debugPrint(outPrint, \"Print Map\", outer);\n         } catch (final ClassCastException e) {\n         outPrint.println(LABEL + \" = \" + String.valueOf((Object) null));\n         final String EXPECTED_OUT = out.toString();\n \n-        out.reset();            \n+        out.reset();\n \n         MapUtils.debugPrint(outPrint, LABEL, null);\n         assertEquals(EXPECTED_OUT, out.toString());\n-        \n-        out.reset();\n-        \n+\n+        out.reset();\n+\n         MapUtils.verbosePrint(outPrint, LABEL, null);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n         map.put( new Integer(2) , \"B\" );\n         map.put( new Integer(3) , \"C\" );\n         map.put( new Integer(4) , null );\n-        \n+\n         outPrint.println(\"{\");\n         outPrint.println(INDENT + \"2 = B\");\n         outPrint.println(INDENT + \"3 = C\");\n         MapUtils.verbosePrint(outPrint, null, map);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n-            \n+\n     public void testDebugPrintNullLabel() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n         map.put( new Integer(2) , \"B\" );\n         map.put( new Integer(3) , \"C\" );\n         map.put( new Integer(4) , null );\n-    \n+\n         outPrint.println(\"{\");\n         outPrint.println(INDENT + \"2 = B \" + String.class.getName());\n         outPrint.println(INDENT + \"3 = C \" + String.class.getName());\n         outPrint.println(\"} \" + TreeMap.class.getName());\n         final String EXPECTED_OUT = out.toString();\n         out.reset();\n-        \n+\n         MapUtils.debugPrint(outPrint, null, map);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n     public void testVerbosePrintNullLabelAndMap() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n-        \n+\n         outPrint.println(\"null\");\n         final String EXPECTED_OUT = out.toString();\n         out.reset();\n         } catch (NullPointerException expected) {\n         }\n     }\n-    \n+\n     public void testDebugPrintNullStream() {\n         try {\n             MapUtils.debugPrint(null, \"Map\", new HashMap());\n         } catch (NullPointerException expected) {\n         }\n     }\n-    \n+\n     public void testDebugPrintNullKey() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n \n         final Map map = new HashMap();\n         map.put( null , \"A\" );\n-    \n+\n         outPrint.println(\"{\");\n         outPrint.println(INDENT + \"null = A \" + String.class.getName());\n         outPrint.println(\"} \" + HashMap.class.getName());\n         final String EXPECTED_OUT = out.toString();\n         out.reset();\n-        \n+\n         MapUtils.debugPrint(outPrint, null, map);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n         final Map map = new HashMap();\n         map.put( null , \"A\" );\n-    \n+\n         outPrint.println(\"{\");\n         outPrint.println(INDENT + \"null = A\");\n         outPrint.println(\"}\");\n         final String EXPECTED_OUT = out.toString();\n         out.reset();\n-        \n+\n         MapUtils.verbosePrint(outPrint, null, map);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n         final Map map = new HashMap();\n         map.put( null , map );\n-    \n+\n         outPrint.println(\"{\");\n         outPrint.println(INDENT + \"null = (this Map) \" + HashMap.class.getName());\n         outPrint.println(\"} \" + HashMap.class.getName());\n         final String EXPECTED_OUT = out.toString();\n         out.reset();\n-        \n+\n         MapUtils.debugPrint(outPrint, null, map);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n         final Map map = new HashMap();\n         map.put( null , map );\n-    \n+\n         outPrint.println(\"{\");\n         outPrint.println(INDENT + \"null = (this Map)\");\n         outPrint.println(\"}\");\n         final String EXPECTED_OUT = out.toString();\n         out.reset();\n-        \n+\n         MapUtils.verbosePrint(outPrint, null, map);\n         assertEquals(EXPECTED_OUT, out.toString());\n-    }    \n+    }\n \n     public void testDebugPrintNullKeyToMap2() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final Map map2= new HashMap();\n         map.put( null , map2 );\n         map2.put( \"2\", \"B\" );\n-    \n+\n         outPrint.println(\"{\");\n         outPrint.println(INDENT + \"null = \");\n         outPrint.println(INDENT + \"{\");\n         outPrint.println(\"} \" + HashMap.class.getName());\n         final String EXPECTED_OUT = out.toString();\n         out.reset();\n-        \n+\n         MapUtils.debugPrint(outPrint, null, map);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n         final Map map2= new HashMap();\n         map.put( null , map2 );\n         map2.put( \"2\", \"B\" );\n-    \n+\n         outPrint.println(\"{\");\n         outPrint.println(INDENT + \"null = \");\n         outPrint.println(INDENT + \"{\");\n         outPrint.println(\"}\");\n         final String EXPECTED_OUT = out.toString();\n         out.reset();\n-        \n+\n         MapUtils.verbosePrint(outPrint, null, map);\n         assertEquals(EXPECTED_OUT, out.toString());\n-    }    \n+    }\n \n     public void testVerbosePrint() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n-        \n+\n         final String LABEL = \"Print Map\";\n         final String INDENT = \"    \";\n-        \n+\n         outPrint.println(LABEL + \" = \");\n         outPrint.println(\"{\");\n         outPrint.println(INDENT + \"0 = A\");\n         outPrint.println(INDENT + \"}\");\n         outPrint.println(INDENT + \"7 = (this Map)\");\n         outPrint.println(\"}\");\n-        \n-        final String EXPECTED_OUT = out.toString();\n-\n-        out.reset();            \n+\n+        final String EXPECTED_OUT = out.toString();\n+\n+        out.reset();\n \n         final Map inner = new TreeMap();  // treeMap guarantees order across JDKs for test\n         inner.put( new Integer(2) , \"B\" );\n     public void testDebugPrint() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n-        \n+\n         final String LABEL = \"Print Map\";\n         final String INDENT = \"    \";\n-        \n+\n         outPrint.println(LABEL + \" = \");\n         outPrint.println(\"{\");\n         outPrint.println(INDENT + \"0 = A \" + String.class.getName());\n         outPrint.println(INDENT + \"} \" + TreeMap.class.getName());\n         outPrint.println(INDENT + \"7 = (this Map) \" + TreeMap.class.getName());\n         outPrint.println(\"} \" + TreeMap.class.getName());\n-        \n-        final String EXPECTED_OUT = out.toString();\n-\n-        out.reset();            \n+\n+        final String EXPECTED_OUT = out.toString();\n+\n+        out.reset();\n \n         final Map inner = new TreeMap();  // treeMap guarantees order across JDKs for test\n         inner.put( new Integer(2) , \"B\" );\n \n         final String LABEL = \"Print Map\";\n         final String INDENT = \"    \";\n-        \n+\n \n         final Map grandfather = new TreeMap();// treeMap guarantees order across JDKs for test\n         final Map father = new TreeMap();\n         final Map son    = new TreeMap();\n-        \n+\n         grandfather.put( new Integer(0), \"A\" );\n         grandfather.put( new Integer(1), father );\n-        \n+\n         father.put( new Integer(2), \"B\" );\n         father.put( new Integer(3), grandfather);\n         father.put( new Integer(4), son);\n-        \n+\n         son.put( new Integer(5), \"C\");\n         son.put( new Integer(6), grandfather);\n         son.put( new Integer(7), father);\n-        \n+\n         outPrint.println(LABEL + \" = \");\n         outPrint.println(\"{\");\n         outPrint.println(INDENT + \"0 = A\");\n \n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n-    \n+\n     public void testDebugPrintSelfReference() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n-    \n+\n         final String LABEL = \"Print Map\";\n         final String INDENT = \"    \";\n-        \n-    \n+\n+\n         final Map grandfather = new TreeMap();// treeMap guarantees order across JDKs for test\n         final Map father = new TreeMap();\n         final Map son    = new TreeMap();\n-        \n+\n         grandfather.put( new Integer(0), \"A\" );\n         grandfather.put( new Integer(1), father );\n-        \n+\n         father.put( new Integer(2), \"B\" );\n         father.put( new Integer(3), grandfather);\n         father.put( new Integer(4), son);\n-        \n+\n         son.put( new Integer(5), \"C\");\n         son.put( new Integer(6), grandfather);\n         son.put( new Integer(7), father);\n-        \n+\n         outPrint.println(LABEL + \" = \");\n         outPrint.println(\"{\");\n         outPrint.println(INDENT + \"0 = A \" + String.class.getName());\n         outPrint.println(INDENT + INDENT + \"} \" + TreeMap.class.getName());\n         outPrint.println(INDENT + \"} \" + TreeMap.class.getName());\n         outPrint.println(\"} \" + TreeMap.class.getName());\n-    \n-        final String EXPECTED_OUT = out.toString();\n-    \n+\n+        final String EXPECTED_OUT = out.toString();\n+\n         out.reset();\n         MapUtils.debugPrint(outPrint, \"Print Map\", grandfather);\n-    \n-        assertEquals(EXPECTED_OUT, out.toString());\n-    }\n-    \n+\n+        assertEquals(EXPECTED_OUT, out.toString());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testIsEmptyWithEmptyMap() {\n         Map map = new HashMap();\n         assertEquals(false, MapUtils.isNotEmpty(map));\n     }\n \n-\n-    public void testPopulateMap() {\n-        Map map = new HashMap();\n-        \n-    }\n }", "timestamp": 1132803642, "metainfo": ""}