{"sha": "834641d84a6d8090b01455733bdfb4fc42deb70e", "log": "Add additional javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/collections/Closure.java\n+++ b/src/java/org/apache/commons/collections/Closure.java\n /**\n  * Defines a functor interface implemented by classes that do something.\n  * <p>\n- * A Closure represents a block of code which is executed from inside some\n- * block, function or iteration. It operates an input object.\n+ * A <code>Closure</code> represents a block of code which is executed from\n+ * inside some block, function or iteration. It operates an input object.\n+ * <p>\n+ * Standard implementations of common closures are provided by\n+ * {@link ClosureUtils}. These include method invokation and for/while loops.\n  *  \n  * @since Commons Collections 1.0\n- * @version $Revision: 1.10 $ $Date: 2004/02/18 01:15:42 $\n+ * @version $Revision: 1.11 $ $Date: 2004/04/14 20:08:56 $\n  *\n  * @author James Strachan\n  * @author Nicola Ken Barozzi\n  * @author Stephen Colebourne\n  */\n public interface Closure {\n-    \n+\n     /**\n      * Performs an action on the specified input object.\n      *\n      * @throws FunctorException (runtime) if any other error occurs\n      */\n     public void execute(Object input);\n-    \n+\n }\n--- a/src/java/org/apache/commons/collections/Factory.java\n+++ b/src/java/org/apache/commons/collections/Factory.java\n \n /**\n  * Defines a functor interface implemented by classes that create objects.\n+ * <p>\n+ * A <code>Factory</code> creates an object without using an input parameter.\n+ * If an input parameter is required, then {@link Transformer} is more appropriate.\n+ * <p>\n+ * Standard implementations of common factories are provided by\n+ * {@link FactoryUtils}. These include factories that return a constant,\n+ * a copy of a prototype or a new instance.\n  * \n  * @since Commons Collections 2.1\n- * @version $Revision: 1.8 $ $Date: 2004/02/18 01:15:42 $\n+ * @version $Revision: 1.9 $ $Date: 2004/04/14 20:08:57 $\n  *\n  * @author Arron Bates\n  * @author Stephen Colebourne\n  */\n public interface Factory {\n-    \n+\n     /**\n      * Create a new object.\n      *\n      * @throws FunctorException (runtime) if the factory cannot create an object\n      */\n     public Object create();\n-    \n+\n }\n--- a/src/java/org/apache/commons/collections/Predicate.java\n+++ b/src/java/org/apache/commons/collections/Predicate.java\n package org.apache.commons.collections;\n \n /**\n- * Defines a functor interface implemented by classes that\n- * perform a predicate test on an object. Predicate instances can be used\n- * to implement queries or to do filtering. \n+ * Defines a functor interface implemented by classes that perform a predicate\n+ * test on an object.\n+ * <p>\n+ * A <code>Predicate</code> is the object equivalent of an <code>if</code> statement.\n+ * It uses the input object to return a true or false value, and is often used in\n+ * validation or filtering.\n+ * <p>\n+ * Standard implementations of common predicates are provided by\n+ * {@link PredicateUtils}. These include true, false, instanceof, equals, and,\n+ * or, not, method invokation and null testing.\n  * \n  * @since Commons Collections 1.0\n- * @version $Revision: 1.10 $ $Date: 2004/02/18 01:15:42 $\n+ * @version $Revision: 1.11 $ $Date: 2004/04/14 20:08:57 $\n  * \n  * @author James Strachan\n  * @author Stephen Colebourne\n  */\n public interface Predicate {\n-    \n+\n     /**\n      * Use the specified parameter to perform a test that returns true or false.\n      *\n-     * @param object  the object to evaluate\n+     * @param object  the object to evaluate, should not be changed\n      * @return true or false\n      * @throws ClassCastException (runtime) if the input is the wrong class\n      * @throws IllegalArgumentException (runtime) if the input is invalid\n      * @throws FunctorException (runtime) if the predicate encounters a problem\n      */\n     public boolean evaluate(Object object);\n-    \n+\n }\n--- a/src/java/org/apache/commons/collections/Transformer.java\n+++ b/src/java/org/apache/commons/collections/Transformer.java\n package org.apache.commons.collections;\n \n /**\n- * Defines a functor interface implemented by classes that\n- * transform one object into another. The original object is left unchanged.\n+ * Defines a functor interface implemented by classes that transform one\n+ * object into another.\n+ * <p>\n+ * A <code>Transformer</code> converts the input object to the output object.\n+ * The input object should be left unchanged.\n  * Transformers are typically used for type conversions, or extracting data\n  * from an object.\n+ * <p>\n+ * Standard implementations of common transformers are provided by\n+ * {@link TransformerUtils}. These include method invokation, returning a constant,\n+ * cloning and returning the string value.\n  * \n  * @since Commons Collections 1.0\n- * @version $Revision: 1.9 $ $Date: 2004/02/18 01:15:42 $\n+ * @version $Revision: 1.10 $ $Date: 2004/04/14 20:08:57 $\n  * \n  * @author James Strachan\n  * @author Stephen Colebourne\n     /**\n      * Transforms the input object (leaving it unchanged) into some output object.\n      *\n-     * @param input  the object to be transformed\n+     * @param input  the object to be transformed, should be left unchanged\n      * @return a transformed object\n      * @throws ClassCastException (runtime) if the input is the wrong class\n      * @throws IllegalArgumentException (runtime) if the input is invalid\n      * @throws FunctorException (runtime) if the transform cannot be completed\n      */\n     public Object transform(Object input);\n-    \n+\n }", "timestamp": 1081973337, "metainfo": ""}