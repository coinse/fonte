{"sha": "36cc05ca3537737a51a67feb76ba801694152946", "log": "Add invertMap(Map) method Add toMap(ResourceBundle) method from Arun Mammen Thomas   ", "commit": "\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.20 2003/04/07 16:57:33 rwaldhoff Exp $\n- * $Revision: 1.20 $\n- * $Date: 2003/04/07 16:57:33 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.21 2003/04/26 14:24:48 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n import java.text.ParseException;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.Enumeration;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Properties;\n+import java.util.ResourceBundle;\n import java.util.Set;\n import java.util.SortedMap;\n import java.util.TreeMap;\n+\n /** \n- * A helper class for using {@link Map Map} instances.<P>\n- *\n+ * A helper class for using {@link Map Map} instances.\n+ * <p>\n  * It contains various typesafe methods\n- * as well as other useful features like deep copying.<P>\n- *\n+ * as well as other useful features like deep copying.\n+ * <p>\n  * It also provides the following decorators:\n  *\n  *  <ul>\n  *  <li>{@link #typedSortedMap(Map, Class, Class)}\n  *  </ul>\n  *\n- * @since 1.0\n+ * @since Commons Collections 1.0\n+ * @version $Revision: 1.21 $ $Date: 2003/04/26 14:24:48 $\n+ * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author Paul Jack\n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n+ * @author Arun Mammen Thomas\n  */\n public class MapUtils {\n     \n         return answer;\n     }\n \n+    /**\n+     * Creates a new HashMap using data copied from a ResourceBundle.\n+     * \n+     * @param resourceBundle  the resource bundle to convert\n+     * @return the hashmap containing the data\n+     */\n+    public static Map toMap(ResourceBundle resourceBundle) {\n+        Enumeration enum = resourceBundle.getKeys();\n+        Map map = new HashMap();\n+\n+        while (enum.hasMoreElements()) {\n+            String key = (String) enum.nextElement();\n+            Object value = resourceBundle.getObject(key);\n+            map.put(key, value);\n+        }\n+        \n+        return map;\n+    }\n+ \n     // Printing methods\n     //-------------------------------------------------------------------------\n \n     //-------------------------------------------------------------------------\n \n     /**\n-     *  Writes indentation to the given stream.\n-     *\n-     *  @param out   the stream to indent\n-     */\n-    protected static void debugPrintIndent( PrintStream out ) {\n-        for ( int i = 0; i < debugIndent; i++ ) {\n-            out.print( \"    \" );\n+     * Writes indentation to the given stream.\n+     *\n+     * @param out  the stream to indent\n+     */\n+    protected static void debugPrintIndent(PrintStream out) {\n+        for (int i = 0; i < debugIndent; i++) {\n+            out.print(\"    \");\n         }\n     }\n     \n     /**\n-     *  Logs the given exception to <Code>System.out</Code>.\n-     *\n-     *  @param e  the exception to log\n-     */\n-    protected static void logInfo(Exception e) {\n-        // mapX: should probably use log4j here instead...\n-        System.out.println( \"INFO: Exception: \" + e );\n-    }\n-\n-\n+     * Logs the given exception to <code>System.out</code>.\n+     *\n+     * @param ex  the exception to log\n+     */\n+    protected static void logInfo(Exception ex) {\n+        System.out.println(\"INFO: Exception: \" + ex);\n+    }\n+\n+    // Misc\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Inverts the supplied map returning a new HashMap such that the keys of\n+     * the input are swapped with the values.\n+     * <p>\n+     * This operation assumes that the inverse mapping is well defined.\n+     * If the input map had multiple entries with the same value mapped to\n+     * different keys, the returned map will map one of those keys to the \n+     * value, but the exact key which will be mapped is undefined.\n+     * \n+     * @see DoubleOrderedMap\n+     * @param map  the map to invert\n+     * @return a new HashMap containing the inverted data\n+     */\n+    public static Map invertMap(Map map) {\n+        Map out = new HashMap(map.size());\n+        for (Iterator it = map.entrySet().iterator(); it.hasNext();) {\n+            Map.Entry entry = (Map.Entry) it.next();\n+            out.put(entry.getValue(), entry.getKey());\n+        }\n+        return out;\n+    }\n+     \n     /**\n      * Nice method for adding data to a map in such a way\n      * as to not get NPE's. The point being that if the\n      * essentially treat put(\"Not Null\", null ) == put(\"Not Null\", \"\")\n      * We will still throw a NPE if the key is null cause that should\n      * never happen.\n-     */\n-    public static final void safeAddToMap(Map map, Object key, Object value)\n-        throws NullPointerException\n-    {\n-        if (value == null)\n-        {\n+     * \n+     * @param map  the map to add to\n+     * @param key  the key\n+     * @param value  the value\n+     */\n+    public static void safeAddToMap(Map map, Object key, Object value) throws NullPointerException {\n+        if (value == null) {\n             map.put ( key, \"\" );\n-        }\n-        else\n-        {\n+        } else {\n            map.put ( key, value );\n         }\n     }\n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMapUtils.java,v 1.4 2003/04/06 20:07:55 scolebourne Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/04/06 20:07:55 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMapUtils.java,v 1.5 2003/04/26 14:27:46 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n package org.apache.commons.collections;\n \n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.ListResourceBundle;\n import java.util.Map;\n+import java.util.ResourceBundle;\n+import java.util.Set;\n \n import junit.framework.Test;\n \n \n /**\n- *  Tests for MapUtils.\n+ * Tests for MapUtils.\n+ * \n+ * @version $Revision: 1.5 $ $Date: 2003/04/26 14:27:46 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Arun Mammen Thomas\n  */\n public class TestMapUtils extends BulkTest {\n \n         assertSame(i1, i2);\n     }\n \n+    public void testInvertMap() {\n+        final Map in = new HashMap( 5 , 1 );\n+        in.put( \"1\" , \"A\" );\n+        in.put( \"2\" , \"B\" );\n+        in.put( \"3\" , \"C\" );\n+        in.put( \"4\" , \"D\" );\n+        in.put( \"5\" , \"E\" );\n+    \n+        final Set inKeySet = new HashSet( in.keySet() );\n+        final Set inValSet = new HashSet( in.values() );\n+        \n+        final Map out =  MapUtils.invertMap(in);\n+\n+        final Set outKeySet = new HashSet( out.keySet() );\n+        final Set outValSet = new HashSet( out.values() );\n+        \n+        assertTrue( inKeySet.equals( outValSet ));\n+        assertTrue( inValSet.equals( outKeySet ));\n+        \n+        assertEquals( out.get(\"A\"), \"1\" );\n+        assertEquals( out.get(\"B\"), \"2\" );\n+        assertEquals( out.get(\"C\"), \"3\" );\n+        assertEquals( out.get(\"D\"), \"4\" );\n+        assertEquals( out.get(\"E\"), \"5\" );\n+    }\n+                \n+    public void testConvertResourceBundle() {\n+        final Map in = new HashMap( 5 , 1 );\n+        in.put( \"1\" , \"A\" );\n+        in.put( \"2\" , \"B\" );\n+        in.put( \"3\" , \"C\" );\n+        in.put( \"4\" , \"D\" );\n+        in.put( \"5\" , \"E\" );\n+    \n+        ResourceBundle b = new ListResourceBundle() {\n+            public Object[][] getContents() {\n+                final Object[][] contents = new Object[ in.size() ][2];\n+                final Iterator i = in.keySet().iterator();\n+                int n = 0;\n+                while ( i.hasNext() ) {\n+                    final Object key = i.next();\n+                    final Object val = in.get( key );\n+                    contents[ n ][ 0 ] = key;\n+                    contents[ n ][ 1 ] = val;\n+                    ++n;\n+                }\n+                return contents;\n+            }\n+        };\n+        \n+        final Map out = MapUtils.toMap(b); \n+\n+        assertTrue( in.equals(out));\n+    }\n }", "timestamp": 1051367266, "metainfo": ""}