{"sha": "ae565ed8bcc93389b30e2ae5fe2f934aab50baf3", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r555925 | skestle | 2007-07-13 03:39:24 -0700 (Fri, 13 Jul 2007) | 2 lines          Added Edwin Tellman's patch for COLLECTIONS-243.       It all seems pretty reasonable, and it should all be checked again as the project is worked through     ------------------------------------------------------------------------     r471201 | scolebourne | 2006-11-04 06:17:26 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getBag() - use covariant decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/bag/PredicatedSortedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/PredicatedSortedBag.java\n  * @author Stephen Colebourne\n  * @author Paul Jack\n  */\n-public class PredicatedSortedBag\n-        extends PredicatedBag implements SortedBag {\n+public class PredicatedSortedBag<E>\n+        extends PredicatedBag<E> implements SortedBag<E> {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 3448581314086406616L;\n      * @throws IllegalArgumentException if bag or predicate is null\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      */\n-    public static SortedBag decorate(SortedBag bag, Predicate predicate) {\n-        return new PredicatedSortedBag(bag, predicate);\n+    public static <T> SortedBag<T> decorate(SortedBag<T> bag, Predicate<? super T> predicate) {\n+        return new PredicatedSortedBag<T>(bag, predicate);\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws IllegalArgumentException if bag or predicate is null\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      */\n-    protected PredicatedSortedBag(SortedBag bag, Predicate predicate) {\n+    protected PredicatedSortedBag(SortedBag<E> bag, Predicate<? super E> predicate) {\n         super(bag, predicate);\n     }\n \n      * \n      * @return the decorated bag\n      */\n-    protected SortedBag getSortedBag() {\n-        return (SortedBag) getCollection();\n+    protected SortedBag<E> decorated() {\n+        return (SortedBag<E>) super.decorated();\n     }\n     \n     //-----------------------------------------------------------------------\n-    public Object first() {\n-        return getSortedBag().first();\n+    public E first() {\n+        return decorated().first();\n     }\n \n-    public Object last() {\n-        return getSortedBag().last();\n+    public E last() {\n+        return decorated().last();\n     }\n \n-    public Comparator comparator() {\n-        return getSortedBag().comparator();\n+    public Comparator<? super E> comparator() {\n+        return decorated().comparator();\n     }\n \n }", "timestamp": 1252994042, "metainfo": ""}