{"sha": "cdfd6b7a6784246360fe77fe3789696b8b93d877", "log": "[COLLECTIONS-372] Allow different input/output types for TransformingComparator.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/ComparatorUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ComparatorUtils.java\n      * by the given transformer before they are compared by the given\n      * comparator.\n      *\n-     * @param <E>  the object type to compare\n+     * @param <I>  the input object type of the transformed comparator\n+     * @param <O>  the object type of the decorated comparator\n      * @param comparator  the sort order to use\n      * @param transformer  the transformer to use\n      * @return  a comparator that transforms its input objects before comparing them\n      * @see  TransformingComparator\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <E> Comparator<E> transformedComparator(Comparator<E> comparator,\n-            final Transformer<? super E, ? extends E> transformer) {\n-\n-        if (comparator == null) {\n-            comparator = NATURAL_COMPARATOR;\n-        }\n-        return new TransformingComparator<E>(transformer, comparator);\n+    public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator,\n+            final Transformer<? super I, ? extends O> transformer) {\n+\n+        if (comparator == null) {\n+            comparator = NATURAL_COMPARATOR;\n+        }\n+        return new TransformingComparator<I, O>(transformer, comparator);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/comparators/TransformingComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/TransformingComparator.java\n  * @see org.apache.commons.collections.Transformer\n  * @see org.apache.commons.collections.comparators.ComparableComparator\n  */\n-public class TransformingComparator<E> implements Comparator<E>, Serializable {\n+public class TransformingComparator<I, O> implements Comparator<I>, Serializable {\n     \n     /** Serialization version from Collections 4.0. */\n     private static final long serialVersionUID = 3456940356043606220L;\n \n     /** The decorated comparator. */\n-    protected final Comparator<E> decorated;\n+    protected final Comparator<O> decorated;\n     /** The transformer being used. */    \n-    protected final Transformer<? super E, ? extends E> transformer;\n+    protected final Transformer<? super I, ? extends O> transformer;\n \n     //-----------------------------------------------------------------------\n     /**\n      * @param transformer what will transform the arguments to <code>compare</code>\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public TransformingComparator(final Transformer<? super E, ? extends E> transformer) {\n+    public TransformingComparator(final Transformer<? super I, ? extends O> transformer) {\n         this(transformer, ComparatorUtils.NATURAL_COMPARATOR);\n     }\n \n      * @param transformer  what will transform the arguments to <code>compare</code>\n      * @param decorated  the decorated Comparator\n      */\n-    public TransformingComparator(final Transformer<? super E, ? extends E> transformer,\n-                                  final Comparator<E> decorated) {\n+    public TransformingComparator(final Transformer<? super I, ? extends O> transformer,\n+                                  final Comparator<O> decorated) {\n         this.decorated = decorated;\n         this.transformer = transformer;\n     }\n      * @param obj2  the second object to transform then compare\n      * @return negative if obj1 is less, positive if greater, zero if equal\n      */\n-    public int compare(final E obj1, final E obj2) {\n-        final E value1 = this.transformer.transform(obj1);\n-        final E value2 = this.transformer.transform(obj2);\n+    public int compare(final I obj1, final I obj2) {\n+        final O value1 = this.transformer.transform(obj1);\n+        final O value2 = this.transformer.transform(obj2);\n         return this.decorated.compare(value1, value2);\n     }\n \n             return false;\n         }\n         if (object.getClass().equals(this.getClass())) {\n-            final TransformingComparator<?> comp = (TransformingComparator<?>) object;\n+            final TransformingComparator<?, ?> comp = (TransformingComparator<?, ?>) object;\n             return null == decorated ? null == comp.decorated : decorated.equals(comp.decorated) &&\n                     null == transformer ? null == comp.transformer : transformer.equals(comp.transformer);\n         }\n--- a/src/test/java/org/apache/commons/collections/comparators/TransformingComparatorTest.java\n+++ b/src/test/java/org/apache/commons/collections/comparators/TransformingComparatorTest.java\n import java.util.LinkedList;\n import java.util.List;\n \n+import org.apache.commons.collections.ComparatorUtils;\n import org.apache.commons.collections.TransformerUtils;\n \n /**\n \n     @Override\n     public Comparator<Integer> makeObject() {\n-       final Comparator<Integer> decorated = new ComparableComparator<Integer>();\n-       final TransformingComparator<Integer> comparator =\n-               new TransformingComparator<Integer>(TransformerUtils.<Integer>nopTransformer(), decorated);\n-       return comparator;\n+       final Comparator<String> decorated = new ComparableComparator<String>();\n+       return ComparatorUtils.transformedComparator(decorated, TransformerUtils.<Integer>stringValueTransformer());\n     }\n \n     @Override", "timestamp": 1362599486, "metainfo": ""}