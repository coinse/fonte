{"sha": "43c829d31814e587f8aa5dcc80ac537fa30c10b4", "log": "Added documentation to classes in primitives package. PR: Obtained from: Submitted by: Reviewed by:   ", "commit": "\n--- a/src/java/org/apache/commons/collections/primitives/AbstractIntArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/06/04 16:01:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntArrayList.java,v 1.2 2002/08/13 19:41:36 pjack Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/13 19:41:36 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * Abstract base class for lists backed by an <Code>int</Code> array.\n+ *\n+ * @version $Revision: 1.2 $ $Date: 2002/08/13 19:41:36 $\n  * @author Rodney Waldhoff \n  */\n public abstract class AbstractIntArrayList extends AbstractList implements List, Serializable {\n \n     //------------------------------------------------------ Abstract Accessors\n-    \n+\n+    /**\n+     *  Returns the maximum size the list can reach before the array \n+     *  is resized.\n+     *\n+     *  @return the maximum size the list can reach before the array is resized\n+     */\n     abstract public int capacity();\n+\n+\n+    /**\n+     *  Returns the number of <Code>int</Code> elements currently in this\n+     *  list.\n+     *\n+     *  @return the size of this list\n+     */\n     abstract public int size();\n+\n+\n+    /**\n+     *  Returns the <Code>int</Code> element at the specified index in this\n+     *  array.\n+     *\n+     *  @param index  the index of the element to return\n+     *  @return  the <Code>int</Code> element at that index\n+     *  @throws  IndexOutOfBoundsException  if the index is negative or\n+     *    greater than or equal to {@link #size()}\n+     */\n     abstract public int getInt(int index);\n+\n+\n+    /**\n+     *  Returns <Code>true</Code> if this list contains the given \n+     *  <Code>int</Code> element.\n+     *\n+     *  @param value  the element to search for\n+     *  @return true if this list contains the given value, false otherwise\n+     */\n     abstract public boolean containsInt(int value);\n+\n+\n+    /**\n+     *  Returns the first index of the given <Code>int</Code> element, or\n+     *  -1 if the value is not in this list.\n+     *\n+     *  @param value  the element to search for\n+     *  @return  the first index of that element, or -1 if the element is\n+     *    not in this list\n+     */\n     abstract public int indexOfInt(int value);\n+\n+\n+    /**\n+     *  Returns the last index of the given <Code>int</Code> element, or\n+     *  -1 if the value is not in this list.\n+     *\n+     *  @param value  the element to search for\n+     *  @return  the last index of that element, or -1 if the element is\n+     *    not in this list\n+     */\n     abstract public int lastIndexOfInt(int value);\n \n     //--------------------------------------------------------------- Accessors\n     \n-    /** Returns <code>new Integer({@link #getInt getInteger(index)})</code>. */\n+    /** \n+     *  Returns <code>new Integer({@link #getInt getInt(index)})</code>. \n+     *\n+     *  @param index  the index of the element to return\n+     *  @return  an {@link Integer} object wrapping the <Code>int</Code>\n+     *    value at that index\n+     *  @throws IndexOutOfBoundsException  if the index is negative or\n+     *    greater than or equal to {@link #size()}\n+     */\n     public Object get(int index) {\n         return new Integer(getInt(index));\n     }\n \n-    /** Returns <code>{@link #containsInt containsInt(((Integer)value).intValue())}</code>. */\n+    /** \n+     *  Returns <code>{@link #containsInt containsInt(((Integer)value).intValue())}</code>. \n+     *\n+     *  @param value  an {@link Integer} object whose wrapped <Code>int</Code>\n+     *    value to search for\n+     *  @return true  if this list contains that <Code>int</Code> value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Integer}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n     public boolean contains(Object value) {\n         return containsInt(((Integer)value).intValue());\n     }\n \n-    /** Returns <code>({@link #size} == 0)</code>. */\n+    /** \n+     *  Returns <code>({@link #size} == 0)</code>. \n+     *\n+     *  @return true if this list is empty, false otherwise\n+     */\n     public boolean isEmpty() {\n         return (0 == size());\n     }\n \n-    /** Returns <code>{@link #indexOfInt indexOfInt(((Integer)value).intValue())}</code>. */\n+    /** \n+     *  Returns <code>{@link #indexOfInt indexOfInt(((Integer)value).intValue())}</code>. \n+     *\n+     *  @param value  an {@link Integer} object whose wrapped <Code>int</Code>\n+     *    value to search for\n+     *  @return the first index of that <Code>int</Code> value, or -1 if \n+     *    this list does not contain that value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Integer}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n     public int indexOf(Object value) {\n         return indexOfInt(((Integer)value).intValue());\n     }\n \n-    /** Returns <code>{@link #lastIndexOfInt lastIndexOfInt(((Integer)value).intValue())}</code>. */\n+    /** \n+     *  Returns <code>{@link #lastIndexOfInt lastIndexOfInt(((Integer)value).intValue())}</code>. \n+     *\n+     *  @param value  an {@link Integer} object whose wrapped <Code>int</Code>\n+     *    value to search for\n+     *  @return the last index of that <Code>int</Code> value, or -1 if \n+     *    this list does not contain that value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Integer}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n     public int lastIndexOf(Object value) {\n         return lastIndexOfInt(((Integer)value).intValue());\n     }\n \n     //------------------------------------------------------ Abstract Modifiers\n \n+    /**\n+     *  Sets the element at the given index to the given <Code>int</Code>\n+     *  value.\n+     *\n+     *  @param index  the index of the element to set\n+     *  @param value  the <Code>int</Code> value to set it to\n+     *  @return  the previous <Code>int</Code> value at that index\n+     *  @throws  IndexOutOfBoundsException  if the index is negative or \n+     *     greater than or equal to {@link #size()}.\n+     */\n     abstract public int setInt(int index, int value);\n+\n+    /**\n+     *  Adds the given <Code>int</Code> value to the end of this list.\n+     *\n+     *  @param value  the value to add\n+     *  @return  true, always\n+     */\n     abstract public boolean addInt(int value);\n+\n+\n+    /**\n+     *  Inserts the given <Code>int</Code> value into this list at the\n+     *  specified index.\n+     *\n+     *  @param index  the index for the insertion\n+     *  @param value  the value to insert at that index\n+     *  @throws IndexOutOfBoundsException if the index is negative or \n+     *    greater than {@link #size()}\n+     */\n     abstract public void addInt(int index, int value);\n+\n+\n+    /**\n+     *  Removes the <Code>int</Code> element at the specified index.\n+     *\n+     *  @param index  the index of the element to remove\n+     *  @return  the removed <Code>int</Code> value\n+     *  @throws IndexOutOfBoundsException if the index is negative or\n+     *   greater than or equal to {@link #size()}\n+     */\n     abstract public int removeIntAt(int index);\n+\n+\n+    /**\n+     *  Removes the first occurrence of the given <Code>int</COde> value\n+     *  from this list.\n+     *\n+     *  @param value  the value to remove\n+     *  @return  true if this list contained that value and removed it,\n+     *   or false if this list didn't contain the value\n+     */\n     abstract public boolean removeInt(int value);\n+\n+    /**\n+     *  Removes all <Code>int</Code> values from this list.\n+     */\n     abstract public void clear();\n+\n+    /**\n+     *  Ensures that the length of the internal <Code>int</Code> array is\n+     *  at list the given value.\n+     *\n+     *  @param mincap  the minimum capcity for this list\n+     */\n     abstract public void ensureCapacity(int mincap);\n+\n+    /**\n+     *  Resizes the internal array such that {@link #capacity()} is equal\n+     *  to {@link #size()}.\n+     */\n     abstract public void trimToSize();\n \n     //--------------------------------------------------------------- Modifiers\n     \n-    /** Returns <code>new Integer({@link #setInt(int,int) setInt(index,((Integer)value).intValue())})</code>. */\n+    /** \n+     * Returns <code>new Integer({@link #setInt(int,int) \n+     * setInt(index,((Integer)value).intValue())})</code>. \n+     *\n+     * @param index  the index of the element to set\n+     * @param value  an {@link Integer} object whose <Code>int</Code> value\n+     *  to set at that index\n+     * @return  an {@link Integer} that wraps the <Code>int</Code> value  \n+     *   previously at that index\n+     * @throws IndexOutOfBoundsException if the index is negative or greater\n+     *  than or equal to {@link #size()}\n+     * @throws ClassCastException if the given value is not an {@link Integer}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n     public Object set(int index, Object value) {\n         return new Integer(setInt(index,((Integer)value).intValue()));\n     }\n \n-    /** Invokes <code>{@link #addInt(int) addInt(((Integer)value).intValue())})</code>. */\n+    /** \n+     * Invokes <code>{@link #addInt(int) addInt(((Integer)value).intValue())})</code>. \n+     *\n+     * @param value  an {@link Integer} object that wraps the <Code>int</Code>\n+     *   value to add\n+     * @return true, always\n+     * @throws ClassCastException if the given value is not an {@link Integer}\n+     * @throws NullPointerException if the given value is <Code>null</COde>     \n+     */\n     public boolean add(Object value) {\n         return addInt(((Integer)value).intValue());\n     }    \n \n-    /** Invokes <code>{@link #addInt(int,int) addInt(index,((Integer)value).intValue())})</code>. */\n+    /** \n+     * Invokes <code>{@link #addInt(int,int) addInt(index,((Integer)value).intValue())})</code>. \n+     *\n+     * @param index  the index of the insertion\n+     * @param value an {@link Integer} object that wraps the <Code>int</Code>\n+     *   value to insert\n+     * @throws IndexOutOfBoundsException if the index is negative or greater\n+     *   than {@link #size()}\n+     * @throws ClassCastException if the given value is not an {@link Integer}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n     public void add(int index, Object value) {\n         addInt(index,((Integer)value).intValue());\n     }\n \n-    /** Returns <code>new Integer({@link #removeIntAt(int) removeIntAt(index)})</code>. */\n+    /** \n+     * Returns <code>new Integer({@link #removeIntAt(int) removeIntAt(index)})</code>. \n+     *\n+     * @param index  the index of the element to remove\n+     * @return  an {@link Integer} object that wraps the value that was\n+     *   removed from that index\n+     * @throws IndexOutOfBoundsException  if the given index is negative\n+     *   or greater than or equal to {@link #size()}\n+     */\n     public Object remove(int index) {\n         return new Integer(removeIntAt(index));\n     }\n \n-    /** Returns <code>{@link #removeInt(int) removeInt(((Integer)value).intValue())}</code>. */\n+    /** \n+     * Returns <code>{@link #removeInt(int) removeInt(((Integer)value).intValue())}</code>. \n+     *\n+     * @param value  an {@link Integer} object that wraps the <Code>int</Code>\n+     *   value to remove\n+     * @return true if the first occurrence of that <Code>int</Code> value\n+     *   was removed from this list, or <Code>false</Code> if this list\n+     *   did not contain that <Code>int</Code> value\n+     * @throws ClassCastException if the given value is not an {@link Integer}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n     public boolean remove(Object value) {\n         return removeInt(((Integer)value).intValue());\n     }\n--- a/src/java/org/apache/commons/collections/primitives/AbstractLongArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractLongArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractLongArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/06/04 16:01:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractLongArrayList.java,v 1.2 2002/08/13 19:41:36 pjack Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/13 19:41:36 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * Abstract base class for lists backed by a <Code>long</Code> array.\n+ *\n+ * @version $Revision: 1.2 $ $Date: 2002/08/13 19:41:36 $\n  * @author Rodney Waldhoff \n  */\n public abstract class AbstractLongArrayList extends AbstractList implements List, Serializable {\n \n     //------------------------------------------------------ Abstract Accessors\n     \n+    /**\n+     *  Returns the maximum size the list can reach before the array \n+     *  is resized.\n+     *\n+     *  @return the maximum size the list can reach before the array is resized\n+     */\n     abstract public int capacity();\n+\n+    /**\n+     *  Returns the number of <Code>long</Code> elements currently in this\n+     *  list.\n+     *\n+     *  @return the size of this list\n+     */\n     abstract public int size();\n+\n+    /**\n+     *  Returns the <Code>long</Code> element at the specified index in this\n+     *  array.\n+     *\n+     *  @param index  the index of the element to return\n+     *  @return  the <Code>long</Code> element at that index\n+     *  @throws  IndexOutOfBoundsException  if the index is negative or\n+     *    greater than or equal to {@link #size()}\n+     */\n     abstract public long getLong(int index);\n+\n+    /**\n+     *  Returns <Code>true</Code> if this list contains the given \n+     *  <Code>long</Code> element.\n+     *\n+     *  @param value  the element to search for\n+     *  @return true if this list contains the given value, false otherwise\n+     */\n     abstract public boolean containsLong(long value);\n+\n+    /**\n+     *  Returns the first index of the given <Code>long</Code> element, or\n+     *  -1 if the value is not in this list.\n+     *\n+     *  @param value  the element to search for\n+     *  @return  the first index of that element, or -1 if the element is\n+     *    not in this list\n+     */\n     abstract public int indexOfLong(long value);\n+\n+    /**\n+     *  Returns the last index of the given <Code>long</Code> element, or\n+     *  -1 if the value is not in this list.\n+     *\n+     *  @param value  the element to search for\n+     *  @return  the last index of that element, or -1 if the element is\n+     *    not in this list\n+     */\n     abstract public int lastIndexOfLong(long value);\n \n     //--------------------------------------------------------------- Accessors\n     \n-    /** Returns <code>new Long({@link #getLong getLong(index)})</code>. */\n+    /** \n+     *  Returns <code>new Long({@link #getLong getLong(index)})</code>. \n+     *\n+     *  @param index  the index of the element to return\n+     *  @return  an {@link Long} object wrapping the <Code>long</Code>\n+     *    value at that index\n+     *  @throws IndexOutOfBoundsException  if the index is negative or\n+     *    greater than or equal to {@link #size()}\n+     */\n     public Object get(int index) {\n         return new Long(getLong(index));\n     }\n \n-    /** Returns <code>{@link #containsLong containsLong(((Long)value).longValue())}</code>. */\n+    /** \n+     *  Returns <code>{@link #containsLong containsLong(((Long)value).longValue())}</code>. \n+     *\n+     *  @param value  an {@link Long} object whose wrapped <Code>long</Code>\n+     *    value to search for\n+     *  @return true  if this list contains that <Code>long</Code> value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Long}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n     public boolean contains(Object value) {\n         return containsLong(((Long)value).longValue());\n     }\n \n-    /** Returns <code>({@link #size} == 0)</code>. */\n+    /** \n+     *  Returns <code>({@link #size} == 0)</code>. \n+     *\n+     *  @return true if this list is empty, false otherwise\n+     */\n     public boolean isEmpty() {\n         return (0 == size());\n     }\n \n-    /** Returns <code>{@link #indexOfLong indexOfLong(((Long)value).longValue())}</code>. */\n+    /** \n+     *  Returns <code>{@link #indexOfLong indexOfLong(((Long).longValue())}</code>. \n+     *\n+     *  @param value  an {@link Long} object whose wrapped <Code>long</Code>\n+     *    value to search for\n+     *  @return the first index of that <Code>long</Code> value, or -1 if \n+     *    this list does not contain that value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Long}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n     public int indexOf(Object value) {\n         return indexOfLong(((Long)value).longValue());\n     }\n \n-    /** Returns <code>{@link #lastIndexOfLong lastIndexOfLong(((Long)value).longValue())}</code>. */\n+    /** \n+     *  Returns <code>{@link #lastIndexOfLong lastIndexOfLong(((Long).longValue())}</code>. \n+     *\n+     *  @param value  an {@link Long} object whose wrapped <Code>long</Code>\n+     *    value to search for\n+     *  @return the last index of that <Code>long</Code> value, or -1 if \n+     *    this list does not contain that value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Long}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n     public int lastIndexOf(Object value) {\n         return lastIndexOfLong(((Long)value).longValue());\n     }\n \n     //------------------------------------------------------ Abstract Modifiers\n \n+    /**\n+     *  Sets the element at the given index to the given <Code>long</Code>\n+     *  value.\n+     *\n+     *  @param index  the index of the element to set\n+     *  @param value  the <Code>long</Code> value to set it to\n+     *  @return  the previous <Code>long</Code> value at that index\n+     *  @throws  IndexOutOfBoundsException  if the index is negative or \n+     *     greater than or equal to {@link #size()}.\n+     */\n     abstract public long setLong(int index, long value);\n+\n+    /**\n+     *  Adds the given <Code>long</Code> value to the end of this list.\n+     *\n+     *  @param value  the value to add\n+     *  @return  true, always\n+     */\n     abstract public boolean addLong(long value);\n+\n+    /**\n+     *  Inserts the given <Code>long</Code> value into this list at the\n+     *  specified index.\n+     *\n+     *  @param index  the index for the insertion\n+     *  @param value  the value to insert at that index\n+     *  @throws IndexOutOfBoundsException if the index is negative or \n+     *    greater than {@link #size()}\n+     */\n     abstract public void addLong(int index, long value);\n+\n+    /**\n+     *  Removes the <Code>long</Code> element at the specified index.\n+     *\n+     *  @param index  the index of the element to remove\n+     *  @return  the removed <Code>long</Code> value\n+     *  @throws IndexOutOfBoundsException if the index is negative or\n+     *   greater than or equal to {@link #size()}\n+     */\n     abstract public long removeLongAt(int index);\n+\n+    /**\n+     *  Removes the first occurrence of the given <Code>long</Code> value\n+     *  from this list.\n+     *\n+     *  @param value  the value to remove\n+     *  @return  true if this list contained that value and removed it,\n+     *   or false if this list didn't contain the value\n+     */\n     abstract public boolean removeLong(long value);\n+\n+    /**\n+     *  Removes all <Code>long</Code> values from this list.\n+     */\n     abstract public void clear();\n+\n+    /**\n+     *  Ensures that the length of the internal <Code>long</Code> array is\n+     *  at list the given value.\n+     *\n+     *  @param mincap  the minimum capcity for this list\n+     */\n     abstract public void ensureCapacity(int mincap);\n+\n+    /**\n+     *  Resizes the internal array such that {@link #capacity()} is equal\n+     *  to {@link #size()}.\n+     */\n     abstract public void trimToSize();\n \n     //--------------------------------------------------------------- Modifiers\n     \n-    /** Returns <code>new Long({@link #setLong(int,long) setLong(index,((Long)value).longValue())})</code>. */\n+    /** \n+     * Returns <code>new Long({@link #setLong(int,long) \n+     * setLong(index,((Long).longValue())})</code>. \n+     *\n+     * @param index  the index of the element to set\n+     * @param value  an {@link Long} object whose <Code>long</Code> value\n+     *  to set at that index\n+     * @return  an {@link Long} that wraps the <Code>long</Code> value  \n+     *   previously at that index\n+     * @throws IndexOutOfBoundsException if the index is negative or greater\n+     *  than or equal to {@link #size()}\n+     * @throws ClassCastException if the given value is not an {@link Long}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n     public Object set(int index, Object value) {\n         return new Long(setLong(index,((Long)value).longValue()));\n     }\n \n-    /** Invokes <code>{@link #addLong(long) addLong(((Long)value).longValue())})</code>. */\n+    /** \n+     * Invokes <code>{@link #addLong(long) addLong(((Long)value).longValue())})</code>. \n+     *\n+     * @param value  an {@link Long} object that wraps the <Code>long</Code>\n+     *   value to add\n+     * @return true, always\n+     * @throws ClassCastException if the given value is not an {@link Long}\n+     * @throws NullPointerException if the given value is <Code>null</COde>     \n+     */\n     public boolean add(Object value) {\n         return addLong(((Long)value).longValue());\n     }    \n \n-    /** Invokes <code>{@link #addLong(int,long) addLong(index,((Long)value).longValue())})</code>. */\n+    /** \n+     * Invokes <code>{@link #addLong(int,long) addLong(index,((Long)value).longValue())})</code>. \n+     *\n+     * @param index  the index of the insertion\n+     * @param value an {@link Long} object that wraps the <Code>long</Code>\n+     *   value to insert\n+     * @throws IndexOutOfBoundsException if the index is negative or greater\n+     *   than {@link #size()}\n+     * @throws ClassCastException if the given value is not an {@link Long}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n     public void add(int index, Object value) {\n         addLong(index,((Long)value).longValue());\n     }\n \n-    /** Returns <code>new Long({@link #removeLongAt(int) removeLongAt(index)})</code>. */\n+    /** \n+     * Returns <code>new Long({@link #removeLongAt(int) removeLongAt(index)})</code>. \n+     *\n+     * @param index  the index of the element to remove\n+     * @return  an {@link Long} object that wraps the value that was\n+     *   removed from that index\n+     * @throws IndexOutOfBoundsException  if the given index is negative\n+     *   or greater than or equal to {@link #size()}\n+     */\n     public Object remove(int index) {\n         return new Long(removeLongAt(index));\n     }\n \n-    /** Returns <code>{@link #removeLong(long) removeLong(((Long)value).longValue())}</code>. */\n+    /** \n+     * Returns <code>{@link #removeLong(long) removeLong(((Long)value).longValue())}</code>. \n+     *\n+     * @param value  an {@link Long} object that wraps the <Code>long</Code>\n+     *   value to remove\n+     * @return true if the first occurrence of that <Code>long</Code> value\n+     *   was removed from this list, or <Code>false</Code> if this list\n+     *   did not contain that <Code>long</Code> value\n+     * @throws ClassCastException if the given value is not an {@link Long}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n     public boolean remove(Object value) {\n         return removeLong(((Long)value).longValue());\n     }\n }\n+\n+\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+\n+\n+\n+    \n--- a/src/java/org/apache/commons/collections/primitives/AbstractShortArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/06/04 16:01:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortArrayList.java,v 1.2 2002/08/13 19:41:36 pjack Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/13 19:41:36 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * Abstract base class for lists backed by a <Code>short</Code> array.\n+ *\n+ * @version $Revision: 1.2 $ $Date: 2002/08/13 19:41:36 $\n  * @author Rodney Waldhoff \n  */\n public abstract class AbstractShortArrayList extends AbstractList implements List, Serializable {\n \n     //------------------------------------------------------ Abstract Accessors\n     \n+    /**\n+     *  Returns the maximum size the list can reach before the array \n+     *  is resized.\n+     *\n+     *  @return the maximum size the list can reach before the array is resized\n+     */\n     abstract public int capacity();\n+\n+    /**\n+     *  Returns the number of <Code>short</Code> elements currently in this\n+     *  list.\n+     *\n+     *  @return the size of this list\n+     */\n     abstract public int size();\n+\n+    /**\n+     *  Returns the <Code>short</Code> element at the specified index in this\n+     *  array.\n+     *\n+     *  @param index  the index of the element to return\n+     *  @return  the <Code>short</Code> element at that index\n+     *  @throws  IndexOutOfBoundsException  if the index is negative or\n+     *    greater than or equal to {@link #size()}\n+     */\n     abstract public short getShort(int index);\n+\n+    /**\n+     *  Returns <Code>true</Code> if this list contains the given \n+     *  <Code>short</Code> element.\n+     *\n+     *  @param value  the element to search for\n+     *  @return true if this list contains the given value, false otherwise\n+     */\n     abstract public boolean containsShort(short value);\n+\n+    /**\n+     *  Returns the first index of the given <Code>short</Code> element, or\n+     *  -1 if the value is not in this list.\n+     *\n+     *  @param value  the element to search for\n+     *  @return  the first index of that element, or -1 if the element is\n+     *    not in this list\n+     */\n     abstract public int indexOfShort(short value);\n+\n+    /**\n+     *  Returns the last index of the given <Code>short</Code> element, or\n+     *  -1 if the value is not in this list.\n+     *\n+     *  @param value  the element to search for\n+     *  @return  the last index of that element, or -1 if the element is\n+     *    not in this list\n+     */\n     abstract public int lastIndexOfShort(short value);\n \n     //--------------------------------------------------------------- Accessors\n     \n-    /** Returns <code>new Short({@link #getShort getShort(index)})</code>. */\n+    /** \n+     *  Returns <code>new Short({@link #getShort getShort(index)})</code>. \n+     *\n+     *  @param index  the index of the element to return\n+     *  @return  an {@link Short} object wrapping the <Code>short</Code>\n+     *    value at that index\n+     *  @throws IndexOutOfBoundsException  if the index is negative or\n+     *    greater than or equal to {@link #size()}\n+     */\n     public Object get(int index) {\n         return new Short(getShort(index));\n     }\n \n-    /** Returns <code>{@link #containsShort containsShort(((Short)value).shortValue())}</code>. */\n+    /** \n+     *  Returns <code>{@link #containsShort containsShort(((Short)value.shortValue())}</code>. \n+     *\n+     *  @param value  an {@link Short} object whose wrapped <Code>short</Code>\n+     *    value to search for\n+     *  @return true  if this list contains that <Code>short</Code> value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Short}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n     public boolean contains(Object value) {\n         return containsShort(((Short)value).shortValue());\n     }\n \n-    /** Returns <code>({@link #size} == 0)</code>. */\n+    /** \n+     *  Returns <code>({@link #size} == 0)</code>. \n+     *\n+     *  @return true if this list is empty, false otherwise\n+     */\n     public boolean isEmpty() {\n         return (0 == size());\n     }\n \n-    /** Returns <code>{@link #indexOfShort indexOfShort(((Short)value).shortValue())}</code>. */\n+    /** \n+     *  Returns <code>{@link #indexOfShort indexOfShort(((Short)value.shortValue())}</code>. \n+     *\n+     *  @param value  an {@link Short} object whose wrapped <Code>short</Code>\n+     *    value to search for\n+     *  @return the first index of that <Code>short</Code> value, or -1 if \n+     *    this list does not contain that value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Short}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n     public int indexOf(Object value) {\n         return indexOfShort(((Short)value).shortValue());\n     }\n \n-    /** Returns <code>{@link #lastIndexOfShort lastIndexOfShort(((Short)value).shortValue())}</code>. */\n+    /** \n+     *  Returns <code>{@link #lastIndexOfShort lastIndexOfShort(((Short)value.shortValue())}</code>. \n+     *\n+     *  @param value  an {@link Short} object whose wrapped <Code>short</Code>\n+     *    value to search for\n+     *  @return the last index of that <Code>short</Code> value, or -1 if \n+     *    this list does not contain that value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Short}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n     public int lastIndexOf(Object value) {\n         return lastIndexOfShort(((Short)value).shortValue());\n     }\n \n     //------------------------------------------------------ Abstract Modifiers\n \n+    /**\n+     *  Sets the element at the given index to the given <Code>short</Code>\n+     *  value.\n+     *\n+     *  @param index  the index of the element to set\n+     *  @param value  the <Code>short</Code> value to set it to\n+     *  @return  the previous <Code>short</Code> value at that index\n+     *  @throws  IndexOutOfBoundsException  if the index is negative or \n+     *     greater than or equal to {@link #size()}.\n+     */\n     abstract public short setShort(int index, short value);\n+\n+    /**\n+     *  Adds the given <Code>short</Code> value to the end of this list.\n+     *\n+     *  @param value  the value to add\n+     *  @return  true, always\n+     */\n     abstract public boolean addShort(short value);\n+\n+    /**\n+     *  Inserts the given <Code>short</Code> value into this list at the\n+     *  specified index.\n+     *\n+     *  @param index  the index for the insertion\n+     *  @param value  the value to insert at that index\n+     *  @throws IndexOutOfBoundsException if the index is negative or \n+     *    greater than {@link #size()}\n+     */\n     abstract public void addShort(int index, short value);\n+\n+    /**\n+     *  Removes the <Code>short</Code> element at the specified index.\n+     *\n+     *  @param index  the index of the element to remove\n+     *  @return  the removed <Code>short</Code> value\n+     *  @throws IndexOutOfBoundsException if the index is negative or\n+     *   greater than or equal to {@link #size()}\n+     */\n     abstract public short removeShortAt(int index);\n+\n+    /**\n+     *  Removes the first occurrence of the given <Code>short</Code> value\n+     *  from this list.\n+     *\n+     *  @param value  the value to remove\n+     *  @return  true if this list contained that value and removed it,\n+     *   or false if this list didn't contain the value\n+     */\n     abstract public boolean removeShort(short value);\n+\n+    /**\n+     *  Removes all <Code>short</Code> values from this list.\n+     */\n     abstract public void clear();\n+\n+    /**\n+     *  Ensures that the length of the internal <Code>short</Code> array is\n+     *  at list the given value.\n+     *\n+     *  @param mincap  the minimum capcity for this list\n+     */\n     abstract public void ensureCapacity(int mincap);\n+\n+    /**\n+     *  Resizes the internal array such that {@link #capacity()} is equal\n+     *  to {@link #size()}.\n+     */\n     abstract public void trimToSize();\n \n     //--------------------------------------------------------------- Modifiers\n     \n-    /** Returns <code>new Short({@link #setShort(int,short) setShort(index,((Short)value).shortValue())})</code>. */\n+    /** \n+     * Returns <code>new Short({@link #setShort(int,short) \n+     * setShort(index,((Short)value.shortValue())})</code>. \n+     *\n+     * @param index  the index of the element to set\n+     * @param value  an {@link Short} object whose <Code>short</Code> value\n+     *  to set at that index\n+     * @return  an {@link Short} that wraps the <Code>short</Code> value  \n+     *   previously at that index\n+     * @throws IndexOutOfBoundsException if the index is negative or greater\n+     *  than or equal to {@link #size()}\n+     * @throws ClassCastException if the given value is not an {@link Short}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n     public Object set(int index, Object value) {\n         return new Short(setShort(index,((Short)value).shortValue()));\n     }\n \n-    /** Invokes <code>{@link #addShort(short) addShort(((Short)value).shortValue())})</code>. */\n+    /** \n+     * Invokes <code>{@link #addShort(short) addShort(((Short)value.shortValue())})</code>. \n+     *\n+     * @param value  an {@link Short} object that wraps the <Code>short</Code>\n+     *   value to add\n+     * @return true, always\n+     * @throws ClassCastException if the given value is not an {@link Short}\n+     * @throws NullPointerException if the given value is <Code>null</COde>     \n+     */\n     public boolean add(Object value) {\n         return addShort(((Short)value).shortValue());\n     }    \n \n-    /** Invokes <code>{@link #addShort(int,short) addShort(index,((Short)value).shortValue())})</code>. */\n+    /** \n+     * Invokes <code>{@link #addShort(int,short) addShort(index,((Short)value.shortValue())})</code>. \n+     *\n+     * @param index  the index of the insertion\n+     * @param value an {@link Short} object that wraps the <Code>short</Code>\n+     *   value to insert\n+     * @throws IndexOutOfBoundsException if the index is negative or greater\n+     *   than {@link #size()}\n+     * @throws ClassCastException if the given value is not an {@link Short}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n     public void add(int index, Object value) {\n         addShort(index,((Short)value).shortValue());\n     }\n \n-    /** Returns <code>new Short({@link #removeShortAt(int) removeShortAt(index)})</code>. */\n+    /** \n+     * Returns <code>new Short({@link #removeShortAt(int) removeIntAt(index)})</code>. \n+     *\n+     * @param index  the index of the element to remove\n+     * @return  an {@link Short} object that wraps the value that was\n+     *   removed from that index\n+     * @throws IndexOutOfBoundsException  if the given index is negative\n+     *   or greater than or equal to {@link #size()}\n+     */\n     public Object remove(int index) {\n         return new Short(removeShortAt(index));\n     }\n \n-    /** Returns <code>{@link #removeShort(short) removeShort(((Short)value).shortValue())}</code>. */\n+    /** \n+     * Returns <code>{@link #removeShort(short) removeShort(((Short)value.shortValue())}</code>. \n+     *\n+     * @param value  an {@link Short} object that wraps the <Code>short</Code>\n+     *   value to remove\n+     * @return true if the first occurrence of that <Code>short</Code> value\n+     *   was removed from this list, or <Code>false</Code> if this list\n+     *   did not contain that <Code>short</Code> value\n+     * @throws ClassCastException if the given value is not an {@link Short}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n     public boolean remove(Object value) {\n         return removeShort(((Short)value).shortValue());\n     }\n+\n }\n+\n+\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+\n+\n+    \n--- a/src/java/org/apache/commons/collections/primitives/FloatArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/FloatArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/FloatArrayList.java,v 1.2 2002/06/21 03:50:40 mas Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/06/21 03:50:40 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/FloatArrayList.java,v 1.3 2002/08/13 19:41:36 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/13 19:41:36 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2002/06/21 03:50:40 $\n+ * A list backed by a <Code>float</Code> array.\n+ *\n+ * @version $Revision: 1.3 $ $Date: 2002/08/13 19:41:36 $\n  * @author Rodney Waldhoff \n  */\n public class FloatArrayList extends AbstractList implements List, Serializable {\n \n     //------------------------------------------------------------ Constructors\n-    \n+\n+    /**\n+     *  Constructs a new <Code>FloatArrayList</Code> with a default initial\n+     *  capacity.\n+     */\n     public FloatArrayList() {\n         this(8);\n     }\n \n+    /**\n+     *  Constructs a new <Code>FloatArrayList</Code> with the specified initial\n+     *  capacity.\n+     *\n+     *  @param capacity  the initial capacity for the list\n+     *  @throws IllegalArgumentException if capacity is less than or equal \n+     *   to zero\n+     */\n     public FloatArrayList(int capacity) {\n+        if (capacity <= 0) {\n+            throw new IllegalArgumentException(\"capacity=\" + capacity);\n+        }\n         _data = new float[capacity];\n     }\n \n     //--------------------------------------------------------------- Accessors\n-    \n+\n+    /**\n+     *  Returns the capacity of this list.\n+     *\n+     *  @return the capacity of this list\n+     */\n     public int capacity() {\n         return _data.length;\n     }\n \n+    /**\n+     *  Returns the size of this list.\n+     *\n+     *  @return the size of this list\n+     */\n     public int size() {\n         return _size;\n     }\n \n+    /**\n+     *  Returns a {@link Float} that wraps the <Code>float</Code> value at\n+     *  the given index.\n+     *\n+     *  @param index  the index of the <Code>float</Code>value to return\n+     *  @return  a {@link Float} that wraps the <Code>float</Code> value\n+     *   at that index\n+     *  @throws IndexOutOfBoundsException if the index is negative or \n+     *   greater than or equal to {@link #size()}\n+     */\n     public Object get(int index) {\n         checkRange(index);\n         return new Float(_data[index]);\n     }\n \n+    /**\n+     *  Returns the <Code>float</Code> value at the given index.\n+     *\n+     *  @param index  the index of the <Code>float</Code> value to return\n+     *  @return  the <Code>float</Code> value at that index\n+     *  @throws IndexOutOfBoundsException if the index is negative or \n+     *   greater than or equal to {@link #size()}\n+     */\n     public float getFloat(int index) {\n         checkRange(index);\n         return _data[index];\n     }\n \n+    /**\n+     *  Returns true if this list contains the given <Code>float</Code>\n+     *  value.\n+     *\n+     *  @param value  the <Code>float</COde> value to search for\n+     *  @return true if this list contains the given <Code>float</COde>\n+     *   value, false otherwise\n+     */\n     public boolean containsFloat(float value) {\n         return (-1 != indexOfFloat(value));\n     }\n \n+    /**\n+     *  Returns the index of the first occurrence of the given <Code>float</Code> \n+     *  value, or -1 if this list does not contain that value.\n+     *\n+     *  @param value  the <Code>float</COde> value to search for\n+     *  @return  the index of the first occurrence of that value, or -1\n+     *    if this list does not contain that value\n+     */\n     public int indexOfFloat(float value) {\n         for(int i=0;i<_size;i++) {\n             if(value == _data[i]) {\n         return -1;\n     }\n \n+    /**\n+     *  Returns the index of the last occurrence of the given <Code>float</Code> \n+     *  value, or -1 if this list does not contain that value.\n+     *\n+     *  @param value  the <Code>float</COde> value to search for\n+     *  @return  the index of the last occurrence of that value, or -1\n+     *    if this list does not contain that value\n+     */\n     public int lastIndexOfFloat(float value) {\n         for(int i=_size-1;i>=0;i--) {\n             if(value == _data[i]) {\n     }\n \n     //--------------------------------------------------------------- Modifiers\n-    \n+\n+    /**\n+     *  Sets the element at the given index to the given <Code>float</COde>\n+     *  value.\n+     *\n+     *  @param index  the index of the element to set\n+     *  @param value  the new <Code>float</Code> value for that element\n+     *  @return  the previous <Code>float</Code> value at that index\n+     *  @throws IndexOutOfBoundsException  if the index is negative or \n+     *   greater than or equal to {@link #size()}\n+     */\n     public float setFloat(int index, float value) {\n         checkRange(index);\n         float old = _data[index];\n         return old;\n     }\n \n+    /**\n+     *  Returns <Code>new Float({@link #setFloat(int,float) \n+     *  set(index, ((Float)value).floatValue())})</Code>.\n+     *\n+     *  @param index  the index of the element to set\n+     *  @param value  a {@link Float} instance that warps the new \n+     *    <Code>float</Code> value for that element\n+     *  @return  a {@link Float} instance that wraps the previous \n+     *    <Code>float</Code> value at that index\n+     *  @throws IndexOutOfBoundsException  if the index is negative or \n+     *   greater than or equal to {@link #size()}\n+     *  @throws ClassCastException  if the given value is not a {@link Float}\n+     *  @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n     public Object set(int index, Object value) {\n         Float f = (Float)value;\n         return new Float(setFloat(index, f.floatValue()));\n     }\n \n \n+    /**\n+     *  Adds the given <Code>float</COde> value to this list.\n+     *\n+     *  @param value  the <Code>float</COde> value to add\n+     *  @return true, always\n+     */\n     public boolean addFloat(float value) {\n         ensureCapacity(_size+1);\n         _data[_size++] = value;\n         return true;\n     }\n \n+    /**\n+     *  Inserts the given <code>float</Code> value into this list at the\n+     *  given index.\n+     *\n+     *  @param index  the index of the insertion\n+     *  @param value  the <Code>float</COde> value to insert at that index\n+     *  @throws IndexOutOfBoundsException  if the index is negative or \n+     *   greater than {@link #size()}\n+     */\n     public void addFloat(int index, float value) {\n         checkRangeIncludingEndpoint(index);\n         ensureCapacity(_size+1);\n         _size++;\n     }\n \n+\n+    /**\n+     *  Invokes {@link #addFloat(int,float)\n+     *  add(index, ((Float)value).floatValue())}.\n+     *\n+     *  @param index  the index of the insertion\n+     *  @param value  a {@link Float} instance that wraps the \n+     *     <Code>float</COde> value to insert at that index\n+     *  @throws IndexOutOfBoundsException  if the index is negative or \n+     *   greater than {@link #size()}\n+     *  @throws ClassCastException  if the given value is not a {@link Float}\n+     *  @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n     public void add(int index, Object value) {\n         addFloat(index,((Float)value).floatValue());\n     }\n \n+    /**\n+     *  Removes all <Code>float</Code> values from this list.\n+     */\n     public void clear() {\n         modCount++;\n         _size = 0;\n     }\n \n+    /**\n+     *  Removes the <Code>float</Code> at the given index.\n+     *\n+     *  @param index  the index of the <Code>float</Code> value to remove\n+     *  @return  the removed <Code>float</Code> value\n+     *  @throws IndexOutOfBoundsException  if the index is negative or \n+     *   greater than or equal to {@link #size()}\n+     */\n     public float removeFloatAt(int index) {\n         checkRange(index);\n         modCount++;\n         return oldval;\n     }\n \n+    /**\n+     *  Removes the first occurrence of the given <Code>float</Code> value\n+     *  from this list.\n+     *\n+     *  @param value  the <Code>float</Code> value to remove\n+     *  @return  true if the first occurrence of that value was removed, or\n+     *   false if this list did not contain that value\n+     */\n     public boolean removeFloat(float value) {\n         int index = indexOfFloat(value);\n         if(-1 == index) {\n         }\n     }\n \n+    /**\n+     *  Removes the <Code>float</Code> at the given index.\n+     *\n+     *  @param index  the index of the <Code>float</Code> value to remove\n+     *  @return  a {@link Float} instance that wraps the removed \n+     *    <Code>float</Code> value\n+     *  @throws IndexOutOfBoundsException  if the index is negative or \n+     *   greater than or equal to {@link #size()}\n+     */\n     public Object remove(int index) {\n         return new Float(removeFloatAt(index));\n     }\n \n+    /**\n+     *  Ensures that the internal array is big enough to hold the specified\n+     *  number of elements.\n+     *\n+     *  @param mincap  the minium capacity\n+     */\n     public void ensureCapacity(int mincap) {\n         modCount++;\n         if(mincap > _data.length) {\n         }\n     }\n \n+    /**\n+     *  Trims this list such that {@link #capacity()} is equal to \n+     *  {@link #size()}.\n+     */\n     public void trimToSize() {\n         modCount++;\n         if(_size < _data.length) {\n--- a/src/java/org/apache/commons/collections/primitives/IntArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/06/04 16:01:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntArrayList.java,v 1.2 2002/08/13 19:41:36 pjack Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/13 19:41:36 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * A list of <Code>int</Code> elements.\n+ *\n+ * @version $Revision: 1.2 $ $Date: 2002/08/13 19:41:36 $\n  * @author Rodney Waldhoff \n  */\n public class IntArrayList extends AbstractIntArrayList implements List, Serializable {\n \n-    //------------------------------------------------------------ Constructors\n-    \n+    //------------------------------------------------------------ Constructors  \n+\n+    /**\n+     *  Constructs a new <Code>IntArrayList</Code> with a default capacity.\n+     */\n     public IntArrayList() {\n         this(8);\n     }\n \n+    /**\n+     *  Constructs a new <Code>IntArrayList</Code> with the given capacity.\n+     *\n+     *  @param the capacity for the list\n+     *  @throws IllegalArgumentException  if the capacity is less than or\n+     *   equal to zero\n+     */\n     public IntArrayList(int capacity) {\n+        if (capacity <= 0) {\n+            throw new IllegalArgumentException(\"capacity \" + capacity);\n+        }\n         _data = new int[capacity];\n     }\n \n     //--------------------------------------------------------------- Accessors\n-    \n+\n+    // Note: JavaDoc for these methods is inherited from the superclass.\n+\n     public int capacity() {\n         return _data.length;\n     }\n     }\n \n     //--------------------------------------------------------------- Modifiers\n+\n+    // Note: JavaDoc for these methods is inherited from the superclass.\n     \n     public int setInt(int index, int value) {\n         checkRange(index);\n--- a/src/java/org/apache/commons/collections/primitives/LongArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/LongArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/LongArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/06/04 16:01:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/LongArrayList.java,v 1.2 2002/08/13 19:41:36 pjack Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/13 19:41:36 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * A list of <Code>long</COde> elements.\n+ *\n+ * @version $Revision: 1.2 $ $Date: 2002/08/13 19:41:36 $\n  * @author Rodney Waldhoff \n  */\n public class LongArrayList extends AbstractLongArrayList implements List, Serializable {\n \n     //------------------------------------------------------------ Constructors\n     \n+    /**\n+     *  Constructs a new <Code>LongArrayList</CodE> with a default initial\n+     *  capacity.\n+     */\n     public LongArrayList() {\n         this(8);\n     }\n \n+    /**\n+     *  Constructs a new <Code>LongArrayList</CodE> with the given initial\n+     *  capacity.\n+     *\n+     *  @param capacity  the initial capacity for the array\n+     *  @throws IllegalArgumentException if the capacity is less than or \n+     *    equal to zero\n+     */\n     public LongArrayList(int capacity) {\n+        if (capacity <= 0) {\n+            throw new IllegalArgumentException(\"capacity=\" + capacity);\n+        }\n         _data = new long[capacity];\n     }\n \n--- a/src/java/org/apache/commons/collections/primitives/ShortArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ShortArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/06/04 16:01:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ShortArrayList.java,v 1.2 2002/08/13 19:41:36 pjack Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/13 19:41:36 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * A list of <Code>short</Code> elements.\n+ * \n+ * @version $Revision: 1.2 $ $Date: 2002/08/13 19:41:36 $\n  * @author Rodney Waldhoff \n  */\n public class ShortArrayList extends AbstractShortArrayList implements List, Serializable {\n \n     //------------------------------------------------------------ Constructors\n     \n+    /**\n+     *  Constructs a new <Code>ShortArrayList</CodE> with a default initial\n+     *  capacity.\n+     */\n     public ShortArrayList() {\n         this(8);\n     }\n \n+    /**\n+     *  Constructs a new <Code>ShortArrayList</CodE> with the given initial\n+     *  capacity.\n+     *\n+     *  @param capacity  the initial capacity for the array\n+     *  @throws IllegalArgumentException if the capacity is less than or \n+     *    equal to zero\n+     */\n     public ShortArrayList(int capacity) {\n+        if (capacity <= 0) {\n+            throw new IllegalArgumentException(\"capacity=\" + capacity);\n+        }\n         _data = new short[capacity];\n     }\n \n--- a/src/java/org/apache/commons/collections/primitives/UnsignedByteArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedByteArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedByteArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/06/04 16:01:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedByteArrayList.java,v 1.2 2002/08/13 19:41:36 pjack Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/13 19:41:36 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * A list of unsigned 8-bit values, stored in a <Code>short</Code> array.\n+ * Mutators on this class will reject any <Code>short</Code> that does not\n+ * express an unsigned 8-bit value.\n+ *\n+ * @version $Revision: 1.2 $ $Date: 2002/08/13 19:41:36 $\n  * @author Rodney Waldhoff \n  */\n public class UnsignedByteArrayList extends AbstractShortArrayList implements List, Serializable {\n \n     //------------------------------------------------------------ Constructors\n     \n+    /**\n+     *  Constructs a new <Code>UnsignedByteArrayList</Code> with a \n+     *  default initial capacity.\n+     */\n     public UnsignedByteArrayList() {\n         this(8);\n     }\n \n+    /**\n+     *  Constructs a new <Code>UnsignedByteArrayList</Code> with the \n+     *  specified initial capacity.\n+     *\n+     *  @param capacity  the capacity for this list\n+     *  @throws IllegalArgumentException if the given capacity is less than \n+     *    or equal to zero\n+     */\n     public UnsignedByteArrayList(int capacity) {\n+        if (capacity <= 0) {\n+            throw new IllegalArgumentException(\"capacity=\" + capacity);\n+        }\n         _data = new byte[capacity];\n     }\n \n \n     private transient byte[] _data = null;\n     private int _size = 0;\n+\n+    /**\n+     *  The maximum possible unsigned 8-bit value.\n+     */\n     public static final short MAX_VALUE = 0xFF;\n+\n+    /**\n+     *  The minimum possible unsigned 8-bit value.\n+     */\n     public static final short MIN_VALUE = 0;\n }\n--- a/src/java/org/apache/commons/collections/primitives/UnsignedIntArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedIntArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/06/04 16:01:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedIntArrayList.java,v 1.2 2002/08/13 19:41:36 pjack Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/13 19:41:36 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * A list of unsigned 32-bit values, stored in a <Code>long</Code> array.\n+ * Mutators on this class will reject any <Code>long</Code> that does not\n+ * express an unsigned 16-bit value.\n+ *\n+ * @version $Revision: 1.2 $ $Date: 2002/08/13 19:41:36 $\n  * @author Rodney Waldhoff \n  */\n public class UnsignedIntArrayList extends AbstractLongArrayList implements List, Serializable {\n \n     //------------------------------------------------------------ Constructors\n     \n+    /**\n+     *  Constructs a new <Code>UnsignedIntArrayList</Code> with a \n+     *  default initial capacity.\n+     */\n     public UnsignedIntArrayList() {\n         this(8);\n     }\n \n+    /**\n+     *  Constructs a new <Code>UnsignedIntArrayList</Code> with the \n+     *  specified initial capacity.\n+     *\n+     *  @param capacity  the capacity for this list\n+     *  @throws IllegalArgumentException if the given capacity is less than \n+     *    or equal to zero\n+     */\n     public UnsignedIntArrayList(int capacity) {\n+        if (capacity <= 0) {\n+            throw new IllegalArgumentException(\"capacity=\" + capacity);\n+        }\n         _data = new int[capacity];\n     }\n \n \n     private transient int[] _data = null;\n     private int _size = 0;\n+\n+    /**\n+     *  The maximum possible unsigned 32-bit value.\n+     */\n     public static final long MAX_VALUE = 0xFFFFFFFFL;\n+\n+    /**\n+     *  The minimum possible unsigned 32-bit value.\n+     */\n     public static final long MIN_VALUE = 0L;\n }\n--- a/src/java/org/apache/commons/collections/primitives/UnsignedShortArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedShortArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/06/04 16:01:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedShortArrayList.java,v 1.2 2002/08/13 19:41:36 pjack Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/13 19:41:36 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * A list of unsigned 16-bit values, stored in an <Code>int</Code> array.\n+ * Mutators on this class will reject any <Code>int</Code> that does not\n+ * express an unsigned 16-bit value.\n+ *\n+ * @version $Revision: 1.2 $ $Date: 2002/08/13 19:41:36 $\n  * @author Rodney Waldhoff \n  */\n public class UnsignedShortArrayList extends AbstractIntArrayList implements List, Serializable {\n \n     //------------------------------------------------------------ Constructors\n     \n+    /**\n+     *  Constructs a new <Code>UnsignedShortArrayList</Code> with a \n+     *  default initial capacity.\n+     */\n     public UnsignedShortArrayList() {\n         this(8);\n     }\n \n+\n+    /**\n+     *  Constructs a new <Code>UnsignedShortArrayList</Code> with the \n+     *  specified initial capacity.\n+     *\n+     *  @param capacity  the capacity for this list\n+     *  @throws IllegalArgumentException if the given capacity is less than \n+     *    or equal to zero\n+     */\n     public UnsignedShortArrayList(int capacity) {\n+        if (capacity <= 0) {\n+            throw new IllegalArgumentException(\"capacity=\" + capacity);\n+        }\n         _data = new short[capacity];\n     }\n \n     }\n \n     //--------------------------------------------------------------- Modifiers\n-    \n+\n     public int setInt(int index, int value) {\n         assertValidUnsignedShort(value);\n         checkRange(index);\n \n     private transient short[] _data = null;\n     private int _size = 0;\n+\n+    /**\n+     *  The maximum possible unsigned 16-bit value.\n+     */\n     public static final int MAX_VALUE = 0xFFFF;\n+\n+\n+    /**\n+     *  The minimum possible unsigned 16-bit value.\n+     */\n     public static final int MIN_VALUE = 0;\n }", "timestamp": 1029267696, "metainfo": ""}