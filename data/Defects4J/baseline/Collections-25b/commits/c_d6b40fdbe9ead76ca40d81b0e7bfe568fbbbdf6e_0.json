{"sha": "d6b40fdbe9ead76ca40d81b0e7bfe568fbbbdf6e", "log": "Remove trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/set/AbstractSerializableSetDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/set/AbstractSerializableSetDecorator.java\n \n     /**\n      * Constructor.\n-     * \n+     *\n      * @param set  the list to decorate, must not be null\n      * @throws IllegalArgumentException if set is null\n      */\n     //-----------------------------------------------------------------------\n     /**\n      * Write the set out using a custom routine.\n-     * \n+     *\n      * @param out  the output stream\n      * @throws IOException\n      */\n \n     /**\n      * Read the set in using a custom routine.\n-     * \n+     *\n      * @param in  the input stream\n      * @throws IOException\n      * @throws ClassNotFoundException\n--- a/src/main/java/org/apache/commons/collections4/set/AbstractSetDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/set/AbstractSetDecorator.java\n \n     /**\n      * Constructor that wraps (not copies).\n-     * \n+     *\n      * @param set  the set to decorate, must not be null\n      * @throws IllegalArgumentException if set is null\n      */\n \n     /**\n      * Gets the set being decorated.\n-     * \n+     *\n      * @return the decorated set\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/collections4/set/AbstractSortedSetDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/set/AbstractSortedSetDecorator.java\n \n     /**\n      * Constructor that wraps (not copies).\n-     * \n+     *\n      * @param set  the set to decorate, must not be null\n      * @throws IllegalArgumentException if set is null\n      */\n \n     /**\n      * Gets the set being decorated.\n-     * \n+     *\n      * @return the decorated set\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/collections4/set/CompositeSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/CompositeSet.java\n  * anymore due to its input restrictions (only accepts Sets).\n  * See <a href=\"https://issues.apache.org/jira/browse/COLLECTIONS-424\">COLLECTIONS-424</a>\n  * for more details.\n- * \n+ *\n  * @since 3.0\n  * @version $Id$\n  */\n \n     /**\n      * Create a composite set with sets as the initial set of composited Sets.\n-     * \n+     *\n      * @param sets  the initial sets in the composite\n      */\n     public CompositeSet(final Set<E>... sets) {\n--- a/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java\n  * set.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n- * \n+ *\n  * @since 3.0\n  * @version $Id$\n  */\n      * use.\n      * <p>\n      * The list and set must both be empty.\n-     * \n+     *\n      * @param <E> the element type\n      * @param set the set to decorate, must be empty and not null\n      * @param list the list to decorate, must be empty and not null\n      * Factory method to create an ordered set.\n      * <p>\n      * An <code>ArrayList</code> is used to retain order.\n-     * \n+     *\n      * @param <E> the element type\n      * @param set the set to decorate, must not be null\n      * @return a new ordered set\n      * <p>\n      * NOTE: If the list contains duplicates, the duplicates are removed,\n      * altering the specified list.\n-     * \n+     *\n      * @param <E> the element type\n      * @param list the list to decorate, must not be null\n      * @return a new ordered set\n     /**\n      * Constructs a new empty <code>ListOrderedSet</code> using a\n      * <code>HashSet</code> and an <code>ArrayList</code> internally.\n-     * \n+     *\n      * @since 3.1\n      */\n     public ListOrderedSet() {\n \n     /**\n      * Constructor that wraps (not copies).\n-     * \n+     *\n      * @param set the set to decorate, must not be null\n      * @throws IllegalArgumentException if set is null\n      */\n      * use.\n      * <p>\n      * The set and list must both be correctly initialised to the same elements.\n-     * \n+     *\n      * @param set the set to decorate, must not be null\n      * @param list the list to decorate, must not be null\n      * @throws IllegalArgumentException if set or list is null\n     // -----------------------------------------------------------------------\n     /**\n      * Gets an unmodifiable view of the order of the Set.\n-     * \n+     *\n      * @return an unmodifiable list view\n      */\n     public List<E> asList() {\n \n     /**\n      * Returns the element at the specified position in this ordered set.\n-     * \n+     *\n      * @param index the position of the element in the ordered {@link Set}.\n      * @return the element at position {@code index}\n      * @see List#get(int)\n     /**\n      * Returns the index of the first occurrence of the specified element in\n      * ordered set.\n-     * \n+     *\n      * @param object the element to search for\n      * @return the index of the first occurrence of the object, or {@code -1} if\n      *         this ordered set does not contain this object\n      * Inserts the specified element at the specified position if it is not yet\n      * contained in this ordered set (optional operation). Shifts the element\n      * currently at this position and any subsequent elements to the right.\n-     * \n+     *\n      * @param index the index at which the element is to be inserted\n      * @param object the element to be inserted\n      * @see List#add(int, Object)\n      * ordered set at the specified position (optional operation). Shifts the\n      * element currently at the position and all subsequent elements to the\n      * right.\n-     * \n+     *\n      * @param index the position to insert the elements\n      * @param coll the collection containing the elements to be inserted\n      * @return {@code true} if this ordered set changed as a result of the call\n     /**\n      * Removes the element at the specified position from the ordered set.\n      * Shifts any subsequent elements to the left.\n-     * \n+     *\n      * @param index the index of the element to be removed\n      * @return the element that has been remove from the ordered set\n      * @see List#remove(int)\n      * Uses the underlying List's toString so that order is achieved. This means\n      * that the decorated Set's toString is not used, so any custom toStrings\n      * will be ignored.\n-     * \n+     *\n      * @return a string representation of the ordered set\n      */\n     // Fortunately List.toString and Set.toString look the same\n--- a/src/main/java/org/apache/commons/collections4/set/MapBackedSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/MapBackedSet.java\n \n     /**\n      * Factory method to create a set from a map.\n-     * \n+     *\n      * @param <E> the element type\n      * @param <V> the dummy value type in the map\n      * @param map  the map to decorate, must not be null\n \n     /**\n      * Factory method to create a set from a map.\n-     * \n+     *\n      * @param <E> the element type\n      * @param <V> the dummy value type in the map\n      * @param map  the map to decorate, must not be null\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n-     * \n+     *\n      * @param map  the map to decorate, must not be null\n      * @param dummyValue  the dummy value to use\n      * @throws IllegalArgumentException if map is null\n--- a/src/main/java/org/apache/commons/collections4/set/PredicatedSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/PredicatedSet.java\n      * <p>\n      * If there are any elements already in the set being decorated, they\n      * are validated.\n-     * \n+     *\n      * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * <p>\n      * If there are any elements already in the set being decorated, they\n      * are validated.\n-     * \n+     *\n      * @param set  the set to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @throws IllegalArgumentException if set or predicate is null\n \n     /**\n      * Gets the set being decorated.\n-     * \n+     *\n      * @return the decorated set\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/collections4/set/PredicatedSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/PredicatedSortedSet.java\n      * <p>\n      * If there are any elements already in the set being decorated, they\n      * are validated.\n-     * \n+     *\n      * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * <p>\n      * If there are any elements already in the set being decorated, they\n      * are validated.\n-     * \n+     *\n      * @param set  the set to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @throws IllegalArgumentException if set or predicate is null\n \n     /**\n      * Gets the sorted set being decorated.\n-     * \n+     *\n      * @return the decorated sorted set\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/collections4/set/TransformedSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/TransformedSet.java\n      * If there are any elements already in the set being decorated, they\n      * are NOT transformed.\n      * Contrast this with {@link #transformedSet(Set, Transformer)}.\n-     * \n+     *\n      * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n             final Transformer<? super E, ? extends E> transformer) {\n         return new TransformedSet<E>(set, transformer);\n     }\n-    \n+\n     /**\n      * Factory method to create a transforming set that will transform\n      * existing contents of the specified set.\n      * If there are any elements already in the set being decorated, they\n      * will be transformed by this method.\n      * Contrast this with {@link #transformingSet(Set, Transformer)}.\n-     * \n+     *\n      * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * <p>\n      * If there are any elements already in the set being decorated, they\n      * are NOT transformed.\n-     * \n+     *\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @throws IllegalArgumentException if set or transformer is null\n--- a/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java\n      * If there are any elements already in the set being decorated, they\n      * are NOT transformed.\n      * Contrast this with {@link #transformedSortedSet(SortedSet, Transformer)}.\n-     * \n+     *\n      * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n             final Transformer<? super E, ? extends E> transformer) {\n         return new TransformedSortedSet<E>(set, transformer);\n     }\n-    \n+\n     /**\n      * Factory method to create a transforming sorted set that will transform\n      * existing contents of the specified sorted set.\n      * If there are any elements already in the set being decorated, they\n      * will be transformed by this method.\n      * Contrast this with {@link #transformingSortedSet(SortedSet, Transformer)}.\n-     * \n+     *\n      * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * <p>\n      * If there are any elements already in the set being decorated, they\n      * are NOT transformed.\n-     * \n+     *\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @throws IllegalArgumentException if set or transformer is null\n \n     /**\n      * Gets the decorated set.\n-     * \n+     *\n      * @return the decorated set\n      */\n     protected SortedSet<E> getSortedSet() {\n--- a/src/main/java/org/apache/commons/collections4/set/UnmodifiableSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/UnmodifiableSet.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  * <p>\n- * Attempts to modify it will result in an UnsupportedOperationException. \n+ * Attempts to modify it will result in an UnsupportedOperationException.\n  *\n  * @since 3.0\n  * @version $Id$\n \n     /**\n      * Factory method to create an unmodifiable set.\n-     * \n+     *\n      * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @return a new unmodifiable set\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n-     * \n+     *\n      * @param set  the set to decorate, must not be null\n      * @throws IllegalArgumentException if set is null\n      */\n--- a/src/main/java/org/apache/commons/collections4/set/UnmodifiableSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/UnmodifiableSortedSet.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  * <p>\n- * Attempts to modify it will result in an UnsupportedOperationException. \n+ * Attempts to modify it will result in an UnsupportedOperationException.\n  *\n  * @since 3.0\n  * @version $Id$\n \n     /**\n      * Factory method to create an unmodifiable set.\n-     * \n+     *\n      * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @return a new unmodifiable {@link SortedSet}\n     //-----------------------------------------------------------------------\n     /**\n      * Write the collection out using a custom routine.\n-     * \n+     *\n      * @param out  the output stream\n      * @throws IOException\n      */\n \n     /**\n      * Read the collection in using a custom routine.\n-     * \n+     *\n      * @param in  the input stream\n      * @throws IOException\n      * @throws ClassNotFoundException\n      */\n-    @SuppressWarnings(\"unchecked\") // (1) should only fail if input stream is incorrect \n+    @SuppressWarnings(\"unchecked\") // (1) should only fail if input stream is incorrect\n     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n         collection = (Collection<E>) in.readObject(); // (1)\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n-     * \n+     *\n      * @param set  the set to decorate, must not be null\n      * @throws IllegalArgumentException if set is null\n      */", "timestamp": 1367346673, "metainfo": ""}