{"sha": "fa2ac96916b525220b65724f54045a4a7ac19d98", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r753392 | mbenson | 2009-03-13 13:39:53 -0700 (Fri, 13 Mar 2009) | 1 line          revert IteratorUtils stuff; toList() works fine for this--duh     ------------------------------------------------------------------------     r751850 | mbenson | 2009-03-09 14:34:44 -0700 (Mon, 09 Mar 2009) | 1 line          add iterable(Iterator)     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestIteratorUtils.java\n+++ b/src/test/org/apache/commons/collections/TestIteratorUtils.java\n     }\n \n     public void testToList() {\n-        List list = new ArrayList();\n+        List<Object> list = new ArrayList<Object>();\n         list.add(new Integer(1));\n         list.add(\"Two\");\n         list.add(null);\n-        List result = IteratorUtils.toList(list.iterator());\n+        List<Object> result = IteratorUtils.toList(list.iterator());\n         assertEquals(list, result);\n     }\n \n     public void testToArray() {\n-        List list = new ArrayList();\n+        List<Object> list = new ArrayList<Object>();\n         list.add(new Integer(1));\n         list.add(\"Two\");\n         list.add(null);\n     }\n \n     public void testToArray2() {\n-        List list = new ArrayList();\n+        List<String> list = new ArrayList<String>();\n         list.add(\"One\");\n         list.add(\"Two\");\n         list.add(null);\n         String[] result = (String[]) IteratorUtils.toArray(list.iterator(), String.class);\n         assertEquals(list, Arrays.asList(result));\n     }\n-    \n+\n     public void testArrayIterator() {\n         Object[] objArray = {\"a\", \"b\", \"c\"};\n-        ResettableIterator iterator = IteratorUtils.arrayIterator(objArray);\n+        ResettableIterator<Object> iterator = IteratorUtils.arrayIterator(objArray);\n         assertTrue(iterator.next().equals(\"a\"));\n         assertTrue(iterator.next().equals(\"b\"));\n         iterator.reset();\n         assertTrue(iterator.next().equals(\"a\"));\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayIterator(new Integer(0));\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n                 // expected\n         }\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayIterator(null);\n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n                 // expected\n         }\n-        \n+\n         iterator = IteratorUtils.arrayIterator(objArray, 1);\n         assertTrue(iterator.next().equals(\"b\"));\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayIterator(objArray, -1);\n             fail(\"Expecting IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException ex) {\n             // expected\n         }\n-        \n+\n         iterator = IteratorUtils.arrayIterator(objArray, 3);\n         assertTrue(!iterator.hasNext());\n         iterator.reset();\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayIterator(objArray, 4);\n             fail(\"Expecting IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException ex) {\n             // expected\n         }\n-        \n+\n         iterator = IteratorUtils.arrayIterator(objArray, 2, 3);\n         assertTrue(iterator.next().equals(\"c\"));\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayIterator(objArray, 2, 4);\n             fail(\"Expecting IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException ex) {\n             // expected\n         }\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayIterator(objArray, -1, 1);\n             fail(\"Expecting IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException ex) {\n             // expected\n         }\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayIterator(objArray, 2, 1);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n-        \n+\n         int[] intArray = {0, 1, 2};\n         iterator = IteratorUtils.arrayIterator(intArray);\n         assertTrue(iterator.next().equals(new Integer(0)));\n         assertTrue(iterator.next().equals(new Integer(1)));\n         iterator.reset();\n         assertTrue(iterator.next().equals(new Integer(0)));\n-        \n+\n         iterator = IteratorUtils.arrayIterator(intArray, 1);\n         assertTrue(iterator.next().equals(new Integer(1)));\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayIterator(intArray, -1);\n             fail(\"Expecting IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException ex) {\n             // expected\n         }\n-        \n+\n         iterator = IteratorUtils.arrayIterator(intArray, 3);\n         assertTrue(!iterator.hasNext());\n         iterator.reset();\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayIterator(intArray, 4);\n             fail(\"Expecting IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException ex) {\n             // expected\n         }\n-        \n+\n         iterator = IteratorUtils.arrayIterator(intArray, 2, 3);\n         assertTrue(iterator.next().equals(new Integer(2)));\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayIterator(intArray, 2, 4);\n             fail(\"Expecting IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException ex) {\n             // expected\n         }\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayIterator(intArray, -1, 1);\n             fail(\"Expecting IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException ex) {\n             // expected\n         }\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayIterator(intArray, 2, 1);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n-        }          \n-    }\n-    \n+        }\n+    }\n+\n     public void testArrayListIterator() {\n         Object[] objArray = {\"a\", \"b\", \"c\", \"d\"};\n-        ResettableListIterator iterator = IteratorUtils.arrayListIterator(objArray);\n+        ResettableListIterator<Object> iterator = IteratorUtils.arrayListIterator(objArray);\n         assertTrue(!iterator.hasPrevious());\n         assertTrue(iterator.previousIndex() == -1);\n         assertTrue(iterator.nextIndex() == 0);\n         assertTrue(iterator.next().equals(\"d\"));\n         assertTrue(iterator.nextIndex() == 4); // size of list\n         assertTrue(iterator.previousIndex() == 3);\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayListIterator(new Integer(0));\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n                 // expected\n         }\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayListIterator(null);\n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n                 // expected\n         }\n-        \n+\n         iterator = IteratorUtils.arrayListIterator(objArray, 1);\n-        assertTrue(iterator.previousIndex() == -1); \n+        assertTrue(iterator.previousIndex() == -1);\n         assertTrue(!iterator.hasPrevious());\n-        assertTrue(iterator.nextIndex() == 0); \n+        assertTrue(iterator.nextIndex() == 0);\n         assertTrue(iterator.next().equals(\"b\"));\n-        assertTrue(iterator.previousIndex() == 0);        \n-        \n+        assertTrue(iterator.previousIndex() == 0);\n+\n         try {\n             iterator = IteratorUtils.arrayListIterator(objArray, -1);\n             fail(\"Expecting IndexOutOfBoundsException.\");\n         } catch (IndexOutOfBoundsException ex) {\n             // expected\n         }\n-        \n+\n         iterator = IteratorUtils.arrayListIterator(objArray, 3);\n         assertTrue(iterator.hasNext());\n         try {\n-            Object x = iterator.previous();\n+            iterator.previous();\n             fail(\"Expecting NoSuchElementException.\");\n         } catch (NoSuchElementException ex) {\n             // expected\n         }\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayListIterator(objArray, 5);\n             fail(\"Expecting IndexOutOfBoundsException.\");\n         } catch (IndexOutOfBoundsException ex) {\n             // expected\n         }\n-        \n+\n         iterator = IteratorUtils.arrayListIterator(objArray, 2, 3);\n         assertTrue(iterator.next().equals(\"c\"));\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayListIterator(objArray, 2, 5);\n             fail(\"Expecting IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException ex) {\n             // expected\n         }\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayListIterator(objArray, -1, 1);\n             fail(\"Expecting IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException ex) {\n             // expected\n         }\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayListIterator(objArray, 2, 1);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n-        \n+\n         int[] intArray = {0, 1, 2};\n         iterator = IteratorUtils.arrayListIterator(intArray);\n-        assertTrue(iterator.previousIndex() == -1); \n+        assertTrue(iterator.previousIndex() == -1);\n         assertTrue(!iterator.hasPrevious());\n-        assertTrue(iterator.nextIndex() == 0); \n+        assertTrue(iterator.nextIndex() == 0);\n         assertTrue(iterator.next().equals(new Integer(0)));\n-        assertTrue(iterator.previousIndex() == 0); \n-        assertTrue(iterator.nextIndex() == 1); \n+        assertTrue(iterator.previousIndex() == 0);\n+        assertTrue(iterator.nextIndex() == 1);\n         assertTrue(iterator.next().equals(new Integer(1)));\n-        assertTrue(iterator.previousIndex() == 1); \n-        assertTrue(iterator.nextIndex() == 2); \n+        assertTrue(iterator.previousIndex() == 1);\n+        assertTrue(iterator.nextIndex() == 2);\n         assertTrue(iterator.previous().equals(new Integer(1)));\n         assertTrue(iterator.next().equals(new Integer(1)));\n-        \n+\n         iterator = IteratorUtils.arrayListIterator(intArray, 1);\n-        assertTrue(iterator.previousIndex() == -1); \n+        assertTrue(iterator.previousIndex() == -1);\n         assertTrue(!iterator.hasPrevious());\n-        assertTrue(iterator.nextIndex() == 0); \n+        assertTrue(iterator.nextIndex() == 0);\n         assertTrue(iterator.next().equals(new Integer(1)));\n         assertTrue(iterator.previous().equals(new Integer(1)));\n         assertTrue(iterator.next().equals(new Integer(1)));\n-        assertTrue(iterator.previousIndex() == 0); \n-        assertTrue(iterator.nextIndex() == 1); \n+        assertTrue(iterator.previousIndex() == 0);\n+        assertTrue(iterator.nextIndex() == 1);\n         assertTrue(iterator.next().equals(new Integer(2)));\n-        assertTrue(iterator.previousIndex() == 1); \n-        assertTrue(iterator.nextIndex() == 2); \n+        assertTrue(iterator.previousIndex() == 1);\n+        assertTrue(iterator.nextIndex() == 2);\n         assertTrue(iterator.previous().equals(new Integer(2)));\n-        assertTrue(iterator.previousIndex() == 0); \n-        assertTrue(iterator.nextIndex() == 1); \n-        \n+        assertTrue(iterator.previousIndex() == 0);\n+        assertTrue(iterator.nextIndex() == 1);\n+\n         try {\n             iterator = IteratorUtils.arrayListIterator(intArray, -1);\n             fail(\"Expecting IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException ex) {\n             // expected\n         }\n-        \n+\n         iterator = IteratorUtils.arrayListIterator(intArray, 3);\n         assertTrue(!iterator.hasNext());\n-     \n+\n         try {\n             iterator = IteratorUtils.arrayListIterator(intArray, 4);\n             fail(\"Expecting IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException ex) {\n             // expected\n         }\n-        \n+\n         iterator = IteratorUtils.arrayListIterator(intArray, 2, 3);\n         assertTrue(!iterator.hasPrevious());\n         assertTrue(iterator.previousIndex() == -1);\n         assertTrue(iterator.next().equals(new Integer(2)));\n         assertTrue(iterator.hasPrevious());\n         assertTrue(!iterator.hasNext());\n-        \n-        \n+\n+\n         try {\n             iterator = IteratorUtils.arrayListIterator(intArray, 2, 4);\n             fail(\"Expecting IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException ex) {\n             // expected\n         }\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayListIterator(intArray, -1, 1);\n             fail(\"Expecting IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException ex) {\n             // expected\n         }\n-        \n+\n         try {\n             iterator = IteratorUtils.arrayListIterator(intArray, 2, 1);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n-        }          \n-    }\n-        \n+        }\n+    }\n+\n \n     /**\n      * Gets an immutable Iterator operating on the elements [\"a\", \"b\", \"c\", \"d\"].\n      */\n-    private Iterator getImmutableIterator() {\n-        List list = new ArrayList();\n+    private Iterator<String> getImmutableIterator() {\n+        List<String> list = new ArrayList<String>();\n         list.add(\"a\");\n         list.add(\"b\");\n         list.add(\"c\");\n     /**\n      * Gets an immutable ListIterator operating on the elements [\"a\", \"b\", \"c\", \"d\"].\n      */\n-    private ListIterator getImmutableListIterator() {\n-        List list = new ArrayList();\n+    private ListIterator<String> getImmutableListIterator() {\n+        List<String> list = new ArrayList<String>();\n         list.add(\"a\");\n         list.add(\"b\");\n         list.add(\"c\");\n             fail();\n         } catch (IllegalStateException ex) {}\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Test empty list iterator\n             fail();\n         } catch (UnsupportedOperationException ex) {}\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Test empty map iterator\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public void testEmptyMapIterator() {\n         assertSame(EmptyMapIterator.INSTANCE, IteratorUtils.EMPTY_MAP_ITERATOR);\n         assertEquals(true, IteratorUtils.EMPTY_MAP_ITERATOR instanceof Iterator);\n         assertEquals(false, IteratorUtils.EMPTY_MAP_ITERATOR instanceof OrderedIterator);\n         assertEquals(false, IteratorUtils.EMPTY_MAP_ITERATOR instanceof OrderedMapIterator);\n         assertEquals(false, IteratorUtils.EMPTY_MAP_ITERATOR.hasNext());\n-        ((ResettableIterator) IteratorUtils.EMPTY_MAP_ITERATOR).reset();\n+        ((ResettableIterator<Object>) IteratorUtils.EMPTY_MAP_ITERATOR).reset();\n         assertSame(IteratorUtils.EMPTY_MAP_ITERATOR, IteratorUtils.EMPTY_MAP_ITERATOR);\n         assertSame(IteratorUtils.EMPTY_MAP_ITERATOR, IteratorUtils.emptyMapIterator());\n         try {\n             fail();\n         } catch (IllegalStateException ex) {}\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Test empty map iterator\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public void testEmptyOrderedIterator() {\n         assertSame(EmptyOrderedIterator.INSTANCE, IteratorUtils.EMPTY_ORDERED_ITERATOR);\n         assertEquals(true, IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof Iterator);\n         assertEquals(false, IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof MapIterator);\n         assertEquals(false, IteratorUtils.EMPTY_ORDERED_ITERATOR.hasNext());\n         assertEquals(false, IteratorUtils.EMPTY_ORDERED_ITERATOR.hasPrevious());\n-        ((ResettableIterator) IteratorUtils.EMPTY_ORDERED_ITERATOR).reset();\n+        ((ResettableIterator<Object>) IteratorUtils.EMPTY_ORDERED_ITERATOR).reset();\n         assertSame(IteratorUtils.EMPTY_ORDERED_ITERATOR, IteratorUtils.EMPTY_ORDERED_ITERATOR);\n         assertSame(IteratorUtils.EMPTY_ORDERED_ITERATOR, IteratorUtils.emptyOrderedIterator());\n         try {\n             fail();\n         } catch (IllegalStateException ex) {}\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Test empty map iterator\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public void testEmptyOrderedMapIterator() {\n         assertSame(EmptyOrderedMapIterator.INSTANCE, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR);\n         assertEquals(true, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof Iterator);\n         assertEquals(false, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ListIterator);\n         assertEquals(false, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasNext());\n         assertEquals(false, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasPrevious());\n-        ((ResettableIterator) IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR).reset();\n+        ((ResettableIterator<Object>) IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR).reset();\n         assertSame(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR);\n         assertSame(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR, IteratorUtils.emptyOrderedMapIterator());\n         try {\n             fail();\n         } catch (IllegalStateException ex) {}\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Test next() and hasNext() for an immutable Iterator.\n      */\n     public void testUnmodifiableIteratorIteration() {\n-        Iterator iterator = getImmutableIterator();\n+        Iterator<String> iterator = getImmutableIterator();\n \n         assertTrue(iterator.hasNext());\n \n      * ListIterator.\n      */\n     public void testUnmodifiableListIteratorIteration() {\n-        ListIterator listIterator = getImmutableListIterator();\n+        ListIterator<String> listIterator = getImmutableListIterator();\n \n         assertTrue(!listIterator.hasPrevious());\n         assertTrue(listIterator.hasNext());\n      * Test remove() for an immutable Iterator.\n      */\n     public void testUnmodifiableIteratorImmutability() {\n-        Iterator iterator = getImmutableIterator();\n+        Iterator<String> iterator = getImmutableIterator();\n \n         try {\n             iterator.remove();\n      * Test remove() for an immutable ListIterator.\n      */\n     public void testUnmodifiableListIteratorImmutability() {\n-        ListIterator listIterator = getImmutableListIterator();\n+        ListIterator<String> listIterator = getImmutableListIterator();\n \n         try {\n             listIterator.remove();\n             // This is correct; ignore the exception.\n         }\n     }\n+\n }", "timestamp": 1252994287, "metainfo": ""}