{"sha": "df7cafe5781f73ca87bc83f364da52108f0195e2", "log": "Improve documentation   ", "commit": "\n--- a/src/java/org/apache/commons/collections/SequencedHashMap.java\n+++ b/src/java/org/apache/commons/collections/SequencedHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.23 2003/12/06 13:03:15 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.24 2003/12/28 17:59:47 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * (see: {@link java.util.List#remove(Object)} and {@link java.util.Map#remove(Object)}).\n  * <p>\n  * This class is not thread safe.  When a thread safe implementation is\n- * required, use {@link Collections#synchronizedMap(Map)} as it is documented,\n+ * required, use {@link java.util.Collections#synchronizedMap(Map)} as it is documented,\n  * or use explicit synchronization controls.\n  *\n  * @see org.apache.commons.collections.set.ListOrderedSet\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.23 $ $Date: 2003/12/06 13:03:15 $\n+ * @version $Revision: 1.24 $ $Date: 2003/12/28 17:59:47 $\n  * \n  * @author Michael A. Smith\n  * @author Daniel Rall\n--- a/src/java/org/apache/commons/collections/bag/TreeBag.java\n+++ b/src/java/org/apache/commons/collections/bag/TreeBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/TreeBag.java,v 1.4 2003/12/28 16:36:48 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/TreeBag.java,v 1.5 2003/12/28 17:58:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>Collection</code> interface specification.\n  *\n  * @since Commons Collections 3.0 (previously in main package v2.0)\n- * @version $Revision: 1.4 $ $Date: 2003/12/28 16:36:48 $\n+ * @version $Revision: 1.5 $ $Date: 2003/12/28 17:58:53 $\n  * \n  * @author Chuck Burdick\n  * @author Stephen Colebourne\n     }\n \n     /**\n-     * Constructs a {@link Bag} containing all the members of the given\n-     * collection.\n+     * Constructs a <code>TreeBag</code> containing all the members of the\n+     * specified collection.\n      * \n      * @param coll  the collection to copy into the bag\n      */\n--- a/src/java/org/apache/commons/collections/buffer/BinaryHeap.java\n+++ b/src/java/org/apache/commons/collections/buffer/BinaryHeap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/Attic/BinaryHeap.java,v 1.2 2003/12/28 16:36:48 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/Attic/BinaryHeap.java,v 1.3 2003/12/28 17:58:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.PriorityQueue;\n \n /**\n- * Binary heap implementation of {@link PriorityQueue} and {@link Buffer}.\n+ * Binary heap implementation of <code>PriorityQueue</code> that provides for\n+ * removal based on <code>Comparator</code> ordering.\n  * <p>\n  * The removal order of a binary heap is based on either the natural sort\n  * order of its elements or a specified {@link Comparator}.  The \n  * time.  All other operations perform in linear time or worse.\n  * <p>\n  * Note that this implementation is not synchronized.  Use \n- * {@link BufferUtils#synchronizedBuffer(Buffer)} to provide\n- * synchronized access to a <code>BinaryHeap</code>:\n+ * {@link org.apache.commons.collections.PriorityQueueUtils#synchronizedPriorityQueue(PriorityQueue)}\n+ * to provide synchronized access to a <code>BinaryHeap</code>:\n  *\n  * <pre>\n  * Buffer heap = BufferUtils.synchronizedBuffer(new BinaryHeap());\n  * </pre>\n  *\n  * @since Commons Collections 3.0 (previously in main package v1.0)\n- * @version $Revision: 1.2 $ $Date: 2003/12/28 16:36:48 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/28 17:58:54 $\n  * \n  * @author Peter Donald\n  * @author Ram Chidambaram\n--- a/src/java/org/apache/commons/collections/list/AbstractLinkedList.java\n+++ b/src/java/org/apache/commons/collections/list/AbstractLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/AbstractLinkedList.java,v 1.2 2003/12/24 01:15:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/AbstractLinkedList.java,v 1.3 2003/12/28 17:58:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * is here.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/24 01:15:40 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/28 17:58:54 $\n  *\n  * @author Rich Dougherty\n  * @author Phil Steitz\n      * Creates a new node with the specified object as its \n      * <code>value</code> and inserts it before <code>node</code>.\n      * <p>\n-     * This implementation uses {@link #createNode(Object)} and {@link #addNode(Node, Node)}.\n+     * This implementation uses {@link #createNode(Object)} and {@link #addNode(Node,Node)}.\n      *\n      * @param node  node to insert before\n      * @param value  value of the newly added node\n      * Creates a new node with the specified object as its \n      * <code>value</code> and inserts it after <code>node</code>.\n      * <p>\n-     * This implementation uses {@link #createNode(Object)} and {@link #addNode(Node, Node)}.\n+     * This implementation uses {@link #createNode(Object)} and {@link #addNode(Node,Node)}.\n      * \n      * @param node  node to insert after\n      * @param value  value of the newly added node\n \n         /**\n          * The node that will be returned by {@link #next()}. If this is equal\n-         * to {@link #marker} then there are no more values to return.\n+         * to {@link AbstractLinkedList#header} then there are no more values to return.\n          */\n         protected Node next;\n \n         /**\n-         * The index of {@link #nextNode}.\n+         * The index of {@link #next}.\n          */\n         protected int nextIndex;\n \n--- a/src/java/org/apache/commons/collections/map/HashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/HashedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/HashedMap.java,v 1.10 2003/12/28 16:36:48 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/HashedMap.java,v 1.11 2003/12/28 17:58:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to <code>HashMap</code>.\n  * <p>\n  * This implementation improves on the JDK1.4 HahMap by adding the \n- * {@link org.apache.commons.collections.iterators.MapIterator MapIterator}\n+ * {@link org.apache.commons.collections.MapIterator MapIterator}\n  * functionality and many methods for subclassing.\n  * <p>\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.10 $ $Date: 2003/12/28 16:36:48 $\n+ * @version $Revision: 1.11 $ $Date: 2003/12/28 17:58:53 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/map/LinkedMap.java\n+++ b/src/java/org/apache/commons/collections/map/LinkedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/LinkedMap.java,v 1.4 2003/12/07 23:59:13 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/LinkedMap.java,v 1.5 2003/12/28 17:58:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * In this implementation order is maintained is by original insertion.\n  * <p>\n  * This implementation improves on the JDK1.4 LinkedHashMap by adding the \n- * {@link org.apache.commons.collections.iterators.MapIterator MapIterator}\n+ * {@link org.apache.commons.collections.MapIterator MapIterator}\n  * functionality, additional convenience methods and allowing\n  * bidirectional iteration. It also implements <code>OrderedMap</code>.\n  * <p>\n  * methods exposed.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/12/07 23:59:13 $\n+ * @version $Revision: 1.5 $ $Date: 2003/12/28 17:58:54 $\n  *\n  * @author Stephen Colebourne\n  */", "timestamp": 1072634387, "metainfo": ""}