{"sha": "b7713ef8243dbdb3fbfc824695fcc98e65723c0a", "log": "StringStack comes from Commons.Utils.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/StringStack.java\n+package org.apache.commons.collections;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and \n+ *    \"Apache Turbine\" must not be used to endorse or promote products \n+ *    derived from this software without prior written permission. For \n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without \n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import java.io.Serializable;\n+import java.util.Iterator;\n+import java.util.Stack;\n+\n+/**\n+ * This class implements a stack for String objects.\n+ *\n+ * @author <a href=\"mailto:jmcnally@collab.net\">John D. McNally</a>\n+ * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n+ * @version $Id: StringStack.java,v 1.1 2002/02/23 03:52:02 bayard Exp $\n+ */\n+public class StringStack implements Serializable\n+{\n+    /**\n+     * The stack of <code>String</code> objects.\n+     */\n+    private Stack stack = null;\n+\n+    /**\n+     * Creates an empty instance.\n+     */\n+    public StringStack()\n+    {\n+        stack = new Stack();\n+    }\n+\n+    /**\n+     * Adds the String to the collection if it does not already\n+     * contain it.\n+     *\n+     * @param s The <code>String</code> object to add to this stack\n+     * (if it is not <code>null</code> and doesn't already exist in\n+     * the stack).\n+     * @return A reference to this stack (useful for when this method\n+     * is called repeatedly).\n+     */\n+    public StringStack add(String s)\n+    {\n+        if (s != null && !contains(s))\n+        {\n+            stack.push(s);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds all Strings in the given StringStack to the collection\n+     * (skipping those it already contains)\n+     *\n+     * @param ss The stack of <code>String</code> objects to add to\n+     * this stack (if it is not <code>null</code> and doesn't already\n+     * exist in the stack).\n+     * @return A reference to this stack (useful for when this method\n+     * is called repeatedly).\n+     */\n+    public StringStack addAll(StringStack ss)\n+    {\n+        Iterator i = ss.stack.iterator();\n+        while (i.hasNext())\n+        {\n+            add((String) i.next());\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Clears the stack.\n+     */\n+    public void clear()\n+    {\n+        stack.clear();\n+    }\n+    \n+    /**\n+     * Returns whether this stack contain the specified text.\n+     *\n+     * @param s The text to search for.\n+     * @return Whether the stack contains the text.\n+     */\n+    public boolean contains(String s)\n+    {\n+        return (stack.search(s) != -1);\n+    }\n+\n+    /**\n+     * Whether the stack is empty.\n+     *\n+     * @return Whether the stack is empty.\n+     */\n+    public final boolean empty()\n+    {\n+        return stack.empty();\n+    }\n+\n+    /**\n+     * Get a string off the stack at a certain position.\n+     *\n+     * @param i The position.\n+     * @return A the string from the specified position.\n+     */\n+    public String get(int i)\n+    {\n+        return (String) stack.elementAt(i);\n+    }\n+\n+    /**\n+     * Returns the size of the stack.\n+     *\n+     * @return The size of the stack.\n+     */\n+    public final int size()\n+    {\n+        return stack.size();\n+    }\n+\n+    /**\n+     * Converts the stack to a single {@link java.lang.String} with no\n+     * separator.\n+     *\n+     * @return The stack elements as a single block of text.\n+     */\n+    public String toString()\n+    {\n+        return toString(\"\");\n+    }\n+\n+    /**\n+     * Converts the stack to a single {@link java.lang.String}.\n+     *\n+     * @param separator The text to use as glue between elements in\n+     * the stack.\n+     * @return The stack elements--glued together by\n+     * <code>separator</code>--as a single block of text.\n+     */\n+    public String toString( String separator )\n+    {\n+        String s;\n+        if (size() > 0)\n+        {\n+            if ( separator == null )\n+            {\n+                separator = \"\";\n+            }\n+ \n+            // Determine what size to pre-allocate for the buffer.\n+            int totalSize = 0;\n+            for (int i = 0; i < stack.size(); i++)\n+            {\n+                totalSize += get(i).length();\n+            }\n+            totalSize += (stack.size() - 1) * separator.length();\n+\n+            StringBuffer sb = new StringBuffer(totalSize).append( get(0) );\n+            for (int i = 1; i < stack.size(); i++)\n+            {\n+                sb.append(separator).append(get(i));\n+            }\n+            s = sb.toString();\n+        }\n+        else\n+        {\n+            s = \"\";\n+        }\n+        return s;\n+    }\n+\n+    /**\n+     * Compares two StringStacks.  Considered equal if the\n+     * <code>toString()</code> method returns such.\n+     */\n+    public boolean equals(Object ssbuf)\n+    {\n+        boolean isEquiv = false;\n+        if ( ssbuf == null || !(ssbuf instanceof StringStack) ) \n+        {\n+            isEquiv = false;\n+        }\n+        else if ( ssbuf == this ) \n+        {\n+            isEquiv = true;\n+        }\n+        else if ( this.toString().equals(ssbuf.toString()) )\n+        {\n+            isEquiv = true;\n+        }\n+        return isEquiv;\n+    }\n+\n+    /**\n+     * Turns this stack into an array.\n+     *\n+     * @return This stack as an array.\n+     */\n+    public String[] toStringArray()\n+    {\n+        String[] array = new String[size()];\n+        for (int i = 0; i < size(); i++)\n+        {\n+            array[i] = get(i);\n+        }\n+        return array;\n+    }\n+}", "timestamp": 1014436322, "metainfo": ""}