{"sha": "1088244314d5fb7a5d197ad5d15cf5a85a821f3e", "log": "Javadoc and Code tidy   ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/ArrayIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ArrayIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ArrayIterator.java,v 1.5 2003/08/31 17:25:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ArrayIterator.java,v 1.6 2003/09/29 22:37:40 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.NoSuchElementException;\n \n /** \n- * Implements an {@link java.util.Iterator Iterator} over an array.\n+ * Implements an {@link java.util.Iterator Iterator} over any array.\n  * <p>\n  * The array can be either an array of object or of primitives. If you know \n  * that you have an object array, the \n  * the iterator back to the start if required.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.5 $ $Date: 2003/08/31 17:25:49 $\n- *\n- * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+ * @version $Revision: 1.6 $ $Date: 2003/09/29 22:37:40 $\n+ *\n+ * @author James Strachan\n  * @author Mauricio S. Moura\n- * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n- * @author <a href=\"mailto:neilotoole@users.sourceforge.net\">Neil O'Toole</a>\n+ * @author Michael A. Smith\n+ * @author Neil O'Toole\n  * @author Stephen Colebourne\n  */\n public class ArrayIterator implements ResetableIterator {\n \n-    /** The array */    \n+    /** The array to iterate over */    \n     protected Object array;\n     /** The start index to loop from */\n     protected int startIndex = 0;\n     /** The current iterator index */\n \tprotected int index = 0;\n     \n+    // Constructors\n+    // ----------------------------------------------------------------------\n     /**\n      * Constructor for use with <code>setArray</code>.\n      * <p>\n      * @throws IllegalArgumentException if <code>array</code> is not an array.\n      * @throws NullPointerException if <code>array</code> is <code>null</code>\n      */\n-    public ArrayIterator(Object array) {\n-        super();\n-        setArray( array );\n+    public ArrayIterator(final Object array) {\n+        super();\n+        setArray(array);\n     }\n \n     /**\n      * specified array from a specific start index.\n      *\n      * @param array  the array to iterate over.\n-     * @param start  the index to start iterating at.\n-     * @throws IllegalArgumentException if <code>array</code> is not an array.\n-     * @throws NullPointerException if <code>array</code> is <code>null</code>\n-     */\n-    public ArrayIterator(Object array, int start) {\n-        setArray( array );\n-        checkBound(start, \"start\");\n-        this.startIndex = start;\n-        this.index = start;\n+     * @param startIndex  the index to start iterating at.\n+     * @throws IllegalArgumentException if <code>array</code> is not an array.\n+     * @throws NullPointerException if <code>array</code> is <code>null</code>\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     */\n+    public ArrayIterator(final Object array, final int startIndex) {\n+        super();\n+        setArray(array);\n+        checkBound(startIndex, \"start\");\n+        this.startIndex = startIndex;\n+        this.index = startIndex;\n     }\n \n     /**\n      * in the specified array.\n      *\n      * @param array  the array to iterate over.\n-     * @param start  the index to start iterating at.\n-     * @param end  the index to finish iterating at.\n-     * @throws IllegalArgumentException if <code>array</code> is not an array.\n-     * @throws NullPointerException if <code>array</code> is <code>null</code>\n-     */\n-    public ArrayIterator(Object array, int start, int end) {\n-        setArray( array );\n-        checkBound(start, \"start\");\n-        checkBound(end, \"end\");\n-        if (end < start) {\n+     * @param startIndex  the index to start iterating at.\n+     * @param endIndex  the index to finish iterating at.\n+     * @throws IllegalArgumentException if <code>array</code> is not an array.\n+     * @throws NullPointerException if <code>array</code> is <code>null</code>\n+     * @throws IndexOutOfBoundsException if either index is invalid\n+     */\n+    public ArrayIterator(final Object array, final int startIndex, final int endIndex) {\n+        super();\n+        setArray(array);\n+        checkBound(startIndex, \"start\");\n+        checkBound(endIndex, \"end\");\n+        if (endIndex < startIndex) {\n             throw new IllegalArgumentException(\"End index must not be less than start index.\");\n         }\n-        this.startIndex = start;\n-        this.endIndex = end;\n-        this.index = start;\n-    }\n-\n-    protected void checkBound(int bound, String type ) {\n+        this.startIndex = startIndex;\n+        this.endIndex = endIndex;\n+        this.index = startIndex;\n+    }\n+\n+    /**\n+     * Checks whether the index is valid or not.\n+     * \n+     * @param bound  the index to check\n+     * @param type  the index type (for error messges)\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     */\n+    protected void checkBound(final int bound, final String type ) {\n         if (bound > this.endIndex) {\n             throw new ArrayIndexOutOfBoundsException(\n-              \"Attempt to make an ArrayIterator that \"+type+\n+              \"Attempt to make an ArrayIterator that \" + type +\n               \"s beyond the end of the array. \"\n             );\n         }\n         if (bound < 0) {\n             throw new ArrayIndexOutOfBoundsException(\n-              \"Attempt to make an ArrayIterator that \"+type+\n+              \"Attempt to make an ArrayIterator that \" + type +\n               \"s before the start of the array. \"\n             );\n         }\n     }\n \n     // Iterator interface\n-    //-------------------------------------------------------------------------\n-\n-    /**\n-     *  Returns true if there are more elements to return from the array.\n-     *\n-     *  @return true if there is a next element to return\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns true if there are more elements to return from the array.\n+     *\n+     * @return true if there is a next element to return\n      */\n     public boolean hasNext() {\n         return (index < endIndex);\n     }\n \n     /**\n-     *  Returns the next element in the array.\n-     *\n-     *  @return the next element in the array\n-     *  @throws NoSuchElementException if all the elements in the array\n-     *    have already been returned\n+     * Returns the next element in the array.\n+     *\n+     * @return the next element in the array\n+     * @throws NoSuchElementException if all the elements in the array\n+     *  have already been returned\n      */\n     public Object next() {\n         if (hasNext() == false) {\n             throw new NoSuchElementException();\n         }\n-        return Array.get( array, index++ );\n-    }\n-\n-    /**\n-     *  Throws {@link UnsupportedOperationException}.\n-     *\n-     *  @throws UnsupportedOperationException always\n+        return Array.get(array, index++);\n+    }\n+\n+    /**\n+     * Throws {@link UnsupportedOperationException}.\n+     *\n+     * @throws UnsupportedOperationException always\n      */\n     public void remove() {\n-        throw new UnsupportedOperationException( \"remove() method is not supported\" );\n+        throw new UnsupportedOperationException(\"remove() method is not supported\");\n     }\n \n     // Properties\n-    //-------------------------------------------------------------------------\n-\n-    /**\n-     *  Retrieves the array that this iterator is iterating over. \n-     *\n-     *  @return the array this iterator iterates over, or <code>null</code> if\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the array that this iterator is iterating over. \n+     *\n+     * @return the array this iterator iterates over, or <code>null</code> if\n      *  the no-arg constructor was used and {@link #setArray(Object)} has never\n      *  been called with a valid array.\n      */\n     }\n     \n     /**\n-     *  Changes the array that the ArrayIterator should iterate over.  If an\n-     *  array has previously been set (using the single-arg constructor or this\n-     *  method), that array along with the current iterator position within\n-     *  that array is discarded in favor of the argument to this method.  This\n-     *  method can be used in combination with {@link #getArray()} to \"reset\"\n-     *  the iterator to the beginning of the array:\n-     *\n-     *  <pre>\n-     *    ArrayIterator iterator = ...\n-     *    ...\n-     *    iterator.setArray(iterator.getArray());\n-     *  </pre>\n-     *\n-     *  Note: Using i.setArray(i.getArray()) may throw a NullPointerException\n-     *  if no array has ever been set for the iterator (see {@link\n-     *  #getArray()})\n+     * Sets the array that the ArrayIterator should iterate over.\n      * <p>\n-     * The {@link #reset()} method is a better choice for resetting the iterator.\n-     *\n-     *  @param array the array that the iterator should iterate over.\n-     *\n-     *  @exception IllegalArgumentException if <code>array</code> is not an\n-     *  array.\n-     *\n-     *  @exception NullPointerException \n-     *  if <code>array</code> is <code>null</code>\n-     */\n-    public void setArray( Object array ) {\n+     * If an array has previously been set (using the single-arg constructor\n+     * or this method) then that array is discarded in favour of this one.\n+     * Iteration is restarted at the start of the new array.\n+     * Although this can be used to reset iteration, the {@link #reset()} method\n+     * is a more effective choice.\n+     *\n+     * @param array the array that the iterator should iterate over.\n+     * @throws IllegalArgumentException if <code>array</code> is not an array.\n+     * @throws NullPointerException if <code>array</code> is <code>null</code>\n+     */\n+    public void setArray(final Object array) {\n         // Array.getLength throws IllegalArgumentException if the object is not\n         // an array or NullPointerException if the object is null.  This call\n         // is made before saving the array and resetting the index so that the\n         // array iterator remains in a consistent state if the argument is not\n         // an array or is null.\n-        this.endIndex = Array.getLength( array );\n+        this.endIndex = Array.getLength(array);\n         this.startIndex = 0;\n         this.array = array;\n         this.index = 0;\n--- a/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java,v 1.5 2003/09/29 03:56:12 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java,v 1.6 2003/09/29 22:37:40 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @see java.util.ListIterator\n  *\n  * @since Commons Collections 2.2\n- * @version $Revision: 1.5 $ $Date: 2003/09/29 03:56:12 $\n+ * @version $Revision: 1.6 $ $Date: 2003/09/29 22:37:40 $\n  *\n  * @author <a href=\"mailto:neilotoole@users.sourceforge.net\">Neil O'Toole</a>\n  * @author Stephen Colebourne\n public class ArrayListIterator extends ArrayIterator implements ResetableListIterator {\n \n     /**\n-     * Holds the index of the last item returned by a call to <code>next()</code> or <code>previous()</code>. This\n-     *  is set to <code>-1</code> if neither method has yet been invoked. <code>lastItemIndex</code> is used to to\n-     * implement the {@link #set} method.\n+     * Holds the index of the last item returned by a call to <code>next()</code>\n+     * or <code>previous()</code>. This is set to <code>-1</code> if neither method\n+     * has yet been invoked. <code>lastItemIndex</code> is used to to implement \n+     * the {@link #set} method.\n      *\n      */\n     protected int lastItemIndex = -1;\n \n+    // Constructors\n+    // ----------------------------------------------------------------------\n     /**\n      * Constructor for use with <code>setArray</code>.\n      * <p>\n      * specified array from a specific start index.\n      *\n      * @param array  the array to iterate over\n-     * @param start  the index to start iterating at\n+     * @param startIndex  the index to start iterating at\n      * @throws IllegalArgumentException if <code>array</code> is not an array.\n      * @throws NullPointerException if <code>array</code> is <code>null</code>\n      * @throws IndexOutOfBoundsException if the start index is out of bounds\n      */\n-    public ArrayListIterator(Object array, int start) {\n-        super(array, start);\n-        this.startIndex = start;\n+    public ArrayListIterator(Object array, int startIndex) {\n+        super(array, startIndex);\n+        this.startIndex = startIndex;\n     }\n \n     /**\n      * in the specified array.\n      *\n      * @param array  the array to iterate over\n-     * @param start  the index to start iterating at\n-     * @param end  the index (exclusive) to finish iterating at\n+     * @param startIndex  the index to start iterating at\n+     * @param endIndex  the index (exclusive) to finish iterating at\n      * @throws IllegalArgumentException if <code>array</code> is not an array.\n      * @throws IndexOutOfBoundsException if the start or end index is out of bounds\n      * @throws IllegalArgumentException if end index is before the start\n      * @throws NullPointerException if <code>array</code> is <code>null</code>\n      */\n-    public ArrayListIterator(Object array, int start, int end) {\n-        super(array, start, end);\n-        this.startIndex = start;\n+    public ArrayListIterator(Object array, int startIndex, int endIndex) {\n+        super(array, startIndex, endIndex);\n+        this.startIndex = startIndex;\n     }\n \n     // ListIterator interface\n-    //-------------------------------------------------------------------------\n-\n+    //-----------------------------------------------------------------------\n     /**\n      * Returns true if there are previous elements to return from the array.\n      *\n--- a/src/java/org/apache/commons/collections/iterators/CollatingIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/CollatingIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/CollatingIterator.java,v 1.8 2003/09/29 22:02:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/CollatingIterator.java,v 1.9 2003/09/29 22:37:40 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n /**\n  * Provides an ordered iteration over the elements contained in\n- * a collection of ordered {@link Iterator}s.  In other words,\n- * given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,\n- * my {@link #next} method will return the lesser of \n+ * a collection of ordered {@link Iterator}s.\n+ * <p>\n+ * Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,\n+ * the {@link #next} method on this iterator will return the lesser of \n  * <code>A.next()</code> and <code>B.next()</code>.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.8 $ $Date: 2003/09/29 22:02:33 $\n+ * @version $Revision: 1.9 $ $Date: 2003/09/29 22:37:40 $\n  * \n  * @author Rodney Waldhoff\n  * @author Stephen Colebourne\n  */\n public class CollatingIterator implements Iterator {\n \n-    /** My {@link Comparator}. */\n+    /** The {@link Comparator} used to evaluate order. */\n     private Comparator comparator = null;\n \n-    /** My list of {@link Iterator}s. */\n+    /** The list of {@link Iterator}s to evaluate. */\n     private ArrayList iterators = null;\n    \n     /** {@link Iterator#next Next} objects peeked from each iterator. */\n     private int lastReturned = -1;\n \n     // Constructors\n-    // -------------------------------------------------------------------\n-    \n+    // ----------------------------------------------------------------------\n     /**\n      * Constructs a new <code>CollatingIterator</code>.  Natural sort order\n      * will be used, and child iterators will have to be manually added \n      * specified comparator for ordering.  Child iterators will have to be \n      * manually added using the {@link #addIterator(Iterator)} method.\n      *\n-     * @param comp  the comparator to use for ordering, or <code>null</code>\n-     *    to use natural sort order\n-     */\n-    public CollatingIterator(Comparator comp) {\n+     * @param comp  the comparator to use to sort, or null to use natural sort order\n+     */\n+    public CollatingIterator(final Comparator comp) {\n         this(comp,2);\n     }\n     \n      * capacity.  Child iterators will have to be \n      * manually added using the {@link #addIterator(Iterator)} method.\n      *\n-     * @param comp  the comparator to use for ordering, or <code>null</code>\n-     *    to use natural sort order\n+     * @param comp  the comparator to use to sort, or null to use natural sort order\n      * @param initIterCapacity  the initial capacity for the internal list\n      *    of child iterators\n      */\n-    public CollatingIterator(Comparator comp, int initIterCapacity) {\n+    public CollatingIterator(final Comparator comp, final int initIterCapacity) {\n         iterators = new ArrayList(initIterCapacity);\n         setComparator(comp);\n     }\n      * specified comparator to provide ordered iteration over the two\n      * given iterators.\n      *\n-     * @param comp  the comparator to use to sort, or null to use natural\n-     *    sort order\n+     * @param comp  the comparator to use to sort, or null to use natural sort order\n      * @param a  the first child ordered iterator\n      * @param b  the second child ordered iterator\n      * @throws NullPointerException if either iterator is null\n      */\n-    public CollatingIterator(Comparator comp, Iterator a, Iterator b) {\n+    public CollatingIterator(final Comparator comp, final Iterator a, final Iterator b) {\n         this(comp,2);\n         addIterator(a);\n         addIterator(b);\n      * specified comparator to provide ordered iteration over the array\n      * of iterators.\n      *\n-     * @param comp  the comparator to use to sort, or null to use natural\n-     *    sort order\n+     * @param comp  the comparator to use to sort, or null to use natural sort order\n      * @param iterators  the array of iterators\n      * @throws NullPointerException if iterators array is or contains null\n      */\n-    public CollatingIterator(Comparator comp, Iterator[] iterators) {\n+    public CollatingIterator(final Comparator comp, final Iterator[] iterators) {\n         this(comp, iterators.length);\n         for (int i = 0; i < iterators.length; i++) {\n             addIterator(iterators[i]);\n      * specified comparator to provide ordered iteration over the collection\n      * of iterators.\n      *\n-     * @param comp  the comparator to use to sort, or null to use natural\n-     *    sort order\n+     * @param comp  the comparator to use to sort, or null to use natural sort order\n      * @param iterators  the collection of iterators\n      * @throws NullPointerException if the iterators collection is or contains null\n      * @throws ClassCastException if the iterators collection contains an\n      *         element that's not an {@link Iterator}\n      */\n-    public CollatingIterator(Comparator comp, Collection iterators) {\n+    public CollatingIterator(final Comparator comp, final Collection iterators) {\n         this(comp, iterators.size());\n         for (Iterator it = iterators.iterator(); it.hasNext();) {\n             Iterator item = (Iterator) it.next();\n     }\n \n     // Public Methods\n-    // -------------------------------------------------------------------\n-\n-    /**\n-     * Add the given {@link Iterator} to my collection to collate.\n-     * @throws IllegalStateException if I've already started iterating\n+    // ----------------------------------------------------------------------\n+    /**\n+     * Adds the given {@link Iterator} to the iterators being collated.\n+     * \n+     * @param iterator  the iterator to add to the collation, must not be null\n+     * @throws IllegalStateException if iteration has started\n      * @throws NullPointerException if the iterator is null\n      */\n-    public void addIterator(Iterator iterator) {\n+    public void addIterator(final Iterator iterator) {\n         checkNotStarted();\n         if (iterator == null) {\n             throw new NullPointerException(\"Iterator must not be null\");\n     }\n \n     /**\n-     * Set the Iterator at the given index     \n-     * \n-     * @param index      index of the Iterator to replace\n-     * @param iterator   Iterator to place at the given index\n+     * Sets the iterator at the given index.\n+     * \n+     * @param index  index of the Iterator to replace\n+     * @param iterator  Iterator to place at the given index\n      * @throws IndexOutOfBoundsException if index &lt; 0 or index &gt; size()\n-     * @throws IllegalStateException if I've already started iterating\n+     * @throws IllegalStateException if iteration has started\n      * @throws NullPointerException if the iterator is null\n      */\n-    public void setIterator(int index, Iterator iterator) throws IndexOutOfBoundsException {\n+    public void setIterator(final int index, final Iterator iterator) {\n         checkNotStarted();\n         if (iterator == null) {\n             throw new NullPointerException(\"Iterator must not be null\");\n     }\n \n     /**\n-     * Get the list of Iterators (unmodifiable)\n+     * Gets the list of Iterators (unmodifiable).\n      * \n      * @return the unmodifiable list of iterators added\n      */\n     }\n \n     /**\n-     * Set the {@link Comparator} by which I collate.\n-     * @throws IllegalStateException if I've already started iterating\n-     */\n-    public void setComparator(Comparator comp) {\n+     * Gets the {@link Comparator} by which collatation occurs.\n+     */\n+    public Comparator getComparator() {\n+        return comparator;\n+    }\n+\n+    /**\n+     * Sets the {@link Comparator} by which collation occurs.\n+     * \n+     * @throws IllegalStateException if iteration has started\n+     */\n+    public void setComparator(final Comparator comp) {\n         checkNotStarted();\n         comparator = comp;\n     }\n \n-    /**\n-     * Get the {@link Comparator} by which I collate.\n-     */\n-    public Comparator getComparator() {\n-        return comparator;\n-    }\n-\n     // Iterator Methods\n     // -------------------------------------------------------------------\n-\n-    /**\n-     *  Returns <code>true</code> if any child iterator has remaining elements.\n-     *\n-     *  @return true if this iterator has remaining elements\n+    /**\n+     * Returns <code>true</code> if any child iterator has remaining elements.\n+     *\n+     * @return true if this iterator has remaining elements\n      */\n     public boolean hasNext() {\n         start();\n     }\n \n     /**\n-     *  Returns the next ordered element from a child iterator.\n-     *\n-     *  @return the next ordered element\n-     *  @throws NoSuchElementException  if no child iterator has any more\n-     *    elements\n+     * Returns the next ordered element from a child iterator.\n+     *\n+     * @return the next ordered element\n+     * @throws NoSuchElementException if no child iterator has any more elements\n      */\n     public Object next() throws NoSuchElementException {\n-        if(!hasNext()) {\n+        if (hasNext() == false) {\n+            throw new NoSuchElementException();\n+        }\n+        int leastIndex = least();\n+        if (leastIndex == -1) {\n             throw new NoSuchElementException();\n         } else {\n-            int leastIndex = least();\n-            if(leastIndex == -1) {\n-                throw new NoSuchElementException();\n-            } else {\n-                Object val = values.get(leastIndex);\n-                clear(leastIndex);\n-                lastReturned = leastIndex;\n-                return val;\n-            }\n-        }        \n-    }\n-\n-    /**\n-     *  Removes the last returned element from the child iterator that \n-     *  produced it.\n-     *\n-     *  @throws IllegalStateException  if there is no last returned element,\n-     *    or if the last returned element has already been removed\n+            Object val = values.get(leastIndex);\n+            clear(leastIndex);\n+            lastReturned = leastIndex;\n+            return val;\n+        }\n+    }\n+\n+    /**\n+     * Removes the last returned element from the child iterator that \n+     * produced it.\n+     *\n+     * @throws IllegalStateException if there is no last returned element,\n+     *  or if the last returned element has already been removed\n      */\n     public void remove() {\n-        if(-1 == lastReturned) {\n+        if (lastReturned == -1) {\n             throw new IllegalStateException(\"No value can be removed at present\");\n-        } else {\n-            Iterator iter = (Iterator)(iterators.get(lastReturned));\n-            iter.remove();\n-        }\n+        }\n+        Iterator it = (Iterator) (iterators.get(lastReturned));\n+        it.remove();\n     }\n \n     // Private Methods\n     // -------------------------------------------------------------------\n-\n-    /** Initialize my collating state if it hasn't been already. */\n+    /** \n+     * Initializes the collating state if it hasn't been already.\n+     */\n     private void start() {\n-        if(null == values) {\n+        if (values == null) {\n             values = new ArrayList(iterators.size());\n             valueSet = new BitSet(iterators.size());\n-            for(int i=0;i<iterators.size();i++) {\n+            for (int i = 0; i < iterators.size(); i++) {\n                 values.add(null);\n                 valueSet.clear(i);\n             }\n     }\n \n     /** \n-     * Set the {@link #values} and {@link #valueSet} attributes \n+     * Sets the {@link #values} and {@link #valueSet} attributes \n      * at position <i>i</i> to the next value of the \n      * {@link #iterators iterator} at position <i>i</i>, or \n      * clear them if the <i>i</i><sup>th</sup> iterator\n      * @return <tt>false</tt> iff there was no value to set\n      */\n     private boolean set(int i) {\n-        Iterator iter = (Iterator)(iterators.get(i));\n-        if(iter.hasNext()) {\n-            values.set(i,iter.next());\n+        Iterator it = (Iterator)(iterators.get(i));\n+        if (it.hasNext()) {\n+            values.set(i, it.next());\n             valueSet.set(i);\n             return true;\n         } else {\n     }\n \n     /** \n-     * Clear the {@link #values} and {@link #valueSet} attributes \n+     * Clears the {@link #values} and {@link #valueSet} attributes \n      * at position <i>i</i>.\n      */\n     private void clear(int i) {\n     }\n \n     /** \n-     * Throw {@link IllegalStateException} iff I've been {@link #start started}.\n-     * @throws IllegalStateException iff I've been {@link #start started}\n+     * Throws {@link IllegalStateException} if iteration has started \n+     * via {@link #start}.\n+     * \n+     * @throws IllegalStateException if iteration started\n      */\n     private void checkNotStarted() throws IllegalStateException {\n-        if (null != values) {\n+        if (values != null) {\n             throw new IllegalStateException(\"Can't do that after next or hasNext has been called.\");\n         }\n     }\n     /** \n      * Returns the index of the least element in {@link #values},\n      * {@link #set(int) setting} any uninitialized values.\n-     */\n-    private int least() throws IllegalStateException {\n+     * \n+     * @throws IllegalStateException\n+     */\n+    private int least() {\n         int leastIndex = -1;\n         Object leastObject = null;                \n-        for(int i=0;i<values.size();i++) {\n-            if(!valueSet.get(i)) {\n+        for (int i = 0; i < values.size(); i++) {\n+            if (valueSet.get(i) == false) {\n                 set(i);\n             }\n-            if(valueSet.get(i)) {\n-                if(leastIndex == -1) {\n+            if (valueSet.get(i)) {\n+                if (leastIndex == -1) {\n                     leastIndex = i;\n                     leastObject = values.get(i);\n                 } else {\n                     Object curObject = values.get(i);\n-                    if(comparator.compare(curObject,leastObject) < 0) {\n+                    if (comparator.compare(curObject,leastObject) < 0) {\n                         leastObject = curObject;\n                         leastIndex = i;\n                     }\n      * <code>true</code>.\n      */\n     private boolean anyValueSet(BitSet set) {\n-        for(int i=0;i<set.size();i++) {\n-            if(set.get(i)) {\n+        for (int i = 0; i < set.size(); i++) {\n+            if (set.get(i)) {\n                 return true;\n             }\n         }\n      * in the given list has a next value.\n      */\n     private boolean anyHasNext(ArrayList iters) {\n-        for(int i=0;i<iters.size();i++) {\n-            Iterator iter = (Iterator)iters.get(i);\n-            if(iter.hasNext()) {\n+        for (int i = 0; i < iters.size(); i++) {\n+            Iterator it = (Iterator) iters.get(i);\n+            if (it.hasNext()) {\n                 return true;\n             }\n         }\n--- a/src/java/org/apache/commons/collections/iterators/EnumerationIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/EnumerationIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/EnumerationIterator.java,v 1.4 2003/09/29 22:02:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/EnumerationIterator.java,v 1.5 2003/09/29 22:37:40 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to be {@link Iterator Iterator} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.4 $ $Date: 2003/09/29 22:02:33 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/29 22:37:40 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  */\n public class EnumerationIterator implements Iterator {\n     \n+    /** The collection to remove elements from */\n     private Collection collection;\n-\n+    /** The enumeration being converted */\n     private Enumeration enumeration;\n-\n+    /** The last object retrieved */\n     private Object last;\n     \n+    // Constructors\n+    //-----------------------------------------------------------------------\n     /**\n-     *  Constructs a new <code>EnumerationIterator</code> that will not\n-     *  function until {@link #setEnumeration(Enumeration)} is called.\n+     * Constructs a new <code>EnumerationIterator</code> that will not\n+     * function until {@link #setEnumeration(Enumeration)} is called.\n      */\n     public EnumerationIterator() {\n         this(null, null);\n     }\n \n     /**\n-     *  Constructs a new <code>EnumerationIterator</code> that provides\n-     *  an iterator view of the given enumeration.\n+     * Constructs a new <code>EnumerationIterator</code> that provides\n+     * an iterator view of the given enumeration.\n      *\n-     *  @param enumeration  the enumeration to use\n+     * @param enumeration  the enumeration to use\n      */\n-    public EnumerationIterator( Enumeration enumeration ) {\n+    public EnumerationIterator(final Enumeration enumeration) {\n         this(enumeration, null);\n     }\n \n     /**\n-     *  Constructs a new <code>EnumerationIterator</code> that will remove\n-     *  elements from the specified collection.\n+     * Constructs a new <code>EnumerationIterator</code> that will remove\n+     * elements from the specified collection.\n      *\n-     *  @param enum  the enumeration to use\n-     *  @param collection  the collection to remove elements form\n+     * @param enum  the enumeration to use\n+     * @param collection  the collection to remove elements form\n      */\n-    public EnumerationIterator( Enumeration enum, Collection collection ) {\n+    public EnumerationIterator(final Enumeration enum, final Collection collection) {\n+        super();\n         this.enumeration = enum;\n         this.collection = collection;\n         this.last = null;\n     }\n \n     // Iterator interface\n-    //-------------------------------------------------------------------------\n-\n+    //-----------------------------------------------------------------------\n     /**\n-     *  Returns true if the underlying enumeration has more elements.\n+     * Returns true if the underlying enumeration has more elements.\n      *\n-     *  @return true if the underlying enumeration has more elements\n-     *  @throws NullPointerException  if the underlying enumeration is null\n+     * @return true if the underlying enumeration has more elements\n+     * @throws NullPointerException  if the underlying enumeration is null\n      */\n     public boolean hasNext() {\n         return enumeration.hasMoreElements();\n     }\n \n     /**\n-     *  Returns the next object from the enumeration.\n+     * Returns the next object from the enumeration.\n      *\n-     *  @return the next object from the enumeration\n-     *  @throws NullPointerException if the enumeration is null\n+     * @return the next object from the enumeration\n+     * @throws NullPointerException if the enumeration is null\n      */\n     public Object next() {\n         last = enumeration.nextElement();\n     }\n \n     /**\n+     * Removes the last retrieved element if a collection is attached.\n+     * <p>\n      * Functions if an associated <code>Collection</code> is known.\n      * If so, the first occurrence of the last returned object from this\n      * iterator will be removed from the collection.\n      *\n      * @exception IllegalStateException <code>next()</code> not called.\n-     * @exception UnsupportedOperationException No associated\n-     * <code>Collection</code>.\n+     * @exception UnsupportedOperationException if no associated collection\n      */\n     public void remove() {\n         if (collection != null) {\n             if (last != null) {\n                 collection.remove(last);\n+            } else {\n+                throw new IllegalStateException(\"next() must have been called for remove() to function\");\n             }\n-            else {\n-                throw new IllegalStateException\n-                    (\"next() must have been called for remove() to function\");\n-            }\n-        }\n-        else {\n-            throw new UnsupportedOperationException\n-                (\"No Collection associated with this Iterator\");\n+        } else {\n+            throw new UnsupportedOperationException(\"No Collection associated with this Iterator\");\n         }\n     }\n \n     // Properties\n-    //-------------------------------------------------------------------------\n-\n+    //-----------------------------------------------------------------------\n     /**\n-     *  Returns the underlying enumeration.\n+     * Returns the underlying enumeration.\n      *\n-     *  @return the underlying enumeration\n+     * @return the underlying enumeration\n      */\n     public Enumeration getEnumeration() {\n         return enumeration;\n     }\n \n     /**\n-     *  Sets the underlying enumeration.\n+     * Sets the underlying enumeration.\n      *\n-     *  @param enumeration  the new underlying enumeration\n+     * @param enumeration  the new underlying enumeration\n      */\n-    public void setEnumeration( Enumeration enumeration ) {\n+    public void setEnumeration(final Enumeration enumeration) {\n         this.enumeration = enumeration;\n     }\n+    \n }", "timestamp": 1064875060, "metainfo": ""}