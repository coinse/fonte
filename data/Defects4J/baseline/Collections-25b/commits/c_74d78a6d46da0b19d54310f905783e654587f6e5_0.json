{"sha": "74d78a6d46da0b19d54310f905783e654587f6e5", "log": "add test demonstrating that CollectionUtils.intersection et al uses the method equals(), not the operator ==. (see <http://archives.apache.org/eyebrowse/ReadMsg?listId=105&msgNo=1993>; \"Question about CollectionUtils semantics\" on commons-user, 27 Jan 2002)   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Id: TestCollectionUtils.java,v 1.12 2003/01/25 11:40:26 scolebourne Exp $\n- * $Revision: 1.12 $\n- * $Date: 2003/01/25 11:40:26 $\n+ * $Id: TestCollectionUtils.java,v 1.13 2003/01/27 23:19:28 rwaldhoff Exp $\n+ * $Revision: 1.13 $\n+ * $Date: 2003/01/27 23:19:28 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * @author Rodney Waldhoff\n- * @version $Revision: 1.12 $ $Date: 2003/01/25 11:40:26 $\n+ * @version $Revision: 1.13 $ $Date: 2003/01/27 23:19:28 $\n  */\n public class TestCollectionUtils extends TestCase {\n     public TestCollectionUtils(String testName) {\n         assertEquals(3, CollectionUtils.maxSize(buf2));\n     }\n \n+    public void testIntersectionUsesMethodEquals() {\n+        // Let elta and eltb be objects...\n+        Object elta = new Integer(17);\n+        Object eltb = new Integer(17);\n+        \n+        // ...which are equal...\n+        assertEquals(elta,eltb);\n+        assertEquals(eltb,elta);\n+        \n+        // ...but not the same (==).\n+        assertTrue(elta != eltb);\n+        \n+        // Let cola and colb be collections...\n+        Collection cola = new ArrayList();\n+        Collection colb = new ArrayList();\n+        \n+        // ...which contain elta and eltb, \n+        // repsectively.\n+        cola.add(elta);\n+        colb.add(eltb);\n+        \n+        // Then the intersection of the two\n+        // should contain one element.\n+        Collection intersection = CollectionUtils.intersection(cola,colb);\n+        assertEquals(1,intersection.size());\n+        \n+        // In practice, this element will be the same (==) as elta\n+        // or eltb, although this isn't strictly part of the\n+        // contract.\n+        Object eltc = intersection.iterator().next();\n+        assertTrue((eltc == elta  && eltc != eltb) || (eltc != elta  && eltc == eltb));\n+        \n+        // In any event, this element remains equal,\n+        // to both elta and eltb.\n+        assertEquals(elta,eltc);\n+        assertEquals(eltc,elta);\n+        assertEquals(eltb,eltc);\n+        assertEquals(eltc,eltb);\n+    }\n }", "timestamp": 1043709568, "metainfo": ""}