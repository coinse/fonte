{"sha": "80036ff8a1c8b2d0fa74bb5a841fec91b8dfbf8d", "log": "Reinstate FunctorException in main package, as it is specified by the functor interfaces   ", "commit": "\n--- a/src/java/org/apache/commons/collections/FunctorException.java\n+++ b/src/java/org/apache/commons/collections/FunctorException.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FunctorException.java,v 1.3 2003/11/23 14:41:27 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FunctorException.java,v 1.4 2003/12/29 01:18:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  */\n package org.apache.commons.collections;\n \n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n /**\n- * Exception thrown from functors.\n+ * Runtime exception thrown from functors.\n  * If required, a root cause error can be wrapped within this one.\n  * \n- * @deprecated TO BE DELETED BEFORE v3.0\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/11/23 14:41:27 $\n+ * @version $Revision: 1.4 $ $Date: 2003/12/29 01:18:23 $\n  *\n  * @author Stephen Colebourne\n  */\n-public class FunctorException extends org.apache.commons.collections.functors.FunctorException {\n+public class FunctorException extends RuntimeException {\n     \n+    /**\n+     * Does JDK support nested exceptions\n+     */\n+    private static final boolean JDK_SUPPORTS_NESTED;\n+    \n+    static {\n+        boolean flag = false;\n+        try {\n+            Throwable.class.getDeclaredMethod(\"getCause\", new Class[0]);\n+            flag = true;\n+        } catch (NoSuchMethodException ex) {\n+            flag = false;\n+        }\n+        JDK_SUPPORTS_NESTED = flag;\n+    }\n+    \n+    /**\n+     * Root cause of the exception\n+     */\n+    private final Throwable rootCause;\n+\n+    /**\n+     * Constructs a new <code>FunctorException</code> without specified\n+     * detail message.\n+     */\n     public FunctorException() {\n         super();\n+        this.rootCause = null;\n     }\n \n+    /**\n+     * Constructs a new <code>FunctorException</code> with specified\n+     * detail message.\n+     *\n+     * @param msg  the error message.\n+     */\n     public FunctorException(String msg) {\n         super(msg);\n+        this.rootCause = null;\n     }\n \n+    /**\n+     * Constructs a new <code>FunctorException</code> with specified\n+     * nested <code>Throwable</code> root cause.\n+     *\n+     * @param rootCause  the exception or error that caused this exception\n+     *                   to be thrown.\n+     */\n     public FunctorException(Throwable rootCause) {\n-        super(rootCause);\n+        super((rootCause == null ? null : rootCause.getMessage()));\n+        this.rootCause = rootCause;\n     }\n \n+    /**\n+     * Constructs a new <code>FunctorException</code> with specified\n+     * detail message and nested <code>Throwable</code> root cause.\n+     *\n+     * @param msg        the error message.\n+     * @param rootCause  the exception or error that caused this exception\n+     *                   to be thrown.\n+     */\n     public FunctorException(String msg, Throwable rootCause) {\n-        super(msg, rootCause);\n+        super(msg);\n+        this.rootCause = rootCause;\n+    }\n+\n+    /**\n+     * Gets the cause of this throwable.\n+     * \n+     * @return  the cause of this throwable, or <code>null</code>\n+     */\n+    public Throwable getCause() {\n+        return rootCause;\n+    }\n+\n+    /**\n+     * Prints the stack trace of this exception to the standard error stream.\n+     */\n+    public void printStackTrace() {\n+        printStackTrace(System.err);\n+    }\n+\n+    /**\n+     * Prints the stack trace of this exception to the specified stream.\n+     *\n+     * @param out  the <code>PrintStream</code> to use for output\n+     */\n+    public void printStackTrace(PrintStream out) {\n+        synchronized (out) {\n+            PrintWriter pw = new PrintWriter(out, false);\n+            printStackTrace(pw);\n+            // Flush the PrintWriter before it's GC'ed.\n+            pw.flush();\n+        }\n+    }\n+\n+    /**\n+     * Prints the stack trace of this exception to the specified writer.\n+     *\n+     * @param out  the <code>PrintWriter</code> to use for output\n+     */\n+    public void printStackTrace(PrintWriter out) {\n+        synchronized (out) {\n+            super.printStackTrace(out);\n+            if (rootCause != null && JDK_SUPPORTS_NESTED == false) {\n+                out.print(\"Caused by: \");\n+                rootCause.printStackTrace(out);\n+            }\n+        }\n     }\n \n }\n--- a/src/java/org/apache/commons/collections/functors/ExceptionClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionClosure.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/ExceptionClosure.java,v 1.1 2003/11/23 17:01:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/ExceptionClosure.java,v 1.2 2003/12/29 01:18:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.io.Serializable;\n \n import org.apache.commons.collections.Closure;\n+import org.apache.commons.collections.FunctorException;\n \n /**\n  * Closure implementation that always throws an exception.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 17:01:35 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/29 01:18:23 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/functors/ExceptionFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionFactory.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/ExceptionFactory.java,v 1.1 2003/11/23 17:01:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/ExceptionFactory.java,v 1.2 2003/12/29 01:18:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.io.Serializable;\n \n import org.apache.commons.collections.Factory;\n+import org.apache.commons.collections.FunctorException;\n \n /**\n  * Factory implementation that always throws an exception.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 17:01:35 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/29 01:18:23 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/functors/ExceptionPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionPredicate.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/ExceptionPredicate.java,v 1.1 2003/11/23 17:01:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/ExceptionPredicate.java,v 1.2 2003/12/29 01:18:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.io.Serializable;\n \n+import org.apache.commons.collections.FunctorException;\n import org.apache.commons.collections.Predicate;\n \n /**\n  * Predicate implementation that always throws an exception.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 17:01:35 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/29 01:18:23 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/functors/ExceptionTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionTransformer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/ExceptionTransformer.java,v 1.1 2003/11/23 17:01:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/ExceptionTransformer.java,v 1.2 2003/12/29 01:18:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.io.Serializable;\n \n+import org.apache.commons.collections.FunctorException;\n import org.apache.commons.collections.Transformer;\n \n /**\n  * Transformer implementation that always throws an exception.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 17:01:35 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/29 01:18:23 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/functors/InstantiateFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/InstantiateFactory.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/InstantiateFactory.java,v 1.2 2003/11/27 23:57:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/InstantiateFactory.java,v 1.3 2003/12/29 01:18:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.lang.reflect.InvocationTargetException;\n \n import org.apache.commons.collections.Factory;\n+import org.apache.commons.collections.FunctorException;\n \n /**\n  * Factory implementation that creates a new object instance by reflection.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/27 23:57:09 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/29 01:18:23 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/functors/InstantiateTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/InstantiateTransformer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/InstantiateTransformer.java,v 1.2 2003/11/27 23:57:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/InstantiateTransformer.java,v 1.3 2003/12/29 01:18:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n \n+import org.apache.commons.collections.FunctorException;\n import org.apache.commons.collections.Transformer;\n \n /**\n  * Transformer implementation that creates a new object instance by reflection.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/27 23:57:09 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/29 01:18:23 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/functors/InvokerTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/InvokerTransformer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/InvokerTransformer.java,v 1.2 2003/11/27 23:57:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/InvokerTransformer.java,v 1.3 2003/12/29 01:18:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n \n+import org.apache.commons.collections.FunctorException;\n import org.apache.commons.collections.Transformer;\n \n /**\n  * Transformer implementation that creates a new object instance by reflection.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/27 23:57:09 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/29 01:18:23 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java,v 1.1 2003/11/23 19:11:21 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java,v 1.2 2003/12/29 01:18:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.io.Serializable;\n \n+import org.apache.commons.collections.FunctorException;\n import org.apache.commons.collections.Predicate;\n \n /**\n  * Predicate implementation that throws an exception if the input is null.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 19:11:21 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/29 01:18:23 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/functors/PrototypeFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/PrototypeFactory.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/PrototypeFactory.java,v 1.2 2003/11/27 23:57:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/PrototypeFactory.java,v 1.3 2003/12/29 01:18:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.lang.reflect.Method;\n \n import org.apache.commons.collections.Factory;\n+import org.apache.commons.collections.FunctorException;\n \n /**\n  * Factory implementation that creates a new instance each time based on a prototype.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/27 23:57:09 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/29 01:18:23 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/functors/TransformerPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/TransformerPredicate.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/TransformerPredicate.java,v 1.1 2003/11/23 22:05:24 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/TransformerPredicate.java,v 1.2 2003/12/29 01:18:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.io.Serializable;\n \n+import org.apache.commons.collections.FunctorException;\n import org.apache.commons.collections.Predicate;\n import org.apache.commons.collections.Transformer;\n \n  * Predicate implementation that returns the result of a transformer.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 22:05:24 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/29 01:18:23 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/TestClosureUtils.java\n+++ b/src/test/org/apache/commons/collections/TestClosureUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestClosureUtils.java,v 1.6 2003/11/27 23:57:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestClosureUtils.java,v 1.7 2003/12/29 01:18:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n \n-import org.apache.commons.collections.functors.FunctorException;\n import org.apache.commons.collections.functors.NOPClosure;\n \n /**\n  * Tests the org.apache.commons.collections.ClosureUtils class.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2003/11/27 23:57:09 $\n+ * @version $Revision: 1.7 $ $Date: 2003/12/29 01:18:23 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.32 2003/11/23 14:41:27 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.33 2003/12/29 01:18:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.collection.SynchronizedCollection;\n import org.apache.commons.collections.collection.TransformedCollection;\n import org.apache.commons.collections.collection.UnmodifiableCollection;\n-import org.apache.commons.collections.functors.FunctorException;\n \n /**\n  * Tests for CollectionUtils.\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n  * \n- * @version $Revision: 1.32 $ $Date: 2003/11/23 14:41:27 $\n+ * @version $Revision: 1.33 $ $Date: 2003/12/29 01:18:23 $\n  */\n public class TestCollectionUtils extends TestCase {\n     \n--- a/src/test/org/apache/commons/collections/TestFactoryUtils.java\n+++ b/src/test/org/apache/commons/collections/TestFactoryUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFactoryUtils.java,v 1.8 2003/11/27 23:57:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFactoryUtils.java,v 1.9 2003/12/29 01:18:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.textui.TestRunner;\n \n import org.apache.commons.collections.functors.ConstantFactory;\n-import org.apache.commons.collections.functors.FunctorException;\n \n /**\n  * Tests the org.apache.commons.collections.FactoryUtils class.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2003/11/27 23:57:09 $\n+ * @version $Revision: 1.9 $ $Date: 2003/12/29 01:18:23 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/TestPredicateUtils.java\n+++ b/src/test/org/apache/commons/collections/TestPredicateUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestPredicateUtils.java,v 1.4 2003/11/23 14:41:27 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestPredicateUtils.java,v 1.5 2003/12/29 01:18:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Collections;\n import java.util.List;\n \n-import org.apache.commons.collections.functors.FunctorException;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n  * Tests the org.apache.commons.collections.PredicateUtils class.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/11/23 14:41:27 $\n+ * @version $Revision: 1.5 $ $Date: 2003/12/29 01:18:23 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/TestTransformerUtils.java\n+++ b/src/test/org/apache/commons/collections/TestTransformerUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTransformerUtils.java,v 1.7 2003/11/27 23:57:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTransformerUtils.java,v 1.8 2003/12/29 01:18:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.textui.TestRunner;\n \n import org.apache.commons.collections.functors.ConstantTransformer;\n-import org.apache.commons.collections.functors.FunctorException;\n import org.apache.commons.collections.functors.NOPTransformer;\n \n /**\n  * Tests the org.apache.commons.collections.TransformerUtils class.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.7 $ $Date: 2003/11/27 23:57:09 $\n+ * @version $Revision: 1.8 $ $Date: 2003/12/29 01:18:23 $\n  *\n  * @author Stephen Colebourne\n  * @author James Carman", "timestamp": 1072660703, "metainfo": ""}