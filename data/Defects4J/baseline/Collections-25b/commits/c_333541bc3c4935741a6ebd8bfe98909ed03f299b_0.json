{"sha": "333541bc3c4935741a6ebd8bfe98909ed03f299b", "log": "Deprecate DefaultMapEntry in the main package Fix resultant deprecation warnings   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BeanMap.java\n+++ b/src/java/org/apache/commons/collections/BeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.21 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.22 2003/10/03 23:19:32 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Iterator;\n import java.util.Set;\n \n+import org.apache.commons.collections.pairs.AbstractMapEntry;\n+\n /** \n  * An implementation of Map for JavaBeans which uses introspection to\n  * get and put properties in the bean.\n  * property is considered non existent in the Map\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.21 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.22 $ $Date: 2003/10/03 23:19:32 $\n  * \n- * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+ * @author James Strachan\n  * @author Stephen Colebourne\n  */\n public class BeanMap extends AbstractMap implements Cloneable {\n     }\n \n     /**\n-     * Get the mappings for this BeanMap\n+     * Gets a Set of MapEntry objects that are the mappings for this BeanMap.\n+     * <p>\n+     * Each MapEntry can be set but not removed.\n      * \n-     * @return BeanMap mappings.  The Set returned by this method\n-     *        is not modifiable.\n+     * @return the unmodifiable set of mappings\n      */\n     public Set entrySet() {\n         return Collections.unmodifiableSet(new AbstractSet() {\n \n                     public Object next() {\n                         Object key = (Object)methodIter.next();\n-                        return new DefaultMapEntry(key, get(key));\n+                        return new MyMapEntry( BeanMap.this, key, get(key) );\n                     }\n \n                     public void remove() {\n     /**\n      * Map entry used by {@link BeanMap}.\n      */\n-    protected static class MyMapEntry extends DefaultMapEntry {        \n+    protected static class MyMapEntry extends AbstractMapEntry {        \n         private BeanMap owner;\n         \n         /**\n--- a/src/java/org/apache/commons/collections/DefaultMapEntry.java\n+++ b/src/java/org/apache/commons/collections/DefaultMapEntry.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.13 2003/10/03 06:20:54 bayard Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.14 2003/10/03 23:19:32 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * A default implementation of {@link java.util.Map.Entry}\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.13 $ $Date: 2003/10/03 06:20:54 $\n+ * @version $Revision: 1.14 $ $Date: 2003/10/03 23:19:32 $\n  * \n  * @author James Strachan\n  * @author Michael A. Smith\n  * @author Neil O'Toole\n  * @author Stephen Colebourne\n+ * \n+ * @deprecated Use the version in the pairs subpackage.\n  */\n public class DefaultMapEntry implements Map.Entry {\n     \n--- a/src/java/org/apache/commons/collections/ReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/ReferenceMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ReferenceMap.java,v 1.14 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ReferenceMap.java,v 1.15 2003/10/03 23:19:32 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n import java.util.NoSuchElementException;\n import java.util.Set;\n \n+import org.apache.commons.collections.pairs.DefaultMapEntry;\n+\n /**\n  *  Hashtable-based {@link Map} implementation that allows\n  *  mappings to be removed by the garbage collector.<p>\n  * @see java.lang.ref.Reference\n  * \n  * @since Commons Collections 2.1\n- * @version $Revision: 1.14 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.15 $ $Date: 2003/10/03 23:19:32 $\n  * \n  * @author Paul Jack\n  */\n      *  @return a set view of this map's entries\n      */\n     public Set entrySet() {\n-        if (entrySet != null) return entrySet;\n+        if (entrySet != null) {\n+            return entrySet;\n+        } \n         entrySet = new AbstractSet() {\n             public int size() {\n                 return ReferenceMap.this.size();\n             }\n \n-\n             public void clear() {\n                 ReferenceMap.this.clear();\n             }\n-\n \n             public boolean contains(Object o) {\n                 if (o == null) return false;\n                 Entry e2 = getEntry(e.getKey());\n                 return (e2 != null) && e.equals(e2);\n             }\n-\n \n             public boolean remove(Object o) {\n                 boolean r = contains(o);\n                 return r;\n             }\n \n-\n             public Iterator iterator() {\n                 return new EntryIterator();\n             }\n             public Object[] toArray() {\n                 return toArray(new Object[0]);\n             }\n-\n \n             public Object[] toArray(Object[] arr) {\n                 ArrayList list = new ArrayList();\n--- a/src/java/org/apache/commons/collections/decorators/OrderedMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/OrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/OrderedMap.java,v 1.3 2003/10/03 06:31:03 bayard Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/OrderedMap.java,v 1.4 2003/10/03 23:19:32 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.collections.DefaultMapEntry;\n+import org.apache.commons.collections.pairs.DefaultMapEntry;\n \n /**\n  * Decorates a <code>Map</code> to ensure that the order of addition\n  * The order can be observed via the iterator or toArray methods.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/10/03 06:31:03 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/03 23:19:32 $\n  * \n  * @author Henri Yandell\n  */", "timestamp": 1065223172, "metainfo": ""}