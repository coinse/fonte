{"sha": "4f296da76cb2faeafebac39435a14b5a64aa258b", "log": "[COLLECTIONS-500] Renamed MultiMap.remove(K, V) to boolean removeMapping(K, V).  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/MultiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/MultiMap.java\n      *\n      * @param key  the key to remove from\n      * @param item  the item to remove\n-     * @return the value removed (which was passed in), null if nothing removed\n+     * @return {@code true} if the mapping was removed, {@code false} otherwise\n      * @throws UnsupportedOperationException if the map is unmodifiable\n      * @throws ClassCastException if the key or value is of an invalid type\n      * @throws NullPointerException if the key or value is null and null is invalid\n+     * @since 4.0 (signature in previous releases: V remove(K, V))\n      */\n-    public V remove(K key, V item);\n+    boolean removeMapping(K key, V item);\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/src/main/java/org/apache/commons/collections4/map/MultiValueMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/MultiValueMap.java\n      *\n      * @param key  the key to remove from\n      * @param value the value to remove\n-     * @return the value removed (which was passed in), null if nothing removed\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public V remove(final Object key, final Object value) {\n+     * @return {@code true} if the mapping was removed, {@code false} otherwise\n+     */\n+    public boolean removeMapping(final Object key, final Object value) {\n         final Collection<V> valuesForKey = getCollection(key);\n         if (valuesForKey == null) {\n-            return null;\n+            return false;\n         }\n         final boolean removed = valuesForKey.remove(value);\n         if (removed == false) {\n-            return null;\n+            return false;\n         }\n         if (valuesForKey.isEmpty()) {\n             remove(key);\n         }\n-        return (V) value;\n+        return true;\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java\n import java.util.LinkedList;\n import java.util.Map;\n \n-\n import org.apache.commons.collections4.AbstractObjectTest;\n import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.collections4.MultiMap;\n         final MultiValueMap<K, V> one = new MultiValueMap<K, V>();\n         final Integer value = Integer.valueOf(1);\n         one.put((K) \"One\", value);\n-        one.remove(\"One\", value);\n+        one.removeMapping(\"One\", value);\n \n         final MultiValueMap<K, V> two = new MultiValueMap<K, V>();\n         assertEquals(two, one);\n         assertEquals(4, map.totalSize());\n         map.remove(\"A\");\n         assertEquals(3, map.totalSize());\n-        map.remove(\"B\", \"BC\");\n+        map.removeMapping(\"B\", \"BC\");\n         assertEquals(2, map.totalSize());\n     }\n \n         assertEquals(2, map.size());\n         map.remove(\"A\");\n         assertEquals(1, map.size());\n-        map.remove(\"B\", \"BC\");\n+        map.removeMapping(\"B\", \"BC\");\n         assertEquals(1, map.size());\n     }\n \n         map.remove(\"A\");\n         assertEquals(0, map.size(\"A\"));\n         assertEquals(3, map.size(\"B\"));\n-        map.remove(\"B\", \"BC\");\n+        map.removeMapping(\"B\", \"BC\");\n         assertEquals(0, map.size(\"A\"));\n         assertEquals(2, map.size(\"B\"));\n     }\n         map.put((K) \"A\", \"AA\");\n         map.put((K) \"A\", \"AB\");\n         map.put((K) \"A\", \"AC\");\n-        assertEquals(null, map.remove(\"C\", \"CA\"));\n-        assertEquals(null, map.remove(\"A\", \"AD\"));\n-        assertEquals(\"AC\", map.remove(\"A\", \"AC\"));\n-        assertEquals(\"AB\", map.remove(\"A\", \"AB\"));\n-        assertEquals(\"AA\", map.remove(\"A\", \"AA\"));\n+        assertEquals(false, map.removeMapping(\"C\", \"CA\"));\n+        assertEquals(false, map.removeMapping(\"A\", \"AD\"));\n+        assertEquals(true, map.removeMapping(\"A\", \"AC\"));\n+        assertEquals(true, map.removeMapping(\"A\", \"AB\"));\n+        assertEquals(true, map.removeMapping(\"A\", \"AA\"));\n         assertEquals(new MultiValueMap<K, V>(), map);\n     }\n \n \n     @Override\n     public Object makeObject() {\n-        final Map m = makeEmptyMap();\n+        @SuppressWarnings(\"unchecked\")\n+        final Map<String, String> m = makeEmptyMap();\n         m.put(\"a\", \"1\");\n         m.put(\"a\", \"1b\");\n         m.put(\"b\", \"2\");\n         return m;\n     }\n \n+    @SuppressWarnings(\"rawtypes\")\n     private Map makeEmptyMap() {\n         return new MultiValueMap();\n     }", "timestamp": 1384708233, "metainfo": ""}