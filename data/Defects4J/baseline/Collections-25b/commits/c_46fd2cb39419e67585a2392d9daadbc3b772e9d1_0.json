{"sha": "46fd2cb39419e67585a2392d9daadbc3b772e9d1", "log": "Test DualTreeBidiMap with comparator   ", "commit": "\n--- a/src/test/org/apache/commons/collections/bidimap/TestAll.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestAll.java\n  * Entry point for tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/02/18 01:20:40 $\n+ * @version $Revision: 1.7 $ $Date: 2004/06/11 23:29:07 $\n  * \n  * @author Stephen Colebourne\n  */\n         \n         suite.addTest(TestDualHashBidiMap.suite());\n         suite.addTest(TestDualTreeBidiMap.suite());\n+        suite.addTest(TestDualTreeBidiMap2.suite());\n         suite.addTest(TestTreeBidiMap.suite());\n         \n         suite.addTest(TestAbstractOrderedBidiMapDecorator.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap2.java\n+/*\n+ *  Copyright 2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.bidimap;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import junit.framework.Test;\n+import junit.textui.TestRunner;\n+\n+import org.apache.commons.collections.BidiMap;\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.SortedBidiMap;\n+import org.apache.commons.collections.comparators.ComparableComparator;\n+import org.apache.commons.collections.comparators.ReverseComparator;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2004/06/11 23:29:07 $\n+ * \n+ * @author Matthew Hawthorne\n+ * @author Stephen Colebourne\n+ */\n+public class TestDualTreeBidiMap2 extends AbstractTestSortedBidiMap {\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+    \n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestDualTreeBidiMap2.class);\n+    }\n+\n+    public TestDualTreeBidiMap2(String testName) {\n+        super(testName);\n+    }\n+\n+    public BidiMap makeEmptyBidiMap() {\n+        return new DualTreeBidiMap(new ReverseComparator(ComparableComparator.getInstance()));\n+    }\n+\n+    public Map makeConfirmedMap() {\n+        return new TreeMap(new ReverseComparator(ComparableComparator.getInstance()));\n+    }\n+\n+    public void testComparator() {\n+        resetEmpty();\n+        SortedBidiMap bidi = (SortedBidiMap) map;\n+        assertNotNull(bidi.comparator());\n+        assertTrue(bidi.comparator() instanceof ReverseComparator);\n+    }\n+\n+    public void testSerializeDeserializeCheckComparator() throws Exception {\n+        SortedBidiMap obj = (SortedBidiMap) makeObject();\n+        if (obj instanceof Serializable && isTestSerialization()) {\n+            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+            ObjectOutputStream out = new ObjectOutputStream(buffer);\n+            out.writeObject(obj);\n+            out.close();\n+\n+            ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n+            Object dest = in.readObject();\n+            in.close();\n+            \n+            SortedBidiMap bidi = (SortedBidiMap) dest;\n+            assertNotNull(obj.comparator());\n+            assertNotNull(bidi.comparator());\n+            assertTrue(bidi.comparator() instanceof ReverseComparator);\n+        }\n+    }\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.Test2\";\n+    }\n+\n+    /**\n+     * Override to prevent infinite recursion of tests.\n+     */\n+    public String[] ignoredTests() {\n+        return new String[] {\"TestDualTreeBidiMap2.bulkTestInverseMap.bulkTestInverseMap\"};\n+    }\n+    \n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) map, \"D:/dev/collections/data/test/DualTreeBidiMap.emptyCollection.version3.Test2.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) map, \"D:/dev/collections/data/test/DualTreeBidiMap.fullCollection.version3.Test2.obj\");\n+//    }\n+}", "timestamp": 1086996547, "metainfo": ""}