{"sha": "a9131afbd5bec9f1ff59de32b91520c3b7ecfffe", "log": "removed expectation of order from iterator tests   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestBag.java\n+++ b/src/test/org/apache/commons/collections/TestBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBag.java,v 1.2 2002/03/14 18:00:51 morgand Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/03/14 18:00:51 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBag.java,v 1.3 2002/03/14 18:10:33 morgand Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/03/14 18:10:33 $\n  *\n  * ====================================================================\n  *\n  * test case (method) your {@link Bag} fails.\n  *\n  * @author Chuck Burdick\n- * @version $Id: TestBag.java,v 1.2 2002/03/14 18:00:51 morgand Exp $\n+ * @version $Id: TestBag.java,v 1.3 2002/03/14 18:10:33 morgand Exp $\n  */\n public abstract class TestBag extends TestCollection {\n     public TestBag(String testName) {\n       bag.add(\"B\");\n       assertEquals(\"Bag should have 3 items\", 3, bag.size());\n       Iterator i = bag.iterator();\n-      assertEquals(\"First should be 'A'\", \"A\", i.next());\n-      assertEquals(\"Second should be 'A'\", \"A\", i.next());\n-      i.remove();\n-      assertEquals(\"Third should be 'B'\", \"B\", i.next());\n-      assertTrue(\"Should have no more\", !i.hasNext());\n+\n+      boolean foundA = false;\n+      while (i.hasNext()) {\n+          String element = (String) i.next();\n+          // ignore the first A, remove the second via Iterator.remove()\n+          if (element.equals(\"A\")) {\n+              if (foundA == false) {\n+                  foundA = true;\n+              } else {\n+                  i.remove();\n+              }\n+          }\n+      }\n+\n+      assertTrue(\"Bag should still contain 'A'\", bag.contains(\"A\"));\n       assertEquals(\"Bag should have 2 items\", 2, bag.size());\n       assertEquals(\"Bag should have 1 'A'\", 1, bag.getCount(\"A\"));\n    }\n       bag.add(\"A\");\n       bag.add(\"B\");\n       Iterator i = bag.iterator();\n-      assertEquals(\"First should be 'A'\", \"A\", i.next());\n+      i.next();\n       bag.remove(\"A\");\n       try {\n          i.next();", "timestamp": 1016129433, "metainfo": ""}