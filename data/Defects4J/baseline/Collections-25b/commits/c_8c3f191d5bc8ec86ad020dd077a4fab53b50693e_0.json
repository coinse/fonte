{"sha": "8c3f191d5bc8ec86ad020dd077a4fab53b50693e", "log": "Test ObservedBag and ObservedListIterator   ", "commit": "\n--- a/src/java/org/apache/commons/collections/observed/standard/StandardModificationEvent.java\n+++ b/src/java/org/apache/commons/collections/observed/standard/StandardModificationEvent.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardModificationEvent.java,v 1.1 2003/09/03 23:54:26 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardModificationEvent.java,v 1.2 2003/09/06 16:53:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * All objects used are the real objects from the method calls, not clones.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/03 23:54:26 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/06 16:53:23 $\n  * \n  * @author Stephen Colebourne\n  */\n     public Collection getChangeCollection() {\n         if (object == null) {\n             return Collections.EMPTY_LIST;\n+        } else if (type == ModificationEventType.ADD_NCOPIES || type == ModificationEventType.REMOVE_NCOPIES) {\n+            return Collections.singletonList(object);\n         } else if (isType(ModificationEventType.GROUP_BULK)) {\n             if (object instanceof Collection) {\n                 return (Collection) object;\n--- a/src/test/org/apache/commons/collections/observed/ObservedTestHelper.java\n+++ b/src/test/org/apache/commons/collections/observed/ObservedTestHelper.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/ObservedTestHelper.java,v 1.1 2003/09/03 23:54:25 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/ObservedTestHelper.java,v 1.2 2003/09/06 16:53:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.ListIterator;\n \n import junit.framework.Assert;\n \n-import org.apache.commons.collections.observed.ModificationEventType;\n import org.apache.commons.collections.observed.standard.StandardModificationEvent;\n import org.apache.commons.collections.observed.standard.StandardModificationHandler;\n import org.apache.commons.collections.observed.standard.StandardModificationListener;\n  * {@link ObservedCollection} implementations.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/03 23:54:25 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/06 16:53:23 $\n  * \n  * @author Stephen Colebourne\n  */\n         doTestAddAllIndexed(factory);\n         doTestRemoveIndexed(factory);\n         doTestSetIndexed(factory);\n-        // TODO: ITERATOR add/set\n+        doTestIteratorAdd(factory);\n+        doTestIteratorSet(factory);\n     }\n     \n     public static void bulkTestObservedBag(ObservedFactory factory) {\n         Assert.assertTrue(factory.createObservedCollection(new StandardModificationHandler()) instanceof ObservedBag);\n         \n         bulkTestObservedCollection(factory);\n-        // TODO: bag nCopies\n+        doTestAddNCopies(factory);\n+        doTestRemoveNCopies(factory);\n     }\n     \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n+    public static void doTestAddNCopies(ObservedFactory factory) {\n+        ObservedBag coll = (ObservedBag) factory.createObservedCollection(LISTENER);\n+        \n+        coll.addAll(SIX_SEVEN_LIST);\n+        LISTENER.preEvent = null;\n+        LISTENER.postEvent = null;\n+        Assert.assertEquals(2, coll.size());\n+        coll.add(EIGHT, 3);\n+        Assert.assertEquals(5, coll.size());\n+        // pre\n+        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n+        Assert.assertEquals(ModificationEventType.ADD_NCOPIES, LISTENER.preEvent.getType());\n+        Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n+        Assert.assertSame(EIGHT, LISTENER.preEvent.getChangeObject());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n+        Assert.assertSame(EIGHT, LISTENER.preEvent.getChangeCollection().iterator().next());\n+        Assert.assertEquals(3, LISTENER.preEvent.getChangeRepeat());\n+        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n+        Assert.assertEquals(2, LISTENER.preEvent.getPostSize());\n+        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n+        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n+        // post\n+        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n+        Assert.assertEquals(ModificationEventType.ADD_NCOPIES, LISTENER.postEvent.getType());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n+        Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeObject());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n+        Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeCollection().iterator().next());\n+        Assert.assertEquals(3, LISTENER.postEvent.getChangeRepeat());\n+        Assert.assertSame(Boolean.TRUE, LISTENER.postEvent.getResult());\n+        Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n+        Assert.assertEquals(5, LISTENER.postEvent.getPostSize());\n+        Assert.assertEquals(3, LISTENER.postEvent.getSizeChange());\n+        Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public static void doTestIteratorAdd(ObservedFactory factory) {\n+        ObservedList coll = (ObservedList) factory.createObservedCollection(LISTENER);\n+        \n+        coll.addAll(SIX_SEVEN_LIST);\n+        LISTENER.preEvent = null;\n+        LISTENER.postEvent = null;\n+        ListIterator it = coll.listIterator();\n+        Assert.assertEquals(2, coll.size());\n+        it.next();\n+        it.add(EIGHT);\n+        Assert.assertEquals(3, coll.size());\n+        // pre\n+        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n+        Assert.assertEquals(ModificationEventType.ADD_INDEXED, LISTENER.preEvent.getType());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeIndex());\n+        Assert.assertSame(EIGHT, LISTENER.preEvent.getChangeObject());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n+        Assert.assertSame(EIGHT, LISTENER.preEvent.getChangeCollection().iterator().next());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n+        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n+        Assert.assertEquals(2, LISTENER.preEvent.getPostSize());\n+        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n+        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n+        // post\n+        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n+        Assert.assertEquals(ModificationEventType.ADD_INDEXED, LISTENER.postEvent.getType());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeIndex());\n+        Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeObject());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n+        Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeCollection().iterator().next());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n+        Assert.assertSame(null, LISTENER.postEvent.getResult());\n+        Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n+        Assert.assertEquals(3, LISTENER.postEvent.getPostSize());\n+        Assert.assertEquals(1, LISTENER.postEvent.getSizeChange());\n+        Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public static void doTestAddAll(ObservedFactory factory) {\n         ObservedCollection coll = factory.createObservedCollection(LISTENER);\n         \n     }\n \n     //-----------------------------------------------------------------------\n+    public static void doTestRemoveNCopies(ObservedFactory factory) {\n+        ObservedBag coll = (ObservedBag) factory.createObservedCollection(LISTENER);\n+        \n+        coll.add(SIX, 6);\n+        coll.add(SEVEN, 7);\n+        LISTENER.preEvent = null;\n+        LISTENER.postEvent = null;\n+        Assert.assertEquals(13, coll.size());\n+        coll.remove(SEVEN, 3);\n+        Assert.assertEquals(10, coll.size());\n+        // pre\n+        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n+        Assert.assertEquals(ModificationEventType.REMOVE_NCOPIES, LISTENER.preEvent.getType());\n+        Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n+        Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeObject());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n+        Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeCollection().iterator().next());\n+        Assert.assertEquals(3, LISTENER.postEvent.getChangeRepeat());\n+        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertEquals(13, LISTENER.preEvent.getPreSize());\n+        Assert.assertEquals(13, LISTENER.preEvent.getPostSize());\n+        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n+        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n+        // post\n+        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n+        Assert.assertEquals(ModificationEventType.REMOVE_NCOPIES, LISTENER.postEvent.getType());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n+        Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeObject());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n+        Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeCollection().iterator().next());\n+        Assert.assertEquals(3, LISTENER.postEvent.getChangeRepeat());\n+        Assert.assertSame(Boolean.TRUE, LISTENER.postEvent.getResult());\n+        Assert.assertEquals(13, LISTENER.postEvent.getPreSize());\n+        Assert.assertEquals(10, LISTENER.postEvent.getPostSize());\n+        Assert.assertEquals(-3, LISTENER.postEvent.getSizeChange());\n+        Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public static void doTestRemoveAll(ObservedFactory factory) {\n         ObservedCollection coll = factory.createObservedCollection(LISTENER);\n         \n         Assert.assertEquals(false, LISTENER.postEvent.isSizeChanged());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public static void doTestIteratorSet(ObservedFactory factory) {\n+        ObservedList coll = (ObservedList) factory.createObservedCollection(LISTENER);\n+        \n+        coll.addAll(SIX_SEVEN_LIST);\n+        LISTENER.preEvent = null;\n+        LISTENER.postEvent = null;\n+        ListIterator it = coll.listIterator();\n+        Assert.assertEquals(2, coll.size());\n+        it.next();\n+        it.next();\n+        it.set(EIGHT);\n+        Assert.assertEquals(2, coll.size());\n+        // pre\n+        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n+        Assert.assertEquals(ModificationEventType.SET_INDEXED, LISTENER.preEvent.getType());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeIndex());\n+        Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeObject());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n+        Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeCollection().iterator().next());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n+        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n+        Assert.assertEquals(2, LISTENER.preEvent.getPostSize());\n+        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n+        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n+        // post\n+        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n+        Assert.assertEquals(ModificationEventType.SET_INDEXED, LISTENER.postEvent.getType());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeIndex());\n+        Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeObject());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n+        Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeCollection().iterator().next());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n+        Assert.assertSame(SEVEN, LISTENER.postEvent.getResult());\n+        Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n+        Assert.assertEquals(2, LISTENER.postEvent.getPostSize());\n+        Assert.assertEquals(0, LISTENER.postEvent.getSizeChange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isSizeChanged());\n+    }\n+\n }", "timestamp": 1062867203, "metainfo": ""}