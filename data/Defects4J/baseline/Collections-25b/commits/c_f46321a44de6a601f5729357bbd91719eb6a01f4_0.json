{"sha": "f46321a44de6a601f5729357bbd91719eb6a01f4", "log": "No cast needed  ", "commit": "\n--- a/src/test/org/apache/commons/collections/comparators/TestFixedOrderComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestFixedOrderComparator.java\n         for (int i = 0; i < topCities.length; i++) {\n             comparator.add(topCities[i]);\n         }\n-        String[] keys = (String[]) topCities.clone();\n+        String[] keys = topCities.clone();\n         assertComparatorYieldsOrder(keys, comparator);\n     }\n \n      * Tests that the array constructor compares items properly.\n      */\n     public void testArrayConstructor() {\n-        String[] keys = (String[]) topCities.clone();\n-        String[] topCitiesForTest = (String[]) topCities.clone();\n+        String[] keys = topCities.clone();\n+        String[] topCitiesForTest = topCities.clone();\n         FixedOrderComparator<String> comparator = new FixedOrderComparator<String>(topCitiesForTest);\n         assertComparatorYieldsOrder(keys, comparator);\n         // test that changing input after constructor has no effect\n      * Tests the list constructor.\n      */\n     public void testListConstructor() {\n-        String[] keys = (String[]) topCities.clone();\n+        String[] keys = topCities.clone();\n         List<String> topCitiesForTest = new LinkedList<String>(Arrays.asList(topCities));\n         FixedOrderComparator<String> comparator = new FixedOrderComparator<String>(topCitiesForTest);\n         assertComparatorYieldsOrder(keys, comparator);\n--- a/src/test/org/apache/commons/collections/iterators/TestObjectGraphIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestObjectGraphIterator.java\n         }\n \n         Tree getTree(int index) {\n-            return (Tree) trees.get(index);\n+            return trees.get(index);\n         }\n \n         Iterator<Tree> treeIterator() {\n         }\n \n         Branch getBranch(int index) {\n-            return (Branch) branches.get(index);\n+            return branches.get(index);\n         }\n \n         Iterator<Branch> branchIterator() {\n         }\n \n         Leaf getLeaf(int index) {\n-            return (Leaf) leaves.get(index);\n+            return leaves.get(index);\n         }\n \n         Iterator<Leaf> leafIterator() {\n--- a/src/test/org/apache/commons/collections/list/TestCursorableLinkedList.java\n+++ b/src/test/org/apache/commons/collections/list/TestCursorableLinkedList.java\n         assertEquals(\"5\", elts[4]);\n         assertEquals(5, elts.length);\n \n-        String[] elts2 = (String[]) (list.toArray(new String[0]));\n+        String[] elts2 = (list.toArray(new String[0]));\n         assertEquals(\"1\", elts2[0]);\n         assertEquals(\"2\", elts2[1]);\n         assertEquals(\"3\", elts2[2]);\n         assertEquals(5, elts3.length);\n \n         String[] elts4 = new String[3];\n-        String[] elts4b = (String[]) (list.toArray(elts4));\n+        String[] elts4b = (list.toArray(elts4));\n         assertTrue(elts4 != elts4b);\n         assertEquals(\"1\", elts4b[0]);\n         assertEquals(\"2\", elts4b[1]);\n             list.add(prefix + bulk + ignored[i]);\n             list.add(prefix + bulk + bulk + ignored[i]);\n         }\n-        return (String[]) list.toArray(new String[0]);\n+        return list.toArray(new String[0]);\n     }\n \n     @Override", "timestamp": 1287710943, "metainfo": ""}