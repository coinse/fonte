{"sha": "9601875f69776a9b7ccb6d562b0436af35f03208", "log": "Add missing @Override markers  ", "commit": "\n--- a/src/test/org/apache/commons/collections/map/AbstractTestIterableMap.java\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestIterableMap.java\n             super(\"InnerTestMapIterator\");\n         }\n \n+        @Override\n         public V[] addSetValues() {\n             return AbstractTestIterableMap.this.getNewSampleValues();\n         }\n \n+        @Override\n         public boolean supportsRemove() {\n             return AbstractTestIterableMap.this.isRemoveSupported();\n         }\n \n+        @Override\n         public boolean isGetStructuralModify() {\n             return AbstractTestIterableMap.this.isGetStructuralModify();\n         }\n \n+        @Override\n         public boolean supportsSetValue() {\n             return AbstractTestIterableMap.this.isSetValueSupported();\n         }\n \n+        @Override\n         public MapIterator<K, V> makeEmptyIterator() {\n             resetEmpty();\n             return AbstractTestIterableMap.this.getMap().mapIterator();\n         }\n \n+        @Override\n         public MapIterator<K, V> makeObject() {\n             resetFull();\n             return AbstractTestIterableMap.this.getMap().mapIterator();\n         }\n \n+        @Override\n         public Map<K, V> getMap() {\n             // assumes makeFullMapIterator() called first\n             return AbstractTestIterableMap.this.getMap();\n         }\n \n+        @Override\n         public Map<K, V> getConfirmedMap() {\n             // assumes makeFullMapIterator() called first\n             return AbstractTestIterableMap.this.getConfirmed();\n         }\n \n+        @Override\n         public void verify() {\n             super.verify();\n             AbstractTestIterableMap.this.verify();\n--- a/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n      *\n      * @return the map to be tested\n      */\n+    @Override\n     public abstract Map<K,V> makeObject();\n \n     /**\n     /**\n      * Gets the compatability version, needed for package access.\n      */\n+    @Override\n     public String getCompatibilityVersion() {\n         return super.getCompatibilityVersion();\n     }\n         }\n \n         // Have to implement manually; entrySet doesn't support addAll\n+        @Override\n         public Map.Entry<K, V>[] getOtherElements() {\n             K[] k = getOtherKeys();\n             V[] v = getOtherValues();\n             return makeEntryArray(k, v);\n         }\n \n+        @Override\n         public Set<Map.Entry<K, V>> makeObject() {\n             return AbstractTestMap.this.makeObject().entrySet();\n         }\n \n+        @Override\n         public Set<Map.Entry<K, V>> makeFullCollection() {\n             return makeFullMap().entrySet();\n         }\n \n+        @Override\n         public boolean isAddSupported() {\n             // Collection views don't support add operations.\n             return false;\n         }\n \n+        @Override\n         public boolean isRemoveSupported() {\n             // Entry set should only support remove if map does\n             return AbstractTestMap.this.isRemoveSupported();\n             return AbstractTestMap.this.isGetStructuralModify();\n         }\n \n+        @Override\n         public boolean isTestSerialization() {\n             return false;\n         }\n \n+        @Override\n         public void resetFull() {\n             AbstractTestMap.this.resetFull();\n             setCollection(AbstractTestMap.this.getMap().entrySet());\n             TestMapEntrySet.this.setConfirmed(AbstractTestMap.this.getConfirmed().entrySet());\n         }\n \n+        @Override\n         public void resetEmpty() {\n             AbstractTestMap.this.resetEmpty();\n             setCollection(AbstractTestMap.this.getMap().entrySet());\n             assertEquals(false, getCollection().remove(new Object()));\n         }\n \n+        @Override\n         public void verify() {\n             super.verify();\n             AbstractTestMap.this.verify();\n             super(\"\");\n         }\n \n+        @Override\n         public K[] getFullElements() {\n             return getSampleKeys();\n         }\n \n+        @Override\n         public K[] getOtherElements() {\n             return getOtherKeys();\n         }\n \n+        @Override\n         public Set<K> makeObject() {\n             return AbstractTestMap.this.makeObject().keySet();\n         }\n \n+        @Override\n         public Set<K> makeFullCollection() {\n             return AbstractTestMap.this.makeFullMap().keySet();\n         }\n \n+        @Override\n         public boolean isNullSupported() {\n             return AbstractTestMap.this.isAllowNullKey();\n         }\n \n+        @Override\n         public boolean isAddSupported() {\n             return false;\n         }\n \n+        @Override\n         public boolean isRemoveSupported() {\n             return AbstractTestMap.this.isRemoveSupported();\n         }\n \n+        @Override\n         public boolean isTestSerialization() {\n             return false;\n         }\n \n+        @Override\n         public void resetEmpty() {\n             AbstractTestMap.this.resetEmpty();\n             setCollection(AbstractTestMap.this.getMap().keySet());\n             TestMapKeySet.this.setConfirmed(AbstractTestMap.this.getConfirmed().keySet());\n         }\n \n+        @Override\n         public void resetFull() {\n             AbstractTestMap.this.resetFull();\n             setCollection(AbstractTestMap.this.getMap().keySet());\n             TestMapKeySet.this.setConfirmed(AbstractTestMap.this.getConfirmed().keySet());\n         }\n \n+        @Override\n         public void verify() {\n             super.verify();\n             AbstractTestMap.this.verify();\n             super(\"\");\n         }\n \n+        @Override\n         public V[] getFullElements() {\n             return getSampleValues();\n         }\n \n+        @Override\n         public V[] getOtherElements() {\n             return getOtherValues();\n         }\n \n+        @Override\n         public Collection<V> makeObject() {\n             return AbstractTestMap.this.makeObject().values();\n         }\n \n+        @Override\n         public Collection<V> makeFullCollection() {\n             return AbstractTestMap.this.makeFullMap().values();\n         }\n \n+        @Override\n         public boolean isNullSupported() {\n             return AbstractTestMap.this.isAllowNullKey();\n         }\n \n+        @Override\n         public boolean isAddSupported() {\n             return false;\n         }\n \n+        @Override\n         public boolean isRemoveSupported() {\n             return AbstractTestMap.this.isRemoveSupported();\n         }\n \n+        @Override\n         public boolean isTestSerialization() {\n             return false;\n         }\n \n+        @Override\n         public boolean areEqualElementsDistinguishable() {\n             // equal values are associated with different keys, so they are\n             // distinguishable.\n             return true;\n         }\n \n+        @Override\n         public Collection<V> makeConfirmedCollection() {\n             // never gets called, reset methods are overridden\n             return null;\n         }\n \n+        @Override\n         public Collection<V> makeConfirmedFullCollection() {\n             // never gets called, reset methods are overridden\n             return null;\n         }\n \n+        @Override\n         public void resetFull() {\n             AbstractTestMap.this.resetFull();\n             setCollection(map.values());\n             TestMapValues.this.setConfirmed(AbstractTestMap.this.getConfirmed().values());\n         }\n \n+        @Override\n         public void resetEmpty() {\n             AbstractTestMap.this.resetEmpty();\n             setCollection(map.values());\n             TestMapValues.this.setConfirmed(AbstractTestMap.this.getConfirmed().values());\n         }\n \n+        @Override\n         public void verify() {\n             super.verify();\n             AbstractTestMap.this.verify();\n     /**\n      * Erases any leftover instance variables by setting them to null.\n      */\n+    @Override\n     public void tearDown() throws Exception {\n         map = null;\n         keySet = null;\n--- a/src/test/org/apache/commons/collections/map/AbstractTestSortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestSortedMap.java\n      *\n      * @return false\n      */\n+    @Override\n     public boolean isAllowNullKey() {\n         return false;\n     }\n      *\n      * @return a map that is known to be valid\n      */\n+    @Override\n     public SortedMap<K, V> makeConfirmedMap() {\n         return new TreeMap<K, V>();\n     }\n             super(name);\n             this.main = main;\n         }\n+        @Override\n         public void resetEmpty() {\n             // needed to init verify correctly\n             main.resetEmpty();\n             super.resetEmpty();\n         }\n+        @Override\n         public void resetFull() {\n             // needed to init verify correctly\n             main.resetFull();\n             super.resetFull();\n         }\n+        @Override\n         public void verify() {\n             // cross verify changes on view with changes on main map\n             super.verify();\n             main.verify();\n         }\n+        @Override\n         public BulkTest bulkTestHeadMap() {\n             return null;  // block infinite recursion\n         }\n+        @Override\n         public BulkTest bulkTestTailMap() {\n             return null;  // block infinite recursion\n         }\n+        @Override\n         public BulkTest bulkTestSubMap() {\n             return null;  // block infinite recursion\n         }\n \n+        @Override\n         @SuppressWarnings(\"unchecked\")\n         public K[] getSampleKeys() {\n             return (K[]) subSortedKeys.toArray();\n         }\n+        @Override\n         @SuppressWarnings(\"unchecked\")\n         public V[] getSampleValues() {\n             return (V[]) subSortedValues.toArray();\n         }\n+        @Override\n         @SuppressWarnings(\"unchecked\")\n         public V[] getNewSampleValues() {\n             return (V[]) subSortedNewValues.toArray();\n         }\n \n+        @Override\n         public boolean isAllowNullKey() {\n             return main.isAllowNullKey();\n         }\n+        @Override\n         public boolean isAllowNullValue() {\n             return main.isAllowNullValue();\n         }\n+        @Override\n         public boolean isPutAddSupported() {\n             return main.isPutAddSupported();\n         }\n+        @Override\n         public boolean isPutChangeSupported() {\n             return main.isPutChangeSupported();\n         }\n+        @Override\n         public boolean isRemoveSupported() {\n             return main.isRemoveSupported();\n         }\n+        @Override\n         public boolean isTestSerialization() {\n             return false;\n         }\n             this.subSortedValues.subList(SUBSIZE, this.subSortedValues.size()).clear();\n             this.subSortedNewValues.addAll(Arrays.asList(main.getNewSampleValues()).subList(0, SUBSIZE));\n         }\n+        @Override\n         public SortedMap<K, V> makeObject() {\n             // done this way so toKey is correctly set in the returned map\n             return ((SortedMap<K, V>) main.makeObject()).headMap(toKey);\n         }\n+        @Override\n         public SortedMap<K, V> makeFullMap() {\n             return ((SortedMap<K, V>) main.makeFullMap()).headMap(toKey);\n         }\n             } catch (IllegalArgumentException ex) {}\n             verify();\n         }\n+        @Override\n         public String getCompatibilityVersion() {\n             return main.getCompatibilityVersion() + \".HeadMapView\";\n         }\n             this.subSortedValues.subList(0, this.subSortedValues.size() - SUBSIZE).clear();\n             this.subSortedNewValues.addAll(Arrays.asList(main.getNewSampleValues()).subList(0, SUBSIZE));\n         }\n+        @Override\n         public SortedMap<K, V> makeObject() {\n             // done this way so toKey is correctly set in the returned map\n             return ((SortedMap<K, V>) main.makeObject()).tailMap(fromKey);\n         }\n+        @Override\n         public SortedMap<K, V> makeFullMap() {\n             return ((SortedMap<K, V>) main.makeFullMap()).tailMap(fromKey);\n         }\n             } catch (IllegalArgumentException ex) {}\n             verify();\n         }\n+        @Override\n         public String getCompatibilityVersion() {\n             return main.getCompatibilityVersion() + \".TailMapView\";\n         }\n                 SUBSIZE, this.main.getNewSampleValues().length - SUBSIZE));\n         }\n \n+        @Override\n         public SortedMap<K, V> makeObject() {\n             // done this way so toKey is correctly set in the returned map\n             return ((SortedMap<K, V>) main.makeObject()).subMap(fromKey, toKey);\n         }\n+        @Override\n         public SortedMap<K, V> makeFullMap() {\n             return ((SortedMap<K, V>) main.makeFullMap()).subMap(fromKey, toKey);\n         }\n             } catch (IllegalArgumentException ex) {}\n             verify();\n         }\n+        @Override\n         public String getCompatibilityVersion() {\n             return main.getCompatibilityVersion() + \".SubMapView\";\n         }\n--- a/src/test/org/apache/commons/collections/map/TestCaseInsensitiveMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestCaseInsensitiveMap.java\n         return BulkTest.makeSuite(TestCaseInsensitiveMap.class);\n     }\n \n+    @Override\n     public CaseInsensitiveMap<K, V> makeObject() {\n         return new CaseInsensitiveMap<K, V>();\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestCompositeMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestCompositeMap.java\n         return new TestSuite(TestCompositeMap.class);\n     }\n     \n+    @Override\n     public void setUp() throws Exception {\n         super.setUp();\n         this.pass = false;\n         junit.textui.TestRunner.main(testCaseName);\n     }\n     \n+    @Override\n     public CompositeMap<K, V> makeObject() {\n         CompositeMap<K, V> map = new CompositeMap<K, V>();\n         map.addComposited(new HashMap<K, V>());\n         assertTrue(pass);\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.3\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestDefaultedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestDefaultedMap.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public IterableMap<K, V> makeObject() {\n         return DefaultedMap.decorate(new HashMap<K, V>(), nullFactory);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void testMapGet() {\n         Map<K, V> map = new DefaultedMap<K, V>((V) \"NULL\");\n         assertEquals(\"NULL_OBJECT\", map.get(new Integer(0)));\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.2\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestFixedSizeMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestFixedSizeMap.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public IterableMap<K, V> makeObject() {\n         return FixedSizeMap.decorate(new HashMap<K, V>());\n     }\n \n+    @Override\n     public IterableMap<K, V> makeFullMap() {\n         Map<K, V> map = new HashMap<K, V>();\n         addSampleMappings(map);\n         return FixedSizeMap.decorate(map);\n     }\n \n+    @Override\n     public boolean isPutAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestFixedSizeSortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestFixedSizeSortedMap.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public SortedMap<K, V> makeObject() {\n         return FixedSizeSortedMap.decorate(new TreeMap<K, V>());\n     }\n \n+    @Override\n     public SortedMap<K, V> makeFullMap() {\n         SortedMap<K, V> map = new TreeMap<K, V>();\n         addSampleMappings(map);\n         return FixedSizeSortedMap.decorate(map);\n     }\n \n+    @Override\n     public boolean isSubMapViewsSerializable() {\n         // TreeMap sub map views have a bug in deserialization.\n         return false;\n     }\n \n+    @Override\n     public boolean isPutAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestFlat3Map.java\n+++ b/src/test/org/apache/commons/collections/map/TestFlat3Map.java\n         return BulkTest.makeSuite(TestFlat3Map.class);\n     }\n \n+    @Override\n     public Flat3Map<K, V> makeObject() {\n         return new Flat3Map<K, V>();\n     }\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public BulkTest bulkTestMapIterator() {\n         return new TestFlatMapIterator();\n     }\n             super(\"TestFlatMapIterator\");\n         }\n \n+        @Override\n         public V[] addSetValues() {\n             return TestFlat3Map.this.getNewSampleValues();\n         }\n \n+        @Override\n         public boolean supportsRemove() {\n             return TestFlat3Map.this.isRemoveSupported();\n         }\n \n+        @Override\n         public boolean supportsSetValue() {\n             return TestFlat3Map.this.isSetValueSupported();\n         }\n \n+        @Override\n         public MapIterator<K, V> makeEmptyIterator() {\n             resetEmpty();\n             return TestFlat3Map.this.getMap().mapIterator();\n         }\n \n+        @Override\n         public MapIterator<K, V> makeObject() {\n             resetFull();\n             return TestFlat3Map.this.getMap().mapIterator();\n         }\n \n+        @Override\n         public IterableMap<K, V> getMap() {\n             // assumes makeFullMapIterator() called first\n             return TestFlat3Map.this.getMap();\n         }\n \n+        @Override\n         public Map<K, V> getConfirmedMap() {\n             // assumes makeFullMapIterator() called first\n             return TestFlat3Map.this.getConfirmed();\n         }\n \n+        @Override\n         public void verify() {\n             super.verify();\n             TestFlat3Map.this.verify();\n         }\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestHashedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestHashedMap.java\n         return BulkTest.makeSuite(TestHashedMap.class);\n     }\n \n+    @Override\n     public HashedMap<K, V> makeObject() {\n         return new HashedMap<K, V>();\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestTransformedSortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestTransformedSortedMap.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public SortedMap<K, V> makeObject() {\n         return TransformedSortedMap.decorate(new TreeMap<K, V>(),\n                 (Transformer<? super V, ? extends V>) TransformerUtils.nopTransformer());\n     }\n \n+    @Override\n     public boolean isSubMapViewsSerializable() {\n         // TreeMap sub map views have a bug in deserialization.\n         return false;\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/set/AbstractTestSet.java\n+++ b/src/test/org/apache/commons/collections/set/AbstractTestSet.java\n     /**\n      * Provides additional verifications for sets.\n      */\n+    @Override\n     public void verify() {\n         super.verify();\n         \n     /**\n      * Set equals method is defined.\n      */\n+    @Override\n     public boolean isEqualsCheckable() {\n         return true;\n     }\n      *\n      * @return a confirmed empty collection\n      */\n+    @Override\n     public Collection<E> makeConfirmedCollection() {\n         return new HashSet<E>();\n     }\n      *\n      * @return a confirmed full collection\n      */\n+    @Override\n     public Collection<E> makeConfirmedFullCollection() {\n         Collection<E> set = makeConfirmedCollection();\n         set.addAll(Arrays.asList(getFullElements()));\n      *\n      * @return an empty set\n      */\n+    @Override\n     public abstract Set<E> makeObject();\n \n     /**\n      *\n      * @return a full set\n      */\n+    @Override\n     public Set<E> makeFullCollection() {\n         Set<E> set = makeObject();\n         set.addAll(Arrays.asList(getFullElements()));\n     /**\n      * Return the {@link AbstractTestCollection#collection} fixture, but cast as a Set.  \n      */\n+    @Override\n     public Set<E> getCollection() {\n         return (Set<E>) super.getCollection();\n     }\n     /**\n      * Return the {@link AbstractTestCollection#confirmed} fixture, but cast as a Set.\n      */\n+    @Override\n     public Set<E> getConfirmed() {\n         return (Set<E>) super.getConfirmed();\n     }\n--- a/src/test/org/apache/commons/collections/set/AbstractTestSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/AbstractTestSortedSet.java\n      * Verification extension, will check the order of elements,\n      * the sets should already be verified equal.\n      */\n+    @Override\n     public void verify() {\n         super.verify();\n         \n      * Overridden because SortedSets don't allow null elements (normally).\n      * @return false\n      */\n+    @Override\n     public boolean isNullSupported() {\n         return false;\n     }\n      *\n      * @return a confirmed empty collection\n      */\n+    @Override\n     public SortedSet<E> makeConfirmedCollection() {\n         return new TreeSet<E>();\n     }\n     /**\n      * Override to return comparable objects.\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public E[] getFullNonNullElements() {\n         Object[] elements = new Object[30];\n     /**\n      * Override to return comparable objects.\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public E[] getOtherNonNullElements() {\n         Object[] elements = new Object[30];\n \n         }\n \n+        @Override\n         public boolean isNullSupported() {\n             return AbstractTestSortedSet.this.isNullSupported();\n         }\n+        @Override\n         public boolean isAddSupported() {\n             return AbstractTestSortedSet.this.isAddSupported();\n         }\n+        @Override\n         public boolean isRemoveSupported() {\n             return AbstractTestSortedSet.this.isRemoveSupported();\n         }\n+        @Override\n         public boolean isFailFastSupported() {\n             return AbstractTestSortedSet.this.isFailFastSupported();\n         }\n \n+        @Override\n         public E[] getFullElements() {\n             return m_FullElements;\n         }\n+        @Override\n         public E[] getOtherElements() {\n             return m_OtherElements;\n         }\n             }\n         }\n \n+        @Override\n         public SortedSet<E> makeObject() {\n             return getSubSet(AbstractTestSortedSet.this.makeObject());\n         }\n \n+        @Override\n         public SortedSet<E> makeFullCollection() {\n             return getSubSet(AbstractTestSortedSet.this.makeFullCollection());\n         }\n         \n+        @Override\n         public boolean isTestSerialization() {\n             return false;\n         }\n         \n+        @Override\n         public BulkTest bulkTestSortedSetSubSet() {\n             return null;  // prevent infinite recursion\n         }\n+        @Override\n         public BulkTest bulkTestSortedSetHeadSet() {\n             return null;  // prevent infinite recursion\n         }\n+        @Override\n         public BulkTest bulkTestSortedSetTailSet() {\n             return null;  // prevent infinite recursion\n         }\n--- a/src/test/org/apache/commons/collections/set/TestCompositeSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestCompositeSet.java\n         return new TestSuite(TestCompositeSet.class);\n     }\n \n+    @Override\n     public CompositeSet<E> makeObject() {\n         final HashSet<E> contained = new HashSet<E>();\n         CompositeSet<E> set = new CompositeSet<E>(contained);\n         }\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.3\";\n     }\n--- a/src/test/org/apache/commons/collections/set/TestListOrderedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestListOrderedSet.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public ListOrderedSet<E> makeObject() {\n         return ListOrderedSet.decorate(new HashSet<E>());\n     }\n     }\n \n     static class A {\n+        @Override\n         public boolean equals(Object obj) {\n             return (obj instanceof A || obj instanceof B);\n         }\n+        @Override\n         public int hashCode() {\n             return 1;\n         }\n     }\n \n     static class B {\n+        @Override\n         public boolean equals(Object obj) {\n             return (obj instanceof A || obj instanceof B);\n         }\n+        @Override\n         public int hashCode() {\n             return 1;\n         }\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/set/TestListOrderedSet2.java\n+++ b/src/test/org/apache/commons/collections/set/TestListOrderedSet2.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public ListOrderedSet<E> makeObject() {\n         return new ListOrderedSet<E>();\n     }\n         assertSame(ONE, set.get(3));\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/set/TestMapBackedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestMapBackedSet.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public Set<E> makeObject() {\n         return MapBackedSet.decorate(new HashedMap<E, Object>());\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/set/TestMapBackedSet2.java\n+++ b/src/test/org/apache/commons/collections/set/TestMapBackedSet2.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public Set<E> makeObject() {\n         return MapBackedSet.decorate(new LinkedMap<E, Object>());\n     }\n         }\n     }\n \n+    @Override\n     public void testCanonicalEmptyCollectionExists() {\n     }\n \n+    @Override\n     public void testCanonicalFullCollectionExists() {\n     }\n \n--- a/src/test/org/apache/commons/collections/set/TestPredicatedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestPredicatedSet.java\n         return (PredicatedSet<E>) PredicatedSet.decorate(set, predicate);\n     }\n \n+    @Override\n     public PredicatedSet<E> makeObject() {\n         return decorateSet(new HashSet<E>(), truePredicate);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public E[] getFullElements() {\n         return (E[]) new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n          !set.contains(\"four\"));\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/set/TestPredicatedSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestPredicatedSortedSet.java\n \n     protected Predicate<E> truePredicate = TruePredicate.<E>truePredicate();\n \n+    @Override\n     public SortedSet<E> makeObject() {\n         return PredicatedSortedSet.decorate(new TreeSet<E>(), truePredicate);\n     }\n \n+    @Override\n     public SortedSet<E> makeFullCollection() {\n         TreeSet<E> set = new TreeSet<E>();\n         set.addAll(Arrays.asList(getFullElements()));\n         assertTrue(\"natural order, so comparator should be null\", c == null);\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/set/TestSynchronizedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestSynchronizedSet.java\n     }\n \n    //-------------------------------------------------------------------\n+    @Override\n     public Set<E> makeObject() {\n         return SynchronizedSet.decorate(new HashSet<E>());\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/set/TestSynchronizedSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestSynchronizedSortedSet.java\n     }\n \n    //-------------------------------------------------------------------\n+    @Override\n     public SortedSet<E> makeObject() {\n         return SynchronizedSortedSet.decorate(new TreeSet<E>());\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/set/TestTransformedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestTransformedSet.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public Set<E> makeConfirmedCollection() {\n         return new HashSet<E>();\n     }\n \n+    @Override\n     public Set<E> makeConfirmedFullCollection() {\n         Set<E> set = new HashSet<E>();\n         set.addAll(Arrays.asList(getFullElements()));\n         return set;\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public Set<E> makeObject() {\n         return TransformedSet.decorate(new HashSet<E>(),\n                 (Transformer<E, E>) TestTransformedCollection.NOOP_TRANSFORMER);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public Set<E> makeFullCollection() {\n         Set<E> list = new HashSet<E>();\n         assertEquals(true, set.remove(new Integer((String) els[0])));\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/set/TestTransformedSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestTransformedSortedSet.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public SortedSet<E> makeObject() {\n         return TransformedSortedSet.decorate(new TreeSet<E>(), (Transformer<E, E>) TestTransformedCollection.NOOP_TRANSFORMER);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public SortedSet<E> makeFullCollection() {\n         SortedSet<E> set = new TreeSet<E>();\n         assertEquals(true, set.remove(new Integer((String) els[0])));\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/set/TestUnmodifiableSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestUnmodifiableSet.java\n     }\n \n     //-------------------------------------------------------------------\n+    @Override\n     public Set<E> makeObject() {\n         return UnmodifiableSet.decorate(new HashSet<E>());\n     }\n \n+    @Override\n     public Set<E> makeFullCollection() {\n         HashSet<E> set = new HashSet<E>();\n         set.addAll(Arrays.asList(getFullElements()));\n         return UnmodifiableSet.decorate(set);\n     }\n \n+    @Override\n     public boolean isAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/set/TestUnmodifiableSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestUnmodifiableSortedSet.java\n     }\n \n     //-------------------------------------------------------------------\n+    @Override\n     public SortedSet<E> makeObject() {\n         return UnmodifiableSortedSet.decorate(new TreeSet<E>());\n     }\n \n+    @Override\n     public UnmodifiableSortedSet<E> makeFullCollection() {\n         TreeSet<E> set = new TreeSet<E>();\n         set.addAll(Arrays.asList(getFullElements()));\n         return (UnmodifiableSortedSet<E>) UnmodifiableSortedSet.decorate(set);\n     }\n \n+    @Override\n     public boolean isAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n         assertTrue(\"natural order, so comparator should be null\", c == null);\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }", "timestamp": 1279731862, "metainfo": ""}