{"sha": "66c4b99ddc7daea806c1318a40736d0f5c8fa7bd", "log": "COLLECTIONS-219 - CollectionUtils - Fix removeAll() method which was completely broken  ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- *  Copyright 2001-2005 The Apache Software Foundation\n+ *  Copyright 2001-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n      * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n      * any elements that also occur in <code>remove</code>.\n      * @throws NullPointerException if either parameter is null\n-     * @since Commons Collections 3.2\n+     * @since Commons Collections 3.3 (method existed in 3.2 but was completely broken)\n      */\n     public static Collection removeAll(Collection collection, Collection remove) {\n-        return ListUtils.retainAll(collection, remove);\n+        return ListUtils.removeAll(collection, remove);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- *  Copyright 2001-2005 The Apache Software Foundation\n+ *  Copyright 2001-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         assertEquals(eltb,eltc);\n         assertEquals(eltc,eltb);\n     }\n-    \n-     public void testTransformedCollection() {\n+\n+    //-----------------------------------------------------------------------\n+    public void testRetainAll() {\n+        List base = new ArrayList();\n+        base.add(\"A\");\n+        base.add(\"B\");\n+        base.add(\"C\");\n+        List sub = new ArrayList();\n+        sub.add(\"A\");\n+        sub.add(\"C\");\n+        sub.add(\"X\");\n+        \n+        Collection result = CollectionUtils.retainAll(base, sub);\n+        assertEquals(2, result.size());\n+        assertEquals(true, result.contains(\"A\"));\n+        assertEquals(false, result.contains(\"B\"));\n+        assertEquals(true, result.contains(\"C\"));\n+        assertEquals(3, base.size());\n+        assertEquals(true, base.contains(\"A\"));\n+        assertEquals(true, base.contains(\"B\"));\n+        assertEquals(true, base.contains(\"C\"));\n+        assertEquals(3, sub.size());\n+        assertEquals(true, sub.contains(\"A\"));\n+        assertEquals(true, sub.contains(\"C\"));\n+        assertEquals(true, sub.contains(\"X\"));\n+        \n+        try {\n+            CollectionUtils.retainAll(null, null);\n+            fail(\"expecting NullPointerException\");\n+        } catch(NullPointerException npe){} // this is what we want\n+    }\n+\n+    public void testRemoveAll() {\n+        List base = new ArrayList();\n+        base.add(\"A\");\n+        base.add(\"B\");\n+        base.add(\"C\");\n+        List sub = new ArrayList();\n+        sub.add(\"A\");\n+        sub.add(\"C\");\n+        sub.add(\"X\");\n+        \n+        Collection result = CollectionUtils.removeAll(base, sub);\n+        assertEquals(1, result.size());\n+        assertEquals(false, result.contains(\"A\"));\n+        assertEquals(true, result.contains(\"B\"));\n+        assertEquals(false, result.contains(\"C\"));\n+        assertEquals(3, base.size());\n+        assertEquals(true, base.contains(\"A\"));\n+        assertEquals(true, base.contains(\"B\"));\n+        assertEquals(true, base.contains(\"C\"));\n+        assertEquals(3, sub.size());\n+        assertEquals(true, sub.contains(\"A\"));\n+        assertEquals(true, sub.contains(\"C\"));\n+        assertEquals(true, sub.contains(\"X\"));\n+        \n+        try {\n+            CollectionUtils.removeAll(null, null);\n+            fail(\"expecting NullPointerException\");\n+        } catch(NullPointerException npe){} // this is what we want\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTransformedCollection() {\n         Transformer transformer = TransformerUtils.nopTransformer();\n         Collection collection = \n             CollectionUtils.transformedCollection(new ArrayList(), transformer);\n--- a/src/test/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/org/apache/commons/collections/TestListUtils.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2004,2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         assertTrue(retained.equals(fullList));\n         \n         try {\n-            List list = ListUtils.retainAll(null, null);\n+            ListUtils.retainAll(null, null);\n             fail(\"expecting NullPointerException\");\n         } catch(NullPointerException npe){} // this is what we want\n     }\n         assertTrue(remainder.equals(fullList));\n         \n         try {\n-            List list = ListUtils.removeAll(null, null);\n+            ListUtils.removeAll(null, null);\n             fail(\"expecting NullPointerException\");\n         } catch(NullPointerException npe) {} // this is what we want\n     }", "timestamp": 1154550242, "metainfo": ""}