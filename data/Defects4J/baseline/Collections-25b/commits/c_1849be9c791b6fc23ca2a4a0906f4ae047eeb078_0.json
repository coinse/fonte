{"sha": "1849be9c791b6fc23ca2a4a0906f4ae047eeb078", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r740150 | mbenson | 2009-02-02 15:24:00 -0800 (Mon, 02 Feb 2009) | 1 line          make all [collections] maps implement IterableMap     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/MultiMap.java\n+++ b/src/java/org/apache/commons/collections/MultiMap.java\n package org.apache.commons.collections;\n \n import java.util.Collection;\n-import java.util.Map;\n \n /** \n  * Defines a map that holds a collection of values against each key.\n  * @author James Strachan\n  * @author Stephen Colebourne\n  */\n-public interface MultiMap extends Map {\n+public interface MultiMap<K, V> extends IterableMap<K, Object> {\n \n     /**\n      * Removes a specific value from map.\n      * @throws ClassCastException if the key or value is of an invalid type\n      * @throws NullPointerException if the key or value is null and null is invalid\n      */\n-    public Object remove(Object key, Object item);\n+    public V remove(K key, V item);\n \n     //-----------------------------------------------------------------------\n     /**\n      * @throws ClassCastException if the key is of an invalid type\n      * @throws NullPointerException if the key is null and null keys are invalid\n      */\n-    Object get(Object key);\n+    Object get(K key);\n \n     /**\n      * Checks whether the map contains the value specified.\n      * @throws NullPointerException if the key or value is null and null is invalid\n      * @throws IllegalArgumentException if the key or value is invalid\n      */\n-    Object put(Object key, Object value);\n+    Object put(K key, Object value);\n \n     /**\n      * Removes all values associated with the specified key.\n      * @throws ClassCastException if the key is of an invalid type\n      * @throws NullPointerException if the key is null and null keys are invalid\n      */\n-    Object remove(Object key);\n+    Object remove(K key);\n \n     /**\n      * Gets a collection containing all the values in the map.\n      *\n      * @return a collection view of the values contained in this map\n      */\n-    Collection values();\n+    Collection<Object> values();\n \n }", "timestamp": 1252994187, "metainfo": ""}