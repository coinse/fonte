{"sha": "a18bc1ca436c895cd7e2a914838afba0dba0c706", "log": "Tighten Map tests Javadoc   ", "commit": "\n--- a/src/test/org/apache/commons/collections/AbstractTestMap.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestMap.java,v 1.4 2003/10/07 22:20:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestMap.java,v 1.5 2003/10/07 22:35:59 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @author Rodney Waldhoff\n  * @author Paul Jack\n  * @author Stephen Colebourne\n- * @version $Revision: 1.4 $ $Date: 2003/10/07 22:20:57 $\n+ * @version $Revision: 1.5 $ $Date: 2003/10/07 22:35:59 $\n  */\n public abstract class AbstractTestMap extends AbstractTestObject {\n \n     // test methods.  \n \n     /**\n-     *  Test to ensure that makeEmptyMap and makeFull returns a new non-null\n-     *  map with each invocation.  \n+     * Test to ensure that makeEmptyMap and makeFull returns a new non-null\n+     * map with each invocation.  \n      */\n     public void testMakeMap() {\n         Map em = makeEmptyMap();\n     }\n \n     /**\n-     *  Tests Map.isEmpty()\n+     * Tests Map.isEmpty()\n      */\n     public void testMapIsEmpty() {\n         resetEmpty();\n     }\n \n     /**\n-     *  Tests Map.size()\n+     * Tests Map.size()\n      */\n     public void testMapSize() {\n         resetEmpty();\n     }\n \n     /**\n-     *  Tests {@link Map#clear()}.  If the map {@link #isRemoveSupported()}\n-     *  can add and remove elements}, then {@link Map#size()} and {@link\n-     *  Map#isEmpty()} are used to ensure that map has no elements after a call\n-     *  to clear.  If the map does not support adding and removing elements,\n-     *  this method checks to ensure clear throws an\n-     *  UnsupportedOperationException.\n+     * Tests {@link Map#clear()}.  If the map {@link #isRemoveSupported()}\n+     * can add and remove elements}, then {@link Map#size()} and\n+     * {@link Map#isEmpty()} are used to ensure that map has no elements after\n+     * a call to clear.  If the map does not support adding and removing\n+     * elements, this method checks to ensure clear throws an\n+     * UnsupportedOperationException.\n      */\n     public void testMapClear() {\n         if (!isRemoveSupported()) {\n \n \n     /**\n-     *  Tests Map.containsKey(Object) by verifying it returns false for all\n-     *  sample keys on a map created using an empty map and returns true for\n-     *  all sample keys returned on a full map. \n+     * Tests Map.containsKey(Object) by verifying it returns false for all\n+     * sample keys on a map created using an empty map and returns true for\n+     * all sample keys returned on a full map. \n      */\n     public void testMapContainsKey() {\n         Object[] keys = getSampleKeys();\n     }\n \n     /**\n-     *  Tests Map.containsValue(Object) by verifying it returns false for all\n-     *  sample values on an empty map and returns true for all sample values on\n-     *  a full map.\n+     * Tests Map.containsValue(Object) by verifying it returns false for all\n+     * sample values on an empty map and returns true for all sample values on\n+     * a full map.\n      */\n     public void testMapContainsValue() {\n         Object[] values = getSampleValues();\n \n \n     /**\n-     *  Tests Map.equals(Object)\n+     * Tests Map.equals(Object)\n      */\n     public void testMapEquals() {\n         resetEmpty();\n \n \n     /**\n-     *  Tests Map.get(Object)\n+     * Tests Map.get(Object)\n      */\n     public void testMapGet() {\n         resetEmpty();\n     }\n \n     /**\n-     *  Tests Map.hashCode()\n+     * Tests Map.hashCode()\n      */\n     public void testMapHashCode() {\n         resetEmpty();\n     }\n \n     /**\n-     *  Tests Map.toString().  Since the format of the string returned by the\n-     *  toString() method is not defined in the Map interface, there is no\n-     *  common way to test the results of the toString() method.  Thereforce,\n-     *  it is encouraged that Map implementations override this test with one\n-     *  that checks the format matches any format defined in its API.  This\n-     *  default implementation just verifies that the toString() method does\n-     *  not return null.\n+     * Tests Map.toString().  Since the format of the string returned by the\n+     * toString() method is not defined in the Map interface, there is no\n+     * common way to test the results of the toString() method.  Thereforce,\n+     * it is encouraged that Map implementations override this test with one\n+     * that checks the format matches any format defined in its API.  This\n+     * default implementation just verifies that the toString() method does\n+     * not return null.\n      */\n     public void testMapToString() {\n         resetEmpty();\n         }\n     }\n \n-        /**\n+    /**\n      * Compare the current serialized form of the Map\n      * against the canonical version in CVS.\n      */\n     }\n \n     /**\n-     *  Tests Map.put(Object, Object)\n+     * Tests Map.put(Object, Object)\n      */\n     public void testMapPut() {\n         resetEmpty();\n                                    !map.containsValue(values[i]));\n                     }\n                 }\n+            } else {\n+                try {\n+                    map.put(keys[0], newValues[0]);\n+                    fail(\"Expected UnsupportedOperationException on put (change)\");\n+                } catch (UnsupportedOperationException ex) {}\n             }\n             \n         } else if (isPutChangeSupported()) {\n+            resetEmpty();\n+            try {\n+                map.put(keys[0], values[0]);\n+                fail(\"Expected UnsupportedOperationException or IllegalArgumentException on put (add) when fixed size\");\n+            } catch (IllegalArgumentException ex) {\n+            } catch (UnsupportedOperationException ex) {\n+            }\n+            \n             resetFull();\n             int i = 0;\n             for (Iterator it = map.keySet().iterator(); it.hasNext() && i < newValues.length; i++) {\n                         !map.containsValue(values[i]));\n                 }\n             }\n-        }\n-    }\n-\n-    /**\n-     *  Tests Map.putAll(Collection)\n+        } else {\n+            try {\n+                map.put(keys[0], values[0]);\n+                fail(\"Expected UnsupportedOperationException on put (add)\");\n+            } catch (UnsupportedOperationException ex) {}\n+        }\n+    }\n+\n+    /**\n+     * Tests Map.putAll(map)\n      */\n     public void testMapPutAll() {\n-        if (!isPutAddSupported()) return;\n+        if (!isPutAddSupported()) {\n+            if (!isPutChangeSupported()) {\n+                Map temp = makeFullMap();\n+                resetEmpty();\n+                try {\n+                    map.putAll(temp);\n+                    fail(\"Expected UnsupportedOperationException on putAll\");\n+                } catch (UnsupportedOperationException ex) {}\n+            }\n+            return;\n+        }\n \n         resetEmpty();\n \n     }\n \n     /**\n-     *  Tests Map.remove(Object)\n+     * Tests Map.remove(Object)\n      */\n     public void testMapRemove() {\n         if (!isRemoveSupported()) {\n \n \n     /**\n-     *  Utility methods to create an array of Map.Entry objects\n-     *  out of the given key and value arrays.<P>\n+     * Utility methods to create an array of Map.Entry objects\n+     * out of the given key and value arrays.<P>\n      *\n-     *  @param keys    the array of keys\n-     *  @param values  the array of values\n-     *  @return an array of Map.Entry of those keys to those values\n+     * @param keys    the array of keys\n+     * @param values  the array of values\n+     * @return an array of Map.Entry of those keys to those values\n      */\n     private Map.Entry[] makeEntryArray(Object[] keys, Object[] values) {\n         Map.Entry[] result = new Map.Entry[keys.length];\n \n \n     /**\n-     *  Bulk test {@link Map#entrySet()}.  This method runs through all of\n-     *  the tests in {@link TestSet}.  \n-     *  After modification operations, {@link #verify()} is invoked to ensure\n-     *  that the map and the other collection views are still valid.\n+     * Bulk test {@link Map#entrySet()}.  This method runs through all of\n+     * the tests in {@link TestSet}.  \n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the map and the other collection views are still valid.\n      *\n-     *  @return a {@link TestSet} instance for testing the map's entry set\n+     * @return a {@link TestSet} instance for testing the map's entry set\n      */\n     public BulkTest bulkTestMapEntrySet() {\n         return new TestMapEntrySet();\n \n \n     /**\n-     *  Bulk test {@link Map#keySet()}.  This method runs through all of\n-     *  the tests in {@link TestSet}.  \n-     *  After modification operations, {@link #verify()} is invoked to ensure\n-     *  that the map and the other collection views are still valid.\n+     * Bulk test {@link Map#keySet()}.  This method runs through all of\n+     * the tests in {@link TestSet}.  \n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the map and the other collection views are still valid.\n      *\n-     *  @return a {@link TestSet} instance for testing the map's key set\n+     * @return a {@link TestSet} instance for testing the map's key set\n      */\n     public BulkTest bulkTestMapKeySet() {\n         return new TestMapKeySet();\n \n \n     /**\n-     *  Bulk test {@link Map#values()}.  This method runs through all of\n-     *  the tests in {@link TestCollection}.  \n-     *  After modification operations, {@link #verify()} is invoked to ensure\n-     *  that the map and the other collection views are still valid.\n+     * Bulk test {@link Map#values()}.  This method runs through all of\n+     * the tests in {@link TestCollection}.  \n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the map and the other collection views are still valid.\n      *\n-     *  @return a {@link TestCollection} instance for testing the map's \n+     * @return a {@link TestCollection} instance for testing the map's \n      *    values collection\n      */\n     public BulkTest bulkTestMapValues() {\n \n \n     /**\n-     *  Resets the {@link #map}, {@link #entrySet}, {@link #keySet},\n-     *  {@link #values} and {@link #confirmed} fields to empty.\n+     * Resets the {@link #map}, {@link #entrySet}, {@link #keySet},\n+     * {@link #values} and {@link #confirmed} fields to empty.\n      */\n     protected void resetEmpty() {\n         this.map = makeEmptyMap();\n \n \n     /**\n-     *  Resets the {@link #map}, {@link #entrySet}, {@link #keySet},\n-     *  {@link #values} and {@link #confirmed} fields to full.\n+     * Resets the {@link #map}, {@link #entrySet}, {@link #keySet},\n+     * {@link #values} and {@link #confirmed} fields to full.\n      */\n     protected void resetFull() {\n         this.map = makeFullMap();\n \n \n     /**\n-     *  Resets the collection view fields.\n+     * Resets the collection view fields.\n      */\n     private void views() {\n         this.keySet = map.keySet();\n \n \n     /**\n-     *  Verifies that {@link #map} is still equal to {@link #confirmed}.\n-     *  This method checks that the map is equal to the HashMap, \n-     *  <I>and</I> that the map's collection views are still equal to\n-     *  the HashMap's collection views.  An <Code>equals</Code> test\n-     *  is done on the maps and their collection views; their size and\n-     *  <Code>isEmpty</Code> results are compared; their hashCodes are\n-     *  compared; and <Code>containsAll</Code> tests are run on the \n-     *  collection views.\n+     * Verifies that {@link #map} is still equal to {@link #confirmed}.\n+     * This method checks that the map is equal to the HashMap, \n+     * <I>and</I> that the map's collection views are still equal to\n+     * the HashMap's collection views.  An <Code>equals</Code> test\n+     * is done on the maps and their collection views; their size and\n+     * <Code>isEmpty</Code> results are compared; their hashCodes are\n+     * compared; and <Code>containsAll</Code> tests are run on the \n+     * collection views.\n      */\n     protected void verify() {\n         verifyMap();\n \n \n     /**\n-     *  Erases any leftover instance variables by setting them to null.\n+     * Erases any leftover instance variables by setting them to null.\n      */\n     protected void tearDown() throws Exception {\n         map = null;", "timestamp": 1065566159, "metainfo": ""}