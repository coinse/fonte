{"sha": "da436314a90182dafc50962d408c9111c03a235d", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r740150 | mbenson | 2009-02-02 15:24:00 -0800 (Mon, 02 Feb 2009) | 1 line          make all [collections] maps implement IterableMap     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/DefaultedMap.java\n+++ b/src/java/org/apache/commons/collections/map/DefaultedMap.java\n import java.util.Map;\n \n import org.apache.commons.collections.Factory;\n+import org.apache.commons.collections.IterableMap;\n import org.apache.commons.collections.Transformer;\n import org.apache.commons.collections.functors.ConstantTransformer;\n import org.apache.commons.collections.functors.FactoryTransformer;\n  * @author Rafael U.C. Afonso\n  * @see LazyMap\n  */\n-public class DefaultedMap\n-        extends AbstractMapDecorator\n-        implements Map, Serializable {\n+public class DefaultedMap<K, V> extends AbstractMapDecorator<K, V> implements Serializable {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 19698628745827L;\n \n     /** The transformer to use if the map does not contain a key */\n-    protected final Object value;\n+    private final Transformer<? super K, ? extends V> value;\n \n     //-----------------------------------------------------------------------\n     /**\n      * @param defaultValue  the default value to return when the key is not found\n      * @throws IllegalArgumentException if map is null\n      */\n-    public static Map decorate(Map map, Object defaultValue) {\n-        if (defaultValue instanceof Transformer) {\n-            defaultValue = ConstantTransformer.getInstance(defaultValue);\n-        }\n-        return new DefaultedMap(map, defaultValue);\n+    public static <K, V> Map<K, V> decorate(Map<K, V> map, V defaultValue) {\n+        return new DefaultedMap<K, V>(map, ConstantTransformer.getInstance(defaultValue));\n     }\n \n     /**\n      * @param factory  the factory to use to create entries, must not be null\n      * @throws IllegalArgumentException if map or factory is null\n      */\n-    public static Map decorate(Map map, Factory factory) {\n+    public static <K, V> IterableMap<K, V> decorate(Map<K, V> map, Factory<? extends V> factory) {\n         if (factory == null) {\n             throw new IllegalArgumentException(\"Factory must not be null\");\n         }\n-        return new DefaultedMap(map, FactoryTransformer.getInstance(factory));\n+        return new DefaultedMap<K, V>(map, FactoryTransformer.getInstance(factory));\n     }\n \n     /**\n      * @param transformer  the transformer to use as a factory to create entries, must not be null\n      * @throws IllegalArgumentException if map or factory is null\n      */\n-    public static Map decorate(Map map, Transformer transformer) {\n+    public static <K, V> Map<K, V> decorate(Map<K, V> map, Transformer<? super K, ? extends V> transformer) {\n         if (transformer == null) {\n            throw new IllegalArgumentException(\"Transformer must not be null\");\n        }\n-       return new DefaultedMap(map, transformer);\n+       return new DefaultedMap<K, V>(map, transformer);\n     }\n \n     //-----------------------------------------------------------------------\n      * \n      * @param defaultValue  the default value to return when the key is not found\n      */\n-    public DefaultedMap(Object defaultValue) {\n-        super(new HashMap());\n-        if (defaultValue instanceof Transformer) {\n-            defaultValue = ConstantTransformer.getInstance(defaultValue);\n-        }\n-        this.value = defaultValue;\n+    public DefaultedMap(V defaultValue) {\n+        this(ConstantTransformer.getInstance(defaultValue));\n+    }\n+\n+    /**\n+     * Constructs a new empty <code>DefaultedMap</code> that decorates\n+     * a <code>HashMap</code>.\n+     * <p>\n+     * @param defaultValueTransformer transformer to use to generate missing values.\n+     */\n+    public DefaultedMap(Transformer<? super K, ? extends V> defaultValueTransformer) {\n+        this(new HashMap<K, V>(), defaultValueTransformer);\n     }\n \n     /**\n      * @param value  the value to use\n      * @throws IllegalArgumentException if map or transformer is null\n      */\n-    protected DefaultedMap(Map map, Object value) {\n+    protected DefaultedMap(Map<K, V> map, Transformer<? super K, ? extends V> defaultValueTransformer) {\n         super(map);\n-        this.value = value;\n+        this.value = defaultValueTransformer;\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws IOException\n      * @throws ClassNotFoundException\n      */\n+    @SuppressWarnings(\"unchecked\")\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n         map = (Map) in.readObject();\n     }\n \n     //-----------------------------------------------------------------------\n-    public Object get(Object key) {\n+    @SuppressWarnings(\"unchecked\")\n+    public V get(Object key) {\n         // create value for key if key is not currently in the map\n         if (map.containsKey(key) == false) {\n-            if (value instanceof Transformer) {\n-                return ((Transformer) value).transform(key);\n-            }\n-            return value;\n+            return value.transform((K) key);\n         }\n         return map.get(key);\n     }", "timestamp": 1252994161, "metainfo": ""}