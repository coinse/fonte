{"sha": "1cece986b54391c48c737adaf90259168eea1562", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r570378 | skestle | 2007-08-28 04:03:40 -0700 (Tue, 28 Aug 2007) | 1 line          Generified InstantiateFactory     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestFactoryUtils.java\n+++ b/src/test/org/apache/commons/collections/TestFactoryUtils.java\n import java.util.Date;\n import java.util.TimeZone;\n \n-import junit.framework.Test;\n-import junit.framework.TestSuite;\n-import junit.textui.TestRunner;\n-\n import org.apache.commons.collections.functors.ConstantFactory;\n+import org.junit.Test;\n \n /**\n  * Tests the org.apache.commons.collections.FactoryUtils class.\n      */\n     public TestFactoryUtils(String name) {\n         super(name);\n-    }\n-\n-    /**\n-     * Main.\n-     * @param args\n-     */    \n-    public static void main(String[] args) {\n-        TestRunner.run(suite());\n-    }\n-\n-    /**\n-     * Return class as a test suite.\n-     */\n-    public static Test suite() {\n-        return new TestSuite(TestFactoryUtils.class);\n     }\n \n     /**\n     //------------------------------------------------------------------\n     \n     public void testNullFactory() {\n-        Factory factory = FactoryUtils.nullFactory();\n+        Factory<Object> factory = FactoryUtils.nullFactory();\n         assertNotNull(factory);\n         Object created = factory.create();\n         assertNull(created);\n     //------------------------------------------------------------------\n     \n     public void testConstantFactoryNull() {\n-        Factory factory = FactoryUtils.constantFactory(null);\n+        Factory<Object> factory = FactoryUtils.constantFactory(null);\n         assertNotNull(factory);\n         Object created = factory.create();\n         assertNull(created);\n \n     public void testConstantFactoryConstant() {\n         Integer constant = new Integer(9);\n-        Factory factory = FactoryUtils.constantFactory(constant);\n-        assertNotNull(factory);\n-        Object created = factory.create();\n+        Factory<Integer> factory = FactoryUtils.constantFactory(constant);\n+        assertNotNull(factory);\n+        Integer created = factory.create();\n         assertSame(constant, created);\n     }\n \n \n     public void testPrototypeFactoryPublicCloneMethod() throws Exception {\n         Date proto = new Date();\n-        Factory factory = FactoryUtils.prototypeFactory(proto);\n-        assertNotNull(factory);\n-        Object created = factory.create();\n+        Factory<Date> factory = FactoryUtils.prototypeFactory(proto);\n+        assertNotNull(factory);\n+        Date created = factory.create();\n         assertTrue(proto != created);\n         assertEquals(proto, created);\n         \n         out.writeObject(factory);\n         out.close();\n         ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n-        Object dest = in.readObject();\n+        in.readObject();\n         in.close();\n     }\n \n     public void testPrototypeFactoryPublicCopyConstructor() throws Exception {\n         Mock1 proto = new Mock1(6);\n-        Factory factory = FactoryUtils.prototypeFactory(proto);\n+        Factory<Object> factory = FactoryUtils.<Object>prototypeFactory(proto);\n         assertNotNull(factory);\n         Object created = factory.create();\n         assertTrue(proto != created);\n         } catch (NotSerializableException ex) {\n             out.close();\n         }\n-        factory = FactoryUtils.prototypeFactory(new Mock2(\"S\"));\n+        factory = FactoryUtils.<Object>prototypeFactory(new Mock2(\"S\"));\n         buffer = new ByteArrayOutputStream();\n         out = new ObjectOutputStream(buffer);\n         out.writeObject(factory);\n         out.close();\n         ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n-        Object dest = in.readObject();\n+        in.readObject();\n         in.close();\n     }\n \n     public void testPrototypeFactoryPublicSerialization() throws Exception {\n         Integer proto = new Integer(9);\n-        Factory factory = FactoryUtils.prototypeFactory(proto);\n-        assertNotNull(factory);\n-        Object created = factory.create();\n+        Factory<Integer> factory = FactoryUtils.prototypeFactory(proto);\n+        assertNotNull(factory);\n+        Integer created = factory.create();\n         assertTrue(proto != created);\n         assertEquals(proto, created);\n         \n         out.writeObject(factory);\n         out.close();\n         ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n-        Object dest = in.readObject();\n+        in.readObject();\n         in.close();\n     }\n \n     public void testPrototypeFactoryPublicSerializationError() {\n         Mock2 proto = new Mock2(new Object());\n-        Factory factory = FactoryUtils.prototypeFactory(proto);\n-        assertNotNull(factory);\n-        try {\n-            Object created = factory.create();\n-            \n+        Factory<Object> factory = FactoryUtils.<Object>prototypeFactory(proto);\n+        assertNotNull(factory);\n+        try {\n+            factory.create();\n         } catch (FunctorException ex) {\n             assertTrue(ex.getCause() instanceof IOException);\n             return;\n     public void testPrototypeFactoryPublicBad() {\n         Object proto = new Object();\n         try {\n-            Factory factory = FactoryUtils.prototypeFactory(proto);\n-            \n+            FactoryUtils.prototypeFactory(proto);\n         } catch (IllegalArgumentException ex) {\n             return;\n         }\n         }\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     public static class Mock2 implements Serializable {\n         private final Object iVal;\n         public Mock2(Object val) {\n     // instantiateFactory\n     //------------------------------------------------------------------\n     \n-    public void testInstantiateFactoryNull() {\n-        try {\n-            Factory factory = FactoryUtils.instantiateFactory(null);\n-            \n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    public void testInstantiateFactorySimple() {\n-        Factory factory = FactoryUtils.instantiateFactory(Mock3.class);\n-        assertNotNull(factory);\n-        Object created = factory.create();\n-        assertEquals(0, ((Mock3) created).getValue());\n+    @Test(expected=IllegalArgumentException.class)\n+    public void instantiateFactoryNull() {\n+        FactoryUtils.instantiateFactory(null);\n+    }\n+\n+    @Test\n+    public void instantiateFactorySimple() {\n+        Factory<Mock3> factory = FactoryUtils.instantiateFactory(Mock3.class);\n+        assertNotNull(factory);\n+        Mock3 created = factory.create();\n+        assertEquals(0, created.getValue());\n         created = factory.create();\n-        assertEquals(1, ((Mock3) created).getValue());\n-    }\n-\n-    public void testInstantiateFactoryMismatch() {\n-        try {\n-            Factory factory = FactoryUtils.instantiateFactory(Date.class, null, new Object[] {null});\n-            \n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    public void testInstantiateFactoryNoConstructor() {\n-        try {\n-            Factory factory = FactoryUtils.instantiateFactory(Date.class, new Class[] {Long.class}, new Object[] {null});\n-            \n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    public void testInstantiateFactoryComplex() {\n+        assertEquals(1, created.getValue());\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void instantiateFactoryMismatch() {\n+        FactoryUtils.instantiateFactory(Date.class, null, new Object[] {null});\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void instantiateFactoryNoConstructor() {\n+        FactoryUtils.instantiateFactory(Date.class, new Class[] {Long.class}, new Object[] {null});\n+    }\n+\n+    @Test\n+    public void instantiateFactoryComplex() {\n         TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n         // 2nd Jan 1970\n-        Factory factory = FactoryUtils.instantiateFactory(Date.class,\n+        Factory<Date> factory = FactoryUtils.instantiateFactory(Date.class,\n             new Class[] {Integer.TYPE, Integer.TYPE, Integer.TYPE},\n             new Object[] {new Integer(70), new Integer(0), new Integer(2)});\n         assertNotNull(factory);\n-        Object created = factory.create();\n-        assertTrue(created instanceof Date);\n+        Date created = factory.create();\n         // long time of 1 day (== 2nd Jan 1970)\n         assertEquals(new Date(1000 * 60 * 60 * 24), created);\n     }", "timestamp": 1252994283, "metainfo": ""}