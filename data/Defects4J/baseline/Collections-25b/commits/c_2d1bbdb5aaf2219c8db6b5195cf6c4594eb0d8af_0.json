{"sha": "2d1bbdb5aaf2219c8db6b5195cf6c4594eb0d8af", "log": "add no-arg constructor fix method name add some javadoc comments   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollatingIterator.java\n+++ b/src/java/org/apache/commons/collections/CollatingIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/CollatingIterator.java,v 1.1 2002/07/09 16:48:56 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/07/09 16:48:56 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/CollatingIterator.java,v 1.2 2002/07/10 14:06:39 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/07/10 14:06:39 $\n  *\n  * ====================================================================\n  *\n  * my {@link #next} method will return the lesser of \n  * <code>A.next()</code> and <code>B.next()</code>.\n  *\n- * @version $Revision: 1.1 $ $Date: 2002/07/09 16:48:56 $\n+ * @version $Revision: 1.2 $ $Date: 2002/07/10 14:06:39 $\n  * @author Rodney Waldhoff\n  */\n public class CollatingIterator implements Iterator {\n \n     //------------------------------------------------------------ Constructors\n     \n+    public CollatingIterator() {\n+        this(null,2);\n+    }\n+    \n     public CollatingIterator(Comparator comp) {\n         this(comp,2);\n     }\n     \n     public CollatingIterator(Comparator comp, int initIterCapacity) {\n         iterators = new ArrayList(initIterCapacity);\n-        comparator = comp;\n+        setComparator(comp);\n     }\n     \n     public CollatingIterator(Comparator comp, Iterator a, Iterator b) {\n \n     //--------------------------------------------------------- Public Methods\n \n+    /**\n+     * Add the given {@link Iterator} to my collection to collate.\n+     * @throws IllegalStateException if I've already started iterating\n+     */\n     public void addIterator(Iterator iter) throws IllegalStateException {\n         checkNotStarted();\n         iterators.add(iter);\n     }\n \n+    /**\n+     * Set the {@link Comparator} by which I collate.\n+     * @throws IllegalStateException if I've already started iterating\n+     */\n     public void setComparator(Comparator comp) throws IllegalStateException {\n         checkNotStarted();\n         comparator = comp;\n     }\n \n-    public Comparator getIterator() {\n+    /**\n+     * Get the {@link Comparator} by which I collate.\n+     */\n+    public Comparator getComparator() {\n         return comparator;\n     }\n \n \n     //--------------------------------------------------------- Private Methods\n \n+    /** Initialize my collating state if it hasn't been already. */\n     private void start() {\n         if(null == values) {\n             values = new ArrayList(iterators.size());\n         }\n     }\n \n+    /** \n+     * Set the {@link #values} and {@link #valueSet} attributes \n+     * at position <i>i</i> to the next value of the \n+     * {@link #iterators iterator} at position <i>i</i>, or \n+     * clear them if the <i>i</i><sup>th</sup> iterator\n+     * has no next value.\n+     *\n+     * @return <tt>false</tt> iff there was no value to set\n+     */\n     private boolean set(int i) {\n         Iterator iter = (Iterator)(iterators.get(i));\n         if(iter.hasNext()) {\n         }\n     }\n \n+    /** \n+     * Clear the {@link #values} and {@link #valueSet} attributes \n+     * at position <i>i</i>.\n+     */\n     private void clear(int i) {\n         values.set(i,null);\n         valueSet.clear(i);\n     }\n \n+    /** \n+     * Throw {@link IllegalStateException} iff I've been {@link #start started}.\n+     * @throws IllegalStateException iff I've been {@link #start started}\n+     */\n     private void checkNotStarted() throws IllegalStateException {\n         if(null != values) {\n             throw new IllegalStateException(\"Can't do that after next or hasNext has been called.\");\n         }\n     }\n \n+    /** \n+     * Returns the index of the least element in {@link #values},\n+     * {@link #set(int) setting} any uninitialized values.\n+     */\n     private int least() throws IllegalStateException {\n         int leastIndex = -1;\n         Object leastObject = null;                \n         return leastIndex;\n     }\n \n+    /**\n+     * Returns <code>true</code> iff any bit in the given set is \n+     * <code>true</code>.\n+     */\n     private boolean anyValueSet(BitSet set) {\n         for(int i=0;i<set.size();i++) {\n             if(set.get(i)) {\n         return false;\n     }\n \n+    /**\n+     * Returns <code>true</code> iff any {@link Iterator} \n+     * in the given list has a next value.\n+     */\n     private boolean anyHasNext(ArrayList iters) {\n         for(int i=0;i<iters.size();i++) {\n             Iterator iter = (Iterator)iters.get(i);\n--- a/src/test/org/apache/commons/collections/TestCollatingIterator.java\n+++ b/src/test/org/apache/commons/collections/TestCollatingIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCollatingIterator.java,v 1.1 2002/07/09 16:48:56 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/07/09 16:48:56 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCollatingIterator.java,v 1.2 2002/07/10 14:06:39 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/07/10 14:06:39 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * Unit test suite for {@link CollatingIterator}.\n- * @version $Revision: 1.1 $ $Date: 2002/07/09 16:48:56 $\n+ * @version $Revision: 1.2 $ $Date: 2002/07/10 14:06:39 $\n  * @author Rodney Waldhoff\n  */\n public class TestCollatingIterator extends TestIterator {\n \n     //------------------------------------------------------------------- Tests\n \n+    public void testGetSetComparator() {\n+        CollatingIterator iter = new CollatingIterator();\n+        assertNull(iter.getComparator());\n+        iter.setComparator(comparator);\n+        assertSame(comparator,iter.getComparator());\n+        iter.setComparator(null);\n+        assertNull(iter.getComparator());\n+    }\n+\n     public void testIterateEven() {\n         CollatingIterator iter = new CollatingIterator(comparator);\n         iter.addIterator(evens.iterator());\n     }\n \n     public void testIterateEvenOdd() {\n-        CollatingIterator iter = new CollatingIterator(comparator);\n-        iter.addIterator(evens.iterator());\n-        iter.addIterator(odds.iterator());\n+        CollatingIterator iter = new CollatingIterator(comparator,evens.iterator(),odds.iterator());\n         for(int i=0;i<20;i++) {\n             assertTrue(iter.hasNext());\n             assertEquals(new Integer(i),iter.next());\n     }\n \n     public void testIterateOddEven() {\n-        CollatingIterator iter = new CollatingIterator(comparator);\n-        iter.addIterator(odds.iterator());\n-        iter.addIterator(evens.iterator());\n+        CollatingIterator iter = new CollatingIterator(comparator,odds.iterator(),evens.iterator());\n         for(int i=0;i<20;i++) {\n             assertTrue(iter.hasNext());\n             assertEquals(new Integer(i),iter.next());", "timestamp": 1026309999, "metainfo": ""}