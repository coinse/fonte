{"sha": "60aa1d0752b5855301f033ae6cd061a32e58fd4c", "log": "Add access method for new BooleanComparator   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ComparatorUtils.java\n+++ b/src/java/org/apache/commons/collections/ComparatorUtils.java\n import java.util.Collection;\n import java.util.Comparator;\n \n+import org.apache.commons.collections.comparators.BooleanComparator;\n import org.apache.commons.collections.comparators.ComparableComparator;\n import org.apache.commons.collections.comparators.ComparatorChain;\n import org.apache.commons.collections.comparators.NullComparator;\n     }\n \n     /**\n+     * Gets a Comparator that can sort Boolean objects.\n+     * <p>\n+     * The parameter specifies whether true or false is sorted first.\n+     * <p>\n+     * The comparator throws NullPointerException if a null value is compared.\n+     * \n+     * @param trueFirst  when <code>true</code>, sort \n+     *        <code>true</code> {@link Boolean}s before\n+     *        <code>false</code> {@link Boolean}s.\n+     * @return  a comparator that sorts booleans\n+     */\n+    public static Comparator booleanComparator(boolean trueFirst) {\n+        return BooleanComparator.getBooleanComparator(trueFirst);\n+    }\n+    \n+    /**\n      * Gets a Comparator that controls the comparison of <code>null</code> values.\n      * <p>\n      * The returned comparator will consider a null value to be less than", "timestamp": 1042663042, "metainfo": ""}