{"sha": "11ddae0a3570fdeaa421e4e378ae14bc173598ba", "log": "Add unit test for QueueUtils.  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections4/QueueUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.collections4.TransformerUtils;\n+import org.apache.commons.collections4.functors.TruePredicate;\n+import org.apache.commons.collections4.queue.PredicatedQueue;\n+import org.apache.commons.collections4.queue.TransformedQueue;\n+import org.apache.commons.collections4.queue.UnmodifiableQueue;\n+\n+/**\n+ * Tests for QueueUtils factory methods.\n+ * \n+ * @version $Id$\n+ */\n+public class QueueUtilsTest extends BulkTest {\n+\n+    public QueueUtilsTest(final String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(QueueUtilsTest.class);\n+    }\n+\n+    // ----------------------------------------------------------------------\n+\n+    protected Class<?> stringClass = this.getName().getClass();\n+    protected Predicate<Object> truePredicate = TruePredicate.truePredicate();\n+    protected Transformer<Object, Object> nopTransformer = TransformerUtils.nopTransformer();\n+\n+    // ----------------------------------------------------------------------\n+\n+    public void testUnmodifiableQueue() {\n+        Queue<Object> queue = QueueUtils.unmodifiableQueue(new LinkedList<Object>());\n+        assertTrue(\"Returned object should be an UnmodifiableQueue.\", queue instanceof UnmodifiableQueue);\n+        try {\n+            QueueUtils.unmodifiableQueue(null);\n+            fail(\"Expecting IllegalArgumentException for null queue.\");\n+        } catch (final IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testPredicatedQueue() {\n+        Queue<Object> queue = QueueUtils.predicatedQueue(new LinkedList<Object>(), truePredicate);\n+        assertTrue(\"Returned object should be a PredicatedQueue.\", queue instanceof PredicatedQueue);\n+        try {\n+            QueueUtils.predicatedQueue(null, truePredicate);\n+            fail(\"Expecting IllegalArgumentException for null queue.\");\n+        } catch (final IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            QueueUtils.predicatedQueue(new LinkedList<Object>(), null);\n+            fail(\"Expecting IllegalArgumentException for null predicate.\");\n+        } catch (final IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testTransformedQueue() {\n+        Queue<Object> queue = QueueUtils.transformingQueue(new LinkedList<Object>(), nopTransformer);\n+        assertTrue(\"Returned object should be an TransformedQueue.\", queue instanceof TransformedQueue);\n+        try {\n+            QueueUtils.transformingQueue(null, nopTransformer);\n+            fail(\"Expecting IllegalArgumentException for null queue.\");\n+        } catch (final IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            QueueUtils.transformingQueue(new LinkedList<Object>(), null);\n+            fail(\"Expecting IllegalArgumentException for null transformer.\");\n+        } catch (final IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testEmptyQueue() {\n+        Queue<Object> queue = QueueUtils.emptyQueue();\n+        assertTrue(\"Returned object should be an UnmodifiableQueue.\", queue instanceof UnmodifiableQueue);\n+        assertTrue(\"Returned queue is not empty.\", queue.isEmpty());\n+\n+        try {\n+            queue.add(new Object());\n+            fail(\"Expecting UnsupportedOperationException for empty queue.\");\n+        } catch (final UnsupportedOperationException ex) {\n+            // expected\n+        }\n+    }\n+\n+}", "timestamp": 1384160830, "metainfo": ""}