{"sha": "b6d03843b25ea61b3fbff5d90ace7e4ceb475c46", "log": "Fixed previousIndex() and nextIndex() methods in ArrayListIterator and ObjectArrayListIterator to conform to ListIterator interface specification. Modified ObjectArrayIterator constructor to throw ArrayOutOfBoundsException when start index is out of range (as advertised). Added test cases to TestIteratorUtils.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java,v 1.4 2003/08/31 17:25:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java,v 1.5 2003/09/29 03:56:12 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @see java.util.ListIterator\n  *\n  * @since Commons Collections 2.2\n- * @version $Revision: 1.4 $ $Date: 2003/08/31 17:25:49 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/29 03:56:12 $\n  *\n  * @author <a href=\"mailto:neilotoole@users.sourceforge.net\">Neil O'Toole</a>\n  * @author Stephen Colebourne\n+ * @author Phil Steitz\n  */\n public class ArrayListIterator extends ArrayIterator implements ResetableListIterator {\n \n      * @return the index of the item to be retrieved next\n      */\n     public int nextIndex() {\n-        return this.index;\n+        return this.index - this.startIndex;\n     }\n \n     /**\n      * @return the index of the item to be retrieved next\n      */\n     public int previousIndex() {\n-        return this.index - 1;\n+        return this.index - this.startIndex - 1;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/iterators/ObjectArrayIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ObjectArrayIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ObjectArrayIterator.java,v 1.6 2003/08/31 17:25:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ObjectArrayIterator.java,v 1.7 2003/09/29 03:56:12 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.NoSuchElementException;\n \n /** \n- * An {@link Iterator Iterator} over an array of objects.\n+ * An {@link Iterator} over an array of objects.\n  * <p>\n  * This iterator does not support {@link #remove}, as the object array cannot be\n  * structurally modified.\n  * back to the start if required.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2003/08/31 17:25:49 $\n+ * @version $Revision: 1.7 $ $Date: 2003/09/29 03:56:12 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author Mauricio S. Moura\n  * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n  * @author <a href=\"mailto:neilotoole@users.sourceforge.net\">Neil O'Toole</a>\n  * @author Stephen Colebourne\n+ * @author Phil Steitz\n  */\n public class ObjectArrayIterator implements ResetableIterator {\n \n         if (end > array.length) {\n             throw new ArrayIndexOutOfBoundsException(\"End index must not be greater than the array length\");\n         }\n+        if (start > array.length) {\n+            throw new ArrayIndexOutOfBoundsException(\"Start index must not be greater than the array length\");\n+        }\n         if (end < start) {\n             throw new IllegalArgumentException(\"End index must not be less than start index\");\n         }\n--- a/src/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java,v 1.6 2003/08/31 17:25:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java,v 1.7 2003/09/29 03:56:12 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.NoSuchElementException;\n \n /**\n- * Implements a {@link ListIterator ListIterator} over an array of objects.\n+ * Implements a {@link ListIterator} over an array of objects.\n  * <p>\n  * This iterator does not support {@link #add} or {@link #remove}, as the object array \n  * cannot be structurally modified. The {@link #set} method is supported however.\n  * @see java.util.ListIterator\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2003/08/31 17:25:49 $\n+ * @version $Revision: 1.7 $ $Date: 2003/09/29 03:56:12 $\n  * \n  * @author <a href=\"mailto:neilotoole@users.sourceforge.net\">Neil O'Toole</a>\n  * @author Stephen Colebourne\n+ * @author Phil Steitz\n  */\n public class ObjectArrayListIterator extends ObjectArrayIterator implements ResetableListIterator {\n \n      * @return the index of the item to be retrieved next\n      */\n     public int nextIndex() {\n-        return this.index;\n+        return this.index - this.startIndex;\n     }\n \n     /**\n      * @return the index of the item to be retrieved next\n      */\n     public int previousIndex() {\n-        return this.index - 1;\n+        return this.index - this.startIndex - 1;\n     }\n \n     /**\n--- a/src/test/org/apache/commons/collections/TestIteratorUtils.java\n+++ b/src/test/org/apache/commons/collections/TestIteratorUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestIteratorUtils.java,v 1.5 2003/08/31 17:28:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestIteratorUtils.java,v 1.6 2003/09/29 03:56:12 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n \n import junit.framework.Test;\n \n         String[] result = (String[]) IteratorUtils.toArray(list.iterator(), String.class);\n         assertEquals(list, Arrays.asList(result));\n     }\n+    \n+    public void testArrayIterator() {\n+        Object[] objArray = {\"a\", \"b\", \"c\"};\n+        ResetableIterator iterator = IteratorUtils.arrayIterator(objArray);\n+        assertTrue(iterator.next().equals(\"a\"));\n+        assertTrue(iterator.next().equals(\"b\"));\n+        iterator.reset();\n+        assertTrue(iterator.next().equals(\"a\"));\n+        \n+        try {\n+            iterator = IteratorUtils.arrayIterator(new Integer(0));\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+                // expected\n+        }\n+        \n+        try {\n+            iterator = IteratorUtils.arrayIterator(null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+                // expected\n+        }\n+        \n+        iterator = IteratorUtils.arrayIterator(objArray, 1);\n+        assertTrue(iterator.next().equals(\"b\"));\n+        \n+        try {\n+            iterator = IteratorUtils.arrayIterator(objArray, -1);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        iterator = IteratorUtils.arrayIterator(objArray, 3);\n+        assertTrue(!iterator.hasNext());\n+        iterator.reset();\n+        \n+        try {\n+            iterator = IteratorUtils.arrayIterator(objArray, 4);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        iterator = IteratorUtils.arrayIterator(objArray, 2, 3);\n+        assertTrue(iterator.next().equals(\"c\"));\n+        \n+        try {\n+            iterator = IteratorUtils.arrayIterator(objArray, 2, 4);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            iterator = IteratorUtils.arrayIterator(objArray, -1, 1);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            iterator = IteratorUtils.arrayIterator(objArray, 2, 1);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        int[] intArray = {0, 1, 2};\n+        iterator = IteratorUtils.arrayIterator(intArray);\n+        assertTrue(iterator.next().equals(new Integer(0)));\n+        assertTrue(iterator.next().equals(new Integer(1)));\n+        iterator.reset();\n+        assertTrue(iterator.next().equals(new Integer(0)));\n+        \n+        iterator = IteratorUtils.arrayIterator(intArray, 1);\n+        assertTrue(iterator.next().equals(new Integer(1)));\n+        \n+        try {\n+            iterator = IteratorUtils.arrayIterator(intArray, -1);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        iterator = IteratorUtils.arrayIterator(intArray, 3);\n+        assertTrue(!iterator.hasNext());\n+        iterator.reset();\n+        \n+        try {\n+            iterator = IteratorUtils.arrayIterator(intArray, 4);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        iterator = IteratorUtils.arrayIterator(intArray, 2, 3);\n+        assertTrue(iterator.next().equals(new Integer(2)));\n+        \n+        try {\n+            iterator = IteratorUtils.arrayIterator(intArray, 2, 4);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            iterator = IteratorUtils.arrayIterator(intArray, -1, 1);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            iterator = IteratorUtils.arrayIterator(intArray, 2, 1);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }          \n+    }\n+    \n+    public void testArrayListIterator() {\n+        Object[] objArray = {\"a\", \"b\", \"c\", \"d\"};\n+        ResetableListIterator iterator = IteratorUtils.arrayListIterator(objArray);\n+        assertTrue(!iterator.hasPrevious());\n+        assertTrue(iterator.previousIndex() == -1);\n+        assertTrue(iterator.nextIndex() == 0);\n+        assertTrue(iterator.next().equals(\"a\"));\n+        assertTrue(iterator.previous().equals(\"a\"));\n+        assertTrue(iterator.next().equals(\"a\"));\n+        assertTrue(iterator.previousIndex() == 0);\n+        assertTrue(iterator.nextIndex() == 1);\n+        assertTrue(iterator.next().equals(\"b\"));\n+        assertTrue(iterator.next().equals(\"c\"));\n+        assertTrue(iterator.next().equals(\"d\"));\n+        assertTrue(iterator.nextIndex() == 4); // size of list\n+        assertTrue(iterator.previousIndex() == 3);\n+        \n+        try {\n+            iterator = IteratorUtils.arrayListIterator(new Integer(0));\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+                // expected\n+        }\n+        \n+        try {\n+            iterator = IteratorUtils.arrayListIterator(null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+                // expected\n+        }\n+        \n+        iterator = IteratorUtils.arrayListIterator(objArray, 1);\n+        assertTrue(iterator.previousIndex() == -1); \n+        assertTrue(!iterator.hasPrevious());\n+        assertTrue(iterator.nextIndex() == 0); \n+        assertTrue(iterator.next().equals(\"b\"));\n+        assertTrue(iterator.previousIndex() == 0);        \n+        \n+        try {\n+            iterator = IteratorUtils.arrayListIterator(objArray, -1);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        iterator = IteratorUtils.arrayListIterator(objArray, 3);\n+        assertTrue(iterator.hasNext());\n+        try {\n+            Object x = iterator.previous();\n+            fail(\"Expecting NoSuchElementException.\");\n+        } catch (NoSuchElementException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            iterator = IteratorUtils.arrayListIterator(objArray, 5);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        iterator = IteratorUtils.arrayListIterator(objArray, 2, 3);\n+        assertTrue(iterator.next().equals(\"c\"));\n+        \n+        try {\n+            iterator = IteratorUtils.arrayListIterator(objArray, 2, 5);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            iterator = IteratorUtils.arrayListIterator(objArray, -1, 1);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            iterator = IteratorUtils.arrayListIterator(objArray, 2, 1);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        int[] intArray = {0, 1, 2};\n+        iterator = IteratorUtils.arrayListIterator(intArray);\n+        assertTrue(iterator.previousIndex() == -1); \n+        assertTrue(!iterator.hasPrevious());\n+        assertTrue(iterator.nextIndex() == 0); \n+        assertTrue(iterator.next().equals(new Integer(0)));\n+        assertTrue(iterator.previousIndex() == 0); \n+        assertTrue(iterator.nextIndex() == 1); \n+        assertTrue(iterator.next().equals(new Integer(1)));\n+        assertTrue(iterator.previousIndex() == 1); \n+        assertTrue(iterator.nextIndex() == 2); \n+        assertTrue(iterator.previous().equals(new Integer(1)));\n+        assertTrue(iterator.next().equals(new Integer(1)));\n+        \n+        iterator = IteratorUtils.arrayListIterator(intArray, 1);\n+        assertTrue(iterator.previousIndex() == -1); \n+        assertTrue(!iterator.hasPrevious());\n+        assertTrue(iterator.nextIndex() == 0); \n+        assertTrue(iterator.next().equals(new Integer(1)));\n+        assertTrue(iterator.previous().equals(new Integer(1)));\n+        assertTrue(iterator.next().equals(new Integer(1)));\n+        assertTrue(iterator.previousIndex() == 0); \n+        assertTrue(iterator.nextIndex() == 1); \n+        assertTrue(iterator.next().equals(new Integer(2)));\n+        assertTrue(iterator.previousIndex() == 1); \n+        assertTrue(iterator.nextIndex() == 2); \n+        assertTrue(iterator.previous().equals(new Integer(2)));\n+        assertTrue(iterator.previousIndex() == 0); \n+        assertTrue(iterator.nextIndex() == 1); \n+        \n+        try {\n+            iterator = IteratorUtils.arrayListIterator(intArray, -1);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        iterator = IteratorUtils.arrayListIterator(intArray, 3);\n+        assertTrue(!iterator.hasNext());\n+     \n+        try {\n+            iterator = IteratorUtils.arrayListIterator(intArray, 4);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        iterator = IteratorUtils.arrayListIterator(intArray, 2, 3);\n+        assertTrue(!iterator.hasPrevious());\n+        assertTrue(iterator.previousIndex() == -1);\n+        assertTrue(iterator.next().equals(new Integer(2)));\n+        assertTrue(iterator.hasPrevious());\n+        assertTrue(!iterator.hasNext());\n+        \n+        \n+        try {\n+            iterator = IteratorUtils.arrayListIterator(intArray, 2, 4);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            iterator = IteratorUtils.arrayListIterator(intArray, -1, 1);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            iterator = IteratorUtils.arrayListIterator(intArray, 2, 1);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }          \n+    }\n+        \n \n     /**\n      * Gets an immutable Iterator operating on the elements [\"a\", \"b\", \"c\", \"d\"].", "timestamp": 1064807772, "metainfo": ""}