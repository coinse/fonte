{"sha": "e9c3c73e94efcf83ebc0b250fd3da942b185ba64", "log": "Javadoc  ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n+++ b/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n /*\n- *  Copyright 1999-2005 The Apache Software Foundation\n+ *  Copyright 1999-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n     /**\n      * Construct an IteratorChain with a single Iterator.\n-     *\n-     * @param iterator first Iterator in the IteratorChain\n+     * <p>\n+     * This method takes one iterator. The newly constructed iterator\n+     * will iterate through that iterator. Thus calling this constructor\n+     * on its own will have no effect other than decorating the input iterator.\n+     * <p>\n+     * You will normally use {@link #addIterator(Iterator)} to add\n+     * some more iterators after using this constructor.\n+     *\n+     * @param iterator  the first child iterator in the IteratorChain, not null\n      * @throws NullPointerException if the iterator is null\n      */\n     public IteratorChain(Iterator iterator) {\n     /**\n      * Constructs a new <code>IteratorChain</code> over the two\n      * given iterators.\n-     *\n-     * @param a  the first child iterator\n-     * @param b  the second child iterator\n+     * <p>\n+     * This method takes two iterators. The newly constructed iterator\n+     * will iterate through each one of the input iterators in turn.\n+     *\n+     * @param first  the first child iterator in the IteratorChain, not null\n+     * @param second  the second child iterator in the IteratorChain, not null\n      * @throws NullPointerException if either iterator is null\n      */\n-    public IteratorChain(Iterator a, Iterator b) {\n-        super();\n-        addIterator(a);\n-        addIterator(b);\n+    public IteratorChain(Iterator first, Iterator second) {\n+        super();\n+        addIterator(first);\n+        addIterator(second);\n     }\n \n     /**\n      * Constructs a new <code>IteratorChain</code> over the array\n      * of iterators.\n-     *\n-     * @param iterators  the array of iterators\n+     * <p>\n+     * This method takes an array of iterators. The newly constructed iterator\n+     * will iterate through each one of the input iterators in turn.\n+     *\n+     * @param iteratorChain  the array of iterators, not null\n      * @throws NullPointerException if iterators array is or contains null\n      */\n-    public IteratorChain(Iterator[] iterators) {\n-        super();\n-        for (int i = 0; i < iterators.length; i++) {\n-            addIterator(iterators[i]);\n+    public IteratorChain(Iterator[] iteratorChain) {\n+        super();\n+        for (int i = 0; i < iteratorChain.length; i++) {\n+            addIterator(iteratorChain[i]);\n         }\n     }\n \n     /**\n      * Constructs a new <code>IteratorChain</code> over the collection\n      * of iterators.\n-     *\n-     * @param iterators  the collection of iterators\n+     * <p>\n+     * This method takes a collection of iterators. The newly constructed iterator\n+     * will iterate through each one of the input iterators in turn.\n+     *\n+     * @param iteratorChain  the collection of iterators, not null\n      * @throws NullPointerException if iterators collection is or contains null\n      * @throws ClassCastException if iterators collection doesn't contain an iterator\n      */\n-    public IteratorChain(Collection iterators) {\n-        super();\n-        for (Iterator it = iterators.iterator(); it.hasNext();) {\n+    public IteratorChain(Collection iteratorChain) {\n+        super();\n+        for (Iterator it = iteratorChain.iterator(); it.hasNext();) {\n             Iterator item = (Iterator) it.next();\n             addIterator(item);\n         }\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add an Iterator to the end of the chain", "timestamp": 1151834592, "metainfo": ""}