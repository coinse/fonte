{"sha": "44dc835e0a40b57fbb505c30b3ffa6adb8663493", "log": "[COLLECTIONS-404] Added the option to provide an Equator to test for equality, by default a DefaultEquator is used that delegates to Object.equals().  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/sequence/SequencesComparator.java\n+++ b/src/main/java/org/apache/commons/collections4/sequence/SequencesComparator.java\n package org.apache.commons.collections4.sequence;\n \n import java.util.List;\n+\n+import org.apache.commons.collections4.functors.DefaultEquator;\n+import org.apache.commons.collections4.functors.Equator;\n \n /**\n  * This class allows to compare two objects sequences.\n     /** Second sequence. */\n     private final List<T> sequence2;\n \n+    /** The equator used for testing object equality. */\n+    private final Equator<? super T> equator;\n+\n     /** Temporary variables. */\n     private final int[] vDown;\n     private final int[] vUp;\n     /**\n      * Simple constructor.\n      * <p>\n-     * Creates a new instance of SequencesComparator.\n+     * Creates a new instance of SequencesComparator using a {@link DefaultEquator}.\n      * <p>\n      * It is <em>guaranteed</em> that the comparisons will always be done as\n      * <code>o1.equals(o2)</code> where <code>o1</code> belongs to the first\n      * important if subclassing is used for some elements in the first sequence\n      * and the <code>equals</code> method is specialized.\n      * \n-     * @param sequence1\n-     *            first sequence to be compared\n-     * @param sequence2\n-     *            second sequence to be compared\n+     * @param sequence1  first sequence to be compared\n+     * @param sequence2  second sequence to be compared\n      */\n     public SequencesComparator(final List<T> sequence1, final List<T> sequence2) {\n+        this(sequence1, sequence2, DefaultEquator.defaultEquator());\n+    }\n+\n+    /**\n+     * Simple constructor.\n+     * <p>\n+     * Creates a new instance of SequencesComparator with a custom {@link Equator}.\n+     * <p>\n+     * It is <em>guaranteed</em> that the comparisons will always be done as\n+     * <code>Equator.equate(o1, o2)</code> where <code>o1</code> belongs to the first\n+     * sequence and <code>o2</code> belongs to the second sequence.\n+     * \n+     * @param sequence1  first sequence to be compared\n+     * @param sequence2  second sequence to be compared\n+     * @param equator  the equator to use for testing object equality\n+     */\n+    public SequencesComparator(final List<T> sequence1, final List<T> sequence2, final Equator<? super T> equator) {\n         this.sequence1 = sequence1;\n         this.sequence2 = sequence2;\n+        this.equator = equator;\n \n         final int size = sequence1.size() + sequence2.size() + 2;\n         vDown = new int[size];\n         int end = start;\n         while (end - diag < end2\n                 && end < end1\n-                && sequence1.get(end).equals(sequence2.get(end - diag))) {\n+                && equator.equate(sequence1.get(end), sequence2.get(end - diag))) {\n             ++end;\n         }\n         return new Snake(start, end, diag);\n                 int x = vDown[i];\n                 int y = x - start1 + start2 - k;\n \n-                while (x < end1 && y < end2 && sequence1.get(x).equals(sequence2.get(y))) {\n+                while (x < end1 && y < end2 && equator.equate(sequence1.get(x), sequence2.get(y))) {\n                     vDown[i] = ++x;\n                     ++y;\n                 }\n                 int x = vUp[i] - 1;\n                 int y = x - start1 + start2 - k;\n                 while (x >= start1 && y >= start2\n-                        && sequence1.get(x).equals(sequence2.get(y))) {\n+                        && equator.equate(sequence1.get(x), sequence2.get(y))) {\n                     vUp[i] = x--;\n                     y--;\n                 }\n             int i = start1;\n             int j = start2;\n             while (i < end1 || j < end2) {\n-                if (i < end1 && j < end2 && sequence1.get(i).equals(sequence2.get(j))) {\n+                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                     script.append(new KeepCommand<T>(sequence1.get(i)));\n                     ++i;\n                     ++j;", "timestamp": 1367312226, "metainfo": ""}