{"sha": "bad1d79b7a3edfdea1d4cfd46e910acbe985253e", "log": "Javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n  * UnsupportedOperationException on attempts to call that method.\n  *\n  * @since Commons Collections 3.0 (previously DoubleOrderedMap v2.0)\n- * @version $Revision: 1.12 $ $Date: 2004/02/18 00:57:39 $\n+ * @version $Revision: 1.13 $ $Date: 2004/05/15 11:59:15 $\n  * \n  * @author Marc Johnson\n  * @author Stephen Colebourne\n         \n         // store previous and remove previous mappings\n         Object prev = (index == KEY ? doGet(key, KEY) :  doGet(value, VALUE));\n-        doRemove((Comparable) key, KEY);\n-        doRemove((Comparable) value, VALUE);\n+        doRemove(key, KEY);\n+        doRemove(value, VALUE);\n         \n         Node node = rootNode[KEY];\n         if (node == null) {\n      */\n     static class View extends AbstractSet {\n         \n+        /** The parent map. */\n         protected final TreeBidiMap main;\n+        /** Whether to return KEY or VALUE order. */\n         protected final int orderType;\n+        /** Whether to return KEY, VALUE, MAPENTRY or INVERSEMAPENTRY data. */\n         protected final int dataType;\n \n         /**\n      */\n     static class ViewIterator implements OrderedIterator {\n \n+        /** The parent map. */\n         protected final TreeBidiMap main;\n+        /** Whether to return KEY or VALUE order. */\n         protected final int orderType;\n+        /** Whether to return KEY, VALUE, MAPENTRY or INVERSEMAPENTRY data. */\n         protected final int dataType;\n+        /** The last node returned by the iterator. */\n         protected Node lastReturnedNode;\n+        /** The next node to be returned by the iterator. */\n         protected Node nextNode;\n+        /** The previous node in the sequence returned by the iterator. */\n         protected Node previousNode;\n+        /** The modification count. */\n         private int expectedModifications;\n \n         /**\n             return doGetData();\n         }\n \n+        /**\n+         * Gets the data value for the lastReturnedNode field.\n+         * @return the data value\n+         */\n         protected Object doGetData() {\n             switch (dataType) {\n                 case KEY:\n          * Returns true if the given object is also a map entry and\n          * the two entries represent the same mapping.\n          *\n-         * @param o object to be compared for equality with this map\n-         *          entry.\n-         * @return true if the specified object is equal to this map\n-         *         entry.\n+         * @param obj  the object to be compared for equality with this entry.\n+         * @return true if the specified object is equal to this entry.\n          */\n         public boolean equals(final Object obj) {\n             if (obj == this) {\n      */\n     static class Inverse implements OrderedBidiMap {\n         \n+        /** The parent map. */\n         private final TreeBidiMap main;\n+        /** Store the keySet once created. */\n         private Set keySet;\n+        /** Store the valuesSet once created. */\n         private Set valuesSet;\n+        /** Store the entrySet once created. */\n         private Set entrySet;\n         \n+        /**\n+         * Constructor.\n+         * @param main  the main map\n+         */\n         Inverse(final TreeBidiMap main) {\n             super();\n             this.main = main;", "timestamp": 1084622355, "metainfo": ""}