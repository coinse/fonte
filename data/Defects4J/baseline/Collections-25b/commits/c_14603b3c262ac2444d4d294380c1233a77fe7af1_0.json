{"sha": "14603b3c262ac2444d4d294380c1233a77fe7af1", "log": "Added two new constructors Added set and get for iterator list Added extra null validation   ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/CollatingIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/CollatingIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/CollatingIterator.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/15 23:13:51 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/CollatingIterator.java,v 1.2 2002/08/17 11:24:58 scolebourne Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/17 11:24:58 $\n  *\n  * ====================================================================\n  *\n  */\n package org.apache.commons.collections.iterators;\n \n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.NoSuchElementException;\n import java.util.ArrayList;\n import java.util.BitSet;\n-\n /**\n  * Provides an ordered iteration over the elements contained in\n  * a collection of ordered {@link Iterator}s.  In other words,\n  * my {@link #next} method will return the lesser of \n  * <code>A.next()</code> and <code>B.next()</code>.\n  *\n- * @version $Revision: 1.1 $ $Date: 2002/08/15 23:13:51 $\n+ * @since 2.1\n  * @author Rodney Waldhoff\n- * @since 2.1\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: CollatingIterator.java,v 1.2 2002/08/17 11:24:58 scolebourne Exp $\n  */\n public class CollatingIterator implements Iterator {\n \n-    //------------------------------------------------------------ Constructors\n+    /** My {@link Comparator}. */\n+    private Comparator comparator = null;\n+\n+    /** My list of {@link Iterator}s. */\n+    private ArrayList iterators = null;\n+   \n+    /** {@link Iterator#next Next} objects peeked from each iterator. */\n+    private ArrayList values = null;\n     \n-    /**\n-     *  Constructs a new <Code>CollatingIterator</Code>.  Natural sort order\n-     *  will be used, and child iterators will have to be manually added \n-     *  using the {@link #addIterator(Iterator)} method.\n+    /** Whether or not each {@link #values} element has been set. */\n+    private BitSet valueSet = null;\n+\n+    /** Index of the {@link #iterators iterator} from whom the last returned value was obtained. */\n+    private int lastReturned = -1;\n+\n+    // Constructors\n+    // -------------------------------------------------------------------\n+    \n+    /**\n+     * Constructs a new <Code>CollatingIterator</Code>.  Natural sort order\n+     * will be used, and child iterators will have to be manually added \n+     * using the {@link #addIterator(Iterator)} method.\n      */\n     public CollatingIterator() {\n         this(null,2);\n     }\n     \n     /**\n-     *  Constructs a new <Code>CollatingIterator</Code> that will used the\n-     *  specified comparator for ordering.  Child iterators will have to be \n-     *  manually added using the {@link #addIterator(Iterator)} method.\n-     *\n-     *  @param comp  the comparator to use for ordering, or <Code>null</Code>\n+     * Constructs a new <Code>CollatingIterator</Code> that will used the\n+     * specified comparator for ordering.  Child iterators will have to be \n+     * manually added using the {@link #addIterator(Iterator)} method.\n+     *\n+     * @param comp  the comparator to use for ordering, or <Code>null</Code>\n      *    to use natural sort order\n      */\n     public CollatingIterator(Comparator comp) {\n     }\n     \n     /**\n-     *  Constructs a new <Code>CollatingIterator</Code> that will used the\n-     *  specified comparator for ordering and have the specified initial\n-     *  capacity.  Child iterators will have to be \n-     *  manually added using the {@link #addIterator(Iterator)} method.\n-     *\n-     *  @param comp  the comparator to use for ordering, or <Code>null</Code>\n+     * Constructs a new <Code>CollatingIterator</Code> that will used the\n+     * specified comparator for ordering and have the specified initial\n+     * capacity.  Child iterators will have to be \n+     * manually added using the {@link #addIterator(Iterator)} method.\n+     *\n+     * @param comp  the comparator to use for ordering, or <Code>null</Code>\n      *    to use natural sort order\n-     *  @param initIterCapacity  the initial capacity for the internal list\n+     * @param initIterCapacity  the initial capacity for the internal list\n      *    of child iterators\n      */\n     public CollatingIterator(Comparator comp, int initIterCapacity) {\n     }\n \n     /**\n-     *  Constructs a new <Code>CollatingIterator</Code> that will use the\n-     *  specified comparator to provide ordered iteration over the two\n-     *  given iterators.\n-     *\n-     *  @param comp  the comparator to use to sort, or null to use natural\n+     * Constructs a new <Code>CollatingIterator</Code> that will use the\n+     * specified comparator to provide ordered iteration over the two\n+     * given iterators.\n+     *\n+     * @param comp  the comparator to use to sort, or null to use natural\n      *    sort order\n-     *  @param a  the first child ordered iterator\n-     *  @param b  the second child ordered iterator\n+     * @param a  the first child ordered iterator\n+     * @param b  the second child ordered iterator\n+     * @throws NullPointerException if either iterator is null\n      */\n     public CollatingIterator(Comparator comp, Iterator a, Iterator b) {\n         this(comp,2);\n         addIterator(b);\n     }\n \n-    //--------------------------------------------------------- Public Methods\n+    /**\n+     * Constructs a new <Code>CollatingIterator</Code> that will use the\n+     * specified comparator to provide ordered iteration over the array\n+     * of iterators.\n+     *\n+     * @param comp  the comparator to use to sort, or null to use natural\n+     *    sort order\n+     * @param iterators  the array of iterators\n+     * @throws NullPointerException if iterators array is or contains null\n+     */\n+    public CollatingIterator(Comparator comp, Iterator[] iterators) {\n+        this(comp, iterators.length);\n+        for (int i = 0; i < iterators.length; i++) {\n+            addIterator(iterators[i]);\n+        }\n+    }\n+\n+    /**\n+     * Constructs a new <Code>CollatingIterator</Code> that will use the\n+     * specified comparator to provide ordered iteration over the collection\n+     * of iterators.\n+     *\n+     * @param comp  the comparator to use to sort, or null to use natural\n+     *    sort order\n+     * @param iterators  the collection of iterators\n+     * @throws NullPointerException if iterators collection is or contains null\n+     * @throws ClassCastException if iterators collection doesn't contain an iterator\n+     */\n+    public CollatingIterator(Comparator comp, Collection iterators) {\n+        this(comp, iterators.size());\n+        for (Iterator it = iterators.iterator(); it.hasNext();) {\n+            Iterator item = (Iterator) it.next();\n+            addIterator(item);\n+        }\n+    }\n+\n+    // Public Methods\n+    // -------------------------------------------------------------------\n \n     /**\n      * Add the given {@link Iterator} to my collection to collate.\n      * @throws IllegalStateException if I've already started iterating\n-     */\n-    public void addIterator(Iterator iter) throws IllegalStateException {\n+     * @throws NullPointerException if the iterator is null\n+     */\n+    public void addIterator(Iterator iterator) {\n         checkNotStarted();\n-        iterators.add(iter);\n+        if (iterator == null) {\n+            throw new NullPointerException(\"Iterator must not be null\");\n+        }\n+        iterators.add(iterator);\n+    }\n+\n+    /**\n+     * Set the Iterator at the given index     \n+     * \n+     * @param index      index of the Iterator to replace\n+     * @param iterator   Iterator to place at the given index\n+     * @throws IndexOutOfBoundsException if index &lt; 0 or index &gt; size()\n+     * @throws IllegalStateException if I've already started iterating\n+     * @throws NullPointerException if the iterator is null\n+     */\n+    public void setIterator(int index, Iterator iterator) throws IndexOutOfBoundsException {\n+        checkNotStarted();\n+        if (iterator == null) {\n+            throw new NullPointerException(\"Iterator must not be null\");\n+        }\n+        iterators.set(index, iterator);\n+    }\n+\n+    /**\n+     * Get the list of Iterators (unmodifiable)\n+     * \n+     * @return the unmodifiable list of iterators added\n+     */\n+    public List getIterators() {\n+        return Collections.unmodifiableList(iterators);\n     }\n \n     /**\n      * Set the {@link Comparator} by which I collate.\n      * @throws IllegalStateException if I've already started iterating\n      */\n-    public void setComparator(Comparator comp) throws IllegalStateException {\n+    public void setComparator(Comparator comp) {\n         checkNotStarted();\n         comparator = comp;\n     }\n         return comparator;\n     }\n \n-    //------------------------------------------------------- Iterator Methods\n+    // Iterator Methods\n+    // -------------------------------------------------------------------\n \n     /**\n      *  Returns <Code>true</Code> if any child iterator has remaining elements.\n         }\n     }\n \n-    //--------------------------------------------------------- Private Methods\n+    // Private Methods\n+    // -------------------------------------------------------------------\n \n     /** Initialize my collating state if it hasn't been already. */\n     private void start() {\n      * @throws IllegalStateException iff I've been {@link #start started}\n      */\n     private void checkNotStarted() throws IllegalStateException {\n-        if(null != values) {\n+        if (null != values) {\n             throw new IllegalStateException(\"Can't do that after next or hasNext has been called.\");\n         }\n     }\n         return false;\n     }\n \n-    //--------------------------------------------------------- Private Members\n-\n-    /** My {@link Comparator}. */\n-    private Comparator comparator = null;\n-\n-    /** My list of {@link Iterator}s. */\n-    private ArrayList iterators = null;\n-   \n-    /** {@link Iterator#next Next} objects peeked from each iterator. */\n-    private ArrayList values = null;\n-    \n-    /** Whether or not each {@link #values} element has been set. */\n-    private BitSet valueSet = null;\n-\n-    /** Index of the {@link #iterators iterator} from whom the last returned value was obtained. */\n-    private int lastReturned = -1;\n-\n }", "timestamp": 1029583498, "metainfo": ""}