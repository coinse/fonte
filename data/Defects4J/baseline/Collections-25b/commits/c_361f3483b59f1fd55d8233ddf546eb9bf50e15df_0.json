{"sha": "361f3483b59f1fd55d8233ddf546eb9bf50e15df", "log": "comparators moved from the commons-sandbox/util component   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/comparators/ComparableComparator.java\n+package org.apache.commons.collections.comparators;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import java.util.Comparator;\n+import java.lang.Comparable;\n+\n+/**\n+ * A Comparator that compares Comparable objects.\n+ * Throws ClassCastExceptions if the objects are not \n+ * Comparable, or if they are null.\n+ * Throws ClassCastException if the compareTo of both \n+ * objects do not provide an inverse result of each other \n+ * as per the Comparable javadoc.\n+ *\n+ * @author bayard@generationjava.com\n+ * @version $Id: ComparableComparator.java,v 1.1 2002/02/26 22:42:31 morgand Exp $\n+ */\n+public class ComparableComparator implements Comparator {\n+\n+    public ComparableComparator() {\n+    }\n+\n+    public int compare(Object o1, Object o2) {\n+        if( (o1 == null) || (o2 == null) ) {\n+            throw new ClassCastException(\n+                \"There were nulls in the arguments for this method: \"+\n+                \"compare(\"+o1 + \", \" + o2 + \")\"\n+                );\n+        }\n+        \n+        if(o1 instanceof Comparable) {\n+            if(o2 instanceof Comparable) {\n+                int result1 = ((Comparable)o1).compareTo(o2);\n+                int result2 = ((Comparable)o2).compareTo(o1);\n+\n+                // enforce comparable contract\n+                if(result1 == 0 && result2 == 0) {\n+                    return 0;\n+                } else\n+                if(result1 < 0 && result2 > 0) {\n+                    return result1;\n+                } else\n+                if(result1 > 0 && result2 < 0) {\n+                    return result1;\n+                } else {\n+                    // results inconsistent\n+                    throw new ClassCastException(\"o1 not comparable to o2\");\n+                }\n+            } else {\n+                // o2 wasn't comparable\n+                throw new ClassCastException(\n+                    \"The first argument of this method was not a Comparable: \" +\n+                    o2.getClass().getName()\n+                    );\n+            }\n+        } else \n+        if(o2 instanceof Comparable) {\n+            // o1 wasn't comparable\n+            throw new ClassCastException(\n+                \"The second argument of this method was not a Comparable: \" +\n+                o1.getClass().getName()\n+                );\n+        } else {\n+            // neither were comparable\n+            throw new ClassCastException(\n+                \"Both arguments of this method were not Comparables: \" +\n+                o1.getClass().getName() + \" and \" + o2.getClass().getName()\n+                );\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/comparators/NumericStringComparator.java\n+package org.apache.commons.collections.comparators;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import java.util.Comparator;\n+\n+/**\n+ * A Comparator which deals with alphabet characters 'naturally', but \n+ * deals with numerics numerically. Leading 0's are ignored numerically,\n+ * but do come into play if the number is equal. Thus aaa119yyyy comes before \n+ * aaa0119xxxx regardless of x or y.\n+ *\n+ * The comparison should be very performant as it only ever deals with \n+ * issues at a character level and never tries to consider the \n+ * numerics as numbers.\n+ *\n+ * @author bayard@generationjava.com\n+ * @version $Id: NumericStringComparator.java,v 1.1 2002/02/26 22:42:31 morgand Exp $\n+ */\n+public class NumericStringComparator implements Comparator {\n+\n+    public NumericStringComparator() {\n+    }\n+\n+    public int compare(Object o1, Object o2) {\n+        if(o1 == null) {\n+            return 1;\n+        } else\n+        if(o2 == null) {\n+            return -1;\n+        }\n+\n+        String s1 = o1.toString();\n+        String s2 = o2.toString();\n+\n+        // find the first digit.\n+        int idx1 = getFirstDigitIndex(s1);\n+        int idx2 = getFirstDigitIndex(s2);\n+\n+        if( ( idx1 == -1 )   || \n+            ( idx2 == -1 ) ||\n+            ( !s1.substring(0,idx1).equals(s2.substring(0,idx2)) )\n+          )\n+        {\n+            return s1.compareTo(s2);\n+        }\n+\n+        // find the last digit\n+        int edx1 = getLastDigitIndex(s1, idx1);\n+        int edx2 = getLastDigitIndex(s2, idx2);\n+\n+        String sub1 = null;\n+        String sub2 = null;\n+\n+        if(edx1 == -1) {\n+            sub1 = s1.substring(idx1);\n+        } else {\n+            sub1 = s1.substring(idx1, edx1);\n+        }\n+\n+        if(edx2 == -1) {\n+            sub2 = s2.substring(idx2);\n+        } else {\n+            sub2 = s2.substring(idx2, edx2);\n+        }\n+\n+        // deal with zeros at start of each number\n+        int zero1 = countZeroes(sub1);\n+        int zero2 = countZeroes(sub2);\n+\n+        sub1 = sub1.substring(zero1);\n+        sub2 = sub2.substring(zero2);\n+\n+        // if equal, then recurse with the rest of the string\n+        // need to deal with zeroes so that 00119 appears after 119\n+        if(sub1.equals(sub2)) {\n+            int ret = 0;\n+            if(zero1 > zero2) {\n+                ret = 1;\n+            } else\n+            if(zero1 < zero2) {\n+                ret = -1;\n+            }\n+            if(edx1 != -1) {\n+                int comp = compare(s1.substring(edx1), s2.substring(edx2));\n+                if(comp != 0) {\n+                    ret = comp;\n+                }\n+            }\n+            return ret;\n+        } else {\n+            // if a numerical string is smaller in length than another\n+            // then it must be less. \n+            if(sub1.length() != sub2.length()) {\n+                return ( sub1.length() < sub2.length() ) ? -1 : 1;\n+            }\n+        }\n+\n+\n+        // now we get to do the string based numerical thing :)\n+        // going to assume that the individual character for the \n+        // number has the right order. ie) '9' > '0'\n+        // possibly bad in i18n.\n+        char[] chr1 = sub1.toCharArray();\n+        char[] chr2 = sub2.toCharArray();\n+\n+        int sz = chr1.length;\n+        for(int i=0; i<sz; i++) {\n+            // this should give better speed\n+            if(chr1[i] != chr2[i]) {\n+                return (chr1[i] < chr2[i]) ? -1 : 1;\n+            }\n+        }\n+\n+        return 0;\n+    }\n+\n+    /// TODO: Consider moving these to a lang helper class.\n+    private int getFirstDigitIndex(String str) {\n+        return getFirstDigitIndex(str, 0);\n+    }\n+    private int getFirstDigitIndex(String str, int start) {\n+        return getFirstDigitIndex(str.toCharArray(), start);\n+    }\n+    // Get the index of the first digit (number) in the array \n+    // of characters, starting at the specified digit.\n+    private int getFirstDigitIndex(char[] chrs, int start) {\n+        int sz = chrs.length;\n+\n+        for(int i=start; i<sz; i++) {\n+            if(Character.isDigit(chrs[i])) {\n+                return i;\n+            }\n+        }\n+\n+        return -1;\n+    }\n+\n+    private int getLastDigitIndex(String str, int start) {\n+        return getLastDigitIndex(str.toCharArray(), start);\n+    }\n+    // Get the index of the digit at the end of a collection \n+    // of digit characters in a character array, starting \n+    // at the provided start index.\n+    private int getLastDigitIndex(char[] chrs, int start) {\n+        int sz = chrs.length;\n+\n+        for(int i=start; i<sz; i++) {\n+            if(!Character.isDigit(chrs[i])) {\n+                return i;\n+            }\n+        }\n+\n+        return -1;\n+    }\n+\n+    public int countZeroes(String str) {\n+        int count = 0;\n+\n+        // assuming str is small...\n+        for(int i=0; i<str.length(); i++) {\n+            if(str.charAt(i) == '0') {\n+                count++;\n+            } else {\n+                break;\n+            }\n+        }\n+\n+        return count;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/comparators/PackageNameComparator.java\n+package org.apache.commons.collections.comparators;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import java.util.Comparator;\n+\n+/**\n+ * Sorts java package names.\n+ * Packages are grouped into java, javax, and other.\n+ * Inside each one they are alphabetical.\n+ *\n+ * @author bayard@generationjava.com\n+ * @version $Id: PackageNameComparator.java,v 1.1 2002/02/26 22:42:31 morgand Exp $\n+ */\n+public class PackageNameComparator implements Comparator {\n+\n+    static private int JAVA = 1;\n+    static private int JAVAX = 2;\n+    static private int OTHER = 3;\n+\n+    public int compare(Object obj1, Object obj2) {\n+        if( (obj1 instanceof String) && (obj2 instanceof String) ) {\n+            String str1 = (String)obj1;\n+            String str2 = (String)obj2;\n+            int type1 = getType(str1);\n+            int type2 = getType(str2);\n+            \n+            if(type1 == JAVA) {\n+                if(type2 == JAVA) {\n+                    str1 = str1.substring(4);\n+                    str2 = str2.substring(4);\n+                } else {\n+                    return -1;\n+                }\n+            } else\n+            if(type2 == JAVA) {\n+                return 1;\n+            } else\n+            if(type1 == JAVAX) {\n+                if(type2 == JAVAX) {\n+                    str1 = str1.substring(5);\n+                    str2 = str2.substring(5);\n+                } else {\n+                    return -1;\n+                }\n+            } else\n+            if(type2 == JAVAX) {\n+                return 1;\n+            }\n+\n+            return str1.compareTo(str2);\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    private static int getType(String str) {\n+        if(str.startsWith(\"java\")) {\n+            if(str.charAt(4) == '.') {\n+                return JAVA;\n+            } else \n+            if( (str.charAt(4) == 'x') && (str.charAt(5) == '.') ) {\n+                return JAVAX;\n+            }            \n+        }\n+        return OTHER;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/comparators/ReverseComparator.java\n+package org.apache.commons.collections.comparators;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import java.util.Comparator;\n+\n+/**\n+ * Reverses the order of another comparator.\n+ *\n+ * @author bayard@generationjava.com\n+ * @version $Id: ReverseComparator.java,v 1.1 2002/02/26 22:42:31 morgand Exp $\n+ */\n+public class ReverseComparator implements Comparator {\n+\n+    private Comparator comparator;\n+\n+    /**\n+     * Creates a reverse comparator that will invert any list.\n+     */\n+    public ReverseComparator() {\n+    }\n+\n+    /**\n+     * Creates a reverse comparator that inverts the comparison \n+     * of the passed in comparator.\n+     */\n+    public ReverseComparator(Comparator comparator) {\n+        this.comparator = comparator;\n+    }\n+\n+    public int compare(Object o1, Object o2) {\n+        if(comparator == null) {\n+            return -1;\n+        } else {\n+            return -1*comparator.compare(o1,o2);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/comparators/UrlComparator.java\n+package org.apache.commons.collections.comparators;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import java.util.Comparator;\n+import java.net.URL;\n+\n+/**\n+ * Compares URLs. Initially ignores protocol, so \n+ * ftp://sun.com and * http://sun.com will compare \n+ * near each other. Also pays attention to ports last, so \n+ * http://www:8080/index.html and http://www/index.html \n+ * will sort near each other.\n+ *\n+ * @author bayard@generationjava.com\n+ * @version $Id: UrlComparator.java,v 1.1 2002/02/26 22:42:31 morgand Exp $\n+ */\n+public class UrlComparator implements Comparator {\n+\n+    public UrlComparator() {\n+    }\n+\n+    public int compare(Object o1, Object o2) {\n+        if( (o1 instanceof URL) && (o2 instanceof URL)) {\n+            URL u1 = (URL)o1;\n+            URL u2 = (URL)o2;\n+            int ret = 0;\n+\n+            ret = u1.getHost().compareTo(u2.getHost());\n+            if(ret != 0) {\n+                return ret;\n+            }\n+\n+            ret = u1.getPath().compareTo(u2.getPath());\n+            if(ret != 0) {\n+                return ret;\n+            }\n+\n+            ret = u1.getProtocol().compareTo(u2.getProtocol());\n+            if(ret != 0) {\n+                return ret;\n+            }\n+\n+            if(u1.getPort() < u2.getPort()) {\n+                return -1;\n+            } else\n+            if(u1.getPort() < u2.getPort()) {\n+                return 1;\n+            }\n+\n+        }\n+\n+        return 0;\n+    }\n+\n+}", "timestamp": 1014763351, "metainfo": ""}