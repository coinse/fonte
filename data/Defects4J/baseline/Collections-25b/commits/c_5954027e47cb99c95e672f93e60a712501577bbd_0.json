{"sha": "5954027e47cb99c95e672f93e60a712501577bbd", "log": "Fix findbugs warning wrt exposure of internal representation: introduce a common base class for quantification predicates and clone the internal predicate array.  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections/functors/AbstractQuantifierPredicate.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Abstract base class for quantification predicates, e.g. All, Any, None.\n+ *\n+ * @since 4.0\n+ * @version $Id$\n+ */\n+public abstract class AbstractQuantifierPredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n+\n+    /** Serial version UID */\n+    private static final long serialVersionUID = -3094696765038308799L;\n+    \n+    /** The array of predicates to call */\n+    protected final Predicate<? super T>[] iPredicates;\n+    \n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     *\n+     * @param predicates  the predicates to check, not cloned, not null\n+     */\n+    public AbstractQuantifierPredicate(final Predicate<? super T> ... predicates) {\n+        iPredicates = predicates;\n+    }\n+\n+    /**\n+     * Gets the predicates.\n+     * \n+     * @return a copy of the predicates\n+     * @since 3.1\n+     */\n+    public Predicate<? super T>[] getPredicates() {\n+        return FunctorUtils.copy(iPredicates);\n+    }\n+\n+}\n--- a/src/main/java/org/apache/commons/collections/functors/AllPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/AllPredicate.java\n  * @since 3.0\n  * @version $Id$\n  */\n-public final class AllPredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n+public final class AllPredicate<T> extends AbstractQuantifierPredicate<T> implements Serializable {\n \n     /** Serial version UID */\n     private static final long serialVersionUID = -3094696765038308799L;\n-    \n-    /** The array of predicates to call */\n-    private final Predicate<? super T>[] iPredicates;\n     \n     /**\n      * Factory to create the predicate.\n      * @param predicates  the predicates to check, not cloned, not null\n      */\n     public AllPredicate(final Predicate<? super T> ... predicates) {\n-        super();\n-        iPredicates = predicates;\n+        super(predicates);\n     }\n \n     /**\n         return true;\n     }\n \n-    /**\n-     * Gets the predicates, do not modify the array.\n-     * \n-     * @return the predicates\n-     * @since 3.1\n-     */\n-    public Predicate<? super T>[] getPredicates() {\n-        return iPredicates;\n-    }\n-\n }\n--- a/src/main/java/org/apache/commons/collections/functors/AnyPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/AnyPredicate.java\n  * @since 3.0\n  * @version $Id$\n  */\n-public final class AnyPredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n+public final class AnyPredicate<T> extends AbstractQuantifierPredicate<T> implements Serializable {\n \n     /** Serial version UID */\n     private static final long serialVersionUID = 7429999530934647542L;\n-\n-    /** The array of predicates to call */\n-    private final Predicate<? super T>[] iPredicates;\n \n     /**\n      * Factory to create the predicate.\n      * @param predicates  the predicates to check, not cloned, not null\n      */\n     public AnyPredicate(final Predicate<? super T>[] predicates) {\n-        super();\n-        iPredicates = predicates;\n+        super(predicates);\n     }\n \n     /**\n         return false;\n     }\n \n-    /**\n-     * Gets the predicates, do not modify the array.\n-     *\n-     * @return the predicates\n-     * @since 3.1\n-     */\n-    public Predicate<? super T>[] getPredicates() {\n-        return iPredicates;\n-    }\n-\n }\n--- a/src/main/java/org/apache/commons/collections/functors/NonePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NonePredicate.java\n  * @since 3.0\n  * @version $Id$\n  */\n-public final class NonePredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n+public final class NonePredicate<T> extends AbstractQuantifierPredicate<T> implements Serializable {\n \n     /** Serial version UID */\n     private static final long serialVersionUID = 2007613066565892961L;\n-\n-    /** The array of predicates to call */\n-    private final Predicate<? super T>[] iPredicates;\n \n     /**\n      * Factory to create the predicate.\n      * @param predicates  the predicates to check, not cloned, not null\n      */\n     public NonePredicate(final Predicate<? super T>[] predicates) {\n-        super();\n-        iPredicates = predicates;\n+        super(predicates);\n     }\n \n     /**\n         return true;\n     }\n \n-    /**\n-     * Gets the predicates, do not modify the array.\n-     *\n-     * @return the predicates\n-     * @since 3.1\n-     */\n-    public Predicate<? super T>[] getPredicates() {\n-        return iPredicates;\n-    }\n-\n }\n--- a/src/main/java/org/apache/commons/collections/functors/OnePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/OnePredicate.java\n  * @since 3.0\n  * @version $Id$\n  */\n-public final class OnePredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n+public final class OnePredicate<T> extends AbstractQuantifierPredicate<T> implements Serializable {\n \n     /** Serial version UID */\n     private static final long serialVersionUID = -8125389089924745785L;\n-    \n-    /** The array of predicates to call */\n-    private final Predicate<? super T>[] iPredicates;\n     \n     /**\n      * Factory to create the predicate.\n      * @param predicates  the predicates to check, not cloned, not null\n      */\n     public OnePredicate(final Predicate<? super T>[] predicates) {\n-        super();\n-        iPredicates = predicates;\n+        super(predicates);\n     }\n \n     /**\n         return match;\n     }\n \n-    /**\n-     * Gets the predicates, do not modify the array.\n-     * \n-     * @return the predicates\n-     * @since 3.1\n-     */\n-    public Predicate<? super T>[] getPredicates() {\n-        return iPredicates;\n-    }\n-\n }", "timestamp": 1358761761, "metainfo": ""}