{"sha": "21500f60e71e45540b5f0b69e3185575b2378fe0", "log": "Patch that stops next() continually returning null if hasNext is not called in the standard way. ie)  (cf: \"Juozas Baliuka\" <baliuka@mwm.lt>)  while(true) {     filterIterator.next(); }  This should eventually throw NoSuchElementException, but it returns null forever.  Submitted by:  Jan Sorensen <jan.sorensen@aragost.com>   ", "commit": "\n--- a/src/java/org/apache/commons/collections/FilterIterator.java\n+++ b/src/java/org/apache/commons/collections/FilterIterator.java\n-/*\n- * Copyright (C) The Apache Software Foundation. All rights reserved.\n- *\n- * This software is published under the terms of the Apache Software License\n- * version 1.1, a copy of which has been included with this distribution in\n- * the LICENSE file.\n- */\n-package org.apache.commons.collections;\n-\n-import java.util.Enumeration;\n-import java.util.Iterator;\n-\n-/** A Proxy {@link Iterator Iterator} which takes a {@link Predicate Predicate} instance to filter\n-  * out objects from an underlying {@link Iterator Iterator} instance.\n-  *\n-  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n-  */\n-\n-public class FilterIterator extends ProxyIterator {\n-    \n-    /** Holds value of property predicate. */\n-    private Predicate predicate;\n-    private Object nextObject;\n-    \n-    \n-    //-------------------------------------------------------------------------\n-    public FilterIterator() {\n-    }\n-    \n-    public FilterIterator( Iterator iterator ) {\n-        super( iterator );\n-    }\n-\n-    public FilterIterator( Iterator iterator, Predicate predicate ) {\n-        super( iterator );\n-        this.predicate = predicate;\n-    }\n-\n-    // Iterator interface\n-    //-------------------------------------------------------------------------\n-    public boolean hasNext() {\n-        Iterator iterator = getIterator();\n-        Predicate predicate = getPredicate();\n-        while ( iterator.hasNext() ) {\n-            Object object = iterator.next();\n-            if ( predicate.evaluate( object ) ) {\n-                nextObject = object;\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    public Object next() {\n-        return nextObject;\n-    }\n-\n-    // Properties\n-    //-------------------------------------------------------------------------\n-    /** Getter for property predicate.\n-     * @return Value of property predicate.\n-     */\n-    public Predicate getPredicate() {\n-        return predicate;\n-    }\n-    /** Setter for property predicate.\n-     * @param predicate New value of property predicate.\n-     */\n-    public void setPredicate(Predicate predicate) {\n-        this.predicate = predicate;\n-    }\n-}\n+/*\n+ * Copyright (C) The Apache Software Foundation. All rights reserved.\n+ *\n+ * This software is published under the terms of the Apache Software License\n+ * version 1.1, a copy of which has been included with this distribution in\n+ * the LICENSE file.\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/** A Proxy {@link Iterator Iterator} which takes a {@link Predicate Predicate} instance to filter\n+  * out objects from an underlying {@link Iterator Iterator} instance.\n+  *\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  * @author Jan Sorensen\n+  */\n+\n+public class FilterIterator extends ProxyIterator {\n+    \n+    /** Holds value of property predicate. */\n+    private Predicate predicate;\n+\n+    private Object nextObject;\n+    private boolean nextObjectSet = false;\n+    \n+    \n+    //-------------------------------------------------------------------------\n+    public FilterIterator() {\n+    }\n+    \n+    public FilterIterator( Iterator iterator ) {\n+        super( iterator );\n+    }\n+\n+    public FilterIterator( Iterator iterator, Predicate predicate ) {\n+        super( iterator );\n+        this.predicate = predicate;\n+    }\n+\n+    // Iterator interface\n+    //-------------------------------------------------------------------------\n+    public boolean hasNext() {\n+        if ( nextObjectSet ) {\n+            return true;\n+        } else {\n+            return setNextObject();\n+        }\n+    }\n+\n+    public Object next() {\n+        if ( !nextObjectSet ) {\n+            if (!setNextObject()) {\n+                throw new NoSuchElementException();\n+            }\n+        }\n+        nextObjectSet = false;\n+        return nextObject;\n+    }\n+\n+    /**\n+     * Always throws UnsupportedOperationException as this class \n+     * does look-ahead with its internal iterator.\n+     */\n+    public void remove() {\n+        throw new UnsupportedOperationException();\n+    }\n+        \n+\n+    // Properties\n+    //-------------------------------------------------------------------------\n+    /** Getter for property predicate.\n+     * @return Value of property predicate.\n+     */\n+    public Predicate getPredicate() {\n+        return predicate;\n+    }\n+    /** Setter for property predicate.\n+     * @param predicate New value of property predicate.\n+     */\n+    public void setPredicate(Predicate predicate) {\n+        this.predicate = predicate;\n+    }\n+\n+    /**\n+     * Set nextObject to the next object. If there are no more \n+     * objects then return false. Otherwise, return true.\n+     */\n+    private boolean setNextObject() {\n+        Iterator iterator = getIterator();\n+        Predicate predicate = getPredicate();\n+        while ( iterator.hasNext() ) {\n+            Object object = iterator.next();\n+            if ( predicate.evaluate( object ) ) {\n+                nextObject = object;\n+                nextObjectSet = true;\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+}", "timestamp": 1003522701, "metainfo": ""}