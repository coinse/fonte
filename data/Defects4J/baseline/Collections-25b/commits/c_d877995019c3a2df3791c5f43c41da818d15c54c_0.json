{"sha": "d877995019c3a2df3791c5f43c41da818d15c54c", "log": "AbstractHashedMap,AbstractLinkedMap add entryXxx() methods to get around protected scope limits in subclasses   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n  * need for unusual subclasses is here.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.12 $ $Date: 2004/02/27 00:24:05 $\n+ * @version $Revision: 1.13 $ $Date: 2004/03/13 15:54:34 $\n  *\n  * @author java util HashMap\n  * @author Stephen Colebourne\n     \n     //-----------------------------------------------------------------------\n     /**\n+     * Gets the <code>next</code> field from a <code>HashEntry</code>.\n+     * Used in subclasses that have no visibility of the field.\n+     * \n+     * @param entry  the entry to query, must not be null\n+     * @return the <code>next</code> field of the entry\n+     * @throws NullPointerException if the entry is null\n+     */\n+    protected HashEntry entryNext(HashEntry entry) {\n+        return entry.next;\n+    }\n+    \n+    /**\n+     * Gets the <code>hashCode</code> field from a <code>HashEntry</code>.\n+     * Used in subclasses that have no visibility of the field.\n+     * \n+     * @param entry  the entry to query, must not be null\n+     * @return the <code>hashCode</code> field of the entry\n+     * @throws NullPointerException if the entry is null\n+     */\n+    protected int entryHashCode(HashEntry entry) {\n+        return entry.hashCode;\n+    }\n+    \n+    /**\n+     * Gets the <code>key</code> field from a <code>HashEntry</code>.\n+     * Used in subclasses that have no visibility of the field.\n+     * \n+     * @param entry  the entry to query, must not be null\n+     * @return the <code>key</code> field of the entry\n+     * @throws NullPointerException if the entry is null\n+     */\n+    protected Object entryKey(HashEntry entry) {\n+        return entry.key;\n+    }\n+    \n+    /**\n+     * Gets the <code>value</code> field from a <code>HashEntry</code>.\n+     * Used in subclasses that have no visibility of the field.\n+     * \n+     * @param entry  the entry to query, must not be null\n+     * @return the <code>value</code> field of the entry\n+     * @throws NullPointerException if the entry is null\n+     */\n+    protected Object entryValue(HashEntry entry) {\n+        return entry.value;\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n      * Gets an iterator over the map.\n      * Changes made to the iterator affect this map.\n      * <p>\n     \n     //-----------------------------------------------------------------------\n     /**\n-     * HashEntry used to store the data\n+     * HashEntry used to store the data.\n+     * <p>\n+     * If you subclass <code>AbstractHashedMap</code> but not <code>HashEntry</code>\n+     * then you will not be able to access the protected fields.\n+     * The <code>entryXxx()</code> methods on <code>AbstractHashedMap</code> exist\n+     * to provide the necessary access.\n      */\n     protected static class HashEntry implements Map.Entry, KeyValue {\n         /** The next entry in the hash chain */\n--- a/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n  * methods exposed.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.9 $ $Date: 2004/02/18 01:13:19 $\n+ * @version $Revision: 1.10 $ $Date: 2004/03/13 15:54:34 $\n  *\n  * @author java util LinkedHashMap\n  * @author Stephen Colebourne\n     \n     //-----------------------------------------------------------------------\n     /**\n+     * Gets the <code>before</code> field from a <code>LinkEntry</code>.\n+     * Used in subclasses that have no visibility of the field.\n+     * \n+     * @param entry  the entry to query, must not be null\n+     * @return the <code>before</code> field of the entry\n+     * @throws NullPointerException if the entry is null\n+     */\n+    protected LinkEntry entryBefore(LinkEntry entry) {\n+        return entry.before;\n+    }\n+    \n+    /**\n+     * Gets the <code>after</code> field from a <code>LinkEntry</code>.\n+     * Used in subclasses that have no visibility of the field.\n+     * \n+     * @param entry  the entry to query, must not be null\n+     * @return the <code>after</code> field of the entry\n+     * @throws NullPointerException if the entry is null\n+     */\n+    protected LinkEntry entryAfter(LinkEntry entry) {\n+        return entry.after;\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n      * Gets an iterator over the map.\n      * Changes made to the iterator affect this map.\n      * <p>\n     //-----------------------------------------------------------------------\n     /**\n      * LinkEntry that stores the data.\n+     * <p>\n+     * If you subclass <code>AbstractLinkedMap</code> but not <code>LinkEntry</code>\n+     * then you will not be able to access the protected fields.\n+     * The <code>entryXxx()</code> methods on <code>AbstractLinkedMap</code> exist\n+     * to provide the necessary access.\n      */\n     protected static class LinkEntry extends HashEntry {\n-        \n         /** The entry before this one in the order */\n         protected LinkEntry before;\n         /** The entry after this one in the order */", "timestamp": 1079193274, "metainfo": ""}