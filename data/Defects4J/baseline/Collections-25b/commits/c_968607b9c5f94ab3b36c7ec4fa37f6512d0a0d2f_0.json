{"sha": "968607b9c5f94ab3b36c7ec4fa37f6512d0a0d2f", "log": "Add empty unmodifiable implementations for all collections Add synchronized/unmodifiable implementations for all collections   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BufferUtils.java\n+++ b/src/java/org/apache/commons/collections/BufferUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUtils.java,v 1.9 2002/10/13 00:38:36 scolebourne Exp $\n- * $Revision: 1.9 $\n- * $Date: 2002/10/13 00:38:36 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUtils.java,v 1.10 2002/12/15 13:05:03 scolebourne Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2002/12/15 13:05:03 $\n  *\n  * ====================================================================\n  *\n  *\n  * @author Paul Jack\n  * @author Stephen Colebourne\n- * @version $Id: BufferUtils.java,v 1.9 2002/10/13 00:38:36 scolebourne Exp $\n+ * @version $Id: BufferUtils.java,v 1.10 2002/12/15 13:05:03 scolebourne Exp $\n  * @since 2.1\n  */\n public class BufferUtils {\n \n     /**\n-     * Restrictive constructor\n-     */\n-    private BufferUtils() {\n-    }\n-\n+     * An empty unmodifiable buffer.\n+     */\n+    public static final Buffer EMPTY_BUFFER = BufferUtils.unmodifiableBuffer(new ArrayStack());\n+    \n+    /**\n+     * <code>BufferUtils</code> should not normally be instantiated.\n+     */\n+    public BufferUtils() {\n+    }\n \n     /**\n      * Returns a synchronized buffer backed by the given buffer.\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Id: CollectionUtils.java,v 1.23 2002/12/11 19:05:14 scolebourne Exp $\n- * $Revision: 1.23 $\n- * $Date: 2002/12/11 19:05:14 $\n+ * $Id: CollectionUtils.java,v 1.24 2002/12/15 13:05:03 scolebourne Exp $\n+ * $Revision: 1.24 $\n+ * $Date: 2002/12/15 13:05:03 $\n  *\n  * ====================================================================\n  *\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Enumeration;\n import java.util.HashMap;\n import java.util.HashSet;\n  * @author Steve Downey\n  * @author <a href=\"herve.quiroz@esil.univ-mrs.fr\">Herve Quiroz</a>\n  * @author BluePhelix@web.de (Peter)\n- * @version $Revision: 1.23 $ $Date: 2002/12/11 19:05:14 $\n+ * @author Stephen Colebourne\n+ * @version $Revision: 1.24 $ $Date: 2002/12/15 13:05:03 $\n  */\n public class CollectionUtils {\n \n     /**\n+     * An empty unmodifiable collection.\n+     * The JDK provides empty Set and List implementations which could be used for\n+     * this purpose. However they could be cast to Set or List which might be\n+     * undesirable. This implementation only implements Collection.\n+     */\n+    public static final Collection EMPTY_COLLECTION = Collections.unmodifiableCollection(new ArrayList());\n+    /**\n      * The empty iterator (immutable).\n      * @deprecated use IteratorUtils.EMPTY_ITERATOR\n      */\n     public static final Iterator EMPTY_ITERATOR = IteratorUtils.EMPTY_ITERATOR;\n \n     /**\n-     * Please don't ever instantiate a <code>CollectionUtils</code>.\n+     * <code>CollectionUtils</code> should not normally be instantiated.\n      */\n     public CollectionUtils() {\n     }\n \n \n     /**\n+     * Returns a synchronized collection backed by the given collection.\n+     * <p>\n+     * You must manually synchronize on the returned buffer's iterator to \n+     * avoid non-deterministic behavior:\n+     *  \n+     * <pre>\n+     * Collection c = CollectionUtils.synchronizedCollection(myCollection);\n+     * synchronized (c) {\n+     *     Iterator i = c.iterator();\n+     *     while (i.hasNext()) {\n+     *         process (i.next());\n+     *     }\n+     * }\n+     * </pre>\n+     * \n+     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     * \n+     * @param collection  the collection to synchronize, must not be null\n+     * @return a synchronized collection backed by the given collection\n+     * @throws IllegalArgumentException  if the collection is null\n+     */\n+    public static Collection synchronizedCollection(Collection collection) {\n+        return Collections.synchronizedCollection(collection);\n+    }\n+\n+    /**\n+     * Returns an unmodifiable collection backed by the given collection.\n+     * <p>\n+     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     *\n+     * @param collection  the collection to make unmodifiable, must not be null\n+     * @return an unmodifiable collection backed by the given collection\n+     * @throws IllegalArgumentException  if the collection is null\n+     */\n+    public static Collection unmodifiableCollection(Collection collection) {\n+        return Collections.unmodifiableCollection(collection);\n+    }\n+\n+    /**\n      * Returns a predicated collection backed by the given collection.\n      * Only objects that pass the test in the given predicate can be \n      * added to the collection.\n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.11 2002/10/13 00:38:36 scolebourne Exp $\n- * $Revision: 1.11 $\n- * $Date: 2002/10/13 00:38:36 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.12 2002/12/15 13:05:03 scolebourne Exp $\n+ * $Revision: 1.12 $\n+ * $Date: 2002/12/15 13:05:03 $\n  *\n  * ====================================================================\n  *\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n public class ListUtils {\n \n     /**\n-     *  Please don't ever instantiate a <Code>ListUtils</Code>.\n+     * An empty unmodifiable list.\n+     * This uses the {@link #java.util.Collections Collections} implementation \n+     * and is provided for completeness.\n+     */\n+    public static final List EMPTY_LIST = Collections.EMPTY_LIST;\n+    \n+    /**\n+     * <code>ListUtils</code> should not normally be instantiated.\n      */\n     public ListUtils() {\n     }\n \n \n     /**\n+     * Returns a synchronized list backed by the given list.\n+     * <p>\n+     * You must manually synchronize on the returned buffer's iterator to \n+     * avoid non-deterministic behavior:\n+     *  \n+     * <pre>\n+     * List list = ListUtils.synchronizedList(myList);\n+     * synchronized (list) {\n+     *     Iterator i = list.iterator();\n+     *     while (i.hasNext()) {\n+     *         process (i.next());\n+     *     }\n+     * }\n+     * </pre>\n+     * \n+     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     * \n+     * @param list  the list to synchronize, must not be null\n+     * @return a synchronized list backed by the given list\n+     * @throws IllegalArgumentException  if the list is null\n+     */\n+    public static List synchronizedList(List list) {\n+        return Collections.synchronizedList(list);\n+    }\n+\n+    /**\n+     * Returns an unmodifiable list backed by the given list.\n+     * <p>\n+     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     *\n+     * @param list  the list to make unmodifiable, must not be null\n+     * @return an unmodifiable list backed by the given list\n+     * @throws IllegalArgumentException  if the list is null\n+     */\n+    public static List unmodifiableList(List list) {\n+        return Collections.unmodifiableList(list);\n+    }\n+\n+    /**\n      * Returns a predicated list backed by the given list.  Only objects\n      * that pass the test in the given predicate can be added to the list.\n      * It is important not to use the original list after invoking this \n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.14 2002/10/13 22:31:35 scolebourne Exp $\n- * $Revision: 1.14 $\n- * $Date: 2002/10/13 22:31:35 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.15 2002/12/15 13:05:03 scolebourne Exp $\n+ * $Revision: 1.15 $\n+ * $Date: 2002/12/15 13:05:03 $\n  *\n  * ====================================================================\n  *\n  * @author Stephen Colebourne\n  */\n public class MapUtils {\n+    \n+    /**\n+     * An empty unmodifiable map.\n+     * This was not provided in JDK1.2.\n+     */\n+    public static final Map EMPTY_MAP = Collections.unmodifiableMap(new HashMap(1));\n+    /**\n+     * An empty unmodifiable sorted map.\n+     * This is not provided in the JDK.\n+     */\n+    public static final SortedMap EMPTY_SORTED_MAP = Collections.unmodifiableSortedMap(new TreeMap());\n \n     private static int debugIndent = 0;\n \n     /**\n-     *  Please don't instantiate a <Code>MapUtils</Code>.\n+     * <code>MapUtils</code> should not normally be instantiated.\n      */\n     public MapUtils() {\n     }    \n \n \n     /**\n+     * Returns a synchronized map backed by the given map.\n+     * <p>\n+     * You must manually synchronize on the returned buffer's iterator to \n+     * avoid non-deterministic behavior:\n+     *  \n+     * <pre>\n+     * Map m = MapUtils.synchronizedMap(myMap);\n+     * Set s = m.keySet();  // outside synchronized block\n+     * synchronized (m) {  // synchronized on MAP!\n+     *     Iterator i = s.iterator();\n+     *     while (i.hasNext()) {\n+     *         process (i.next());\n+     *     }\n+     * }\n+     * </pre>\n+     * \n+     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     * \n+     * @param map  the map to synchronize, must not be null\n+     * @return a synchronized map backed by the given map\n+     * @throws IllegalArgumentException  if the map is null\n+     */\n+    public static Map synchronizedMap(Map map) {\n+        return Collections.synchronizedMap(map);\n+    }\n+\n+    /**\n+     * Returns an unmodifiable map backed by the given map.\n+     * <p>\n+     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     *\n+     * @param map  the map to make unmodifiable, must not be null\n+     * @return an unmodifiable map backed by the given map\n+     * @throws IllegalArgumentException  if the map is null\n+     */\n+    public static Map unmodifiableMap(Map map) {\n+        return Collections.unmodifiableMap(map);\n+    }\n+\n+    /**\n      * Returns a predicated map backed by the given map.  Only keys and\n      * values that pass the given predicates can be added to the map.\n      * It is important not to use the original map after invoking this \n     }\n \n     /**\n+     * Returns a synchronized sorted map backed by the given sorted map.\n+     * <p>\n+     * You must manually synchronize on the returned buffer's iterator to \n+     * avoid non-deterministic behavior:\n+     *  \n+     * <pre>\n+     * Map m = MapUtils.synchronizedSortedMap(myMap);\n+     * Set s = m.keySet();  // outside synchronized block\n+     * synchronized (m) {  // synchronized on MAP!\n+     *     Iterator i = s.iterator();\n+     *     while (i.hasNext()) {\n+     *         process (i.next());\n+     *     }\n+     * }\n+     * </pre>\n+     * \n+     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     * \n+     * @param map  the map to synchronize, must not be null\n+     * @return a synchronized map backed by the given map\n+     * @throws IllegalArgumentException  if the map is null\n+     */\n+    public static Map synchronizedSortedMap(SortedMap map) {\n+        return Collections.synchronizedSortedMap(map);\n+    }\n+\n+    /**\n+     * Returns an unmodifiable sorted map backed by the given sorted map.\n+     * <p>\n+     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     *\n+     * @param map  the sorted map to make unmodifiable, must not be null\n+     * @return an unmodifiable map backed by the given map\n+     * @throws IllegalArgumentException  if the map is null\n+     */\n+    public static Map unmodifiableSortedMap(SortedMap map) {\n+        return Collections.unmodifiableSortedMap(map);\n+    }\n+\n+    /**\n      * Returns a predicated sorted map backed by the given map.  Only keys and\n      * values that pass the given predicates can be added to the map.\n      * It is important not to use the original map after invoking this \n--- a/src/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/java/org/apache/commons/collections/SetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.7 2002/10/13 00:38:36 scolebourne Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/10/13 00:38:36 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.8 2002/12/15 13:05:03 scolebourne Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/12/15 13:05:03 $\n  *\n  * ====================================================================\n  *\n  */\n package org.apache.commons.collections;\n \n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.Set;\n import java.util.SortedSet;\n+import java.util.TreeSet;\n /**\n  * Provides static utility methods and decorators for {@link Set} \n  * and {@link SortedSet} instances.\n  *\n  * @author Paul Jack\n  * @author Stephen Colebourne\n- * @version $Id: SetUtils.java,v 1.7 2002/10/13 00:38:36 scolebourne Exp $\n+ * @version $Id: SetUtils.java,v 1.8 2002/12/15 13:05:03 scolebourne Exp $\n  * @since 2.1\n  */\n public class SetUtils {\n \n     /**\n-     * Prevents instantiation.\n-     */\n-    private SetUtils() {\n+     * An empty unmodifiable set.\n+     * This uses the {@link #java.util.Collections Collections} implementation \n+     * and is provided for completeness.\n+     */\n+    public static final Set EMPTY_SET = Collections.EMPTY_SET;\n+    /**\n+     * An empty unmodifiable sorted set.\n+     * This is not provided in the JDK.\n+     */\n+    public static final SortedSet EMPTY_SORTED_SET = Collections.unmodifiableSortedSet(new TreeSet());\n+\n+    /**\n+     * <code>SetUtils</code> should not normally be instantiated.\n+     */\n+    public SetUtils() {\n     }\n \n \n             return (SortedSet)collection;\n         }\n \n+    }\n+\n+    /**\n+     * Returns a synchronized set backed by the given set.\n+     * <p>\n+     * You must manually synchronize on the returned buffer's iterator to \n+     * avoid non-deterministic behavior:\n+     *  \n+     * <pre>\n+     * Set s = SetUtils.synchronizedSet(mySet);\n+     * synchronized (s) {\n+     *     Iterator i = s.iterator();\n+     *     while (i.hasNext()) {\n+     *         process (i.next());\n+     *     }\n+     * }\n+     * </pre>\n+     * \n+     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     * \n+     * @param set  the set to synchronize, must not be null\n+     * @return a synchronized set backed by the given set\n+     * @throws IllegalArgumentException  if the set is null\n+     */\n+    public static Set synchronizedSet(Set set) {\n+        return Collections.synchronizedSet(set);\n+    }\n+\n+    /**\n+     * Returns an unmodifiable set backed by the given set.\n+     * <p>\n+     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     *\n+     * @param set  the set to make unmodifiable, must not be null\n+     * @return an unmodifiable set backed by the given set\n+     * @throws IllegalArgumentException  if the set is null\n+     */\n+    public static Set unmodifiableSet(Set set) {\n+        return Collections.unmodifiableSet(set);\n     }\n \n     /**\n      */\n     public static Set predicatedSet(Set set, Predicate predicate) {\n         return new PredicatedSet(set, predicate);\n+    }\n+\n+    /**\n+     * Returns a synchronized sorted set backed by the given sorted set.\n+     * <p>\n+     * You must manually synchronize on the returned buffer's iterator to \n+     * avoid non-deterministic behavior:\n+     *  \n+     * <pre>\n+     * Set s = SetUtils.synchronizedSet(mySet);\n+     * synchronized (s) {\n+     *     Iterator i = s.iterator();\n+     *     while (i.hasNext()) {\n+     *         process (i.next());\n+     *     }\n+     * }\n+     * </pre>\n+     * \n+     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     * \n+     * @param set  the sorted set to synchronize, must not be null\n+     * @return a synchronized set backed by the given set\n+     * @throws IllegalArgumentException  if the set is null\n+     */\n+    public static SortedSet synchronizedSortedSet(SortedSet set) {\n+        return Collections.synchronizedSortedSet(set);\n+    }\n+\n+    /**\n+     * Returns an unmodifiable sorted set backed by the given sorted set.\n+     * <p>\n+     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     *\n+     * @param set  the sorted set to make unmodifiable, must not be null\n+     * @return an unmodifiable set backed by the given set\n+     * @throws IllegalArgumentException  if the set is null\n+     */\n+    public static SortedSet unmodifiableSortedSet(SortedSet set) {\n+        return Collections.unmodifiableSortedSet(set);\n     }\n \n     /**", "timestamp": 1039957503, "metainfo": ""}