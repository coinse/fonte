{"sha": "c5e2cb5c2e7746f4618f5d0b9e8958af4eacc004", "log": "Added clarifying javadoc for ListUtils#removeAll wrt runtime performance.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ListUtils.java\n \n     /**\n      * Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n-     * method returns a list containing all the elements in <code>c</code>\n+     * method returns a list containing all the elements in <code>collection</code>\n      * that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n      * in the returned collection is the same as the cardinality of <code>e</code>\n      * in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n      * case the cardinality is zero. This method is useful if you do not wish to modify\n      * <code>collection</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n+     * <p> \n+     * This implementation iterates over <code>collection</code>, checking each element in\n+     * turn to see if it's contained in <code>remove</code>. If it's not contained, it's added\n+     * to the returned list. As a consequence, it is advised to use a collection type for\n+     * <code>remove</code> that provides a fast (e.g. O(1)) implementation of\n+     * {@link Collection#contains(Object)}.\n      * \n      * @param <E>  the element type\n      * @param collection  the collection from which items are removed (in the returned collection)", "timestamp": 1343252370, "metainfo": ""}