{"sha": "7c8c58f1468023e4512d13a0b9fc60df9a3b15ce", "log": "[COLLECTIONS-231] apply signature change to factory method.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/set/MapBackedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/MapBackedSet.java\n     /**\n      * Factory method to create a set from a map.\n      * \n+     * @param <E> the element type\n+     * @param <V> the dummy value type in the map\n      * @param map  the map to decorate, must not be null\n+     * @return a new map backed set\n      * @throws IllegalArgumentException if set is null\n      */\n-    public static <E, V> Set<E> mapBackedSet(Map<E, ? super V> map) {\n+    public static <E, V> MapBackedSet<E, V> mapBackedSet(Map<E, ? super V> map) {\n         return mapBackedSet(map, null);\n     }\n \n     /**\n      * Factory method to create a set from a map.\n      * \n+     * @param <E> the element type\n+     * @param <V> the dummy value type in the map\n      * @param map  the map to decorate, must not be null\n      * @param dummyValue  the dummy value to use\n+     * @return a new map backed set\n      * @throws IllegalArgumentException if map is null\n      */\n-    public static <E, V> Set<E> mapBackedSet(Map<E, ? super V> map, V dummyValue) {\n+    public static <E, V> MapBackedSet<E, V> mapBackedSet(Map<E, ? super V> map, V dummyValue) {\n         if (map == null) {\n             throw new IllegalArgumentException(\"The map must not be null\");\n         }\n--- a/src/main/java/org/apache/commons/collections/set/PredicatedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/PredicatedSet.java\n      * If there are any elements already in the set being decorated, they\n      * are validated.\n      * \n+     * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @return a decorated set\n      * @throws IllegalArgumentException if set or predicate is null\n      * @throws IllegalArgumentException if the set contains invalid elements\n      */\n-    public static <T> Set<T> predicatedSet(Set<T> set, Predicate<? super T> predicate) {\n-        return new PredicatedSet<T>(set, predicate);\n+    public static <E> PredicatedSet<E> predicatedSet(Set<E> set, Predicate<? super E> predicate) {\n+        return new PredicatedSet<E>(set, predicate);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections/set/PredicatedSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/PredicatedSortedSet.java\n      * If there are any elements already in the set being decorated, they\n      * are validated.\n      * \n+     * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @return a new predicated sorted set.\n      * @throws IllegalArgumentException if set or predicate is null\n      * @throws IllegalArgumentException if the set contains invalid elements\n      */\n-    public static <T> SortedSet<T> predicatedSortedSet(SortedSet<T> set, Predicate<? super T> predicate) {\n-        return new PredicatedSortedSet<T>(set, predicate);\n+    public static <E> PredicatedSortedSet<E> predicatedSortedSet(SortedSet<E> set, Predicate<? super E> predicate) {\n+        return new PredicatedSortedSet<E>(set, predicate);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections/set/SynchronizedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/SynchronizedSet.java\n     /**\n      * Factory method to create a synchronized set.\n      * \n+     * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n+     * @return a new synchronized set\n      * @throws IllegalArgumentException if set is null\n      */\n-    public static <T> Set<T> synchronizedSet(Set<T> set) {\n-        return new SynchronizedSet<T>(set);\n+    public static <E> SynchronizedSet<E> synchronizedSet(Set<E> set) {\n+        return new SynchronizedSet<E>(set);\n     }\n     \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections/set/SynchronizedSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/SynchronizedSortedSet.java\n     /**\n      * Factory method to create a synchronized set.\n      *\n+     * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n+     * @return a new synchronized sorted set\n      * @throws IllegalArgumentException if set is null\n      */\n-    public static <T> SortedSet<T> synchronizedSortedSet(SortedSet<T> set) {\n-        return new SynchronizedSortedSet<T>(set);\n+    public static <E> SynchronizedSortedSet<E> synchronizedSortedSet(SortedSet<E> set) {\n+        return new SynchronizedSortedSet<E>(set);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections/set/TransformedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/TransformedSet.java\n      * are NOT transformed.\n      * Contrast this with {@link #transformedSet(Set, Transformer)}.\n      * \n+     * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n+     * @return a new transformed set\n      * @throws IllegalArgumentException if set or transformer is null\n      */\n-    public static <E> Set<E> transformingSet(Set<E> set, Transformer<? super E, ? extends E> transformer) {\n+    public static <E> TransformedSet<E> transformingSet(Set<E> set, Transformer<? super E, ? extends E> transformer) {\n         return new TransformedSet<E>(set, transformer);\n     }\n     \n      * will be transformed by this method.\n      * Contrast this with {@link #transformingSet(Set, Transformer)}.\n      * \n+     * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n-     * @return a new transformed Set\n+     * @return a new transformed set\n      * @throws IllegalArgumentException if set or transformer is null\n      * @since Commons Collections 3.3\n      */\n--- a/src/main/java/org/apache/commons/collections/set/TransformedSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/TransformedSortedSet.java\n      * are NOT transformed.\n      * Contrast this with {@link #transformedSortedSet(SortedSet, Transformer)}.\n      * \n+     * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n+     * @return a new transformed {@link SortedSet}\n      * @throws IllegalArgumentException if set or transformer is null\n      */\n-    public static <E> SortedSet<E> transformingSortedSet(SortedSet<E> set, Transformer<? super E, ? extends E> transformer) {\n+    public static <E> TransformedSortedSet<E> transformingSortedSet(SortedSet<E> set,\n+                                                                    Transformer<? super E, ? extends E> transformer) {\n         return new TransformedSortedSet<E>(set, transformer);\n     }\n     \n      * will be transformed by this method.\n      * Contrast this with {@link #transformingSortedSet(SortedSet, Transformer)}.\n      * \n+     * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n-     * @return a new transformed SortedSet\n+     * @return a new transformed {@link SortedSet}\n      * @throws IllegalArgumentException if set or transformer is null\n      * @since Commons Collections 3.3\n      */\n-    public static <E> SortedSet<E> transformedSortedSet(SortedSet<E> set, Transformer<? super E, ? extends E> transformer) {\n+    public static <E> TransformedSortedSet<E> transformedSortedSet(SortedSet<E> set,\n+                                                                   Transformer<? super E, ? extends E> transformer) {\n         TransformedSortedSet<E> decorated = new TransformedSortedSet<E>(set, transformer);\n         if (transformer != null && set != null && set.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // set is type E\n--- a/src/main/java/org/apache/commons/collections/set/UnmodifiableSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/UnmodifiableSet.java\n     /**\n      * Factory method to create an unmodifiable set.\n      * \n+     * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n+     * @return a new unmodifiable set\n      * @throws IllegalArgumentException if set is null\n      */\n     public static <E> Set<E> unmodifiableSet(Set<E> set) {\n--- a/src/main/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n     /**\n      * Factory method to create an unmodifiable set.\n      * \n+     * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n+     * @return a new unmodifiable {@link SortedSet}\n      * @throws IllegalArgumentException if set is null\n      */\n-    public static <T> SortedSet<T> unmodifiableSortedSet(SortedSet<T> set) {\n+    public static <E> SortedSet<E> unmodifiableSortedSet(SortedSet<E> set) {\n         if (set instanceof Unmodifiable) {\n             return set;\n         }\n-        return new UnmodifiableSortedSet<T>(set);\n+        return new UnmodifiableSortedSet<E>(set);\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1340474562, "metainfo": ""}