{"sha": "eaa246e46c3424e3c456fbfc9aecccf6133f203c", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471186 | scolebourne | 2006-11-04 05:47:51 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getSet() and getSortedSet() - use decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/set/TestListOrderedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestListOrderedSet.java\n  * @author Henning P. Schmiedehausen\n  * @author Stephen Colebourne\n  */\n-public class TestListOrderedSet extends AbstractTestSet {\n-\n-    public TestListOrderedSet(String testName) {\n-        super(testName);\n-    }\n-\n-    public static Test suite() {\n-        return new TestSuite(TestListOrderedSet.class);\n-    }\n-\n-    public static void main(String args[]) {\n-        String[] testCaseName = { TestListOrderedSet.class.getName()};\n-        junit.textui.TestRunner.main(testCaseName);\n-    }\n-\n-    public Set makeEmptySet() {\n-        return ListOrderedSet.decorate(new HashSet());\n-    }\n-\n-    protected Set setupSet() {\n-        Set set = makeEmptySet();\n-\n-        for (int i = 0; i < 10; i++) {\n-            set.add(Integer.toString(i));\n-        }\n-        return set;\n-    }\n-\n-    public void testOrdering() {\n-        Set set = setupSet();\n-        Iterator it = set.iterator();\n-\n-        for (int i = 0; i < 10; i++) {\n-            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n-        }\n-\n-        for (int i = 0; i < 10; i += 2) {\n-            assertTrue(\"Must be able to remove int\", set.remove(Integer.toString(i)));\n-        }\n-\n-        it = set.iterator();\n-        for (int i = 1; i < 10; i += 2) {\n-            assertEquals(\"Sequence is wrong after remove \", Integer.toString(i), it.next());\n-        }\n-\n-        for (int i = 0; i < 10; i++) {\n-            set.add(Integer.toString(i));\n-        }\n-\n-        assertEquals(\"Size of set is wrong!\", 10, set.size());\n-\n-        it = set.iterator();\n-        for (int i = 1; i < 10; i += 2) {\n-            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n-        }\n-        for (int i = 0; i < 10; i += 2) {\n-            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n-        }\n-    }\n-    \n+public class TestListOrderedSet<E> extends AbstractTestSet<E> {\n+\n     private static final Integer ZERO = new Integer(0);\n     private static final Integer ONE = new Integer(1);\n     private static final Integer TWO = new Integer(2);\n     private static final Integer THREE = new Integer(3);\n-    \n+\n+    public TestListOrderedSet(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestListOrderedSet.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestListOrderedSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public ListOrderedSet<E> makeObject() {\n+        return ListOrderedSet.decorate(new HashSet<E>());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected ListOrderedSet<E> setupSet() {\n+        ListOrderedSet<E> set = makeObject();\n+\n+        for (int i = 0; i < 10; i++) {\n+            set.add((E) Integer.toString(i));\n+        }\n+        return set;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testOrdering() {\n+        ListOrderedSet<E> set = setupSet();\n+        Iterator<E> it = set.iterator();\n+\n+        for (int i = 0; i < 10; i++) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+\n+        for (int i = 0; i < 10; i += 2) {\n+            assertTrue(\"Must be able to remove int\", set.remove(Integer.toString(i)));\n+        }\n+\n+        it = set.iterator();\n+        for (int i = 1; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong after remove \", Integer.toString(i), it.next());\n+        }\n+\n+        for (int i = 0; i < 10; i++) {\n+            set.add((E) Integer.toString(i));\n+        }\n+\n+        assertEquals(\"Size of set is wrong!\", 10, set.size());\n+\n+        it = set.iterator();\n+        for (int i = 1; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+        for (int i = 0; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testListAddRemove() {\n-        ListOrderedSet set = (ListOrderedSet) makeEmptySet();\n-        List view = set.asList();\n-        set.add(ZERO);\n-        set.add(ONE);\n-        set.add(TWO);\n-        \n+        ListOrderedSet<E> set = makeObject();\n+        List<E> view = set.asList();\n+        set.add((E) ZERO);\n+        set.add((E) ONE);\n+        set.add((E) TWO);\n+\n         assertEquals(3, set.size());\n         assertSame(ZERO, set.get(0));\n         assertSame(ONE, set.get(1));\n         assertSame(ZERO, view.get(0));\n         assertSame(ONE, view.get(1));\n         assertSame(TWO, view.get(2));\n-        \n+\n         assertEquals(0, set.indexOf(ZERO));\n         assertEquals(1, set.indexOf(ONE));\n         assertEquals(2, set.indexOf(TWO));\n-        \n+\n         set.remove(1);\n         assertEquals(2, set.size());\n         assertSame(ZERO, set.get(0));\n         assertEquals(2, view.size());\n         assertSame(ZERO, view.get(0));\n         assertSame(TWO, view.get(1));\n-    }        \n-    \n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testListAddIndexed() {\n-        ListOrderedSet set = (ListOrderedSet) makeEmptySet();\n-        set.add(ZERO);\n-        set.add(TWO);\n-        \n-        set.add(1, ONE);\n-        assertEquals(3, set.size());\n-        assertSame(ZERO, set.get(0));\n-        assertSame(ONE, set.get(1));\n-        assertSame(TWO, set.get(2));\n-        \n-        set.add(0, ONE);\n-        assertEquals(3, set.size());\n-        assertSame(ZERO, set.get(0));\n-        assertSame(ONE, set.get(1));\n-        assertSame(TWO, set.get(2));\n-        \n-        List list = new ArrayList();\n-        list.add(ZERO);\n-        list.add(TWO);\n-        \n+        ListOrderedSet<E> set = makeObject();\n+        set.add((E) ZERO);\n+        set.add((E) TWO);\n+\n+        set.add(1, (E) ONE);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+\n+        set.add(0, (E) ONE);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+\n+        List<E> list = new ArrayList<E>();\n+        list.add((E) ZERO);\n+        list.add((E) TWO);\n+\n         set.addAll(0, list);\n         assertEquals(3, set.size());\n         assertSame(ZERO, set.get(0));\n         assertSame(ONE, set.get(1));\n         assertSame(TWO, set.get(2));\n-        \n-        list.add(0, THREE); // list = [3,0,2]\n+\n+        list.add(0, (E) THREE); // list = [3,0,2]\n         set.remove(TWO);    //  set = [0,1]\n         set.addAll(1, list);\n         assertEquals(4, set.size());\n         assertSame(ONE, set.get(3));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testListAddReplacing() {\n-        ListOrderedSet set = (ListOrderedSet) makeEmptySet();\n+        ListOrderedSet<E> set = makeObject();\n         A a = new A();\n         B b = new B();\n-        set.add(a);\n+        set.add((E) a);\n         assertEquals(1, set.size());\n-        set.add(b);  // will match but not replace A as equal\n+        set.add((E) b);  // will match but not replace A as equal\n         assertEquals(1, set.size());\n-        assertSame(a, set.getSet().iterator().next());\n+        assertSame(a, set.decorated().iterator().next());\n         assertSame(a, set.iterator().next());\n         assertSame(a, set.get(0));\n         assertSame(a, set.asList().get(0));\n \n     public void testDecorator() {\n         try {\n-            ListOrderedSet.decorate((List) null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            ListOrderedSet.decorate((Set) null);\n+            ListOrderedSet.decorate((List<E>) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ListOrderedSet.decorate((Set<E>) null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            ListOrderedSet.decorate(new HashSet(), null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            ListOrderedSet.decorate(null, new ArrayList());\n+            ListOrderedSet.decorate(new HashSet<E>(), null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ListOrderedSet.decorate(null, new ArrayList<E>());\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }", "timestamp": 1252994267, "metainfo": ""}