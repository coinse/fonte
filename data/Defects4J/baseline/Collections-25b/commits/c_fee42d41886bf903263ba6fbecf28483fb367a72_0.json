{"sha": "fee42d41886bf903263ba6fbecf28483fb367a72", "log": "fixed bad line feeds   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestBag.java\n+++ b/src/test/org/apache/commons/collections/TestBag.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBag.java,v 1.1 2001/08/29 15:28:07 jstrachan Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/08/29 15:28:07 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-\n-package org.apache.commons.collections;\n-\n-import junit.framework.*;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.ConcurrentModificationException;\n-import java.util.Iterator;\n-import java.util.List;\n-\n-/**\n- * Tests base {@link Bag} methods and contracts.\n- * <p>\n- * To use, simply extend this class, and implement\n- * the {@link #makeBag} method.\n- * <p>\n- * If your {@link Bag} fails one of these tests by design,\n- * you may still use this base set of cases.  Simply override the\n- * test case (method) your {@link Bag} fails.\n- *\n- * @author Chuck Burdick\n- * @version $Id: TestBag.java,v 1.1 2001/08/29 15:28:07 jstrachan Exp $\n- */\n-public abstract class TestBag extends TestCollection {\n-    public TestBag(String testName) {\n-        super(testName);\n-    }\n-\n-    /**\n-     * Return a new, empty {@link Bag} to used for testing.\n-     */\n-    public abstract Bag makeBag();\n-\n-    public Collection makeCollection() {\n-        return makeBag();\n-    }\n-\n-    public void testBagAdd() {\n-        Bag bag = makeBag();\n-        bag.add(\"A\");\n-        assertTrue(\"Should contain 'A'\", bag.contains(\"A\"));\n-        assertEquals(\"Should have count of 1\",\n-                     1, bag.getCount(\"A\"));\n-        bag.add(\"A\");\n-        assertTrue(\"Should contain 'A'\", bag.contains(\"A\"));\n-        assertEquals(\"Should have count of 2\",\n-                     2, bag.getCount(\"A\"));\n-        bag.add(\"B\");\n-        assertTrue(bag.contains(\"A\"));\n-        assertTrue(bag.contains(\"B\"));\n-    }\n-\n-    public void testBagEqualsSelf() {\n-        Bag bag = makeBag();\n-        assertTrue(bag.equals(bag));\n-        bag.add(\"elt\");\n-        assertTrue(bag.equals(bag));\n-        bag.add(\"elt\"); // again\n-        assertTrue(bag.equals(bag));\n-        bag.add(\"elt2\");\n-        assertTrue(bag.equals(bag));\n-    }\n-\n-   public void testRemove() {\n-      Bag bag = makeBag();\n-      bag.add(\"A\");\n-      assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n-      bag.remove(\"A\");\n-      assertEquals(\"Should have count of 0\", 0, bag.getCount(\"A\"));\n-      bag.add(\"A\");\n-      bag.add(\"A\");\n-      bag.add(\"A\");\n-      bag.add(\"A\");\n-      assertEquals(\"Should have count of 4\", 4, bag.getCount(\"A\"));\n-      bag.remove(\"A\", 0);\n-      assertEquals(\"Should have count of 4\", 4, bag.getCount(\"A\"));\n-      bag.remove(\"A\", 2);\n-      assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n-      bag.remove(\"A\");\n-      assertEquals(\"Should have count of 0\", 0, bag.getCount(\"A\"));\n-   }\n-\n-   public void testRemoveAll() {\n-      Bag bag = makeBag();\n-      bag.add(\"A\", 2);\n-      assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n-      bag.add(\"B\");\n-      bag.add(\"C\");\n-      assertEquals(\"Should have count of 4\", 4, bag.size());\n-      List delete = new ArrayList();\n-      delete.add(\"A\");\n-      delete.add(\"B\");\n-      bag.removeAll(delete);\n-      assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n-      assertEquals(\"Should have count of 0\", 0, bag.getCount(\"B\"));\n-      assertEquals(\"Should have count of 1\", 1, bag.getCount(\"C\"));\n-      assertEquals(\"Should have count of 2\", 2, bag.size());\n-   }\n-\n-   public void testContains() {\n-      Bag bag = makeBag();\n-      bag.add(\"A\");\n-      bag.add(\"A\");\n-      bag.add(\"A\");\n-      bag.add(\"B\");\n-      bag.add(\"B\");\n-      List compare = new ArrayList();\n-      compare.add(\"A\");\n-      compare.add(\"B\");\n-      assertEquals(\"Other list has 1 'B'\", 1,\n-                 (new HashBag(compare)).getCount(\"B\"));\n-      assertTrue(\"Bag has at least 1 'B'\", 1 <= bag.getCount(\"B\"));\n-      assertTrue(\"Bag contains items in the list\", bag.containsAll(compare));\n-      compare.add(\"A\");\n-      compare.add(\"B\");\n-      assertEquals(\"Other list has 2 'B'\", 2,\n-                 (new HashBag(compare)).getCount(\"B\"));\n-      assertTrue(\"Bag has at least 2 'B'\", 2 <= bag.getCount(\"B\"));\n-      assertTrue(\"Bag contains items in the list\", bag.containsAll(compare));\n-      compare.add(\"A\");\n-      compare.add(\"B\");\n-      assertEquals(\"Other list has 3 'B'\", 3,\n-                 (new HashBag(compare)).getCount(\"B\"));\n-      assertTrue(\"Bag does not have 3 'B'\", 3 > bag.getCount(\"B\"));\n-      assertTrue(\"Bag contains items in the list\", !bag.containsAll(compare));\n-   }\n-\n-   public void testSize() {\n-      Bag bag = makeBag();\n-      bag.add(\"A\");\n-      bag.add(\"A\");\n-      bag.add(\"A\");\n-      bag.add(\"B\");\n-      bag.add(\"B\");\n-      assertEquals(\"Should have 5 total items\", 5, bag.size());\n-      bag.remove(\"A\", 2);\n-      assertEquals(\"Should have 1 'A'\", 1, bag.getCount(\"A\"));\n-      assertEquals(\"Should have 3 total items\", 3, bag.size());\n-      bag.remove(\"B\");\n-      assertEquals(\"Should have 1 total item\", 1, bag.size());\n-   }\n-\n-   public void testRetainAll() {\n-      Bag bag = makeBag();\n-      bag.add(\"A\");\n-      bag.add(\"A\");\n-      bag.add(\"A\");\n-      bag.add(\"B\");\n-      bag.add(\"B\");\n-      bag.add(\"C\");\n-      List retains = new ArrayList();\n-      retains.add(\"B\");\n-      retains.add(\"C\");\n-      bag.retainAll(retains);\n-      assertEquals(\"Should have 2 total items\", 2, bag.size());\n-   }\n-\n-   public void testIterator() {\n-      Bag bag = makeBag();\n-      bag.add(\"A\");\n-      bag.add(\"A\");\n-      bag.add(\"B\");\n-      assertEquals(\"Bag should have 3 items\", 3, bag.size());\n-      Iterator i = bag.iterator();\n-      assertEquals(\"First should be 'A'\", \"A\", i.next());\n-      assertEquals(\"Second should be 'A'\", \"A\", i.next());\n-      i.remove();\n-      assertEquals(\"Third should be 'B'\", \"B\", i.next());\n-      assertTrue(\"Should have no more\", !i.hasNext());\n-      assertEquals(\"Bag should have 2 items\", 2, bag.size());\n-      assertEquals(\"Bag should have 1 'A'\", 1, bag.getCount(\"A\"));\n-   }\n-\n-   public void testIteratorFail() {\n-      Bag bag = makeBag();\n-      bag.add(\"A\");\n-      bag.add(\"A\");\n-      bag.add(\"B\");\n-      Iterator i = bag.iterator();\n-      assertEquals(\"First should be 'A'\", \"A\", i.next());\n-      bag.remove(\"A\");\n-      try {\n-         i.next();\n-         fail(\"Should throw ConcurrentModificationException\");\n-      } catch (ConcurrentModificationException e) {\n-         // expected\n-      }\n-   }\n-}\n-\n-\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBag.java,v 1.2 2002/03/14 18:00:51 morgand Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/03/14 18:00:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import junit.framework.*;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * Tests base {@link Bag} methods and contracts.\n+ * <p>\n+ * To use, simply extend this class, and implement\n+ * the {@link #makeBag} method.\n+ * <p>\n+ * If your {@link Bag} fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your {@link Bag} fails.\n+ *\n+ * @author Chuck Burdick\n+ * @version $Id: TestBag.java,v 1.2 2002/03/14 18:00:51 morgand Exp $\n+ */\n+public abstract class TestBag extends TestCollection {\n+    public TestBag(String testName) {\n+        super(testName);\n+    }\n+\n+    /**\n+     * Return a new, empty {@link Bag} to used for testing.\n+     */\n+    public abstract Bag makeBag();\n+\n+    public Collection makeCollection() {\n+        return makeBag();\n+    }\n+\n+    public void testBagAdd() {\n+        Bag bag = makeBag();\n+        bag.add(\"A\");\n+        assertTrue(\"Should contain 'A'\", bag.contains(\"A\"));\n+        assertEquals(\"Should have count of 1\",\n+                     1, bag.getCount(\"A\"));\n+        bag.add(\"A\");\n+        assertTrue(\"Should contain 'A'\", bag.contains(\"A\"));\n+        assertEquals(\"Should have count of 2\",\n+                     2, bag.getCount(\"A\"));\n+        bag.add(\"B\");\n+        assertTrue(bag.contains(\"A\"));\n+        assertTrue(bag.contains(\"B\"));\n+    }\n+\n+    public void testBagEqualsSelf() {\n+        Bag bag = makeBag();\n+        assertTrue(bag.equals(bag));\n+        bag.add(\"elt\");\n+        assertTrue(bag.equals(bag));\n+        bag.add(\"elt\"); // again\n+        assertTrue(bag.equals(bag));\n+        bag.add(\"elt2\");\n+        assertTrue(bag.equals(bag));\n+    }\n+\n+   public void testRemove() {\n+      Bag bag = makeBag();\n+      bag.add(\"A\");\n+      assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n+      bag.remove(\"A\");\n+      assertEquals(\"Should have count of 0\", 0, bag.getCount(\"A\"));\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      assertEquals(\"Should have count of 4\", 4, bag.getCount(\"A\"));\n+      bag.remove(\"A\", 0);\n+      assertEquals(\"Should have count of 4\", 4, bag.getCount(\"A\"));\n+      bag.remove(\"A\", 2);\n+      assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n+      bag.remove(\"A\");\n+      assertEquals(\"Should have count of 0\", 0, bag.getCount(\"A\"));\n+   }\n+\n+   public void testRemoveAll() {\n+      Bag bag = makeBag();\n+      bag.add(\"A\", 2);\n+      assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n+      bag.add(\"B\");\n+      bag.add(\"C\");\n+      assertEquals(\"Should have count of 4\", 4, bag.size());\n+      List delete = new ArrayList();\n+      delete.add(\"A\");\n+      delete.add(\"B\");\n+      bag.removeAll(delete);\n+      assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n+      assertEquals(\"Should have count of 0\", 0, bag.getCount(\"B\"));\n+      assertEquals(\"Should have count of 1\", 1, bag.getCount(\"C\"));\n+      assertEquals(\"Should have count of 2\", 2, bag.size());\n+   }\n+\n+   public void testContains() {\n+      Bag bag = makeBag();\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"B\");\n+      bag.add(\"B\");\n+      List compare = new ArrayList();\n+      compare.add(\"A\");\n+      compare.add(\"B\");\n+      assertEquals(\"Other list has 1 'B'\", 1,\n+                 (new HashBag(compare)).getCount(\"B\"));\n+      assertTrue(\"Bag has at least 1 'B'\", 1 <= bag.getCount(\"B\"));\n+      assertTrue(\"Bag contains items in the list\", bag.containsAll(compare));\n+      compare.add(\"A\");\n+      compare.add(\"B\");\n+      assertEquals(\"Other list has 2 'B'\", 2,\n+                 (new HashBag(compare)).getCount(\"B\"));\n+      assertTrue(\"Bag has at least 2 'B'\", 2 <= bag.getCount(\"B\"));\n+      assertTrue(\"Bag contains items in the list\", bag.containsAll(compare));\n+      compare.add(\"A\");\n+      compare.add(\"B\");\n+      assertEquals(\"Other list has 3 'B'\", 3,\n+                 (new HashBag(compare)).getCount(\"B\"));\n+      assertTrue(\"Bag does not have 3 'B'\", 3 > bag.getCount(\"B\"));\n+      assertTrue(\"Bag contains items in the list\", !bag.containsAll(compare));\n+   }\n+\n+   public void testSize() {\n+      Bag bag = makeBag();\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"B\");\n+      bag.add(\"B\");\n+      assertEquals(\"Should have 5 total items\", 5, bag.size());\n+      bag.remove(\"A\", 2);\n+      assertEquals(\"Should have 1 'A'\", 1, bag.getCount(\"A\"));\n+      assertEquals(\"Should have 3 total items\", 3, bag.size());\n+      bag.remove(\"B\");\n+      assertEquals(\"Should have 1 total item\", 1, bag.size());\n+   }\n+\n+   public void testRetainAll() {\n+      Bag bag = makeBag();\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"B\");\n+      bag.add(\"B\");\n+      bag.add(\"C\");\n+      List retains = new ArrayList();\n+      retains.add(\"B\");\n+      retains.add(\"C\");\n+      bag.retainAll(retains);\n+      assertEquals(\"Should have 2 total items\", 2, bag.size());\n+   }\n+\n+   public void testIterator() {\n+      Bag bag = makeBag();\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"B\");\n+      assertEquals(\"Bag should have 3 items\", 3, bag.size());\n+      Iterator i = bag.iterator();\n+      assertEquals(\"First should be 'A'\", \"A\", i.next());\n+      assertEquals(\"Second should be 'A'\", \"A\", i.next());\n+      i.remove();\n+      assertEquals(\"Third should be 'B'\", \"B\", i.next());\n+      assertTrue(\"Should have no more\", !i.hasNext());\n+      assertEquals(\"Bag should have 2 items\", 2, bag.size());\n+      assertEquals(\"Bag should have 1 'A'\", 1, bag.getCount(\"A\"));\n+   }\n+\n+   public void testIteratorFail() {\n+      Bag bag = makeBag();\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"B\");\n+      Iterator i = bag.iterator();\n+      assertEquals(\"First should be 'A'\", \"A\", i.next());\n+      bag.remove(\"A\");\n+      try {\n+         i.next();\n+         fail(\"Should throw ConcurrentModificationException\");\n+      } catch (ConcurrentModificationException e) {\n+         // expected\n+      }\n+   }\n+}\n+\n+", "timestamp": 1016128851, "metainfo": ""}