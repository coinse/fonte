{"sha": "34b43799deb48882596bf5d2e91a8425b71d74fb", "log": "Fix some warnings wrt deprecated junit methods.  ", "commit": "\n--- a/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n  */\n package org.apache.commons.collections;\n \n-import static junit.framework.Assert.assertFalse;\n import static org.apache.commons.collections.functors.EqualPredicate.equalPredicate;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertSame;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.fail;\n \n import java.util.*;\n--- a/src/test/java/org/apache/commons/collections/EnumerationUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/EnumerationUtilsTest.java\n import java.util.List;\n import java.util.StringTokenizer;\n \n-import junit.framework.Assert;\n import junit.framework.Test;\n \n /**\n         expectedList2.add(\"a\");\n         expectedList2.add(\"test\");\n         final List<String> actualList = EnumerationUtils.toList(new StringTokenizer(TO_LIST_FIXTURE));\n-        Assert.assertEquals(expectedList1, expectedList2);\n-        Assert.assertEquals(expectedList1, actualList);\n-        Assert.assertEquals(expectedList2, actualList);\n+        assertEquals(expectedList1, expectedList2);\n+        assertEquals(expectedList1, actualList);\n+        assertEquals(expectedList2, actualList);\n     }\n \n     public void testToListWithHashtable() {\n         expected.put(\"three\", new Integer(3));\n         // validate elements.\n         final List<Integer> actualEltList = EnumerationUtils.toList(expected.elements());\n-        Assert.assertEquals(expected.size(), actualEltList.size());\n-        Assert.assertTrue(actualEltList.contains(new Integer(1)));\n-        Assert.assertTrue(actualEltList.contains(new Integer(2)));\n-        Assert.assertTrue(actualEltList.contains(new Integer(3)));\n+        assertEquals(expected.size(), actualEltList.size());\n+        assertTrue(actualEltList.contains(new Integer(1)));\n+        assertTrue(actualEltList.contains(new Integer(2)));\n+        assertTrue(actualEltList.contains(new Integer(3)));\n         final List<Integer> expectedEltList = new ArrayList<Integer>();\n         expectedEltList.add(new Integer(1));\n         expectedEltList.add(new Integer(2));\n         expectedEltList.add(new Integer(3));\n-        Assert.assertTrue(actualEltList.containsAll(expectedEltList));\n+        assertTrue(actualEltList.containsAll(expectedEltList));\n \n         // validate keys.\n         final List<String> actualKeyList = EnumerationUtils.toList(expected.keys());\n-        Assert.assertEquals(expected.size(), actualEltList.size());\n-        Assert.assertTrue(actualKeyList.contains(\"one\"));\n-        Assert.assertTrue(actualKeyList.contains(\"two\"));\n-        Assert.assertTrue(actualKeyList.contains(\"three\"));\n+        assertEquals(expected.size(), actualEltList.size());\n+        assertTrue(actualKeyList.contains(\"one\"));\n+        assertTrue(actualKeyList.contains(\"two\"));\n+        assertTrue(actualKeyList.contains(\"three\"));\n         final List<String> expectedKeyList = new ArrayList<String>();\n         expectedKeyList.add(\"one\");\n         expectedKeyList.add(\"two\");\n         expectedKeyList.add(\"three\");\n-        Assert.assertTrue(actualKeyList.containsAll(expectedKeyList));\n+        assertTrue(actualKeyList.containsAll(expectedKeyList));\n     }\n \n     public static Test suite() {\n--- a/src/test/java/org/apache/commons/collections/IteratorUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/IteratorUtilsTest.java\n         assertTrue(expected > 0);\n \n         // single use iterator\n-        for(final Integer actual : iterable) {\n+        for(@SuppressWarnings(\"unused\") final Integer actual : iterable) {\n             fail(\"should not be able to iterate twice\");\n         }\n     }\n         assertTrue(expectedNodeIndex > 0);\n \n         // single use iterator\n-        for (final Node actual : IteratorUtils.asIterable(iterator)) {\n+        for (@SuppressWarnings(\"unused\") final Node actual : IteratorUtils.asIterable(iterator)) {\n             fail(\"should not be able to iterate twice\");\n         }\n     }\n         assertTrue(expectedNodeIndex > 0);\n \n         // single use iterator\n-        for (final Node actual : IteratorUtils.asIterable(iterator)) {\n+        for (@SuppressWarnings(\"unused\") final Node actual : IteratorUtils.asIterable(iterator)) {\n             fail(\"should not be able to iterate twice\");\n         }\n     }\n--- a/src/test/java/org/apache/commons/collections/ListUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/ListUtilsTest.java\n import java.util.HashSet;\n import java.util.List;\n \n-import junit.framework.Assert;\n import junit.framework.Test;\n \n import org.apache.commons.collections.functors.EqualPredicate;\n         \n         try {\n             ListUtils.partition(null, 3);\n-            Assert.fail(\"failed to check for null argument\");\n+            fail(\"failed to check for null argument\");\n         } catch (final IllegalArgumentException e) {}\n         \n         try {\n             ListUtils.partition(strings, 0);\n-            Assert.fail(\"failed to check for size argument\");\n+            fail(\"failed to check for size argument\");\n         } catch (final IllegalArgumentException e) {}\n         \n         try {\n             ListUtils.partition(strings, -10);\n-            Assert.fail(\"failed to check for size argument\");\n+            fail(\"failed to check for size argument\");\n         } catch (final IllegalArgumentException e) {}\n         \n     }\n         final List<Integer> output1 = ListUtils.select(list, EQUALS_TWO);\n         final List<Number> output2 = ListUtils.<Number>select(list, EQUALS_TWO);\n         final HashSet<Number> output3 = CollectionUtils.select(list, EQUALS_TWO, new HashSet<Number>());\n-        Assert.assertTrue(CollectionUtils.isEqualCollection(output1, output3));\n-        Assert.assertEquals(4, list.size());\n-        Assert.assertEquals(1, output1.size());\n-        Assert.assertEquals(2, output2.iterator().next());\n+        assertTrue(CollectionUtils.isEqualCollection(output1, output3));\n+        assertEquals(4, list.size());\n+        assertEquals(1, output1.size());\n+        assertEquals(2, output2.iterator().next());\n     }\n \n     public void testSelectRejected() {\n         final List<Long> output1 = ListUtils.selectRejected(list, EQUALS_TWO);\n         final List<? extends Number> output2 = ListUtils.selectRejected(list, EQUALS_TWO);\n         final HashSet<Number> output3 = CollectionUtils.selectRejected(list, EQUALS_TWO, new HashSet<Number>());\n-        Assert.assertTrue(CollectionUtils.isEqualCollection(output1, output2));\n-        Assert.assertTrue(CollectionUtils.isEqualCollection(output1, output3));\n-        Assert.assertEquals(4, list.size());\n-        Assert.assertEquals(3, output1.size());\n-        Assert.assertTrue(output1.contains(1L));\n-        Assert.assertTrue(output1.contains(3L));\n-        Assert.assertTrue(output1.contains(4L));\n+        assertTrue(CollectionUtils.isEqualCollection(output1, output2));\n+        assertTrue(CollectionUtils.isEqualCollection(output1, output3));\n+        assertEquals(4, list.size());\n+        assertEquals(3, output1.size());\n+        assertTrue(output1.contains(1L));\n+        assertTrue(output1.contains(3L));\n+        assertTrue(output1.contains(4L));\n     }\n }", "timestamp": 1360259177, "metainfo": ""}