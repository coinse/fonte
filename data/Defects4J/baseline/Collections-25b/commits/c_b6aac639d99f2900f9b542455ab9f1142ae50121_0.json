{"sha": "b6aac639d99f2900f9b542455ab9f1142ae50121", "log": "Fixed javadoc (closing paragraph elements).  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/Buffer.java\n+++ b/src/main/java/org/apache/commons/collections/Buffer.java\n  * <p>\n  * The removal order can be based on insertion order (eg, a FIFO queue or a\n  * LIFO stack), on access order (eg, an LRU cache), on some arbitrary comparator\n- * (eg, a priority queue) or on any other well-defined ordering.\n+ * (eg, a priority queue) or on any other well-defined ordering.</p>\n  * <p>\n  * Note that the removal order is not necessarily the same as the iteration\n  * order.  A <code>Buffer</code> implementation may have equivalent removal\n- * and iteration orders, but this is not required.\n+ * and iteration orders, but this is not required.</p>\n  * <p>\n  * This interface does not specify any behavior for \n  * {@link Object#equals(Object)} and {@link Object#hashCode} methods.  It\n  * is therefore possible for a <code>Buffer</code> implementation to also\n  * also implement {@link java.util.List}, {@link java.util.Set} or \n- * {@link Bag}.\n+ * {@link Bag}.</p>\n  *\n  * @param <E> the type of the elements in the buffer\n  * @since Commons Collections 2.1\n--- a/src/main/java/org/apache/commons/collections/Closure.java\n+++ b/src/main/java/org/apache/commons/collections/Closure.java\n  * Defines a functor interface implemented by classes that do something.\n  * <p>\n  * A <code>Closure</code> represents a block of code which is executed from\n- * inside some block, function or iteration. It operates an input object.\n+ * inside some block, function or iteration. It operates an input object.</p>\n  * <p>\n  * Standard implementations of common closures are provided by\n- * {@link ClosureUtils}. These include method invokation and for/while loops.\n+ * {@link ClosureUtils}. These include method invocation and for/while loops.</p>\n  *\n  * @param <T> the type that the closure acts on\n  * @since Commons Collections 1.0\n--- a/src/main/java/org/apache/commons/collections/Factory.java\n+++ b/src/main/java/org/apache/commons/collections/Factory.java\n  * Defines a functor interface implemented by classes that create objects.\n  * <p>\n  * A <code>Factory</code> creates an object without using an input parameter.\n- * If an input parameter is required, then {@link Transformer} is more appropriate.\n+ * If an input parameter is required, then {@link Transformer} is more appropriate.</p>\n  * <p>\n  * Standard implementations of common factories are provided by\n  * {@link FactoryUtils}. These include factories that return a constant,\n- * a copy of a prototype or a new instance.\n+ * a copy of a prototype or a new instance.</p>\n  *\n  * @param <T> the type that the factory creates\n  *\n--- a/src/main/java/org/apache/commons/collections/MultiMap.java\n+++ b/src/main/java/org/apache/commons/collections/MultiMap.java\n  * <p>\n  * A <code>MultiMap</code> is a Map with slightly different semantics.\n  * Putting a value into the map will add the value to a Collection at that key.\n- * Getting a value will return a Collection, holding all the values put to that key.\n+ * Getting a value will return a Collection, holding all the values put to that key.</p>\n  * <p>\n  * For example:\n  * <pre>\n  * mhm.put(key, \"A\");\n  * mhm.put(key, \"B\");\n  * mhm.put(key, \"C\");\n- * Collection coll = (Collection) mhm.get(key);</pre>\n+ * Collection coll = (Collection) mhm.get(key);</pre></p>\n  * <p>\n- * <code>coll</code> will be a collection containing \"A\", \"B\", \"C\".\n+ * <code>coll</code> will be a collection containing \"A\", \"B\", \"C\".</p>\n  * <p>\n  * NOTE: Additional methods were added to this interface in Commons Collections 3.1.\n  * These were added solely for documentation purposes and do not change the interface\n- * as they were defined in the superinterface <code>Map</code> anyway.\n+ * as they were defined in the superinterface <code>Map</code> anyway.</p>\n  *\n  * @since Commons Collections 2.0\n  * @version $Revision$", "timestamp": 1340468979, "metainfo": ""}