{"sha": "015f5a8724928f3086354e37d9887ec1edc2ce80", "log": "Applying Dave Meikle's patch to COLLECTIONS-194 - adding a populateMap method to MapUtils  ", "commit": "\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n import java.util.ResourceBundle;\n import java.util.SortedMap;\n import java.util.TreeMap;\n+import java.util.Collection;\n \n import org.apache.commons.collections.map.FixedSizeMap;\n import org.apache.commons.collections.map.FixedSizeSortedMap;\n         return LazySortedMap.decorate(map, transformerFactory);\n     }\n \n+    /**\n+     * <p>\n+     * Populates a Map using the supplied <code>Transformer</code> to transform the collection\n+     * values into keys, using the unaltered collection value as the value in the <code>Map</code>.\n+     * </p>\n+     * @param map the <code>Map</code> to populate.\n+     * @param collection the <code>Collection</code> to use as input values for the map.\n+     * @param keyTransformer the <code>Transformer</code> used to transform the collection value into a key value\n+     * @throws NullPointerException if the map, collection or transformer are null\n+     */\n+    public static void populateMap(Map map, Collection collection, Transformer keyTransformer) {\n+        populateMap(map, collection, keyTransformer, TransformerUtils.nopTransformer());\n+    }\n+\n+    /**\n+     * <p>\n+     * Populates a Map using the supplied <code>Transformer</code>s to transform the collection\n+     * values into keys and values.\n+     * </p>\n+     * @param map the <code>Map</code> to populate.\n+     * @param collection the <code>Collection</code> to use as input values for the map.\n+     * @param keyTransformer the <code>Transformer</code> used to transform the collection value into a key value\n+     * @param valueTransformer the <code>Transformer</code> used to transform the collection value into a value\n+     * @throws NullPointerException if the map, collection or transformers are null\n+     */\n+    public static void populateMap(Map map, Collection collection, Transformer keyTransformer, Transformer valueTransformer) {\n+        Iterator iter = collection.iterator();\n+        while (iter.hasNext()) {\n+            Object temp = iter.next();\n+            map.put(keyTransformer.transform(temp), valueTransformer.transform(temp));\n+        }\n+    }\n }\n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n import java.util.ResourceBundle;\n import java.util.Set;\n import java.util.TreeMap;\n+import java.util.List;\n+import java.util.ArrayList;\n \n import junit.framework.Test;\n \n import org.apache.commons.collections.map.LazyMap;\n import org.apache.commons.collections.map.PredicatedMap;\n import org.apache.commons.collections.map.TestPredicatedMap;\n+import org.apache.commons.collections.collection.TestTransformedCollection;\n \n /**\n  * Tests for MapUtils.\n         assertEquals(false, MapUtils.isNotEmpty(map));\n     }\n \n+    public void testPopulateMap() {\n+        // Setup Test Data\n+        List list = new ArrayList();\n+        list.add(\"1\");\n+        list.add(\"3\");\n+        list.add(\"5\");\n+        list.add(\"7\");\n+        list.add(\"2\");\n+        list.add(\"4\");\n+        list.add(\"6\");\n+\n+        // Now test key transform population\n+        Map map = new HashMap();\n+        MapUtils.populateMap(map, list, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(list.size(), map.size());\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            assertEquals(true, map.containsKey(new Integer((String) list.get(i))));\n+            assertEquals(false, map.containsKey(list.get(i)));\n+            assertEquals(true, map.containsValue(list.get(i)));\n+            assertEquals(list.get(i), map.get(new Integer((String) list.get(i))));\n+        }\n+\n+        // Now test both Key-Value transform population\n+        map = new HashMap();\n+        MapUtils.populateMap(map, list, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+\n+        assertEquals(list.size(), map.size());\n+        for (int i = 0; i < list.size(); i++) {\n+            assertEquals(true, map.containsKey(new Integer((String) list.get(i))));\n+            assertEquals(false, map.containsKey(list.get(i)));\n+            assertEquals(true, map.containsValue(new Integer((String) list.get(i))));\n+            assertEquals(new Integer((String) list.get(i)), map.get(new Integer((String) list.get(i))));\n+        }\n+    }\n }", "timestamp": 1211002180, "metainfo": ""}