{"sha": "403f770bf12a98dabf11842d36e42008e39121b2", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471202 | scolebourne | 2006-11-04 06:21:44 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getCollection() - use covariant decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/set/TestPredicatedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestPredicatedSet.java\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.Predicate;\n-import org.apache.commons.collections.PredicateUtils;\n+import org.apache.commons.collections.functors.TruePredicate;\n \n /**\n  * Extension of {@link AbstractTestSet} for exercising the \n  *\n  * @author Phil Steitz\n  */\n-public class TestPredicatedSet extends AbstractTestSet{\n-    \n+public class TestPredicatedSet<E> extends AbstractTestSet<E> {\n+\n     public TestPredicatedSet(String testName) {\n         super(testName);\n     }\n-    \n+\n     public static Test suite() {\n         return new TestSuite(TestPredicatedSet.class);\n     }\n-    \n+\n     public static void main(String args[]) {\n         String[] testCaseName = { TestPredicatedSet.class.getName()};\n         junit.textui.TestRunner.main(testCaseName);\n     }\n-    \n+\n  //-------------------------------------------------------------------\n-    \n-    protected Predicate truePredicate = PredicateUtils.truePredicate();\n-    \n-    protected Set decorateSet(Set set, Predicate predicate) {\n-        return PredicatedSet.decorate(set, predicate);\n+\n+    protected Predicate<E> truePredicate = TruePredicate.<E>truePredicate();\n+\n+    protected PredicatedSet<E> decorateSet(Set<E> set, Predicate<? super E> predicate) {\n+        return (PredicatedSet<E>) PredicatedSet.decorate(set, predicate);\n     }\n-    \n-    public Set makeEmptySet() {\n-        return decorateSet(new HashSet(), truePredicate);\n+\n+    public PredicatedSet<E> makeObject() {\n+        return decorateSet(new HashSet<E>(), truePredicate);\n     }\n-    \n-    public Object[] getFullElements() {\n-        return new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public E[] getFullElements() {\n+        return (E[]) new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n     }\n-    \n-//--------------------------------------------------------------------   \n-    \n-    protected Predicate testPredicate =  \n-        new Predicate() {\n-            public boolean evaluate(Object o) {\n+\n+//--------------------------------------------------------------------\n+\n+    protected Predicate<E> testPredicate =\n+        new Predicate<E>() {\n+            public boolean evaluate(E o) {\n                 return o instanceof String;\n             }\n-        };      \n-    \n-    protected Set makeTestSet() {\n-        return decorateSet(new HashSet(), testPredicate);\n+        };\n+\n+    protected PredicatedSet<E> makeTestSet() {\n+        return decorateSet(new HashSet<E>(), testPredicate);\n     }\n-    \n+\n     public void testGetSet() {\n-         Set set = makeTestSet();\n-        assertTrue(\"returned set should not be null\",\n-            ((PredicatedSet) set).getSet() != null);\n+        PredicatedSet<E> set = makeTestSet();\n+        assertTrue(\"returned set should not be null\", set.decorated() != null);\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testIllegalAdd() {\n-        Set set = makeTestSet();\n+        Set<E> set = makeTestSet();\n         Integer i = new Integer(3);\n         try {\n-            set.add(i);\n+            set.add((E) i);\n             fail(\"Integer should fail string predicate.\");\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n-        assertTrue(\"Collection shouldn't contain illegal element\", \n-         !set.contains(i));   \n+        assertTrue(\"Collection shouldn't contain illegal element\",\n+         !set.contains(i));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testIllegalAddAll() {\n-        Set set = makeTestSet();\n-        Set elements = new HashSet();\n-        elements.add(\"one\");\n-        elements.add(\"two\");\n-        elements.add(new Integer(3));\n-        elements.add(\"four\");\n+        Set<E> set = makeTestSet();\n+        Set<E> elements = new HashSet<E>();\n+        elements.add((E) \"one\");\n+        elements.add((E) \"two\");\n+        elements.add((E) new Integer(3));\n+        elements.add((E) \"four\");\n         try {\n             set.addAll(elements);\n             fail(\"Integer should fail string predicate.\");\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n-        assertTrue(\"Set shouldn't contain illegal element\", \n-         !set.contains(\"one\"));   \n-        assertTrue(\"Set shouldn't contain illegal element\", \n-         !set.contains(\"two\"));   \n-        assertTrue(\"Set shouldn't contain illegal element\", \n-         !set.contains(new Integer(3)));   \n-        assertTrue(\"Set shouldn't contain illegal element\", \n-         !set.contains(\"four\"));   \n+        assertTrue(\"Set shouldn't contain illegal element\",\n+         !set.contains(\"one\"));\n+        assertTrue(\"Set shouldn't contain illegal element\",\n+         !set.contains(\"two\"));\n+        assertTrue(\"Set shouldn't contain illegal element\",\n+         !set.contains(new Integer(3)));\n+        assertTrue(\"Set shouldn't contain illegal element\",\n+         !set.contains(\"four\"));\n     }\n \n     public String getCompatibilityVersion() {\n //        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/PredicatedSet.fullCollection.version3.1.obj\");\n //    }\n \n-}\n+}", "timestamp": 1252994269, "metainfo": ""}