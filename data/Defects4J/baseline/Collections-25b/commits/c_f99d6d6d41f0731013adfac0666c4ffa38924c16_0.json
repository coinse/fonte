{"sha": "f99d6d6d41f0731013adfac0666c4ffa38924c16", "log": "Javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/collections/functors/ConstantFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/ConstantFactory.java\n  * use the prototype factory.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:47:38 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Always return constant\n+     * Always return constant.\n+     * \n+     * @return the stored constant value\n      */\n     public Object create() {\n         return iConstant;\n \n     /**\n      * Gets the constant.\n+     * \n      * @return the constant\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/ExceptionClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionClosure.java\n  * Closure implementation that always throws an exception.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/03/31 23:13:04 $\n+ * @version $Revision: 1.7 $ $Date: 2004/05/16 11:47:38 $\n  *\n  * @author Stephen Colebourne\n  */\n \n     /**\n      * Always throw an exception.\n+     * \n+     * @param input  the input object\n+     * @throws FunctorException always\n      */\n-    public void execute(Object object) {\n+    public void execute(Object input) {\n         throw new FunctorException(\"ExceptionClosure invoked\");\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/collections/functors/ExceptionFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionFactory.java\n  * Factory implementation that always throws an exception.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/03/31 23:13:04 $\n+ * @version $Revision: 1.7 $ $Date: 2004/05/16 11:47:38 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Always throw an exception.\n+     * Always throws an exception.\n+     * \n+     * @return never\n+     * @throws FunctorException always\n      */\n     public Object create() {\n         throw new FunctorException(\"ExceptionFactory invoked\");\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/collections/functors/ForClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/ForClosure.java\n  * Closure implementation that calls another closure n times, like a for loop.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:47:38 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Execute the closure count times.\n+     * Executes the closure <code>count</code> times.\n+     * \n+     * @param input  the input object\n      */\n     public void execute(Object input) {\n         for (int i = 0; i < iCount; i++) {\n \n     /**\n      * Gets the closure.\n+     * \n      * @return the closure\n      * @since Commons Collections 3.1\n      */\n \n     /**\n      * Gets the count.\n+     * \n      * @return the count\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/FunctorUtils.java\n+++ b/src/java/org/apache/commons/collections/functors/FunctorUtils.java\n  * Internal utilities for functors.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.7 $ $Date: 2004/05/16 11:47:38 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Restricted constructor.\n      */\n     private FunctorUtils() {\n+        super();\n     }\n     \n     /**\n      * Copy method\n      * \n      * @param transformers  the transformers to copy\n+     * @return a clone of the transformers\n      */\n     static Transformer[] copy(Transformer[] transformers) {\n         if (transformers == null) {\n--- a/src/java/org/apache/commons/collections/functors/IfClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/IfClosure.java\n  * based on a predicate.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/16 11:47:38 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Execute the correct closure.\n+     * Executes the true or false closure accoring to the result of the predicate.\n+     * \n+     * @param input  the input object\n      */\n     public void execute(Object input) {\n         if (iPredicate.evaluate(input) == true) {\n \n     /**\n      * Gets the predicate.\n+     * \n      * @return the predicate\n      * @since Commons Collections 3.1\n      */\n \n     /**\n      * Gets the closure called when true.\n+     * \n      * @return the closure\n      * @since Commons Collections 3.1\n      */\n \n     /**\n      * Gets the closure called when false.\n+     * \n      * @return the closure\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/InstantiateFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/InstantiateFactory.java\n  * Factory implementation that creates a new object instance by reflection.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/16 11:47:38 $\n  *\n  * @author Stephen Colebourne\n  */\n      * @param classToInstantiate  the class to instantiate, not null\n      * @param paramTypes  the constructor parameter types\n      * @param args  the constructor arguments\n+     * @return a new instantiate factory\n      */\n     public static Factory getInstance(Class classToInstantiate, Class[] paramTypes, Object[] args) {\n         if (classToInstantiate == null) {\n     }\n \n     /**\n-     * Create the object using a constructor\n+     * Creates an object using the stored constructor.\n+     * \n+     * @return the new object\n      */\n     public Object create() {\n         // needed for post-serialization\n--- a/src/java/org/apache/commons/collections/functors/NOPClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/NOPClosure.java\n  * Closure implementation that does nothing.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/03/31 23:13:04 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/16 11:47:38 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Do nothing\n+     * Do nothing.\n+     * \n+     * @param input  the input object\n      */\n     public void execute(Object input) {\n         // do nothing\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/collections/functors/NotNullPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NotNullPredicate.java\n  * Predicate implementation that returns true if the input is not null.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/03/31 23:13:04 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/16 11:47:38 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return true if the object equals null.\n+     * Evaluates the predicate returning true if the object does not equal null.\n+     * \n+     * @param object  the object to evaluate\n+     * @return true if not null\n      */\n     public boolean evaluate(Object object) {\n         return (object != null);\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/collections/functors/PrototypeFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/PrototypeFactory.java\n  * Factory implementation that creates a new instance each time based on a prototype.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.7 $ $Date: 2004/05/16 11:47:38 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Use <code>getInstance</code> if you want that.\n      */\n     private PrototypeFactory() {\n+        super();\n     }\n \n     // PrototypeCloneFactory\n         }\n \n         /**\n-         * Return clone of prototype\n+         * Creates an object by calling the clone method.\n+         * \n+         * @return the new object\n          */\n         public Object create() {\n             // needed for post-serialization\n         }\n \n         /**\n-         * Return clone of prototype by serialization\n+         * Creates an object using serialization.\n+         * \n+         * @return the new object\n          */\n         public Object create() {\n             ByteArrayOutputStream baos = new ByteArrayOutputStream(512);\n                     if (bais != null) {\n                         bais.close();\n                     }\n-                } catch (IOException ignored) {\n+                } catch (IOException ex) {\n+                    // ignore\n                 }\n                 try {\n                     if (baos != null) {\n                         baos.close();\n                     }\n-                } catch (IOException ignored) {\n+                } catch (IOException ex) {\n+                    // ignore\n                 }\n             }\n         }\n--- a/src/java/org/apache/commons/collections/functors/SwitchClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/SwitchClosure.java\n  * like a switch statement.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:47:38 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Execute the closure whose predicate returns true\n+     * Executes the closure whose matching predicate returns true\n+     * \n+     * @param input  the input object\n      */\n     public void execute(Object input) {\n         for (int i = 0; i < iPredicates.length; i++) {\n \n     /**\n      * Gets the predicates, do not modify the array.\n+     * \n      * @return the predicates\n      * @since Commons Collections 3.1\n      */\n \n     /**\n      * Gets the closures, do not modify the array.\n+     * \n      * @return the closures\n      * @since Commons Collections 3.1\n      */\n \n     /**\n      * Gets the default closure.\n+     * \n      * @return the default closure\n      * @since Commons Collections 3.1\n      */\n     public Closure getDefaultClosure() {\n         return iDefault;\n     }\n-\n+    \n }\n--- a/src/java/org/apache/commons/collections/functors/TransformerClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/TransformerClosure.java\n  * and ignore the result.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:47:38 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Call the transformer.\n+     * Executes the closure by calling the decorated transformer.\n+     * \n+     * @param input  the input object\n      */\n     public void execute(Object input) {\n         iTransformer.transform(input);\n \n     /**\n      * Gets the transformer.\n+     * \n      * @return the transformer\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/WhileClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/WhileClosure.java\n  * like a do-while or while loop.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:47:38 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Execute the closure until the predicate is false.\n+     * Executes the closure until the predicate is false.\n+     * \n+     * @param input  the input object\n      */\n     public void execute(Object input) {\n         if (iDoLoop) {\n \n     /**\n      * Gets the predicate in use.\n+     * \n      * @return the predicate\n      * @since Commons Collections 3.1\n      */\n \n     /**\n      * Gets the closure.\n+     * \n      * @return the closure\n      * @since Commons Collections 3.1\n      */\n \n     /**\n      * Is the loop a do-while loop.\n+     * \n      * @return true is do-while, false if while\n      * @since Commons Collections 3.1\n      */", "timestamp": 1084708058, "metainfo": ""}