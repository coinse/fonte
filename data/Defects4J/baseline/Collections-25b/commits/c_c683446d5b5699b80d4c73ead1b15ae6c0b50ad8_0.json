{"sha": "c683446d5b5699b80d4c73ead1b15ae6c0b50ad8", "log": "Complete javadoc, remove {@inheritDoc} tags as suggested on the ml.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator.java\n         return map;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public boolean containsKey(final Object key) {\n         return decorated().containsKey(key);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public boolean containsValue(final Object value) {\n         return decorated().containsValue(value);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public Set<Map.Entry<K, V>> entrySet() {\n         return decorated().entrySet();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public V get(final Object key) {\n         return decorated().get(key);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public V remove(final Object key) {\n         return decorated().remove(key);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public boolean isEmpty() {\n         return decorated().isEmpty();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public Set<K> keySet() {\n         return decorated().keySet();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public int size() {\n         return decorated().size();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public Collection<V> values() {\n         return decorated().values();\n     }\n         return new EntrySetToMapIteratorAdapter<K, V>(entrySet());\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     @Override\n     public boolean equals(final Object object) {\n         if (object == this) {\n         return decorated().equals(object);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     @Override\n     public int hashCode() {\n         return decorated().hashCode();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     @Override\n     public String toString() {\n         return decorated().toString();\n--- a/src/main/java/org/apache/commons/collections/splitmap/TransformedMap.java\n+++ b/src/main/java/org/apache/commons/collections/splitmap/TransformedMap.java\n      * If there are any elements already in the map being decorated, they are\n      * NOT transformed.\n      *\n+     * @param <J>  the input key type\n+     * @param <K>  the output key type\n+     * @param <U>  the input value type\n+     * @param <V>  the output value type\n      * @param map the map to decorate, must not be null\n      * @param keyTransformer the transformer to use for key conversion, null\n-     * means no transformation\n+     *   means no transformation\n      * @param valueTransformer the transformer to use for value conversion, null\n-     * means no transformation\n+     *   means no transformation\n+     * @return a new transformed map\n      * @throws IllegalArgumentException if map is null\n      */\n     public static <J, K, U, V> TransformedMap<J, K, U, V> transformingMap(final Map<K, V> map,\n     }\n \n     //-----------------------------------------------------------------------\n-    /**\n-     * {@inheritDoc}\n-     */\n     public V put(final J key, final U value) {\n         return decorated().put(transformKey(key), transformValue(value));\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public void putAll(final Map<? extends J, ? extends U> mapToCopy) {\n         decorated().putAll(transformMap(mapToCopy));\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public void clear() {\n         decorated().clear();\n     }", "timestamp": 1358851453, "metainfo": ""}