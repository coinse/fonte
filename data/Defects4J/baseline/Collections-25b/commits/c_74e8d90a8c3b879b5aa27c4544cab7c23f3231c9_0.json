{"sha": "74e8d90a8c3b879b5aa27c4544cab7c23f3231c9", "log": "Add observableXxx methods to Utils classes Switch to our Unmodified/Synchonized classes   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BagUtils.java\n+++ b/src/java/org/apache/commons/collections/BagUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BagUtils.java,v 1.12 2003/08/31 17:26:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BagUtils.java,v 1.13 2003/09/21 16:26:08 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.TypedSortedBag;\n import org.apache.commons.collections.decorators.UnmodifiableBag;\n import org.apache.commons.collections.decorators.UnmodifiableSortedBag;\n+import org.apache.commons.collections.observed.ModificationListener;\n+import org.apache.commons.collections.observed.ObservableBag;\n \n /**\n- * Provides utility methods and decorators for {@link Bag} \n- * and {@link SortedBag} instances.\n+ * Provides utility methods and decorators for\n+ * {@link Bag} and {@link SortedBag} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.12 $ $Date: 2003/08/31 17:26:43 $\n+ * @version $Revision: 1.13 $ $Date: 2003/09/21 16:26:08 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n         return TransformedBag.decorate(bag, transformer);\n     }\n     \n+    /**\n+     * Returns an observable bag where changes are notified to listeners.\n+     * <p>\n+     * This method creates an observable bag and attaches the specified listener.\n+     * If more than one listener or other complex setup is required then the\n+     * ObservableBag class should be accessed directly.\n+     *\n+     * @param bag  the bag to decorate, must not be null\n+     * @param listener  bag listener, must not be null\n+     * @return the observed bag\n+     * @throws IllegalArgumentException if the bag or listener is null\n+     * @throws IllegalArgumentException if there is no valid handler for the listener\n+     */\n+    public static ObservableBag observableBag(Bag bag, ModificationListener listener) {\n+        if (listener == null) {\n+            throw new IllegalArgumentException(\"Listener must not be null\");\n+        }\n+        return ObservableBag.decorate(bag, listener);\n+    }\n+    \n     //-----------------------------------------------------------------------\n     /**\n      * Returns a synchronized (thread-safe) sorted bag backed by the given \n--- a/src/java/org/apache/commons/collections/BufferUtils.java\n+++ b/src/java/org/apache/commons/collections/BufferUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUtils.java,v 1.13 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUtils.java,v 1.14 2003/09/21 16:26:08 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.TransformedBuffer;\n import org.apache.commons.collections.decorators.TypedBuffer;\n import org.apache.commons.collections.decorators.UnmodifiableBuffer;\n+import org.apache.commons.collections.observed.ModificationListener;\n+import org.apache.commons.collections.observed.ObservableBuffer;\n \n /**\n- * Contains static utility methods for operating on {@link Buffer} objects.\n+ * Provides utility methods and decorators for {@link Buffer} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.13 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.14 $ $Date: 2003/09/21 16:26:08 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n     /**\n      * An empty unmodifiable buffer.\n      */\n-    public static final Buffer EMPTY_BUFFER = UnmodifiableBuffer.decorate(new ArrayStack());\n+    public static final Buffer EMPTY_BUFFER = UnmodifiableBuffer.decorate(new ArrayStack(1));\n     \n     /**\n      * <code>BufferUtils</code> should not normally be instantiated.\n     public BufferUtils() {\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Returns a synchronized buffer backed by the given buffer.\n      * Much like the synchronized collections returned by \n         return TransformedBuffer.decorate(buffer, transformer);\n     }\n     \n+    /**\n+     * Returns an observable buffer where changes are notified to listeners.\n+     * <p>\n+     * This method creates an observable buffer and attaches the specified listener.\n+     * If more than one listener or other complex setup is required then the\n+     * ObservableBuffer class should be accessed directly.\n+     *\n+     * @param buffer  the buffer to decorate, must not be null\n+     * @param listener  buffer listener, must not be null\n+     * @return the observed buffer\n+     * @throws IllegalArgumentException if the buffer or listener is null\n+     * @throws IllegalArgumentException if there is no valid handler for the listener\n+     */\n+    public static ObservableBuffer observableBuffer(Buffer buffer, ModificationListener listener) {\n+        if (listener == null) {\n+            throw new IllegalArgumentException(\"Listener must not be null\");\n+        }\n+        return ObservableBuffer.decorate(buffer, listener);\n+    }\n+    \n }\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.41 2003/09/09 21:53:04 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.42 2003/09/21 16:26:08 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Set;\n \n import org.apache.commons.collections.decorators.PredicatedCollection;\n+import org.apache.commons.collections.decorators.SynchronizedCollection;\n import org.apache.commons.collections.decorators.TransformedCollection;\n import org.apache.commons.collections.decorators.TypedCollection;\n import org.apache.commons.collections.decorators.UnmodifiableBoundedCollection;\n+import org.apache.commons.collections.decorators.UnmodifiableCollection;\n import org.apache.commons.collections.iterators.ArrayIterator;\n import org.apache.commons.collections.iterators.EnumerationIterator;\n+import org.apache.commons.collections.observed.ModificationListener;\n+import org.apache.commons.collections.observed.ObservableCollection;\n \n /**\n- * A set of {@link Collection} related utility methods.\n+ * Provides utility methods and decorators for {@link Collection} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.41 $ $Date: 2003/09/09 21:53:04 $\n+ * @version $Revision: 1.42 $ $Date: 2003/09/21 16:26:08 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n      * }\n      * </pre>\n      * \n-     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     * This method uses the implementation in the decorators subpackage.\n      * \n      * @param collection  the collection to synchronize, must not be null\n      * @return a synchronized collection backed by the given collection\n      * @throws IllegalArgumentException  if the collection is null\n      */\n     public static Collection synchronizedCollection(Collection collection) {\n-        return Collections.synchronizedCollection(collection);\n+        return SynchronizedCollection.decorate(collection);\n     }\n \n     /**\n      * Returns an unmodifiable collection backed by the given collection.\n      * <p>\n-     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     * This method uses the implementation in the decorators subpackage.\n      *\n      * @param collection  the collection to make unmodifiable, must not be null\n      * @return an unmodifiable collection backed by the given collection\n      * @throws IllegalArgumentException  if the collection is null\n      */\n     public static Collection unmodifiableCollection(Collection collection) {\n-        return Collections.unmodifiableCollection(collection);\n+        return UnmodifiableCollection.decorate(collection);\n     }\n \n     /**\n         return TransformedCollection.decorate(collection, transformer);\n     }\n     \n+    /**\n+     * Returns an observable collection where changes are notified to listeners.\n+     * <p>\n+     * This method creates an observable collection and attaches the specified listener.\n+     * If more than one listener or other complex setup is required then the\n+     * ObservableCollection class should be accessed directly.\n+     *\n+     * @param collection  the collection to decorate, must not be null\n+     * @param listener  collection listener, must not be null\n+     * @return the observed collection\n+     * @throws IllegalArgumentException if the collection or listener is null\n+     * @throws IllegalArgumentException if there is no valid handler for the listener\n+     */\n+    public static ObservableCollection observableCollection(Collection collection, ModificationListener listener) {\n+        if (listener == null) {\n+            throw new IllegalArgumentException(\"Listener must not be null\");\n+        }\n+        return ObservableCollection.decorate(collection, listener);\n+    }\n+    \n }\n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.20 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.21 2003/09/21 16:26:08 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.FixedSizeList;\n import org.apache.commons.collections.decorators.LazyList;\n import org.apache.commons.collections.decorators.PredicatedList;\n+import org.apache.commons.collections.decorators.SynchronizedList;\n import org.apache.commons.collections.decorators.TransformedList;\n import org.apache.commons.collections.decorators.TypedList;\n+import org.apache.commons.collections.decorators.UnmodifiableList;\n+import org.apache.commons.collections.observed.ModificationListener;\n+import org.apache.commons.collections.observed.ObservableList;\n \n /**\n- * Contains static utility methods and decorators for {@link List} \n- * instances.\n+ * Provides utility methods and decorators for {@link List} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.20 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.21 $ $Date: 2003/09/21 16:26:08 $\n  * \n- * @author  <a href=\"mailto:fede@apache.org\">Federico Barbieri</a>\n- * @author  <a href=\"mailto:donaldp@apache.org\">Peter Donald</a>\n+ * @author Federico Barbieri\n+ * @author Peter Donald\n  * @author Paul Jack\n  * @author Stephen Colebourne\n  * @author Neil O'Toole\n     /**\n      * Subtracts all elements in the second list from the first list,\n      * placing the results in a new list.\n+     * <p>\n      * This differs from {@link List#removeAll(Collection)} in that\n      * cardinality is respected; if <Code>list1</Code> contains two\n      * occurrences of <Code>null</Code> and <Code>list2</Code> only\n      * }\n      * </pre>\n      * \n-     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     * This method uses the implementation in the decorators subpackage.\n      * \n      * @param list  the list to synchronize, must not be null\n      * @return a synchronized list backed by the given list\n      * @throws IllegalArgumentException  if the list is null\n      */\n     public static List synchronizedList(List list) {\n-        return Collections.synchronizedList(list);\n+        return SynchronizedList.decorate(list);\n     }\n \n     /**\n      * Returns an unmodifiable list backed by the given list.\n      * <p>\n-     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     * This method uses the implementation in the decorators subpackage.\n      *\n      * @param list  the list to make unmodifiable, must not be null\n      * @return an unmodifiable list backed by the given list\n      * @throws IllegalArgumentException  if the list is null\n      */\n     public static List unmodifiableList(List list) {\n-        return Collections.unmodifiableList(list);\n+        return UnmodifiableList.decorate(list);\n     }\n \n     /**\n     }\n     \n     /**\n-     * Returns a \"lazy\" list whose elements will be created on demand.<P>\n+     * Returns an observable list where changes are notified to listeners.\n+     * <p>\n+     * This method creates an observable list and attaches the specified listener.\n+     * If more than one listener or other complex setup is required then the\n+     * ObservableList class should be accessed directly.\n+     *\n+     * @param list  the list to decorate, must not be null\n+     * @param listener  list listener, must not be null\n+     * @return the observed list\n+     * @throws IllegalArgumentException if the list or listener is null\n+     * @throws IllegalArgumentException if there is no valid handler for the listener\n+     */\n+    public static ObservableList observableList(List list, ModificationListener listener) {\n+        if (listener == null) {\n+            throw new IllegalArgumentException(\"Listener must not be null\");\n+        }\n+        return ObservableList.decorate(list, listener);\n+    }\n+    \n+    /**\n+     * Returns a \"lazy\" list whose elements will be created on demand.\n      * <p>\n      * When the index passed to the returned list's {@link List#get(int) get}\n      * method is greater than the list's size, then the factory will be used\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.36 2003/09/20 12:03:52 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.37 2003/09/21 16:26:08 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.TransformedSortedMap;\n import org.apache.commons.collections.decorators.TypedMap;\n import org.apache.commons.collections.decorators.TypedSortedMap;\n+import org.apache.commons.collections.decorators.UnmodifiableMap;\n+import org.apache.commons.collections.decorators.UnmodifiableSortedMap;\n \n /** \n- * Provides useful utility methods for {@link Map Map} instances.\n+ * Provides utility methods and decorators for\n+ * {@link Map} and {@link SortedMap} instances.\n  * <p>\n  * It contains various typesafe methods\n  * as well as other useful features like deep copying.\n  *  </ul>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.36 $ $Date: 2003/09/20 12:03:52 $\n+ * @version $Revision: 1.37 $ $Date: 2003/09/21 16:26:08 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n     /**\n      * Returns an unmodifiable map backed by the given map.\n      * <p>\n-     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     * This method uses the implementation in the decorators subpackage.\n      *\n      * @param map  the map to make unmodifiable, must not be null\n      * @return an unmodifiable map backed by the given map\n      * @throws IllegalArgumentException  if the map is null\n      */\n     public static Map unmodifiableMap(Map map) {\n-        return Collections.unmodifiableMap(map);\n+        return UnmodifiableMap.decorate(map);\n     }\n \n     /**\n     /**\n      * Returns an unmodifiable sorted map backed by the given sorted map.\n      * <p>\n-     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     * This method uses the implementation in the decorators subpackage.\n      *\n      * @param map  the sorted map to make unmodifiable, must not be null\n      * @return an unmodifiable map backed by the given map\n      * @throws IllegalArgumentException  if the map is null\n      */\n     public static Map unmodifiableSortedMap(SortedMap map) {\n-        return Collections.unmodifiableSortedMap(map);\n+        return UnmodifiableSortedMap.decorate(map);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/java/org/apache/commons/collections/SetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.16 2003/09/09 22:28:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.17 2003/09/21 16:26:08 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.OrderedSet;\n import org.apache.commons.collections.decorators.PredicatedSet;\n import org.apache.commons.collections.decorators.PredicatedSortedSet;\n+import org.apache.commons.collections.decorators.SynchronizedSet;\n+import org.apache.commons.collections.decorators.SynchronizedSortedSet;\n import org.apache.commons.collections.decorators.TransformedSet;\n import org.apache.commons.collections.decorators.TransformedSortedSet;\n import org.apache.commons.collections.decorators.TypedSet;\n import org.apache.commons.collections.decorators.TypedSortedSet;\n+import org.apache.commons.collections.decorators.UnmodifiableSet;\n+import org.apache.commons.collections.decorators.UnmodifiableSortedSet;\n+import org.apache.commons.collections.observed.ModificationListener;\n+import org.apache.commons.collections.observed.ObservableSet;\n \n /**\n- * Provides static utility methods and decorators for {@link Set} \n- * and {@link SortedSet} instances.\n+ * Provides utility methods and decorators for\n+ * {@link Set} and {@link SortedSet} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.16 $ $Date: 2003/09/09 22:28:36 $\n+ * @version $Revision: 1.17 $ $Date: 2003/09/21 16:26:08 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n      * }\n      * </pre>\n      * \n-     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     * This method uses the implementation in the decorators subpackage.\n      * \n      * @param set  the set to synchronize, must not be null\n      * @return a synchronized set backed by the given set\n      * @throws IllegalArgumentException  if the set is null\n      */\n     public static Set synchronizedSet(Set set) {\n-        return Collections.synchronizedSet(set);\n+        return SynchronizedSet.decorate(set);\n     }\n \n     /**\n      * Returns an unmodifiable set backed by the given set.\n      * <p>\n-     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     * This method uses the implementation in the decorators subpackage.\n      *\n      * @param set  the set to make unmodifiable, must not be null\n      * @return an unmodifiable set backed by the given set\n      * @throws IllegalArgumentException  if the set is null\n      */\n     public static Set unmodifiableSet(Set set) {\n-        return Collections.unmodifiableSet(set);\n+        return UnmodifiableSet.decorate(set);\n     }\n \n     /**\n         return TransformedSet.decorate(set, transformer);\n     }\n     \n+    /**\n+     * Returns an observable set where changes are notified to listeners.\n+     * <p>\n+     * This method creates an observable set and attaches the specified listener.\n+     * If more than one listener or other complex setup is required then the\n+     * ObservableSet class should be accessed directly.\n+     *\n+     * @param set  the set to decorate, must not be null\n+     * @param listener  set listener, must not be null\n+     * @return the observed set\n+     * @throws IllegalArgumentException if the set or listener is null\n+     * @throws IllegalArgumentException if there is no valid handler for the listener\n+     */\n+    public static ObservableSet observableSet(Set set, ModificationListener listener) {\n+        if (listener == null) {\n+            throw new IllegalArgumentException(\"Listener must not be null\");\n+        }\n+        return ObservableSet.decorate(set, listener);\n+    }\n     \n     /**\n      * Returns a set that maintains the order of elements that are added\n      * }\n      * </pre>\n      * \n-     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     * This method uses the implementation in the decorators subpackage.\n      * \n      * @param set  the sorted set to synchronize, must not be null\n      * @return a synchronized set backed by the given set\n      * @throws IllegalArgumentException  if the set is null\n      */\n     public static SortedSet synchronizedSortedSet(SortedSet set) {\n-        return Collections.synchronizedSortedSet(set);\n+        return SynchronizedSortedSet.decorate(set);\n     }\n \n     /**\n      * Returns an unmodifiable sorted set backed by the given sorted set.\n      * <p>\n-     * This method uses the implementation in {@link java.util.Collections Collections}.\n+     * This method uses the implementation in the decorators subpackage.\n      *\n      * @param set  the sorted set to make unmodifiable, must not be null\n      * @return an unmodifiable set backed by the given set\n      * @throws IllegalArgumentException  if the set is null\n      */\n     public static SortedSet unmodifiableSortedSet(SortedSet set) {\n-        return Collections.unmodifiableSortedSet(set);\n+        return UnmodifiableSortedSet.decorate(set);\n     }\n \n     /**", "timestamp": 1064161568, "metainfo": ""}