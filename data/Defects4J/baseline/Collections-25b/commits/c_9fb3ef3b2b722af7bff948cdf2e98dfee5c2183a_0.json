{"sha": "9fb3ef3b2b722af7bff948cdf2e98dfee5c2183a", "log": "Change to use HashedMap instead of HashMap   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/Flat3Map.java\n+++ b/src/java/org/apache/commons/collections/map/Flat3Map.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/Flat3Map.java,v 1.5 2003/12/02 23:51:50 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/Flat3Map.java,v 1.6 2003/12/03 19:03:50 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.AbstractCollection;\n import java.util.AbstractSet;\n import java.util.Collection;\n-import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.NoSuchElementException;\n import org.apache.commons.collections.IteratorUtils;\n import org.apache.commons.collections.MapIterator;\n import org.apache.commons.collections.ResettableIterator;\n-import org.apache.commons.collections.iterators.EntrySetMapIterator;\n \n /**\n  * A <code>Map</code> implementation that stores data in simple fields until\n  * Do not use <code>Flat3Map</code> if the size is likely to grow beyond 3.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/12/02 23:51:50 $\n+ * @version $Revision: 1.6 $ $Date: 2003/12/03 19:03:50 $\n  *\n  * @author Stephen Colebourne\n  */\n     /** Value, used while in flat mode */\n     private Object iValue3;\n     /** Map, used while in delegate mode */\n-    private HashMap iMap;\n+    private HashedMap iMap;\n \n     /**\n      * Constructor.\n      * Converts the flat map data to a HashMap.\n      */\n     private void convertToMap() {\n-        iMap = new HashMap();\n+        iMap = new HashedMap();\n         switch (iSize) {  // drop through\n             case 3:\n                 iMap.put(iKey3, iValue3);\n      * A MapIterator returns the keys in the map. It also provides convenient\n      * methods to get the key and value, and set the value.\n      * It avoids the need to create an entrySet/keySet/values object.\n-     * It also avoids creating the Mep Entry object.\n+     * It also avoids creating the Map Entry object.\n      * \n      * @return the map iterator\n      */\n     public MapIterator mapIterator() {\n         if (iMap != null) {\n-            return new EntrySetMapIterator(this);\n+            return iMap.mapIterator();\n         }\n         if (iSize == 0) {\n             return IteratorUtils.EMPTY_MAP_ITERATOR;", "timestamp": 1070478230, "metainfo": ""}