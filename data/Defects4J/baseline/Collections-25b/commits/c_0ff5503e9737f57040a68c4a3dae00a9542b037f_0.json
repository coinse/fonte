{"sha": "0ff5503e9737f57040a68c4a3dae00a9542b037f", "log": "* add additional adapters * modify wrappers so that equals compares wrapped types * clarify IntList.equals with javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/collections/primitives/AbstractRandomAccessIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractRandomAccessIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractRandomAccessIntList.java,v 1.1 2003/01/06 03:59:12 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2003/01/06 03:59:12 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractRandomAccessIntList.java,v 1.2 2003/01/07 00:59:51 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2003/01/07 00:59:51 $\n  *\n  * ====================================================================\n  *\n         return new RandomAccessIntSubList(this,fromIndex,toIndex);\n     }\n \n+    /** \n+     * Returns <code>true</code> iff <i>that</i> is \n+     * an {@link IntList} with the same {@link #size size}\n+     * as me, and whose {@link #iterator iterator} returns the \n+     * same sequence of values as mine.\n+     */\n     public boolean equals(Object that) {\n-        // handle an easy and somewhat frequent case via a shortcut\n-        if(this == that) { return true; } \n-\n-        // otherwise, try to get an IntIterator from that object\n-        IntIterator thatIter = null;        \n-        if(that instanceof IntList) {\n-            if(size() != ((IntList)that).size()) { return false; } // another quick check\n-            thatIter = ((IntList)that).iterator();\n-        } else if(that instanceof List) {\n-            if(size() != ((List)that).size()) { return false; } // another quick check\n-            thatIter = IteratorIntIterator.wrap(((List)that).iterator());\n-        }\n-        \n-        if(null == thatIter) { return false; }\n-        \n-        // walk thru thisIter and thatIter, checking for any differences\n-        for(IntIterator thisIter = iterator(); thisIter.hasNext();) {\n-            if(!thatIter.hasNext()) { return false; } // thatIter has a different length\n-            if(thisIter.next() != thatIter.next()) { \n-                return false; \n-            }\n-        }\n-        \n-        if(thatIter.hasNext()) { return false; } // thatIter has a different length\n-        \n-        return true;\n+        if(this == that) { \n+            return true; \n+        } else if(that instanceof IntList) {\n+            IntList thatList = (IntList)that;\n+            if(size() != thatList.size()) {\n+                return false;\n+            }\n+            for(IntIterator thatIter = thatList.iterator(), thisIter = iterator(); thisIter.hasNext();) {\n+                if(thisIter.next() != thatIter.next()) { \n+                    return false; \n+                }\n+            }\n+            return true;\n+        } else {\n+            return false;\n+        }        \n     }\n     \n     public int hashCode() {\n--- a/src/java/org/apache/commons/collections/primitives/CollectionIntCollection.java\n+++ b/src/java/org/apache/commons/collections/primitives/CollectionIntCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/CollectionIntCollection.java,v 1.1 2003/01/05 03:03:42 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2003/01/05 03:03:42 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/CollectionIntCollection.java,v 1.2 2003/01/07 00:59:51 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2003/01/07 00:59:51 $\n  *\n  * ====================================================================\n  *\n  * {@link java.util.Collection Collection} to the\n  * {@link IntCollection} interface.\n  *\n- * @version $Revision: 1.1 $ $Date: 2003/01/05 03:03:42 $\n+ * @version $Revision: 1.2 $ $Date: 2003/01/07 00:59:51 $\n  * @author Rodney Waldhoff \n  */\n public class CollectionIntCollection implements IntCollection {\n         return _collection.containsAll(IntCollectionCollection.wrap(c));\n     }        \n     \n-    public boolean equals(Object o) {\n-        return _collection.equals(o);\n+    public boolean equals(Object that) {\n+        if(that instanceof IntCollection) {\n+            return _collection.equals(IntCollectionCollection.wrap((IntCollection)that));\n+        } else {\n+            return _collection.equals(that);\n+        }\n     }\n     \n     public int hashCode() {\n--- a/src/java/org/apache/commons/collections/primitives/IntCollectionCollection.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntCollectionCollection.java,v 1.2 2003/01/06 03:56:21 rwaldhoff Exp $\n- * $Revision: 1.2 $\n- * $Date: 2003/01/06 03:56:21 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntCollectionCollection.java,v 1.3 2003/01/07 00:59:51 rwaldhoff Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2003/01/07 00:59:51 $\n  *\n  * ====================================================================\n  *\n  * Adapts an {@link IntCollection} to the\n  * {@link java.util.Collection Collection} interface.\n  *\n- * @version $Revision: 1.2 $ $Date: 2003/01/06 03:56:21 $\n+ * @version $Revision: 1.3 $ $Date: 2003/01/07 00:59:51 $\n  * @author Rodney Waldhoff \n  */\n public class IntCollectionCollection implements Collection {\n         return _collection.containsAll(CollectionIntCollection.wrap(c));\n     }        \n     \n-    public boolean equals(Object o) {\n-        return _collection.equals(o);\n+    public boolean equals(Object that) {\n+        if(that instanceof Collection) {\n+            try {\n+                return _collection.equals(CollectionIntCollection.wrap((Collection)that));\n+            } catch(ClassCastException e) {\n+                return false;\n+            } catch(NullPointerException e) {\n+                return false;\n+            }\n+        } else {\n+            return _collection.equals(that);\n+        }\n     }\n     \n     public int hashCode() {\n--- a/src/java/org/apache/commons/collections/primitives/IntListIteratorListIterator.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntListIteratorListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntListIteratorListIterator.java,v 1.1 2003/01/06 03:57:15 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2003/01/06 03:57:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntListIteratorListIterator.java,v 1.2 2003/01/07 00:59:51 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2003/01/07 00:59:51 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * Adapts an {@link IntIterator} to the\n- * {@link java.util.Iterator Iterator} interface.\n+ * Adapts an {@link IntListIterator} to the\n+ * {@link java.util.ListIterator ListIterator} interface.\n  *\n- * @version $Revision: 1.1 $ $Date: 2003/01/06 03:57:15 $\n+ * @version $Revision: 1.2 $ $Date: 2003/01/07 00:59:51 $\n  * @author Rodney Waldhoff \n  */\n public class IntListIteratorListIterator implements ListIterator {\n--- a/src/java/org/apache/commons/collections/primitives/IntListList.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntListList.java,v 1.1 2003/01/06 03:57:42 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2003/01/06 03:57:42 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntListList.java,v 1.2 2003/01/07 00:59:51 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2003/01/07 00:59:51 $\n  *\n  * ====================================================================\n  *\n  * Adapts an {@link IntList} to the\n  * {@link java.util.List List} interface.\n  *\n- * @version $Revision: 1.1 $ $Date: 2003/01/06 03:57:42 $\n+ * @version $Revision: 1.2 $ $Date: 2003/01/07 00:59:51 $\n  * @author Rodney Waldhoff \n  */\n public class IntListList extends IntCollectionCollection implements List {\n         return IntListList.wrap(_list.subList(fromIndex,toIndex));\n     }\n \n+    public boolean equals(Object that) {\n+        if(that instanceof IntList) {\n+            return _list.equals(ListIntList.wrap((List)that));\n+        } else {\n+            return super.equals(that);\n+        }\n+    }\n+    \n     public static List wrap(IntList list) {\n         return null == list ? null : new IntListList(list);\n     }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/ListIntList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ListIntList.java,v 1.1 2003/01/07 00:59:51 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/01/07 00:59:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.List;\n+\n+/**\n+ * Adapts a {@link Number}-valued {@link java.util.List List} \n+ * to the {@link IntList} interface.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/01/07 00:59:51 $\n+ * @author Rodney Waldhoff \n+ */\n+public class ListIntList extends CollectionIntCollection implements IntList {\n+    \n+    public ListIntList(List list) {\n+        super(list);        \n+        _list = list;\n+    }\n+    \n+    public void add(int index, int element) {\n+        _list.add(index,new Integer(element));\n+    }\n+\n+    public boolean addAll(int index, IntCollection collection) {\n+        return _list.addAll(index,IntCollectionCollection.wrap(collection));\n+    }\n+\n+    public int get(int index) {\n+        return ((Number)_list.get(index)).intValue();\n+    }\n+\n+    public int indexOf(int element) {\n+        return _list.indexOf(new Integer(element));\n+    }\n+\n+    public int lastIndexOf(int element) {\n+        return _list.lastIndexOf(new Integer(element));\n+    }\n+\n+    public IntListIterator listIterator() {\n+        return ListIteratorIntListIterator.wrap(_list.listIterator());\n+    }\n+\n+    public IntListIterator listIterator(int index) {\n+        return ListIteratorIntListIterator.wrap(_list.listIterator(index));\n+    }\n+\n+    public int removeElementAt(int index) {\n+        return ((Number)_list.remove(index)).intValue();\n+    }\n+\n+    public int set(int index, int element) {\n+        return ((Number)_list.set(index,new Integer(element))).intValue();\n+    }\n+\n+    public IntList subList(int fromIndex, int toIndex) {\n+        return ListIntList.wrap(_list.subList(fromIndex,toIndex));\n+    }\n+\n+    public boolean equals(Object that) {\n+        if(that instanceof List) {\n+            try {\n+                return _list.equals(ListIntList.wrap((List)that));\n+            } catch(ClassCastException e) {\n+                return false;\n+            } catch(NullPointerException e) {\n+                return false;\n+            }\n+        } else {\n+            return super.equals(that);\n+        }\n+    }\n+        \n+    public static IntList wrap(List list) {\n+        return null == list ? null : new ListIntList(list);\n+    }\n+\n+    private List _list = null;\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/ListIteratorIntListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ListIteratorIntListIterator.java,v 1.1 2003/01/07 00:59:51 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/01/07 00:59:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.ListIterator;\n+\n+/**\n+ * Adapts a {@link Number}-valued {@link java.util.ListIterator} \n+ * to the {@link IntListIterator} interface.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/01/07 00:59:51 $\n+ * @author Rodney Waldhoff \n+ */\n+public class ListIteratorIntListIterator implements IntListIterator {\n+    \n+    public ListIteratorIntListIterator(ListIterator iterator) {\n+        _iterator = iterator;\n+    }\n+    \n+    public int nextIndex() {\n+        return _iterator.nextIndex();\n+    }\n+\n+    public int previousIndex() {\n+        return _iterator.previousIndex();\n+    }\n+\n+    public boolean hasNext() {\n+        return _iterator.hasNext();\n+    }\n+\n+    public boolean hasPrevious() {\n+        return _iterator.hasPrevious();\n+    }\n+    \n+    public int next() {\n+        return ((Number)_iterator.next()).intValue();\n+    }\n+\n+    public int previous() {\n+        return ((Number)_iterator.previous()).intValue();\n+    }\n+\n+    public void add(int element) {\n+        _iterator.add(new Integer(element));\n+    }\n+      \n+    public void set(int element) {\n+        _iterator.set(new Integer(element));\n+    }\n+\n+    public void remove() {\n+        _iterator.remove();\n+    }\n+      \n+    public static IntListIterator wrap(ListIterator iterator) {\n+        return null == iterator ? null : new ListIteratorIntListIterator(iterator);\n+    }\n+    \n+    private ListIterator _iterator = null;\n+\n+}", "timestamp": 1041901191, "metainfo": ""}