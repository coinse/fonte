{"sha": "970921c2196d804d7c2d8203881cd340a4d0df3e", "log": "[COLLECTIONS-380] Fixed infinte recursion when creating an unmodifiable bounded collection, added unit test, fixed additional javadoc, thanks to Dave Brosius for reporting.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n      *\n      * @param coll  the <code>BoundedCollection</code> to decorate, must not be null\n      * @return a new unmodifiable bounded collection\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws IllegalArgumentException if {@code coll} is {@code null}\n      */\n     public static <E> BoundedCollection<E> unmodifiableBoundedCollection(BoundedCollection<E> coll) {\n-        return unmodifiableBoundedCollection(coll);\n+        return new UnmodifiableBoundedCollection<E>(coll);\n     }\n \n     /**\n      *\n      * @param coll  the <code>BoundedCollection</code> to decorate, must not be null\n      * @return a new unmodifiable bounded collection\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws IllegalArgumentException if {@code coll} is {@code null}\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll) {\n     }\n \n     //-----------------------------------------------------------------------\n+    /**\n+     * {@inheritDoc}\n+     */\n     public boolean isFull() {\n         return decorated().isFull();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public int maxSize() {\n         return decorated().maxSize();\n     }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/collection/TestUnmodifiableBoundedCollection.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.collection;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.collections.ArrayStack;\n+import org.apache.commons.collections.Buffer;\n+import org.apache.commons.collections.BufferUtils;\n+import org.apache.commons.collections.buffer.BoundedBuffer;\n+\n+/**\n+ * Extension of {@link AbstractTestCollection} for exercising the\n+ * {@link UnmodifiableBoundedCollection} implementation.\n+ */\n+public class TestUnmodifiableBoundedCollection<E> extends AbstractTestCollection<E> {\n+\n+    public TestUnmodifiableBoundedCollection(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Override\n+    public Collection<E> makeObject() {\n+        BoundedBuffer<E> buffer = BoundedBuffer.<E>boundedBuffer(new ArrayStack<E>(), 10);\n+        return UnmodifiableBoundedCollection.unmodifiableBoundedCollection(buffer);\n+    }\n+\n+    @Override\n+    public Collection<E> makeFullCollection() {\n+        E[] allElements = getFullElements();\n+        Buffer<E> buffer = BufferUtils.boundedBuffer(new ArrayStack<E>(), allElements.length);\n+        buffer.addAll(Arrays.asList(allElements));\n+        return UnmodifiableBoundedCollection.unmodifiableBoundedCollection(buffer);\n+    }\n+\n+    @Override\n+    public Collection<E> makeConfirmedCollection() {\n+        return new ArrayList<E>();\n+    }\n+\n+    @Override\n+    public Collection<E> makeConfirmedFullCollection() {\n+        ArrayList<E> list = new ArrayList<E>();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+\n+    @Override\n+    public boolean isAddSupported() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isRemoveSupported() {\n+        return false;\n+    }\n+\n+    @Override\n+    protected boolean skipSerializedCanonicalTests() {\n+        return true;\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+}", "timestamp": 1333996836, "metainfo": ""}