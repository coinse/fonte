{"sha": "4b2811d1c4060e04e231d3288b26105ac03490cf", "log": "Added get(object, index) method to CollectionUtils, deprecating index(-,-) methods.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.44 2003/09/22 02:20:56 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.45 2003/10/05 19:48:00 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Provides utility methods and decorators for {@link Collection} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.44 $ $Date: 2003/09/22 02:20:56 $\n+ * @version $Revision: 1.45 $ $Date: 2003/10/05 19:48:00 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n      * @param idx  the index to get\n      * @throws IndexOutOfBoundsException\n      * @throws ArrayIndexOutOfBoundsException\n+     *\n+     * @deprecated use {@link #get(Object, int)} instead\n      */\n     public static Object index(Object obj, int idx) {\n         return index(obj, new Integer(idx));\n      * @return the object at the specified index\n      * @throws IndexOutOfBoundsException\n      * @throws ArrayIndexOutOfBoundsException\n+     *\n+     * @deprecated use {@link #get(Object, int)} instead\n      */\n     public static Object index(Object obj, Object index) {\n         if(obj instanceof Map) {\n             }\n         }\n         return iterator;\n+    }\n+    \n+    /**\n+     * Returns the <code>index</code>-th value in <code>object</code>, throwing\n+     * <code>IndexOutOfBoundsException</code> if there is no such element or \n+     * <code>IllegalArgumentException</code> if <code>object</code> is not an \n+     * instance of one of the supported types.\n+     * <p>\n+     * The supported types, and associated semantics are:\n+     * <ul>\n+     * <li> Map -- the value returned is the <code>Map.Entry</code> in position \n+     *      <code>index</code> in the map's <code>entrySet</code> iterator, \n+     *      if there is such an entry.</li>\n+     * <li> List -- this method is equivalent to the list's get method.</li>\n+     * <li> Object Array -- the <code>index</code>-th array entry is returned, \n+     *      if there is such an entry; otherwise an <code>ArrayIndexOutOfBoundsException</code>\n+     *      is thrown.</li>\n+     * <li> Collection -- the value returned is the <code>index</code>-th object \n+     *      returned by the collection's default iterator, if there is such an element.</li>\n+     * <li> Iterator or Enumeration -- the value returned is the\n+     *      <code>index</code>-th object in the Iterator/Enumeration, if there\n+     *      is such an element.  The Iterator/Enumeration is advanced to \n+     *      <code>index</code> (or to the end, if <code>index</code> exceeds the \n+     *      number of entries) as a side effect of this method.</li>\n+     * </ul>\n+     * \n+     * @param object  the object to get a value from\n+     * @param index  the index to get\n+     * @return the object at the specified index\n+     * @throws IndexOutOfBoundsException\n+     * @throws IllegalArgumentException\n+     */\n+    public static Object get(Object object, int index) {\n+        if (index < 0) {\n+            throw new IndexOutOfBoundsException(\"Index cannot be negative.\");\n+        }\n+        if(object instanceof Map) {\n+            Map map = (Map)object;\n+            Iterator iterator = map.entrySet().iterator();\n+            return get(iterator, index);\n+        } \n+        else if(object instanceof List) {\n+            return ((List)object).get(index);\n+        } \n+        else if(object instanceof Object[]) {\n+            return ((Object[])object)[index];\n+        } \n+        else if(object instanceof Enumeration) {\n+            Enumeration enum = (Enumeration)object;\n+            while(enum.hasMoreElements()) {\n+                index--;\n+                if(index == -1) {\n+                    return enum.nextElement();\n+                } else {\n+                    enum.nextElement();\n+                }\n+            }\n+            throw new IndexOutOfBoundsException(\"Entry does not exist.\");\n+        } \n+        else if(object instanceof Iterator) {\n+            return get((Iterator)object, index);\n+        }\n+        else if(object instanceof Collection) {\n+            Iterator iterator = ((Collection)object).iterator();\n+            return get(iterator, index);\n+        } else {\n+            throw new IllegalArgumentException(\"Unsupported object type.\");\n+        }\n+    }\n+    \n+    private static Object get(Iterator iterator, int index) {\n+        while(iterator.hasNext()) {\n+            index--;\n+            if(index == -1) {\n+                return iterator.next();\n+            } else {\n+                iterator.next();\n+            }\n+        }\n+        throw new IndexOutOfBoundsException(\"Entry does not exist.\");\n     }\n \n     /** \n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Id: TestCollectionUtils.java,v 1.23 2003/10/02 22:14:29 scolebourne Exp $\n- * $Revision: 1.23 $\n- * $Date: 2003/10/02 22:14:29 $\n+ * $Id: TestCollectionUtils.java,v 1.24 2003/10/05 19:48:00 psteitz Exp $\n+ * $Revision: 1.24 $\n+ * $Date: 2003/10/05 19:48:00 $\n  *\n  * ====================================================================\n  *\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n  * \n- * @version $Revision: 1.23 $ $Date: 2003/10/02 22:14:29 $\n+ * @version $Revision: 1.24 $ $Date: 2003/10/05 19:48:00 $\n  */\n public class TestCollectionUtils extends TestCase {\n     public TestCollectionUtils(String testName) {\n         test = CollectionUtils.index(obj, obj);\n         assertTrue(test.equals(obj));\n     }\n+    \n+    public void testGet() {     \n+        // Unordered map, entries exist\n+        Map map = new HashMap();\n+        map.put(\"zeroKey\", \"zero\");\n+        map.put(\"oneKey\", \"one\");\n+        Object test = CollectionUtils.get(map, 0);\n+        assertTrue(((Map.Entry) test).getKey().equals(\"zeroKey\"));\n+        assertTrue(((Map.Entry) test).getValue().equals(\"zero\"));\n+        test = CollectionUtils.get(map, 1);\n+        assertTrue(((Map.Entry) test).getKey().equals(\"oneKey\"));\n+        assertTrue(((Map.Entry) test).getValue().equals(\"one\"));\n+        \n+        // Map index out of range\n+        try {\n+            test = CollectionUtils.get(map,  2);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        try {\n+            test = CollectionUtils.get(map,  -2);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        // Sorted map, entries exist, should respect order\n+        SortedMap map2 = new TreeMap();\n+        map2.put(\"zeroKey\", \"zero\");\n+        map2.put(\"oneKey\", \"one\");\n+        test = CollectionUtils.get(map2, 1);\n+        assertTrue(((Map.Entry) test).getKey().equals(\"zeroKey\"));\n+        assertTrue(((Map.Entry) test).getValue().equals(\"zero\"));\n+        test = CollectionUtils.get(map2, 0);\n+        assertTrue(((Map.Entry) test).getKey().equals(\"oneKey\"));\n+        assertTrue(((Map.Entry) test).getValue().equals(\"one\"));\n+                \n+        // List, entry exists\n+        List list = new ArrayList();\n+        list.add(\"zero\");\n+        list.add(\"one\");\n+        test = CollectionUtils.get(list, 0);\n+        assertTrue(test.equals(\"zero\"));\n+        test = CollectionUtils.get(list, 1);\n+        assertTrue(test.equals(\"one\"));\n+        \n+        // list, non-existent entry -- IndexOutOfBoundsException\n+        try {\n+            test = CollectionUtils.index(list, 2);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        \n+        // Iterator, entry exists\n+        Iterator iterator = list.iterator();\n+        test = CollectionUtils.get(iterator,0);\n+        assertTrue(test.equals(\"zero\"));\n+        iterator = list.iterator();\n+        test = CollectionUtils.get(iterator,1);\n+        assertTrue(test.equals(\"one\"));\n+        \n+        // Iterator, non-existent entry \n+        try {\n+            test = CollectionUtils.get(iterator,3);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        assertTrue(!iterator.hasNext());\n+        \n+        // Enumeration, entry exists\n+        Vector vector = new Vector(list);\n+        Enumeration enum = vector.elements();\n+        test = CollectionUtils.get(enum,0);\n+        assertTrue(test.equals(\"zero\"));\n+        enum = vector.elements();\n+        test = CollectionUtils.get(enum,1);\n+        assertTrue(test.equals(\"one\"));\n+        \n+        // Enumerator, non-existent entry \n+        try {\n+            test = CollectionUtils.get(enum,3);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        assertTrue(!enum.hasMoreElements());\n+        \n+        // Collection, entry exists\n+        Bag bag = new HashBag();\n+        bag.add(\"element\", 1);\n+        test = CollectionUtils.get(bag, 0);\n+        assertTrue(test.equals(\"element\"));\n+        \n+        // Collection, non-existent entry\n+        try {\n+            test = CollectionUtils.get(bag, 1);\n+            fail(\"Expceting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        \n+        // Object array, entry exists\n+        Object[] objArray = new Object[2];\n+        objArray[0] = \"zero\";\n+        objArray[1] = \"one\";\n+        test = CollectionUtils.get(objArray,0);\n+        assertTrue(test.equals(\"zero\"));\n+        test = CollectionUtils.get(objArray,1);\n+        assertTrue(test.equals(\"one\"));\n+        \n+        // Object array, non-existent entry -- ArrayIndexOutOfBoundsException\n+        try {\n+            test = CollectionUtils.get(objArray,2);\n+            fail(\"Expecting ArrayIndexOutOfBoundsException.\");\n+        } catch (ArrayIndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        // Invalid object\n+        Object obj = new Object();\n+        try {\n+            test = CollectionUtils.get(obj, 0);\n+            fail(\"Expecting IllegalArgumentException.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n \n \n     private static Predicate EQUALS_TWO = new Predicate() {", "timestamp": 1065383280, "metainfo": ""}