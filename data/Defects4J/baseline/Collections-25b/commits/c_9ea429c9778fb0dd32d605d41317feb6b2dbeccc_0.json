{"sha": "9ea429c9778fb0dd32d605d41317feb6b2dbeccc", "log": "[COLLECTIONS-454] Fix findbugs warnings by returning independent Map.Entry objects from an entrySet() iterator in Flat3Map.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/map/Flat3Map.java\n+++ b/src/main/java/org/apache/commons/collections4/map/Flat3Map.java\n     /**\n      * Gets the entrySet view of the map.\n      * Changes made to the view affect this map.\n-     * The Map Entry is not an independent object and changes as the\n-     * iterator progresses.\n-     * To simply iterate through the entries, use {@link #mapIterator()}.\n+     * <p>\n+     * NOTE: from 4.0, the returned Map Entry will be an independent object and will\n+     * not change anymore as the iterator progresses. To avoid this additional object\n+     * creation and simply iterate through the entries, use {@link #mapIterator()}.\n      *\n      * @return the entrySet view\n      */\n         }\n     }\n \n-    static abstract class EntryIterator<K, V> implements Map.Entry<K, V> {\n+    static class FlatMapEntry<K, V> implements Map.Entry<K, V> {\n         private final Flat3Map<K, V> parent;\n-        private int nextIndex = 0;\n-        protected boolean canRemove = false;\n+        private final int index;\n+        private volatile boolean removed;\n+\n+        public FlatMapEntry(final Flat3Map<K, V> parent, final int index) {\n+            this.parent = parent;\n+            this.index = index;\n+            this.removed = false;\n+        }\n \n         /**\n-         * Create a new Flat3Map.EntryIterator.\n+         * Used by the iterator that created this entry to indicate that\n+         * {@link java.util.Iterator#remove()} has been called.\n+         * <p>\n+         * As a consequence, all subsequent call to {@link #getKey()},\n+         * {@link #setValue(Object)} and {@link #getValue()} will fail.\n+         * \n+         * @param flag\n          */\n-        public EntryIterator(final Flat3Map<K, V> parent) {\n-            this.parent = parent;\n-        }\n-\n-        public boolean hasNext() {\n-            return nextIndex < parent.size;\n-        }\n-\n-        public Map.Entry<K, V> nextEntry() {\n-            if (hasNext() == false) {\n-                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n-            }\n-            canRemove = true;\n-            nextIndex++;\n-            return this;\n-        }\n-\n-        public void remove() {\n-            if (canRemove == false) {\n-                throw new IllegalStateException(AbstractHashedMap.REMOVE_INVALID);\n-            }\n-            parent.remove(getKey());\n-            nextIndex--;\n-            canRemove = false;\n+        void setRemoved(final boolean flag) {\n+            this.removed = flag;\n         }\n \n         public K getKey() {\n-            if (canRemove == false) {\n+            if (removed) {\n                 throw new IllegalStateException(AbstractHashedMap.GETKEY_INVALID);\n             }\n-            switch (nextIndex) {\n+            switch (index) {\n                 case 3:\n                     return parent.key3;\n                 case 2:\n         }\n \n         public V getValue() {\n-            if (canRemove == false) {\n+            if (removed) {\n                 throw new IllegalStateException(AbstractHashedMap.GETVALUE_INVALID);\n             }\n-            switch (nextIndex) {\n+            switch (index) {\n                 case 3:\n                     return parent.value3;\n                 case 2:\n         }\n \n         public V setValue(final V value) {\n-            if (canRemove == false) {\n+            if (removed) {\n                 throw new IllegalStateException(AbstractHashedMap.SETVALUE_INVALID);\n             }\n             final V old = getValue();\n-            switch (nextIndex) {\n+            switch (index) {\n                 case 3:\n                     parent.value3 = value;\n                     break;\n             }\n             return old;\n         }\n-    }\n-\n-    /**\n-     * EntrySetIterator and MapEntry\n-     */\n-    static class EntrySetIterator<K, V> extends EntryIterator<K, V> implements Iterator<Map.Entry<K, V>> {\n-\n-        EntrySetIterator(final Flat3Map<K, V> parent) {\n-            super(parent);\n-        }\n-\n-        public Map.Entry<K, V> next() {\n-            return nextEntry();\n-        }\n \n         @Override\n         public boolean equals(final Object obj) {\n-            if (canRemove == false) {\n+            if (removed) {\n                 return false;\n             }\n             if (obj instanceof Map.Entry == false) {\n \n         @Override\n         public int hashCode() {\n-            if (canRemove == false) {\n+            if (removed) {\n                 return 0;\n             }\n             final Object key = getKey();\n \n         @Override\n         public String toString() {\n-            if (canRemove) {\n+            if (!removed) {\n                 return getKey() + \"=\" + getValue();\n             }\n             return \"\";\n+        }\n+\n+    }\n+\n+    static abstract class EntryIterator<K, V> {\n+        private final Flat3Map<K, V> parent;\n+        private int nextIndex = 0;\n+        protected FlatMapEntry<K, V> currentEntry = null;\n+\n+        /**\n+         * Create a new Flat3Map.EntryIterator.\n+         */\n+        public EntryIterator(final Flat3Map<K, V> parent) {\n+            this.parent = parent;\n+        }\n+\n+        public boolean hasNext() {\n+            return nextIndex < parent.size;\n+        }\n+\n+        public Map.Entry<K, V> nextEntry() {\n+            if (!hasNext()) {\n+                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);\n+            }\n+            currentEntry = new FlatMapEntry<K, V>(parent, ++nextIndex);\n+            return currentEntry;\n+        }\n+\n+        public void remove() {\n+            if (currentEntry == null) {\n+                throw new IllegalStateException(AbstractHashedMap.REMOVE_INVALID);\n+            }\n+            currentEntry.setRemoved(true);\n+            parent.remove(currentEntry.getKey());\n+            nextIndex--;\n+            currentEntry = null;\n+        }\n+\n+    }\n+\n+    /**\n+     * EntrySetIterator and MapEntry\n+     */\n+    static class EntrySetIterator<K, V> extends EntryIterator<K, V> implements Iterator<Map.Entry<K, V>> {\n+        EntrySetIterator(final Flat3Map<K, V> parent) {\n+            super(parent);\n+        }\n+\n+        public Map.Entry<K, V> next() {\n+            return nextEntry();\n         }\n     }\n \n         }\n \n         public K next() {\n-            nextEntry();\n-            return getKey();\n+            return nextEntry().getKey();\n         }\n     }\n \n         }\n \n         public V next() {\n-            nextEntry();\n-            return getValue();\n+            return nextEntry().getValue();\n         }\n     }\n ", "timestamp": 1367175170, "metainfo": ""}