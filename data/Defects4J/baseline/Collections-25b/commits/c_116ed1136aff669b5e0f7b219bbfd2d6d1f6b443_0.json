{"sha": "116ed1136aff669b5e0f7b219bbfd2d6d1f6b443", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471201 | scolebourne | 2006-11-04 06:17:26 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getBag() - use covariant decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/bag/TestPredicatedSortedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestPredicatedSortedBag.java\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.Bag;\n import org.apache.commons.collections.Predicate;\n-import org.apache.commons.collections.PredicateUtils;\n import org.apache.commons.collections.SortedBag;\n+import org.apache.commons.collections.functors.TruePredicate;\n \n /**\n  * Extension of {@link AbstractTestSortedBag} for exercising the {@link PredicatedSortedBag}\n  *\n  * @author Phil Steitz\n  */\n-public class TestPredicatedSortedBag extends AbstractTestSortedBag {\n-    \n-    private SortedBag nullBag = null;\n-    \n+public class TestPredicatedSortedBag<T> extends AbstractTestSortedBag<T> {\n+\n+    private SortedBag<T> nullBag = null;\n+\n     public TestPredicatedSortedBag(String testName) {\n         super(testName);\n     }\n-    \n+\n     public static Test suite() {\n         return new TestSuite(TestPredicatedSortedBag.class);\n     }\n-    \n+\n     public static void main(String args[]) {\n         String[] testCaseName = { TestPredicatedSortedBag.class.getName()};\n         junit.textui.TestRunner.main(testCaseName);\n     }\n-    \n+\n     //--------------------------------------------------------------------------\n-    \n-    protected Predicate stringPredicate() {\n-        return new Predicate() {\n-            public boolean evaluate(Object o) {\n+\n+    protected Predicate<T> stringPredicate() {\n+        return new Predicate<T>() {\n+            public boolean evaluate(T o) {\n                 return o instanceof String;\n             }\n         };\n-    }   \n-    \n-    protected Predicate truePredicate = PredicateUtils.truePredicate();\n-    \n-    protected SortedBag decorateBag(SortedBag bag, Predicate predicate) {\n+    }\n+\n+    protected Predicate<T> truePredicate = TruePredicate.<T>truePredicate();\n+\n+    protected SortedBag<T> decorateBag(SortedBag<T> bag, Predicate<T> predicate) {\n         return PredicatedSortedBag.decorate(bag, predicate);\n     }\n-    \n-    public Bag makeBag() {\n-        return decorateBag(new TreeBag(), truePredicate);\n+\n+    public SortedBag<T> makeObject() {\n+        return decorateBag(new TreeBag<T>(), truePredicate);\n     }\n-    \n-    protected Bag makeTestBag() {\n-        return decorateBag(new TreeBag(), stringPredicate());\n+\n+    protected SortedBag<T> makeTestBag() {\n+        return decorateBag(new TreeBag<T>(), stringPredicate());\n     }\n-    \n+\n     //--------------------------------------------------------------------------\n-    \n+\n     public void testDecorate() {\n-        SortedBag bag = decorateBag(new TreeBag(), stringPredicate());\n-        SortedBag bag2 = ((PredicatedSortedBag) bag).getSortedBag();\n+        SortedBag<T> bag = decorateBag(new TreeBag<T>(), stringPredicate());\n+        ((PredicatedSortedBag<T>) bag).decorated();\n         try {\n-            SortedBag bag3 = decorateBag(new TreeBag(), null);\n+            decorateBag(new TreeBag<T>(), null);\n             fail(\"Expecting IllegalArgumentException for null predicate\");\n         } catch (IllegalArgumentException e) {}\n         try {\n-            SortedBag bag4 = decorateBag(nullBag, stringPredicate());\n+            decorateBag(nullBag, stringPredicate());\n             fail(\"Expecting IllegalArgumentException for null bag\");\n         } catch (IllegalArgumentException e) {}\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testSortOrder() {\n-        SortedBag bag = decorateBag(new TreeBag(), stringPredicate());\n+        SortedBag<T> bag = decorateBag(new TreeBag<T>(), stringPredicate());\n         String one = \"one\";\n         String two = \"two\";\n         String three = \"three\";\n-        bag.add(one);\n-        bag.add(two);\n-        bag.add(three);\n+        bag.add((T) one);\n+        bag.add((T) two);\n+        bag.add((T) three);\n         assertEquals(\"first element\", bag.first(), one);\n-        assertEquals(\"last element\", bag.last(), two); \n-        Comparator c = bag.comparator();\n+        assertEquals(\"last element\", bag.last(), two);\n+        Comparator<? super T> c = bag.comparator();\n         assertTrue(\"natural order, so comparator should be null\", c == null);\n     }\n ", "timestamp": 1252994605, "metainfo": ""}