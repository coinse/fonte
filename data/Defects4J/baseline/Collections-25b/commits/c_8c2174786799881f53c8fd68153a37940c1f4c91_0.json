{"sha": "8c2174786799881f53c8fd68153a37940c1f4c91", "log": "Added Buffer interface from Avalon Excaliber.  Modified the interface from Avalon so that it (a) defines a read-only get() method and (b) extends java.util.Collection. Also altered the documentation so that the scope of the interface is broader; it can apply to stacks, heaps and LRU caches as well.  Submitted by: Paul Jack ( pjack at sfaf dot org )   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/Buffer.java\n+/*\n+ * Copyright (C) The Apache Software Foundation. All rights reserved.\n+ *\n+ * This software is published under the terms of the Apache Software License\n+ * version 1.1, a copy of which has been included with this distribution in\n+ * the LICENSE.txt file.\n+ */\n+package org.apache.commons.collections;\n+\n+\n+import java.util.Collection;\n+\n+\n+/**\n+ * A Buffer is a collection that allows objects to be removed in some\n+ * well-defined order.  The removal order can be based on insertion order\n+ * (eg, a FIFO queue or a LIFO stack), on access order (eg, an LRU cache), \n+ * on some arbitrary comparator (eg, a priority queue) or on any other \n+ * well-defined ordering.<P>\n+ *\n+ * Note that the removal order is not necessarily the same as the iteration\n+ * order.  A <Code>Buffer</Code> implementation may have equivalent removal\n+ * and iteration orders, but this is not required.<P>\n+ *\n+ * This interface does not specify any behavior for \n+ * {@link Object#equals(Object)} and {@link Object#hashCode} methods.  It\n+ * is therefore possible for a <Code>Buffer</Code> implementation to also\n+ * also implement {@link java.util.List}, {@link java.util.Set} or \n+ * {@link Bag}.\n+ *\n+ * @author  <a href=\"bloritsch@apache.org\">Berin Loritsch</a>\n+ * @version CVS $Revision: 1.1 $ $Date: 2002/07/03 01:44:04 $\n+ * @since Avalon 4.0\n+ */\n+public interface Buffer extends Collection\n+{\n+\n+    /**\n+     * Removes the next object from the buffer.\n+     *\n+     * @return  the removed object\n+     * @throws BufferUnderflowException if the buffer is already empty\n+     */\n+    Object remove();\n+\n+\n+\n+    /**\n+     *  Returns the next object in the buffer without removing it.\n+     *\n+     *  @return  the next object in the buffer\n+     *  @throws BufferUnderflowException if the buffer is empty\n+     */\n+    Object get();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/BufferOverflowException.java\n+/*\n+ * Copyright (C) The Apache Software Foundation. All rights reserved.\n+ *\n+ * This software is published under the terms of the Apache Software License\n+ * version 1.1, a copy of which has been included with this distribution in\n+ * the LICENSE.txt file.\n+ */\n+package org.apache.commons.collections;\n+\n+/**\n+ * The BufferOverflowException is used when the buffer's capacity has been\n+ * exceeded.\n+ *\n+ * @author <a href=\"mailto:bloritsch@apache.org\">Berin Loritsch</a>\n+ * @author <a href=\"mailto:jefft@apache.org\">Jeff Turner</a>\n+ */\n+public class BufferOverflowException extends RuntimeException\n+{\n+    private final Throwable m_throwable;\n+\n+    /** Construct a new BufferOverflowException.\n+     * @param message The detail message for this exception.\n+     */\n+    public BufferOverflowException( String message )\n+    {\n+        this( message, null );\n+    }\n+\n+    /** Construct a new BufferOverflowException.\n+     * @param message The detail message for this exception.\n+     * @param throwable the root cause of the exception\n+     */\n+    public BufferOverflowException( String message, Throwable exception )\n+    {\n+        super( message );\n+        m_throwable = exception;\n+    }\n+\n+    /**\n+     * Retrieve root cause of the exception.\n+     *\n+     * @return the root cause\n+     */\n+    public final Throwable getCause()\n+    {\n+        return m_throwable;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/BufferUnderflowException.java\n+/*\n+ * Copyright (C) The Apache Software Foundation. All rights reserved.\n+ *\n+ * This software is published under the terms of the Apache Software License\n+ * version 1.1, a copy of which has been included with this distribution in\n+ * the LICENSE.txt file.\n+ */\n+package org.apache.commons.collections;\n+\n+/**\n+ * The BufferUnderflowException is used when the buffer is already empty\n+ *\n+ * @author <a href=\"mailto:bloritsch@apache.org\">Berin Loritsch</a>\n+ * @author <a href=\"mailto:jefft@apache.org\">Jeff Turner</a>\n+ */\n+public class BufferUnderflowException extends RuntimeException\n+{\n+    private final Throwable m_throwable;\n+\n+    /** Construct a new BufferUnderflowException.\n+     * @param message The detail message for this exception.\n+     */\n+    public BufferUnderflowException( String message )\n+    {\n+        this( message, null );\n+    }\n+\n+    /** Construct a new BufferUnderflowException.\n+     * @param message The detail message for this exception.\n+     * @param throwable the root cause of the exception\n+     */\n+    public BufferUnderflowException( String message, Throwable exception )\n+    {\n+        super( message );\n+        m_throwable = exception;\n+    }\n+\n+\n+    public BufferUnderflowException() {\n+        super();\n+        m_throwable = null;\n+    }\n+\n+    /**\n+     * Retrieve root cause of the exception.\n+     *\n+     * @return the root cause\n+     */\n+    public final Throwable getCause()\n+    {\n+        return m_throwable;\n+    }\n+}", "timestamp": 1025660644, "metainfo": ""}