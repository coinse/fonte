{"sha": "8b9a79d0870fb3b90ba9c54a074c3f675353f0d0", "log": "[COLLECTIONS-361] Added CollectionUtils.filterInverse. Thanks to Jean-Noel Rouvignac for patch.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n             }\n         }\n         return result;\n+    }\n+\n+    /**\n+     * Filter the collection by applying a Predicate to each element. If the\n+     * predicate returns true, remove the element.\n+     * <p>\n+     * This is equivalent to <pre>filter(collection, PredicateUtils.notPredicate(predicate))</pre>\n+     * if predicate is != null.\n+     * <p>\n+     * If the input collection or predicate is null, there is no change made.\n+     *\n+     * @param <T>  the type of object the {@link Iterable} contains\n+     * @param collection  the collection to get the input from, may be null\n+     * @param predicate  the predicate to use as a filter, may be null\n+     * @return true if the collection is modified by this call, false otherwise.\n+     */\n+    public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate) {\n+        return filter(collection, predicate == null ? null : PredicateUtils.notPredicate(predicate));\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n     }\n \n     @Test\n+    public void filterInverse() {\n+        List<Integer> ints = new ArrayList<Integer>();\n+        ints.add(1);\n+        ints.add(2);\n+        ints.add(3);\n+        ints.add(3);\n+        Iterable<Integer> iterable = ints;\n+        assertTrue(CollectionUtils.filterInverse(iterable, EQUALS_TWO));\n+        assertEquals(3, ints.size());\n+        assertEquals(1, (int) ints.get(0));\n+        assertEquals(3, (int) ints.get(1));\n+        assertEquals(3, (int) ints.get(2));\n+    }\n+        \n+    @Test\n+    public void filterInverseNullParameters() throws Exception {\n+        List<Long> longs = Collections.nCopies(4, 10L);\n+        assertFalse(CollectionUtils.filterInverse(longs, null));\n+        assertEquals(4, longs.size());\n+        assertFalse(CollectionUtils.filterInverse(null, EQUALS_TWO));\n+        assertEquals(4, longs.size());\n+        assertFalse(CollectionUtils.filterInverse(null, null));\n+        assertEquals(4, longs.size());\n+    }\n+\n+    @Test\n     public void countMatches() {\n         assertEquals(4, CollectionUtils.countMatches(iterableB, EQUALS_TWO));\n         assertEquals(0, CollectionUtils.countMatches(iterableA, null));", "timestamp": 1362690181, "metainfo": ""}