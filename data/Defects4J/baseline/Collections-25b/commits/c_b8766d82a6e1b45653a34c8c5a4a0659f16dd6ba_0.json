{"sha": "b8766d82a6e1b45653a34c8c5a4a0659f16dd6ba", "log": "applied Paul Jacks' patch for a number of helper methods for working with Comparators.   This can help avoid folks having to use the o.a*.c*.collections.comparators package, providing nice simple static helper method instead along the same lines as java.util.Collections and CollectionUtils here.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/ComparatorUtils.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.collections;\n+\n+\n+import java.util.Comparator;\n+import org.apache.commons.collections.comparators.ComparableComparator;\n+import org.apache.commons.collections.comparators.ReverseComparator;\n+import org.apache.commons.collections.comparators.NullComparator;\n+import org.apache.commons.collections.comparators.TransformingComparator;\n+\n+\n+/**\n+ *  Provides convenient static utility methods for <Code>Comparator</Code>\n+ *  objects.<P>\n+ *\n+ *  Most of the utility in this class can also be found in the \n+ *  <Code>comparators</Code> package; this class merely provides a \n+ *  convenient central place if you have use for more than one class\n+ *  in the <Code>comparators</Code> subpackage.<P>\n+ *\n+ *  Note that <I>every</I> method in this class allows you to specify\n+ *  <Code>null</Code> instead of a comparator, in which case \n+ *  {@link #NATURAL} will be used.\n+ *\n+ *  @author Paul Jack\n+ *  @version $Id$\n+ */\n+public class ComparatorUtils {\n+\n+\n+    /**\n+     *  Comparator for natural sort order.\n+     *\n+     *  @see ComparableComparator#getInstance\n+     */\n+    final public static Comparator NATURAL = \n+      ComparableComparator.getInstance();\n+\n+\n+    /**\n+     *  Returns a comparator that reverses the order of the given \n+     *  comparator.\n+     *\n+     *  @param comparator  the comparator whose order to reverse\n+     *  @return  a comparator who reverses that order\n+     *  @see ReverseComparator\n+     */\n+    public static Comparator reverse(Comparator comparator) {\n+        if (comparator == null) comparator = NATURAL;\n+        return new ReverseComparator(comparator);\n+    }\n+\n+\n+    /**\n+     *  Allows the given comparator to compare <Code>null</Code> values.<P>\n+     *\n+     *  The returned comparator will consider a null value to be less than\n+     *  any nonnull value, and equal to any other null value.  Two nonnull\n+     *  values will be evaluated with the given comparator.<P>\n+     *\n+     *  @param comparator the comparator that wants to allow nulls\n+     *  @return  a version of that comparator that allows nulls\n+     *  @see NullComparator\n+     */\n+    public static Comparator nullFirst(Comparator comparator) {\n+        if (comparator == null) comparator = NATURAL;\n+        return new NullComparator(comparator, false);\n+    }\n+\n+\n+    /**\n+     *  Allows the given comparator to compare <Code>null</Code> values.<P>\n+     *\n+     *  The returned comparator will consider a null value to be greater than\n+     *  any nonnull value, and equal to any other null value.  Two nonnull\n+     *  values will be evaluated with the given comparator.<P>\n+     *\n+     *  @param comparator the comparator that wants to allow nulls\n+     *  @return  a version of that comparator that allows nulls\n+     *  @see NullComparator\n+     */\n+    public static Comparator nullLast(Comparator comparator) {\n+        if (comparator == null) comparator = NATURAL;\n+        return new NullComparator(comparator, true);\n+    }\n+\n+\n+    \n+    /**\n+     *  Passes transformed objects to the given comparator.<P>\n+     *\n+     *  Objects passed to the returned comparator will first be transformed\n+     *  by the given transformer before they are compared by the given\n+     *  comparator.<P>\n+     *\n+     *  @param comparator  the sort order to use\n+     *  @param t  the transformer to use\n+     *  @return  a comparator that transforms its input objects before \n+     *    comparing them\n+     *  @see  TransformingComparator\n+     */\n+    public static Comparator transform(Comparator comparator, Transformer t) {\n+        if (comparator == null) comparator = NATURAL;\n+        return new TransformingComparator(t, comparator);\n+    }\n+\n+\n+    /**\n+     *  Returns the smaller of the given objects according to the given \n+     *  comparator.\n+     * \n+     *  @param o1  the first object to compare\n+     *  @param o2  the second object to compare\n+     *  @param comparator  the sort order to use\n+     *  @return  the smaller of the two objects\n+     */\n+    public static Object min(Object o1, Object o2, Comparator comparator) {\n+        if (comparator == null) comparator = NATURAL;\n+        int c = comparator.compare(o1, o2);\n+        return (c < 0) ? o1 : o2;        \n+    }\n+\n+\n+    /**\n+     *  Returns the smaller of the given objects according to the given \n+     *  comparator.\n+     * \n+     *  @param o1  the first object to compare\n+     *  @param o2  the second object to compare\n+     *  @param comparator  the sort order to use\n+     *  @return  the smaller of the two objects\n+     */\n+    public static Object max(Object o1, Object o2, Comparator comparator) {\n+        if (comparator == null) comparator = NATURAL;\n+        int c = comparator.compare(o1, o2);\n+        return (c > 0) ? o1 : o2;        \n+    }\n+}", "timestamp": 1023812526, "metainfo": ""}