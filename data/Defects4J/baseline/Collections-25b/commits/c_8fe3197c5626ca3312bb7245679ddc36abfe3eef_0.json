{"sha": "8fe3197c5626ca3312bb7245679ddc36abfe3eef", "log": "Uses inheritence in the get() value lookup to decide which value to return. I find this very useful when implementing registries of which Class acts upon which value. So in a ConvertUtils class, a ClassMap would handle the many Converters, deciding which Converter to use on which value.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/ClassMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ClassMap.java,v 1.1 2002/10/23 03:35:23 bayard Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/10/23 03:35:23 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Map;\n+import java.util.HashMap;\n+\n+/**\n+ * A map which stores objects by a key Class.\n+ * When obtaining the object, it will check inheritence and \n+ * interface trees to see if the Class matches.\n+  *\n+  * @author <a href=\"mailto:bayard@apache.org\">Henri Yandell</a>\n+ */\n+public class ClassMap extends ProxyMap {\n+\n+    /**\n+     * Create a ClassMap around a passed in Map.\n+     */\n+    static public Map wrap(Map m) {\n+        return new ClassMap(m);\n+    }\n+\n+    /**\n+     * Construct a ClassMap using a default internal Map of a \n+     * HashMap.\n+     */\n+    public ClassMap() {\n+        this(new HashMap());\n+    }\n+\n+    private ClassMap(Map m) {\n+        super(m);\n+    }\n+\n+    /**\n+     * Get the object from the map. If the key is not \n+     * a Class object, then it uses the Class of the object.\n+     * Inheritence is used to decide which value to return, so \n+     * if a value is not in the map for the Class of the passed \n+     * in key, then it checks the inheritence tree of the Class \n+     * by first checking the interface tree and then checking \n+     * the superclass.\n+     */\n+    public Object get(Object key) {\n+        if(key == null) {\n+            return null;\n+        }\n+        Class clss = null;\n+\n+        if(key instanceof Class) {\n+            clss = (Class)key;\n+        } else {\n+            clss = key.getClass();\n+        }\n+\n+        Object obj = super.get(clss);\n+\n+        if(obj == null) {\n+            \n+            // if this is null, let's go up the inheritence tree\n+            obj = getInterfaces(clss);\n+\n+            if(obj == null) {\n+                obj = getSuperclass(clss);\n+            }\n+        }\n+\n+        return obj;\n+    }\n+\n+    private Object getInterfaces(Class clss) {\n+        if(clss == null) {\n+            return null;\n+        }\n+        Object obj = null;\n+        Class[] interfaces = clss.getInterfaces();\n+        for(int i=0; i<interfaces.length; i++) {\n+            obj = (Object)super.get(interfaces[i]);\n+            if(obj != null) {\n+                return obj; \n+            }\n+            obj = getInterfaces(interfaces[i]);\n+            if(obj != null) {\n+                return obj; \n+            }\n+            obj = getSuperclass(interfaces[i]);\n+            if(obj != null) {\n+                return obj; \n+            }\n+        }\n+        return null;\n+    }\n+\n+    private Object getSuperclass(Class clss) {\n+        if(clss == null) {\n+            return null;\n+        }\n+        Object obj = null;\n+        Class superclass = clss.getSuperclass();\n+        obj = (Object)super.get(superclass);\n+        if(obj != null) {\n+            return obj; \n+        }\n+        obj = getInterfaces(superclass);\n+        if(obj != null) {\n+            return obj; \n+        }\n+        obj = getSuperclass(superclass);\n+        if(obj != null) {\n+            return obj; \n+        }\n+        return null;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestClassMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestClassMap.java,v 1.1 2002/10/23 03:35:22 bayard Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/10/23 03:35:22 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Map;\n+\n+import junit.framework.*;\n+\n+/**\n+ * Test cases for ClassMap\n+ * \n+ * @author <a href=\"mailto:bayard@apache.org\">Henri Yandell</a>\n+ */\n+public class TestClassMap extends TestMap {\n+\n+    public TestClassMap(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestClassMap.class);\n+    }\n+\n+    public Object[] getSampleKeys() {\n+        Object[] keys = new Object[] {\n+            Integer.TYPE,\n+            Class.class,\n+            Integer.class,\n+            Double.TYPE,\n+            Number.class,\n+            String.class,\n+            java.util.Date.class\n+        };\n+        return keys;\n+    }\n+\n+    public Object[] getSampleValues() {\n+        Object[] values = new Object[] {\n+            \"int\",\n+            \"Class\",\n+            \"Integer\",\n+            \"double\",\n+            \"Number\",\n+            \"String\",\n+            \"java.util.Date\"\n+        };\n+        return values;\n+    }\n+\n+    public Map makeEmptyMap() {\n+        return new ClassMap();\n+    }\n+\n+    public void testClassMapInheritenceGet() {\n+        ClassMap map = (ClassMap)makeFullMap();\n+        assertTrue(map.get(java.util.Date.class) == map.get(java.sql.Date.class));\n+        assertTrue(map.get(Number.class) != map.get(Integer.class));\n+    }\n+\n+}", "timestamp": 1035344123, "metainfo": ""}