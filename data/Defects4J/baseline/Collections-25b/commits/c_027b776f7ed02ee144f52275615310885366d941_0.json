{"sha": "027b776f7ed02ee144f52275615310885366d941", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r740150 | mbenson | 2009-02-02 15:24:00 -0800 (Mon, 02 Feb 2009) | 1 line          make all [collections] maps implement IterableMap     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/FixedSizeMap.java\n+++ b/src/java/org/apache/commons/collections/map/FixedSizeMap.java\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.Collection;\n-import java.util.Iterator;\n import java.util.Map;\n import java.util.Set;\n \n import org.apache.commons.collections.BoundedMap;\n+import org.apache.commons.collections.IterableMap;\n import org.apache.commons.collections.collection.UnmodifiableCollection;\n import org.apache.commons.collections.set.UnmodifiableSet;\n \n  * @author Stephen Colebourne\n  * @author Paul Jack\n  */\n-public class FixedSizeMap\n-        extends AbstractMapDecorator\n-        implements Map, BoundedMap, Serializable {\n+public class FixedSizeMap<K, V>\n+        extends AbstractMapDecorator<K, V>\n+        implements Map<K, V>, BoundedMap<K, V>, Serializable {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 7450927208116179316L;\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    public static Map decorate(Map map) {\n-        return new FixedSizeMap(map);\n+    public static <K, V> IterableMap<K, V> decorate(Map<K, V> map) {\n+        return new FixedSizeMap<K, V>(map);\n     }\n \n     //-----------------------------------------------------------------------\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    protected FixedSizeMap(Map map) {\n+    protected FixedSizeMap(Map<K, V> map) {\n         super(map);\n     }\n \n      * @throws ClassNotFoundException\n      * @since Commons Collections 3.1\n      */\n+    @SuppressWarnings(\"unchecked\")\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n         map = (Map) in.readObject();\n     }\n \n     //-----------------------------------------------------------------------\n-    public Object put(Object key, Object value) {\n+    public V put(K key, V value) {\n         if (map.containsKey(key) == false) {\n             throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n         }\n         return map.put(key, value);\n     }\n \n-    public void putAll(Map mapToCopy) {\n-        for (Iterator it = mapToCopy.keySet().iterator(); it.hasNext(); ) {\n-            if (mapToCopy.containsKey(it.next()) == false) {\n+    public void putAll(Map<? extends K, ? extends V> mapToCopy) {\n+        for (K key : mapToCopy.keySet()) {\n+            if (!containsKey(key)) {\n                 throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n             }\n         }\n         throw new UnsupportedOperationException(\"Map is fixed size\");\n     }\n \n-    public Object remove(Object key) {\n+    public V remove(Object key) {\n         throw new UnsupportedOperationException(\"Map is fixed size\");\n     }\n \n-    public Set entrySet() {\n-        Set set = map.entrySet();\n+    public Set<Map.Entry<K, V>> entrySet() {\n+        Set<Map.Entry<K, V>> set = map.entrySet();\n         // unmodifiable set will still allow modification via Map.Entry objects\n         return UnmodifiableSet.decorate(set);\n     }\n \n-    public Set keySet() {\n-        Set set = map.keySet();\n+    public Set<K> keySet() {\n+        Set<K> set = map.keySet();\n         return UnmodifiableSet.decorate(set);\n     }\n \n-    public Collection values() {\n-        Collection coll = map.values();\n+    public Collection<V> values() {\n+        Collection<V> coll = map.values();\n         return UnmodifiableCollection.decorate(coll);\n     }\n \n     public int maxSize() {\n         return size();\n     }\n-   \n+\n }", "timestamp": 1252994165, "metainfo": ""}