{"sha": "f6ac90fca9d2545d9e3fe26b7ad1f9a9e9550a34", "log": "", "commit": "\n--- a/src/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n+++ b/src/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n      * @throws IOException\n      * @throws ClassNotFoundException\n      */\n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings(\"unchecked\") // (1) should only fail if input stream is incorrect \n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n-        collection = (Collection) in.readObject();\n+        collection = (Collection<E>) in.readObject(); // (1)\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/splitmap/TransformedMap.java\n+++ b/src/java/org/apache/commons/collections/splitmap/TransformedMap.java\n      * @throws ClassNotFoundException\n      * @since Commons Collections 3.1\n      */\n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings(\"unchecked\") // (1) should only fail if input stream is incorrect \n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n-        map = (Map) in.readObject();\n+        map = (Map<K, V>) in.readObject(); // (1)\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/LocalTestNode.java\n+++ b/src/test/org/apache/commons/collections/LocalTestNode.java\n             return false;\n         }\n \n-        LocalTestNode node = (LocalTestNode) o;\n+        @SuppressWarnings(\"unchecked\") // o has the correct class - see above\n+        LocalTestNode<K, V> node = (LocalTestNode<K, V>) o;\n \n         return (getKey().equals(node.getKey())\n                 && getValue().equals(node.getValue()));\n--- a/src/test/org/apache/commons/collections/MockTestCase.java\n+++ b/src/test/org/apache/commons/collections/MockTestCase.java\n     private List<Object> mockObjects = new ArrayList<Object>();\n \n     @SuppressWarnings(\"unchecked\")\n-    protected <T> T createMock(Class name) {\n+    protected <T> T createMock(Class<?> name) {\n         T mock = (T) EasyMock.createMock(name);\n         return registerMock(mock);\n     }", "timestamp": 1287536560, "metainfo": ""}