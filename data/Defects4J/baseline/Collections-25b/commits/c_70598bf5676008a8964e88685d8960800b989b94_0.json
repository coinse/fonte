{"sha": "70598bf5676008a8964e88685d8960800b989b94", "log": "fix minor cut-and-paste issue (needless cast to float)   ", "commit": "\n--- a/src/test/org/apache/commons/collections/primitives/TestArrayByteList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestArrayByteList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayByteList.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayByteList.java,v 1.2 2003/04/16 18:38:09 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @version $Revision: 1.2 $ $Date: 2003/04/16 18:38:09 $\n  * @author Rodney Waldhoff\n  */\n public class TestArrayByteList extends TestByteList {\n         for (int i = 0; i < 1000; i++) {\n             byte value = ((byte) (Byte.MAX_VALUE));\n             value -= i;\n-            assertEquals(value, list.get(i), 0f);\n+            assertEquals(value, list.get(i));\n         }\n     }\n \n             }\n             \n             for(int i=0;i<10;i++) {\n-                assertEquals((byte)i,list.get(i), 0f);\n+                assertEquals((byte)i,list.get(i));\n             }\n             \n             list.trimToSize();\n     \n             for(int i=0;i<10;i++) {\n-                assertEquals((byte)i,list.get(i), 0f);\n+                assertEquals((byte)i,list.get(i));\n             }\n     \n             for(int i=0;i<10;i+=2) {\n             }\n             \n             for(int i=0;i<5;i++) {\n-                assertEquals((byte)(2*i)+1,list.get(i), 0f);\n+                assertEquals((byte)(2*i)+1,list.get(i));\n             }\n     \n             list.trimToSize();\n                     \n             for(int i=0;i<5;i++) {\n-                assertEquals((byte)(2*i)+1,list.get(i), 0f);\n+                assertEquals((byte)(2*i)+1,list.get(i));\n             }\n \n             list.trimToSize();\n                     \n             for(int i=0;i<5;i++) {\n-                assertEquals((byte)(2*i)+1,list.get(i), 0f);\n+                assertEquals((byte)(2*i)+1,list.get(i));\n             }\n     \n             list.clear();\n--- a/src/test/org/apache/commons/collections/primitives/TestByteList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestByteList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestByteList.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestByteList.java,v 1.2 2003/04/16 18:38:09 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.primitives.adapters.ListByteList;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @version $Revision: 1.2 $ $Date: 2003/04/16 18:38:09 $\n  * @author Rodney Waldhoff\n  */\n public abstract class TestByteList extends TestList {\n         assertSame(dest,list.toArray(dest));\n         int i=0;\n         for(ByteIterator iter = list.iterator(); iter.hasNext();i++) {\n-            assertEquals(iter.next(),dest[i], 0f);\n+            assertEquals(iter.next(),dest[i]);\n         }\n     }\n     \n         assertSame(dest,list.toArray(dest));\n         int i=0;\n         for(ByteIterator iter = list.iterator(); iter.hasNext();i++) {\n-            assertEquals(iter.next(),dest[i], 0f);\n+            assertEquals(iter.next(),dest[i]);\n         }\n         for(;i<dest.length;i++) {\n-            assertEquals(Byte.MAX_VALUE,dest[i], 0f);\n+            assertEquals(Byte.MAX_VALUE,dest[i]);\n         }\n     }\n     \n         assertTrue(dest != dest2);\n         int i=0;\n         for(ByteIterator iter = list.iterator(); iter.hasNext();i++) {\n-            assertEquals(iter.next(),dest2[i], 0f);\n+            assertEquals(iter.next(),dest2[i]);\n         }\n     }\n     \n         for(int i = 0; i < 50; i++) {\n             assertEquals(100-i,list.size());\n             assertEquals(50-i,sub.size());\n-            assertEquals((byte)(25+i),sub.removeElementAt(0), 0f);\n+            assertEquals((byte)(25+i),sub.removeElementAt(0));\n             assertEquals(50-i-1,sub.size());\n             assertEquals(100-i-1,list.size());\n         }\n             list.add((byte)i);\n         }\n         for (int i = 0; i < 255; i++) {\n-            assertEquals((byte)i, list.get(i), 0f);\n+            assertEquals((byte)i, list.get(i));\n         }\n     }\n \n         list.add((byte)4);\n         list.add(1, (byte)2);\n         for(int i = 0; i < 4; i++) {\n-            assertEquals(\"Should get entry back\", (byte)(i + 1), list.get(i), 0f);\n+            assertEquals(\"Should get entry back\", (byte)(i + 1), list.get(i));\n         }\n         list.add(0, (byte)0);\n         for (int i = 0; i < 5; i++) {\n-            assertEquals(\"Should get entry back\", (byte)i, list.get(i), 0f);\n+            assertEquals(\"Should get entry back\", (byte)i, list.get(i));\n         }\n     }\n ", "timestamp": 1050518289, "metainfo": ""}