{"sha": "957094fb79d1279546f6e9bbbaee98cec841a200", "log": "Add ObservableSortedSet Rename range to view   ", "commit": "\n--- a/src/java/org/apache/commons/collections/observed/ModificationHandler.java\n+++ b/src/java/org/apache/commons/collections/observed/ModificationHandler.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ModificationHandler.java,v 1.6 2003/09/21 16:00:28 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ModificationHandler.java,v 1.7 2003/09/21 20:01:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * later collections release.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2003/09/21 16:00:28 $\n+ * @version $Revision: 1.7 $ $Date: 2003/09/21 20:01:53 $\n  * \n  * @author Stephen Colebourne\n  */\n     private Collection baseCollection = null;\n     /** The root handler */\n     private final ModificationHandler rootHandler;\n-    /** The range offset, 0 if not a range */\n-    private final int rangeOffset;\n+    /** The view offset, 0 if not a view */\n+    private final int viewOffset;\n     \n     // Constructors\n     //-----------------------------------------------------------------------\n     protected ModificationHandler() {\n         super();\n         this.rootHandler = this;\n-        this.rangeOffset = 0;\n+        this.viewOffset = 0;\n     }\n \n     /**\n      * Constructor.\n      * \n      * @param rootHandler  the base underlying handler\n-     * @param rangeOffset  the offset on the base collection\n-     */\n-    protected ModificationHandler(ModificationHandler rootHandler, int rangeOffset) {\n+     * @param viewOffset  the offset on the base collection\n+     */\n+    protected ModificationHandler(ModificationHandler rootHandler, int viewOffset) {\n         super();\n         this.rootHandler = rootHandler;\n-        this.rangeOffset = rangeOffset;\n+        this.viewOffset = viewOffset;\n     }\n \n     /**\n     }\n     \n     /**\n-     * Gets the range offset.\n-     * \n-     * @return the range offset\n-     */\n-    protected int getRangeOffset() {\n-        return rangeOffset;\n+     * Gets the view offset.\n+     * \n+     * @return the view offset\n+     */\n+    protected int getViewOffset() {\n+        return viewOffset;\n     }\n     \n     // PreListeners\n      * @param object  the object that will be added/removed/set, the method param or derived\n      * @param repeat  the number of repeats of the add/remove, the method param or derived\n      * @param previous  the previous value that will be removed/replaced, must exist in coll\n-     * @param range  the range collection, null if no range\n-     * @param rangeOffset  the offset of the range, -1 if unknown\n+     * @param view  the view collection that the change was actioned on, null if no view\n+     * @param viewOffset  the offset of the subList view, -1 if unknown\n      */\n     protected boolean preEvent(\n             int type, int index, Object object, int repeat,\n-            Object previous, ObservableCollection range, int rangeOffset) {\n+            Object previous, ObservableCollection view, int viewOffset) {\n         return true;\n     }\n \n      * @param object  the object that was added/removed/set, the method param or derived\n      * @param repeat  the number of repeats of the add/remove, the method param or derived\n      * @param previous  the previous value that was removed/replace, must have existed in coll\n-     * @param range  the range collection, null if no range\n-     * @param rangeOffset  the offset of the range, -1 if unknown\n+     * @param view  the view collection that the change was actioned on, null if no view\n+     * @param viewOffset  the offset of the subList view, -1 if unknown\n      */\n     protected void postEvent(\n             boolean modified, int type, int index, Object object, int repeat,\n-            Object previous, ObservableCollection range, int rangeOffset) {\n+            Object previous, ObservableCollection view, int viewOffset) {\n     }\n \n     // Event handling\n      * @return true to process modification\n      */\n     protected boolean preAddIndexed(int index, Object object) {\n-        return preEvent(ModificationEventType.ADD_INDEXED, index + rangeOffset, object, 1, null, null, -1);\n+        return preEvent(ModificationEventType.ADD_INDEXED, index + viewOffset, object, 1, null, null, -1);\n     }\n \n     /**\n      * @param object  the object being added\n      */\n     protected void postAddIndexed(int index, Object object) {\n-        postEvent(true, ModificationEventType.ADD_INDEXED, index + rangeOffset, object, 1, null, null, -1);\n+        postEvent(true, ModificationEventType.ADD_INDEXED, index + viewOffset, object, 1, null, null, -1);\n     }\n \n     //-----------------------------------------------------------------------\n      * @return true to process modification\n      */\n     protected boolean preAddIterated(int index, Object object) {\n-        return preEvent(ModificationEventType.ADD_ITERATED, index + rangeOffset, object, 1, null, null, -1);\n+        return preEvent(ModificationEventType.ADD_ITERATED, index + viewOffset, object, 1, null, null, -1);\n     }\n \n     /**\n      */\n     protected void postAddIterated(int index, Object object) {\n         // assume collection changed\n-        postEvent(true, ModificationEventType.ADD_ITERATED, index + rangeOffset, object, 1, null, null, -1);\n+        postEvent(true, ModificationEventType.ADD_ITERATED, index + viewOffset, object, 1, null, null, -1);\n     }\n \n     //-----------------------------------------------------------------------\n      * @return true to process modification\n      */\n     protected boolean preAddAllIndexed(int index, Collection coll) {\n-        return preEvent(ModificationEventType.ADD_ALL_INDEXED, index + rangeOffset, coll, 1, null, null, -1);\n+        return preEvent(ModificationEventType.ADD_ALL_INDEXED, index + viewOffset, coll, 1, null, null, -1);\n     }\n \n     /**\n      * @param collChanged  the result from the addAll method\n      */\n     protected void postAddAllIndexed(int index, Collection coll, boolean collChanged) {\n-        postEvent(collChanged, ModificationEventType.ADD_ALL_INDEXED, index + rangeOffset, coll, 1, null, null, -1);\n+        postEvent(collChanged, ModificationEventType.ADD_ALL_INDEXED, index + viewOffset, coll, 1, null, null, -1);\n     }\n \n     //-----------------------------------------------------------------------\n     protected boolean preRemoveIndexed(int index) {\n         // could do a get(index) to determine previousValue\n         // we don't for performance, but subclass may override\n-        return preEvent(ModificationEventType.REMOVE_INDEXED, index + rangeOffset, null, 1, null, null, -1);\n+        return preEvent(ModificationEventType.REMOVE_INDEXED, index + viewOffset, null, 1, null, null, -1);\n     }\n \n     /**\n      * @param previousValue  the result from the remove method\n      */\n     protected void postRemoveIndexed(int index, Object previousValue) {\n-        postEvent(true, ModificationEventType.REMOVE_INDEXED, index + rangeOffset, null, 1, previousValue, null, -1);\n+        postEvent(true, ModificationEventType.REMOVE_INDEXED, index + viewOffset, null, 1, previousValue, null, -1);\n     }\n \n     //-----------------------------------------------------------------------\n      * @return true to process modification\n      */\n     protected boolean preRemoveIterated(int index, Object removedValue) {\n-        return preEvent(ModificationEventType.REMOVE_ITERATED, index + rangeOffset, removedValue, 1, removedValue, null, -1);\n+        return preEvent(ModificationEventType.REMOVE_ITERATED, index + viewOffset, removedValue, 1, removedValue, null, -1);\n     }\n \n     /**\n      */\n     protected void postRemoveIterated(int index, Object removedValue) {\n         // assume collection changed\n-        postEvent(true, ModificationEventType.REMOVE_ITERATED, index + rangeOffset, removedValue, 1, removedValue, null, -1);\n+        postEvent(true, ModificationEventType.REMOVE_ITERATED, index + viewOffset, removedValue, 1, removedValue, null, -1);\n     }\n \n     //-----------------------------------------------------------------------\n     protected boolean preSetIndexed(int index, Object object) {\n         // could do a get(index) to determine previousValue\n         // we don't for performance, but subclass may override\n-        return preEvent(ModificationEventType.SET_INDEXED, index + rangeOffset, object, 1, null, null, -1);\n+        return preEvent(ModificationEventType.SET_INDEXED, index + viewOffset, object, 1, null, null, -1);\n     }\n \n     /**\n      */\n     protected void postSetIndexed(int index, Object object, Object previousValue) {\n         // reference check for modification, in case equals() has issues (eg. performance)\n-        postEvent((object != previousValue), ModificationEventType.SET_INDEXED, index + rangeOffset, object, 1, previousValue, null, -1);\n+        postEvent((object != previousValue), ModificationEventType.SET_INDEXED, index + viewOffset, object, 1, previousValue, null, -1);\n     }\n \n     //-----------------------------------------------------------------------\n      * @return true to process modification\n      */\n     protected boolean preSetIterated(int index, Object object, Object previousValue) {\n-        return preEvent(ModificationEventType.SET_ITERATED, index + rangeOffset, object, 1, previousValue, null, -1);\n+        return preEvent(ModificationEventType.SET_ITERATED, index + viewOffset, object, 1, previousValue, null, -1);\n     }\n \n     /**\n      */\n     protected void postSetIterated(int index, Object object, Object previousValue) {\n         // reference check for modification, in case equals() has issues (eg. performance)\n-        postEvent((object != previousValue), ModificationEventType.SET_ITERATED, index + rangeOffset, object, 1, previousValue, null, -1);\n-    }\n-\n-    // Views\n+        postEvent((object != previousValue), ModificationEventType.SET_ITERATED, index + viewOffset, object, 1, previousValue, null, -1);\n+    }\n+\n+    // SortedSet Views\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Creates a new handler for SortedSet subSet.\n+     * \n+     * @param fromElement  the from element\n+     * @param toElement  the to element\n+     */\n+    protected ModificationHandler createSubSetHandler(Object fromElement, Object toElement) {\n+        return new SetViewHandler(rootHandler);\n+    }\n+    \n+    /**\n+     * Creates a new handler for SortedSet headSet.\n+     * \n+     * @param toElement  the to element\n+     */\n+    protected ModificationHandler createHeadSetHandler(Object toElement) {\n+        return new SetViewHandler(rootHandler);\n+    }\n+    \n+    /**\n+     * Creates a new handler for SortedSet tailSet.\n+     * \n+     * @param fromElement  the from element\n+     */\n+    protected ModificationHandler createTailSetHandler(Object fromElement) {\n+        return new SetViewHandler(rootHandler);\n+    }\n+    \n+    /**\n+     * Inner class for views.\n+     */    \n+    protected static class SetViewHandler extends ModificationHandler {\n+        \n+        /**\n+         * Constructor.\n+         * \n+         * @param rootHandler  the base underlying handler\n+         */\n+        protected SetViewHandler(ModificationHandler rootHandler) {\n+            super(rootHandler, 0);\n+        }\n+\n+        /**\n+         * Override the preEvent method to forward all events to the \n+         * underlying handler. This method also inserts details of the view\n+         * that caused the event.\n+         */\n+        protected boolean preEvent(\n+                int type, int index, Object object, int repeat,\n+                Object previous, ObservableCollection ignoredView, int offset) {\n+\n+            return getRootHandler().preEvent(\n+                type, index, object, repeat,\n+                previous, getObservedCollection(), offset);\n+        }\n+\n+        /**\n+         * Override the postEvent method to forward all events to the \n+         * underlying handler. This method also inserts details of the view\n+         * that caused the event.\n+         */\n+        protected void postEvent(\n+                boolean modified, int type, int index, Object object, int repeat,\n+                Object previous, ObservableCollection ignoredView, int offset) {\n+\n+            getRootHandler().postEvent(\n+                modified, type, index, object, repeat,\n+                previous, getObservedCollection(), offset);\n+        }\n+    }\n+    \n+    // List View\n     //-----------------------------------------------------------------------\n     /**\n      * Creates a new handler for subLists that is aware of the offset.\n      * @param toIndex  the sublist toIndex (exclusive)\n      */\n     protected ModificationHandler createSubListHandler(int fromIndex, int toIndex) {\n-        return new SubListHandler(rootHandler, fromIndex + rangeOffset);\n-    }\n-    \n+        return new SubListHandler(rootHandler, fromIndex + viewOffset);\n+    }\n+\n+    /**\n+     * Inner class for subLists.\n+     */    \n     protected static class SubListHandler extends ModificationHandler {\n         \n         /**\n          * Constructor.\n          * \n          * @param rootHandler  the base underlying handler\n-         * @param rangeOffset  the offset on the base collection\n+         * @param viewOffset  the offset on the base collection\n          */\n-        protected SubListHandler(ModificationHandler rootHandler, int rangeOffset) {\n-            super(rootHandler, rangeOffset);\n+        protected SubListHandler(ModificationHandler rootHandler, int viewOffset) {\n+            super(rootHandler, viewOffset);\n         }\n \n         /**\n          * Override the preEvent method to forward all events to the \n-         * underlying handler. This method also inserts details of the range\n+         * underlying handler. This method also inserts details of the view\n          * that caused the event.\n          */\n         protected boolean preEvent(\n                 int type, int index, Object object, int repeat,\n-                Object previous, ObservableCollection ignoredRange, int ignoredOffset) {\n+                Object previous, ObservableCollection ignoredView, int ignoredOffset) {\n \n             return getRootHandler().preEvent(\n                 type, index, object, repeat,\n-                previous, getObservedCollection(), getRangeOffset());\n+                previous, getObservedCollection(), getViewOffset());\n         }\n \n         /**\n          * Override the postEvent method to forward all events to the \n-         * underlying handler. This method also inserts details of the range\n+         * underlying handler. This method also inserts details of the view\n          * that caused the event.\n          */\n         protected void postEvent(\n                 boolean modified, int type, int index, Object object, int repeat,\n-                Object previous, ObservableCollection ignoredRange, int ignoredOffset) {\n+                Object previous, ObservableCollection ignoredView, int ignoredOffset) {\n \n             getRootHandler().postEvent(\n                 modified, type, index, object, repeat,\n-                previous, getObservedCollection(), getRangeOffset());\n+                previous, getObservedCollection(), getViewOffset());\n         }\n     }\n     \n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/observed/ObservableSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableSortedSet.java,v 1.1 2003/09/21 20:01:53 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.observed;\n+\n+import java.util.Comparator;\n+import java.util.SortedSet;\n+\n+/**\n+ * Decorates a <code>SortedSet</code> implementation to observe modifications.\n+ * <p>\n+ * Each modifying method call made on this <code>SortedSet</code> is forwarded to a\n+ * {@link ModificationHandler}.\n+ * The handler manages the event, notifying listeners and optionally vetoing changes.\n+ * The default handler is {@link StandardModificationHandler}.\n+ * See this class for details of configuration available.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/21 20:01:53 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class ObservableSortedSet extends ObservableSet implements SortedSet {\n+    \n+    // Factories\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Factory method to create an observable set.\n+     * <p>\n+     * A {@link StandardModificationHandler} will be created.\n+     * This can be accessed by {@link #getHandler()} to add listeners.\n+     *\n+     * @param set  the set to decorate, must not be null\n+     * @return the observed Set\n+     * @throws IllegalArgumentException if the collection is null\n+     */\n+    public static ObservableSortedSet decorate(final SortedSet set) {\n+        return new ObservableSortedSet(set, null);\n+    }\n+\n+    /**\n+     * Factory method to create an observable set using a listener or a handler.\n+     * <p>\n+     * A lot of functionality is available through this method.\n+     * If you don't need the extra functionality, simply implement the\n+     * {@link org.apache.commons.collections.observed.standard.StandardModificationListener}\n+     * interface and pass it in as the second parameter.\n+     * <p>\n+     * Internally, an <code>ObservableSet</code> relies on a {@link ModificationHandler}.\n+     * The handler receives all the events and processes them, typically by\n+     * calling listeners. Different handler implementations can be plugged in\n+     * to provide a flexible event system.\n+     * <p>\n+     * The handler implementation is determined by the listener parameter via\n+     * the registered factories. The listener may be a manually configured \n+     * <code>ModificationHandler</code> instance.\n+     * <p>\n+     * The listener is defined as an Object for maximum flexibility.\n+     * It does not have to be a listener in the classic JavaBean sense.\n+     * It is entirely up to the factory and handler as to how the parameter\n+     * is interpretted. An IllegalArgumentException is thrown if no suitable\n+     * handler can be found for this listener.\n+     * <p>\n+     * A <code>null</code> listener will create a {@link StandardModificationHandler}.\n+     *\n+     * @param set  the set to decorate, must not be null\n+     * @param listener  set listener, may be null\n+     * @return the observed set\n+     * @throws IllegalArgumentException if the set is null\n+     * @throws IllegalArgumentException if there is no valid handler for the listener\n+     */\n+    public static ObservableSortedSet decorate(\n+            final SortedSet set,\n+            final Object listener) {\n+        \n+        if (set == null) {\n+            throw new IllegalArgumentException(\"Set must not be null\");\n+        }\n+        return new ObservableSortedSet(set, listener);\n+    }\n+\n+    // Constructors\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies) and takes a handler.\n+     * <p>\n+     * The handler implementation is determined by the listener parameter via\n+     * the registered factories. The listener may be a manually configured \n+     * <code>ModificationHandler</code> instance.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param listener  the listener, may be null\n+     * @throws IllegalArgumentException if the set is null\n+     */\n+    protected ObservableSortedSet(\n+            final SortedSet set,\n+            final Object listener) {\n+        super(set, listener);\n+    }\n+\n+    /**\n+     * Typecast the collection to a SortedSet.\n+     * \n+     * @return the wrapped collection as a SortedSet\n+     */\n+    private SortedSet getSortedSet() {\n+        return (SortedSet) getCollection();\n+    }\n+\n+    // SortedSet API\n+    //-----------------------------------------------------------------------\n+    public Comparator comparator() {\n+        return getSortedSet().comparator();\n+    }\n+\n+    public Object first() {\n+        return getSortedSet().first();\n+    }\n+\n+    public Object last() {\n+        return getSortedSet().last();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public SortedSet subSet(Object fromElement, Object toElement) {\n+        SortedSet subSet = getSortedSet().subSet(fromElement, toElement);\n+        return new ObservableSortedSet(subSet, getHandler().createSubSetHandler(fromElement, toElement));\n+    }\n+\n+    public SortedSet headSet(Object toElement) {\n+        SortedSet headSet = getSortedSet().headSet(toElement);\n+        return new ObservableSortedSet(headSet, getHandler().createHeadSetHandler(toElement));\n+    }\n+\n+    public SortedSet tailSet(Object fromElement) {\n+        SortedSet tailSet = getSortedSet().tailSet(fromElement);\n+        return new ObservableSortedSet(tailSet, getHandler().createTailSetHandler(fromElement));\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/observed/ObservedTestHelper.java\n+++ b/src/test/org/apache/commons/collections/observed/ObservedTestHelper.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/ObservedTestHelper.java,v 1.8 2003/09/21 16:00:55 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/ObservedTestHelper.java,v 1.9 2003/09/21 20:01:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n+import java.util.SortedSet;\n \n import junit.framework.Assert;\n \n  * {@link ObservedCollection} implementations.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2003/09/21 16:00:55 $\n+ * @version $Revision: 1.9 $ $Date: 2003/09/21 20:01:53 $\n  * \n  * @author Stephen Colebourne\n  */\n         Assert.assertTrue(factory.createObservedCollection(new StandardModificationHandler()) instanceof ObservableSet);\n         \n         bulkTestObservedCollection(factory);\n+    }\n+    \n+    public static void bulkTestObservedSortedSet(ObservedFactory factory) {\n+        Assert.assertTrue(factory.createObservedCollection() instanceof ObservableSortedSet);\n+        Assert.assertTrue(factory.createObservedCollection(LISTENER) instanceof ObservableSortedSet);\n+        Assert.assertTrue(factory.createObservedCollection(new StandardModificationHandler()) instanceof ObservableSortedSet);\n+        \n+        bulkTestObservedCollection(factory);\n+        // TODO: subSet...\n     }\n     \n     public static void bulkTestObservedList(ObservedFactory factory) {\n         Assert.assertEquals(1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n         \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n         \n-        LISTENER.preEvent = null;\n-        LISTENER.postEvent = null;\n-        Assert.assertEquals(2, coll.size());\n-        coll.add(SIX_SEVEN_LIST);\n-        Assert.assertEquals(3, coll.size());\n-        // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        Assert.assertEquals(ModificationEventType.ADD, LISTENER.preEvent.getType());\n-        Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        Assert.assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeObject());\n-        Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        Assert.assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeCollection().iterator().next());\n-        Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n-        Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n-        // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        Assert.assertEquals(ModificationEventType.ADD, LISTENER.postEvent.getType());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n-        Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeObject());\n-        Assert.assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n-        Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeCollection().iterator().next());\n-        Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.postEvent.getPrevious());\n-        Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n-        Assert.assertEquals(3, LISTENER.postEvent.getPostSize());\n-        Assert.assertEquals(1, LISTENER.postEvent.getSizeChange());\n-        Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+        if (coll instanceof SortedSet == false) {\n+            LISTENER.preEvent = null;\n+            LISTENER.postEvent = null;\n+            Assert.assertEquals(2, coll.size());\n+            coll.add(SIX_SEVEN_LIST);\n+            Assert.assertEquals(3, coll.size());\n+            // pre\n+            Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n+            Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n+            Assert.assertEquals(ModificationEventType.ADD, LISTENER.preEvent.getType());\n+            Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n+            Assert.assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeObject());\n+            Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n+            Assert.assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeCollection().iterator().next());\n+            Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n+            Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n+            Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n+            // post\n+            Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n+            Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n+            Assert.assertEquals(ModificationEventType.ADD, LISTENER.postEvent.getType());\n+            Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n+            Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeObject());\n+            Assert.assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n+            Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeCollection().iterator().next());\n+            Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n+            Assert.assertSame(null, LISTENER.postEvent.getPrevious());\n+            Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n+            Assert.assertEquals(3, LISTENER.postEvent.getPostSize());\n+            Assert.assertEquals(1, LISTENER.postEvent.getSizeChange());\n+            Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n         Assert.assertEquals(1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(3, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(2, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(2, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(-2, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(-1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(-1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(-3, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(-1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(-1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(-1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(-2, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(-1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(0, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(false, LISTENER.postEvent.isSizeChanged());\n \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(0, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(false, LISTENER.postEvent.isSizeChanged());\n \n-        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isView());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getView());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeReduce());\n         Assert.assertEquals(true, LISTENER.postEvent.isTypeChange());\n         Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeObject());\n         Assert.assertEquals(5, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(6, LISTENER.postEvent.getPostSize());\n-        Assert.assertEquals(true, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertSame(subList, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(true, LISTENER.postEvent.isView());\n+        Assert.assertEquals(1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertSame(subList, LISTENER.postEvent.getView());\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeObject());\n         Assert.assertEquals(6, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(7, LISTENER.postEvent.getPostSize());\n-        Assert.assertEquals(true, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertSame(subList, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(true, LISTENER.postEvent.isView());\n+        Assert.assertEquals(1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertSame(subList, LISTENER.postEvent.getView());\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         Assert.assertSame(SIX, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(7, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(7, LISTENER.postEvent.getPostSize());\n-        Assert.assertEquals(true, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertSame(subList, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(true, LISTENER.postEvent.isView());\n+        Assert.assertEquals(1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertSame(subList, LISTENER.postEvent.getView());\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         Assert.assertSame(SEVEN, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(7, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(6, LISTENER.postEvent.getPostSize());\n-        Assert.assertEquals(true, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertSame(subList, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(true, LISTENER.postEvent.isView());\n+        Assert.assertEquals(1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertSame(subList, LISTENER.postEvent.getView());\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         Assert.assertSame(SEVEN, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(6, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(6, LISTENER.postEvent.getPostSize());\n-        Assert.assertEquals(true, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertSame(subList, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(true, LISTENER.postEvent.isView());\n+        Assert.assertEquals(1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertSame(subList, LISTENER.postEvent.getView());\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         Assert.assertSame(null, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(6, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(2, LISTENER.postEvent.getPostSize());\n-        Assert.assertEquals(true, LISTENER.postEvent.isRange());\n-        Assert.assertEquals(1, LISTENER.postEvent.getRangeOffset());\n-        Assert.assertSame(subList, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(true, LISTENER.postEvent.isView());\n+        Assert.assertEquals(1, LISTENER.postEvent.getViewOffset());\n+        Assert.assertSame(subList, LISTENER.postEvent.getView());\n     }\n \n }\n--- a/src/test/org/apache/commons/collections/observed/TestAll.java\n+++ b/src/test/org/apache/commons/collections/observed/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestAll.java,v 1.2 2003/09/07 16:50:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestAll.java,v 1.3 2003/09/21 20:01:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for all collections observed tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/09/07 16:50:59 $\n+ * @version $Revision: 1.3 $ $Date: 2003/09/21 20:01:53 $\n  * \n  * @author Stephen Colebourne\n  */\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         \n-        suite.addTest(TestObservedBag.suite());\n-        suite.addTest(TestObservedBuffer.suite());\n-        suite.addTest(TestObservedCollection.suite());\n-        suite.addTest(TestObservedList.suite());\n-        suite.addTest(TestObservedSet.suite());\n+        suite.addTest(TestObservableBag.suite());\n+        suite.addTest(TestObservableBuffer.suite());\n+        suite.addTest(TestObservableCollection.suite());\n+        suite.addTest(TestObservableList.suite());\n+        suite.addTest(TestObservableSet.suite());\n+        suite.addTest(TestObservableSortedSet.suite());\n         \n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableBag.java,v 1.1 2003/09/21 20:01:53 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.observed;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.HashBag;\n+import org.apache.commons.collections.TestBag;\n+\n+/**\n+ * Extension of {@link TestBag} for exercising the\n+ * {@link ObservableBag} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/21 20:01:53 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestObservableBag extends TestBag implements ObservedTestHelper.ObservedFactory {\n+    \n+    public TestObservableBag(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestObservableBag.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestObservableBag.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Bag makeBag() {\n+        return ObservableBag.decorate(new HashBag(), ObservedTestHelper.LISTENER);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testObservedSet() {\n+        ObservedTestHelper.bulkTestObservedBag(this);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public ObservableCollection createObservedCollection() {\n+        return ObservableBag.decorate(new HashBag());\n+    }\n+\n+    public ObservableCollection createObservedCollection(Object listener) {\n+        return ObservableBag.decorate(new HashBag(), listener);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableBuffer.java,v 1.1 2003/09/21 20:01:53 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.observed;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.ArrayStack;\n+import org.apache.commons.collections.TestCollection;\n+\n+/**\n+ * Extension of {@link TestCollection} for exercising the\n+ * {@link ObservableBuffer} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/21 20:01:53 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestObservableBuffer extends TestCollection implements ObservedTestHelper.ObservedFactory {\n+    \n+    public TestObservableBuffer(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestObservableBuffer.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestObservableBuffer.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Collection makeConfirmedCollection() {\n+        return new ArrayStack();\n+    }\n+\n+    protected Collection makeConfirmedFullCollection() {\n+        ArrayStack stack = new ArrayStack();\n+        stack.addAll(Arrays.asList(getFullElements()));\n+        return stack;\n+    }\n+    \n+    public Collection makeCollection() {\n+        return ObservableBuffer.decorate(new ArrayStack(), ObservedTestHelper.LISTENER);\n+    }\n+\n+    protected Collection makeFullCollection() {\n+        List stack = new ArrayStack();\n+        stack.addAll(Arrays.asList(getFullElements()));\n+        return ObservableBuffer.decorate(stack, ObservedTestHelper.LISTENER);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testObservedBuffer() {\n+        ObservedTestHelper.bulkTestObservedBuffer(this);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public ObservableCollection createObservedCollection() {\n+        return ObservableBuffer.decorate(new ArrayStack());\n+    }\n+\n+    public ObservableCollection createObservedCollection(Object listener) {\n+        return ObservableBuffer.decorate(new ArrayStack(), listener);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableCollection.java,v 1.1 2003/09/21 20:01:53 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.observed;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.TestCollection;\n+\n+/**\n+ * Extension of {@link TestCollection} for exercising the\n+ * {@link ObservedCollection} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/21 20:01:53 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestObservableCollection extends TestCollection implements ObservedTestHelper.ObservedFactory {\n+    \n+    public TestObservableCollection(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestObservableCollection.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestObservableCollection.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Collection makeConfirmedCollection() {\n+        return new ArrayList();\n+    }\n+\n+    protected Collection makeConfirmedFullCollection() {\n+        List list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+    \n+    public Collection makeCollection() {\n+        return ObservableCollection.decorate(new ArrayList(), ObservedTestHelper.LISTENER);\n+    }\n+\n+    protected Collection makeFullCollection() {\n+        List list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return ObservableCollection.decorate(list, ObservedTestHelper.LISTENER);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testObservedCollection() {\n+        ObservedTestHelper.bulkTestObservedCollection(this);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public ObservableCollection createObservedCollection() {\n+        return ObservableCollection.decorate(new ArrayList());\n+    }\n+\n+    public ObservableCollection createObservedCollection(Object listener) {\n+        return ObservableCollection.decorate(new ArrayList(), listener);\n+    }\n+\n+//  public void testFactoryWithMasks() {\n+//      ObservedCollection coll = ObservedCollection.decorate(new ArrayList(), LISTENER, -1, 0);\n+//      LISTENER.preEvent = null;\n+//      LISTENER.postEvent = null;\n+//      coll.add(SIX);\n+//      assertTrue(LISTENER.preEvent != null);\n+//      assertTrue(LISTENER.postEvent == null);\n+//        \n+//      coll = ObservedCollection.decorate(new ArrayList(), LISTENER, 0, -1);\n+//      LISTENER.preEvent = null;\n+//      LISTENER.postEvent = null;\n+//      coll.add(SIX);\n+//      assertTrue(LISTENER.preEvent == null);\n+//      assertTrue(LISTENER.postEvent != null);\n+//        \n+//      coll = ObservedCollection.decorate(new ArrayList(), LISTENER, -1, -1);\n+//      LISTENER.preEvent = null;\n+//      LISTENER.postEvent = null;\n+//      coll.add(SIX);\n+//      assertTrue(LISTENER.preEvent != null);\n+//      assertTrue(LISTENER.postEvent != null);\n+//        \n+//      coll = ObservedCollection.decorate(new ArrayList(), LISTENER, 0, 0);\n+//      LISTENER.preEvent = null;\n+//      LISTENER.postEvent = null;\n+//      coll.add(SIX);\n+//      assertTrue(LISTENER.preEvent == null);\n+//      assertTrue(LISTENER.postEvent == null);\n+//        \n+//      coll = ObservedCollection.decorate(new ArrayList(), LISTENER, ModificationEventType.ADD, ModificationEventType.ADD_ALL);\n+//      LISTENER.preEvent = null;\n+//      LISTENER.postEvent = null;\n+//      coll.add(SIX);\n+//      assertTrue(LISTENER.preEvent != null);\n+//      assertTrue(LISTENER.postEvent == null);\n+//  }\n+//    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableList.java,v 1.1 2003/09/21 20:01:53 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.observed;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.TestList;\n+\n+/**\n+ * Extension of {@link TestList} for exercising the\n+ * {@link ObservedList} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/21 20:01:53 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestObservableList extends TestList implements ObservedTestHelper.ObservedFactory {\n+    \n+    public TestObservableList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestObservableList.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestObservableList.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public List makeEmptyList() {\n+        return ObservableList.decorate(new ArrayList(), ObservedTestHelper.LISTENER);\n+    }\n+\n+    protected List makeFullList() {\n+        List set = new ArrayList();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return ObservableList.decorate(set, ObservedTestHelper.LISTENER);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testObservedList() {\n+        ObservedTestHelper.bulkTestObservedList(this);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public ObservableCollection createObservedCollection() {\n+        return ObservableList.decorate(new ArrayList());\n+    }\n+\n+    public ObservableCollection createObservedCollection(Object listener) {\n+        return ObservableList.decorate(new ArrayList(), listener);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSet.java,v 1.1 2003/09/21 20:01:53 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.observed;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.TestSet;\n+\n+/**\n+ * Extension of {@link TestSet} for exercising the\n+ * {@link ObservedSet} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/21 20:01:53 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestObservableSet extends TestSet implements ObservedTestHelper.ObservedFactory {\n+    \n+    public TestObservableSet(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestObservableSet.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestObservableSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Set makeEmptySet() {\n+        return ObservableSet.decorate(new HashSet(), ObservedTestHelper.LISTENER);\n+    }\n+\n+    protected Set makeFullSet() {\n+        Set set = new HashSet();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return ObservableSet.decorate(set, ObservedTestHelper.LISTENER);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testObservedSet() {\n+        ObservedTestHelper.bulkTestObservedSet(this);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public ObservableCollection createObservedCollection() {\n+        return ObservableSet.decorate(new HashSet());\n+    }\n+\n+    public ObservableCollection createObservedCollection(Object listener) {\n+        return ObservableSet.decorate(new HashSet(), listener);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSortedSet.java,v 1.1 2003/09/21 20:01:53 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.observed;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.TestSortedSet;\n+\n+/**\n+ * Extension of {@link TestSet} for exercising the\n+ * {@link ObservedSet} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/21 20:01:53 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestObservableSortedSet extends TestSortedSet implements ObservedTestHelper.ObservedFactory {\n+    \n+    public TestObservableSortedSet(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestObservableSortedSet.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestObservableSortedSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Set makeEmptySet() {\n+        return ObservableSortedSet.decorate(new TreeSet(), ObservedTestHelper.LISTENER);\n+    }\n+\n+    protected Set makeFullSet() {\n+        Set set = new TreeSet();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return ObservableSortedSet.decorate(set, ObservedTestHelper.LISTENER);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testObservedSortedSet() {\n+        ObservedTestHelper.bulkTestObservedSortedSet(this);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public ObservableCollection createObservedCollection() {\n+        return ObservableSortedSet.decorate(new TreeSet());\n+    }\n+\n+    public ObservableCollection createObservedCollection(Object listener) {\n+        return ObservableSortedSet.decorate(new TreeSet(), listener);\n+    }\n+\n+}", "timestamp": 1064174513, "metainfo": ""}