{"sha": "6516216f09ac380163e8e98d77178af81bbae6cc", "log": "[COLLECTIONS-429] Fix containsAll in case coll2 contains the same value multiple times.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n             return getFreq(obj, cardinalityB);\n         }\n \n+        public int sizeA() {\n+            return cardinalityA.size();\n+        }\n+        \n+        public int sizeB() {\n+            return cardinalityB.size();\n+        }\n+\n         private final int getFreq(final Object obj, final Map<?, Integer> freqMap) {\n             final Integer count = freqMap.get(obj);\n             if (count != null) {\n \n     /**\n      * Returns <code>true</code> iff all elements of {@code coll2} are also contained\n-     * in {@code coll1}.\n+     * in {@code coll1}. The cardinality of values in {@code coll2} is not taken into account,\n+     * which is the same behavior as {@link Collection#containsAll(Collection)}.\n      * <p>\n      * In other words, this method returns <code>true</code> iff the\n      * {@link #intersection} of <i>coll1</i> and <i>coll2</i> has the same cardinality as\n-     * {@code coll2}. In case {@code coll2} is empty, {@code true} will be returned.\n+     * the set of unique values from {@code coll2}. In case {@code coll2} is empty, {@code true}\n+     * will be returned.\n      * <p>\n      * This method is intended as a replacement for {@link Collection#containsAll(Collection)}\n      * with a guaranteed runtime complexity of {@code O(n)}. Depending on the type of\n      * @param coll1  the first collection, must not be null\n      * @param coll2  the second collection, must not be null\n      * @return <code>true</code> iff the intersection of the collections has the same cardinality\n-     *   of the second collection\n+     *   as the set of unique elements from the second collection\n      * @since 4.0\n-     * @see #intersection\n      */\n     public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2) {\n         if (coll2.isEmpty()) {\n             return true;\n         } else {\n-            Collection<Object> result = CollectionUtils.<Object>intersection(coll1, coll2);\n-            return result.size() == coll2.size();\n+            final SetOperationCardinalityHelper<Object> helper =\n+                    new SetOperationCardinalityHelper<Object>(coll1, coll2);\n+            for (final Object obj : helper) {\n+                helper.setCardinality(obj, helper.min(obj));\n+            }\n+            return helper.list().size() == helper.sizeB();\n         }\n     }\n     \n--- a/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n         final Collection<String> odds = new ArrayList<String>(2);\n         odds.add(\"1\");\n         odds.add(\"3\");\n+        final Collection<String> multiples = new ArrayList<String>(3);\n+        multiples.add(\"1\");\n+        multiples.add(\"3\");\n+        multiples.add(\"1\");\n \n         assertTrue(\"containsAll({1},{1,3}) should return false.\", !CollectionUtils.containsAll(one, odds));\n         assertTrue(\"containsAll({1,3},{1}) should return true.\", CollectionUtils.containsAll(odds, one));\n         assertTrue(\"containsAll({1,3},{}) should return true.\", CollectionUtils.containsAll(odds, empty));\n         assertTrue(\"containsAll({},{1,3}) should return false.\", !CollectionUtils.containsAll(empty, odds));\n         assertTrue(\"containsAll({},{}) should return true.\", CollectionUtils.containsAll(empty, empty));\n+\n+        assertTrue(\"containsAll({1,3},{1,3,1}) should return true.\", CollectionUtils.containsAll(odds, multiples));\n+        assertTrue(\"containsAll({1,3,1},{1,3,1}) should return true.\", CollectionUtils.containsAll(odds, odds));\n+        assertTrue(\"containsAll({1,3,1},{1,3,1}) should return true.\", CollectionUtils.containsAll(odds, odds));\n     }\n \n     @Test", "timestamp": 1359558631, "metainfo": ""}