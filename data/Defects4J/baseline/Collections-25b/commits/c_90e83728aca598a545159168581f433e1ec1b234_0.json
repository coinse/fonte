{"sha": "90e83728aca598a545159168581f433e1ec1b234", "log": "Change all calls from assert() to assertTrue() -- introduced in JUnit 3.7 -- to avoid future conflicts with the JDK standard assertion capability.   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestArrayIterator.java\n+++ b/src/test/org/apache/commons/collections/TestArrayIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestArrayIterator.java,v 1.2 2001/06/05 07:20:10 jstrachan Exp $\n- * $Revision: 1.2 $\n- * $Date: 2001/06/05 07:20:10 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestArrayIterator.java,v 1.3 2001/07/14 23:33:26 craigmcc Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2001/07/14 23:33:26 $\n  *\n  * ====================================================================\n  *\n  *\n  * @author James Strachan\n  * @author Mauricio S. Moura\n- * @version $Id: TestArrayIterator.java,v 1.2 2001/06/05 07:20:10 jstrachan Exp $\n+ * @version $Id: TestArrayIterator.java,v 1.3 2001/07/14 23:33:26 craigmcc Exp $\n  */\n public class TestArrayIterator extends TestObject {\n     \n             assertEquals( \"Iteration value is correct\", testValue, iterValue );\n         }\n         \n-        assert(\"Iterator should now be empty\", ! iter.hasNext() );\n+        assertTrue(\"Iterator should now be empty\", ! iter.hasNext() );\n \n \ttry {\n \t    Object testValue = iter.next();\n \t} catch (Exception e) {\n-\t  assert(\"NoSuchElementException must be thrown\", \n+\t  assertTrue(\"NoSuchElementException must be thrown\", \n \t\t e.getClass().equals((new NoSuchElementException()).getClass()));\n \t}\n     }\n--- a/src/test/org/apache/commons/collections/TestArrayList.java\n+++ b/src/test/org/apache/commons/collections/TestArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestArrayList.java,v 1.1 2001/04/21 12:22:30 craigmcc Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/04/21 12:22:30 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestArrayList.java,v 1.2 2001/07/14 23:33:26 craigmcc Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2001/07/14 23:33:26 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n- * @version $Id: TestArrayList.java,v 1.1 2001/04/21 12:22:30 craigmcc Exp $\n+ * @version $Id: TestArrayList.java,v 1.2 2001/07/14 23:33:26 craigmcc Exp $\n  */\n public class TestArrayList extends TestList\n {\n \n     public void testNewArrayList()\n     {\n-        assert(\"New list is empty\", list.isEmpty());\n+        assertTrue(\"New list is empty\", list.isEmpty());\n         assertEquals(\"New list has size zero\", list.size(), 0);\n \n         try\n--- a/src/test/org/apache/commons/collections/TestArrayStack.java\n+++ b/src/test/org/apache/commons/collections/TestArrayStack.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestArrayStack.java,v 1.4 2001/04/21 12:22:30 craigmcc Exp $\n- * $Revision: 1.4 $\n- * $Date: 2001/04/21 12:22:30 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestArrayStack.java,v 1.5 2001/07/14 23:33:26 craigmcc Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2001/07/14 23:33:26 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * @author Craig McClanahan\n- * @version $Id: TestArrayStack.java,v 1.4 2001/04/21 12:22:30 craigmcc Exp $\n+ * @version $Id: TestArrayStack.java,v 1.5 2001/07/14 23:33:26 craigmcc Exp $\n  */\n \n public class TestArrayStack extends TestArrayList {\n \n     public void testNewStack() {\n \n-        assert(\"New stack is empty\", stack.empty());\n+        assertTrue(\"New stack is empty\", stack.empty());\n         assertEquals(\"New stack has size zero\", stack.size(), 0);\n \n         try {\n     public void testPushPeekPop() {\n \n         stack.push(\"First Item\");\n-        assert(\"Stack is not empty\", !stack.empty());\n+        assertTrue(\"Stack is not empty\", !stack.empty());\n         assertEquals(\"Stack size is one\", stack.size(), 1);\n         assertEquals(\"Top item is 'First Item'\",\n                      (String) stack.peek(), \"First Item\");\n--- a/src/test/org/apache/commons/collections/TestCollection.java\n+++ b/src/test/org/apache/commons/collections/TestCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCollection.java,v 1.4 2001/04/24 23:48:04 rwaldhoff Exp $\n- * $Revision: 1.4 $\n- * $Date: 2001/04/24 23:48:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCollection.java,v 1.5 2001/07/14 23:33:27 craigmcc Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2001/07/14 23:33:27 $\n  *\n  * ====================================================================\n  *\n  * test case (method) your {@link Collection} fails.\n  *\n  * @author Rodney Waldhoff\n- * @version $Id: TestCollection.java,v 1.4 2001/04/24 23:48:04 rwaldhoff Exp $\n+ * @version $Id: TestCollection.java,v 1.5 2001/07/14 23:33:27 craigmcc Exp $\n  */\n public abstract class TestCollection extends TestObject {\n     public TestCollection(String testName) {\n         }\n \n         if(cleared) {\n-            assert(\"After Collection.clear(), Collection.isEmpty() should be true.\",c.isEmpty());\n-        }\n-\n-        boolean added = tryToAdd(c,\"element1\");\n-\n-        if(added) {\n-            assert(\"After element is added, Collection.isEmpty() should be false.\",!c.isEmpty());\n+            assertTrue(\"After Collection.clear(), Collection.isEmpty() should be true.\",c.isEmpty());\n+        }\n+\n+        boolean added = tryToAdd(c,\"element1\");\n+\n+        if(added) {\n+            assertTrue(\"After element is added, Collection.isEmpty() should be false.\",!c.isEmpty());\n             boolean cleared2 = false;\n             try {\n                 c.clear();\n                 fail(\"Collection.clear should only throw UnsupportedOperationException. Found \" + t.toString());\n             }\n             if(cleared2) {\n-                assert(\"After Collection.clear(), Collection.isEmpty() should be true.\",c.isEmpty());\n+                assertTrue(\"After Collection.clear(), Collection.isEmpty() should be true.\",c.isEmpty());\n             }\n         }\n     }\n \n     public void testCollectionContains() {\n         Collection c = makeCollection();\n-        assert(\"Empty Collection shouldn't contain element.\",!c.contains(\"element1\"));\n+        assertTrue(\"Empty Collection shouldn't contain element.\",!c.contains(\"element1\"));\n         boolean added1 = tryToAdd(c,\"element1\");\n-        assert(\"[1] If an element was added, it should be contained, if it wasn't, it shouldn't.\",added1 == c.contains(\"element1\"));\n-\n-        assert(\"Shouldn't be contained.\",!c.contains(\"element2\"));\n+        assertTrue(\"[1] If an element was added, it should be contained, if it wasn't, it shouldn't.\",added1 == c.contains(\"element1\"));\n+\n+        assertTrue(\"Shouldn't be contained.\",!c.contains(\"element2\"));\n         boolean added2 = tryToAdd(c,\"element2\");\n-        assert(\"[2] If an element was added, it should be contained, if it wasn't, it shouldn't.\",added1 == c.contains(\"element1\"));\n-        assert(\"[3] If an element was added, it should be contained, if it wasn't, it shouldn't.\",added2 == c.contains(\"element2\"));\n+        assertTrue(\"[2] If an element was added, it should be contained, if it wasn't, it shouldn't.\",added1 == c.contains(\"element1\"));\n+        assertTrue(\"[3] If an element was added, it should be contained, if it wasn't, it shouldn't.\",added2 == c.contains(\"element2\"));\n     }\n \n     public void testCollectionContainsAll() {\n         Collection c = makeCollection();\n         Collection col = new ArrayList();\n-        assert(\"Every Collection should contain all elements of an empty Collection.\",c.containsAll(col));\n+        assertTrue(\"Every Collection should contain all elements of an empty Collection.\",c.containsAll(col));\n         col.add(\"element1\");\n-        assert(\"Empty Collection shouldn't contain all elements of a non-empty Collection.\",!c.containsAll(col));\n+        assertTrue(\"Empty Collection shouldn't contain all elements of a non-empty Collection.\",!c.containsAll(col));\n \n         boolean added1 = tryToAdd(c,\"element1\");\n         if(added1) {\n-            assert(\"[1] Should contain all.\",c.containsAll(col));\n+            assertTrue(\"[1] Should contain all.\",c.containsAll(col));\n         }\n \n         col.add(\"element2\");\n-        assert(\"Shouldn't contain all.\",!c.containsAll(col));\n+        assertTrue(\"Shouldn't contain all.\",!c.containsAll(col));\n \n         boolean added2 = tryToAdd(c,\"element2\");\n         if(added1 && added2) {\n-            assert(\"[2] Should contain all.\",c.containsAll(col));\n+            assertTrue(\"[2] Should contain all.\",c.containsAll(col));\n         }\n     }\n \n \n         boolean added1_1 = tryToAdd(c1,\"element1\");\n         if(added1_1) {\n-            assert(\"Empty Collection not equal to non-empty Collection.\",!c2.equals(c1));\n-            assert(\"Non-empty Collection not equal to empty Collection.\",!c1.equals(c2));\n+            assertTrue(\"Empty Collection not equal to non-empty Collection.\",!c2.equals(c1));\n+            assertTrue(\"Non-empty Collection not equal to empty Collection.\",!c1.equals(c2));\n         }\n \n         boolean added1_2 = tryToAdd(c2,\"element1\");\n         boolean added2_1 = tryToAdd(c1,\"element2\");\n         boolean added3_2 = tryToAdd(c2,\"element3\");\n         if(added2_1 || added3_2) {\n-            assert(\"Should not be equal.\",!c1.equals(c2));\n+            assertTrue(\"Should not be equal.\",!c1.equals(c2));\n         }\n     }\n \n \n     public void testCollectionIsEmpty() {\n         Collection c = makeCollection();\n-        assert(\"New Collection should be empty.\",c.isEmpty());\n-        boolean added = tryToAdd(c,\"element1\");\n-        if(added) {\n-            assert(\"If an element was added, the Collection.isEmpty() should return false.\",!c.isEmpty());\n+        assertTrue(\"New Collection should be empty.\",c.isEmpty());\n+        boolean added = tryToAdd(c,\"element1\");\n+        if(added) {\n+            assertTrue(\"If an element was added, the Collection.isEmpty() should return false.\",!c.isEmpty());\n         }\n     }\n \n     public void testCollectionIterator() {\n         Collection c = makeCollection();\n         Iterator it1 = c.iterator();\n-        assert(\"Iterator for empty Collection shouldn't have next.\",!it1.hasNext());\n+        assertTrue(\"Iterator for empty Collection shouldn't have next.\",!it1.hasNext());\n         try {\n             it1.next();\n             fail(\"Iterator at end of Collection should throw NoSuchElementException when next is called.\");\n         boolean added = tryToAdd(c,\"element1\");\n         if(added) {\n             Iterator it2 = c.iterator();\n-            assert(\"Iterator for non-empty Collection should have next.\",it2.hasNext());\n+            assertTrue(\"Iterator for non-empty Collection should have next.\",it2.hasNext());\n             assertEquals(\"element1\",it2.next());\n-            assert(\"Iterator at end of Collection shouldn't have next.\",!it2.hasNext());\n+            assertTrue(\"Iterator at end of Collection shouldn't have next.\",!it2.hasNext());\n             try {\n                 it2.next();\n                 fail(\"Iterator at end of Collection should throw NoSuchElementException when next is called.\");\n         boolean added = tryToAdd(c,\"element1\");\n \n         try {\n-            assert(\"Shouldn't be able to remove an element that wasn't added.\",!c.remove(\"element2\"));\n+            assertTrue(\"Shouldn't be able to remove an element that wasn't added.\",!c.remove(\"element2\"));\n         } catch(UnsupportedOperationException e) {\n         } catch(Throwable t) {\n             t.printStackTrace();\n         }\n \n         try {\n-            assert(\"If added, should be removed by call to remove.\",added == c.remove(\"element1\"));\n-            assert(\"If removed, shouldn't be contained.\",!c.contains(\"element1\"));\n+            assertTrue(\"If added, should be removed by call to remove.\",added == c.remove(\"element1\"));\n+            assertTrue(\"If removed, shouldn't be contained.\",!c.contains(\"element1\"));\n         } catch(UnsupportedOperationException e) {\n         } catch(Throwable t) {\n             t.printStackTrace();\n     // optional operation\n     public void testCollectionRemoveAll() {\n         Collection c = makeCollection();\n-        assert(\"Initial Collection is empty.\",c.isEmpty());\n+        assertTrue(\"Initial Collection is empty.\",c.isEmpty());\n         try {\n             c.removeAll(c);\n         } catch(UnsupportedOperationException e) {\n             t.printStackTrace();\n             fail(\"Collection.removeAll should only throw UnsupportedOperationException. Found \" + t.toString());\n         }\n-        assert(\"Collection is still empty.\",c.isEmpty());\n-\n-        boolean added = tryToAdd(c,\"element1\");\n-        if(added) {\n-            assert(\"Collection is not empty.\",!c.isEmpty());\n+        assertTrue(\"Collection is still empty.\",c.isEmpty());\n+\n+        boolean added = tryToAdd(c,\"element1\");\n+        if(added) {\n+            assertTrue(\"Collection is not empty.\",!c.isEmpty());\n             try {\n                 c.removeAll(c);\n-                assert(\"Collection is empty.\",c.isEmpty());\n+                assertTrue(\"Collection is empty.\",c.isEmpty());\n             } catch(UnsupportedOperationException e) {\n                 // expected\n             } catch(Throwable t) {\n         }\n         col.add(\"element4\");\n         if(added) {\n-            assert(\"Collection is not empty.\",!c.isEmpty());\n+            assertTrue(\"Collection is not empty.\",!c.isEmpty());\n             try {\n-                assert(\"Should be changed\",c.removeAll(col));\n-                assert(\"Collection is not empty.\",!c.isEmpty());\n-                assert(\"Collection should contain element\",c.contains(\"element0\"));\n-                assert(\"Collection shouldn't contain removed element\",!c.contains(\"element1\"));\n-                assert(\"Collection shouldn't contain removed element\",!c.contains(\"element2\"));\n-                assert(\"Collection shouldn't contain removed element\",!c.contains(\"element3\"));\n-                assert(\"Collection shouldn't contain removed element\",!c.contains(\"element4\"));\n+                assertTrue(\"Should be changed\",c.removeAll(col));\n+                assertTrue(\"Collection is not empty.\",!c.isEmpty());\n+                assertTrue(\"Collection should contain element\",c.contains(\"element0\"));\n+                assertTrue(\"Collection shouldn't contain removed element\",!c.contains(\"element1\"));\n+                assertTrue(\"Collection shouldn't contain removed element\",!c.contains(\"element2\"));\n+                assertTrue(\"Collection shouldn't contain removed element\",!c.contains(\"element3\"));\n+                assertTrue(\"Collection shouldn't contain removed element\",!c.contains(\"element4\"));\n             } catch(UnsupportedOperationException e) {\n                 // expected\n             } catch(Throwable t) {\n         Collection a = makeCollection();\n         Collection b = makeCollection();\n         try {\n-            assert(!a.retainAll(b));\n-            assert(!a.retainAll(a));\n+            assertTrue(!a.retainAll(b));\n+            assertTrue(!a.retainAll(a));\n         } catch(UnsupportedOperationException e) {\n             // expected\n         } catch(Throwable t) {\n \n         boolean added_b = b.add(\"element1\");\n         try {\n-            assert(!a.retainAll(b));\n-            assert(added_b == b.retainAll(a));\n-            assert(b.isEmpty());\n+            assertTrue(!a.retainAll(b));\n+            assertTrue(added_b == b.retainAll(a));\n+            assertTrue(b.isEmpty());\n         } catch(UnsupportedOperationException e) {\n             // expected\n         } catch(Throwable t) {\n         boolean added_a1 = a.add(\"element1\");\n         if(added_b1 && added_b2 && added_a1) {\n             try {\n-                assert(!b.retainAll(b));\n-                assert(b.contains(\"element1\"));\n-                assert(b.contains(\"element2\"));\n-\n-                assert(!a.retainAll(b));\n-\n-                assert(b.retainAll(a));\n-                assert(b.contains(\"element1\"));\n-                assert(!b.contains(\"element2\"));\n+                assertTrue(!b.retainAll(b));\n+                assertTrue(b.contains(\"element1\"));\n+                assertTrue(b.contains(\"element2\"));\n+\n+                assertTrue(!a.retainAll(b));\n+\n+                assertTrue(b.retainAll(a));\n+                assertTrue(b.contains(\"element1\"));\n+                assertTrue(!b.contains(\"element2\"));\n             } catch(UnsupportedOperationException e) {\n                 // expected\n             } catch(Throwable t) {\n             String[] fits = new String[1];\n             String[] small = new String[0];\n             assertSame(fits,c.toArray(fits));\n-            assert(small != c.toArray(small));\n+            assertTrue(small != c.toArray(small));\n         }\n     }\n \n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.1 2001/04/24 18:48:38 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/04/24 18:48:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.2 2001/07/14 23:33:27 craigmcc Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2001/07/14 23:33:27 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * @author Rodney Waldhoff\n- * @version $Id: TestCollectionUtils.java,v 1.1 2001/04/24 18:48:38 rwaldhoff Exp $\n+ * @version $Id: TestCollectionUtils.java,v 1.2 2001/07/14 23:33:27 craigmcc Exp $\n  */\n public class TestCollectionUtils extends TestCase {\n     public TestCollectionUtils(String testName) {\n         assertEquals(new Integer(2),freq.get(\"b\"));\n         assertEquals(new Integer(3),freq.get(\"c\"));\n         assertEquals(new Integer(4),freq.get(\"d\"));\n-        assert(null == freq.get(\"e\"));\n+        assertTrue(null == freq.get(\"e\"));\n \n         freq = CollectionUtils.getCardinalityMap(_b);\n-        assert(null == freq.get(\"a\"));\n+        assertTrue(null == freq.get(\"a\"));\n         assertEquals(new Integer(4),freq.get(\"b\"));\n         assertEquals(new Integer(3),freq.get(\"c\"));\n         assertEquals(new Integer(2),freq.get(\"d\"));\n     public void testIntersection() {\n         Collection col = CollectionUtils.intersection(_a,_b);\n         Map freq = CollectionUtils.getCardinalityMap(col);\n-        assert(null == freq.get(\"a\"));\n+        assertTrue(null == freq.get(\"a\"));\n         assertEquals(new Integer(2),freq.get(\"b\"));\n         assertEquals(new Integer(3),freq.get(\"c\"));\n         assertEquals(new Integer(2),freq.get(\"d\"));\n-        assert(null == freq.get(\"e\"));\n+        assertTrue(null == freq.get(\"e\"));\n \n         Collection col2 = CollectionUtils.intersection(_b,_a);\n         Map freq2 = CollectionUtils.getCardinalityMap(col2);\n-        assert(null == freq2.get(\"a\"));\n+        assertTrue(null == freq2.get(\"a\"));\n         assertEquals(new Integer(2),freq2.get(\"b\"));\n         assertEquals(new Integer(3),freq2.get(\"c\"));\n         assertEquals(new Integer(2),freq2.get(\"d\"));\n-        assert(null == freq2.get(\"e\"));\n+        assertTrue(null == freq2.get(\"e\"));\n     }\n \n     public void testDisjunction() {\n         Map freq = CollectionUtils.getCardinalityMap(col);\n         assertEquals(new Integer(1),freq.get(\"a\"));\n         assertEquals(new Integer(2),freq.get(\"b\"));\n-        assert(null == freq.get(\"c\"));\n+        assertTrue(null == freq.get(\"c\"));\n         assertEquals(new Integer(2),freq.get(\"d\"));\n         assertEquals(new Integer(1),freq.get(\"e\"));\n \n         Map freq2 = CollectionUtils.getCardinalityMap(col2);\n         assertEquals(new Integer(1),freq2.get(\"a\"));\n         assertEquals(new Integer(2),freq2.get(\"b\"));\n-        assert(null == freq2.get(\"c\"));\n+        assertTrue(null == freq2.get(\"c\"));\n         assertEquals(new Integer(2),freq2.get(\"d\"));\n         assertEquals(new Integer(1),freq2.get(\"e\"));\n     }\n         Collection dis = CollectionUtils.disjunction(_a,_b);\n         Collection un = CollectionUtils.union(_a,_b);\n         Collection inter = CollectionUtils.intersection(_a,_b);\n-        assert(CollectionUtils.isEqualCollection(dis,CollectionUtils.subtract(un,inter)));\n+        assertTrue(CollectionUtils.isEqualCollection(dis,CollectionUtils.subtract(un,inter)));\n     }\n \n     public void testDisjunctionAsSymmetricDifference() {\n         Collection dis = CollectionUtils.disjunction(_a,_b);\n         Collection amb = CollectionUtils.subtract(_a,_b);\n         Collection bma = CollectionUtils.subtract(_b,_a);\n-        assert(CollectionUtils.isEqualCollection(dis,CollectionUtils.union(amb,bma)));\n+        assertTrue(CollectionUtils.isEqualCollection(dis,CollectionUtils.union(amb,bma)));\n     }\n \n     public void testSubtract() {\n         Collection col = CollectionUtils.subtract(_a,_b);\n         Map freq = CollectionUtils.getCardinalityMap(col);\n         assertEquals(new Integer(1),freq.get(\"a\"));\n-        assert(null == freq.get(\"b\"));\n-        assert(null == freq.get(\"c\"));\n+        assertTrue(null == freq.get(\"b\"));\n+        assertTrue(null == freq.get(\"c\"));\n         assertEquals(new Integer(2),freq.get(\"d\"));\n-        assert(null == freq.get(\"e\"));\n+        assertTrue(null == freq.get(\"e\"));\n \n         Collection col2 = CollectionUtils.subtract(_b,_a);\n         Map freq2 = CollectionUtils.getCardinalityMap(col2);\n         assertEquals(new Integer(1),freq2.get(\"e\"));\n-        assert(null == freq2.get(\"d\"));\n-        assert(null == freq2.get(\"c\"));\n+        assertTrue(null == freq2.get(\"d\"));\n+        assertTrue(null == freq2.get(\"c\"));\n         assertEquals(new Integer(2),freq2.get(\"b\"));\n-        assert(null == freq2.get(\"a\"));\n+        assertTrue(null == freq2.get(\"a\"));\n     }\n \n     public void testIsSubCollectionOfSelf() {\n-        assert(CollectionUtils.isSubCollection(_a,_a));\n-        assert(CollectionUtils.isSubCollection(_b,_b));\n+        assertTrue(CollectionUtils.isSubCollection(_a,_a));\n+        assertTrue(CollectionUtils.isSubCollection(_b,_b));\n     }\n \n     public void testIsSubCollection() {\n-        assert(!CollectionUtils.isSubCollection(_a,_b));\n-        assert(!CollectionUtils.isSubCollection(_b,_a));\n+        assertTrue(!CollectionUtils.isSubCollection(_a,_b));\n+        assertTrue(!CollectionUtils.isSubCollection(_b,_a));\n     }\n \n     public void testIsSubCollection2() {\n         Collection c = new ArrayList();\n-        assert(CollectionUtils.isSubCollection(c,_a));\n-        assert(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,_a));\n+        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n         c.add(\"a\");\n-        assert(CollectionUtils.isSubCollection(c,_a));\n-        assert(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,_a));\n+        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n         c.add(\"b\");\n-        assert(CollectionUtils.isSubCollection(c,_a));\n-        assert(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,_a));\n+        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n         c.add(\"b\");\n-        assert(CollectionUtils.isSubCollection(c,_a));\n-        assert(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,_a));\n+        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n         c.add(\"c\");\n-        assert(CollectionUtils.isSubCollection(c,_a));\n-        assert(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,_a));\n+        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n         c.add(\"c\");\n-        assert(CollectionUtils.isSubCollection(c,_a));\n-        assert(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,_a));\n+        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n         c.add(\"c\");\n-        assert(CollectionUtils.isSubCollection(c,_a));\n-        assert(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,_a));\n+        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n         c.add(\"d\");\n-        assert(CollectionUtils.isSubCollection(c,_a));\n-        assert(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,_a));\n+        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n         c.add(\"d\");\n-        assert(CollectionUtils.isSubCollection(c,_a));\n-        assert(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,_a));\n+        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n         c.add(\"d\");\n-        assert(CollectionUtils.isSubCollection(c,_a));\n-        assert(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,_a));\n+        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n         c.add(\"d\");\n-        assert(CollectionUtils.isSubCollection(c,_a));\n-        assert(CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,_a));\n+        assertTrue(CollectionUtils.isSubCollection(_a,c));\n         c.add(\"e\");\n-        assert(!CollectionUtils.isSubCollection(c,_a));\n-        assert(CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(!CollectionUtils.isSubCollection(c,_a));\n+        assertTrue(CollectionUtils.isSubCollection(_a,c));\n     }\n \n     public void testIsEqualCollectionToSelf() {\n-        assert(CollectionUtils.isEqualCollection(_a,_a));\n-        assert(CollectionUtils.isEqualCollection(_b,_b));\n+        assertTrue(CollectionUtils.isEqualCollection(_a,_a));\n+        assertTrue(CollectionUtils.isEqualCollection(_b,_b));\n     }\n \n     public void testIsEqualCollection() {\n-        assert(!CollectionUtils.isEqualCollection(_a,_b));\n-        assert(!CollectionUtils.isEqualCollection(_b,_a));\n+        assertTrue(!CollectionUtils.isEqualCollection(_a,_b));\n+        assertTrue(!CollectionUtils.isEqualCollection(_b,_a));\n     }\n \n     public void testIsEqualCollection2() {\n         Collection a = new ArrayList();\n         Collection b = new ArrayList();\n-        assert(CollectionUtils.isEqualCollection(a,b));\n-        assert(CollectionUtils.isEqualCollection(b,a));\n+        assertTrue(CollectionUtils.isEqualCollection(a,b));\n+        assertTrue(CollectionUtils.isEqualCollection(b,a));\n         a.add(\"1\");\n-        assert(!CollectionUtils.isEqualCollection(a,b));\n-        assert(!CollectionUtils.isEqualCollection(b,a));\n+        assertTrue(!CollectionUtils.isEqualCollection(a,b));\n+        assertTrue(!CollectionUtils.isEqualCollection(b,a));\n         b.add(\"1\");\n-        assert(CollectionUtils.isEqualCollection(a,b));\n-        assert(CollectionUtils.isEqualCollection(b,a));\n+        assertTrue(CollectionUtils.isEqualCollection(a,b));\n+        assertTrue(CollectionUtils.isEqualCollection(b,a));\n         a.add(\"2\");\n-        assert(!CollectionUtils.isEqualCollection(a,b));\n-        assert(!CollectionUtils.isEqualCollection(b,a));\n+        assertTrue(!CollectionUtils.isEqualCollection(a,b));\n+        assertTrue(!CollectionUtils.isEqualCollection(b,a));\n         b.add(\"2\");\n-        assert(CollectionUtils.isEqualCollection(a,b));\n-        assert(CollectionUtils.isEqualCollection(b,a));\n+        assertTrue(CollectionUtils.isEqualCollection(a,b));\n+        assertTrue(CollectionUtils.isEqualCollection(b,a));\n         a.add(\"1\");\n-        assert(!CollectionUtils.isEqualCollection(a,b));\n-        assert(!CollectionUtils.isEqualCollection(b,a));\n+        assertTrue(!CollectionUtils.isEqualCollection(a,b));\n+        assertTrue(!CollectionUtils.isEqualCollection(b,a));\n         b.add(\"1\");\n-        assert(CollectionUtils.isEqualCollection(a,b));\n-        assert(CollectionUtils.isEqualCollection(b,a));\n+        assertTrue(CollectionUtils.isEqualCollection(a,b));\n+        assertTrue(CollectionUtils.isEqualCollection(b,a));\n     }\n }\n--- a/src/test/org/apache/commons/collections/TestCursorableLinkedList.java\n+++ b/src/test/org/apache/commons/collections/TestCursorableLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCursorableLinkedList.java,v 1.2 2001/04/20 16:54:07 rwaldhoff Exp $\n- * $Revision: 1.2 $\n- * $Date: 2001/04/20 16:54:07 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCursorableLinkedList.java,v 1.3 2001/07/14 23:33:27 craigmcc Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2001/07/14 23:33:27 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * @author Rodney Waldhoff\n- * @version $Id: TestCursorableLinkedList.java,v 1.2 2001/04/20 16:54:07 rwaldhoff Exp $\n+ * @version $Id: TestCursorableLinkedList.java,v 1.3 2001/07/14 23:33:27 craigmcc Exp $\n  */\n public class TestCursorableLinkedList extends TestList {\n     public TestCursorableLinkedList(String testName) {\n \n     public void testAdd() {\n         assertEquals(\"[]\",list.toString());\n-        assert(list.add(new Integer(1)));\n+        assertTrue(list.add(new Integer(1)));\n         assertEquals(\"[1]\",list.toString());\n-        assert(list.add(new Integer(2)));\n+        assertTrue(list.add(new Integer(2)));\n         assertEquals(\"[1, 2]\",list.toString());\n-        assert(list.add(new Integer(3)));\n+        assertTrue(list.add(new Integer(3)));\n         assertEquals(\"[1, 2, 3]\",list.toString());\n-        assert(list.addFirst(new Integer(0)));\n+        assertTrue(list.addFirst(new Integer(0)));\n         assertEquals(\"[0, 1, 2, 3]\",list.toString());\n-        assert(list.addLast(new Integer(4)));\n+        assertTrue(list.addLast(new Integer(4)));\n         assertEquals(\"[0, 1, 2, 3, 4]\",list.toString());\n         list.add(0,new Integer(-2));\n         assertEquals(\"[-2, 0, 1, 2, 3, 4]\",list.toString());\n         list2.add(\"B\");\n         list2.add(\"C\");\n \n-        assert(list.addAll(list2));\n+        assertTrue(list.addAll(list2));\n         assertEquals(\"[-2, -1, 0, 1, 2, 3, 4, 5, A, B, C]\",list.toString());\n-        assert(list.addAll(3,list2));\n+        assertTrue(list.addAll(3,list2));\n         assertEquals(\"[-2, -1, 0, A, B, C, 1, 2, 3, 4, 5, A, B, C]\",list.toString());\n     }\n \n     public void testClear() {\n         assertEquals(0,list.size());\n-        assert(list.isEmpty());\n+        assertTrue(list.isEmpty());\n         list.clear();\n         assertEquals(0,list.size());\n-        assert(list.isEmpty());\n+        assertTrue(list.isEmpty());\n \n         list.add(\"element\");\n         assertEquals(1,list.size());\n-        assert(!list.isEmpty());\n+        assertTrue(!list.isEmpty());\n \n         list.clear();\n         assertEquals(0,list.size());\n-        assert(list.isEmpty());\n+        assertTrue(list.isEmpty());\n \n         list.add(\"element1\");\n         list.add(\"element2\");\n         assertEquals(2,list.size());\n-        assert(!list.isEmpty());\n+        assertTrue(!list.isEmpty());\n \n         list.clear();\n         assertEquals(0,list.size());\n-        assert(list.isEmpty());\n+        assertTrue(list.isEmpty());\n \n         for(int i=0;i<1000;i++) {\n             list.add(new Integer(i));\n         }\n         assertEquals(1000,list.size());\n-        assert(!list.isEmpty());\n+        assertTrue(!list.isEmpty());\n \n         list.clear();\n         assertEquals(0,list.size());\n-        assert(list.isEmpty());\n+        assertTrue(list.isEmpty());\n     }\n \n     public void testContains() {\n-        assert(!list.contains(\"A\"));\n-        assert(list.add(\"A\"));\n-        assert(list.contains(\"A\"));\n-        assert(list.add(\"B\"));\n-        assert(list.contains(\"A\"));\n-        assert(list.addFirst(\"a\"));\n-        assert(list.contains(\"A\"));\n-        assert(list.remove(\"a\"));\n-        assert(list.contains(\"A\"));\n-        assert(list.remove(\"A\"));\n-        assert(!list.contains(\"A\"));\n+        assertTrue(!list.contains(\"A\"));\n+        assertTrue(list.add(\"A\"));\n+        assertTrue(list.contains(\"A\"));\n+        assertTrue(list.add(\"B\"));\n+        assertTrue(list.contains(\"A\"));\n+        assertTrue(list.addFirst(\"a\"));\n+        assertTrue(list.contains(\"A\"));\n+        assertTrue(list.remove(\"a\"));\n+        assertTrue(list.contains(\"A\"));\n+        assertTrue(list.remove(\"A\"));\n+        assertTrue(!list.contains(\"A\"));\n     }\n \n     public void testContainsAll() {\n-        assert(list.containsAll(list));\n+        assertTrue(list.containsAll(list));\n         java.util.List list2 = new java.util.LinkedList();\n-        assert(list.containsAll(list2));\n+        assertTrue(list.containsAll(list2));\n         list2.add(\"A\");\n-        assert(!list.containsAll(list2));\n+        assertTrue(!list.containsAll(list2));\n         list.add(\"B\");\n         list.add(\"A\");\n-        assert(list.containsAll(list2));\n+        assertTrue(list.containsAll(list2));\n         list2.add(\"B\");\n-        assert(list.containsAll(list2));\n+        assertTrue(list.containsAll(list2));\n         list2.add(\"C\");\n-        assert(!list.containsAll(list2));\n+        assertTrue(!list.containsAll(list2));\n         list.add(\"C\");\n-        assert(list.containsAll(list2));\n+        assertTrue(list.containsAll(list2));\n         list2.add(\"C\");\n-        assert(list.containsAll(list2));\n-        assert(list.containsAll(list));\n+        assertTrue(list.containsAll(list2));\n+        assertTrue(list.containsAll(list));\n     }\n \n     public void testCursorNavigation() {\n         list.add(\"4\");\n         list.add(\"5\");\n         CursorableLinkedList.Cursor it = list.cursor();\n-        assert(it.hasNext());\n-        assert(!it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(!it.hasPrevious());\n         assertEquals(\"1\",it.next());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(\"1\",it.previous());\n-        assert(it.hasNext());\n-        assert(!it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(!it.hasPrevious());\n         assertEquals(\"1\",it.next());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(\"2\",it.next());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(\"2\",it.previous());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(\"2\",it.next());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(\"3\",it.next());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(\"4\",it.next());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(\"5\",it.next());\n-        assert(!it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(!it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(\"5\",it.previous());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(\"4\",it.previous());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(\"3\",it.previous());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(\"2\",it.previous());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(\"1\",it.previous());\n-        assert(it.hasNext());\n-        assert(!it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(!it.hasPrevious());\n         it.close();\n     }\n \n         assertEquals(\"1\",it.previous());\n         it.remove();\n         assertEquals(\"[3, 4, 5]\",list.toString());\n-        assert(!it.hasPrevious());\n+        assertTrue(!it.hasPrevious());\n         assertEquals(\"3\",it.next());\n         it.remove();\n         assertEquals(\"[4, 5]\",list.toString());\n     }\n \n     public void testEqualsAndHashCode() {\n-        assert(list.equals(list));\n+        assertTrue(list.equals(list));\n         assertEquals(list.hashCode(),list.hashCode());\n         list.add(\"A\");\n-        assert(list.equals(list));\n+        assertTrue(list.equals(list));\n         assertEquals(list.hashCode(),list.hashCode());\n \n         CursorableLinkedList list2 = new CursorableLinkedList();\n-        assert(!list.equals(list2));\n-        assert(!list2.equals(list));\n+        assertTrue(!list.equals(list2));\n+        assertTrue(!list2.equals(list));\n \n         java.util.List list3 = new java.util.LinkedList();\n-        assert(!list.equals(list3));\n-        assert(!list3.equals(list));\n-        assert(list2.equals(list3));\n-        assert(list3.equals(list2));\n+        assertTrue(!list.equals(list3));\n+        assertTrue(!list3.equals(list));\n+        assertTrue(list2.equals(list3));\n+        assertTrue(list3.equals(list2));\n         assertEquals(list2.hashCode(),list3.hashCode());\n \n         list2.add(\"A\");\n-        assert(list.equals(list2));\n-        assert(list2.equals(list));\n-        assert(!list2.equals(list3));\n-        assert(!list3.equals(list2));\n+        assertTrue(list.equals(list2));\n+        assertTrue(list2.equals(list));\n+        assertTrue(!list2.equals(list3));\n+        assertTrue(!list3.equals(list2));\n \n         list3.add(\"A\");\n-        assert(list2.equals(list3));\n-        assert(list3.equals(list2));\n+        assertTrue(list2.equals(list3));\n+        assertTrue(list3.equals(list2));\n         assertEquals(list2.hashCode(),list3.hashCode());\n \n         list.add(\"B\");\n-        assert(list.equals(list));\n-        assert(!list.equals(list2));\n-        assert(!list2.equals(list));\n-        assert(!list.equals(list3));\n-        assert(!list3.equals(list));\n+        assertTrue(list.equals(list));\n+        assertTrue(!list.equals(list2));\n+        assertTrue(!list2.equals(list));\n+        assertTrue(!list.equals(list3));\n+        assertTrue(!list3.equals(list));\n \n         list2.add(\"B\");\n         list3.add(\"B\");\n-        assert(list.equals(list));\n-        assert(list.equals(list2));\n-        assert(list2.equals(list));\n-        assert(list2.equals(list3));\n-        assert(list3.equals(list2));\n+        assertTrue(list.equals(list));\n+        assertTrue(list.equals(list2));\n+        assertTrue(list2.equals(list));\n+        assertTrue(list2.equals(list3));\n+        assertTrue(list3.equals(list2));\n         assertEquals(list2.hashCode(),list3.hashCode());\n \n         list.add(\"C\");\n         list2.add(\"C\");\n         list3.add(\"C\");\n-        assert(list.equals(list));\n-        assert(list.equals(list2));\n-        assert(list2.equals(list));\n-        assert(list2.equals(list3));\n-        assert(list3.equals(list2));\n+        assertTrue(list.equals(list));\n+        assertTrue(list.equals(list2));\n+        assertTrue(list2.equals(list));\n+        assertTrue(list2.equals(list3));\n+        assertTrue(list3.equals(list2));\n         assertEquals(list.hashCode(),list2.hashCode());\n         assertEquals(list2.hashCode(),list3.hashCode());\n \n         list.add(\"D\");\n         list2.addFirst(\"D\");\n-        assert(list.equals(list));\n-        assert(!list.equals(list2));\n-        assert(!list2.equals(list));\n+        assertTrue(list.equals(list));\n+        assertTrue(!list.equals(list2));\n+        assertTrue(!list2.equals(list));\n     }\n \n     public void testGet() {\n             // expected\n         }\n \n-        assert(list.add(\"A\"));\n+        assertTrue(list.add(\"A\"));\n         assertEquals(\"A\",list.get(0));\n-        assert(list.add(\"B\"));\n+        assertTrue(list.add(\"B\"));\n         assertEquals(\"A\",list.get(0));\n         assertEquals(\"B\",list.get(1));\n \n     }\n \n     public void testIsEmpty() {\n-        assert(list.isEmpty());\n+        assertTrue(list.isEmpty());\n         list.add(\"element\");\n-        assert(!list.isEmpty());\n+        assertTrue(!list.isEmpty());\n         list.remove(\"element\");\n-        assert(list.isEmpty());\n+        assertTrue(list.isEmpty());\n         list.add(\"element\");\n-        assert(!list.isEmpty());\n+        assertTrue(!list.isEmpty());\n         list.clear();\n-        assert(list.isEmpty());\n+        assertTrue(list.isEmpty());\n     }\n \n     public void testIterator() {\n         list.add(\"4\");\n         list.add(\"5\");\n         Iterator it = list.iterator();\n-        assert(it.hasNext());\n+        assertTrue(it.hasNext());\n         assertEquals(\"1\",it.next());\n-        assert(it.hasNext());\n+        assertTrue(it.hasNext());\n         assertEquals(\"2\",it.next());\n-        assert(it.hasNext());\n+        assertTrue(it.hasNext());\n         assertEquals(\"3\",it.next());\n-        assert(it.hasNext());\n+        assertTrue(it.hasNext());\n         assertEquals(\"4\",it.next());\n-        assert(it.hasNext());\n+        assertTrue(it.hasNext());\n         assertEquals(\"5\",it.next());\n-        assert(!it.hasNext());\n+        assertTrue(!it.hasNext());\n \n         it = list.iterator();\n-        assert(it.hasNext());\n+        assertTrue(it.hasNext());\n         assertEquals(\"1\",it.next());\n         it.remove();\n         assertEquals(\"[2, 3, 4, 5]\",list.toString());\n-        assert(it.hasNext());\n+        assertTrue(it.hasNext());\n         assertEquals(\"2\",it.next());\n         it.remove();\n         assertEquals(\"[3, 4, 5]\",list.toString());\n-        assert(it.hasNext());\n+        assertTrue(it.hasNext());\n         assertEquals(\"3\",it.next());\n         it.remove();\n         assertEquals(\"[4, 5]\",list.toString());\n-        assert(it.hasNext());\n+        assertTrue(it.hasNext());\n         assertEquals(\"4\",it.next());\n         it.remove();\n         assertEquals(\"[5]\",list.toString());\n-        assert(it.hasNext());\n+        assertTrue(it.hasNext());\n         assertEquals(\"5\",it.next());\n         it.remove();\n         assertEquals(\"[]\",list.toString());\n-        assert(!it.hasNext());\n+        assertTrue(!it.hasNext());\n     }\n \n     public void testListIteratorNavigation() {\n         list.add(\"4\");\n         list.add(\"5\");\n         ListIterator it = list.listIterator();\n-        assert(it.hasNext());\n-        assert(!it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(!it.hasPrevious());\n         assertEquals(-1,it.previousIndex());\n         assertEquals(0,it.nextIndex());\n         assertEquals(\"1\",it.next());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(0,it.previousIndex());\n         assertEquals(1,it.nextIndex());\n         assertEquals(\"1\",it.previous());\n-        assert(it.hasNext());\n-        assert(!it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(!it.hasPrevious());\n         assertEquals(-1,it.previousIndex());\n         assertEquals(0,it.nextIndex());\n         assertEquals(\"1\",it.next());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(0,it.previousIndex());\n         assertEquals(1,it.nextIndex());\n         assertEquals(\"2\",it.next());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(1,it.previousIndex());\n         assertEquals(2,it.nextIndex());\n         assertEquals(\"2\",it.previous());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(0,it.previousIndex());\n         assertEquals(1,it.nextIndex());\n         assertEquals(\"2\",it.next());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(1,it.previousIndex());\n         assertEquals(2,it.nextIndex());\n         assertEquals(\"3\",it.next());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(2,it.previousIndex());\n         assertEquals(3,it.nextIndex());\n         assertEquals(\"4\",it.next());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(3,it.previousIndex());\n         assertEquals(4,it.nextIndex());\n         assertEquals(\"5\",it.next());\n-        assert(!it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(!it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(4,it.previousIndex());\n         assertEquals(5,it.nextIndex());\n         assertEquals(\"5\",it.previous());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(3,it.previousIndex());\n         assertEquals(4,it.nextIndex());\n         assertEquals(\"4\",it.previous());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(2,it.previousIndex());\n         assertEquals(3,it.nextIndex());\n         assertEquals(\"3\",it.previous());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(1,it.previousIndex());\n         assertEquals(2,it.nextIndex());\n         assertEquals(\"2\",it.previous());\n-        assert(it.hasNext());\n-        assert(it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n         assertEquals(0,it.previousIndex());\n         assertEquals(1,it.nextIndex());\n         assertEquals(\"1\",it.previous());\n-        assert(it.hasNext());\n-        assert(!it.hasPrevious());\n+        assertTrue(it.hasNext());\n+        assertTrue(!it.hasPrevious());\n         assertEquals(-1,it.previousIndex());\n         assertEquals(0,it.nextIndex());\n     }\n         assertEquals(\"1\",it.previous());\n         it.remove();\n         assertEquals(\"[3, 4, 5]\",list.toString());\n-        assert(!it.hasPrevious());\n+        assertTrue(!it.hasPrevious());\n         assertEquals(\"3\",it.next());\n         it.remove();\n         assertEquals(\"[4, 5]\",list.toString());\n         set.add(\"4\");\n         set.add(\"D\");\n \n-        assert(list.removeAll(set));\n+        assertTrue(list.removeAll(set));\n         assertEquals(\"[1, 3, 5]\",list.toString());\n-        assert(!list.removeAll(set));\n+        assertTrue(!list.removeAll(set));\n     }\n \n     public void testRemoveByIndex() {\n         list.add(\"4\");\n         list.add(\"5\");\n         assertEquals(\"[1, 1, 2, 3, 4, 5, 2, 3, 4, 5]\",list.toString());\n-        assert(!list.remove(\"6\"));\n-        assert(list.remove(\"5\"));\n+        assertTrue(!list.remove(\"6\"));\n+        assertTrue(list.remove(\"5\"));\n         assertEquals(\"[1, 1, 2, 3, 4, 2, 3, 4, 5]\",list.toString());\n-        assert(list.remove(\"5\"));\n+        assertTrue(list.remove(\"5\"));\n         assertEquals(\"[1, 1, 2, 3, 4, 2, 3, 4]\",list.toString());\n-        assert(!list.remove(\"5\"));\n-        assert(list.remove(\"1\"));\n+        assertTrue(!list.remove(\"5\"));\n+        assertTrue(list.remove(\"1\"));\n         assertEquals(\"[1, 2, 3, 4, 2, 3, 4]\",list.toString());\n-        assert(list.remove(\"1\"));\n+        assertTrue(list.remove(\"1\"));\n         assertEquals(\"[2, 3, 4, 2, 3, 4]\",list.toString());\n-        assert(list.remove(\"2\"));\n+        assertTrue(list.remove(\"2\"));\n         assertEquals(\"[3, 4, 2, 3, 4]\",list.toString());\n-        assert(list.remove(\"2\"));\n+        assertTrue(list.remove(\"2\"));\n         assertEquals(\"[3, 4, 3, 4]\",list.toString());\n-        assert(list.remove(\"3\"));\n+        assertTrue(list.remove(\"3\"));\n         assertEquals(\"[4, 3, 4]\",list.toString());\n-        assert(list.remove(\"3\"));\n+        assertTrue(list.remove(\"3\"));\n         assertEquals(\"[4, 4]\",list.toString());\n-        assert(list.remove(\"4\"));\n+        assertTrue(list.remove(\"4\"));\n         assertEquals(\"[4]\",list.toString());\n-        assert(list.remove(\"4\"));\n+        assertTrue(list.remove(\"4\"));\n         assertEquals(\"[]\",list.toString());\n     }\n \n         set.add(\"4\");\n         set.add(\"D\");\n \n-        assert(list.retainAll(set));\n+        assertTrue(list.retainAll(set));\n         assertEquals(\"[2, 2, 4, 4]\",list.toString());\n-        assert(!list.retainAll(set));\n+        assertTrue(!list.retainAll(set));\n     }\n \n     public void testSet() {\n \n         String[] elts4 = new String[3];\n         String[] elts4b = (String[])(list.toArray(elts4));\n-        assert(elts4 != elts4b);\n+        assertTrue(elts4 != elts4b);\n         assertEquals(\"1\",elts4b[0]);\n         assertEquals(\"2\",elts4b[1]);\n         assertEquals(\"3\",elts4b[2]);\n         java.io.ObjectInputStream in = new java.io.ObjectInputStream(bufin);\n         Object list2 = in.readObject();\n \n-        assert(list != list2);\n-        assert(list2.equals(list));\n-        assert(list.equals(list2));\n+        assertTrue(list != list2);\n+        assertTrue(list2.equals(list));\n+        assertTrue(list.equals(list2));\n     }\n \n     public void testLongSerialization() throws Exception {\n         java.io.ObjectInputStream in = new java.io.ObjectInputStream(bufin);\n         Object list2 = in.readObject();\n \n-        assert(list != list2);\n-        assert(list2.equals(list));\n-        assert(list.equals(list2));\n-    }\n-\n-}\n+        assertTrue(list != list2);\n+        assertTrue(list2.equals(list));\n+        assertTrue(list.equals(list2));\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/TestExtendedProperties.java\n+++ b/src/test/org/apache/commons/collections/TestExtendedProperties.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestExtendedProperties.java,v 1.2 2001/05/10 00:40:09 geirm Exp $\n- * $Revision: 1.2 $\n- * $Date: 2001/05/10 00:40:09 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestExtendedProperties.java,v 1.3 2001/07/14 23:33:27 craigmcc Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2001/07/14 23:33:27 $\n  *\n  * ====================================================================\n  *\n  *   class\n  * \n  *   @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n- *   @version $Id: TestExtendedProperties.java,v 1.2 2001/05/10 00:40:09 geirm Exp $\n+ *   @version $Id: TestExtendedProperties.java,v 1.3 2001/07/14 23:33:27 craigmcc Exp $\n  */\n public class TestExtendedProperties extends TestCase\n {\n          * now add another and get a Vector\n          */\n         eprop.addProperty(\"number\", \"2\");\n-        assert(\"This returns array\", ( eprop.getVector(\"number\") instanceof java.util.Vector ) );\n+        assertTrue(\"This returns array\", ( eprop.getVector(\"number\") instanceof java.util.Vector ) );\n         \n         /*\n          *  now test dan's new fix where we get the first scalar \n          *  when we access a vector valued\n          *  property\n          */\n-        assert(\"This returns scalar\", ( eprop.getString(\"number\") instanceof String ) );\n+        assertTrue(\"This returns scalar\", ( eprop.getString(\"number\") instanceof String ) );\n \n         /*\n          * test comma separated string properties\n          */\n         String prop = \"hey, that's a test\";\n         eprop.setProperty(\"prop.string\", prop);\n-        assert(\"This returns vector\", ( eprop.getVector(\"prop.string\") instanceof java.util.Vector ) );\n+        assertTrue(\"This returns vector\", ( eprop.getVector(\"prop.string\") instanceof java.util.Vector ) );\n         \n         String prop2 = \"hey\\\\, that's a test\";\n         eprop.remove(\"prop.string\");\n         eprop.setProperty(\"prop.string\", prop2);\n-        assert(\"This returns array\", ( eprop.getString(\"prop.string\") instanceof java.lang.String) );\n+        assertTrue(\"This returns array\", ( eprop.getString(\"prop.string\") instanceof java.lang.String) );\n         \n         /*\n          * test subset : we want to make sure that the EP doesn't reprocess the data \n \n         ExtendedProperties subEprop = eprop.subset(\"prop\");\n \n-        assert(\"Returns the full string\",  subEprop.getString(\"string\").equals( prop ) );\n-        assert(\"This returns string for subset\", ( subEprop.getString(\"string\") instanceof java.lang.String) );\n-        assert(\"This returns array for subset\", ( subEprop.getVector(\"string\") instanceof java.util.Vector) );\n+        assertTrue(\"Returns the full string\",  subEprop.getString(\"string\").equals( prop ) );\n+        assertTrue(\"This returns string for subset\", ( subEprop.getString(\"string\") instanceof java.lang.String) );\n+        assertTrue(\"This returns array for subset\", ( subEprop.getVector(\"string\") instanceof java.util.Vector) );\n         \n     }\n }\n--- a/src/test/org/apache/commons/collections/TestHashMap.java\n+++ b/src/test/org/apache/commons/collections/TestHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestHashMap.java,v 1.1 2001/04/21 12:22:30 craigmcc Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/04/21 12:22:30 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestHashMap.java,v 1.2 2001/07/14 23:33:27 craigmcc Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2001/07/14 23:33:27 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n- * @version $Id: TestHashMap.java,v 1.1 2001/04/21 12:22:30 craigmcc Exp $\n+ * @version $Id: TestHashMap.java,v 1.2 2001/07/14 23:33:27 craigmcc Exp $\n  */\n public class TestHashMap extends TestMap\n {\n \n     public void testNewMap()\n     {\n-        assert(\"New map is empty\", map.isEmpty());\n+        assertTrue(\"New map is empty\", map.isEmpty());\n         assertEquals(\"New map has size zero\", map.size(), 0);\n     }\n \n--- a/src/test/org/apache/commons/collections/TestList.java\n+++ b/src/test/org/apache/commons/collections/TestList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestList.java,v 1.4 2001/05/04 16:34:27 rwaldhoff Exp $\n- * $Revision: 1.4 $\n- * $Date: 2001/05/04 16:34:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestList.java,v 1.5 2001/07/14 23:33:27 craigmcc Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2001/07/14 23:33:27 $\n  *\n  * ====================================================================\n  *\n  * test case (method) your {@link List} fails.\n  *\n  * @author Rodney Waldhoff\n- * @version $Id: TestList.java,v 1.4 2001/05/04 16:34:27 rwaldhoff Exp $\n+ * @version $Id: TestList.java,v 1.5 2001/07/14 23:33:27 craigmcc Exp $\n  */\n public abstract class TestList extends TestCollection {\n     public TestList(String testName) {\n         if(tryToAdd(list,0,\"element2\")) {\n             assertEquals(1,list.size());\n             if(tryToAdd(list,0,\"element0\")) {\n-                assert(Arrays.equals(new String[] { \"element0\", \"element2\" },list.toArray()));\n+                assertTrue(Arrays.equals(new String[] { \"element0\", \"element2\" },list.toArray()));\n                 if(tryToAdd(list,1,\"element1\")) {\n-                    assert(Arrays.equals(new String[] { \"element0\", \"element1\", \"element2\" },list.toArray()));\n+                    assertTrue(Arrays.equals(new String[] { \"element0\", \"element1\", \"element2\" },list.toArray()));\n                     if(tryToAdd(list,4,\"element3\")) {\n-                        assert(Arrays.equals(new String[] { \"element0\", \"element1\", \"element2\", \"element3\" },list.toArray()));\n+                        assertTrue(Arrays.equals(new String[] { \"element0\", \"element1\", \"element2\", \"element3\" },list.toArray()));\n                     }\n                 }\n             }\n     public void testListAdd() {\n         List list = makeList();\n         if(tryToAdd(list,\"1\")) {\n-            assert(list.contains(\"1\"));\n+            assertTrue(list.contains(\"1\"));\n             if(tryToAdd(list,\"2\")) {\n-                assert(list.contains(\"1\"));\n-                assert(list.contains(\"2\"));\n+                assertTrue(list.contains(\"1\"));\n+                assertTrue(list.contains(\"2\"));\n                 if(tryToAdd(list,\"3\")) {\n-                    assert(list.contains(\"1\"));\n-                    assert(list.contains(\"2\"));\n-                    assert(list.contains(\"3\"));\n+                    assertTrue(list.contains(\"1\"));\n+                    assertTrue(list.contains(\"2\"));\n+                    assertTrue(list.contains(\"3\"));\n                     if(tryToAdd(list,\"4\")) {\n-                        assert(list.contains(\"1\"));\n-                        assert(list.contains(\"2\"));\n-                        assert(list.contains(\"3\"));\n-                        assert(list.contains(\"4\"));\n+                        assertTrue(list.contains(\"1\"));\n+                        assertTrue(list.contains(\"2\"));\n+                        assertTrue(list.contains(\"3\"));\n+                        assertTrue(list.contains(\"4\"));\n                     }\n                 }\n             }\n \n     public void testListEqualsSelf() {\n         List list = makeList();\n-        assert(list.equals(list));\n+        assertTrue(list.equals(list));\n         tryToAdd(list,\"elt\");\n-        assert(list.equals(list));\n+        assertTrue(list.equals(list));\n         tryToAdd(list,\"elt2\");\n-        assert(list.equals(list));\n+        assertTrue(list.equals(list));\n     }\n \n     public void testListEqualsArrayList() {\n         List list1 = makeList();\n         List list2 = new ArrayList();\n-        assert(list1.equals(list2));\n+        assertTrue(list1.equals(list2));\n         assertEquals(list1.hashCode(),list2.hashCode());\n         tryToAdd(list1,\"a\");\n-        assert(!list1.equals(list2));\n+        assertTrue(!list1.equals(list2));\n         tryToAdd(list1,\"b\");\n         tryToAdd(list1,\"c\");\n         tryToAdd(list1,\"d\");\n         while(it.hasNext()) {\n             list2.add(it.next());\n         }\n-        assert(list1.equals(list2));\n+        assertTrue(list1.equals(list2));\n         assertEquals(list1.hashCode(),list2.hashCode());\n     }\n \n     public void testListEquals() {\n         List list1 = makeList();\n         List list2 = makeList();\n-        assert(list1.equals(list2));\n+        assertTrue(list1.equals(list2));\n         if(tryToAdd(list1,\"a\") && tryToAdd(list2,\"a\")) {\n-            assert(list1.equals(list2));\n+            assertTrue(list1.equals(list2));\n             if(tryToAdd(list1,\"b\") && tryToAdd(list2,\"b\")) {\n-                assert(list1.equals(list2));\n+                assertTrue(list1.equals(list2));\n                 if(tryToAdd(list1,\"c\") && tryToAdd(list2,\"c\")) {\n-                    assert(list1.equals(list2));\n+                    assertTrue(list1.equals(list2));\n                     if(tryToAdd(list1,\"b\") && tryToAdd(list2,\"b\")) {\n-                        assert(list1.equals(list2));\n+                        assertTrue(list1.equals(list2));\n                     }\n                 }\n             }\n                 Object obj = list.set(i,String.valueOf(i));\n                 assertEquals(obj,values[i]);\n                 values[i] = String.valueOf(i);\n-                assert(Arrays.equals(values,list.toArray()));\n+                assertTrue(Arrays.equals(values,list.toArray()));\n             } catch(UnsupportedOperationException e) {\n                 // expected\n             } catch(ClassCastException e) {\n \n         for(int i=0;i<values.length;i++) {\n             try {\n-                assert(!list.remove(\"X\"));\n-                assert(list.contains(values[i]));\n-                assert(list.remove(values[i]));\n-                assert(!list.contains(values[i]));\n+                assertTrue(!list.remove(\"X\"));\n+                assertTrue(list.contains(values[i]));\n+                assertTrue(list.remove(values[i]));\n+                assertTrue(!list.contains(values[i]));\n             } catch(UnsupportedOperationException e) {\n                 // expected\n             }\n         Object[] values = list.toArray();\n         ListIterator iter = list.listIterator();\n         for(int i=0;i<values.length;i++) {\n-            assert( iter.hasNext() );\n-            assert((i!=0) == iter.hasPrevious());\n+            assertTrue( iter.hasNext() );\n+            assertTrue((i!=0) == iter.hasPrevious());\n             assertEquals(values[i],iter.next());\n         }\n-        assert(!iter.hasNext());\n+        assertTrue(!iter.hasNext());\n         for(int i=values.length-1;i>=0;i--) {\n-            assert( iter.hasPrevious() );\n-            assert((i!=(values.length-1)) == iter.hasNext());\n+            assertTrue( iter.hasPrevious() );\n+            assertTrue((i!=(values.length-1)) == iter.hasNext());\n             assertEquals(values[i],iter.previous());\n         }\n-        assert(!iter.hasPrevious());\n+        assertTrue(!iter.hasPrevious());\n         for(int i=0;i<values.length;i++) {\n-            assert( iter.hasNext() );\n-            assert((i!=0) == iter.hasPrevious());\n+            assertTrue( iter.hasNext() );\n+            assertTrue((i!=0) == iter.hasPrevious());\n             assertEquals(values[i],iter.next());\n             assertEquals(values[i],iter.previous());\n             assertEquals(values[i],iter.next());\n             assertEquals(\"previousIndex should be \" + (i-1),i-1,iter.previousIndex());\n             assertEquals(values[i],iter.next());\n         }\n-        assert(!iter.hasNext());\n+        assertTrue(!iter.hasNext());\n         for(int i=values.length-1;i>=0;i--) {\n             assertEquals(\"previousIndex should be \" + i,i,iter.previousIndex());\n             assertEquals(\"nextIndex should be \" + (i+1),i+1,iter.nextIndex());\n             try {\n                 iter.set(new Integer(i));\n                 values[i] = new Integer(i);\n-                assert(Arrays.equals(values,list.toArray()));\n+                assertTrue(Arrays.equals(values,list.toArray()));\n             } catch(UnsupportedOperationException e) {\n                 // expected\n             } catch(IllegalStateException e) {\n                 // expected\n             }\n         }\n-        assert(!iter.hasNext());\n+        assertTrue(!iter.hasNext());\n         for(int i=values.length-1;i>=0;i--) {\n             iter.previous();\n             try {\n                 iter.set(String.valueOf(i));\n                 values[i] = String.valueOf(i);\n-                assert(Arrays.equals(values,list.toArray()));\n+                assertTrue(Arrays.equals(values,list.toArray()));\n             } catch(UnsupportedOperationException e) {\n                 // expected\n             } catch(IllegalStateException e) {\n--- a/src/test/org/apache/commons/collections/TestTreeMap.java\n+++ b/src/test/org/apache/commons/collections/TestTreeMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTreeMap.java,v 1.1 2001/04/21 12:22:30 craigmcc Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/04/21 12:22:30 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTreeMap.java,v 1.2 2001/07/14 23:33:27 craigmcc Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2001/07/14 23:33:27 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n- * @version $Id: TestTreeMap.java,v 1.1 2001/04/21 12:22:30 craigmcc Exp $\n+ * @version $Id: TestTreeMap.java,v 1.2 2001/07/14 23:33:27 craigmcc Exp $\n  */\n public class TestTreeMap extends TestMap\n {\n \n     public void testNewMap()\n     {\n-        assert(\"New map is empty\", map.isEmpty());\n+        assertTrue(\"New map is empty\", map.isEmpty());\n         assertEquals(\"New map has size zero\", map.size(), 0);\n     }\n ", "timestamp": 995153607, "metainfo": ""}