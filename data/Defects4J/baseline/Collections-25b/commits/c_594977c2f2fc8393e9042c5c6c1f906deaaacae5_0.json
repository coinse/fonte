{"sha": "594977c2f2fc8393e9042c5c6c1f906deaaacae5", "log": "Tidy code and Javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/collections/UnboundedFifoBuffer.java\n+++ b/src/java/org/apache/commons/collections/UnboundedFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/UnboundedFifoBuffer.java,v 1.9 2003/10/09 20:58:53 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/UnboundedFifoBuffer.java,v 1.10 2003/10/14 18:05:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * other operations perform in linear time or worse.\n  * <p>\n  * Note that this implementation is not synchronized.  The following can be\n- * used to provide synchronized access to your <code>UnboundedFifo</code>:\n+ * used to provide synchronized access to your <code>UnboundedFifoBuffer</code>:\n  * <pre>\n- *   Buffer fifo = BufferUtils.synchronizedBuffer(new UnboundedFifo());\n+ *   Buffer fifo = BufferUtils.synchronizedBuffer(new UnboundedFifoBuffer());\n  * </pre>\n  * <p>\n  * This buffer prevents null objects from being added.\n  * \n  * @since Commons Collections 2.1\n- * @version $Revision: 1.9 $ $Date: 2003/10/09 20:58:53 $\n+ * @version $Revision: 1.10 $ $Date: 2003/10/14 18:05:42 $\n  *\n  * @author Avalon\n  * @author Federico Barbieri\n      * Constructs an UnboundedFifoBuffer with the specified number of elements.\n      * The integer must be a positive integer.\n      * \n+     * @param initialSize  the initial size of the buffer\n      * @throws IllegalArgumentException  if the size is less than 1\n      */\n-    public UnboundedFifoBuffer(int size) {\n-        if (size <= 0) {\n+    public UnboundedFifoBuffer(int initialSize) {\n+        if (initialSize <= 0) {\n             throw new IllegalArgumentException(\"The size must be greater than 0\");\n         }\n-        m_buffer = new Object[size + 1];\n+        m_buffer = new Object[initialSize + 1];\n         m_head = 0;\n         m_tail = 0;\n     }\n     /**\n      * Adds the given element to this buffer.\n      *\n-     * @param o  the element to add\n+     * @param obj  the element to add\n      * @return true, always\n      * @throws NullPointerException  if the given element is null\n      * @throws BufferOverflowException  if this buffer is full\n      */\n-    public boolean add(final Object o) {\n-        if (null == o) {\n+    public boolean add(final Object obj) {\n+        if (obj == null) {\n             throw new NullPointerException(\"Attempted to add null object to buffer\");\n         }\n \n             m_tail = j;\n         }\n \n-        m_buffer[m_tail] = o;\n+        m_buffer[m_tail] = obj;\n         m_tail++;\n         if (m_tail >= m_buffer.length) {\n             m_tail = 0;\n      */\n     private int increment(int index) {\n         index++;\n-        if (index >= m_buffer.length)\n+        if (index >= m_buffer.length) {\n             index = 0;\n+        }\n         return index;\n     }\n \n      */\n     private int decrement(int index) {\n         index--;\n-        if (index < 0)\n+        if (index < 0) {\n             index = m_buffer.length - 1;\n+        }\n         return index;\n     }\n ", "timestamp": 1066154742, "metainfo": ""}