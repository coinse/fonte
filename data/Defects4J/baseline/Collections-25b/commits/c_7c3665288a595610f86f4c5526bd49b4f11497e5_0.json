{"sha": "7c3665288a595610f86f4c5526bd49b4f11497e5", "log": "Make Empty Iterators implement Resetable Handle Unmodifiable/Resetable combination iterators Expose Resetable Iterators as return types from methods   ", "commit": "\n--- a/src/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/java/org/apache/commons/collections/IteratorUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.8 2003/01/10 20:21:23 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.9 2003/01/15 21:55:43 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.iterators.LoopingIterator;\n import org.apache.commons.collections.iterators.ObjectArrayIterator;\n import org.apache.commons.collections.iterators.ObjectArrayListIterator;\n+import org.apache.commons.collections.iterators.ResetableIterator;\n+import org.apache.commons.collections.iterators.ResetableListIterator;\n import org.apache.commons.collections.iterators.SingletonIterator;\n import org.apache.commons.collections.iterators.SingletonListIterator;\n import org.apache.commons.collections.iterators.TransformIterator;\n  * instances. The implementations are provided in the \n  * {@link org.apache.commons.collections.iterators} subpackage.\n  *\n- * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Revision: 1.8 $ $Date: 2003/01/10 20:21:23 $\n  * @since Commons Collections 2.1\n+ * @version $Revision: 1.9 $ $Date: 2003/01/15 21:55:43 $\n+ * \n+ * @author Stephen Colebourne\n  */\n public class IteratorUtils {\n     // validation is done in this class in certain cases because the\n      *\n      * @return  an iterator over nothing\n      */\n-    public static Iterator emptyIterator() {\n-        return EMPTY_ITERATOR;\n+    public static ResetableIterator emptyIterator() {\n+        return (ResetableIterator) EMPTY_ITERATOR;\n     }\n \n     /**\n      *\n      * @return  a list iterator over nothing\n      */\n-    public static ListIterator emptyListIterator() {\n-        return EMPTY_LIST_ITERATOR;\n+    public static ResetableListIterator emptyListIterator() {\n+        return (ResetableListIterator) EMPTY_LIST_ITERATOR;\n     }\n \n     /**\n      * @param object  the single object over which to iterate\n      * @return  a singleton iterator over the object\n      */\n-    public static Iterator singletonIterator(Object object) {\n+    public static ResetableIterator singletonIterator(Object object) {\n         return new SingletonIterator(object);\n     }\n \n      * @param object  the single object over which to iterate\n      * @return  a singleton list iterator over the object\n      */\n-    public static ListIterator singletonListIterator(Object object) {\n+    public static ResetableListIterator singletonListIterator(Object object) {\n         return new SingletonListIterator(object);\n     }\n \n      * @return  an iterator over the array\n      * @throws NullPointerException if array is null\n      */\n-    public static Iterator arrayIterator(Object[] array) {\n+    public static ResetableIterator arrayIterator(Object[] array) {\n         return new ObjectArrayIterator(array);\n     }\n \n      * @throws IllegalArgumentException if the array is not an array\n      * @throws NullPointerException if array is null\n      */\n-    public static Iterator arrayIterator(Object array) {\n+    public static ResetableIterator arrayIterator(Object array) {\n         return new ArrayIterator(array);\n     }\n \n      * @throws IndexOutOfBoundsException if start is less than zero\n      * @throws NullPointerException if array is null\n      */\n-    public static Iterator arrayIterator(Object[] array, int start) {\n+    public static ResetableIterator arrayIterator(Object[] array, int start) {\n         return new ObjectArrayIterator(array, start);\n     }\n \n      * @throws IndexOutOfBoundsException if start is less than zero\n      * @throws NullPointerException if array is null\n      */\n-    public static Iterator arrayIterator(Object array, int start) {\n+    public static ResetableIterator arrayIterator(Object array, int start) {\n         return new ArrayIterator(array, start);\n     }\n \n      * @throws IllegalArgumentException if end is before start\n      * @throws NullPointerException if array is null\n      */\n-    public static Iterator arrayIterator(Object[] array, int start, int end) {\n+    public static ResetableIterator arrayIterator(Object[] array, int start, int end) {\n         return new ObjectArrayIterator(array, start, end);\n     }\n \n      * @throws IllegalArgumentException if end is before start\n      * @throws NullPointerException if array is null\n      */\n-    public static Iterator arrayIterator(Object array, int start, int end) {\n+    public static ResetableIterator arrayIterator(Object array, int start, int end) {\n         return new ArrayIterator(array, start, end);\n     }\n \n      * @return  a list iterator over the array\n      * @throws NullPointerException if array is null\n      */\n-    public static ListIterator arrayListIterator(Object[] array) {\n+    public static ResetableListIterator arrayListIterator(Object[] array) {\n         return new ObjectArrayListIterator(array);\n     }\n \n      * @throws IllegalArgumentException if the array is not an array\n      * @throws NullPointerException if array is null\n      */\n-    public static ListIterator arrayListIterator(Object array) {\n+    public static ResetableListIterator arrayListIterator(Object array) {\n         return new ArrayListIterator(array);\n     }\n \n      * @throws IndexOutOfBoundsException if start is less than zero\n      * @throws NullPointerException if array is null\n      */\n-    public static ListIterator arrayListIterator(Object[] array, int start) {\n+    public static ResetableListIterator arrayListIterator(Object[] array, int start) {\n         return new ObjectArrayListIterator(array, start);\n     }\n \n      * @throws IndexOutOfBoundsException if start is less than zero\n      * @throws NullPointerException if array is null\n      */\n-    public static ListIterator arrayListIterator(Object array, int start) {\n+    public static ResetableListIterator arrayListIterator(Object array, int start) {\n         return new ArrayListIterator(array, start);\n     }\n \n      * @throws IllegalArgumentException if end is before start\n      * @throws NullPointerException if array is null\n      */\n-    public static ListIterator arrayListIterator(Object[] array, int start, int end) {\n+    public static ResetableListIterator arrayListIterator(Object[] array, int start, int end) {\n         return new ObjectArrayListIterator(array, start, end);\n     }\n     \n      * @throws IllegalArgumentException if end is before start\n      * @throws NullPointerException if array is null\n      */\n-    public static ListIterator arrayListIterator(Object array, int start, int end) {\n+    public static ResetableListIterator arrayListIterator(Object array, int start, int end) {\n         return new ArrayListIterator(array, start, end);\n     }\n     \n      * will always throw an {@link UnsupportedOperationException} for\n      * the {@link Iterator#remove} method.\n      *\n-     * @param iterator The iterator to make immutable.\n-     * @return An immutable version of the iterator.\n+     * @param iterator  the iterator to make immutable\n+     * @return an immutable version of the iterator\n      */\n     public static Iterator unmodifiableIterator(Iterator iterator) {\n+        if (iterator instanceof ResetableIterator) {\n+            return new ResetableUnmodifiableIterator((ResetableIterator) iterator);\n+        }\n         return new UnmodifiableIterator(iterator);\n     }\n     \n      * the {@link Iterator#remove}, {@link ListIterator#add} and\n      * {@link ListIterator#set} methods.\n      *\n-     * @param listIterator The iterator to make immutable.\n-     * @return An immutable version of the iterator.\n+     * @param listIterator  the iterator to make immutable\n+     * @return an immutable version of the iterator\n      */\n     public static ListIterator unmodifiableListIterator(ListIterator listIterator) {\n+        if (listIterator instanceof ResetableListIterator) {\n+            return new ResetableUnmodifiableListIterator((ResetableListIterator) listIterator);\n+        }\n         return new UnmodifiableListIterator(listIterator);\n     }\n \n      * @param coll  the collection to iterate over, not null\n      * @throws NullPointerException if the collection is null\n      */\n-    public static Iterator loopingIterator(Collection coll) {\n+    public static ResetableIterator loopingIterator(Collection coll) {\n         if (coll == null) {\n             throw new NullPointerException(\"Collection must not be null\");\n         }\n     /**\n      * EmptyIterator class\n      */\n-    static class EmptyIterator implements Iterator {\n+    static class EmptyIterator implements ResetableIterator {\n         \n         /**\n          * @see java.util.Iterator#hasNext()\n         public void remove() {\n             throw new UnsupportedOperationException(\"remove() not supported for empty Iterator\");\n         }\n+        \n+        /**\n+         * Reset the iterator\n+         */\n+        public void reset() {\n+            // do nothing\n+        }\n \n     }\n     \n     /**\n      * EmptyListIterator class\n      */\n-    static class EmptyListIterator extends EmptyIterator implements ListIterator {\n+    static class EmptyListIterator extends EmptyIterator implements ResetableListIterator {\n         \n         /**\n          * @see java.util.ListIterator#hasPrevious()\n      * always throws an {@link java.lang.UnsupportedOperationException}.\n      *\n      * @author <a href=\"mailto:rich@rd.gen.nz\">Rich Dougherty</a>\n+     * @author Stephen Colebourne\n      */\n     static class UnmodifiableIterator implements Iterator, Serializable {\n \n         /**\n          * Create an UnmodifiableIterator.\n          *\n-         * @param delegate The delegate to pass all calls to.\n+         * @param delegate  the delegate to pass all calls to\n          */\n         public UnmodifiableIterator(Iterator delegate) {\n             this.delegate = delegate;\n \n     }\n \n+    /**\n+     * An unmodifiable resetable iterator.\n+     *\n+     * @author Stephen Colebourne\n+     */\n+    static class ResetableUnmodifiableIterator extends UnmodifiableIterator implements ResetableIterator {\n+        \n+        /**\n+         * Create a ResetableUnmodifiableIterator.\n+         *\n+         * @param delegate  the delegate to pass all calls to\n+         */\n+        public ResetableUnmodifiableIterator(ResetableIterator delegate) {\n+            super(delegate);\n+        }\n+\n+        /**\n+         * Reset the iterator\n+         */\n+        public void reset() {\n+            ((ResetableIterator) delegate).reset();\n+        }\n+\n+    }\n+    \n     /**\n      * A wrapper for an {@link java.util.ListIterator} which makes it immutable.\n      * All calls are passed through to the delegate. The {@link #remove()},\n             throw new UnsupportedOperationException(\"This iterator is immutable\");\n         }\n     }\n+    \n+    /**\n+     * An unmodifiable resetable list iterator.\n+     *\n+     * @author Stephen Colebourne\n+     */\n+    static class ResetableUnmodifiableListIterator extends UnmodifiableListIterator implements ResetableListIterator {\n+            \n+        /**\n+         * Create a ResetableUnmodifiableListIterator.\n+         *\n+         * @param delegate  the delegate to pass all calls to\n+         */\n+        public ResetableUnmodifiableListIterator(ResetableListIterator delegate) {\n+            super(delegate);\n+        }\n+    \n+        /**\n+         * Reset the iterator\n+         */\n+        public void reset() {\n+            ((ResetableListIterator) delegate).reset();\n+        }\n+    \n+    }\n+        \n }", "timestamp": 1042667743, "metainfo": ""}