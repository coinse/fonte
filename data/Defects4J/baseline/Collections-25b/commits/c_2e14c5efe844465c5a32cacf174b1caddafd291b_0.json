{"sha": "2e14c5efe844465c5a32cacf174b1caddafd291b", "log": "Rename AMap to IterableMap   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BidiMap.java\n+++ b/src/java/org/apache/commons/collections/BidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BidiMap.java,v 1.9 2003/12/01 22:48:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BidiMap.java,v 1.10 2003/12/02 23:51:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * a key to be looked up from a value with equal performance.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.9 $ $Date: 2003/12/01 22:48:59 $\n+ * @version $Revision: 1.10 $ $Date: 2003/12/02 23:51:49 $\n  *\n  * @author Stephen Colebourne\n  */\n-public interface BidiMap extends AMap {\n+public interface BidiMap extends IterableMap {\n     \n     /**\n      * Obtains a <code>MapIterator</code> over the map.\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/IterableMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IterableMap.java,v 1.1 2003/12/02 23:51:49 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Map;\n+\n+/**\n+ * Defines a map that can be iterated directly without needing to create an entry set.\n+ * <p>\n+ * A map iterator is an efficient way of iterating over maps.\n+ * There is no need to access the entry set or cast to Map Entry objects.\n+ * <pre>\n+ * IterableMap map = new HashedMap();\n+ * MapIterator it = map.mapIterator();\n+ * while (it.hasNext()) {\n+ *   Object key = it.next();\n+ *   Object value = it.getValue();\n+ *   it.setValue(\"newValue\");\n+ * }\n+ * </pre>\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/02 23:51:49 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public interface IterableMap extends Map {\n+    \n+    /**\n+     * Obtains a <code>MapIterator</code> over the map.\n+     * <p>\n+     * A map iterator is an efficient way of iterating over maps.\n+     * There is no need to access the entry set or cast to Map Entry objects.\n+     * <pre>\n+     * IterableMap map = new HashedMap();\n+     * MapIterator it = map.mapIterator();\n+     * while (it.hasNext()) {\n+     *   Object key = it.next();\n+     *   Object value = it.getValue();\n+     *   it.setValue(\"newValue\");\n+     * }\n+     * </pre>\n+     * \n+     * @return a map iterator\n+     */\n+    MapIterator mapIterator();\n+    \n+}\n--- a/src/java/org/apache/commons/collections/MapIterator.java\n+++ b/src/java/org/apache/commons/collections/MapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapIterator.java,v 1.3 2003/12/01 22:48:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapIterator.java,v 1.4 2003/12/02 23:51:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Defines an iterator that operates over a <code>Map</code>.\n  * <p>\n- * This iterator is a special version designed for maps. It is much more\n+ * This iterator is a special version designed for maps. It can be more\n  * efficient to use this rather than an entry set iterator where the option\n- * is available.\n+ * is available, and it is certainly more convenient.\n  * <p>\n  * A map that provides this interface may not hold the data internally using\n  * Map Entry objects, thus this interface can avoid lots of object creation.\n  * </pre>\n  *  \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/12/01 22:48:59 $\n+ * @version $Revision: 1.4 $ $Date: 2003/12/02 23:51:49 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/OrderedMap.java\n+++ b/src/java/org/apache/commons/collections/OrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/OrderedMap.java,v 1.2 2003/12/01 22:48:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/OrderedMap.java,v 1.3 2003/12/02 23:51:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * iteration through that order.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/01 22:48:59 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/02 23:51:49 $\n  *\n  * @author Stephen Colebourne\n  */\n-public interface OrderedMap extends AMap {\n+public interface OrderedMap extends IterableMap {\n     \n     /**\n      * Obtains an <code>OrderedMapIterator</code> over the map.\n--- a/src/java/org/apache/commons/collections/map/Flat3Map.java\n+++ b/src/java/org/apache/commons/collections/map/Flat3Map.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/Flat3Map.java,v 1.4 2003/12/01 22:48:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/Flat3Map.java,v 1.5 2003/12/02 23:51:50 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.NoSuchElementException;\n import java.util.Set;\n \n-import org.apache.commons.collections.AMap;\n+import org.apache.commons.collections.IterableMap;\n import org.apache.commons.collections.IteratorUtils;\n import org.apache.commons.collections.MapIterator;\n import org.apache.commons.collections.ResettableIterator;\n  * Do not use <code>Flat3Map</code> if the size is likely to grow beyond 3.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/12/01 22:48:59 $\n+ * @version $Revision: 1.5 $ $Date: 2003/12/02 23:51:50 $\n  *\n  * @author Stephen Colebourne\n  */\n-public class Flat3Map implements AMap {\n+public class Flat3Map implements IterableMap {\n     \n     /** The size of the map, used while in flat mode */\n     private int iSize;\n--- a/src/java/org/apache/commons/collections/map/HashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/HashedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/HashedMap.java,v 1.3 2003/12/02 00:37:11 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/HashedMap.java,v 1.4 2003/12/02 23:51:50 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.NoSuchElementException;\n import java.util.Set;\n \n-import org.apache.commons.collections.AMap;\n+import org.apache.commons.collections.IterableMap;\n import org.apache.commons.collections.IteratorUtils;\n import org.apache.commons.collections.MapIterator;\n \n  * methods exposed.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/12/02 00:37:11 $\n+ * @version $Revision: 1.4 $ $Date: 2003/12/02 23:51:50 $\n  *\n  * @author java util HashMap\n  * @author Stephen Colebourne\n  */\n-public class HashedMap implements AMap, Serializable, Cloneable {\n+public class HashedMap implements IterableMap, Serializable, Cloneable {\n     \n     /** Serialisation version */\n     static final long serialVersionUID = -1593250834999590599L;\n--- a/src/java/org/apache/commons/collections/map/UnmodifiableMap.java\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableMap.java,v 1.4 2003/12/01 22:48:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableMap.java,v 1.5 2003/12/02 23:51:50 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.collections.AMap;\n+import org.apache.commons.collections.IterableMap;\n import org.apache.commons.collections.MapIterator;\n import org.apache.commons.collections.Unmodifiable;\n import org.apache.commons.collections.collection.UnmodifiableCollection;\n  * Decorates another <code>Map</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/12/01 22:48:59 $\n+ * @version $Revision: 1.5 $ $Date: 2003/12/02 23:51:50 $\n  * \n  * @author Stephen Colebourne\n  */\n-public final class UnmodifiableMap extends AbstractMapDecorator implements AMap, Unmodifiable {\n+public final class UnmodifiableMap extends AbstractMapDecorator implements IterableMap, Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable map.\n     }\n \n     public MapIterator mapIterator() {\n-        if (map instanceof AMap) {\n-            MapIterator it = ((AMap) map).mapIterator();\n+        if (map instanceof IterableMap) {\n+            MapIterator it = ((IterableMap) map).mapIterator();\n             return UnmodifiableMapIterator.decorate(it);\n         } else {\n             MapIterator it = new EntrySetMapIterator(map);\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestIterableMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/AbstractTestIterableMap.java,v 1.1 2003/12/02 23:51:49 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import org.apache.commons.collections.IterableMap;\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.MapIterator;\n+import org.apache.commons.collections.iterators.AbstractTestMapIterator;\n+\n+/**\n+ * Abstract test class for {@link IterableMap} methods and contracts.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/12/02 23:51:49 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractTestIterableMap extends AbstractTestMap {\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test name\n+     */\n+    public AbstractTestIterableMap(String testName) {\n+        super(testName);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testFailFastEntrySet() {\n+        if (isRemoveSupported() == false) return;\n+        resetFull();\n+        Iterator it = map.entrySet().iterator();\n+        Map.Entry val = (Map.Entry) it.next();\n+        map.remove(val.getKey());\n+        try {\n+            it.next();\n+            fail();\n+        } catch (ConcurrentModificationException ex) {}\n+        \n+        resetFull();\n+        it = map.entrySet().iterator();\n+        it.next();\n+        map.clear();\n+        try {\n+            it.next();\n+            fail();\n+        } catch (ConcurrentModificationException ex) {}\n+    }\n+    \n+    public void testFailFastKeySet() {\n+        if (isRemoveSupported() == false) return;\n+        resetFull();\n+        Iterator it = map.keySet().iterator();\n+        Object val = it.next();\n+        map.remove(val);\n+        try {\n+            it.next();\n+            fail();\n+        } catch (ConcurrentModificationException ex) {}\n+        \n+        resetFull();\n+        it = map.keySet().iterator();\n+        it.next();\n+        map.clear();\n+        try {\n+            it.next();\n+            fail();\n+        } catch (ConcurrentModificationException ex) {}\n+    }\n+    \n+    public void testFailFastValues() {\n+        if (isRemoveSupported() == false) return;\n+        resetFull();\n+        Iterator it = map.values().iterator();\n+        it.next();\n+        map.remove(map.keySet().iterator().next());\n+        try {\n+            it.next();\n+            fail();\n+        } catch (ConcurrentModificationException ex) {}\n+        \n+        resetFull();\n+        it = map.values().iterator();\n+        it.next();\n+        map.clear();\n+        try {\n+            it.next();\n+            fail();\n+        } catch (ConcurrentModificationException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public BulkTest bulkTestMapIterator() {\n+        return new InnerTestMapIterator();\n+    }\n+    \n+    public class InnerTestMapIterator extends AbstractTestMapIterator {\n+        public InnerTestMapIterator() {\n+            super(\"InnerTestMapIterator\");\n+        }\n+        \n+        public Object[] addSetValues() {\n+            return AbstractTestIterableMap.this.getNewSampleValues();\n+        }\n+        \n+        public boolean supportsRemove() {\n+            return AbstractTestIterableMap.this.isRemoveSupported();\n+        }\n+\n+        public boolean supportsSetValue() {\n+            return AbstractTestIterableMap.this.isSetValueSupported();\n+        }\n+\n+        public MapIterator makeEmptyMapIterator() {\n+            resetEmpty();\n+            return ((IterableMap) AbstractTestIterableMap.this.map).mapIterator();\n+        }\n+\n+        public MapIterator makeFullMapIterator() {\n+            resetFull();\n+            return ((IterableMap) AbstractTestIterableMap.this.map).mapIterator();\n+        }\n+        \n+        public Map getMap() {\n+            // assumes makeFullMapIterator() called first\n+            return AbstractTestIterableMap.this.map;\n+        }\n+        \n+        public Map getConfirmedMap() {\n+            // assumes makeFullMapIterator() called first\n+            return AbstractTestIterableMap.this.confirmed;\n+        }\n+        \n+        public void verify() {\n+            super.verify();\n+            AbstractTestIterableMap.this.verify();\n+        }\n+    }\n+    \n+//  public void testCreate() throws Exception {\n+//      resetEmpty();\n+//      writeExternalFormToDisk((Serializable) map, \"D:/dev/collections/data/test/HashedMap.emptyCollection.version3.obj\");\n+//      resetFull();\n+//      writeExternalFormToDisk((Serializable) map, \"D:/dev/collections/data/test/HashedMap.fullCollection.version3.obj\");\n+//  }\n+}\n--- a/src/test/org/apache/commons/collections/map/AbstractTestOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/AbstractTestOrderedMap.java,v 1.3 2003/12/01 22:48:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/AbstractTestOrderedMap.java,v 1.4 2003/12/02 23:51:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Abstract test class for {@link OrderedMap} methods and contracts.\n  *\n- * @version $Revision: 1.3 $ $Date: 2003/12/01 22:48:59 $\n+ * @version $Revision: 1.4 $ $Date: 2003/12/02 23:51:49 $\n  * \n  * @author Stephen Colebourne\n  */\n-public abstract class AbstractTestOrderedMap extends AbstractTestAMap {\n+public abstract class AbstractTestOrderedMap extends AbstractTestIterableMap {\n \n     /**\n      * JUnit constructor.\n--- a/src/test/org/apache/commons/collections/map/TestFlat3Map.java\n+++ b/src/test/org/apache/commons/collections/map/TestFlat3Map.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestFlat3Map.java,v 1.3 2003/12/01 22:48:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestFlat3Map.java,v 1.4 2003/12/02 23:51:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.3 $ $Date: 2003/12/01 22:48:59 $\n+ * @version $Revision: 1.4 $ $Date: 2003/12/02 23:51:49 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestFlat3Map extends AbstractTestAMap {\n+public class TestFlat3Map extends AbstractTestIterableMap {\n \n     public TestFlat3Map(String testName) {\n         super(testName);\n--- a/src/test/org/apache/commons/collections/map/TestHashedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestHashedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestHashedMap.java,v 1.1 2003/12/01 22:34:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestHashedMap.java,v 1.2 2003/12/02 23:51:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/12/01 22:34:54 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/02 23:51:49 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestHashedMap extends AbstractTestAMap {\n+public class TestHashedMap extends AbstractTestIterableMap {\n \n     public TestHashedMap(String testName) {\n         super(testName);\n--- a/src/test/org/apache/commons/collections/map/TestIdentityMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestIdentityMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestIdentityMap.java,v 1.1 2003/12/02 21:57:08 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestIdentityMap.java,v 1.2 2003/12/02 23:51:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n \n-import org.apache.commons.collections.AMap;\n+import org.apache.commons.collections.IterableMap;\n import org.apache.commons.collections.AbstractTestObject;\n \n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/12/02 21:57:08 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/02 23:51:49 $\n  * \n  * @author Stephen Colebourne\n  */\n     \n     //-----------------------------------------------------------------------\n     public void testBasics() {\n-        AMap map = new IdentityMap();\n+        IterableMap map = new IdentityMap();\n         assertEquals(0, map.size());\n         \n         map.put(I1A, I2A);\n     \n     //-----------------------------------------------------------------------\n     public void testHashEntry() {\n-        AMap map = new IdentityMap();\n+        IterableMap map = new IdentityMap();\n         \n         map.put(I1A, I2A);\n         map.put(I1B, I2A);\n--- a/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java,v 1.5 2003/12/01 22:34:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java,v 1.6 2003/12/02 23:51:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link UnmodifiableMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/12/01 22:34:54 $\n+ * @version $Revision: 1.6 $ $Date: 2003/12/02 23:51:49 $\n  * \n  * @author Phil Steitz\n  */\n-public class TestUnmodifiableMap extends AbstractTestAMap{\n+public class TestUnmodifiableMap extends AbstractTestIterableMap{\n     \n     public TestUnmodifiableMap(String testName) {\n         super(testName);", "timestamp": 1070409110, "metainfo": ""}