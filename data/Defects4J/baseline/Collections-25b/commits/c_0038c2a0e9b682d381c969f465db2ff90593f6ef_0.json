{"sha": "0038c2a0e9b682d381c969f465db2ff90593f6ef", "log": "javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractHashedMap.java,v 1.5 2004/01/02 01:36:52 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractHashedMap.java,v 1.6 2004/01/03 05:15:00 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * need for unusual subclasses is here.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/01/02 01:36:52 $\n+ * @version $Revision: 1.6 $ $Date: 2004/01/03 05:15:00 $\n  *\n  * @author java util HashMap\n  * @author Stephen Colebourne\n      * @param initialCapacity  the initial capacity\n      * @param loadFactor  the load factor\n      * @throws IllegalArgumentException if the initial capacity is less than one\n-     * @throws IllegalArgumentException if the load factor is less than zero\n+     * @throws IllegalArgumentException if the load factor is less than or equal to zero\n      */\n     protected AbstractHashedMap(int initialCapacity, float loadFactor) {\n         super();\n      * The reverse conversion can be changed, if required, by overriding the\n      * getKey() method in the hash entry.\n      * \n-     * @param key  the key to get a hash code for\n-     * @return the hash code\n+     * @param key  the key convert\n+     * @return the converted key\n      */\n     protected Object convertKey(Object key) {\n         return (key == null ? NULL : key);", "timestamp": 1073106900, "metainfo": ""}