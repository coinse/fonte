{"sha": "cddf8c5c663b450c68d86fdeb7d24cd1a309deb5", "log": "Renamed AbstractIntArrayList, AbstractShortArrayList, AbstractLongArrayList to AbstractIntList, AbstractShortList, AbstractLongList.  New names follow general naming pattern in Collections Framework, and anticipate later IntList, ShortList and LongList interfaces.  Recommended by Jonathan Carlson (joncrlsn2 at yahoo dot com).   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractIntList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntList.java,v 1.1 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/19 21:19:03 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Abstract base class for lists backed by an <Code>int</Code> array.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2002/08/19 21:19:03 $\n+ * @author Rodney Waldhoff \n+ */\n+public abstract class AbstractIntList extends AbstractList implements List, Serializable {\n+\n+    //------------------------------------------------------ Abstract Accessors\n+\n+    /**\n+     *  Returns the maximum size the list can reach before the array \n+     *  is resized.\n+     *\n+     *  @return the maximum size the list can reach before the array is resized\n+     */\n+    abstract public int capacity();\n+\n+\n+    /**\n+     *  Returns the number of <Code>int</Code> elements currently in this\n+     *  list.\n+     *\n+     *  @return the size of this list\n+     */\n+    abstract public int size();\n+\n+\n+    /**\n+     *  Returns the <Code>int</Code> element at the specified index in this\n+     *  array.\n+     *\n+     *  @param index  the index of the element to return\n+     *  @return  the <Code>int</Code> element at that index\n+     *  @throws  IndexOutOfBoundsException  if the index is negative or\n+     *    greater than or equal to {@link #size()}\n+     */\n+    abstract public int getInt(int index);\n+\n+\n+    /**\n+     *  Returns <Code>true</Code> if this list contains the given \n+     *  <Code>int</Code> element.\n+     *\n+     *  @param value  the element to search for\n+     *  @return true if this list contains the given value, false otherwise\n+     */\n+    abstract public boolean containsInt(int value);\n+\n+\n+    /**\n+     *  Returns the first index of the given <Code>int</Code> element, or\n+     *  -1 if the value is not in this list.\n+     *\n+     *  @param value  the element to search for\n+     *  @return  the first index of that element, or -1 if the element is\n+     *    not in this list\n+     */\n+    abstract public int indexOfInt(int value);\n+\n+\n+    /**\n+     *  Returns the last index of the given <Code>int</Code> element, or\n+     *  -1 if the value is not in this list.\n+     *\n+     *  @param value  the element to search for\n+     *  @return  the last index of that element, or -1 if the element is\n+     *    not in this list\n+     */\n+    abstract public int lastIndexOfInt(int value);\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+    /** \n+     *  Returns <code>new Integer({@link #getInt getInt(index)})</code>. \n+     *\n+     *  @param index  the index of the element to return\n+     *  @return  an {@link Integer} object wrapping the <Code>int</Code>\n+     *    value at that index\n+     *  @throws IndexOutOfBoundsException  if the index is negative or\n+     *    greater than or equal to {@link #size()}\n+     */\n+    public Object get(int index) {\n+        return new Integer(getInt(index));\n+    }\n+\n+    /** \n+     *  Returns <code>{@link #containsInt containsInt(((Integer)value).intValue())}</code>. \n+     *\n+     *  @param value  an {@link Integer} object whose wrapped <Code>int</Code>\n+     *    value to search for\n+     *  @return true  if this list contains that <Code>int</Code> value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Integer}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n+    public boolean contains(Object value) {\n+        return containsInt(((Integer)value).intValue());\n+    }\n+\n+    /** \n+     *  Returns <code>({@link #size} == 0)</code>. \n+     *\n+     *  @return true if this list is empty, false otherwise\n+     */\n+    public boolean isEmpty() {\n+        return (0 == size());\n+    }\n+\n+    /** \n+     *  Returns <code>{@link #indexOfInt indexOfInt(((Integer)value).intValue())}</code>. \n+     *\n+     *  @param value  an {@link Integer} object whose wrapped <Code>int</Code>\n+     *    value to search for\n+     *  @return the first index of that <Code>int</Code> value, or -1 if \n+     *    this list does not contain that value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Integer}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n+    public int indexOf(Object value) {\n+        return indexOfInt(((Integer)value).intValue());\n+    }\n+\n+    /** \n+     *  Returns <code>{@link #lastIndexOfInt lastIndexOfInt(((Integer)value).intValue())}</code>. \n+     *\n+     *  @param value  an {@link Integer} object whose wrapped <Code>int</Code>\n+     *    value to search for\n+     *  @return the last index of that <Code>int</Code> value, or -1 if \n+     *    this list does not contain that value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Integer}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n+    public int lastIndexOf(Object value) {\n+        return lastIndexOfInt(((Integer)value).intValue());\n+    }\n+\n+    //------------------------------------------------------ Abstract Modifiers\n+\n+    /**\n+     *  Sets the element at the given index to the given <Code>int</Code>\n+     *  value.\n+     *\n+     *  @param index  the index of the element to set\n+     *  @param value  the <Code>int</Code> value to set it to\n+     *  @return  the previous <Code>int</Code> value at that index\n+     *  @throws  IndexOutOfBoundsException  if the index is negative or \n+     *     greater than or equal to {@link #size()}.\n+     */\n+    abstract public int setInt(int index, int value);\n+\n+    /**\n+     *  Adds the given <Code>int</Code> value to the end of this list.\n+     *\n+     *  @param value  the value to add\n+     *  @return  true, always\n+     */\n+    abstract public boolean addInt(int value);\n+\n+\n+    /**\n+     *  Inserts the given <Code>int</Code> value into this list at the\n+     *  specified index.\n+     *\n+     *  @param index  the index for the insertion\n+     *  @param value  the value to insert at that index\n+     *  @throws IndexOutOfBoundsException if the index is negative or \n+     *    greater than {@link #size()}\n+     */\n+    abstract public void addInt(int index, int value);\n+\n+\n+    /**\n+     *  Removes the <Code>int</Code> element at the specified index.\n+     *\n+     *  @param index  the index of the element to remove\n+     *  @return  the removed <Code>int</Code> value\n+     *  @throws IndexOutOfBoundsException if the index is negative or\n+     *   greater than or equal to {@link #size()}\n+     */\n+    abstract public int removeIntAt(int index);\n+\n+\n+    /**\n+     *  Removes the first occurrence of the given <Code>int</COde> value\n+     *  from this list.\n+     *\n+     *  @param value  the value to remove\n+     *  @return  true if this list contained that value and removed it,\n+     *   or false if this list didn't contain the value\n+     */\n+    abstract public boolean removeInt(int value);\n+\n+    /**\n+     *  Removes all <Code>int</Code> values from this list.\n+     */\n+    abstract public void clear();\n+\n+    /**\n+     *  Ensures that the length of the internal <Code>int</Code> array is\n+     *  at list the given value.\n+     *\n+     *  @param mincap  the minimum capcity for this list\n+     */\n+    abstract public void ensureCapacity(int mincap);\n+\n+    /**\n+     *  Resizes the internal array such that {@link #capacity()} is equal\n+     *  to {@link #size()}.\n+     */\n+    abstract public void trimToSize();\n+\n+    //--------------------------------------------------------------- Modifiers\n+    \n+    /** \n+     * Returns <code>new Integer({@link #setInt(int,int) \n+     * setInt(index,((Integer)value).intValue())})</code>. \n+     *\n+     * @param index  the index of the element to set\n+     * @param value  an {@link Integer} object whose <Code>int</Code> value\n+     *  to set at that index\n+     * @return  an {@link Integer} that wraps the <Code>int</Code> value  \n+     *   previously at that index\n+     * @throws IndexOutOfBoundsException if the index is negative or greater\n+     *  than or equal to {@link #size()}\n+     * @throws ClassCastException if the given value is not an {@link Integer}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n+    public Object set(int index, Object value) {\n+        return new Integer(setInt(index,((Integer)value).intValue()));\n+    }\n+\n+    /** \n+     * Invokes <code>{@link #addInt(int) addInt(((Integer)value).intValue())})</code>. \n+     *\n+     * @param value  an {@link Integer} object that wraps the <Code>int</Code>\n+     *   value to add\n+     * @return true, always\n+     * @throws ClassCastException if the given value is not an {@link Integer}\n+     * @throws NullPointerException if the given value is <Code>null</COde>     \n+     */\n+    public boolean add(Object value) {\n+        return addInt(((Integer)value).intValue());\n+    }    \n+\n+    /** \n+     * Invokes <code>{@link #addInt(int,int) addInt(index,((Integer)value).intValue())})</code>. \n+     *\n+     * @param index  the index of the insertion\n+     * @param value an {@link Integer} object that wraps the <Code>int</Code>\n+     *   value to insert\n+     * @throws IndexOutOfBoundsException if the index is negative or greater\n+     *   than {@link #size()}\n+     * @throws ClassCastException if the given value is not an {@link Integer}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n+    public void add(int index, Object value) {\n+        addInt(index,((Integer)value).intValue());\n+    }\n+\n+    /** \n+     * Returns <code>new Integer({@link #removeIntAt(int) removeIntAt(index)})</code>. \n+     *\n+     * @param index  the index of the element to remove\n+     * @return  an {@link Integer} object that wraps the value that was\n+     *   removed from that index\n+     * @throws IndexOutOfBoundsException  if the given index is negative\n+     *   or greater than or equal to {@link #size()}\n+     */\n+    public Object remove(int index) {\n+        return new Integer(removeIntAt(index));\n+    }\n+\n+    /** \n+     * Returns <code>{@link #removeInt(int) removeInt(((Integer)value).intValue())}</code>. \n+     *\n+     * @param value  an {@link Integer} object that wraps the <Code>int</Code>\n+     *   value to remove\n+     * @return true if the first occurrence of that <Code>int</Code> value\n+     *   was removed from this list, or <Code>false</Code> if this list\n+     *   did not contain that <Code>int</Code> value\n+     * @throws ClassCastException if the given value is not an {@link Integer}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n+    public boolean remove(Object value) {\n+        return removeInt(((Integer)value).intValue());\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractLongList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractLongList.java,v 1.1 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/19 21:19:03 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Abstract base class for lists backed by a <Code>long</Code> array.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2002/08/19 21:19:03 $\n+ * @author Rodney Waldhoff \n+ */\n+public abstract class AbstractLongList extends AbstractList implements List, Serializable {\n+\n+    //------------------------------------------------------ Abstract Accessors\n+    \n+    /**\n+     *  Returns the maximum size the list can reach before the array \n+     *  is resized.\n+     *\n+     *  @return the maximum size the list can reach before the array is resized\n+     */\n+    abstract public int capacity();\n+\n+    /**\n+     *  Returns the number of <Code>long</Code> elements currently in this\n+     *  list.\n+     *\n+     *  @return the size of this list\n+     */\n+    abstract public int size();\n+\n+    /**\n+     *  Returns the <Code>long</Code> element at the specified index in this\n+     *  array.\n+     *\n+     *  @param index  the index of the element to return\n+     *  @return  the <Code>long</Code> element at that index\n+     *  @throws  IndexOutOfBoundsException  if the index is negative or\n+     *    greater than or equal to {@link #size()}\n+     */\n+    abstract public long getLong(int index);\n+\n+    /**\n+     *  Returns <Code>true</Code> if this list contains the given \n+     *  <Code>long</Code> element.\n+     *\n+     *  @param value  the element to search for\n+     *  @return true if this list contains the given value, false otherwise\n+     */\n+    abstract public boolean containsLong(long value);\n+\n+    /**\n+     *  Returns the first index of the given <Code>long</Code> element, or\n+     *  -1 if the value is not in this list.\n+     *\n+     *  @param value  the element to search for\n+     *  @return  the first index of that element, or -1 if the element is\n+     *    not in this list\n+     */\n+    abstract public int indexOfLong(long value);\n+\n+    /**\n+     *  Returns the last index of the given <Code>long</Code> element, or\n+     *  -1 if the value is not in this list.\n+     *\n+     *  @param value  the element to search for\n+     *  @return  the last index of that element, or -1 if the element is\n+     *    not in this list\n+     */\n+    abstract public int lastIndexOfLong(long value);\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+    /** \n+     *  Returns <code>new Long({@link #getLong getLong(index)})</code>. \n+     *\n+     *  @param index  the index of the element to return\n+     *  @return  an {@link Long} object wrapping the <Code>long</Code>\n+     *    value at that index\n+     *  @throws IndexOutOfBoundsException  if the index is negative or\n+     *    greater than or equal to {@link #size()}\n+     */\n+    public Object get(int index) {\n+        return new Long(getLong(index));\n+    }\n+\n+    /** \n+     *  Returns <code>{@link #containsLong containsLong(((Long)value).longValue())}</code>. \n+     *\n+     *  @param value  an {@link Long} object whose wrapped <Code>long</Code>\n+     *    value to search for\n+     *  @return true  if this list contains that <Code>long</Code> value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Long}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n+    public boolean contains(Object value) {\n+        return containsLong(((Long)value).longValue());\n+    }\n+\n+    /** \n+     *  Returns <code>({@link #size} == 0)</code>. \n+     *\n+     *  @return true if this list is empty, false otherwise\n+     */\n+    public boolean isEmpty() {\n+        return (0 == size());\n+    }\n+\n+    /** \n+     *  Returns <code>{@link #indexOfLong indexOfLong(((Long).longValue())}</code>. \n+     *\n+     *  @param value  an {@link Long} object whose wrapped <Code>long</Code>\n+     *    value to search for\n+     *  @return the first index of that <Code>long</Code> value, or -1 if \n+     *    this list does not contain that value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Long}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n+    public int indexOf(Object value) {\n+        return indexOfLong(((Long)value).longValue());\n+    }\n+\n+    /** \n+     *  Returns <code>{@link #lastIndexOfLong lastIndexOfLong(((Long).longValue())}</code>. \n+     *\n+     *  @param value  an {@link Long} object whose wrapped <Code>long</Code>\n+     *    value to search for\n+     *  @return the last index of that <Code>long</Code> value, or -1 if \n+     *    this list does not contain that value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Long}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n+    public int lastIndexOf(Object value) {\n+        return lastIndexOfLong(((Long)value).longValue());\n+    }\n+\n+    //------------------------------------------------------ Abstract Modifiers\n+\n+    /**\n+     *  Sets the element at the given index to the given <Code>long</Code>\n+     *  value.\n+     *\n+     *  @param index  the index of the element to set\n+     *  @param value  the <Code>long</Code> value to set it to\n+     *  @return  the previous <Code>long</Code> value at that index\n+     *  @throws  IndexOutOfBoundsException  if the index is negative or \n+     *     greater than or equal to {@link #size()}.\n+     */\n+    abstract public long setLong(int index, long value);\n+\n+    /**\n+     *  Adds the given <Code>long</Code> value to the end of this list.\n+     *\n+     *  @param value  the value to add\n+     *  @return  true, always\n+     */\n+    abstract public boolean addLong(long value);\n+\n+    /**\n+     *  Inserts the given <Code>long</Code> value into this list at the\n+     *  specified index.\n+     *\n+     *  @param index  the index for the insertion\n+     *  @param value  the value to insert at that index\n+     *  @throws IndexOutOfBoundsException if the index is negative or \n+     *    greater than {@link #size()}\n+     */\n+    abstract public void addLong(int index, long value);\n+\n+    /**\n+     *  Removes the <Code>long</Code> element at the specified index.\n+     *\n+     *  @param index  the index of the element to remove\n+     *  @return  the removed <Code>long</Code> value\n+     *  @throws IndexOutOfBoundsException if the index is negative or\n+     *   greater than or equal to {@link #size()}\n+     */\n+    abstract public long removeLongAt(int index);\n+\n+    /**\n+     *  Removes the first occurrence of the given <Code>long</Code> value\n+     *  from this list.\n+     *\n+     *  @param value  the value to remove\n+     *  @return  true if this list contained that value and removed it,\n+     *   or false if this list didn't contain the value\n+     */\n+    abstract public boolean removeLong(long value);\n+\n+    /**\n+     *  Removes all <Code>long</Code> values from this list.\n+     */\n+    abstract public void clear();\n+\n+    /**\n+     *  Ensures that the length of the internal <Code>long</Code> array is\n+     *  at list the given value.\n+     *\n+     *  @param mincap  the minimum capcity for this list\n+     */\n+    abstract public void ensureCapacity(int mincap);\n+\n+    /**\n+     *  Resizes the internal array such that {@link #capacity()} is equal\n+     *  to {@link #size()}.\n+     */\n+    abstract public void trimToSize();\n+\n+    //--------------------------------------------------------------- Modifiers\n+    \n+    /** \n+     * Returns <code>new Long({@link #setLong(int,long) \n+     * setLong(index,((Long).longValue())})</code>. \n+     *\n+     * @param index  the index of the element to set\n+     * @param value  an {@link Long} object whose <Code>long</Code> value\n+     *  to set at that index\n+     * @return  an {@link Long} that wraps the <Code>long</Code> value  \n+     *   previously at that index\n+     * @throws IndexOutOfBoundsException if the index is negative or greater\n+     *  than or equal to {@link #size()}\n+     * @throws ClassCastException if the given value is not an {@link Long}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n+    public Object set(int index, Object value) {\n+        return new Long(setLong(index,((Long)value).longValue()));\n+    }\n+\n+    /** \n+     * Invokes <code>{@link #addLong(long) addLong(((Long)value).longValue())})</code>. \n+     *\n+     * @param value  an {@link Long} object that wraps the <Code>long</Code>\n+     *   value to add\n+     * @return true, always\n+     * @throws ClassCastException if the given value is not an {@link Long}\n+     * @throws NullPointerException if the given value is <Code>null</COde>     \n+     */\n+    public boolean add(Object value) {\n+        return addLong(((Long)value).longValue());\n+    }    \n+\n+    /** \n+     * Invokes <code>{@link #addLong(int,long) addLong(index,((Long)value).longValue())})</code>. \n+     *\n+     * @param index  the index of the insertion\n+     * @param value an {@link Long} object that wraps the <Code>long</Code>\n+     *   value to insert\n+     * @throws IndexOutOfBoundsException if the index is negative or greater\n+     *   than {@link #size()}\n+     * @throws ClassCastException if the given value is not an {@link Long}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n+    public void add(int index, Object value) {\n+        addLong(index,((Long)value).longValue());\n+    }\n+\n+    /** \n+     * Returns <code>new Long({@link #removeLongAt(int) removeLongAt(index)})</code>. \n+     *\n+     * @param index  the index of the element to remove\n+     * @return  an {@link Long} object that wraps the value that was\n+     *   removed from that index\n+     * @throws IndexOutOfBoundsException  if the given index is negative\n+     *   or greater than or equal to {@link #size()}\n+     */\n+    public Object remove(int index) {\n+        return new Long(removeLongAt(index));\n+    }\n+\n+    /** \n+     * Returns <code>{@link #removeLong(long) removeLong(((Long)value).longValue())}</code>. \n+     *\n+     * @param value  an {@link Long} object that wraps the <Code>long</Code>\n+     *   value to remove\n+     * @return true if the first occurrence of that <Code>long</Code> value\n+     *   was removed from this list, or <Code>false</Code> if this list\n+     *   did not contain that <Code>long</Code> value\n+     * @throws ClassCastException if the given value is not an {@link Long}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n+    public boolean remove(Object value) {\n+        return removeLong(((Long)value).longValue());\n+    }\n+}\n+\n+\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+\n+\n+\n+    \n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractShortList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortList.java,v 1.1 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/19 21:19:03 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Abstract base class for lists backed by a <Code>short</Code> array.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2002/08/19 21:19:03 $\n+ * @author Rodney Waldhoff \n+ */\n+public abstract class AbstractShortList extends AbstractList implements List, Serializable {\n+\n+    //------------------------------------------------------ Abstract Accessors\n+    \n+    /**\n+     *  Returns the maximum size the list can reach before the array \n+     *  is resized.\n+     *\n+     *  @return the maximum size the list can reach before the array is resized\n+     */\n+    abstract public int capacity();\n+\n+    /**\n+     *  Returns the number of <Code>short</Code> elements currently in this\n+     *  list.\n+     *\n+     *  @return the size of this list\n+     */\n+    abstract public int size();\n+\n+    /**\n+     *  Returns the <Code>short</Code> element at the specified index in this\n+     *  array.\n+     *\n+     *  @param index  the index of the element to return\n+     *  @return  the <Code>short</Code> element at that index\n+     *  @throws  IndexOutOfBoundsException  if the index is negative or\n+     *    greater than or equal to {@link #size()}\n+     */\n+    abstract public short getShort(int index);\n+\n+    /**\n+     *  Returns <Code>true</Code> if this list contains the given \n+     *  <Code>short</Code> element.\n+     *\n+     *  @param value  the element to search for\n+     *  @return true if this list contains the given value, false otherwise\n+     */\n+    abstract public boolean containsShort(short value);\n+\n+    /**\n+     *  Returns the first index of the given <Code>short</Code> element, or\n+     *  -1 if the value is not in this list.\n+     *\n+     *  @param value  the element to search for\n+     *  @return  the first index of that element, or -1 if the element is\n+     *    not in this list\n+     */\n+    abstract public int indexOfShort(short value);\n+\n+    /**\n+     *  Returns the last index of the given <Code>short</Code> element, or\n+     *  -1 if the value is not in this list.\n+     *\n+     *  @param value  the element to search for\n+     *  @return  the last index of that element, or -1 if the element is\n+     *    not in this list\n+     */\n+    abstract public int lastIndexOfShort(short value);\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+    /** \n+     *  Returns <code>new Short({@link #getShort getShort(index)})</code>. \n+     *\n+     *  @param index  the index of the element to return\n+     *  @return  an {@link Short} object wrapping the <Code>short</Code>\n+     *    value at that index\n+     *  @throws IndexOutOfBoundsException  if the index is negative or\n+     *    greater than or equal to {@link #size()}\n+     */\n+    public Object get(int index) {\n+        return new Short(getShort(index));\n+    }\n+\n+    /** \n+     *  Returns <code>{@link #containsShort containsShort(((Short)value.shortValue())}</code>. \n+     *\n+     *  @param value  an {@link Short} object whose wrapped <Code>short</Code>\n+     *    value to search for\n+     *  @return true  if this list contains that <Code>short</Code> value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Short}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n+    public boolean contains(Object value) {\n+        return containsShort(((Short)value).shortValue());\n+    }\n+\n+    /** \n+     *  Returns <code>({@link #size} == 0)</code>. \n+     *\n+     *  @return true if this list is empty, false otherwise\n+     */\n+    public boolean isEmpty() {\n+        return (0 == size());\n+    }\n+\n+    /** \n+     *  Returns <code>{@link #indexOfShort indexOfShort(((Short)value.shortValue())}</code>. \n+     *\n+     *  @param value  an {@link Short} object whose wrapped <Code>short</Code>\n+     *    value to search for\n+     *  @return the first index of that <Code>short</Code> value, or -1 if \n+     *    this list does not contain that value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Short}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n+    public int indexOf(Object value) {\n+        return indexOfShort(((Short)value).shortValue());\n+    }\n+\n+    /** \n+     *  Returns <code>{@link #lastIndexOfShort lastIndexOfShort(((Short)value.shortValue())}</code>. \n+     *\n+     *  @param value  an {@link Short} object whose wrapped <Code>short</Code>\n+     *    value to search for\n+     *  @return the last index of that <Code>short</Code> value, or -1 if \n+     *    this list does not contain that value\n+     *  @throws ClassCastException  if the given object is not an \n+     *    {@link Short}\n+     *  @throws NullPointerException  if the given object is <Code>null</Code> \n+     */\n+    public int lastIndexOf(Object value) {\n+        return lastIndexOfShort(((Short)value).shortValue());\n+    }\n+\n+    //------------------------------------------------------ Abstract Modifiers\n+\n+    /**\n+     *  Sets the element at the given index to the given <Code>short</Code>\n+     *  value.\n+     *\n+     *  @param index  the index of the element to set\n+     *  @param value  the <Code>short</Code> value to set it to\n+     *  @return  the previous <Code>short</Code> value at that index\n+     *  @throws  IndexOutOfBoundsException  if the index is negative or \n+     *     greater than or equal to {@link #size()}.\n+     */\n+    abstract public short setShort(int index, short value);\n+\n+    /**\n+     *  Adds the given <Code>short</Code> value to the end of this list.\n+     *\n+     *  @param value  the value to add\n+     *  @return  true, always\n+     */\n+    abstract public boolean addShort(short value);\n+\n+    /**\n+     *  Inserts the given <Code>short</Code> value into this list at the\n+     *  specified index.\n+     *\n+     *  @param index  the index for the insertion\n+     *  @param value  the value to insert at that index\n+     *  @throws IndexOutOfBoundsException if the index is negative or \n+     *    greater than {@link #size()}\n+     */\n+    abstract public void addShort(int index, short value);\n+\n+    /**\n+     *  Removes the <Code>short</Code> element at the specified index.\n+     *\n+     *  @param index  the index of the element to remove\n+     *  @return  the removed <Code>short</Code> value\n+     *  @throws IndexOutOfBoundsException if the index is negative or\n+     *   greater than or equal to {@link #size()}\n+     */\n+    abstract public short removeShortAt(int index);\n+\n+    /**\n+     *  Removes the first occurrence of the given <Code>short</Code> value\n+     *  from this list.\n+     *\n+     *  @param value  the value to remove\n+     *  @return  true if this list contained that value and removed it,\n+     *   or false if this list didn't contain the value\n+     */\n+    abstract public boolean removeShort(short value);\n+\n+    /**\n+     *  Removes all <Code>short</Code> values from this list.\n+     */\n+    abstract public void clear();\n+\n+    /**\n+     *  Ensures that the length of the internal <Code>short</Code> array is\n+     *  at list the given value.\n+     *\n+     *  @param mincap  the minimum capcity for this list\n+     */\n+    abstract public void ensureCapacity(int mincap);\n+\n+    /**\n+     *  Resizes the internal array such that {@link #capacity()} is equal\n+     *  to {@link #size()}.\n+     */\n+    abstract public void trimToSize();\n+\n+    //--------------------------------------------------------------- Modifiers\n+    \n+    /** \n+     * Returns <code>new Short({@link #setShort(int,short) \n+     * setShort(index,((Short)value.shortValue())})</code>. \n+     *\n+     * @param index  the index of the element to set\n+     * @param value  an {@link Short} object whose <Code>short</Code> value\n+     *  to set at that index\n+     * @return  an {@link Short} that wraps the <Code>short</Code> value  \n+     *   previously at that index\n+     * @throws IndexOutOfBoundsException if the index is negative or greater\n+     *  than or equal to {@link #size()}\n+     * @throws ClassCastException if the given value is not an {@link Short}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n+    public Object set(int index, Object value) {\n+        return new Short(setShort(index,((Short)value).shortValue()));\n+    }\n+\n+    /** \n+     * Invokes <code>{@link #addShort(short) addShort(((Short)value.shortValue())})</code>. \n+     *\n+     * @param value  an {@link Short} object that wraps the <Code>short</Code>\n+     *   value to add\n+     * @return true, always\n+     * @throws ClassCastException if the given value is not an {@link Short}\n+     * @throws NullPointerException if the given value is <Code>null</COde>     \n+     */\n+    public boolean add(Object value) {\n+        return addShort(((Short)value).shortValue());\n+    }    \n+\n+    /** \n+     * Invokes <code>{@link #addShort(int,short) addShort(index,((Short)value.shortValue())})</code>. \n+     *\n+     * @param index  the index of the insertion\n+     * @param value an {@link Short} object that wraps the <Code>short</Code>\n+     *   value to insert\n+     * @throws IndexOutOfBoundsException if the index is negative or greater\n+     *   than {@link #size()}\n+     * @throws ClassCastException if the given value is not an {@link Short}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n+    public void add(int index, Object value) {\n+        addShort(index,((Short)value).shortValue());\n+    }\n+\n+    /** \n+     * Returns <code>new Short({@link #removeShortAt(int) removeIntAt(index)})</code>. \n+     *\n+     * @param index  the index of the element to remove\n+     * @return  an {@link Short} object that wraps the value that was\n+     *   removed from that index\n+     * @throws IndexOutOfBoundsException  if the given index is negative\n+     *   or greater than or equal to {@link #size()}\n+     */\n+    public Object remove(int index) {\n+        return new Short(removeShortAt(index));\n+    }\n+\n+    /** \n+     * Returns <code>{@link #removeShort(short) removeShort(((Short)value.shortValue())}</code>. \n+     *\n+     * @param value  an {@link Short} object that wraps the <Code>short</Code>\n+     *   value to remove\n+     * @return true if the first occurrence of that <Code>short</Code> value\n+     *   was removed from this list, or <Code>false</Code> if this list\n+     *   did not contain that <Code>short</Code> value\n+     * @throws ClassCastException if the given value is not an {@link Short}\n+     * @throws NullPointerException if the given value is <Code>null</COde>\n+     */\n+    public boolean remove(Object value) {\n+        return removeShort(((Short)value).shortValue());\n+    }\n+\n+}\n+\n+\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+\n+\n+    \n--- a/src/java/org/apache/commons/collections/primitives/IntArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntArrayList.java,v 1.2 2002/08/13 19:41:36 pjack Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/08/13 19:41:36 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/19 21:19:03 $\n  *\n  * ====================================================================\n  *\n /**\n  * A list of <Code>int</Code> elements.\n  *\n- * @version $Revision: 1.2 $ $Date: 2002/08/13 19:41:36 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n  * @author Rodney Waldhoff \n  */\n-public class IntArrayList extends AbstractIntArrayList implements List, Serializable {\n+public class IntArrayList extends AbstractIntList implements List, Serializable {\n \n     //------------------------------------------------------------ Constructors  \n \n--- a/src/java/org/apache/commons/collections/primitives/LongArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/LongArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/LongArrayList.java,v 1.2 2002/08/13 19:41:36 pjack Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/08/13 19:41:36 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/LongArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/19 21:19:03 $\n  *\n  * ====================================================================\n  *\n /**\n  * A list of <Code>long</COde> elements.\n  *\n- * @version $Revision: 1.2 $ $Date: 2002/08/13 19:41:36 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n  * @author Rodney Waldhoff \n  */\n-public class LongArrayList extends AbstractLongArrayList implements List, Serializable {\n+public class LongArrayList extends AbstractLongList implements List, Serializable {\n \n     //------------------------------------------------------------ Constructors\n     \n--- a/src/java/org/apache/commons/collections/primitives/ShortArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ShortArrayList.java,v 1.2 2002/08/13 19:41:36 pjack Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/08/13 19:41:36 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ShortArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/19 21:19:03 $\n  *\n  * ====================================================================\n  *\n /**\n  * A list of <Code>short</Code> elements.\n  * \n- * @version $Revision: 1.2 $ $Date: 2002/08/13 19:41:36 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n  * @author Rodney Waldhoff \n  */\n-public class ShortArrayList extends AbstractShortArrayList implements List, Serializable {\n+public class ShortArrayList extends AbstractShortList implements List, Serializable {\n \n     //------------------------------------------------------------ Constructors\n     \n--- a/src/java/org/apache/commons/collections/primitives/UnsignedByteArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedByteArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedByteArrayList.java,v 1.2 2002/08/13 19:41:36 pjack Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/08/13 19:41:36 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedByteArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/19 21:19:03 $\n  *\n  * ====================================================================\n  *\n  * Mutators on this class will reject any <Code>short</Code> that does not\n  * express an unsigned 8-bit value.\n  *\n- * @version $Revision: 1.2 $ $Date: 2002/08/13 19:41:36 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n  * @author Rodney Waldhoff \n  */\n-public class UnsignedByteArrayList extends AbstractShortArrayList implements List, Serializable {\n+public class UnsignedByteArrayList extends AbstractShortList implements List, Serializable {\n \n     //------------------------------------------------------------ Constructors\n     \n--- a/src/java/org/apache/commons/collections/primitives/UnsignedIntArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedIntArrayList.java,v 1.2 2002/08/13 19:41:36 pjack Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/08/13 19:41:36 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedIntArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/19 21:19:03 $\n  *\n  * ====================================================================\n  *\n  * Mutators on this class will reject any <Code>long</Code> that does not\n  * express an unsigned 16-bit value.\n  *\n- * @version $Revision: 1.2 $ $Date: 2002/08/13 19:41:36 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n  * @author Rodney Waldhoff \n  */\n-public class UnsignedIntArrayList extends AbstractLongArrayList implements List, Serializable {\n+public class UnsignedIntArrayList extends AbstractLongList implements List, Serializable {\n \n     //------------------------------------------------------------ Constructors\n     \n--- a/src/java/org/apache/commons/collections/primitives/UnsignedShortArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedShortArrayList.java,v 1.2 2002/08/13 19:41:36 pjack Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/08/13 19:41:36 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedShortArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/19 21:19:03 $\n  *\n  * ====================================================================\n  *\n  * Mutators on this class will reject any <Code>int</Code> that does not\n  * express an unsigned 16-bit value.\n  *\n- * @version $Revision: 1.2 $ $Date: 2002/08/13 19:41:36 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n  * @author Rodney Waldhoff \n  */\n-public class UnsignedShortArrayList extends AbstractIntArrayList implements List, Serializable {\n+public class UnsignedShortArrayList extends AbstractIntList implements List, Serializable {\n \n     //------------------------------------------------------------ Constructors\n     \n--- a/src/test/org/apache/commons/collections/primitives/TestAbstractIntArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestAbstractIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractIntArrayList.java,v 1.2 2002/06/21 04:01:31 mas Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/06/21 04:01:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractIntArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/19 21:19:03 $\n  *\n  * ====================================================================\n  *\n import java.util.List;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2002/06/21 04:01:31 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n  * @author Rodney Waldhoff\n  */\n public abstract class TestAbstractIntArrayList extends TestList {\n \n     //---------------------------------------------------------------- Abstract\n \n-    abstract protected AbstractIntArrayList createList();\n+    abstract protected AbstractIntList createList();\n \n     //------------------------------------------------------- TestList interface\n \n     //------------------------------------------------------------------- Tests\n \n     public void testAddGet() {\n-        AbstractIntArrayList list = createList();\n+        AbstractIntList list = createList();\n         for(int i=0;i<1000;i++) {\n             list.addInt(i);\n         }\n     }\n \n     public void testAddGetLargeValues() {\n-        AbstractIntArrayList list = createList();\n+        AbstractIntList list = createList();\n         for(int i=0;i<1000;i++) {\n             int value = ((int)(Short.MAX_VALUE));\n             value += i;\n     }\n \n    public void testAddAndShift() {\n-      AbstractIntArrayList list = createList();\n+      AbstractIntList list = createList();\n       list.addInt(0, 1);\n       assertEquals(\"Should have one entry\", 1, list.size());\n       list.addInt(3);\n--- a/src/test/org/apache/commons/collections/primitives/TestAbstractLongArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestAbstractLongArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractLongArrayList.java,v 1.2 2002/06/21 04:01:31 mas Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/06/21 04:01:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractLongArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/19 21:19:03 $\n  *\n  * ====================================================================\n  *\n import java.util.List;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2002/06/21 04:01:31 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n  * @author Rodney Waldhoff\n  */\n public abstract class TestAbstractLongArrayList extends TestList {\n \n     //---------------------------------------------------------------- Abstract\n \n-    abstract protected AbstractLongArrayList createList();\n+    abstract protected AbstractLongList createList();\n \n     //------------------------------------------------------- TestList interface\n \n     //------------------------------------------------------------------- Tests\n \n     public void testAddGet() {\n-        AbstractLongArrayList list = createList();\n+        AbstractLongList list = createList();\n         for(long i=0L;i<1000L;i++) {\n             list.addLong(i);\n         }\n     }\n \n     public void testAddGetLargeValues() {\n-        AbstractLongArrayList list = createList();\n+        AbstractLongList list = createList();\n         for(long i=0L;i<1000L;i++) {\n             long value = ((long)(Integer.MAX_VALUE));\n             value += i;\n--- a/src/test/org/apache/commons/collections/primitives/TestAbstractShortArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestAbstractShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractShortArrayList.java,v 1.2 2002/06/21 04:01:31 mas Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/06/21 04:01:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractShortArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/19 21:19:03 $\n  *\n  * ====================================================================\n  *\n import java.util.List;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2002/06/21 04:01:31 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n  * @author Rodney Waldhoff\n  */\n public abstract class TestAbstractShortArrayList extends TestList {\n \n     //---------------------------------------------------------------- Abstract\n \n-    abstract protected AbstractShortArrayList createList();\n+    abstract protected AbstractShortList createList();\n \n     //------------------------------------------------------- TestList interface\n \n     //------------------------------------------------------------------- Tests\n \n     public void testAddGet() {\n-        AbstractShortArrayList list = createList();\n+        AbstractShortList list = createList();\n         for(short i=0;i<100;i++) {\n             list.addShort(i);\n         }\n     }\n \n     public void testAddGetLargeValues() {\n-        AbstractShortArrayList list = createList();\n+        AbstractShortList list = createList();\n         for(short i=128;i<256;i++) {\n             list.addShort(i);\n         }\n--- a/src/test/org/apache/commons/collections/primitives/TestIntArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntArrayList.java,v 1.2 2002/06/21 04:01:31 mas Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/06/21 04:01:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/19 21:19:03 $\n  *\n  * ====================================================================\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2002/06/21 04:01:31 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n  * @author Rodney Waldhoff\n  */\n public class TestIntArrayList extends TestAbstractIntArrayList {\n \n     //---------------------------------------------------------------- Abstract\n \n-    protected AbstractIntArrayList createList() {\n+    protected AbstractIntList createList() {\n         return new IntArrayList();\n     }\n \n--- a/src/test/org/apache/commons/collections/primitives/TestLongArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestLongArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestLongArrayList.java,v 1.2 2002/06/21 04:01:31 mas Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/06/21 04:01:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestLongArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/19 21:19:03 $\n  *\n  * ====================================================================\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2002/06/21 04:01:31 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n  * @author Rodney Waldhoff\n  */\n public class TestLongArrayList extends TestAbstractLongArrayList {\n \n     //---------------------------------------------------------- Abstract Impls\n \n-    protected AbstractLongArrayList createList() {\n+    protected AbstractLongList createList() {\n         return new LongArrayList();\n     }\n \n--- a/src/test/org/apache/commons/collections/primitives/TestShortArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestShortArrayList.java,v 1.2 2002/06/21 04:01:31 mas Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/06/21 04:01:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestShortArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/19 21:19:03 $\n  *\n  * ====================================================================\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2002/06/21 04:01:31 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n  * @author Rodney Waldhoff\n  */\n public class TestShortArrayList extends TestAbstractShortArrayList {\n \n     //---------------------------------------------------------------- Abstract\n \n-    protected AbstractShortArrayList createList() {\n+    protected AbstractShortList createList() {\n         return new ShortArrayList();\n     }\n \n--- a/src/test/org/apache/commons/collections/primitives/TestUnsignedByteArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestUnsignedByteArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedByteArrayList.java,v 1.2 2002/06/21 04:01:31 mas Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/06/21 04:01:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedByteArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/19 21:19:03 $\n  *\n  * ====================================================================\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2002/06/21 04:01:31 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n  * @author Rodney Waldhoff\n  */\n public class TestUnsignedByteArrayList extends TestAbstractShortArrayList {\n \n     //---------------------------------------------------------------- Abstract\n \n-    protected AbstractShortArrayList createList() {\n+    protected AbstractShortList createList() {\n         return new UnsignedByteArrayList();\n     }\n \n--- a/src/test/org/apache/commons/collections/primitives/TestUnsignedIntArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestUnsignedIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedIntArrayList.java,v 1.2 2002/06/21 04:01:31 mas Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/06/21 04:01:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedIntArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/19 21:19:03 $\n  *\n  * ====================================================================\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2002/06/21 04:01:31 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n  * @author Rodney Waldhoff\n  */\n public class TestUnsignedIntArrayList extends TestAbstractLongArrayList {\n \n     //---------------------------------------------------------- Abstract Impls\n \n-    protected AbstractLongArrayList createList() {\n+    protected AbstractLongList createList() {\n         return new UnsignedIntArrayList();\n     }\n \n--- a/src/test/org/apache/commons/collections/primitives/TestUnsignedShortArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestUnsignedShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedShortArrayList.java,v 1.2 2002/06/21 04:01:31 mas Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/06/21 04:01:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedShortArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/19 21:19:03 $\n  *\n  * ====================================================================\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2002/06/21 04:01:31 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n  * @author Rodney Waldhoff\n  */\n public class TestUnsignedShortArrayList extends TestAbstractIntArrayList {\n \n     //---------------------------------------------------------------- Abstract\n \n-    protected AbstractIntArrayList createList() {\n+    protected AbstractIntList createList() {\n         return new UnsignedShortArrayList();\n     }\n ", "timestamp": 1029791943, "metainfo": ""}