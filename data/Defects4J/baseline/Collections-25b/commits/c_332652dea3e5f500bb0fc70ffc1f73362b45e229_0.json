{"sha": "332652dea3e5f500bb0fc70ffc1f73362b45e229", "log": "Update licence and javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/collections/PriorityQueue.java\n+++ b/src/java/org/apache/commons/collections/PriorityQueue.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PriorityQueue.java,v 1.5 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/06/12 03:59:15 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PriorityQueue.java,v 1.6 2003/05/16 14:58:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *    distribution.\n  *\n  * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n+ *    any, must include the following acknowledgment:\n  *       \"This product includes software developed by the\n  *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n  *\n  * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n  *    Foundation\" must not be used to endorse or promote products derived\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  * Interface for priority queues.\n  * This interface does not dictate whether it is min or max heap.\n  *\n- * @since 1.0\n+ * @since Commons Collections 1.0\n+ * @version $Revision: 1.6 $ $Date: 2003/05/16 14:58:42 $\n+ * \n  * @author  <a href=\"mailto:donaldp@apache.org\">Peter Donald</a>\n  */\n-public interface PriorityQueue\n-{\n+public interface PriorityQueue {\n+    \n     /**\n      * Clear all elements from queue.\n      */\n      *\n      * @param element the element to be inserted\n      *\n-     * @exception ClassCastException if the specified <code>element</code>'s\n+     * @throws ClassCastException if the specified <code>element</code>'s\n      * type prevents it from being compared to other items in the queue to\n      * determine its relative priority.  \n      */\n-    void insert( Object element );\n+    void insert(Object element);\n \n     /**\n      * Return element on top of heap but don't remove it.\n      *\n      * @return the element at top of heap\n-     * @exception NoSuchElementException if <code>isEmpty() == true</code>\n+     * @throws NoSuchElementException if <code>isEmpty() == true</code>\n      */\n     Object peek() throws NoSuchElementException;\n \n      * Return element on top of heap and remove it.\n      *\n      * @return the element at top of heap\n-     * @exception NoSuchElementException if <code>isEmpty() == true</code>\n+     * @throws NoSuchElementException if <code>isEmpty() == true</code>\n      */\n     Object pop() throws NoSuchElementException;\n+    \n }\n-\n--- a/src/java/org/apache/commons/collections/ProxyMap.java\n+++ b/src/java/org/apache/commons/collections/ProxyMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ProxyMap.java,v 1.7 2003/05/10 17:07:28 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ProxyMap.java,v 1.8 2003/05/16 14:58:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *    distribution.\n  *\n  * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n+ *    any, must include the following acknowledgment:\n  *       \"This product includes software developed by the\n  *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n  *\n  * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n  *    Foundation\" must not be used to endorse or promote products derived\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  * @deprecated this class has been moved to the deprecated subpackage as\n  *  AbstractMapDecorator\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.7 $ $Date: 2003/05/10 17:07:28 $\n+ * @version $Revision: 1.8 $ $Date: 2003/05/16 14:58:42 $\n  * \n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/ReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/ReferenceMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ReferenceMap.java,v 1.11 2003/05/07 09:18:57 rdonkin Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ReferenceMap.java,v 1.12 2003/05/16 14:58:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n \n /**\n  *  Hashtable-based {@link Map} implementation that allows\n- *  mappings to be removed by the garbage collector.<P>\n- *\n- *  When you construct a <Code>ReferenceMap</Code>, you can \n+ *  mappings to be removed by the garbage collector.<p>\n+ *\n+ *  When you construct a <code>ReferenceMap</code>, you can \n  *  specify what kind of references are used to store the\n  *  map's keys and values.  If non-hard references are \n  *  used, then the garbage collector can remove mappings\n  *  if a key or value becomes unreachable, or if the \n  *  JVM's memory is running low.  For information on how\n  *  the different reference types behave, see\n- *  {@link Reference}.<P>\n+ *  {@link Reference}.<p>\n  *\n  *  Different types of references can be specified for keys\n  *  and values.  The keys can be configured to be weak but\n  *  the values hard, in which case this class will behave\n- *  like a <A HREF=\"http://java.sun.com/j2se/1.4/docs/api/java/util/WeakHashMap.html\">\n- *  <Code>WeakHashMap</Code></A>.  However, you\n+ *  like a <a href=\"http://java.sun.com/j2se/1.4/docs/api/java/util/WeakHashMap.html\">\n+ *  <code>WeakHashMap</code></a>.  However, you\n  *  can also specify hard keys and weak values, or any other\n  *  combination.  The default constructor uses hard keys\n- *  and soft values, providing a memory-sensitive cache.<P>\n+ *  and soft values, providing a memory-sensitive cache.<p>\n  *\n  *  The algorithms used are basically the same as those\n  *  in {@link java.util.HashMap}.  In particular, you \n  *  can specify a load factor and capacity to suit your\n  *  needs.  All optional {@link Map} operations are \n- *  supported.<P>\n+ *  supported.<p>\n  *\n  *  However, this {@link Map} implementation does <I>not</I>\n  *  allow null elements.  Attempting to add a null key or\n  *  or a null value to the map will raise a \n- *  <Code>NullPointerException</Code>.<P>\n+ *  <code>NullPointerException</code>.<p>\n  *\n  *  As usual, this implementation is not synchronized.  You\n  *  can use {@link java.util.Collections#synchronizedMap} to \n- *  provide synchronized access to a <Code>ReferenceMap</Code>.\n+ *  provide synchronized access to a <code>ReferenceMap</code>.\n  *\n  * @see java.lang.ref.Reference\n  * \n  * @since Commons Collections 2.1\n- * @version $Revision: 1.11 $ $Date: 2003/05/07 09:18:57 $\n+ * @version $Revision: 1.12 $ $Date: 2003/05/16 14:58:42 $\n  * \n  * @author Paul Jack\n  */\n \n \n     /**\n-     *  Constructs a new <Code>ReferenceMap</Code> that will\n+     *  Constructs a new <code>ReferenceMap</code> that will\n      *  use hard references to keys and soft references to values.\n      */\n     public ReferenceMap() {\n     }\n \n     /**\n-     *  Constructs a new <Code>ReferenceMap</Code> that will\n+     *  Constructs a new <code>ReferenceMap</code> that will\n      *  use the specified types of references.\n      *\n      *  @param keyType  the type of reference to use for keys;\n     }\n \n     /**\n-     *  Constructs a new <Code>ReferenceMap</Code> that will\n+     *  Constructs a new <code>ReferenceMap</code> that will\n      *  use the specified types of references.\n      *\n      *  @param keyType  the type of reference to use for keys;\n     }\n \n     /**\n-     *  Constructs a new <Code>ReferenceMap</Code> with the\n+     *  Constructs a new <code>ReferenceMap</code> with the\n      *  specified reference types, load factor and initial\n      *  capacity.\n      *\n     }\n \n     /**\n-     *  Constructs a new <Code>ReferenceMap</Code> with the\n+     *  Constructs a new <code>ReferenceMap</code> with the\n      *  specified reference types, load factor and initial\n      *  capacity.\n      *\n \n \n     /**\n-     *  Returns <Code>true</Code> if this map is empty.\n-     *\n-     *  @return <Code>true</Code> if this map is empty\n+     *  Returns <code>true</code> if this map is empty.\n+     *\n+     *  @return <code>true</code> if this map is empty\n      */\n     public boolean isEmpty() {\n         purge();\n \n \n     /**\n-     *  Returns <Code>true</Code> if this map contains the given key.\n+     *  Returns <code>true</code> if this map contains the given key.\n      *\n      *  @return true if the given key is in this map\n      */\n     /**\n      *  Returns the value associated with the given key, if any.\n      *\n-     *  @return the value associated with the given key, or <Code>null</Code>\n+     *  @return the value associated with the given key, or <code>null</code>\n      *   if the key maps to no value\n      */\n     public Object get(Object key) {\n \n \n     /**\n-     *  Associates the given key with the given value.<P>\n+     *  Associates the given key with the given value.<p>\n      *  Neither the key nor the value may be null.\n      *\n      *  @param key  the key of the mapping\n--- a/src/java/org/apache/commons/collections/SequencedHashMap.java\n+++ b/src/java/org/apache/commons/collections/SequencedHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.16 2003/02/19 20:14:25 scolebourne Exp $\n- * $Revision: 1.16 $\n- * $Date: 2003/02/19 20:14:25 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.17 2003/05/16 14:58:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *    distribution.\n  *\n  * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n+ *    any, must include the following acknowledgment:\n  *       \"This product includes software developed by the\n  *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n  *\n  * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n  *    Foundation\" must not be used to endorse or promote products derived\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n import java.util.Map;\n import java.util.NoSuchElementException;\n import java.util.Set;\n+\n /**\n  *  A map of objects whose mapping entries are sequenced based on the order in\n- *  which they were added.  This data structure has fast <I>O(1)</I> search\n+ *  which they were added.  This data structure has fast <i>O(1)</i> search\n  *  time, deletion time, and insertion time.\n  *\n- *  <P>Although this map is sequenced, it cannot implement {@link\n+ *  <p>Although this map is sequenced, it cannot implement {@link\n  *  java.util.List} because of incompatible interface definitions.  The remove\n  *  methods in List and Map have different return values (see: {@link\n  *  java.util.List#remove(Object)} and {@link java.util.Map#remove(Object)}).\n  *\n- *  <P>This class is not thread safe.  When a thread safe implementation is\n+ *  <p>This class is not thread safe.  When a thread safe implementation is\n  *  required, use {@link Collections#synchronizedMap(Map)} as it is documented,\n  *  or use explicit synchronization controls.\n  *\n- * @since 2.0\n+ * @since Commons Collections 2.0\n+ * @version $Revision: 1.17 $ $Date: 2003/05/16 14:58:42 $\n+ * \n  * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</A>\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n      * value of a list.  This occurs because changing the key, changes when the\n      * mapping is added to the map and thus where it appears in the list.\n      *\n-     * <P>An alternative to this method is to use {@link #keySet()}\n+     * <p>An alternative to this method is to use {@link #keySet()}\n      *\n      * @see #keySet()\n      * @return The ordered list of keys.  \n--- a/src/java/org/apache/commons/collections/SortedBag.java\n+++ b/src/java/org/apache/commons/collections/SortedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SortedBag.java,v 1.4 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/06/12 03:59:15 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SortedBag.java,v 1.5 2003/05/16 14:58:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *    distribution.\n  *\n  * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n+ *    any, must include the following acknowledgment:\n  *       \"This product includes software developed by the\n  *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n  *\n  * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n  *    Foundation\" must not be used to endorse or promote products derived\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  * <http://www.apache.org/>.\n  *\n  */\n-\n package org.apache.commons.collections;\n \n import java.util.Comparator;\n  * A type of {@link Bag} that maintains order among its unique\n  * representative members.\n  *\n- * @since 2.0\n+ * @since Commons Collections 2.0\n+ * @version $Revision: 1.5 $ $Date: 2003/05/16 14:58:42 $\n+ * \n  * @author Chuck Burdick\n- **/\n+ */\n public interface SortedBag extends Bag {\n \n-   /**\n-    * Returns the comparator associated with this sorted set, or null\n-    * if it uses its elements' natural ordering.\n-    **/\n-   public Comparator comparator();\n+    /**\n+     * Returns the comparator associated with this sorted set, or null\n+     * if it uses its elements' natural ordering.\n+     * \n+     * @return the comparator in use, or null if natural ordering\n+     */\n+    public Comparator comparator();\n \n-   /**\n-    * Returns the first (lowest) member.\n-    **/\n-   public Object first();\n+    /**\n+     * Returns the first (lowest) member.\n+     * \n+     * @return the first element in the sorted bag\n+     */\n+    public Object first();\n \n-   /**\n-    * Returns the last (highest) member.\n-    **/\n-   public Object last();\n+    /**\n+     * Returns the last (highest) member.\n+     * \n+     * @return the last element in the sorted bag\n+     */\n+    public Object last();\n+    \n }\n--- a/src/java/org/apache/commons/collections/StaticBucketMap.java\n+++ b/src/java/org/apache/commons/collections/StaticBucketMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/StaticBucketMap.java,v 1.8 2003/02/19 20:14:25 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/StaticBucketMap.java,v 1.9 2003/05/16 14:58:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * number of entries exceeds the number of buckets or if the hashcodes of the\n  * objects are not uniformly distributed, these operations have a worst case\n  * scenario that is proportional to the number of elements in the map\n- * (<I>O(n)</I>).<P>\n+ * (<i>O(n)</i>).<p>\n  *\n  * Each bucket in the hash table has its own monitor, so two threads can \n  * safely operate on the map at the same time, often without incurring any \n  * that this map implementation behaves in ways you may find disconcerting.  \n  * Bulk operations, such as {@link #putAll(Map) putAll} or the\n  * {@link Collection#retainAll(Collection) retainAll} operation in collection \n- * views, are <I>not</I> atomic.  If two threads are simultaneously \n+ * views, are <i>not</i> atomic.  If two threads are simultaneously \n  * executing \n  *\n- * <Pre>\n+ * <pre>\n  *   staticBucketMapInstance.putAll(map);\n- * </Pre>\n+ * </pre>\n  *\n  * and\n  *\n- * <Pre>\n+ * <pre>\n  *   staticBucketMapInstance.entrySet().removeAll(map.entrySet());\n- * </Pre>\n+ * </pre>\n  *\n  * then the results are generally random.  Those two statement could cancel\n- * each other out, leaving <Code>staticBucketMapInstance</Code> essentially \n- * unchanged, or they could leave some random subset of <Code>map</Code> in \n- * <Code>staticBucketMapInstance</Code>.<P>\n+ * each other out, leaving <code>staticBucketMapInstance</code> essentially \n+ * unchanged, or they could leave some random subset of <code>map</code> in \n+ * <code>staticBucketMapInstance</code>.<p>\n  *\n  * Also, much like an encyclopedia, the results of {@link #size()} and \n- * {@link #isEmpty()} are out-of-date as soon as they are produced.<P>\n- *\n- * The iterators returned by the collection views of this class are <I>not</I>\n- * fail-fast.  They will <I>never</I> raise a \n+ * {@link #isEmpty()} are out-of-date as soon as they are produced.<p>\n+ *\n+ * The iterators returned by the collection views of this class are <i>not</i>\n+ * fail-fast.  They will <i>never</i> raise a \n  * {@link java.util.ConcurrentModificationException}.  Keys and values \n  * added to the map after the iterator is created do not necessarily appear\n  * during iteration.  Similarly, the iterator does not necessarily fail to \n- * return keys and values that were removed after the iterator was created.<P>\n+ * return keys and values that were removed after the iterator was created.<p>\n  *\n  * Finally, unlike {@link java.util.HashMap}-style implementations, this\n- * class <I>never</I> rehashes the map.  The number of buckets is fixed \n+ * class <i>never</i> rehashes the map.  The number of buckets is fixed \n  * at construction time and never altered.  Performance may degrade if \n- * you do not allocate enough buckets upfront.<P>\n+ * you do not allocate enough buckets upfront.<p>\n  *\n  * The {@link #atomic(Runnable)} method is provided to allow atomic iterations\n  * and bulk operations; however, overuse of {@link #atomic(Runnable) atomic}\n  *\n  * Use this class if you do not require reliable bulk operations and \n  * iterations, or if you can make your own guarantees about how bulk \n- * operations will affect the map.<P>\n+ * operations will affect the map.<p>\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.8 $ $Date: 2003/02/19 20:14:25 $\n+ * @version $Revision: 1.9 $ $Date: 2003/05/16 14:58:42 $\n  * \n  * @author <a href=\"mailto:bloritsch@apache.org\">Berin Loritsch</a>\n  * @author <a href=\"mailto:g-froehlich@gmx.de\">Gerhard Froehlich</a>\n  * @author Paul Jack\n  * @author Leo Sutic\n  */\n-public final class StaticBucketMap implements Map\n-{\n+public final class StaticBucketMap implements Map {\n+\n     private static final int DEFAULT_BUCKETS = 255;\n     private Node[] m_buckets;\n     private Lock[] m_locks;\n      *  given {@link Runnable} executes.  This method can be used, for\n      *  instance, to execute a bulk operation atomicly: \n      *\n-     *  <Pre>\n+     *  <pre>\n      *    staticBucketMapInstance.atomic(new Runnable() {\n      *        public void run() {\n      *            staticBucketMapInstance.putAll(map);\n      *        }\n      *    });\n-     *  </Pre>\n+     *  </pre>\n      *\n      *  It can also be used if you need a reliable iterator:\n      *\n-     *  <Pre>\n+     *  <pre>\n      *    staticBucketMapInstance.atomic(new Runnable() {\n      *        public void run() {\n      *            Iterator iterator = staticBucketMapInstance.iterator();\n      *            }\n      *        }\n      *    });\n-     *  </Pre>\n+     *  </pre>\n      *\n      *  <B>Implementation note:</B> This method requires a lot of time\n      *  and a ton of stack space.  Essentially a recursive algorithm is used\n--- a/src/java/org/apache/commons/collections/SynchronizedPriorityQueue.java\n+++ b/src/java/org/apache/commons/collections/SynchronizedPriorityQueue.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SynchronizedPriorityQueue.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/15 20:04:31 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SynchronizedPriorityQueue.java,v 1.6 2003/05/16 14:58:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *    distribution.\n  *\n  * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n+ *    any, must include the following acknowledgment:\n  *       \"This product includes software developed by the\n  *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n  *\n  * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n  *    Foundation\" must not be used to endorse or promote products derived\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  * Provides synchronized wrapper methods for all the methods \n  * defined in the PriorityQueue interface.\n  *\n- * @since 1.0\n+ * @since Commons Collections 1.0\n+ * @version $Revision: 1.6 $ $Date: 2003/05/16 14:58:42 $\n+ * \n  * @author  <a href=\"mailto:ram.chidambaram@telus.com\">Ram Chidambaram</a> \n  */\n-public final class SynchronizedPriorityQueue \n-    implements PriorityQueue\n-{\n+public final class SynchronizedPriorityQueue implements PriorityQueue {\n \n     /**\n-     *  The underlying priority queue.\n+     * The underlying priority queue.\n      */\n-    protected final PriorityQueue   m_priorityQueue;\n-\n+    protected final PriorityQueue m_priorityQueue;\n \n     /**\n-     *  Constructs a new synchronized priority queue.\n+     * Constructs a new synchronized priority queue.\n      *\n-     *  @param priorityQueue the priority queue to synchronize\n+     * @param priorityQueue  the priority queue to synchronize\n      */\n-    public SynchronizedPriorityQueue( final PriorityQueue priorityQueue )\n-    {\n+    public SynchronizedPriorityQueue(final PriorityQueue priorityQueue) {\n         m_priorityQueue = priorityQueue;\n     }\n \n     /**\n      * Clear all elements from queue.\n      */\n-    public synchronized void clear()\n-    {\n+    public synchronized void clear() {\n         m_priorityQueue.clear();\n     }\n \n      *\n      * @return true if queue is empty else false.\n      */\n-    public synchronized boolean isEmpty()\n-    {\n+    public synchronized boolean isEmpty() {\n         return m_priorityQueue.isEmpty();\n     }\n \n      *\n      * @param element the element to be inserted\n      */\n-    public synchronized void insert( final Object element )\n-    {\n-        m_priorityQueue.insert( element );\n+    public synchronized void insert(final Object element) {\n+        m_priorityQueue.insert(element);\n     }\n \n     /**\n      * Return element on top of heap but don't remove it.\n      *\n      * @return the element at top of heap\n-     * @exception NoSuchElementException if isEmpty() == true\n+     * @throws NoSuchElementException if isEmpty() == true\n      */\n-    public synchronized Object peek() throws NoSuchElementException\n-    {\n+    public synchronized Object peek() throws NoSuchElementException {\n         return m_priorityQueue.peek();\n     }\n \n      * Return element on top of heap and remove it.\n      *\n      * @return the element at top of heap\n-     * @exception NoSuchElementException if isEmpty() == true\n+     * @throws NoSuchElementException if isEmpty() == true\n      */\n-    public synchronized Object pop() throws NoSuchElementException\n-    {\n+    public synchronized Object pop() throws NoSuchElementException {\n         return m_priorityQueue.pop();\n     }\n \n     /**\n-     *  Returns a string representation of the underlying queue.\n+     * Returns a string representation of the underlying queue.\n      *\n-     *  @return a string representation of the underlying queue\n+     * @return a string representation of the underlying queue\n      */\n-    public synchronized String toString()\n-    {\n+    public synchronized String toString() {\n         return m_priorityQueue.toString();\n     }\n+    \n }\n--- a/src/java/org/apache/commons/collections/TreeBag.java\n+++ b/src/java/org/apache/commons/collections/TreeBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TreeBag.java,v 1.7 2003/01/13 23:54:38 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TreeBag.java,v 1.8 2003/05/16 14:58:42 scolebourne Exp $\n  * ====================================================================\n+ *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * <http://www.apache.org/>.\n  *\n  */\n-\n package org.apache.commons.collections;\n \n import java.util.Collection;\n  * members.\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.7 $ $Date: 2003/01/13 23:54:38 $\n+ * @version $Revision: 1.8 $ $Date: 2003/05/16 14:58:42 $\n+ * \n  * @author Chuck Burdick\n- **/\n-public class TreeBag extends DefaultMapBag implements SortedBag, Bag {\n+ */\n+public class TreeBag extends DefaultMapBag implements SortedBag {\n \n-   /**\n-    * Constructs an empty <Code>TreeBag</Code>.\n-    */\n-   public TreeBag() {\n-      super(new TreeMap());\n-   }\n+    /**\n+     * Constructs an empty <code>TreeBag</code>.\n+     */\n+    public TreeBag() {\n+        super(new TreeMap());\n+    }\n \n-   /**\n-    * Constructs an empty {@link Bag} that maintains order on its unique\n-    * representative members according to the given {@link Comparator}.\n-    **/\n-   public TreeBag(Comparator c) {\n-      super(new TreeMap(c));\n-   }\n+    /**\n+     * Constructs an empty {@link Bag} that maintains order on its unique\n+     * representative members according to the given {@link Comparator}.\n+     * \n+     * @param comparator  the comparator to use\n+     */\n+    public TreeBag(Comparator comparator) {\n+        super(new TreeMap(comparator));\n+    }\n \n-   /**\n-    * Constructs a {@link Bag} containing all the members of the given\n-    * collection.\n-    * @see #addAll\n-    **/\n-   public TreeBag(Collection c) {\n-      this();\n-      addAll(c);\n-   }\n+    /**\n+     * Constructs a {@link Bag} containing all the members of the given\n+     * collection.\n+     * \n+     * @param coll  the collection to copy into the bag\n+     */\n+    public TreeBag(Collection coll) {\n+        this();\n+        addAll(coll);\n+    }\n \n-   public Object first() {\n-      return ((SortedMap)getMap()).firstKey();\n-   }\n+    public Object first() {\n+        return ((SortedMap) getMap()).firstKey();\n+    }\n \n-   public Object last() {\n-      return ((SortedMap)getMap()).lastKey();\n-   }\n+    public Object last() {\n+        return ((SortedMap) getMap()).lastKey();\n+    }\n \n-   public Comparator comparator() {\n-      return ((SortedMap)getMap()).comparator();\n-   }\n+    public Comparator comparator() {\n+        return ((SortedMap) getMap()).comparator();\n+    }\n+    \n }\n-\n-\n-\n-\n-\n-\n--- a/src/java/org/apache/commons/collections/UnboundedFifoBuffer.java\n+++ b/src/java/org/apache/commons/collections/UnboundedFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/UnboundedFifoBuffer.java,v 1.5 2002/10/13 12:59:04 scolebourne Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/10/13 12:59:04 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/UnboundedFifoBuffer.java,v 1.6 2003/05/16 14:58:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *    distribution.\n  *\n  * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n+ *    any, must include the following acknowledgment:\n  *       \"This product includes software developed by the\n  *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n  *\n  * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n  *    Foundation\" must not be used to endorse or promote products derived\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  */\n package org.apache.commons.collections;\n \n-\n import java.util.AbstractCollection;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n+\n /**\n  * UnboundedFifoBuffer is a <strong>very</strong> efficient buffer implementation.\n  * According to performance testing, it exhibits a constant access time, but it\n  * </pre>\n  * <p>\n  * This buffer prevents null objects from being added.\n+ * \n+ * @since Commons Collections 2.1\n+ * @version $Revision: 1.6 $ $Date: 2003/05/16 14:58:42 $\n  *\n  * @author Avalon\n  * @author  <a href=\"fede@apache.org\">Federico Barbieri</a>\n  * @author  <a href=\"bloritsch@apache.org\">Berin Loritsch</a>\n  * @author Paul Jack\n  * @author Stephen Colebourne\n- * @since 2.1\n- * @version $Id: UnboundedFifoBuffer.java,v 1.5 2002/10/13 12:59:04 scolebourne Exp $\n  */\n public final class UnboundedFifoBuffer extends AbstractCollection implements Buffer {\n+    \n     protected Object[] m_buffer;\n     protected int m_head;\n     protected int m_tail;\n     }\n     \n }\n-", "timestamp": 1053097122, "metainfo": ""}