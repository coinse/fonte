{"sha": "cb996e1b9858ae03c328448dc7cb920563d0b57d", "log": "Javadoc changes   ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/SingletonIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/SingletonIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/SingletonIterator.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/15 23:13:51 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/SingletonIterator.java,v 1.2 2002/08/17 11:29:38 scolebourne Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/17 11:29:38 $\n  *\n  * ====================================================================\n  *\n \n import java.util.Iterator;\n import java.util.NoSuchElementException;\n-\n-/** <p><code>SingletonIterator</code> is an {@link Iterator} over a single \n-  * object instance.</p>\n-  *\n-  * @since 2.0\n-  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n-  * @version $Revision: 1.1 $\n-  */\n+/** \n+ * <p><code>SingletonIterator</code> is an {@link Iterator} over a single \n+ * object instance.</p>\n+ *\n+ * @since 2.0\n+ * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Revision: 1.2 $\n+ */\n public class SingletonIterator implements Iterator {\n \n     private boolean first = true;\n     private Object object;\n-    \n+\n     /**\n-     *  Constructs a new <Code>SingletonIterator</Code>.\n+     * Constructs a new <Code>SingletonIterator</Code>.\n      *\n-     *  @param object  the single object to return from the iterator\n+     * @param object  the single object to return from the iterator\n      */\n     public SingletonIterator(Object object) {\n+        super();\n         this.object = object;\n     }\n \n     /**\n-     *  Returns true if the single object hasn't been returned yet.\n+     * Is another object available from the iterator.\n+     * <p>\n+     * This returns true if the single object hasn't been returned yet.\n      * \n-     *  @return true if the single object hasn't been returned yet\n+     * @return true if the single object hasn't been returned yet\n      */\n     public boolean hasNext() {\n         return first;\n     }\n \n     /**\n-     *  Returns the single object if it hasn't been returned yet.\n+     * Get the next object from the iterator.\n+     * <p>\n+     * This returns the single object if it hasn't been returned yet.\n      *\n-     *  @return the single object\n-     *  @throws NoSuchElementException if the single object has already been\n-     *    returned\n+     * @return the single object\n+     * @throws NoSuchElementException if the single object has already \n+     *    been returned\n      */\n     public Object next() {\n-        if (! first ) {\n+        if (!first) {\n             throw new NoSuchElementException();\n         }\n         Object answer = object;\n     }\n \n     /**\n-     *  Throws {@link UnsupportedOperationException}.\n+     * Remove always throws {@link UnsupportedOperationException}.\n      *\n-     *  @throws UnsupportedOperationException always\n+     * @throws UnsupportedOperationException always\n      */\n     public void remove() {\n-        throw new UnsupportedOperationException( \"remove() is not supported by this iterator\" );\n+        throw new UnsupportedOperationException(\"remove() is not supported by this iterator\");\n     }\n+    \n }", "timestamp": 1029583778, "metainfo": ""}