{"sha": "7ffce465db78cc7cbf86d666687534988c6c0842", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r593144 | skestle | 2007-11-08 04:21:55 -0800 (Thu, 08 Nov 2007) | 3 lines          Updated CollectionUtils and test.  Probably 80-90% complete for generics.  Very open to review / patches.          Jira: COLLECTIONS-245     ------------------------------------------------------------------------   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/MockTestCase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.easymock.EasyMock;\n+import org.easymock.IExpectationSetters;\n+\n+/**\n+ * Provides utilities for making mock-based tests.  Most notable is the generic \"type-safe\"\n+ * {@link #createMock(Class)} method, and {@link #replay()} and {@link #verify()} methods\n+ * that call the respective methods on all created mock objects.\n+ * \n+ * @author Stephen Kestle\n+ */\n+public abstract class MockTestCase {\n+    private List<Object> mockObjects = new ArrayList<Object>();\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T> T createMock(Class name) {\n+        T mock = (T) EasyMock.createMock(name);\n+        return registerMock(mock);\n+    }\n+\n+    private <T> T registerMock(T mock) {\n+        mockObjects.add(mock);\n+        return mock;\n+    }\n+\n+    protected <T> IExpectationSetters<T> expect(T t) {\n+        return EasyMock.expect(t);\n+    }\n+\n+    protected final void replay() {\n+        for (Object o : mockObjects) {\n+            EasyMock.replay(o);\n+        }\n+    }\n+\n+    protected final void verify() {\n+        for (ListIterator<Object> i = mockObjects.listIterator(); i.hasNext();) {\n+            try {\n+                EasyMock.verify(i.next());\n+            } catch (AssertionError e) {\n+                throw new AssertionError((i.previousIndex() + 1) + \"\"\n+                        + e.getMessage());\n+            }\n+        }\n+    }\n+}", "timestamp": 1252994262, "metainfo": ""}