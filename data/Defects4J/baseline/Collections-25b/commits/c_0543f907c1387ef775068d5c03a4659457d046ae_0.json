{"sha": "0543f907c1387ef775068d5c03a4659457d046ae", "log": "COLLECTIONS-213.  Added IteratorIterable adaptor class.  ", "commit": "\n--- a/src/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/java/org/apache/commons/collections/IteratorUtils.java\n import org.apache.commons.collections.iterators.FilterListIterator;\n import org.apache.commons.collections.iterators.IteratorChain;\n import org.apache.commons.collections.iterators.IteratorEnumeration;\n+import org.apache.commons.collections.iterators.IteratorIterable;\n import org.apache.commons.collections.iterators.ListIteratorWrapper;\n import org.apache.commons.collections.iterators.LoopingIterator;\n import org.apache.commons.collections.iterators.LoopingListIterator;\n     }\n \n     /**\n+     * Gets an iterable that wraps an iterator.\n+     *\n+     * @param iterator  the iterator to use, not null\n+     * @return a new, single use iterable\n+     * @throws NullPointerException if iterator is null\n+     */\n+    public static <E> Iterable<E> asIterable(Iterator<? extends E> iterator) {\n+        if (iterator == null) {\n+            throw new NullPointerException(\"Iterator must not be null\");\n+        }\n+        return new IteratorIterable<E>(iterator);\n+    }\n+\n+    /**\n      * Gets a list iterator based on a simple iterator.\n      * <p>\n      * As the wrapped Iterator is traversed, a LinkedList of its values is\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/IteratorIterable.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n+ * or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the specific language\n+ * governing permissions and limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Adapter to make an {@link Iterator Iterator} instance appear to be an\n+ * {@link Iterable Iterable} instance. Unlike normal iterable instance, the\n+ * {@link #iterator()} method always returns the same iterator instance. This\n+ * prohibits this iterator to be only usable for one iterative operation.\n+ * \n+ * @since Commons Collections 4.0\n+ * @version $Revision: $ $Date: $\n+ */\n+public class IteratorIterable<E> implements Iterable<E> {\n+\n+    /**\n+     * Factory method to create an {@link Iterator Iterator} from another\n+     * iterator over objects of a different subtype.\n+     */\n+    private static <E> Iterator<E> createTypesafeIterator(\n+            final Iterator<? extends E> iterator) {\n+        return new Iterator<E>() {\n+            public boolean hasNext() {\n+                return iterator.hasNext();\n+            }\n+\n+            public E next() {\n+                return iterator.next();\n+            }\n+\n+            public void remove() {\n+                iterator.remove();\n+            }\n+        };\n+    }\n+\n+    /** the iterator being used. */\n+    private final Iterator<E> iterator;\n+\n+    /**\n+     * Constructs a new <code>IteratorIterable</code> that will use the given\n+     * iterator.\n+     * \n+     * @param iterator the iterator to use.\n+     */\n+    public IteratorIterable(Iterator<? extends E> iterator) {\n+        super();\n+        this.iterator = createTypesafeIterator(iterator);\n+    }\n+\n+    /**\n+     * Gets the iterator wrapped by this iterable.\n+     * \n+     * @return the iterator\n+     */\n+    public Iterator<E> iterator() {\n+        return iterator;\n+    }\n+}\n--- a/src/test/org/apache/commons/collections/TestIteratorUtils.java\n+++ b/src/test/org/apache/commons/collections/TestIteratorUtils.java\n         return BulkTest.makeSuite(TestIteratorUtils.class);\n     }\n \n+    public void testAsIterable() {\n+        List<Integer> list = new ArrayList<Integer>();\n+        list.add(Integer.valueOf(0));\n+        list.add(Integer.valueOf(1));\n+        list.add(Integer.valueOf(2));\n+        Iterator<Integer> iterator = list.iterator();\n+        \n+        Iterable<Integer> iterable = IteratorUtils.asIterable(iterator);\n+        int expected = 0;\n+        for(Integer actual : iterable) {\n+            assertEquals(expected, actual.intValue());\n+            ++expected;\n+        }\n+\n+        // single use iterator\n+        for(Integer actual : iterable) {\n+            fail(\"should not be able to iterate twice\");\n+        }\n+    }\n+\n+    public void testAsIterableNull() {\n+        try {\n+            IteratorUtils.asIterable(null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            // success\n+        }\n+    }\n+    \n     public void testToList() {\n         List<Object> list = new ArrayList<Object>();\n         list.add(new Integer(1));\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestIteratorIterable.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n+ * or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the specific language\n+ * governing permissions and limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * Tests for IteratorIterable.\n+ * \n+ * @version $Revision: $ $Date: $\n+ */\n+public class TestIteratorIterable extends BulkTest {\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestIteratorIterable.class);\n+    }\n+\n+    public TestIteratorIterable(String name) {\n+        super(name);\n+    }\n+\n+    public void testIterator() {\n+        List<Integer> list = new ArrayList<Integer>();\n+        list.add(Integer.valueOf(0));\n+        list.add(Integer.valueOf(1));\n+        list.add(Integer.valueOf(2));\n+        Iterator<Integer> iter = list.iterator();\n+\n+        Iterable<Number> iterable = new IteratorIterable<Number>(iter);\n+        int expected = 0;\n+        for (Number actual : iterable) {\n+            assertEquals(expected, actual.intValue());\n+            ++expected;\n+        }\n+    }\n+}\n+", "timestamp": 1306205162, "metainfo": ""}