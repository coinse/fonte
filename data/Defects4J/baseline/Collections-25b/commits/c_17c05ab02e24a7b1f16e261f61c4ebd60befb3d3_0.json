{"sha": "17c05ab02e24a7b1f16e261f61c4ebd60befb3d3", "log": "Hold a Transformer internally, as wrap Factory as Transformer   ", "commit": "\n--- a/src/java/org/apache/commons/collections/decorators/LazyMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/LazyMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/LazyMap.java,v 1.1 2003/05/09 16:42:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/LazyMap.java,v 1.2 2003/05/17 14:11:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.collections.Factory;\n import org.apache.commons.collections.Transformer;\n+import org.apache.commons.collections.TransformerUtils;\n \n /**\n  * <code>LazyMap</code> decorates another <code>Map</code>\n  * instance is mapped to the \"NOW\" key in the map.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:35 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/17 14:11:10 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n public class LazyMap extends AbstractMapDecorator implements Map {\n \n     /** The factory to use to construct elements */\n-    protected final Object factory;\n+    protected final Transformer factory;\n \n     /**\n      * Factory method to create a lazily instantiated map.\n         if (factory == null) {\n             throw new IllegalArgumentException(\"Factory must not be null\");\n         }\n-        this.factory = factory;\n+        this.factory = TransformerUtils.asTransformer(factory);\n     }\n \n     /**\n     public Object get(Object key) {\n         // create value for key if key is not currently in the map\n         if (map.containsKey(key) == false) {\n-            if (factory instanceof Factory) {\n-                Object value = ((Factory) factory).create();\n-                map.put(key, value);\n-                return value;\n-            } else {\n-                Object value = ((Transformer) factory).transform(key);\n-                map.put(key, value);\n-                return value;\n-            }\n+            Object value = factory.transform(key);\n+            map.put(key, value);\n+            return value;\n         }\n         return map.get(key);\n     }\n--- a/src/java/org/apache/commons/collections/decorators/LazySortedMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/LazySortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/LazySortedMap.java,v 1.1 2003/05/09 16:42:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/LazySortedMap.java,v 1.2 2003/05/17 14:11:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * instance is mapped to the \"NOW\" key in the map.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:35 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/17 14:11:09 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n \n     public SortedMap subMap(Object fromKey, Object toKey) {\n         SortedMap map = getSortedMap().subMap(fromKey, toKey);\n-        if (factory instanceof Factory) {\n-            return new LazySortedMap(map, (Factory) factory);\n-        } else {\n-            return new LazySortedMap(map, (Transformer) factory);\n-        }\n+        return new LazySortedMap(map, factory);\n     }\n \n     public SortedMap headMap(Object toKey) {\n         SortedMap map = getSortedMap().headMap(toKey);\n-        if (factory instanceof Factory) {\n-            return new LazySortedMap(map, (Factory) factory);\n-        } else {\n-            return new LazySortedMap(map, (Transformer) factory);\n-        }\n+        return new LazySortedMap(map, factory);\n     }\n \n     public SortedMap tailMap(Object fromKey) {\n         SortedMap map = getSortedMap().tailMap(fromKey);\n-        if (factory instanceof Factory) {\n-            return new LazySortedMap(map, (Factory) factory);\n-        } else {\n-            return new LazySortedMap(map, (Transformer) factory);\n-        }\n+        return new LazySortedMap(map, factory);\n     }\n \n }", "timestamp": 1053180670, "metainfo": ""}