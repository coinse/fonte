{"sha": "70a7e6a6a81eb1461a2fcba4b5952c2da2b7a99d", "log": "Fix bug in test for sub list ignoring set boolean Updated test for better error messages from Neil O'Toole   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestList.java\n+++ b/src/test/org/apache/commons/collections/TestList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestList.java,v 1.16 2003/02/26 01:33:22 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestList.java,v 1.17 2003/04/26 10:27:59 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your {@link List} fails.\n  *\n- * @version $Revision: 1.16 $ $Date: 2003/02/26 01:33:22 $\n+ * @version $Revision: 1.17 $ $Date: 2003/04/26 10:27:59 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n  * @author Stephen Colebourne\n+ * @author Neil O'Toole\n  */\n public abstract class TestList extends TestCollection {\n \n         List list = getList();\n \n         while (i > 0) {\n-            assertTrue(\"Iterator should have next\", iter.hasPrevious());\n-            assertEquals(\"Iterator.nextIndex should work\", \n-              iter.nextIndex(), i);\n-            assertEquals(\"Iterator.previousIndex should work\",\n-              iter.previousIndex(), i - 1);\n+            assertTrue(\"Iterator should have previous, i:\" + i, iter.hasPrevious());\n+            assertEquals(\"Iterator.nextIndex should work, i:\" + i, iter.nextIndex(), i);\n+            assertEquals(\"Iterator.previousIndex should work, i:\" + i, iter.previousIndex(), i - 1);\n             Object o = iter.previous();\n-            assertEquals(\"Iterator returned correct element\", \n-              list.get(i - 1), o);\n+            assertEquals(\"Iterator returned correct element\", list.get(i - 1), o);\n             i--;\n         }\n \n         assertTrue(\"Iterator shouldn't have previous\", !iter.hasPrevious());\n-        assertEquals(\"nextIndex should be 0\", iter.nextIndex(), 0);\n-        assertEquals(\"previousIndex should be -1\", \n-          iter.previousIndex(), -1);\n+        int nextIndex = iter.nextIndex();\n+        assertEquals(\"nextIndex should be 0, actual value: \" + nextIndex, nextIndex, 0);\n+        int prevIndex = iter.previousIndex();\n+        assertEquals(\"previousIndex should be -1, actual value: \" + prevIndex, prevIndex, -1);\n \n         try {\n             iter.previous();\n            return outer.isAddSupported();\n        }\n \n+       protected boolean isSetSupported() {\n+           return outer.isSetSupported();\n+       }\n \n        protected boolean isRemoveSupported() {\n            return outer.isRemoveSupported();", "timestamp": 1051352879, "metainfo": ""}