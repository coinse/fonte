{"sha": "f8acd98e116824549d77c736a8cf99657b3f7406", "log": "Fixed bug related to CreateNode parameter order reported on commons-dev list by David.Hay@REQUISITE.com on 3-Oct-03. Added tests to TestCommonsLinkedList to cover node-manipulation methods and changed TestNodeCachingLinkedList to extend TestCommonsLinkedList.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CommonsLinkedList.java\n+++ b/src/java/org/apache/commons/collections/CommonsLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/CommonsLinkedList.java,v 1.7 2003/08/31 17:26:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/CommonsLinkedList.java,v 1.8 2003/10/05 06:41:08 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * subclasses to extend.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.7 $ $Date: 2003/08/31 17:26:43 $\n+ * @version $Revision: 1.8 $ $Date: 2003/10/05 06:41:08 $\n  * \n  * @author <a href=\"mailto:rich@rd.gen.nz\">Rich Dougherty</a>\n+ * @author Phil Steitz\n  */\n class CommonsLinkedList extends LinkedList\n         implements List, Serializable {\n \n     // Operations on nodes\n \n+    /**\n+     * Creates a new node with previous, next and element all set to null.\n+     * \n+     * @return  newly created node\n+     */\n     protected Node createNode() {\n         return new Node();\n     }\n \n-    protected Node createNode(Node next, Node previous, Object element) {\n-        return new Node(next, previous, element);\n-    }\n-\n+    /**\n+     * Creates a new node with the specified properties.\n+     * \n+     * @param previous  node to precede the new node\n+     * @param next  node to follow the new node\n+     * @param element  element of the new node\n+     */\n+    protected Node createNode(Node previous, Node next, Object element) {\n+        return new Node(previous, next, element);\n+    }\n+\n+    /**\n+     * Creates a new node with the specified object as its \n+     * <code>elemnent</code> and inserts it before <code>node</code>.\n+     *\n+     * @param node  node to insert before\n+     * @param object  element of the newly added node\n+     * @throws NullPointerException if <code>node</code> is null\n+     */\n     private void addNodeBefore(Node node, Object o) {\n         Node newNode = createNode(node.previous, node, o);\n         node.previous.next = newNode;\n         modCount++;\n     }\n \n+    /**\n+     * Creates a new node with the specified object as its \n+     * <code>elemnent</code> and inserts it after <code>node</code>.\n+     * \n+     * @param node  node to insert after\n+     * @param o  element of the newly added node\n+     * @throws NullPointerException if <code>node</code> is null\n+     */\n     protected void addNodeAfter(Node node, Object o) {\n         Node newNode = createNode(node, node.next, o);\n         node.next.previous = newNode;\n         modCount++;\n     }\n \n+    /**\n+     * Removes the specified node.\n+     *\n+     * @param node  the node to remove\n+     * @throws NullPointerException if <code>node</code> is null\n+     */\n     protected void removeNode(Node node) {\n         node.previous.next = node.next;\n         node.next.previous = node.previous;\n         modCount++;\n     }\n \n+    /**\n+     * Removes all nodes by resetting the circular list marker.\n+     */\n     protected void removeAllNodes() {\n         marker.next = marker;\n         marker.previous = marker;\n      * Gets the node at a particular index.\n      * \n      * @param index The index, starting from 0.\n-     * @param endMarkerAllowd Whether or not the end marker can be returned if\n+     * @param endMarkerAllowed Whether or not the end marker can be returned if\n      * startIndex is set to the list's size.\n      * @throws IndexOutOfBoundsException If the index is less than 0; equal to\n      * the size of the list and endMakerAllowed is false; or greater than the\n--- a/src/java/org/apache/commons/collections/NodeCachingLinkedList.java\n+++ b/src/java/org/apache/commons/collections/NodeCachingLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/NodeCachingLinkedList.java,v 1.7 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/NodeCachingLinkedList.java,v 1.8 2003/10/05 06:41:08 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * improvement.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.7 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.8 $ $Date: 2003/10/05 06:41:08 $\n  * \n  * @author Jeff Varszegi\n  * @author <a href=\"mailto:rich@rd.gen.nz\">Rich Dougherty</a>\n+ * @author Phil Steitz\n  */\n public class NodeCachingLinkedList extends CommonsLinkedList {\n \n     \n     /**\n      * Constructor that species the maximum cache size.\n-     * \n+     *\n      * @param maximumCacheSize  the maximum cache size\n      */\n     public NodeCachingLinkedList(int maximumCacheSize) {\n      * Gets a node from the cache. If a node is returned, then the value of\n      * {@link #cacheSize} is decreased accordingly. The node that is returned\n      * will have <code>null</code> values for next, previous and element.\n-     * \n+     *\n      * @return A node, or <code>null</code> if there are no nodes in the cache.\n      */\n     private Node getNodeFromCache() {\n         Node cachedNode = firstCachedNode;\n         firstCachedNode = cachedNode.next;\n         cachedNode.next = null; // This should be changed anyway, but defensively\n-                                             // set it to null.\n+                                // set it to null.                    \n         cacheSize--;\n         return cachedNode;\n     }\n     }\n     \n     /**\n-     * Create a node, getting it from the cache if possible.\n-     */\n-    protected Node createNode(Node next, Node previous, Object element) {\n+     * Creates a new node with the specified properties, using a cached Node\n+     * if possible.\n+     * \n+     * @param previous  node to precede the new node\n+     * @param next  node to follow the new node\n+     * @param element  element of the new node\n+     */\n+    protected Node createNode(Node previous, Node next, Object element) {\n         Node cachedNode = getNodeFromCache();\n         if (cachedNode == null) {\n-            return super.createNode(next, previous, element);\n+            return super.createNode(previous, next, element);\n         } else {\n             cachedNode.next = next;\n             cachedNode.previous = previous;\n      * <code>addNodeToCache</code> on the node which has \n      * been removed.\n      * \n-     * @see CommonsLinkedList#removeNode\n+     * @see CommonsLinkedList#removeNode(Node)\n      */\n     protected void removeNode(Node node) {\n         super.removeNode(node);\n--- a/src/test/org/apache/commons/collections/TestCommonsLinkedList.java\n+++ b/src/test/org/apache/commons/collections/TestCommonsLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCommonsLinkedList.java,v 1.3 2003/08/31 17:28:43 scolebourne Exp $\n- * $Revision: 1.3 $\n- * $Date: 2003/08/31 17:28:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCommonsLinkedList.java,v 1.4 2003/10/05 06:41:08 psteitz Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2003/10/05 06:41:08 $\n  *\n  * ====================================================================\n  *\n  */\n package org.apache.commons.collections;\n \n+import java.util.Arrays;\n import java.util.LinkedList;\n \n import junit.framework.Test;\n  * Test case for {@link CommonsLinkedList}.\n  * \n  * @author <a href=\"mailto:rich@rd.gen.nz\">Rich Dougherty</a>\n+ * @author David Hay\n+ * @author Phil Steitz\n  */\n public class TestCommonsLinkedList extends TestLinkedList {\n-\n+    \n+    protected CommonsLinkedList list = null;\n+    \n     public TestCommonsLinkedList(String testName) {\n         super(testName);\n     }\n-\n+    \n     public LinkedList makeEmptyLinkedList() {\n         return new CommonsLinkedList();\n     }\n-\n+    \n     public static Test suite() {\n         return BulkTest.makeSuite(TestCommonsLinkedList.class);\n     }\n         return \"2.2\";\n     }\n     \n+    public void setUp() {\n+        list = (CommonsLinkedList)makeEmptyList();\n+    }\n+    \n+    public void testRemoveFirst() {\n+        list.addAll( Arrays.asList( new String[]{\"value1\", \"value2\"}));\n+        assertEquals( \"value1\", list.removeFirst() );\n+        checkNodes();\n+        list.addLast( \"value3\");\n+        checkNodes();\n+        assertEquals( \"value2\", list.removeFirst() );\n+        assertEquals( \"value3\", list.removeFirst() );\n+        checkNodes();\n+        list.addLast( \"value4\" );\n+        checkNodes();\n+        assertEquals( \"value4\", list.removeFirst() );\n+        checkNodes();\n+    }\n+    \n+    public void testRemoveLast() {\n+        list.addAll( Arrays.asList( new String[]{\"value1\", \"value2\"}));\n+        assertEquals( \"value2\", list.removeLast() );\n+        list.addFirst( \"value3\");\n+        checkNodes();\n+        assertEquals( \"value1\", list.removeLast() );\n+        assertEquals( \"value3\", list.removeLast() );\n+        list.addFirst( \"value4\" );\n+        checkNodes();\n+        assertEquals( \"value4\", list.removeFirst() );\n+    }\n+    \n+    public void testAddNodeAfter() {\n+        list.addFirst(\"value1\");\n+        list.addNodeAfter(list.getNode(0,false),\"value2\");\n+        assertEquals(\"value1\", list.getFirst());\n+        assertEquals(\"value2\", list.getLast());\n+        list.removeFirst();\n+        checkNodes();\n+        list.addNodeAfter(list.getNode(0,false),\"value3\");\n+        checkNodes();\n+        assertEquals(\"value2\", list.getFirst());\n+        assertEquals(\"value3\", list.getLast());\n+        list.addNodeAfter(list.getNode(0, false),\"value4\");\n+        checkNodes();\n+        assertEquals(\"value2\", list.getFirst());\n+        assertEquals(\"value3\", list.getLast());\n+        assertEquals(\"value4\", list.get(1));\n+        list.addNodeAfter(list.getNode(2, false), \"value5\");\n+        checkNodes();\n+        assertEquals(\"value2\", list.getFirst());\n+        assertEquals(\"value4\", list.get(1));\n+        assertEquals(\"value3\", list.get(2));\n+        assertEquals(\"value5\", list.getLast());\n+    }\n+    \n+    public void testRemoveNode() {\n+        list.addAll( Arrays.asList( new String[]{\"value1\", \"value2\"}));\n+        list.removeNode(list.getNode(0, false));\n+        checkNodes();\n+        assertEquals(\"value2\", list.getFirst());\n+        assertEquals(\"value2\", list.getLast());\n+        list.addFirst(\"value1\");\n+        list.addFirst(\"value0\");\n+        checkNodes();\n+        list.removeNode(list.getNode(1, false));\n+        assertEquals(\"value0\", list.getFirst());\n+        assertEquals(\"value2\", list.getLast());\n+        checkNodes();\n+        list.removeNode(list.getNode(1, false));\n+        assertEquals(\"value0\", list.getFirst());\n+        assertEquals(\"value0\", list.getLast());\n+        checkNodes();\n+    }\n+    \n+    public void testGetNode() {\n+        // get marker\n+        assertEquals(list.getNode(0, true).previous, list.getNode(0, true).next);\n+        try {\n+            Object obj = list.getNode(0, false);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        list.addAll( Arrays.asList( new String[]{\"value1\", \"value2\"}));\n+        checkNodes();\n+        list.addFirst(\"value0\");\n+        checkNodes();\n+        list.removeNode(list.getNode(1, false));\n+        checkNodes();\n+        try {\n+            Object obj = list.getNode(2, false);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        try {\n+            Object obj = list.getNode(-1, false);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+         try {\n+            Object obj = list.getNode(3, true);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }       \n+    }\n+    \n+    protected void checkNodes() {\n+        for (int i = 0; i < list.size; i++) {\n+            assertEquals(list.getNode(i, false).next, list.getNode(i + 1, true));\n+            if (i < list.size - 1) {\n+                assertEquals(list.getNode(i + 1, false).previous, \n+                    list.getNode(i, false));  \n+            }\n+        }\n+    }\n+        \n }\n--- a/src/test/org/apache/commons/collections/TestNodeCachingLinkedList.java\n+++ b/src/test/org/apache/commons/collections/TestNodeCachingLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestNodeCachingLinkedList.java,v 1.4 2003/08/31 17:28:43 scolebourne Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/08/31 17:28:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestNodeCachingLinkedList.java,v 1.5 2003/10/05 06:41:08 psteitz Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2003/10/05 06:41:08 $\n  *\n  * ====================================================================\n  *\n  */\n package org.apache.commons.collections;\n \n+import java.util.Arrays;\n import java.util.LinkedList;\n \n import junit.framework.Test;\n  * Test class for NodeCachingLinkedList, a performance optimised LinkedList.\n  * \n  * @author Jeff Varszegi\n+ * @author Phil Steitz\n  */\n-public class TestNodeCachingLinkedList extends TestLinkedList {\n-    protected NodeCachingLinkedList list = null;\n+public class TestNodeCachingLinkedList extends TestCommonsLinkedList {\n \n     public TestNodeCachingLinkedList(String _testName) {\n         super(_testName);\n         return \"2.2\";\n     }\n     \n+    public void testShrinkCache() {\n+        list.addAll( Arrays.asList( new String[]{\"1\", \"2\", \"3\", \"4\"}));\n+        list.removeAllNodes();        // Will dump all 4 elements into cache\n+        ((NodeCachingLinkedList) list).setMaximumCacheSize(2); // shrink cache\n+        list.addAll( Arrays.asList( new String[]{\"1\", \"2\", \"3\", \"4\"}));\n+        checkNodes();\n+        list.removeNode(list.getNode(0, false)); // no room in cache\n+        list.removeNode(list.getNode(0, false)); \n+        list.removeNode(list.getNode(0, false)); \n+        checkNodes();    \n+        list.addAll( Arrays.asList( new String[]{\"1\", \"2\", \"3\", \"4\"}));\n+        checkNodes();     \n+    }       \n+          \n     public static void compareSpeed() {\n         NodeCachingLinkedList ncll = new NodeCachingLinkedList();\n         LinkedList ll = new LinkedList();", "timestamp": 1065336068, "metainfo": ""}