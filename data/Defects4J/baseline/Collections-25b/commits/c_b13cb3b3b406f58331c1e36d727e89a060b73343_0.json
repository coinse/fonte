{"sha": "b13cb3b3b406f58331c1e36d727e89a060b73343", "log": "Javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n  * the number of occurrences of that element in the bag.\n  *\n  * @since Commons Collections 3.0 (previously DefaultMapBag v2.0)\n- * @version $Revision: 1.14 $ $Date: 2004/02/18 00:56:25 $\n+ * @version $Revision: 1.15 $ $Date: 2004/05/15 12:27:04 $\n  * \n  * @author Chuck Burdick\n  * @author Michael A. Smith\n \n     /**\n      * Utility method for implementations to access the map that backs\n-     * this bag. Not intended for interactive use outside of\n-     * subclasses.\n+     * this bag. Not intended for interactive use outside of subclasses.\n+     * \n+     * @return the map being used by the Bag\n      */\n     protected Map getMap() {\n         return map;\n         return new BagIterator(this);\n     }\n \n+    /**\n+     * Inner class iterator for the Bag.\n+     */\n     static class BagIterator implements Iterator {\n         private AbstractMapBag parent;\n         private Iterator entryIterator;\n         private final int mods;\n         private boolean canRemove;\n \n+        /**\n+         * Constructor.\n+         * \n+         * @param parent  the parent bag\n+         */\n         public BagIterator(AbstractMapBag parent) {\n             this.parent = parent;\n             this.entryIterator = parent.map.entrySet().iterator();\n      * Mutable integer class for storing the data.\n      */\n     protected static class MutableInteger {\n+        /** The value of this mutable. */\n         protected int value;\n         \n+        /**\n+         * Constructor.\n+         * @param value  the initial value\n+         */\n         MutableInteger(int value) {\n             this.value = value;\n         }\n     //-----------------------------------------------------------------------\n     /**\n      * Write the map out using a custom routine.\n+     * @param out  the output stream\n+     * @throws IOException\n      */\n     protected void doWriteObject(ObjectOutputStream out) throws IOException {\n         out.writeInt(map.size());\n \n     /**\n      * Read the map in using a custom routine.\n+     * @param map  the map to use\n+     * @param in  the input stream\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n      */\n     protected void doReadObject(Map map, ObjectInputStream in) throws IOException, ClassNotFoundException {\n         this.map = map;\n             return false;\n         }\n         for (Iterator it = map.keySet().iterator(); it.hasNext();) {\n-            Object element = (Object) it.next();\n+            Object element = it.next();\n             if (other.getCount(element) != getCount(element)) {\n                 return false;\n             }\n--- a/src/java/org/apache/commons/collections/bag/PredicatedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/PredicatedBag.java\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:56:25 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/15 12:27:04 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n      * \n      * @param bag  the bag to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n+     * @return a new predicated Bag\n      * @throws IllegalArgumentException if bag or predicate is null\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      */\n--- a/src/java/org/apache/commons/collections/bag/PredicatedSortedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/PredicatedSortedBag.java\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:56:25 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/15 12:27:04 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n      * \n      * @param bag  the bag to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n+     * @return a new predicated SortedBag\n      * @throws IllegalArgumentException if bag or predicate is null\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      */\n--- a/src/java/org/apache/commons/collections/bag/SynchronizedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/SynchronizedBag.java\n  * Iterators must be separately synchronized around the loop.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/02/18 00:56:25 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/15 12:27:04 $\n  * \n  * @author Stephen Colebourne\n  */\n      * Factory method to create a synchronized bag.\n      * \n      * @param bag  the bag to decorate, must not be null\n+     * @return a new synchronized Bag\n      * @throws IllegalArgumentException if bag is null\n      */\n     public static Bag decorate(Bag bag) {\n         super(bag, lock);\n     }\n \n+    /**\n+     * Gets the bag being decorated.\n+     * \n+     * @return the decorated bag\n+     */\n     protected Bag getBag() {\n         return (Bag) collection;\n     }\n      * Synchronized Set for the Bag class.\n      */\n     class SynchronizedBagSet extends SynchronizedSet {\n+        /**\n+         * Constructor.\n+         * @param set  the set to decorate\n+         * @param lock  the lock to use, shared with the bag\n+         */\n         SynchronizedBagSet(Set set, Object lock) {\n             super(set, lock);\n         }\n--- a/src/java/org/apache/commons/collections/bag/SynchronizedSortedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/SynchronizedSortedBag.java\n  * Iterators must be separately synchronized around the loop.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/02/18 00:56:25 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/15 12:27:04 $\n  * \n  * @author Stephen Colebourne\n  */\n      * Factory method to create a synchronized sorted bag.\n      * \n      * @param bag  the bag to decorate, must not be null\n+     * @return a new synchronized SortedBag\n      * @throws IllegalArgumentException if bag is null\n      */\n     public static SortedBag decorate(SortedBag bag) {\n         super(bag, lock);\n     }\n \n+    /**\n+     * Gets the bag being decorated.\n+     * \n+     * @return the decorated bag\n+     */\n     protected SortedBag getSortedBag() {\n         return (SortedBag) collection;\n     }\n--- a/src/java/org/apache/commons/collections/bag/TransformedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/TransformedBag.java\n  * use the Integer form to remove objects.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:56:25 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/15 12:27:04 $\n  * \n  * @author Stephen Colebourne\n  */\n      * \n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n+     * @return a new transformed Bag\n      * @throws IllegalArgumentException if bag or transformer is null\n      */\n     public static Bag decorate(Bag bag, Transformer transformer) {\n--- a/src/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n  * use the Integer form to remove objects.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:56:25 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/15 12:27:04 $\n  * \n  * @author Stephen Colebourne\n  */\n      * \n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n+     * @return a new transformed SortedBag\n      * @throws IllegalArgumentException if bag or transformer is null\n      */\n     public static SortedBag decorate(SortedBag bag, Transformer transformer) {\n--- a/src/java/org/apache/commons/collections/bag/TypedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/TypedBag.java\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/05/07 23:28:38 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/15 12:27:04 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n      * \n      * @param bag  the bag to decorate, must not be null\n      * @param type  the type to allow into the bag, must not be null\n+     * @return a new typed Bag\n      * @throws IllegalArgumentException if bag or type is null\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      */\n      * Restrictive constructor.\n      */\n     protected TypedBag() {\n+        super();\n     }\n \n }\n--- a/src/java/org/apache/commons/collections/bag/TypedSortedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/TypedSortedBag.java\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/05/07 23:28:38 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/15 12:27:04 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n      * \n      * @param bag  the bag to decorate, must not be null\n      * @param type  the type to allow into the bag, must not be null\n+     * @return a new transformed SortedBag\n      * @throws IllegalArgumentException if bag or type is null\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      */\n      * Restrictive constructor.\n      */\n     protected TypedSortedBag() {\n+        super();\n     }\n \n }\n--- a/src/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n+++ b/src/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n  * Decorates another <code>Bag</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/02/18 00:56:25 $\n+ * @version $Revision: 1.7 $ $Date: 2004/05/15 12:27:04 $\n  * \n  * @author Stephen Colebourne\n  */\n \n     /**\n      * Factory method to create an unmodifiable bag.\n+     * <p>\n+     * If the bag passed in is already unmodifiable, it is returned.\n      * \n      * @param bag  the bag to decorate, must not be null\n+     * @return an unmodifiable Bag\n      * @throws IllegalArgumentException if bag is null\n      */\n     public static Bag decorate(Bag bag) {\n--- a/src/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n  * Decorates another <code>SortedBag</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.7 $ $Date: 2004/05/03 15:13:05 $\n+ * @version $Revision: 1.8 $ $Date: 2004/05/15 12:27:04 $\n  * \n  * @author Stephen Colebourne\n  */\n \n     /**\n      * Factory method to create an unmodifiable bag.\n+     * <p>\n+     * If the bag passed in is already unmodifiable, it is returned.\n      * \n      * @param bag  the bag to decorate, must not be null\n+     * @return an unmodifiable SortedBag\n      * @throws IllegalArgumentException if bag is null\n      */\n     public static SortedBag decorate(SortedBag bag) {", "timestamp": 1084624024, "metainfo": ""}