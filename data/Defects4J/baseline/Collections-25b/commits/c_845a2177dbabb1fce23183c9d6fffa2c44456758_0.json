{"sha": "845a2177dbabb1fce23183c9d6fffa2c44456758", "log": "LRUMap - The removeLRU() method was passed the wrong LinkEntry [28433]   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/LRUMap.java\n+++ b/src/java/org/apache/commons/collections/map/LRUMap.java\n  * <code>ResettableIterator</code> and calling <code>reset()</code>.\n  * \n  * @since Commons Collections 3.0 (previously in main package v1.0)\n- * @version $Revision: 1.9 $ $Date: 2004/02/18 01:13:19 $\n+ * @version $Revision: 1.10 $ $Date: 2004/04/16 23:53:59 $\n  *\n  * @author James Strachan\n  * @author Morgan Delagrange\n      * @param value  the value to add\n      */\n     protected void addMapping(int hashIndex, int hashCode, Object key, Object value) {\n-        if (size >= maxSize && removeLRU(header.before)) {\n+        if (size >= maxSize && removeLRU(header.after)) {\n             reuseMapping(header.after, hashIndex, hashCode, key, value);\n         } else {\n             super.addMapping(hashIndex, hashCode, key, value);\n--- a/src/test/org/apache/commons/collections/map/TestLRUMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestLRUMap.java\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.6 $ $Date: 2004/02/27 00:25:14 $\n+ * @version $Revision: 1.7 $ $Date: 2004/04/16 23:53:59 $\n  * \n  * @author Stephen Colebourne\n  */\n         assertSame(map.get(\"1\"), cloned.get(\"1\"));\n     }\n     \n+    public void testRemoveLRU() {\n+        MockLRUMapSubclass map = new MockLRUMapSubclass(2);\n+        assertNull(map.entry);\n+        map.put(\"A\", \"a\");\n+        assertNull(map.entry);\n+        map.put(\"B\", \"b\");\n+        assertNull(map.entry);\n+        map.put(\"C\", \"c\");  // removes oldest, which is A=a\n+        assertNotNull(map.entry);\n+        assertEquals(\"A\", map.key);\n+        assertEquals(\"a\", map.value);\n+        assertEquals(\"C\", map.entry.getKey());  // entry is reused\n+        assertEquals(\"c\", map.entry.getValue());  // entry is reused\n+        assertEquals(false, map.containsKey(\"A\"));\n+        assertEquals(true, map.containsKey(\"B\"));\n+        assertEquals(true, map.containsKey(\"C\"));\n+    }\n+    \n+    static class MockLRUMapSubclass extends LRUMap {\n+        LinkEntry entry;\n+        Object key;\n+        Object value;\n+        MockLRUMapSubclass(int size) {\n+            super(size);\n+        }\n+        protected boolean removeLRU(LinkEntry entry) {\n+            this.entry = entry;\n+            this.key = entry.getKey();\n+            this.value = entry.getValue();\n+            return true;\n+        }\n+    }\n+    \n+    public void testRemoveLRUBlocksRemove() {\n+        MockLRUMapSubclassBlocksRemove map = new MockLRUMapSubclassBlocksRemove(2);\n+        assertEquals(0, map.size());\n+        map.put(\"A\", \"a\");\n+        assertEquals(1, map.size());\n+        map.put(\"B\", \"b\");\n+        assertEquals(2, map.size());\n+        map.put(\"C\", \"c\");  // should remove oldest, which is A=a, but this is blocked\n+        assertEquals(3, map.size());\n+        assertEquals(2, map.maxSize());\n+        assertEquals(true, map.containsKey(\"A\"));\n+        assertEquals(true, map.containsKey(\"B\"));\n+        assertEquals(true, map.containsKey(\"C\"));\n+    }\n+    \n+    static class MockLRUMapSubclassBlocksRemove extends LRUMap {\n+        MockLRUMapSubclassBlocksRemove(int size) {\n+            super(size);\n+        }\n+        protected boolean removeLRU(LinkEntry entry) {\n+            return false;\n+        }\n+    }\n+    \n //    public void testCreate() throws Exception {\n //        resetEmpty();\n //        writeExternalFormToDisk((java.io.Serializable) map, \"D:/dev/collections/data/test/LRUMap.emptyCollection.version3.obj\");", "timestamp": 1082159639, "metainfo": ""}