{"sha": "ed32276f0deba39ba9a33eba4b31114dbd541445", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471202 | scolebourne | 2006-11-04 06:21:44 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getCollection() - use covariant decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/set/TestPredicatedSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestPredicatedSortedSet.java\n \n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.Predicate;\n-import org.apache.commons.collections.PredicateUtils;\n+import org.apache.commons.collections.functors.TruePredicate;\n import org.apache.commons.collections.map.TestPredicatedSortedMap;\n \n /**\n- * Extension of {@link AbstractTestSortedSet} for exercising the \n+ * Extension of {@link AbstractTestSortedSet} for exercising the\n  * {@link PredicatedSortedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n  *\n  * @author Phil Steitz\n  */\n-public class TestPredicatedSortedSet extends AbstractTestSortedSet{\n-    \n+public class TestPredicatedSortedSet<E> extends AbstractTestSortedSet<E> {\n+\n     public TestPredicatedSortedSet(String testName) {\n         super(testName);\n     }\n-    \n+\n     public static Test suite() {\n         return BulkTest.makeSuite(TestPredicatedSortedSet.class);\n     }\n-    \n+\n     public static void main(String args[]) {\n         String[] testCaseName = { TestPredicatedSortedMap.class.getName()};\n         junit.textui.TestRunner.main(testCaseName);\n     }\n-    \n- //-------------------------------------------------------------------    \n-    \n-    protected Predicate truePredicate = PredicateUtils.truePredicate();\n-    \n-    public Set makeEmptySet() {\n-        return PredicatedSortedSet.decorate(new TreeSet(), truePredicate);\n+\n+ //-------------------------------------------------------------------\n+\n+    protected Predicate<E> truePredicate = TruePredicate.<E>truePredicate();\n+\n+    public SortedSet<E> makeObject() {\n+        return PredicatedSortedSet.decorate(new TreeSet<E>(), truePredicate);\n     }\n-    \n-    public Set makeFullSet() {\n-        TreeSet set = new TreeSet();\n+\n+    public SortedSet<E> makeFullCollection() {\n+        TreeSet<E> set = new TreeSet<E>();\n         set.addAll(Arrays.asList(getFullElements()));\n         return PredicatedSortedSet.decorate(set, truePredicate);\n     }\n-   \n-    \n-//--------------------------------------------------------------------   \n-    protected Predicate testPredicate =  \n-        new Predicate() {\n-            public boolean evaluate(Object o) {\n+\n+//--------------------------------------------------------------------\n+    protected Predicate<E> testPredicate =\n+        new Predicate<E>() {\n+            public boolean evaluate(E o) {\n                 return (o instanceof String) && (((String) o).startsWith(\"A\"));\n             }\n-        };      \n-     \n-    \n-    protected SortedSet makeTestSet() {\n-        return PredicatedSortedSet.decorate(new TreeSet(), testPredicate);\n+        };\n+\n+    protected PredicatedSortedSet<E> makeTestSet() {\n+        return (PredicatedSortedSet<E>) PredicatedSortedSet.decorate(new TreeSet<E>(), testPredicate);\n     }\n-    \n+\n     public void testGetSet() {\n-        SortedSet set = makeTestSet();\n-        assertTrue(\"returned set should not be null\",\n-            ((PredicatedSortedSet) set).getSet() != null);\n+        PredicatedSortedSet<E> set = makeTestSet();\n+        assertTrue(\"returned set should not be null\", set.decorated() != null);\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testIllegalAdd() {\n-        SortedSet set = makeTestSet();\n+        SortedSet<E> set = makeTestSet();\n         String testString = \"B\";\n         try {\n-            set.add(testString);\n+            set.add((E) testString);\n             fail(\"Should fail string predicate.\");\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n-        assertTrue(\"Collection shouldn't contain illegal element\", \n-         !set.contains(testString));   \n+        assertTrue(\"Collection shouldn't contain illegal element\",\n+         !set.contains(testString));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testIllegalAddAll() {\n-        SortedSet set = makeTestSet();\n-        Set elements = new TreeSet();\n-        elements.add(\"Aone\");\n-        elements.add(\"Atwo\");\n-        elements.add(\"Bthree\");\n-        elements.add(\"Afour\");\n+        SortedSet<E> set = makeTestSet();\n+        Set<E> elements = new TreeSet<E>();\n+        elements.add((E) \"Aone\");\n+        elements.add((E) \"Atwo\");\n+        elements.add((E) \"Bthree\");\n+        elements.add((E) \"Afour\");\n         try {\n             set.addAll(elements);\n             fail(\"Should fail string predicate.\");\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n-        assertTrue(\"Set shouldn't contain illegal element\", \n-         !set.contains(\"Aone\"));   \n-        assertTrue(\"Set shouldn't contain illegal element\", \n-         !set.contains(\"Atwo\"));   \n-        assertTrue(\"Set shouldn't contain illegal element\", \n-         !set.contains(\"Bthree\"));   \n-        assertTrue(\"Set shouldn't contain illegal element\", \n-         !set.contains(\"Afour\"));   \n+        assertTrue(\"Set shouldn't contain illegal element\", !set.contains(\"Aone\"));\n+        assertTrue(\"Set shouldn't contain illegal element\", !set.contains(\"Atwo\"));\n+        assertTrue(\"Set shouldn't contain illegal element\", !set.contains(\"Bthree\"));\n+        assertTrue(\"Set shouldn't contain illegal element\", !set.contains(\"Afour\"));\n     }\n-    \n+\n     public void testComparator() {\n-        SortedSet set = makeTestSet();\n-        Comparator c = set.comparator();\n+        SortedSet<E> set = makeTestSet();\n+        Comparator<? super E> c = set.comparator();\n         assertTrue(\"natural order, so comparator should be null\", c == null);\n     }\n ", "timestamp": 1252994773, "metainfo": ""}