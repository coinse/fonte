{"sha": "456adc335431376fa4c81ac8639668a946fa00a4", "log": "Clarify the contract of the put method in BidiMaps   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BidiMap.java\n+++ b/src/java/org/apache/commons/collections/BidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BidiMap.java,v 1.1 2003/09/20 20:24:30 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BidiMap.java,v 1.2 2003/10/05 20:38:55 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * a key to be looked up from a value with equal performance.\n  *  \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/20 20:24:30 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/05 20:38:55 $\n  *\n  * @author Stephen Colebourne\n  */\n public interface BidiMap extends Map {\n+    \n+    /**\n+     * Puts the key-value pair into the map, replacing any previous pair.\n+     * <p>\n+     * When adding a key-value pair, the value may already exist in the map\n+     * against a different key. That mapping is removed, to ensure that the\n+     * value only occurs once in the inverse map.\n+     * <pre>\n+     *  BidiMap map1 = new HashBidiMap();\n+     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n+     *  map.put(\"A\",\"C\");  // contains A mapped to C, as per Map\n+     * \n+     *  BidiMap map2 = new HashBidiMap();\n+     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n+     *  map.put(\"C\",\"B\");  // contains C mapped to B, key A is removed\n+     * </pre>\n+     *\n+     * @param key  the key to store\n+     * @param value  the value to store\n+     * @return the previous value mapped to this key\n+     * \n+     * @throws UnsupportedOperationException if the <code>put</code> method is not supported\n+     * @throws ClassCastException (optional) if the map limits the type of the \n+     *  value and the specifed value is inappropriate\n+     * @throws IllegalArgumentException (optional) if the map limits the values\n+     *  in some way and the value was invalid\n+     * @throws NullPointerException (optional) if the map limits the values to\n+     *  non-null and null was specified\n+     */\n+    public Object put(Object key, Object value);\n     \n     /**\n      * Gets the key that is currently mapped to the specified value.", "timestamp": 1065386335, "metainfo": ""}