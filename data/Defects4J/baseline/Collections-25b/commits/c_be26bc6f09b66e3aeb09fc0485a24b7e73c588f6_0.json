{"sha": "be26bc6f09b66e3aeb09fc0485a24b7e73c588f6", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r555925 | skestle | 2007-07-13 03:39:24 -0700 (Fri, 13 Jul 2007) | 2 lines          Added Edwin Tellman's patch for COLLECTIONS-243.       It all seems pretty reasonable, and it should all be checked again as the project is worked through     ------------------------------------------------------------------------     r471202 | scolebourne | 2006-11-04 06:21:44 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getCollection() - use covariant decorated()     ------------------------------------------------------------------------     r471186 | scolebourne | 2006-11-04 05:47:51 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getSet() and getSortedSet() - use decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n+++ b/src/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n  *\n  * @author Stephen Colebourne\n  */\n-public final class UnmodifiableSortedSet\n-        extends AbstractSortedSetDecorator\n+public final class UnmodifiableSortedSet<E>\n+        extends AbstractSortedSetDecorator<E>\n         implements Unmodifiable, Serializable {\n \n     /** Serialization version */\n      * @param set  the set to decorate, must not be null\n      * @throws IllegalArgumentException if set is null\n      */\n-    public static SortedSet decorate(SortedSet set) {\n+    public static <T> SortedSet<T> decorate(SortedSet<T> set) {\n         if (set instanceof Unmodifiable) {\n             return set;\n         }\n-        return new UnmodifiableSortedSet(set);\n+        return new UnmodifiableSortedSet<T>(set);\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws IOException\n      * @throws ClassNotFoundException\n      */\n+    @SuppressWarnings(\"unchecked\")\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n         collection = (Collection) in.readObject();\n      * @param set  the set to decorate, must not be null\n      * @throws IllegalArgumentException if set is null\n      */\n-    private UnmodifiableSortedSet(SortedSet set) {\n+    private UnmodifiableSortedSet(SortedSet<E> set) {\n         super(set);\n     }\n \n     //-----------------------------------------------------------------------\n-    public Iterator iterator() {\n-        return UnmodifiableIterator.decorate(getCollection().iterator());\n+    public Iterator<E> iterator() {\n+        return UnmodifiableIterator.decorate(decorated().iterator());\n     }\n \n-    public boolean add(Object object) {\n+    public boolean add(E object) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public boolean addAll(Collection coll) {\n+    public boolean addAll(Collection<? extends E> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n         throw new UnsupportedOperationException();\n     }\n \n-    public boolean removeAll(Collection coll) {\n+    public boolean removeAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public boolean retainAll(Collection coll) {\n+    public boolean retainAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n     //-----------------------------------------------------------------------\n-    public SortedSet subSet(Object fromElement, Object toElement) {\n-        SortedSet sub = getSortedSet().subSet(fromElement, toElement);\n-        return new UnmodifiableSortedSet(sub);\n+    public SortedSet<E> subSet(E fromElement, E toElement) {\n+        SortedSet<E> sub = decorated().subSet(fromElement, toElement);\n+        return new UnmodifiableSortedSet<E>(sub);\n     }\n \n-    public SortedSet headSet(Object toElement) {\n-        SortedSet sub = getSortedSet().headSet(toElement);\n-        return new UnmodifiableSortedSet(sub);\n+    public SortedSet<E> headSet(E toElement) {\n+        SortedSet<E> sub = decorated().headSet(toElement);\n+        return new UnmodifiableSortedSet<E>(sub);\n     }\n \n-    public SortedSet tailSet(Object fromElement) {\n-        SortedSet sub = getSortedSet().tailSet(fromElement);\n-        return new UnmodifiableSortedSet(sub);\n+    public SortedSet<E> tailSet(E fromElement) {\n+        SortedSet<E> sub = decorated().tailSet(fromElement);\n+        return new UnmodifiableSortedSet<E>(sub);\n     }\n \n }", "timestamp": 1252994563, "metainfo": ""}