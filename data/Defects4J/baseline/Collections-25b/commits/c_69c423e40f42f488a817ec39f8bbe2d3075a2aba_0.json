{"sha": "69c423e40f42f488a817ec39f8bbe2d3075a2aba", "log": "add BooleanComparator and tests   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/comparators/BooleanComparator.java\n+/* \n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/BooleanComparator.java,v 1.1 2003/01/10 00:21:08 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.collections.comparators;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+\n+/**\n+ * A {@link Comparator} for {@link Boolean}s.\n+ * \n+ * @see #getTrueFirstComparator\n+ * @see #getFalseFirstComparator\n+ * @see #getBooleanComparator\n+ * \n+ * @since Commons Collections 2.2\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/01/10 00:21:08 $\n+ * \n+ * @author Rodney Waldhoff\n+ */\n+public final class BooleanComparator implements Comparator, Serializable {\n+\n+    /**\n+     * Creates a <code>BooleanComparator</code>\n+     * that sorts <code>false</code> values before \n+     * <code>true</code> values.\n+     * \n+     * Equivalent to {@link BooleanComparator(boolean) BooleanComparator(false)}.\n+     */\n+    public BooleanComparator() {\n+        this(false);\n+    }\n+\n+    /**\n+     * Creates a <code>BooleanComparator</code>\n+     * that sorts <code><i>trueFirst</i></code> values before \n+     * <code>!<i>trueFirst</i></code> values.\n+     * \n+     * @param trueFirst when <code>true</code>, sort \n+     *        <code>true</code> {@link Boolean}s before\n+     *        <code>false</code> {@link Boolean}s.\n+     */\n+    public BooleanComparator(boolean trueFirst) {\n+        this.trueFirst = trueFirst;\n+    }\n+\n+    /**\n+     * Compares two arbitrary Objects. When both arguments\n+     * are {@link Boolean}, this method is equivalent to \n+     * {@link #compare(Boolean,Boolean) compare((Boolean)<i>o1</i>,(Boolean)<i>o2</i>)}.\n+     * When either argument is not a {@link Boolean}, this methods throws\n+     * a {@link ClassCastException}.\n+     * \n+     * @throws ClassCastException when either argument is not \n+     *         a {@link Boolean}\n+     */\n+    public int compare(Object o1, Object o2) {\n+        return compare((Boolean)o1,(Boolean)o2);\n+    }\n+    \n+    /**\n+     * Compares two non-<code>null</code> {@link Boolean}s\n+     * according to the value of {@link #sortsTrueFirst}.\n+     * \n+     * @throws NullPointerException when either argument <code>null</code>\n+     */\n+    public int compare(Boolean b1, Boolean b2) {\n+        boolean v1 = b1.booleanValue();\n+        boolean v2 = b2.booleanValue();\n+\n+        return (v1 ^ v2) ? ( (v1 ^ trueFirst) ? 1 : -1 ) : 0;\n+    }\n+\n+    /**\n+     * Implement a hash code for this comparator that is consistent with\n+     * {@link #equals equals}.\n+     *\n+     * @return a hash code for this comparator.\n+     */\n+    public int hashCode() {\n+        int hash = \"BooleanComparator\".hashCode();\n+        return trueFirst ? -1 * hash : hash;\n+    }\n+\n+    /**\n+     * Returns <code>true</code> iff <i>that</i> Object is \n+     * is a {@link Comparator} whose ordering is known to be \n+     * equivalent to mine.\n+     * <p>\n+     * This implementation returns <code>true</code>\n+     * iff <code><i>that</i></code> is a {@link BooleanComparator} \n+     * whose {@link #sortsTrueFirst} value is equal to mine.\n+     */\n+    public boolean equals(Object that) {\n+        return (this == that) || \n+               ((that instanceof BooleanComparator) && \n+                (this.trueFirst == ((BooleanComparator)that).trueFirst));\n+    }\n+\n+    /**\n+     * Returns <code>true</code> iff\n+     * I sort <code>true</code> values before \n+     * <code>false</code> values.  In other words,\n+     * returns <code>true</code> iff\n+     * {@link #compare(Boolean,Boolean) compare(Boolean.TRUE,Boolean.FALSE)}\n+     * returns a positive value.\n+     */\n+    public boolean sortsTrueFirst() {\n+        return trueFirst;\n+    }\n+    \n+    /**\n+     * Returns a BooleanComparator instance that sorts \n+     * <code>true</code> values before <code>false</code> values.\n+     * <p />\n+     * Clients are encouraged to use the value returned from \n+     * this method instead of constructing a new instance \n+     * to reduce allocation and garbage collection overhead when\n+     * multiple BooleanComparators may be used in the same \n+     * virtual machine.\n+     */\n+    public static BooleanComparator getTrueFirstComparator() {\n+        return TRUE_FIRST;\n+    }\n+    \n+    /**\n+     * Returns a BooleanComparator instance that sorts \n+     * <code>false</code> values before <code>true</code> values.\n+     * <p />\n+     * Clients are encouraged to use the value returned from \n+     * this method instead of constructing a new instance \n+     * to reduce allocation and garbage collection overhead when\n+     * multiple BooleanComparators may be used in the same \n+     * virtual machine.\n+     */\n+    public static BooleanComparator getFalseFirstComparator() {\n+        return FALSE_FIRST;\n+    }\n+        \n+    /**\n+     * Returns a BooleanComparator instance that sorts \n+     * <code><i>trueFirst</i></code> values before \n+     * <code>!<i>trueFirst</i></code> values.\n+     * <p />\n+     * Clients are encouraged to use the value returned from \n+     * this method instead of constructing a new instance \n+     * to reduce allocation and garbage collection overhead when\n+     * multiple BooleanComparators may be used in the same \n+     * virtual machine.\n+     */\n+    public static BooleanComparator getBooleanComparator(boolean trueFirst) {\n+        return trueFirst ? TRUE_FIRST : FALSE_FIRST;\n+    }\n+    \n+    /** <code>true</code> iff <code>true</code> values sort before <code>false</code> values. */\n+    private boolean trueFirst = false;\n+\n+    /** My static \"true first\" reference. */\n+    private static final BooleanComparator TRUE_FIRST = new BooleanComparator(true);\n+\n+    /** My static \"false first\" reference. */\n+    private static final BooleanComparator FALSE_FIRST = new BooleanComparator(false);\n+}\n--- a/src/test/org/apache/commons/collections/comparators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/TestAll.java,v 1.1 2002/10/12 22:35:10 scolebourne Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/10/12 22:35:10 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/TestAll.java,v 1.2 2003/01/10 00:21:08 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n /**\n  * Entry point for all Comparator Collections tests.\n  * @author Stephen Colebourne\n- * @version $Id: TestAll.java,v 1.1 2002/10/12 22:35:10 scolebourne Exp $\n+ * @version $Revision: 1.2 $ $Date: 2003/01/10 00:21:08 $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n \n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n+        suite.addTest(TestBooleanComparator.suite());\n         suite.addTest(TestComparableComparator.suite());\n         suite.addTest(TestComparatorChain.suite());\n         suite.addTest(TestNullComparator.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/comparators/TestBooleanComparator.java\n+/* \n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/TestBooleanComparator.java,v 1.1 2003/01/10 00:21:08 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.collections.comparators;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Tests for {@link BooleanComparator}.\n+ * \n+ * @since Commons Collections 2.2\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/01/10 00:21:08 $\n+ * \n+ * @author Rodney Waldhoff\n+ */\n+public class TestBooleanComparator extends TestComparator {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestBooleanComparator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestBooleanComparator.class);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    public Comparator makeComparator() {\n+        return new BooleanComparator();\n+    }\n+\n+    public List getComparableObjectsOrdered() {\n+        List list = new ArrayList();\n+        list.add(new Boolean(false));\n+        list.add(Boolean.FALSE);\n+        list.add(new Boolean(false));\n+        list.add(Boolean.TRUE);\n+        list.add(new Boolean(true));\n+        list.add(Boolean.TRUE);\n+        return list;\n+    }\n+    \n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+    public void testConstructors() {\n+        allTests(false,new BooleanComparator());\n+        allTests(false,new BooleanComparator(false));\n+        allTests(true,new BooleanComparator(true));        \n+    }\n+    \n+    public void testStaticFactoryMethods() {\n+        allTests(false,BooleanComparator.getFalseFirstComparator());\n+        allTests(false,BooleanComparator.getBooleanComparator(false));\n+        allTests(true,BooleanComparator.getTrueFirstComparator());\n+        allTests(true,BooleanComparator.getBooleanComparator(true));\n+    }\n+    \n+    public void testEqualsCompatibleInstance() {\n+        assertEquals(new BooleanComparator(),new BooleanComparator(false));\n+        assertEquals(new BooleanComparator(false),new BooleanComparator(false));\n+        assertEquals(new BooleanComparator(false),BooleanComparator.getFalseFirstComparator());\n+        assertSame(BooleanComparator.getFalseFirstComparator(),BooleanComparator.getBooleanComparator(false));\n+\n+        assertEquals(new BooleanComparator(true),new BooleanComparator(true));\n+        assertEquals(new BooleanComparator(true),BooleanComparator.getTrueFirstComparator());\n+        assertSame(BooleanComparator.getTrueFirstComparator(),BooleanComparator.getBooleanComparator(true));\n+\n+        assertTrue(!(new BooleanComparator().equals(new BooleanComparator(true))));\n+        assertTrue(!(new BooleanComparator(true).equals(new BooleanComparator(false))));\n+    }\n+    \n+    public void testComparatorCompatibility() {\n+        // XXX FIX ME XXX\n+        // need to a serialized form to cvs\n+        // XXX FIX ME XXX        \n+    }\n+    \n+    // utilities\n+    // ------------------------------------------------------------------------\n+\n+    protected void allTests(boolean trueFirst, BooleanComparator comp) {\n+        orderIndependentTests(comp);\n+        if(trueFirst) {\n+            trueFirstTests(comp);\n+        } else {\n+            falseFirstTests(comp);\n+        }\n+    }\n+\n+    protected void trueFirstTests(BooleanComparator comp) {\n+        assertNotNull(comp);\n+        assertEquals(0,comp.compare(Boolean.TRUE,Boolean.TRUE));\n+        assertEquals(0,comp.compare(Boolean.FALSE,Boolean.FALSE));\n+        assertTrue(comp.compare(Boolean.FALSE,Boolean.TRUE) > 0);\n+        assertTrue(comp.compare(Boolean.TRUE,Boolean.FALSE) < 0);\n+\n+        assertEquals(0,comp.compare((Object)(Boolean.TRUE),(Object)(Boolean.TRUE)));\n+        assertEquals(0,comp.compare((Object)(Boolean.FALSE),(Object)(Boolean.FALSE)));\n+        assertTrue(comp.compare((Object)(Boolean.FALSE),(Object)(Boolean.TRUE)) > 0);\n+        assertTrue(comp.compare((Object)(Boolean.TRUE),(Object)(Boolean.FALSE)) < 0);\n+    }\n+\n+    protected void falseFirstTests(BooleanComparator comp) {\n+        assertNotNull(comp);\n+        assertEquals(0,comp.compare(Boolean.TRUE,Boolean.TRUE));\n+        assertEquals(0,comp.compare(Boolean.FALSE,Boolean.FALSE));\n+        assertTrue(comp.compare(Boolean.FALSE,Boolean.TRUE) < 0);\n+        assertTrue(comp.compare(Boolean.TRUE,Boolean.FALSE) > 0);\n+\n+        assertEquals(0,comp.compare((Object)(Boolean.TRUE),(Object)(Boolean.TRUE)));\n+        assertEquals(0,comp.compare((Object)(Boolean.FALSE),(Object)(Boolean.FALSE)));\n+        assertTrue(comp.compare((Object)(Boolean.FALSE),(Object)(Boolean.TRUE)) < 0);\n+        assertTrue(comp.compare((Object)(Boolean.TRUE),(Object)(Boolean.FALSE)) > 0);\n+    }\n+\n+    protected void orderIndependentTests(BooleanComparator comp) {\n+        nullArgumentTests(comp);\n+        nonBooleanArgumentTests(comp);\n+        nullAndNonBooleanArgumentsTests(comp);\n+    }\n+    \n+    protected void nullArgumentTests(BooleanComparator comp) {\n+        assertNotNull(comp);\n+        try {\n+            comp.compare(null,null);\n+            fail(\"Expected NullPointerException\");\n+        } catch(NullPointerException e) {\n+            // expected\n+        }\n+        try {\n+            comp.compare(Boolean.TRUE,null);\n+            fail(\"Expected NullPointerException\");\n+        } catch(NullPointerException e) {\n+            // expected\n+        }\n+        try {\n+            comp.compare(Boolean.FALSE,null);\n+            fail(\"Expected NullPointerException\");\n+        } catch(NullPointerException e) {\n+            // expected\n+        }\n+        try {\n+            comp.compare(null,Boolean.TRUE);\n+            fail(\"Expected NullPointerException\");\n+        } catch(NullPointerException e) {\n+            // expected\n+        }\n+        try {\n+            comp.compare(null,Boolean.FALSE);\n+            fail(\"Expected NullPointerException\");\n+        } catch(NullPointerException e) {\n+            // expected\n+        }\n+    }\n+    \n+    protected void nonBooleanArgumentTests(BooleanComparator comp) {\n+        assertNotNull(comp);\n+        try {\n+            comp.compare(\"string\",\"string\");\n+            fail(\"Expected ClassCastException\");\n+        } catch(ClassCastException e) {\n+            // expected\n+        }\n+        try {\n+            comp.compare(Boolean.TRUE,\"string\");\n+            fail(\"Expected ClassCastException\");\n+        } catch(ClassCastException e) {\n+            // expected\n+        }\n+        try {\n+            comp.compare(\"string\",Boolean.TRUE);\n+            fail(\"Expected ClassCastException\");\n+        } catch(ClassCastException e) {\n+            // expected\n+        }\n+        try {\n+            comp.compare(\"string\",new Integer(3));\n+            fail(\"Expected ClassCastException\");\n+        } catch(ClassCastException e) {\n+            // expected\n+        }\n+        try {\n+            comp.compare(new Integer(3),\"string\");\n+            fail(\"Expected ClassCastException\");\n+        } catch(ClassCastException e) {\n+            // expected\n+        }\n+    }\n+    \n+    protected void nullAndNonBooleanArgumentsTests(BooleanComparator comp) {\n+        assertNotNull(comp);\n+        try {\n+            comp.compare(null,\"string\");\n+            fail(\"Expected ClassCast or NullPointer Exception\");\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(NullPointerException e) {\n+            // expected\n+        }\n+        try {\n+            comp.compare(\"string\",null);\n+            fail(\"Expected ClassCast or NullPointer Exception\");\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n+}", "timestamp": 1042158068, "metainfo": ""}