{"sha": "60a4d56b071ef3f6bcec662b8635118f4aec882a", "log": "Make serializable   ", "commit": "\n--- a/src/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n  */\n package org.apache.commons.collections.buffer;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n import java.util.AbstractCollection;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n  * </pre>\n  * <p>\n  * This buffer prevents null objects from being added.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  * \n  * @since Commons Collections 3.0 (previously in main package v2.1)\n- * @version $Revision: 1.8 $ $Date: 2004/05/15 12:33:23 $\n+ * @version $Revision: 1.9 $ $Date: 2004/06/01 22:57:18 $\n  *\n  * @author Avalon\n  * @author Federico Barbieri\n  * @author Paul Jack\n  * @author Stephen Colebourne\n  */\n-public class UnboundedFifoBuffer extends AbstractCollection implements Buffer {\n-    \n+public class UnboundedFifoBuffer extends AbstractCollection implements Buffer, Serializable {\n+\n+    /** Serialization vesrion */\n+    private static final long serialVersionUID = -3482960336579541419L;\n+\n     /** The array of objects in the buffer. */\n-    protected Object[] buffer;\n+    protected transient Object[] buffer;\n     /** The current head index. */\n-    protected int head;\n+    protected transient int head;\n     /** The current tail index. */\n-    protected int tail;\n+    protected transient int tail;\n \n     /**\n      * Constructs an UnboundedFifoBuffer with the default number of elements.\n         tail = 0;\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the buffer out using a custom routine.\n+     * \n+     * @param out  the output stream\n+     * @throws IOException\n+     */\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeInt(size());\n+        for (Iterator it = iterator(); it.hasNext();) {\n+            out.writeObject(it.next());\n+        }\n+    }\n+\n+    /**\n+     * Read the buffer in using a custom routine.\n+     * \n+     * @param in  the input stream\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     */\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        int size = in.readInt();\n+        buffer = new Object[size];\n+        for (int i = 0; i < size; i++) {\n+            buffer[i] = in.readObject();\n+        }\n+        head = 0;\n+        tail = size;\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Returns the number of elements stored in the buffer.\n      *", "timestamp": 1086130638, "metainfo": ""}