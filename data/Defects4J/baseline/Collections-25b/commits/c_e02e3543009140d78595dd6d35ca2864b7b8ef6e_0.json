{"sha": "e02e3543009140d78595dd6d35ca2864b7b8ef6e", "log": "Added a comparator that provides explicit control over comparisons with null. This can be used to create SortedSets or other sorted collections where nulls are sorted first or last.  The basis for this comparator was this discussion on the commons mailing list:  http://www.mail-archive.com/commons-dev%40jakarta.apache.org/msg07762.html   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/comparators/NullComparator.java\n+package org.apache.commons.collections.comparators;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import java.io.Serializable;\n+import java.lang.Comparable;\n+import java.util.Comparator;\n+\n+/**\n+ *  A Comparator that will compare nulls to be either lower or higher than\n+ *  other objects.\n+ *\n+ *  @author <a href=\"mas@apache.org\">Michael A. Smith</a>\n+ *  @version $Id: NullComparator.java,v 1.1 2002/06/09 19:23:53 mas Exp $ \n+ **/\n+public class NullComparator implements Comparator, Serializable {\n+\n+    /**\n+     *  The comparator to use when comparing two non-<code>null</code> objects.\n+     **/\n+    private Comparator nonNullComparator;\n+\n+    /**\n+     *  Specifies whether a <code>null</code> are compared as higher than\n+     *  non-<code>null</code> objects.\n+     **/\n+    private boolean nullsAreHigh;\n+\n+    /** \n+     *  Construct an instance that sorts <code>null</code> higher than any\n+     *  non-<code>null</code> object it is compared with. When comparing two\n+     *  non-<code>null</code> objects, the {@link ComparableComparator} is\n+     *  used.\n+     **/\n+    public NullComparator() {\n+\tthis(ComparableComparator.getInstance(), true);\n+    }\n+\n+    /**\n+     *  Construct an instance that sorts <code>null</code> higher than any\n+     *  non-<code>null</code> object it is compared with.  When comparing two\n+     *  non-<code>null</code> objects, the specified {@link Comparator} is\n+     *  used.\n+     *\n+     *  @param nonNullComparator the comparator to use when comparing two\n+     *  non-<code>null</code> objects.  This argument cannot be\n+     *  <code>null</code>\n+     *\n+     *  @exception NullPointerException if <code>nonNullComparator</code> is\n+     *  <code>null</code>\n+     **/\n+    public NullComparator(Comparator nonNullComparator) {\n+\tthis(nonNullComparator, true);\n+    }\n+\n+    /**\n+     *  Construct an instance that sorts <code>null</code> higher or lower than\n+     *  any non-<code>null</code> object it is compared with.  When comparing\n+     *  two non-<code>null</code> objects, the {@link ComparableCOmparator} is\n+     *  used.\n+     *\n+     *  @param nullsAreHigh a <code>true</code> value indicates that\n+     *  <code>null</code> should be compared as higher than a\n+     *  non-<code>null</code> object.  A <code>false</code> value indicates\n+     *  that <code>null</code> should be compared as lower than a\n+     *  non-<code>null</code> object.\n+     **/\n+    public NullComparator(boolean nullsAreHigh) {\n+\tthis(ComparableComparator.getInstance(), nullsAreHigh);\n+    }\n+    \n+    /**\n+     *  Cosntruct an instance that sorts <code>null</code> higher or lower than\n+     *  any non-<code>null</code> object it is compared with.  When comparing\n+     *  two non-<code>null</code> objects, the specified {@link Comparator} is\n+     *  used.\n+     *\n+     *  @param nonNullComparator the comparator to use when comparing two\n+     *  non-<code>null</code> objects. This argument cannot be\n+     *  <code>null</code>\n+     *\n+     *  @param nullsAreHigh a <code>true</code> value indicates that\n+     *  <code>null</code> should be compared as higher than a\n+     *  non-<code>null</code> object.  A <code>false</code> value indicates\n+     *  that <code>null</code> should be compared as lower than a\n+     *  non-<code>null</code> object.\n+     *\n+     *  @exception NullPointerException if <code>nonNullComparator</code> is\n+     *  <code>null</code>\n+     **/\n+    public NullComparator(Comparator nonNullComparator, boolean nullsAreHigh) {\n+\tthis.nonNullComparator = nonNullComparator;\n+\tthis.nullsAreHigh = nullsAreHigh;\n+\n+\tif(nonNullComparator == null) {\n+\t    throw new NullPointerException(\"null nonNullComparator\");\n+\t}\n+    }\n+\n+    /**\n+     *  Perform a comparison between two objects.  If both objects are\n+     *  <code>null</code>, a <code>0</code> value is returned.  If one object\n+     *  is <code>null</code> and the other is not, the result is determined on\n+     *  whether the Comparator was constructed to have nulls as higher or lower\n+     *  than other objects.  If neither object is <code>null</code>, an\n+     *  underlying comparator specified in the constructor (or the default) is\n+     *  used to compare the non-<code>null</code> objects.\n+     *\n+     *  @param o1 the first object to compare\n+     *\n+     *  @param o2 the object to compare it to.\n+     *\n+     *  @return <code>-1</code> if <code>o1</code> is \"lower\" than (less than,\n+     *  before, etc.) <code>o2</code>; <code>1</code> if <code>o1</code> is\n+     *  \"higher\" than (greater than, after, etc.) <code>o2</code>; or\n+     *  <code>0</code> if <code>o1</code> and <code>o2</code> are equal.\n+     **/\n+    public int compare(Object o1, Object o2) {\n+\tif(o1 == o2) return 0;\n+\tif(o1 == null) return (this.nullsAreHigh ? 1 : -1);\n+\tif(o2 == null) return (this.nullsAreHigh ? -1 : 1);\n+\treturn this.nonNullComparator.compare(o1, o2);\n+    }\n+\n+    /**\n+     *  Implement a hash code for this comparator that is consistent with\n+     *  {@link #equals(Object)}.\n+     *\n+     *  @return a hash code for this comparator.\n+     **/\n+    public int hashCode() {\n+\treturn (nullsAreHigh ? -1 : 1) * nonNullComparator.hashCode();\n+    }\n+\n+    /**\n+     *  Determines whether the specified object represents a comparator that is\n+     *  equal to this comparator.\n+     *\n+     *  @param o the object to compare this comparator with.\n+     *\n+     *  @return <code>true</code> if the specified object is a NullComparator\n+     *  with equivalant <code>null</code> comparison behavior\n+     *  (i.e. <code>null</code> high or low) and with equivalent underlying\n+     *  non-<code>null</code> object comparators.\n+     **/\n+    public boolean equals(Object obj) {\n+\tif(obj == null) return false;\n+\tif(obj == this) return true;\n+\tif(!obj.getClass().equals(this.getClass())) return false;\n+\n+\tNullComparator other = (NullComparator)obj;\n+\t\n+\treturn ((this.nullsAreHigh == other.nullsAreHigh) &&\n+\t\t(this.nonNullComparator.equals(other.nonNullComparator)));\n+    }\n+\n+    private static final long serialVersionUID = -5820772575483504339L;\n+}\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.26 2002/06/04 16:01:27 rwaldhoff Exp $\n- * $Revision: 1.26 $\n- * $Date: 2002/06/04 16:01:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.27 2002/06/09 19:23:53 mas Exp $\n+ * $Revision: 1.27 $\n+ * $Date: 2002/06/09 19:23:53 $\n  *\n  * ====================================================================\n  *\n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.26 2002/06/04 16:01:27 rwaldhoff Exp $\n+ * @version $Id: TestAll.java,v 1.27 2002/06/09 19:23:53 mas Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n         suite.addTest(TestLRUMap.suite());\n         suite.addTest(TestMultiHashMap.suite());\n         suite.addTest(TestReverseComparator.suite());\n+\tsuite.addTest(TestNullComparator.suite());\n         suite.addTest(TestSequencedHashMap.suite());\n         suite.addTest(TestSingletonIterator.suite());\n         suite.addTest(TestTreeBag.suite());\n--- a/src/test/org/apache/commons/collections/comparators/TestComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestComparator.java\n package org.apache.commons.collections.comparators;\n \n import java.io.IOException;\n+import java.io.FileNotFoundException;\n import java.io.Serializable;\n import java.util.Collections;\n import java.util.Comparator;\n      */\n     public void testComparatorCompatibility() throws IOException, ClassNotFoundException {\n         Comparator comparator = null;\n-        /*\n-         * Create canonical objects with this code\n-        comparator = makeComparator();\n-        \n-        writeExternalFormToDisk((Serializable) comparator, \n-                                getCanonicalComparatorName(comparator));\n-        */\n \n         // test to make sure the canonical form has been preserved\n-        comparator = \n-            (Comparator) readExternalFormFromDisk(getCanonicalComparatorName(makeComparator()));\n+\ttry {\n+\t    comparator = \n+\t\t(Comparator) readExternalFormFromDisk\n+\t\t(getCanonicalComparatorName(makeComparator()));\n+\t} catch (FileNotFoundException exception) {\n+\n+\t    boolean autoCreateSerialized = false;\n+\n+\t    if(autoCreateSerialized) {\n+\t\tcomparator = makeComparator();\n+\t\tString fileName = getCanonicalComparatorName(comparator);\n+\t\twriteExternalFormToDisk((Serializable) comparator, fileName);\n+\t\tfail(\"Serialized form could not be found.  A serialized version \" +\n+\t\t     \"has now been written (and should be added to CVS): \" + fileName);\n+\t    } else {\n+\t\tfail(\"The Serialized form could be located to test serialization \" +\n+\t\t     \"compatibility: \" + exception.getMessage());\n+\t    }\n+\t}\n+\n         \n         // make sure the canonical form produces the ordering we currently\n         // expect\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/comparators/TestNullComparator.java\n+package org.apache.commons.collections.comparators;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import java.util.Comparator;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ *  Test the NullComparator \n+ *\n+ *  @author <a href=\"mas@apache.org\">Michael A. Smith</a>\n+ *  @version $Id: TestNullComparator.java,v 1.1 2002/06/09 19:23:53 mas Exp $\n+ **/\n+public abstract class TestNullComparator extends TestComparator {\n+\n+    public TestNullComparator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+\tTestSuite suite = new TestSuite(TestNullComparator.class.getName());\n+\tsuite.addTest(new TestSuite(TestNullComparator1.class));\n+\tsuite.addTest(new TestSuite(TestNullComparator2.class));\n+\treturn suite;\n+    }\n+\n+    /**\n+     *  Test the NullComparator with nulls high, using comparable comparator\n+     **/\n+    public static class TestNullComparator1 extends TestNullComparator {\n+\n+\tpublic TestNullComparator1(String testName) {\n+\t    super(testName);\n+\t}\n+\n+\tpublic Comparator makeComparator() {\n+\t    return new NullComparator();\n+\t}\n+\t\n+\tpublic List getComparableObjectsOrdered() {\n+\t    List list = new LinkedList();\n+\t    list.add(new Integer(1));\n+\t    list.add(new Integer(2));\n+\t    list.add(new Integer(3));\n+\t    list.add(new Integer(4));\n+\t    list.add(new Integer(5));\n+\t    list.add(null);\n+\t    return list;\n+\t}\n+\n+\tpublic String getCanonicalComparatorName(Object object) {\n+\t    return super.getCanonicalComparatorName(object) + \"1\";\n+\t}\n+    }\n+\n+    /**\n+     *  Test the NullComparator with nulls low using the comparable comparator\n+     **/\n+    public static class TestNullComparator2 extends TestNullComparator {\n+\n+\tpublic TestNullComparator2(String testName) {\n+\t    super(testName);\n+\t}\n+\n+\tpublic Comparator makeComparator() {\n+\t    return new NullComparator(false);\n+\t}\n+\t\n+\tpublic List getComparableObjectsOrdered() {\n+\t    List list = new LinkedList();\n+\t    list.add(null);\n+\t    list.add(new Integer(1));\n+\t    list.add(new Integer(2));\n+\t    list.add(new Integer(3));\n+\t    list.add(new Integer(4));\n+\t    list.add(new Integer(5));\n+\t    return list;\n+\t}\n+\n+\tpublic String getCanonicalComparatorName(Object object) {\n+\t    return super.getCanonicalComparatorName(object) + \"2\";\n+\t}\n+    }\n+}", "timestamp": 1023650633, "metainfo": ""}