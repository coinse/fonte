{"sha": "5215e27ed61c4b8423b26b8a97bd786ec6a3a859", "log": "Enable zero iterators in the chain to function   ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n+++ b/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/IteratorChain.java,v 1.7 2003/12/03 11:37:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/IteratorChain.java,v 1.8 2003/12/29 16:07:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.NoSuchElementException;\n-\n+\n+import org.apache.commons.collections.IteratorUtils;\n import org.apache.commons.collections.list.UnmodifiableList;\n \n /**\n- * <p>An IteratorChain is an Iterator that wraps one or\n- * more Iterators.  When any method from the\n- * Iterator interface is called, the IteratorChain will\n- * proxy to a single underlying Iterator.  The \n- * IteratorChain will invoke the Iterators in sequence until \n- * all Iterators are exhausted completely.</p>\n- * \n- * <p>Under many circumstances, linking Iterators together\n- * in this manner is more efficient (and convenient)\n- * than reading out the contents of each Iterator into a\n- * List and creating a new Iterator.</p>\n- * \n- * <p>Calling a method that adds new Iterator<i>after\n- * a method in the Iterator interface\n- * has been called</i> will result in an\n- * UnsupportedOperationException.  Subclasses should <i>take care</i>\n- * to not alter the underlying List of Iterators.</p>\n+ * An IteratorChain is an Iterator that wraps a number of Iterators.\n+ * <p>\n+ * This class makes mutiple iterators look like one to the caller\n+ * When any method from the Iterator interface is called, the IteratorChain\n+ * will delegate to a single underlying Iterator. The IteratorChain will\n+ * invoke the Iterators in sequence until all Iterators are exhausted.\n+ * <p>\n+ * Under many circumstances, linking Iterators together in this manner is\n+ * more efficient (and convenient) than reading out the contents of each\n+ * Iterator into a List and creating a new Iterator.\n+ * <p>\n+ * Calling a method that adds new Iterator<i>after a method in the Iterator\n+ * interface has been called</i> will result in an UnsupportedOperationException.\n+ * Subclasses should <i>take care</i> to not alter the underlying List of Iterators.\n+ * <p>\n+ * NOTE: As from version 3.0, the IteratorChain may contain no\n+ * iterators. In this case the class will function as an empty iterator.\n  * \n  * @since Commons Collections 2.1\n- * @version $Revision: 1.7 $ $Date: 2003/12/03 11:37:44 $\n+ * @version $Revision: 1.8 $ $Date: 2003/12/29 16:07:53 $\n  * \n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n  */\n public class IteratorChain implements Iterator {\n \n+\t/** The chain of iterators */\n     protected final List iteratorChain = new ArrayList();\n+    /** The index of the current iterator */\n     protected int currentIteratorIndex = 0;\n+    /** The current iterator */\n     protected Iterator currentIterator = null;\n-    // the \"last used\" Iterator is the Iterator upon which\n-    // next() or hasNext() was most recently called\n-    // used for the remove() operation only\n+    /**\n+     * The \"last used\" Iterator is the Iterator upon which\n+     * next() or hasNext() was most recently called\n+     * used for the remove() operation only\n+     */\n     protected Iterator lastUsedIterator = null;\n-\n-    // ComparatorChain is \"locked\" after the first time\n-    // compare(Object,Object) is called\n+    /**\n+     * ComparatorChain is \"locked\" after the first time\n+     * compare(Object,Object) is called\n+     */\n     protected boolean isLocked = false;\n \n-    // Constructors\n-    // -------------------------------------------------------------------\n-    \n+    //-----------------------------------------------------------------------\n     /**\n      * Construct an IteratorChain with no Iterators.\n-     * You must add at least Iterator before calling\n-     * any method from the Iterator interface, or an \n-     * UnsupportedOperationException is thrown\n+     * <p>\n+     * You will normally use {@link #addIterator(Iterator)} to add\n+     * some iterators after using this constructor.\n      */\n     public IteratorChain() {\n         super();\n         }\n     }\n     \n-    // Public Methods\n-    // -------------------------------------------------------------------\n-\n+    //-----------------------------------------------------------------------\n     /**\n      * Add an Iterator to the end of the chain \n      * \n     }\n \n     /**\n-     * Determine if modifications can still be made to the\n-     * IteratorChain.  IteratorChains cannot be modified\n-     * once they have executed a method from the Iterator\n-     * interface.\n-     * \n-     * @return true = IteratorChain cannot be modified; false = \n-     *         IteratorChain can still be modified.\n+     * Determine if modifications can still be made to the IteratorChain.\n+     * IteratorChains cannot be modified once they have executed a method\n+     * from the Iterator interface.\n+     * \n+     * @return true if IteratorChain cannot be modified, false if it can \n      */\n     public boolean isLocked() {\n         return isLocked;\n     }\n \n-    // throw an exception if the IteratorChain is locked\n+    /**\n+     * Checks whether the iterator chain is now locked and in use.\n+     */\n     private void checkLocked() {\n         if (isLocked == true) {\n             throw new UnsupportedOperationException(\"IteratorChain cannot be changed after the first use of a method from the Iterator interface\");\n         }\n     }\n \n-    private void checkChainIntegrity() {\n-        if (iteratorChain.size() == 0) {\n-            throw new UnsupportedOperationException(\"IteratorChains must contain at least one Iterator\");\n-        }\n-    }\n-\n-    // you MUST call this method whenever you call a method in the Iterator interface, because\n-    // this method also assigns the initial value of the currentIterator variable\n+    /**\n+     * Lock the chain so no more iterators can be added.\n+     * This must be called from all Iterator interface methods.\n+     */\n     private void lockChain() {\n         if (isLocked == false) {\n-            checkChainIntegrity();\n             isLocked = true;\n         }\n     }\n \n-    // call this before any Iterator method to make sure that the current Iterator\n-    // is not exhausted\n+    /**\n+     * Updates the current iterator field to ensure that the current Iterator\n+     * is not exhausted\n+     */\n     protected void updateCurrentIterator() {\n         if (currentIterator == null) {\n-            currentIterator = (Iterator) iteratorChain.get(0);\n+            if (iteratorChain.isEmpty()) {\n+                currentIterator = IteratorUtils.EMPTY_ITERATOR;\n+            } else {\n+                currentIterator = (Iterator) iteratorChain.get(0);\n+            }\n             // set last used iterator here, in case the user calls remove\n             // before calling hasNext() or next() (although they shouldn't)\n             lastUsedIterator = currentIterator;\n         }\n \n-        if (currentIteratorIndex == (iteratorChain.size() - 1)) {\n-            return;\n-        }\n-\n-        while (currentIterator.hasNext() == false) {\n-            ++currentIteratorIndex;\n+        while (currentIterator.hasNext() == false && currentIteratorIndex < iteratorChain.size() - 1) {\n+            currentIteratorIndex++;\n             currentIterator = (Iterator) iteratorChain.get(currentIteratorIndex);\n-\n-            if (currentIteratorIndex == (iteratorChain.size() - 1)) {\n-                return;\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Return true if any Iterator in the IteratorChain has a remaining\n-     * element.\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Return true if any Iterator in the IteratorChain has a remaining element.\n      * \n      * @return true if elements remain\n-     * @exception UnsupportedOperationException\n-     *                   if the IteratorChain does not contain at least one\n-     *                   Iterator\n-     */\n-    public boolean hasNext() throws UnsupportedOperationException {\n+     */\n+    public boolean hasNext() {\n         lockChain();\n         updateCurrentIterator();\n         lastUsedIterator = currentIterator;\n      * Returns the next Object of the current Iterator\n      * \n      * @return Object from the current Iterator\n-     * @exception NoSuchElementException\n-     *                   if all the Iterators are exhausted\n-     * @exception UnsupportedOperationException\n-     *                   if the IteratorChain does not contain at least one\n-     *                   Iterator\n-     */\n-    public Object next() throws NoSuchElementException, UnsupportedOperationException {\n+     * @throws NoSuchElementException if all the Iterators are exhausted\n+     */\n+    public Object next() {\n         lockChain();\n         updateCurrentIterator();\n         lastUsedIterator = currentIterator;\n      * UnsupportedOperationException if the underlying\n      * Iterator does not support this method. \n      * \n-     * @exception UnsupportedOperationException\n-     *                   if the remove operator is not supported by the underlying\n-     *                   Iterator or if there are no Iterators in the IteratorChain\n-     * @exception IllegalStateException\n-     *                   if the next method has not yet been called, or the\n-     *                   remove method has already been called after the last\n-     *                   call to the next method.\n-     */\n-    public void remove() throws UnsupportedOperationException, IllegalStateException  {\n+     * @throws UnsupportedOperationException\n+     *   if the remove operator is not supported by the underlying Iterator\n+     * @throws IllegalStateException\n+     *   if the next method has not yet been called, or the remove method has\n+     *   already been called after the last call to the next method.\n+     */\n+    public void remove() {\n         lockChain();\n         updateCurrentIterator();\n \n         lastUsedIterator.remove();\n     }\n \n-\n }\n--- a/src/test/org/apache/commons/collections/iterators/TestIteratorChain.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestIteratorChain.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestIteratorChain.java,v 1.6 2003/10/01 21:54:55 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestIteratorChain.java,v 1.7 2003/12/29 16:07:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests the IteratorChain class.\n  * \n- * @version $Revision: 1.6 $ $Date: 2003/10/01 21:54:55 $\n+ * @version $Revision: 1.7 $ $Date: 2003/12/29 16:07:53 $\n  * \n  * @author James Strachan\n  * @author Mauricio S. Moura\n         assertEquals(\"C\",chain.next());\n         assertTrue(\"should not have next\",!chain.hasNext());\n     }\n+    \n+    public void testEmptyChain() {\n+        IteratorChain chain = new IteratorChain();\n+        assertEquals(false, chain.hasNext());\n+        try {\n+            chain.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+        try {\n+            chain.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+        \n }\n-", "timestamp": 1072714073, "metainfo": ""}