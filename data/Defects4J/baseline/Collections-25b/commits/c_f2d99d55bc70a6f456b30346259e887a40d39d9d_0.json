{"sha": "f2d99d55bc70a6f456b30346259e887a40d39d9d", "log": "Increase flexibility by adding factories for view iterators   ", "commit": "\n--- a/src/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java,v 1.6 2003/12/29 00:38:08 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java,v 1.7 2003/12/29 01:28:20 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>createMap</code> method.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: AbstractDualBidiMap.java,v 1.6 2003/12/29 00:38:08 scolebourne Exp $\n+ * @version $Id: AbstractDualBidiMap.java,v 1.7 2003/12/29 01:28:20 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n     \n     // Map views\n     //-----------------------------------------------------------------------\n+    /**\n+     * Gets a keySet view of the map.\n+     * Changes made on the view are reflected in the map.\n+     * The set supports remove and clear but not add.\n+     * \n+     * @return the keySet view\n+     */\n     public Set keySet() {\n         if (keySet == null) {\n             keySet = new KeySet(this);\n         return keySet;\n     }\n \n+    /**\n+     * Creates a key set iterator.\n+     * Subclasses can override this to return iterators with different properties.\n+     * \n+     * @param iterator  the iterator to decorate\n+     * @return the keySet iterator\n+     */\n+    protected Iterator createKeySetIterator(Iterator iterator) {\n+        return new KeySetIterator(iterator, this);\n+    }\n+\n+    /**\n+     * Gets a values view of the map.\n+     * Changes made on the view are reflected in the map.\n+     * The set supports remove and clear but not add.\n+     * \n+     * @return the values view\n+     */\n     public Collection values() {\n         if (values == null) {\n             values = new Values(this);\n         }\n         return values;\n+    }\n+\n+    /**\n+     * Creates a values iterator.\n+     * Subclasses can override this to return iterators with different properties.\n+     * \n+     * @param iterator  the iterator to decorate\n+     * @return the values iterator\n+     */\n+    protected Iterator createValuesIterator(Iterator iterator) {\n+        return new ValuesIterator(iterator, this);\n     }\n \n     /**\n         return entrySet;\n     }\n     \n+    /**\n+     * Creates an entry set iterator.\n+     * Subclasses can override this to return iterators with different properties.\n+     * \n+     * @param iterator  the iterator to decorate\n+     * @return the entrySet iterator\n+     */\n+    protected Iterator createEntrySetIterator(Iterator iterator) {\n+        return new EntrySetIterator(iterator, this);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Inner class View.\n         /** The parent map */\n         protected final AbstractDualBidiMap parent;\n         \n+        /**\n+         * Constructs a new view of the BidiMap.\n+         * \n+         * @param coll  the collection view being decorated\n+         * @param parent  the parent BidiMap\n+         */\n         protected View(Collection coll, AbstractDualBidiMap parent) {\n             super(coll);\n             this.parent = parent;\n      */\n     protected static class KeySet extends View implements Set {\n         \n+        /**\n+         * Constructs a new view of the BidiMap.\n+         * \n+         * @param parent  the parent BidiMap\n+         */\n         protected KeySet(AbstractDualBidiMap parent) {\n             super(parent.maps[0].keySet(), parent);\n         }\n \n         public Iterator iterator() {\n-            return new KeySetIterator(super.iterator(), parent);\n+            return parent.createKeySetIterator(super.iterator());\n         }\n         \n         public boolean contains(Object key) {\n      */\n     protected static class Values extends View implements Set {\n         \n+        /**\n+         * Constructs a new view of the BidiMap.\n+         * \n+         * @param parent  the parent BidiMap\n+         */\n         protected Values(AbstractDualBidiMap parent) {\n             super(parent.maps[0].values(), parent);\n         }\n \n         public Iterator iterator() {\n-            return new ValuesIterator(super.iterator(), parent);\n+            return parent.createValuesIterator(super.iterator());\n         }\n         \n         public boolean contains(Object value) {\n      */\n     protected static class EntrySet extends View implements Set {\n         \n+        /**\n+         * Constructs a new view of the BidiMap.\n+         * \n+         * @param parent  the parent BidiMap\n+         */\n         protected EntrySet(AbstractDualBidiMap parent) {\n             super(parent.maps[0].entrySet(), parent);\n         }\n \n         public Iterator iterator() {\n-            return new EntrySetIterator(super.iterator(), parent);\n+            return parent.createEntrySetIterator(super.iterator());\n         }\n         \n         public boolean remove(Object obj) {", "timestamp": 1072661300, "metainfo": ""}