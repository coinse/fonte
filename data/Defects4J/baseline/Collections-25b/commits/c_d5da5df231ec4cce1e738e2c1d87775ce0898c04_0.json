{"sha": "d5da5df231ec4cce1e738e2c1d87775ce0898c04", "log": "Fix method scopes Fix bug in HashEntry   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/HashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/HashedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/HashedMap.java,v 1.2 2003/12/01 22:48:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/HashedMap.java,v 1.3 2003/12/02 00:37:11 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * methods exposed.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/01 22:48:59 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/02 00:37:11 $\n  *\n  * @author java util HashMap\n  * @author Stephen Colebourne\n             if (current == null) {\n                 throw new IllegalStateException(\"Iterator remove() can only be called once after next()\");\n             }\n-            Object old = current.getValue();\n-            current.setValue(value);\n-            return old;\n+            return current.setValue(value);\n         }\n     }\n     \n         protected Object key;\n         protected Object value;\n         \n-        HashEntry(HashEntry next, int hashCode, Object key, Object value) {\n+        protected HashEntry(HashEntry next, int hashCode, Object key, Object value) {\n             super();\n             this.next = next;\n             this.hashCode = hashCode;\n             return value;\n         }\n         public Object setValue(Object value) {\n-            Object old = value;\n+            Object old = this.value;\n             this.value = value;\n             return old;\n         }\n         private HashEntry next;\n         private int expectedModCount;\n         \n-        HashIterator(HashedMap map) {\n+        protected HashIterator(HashedMap map) {\n             super();\n             this.map = map;\n             HashEntry[] data = map.data;\n             return (next != null);\n         }\n \n-        HashEntry nextEntry() { \n+        protected HashEntry nextEntry() { \n             if (map.modCount != expectedModCount) {\n                 throw new ConcurrentModificationException();\n             }\n             return newCurrent;\n         }\n \n-        public HashEntry currentEntry() {\n+        protected HashEntry currentEntry() {\n             return current;\n         }\n         ", "timestamp": 1070325431, "metainfo": ""}