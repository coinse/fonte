{"sha": "224a627029a7dc3175ebdb4ab5b81b7f2fff5e07", "log": "fixing bug in FilterListIterator, adding test for it javadoc fixes to FilterListIterator   ", "commit": "\n--- a/src/java/org/apache/commons/collections/FilterListIterator.java\n+++ b/src/java/org/apache/commons/collections/FilterListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/FilterListIterator.java,v 1.1 2002/02/25 23:53:20 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/02/25 23:53:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/FilterListIterator.java,v 1.2 2002/02/26 17:28:55 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/02/26 17:28:55 $\n  *\n  * ====================================================================\n  *\n import java.util.NoSuchElementException;\n \n /** \n- * A proxy {@link ListIterator ListIterator} which takes a {@link Predicate Predicate} instance to filter\n-  * out objects from an underlying {@link Iterator Iterator} instance.\n-  * Only objects for which the\n-  * specified <code>Predicate</code> evaluates to <code>true</code> are\n-  * returned.\n-  *\n-  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n-  * @author Jan Sorensen\n+  * A proxy {@link ListIterator ListIterator} which \n+  * takes a {@link Predicate Predicate} instance to filter\n+  * out objects from an underlying <code>ListIterator</code> \n+  * instance. Only objects for which the specified \n+  * <code>Predicate</code> evaluates to <code>true</code> are\n+  * returned by the iterator.\n+  * \n+  * @version $Revision: 1.2 $ $Date: 2002/02/26 17:28:55 $\n+  * @author Rodney Waldhoff\n   */\n-\n public class FilterListIterator extends ProxyListIterator {\n \n-    //-------------------------------------------------------------------------\n+    // Constructors    \n+    //-------------------------------------------------------------------------\n+    \n     public FilterListIterator() {\n     }\n \n         this.predicate = predicate;\n     }\n \n+    public FilterListIterator(Predicate predicate) {\n+        this.predicate = predicate;\n+    }\n+\n     // ListIterator interface\n     //-------------------------------------------------------------------------\n \n+    /** Not supported. */\n     public void add(Object o) {\n         throw new UnsupportedOperationException(\"FilterListIterator.add(Object) is not supported.\");\n     }\n                 throw new NoSuchElementException();\n             }\n         }\n-        nextObjectSet = false;\n         nextIndex++;\n-        return nextObject;\n+        Object temp = nextObject;\n+        clearNextObject();\n+        return temp;\n     }\n \n     public int nextIndex() {\n                 throw new NoSuchElementException();\n             }\n         }\n-        previousObjectSet = false;\n         nextIndex--;\n-        return previousObject;\n+        Object temp = previousObject;\n+        clearPreviousObject();\n+        return temp;\n     }\n \n     public int previousIndex() {\n         return (nextIndex-1);\n     }\n \n+    /** Not supported. */\n     public void remove() {\n         throw new UnsupportedOperationException(\"FilterListIterator.remove() is not supported.\");\n     }\n \n+    /** Not supported. */\n     public void set(Object o) {\n         throw new UnsupportedOperationException(\"FilterListIterator.set(Object) is not supported.\");\n     }\n         this.predicate = predicate;\n     }\n \n-    /**\n-     * Set {@link #nextObject} to the next object. If there \n-     * are no more objects then return <code>false</code>. \n-     * Otherwise, return <code>true</code>.\n-     */\n+    // Private Methods\n+    //-------------------------------------------------------------------------\n+\n+    private void clearNextObject() {\n+        nextObject = null;\n+        nextObjectSet = false;\n+    }\n+\n     private boolean setNextObject() {\n         ListIterator iterator = getListIterator();\n         Predicate predicate = getPredicate();\n+        \n+        // if previousObjectSet,\n+        // then we've walked back one step in the \n+        // underlying list (due to a hasPrevious() call)\n+        // so skip ahead one matching object\n+        if(previousObjectSet) {\n+            clearPreviousObject();\n+            if(!setNextObject()) {\n+                return false;\n+            }\n+        }\n+\n         while(iterator.hasNext()) {\n             Object object = iterator.next();\n             if(predicate.evaluate(object)) {\n         return false;\n     }\n \n-    /**\n-     * Set {@link #nextObject} to the next object. If there \n-     * are no more objects then return <code>false</code>. \n-     * Otherwise, return <code>true</code>.\n-     */\n+    private void clearPreviousObject() {\n+        previousObject = null;\n+        previousObjectSet = false;\n+    }\n+\n     private boolean setPreviousObject() {\n         ListIterator iterator = getListIterator();\n         Predicate predicate = getPredicate();\n+        \n+        // if nextObjectSet,\n+        // then we've walked back one step in the \n+        // underlying list (due to a hasNext() call)\n+        // so skip ahead one matching object\n+        if(nextObjectSet) {\n+            clearNextObject();\n+            if(!setPreviousObject()) {\n+                return false;\n+            }\n+        }\n+\n         while(iterator.hasPrevious()) {\n             Object object = iterator.previous();\n             if(predicate.evaluate(object)) {\n      */\n     private boolean nextObjectSet = false;   \n \n-\n     /** \n      * The value of the previous (matching) object, when \n      * {@link #previousObjectSet} is true. \n--- a/src/test/org/apache/commons/collections/TestFilterListIterator.java\n+++ b/src/test/org/apache/commons/collections/TestFilterListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestFilterListIterator.java,v 1.1 2002/02/25 23:53:20 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/02/25 23:53:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestFilterListIterator.java,v 1.2 2002/02/26 17:28:55 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/02/26 17:28:55 $\n  *\n  * ====================================================================\n  *\n import java.util.Random;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2002/02/25 23:53:20 $\n+ * @version $Revision: 1.2 $ $Date: 2002/02/26 17:28:55 $\n  * @author Rodney Waldhoff\n  */\n public class TestFilterListIterator extends TestCase {\n             list.add(new Integer(i));\n             if(i%2 == 0) { evens.add(new Integer(i)); }\n             if(i%2 == 1) { odds.add(new Integer(i)); }\n+            if(i%3 == 0) { threes.add(new Integer(i)); }\n             if(i%4 == 0) { fours.add(new Integer(i)); }\n             if(i%6 == 0) { sixes.add(new Integer(i)); }\n         }\n         FilterListIterator filtered = new FilterListIterator(list.listIterator(),truePred);\n         walkLists(list,filtered);\n     }\n-\n+    \n     public void testFalsePredicate() {\n         FilterListIterator filtered = new FilterListIterator(list.listIterator(),falsePred);\n         walkLists(new ArrayList(),filtered);\n         walkLists(sixes,filtered);\n     }\n \n+    public void testNestedSixes3() {        \n+        FilterListIterator filtered = new FilterListIterator(\n+                                        new FilterListIterator(list.listIterator(),threePred),\n+                                        evenPred\n+                                      );\n+        walkLists(sixes,new FilterListIterator(filtered,truePred));\n+    }\n+\n+    public void testNextChangesPrevious() {\n+        {\n+            FilterListIterator filtered = new FilterListIterator(list.listIterator(),threePred);\n+            nextNextPrevious(threes.listIterator(),filtered);\n+        }\n+    \n+        {\n+            FilterListIterator filtered = new FilterListIterator(list.listIterator(),truePred);\n+            nextNextPrevious(list.listIterator(),filtered);\n+        }\n+    }\n+\n+    public void testPreviousChangesNext() {\n+        {\n+            FilterListIterator filtered = new FilterListIterator(list.listIterator(),threePred);\n+            ListIterator expected = threes.listIterator();\n+            walkForward(expected,filtered);\n+            previousPreviousNext(expected,filtered);\n+        }\n+        {\n+            FilterListIterator filtered = new FilterListIterator(list.listIterator(),truePred);\n+            ListIterator expected = list.listIterator();\n+            walkForward(expected,filtered);\n+            previousPreviousNext(expected,filtered);\n+        }\n+    }\n+\n     // Utilities\n \n-    private void walkLists(List list, ListIterator testing) {\n-        ListIterator expected = list.listIterator();\n-\n-        // walk all the way forward\n+    private void walkForward(ListIterator expected, ListIterator testing) {\n         while(expected.hasNext()) {\n             assertEquals(expected.nextIndex(),testing.nextIndex());\n             assertEquals(expected.previousIndex(),testing.previousIndex());\n-            assertTrue(\"a\",testing.hasNext());\n-            assertEquals(\"b\",expected.next(),testing.next());\n-        }\n-        \n-        // walk all the way back\n+            assertTrue(testing.hasNext());\n+            assertEquals(expected.next(),testing.next());\n+        }\n+    }\n+\n+    private void walkBackward(ListIterator expected, ListIterator testing) {\n         while(expected.hasPrevious()) {\n             assertEquals(expected.nextIndex(),testing.nextIndex());\n             assertEquals(expected.previousIndex(),testing.previousIndex());\n-            assertTrue(\"c\",testing.hasPrevious());\n-            assertEquals(\"d\",expected.previous(),testing.previous());\n-        }\n+            assertTrue(testing.hasPrevious());\n+            assertEquals(expected.previous(),testing.previous());\n+        }\n+    }\n+\n+    private void nextNextPrevious(ListIterator expected, ListIterator testing) {\n+        // calls to next() should change the value returned by previous()\n+        // even after previous() has been set by a call to hasPrevious()\n+        assertEquals(expected.next(),testing.next());\n+        assertEquals(expected.hasPrevious(),testing.hasPrevious());\n+        Object expecteda = expected.next();\n+        Object testinga = testing.next();\n+        assertEquals(expecteda,testinga);\n+        Object expectedb = expected.previous();\n+        Object testingb = testing.previous();\n+        assertEquals(expecteda,expectedb);\n+        assertEquals(testinga,testingb);\n+    }\n+\n+    private void previousPreviousNext(ListIterator expected, ListIterator testing) {\n+        // calls to previous() should change the value returned by next()\n+        // even after next() has been set by a call to hasNext()\n+        assertEquals(expected.previous(),testing.previous());\n+        assertEquals(expected.hasNext(),testing.hasNext());\n+        Object expecteda = expected.previous();\n+        Object testinga = testing.previous();\n+        assertEquals(expecteda,testinga);\n+        Object expectedb = expected.next();\n+        Object testingb = testing.next();\n+        assertEquals(expecteda,testingb);\n+        assertEquals(expecteda,expectedb);\n+        assertEquals(testinga,testingb);\n+    }\n+\n+    private void walkLists(List list, ListIterator testing) {\n+        ListIterator expected = list.listIterator();\n+\n+        // walk all the way forward\n+        walkForward(expected,testing);\n+\n+        // walk all the way back\n+        walkBackward(expected,testing);\n \n         // forward,back,foward\n         while(expected.hasNext()) {\n             assertEquals(expected.next(),testing.next());\n         }\n \n+\n         // walk all the way back\n-        while(expected.hasPrevious()) {\n-            assertEquals(expected.nextIndex(),testing.nextIndex());\n-            assertEquals(expected.previousIndex(),testing.previousIndex());\n-            assertTrue(testing.hasPrevious());\n-            assertEquals(expected.previous(),testing.previous());\n-        }\n+        walkBackward(expected,testing);\n \n         for(int i=0;i<list.size();i++) {\n             // walk forward i", "timestamp": 1014744535, "metainfo": ""}