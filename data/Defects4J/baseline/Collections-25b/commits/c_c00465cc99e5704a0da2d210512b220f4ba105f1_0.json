{"sha": "c00465cc99e5704a0da2d210512b220f4ba105f1", "log": "[COLLECTIONS-502] remove generic parameters from static INSTANCE fields.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/BagUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/BagUtils.java\n     /**\n      * An empty unmodifiable bag.\n      */\n-    public static final Bag<Object> EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());\n+    @SuppressWarnings(\"rawtypes\") // OK, empty bag is compatible with any type\n+    public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());\n \n     /**\n      * An empty unmodifiable sorted bag.\n      */\n-    public static final Bag<Object> EMPTY_SORTED_BAG =\n+    @SuppressWarnings(\"rawtypes\") // OK, empty bag is compatible with any type\n+    public static final Bag EMPTY_SORTED_BAG =\n             UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());\n \n     /**\n--- a/src/main/java/org/apache/commons/collections4/ComparatorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/ComparatorUtils.java\n      *\n      * @see ComparableComparator#comparableComparator()\n      */\n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();\n+    @SuppressWarnings(\"rawtypes\")\n+    public static final Comparator NATURAL_COMPARATOR = ComparableComparator.comparableComparator();\n \n     /**\n      * Gets a comparator that uses the natural order of the objects.\n--- a/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n      * WARNING: This constant is binary incompatible with Commons Collections 2.1 and 2.1.1.\n      * Use <code>EmptyIterator.INSTANCE</code> for compatibility with Commons Collections 2.1.1.\n      */\n-    public static final ResettableIterator<Object> EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;\n+    @SuppressWarnings(\"rawtypes\")\n+    public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;\n \n     /**\n      * A list iterator over no elements.\n      * WARNING: This constant is binary incompatible with Commons Collections 2.1 and 2.1.1.\n      * Use <code>EmptyListIterator.INSTANCE</code> for compatibility with Commons Collections 2.1.1.\n      */\n-    public static final ResettableListIterator<Object> EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;\n+    @SuppressWarnings(\"rawtypes\")\n+    public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;\n \n     /**\n      * An ordered iterator over no elements.\n      */\n-    public static final OrderedIterator<Object> EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;\n+    @SuppressWarnings(\"rawtypes\")\n+    public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;\n \n     /**\n      * A map iterator over no elements.\n      */\n-    public static final MapIterator<Object, Object> EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;\n+    @SuppressWarnings(\"rawtypes\")\n+    public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;\n \n     /**\n      * An ordered map iterator over no elements.\n      */\n-    public static final OrderedMapIterator<Object, Object> EMPTY_ORDERED_MAP_ITERATOR =\n-            EmptyOrderedMapIterator.INSTANCE;\n+    @SuppressWarnings(\"rawtypes\")\n+    public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;\n \n     /**\n      * IteratorUtils is not normally instantiated.\n--- a/src/main/java/org/apache/commons/collections4/MapUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/MapUtils.java\n      * An empty unmodifiable sorted map.\n      * This is not provided in the JDK.\n      */\n-    public static final SortedMap<Object, Object> EMPTY_SORTED_MAP =\n+    @SuppressWarnings(\"rawtypes\")\n+    public static final SortedMap EMPTY_SORTED_MAP =\n             UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());\n \n     /**\n--- a/src/main/java/org/apache/commons/collections4/QueueUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/QueueUtils.java\n     /**\n      * An empty unmodifiable queue.\n      */\n-    public static final Queue<Object> EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());\n+    @SuppressWarnings(\"rawtypes\") // OK, empty queue is compatible with any type\n+    public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());\n \n     /**\n      * <code>QueueUtils</code> should not normally be instantiated.\n--- a/src/main/java/org/apache/commons/collections4/SetUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/SetUtils.java\n      * An empty unmodifiable sorted set.\n      * This is not provided in the JDK.\n      */\n-    public static final SortedSet<?> EMPTY_SORTED_SET =\n+    @SuppressWarnings(\"rawtypes\")\n+    public static final SortedSet EMPTY_SORTED_SET =\n             UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());\n \n     /**\n--- a/src/main/java/org/apache/commons/collections4/functors/StringValueTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/StringValueTransformer.java\n     private static final long serialVersionUID = 7511110693171758606L;\n \n     /** Singleton predicate instance */\n-    public static final Transformer<Object, String> INSTANCE = new StringValueTransformer<Object>();\n+    private static final Transformer<Object, String> INSTANCE = new StringValueTransformer<Object>();\n \n     /**\n      * Factory returning the singleton instance.\n--- a/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java\n             fail();\n         } catch (final IllegalStateException ex) {}\n         try {\n-            IteratorUtils.EMPTY_LIST_ITERATOR.set(null);\n-            fail();\n-        } catch (final IllegalStateException ex) {}\n-        try {\n-            IteratorUtils.EMPTY_LIST_ITERATOR.add(null);\n+            IteratorUtils.emptyListIterator().set(null);\n+            fail();\n+        } catch (final IllegalStateException ex) {}\n+        try {\n+            IteratorUtils.emptyListIterator().add(null);\n             fail();\n         } catch (final UnsupportedOperationException ex) {}\n     }\n--- a/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java\n     //------------------------------------------------------------------\n \n     /**\n-     * Test that all Transformer singletones hold singleton pattern in\n+     * Test that all Transformer singletons hold singleton pattern in\n      * serialization/deserialization process.\n      */\n     public void testSingletonPatternInSerialization() {\n                 CloneTransformer.INSTANCE,\n                 ExceptionTransformer.INSTANCE,\n                 NOPTransformer.INSTANCE,\n-                StringValueTransformer.INSTANCE,\n+                StringValueTransformer.stringValueTransformer(),\n         };\n \n         for (final Object original : singletones) {\n-            TestUtils.assertSameAfterSerialization(\n-                    \"Singletone patern broken for \" + original.getClass(),\n-                    original\n-            );\n+            TestUtils.assertSameAfterSerialization(\"Singleton pattern broken for \" + original.getClass(), original);\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java\n         return new ObjectArrayIterator<E>((E[]) testArray);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public ObjectArrayIterator<E> makeArrayIterator() {\n         return new ObjectArrayIterator<E>();\n     }\n--- a/src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java\n \n     public void testPutAllWithIndex() {\n         resetEmpty();\n+        @SuppressWarnings(\"unchecked\")\n         final ListOrderedMap<String, String> lom = (ListOrderedMap<String, String>) map;\n \n         // Create Initial Data\n         assertEquals(\"testInsert2v\", lom.getValue(4));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testPutAllWithIndexBug441() {\n         // see COLLECTIONS-441\n         resetEmpty();\n--- a/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java\n \n     @SuppressWarnings(\"unchecked\")\n     public void testPutWithList() {\n+        @SuppressWarnings(\"rawtypes\")\n         final MultiValueMap<K, V> test = MultiValueMap.multiValueMap(new HashMap<K, Collection>(), ArrayList.class);\n         assertEquals(\"a\", test.put((K) \"A\", \"a\"));\n         assertEquals(\"b\", test.put((K) \"A\", \"b\"));\n \n     @SuppressWarnings(\"unchecked\")\n     public void testPutWithSet() {\n+        @SuppressWarnings(\"rawtypes\")\n         final MultiValueMap<K, V> test = MultiValueMap.multiValueMap(new HashMap<K, HashSet>(), HashSet.class);\n         assertEquals(\"a\", test.put((K) \"A\", \"a\"));\n         assertEquals(\"b\", test.put((K) \"A\", \"b\"));\n--- a/src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java\n     }\n \n     //-----------------------------------------------------------------------\n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public void testTransformedMap() {\n         final Object[] els = new Object[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n ", "timestamp": 1384984419, "metainfo": ""}