{"sha": "acf5ebf5a07d7089af1895d7edf9b39087918fea", "log": "Improve speed of countMatches() from Peter KoBek   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.25 2003/01/11 01:07:13 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.26 2003/01/20 01:29:30 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  * A set of {@link Collection} related utility methods.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.25 $ $Date: 2003/01/11 01:07:13 $\n+ * @version $Revision: 1.26 $ $Date: 2003/01/20 01:29:30 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n  * @author Stephen Colebourne\n  * @author Steve Downey\n  * @author <a href=\"herve.quiroz@esil.univ-mrs.fr\">Herve Quiroz</a>\n- * @author BluePhelix@web.de (Peter)\n+ * @author Peter KoBek\n  */\n public class CollectionUtils {\n \n      * @throws NullPointerException if the input collection is null\n      */\n     public static int countMatches(Collection inputCollection, Predicate predicate) {\n-        return select(inputCollection, predicate).size();\n+        int count = 0;\n+        if (inputCollection != null && predicate != null) {\n+            for (Iterator it = inputCollection.iterator(); it.hasNext();) {\n+                Object item = it.next();\n+                if (predicate.evaluate(item)) {\n+                    count++;\n+                }\n+            }\n+        }\n+        return count;\n     }\n \n     /** ", "timestamp": 1043026170, "metainfo": ""}