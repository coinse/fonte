{"sha": "ee245946f730b5cc1661ac58ee42895ffa96aae8", "log": "Relax tests for bug 35258  ", "commit": "\n--- a/src/test/org/apache/commons/collections/list/AbstractTestList.java\n+++ b/src/test/org/apache/commons/collections/list/AbstractTestList.java\n     public void testListListIteratorPreviousRemoveNext() {\n         if (isRemoveSupported() == false) return;\n         resetFull();\n+        if (collection.size() < 4) return;\n         ListIterator it = getList().listIterator();\n         Object zero = it.next();\n         Object one = it.next();\n         Object two = it.next();\n         Object two2 = it.previous();\n         Object one2 = it.previous();\n-        assertSame(one, one2);\n-        assertSame(two, two2);\n-        assertSame(zero, getList().get(0));\n-        assertSame(one, getList().get(1));\n-        assertSame(two, getList().get(2));\n+        assertEquals(one, one2);\n+        assertEquals(two, two2);\n+        assertEquals(zero, getList().get(0));\n+        assertEquals(one, getList().get(1));\n+        assertEquals(two, getList().get(2));\n         \n         it.remove(); // removed element at index 1 (one)\n-        assertSame(zero, getList().get(0));\n-        assertSame(two, getList().get(1));\n+        assertEquals(zero, getList().get(0));\n+        assertEquals(two, getList().get(1));\n         Object two3 = it.next();  // do next after remove\n-        assertSame(two, two3);\n+        assertEquals(two, two3);\n         assertEquals(collection.size() > 2, it.hasNext());\n         assertEquals(true, it.hasPrevious());\n     }\n     public void testListListIteratorPreviousRemovePrevious() {\n         if (isRemoveSupported() == false) return;\n         resetFull();\n+        if (collection.size() < 4) return;\n         ListIterator it = getList().listIterator();\n         Object zero = it.next();\n         Object one = it.next();\n         Object two = it.next();\n         Object two2 = it.previous();\n         Object one2 = it.previous();\n-        assertSame(one, one2);\n-        assertSame(two, two2);\n-        assertSame(zero, getList().get(0));\n-        assertSame(one, getList().get(1));\n-        assertSame(two, getList().get(2));\n+        assertEquals(one, one2);\n+        assertEquals(two, two2);\n+        assertEquals(zero, getList().get(0));\n+        assertEquals(one, getList().get(1));\n+        assertEquals(two, getList().get(2));\n         \n         it.remove(); // removed element at index 1 (one)\n-        assertSame(zero, getList().get(0));\n-        assertSame(two, getList().get(1));\n+        assertEquals(zero, getList().get(0));\n+        assertEquals(two, getList().get(1));\n         Object zero3 = it.previous();  // do previous after remove\n-        assertSame(zero, zero3);\n+        assertEquals(zero, zero3);\n         assertEquals(false, it.hasPrevious());\n         assertEquals(collection.size() > 2, it.hasNext());\n     }\n     public void testListListIteratorNextRemoveNext() {\n         if (isRemoveSupported() == false) return;\n         resetFull();\n+        if (collection.size() < 4) return;\n         ListIterator it = getList().listIterator();\n         Object zero = it.next();\n         Object one = it.next();\n         Object two = it.next();\n-        assertSame(zero, getList().get(0));\n-        assertSame(one, getList().get(1));\n-        assertSame(two, getList().get(2));\n+        assertEquals(zero, getList().get(0));\n+        assertEquals(one, getList().get(1));\n+        assertEquals(two, getList().get(2));\n         Object three = getList().get(3);\n         \n         it.remove(); // removed element at index 2 (two)\n-        assertSame(zero, getList().get(0));\n-        assertSame(one, getList().get(1));\n+        assertEquals(zero, getList().get(0));\n+        assertEquals(one, getList().get(1));\n         Object three2 = it.next();  // do next after remove\n-        assertSame(three, three2);\n+        assertEquals(three, three2);\n         assertEquals(collection.size() > 3, it.hasNext());\n         assertEquals(true, it.hasPrevious());\n     }\n     public void testListListIteratorNextRemovePrevious() {\n         if (isRemoveSupported() == false) return;\n         resetFull();\n+        if (collection.size() < 4) return;\n         ListIterator it = getList().listIterator();\n         Object zero = it.next();\n         Object one = it.next();\n         Object two = it.next();\n-        assertSame(zero, getList().get(0));\n-        assertSame(one, getList().get(1));\n-        assertSame(two, getList().get(2));\n+        assertEquals(zero, getList().get(0));\n+        assertEquals(one, getList().get(1));\n+        assertEquals(two, getList().get(2));\n         \n         it.remove(); // removed element at index 2 (two)\n-        assertSame(zero, getList().get(0));\n-        assertSame(one, getList().get(1));\n+        assertEquals(zero, getList().get(0));\n+        assertEquals(one, getList().get(1));\n         Object one2 = it.previous();  // do previous after remove\n-        assertSame(one, one2);\n+        assertEquals(one, one2);\n         assertEquals(true, it.hasNext());\n         assertEquals(true, it.hasPrevious());\n     }", "timestamp": 1122246100, "metainfo": ""}