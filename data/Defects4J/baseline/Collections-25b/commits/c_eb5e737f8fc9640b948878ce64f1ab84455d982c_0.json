{"sha": "eb5e737f8fc9640b948878ce64f1ab84455d982c", "log": "Add javadoc, simplify IterableUtils.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/FluentIterable.java\n+++ b/src/main/java/org/apache/commons/collections4/FluentIterable.java\n import java.util.List;\n \n /**\n- * A FluentIterable provides a powerful yet simple API for manipulating Iterable instances in a fluent manner.\n+ * A FluentIterable provides a powerful yet simple API for manipulating\n+ * Iterable instances in a fluent manner.\n  * <p>\n- * A FluentIterable can be created either from an Iterable or from a set of elements.\n- * The following types of methods are provided:\n+ * A FluentIterable can be created either from an Iterable or from a set\n+ * of elements. The following types of methods are provided:\n  * <ul>\n- *   <li>fluent methods which return a new {@code FluentIterable} instance\n- *   <li>conversion methods which copy the FluentIterable's contents into a new collection or array (e.g. toList())\n- *   <li>utility methods which answer questions about the FluentIterable's contents (e.g. size(), anyMatch(Predicate))\n+ *   <li>fluent methods which return a new {@code FluentIterable} instance,\n+ *       providing a view of the original iterable (e.g. filter(Predicate));\n+ *   <li>conversion methods which copy the FluentIterable's contents into a\n+ *       new collection or array (e.g. toList());\n+ *   <li>utility methods which answer questions about the FluentIterable's\n+ *       contents (e.g. size(), anyMatch(Predicate)).\n  *   <li> \n  * </ul>\n  * <p>\n- * The following example outputs the first 3 even numbers in the range [1, 10] into a list:\n+ * The following example outputs the first 3 even numbers in the range [1, 10]\n+ * into a list:\n  * <pre>\n+ * List&lt;String&gt; result =\n  *   FluentIterable\n  *       .of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  *       .filter(new Predicate<Integer>() {\n  *       .limit(3)\n  *       .toList();\n  * </pre>\n+ * The resulting list will contain the following elements:\n+ * <pre>[2, 4, 6]</pre>\n  *\n  * @param <E>  the element type\n  * @since 4.1\n  */\n public class FluentIterable<E> implements Iterable<E> {\n \n+    /** A reference to the wrapped iterable. */\n     private final Iterable<E> iterable;\n \n     // Static factory methods\n     // ----------------------------------------------------------------------\n \n-    public static <T> FluentIterable<T> of(T... elements) {\n+    /**\n+     * Creates a new FluentIterable from the provided elements.\n+     * <p>\n+     * The returned iterable's iterator does not support {@code remove()}.\n+     *\n+     * @param <T>  the element type\n+     * @param elements  the elements to be contained in the FluentIterable\n+     * @return a new FluentIterable containing the provided elements\n+     */\n+    public static <T> FluentIterable<T> of(final T... elements) {\n         return of(Arrays.asList(elements));\n     }\n-    \n-    public static <T> FluentIterable<T> of(Iterable<T> iterable) {\n+\n+    /**\n+     * Construct a new FluentIterable from the provided iterable. If the\n+     * iterable is already an instance of FluentIterable, the instance\n+     * will be returned instead.\n+     * <p>\n+     * The returned iterable's iterator supports {@code remove()} when the\n+     * corresponding input iterator supports it.\n+     *\n+     * @param <T>  the element type\n+     * @param iterable  the iterable to wrap into a FluentIterable\n+     * @return a new FluentIterable wrapping the provided iterable\n+     */\n+    public static <T> FluentIterable<T> of(final Iterable<T> iterable) {\n         if (iterable == null) {\n             throw new NullPointerException(\"Iterable must not be null\");\n         }\n     // Constructor\n     // ----------------------------------------------------------------------\n \n+    /**\n+     * Package-private constructor, used by IterableUtils.\n+     */\n+    FluentIterable() {\n+        this.iterable = this;\n+    }\n+\n+    /**\n+     * Create a new FluentIterable by wrapping the provided iterable.\n+     * @param iterable  the iterable to wrap\n+     */\n     private FluentIterable(final Iterable<E> iterable) {\n         this.iterable = iterable;\n     }\n     // fluent construction methods\n     // ----------------------------------------------------------------------\n \n+    /**\n+     * Returns a new FluentIterable whose iterator will first traverse\n+     * the elements of the current iterable, followed by the provided\n+     * elements.\n+     *\n+     * @param elements  the elements to append to the iterable\n+     * @return a new iterable, combining this iterable with the elements\n+     */\n     public FluentIterable<E> append(final E... elements) {\n         return append(Arrays.asList(elements));\n     }\n \n+    /**\n+     * Returns a new FluentIterable whose iterator will first traverse\n+     * the elements of the current iterable, followed by the elements\n+     * of the provided iterable.\n+     * <p>\n+     * A <code>null</code> iterable will be treated as an empty iterable.\n+     *\n+     * @param other  the other iterable to combine, may be null\n+     * @return a new iterable, combining this iterable with other\n+     */\n     public FluentIterable<E> append(final Iterable<E> other) {\n         return of(IterableUtils.chainedIterable(iterable, other));\n     }\n-    \n+\n+    /**\n+     * This method fully traverses an iterator of this iterable and returns\n+     * a new iterable with the same contents, but without any reference\n+     * to the originating iterables and/or iterators.\n+     * <p>\n+     * Calling this method is equivalent to:\n+     * <pre>\n+     *   FluentIterable<E> someIterable = ...;\n+     *   FluentIterable.of(someIterable.toList());\n+     * </pre>\n+     *\n+     * @return a new iterable with the same contents as this iterable\n+     */\n     public FluentIterable<E> eval() {\n         return of(toList());\n     }\n \n+    /**\n+     * Returns a new FluentIterable whose iterator will only return\n+     * elements from this iterable matching the provided predicate.\n+     *\n+     * @param predicate  the predicate used to filter elements\n+     * @return a new iterable, providing a filtered view of this iterable\n+     * @throws NullPointerException if predicate is null\n+     */\n     public FluentIterable<E> filter(final Predicate<E> predicate) {\n         return of(IterableUtils.filteredIterable(iterable, predicate));\n     }\n \n+    /**\n+     * Returns a new FluentIterable whose iterator will return at most\n+     * the provided maximum number of elements from this iterable.\n+     *\n+     * @param maxSize  the maximum number of elements\n+     * @return a new iterable, providing a bounded view of this iterable\n+     * @throws IllegalArgumentException if maxSize is negative\n+     */\n     public FluentIterable<E> limit(final int maxSize) {\n         return of(IterableUtils.boundedIterable(iterable, maxSize));\n     }\n \n+    /**\n+     * Returns a new FluentIterable whose iterator will loop infinitely\n+     * over the elements from this iterable.\n+     *\n+     * @return a new iterable, providing a looping view of this iterable\n+     */\n     public FluentIterable<E> loop() {\n         return of(IterableUtils.loopingIterable(iterable));\n     }\n \n+    /**\n+     * Returns a new FluentIterable whose iterator will skip the first\n+     * N elements from this iterable.\n+     *\n+     * @param elementsToSkip  the number of elements to skip\n+     * @return a new iterable, providing a view of this iterable by skipping\n+     *   the first N elements\n+     * @throws IllegalArgumentException if elementsToSkip is negative\n+     */\n     public FluentIterable<E> skip(int elementsToSkip) {\n         return of(IterableUtils.skippingIterable(iterable, elementsToSkip));\n     }\n \n+    /**\n+     * Returns a new FluentIterable whose iterator will return all elements\n+     * of this iterable transformed by the provided transformer.\n+     *\n+     * @param transformer  the transformer applied to each element\n+     * @return a new iterable, providing a transformed view of this iterable\n+     * @throws NullPointerException if transformer is null\n+     */\n     public <O> FluentIterable<O> transform(final Transformer<? super E, ? extends O> transformer) {\n         return of(IterableUtils.transformedIterable(iterable, transformer));\n     }\n \n+    /**\n+     * Returns a new FluentIterable whose iterator will return a unique view\n+     * of this iterable.\n+     *\n+     * @return a new iterable, providing a unique view of this iterable\n+     */\n     public FluentIterable<E> unique() {\n         return of(IterableUtils.uniqueIterable(iterable));\n     }\n     // convenience methods\n     // ----------------------------------------------------------------------\n \n+    /** {@inheritDoc} */\n     public Iterator<E> iterator() {\n         return iterable.iterator();\n     }\n \n+    /**\n+     * Returns an Enumeration that will enumerate all elements contained\n+     * in this iterable.\n+     *\n+     * @return an Enumeration over the elements of this iterable\n+     */\n     public Enumeration<E> asEnumeration() {\n         return IteratorUtils.asEnumeration(iterator());\n     }\n \n+    /**\n+     * Checks if all elements contained in this iterable are matching the\n+     * provided predicate.\n+     * <p>\n+     * A <code>null</code> or empty iterable returns true.\n+     *\n+     * @param predicate  the predicate to use, may not be null\n+     * @return true if all elements contained in this iterable match the predicate,\n+     *   false otherwise\n+     * @throws NullPointerException if predicate is null\n+     */\n     public boolean allMatch(final Predicate<? super E> predicate) {\n         return IterableUtils.matchesAll(iterable, predicate);\n     }\n \n+    /**\n+     * Checks if this iterable contains any element matching the provided predicate.\n+     * <p>\n+     * A <code>null</code> or empty iterable returns false.\n+     *\n+     * @param predicate  the predicate to use, may not be null\n+     * @return true if at least one element contained in this iterable matches the predicate,\n+     *   false otherwise\n+     * @throws NullPointerException if predicate is null\n+     */\n     public boolean anyMatch(final Predicate<? super E> predicate) {\n         return IterableUtils.matchesAny(iterable, predicate);\n     }\n \n+    /**\n+     * Checks if this iterable is empty.\n+     *\n+     * @return true if this iterable does not contain any elements, false otherwise\n+     */\n     public boolean isEmpty() {\n         return IterableUtils.isEmpty(iterable);\n     }\n \n+    /**\n+     * Checks if the object is contained in this iterable.\n+     * \n+     * @param object  the object to check\n+     * @return true if the object is contained in this iterable, false otherwise\n+     */\n     public boolean contains(final Object object) {\n         return IterableUtils.contains(iterable, object);\n     }\n \n-    public E get(int position) {\n+    /**\n+     * Returns the element at the provided position in this iterable.\n+     * In order to return the element, an iterator needs to be traversed\n+     * up to the requested position.\n+     *\n+     * @param position  the position of the element to return\n+     * @return the element\n+     * @throws IndexOutOfBoundsException if the provided position is outside the\n+     *   valid range of this iterable: [0, size)\n+     */\n+    public E get(final int position) {\n         return IterableUtils.get(iterable, position);\n     }\n \n+    /**\n+     * Returns the number of elements that are contained in this iterable.\n+     * In order to determine the size, an iterator needs to be traversed.\n+     *\n+     * @return the size of this iterable\n+     */\n     public int size() {\n         return IterableUtils.size(iterable);\n     }\n \n+    /**\n+     * Traverses an iterator of this iterable and adds all elements\n+     * to the provided collection.\n+     *\n+     * @param collection  the collection to add the elements\n+     * @throws NullPointerException if collection is null\n+     */\n     public void copyInto(final Collection<? super E> collection) {\n         if (collection == null) {\n             throw new NullPointerException(\"Collection must not be null\");\n         }\n     }\n \n+    /**\n+     * Returns an array containing all elements of this iterable by traversing\n+     * its iterator.\n+     *\n+     * @param arrayClass  the class of array to create \n+     * @return an array of the iterable contents\n+     * @throws ClassCastException if arrayClass is invalid\n+     */\n     public E[] toArray(final Class<E> arrayClass) {\n         return IteratorUtils.toArray(iterator(), arrayClass);\n     }\n \n+    /**\n+     * Returns a list containing all elements of this iterable by traversing\n+     * its iterator.\n+     * <p>\n+     * The returned list is mutable.\n+     *\n+     * @return a list of the iterable contents\n+     */\n     public List<E> toList() {\n         return IteratorUtils.toList(iterator());\n     }\n \n+    /** {@inheritDoc} */\n     @Override\n     public String toString() {\n         return IterableUtils.toString(iterable);\n--- a/src/main/java/org/apache/commons/collections4/IterableUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IterableUtils.java\n      * @return a new iterable, combining the provided iterables\n      */\n     public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables) {\n-        return new AbstractIterable<E>() {\n+        return new FluentIterable<E>() {\n             @Override\n             public Iterator<E> iterator() {\n                 return new LazyIteratorChain<E>() {\n             throw new NullPointerException(\"predicate must not be null.\");\n         }\n \n-        return new AbstractIterable<E>() {\n+        return new FluentIterable<E>() {\n             @Override\n             public Iterator<E> iterator() {\n                 return IteratorUtils.filteredIterator(emptyIteratorIfNull(iterable), predicate);\n             throw new IllegalArgumentException(\"maxSize parameter must not be negative.\");\n         }\n \n-        return new AbstractIterable<E>() {\n+        return new FluentIterable<E>() {\n             @Override\n             public Iterator<E> iterator() {\n                 return IteratorUtils.boundedIterator(emptyIteratorIfNull(iterable), maxSize);\n      * @return a view of the iterable, providing an infinite loop over its elements\n      */\n     public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable) {\n-        return new AbstractIterable<E>() {\n+        return new FluentIterable<E>() {\n             @Override\n             public Iterator<E> iterator() {\n                 return new LazyIteratorChain<E>() {\n                     @Override\n                     protected Iterator<? extends E> nextIterator(int count) {\n                         if (iterable != null) {\n-                            if (isEmpty(iterable)) {\n+                            if (IterableUtils.isEmpty(iterable)) {\n                                 return null;\n                             } else {\n                                 return iterable.iterator();\n             throw new IllegalArgumentException(\"elementsToSkip parameter must not be negative.\");\n         }\n \n-        return new AbstractIterable<E>() {\n+        return new FluentIterable<E>() {\n             @Override\n             public Iterator<E> iterator() {\n                 return IteratorUtils.skippingIterator(emptyIteratorIfNull(iterable), elementsToSkip);\n             throw new NullPointerException(\"transformer must not be null.\");\n         }\n \n-        return new AbstractIterable<O>() {\n+        return new FluentIterable<O>() {\n             @Override\n             public Iterator<O> iterator() {\n                 return IteratorUtils.transformedIterator(emptyIteratorIfNull(iterable), transformer);\n      * @return a unique view of the specified iterable\n      */\n     public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable) {\n-        return new AbstractIterable<E>() {\n+        return new FluentIterable<E>() {\n             @Override\n             public Iterator<E> iterator() {\n                 return new UniqueFilterIterator<E>(emptyIteratorIfNull(iterable));\n                                       transformer, delimiter, prefix, suffix);\n     }\n \n-    // Inner classes\n-    // ----------------------------------------------------------------------\n-\n-    private static abstract class AbstractIterable<E> implements Iterable<E> {\n-        @Override\n-        public String toString() {\n-            return IterableUtils.toString(this);\n-        }\n-    }\n }", "timestamp": 1432673169, "metainfo": ""}