{"sha": "560c0963099f2ea8ee8f311e7d934bff972e48ab", "log": "Added documentation that clearly indicates that these classes will not work reliably on some architectures.  PR:9206   ", "commit": "\n--- a/src/java/org/apache/commons/collections/FastArrayList.java\n+++ b/src/java/org/apache/commons/collections/FastArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastArrayList.java,v 1.5 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastArrayList.java,v 1.6 2002/08/10 00:49:45 pjack Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/10 00:49:45 $\n  *\n  * ====================================================================\n  *\n  * <code>java.util.ArrayList</code> directly (with no synchronization), for\n  * maximum performance.</p>\n  *\n+ * <P><strong>NOTE</strong>: <I>This class is not cross-platform.\n+ * Using it may cause unexpected failures on some architectures.</I>\n+ * It suffers from the same problems as the double-checked locking idiom.  \n+ * In particular, the instruction that clones the internal collection and the \n+ * instruction that sets the internal reference to the clone can be executed \n+ * or perceived out-of-order.  This means that any read operation might fail \n+ * unexpectedly, as it may be reading the state of the internal collection\n+ * before the internal collection is fully formed.\n+ * For more information on the double-checked locking idiom, see the\n+ * <A Href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">\n+ * Double-Checked Locking Idiom Is Broken Declartion</A>.</P>\n+ *\n  * @since 1.0\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.5 $ $Date: 2002/06/12 03:59:15 $\n+ * @version $Revision: 1.6 $ $Date: 2002/08/10 00:49:45 $\n  */\n \n public class FastArrayList extends ArrayList {\n--- a/src/java/org/apache/commons/collections/FastHashMap.java\n+++ b/src/java/org/apache/commons/collections/FastHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastHashMap.java,v 1.6 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastHashMap.java,v 1.7 2002/08/10 00:49:45 pjack Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/08/10 00:49:45 $\n  *\n  * ====================================================================\n  *\n  * <code>java.util.HashMap</code> directly (with no synchronization), for\n  * maximum performance.</p>\n  *\n+ * <P><strong>NOTE</strong>: <I>This class is not cross-platform.  \n+ * Using it may cause unexpected failures on some architectures.</I>\n+ * It suffers from the same problems as the double-checked locking idiom.  \n+ * In particular, the instruction that clones the internal collection and the \n+ * instruction that sets the internal reference to the clone can be executed \n+ * or perceived out-of-order.  This means that any read operation might fail \n+ * unexpectedly, as it may be reading the state of the internal collection\n+ * before the internal collection is fully formed.\n+ * For more information on the double-checked locking idiom, see the\n+ * <A Href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">\n+ * Double-Checked Locking Idiom Is Broken Declartion</A>.</P>\n+ *\n  * @since 1.0\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.6 $ $Date: 2002/06/12 03:59:15 $\n+ * @version $Revision: 1.7 $ $Date: 2002/08/10 00:49:45 $\n  */\n \n public class FastHashMap extends HashMap {\n--- a/src/java/org/apache/commons/collections/FastTreeMap.java\n+++ b/src/java/org/apache/commons/collections/FastTreeMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastTreeMap.java,v 1.6 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastTreeMap.java,v 1.7 2002/08/10 00:49:45 pjack Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/08/10 00:49:45 $\n  *\n  * ====================================================================\n  *\n  * <code>java.util.TreeMap</code> directly (with no synchronization), for\n  * maximum performance.</p>\n  *\n+ * <P><strong>NOTE</strong>: <I>This class is not cross-platform.  \n+ * Using it may cause unexpected failures on some architectures.</I>\n+ * It suffers from the same problems as the double-checked locking idiom.  \n+ * In particular, the instruction that clones the internal collection and the \n+ * instruction that sets the internal reference to the clone can be executed \n+ * or perceived out-of-order.  This means that any read operation might fail \n+ * unexpectedly, as it may be reading the state of the internal collection\n+ * before the internal collection is fully formed.\n+ * For more information on the double-checked locking idiom, see the\n+ * <A Href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">\n+ * Double-Checked Locking Idiom Is Broken Declartion</A>.</P>\n+ *\n  * @since 1.0\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.6 $ $Date: 2002/06/12 03:59:15 $\n+ * @version $Revision: 1.7 $ $Date: 2002/08/10 00:49:45 $\n  */\n \n public class FastTreeMap extends TreeMap {", "timestamp": 1028940585, "metainfo": ""}