{"sha": "e7ae9283baaef264903865e8538dbfd8f98cdb1b", "log": "[COLLECTIONS-404] Make Snake an inner class of SequencesComparator.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/comparators/sequence/SequencesComparator.java\n+++ b/src/main/java/org/apache/commons/collections4/comparators/sequence/SequencesComparator.java\n     }\n \n     /**\n+     * Get the {@link EditScript} object.\n+     * <p>\n+     * It is guaranteed that the objects embedded in the {@link InsertCommand\n+     * insert commands} come from the second sequence and that the objects\n+     * embedded in either the {@link DeleteCommand delete commands} or\n+     * {@link KeepCommand keep commands} come from the first sequence. This can\n+     * be important if subclassing is used for some elements in the first\n+     * sequence and the <code>equals</code> method is specialized.\n+     * \n+     * @return the edit script resulting from the comparison of the two\n+     *         sequences\n+     */\n+    public EditScript<T> getScript() {\n+        final EditScript<T> script = new EditScript<T>();\n+        buildScript(0, sequence1.size(), 0, sequence2.size(), script);\n+        return script;\n+    }\n+\n+    /**\n      * Build a snake.\n      *\n      * @param start  the value of the start of the snake\n     }\n \n     /**\n-     * Get the {@link EditScript} object.\n-     * <p>\n-     * It is guaranteed that the objects embedded in the {@link InsertCommand\n-     * insert commands} come from the second sequence and that the objects\n-     * embedded in either the {@link DeleteCommand delete commands} or\n-     * {@link KeepCommand keep commands} come from the first sequence. This can\n-     * be important if subclassing is used for some elements in the first\n-     * sequence and the <code>equals</code> method is specialized.\n-     * \n-     * @return the edit script resulting from the comparison of the two\n-     *         sequences\n-     */\n-    public EditScript<T> getScript() {\n-        final EditScript<T> script = new EditScript<T>();\n-        buildScript(0, sequence1.size(), 0, sequence2.size(), script);\n-        return script;\n-    }\n-\n+     * This class is a simple placeholder to hold the end part of a path\n+     * under construction in a {@link SequencesComparator SequencesComparator}.\n+     */\n+    private static class Snake {\n+\n+        /** Start index. */\n+        private final int start;\n+\n+        /** End index. */\n+        private final int end;\n+\n+        /** Diagonal number. */\n+        private final int diag;\n+\n+        /**\n+         * Simple constructor. Creates a new instance of Snake with specified indices.\n+         *\n+         * @param start  start index of the snake\n+         * @param end  end index of the snake\n+         * @param diag  diagonal number\n+         */ \n+        public Snake(final int start, final int end, final int diag) {\n+            this.start = start;\n+            this.end   = end;\n+            this.diag  = diag;\n+        }\n+\n+        /**\n+         * Get the start index of the snake.\n+         *\n+         * @return start index of the snake\n+         */\n+        public int getStart() {\n+            return start;\n+        }\n+\n+        /**\n+         * Get the end index of the snake.\n+         *\n+         * @return end index of the snake\n+         */\n+        public int getEnd() {\n+            return end;\n+        }\n+\n+        /**\n+         * Get the diagonal number of the snake.\n+         *\n+         * @return diagonal number of the snake\n+         */  \n+        public int getDiag() {\n+            return diag;\n+        }\n+    }\n }", "timestamp": 1367175536, "metainfo": ""}