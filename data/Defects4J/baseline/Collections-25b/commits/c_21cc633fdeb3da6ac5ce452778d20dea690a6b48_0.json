{"sha": "21cc633fdeb3da6ac5ce452778d20dea690a6b48", "log": "Rename range to view   ", "commit": "\n--- a/src/java/org/apache/commons/collections/observed/standard/StandardModificationEvent.java\n+++ b/src/java/org/apache/commons/collections/observed/standard/StandardModificationEvent.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardModificationEvent.java,v 1.6 2003/09/21 16:00:28 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardModificationEvent.java,v 1.7 2003/09/21 20:00:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * All objects used are the real objects from the method calls, not clones.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2003/09/21 16:00:28 $\n+ * @version $Revision: 1.7 $ $Date: 2003/09/21 20:00:29 $\n  * \n  * @author Stephen Colebourne\n  */\n     protected final int repeat;\n     /** The result of the method call */\n     protected final Object previous;\n-    /** The range that the event came from, null if none */\n-    protected final ObservableCollection range;\n-    /** The offset of the range that the event came from, -1 if none */\n-    protected final int rangeOffset;\n+    /** The view that the event came from, null if none */\n+    protected final ObservableCollection view;\n+    /** The offset index within the main collection of the view, -1 if none */\n+    protected final int viewOffset;\n \n     // Constructor\n     //-----------------------------------------------------------------------\n      * @param object  the value that changed\n      * @param repeat  the number of repeats\n      * @param previous  the previous value being removed/replaced\n-     * @param range  the range collection, null if no range\n-     * @param rangeOffset  the offset of the range, -1 if unknown\n+     * @param view  the view collection, null if event from main collection\n+     * @param viewOffset  the offset within the main collection of the view, -1 if unknown\n      */\n     public StandardModificationEvent(\n         final ObservableCollection obsCollection,\n         final Object object,\n         final int repeat,\n         final Object previous,\n-        final ObservableCollection range,\n-        final int rangeOffset) {\n+        final ObservableCollection view,\n+        final int viewOffset) {\n \n         super(obsCollection, handler, type);\n         this.preSize = preSize;\n         this.object = object;\n         this.repeat = repeat;\n         this.previous = previous;\n-        this.range = range;\n-        this.rangeOffset = rangeOffset;\n+        this.view = view;\n+        this.viewOffset = viewOffset;\n     }\n \n     // Change info\n         return preSize;\n     }\n \n-    // Range info\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Gets the range, <code>null</code> if none.\n-     * \n-     * @return the range\n-     */\n-    public ObservableCollection getRange() {\n-        return range;\n-    }\n-\n-    /**\n-     * Checks whether the event originated from a range.\n-     * \n-     * @return the range\n-     */\n-    public boolean isRange() {\n-        return (range != null);\n-    }\n-\n-    /**\n-     * Gets the range offset, <code>-1</code> if no range or unknown offset.\n-     * \n-     * @return the range offset\n-     */\n-    public int getRangeOffset() {\n-        return rangeOffset;\n+    // View info\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the view, <code>null</code> if none.\n+     * <p>\n+     * A view is a subSet, headSet, tailSet, subList and so on.\n+     * \n+     * @return the view\n+     */\n+    public ObservableCollection getView() {\n+        return view;\n+    }\n+\n+    /**\n+     * Checks whether the event originated from a view.\n+     * \n+     * @return true if event came from a view\n+     */\n+    public boolean isView() {\n+        return (view != null);\n+    }\n+\n+    /**\n+     * Gets the view offset, <code>-1</code> if no view or unknown offset.\n+     * <p>\n+     * This refers to the index of the start of the view within the main collection.\n+     * \n+     * @return the view offset\n+     */\n+    public int getViewOffset() {\n+        return viewOffset;\n     }\n \n     // Event type\n--- a/src/java/org/apache/commons/collections/observed/standard/StandardModificationHandler.java\n+++ b/src/java/org/apache/commons/collections/observed/standard/StandardModificationHandler.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardModificationHandler.java,v 1.5 2003/09/21 16:00:28 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardModificationHandler.java,v 1.6 2003/09/21 20:00:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * modification events.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/09/21 16:00:28 $\n+ * @version $Revision: 1.6 $ $Date: 2003/09/21 20:00:29 $\n  * \n  * @author Stephen Colebourne\n  */\n      * @param object  the object that will be added/removed/set, the method param or derived\n      * @param repeat  the number of repeats of the add/remove, the method param or derived\n      * @param previous  the previous value that will be removed/replaced, must exist in coll\n-     * @param range  the range collection, null if no range\n-     * @param rangeOffset  the offset of the range, -1 if unknown\n+     * @param view  the view collection that the change was actioned on, null if no view\n+     * @param viewOffset  the offset of the subList view, -1 if unknown\n      * @return true to call the decorated collection\n      */\n     protected boolean preEvent(\n             int type, int index, Object object,\n-            int repeat, Object previous, ObservableCollection range, int rangeOffset) {\n+            int repeat, Object previous, ObservableCollection view, int viewOffset) {\n \n         preSize = getObservedCollection().size();\n-        return firePreEvent(type, index, object, repeat, previous, range, rangeOffset);\n+        return firePreEvent(type, index, object, repeat, previous, view, viewOffset);\n     }\n \n     /**\n      * @param object  the object that will be added/removed/set, the method param or derived\n      * @param repeat  the number of repeats of the add/remove, the method param or derived\n      * @param previous  the previous value that will be removed/replaced, must exist in coll\n-     * @param range  the range collection, null if no range\n-     * @param rangeOffset  the offset of the range, -1 if unknown\n+     * @param view  the view collection that the change was actioned on, null if no view\n+     * @param viewOffset  the offset of the subList view, -1 if unknown\n      * @return true to call the decorated collection\n      */\n     protected boolean firePreEvent(\n             int type, int index, Object object, int repeat,\n-            Object previous, ObservableCollection range, int rangeOffset) {\n+            Object previous, ObservableCollection view, int viewOffset) {\n \n         if ((preMask & type) > 0) {\n             StandardPreModificationEvent event = null;\n                         if (event == null) {\n                             event = new StandardPreModificationEvent(\n                                 getObservedCollection(), this, type, preSize, index, object,\n-                                repeat, previous, range, rangeOffset);\n+                                repeat, previous, view, viewOffset);\n                         }\n                         holder.listener.modificationOccurring(event);\n                     }\n      * @param modified  true if the method succeeded in changing the collection\n      * @param type  the event type to send\n      * @param index  the index where the change starts, the method param or derived\n-     * @param object  the object that will be added/removed/set, the method param or derived\n+     * @param object  the object that was added/removed/set, the method param or derived\n      * @param repeat  the number of repeats of the add/remove, the method param or derived\n-     * @param previous  the previous value that will be removed/replaced, must exist in coll\n-     * @param range  the range collection, null if no range\n-     * @param rangeOffset  the offset of the range, -1 if unknown\n+     * @param previous  the previous value that was removed/replace, must have existed in coll\n+     * @param view  the view collection that the change was actioned on, null if no view\n+     * @param viewOffset  the offset of the subList view, -1 if unknown\n      */\n     protected void postEvent(\n             boolean modified, int type, int index, Object object,\n-            int repeat, Object previous, ObservableCollection range, int rangeOffset) {\n+            int repeat, Object previous, ObservableCollection view, int viewOffset) {\n \n         if (modified) {\n-            firePostEvent(type, index, object, repeat, previous, range, rangeOffset);\n+            firePostEvent(type, index, object, repeat, previous, view, viewOffset);\n         }\n     }\n     \n      * \n      * @param type  the event type to send\n      * @param index  the index where the change starts, the method param or derived\n-     * @param object  the object that will be added/removed/set, the method param or derived\n+     * @param object  the object that was added/removed/set, the method param or derived\n      * @param repeat  the number of repeats of the add/remove, the method param or derived\n-     * @param previous  the previous value that will be removed/replaced, must exist in coll\n-     * @param range  the range collection, null if no range\n-     * @param rangeOffset  the offset of the range, -1 if unknown\n+     * @param previous  the previous value that was removed/replace, must have existed in coll\n+     * @param view  the view collection that the change was actioned on, null if no view\n+     * @param viewOffset  the offset of the subList view, -1 if unknown\n      */\n     protected void firePostEvent(\n             int type, int index, Object object, int repeat,\n-            Object previous, ObservableCollection range, int rangeOffset) {\n+            Object previous, ObservableCollection view, int viewOffset) {\n \n         if ((postMask & type) > 0) {\n             StandardPostModificationEvent event = null;\n                         if (event == null) {\n                             event = new StandardPostModificationEvent(\n                                 getObservedCollection(), this, type, preSize, index,\n-                                object, repeat, previous, range, rangeOffset);\n+                                object, repeat, previous, view, viewOffset);\n                         }\n                         holder.listener.modificationOccurred(event);\n                     }\n--- a/src/java/org/apache/commons/collections/observed/standard/StandardPostModificationEvent.java\n+++ b/src/java/org/apache/commons/collections/observed/standard/StandardPostModificationEvent.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardPostModificationEvent.java,v 1.4 2003/09/21 16:00:28 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardPostModificationEvent.java,v 1.5 2003/09/21 20:00:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * All objects used are the real objects from the method calls, not clones.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/09/21 16:00:28 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/21 20:00:29 $\n  * \n  * @author Stephen Colebourne\n  */\n      * @param object  the value that changed\n      * @param repeat  the number of repeats\n      * @param previous  the previous value being removed/replaced\n-     * @param range  the range collection, null if no range\n-     * @param rangeOffset  the offset of the range, -1 if unknown\n+     * @param view  the view collection, null if event from main collection\n+     * @param viewOffset  the offset within the main collection of the view, -1 if unknown\n      */\n     public StandardPostModificationEvent(\n         final ObservableCollection obsCollection,\n         final Object object,\n         final int repeat,\n         final Object previous,\n-        final ObservableCollection range,\n-        final int rangeOffset) {\n+        final ObservableCollection view,\n+        final int viewOffset) {\n \n         super(obsCollection, handler, type, preSize, index,\n-            object, repeat, previous, range, rangeOffset);\n+            object, repeat, previous, view, viewOffset);\n         postSize = collection.size();\n     }\n \n--- a/src/java/org/apache/commons/collections/observed/standard/StandardPreModificationEvent.java\n+++ b/src/java/org/apache/commons/collections/observed/standard/StandardPreModificationEvent.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardPreModificationEvent.java,v 1.4 2003/09/21 16:00:28 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardPreModificationEvent.java,v 1.5 2003/09/21 20:00:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * All objects used are the real objects from the method calls, not clones.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/09/21 16:00:28 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/21 20:00:29 $\n  * \n  * @author Stephen Colebourne\n  */\n      * @param object  the value that changed\n      * @param repeat  the number of repeats\n      * @param previous  the previous value being removed/replaced\n+     * @param view  the view collection, null if event from main collection\n+     * @param viewOffset  the offset within the main collection of the view, -1 if unknown\n      */\n     public StandardPreModificationEvent(\n         final ObservableCollection obsCollection,\n         final Object object,\n         final int repeat,\n         final Object previous,\n-        final ObservableCollection range,\n-        final int rangeOffset) {\n+        final ObservableCollection view,\n+        final int viewOffset) {\n \n         super(obsCollection, handler, type, preSize, index,\n-            object, repeat, previous, range, rangeOffset);\n+            object, repeat, previous, view, viewOffset);\n     }\n \n }", "timestamp": 1064174429, "metainfo": ""}