{"sha": "6965d41836b7c55c708a885a6cdf94106047c070", "log": "Applying my patch from COLLECTIONS-221 - making the CompositeMap, CompositeSet and CompositeCollection serializable. The only difference from the patch is that the creation of the obj files in TestCompositeMap is commented out  ", "commit": "\n--- a/src/java/org/apache/commons/collections/collection/CompositeCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/CompositeCollection.java\n  */\n package org.apache.commons.collections.collection;\n \n+import java.io.Serializable;\n import java.lang.reflect.Array;\n import java.util.ArrayList;\n import java.util.Arrays;\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n  */\n-public class CompositeCollection implements Collection {\n+public class CompositeCollection implements Collection, Serializable {\n     \n     /** CollectionMutator to handle changes to the collection */\n     protected CollectionMutator mutator;\n     /**\n      * Pluggable strategy to handle changes to the composite.\n      */\n-    public interface CollectionMutator {\n+    public interface CollectionMutator extends Serializable {\n         \n         /**\n          * Called when an object is to be added to the composite.\n--- a/src/java/org/apache/commons/collections/map/CompositeMap.java\n+++ b/src/java/org/apache/commons/collections/map/CompositeMap.java\n  *  limitations under the License.\n  */\n package org.apache.commons.collections.map;\n+\n+import java.io.Serializable;\n \n import java.util.Collection;\n import java.util.Iterator;\n  *\n  * @author Brian McCallister\n  */\n-public class CompositeMap implements Map {\n+public class CompositeMap implements Map, Serializable {\n \n     /** Array of all maps in the composite */\n     private Map[] composite;\n      * mutators in a CompositeMap, as well as providing a hook for\n      * callbacks on key collisions.\n      */\n-    public static interface MapMutator {\n+    public static interface MapMutator extends Serializable {\n         /**\n          * Called when adding a new Composited Map results in a\n          * key collision.\n--- a/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java\n         assertTrue(c.contains(\"1\"));\n         assertEquals(2, c.size());\n     }\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.3\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"/tmp/CompositeCollection.emptyCollection.version3.3.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"/tmp/CompositeCollection.fullCollection.version3.3.obj\");\n+//    }\n+\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/EmptyMapMutator.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Map;\n+import java.util.Collection;\n+\n+/**\n+ * This class is used in TestCompositeMap. When testing serialization, \n+ * the class has to be separate of TestCompositeMap, else the test \n+ * class also has to be serialized. \n+ */\n+class EmptyMapMutator implements CompositeMap.MapMutator {\n+    public void resolveCollision(CompositeMap composite,\n+    Map existing,\n+    Map added,\n+    Collection intersect) {\n+        // Do nothing\n+    }\n+    \n+    public Object put(CompositeMap map, Map[] composited, Object key, Object value) {\n+        return composited[0].put(key, value);\n+    }\n+    \n+    public void putAll(CompositeMap map, Map[] composited, Map t) {\n+        composited[0].putAll(t);\n+    }\n+    \n+}\n--- a/src/test/org/apache/commons/collections/map/TestCompositeMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestCompositeMap.java\n     public Map makeEmptyMap() {\n         CompositeMap map = new CompositeMap();\n         map.addComposited(new HashMap());\n-        map.setMutator(new CompositeMap.MapMutator() {\n-            public void resolveCollision(CompositeMap composite,\n-            Map existing,\n-            Map added,\n-            Collection intersect) {\n-                // Do nothing\n-            }\n-            \n-            public Object put(CompositeMap map, Map[] composited, Object key, Object value) {\n-                return composited[0].put(key, value);\n-            }\n-            \n-            public void putAll(CompositeMap map, Map[] composited, Map t) {\n-                composited[0].putAll(t);\n-            }\n-            \n-        });\n+        map.setMutator( new EmptyMapMutator() );\n         return map;\n     }\n     \n         map.putAll(null);\n         assertTrue(pass);\n     }\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.3\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) map, \"/tmp/CompositeMap.emptyCollection.version3.3.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) map, \"/tmp/CompositeMap.fullCollection.version3.3.obj\");\n+//    }\n+\n }\n-\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/EmptySetMutator.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Collection;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.collection.CompositeCollection;\n+\n+/**\n+ * This class is used in TestCompositeSet. When testing serialization, \n+ * the class has to be separate of TestCompositeSet, else the test \n+ * class also has to be serialized. \n+ */\n+class EmptySetMutator implements CompositeSet.SetMutator {\n+    private Set contained;\n+\n+    public EmptySetMutator(Set set) {\n+        this.contained = set;\n+    }\n+\n+    public void resolveCollision(CompositeSet comp, Set existing, \n+        Set added, Collection intersects) {\n+        throw new IllegalArgumentException();\n+    }\n+    \n+    public boolean add(CompositeCollection composite, \n+        Collection[] collections, Object obj) {\n+        return contained.add(obj);\n+    }\n+    \n+    public boolean addAll(CompositeCollection composite, \n+        Collection[] collections, Collection coll) {\n+        return contained.addAll(coll);\n+    }\n+    \n+    public boolean remove(CompositeCollection composite, \n+        Collection[] collections, Object obj) {\n+        return contained.remove(obj);\n+    }\n+}\n--- a/src/test/org/apache/commons/collections/set/TestCompositeSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestCompositeSet.java\n     public Set makeEmptySet() {\n         final HashSet contained = new HashSet();\n         CompositeSet set = new CompositeSet(contained);\n-        set.setMutator(new CompositeSet.SetMutator() {\n-            public void resolveCollision(CompositeSet comp, Set existing, \n-                Set added, Collection intersects) {\n-                throw new IllegalArgumentException();\n-            }\n-            \n-            public boolean add(CompositeCollection composite, \n-                Collection[] collections, Object obj) {\n-                return contained.add(obj);\n-            }\n-            \n-            public boolean addAll(CompositeCollection composite, \n-                Collection[] collections, Collection coll) {\n-                return contained.addAll(coll);\n-            }\n-            \n-            public boolean remove(CompositeCollection composite, \n-                Collection[] collections, Object obj) {\n-                return contained.remove(obj);\n-            }\n-        });\n+        set.setMutator( new EmptySetMutator(contained) );\n         return set;\n     }\n     \n             // expected\n         }\n     }\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.3\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"/tmp/CompositeSet.emptyCollection.version3.3.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"/tmp/CompositeSet.fullCollection.version3.3.obj\");\n+//    }\n+\n }", "timestamp": 1210661615, "metainfo": ""}