{"sha": "90154dba4b967aa5c71282ec5850b49b823a24e9", "log": "Reduce scope of AbstractInputCheckedMapDecorator for v3.1   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/AbstractInputCheckedMapDecorator.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractInputCheckedMapDecorator.java\n  * the map. By overriding these methods, the input can be validated or manipulated.\n  * In addition to the main map methods, the entrySet is also affected, which is\n  * the hardest part of writing map implementations.\n+ * <p>\n+ * This class is package-scoped, and may be withdrawn or replaced in future\n+ * versions of Commons Collections.\n  *\n  * @since Commons Collections 3.1\n- * @version $Revision: 1.1 $ $Date: 2004/05/03 21:48:49 $\n+ * @version $Revision: 1.2 $ $Date: 2004/05/21 22:01:04 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class AbstractInputCheckedMapDecorator\n+abstract class AbstractInputCheckedMapDecorator\n         extends AbstractMapDecorator {\n \n     /**\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Hook method called when a key is being added to the map using\n-     * <code>put</code> or <code>putAll</code>.\n-     * <p>\n-     * An implementation may validate the key and throw an exception\n-     * or it may transform the key into another object.\n-     * The key may already exist in the map.\n-     * <p>\n-     * This implementation returns the input key.\n-     * \n-     * @param key  the key to check\n-     * @throws UnsupportedOperationException if the map may not be changed by put/putAll\n-     * @throws IllegalArgumentException if the specified key is invalid\n-     * @throws ClassCastException if the class of the specified key is invalid\n-     * @throws NullPointerException if the specified key is null and nulls are invalid\n-     */\n-    protected Object checkPutKey(Object key) {\n-        return key;\n-    }\n-\n-    /**\n-     * Hook method called when a new value is being added to the map using\n-     * <code>put</code> or <code>putAll</code>.\n-     * <p>\n-     * An implementation may validate the value and throw an exception\n-     * or it may transform the value into another object.\n-     * <p>\n-     * This implementation returns the input value.\n-     * \n-     * @param value  the value to check\n-     * @throws UnsupportedOperationException if the map may not be changed by put/putAll\n-     * @throws IllegalArgumentException if the specified value is invalid\n-     * @throws ClassCastException if the class of the specified value is invalid\n-     * @throws NullPointerException if the specified value is null and nulls are invalid\n-     */\n-    protected Object checkPutValue(Object value) {\n-        return value;\n-    }\n-\n-    /**\n      * Hook method called when a value is being set using <code>setValue</code>.\n      * <p>\n      * An implementation may validate the value and throw an exception\n      * @throws ClassCastException if the class of the specified value is invalid\n      * @throws NullPointerException if the specified value is null and nulls are invalid\n      */\n-    protected Object checkSetValue(Object value) {\n-        return value;\n-    }\n+    protected abstract Object checkSetValue(Object value);\n \n     /**\n      * Hook method called to determine if <code>checkSetValue</code> has any effect.\n         return true;\n     }\n \n-    /**\n-     * Checks each element in the specified map, creating a new map.\n-     * <p>\n-     * This method is used by <code>putAll</code> to check all the elements\n-     * before adding them to the map.\n-     * <p>\n-     * This implementation builds a <code>LinkedMap</code> to preserve the order\n-     * of the input map.\n-     * \n-     * @param map  the map to transform\n-     * @throws the transformed object\n-     */\n-    protected Map checkMap(Map map) {\n-        Map result = new LinkedMap(map.size());\n-        for (Iterator it = map.entrySet().iterator(); it.hasNext(); ) {\n-            Map.Entry entry = (Map.Entry) it.next();\n-            result.put(checkPutKey(entry.getKey()), checkPutValue(entry.getValue()));\n-        }\n-        return result;\n-    }\n-\n     //-----------------------------------------------------------------------\n-    public Object put(Object key, Object value) {\n-        key = checkPutKey(key);\n-        value = checkPutValue(value);\n-        return getMap().put(key, value);\n-    }\n-\n-    public void putAll(Map mapToCopy) {\n-        if (mapToCopy.size() == 0) {\n-            return;\n-        } else {\n-            mapToCopy = checkMap(mapToCopy);\n-            getMap().putAll(mapToCopy);\n-        }\n-    }\n-\n     public Set entrySet() {\n         if (isSetValueChecking()) {\n             return new EntrySet(map.entrySet(), this);\n--- a/src/java/org/apache/commons/collections/map/PredicatedMap.java\n+++ b/src/java/org/apache/commons/collections/map/PredicatedMap.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.12 $ $Date: 2004/05/21 21:38:49 $\n+ * @version $Revision: 1.13 $ $Date: 2004/05/21 22:01:04 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n     }\n \n     //-----------------------------------------------------------------------\n-    // The validate method exists for backwards compatability - in an ideal\n-    // world, it wouldn't and the superclass methods checkPutKey/checkPutValue\n-    // would be overridden instead\n     /**\n      * Validates a key value pair.\n      * \n--- a/src/java/org/apache/commons/collections/map/TransformedMap.java\n+++ b/src/java/org/apache/commons/collections/map/TransformedMap.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.9 $ $Date: 2004/05/03 21:48:49 $\n+ * @version $Revision: 1.10 $ $Date: 2004/05/21 22:01:04 $\n  * \n  * @author Stephen Colebourne\n  */\n     }\n \n     //-----------------------------------------------------------------------\n-    // The transformKey/transformValue/transformMap methods exist for backwards\n-    // compatability - in an ideal world, they wouldn't and the superclass\n-    // methods checkPutKey/checkPutValue would be overridden instead\n-\n     /**\n      * Transforms a key.\n      * <p>", "timestamp": 1085176963, "metainfo": ""}