{"sha": "76d2beab1ab337c3344e3bad056c4840b3200a71", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified in r738956.  Tabs also cleaned up in r814044.    ", "commit": "\n--- a/src/java/org/apache/commons/collections/comparators/NullComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/NullComparator.java\n import java.io.Serializable;\n import java.util.Comparator;\n \n+import org.apache.commons.collections.ComparatorUtils;\n+\n /**\n  * A Comparator that will compare nulls to be either lower or higher than\n  * other objects.\n  *\n  * @author Michael A. Smith\n  */\n-public class NullComparator implements Comparator, Serializable {\n+public class NullComparator<E> implements Comparator<E>, Serializable {\n \n     /** Serialization version. */\n     private static final long serialVersionUID = -5820772575483504339L;\n     /**\n      *  The comparator to use when comparing two non-<code>null</code> objects.\n      **/\n-    private Comparator nonNullComparator;\n+    private Comparator<E> nonNullComparator;\n \n     /**\n      *  Specifies whether a <code>null</code> are compared as higher than\n      *  non-<code>null</code> objects, the {@link ComparableComparator} is\n      *  used.\n      **/\n+    @SuppressWarnings(\"unchecked\")\n     public NullComparator() {\n-        this(ComparableComparator.getInstance(), true);\n+        this(ComparatorUtils.NATURAL_COMPARATOR, true);\n     }\n \n     /**\n      *  @exception NullPointerException if <code>nonNullComparator</code> is\n      *  <code>null</code>\n      **/\n-    public NullComparator(Comparator nonNullComparator) {\n+    public NullComparator(Comparator<E> nonNullComparator) {\n         this(nonNullComparator, true);\n     }\n \n      *  that <code>null</code> should be compared as lower than a\n      *  non-<code>null</code> object.\n      **/\n+    @SuppressWarnings(\"unchecked\")\n     public NullComparator(boolean nullsAreHigh) {\n-        this(ComparableComparator.getInstance(), nullsAreHigh);\n+        this(ComparatorUtils.NATURAL_COMPARATOR, nullsAreHigh);\n     }\n     \n     /**\n      *  @exception NullPointerException if <code>nonNullComparator</code> is\n      *  <code>null</code>\n      **/\n-    public NullComparator(Comparator nonNullComparator, boolean nullsAreHigh) {\n+    public NullComparator(Comparator<E> nonNullComparator, boolean nullsAreHigh) {\n         this.nonNullComparator = nonNullComparator;\n         this.nullsAreHigh = nullsAreHigh;\n         \n-        if(nonNullComparator == null) {\n+        if (nonNullComparator == null) {\n             throw new NullPointerException(\"null nonNullComparator\");\n         }\n     }\n      *  \"higher\" than (greater than, after, etc.) <code>o2</code>; or\n      *  <code>0</code> if <code>o1</code> and <code>o2</code> are equal.\n      **/\n-    public int compare(Object o1, Object o2) {\n+    public int compare(E o1, E o2) {\n         if(o1 == o2) { return 0; }\n         if(o1 == null) { return (this.nullsAreHigh ? 1 : -1); }\n         if(o2 == null) { return (this.nullsAreHigh ? -1 : 1); }\n         if(obj == this) { return true; }\n         if(!obj.getClass().equals(this.getClass())) { return false; }\n \n-        NullComparator other = (NullComparator)obj;\n-    \n+        NullComparator<?> other = (NullComparator<?>) obj;\n+\n         return ((this.nullsAreHigh == other.nullsAreHigh) &&\n                 (this.nonNullComparator.equals(other.nonNullComparator)));\n     }\n--- a/src/java/org/apache/commons/collections/iterators/ArrayIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ArrayIterator.java\n  * @author Neil O'Toole\n  * @author Stephen Colebourne\n  */\n-public class ArrayIterator implements ResettableIterator {\n+public class ArrayIterator<E> implements ResettableIterator<E> {\n \n     /** The array to iterate over */    \n     protected Object array;\n      * @throws NoSuchElementException if all the elements in the array\n      *  have already been returned\n      */\n-    public Object next() {\n+    @SuppressWarnings(\"unchecked\")\n+    public E next() {\n         if (hasNext() == false) {\n             throw new NoSuchElementException();\n         }\n-        return Array.get(array, index++);\n+        return (E) Array.get(array, index++);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n  */\n-public class ArrayListIterator extends ArrayIterator\n-        implements ListIterator, ResettableListIterator {\n+public class ArrayListIterator<E> extends ArrayIterator<E>\n+        implements ListIterator<E>, ResettableListIterator<E> {\n \n     /**\n      * Holds the index of the last item returned by a call to <code>next()</code>\n      * @return the previous element\n      * @throws NoSuchElementException if there is no previous element\n      */\n-    public Object previous() {\n+    @SuppressWarnings(\"unchecked\")\n+    public E previous() {\n         if (hasPrevious() == false) {\n             throw new NoSuchElementException();\n         }\n         this.lastItemIndex = --this.index;\n-        return Array.get(this.array, this.index);\n+        return (E) Array.get(this.array, this.index);\n     }\n \n     /**\n      * @return the next element\n      * @throws NoSuchElementException if there is no next element\n      */\n-    public Object next() {\n+    @SuppressWarnings(\"unchecked\")\n+    public E next() {\n         if (hasNext() == false) {\n             throw new NoSuchElementException();\n         }\n         this.lastItemIndex = this.index;\n-        return Array.get(this.array, this.index++);\n+        return (E) Array.get(this.array, this.index++);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n  */\n-public class ObjectArrayListIterator extends ObjectArrayIterator\n-        implements ListIterator, ResettableListIterator {\n+public class ObjectArrayListIterator<E> extends ObjectArrayIterator<E>\n+        implements ListIterator<E>, ResettableListIterator<E> {\n \n     /**\n      * Holds the index of the last item returned by a call to <code>next()</code> \n      * @param array the array to iterate over\n      * @throws NullPointerException if <code>array</code> is <code>null</code>\n      */\n-    public ObjectArrayListIterator(Object[] array) {\n+    public ObjectArrayListIterator(E[] array) {\n         super(array);\n     }\n \n      * @throws NullPointerException if <code>array</code> is <code>null</code>\n      * @throws IndexOutOfBoundsException if the start index is out of bounds\n      */\n-    public ObjectArrayListIterator(Object[] array, int start) {\n+    public ObjectArrayListIterator(E[] array, int start) {\n         super(array, start);\n     }\n     \n      * @throws IllegalArgumentException if end index is before the start\n      * @throws NullPointerException if <code>array</code> is <code>null</code>\n      */\n-    public ObjectArrayListIterator(Object[] array, int start, int end) {\n+    public ObjectArrayListIterator(E[] array, int start, int end) {\n         super(array, start, end);\n     }\n \n      * @return the previous element\n      * @throws NoSuchElementException if there is no previous element\n      */\n-    public Object previous() {\n+    public E previous() {\n         if (hasPrevious() == false) {\n             throw new NoSuchElementException();\n         }\n      * @return the next element\n      * @throws NoSuchElementException if there is no next element\n      */\n-    public Object next() {\n+    public E next() {\n         if (hasNext() == false) {\n             throw new NoSuchElementException();\n         }\n      * @param obj  the object to add\n      * @throws UnsupportedOperationException always thrown.\n      */\n-    public void add(Object obj) {\n+    public void add(E obj) {\n         throw new UnsupportedOperationException(\"add() method is not supported\");\n     }\n \n      * @throws IllegalStateException if next() has not yet been called.\n      * @throws ClassCastException if the object type is unsuitable for the array\n      */\n-    public void set(Object obj) {\n+    public void set(E obj) {\n         if (this.lastItemIndex == -1) {\n             throw new IllegalStateException(\"must call next() or previous() before a call to set()\");\n         }\n--- a/src/java/org/apache/commons/collections/iterators/ObjectGraphIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ObjectGraphIterator.java\n  *\n  * @author Stephen Colebourne\n  */\n-public class ObjectGraphIterator implements Iterator {\n+public class ObjectGraphIterator<E> implements Iterator<E> {\n \n     /** The stack of iterators */\n-    protected final ArrayStack stack = new ArrayStack(8);\n+    protected final ArrayStack<Iterator<? extends E>> stack = new ArrayStack<Iterator<? extends E>>(8);\n     /** The root object in the tree */\n-    protected Object root;\n+    protected E root;\n     /** The transformer to use */\n-    protected Transformer transformer;\n+    protected Transformer<? super E, ? extends E> transformer;\n \n     /** Whether there is another element in the iteration */\n-    protected boolean hasNext = false;    \n+    protected boolean hasNext = false;\n     /** The current iterator */\n-    protected Iterator currentIterator;\n+    protected Iterator<? extends E> currentIterator;\n     /** The current value */\n-    protected Object currentValue;\n+    protected E currentValue;\n     /** The last used iterator, needed for remove() */\n-    protected Iterator lastUsedIterator;\n+    protected Iterator<? extends E> lastUsedIterator;\n \n     //-----------------------------------------------------------------------\n     /**\n      * @param root  the root object, null will result in an empty iterator\n      * @param transformer  the transformer to use, null will use a no effect transformer\n      */\n-    public ObjectGraphIterator(Object root, Transformer transformer) {\n+    @SuppressWarnings(\"unchecked\")\n+    public ObjectGraphIterator(E root, Transformer<? super E, ? extends E> transformer) {\n         super();\n         if (root instanceof Iterator) {\n-            this.currentIterator = (Iterator) root;\n+            this.currentIterator = (Iterator<? extends E>) root;\n         } else {\n             this.root = root;\n         }\n      * \n      * @param rootIterator  the root iterator, null will result in an empty iterator\n      */\n-    public ObjectGraphIterator(Iterator rootIterator) {\n+    public ObjectGraphIterator(Iterator<? extends E> rootIterator) {\n         super();\n         this.currentIterator = rootIterator;\n         this.transformer = null;\n      * \n      * @param value  the value to start from\n      */\n-    protected void findNext(Object value) {\n+    @SuppressWarnings(\"unchecked\")\n+    protected void findNext(E value) {\n         if (value instanceof Iterator) {\n             // need to examine this iterator\n-            findNextByIterator((Iterator) value);\n+            findNextByIterator((Iterator<? extends E>) value);\n         } else {\n             // next value found\n             currentValue = value;\n      * \n      * @param iterator  the iterator to start from\n      */\n-    protected void findNextByIterator(Iterator iterator) {\n+    protected void findNextByIterator(Iterator<? extends E> iterator) {\n         if (iterator != currentIterator) {\n             // recurse a level\n             if (currentIterator != null) {\n         }\n         \n         while (currentIterator.hasNext() && hasNext == false) {\n-            Object next = currentIterator.next();\n+            E next = currentIterator.next();\n             if (transformer != null) {\n                 next = transformer.transform(next);\n             }\n             // all iterators exhausted\n         } else {\n             // current iterator exhausted, go up a level\n-            currentIterator = (Iterator) stack.pop();\n+            currentIterator = stack.pop();\n             findNextByIterator(currentIterator);\n         }\n     }\n      * @return the next element from the iteration\n      * @throws NoSuchElementException if all the Iterators are exhausted\n      */\n-    public Object next() {\n+    public E next() {\n         updateCurrentIterator();\n         if (hasNext == false) {\n             throw new NoSuchElementException(\"No more elements in the iteration\");\n         }\n         lastUsedIterator = currentIterator;\n-        Object result = currentValue;\n+        E result = currentValue;\n         currentValue = null;\n         hasNext = false;\n         return result;\n--- a/src/java/org/apache/commons/collections/iterators/SingletonIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/SingletonIterator.java\n  * @author Stephen Colebourne\n  * @author Rodney Waldhoff\n  */\n-public class SingletonIterator\n-        implements Iterator, ResettableIterator {\n+public class SingletonIterator<E>\n+        implements Iterator<E>, ResettableIterator<E> {\n \n     /** Whether remove is allowed */\n     private final boolean removeAllowed;\n     /** Has the element been removed */\n     private boolean removed = false;\n     /** The object */\n-    private Object object;\n+    private E object;\n \n     /**\n      * Constructs a new <code>SingletonIterator</code> where <code>remove</code>\n      *\n      * @param object  the single object to return from the iterator\n      */\n-    public SingletonIterator(Object object) {\n+    public SingletonIterator(E object) {\n         this(object, true);\n     }\n \n      * @param removeAllowed  true if remove is allowed\n      * @since Commons Collections 3.1\n      */\n-    public SingletonIterator(Object object, boolean removeAllowed) {\n+    public SingletonIterator(E object, boolean removeAllowed) {\n         super();\n         this.object = object;\n         this.removeAllowed = removeAllowed;\n      * @throws NoSuchElementException if the single object has already \n      *    been returned\n      */\n-    public Object next() {\n+    public E next() {\n         if (!beforeFirst || removed) {\n             throw new NoSuchElementException();\n         }\n--- a/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java\n  *\n  * @author Stephen Colebourne\n  */\n-public abstract class AbstractTestComparator extends AbstractTestObject {\n+public abstract class AbstractTestComparator<T> extends AbstractTestObject {\n \n     /**\n      * JUnit constructor.\n     }\n \n     //-----------------------------------------------------------------------\n-    /**\n-     * Implement this method to return the comparator to test.\n-     * \n-     * @return the comparator to test\n-     */\n-    public abstract Comparator makeComparator();\n     \n     /**\n      * Implement this method to return a list of sorted objects.\n      * \n      * @return sorted objects\n      */\n-    public abstract List getComparableObjectsOrdered();\n+    public abstract List<T> getComparableObjectsOrdered();\n \n     //-----------------------------------------------------------------------\n     /**\n      * \n      * @return a full iterator\n      */\n-    public Object makeObject() {\n-        return makeComparator();\n-    }\n+    public abstract Comparator<T> makeObject();\n \n     /**\n      * Overrides superclass to block tests.\n     /**\n      * Reverse the list.\n      */\n-    protected void reverseObjects(List list) {\n+    protected void reverseObjects(List<?> list) {\n         Collections.reverse(list);\n     }\n \n     /**\n      * Randomize the list.\n      */\n-    protected void randomizeObjects(List list) {\n+    protected void randomizeObjects(List<?> list) {\n         Collections.shuffle(list);\n     }\n \n     /**\n      * Sort the list.\n      */\n-    protected void sortObjects(List list, Comparator comparator) {\n-        Collections.sort(list,comparator);\n-\n+    protected void sortObjects(List<T> list, Comparator<? super T> comparator) {\n+        Collections.sort(list, comparator);\n     }\n \n     //-----------------------------------------------------------------------\n      * Test sorting an empty list\n      */\n     public void testEmptyListSort() {\n-        List list = new LinkedList();\n-        sortObjects(list, makeComparator());\n-\n-        List list2 = new LinkedList();\n-        \n-        assertTrue(\"Comparator cannot sort empty lists\",\n-                   list2.equals(list));\n+        List<T> list = new LinkedList<T>();\n+        sortObjects(list, makeObject());\n+\n+        List<T> list2 = new LinkedList<T>();\n+\n+        assertTrue(\"Comparator cannot sort empty lists\", list2.equals(list));\n     }\n \n     /**\n      * Test sorting a reversed list.\n      */\n     public void testReverseListSort() {\n-        Comparator comparator = makeComparator();\n-\n-        List randomList = getComparableObjectsOrdered();\n+        Comparator<T> comparator = makeObject();\n+\n+        List<T> randomList = getComparableObjectsOrdered();\n         reverseObjects(randomList);\n-        sortObjects(randomList,comparator);\n-\n-        List orderedList = getComparableObjectsOrdered();\n+        sortObjects(randomList, comparator);\n+\n+        List<T> orderedList = getComparableObjectsOrdered();\n \n         assertTrue(\"Comparator did not reorder the List correctly\",\n                    orderedList.equals(randomList));\n-\n     }\n \n     /**\n      * Test sorting a random list.\n      */\n     public void testRandomListSort() {\n-        Comparator comparator = makeComparator();\n-\n-        List randomList = getComparableObjectsOrdered();\n+        Comparator<T> comparator = makeObject();\n+\n+        List<T> randomList = getComparableObjectsOrdered();\n         randomizeObjects(randomList);\n         sortObjects(randomList,comparator);\n \n-        List orderedList = getComparableObjectsOrdered();\n+        List<T> orderedList = getComparableObjectsOrdered();\n \n         /* debug \n         Iterator i = randomList.iterator();\n      * Nearly all Comparators should be Serializable.\n      */\n     public void testComparatorIsSerializable() {\n-        Comparator comparator = makeComparator();\n+        Comparator<T> comparator = makeObject();\n         assertTrue(\"This comparator should be Serializable.\",\n                    comparator instanceof Serializable);\n     }\n      * Compare the current serialized form of the Comparator\n      * against the canonical version in SVN.\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public void testComparatorCompatibility() throws IOException, ClassNotFoundException {\n-        if(!skipSerializedCanonicalTests()) {\n-            Comparator comparator = null;\n+        if (!skipSerializedCanonicalTests()) {\n+            Comparator<T> comparator = null;\n     \n             // test to make sure the canonical form has been preserved\n             try {\n-                comparator = (Comparator) readExternalFormFromDisk(getCanonicalComparatorName(makeComparator()));\n+                comparator = (Comparator<T>) readExternalFormFromDisk(getCanonicalComparatorName(makeObject()));\n             } catch (FileNotFoundException exception) {\n     \n                 boolean autoCreateSerialized = false;\n     \n-                if(autoCreateSerialized) {\n-                    comparator = makeComparator();\n+                if (autoCreateSerialized) {\n+                      comparator = makeObject();\n                     String fileName = getCanonicalComparatorName(comparator);\n                     writeExternalFormToDisk((Serializable) comparator, fileName);\n-                    fail(\"Serialized form could not be found.  A serialized version \" +\n-                         \"has now been written (and should be added to SVN): \" + fileName);\n+                    fail(\"Serialized form could not be found.  A serialized version \"\n+                            + \"has now been written (and should be added to CVS): \" + fileName);\n                 } else {\n-                    fail(\"The Serialized form could be located to test serialization \" +\n-                        \"compatibility: \" + exception.getMessage());\n+                    fail(\"The Serialized form could be located to test serialization \"\n+                            + \"compatibility: \" + exception.getMessage());\n                 }\n             }\n     \n             \n             // make sure the canonical form produces the ordering we currently\n             // expect\n-            List randomList = getComparableObjectsOrdered();\n+            List<T> randomList = getComparableObjectsOrdered();\n             reverseObjects(randomList);\n-            sortObjects(randomList,comparator);\n-    \n-            List orderedList = getComparableObjectsOrdered();\n+            sortObjects(randomList, comparator);\n+    \n+            List<T> orderedList = getComparableObjectsOrdered();\n     \n             assertTrue(\"Comparator did not reorder the List correctly\",\n                        orderedList.equals(randomList));\n--- a/src/test/org/apache/commons/collections/comparators/TestNullComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestNullComparator.java\n  *\n  * @author Michael A. Smith\n  */\n-public abstract class TestNullComparator extends AbstractTestComparator {\n+public abstract class TestNullComparator extends AbstractTestComparator<Integer> {\n \n     public TestNullComparator(String testName) {\n         super(testName);\n             super(testName);\n         }\n \n-    public Comparator makeComparator() {\n-            return new NullComparator();\n+        public Comparator<Integer> makeObject() {\n+            return new NullComparator<Integer>();\n         }\n-        \n-    public List getComparableObjectsOrdered() {\n-        List list = new LinkedList();\n+\n+        public List<Integer> getComparableObjectsOrdered() {\n+            List<Integer> list = new LinkedList<Integer>();\n             list.add(new Integer(1));\n             list.add(new Integer(2));\n             list.add(new Integer(3));\n      *  Test the NullComparator with nulls low using the comparable comparator\n      **/\n     public static class TestNullComparator2 extends TestNullComparator {\n-        \n+\n         public TestNullComparator2(String testName) {\n             super(testName);\n         }\n-        \n-        public Comparator makeComparator() {\n-            return new NullComparator(false);\n+\n+        public Comparator<Integer> makeObject() {\n+            return new NullComparator<Integer>(false);\n         }\n-        \n-        public List getComparableObjectsOrdered() {\n-            List list = new LinkedList();\n+\n+        public List<Integer> getComparableObjectsOrdered() {\n+            List<Integer> list = new LinkedList<Integer>();\n             list.add(null);\n             list.add(new Integer(1));\n             list.add(new Integer(2));\n             list.add(new Integer(5));\n             return list;\n         }\n-        \n+\n         public String getCanonicalComparatorName(Object object) {\n             return super.getCanonicalComparatorName(object) + \"2\";\n         }\n--- a/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestSingletonListIterator extends AbstractTestListIterator {\n+public class TestSingletonListIterator<E> extends AbstractTestListIterator<E> {\n \n     private static final Object testValue = \"foo\";\n     \n      * Returns a SingletonListIterator from which \n      * the element has already been removed.\n      */\n-    public ListIterator makeEmptyListIterator() {\n-        SingletonListIterator iter = (SingletonListIterator)makeFullIterator();\n+    public SingletonListIterator<E> makeEmptyIterator() {\n+        SingletonListIterator<E> iter = makeObject();\n         iter.next();\n         iter.remove();\n         iter.reset();        \n         return iter;\n     }\n \n-    public ListIterator makeFullListIterator() {\n-        return new SingletonListIterator( testValue );\n+    @SuppressWarnings(\"unchecked\")\n+    public SingletonListIterator<E> makeObject() {\n+        return new SingletonListIterator<E>((E) testValue);\n     }\n \n     public boolean supportsAdd() {\n     }\n \n     public void testIterator() {\n-        ListIterator iter = (ListIterator) makeObject();\n+        ListIterator<E> iter = makeObject();\n         assertTrue( \"Iterator should have next item\", iter.hasNext() );\n         assertTrue( \"Iterator should have no previous item\", !iter.hasPrevious() );\n         assertEquals( \"Iteration next index\", 0, iter.nextIndex() );\n     }\n     \n     public void testReset() {\n-        ResettableListIterator it = (ResettableListIterator) makeObject();\n+        ResettableListIterator<E> it = makeObject();\n         \n         assertEquals(true, it.hasNext());\n         assertEquals(false, it.hasPrevious());\n--- a/src/test/org/apache/commons/collections/list/TestTreeList.java\n+++ b/src/test/org/apache/commons/collections/list/TestTreeList.java\n  *\n  * @author Joerg Schmuecker\n  */\n-public class TestTreeList extends AbstractTestList {\n-    \n+public class TestTreeList<E> extends AbstractTestList<E> {\n+\n     public TestTreeList(String name) {\n         super(name);\n     }\n         return BulkTest.makeSuite(TestTreeList.class);\n     }\n \n-    public static void benchmark(List l) {\n+    public static void benchmark(List<? super Integer> l) {\n         long start = System.currentTimeMillis();\n         for (int i = 0; i < 100000; i++) {\n             l.add(new Integer(i));\n         }\n         System.out.print(System.currentTimeMillis() - start + \";\");\n-        \n+\n         start = System.currentTimeMillis();\n         for (int i = 0; i < 200; i++) {\n             l.toArray();\n         }\n         System.out.print(System.currentTimeMillis() - start + \";\");\n-        \n+\n         start = System.currentTimeMillis();\n         for (int i = 0; i < 100; i++) {\n-            java.util.Iterator it = l.iterator();\n+            java.util.Iterator<? super Integer> it = l.iterator();\n             while (it.hasNext()) {\n                 it.next();\n             }\n         }\n         System.out.print(System.currentTimeMillis() - start + \";\");\n-        \n+\n         start = System.currentTimeMillis();\n         for (int i = 0; i < 10000; i++) {\n             int j = (int) (Math.random() * 100000);\n             l.add(j, new Integer(-j));\n         }\n         System.out.print(System.currentTimeMillis() - start + \";\");\n-        \n+\n         start = System.currentTimeMillis();\n         for (int i = 0; i < 50000; i++) {\n             int j = (int) (Math.random() * 110000);\n             l.get(j);\n         }\n         System.out.print(System.currentTimeMillis() - start + \";\");\n-        \n+\n         start = System.currentTimeMillis();\n         for (int i = 0; i < 200; i++) {\n             int j = (int) (Math.random() * 100000);\n             l.indexOf(new Integer(j));\n         }\n         System.out.print(System.currentTimeMillis() - start + \";\");\n-        \n+\n         start = System.currentTimeMillis();\n         for (int i = 0; i < 10000; i++) {\n             int j = (int) (Math.random() * 100000);\n     }\n \n     //-----------------------------------------------------------------------\n-    public List makeEmptyList() {\n-        return new TreeList();\n+    public TreeList<E> makeObject() {\n+        return new TreeList<E>();\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n     public void testAddMultiple() {\n-        List l = makeEmptyList();\n-        l.add(\"hugo\");\n-        l.add(\"erna\");\n-        l.add(\"daniel\");\n-        l.add(\"andres\");\n-        l.add(\"harald\");\n+        List<E> l = makeObject();\n+        l.add((E) \"hugo\");\n+        l.add((E) \"erna\");\n+        l.add((E) \"daniel\");\n+        l.add((E) \"andres\");\n+        l.add((E) \"harald\");\n         l.add(0, null);\n         assertEquals(null, l.get(0));\n         assertEquals(\"hugo\", l.get(1));\n         assertEquals(\"harald\", l.get(5));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testRemove() {\n-        List l = makeEmptyList();\n-        l.add(\"hugo\");\n-        l.add(\"erna\");\n-        l.add(\"daniel\");\n-        l.add(\"andres\");\n-        l.add(\"harald\");\n+        List<E> l = makeObject();\n+        l.add((E) \"hugo\");\n+        l.add((E) \"erna\");\n+        l.add((E) \"daniel\");\n+        l.add((E) \"andres\");\n+        l.add((E) \"harald\");\n         l.add(0, null);\n         int i = 0;\n         assertEquals(null, l.get(i++));\n         assertEquals(\"harald\", l.get(i++));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testInsertBefore() {\n-        List l = makeEmptyList();\n-        l.add(\"erna\");\n-        l.add(0, \"hugo\");\n+        List<E> l = makeObject();\n+        l.add((E) \"erna\");\n+        l.add(0, (E) \"hugo\");\n         assertEquals(\"hugo\", l.get(0));\n         assertEquals(\"erna\", l.get(1));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testIndexOf() {\n-        List l = makeEmptyList();\n-        l.add(\"0\");\n-        l.add(\"1\");\n-        l.add(\"2\");\n-        l.add(\"3\");\n-        l.add(\"4\");\n-        l.add(\"5\");\n-        l.add(\"6\");\n+        List<E> l = makeObject();\n+        l.add((E) \"0\");\n+        l.add((E) \"1\");\n+        l.add((E) \"2\");\n+        l.add((E) \"3\");\n+        l.add((E) \"4\");\n+        l.add((E) \"5\");\n+        l.add((E) \"6\");\n         assertEquals(0, l.indexOf(\"0\"));\n         assertEquals(1, l.indexOf(\"1\"));\n         assertEquals(2, l.indexOf(\"2\"));\n         assertEquals(4, l.indexOf(\"4\"));\n         assertEquals(5, l.indexOf(\"5\"));\n         assertEquals(6, l.indexOf(\"6\"));\n-        \n-        l.set(1, \"0\");\n+\n+        l.set(1, (E) \"0\");\n         assertEquals(0, l.indexOf(\"0\"));\n-        \n-        l.set(3, \"3\");\n+\n+        l.set(3, (E) \"3\");\n         assertEquals(3, l.indexOf(\"3\"));\n-        l.set(2, \"3\");\n+        l.set(2, (E) \"3\");\n         assertEquals(2, l.indexOf(\"3\"));\n-        l.set(1, \"3\");\n+        l.set(1, (E) \"3\");\n         assertEquals(1, l.indexOf(\"3\"));\n-        l.set(0, \"3\");\n+        l.set(0, (E) \"3\");\n         assertEquals(0, l.indexOf(\"3\"));\n     }\n \n \n     public void testBug35258() {\n         Object objectToRemove = new Integer(3);\n-        \n-        List treelist = new TreeList();\n+\n+        List<Integer> treelist = new TreeList<Integer>();\n         treelist.add(new Integer(0));\n         treelist.add(new Integer(1));\n         treelist.add(new Integer(2));\n         treelist.add(new Integer(3));\n         treelist.add(new Integer(4));\n-        \n+\n         // this cause inconsistence of ListIterator()\n         treelist.remove(objectToRemove);\n-        \n-        ListIterator li = treelist.listIterator();\n+\n+        ListIterator<Integer> li = treelist.listIterator();\n         assertEquals(new Integer(0), li.next());\n         assertEquals(new Integer(0), li.previous());\n         assertEquals(new Integer(0), li.next());", "timestamp": 1252993364, "metainfo": ""}