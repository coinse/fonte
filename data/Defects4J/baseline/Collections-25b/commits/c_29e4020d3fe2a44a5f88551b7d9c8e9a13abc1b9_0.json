{"sha": "29e4020d3fe2a44a5f88551b7d9c8e9a13abc1b9", "log": "Refactor functors from inner classes to subpackage   ", "commit": "\n--- a/src/java/org/apache/commons/collections/PredicateUtils.java\n+++ b/src/java/org/apache/commons/collections/PredicateUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PredicateUtils.java,v 1.12 2003/11/23 17:01:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PredicateUtils.java,v 1.13 2003/11/23 19:11:21 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Iterator;\n import java.util.Set;\n \n+import org.apache.commons.collections.functors.EqualPredicate;\n import org.apache.commons.collections.functors.ExceptionPredicate;\n+import org.apache.commons.collections.functors.FalsePredicate;\n import org.apache.commons.collections.functors.FunctorException;\n+import org.apache.commons.collections.functors.IdentityPredicate;\n+import org.apache.commons.collections.functors.InstanceofPredicate;\n+import org.apache.commons.collections.functors.NotNullPredicate;\n+import org.apache.commons.collections.functors.NotPredicate;\n+import org.apache.commons.collections.functors.NullIsExceptionPredicate;\n+import org.apache.commons.collections.functors.NullIsFalsePredicate;\n+import org.apache.commons.collections.functors.NullIsTruePredicate;\n+import org.apache.commons.collections.functors.NullPredicate;\n+import org.apache.commons.collections.functors.TruePredicate;\n \n /**\n  * <code>PredicateUtils</code> provides reference implementations and utilities\n  * All the supplied predicates are Serializable.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.12 $ $Date: 2003/11/23 17:01:36 $\n+ * @version $Revision: 1.13 $ $Date: 2003/11/23 19:11:21 $\n  * \n  * @author Stephen Colebourne\n  * @author Ola Berg\n public class PredicateUtils {\n \n     /**\n-     * A predicate that always returns true\n-     */\n-    private static final Predicate TRUE_PREDICATE = new ConstantPredicate(true);\n-    /**\n-     * A predicate that always returns false\n-     */\n-    private static final Predicate FALSE_PREDICATE = new ConstantPredicate(false);\n-    /**\n-     * A predicate that returns true if the object is null\n-     */\n-    private static final Predicate NULL_PREDICATE = new IdentityPredicate(null);\n-    /**\n-     * A predicate that returns true if the object is not null\n-     */\n-    private static final Predicate NOT_NULL_PREDICATE = new NotPredicate(NULL_PREDICATE);\n-\n-    /**\n      * This class is not normally instantiated.\n      */\n     public PredicateUtils() {\n      * @return the predicate\n      */\n     public static Predicate truePredicate() {\n-        return TRUE_PREDICATE;\n+        return TruePredicate.INSTANCE;\n     }\n \n     /**\n      * @return the predicate\n      */\n     public static Predicate falsePredicate() {\n-        return FALSE_PREDICATE;\n+        return FalsePredicate.INSTANCE;\n     }\n \n     /**\n      * @return the predicate\n      */\n     public static Predicate nullPredicate() {\n-        return NULL_PREDICATE;\n+        return NullPredicate.INSTANCE;\n     }\n \n     /**\n      * @return the predicate\n      */\n     public static Predicate notNullPredicate() {\n-        return NOT_NULL_PREDICATE;\n+        return NotNullPredicate.INSTANCE;\n     }\n \n     /**\n      * @return the predicate\n      */\n     public static Predicate equalPredicate(Object value) {\n-        if (value == null) {\n-            return NULL_PREDICATE;\n-        }\n-        return new EqualPredicate(value);\n+        return EqualPredicate.getInstance(value);\n     }\n \n     /**\n      * @return the predicate\n      */\n     public static Predicate identityPredicate(Object value) {\n-        if (value == null) {\n-            return NULL_PREDICATE;\n-        }\n-        return new IdentityPredicate(value);\n+        return IdentityPredicate.getInstance(value);\n     }\n     \n     /**\n      * @throws IllegalArgumentException if the class is null\n      */\n     public static Predicate instanceofPredicate(Class type) {\n-        if (type == null) {\n-            throw new IllegalArgumentException(\"The type to check instanceof must not be null\");\n-        }\n-        return new InstanceofPredicate(type);\n+        return InstanceofPredicate.getInstance(type);\n     }\n \n     /**\n      * @throws IllegalArgumentException if the predicate is null\n      */\n     public static Predicate notPredicate(Predicate predicate) {\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"The predicate must not be null\");\n-        }\n-        return new NotPredicate(predicate);\n+        return NotPredicate.getInstance(predicate);\n     }\n \n     // Adaptors\n      * @throws IllegalArgumentException if the predicate is null.\n      */\n     public static Predicate nullIsExceptionPredicate(Predicate predicate){\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"The predicate must not be null\");\n-        }\n-        return new NullIsExceptionPredicate( predicate);\n+        return NullIsExceptionPredicate.getInstance(predicate);\n     }\n \n     /**\n      * @throws IllegalArgumentException if the predicate is null.\n      */\n     public static Predicate nullIsFalsePredicate(Predicate predicate){\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"The predicate must not be null\");\n-        }\n-        return new NullIsFalsePredicate(predicate);\n+        return NullIsFalsePredicate.getInstance(predicate);\n     }\n \n     /**\n      * @throws IllegalArgumentException if the predicate is null.\n      */\n     public static Predicate nullIsTruePredicate(Predicate predicate){\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"The predicate must not be null\");\n-        }\n-        return new NullIsTruePredicate(predicate);\n+        return NullIsTruePredicate.getInstance(predicate);\n     }\n \n     /**\n             preds[i] = predicates[i];\n         }\n         return preds;\n-    }\n-\n-    // ConstantPredicate\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * ConstantPredicate returns the same instance each time.\n-     */\n-    private static class ConstantPredicate implements Predicate, Serializable {\n-        /** The constant value to return each time */\n-        private final boolean iConstant;\n-\n-        /**\n-         * Constructor to store constant\n-         */\n-        private ConstantPredicate(boolean constant) {\n-            super();\n-            iConstant = constant;\n-        }\n-\n-        /**\n-         * Always return constant\n-         */\n-        public boolean evaluate(Object object) {\n-            return iConstant;\n-        }\n     }\n \n     // AllPredicate\n         }\n     }\n \n-    // NotPredicate\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * NotPredicate returns the opposite of the wrapped predicate\n-     */\n-    private static class NotPredicate implements Predicate, Serializable {\n-        /** The predicate to call */\n-        private final Predicate iPredicate;\n-\n-        /**\n-         * Constructor\n-         */\n-        private NotPredicate(Predicate predicate) {\n-            super();\n-            iPredicate = predicate;\n-        }\n-\n-        /**\n-         * Return true if the wrapped predicate returns false, and vice versa\n-         */\n-        public boolean evaluate(Object object) {\n-            return !iPredicate.evaluate(object);\n-        }\n-    }\n-\n-    // InstanceofPredicate\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * InstanceofPredicate checks the type of an object\n-     */\n-    private static class InstanceofPredicate implements Predicate, Serializable {\n-        /** The type to check for */\n-        private final Class iType;\n-\n-        /**\n-         * Constructor\n-         */\n-        public InstanceofPredicate(Class type) {\n-            super();\n-            iType = type;\n-        }\n-\n-        /**\n-         * Return true if the object is an instanceof the type of the predicate.\n-         */\n-        public boolean evaluate(Object object) {\n-            return iType.isInstance(object);\n-        }\n-    }\n-\n-    // EqualPredicate\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * EqualPredicate that checks if the object is a particular value by equals().\n-     */\n-    private static class EqualPredicate implements Predicate, Serializable {\n-        /** The object to compare to */\n-        private final Object iValue;\n-\n-        /**\n-         * Constructor\n-         */\n-        public EqualPredicate(Object value) {\n-            super();\n-            iValue = value;\n-        }\n-\n-        /**\n-         * Return true if the object is equals() to the value stored in the predicate.\n-         */\n-        public boolean evaluate(Object object) {\n-            return iValue.equals(object);\n-        }\n-    }\n-\n-    // IdentityPredicate\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * IdentityPredicate that checks if the object is a particular value by identity.\n-     */\n-    private static class IdentityPredicate implements Predicate, Serializable {\n-        /** The object to compare identity to */\n-        private final Object iValue;\n-\n-        /**\n-         * Constructor\n-         */\n-        public IdentityPredicate(Object value) {\n-            super();\n-            iValue = value;\n-        }\n-\n-        /**\n-         * Return true if the object is equals() to the value stored in the predicate.\n-         */\n-        public boolean evaluate(Object object) {\n-            return iValue == object;\n-        }\n-    }\n-\n     // UniquePredicate\n     //----------------------------------------------------------------------------------\n \n         }\n     }\n \n-    // NullIsExceptionPredicate\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * NullIsExceptionPredicate returns an exception if null is passed in.\n-     */\n-    private static class NullIsExceptionPredicate implements Predicate, Serializable {\n-        /** The predicate to call */\n-        private final Predicate iPredicate;\n-        \n-        /**\n-         * Constructor\n-         */\n-        private NullIsExceptionPredicate(Predicate predicate){\n-            super();\n-            iPredicate = predicate;\n-        }\n-        \n-        /**\n-         * Return an exception if null\n-         */\n-        public boolean evaluate(Object object){\n-            if (object == null) {\n-                throw new FunctorException(\"NullIsExceptionPredicate: Input Object must not be null\");\n-            }\n-            return iPredicate.evaluate(object);\n-        }\n-    }\n-\n-    // NullIsFalsePredicate\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * NullIsFalsePredicate returns false if null is passed in.\n-     */\n-    private static class NullIsFalsePredicate implements Predicate, Serializable {\n-        /** The predicate to call */\n-        private final Predicate iPredicate;\n-        \n-        /**\n-         * Constructor\n-         */\n-        private NullIsFalsePredicate(Predicate predicate){\n-            super();\n-            iPredicate = predicate;\n-        }\n-        \n-        /**\n-         * Return false if null\n-         */\n-        public boolean evaluate(Object object){\n-            if (object == null) {\n-                return false;\n-            }\n-            return iPredicate.evaluate(object);\n-        }\n-    }\n-\n-    // NullIsTruePredicate\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * NullIsTruePredicate returns true if null is passed in.\n-     */\n-    private static class NullIsTruePredicate implements Predicate, Serializable {\n-        /** The predicate to call */\n-        private final Predicate iPredicate;\n-        \n-        /**\n-         * Constructor\n-         */\n-        private NullIsTruePredicate(Predicate predicate){\n-            super();\n-            iPredicate = predicate;\n-        }\n-        \n-        /**\n-         * Return true if null\n-         */\n-        public boolean evaluate(Object object){\n-            if (object == null) {\n-                return true;\n-            }\n-            return iPredicate.evaluate(object);\n-        }\n-    }\n-\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/EqualPredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/EqualPredicate.java,v 1.1 2003/11/23 19:11:21 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that returns true if the input is the same object\n+ * as the one stored in this predicate by equals.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 19:11:21 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class EqualPredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = 5633766978029907089L;\n+\n+    /** The value to compare to */\n+    private final Object iValue;\n+    \n+    /**\n+     * Factory to create the identity predicate.\n+     * \n+     * @param object  the object to compare to\n+     * @return the predicate\n+     * @throws IllegalArgumentException if the predicate is null\n+     */\n+    public static Predicate getInstance(Object object) {\n+        if (object == null) {\n+            return NullPredicate.INSTANCE;\n+        }\n+        return new EqualPredicate(object);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param object  the object to compare to\n+     */\n+    public EqualPredicate(Object object) {\n+        super();\n+        iValue = object;\n+    }\n+\n+    /**\n+     * Return the predicate result.\n+     */\n+    public boolean evaluate(Object object) {\n+        return (iValue.equals(object));\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/FalsePredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/FalsePredicate.java,v 1.1 2003/11/23 19:11:21 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that always returns false.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 19:11:21 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class FalsePredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = 7533784454832764388L;\n+    \n+    /** Singleton predicate instance */    \n+    public static final Predicate INSTANCE = new FalsePredicate();\n+    \n+    /**\n+     * Restricted constructor.\n+     */\n+    private FalsePredicate() {\n+        super();\n+    }\n+\n+    /**\n+     * Always return true.\n+     */\n+    public boolean evaluate(Object object) {\n+        return false;\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/IdentityPredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/IdentityPredicate.java,v 1.1 2003/11/23 19:11:21 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that returns true if the input is the same object\n+ * as the one stored in this predicate.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 19:11:21 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class IdentityPredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = -89901658494523293L;\n+\n+    \n+    /** The value to compare to */\n+    private final Object iValue;\n+    \n+    /**\n+     * Factory to create the identity predicate.\n+     * \n+     * @param object  the object to compare to\n+     * @return the predicate\n+     * @throws IllegalArgumentException if the predicate is null\n+     */\n+    public static Predicate getInstance(Object object) {\n+        if (object == null) {\n+            return NullPredicate.INSTANCE;\n+        }\n+        return new IdentityPredicate(object);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param object  the object to compare to\n+     */\n+    public IdentityPredicate(Object object) {\n+        super();\n+        iValue = object;\n+    }\n+\n+    /**\n+     * Return the predicate result.\n+     */\n+    public boolean evaluate(Object object) {\n+        return (iValue == object);\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/InstanceofPredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/InstanceofPredicate.java,v 1.1 2003/11/23 19:11:21 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that returns true if the input is an instanceof\n+ * the type stored in this predicate.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 19:11:21 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class InstanceofPredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = -6682656911025165584L;\n+\n+    /** The type to compare to */\n+    private final Class iType;\n+    \n+    /**\n+     * Factory to create the identity predicate.\n+     * \n+     * @param type  the type to check for, may not be null\n+     * @return the predicate\n+     * @throws IllegalArgumentException if the class is null\n+     */\n+    public static Predicate getInstance(Class type) {\n+        if (type == null) {\n+            throw new IllegalArgumentException(\"The type to check instanceof must not be null\");\n+        }\n+        return new InstanceofPredicate(type);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param object  the object to compare to\n+     */\n+    public InstanceofPredicate(Class type) {\n+        super();\n+        iType = type;\n+    }\n+\n+    /**\n+     * Return the predicate result.\n+     */\n+    public boolean evaluate(Object object) {\n+        return (iType.isInstance(object));\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/NotNullPredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/NotNullPredicate.java,v 1.1 2003/11/23 19:11:21 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that returns true if the input is not null.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 19:11:21 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class NotNullPredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = 7533784454832764388L;\n+    \n+    /** Singleton predicate instance */    \n+    public static final Predicate INSTANCE = new NotNullPredicate();\n+    \n+    /**\n+     * Restricted constructor.\n+     */\n+    private NotNullPredicate() {\n+        super();\n+    }\n+\n+    /**\n+     * Return true if the object equals null.\n+     */\n+    public boolean evaluate(Object object) {\n+        return (object != null);\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/NotPredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/NotPredicate.java,v 1.1 2003/11/23 19:11:21 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that returns the opposite of the decorated predicate.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 19:11:21 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class NotPredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = -2654603322338049674L;\n+    \n+    /** The predicate to decorate */\n+    private final Predicate iPredicate;\n+    \n+    /**\n+     * Factory to create the not predicate.\n+     * \n+     * @param predicate  the predicate to decorate, not null\n+     * @return the predicate\n+     * @throws IllegalArgumentException if the predicate is null\n+     */\n+    public static Predicate getInstance(Predicate predicate) {\n+        if (predicate == null) {\n+            throw new IllegalArgumentException(\"Predicate must not be null\");\n+        }\n+        return new NotPredicate(predicate);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param predicate  the predicate to call after the null check\n+     */\n+    public NotPredicate(Predicate predicate) {\n+        super();\n+        iPredicate = predicate;\n+    }\n+\n+    /**\n+     * Return the negated predicate result.\n+     */\n+    public boolean evaluate(Object object) {\n+        return !(iPredicate.evaluate(object));\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java,v 1.1 2003/11/23 19:11:21 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that throws an exception if the input is null.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 19:11:21 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class NullIsExceptionPredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = 3243449850504576071L;\n+    \n+    /** The predicate to decorate */\n+    private final Predicate iPredicate;\n+    \n+    /**\n+     * Factory to create the null exception predicate.\n+     * \n+     * @param predicate  the predicate to decorate, not null\n+     * @return the predicate\n+     * @throws IllegalArgumentException if the predicate is null\n+     */\n+    public static Predicate getInstance(Predicate predicate) {\n+        if (predicate == null) {\n+            throw new IllegalArgumentException(\"Predicate must not be null\");\n+        }\n+        return new NullIsExceptionPredicate(predicate);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param predicate  the predicate to call after the null check\n+     */\n+    public NullIsExceptionPredicate(Predicate predicate) {\n+        super();\n+        iPredicate = predicate;\n+    }\n+\n+    /**\n+     * Return true if the object equals null else call the decorated predicate.\n+     */\n+    public boolean evaluate(Object object) {\n+        if (object == null) {\n+            throw new FunctorException(\"Input Object must not be null\");\n+        }\n+        return iPredicate.evaluate(object);\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/NullIsFalsePredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/NullIsFalsePredicate.java,v 1.1 2003/11/23 19:11:21 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that returns false if the input is null.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 19:11:21 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class NullIsFalsePredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = -2997501534564735525L;\n+    \n+    /** The predicate to decorate */\n+    private final Predicate iPredicate;\n+    \n+    /**\n+     * Factory to create the null false predicate.\n+     * \n+     * @param predicate  the predicate to decorate, not null\n+     * @return the predicate\n+     * @throws IllegalArgumentException if the predicate is null\n+     */\n+    public static Predicate getInstance(Predicate predicate) {\n+        if (predicate == null) {\n+            throw new IllegalArgumentException(\"Predicate must not be null\");\n+        }\n+        return new NullIsFalsePredicate(predicate);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param predicate  the predicate to call after the null check\n+     */\n+    public NullIsFalsePredicate(Predicate predicate) {\n+        super();\n+        iPredicate = predicate;\n+    }\n+\n+    /**\n+     * Return false if the object equals null else call the decorated predicate.\n+     */\n+    public boolean evaluate(Object object) {\n+        if (object == null) {\n+            return false;\n+        }\n+        return iPredicate.evaluate(object);\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/NullIsTruePredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/NullIsTruePredicate.java,v 1.1 2003/11/23 19:11:21 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that returns true if the input is null.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 19:11:21 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class NullIsTruePredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = -7625133768987126273L;\n+    \n+    /** The predicate to decorate */\n+    private final Predicate iPredicate;\n+    \n+    /**\n+     * Factory to create the null true predicate.\n+     * \n+     * @param predicate  the predicate to decorate, not null\n+     * @return the predicate\n+     * @throws IllegalArgumentException if the predicate is null\n+     */\n+    public static Predicate getInstance(Predicate predicate) {\n+        if (predicate == null) {\n+            throw new IllegalArgumentException(\"Predicate must not be null\");\n+        }\n+        return new NullIsTruePredicate(predicate);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param predicate  the predicate to call after the null check\n+     */\n+    public NullIsTruePredicate(Predicate predicate) {\n+        super();\n+        iPredicate = predicate;\n+    }\n+\n+    /**\n+     * Return true if the object equals null else call the decorated predicate.\n+     */\n+    public boolean evaluate(Object object) {\n+        if (object == null) {\n+            return true;\n+        }\n+        return iPredicate.evaluate(object);\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/NullPredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/NullPredicate.java,v 1.1 2003/11/23 19:11:21 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that returns true if the input is null.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 19:11:21 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class NullPredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = 7533784454832764388L;\n+    \n+    /** Singleton predicate instance */    \n+    public static final Predicate INSTANCE = new NullPredicate();\n+    \n+    /**\n+     * Restricted constructor.\n+     */\n+    private NullPredicate() {\n+        super();\n+    }\n+\n+    /**\n+     * Return true if the object equals null.\n+     */\n+    public boolean evaluate(Object object) {\n+        return (object == null);\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/TruePredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/TruePredicate.java,v 1.1 2003/11/23 19:11:21 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that always returns true.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 19:11:21 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class TruePredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = 3374767158756189740L;\n+    \n+    /** Singleton predicate instance */    \n+    public static final Predicate INSTANCE = new TruePredicate();\n+    \n+    /**\n+     * Restricted constructor.\n+     */\n+    private TruePredicate() {\n+        super();\n+    }\n+\n+    /**\n+     * Always return true.\n+     */\n+    public boolean evaluate(Object object) {\n+        return true;\n+    }\n+    \n+}", "timestamp": 1069614681, "metainfo": ""}