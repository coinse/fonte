{"sha": "c0aa4fdd160aea3a60b51fc78b4cbabdf2675b32", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471575 | scolebourne | 2006-11-05 15:58:08 -0800 (Sun, 05 Nov 2006) | 1 line          Generify and remove AbstractSerializableCollectionDecorator     ------------------------------------------------------------------------     r471202 | scolebourne | 2006-11-04 06:21:44 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getCollection() - use covariant decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/collection/PredicatedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/PredicatedCollection.java\n package org.apache.commons.collections.collection;\n \n import java.util.Collection;\n-import java.util.Iterator;\n \n import org.apache.commons.collections.Predicate;\n \n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n+ * @param <E> the type of the elements in the collection\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  *\n  * @author Stephen Colebourne\n  * @author Paul Jack\n  */\n-public class PredicatedCollection extends AbstractSerializableCollectionDecorator {\n+public class PredicatedCollection<E> extends AbstractCollectionDecorator<E> {\n \n     /** Serialization version */\n     private static final long serialVersionUID = -5259182142076705162L;\n \n     /** The predicate to use */\n-    protected final Predicate predicate;\n+    protected final Predicate<? super E> predicate;\n \n     /**\n      * Factory method to create a predicated (validating) collection.\n      * If there are any elements already in the collection being decorated, they\n      * are validated.\n      * \n+     * @param <T> the type of the elements in the collection\n      * @param coll  the collection to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @return a new predicated collection\n      * @throws IllegalArgumentException if collection or predicate is null\n      * @throws IllegalArgumentException if the collection contains invalid elements\n      */\n-    public static Collection decorate(Collection coll, Predicate predicate) {\n-        return new PredicatedCollection(coll, predicate);\n+    public static <T> Collection<T> decorate(Collection<T> coll, Predicate<? super T> predicate) {\n+        return new PredicatedCollection<T>(coll, predicate);\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n      * @throws IllegalArgumentException if collection or predicate is null\n      * @throws IllegalArgumentException if the collection contains invalid elements\n      */\n-    protected PredicatedCollection(Collection coll, Predicate predicate) {\n+    protected PredicatedCollection(Collection<E> coll, Predicate<? super E> predicate) {\n         super(coll);\n         if (predicate == null) {\n             throw new IllegalArgumentException(\"Predicate must not be null\");\n         }\n         this.predicate = predicate;\n-        for (Iterator it = coll.iterator(); it.hasNext(); ) {\n-            validate(it.next());\n+        for (E item : coll) {\n+            validate(item);\n         }\n     }\n \n      * @param object  the object being added\n      * @throws IllegalArgumentException if the add is invalid\n      */\n-    protected void validate(Object object) {\n+    protected void validate(E object) {\n         if (predicate.evaluate(object) == false) {\n             throw new IllegalArgumentException(\"Cannot add Object '\" + object + \"' - Predicate '\" + predicate + \"' rejected it\");\n         }\n      * @return the result of adding to the underlying collection\n      * @throws IllegalArgumentException if the add is invalid\n      */\n-    public boolean add(Object object) {\n+    public boolean add(E object) {\n         validate(object);\n-        return getCollection().add(object);\n+        return decorated().add(object);\n     }\n \n     /**\n      * @return the result of adding to the underlying collection\n      * @throws IllegalArgumentException if the add is invalid\n      */\n-    public boolean addAll(Collection coll) {\n-        for (Iterator it = coll.iterator(); it.hasNext(); ) {\n-            validate(it.next());\n+    public boolean addAll(Collection<? extends E> coll) {\n+        for (E item : coll) {\n+            validate(item);\n         }\n-        return getCollection().addAll(coll);\n+        return decorated().addAll(coll);\n     }\n \n }", "timestamp": 1252994085, "metainfo": ""}