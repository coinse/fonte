{"sha": "5db7fd697622ee56a4da46034db63eb1f8d0431f", "log": "Fix various javadoc link warnings bug 23680, from Eric Johnson   ", "commit": "\n--- a/src/java/org/apache/commons/collections/observed/ModificationHandler.java\n+++ b/src/java/org/apache/commons/collections/observed/ModificationHandler.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ModificationHandler.java,v 1.7 2003/09/21 20:01:53 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ModificationHandler.java,v 1.8 2003/10/09 20:50:04 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * later collections release.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.7 $ $Date: 2003/09/21 20:01:53 $\n+ * @version $Revision: 1.8 $ $Date: 2003/10/09 20:50:04 $\n  * \n  * @author Stephen Colebourne\n  */\n     /**\n      * Store data and send event before add(obj) is called.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #preEvent}.\n      * It does not set the index for List implementations.\n      * \n      * @param object  the object being added\n     /**\n      * Send an event after add(obj) is called.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #postEvent}.\n      * It does not set the index for List implementations.\n      * \n      * @param object  the object being added\n     /**\n      * Store data and send event before add(int,obj) is called on a List.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #preEvent}.\n      * \n      * @param index  the index to add at\n      * @param object  the object being added\n     /**\n      * Send an event after add(int,obj) is called on a List.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #postEvent}.\n      * \n      * @param index  the index to add at\n      * @param object  the object being added\n     /**\n      * Store data and send event before add(obj,int) is called on a Bag.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #preEvent}.\n      * \n      * @param object  the object being added\n      * @param nCopies  the number of copies being added\n     /**\n      * Send an event after add(obj,int) is called on a Bag.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #postEvent}.\n      * The method result is not used by this implementation (Bag violates the\n      * Collection contract)\n      * \n     /**\n      * Store data and send event before add(obj) is called on a ListIterator.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #preEvent}.\n      * \n      * @param index  the index of the iterator\n      * @param object  the object being added\n     /**\n      * Send an event after add(obj) is called on a ListIterator.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #postEvent}.\n      * \n      * @param index  the index of the iterator\n      * @param object  the object being added\n     /**\n      * Store data and send event before addAll(coll) is called.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #preEvent}.\n      * \n      * @param coll  the collection being added\n      * @return true to process modification\n     /**\n      * Send an event after addAll(coll) is called.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #postEvent}.\n      * \n      * @param coll  the collection being added\n      * @param collChanged  the result from the addAll method\n     /**\n      * Store data and send event before addAll(int,coll) is called on a List.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #preEvent}.\n      * \n      * @param index  the index to addAll at\n      * @param coll  the collection being added\n     /**\n      * Send an event after addAll(int,coll) is called on a List.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #postEvent}.\n      * \n      * @param index  the index to addAll at\n      * @param coll  the collection being added\n     /**\n      * Store data and send event before clear() is called.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int)}.\n+     * This implementation forwards to {@link #preEvent}.\n      * \n      * @return true to process modification\n      */\n     /**\n      * Send an event after clear() is called.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int)}.\n+     * This implementation forwards to {@link #postEvent}.\n      */\n     protected void postClear() {\n         // assumes a modification occurred\n     /**\n      * Store data and send event before remove(obj) is called.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #preEvent}.\n      * \n      * @param object  the object being removed\n      * @return true to process modification\n     /**\n      * Send an event after remove(obj) is called.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #postEvent}.\n      * \n      * @param object  the object being removed\n      * @param collChanged  the result from the remove method\n     /**\n      * Store data and send event before remove(int) is called on a List.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #preEvent}.\n      * \n      * @param index  the index to remove at\n      * @return true to process modification\n     /**\n      * Send an event after remove(int) is called on a List.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #postEvent}.\n      * \n      * @param index  the index to remove at\n      * @param previousValue  the result from the remove method\n     /**\n      * Store data and send event before remove(obj,int) is called on a Bag.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #preEvent}.\n      * \n      * @param object  the object being removed\n      * @param nCopies  the number of copies being removed\n     /**\n      * Send an event after remove(obj,int) is called on a Bag.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #postEvent}.\n      * \n      * @param object  the object being removed\n      * @param nCopies  the number of copies being removed\n     /**\n      * Store data and send event before remove() is called on a Buffer.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #preEvent}.\n      * \n      * @return true to process modification\n      */\n     /**\n      * Send an event after remove() is called on a Buffer.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #postEvent}.\n      * \n      * @param removedValue  the previous value at this index\n      */\n     /**\n      * Store data and send event before remove(obj) is called on an Iterator.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #preEvent}.\n      * \n      * @param index  the index of the iterator\n      * @param removedValue  the object being removed\n     /**\n      * Send an event after remove(obj) is called on an Iterator.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #postEvent}.\n      * \n      * @param index  the index of the iterator\n      * @param removedValue  the previous value at this index\n     /**\n      * Store data and send event before removeAll(coll) is called.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #preEvent}.\n      * \n      * @param coll  the collection being removed\n      * @return true to process modification\n     /**\n      * Send an event after removeAll(coll) is called.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #postEvent}.\n      * \n      * @param coll  the collection being removed\n      * @param collChanged  the result from the removeAll method\n     /**\n      * Store data and send event before retainAll(coll) is called.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #preEvent}.\n      * \n      * @param coll  the collection being retained\n      * @return true to process modification\n     /**\n      * Send an event after retainAll(coll) is called.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #postEvent}.\n      * \n      * @param coll  the collection being retained\n      * @param collChanged  the result from the retainAll method\n     /**\n      * Store data and send event before set(int,obj) is called on a List.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #preEvent}.\n      * \n      * @param index  the index to add at\n      * @param object  the object being added\n     /**\n      * Send an event after set(int,obj) is called on a List.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #postEvent}.\n      * \n      * @param index  the index to add at\n      * @param object  the object being added\n     /**\n      * Store data and send event before set(obj) is called on a ListIterator.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #preEvent}.\n      * \n      * @param index  the index to set at\n      * @param object  the object being added\n     /**\n      * Send an event after set(obj) is called on a ListIterator.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object, Object, int)}.\n+     * This implementation forwards to {@link #postEvent}.\n      * \n      * @param index  the index to set at\n      * @param object  the object being added\n--- a/src/java/org/apache/commons/collections/observed/ObservableBag.java\n+++ b/src/java/org/apache/commons/collections/observed/ObservableBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableBag.java,v 1.1 2003/09/21 16:00:28 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableBag.java,v 1.2 2003/10/09 20:50:04 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Each modifying method call made on this <code>Bag</code> is forwarded to a\n  * {@link ModificationHandler}.\n  * The handler manages the event, notifying listeners and optionally vetoing changes.\n- * The default handler is {@link StandardModificationHandler}.\n+ * The default handler is\n+ * {@link org.apache.commons.collections.observed.standard.StandardModificationHandler StandardModificationHandler}.\n  * See this class for details of configuration available.\n  * <p>\n  * NOTE: The {@link #uniqueSet()} method returns a <code>Set</code> that is\n  * NOT observed. This is because the set should be unmodifiable.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/21 16:00:28 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/09 20:50:04 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/observed/ObservableBuffer.java\n+++ b/src/java/org/apache/commons/collections/observed/ObservableBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableBuffer.java,v 1.1 2003/09/21 16:00:28 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableBuffer.java,v 1.2 2003/10/09 20:50:04 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Each modifying method call made on this <code>Buffer</code> is forwarded to a\n  * {@link ModificationHandler}.\n  * The handler manages the event, notifying listeners and optionally vetoing changes.\n- * The default handler is {@link StandardModificationHandler}.\n+ * The default handler is\n+ * {@link org.apache.commons.collections.observed.standard.StandardModificationHandler StandardModificationHandler}.\n  * See this class for details of configuration available.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/21 16:00:28 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/09 20:50:04 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/observed/ObservableCollection.java\n+++ b/src/java/org/apache/commons/collections/observed/ObservableCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableCollection.java,v 1.1 2003/09/21 16:00:28 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableCollection.java,v 1.2 2003/10/09 20:50:04 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * See this class for details of configuration available.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/21 16:00:28 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/09 20:50:04 $\n  * \n  * @author Stephen Colebourne\n  */\n      * <code>ModificationHandler</code> instance.\n      * \n      * @param coll  the collection to decorate, must not be null\n-     * @param handler  the observing handler, may be null\n+     * @param listener  the observing handler, may be null\n      * @throws IllegalArgumentException if the collection is null\n      */\n     protected ObservableCollection(\n--- a/src/java/org/apache/commons/collections/observed/ObservableList.java\n+++ b/src/java/org/apache/commons/collections/observed/ObservableList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableList.java,v 1.1 2003/09/21 16:00:28 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableList.java,v 1.2 2003/10/09 20:50:04 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Each modifying method call made on this <code>List</code> is forwarded to a\n  * {@link ModificationHandler}.\n  * The handler manages the event, notifying listeners and optionally vetoing changes.\n- * The default handler is {@link StandardModificationHandler}.\n+ * The default handler is\n+ * {@link org.apache.commons.collections.observed.standard.StandardModificationHandler StandardModificationHandler}.\n  * See this class for details of configuration available.\n  * <p>\n  * All indices on events returned by <code>subList</code> are relative to the\n  * base <code>List</code>.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/21 16:00:28 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/09 20:50:04 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/observed/ObservableSet.java\n+++ b/src/java/org/apache/commons/collections/observed/ObservableSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableSet.java,v 1.1 2003/09/21 16:00:28 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableSet.java,v 1.2 2003/10/09 20:50:04 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.Set;\n \n-\n /**\n  * Decorates a <code>Set</code> implementation to observe modifications.\n  * <p>\n  * Each modifying method call made on this <code>Set</code> is forwarded to a\n  * {@link ModificationHandler}.\n  * The handler manages the event, notifying listeners and optionally vetoing changes.\n- * The default handler is {@link StandardModificationHandler}.\n+ * The default handler is\n+ * {@link org.apache.commons.collections.observed.standard.StandardModificationHandler StandardModificationHandler}.\n  * See this class for details of configuration available.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/21 16:00:28 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/09 20:50:04 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/observed/ObservableSortedBag.java\n+++ b/src/java/org/apache/commons/collections/observed/ObservableSortedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableSortedBag.java,v 1.1 2003/09/28 21:50:37 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableSortedBag.java,v 1.2 2003/10/09 20:50:04 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Each modifying method call made on this <code>SortedBag</code> is forwarded to a\n  * {@link ModificationHandler}.\n  * The handler manages the event, notifying listeners and optionally vetoing changes.\n- * The default handler is {@link StandardModificationHandler}.\n+ * The default handler is\n+ * {@link org.apache.commons.collections.observed.standard.StandardModificationHandler StandardModificationHandler}.\n  * See this class for details of configuration available.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/28 21:50:37 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/09 20:50:04 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/observed/ObservableSortedSet.java\n+++ b/src/java/org/apache/commons/collections/observed/ObservableSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableSortedSet.java,v 1.2 2003/09/28 21:49:50 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableSortedSet.java,v 1.3 2003/10/09 20:50:04 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Each modifying method call made on this <code>SortedSet</code> is forwarded to a\n  * {@link ModificationHandler}.\n  * The handler manages the event, notifying listeners and optionally vetoing changes.\n- * The default handler is {@link StandardModificationHandler}.\n+ * The default handler is\n+ * {@link org.apache.commons.collections.observed.standard.StandardModificationHandler StandardModificationHandler}.\n  * See this class for details of configuration available.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/09/28 21:49:50 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/09 20:50:04 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/observed/standard/StandardModificationHandler.java\n+++ b/src/java/org/apache/commons/collections/observed/standard/StandardModificationHandler.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardModificationHandler.java,v 1.6 2003/09/21 20:00:29 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardModificationHandler.java,v 1.7 2003/10/09 20:50:04 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * modification events.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2003/09/21 20:00:29 $\n+ * @version $Revision: 1.7 $ $Date: 2003/10/09 20:50:04 $\n  * \n  * @author Stephen Colebourne\n  */\n     /**\n      * Constructor the creates the handler but leaves it invalid.\n      * <p>\n-     * The handler can only be used after {@link #init(ObservableCollection)} is\n-     * called. This is normally done automatically by\n-     * {@link ObservableCollection#decorate(Collection, ModificationHandler)}.\n+     * The handler can only be used after it has been properly initialized.\n+     * This is normally done automatically by\n+     * {@link ObservableCollection#decorate(Collection, Object)}.\n      */\n     public StandardModificationHandler() {\n         super();\n     /**\n      * Constructor the creates the handler but leaves it invalid.\n      * <p>\n-     * The handler can only be used after {@link #init(ObservableCollection)} is\n-     * called. This is normally done automatically by\n-     * {@link ObservableCollection#decorate(Collection, ModificationHandler)}.\n+     * The handler can only be used after it has been properly initialized.\n+     * This is normally done automatically by\n+     * {@link ObservableCollection#decorate(Collection, Object)}.\n      * \n      * @param pre  the pre listener\n      * @param preMask  the mask for the pre listener\n      * \n      * @param listener  the listener to change, may be null\n      * @param mask  the new mask (0 for none, -1 for all)\n-     * @return a non-null array of listeners\n      */\n     public synchronized void setPreModificationListenerMask(StandardPreModificationListener listener, int mask) {\n         if (listener != null) {\n      * \n      * @param listener  the listener to change, may be null\n      * @param mask  the new mask (0 for none, -1 for all)\n-     * @return a non-null array of listeners\n      */\n     public synchronized void setPostModificationListenerMask(StandardPostModificationListener listener, int mask) {\n         if (listener != null) {\n--- a/src/java/org/apache/commons/collections/primitives/ArrayUnsignedIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ArrayUnsignedIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayUnsignedIntList.java,v 1.5 2003/08/31 17:21:14 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayUnsignedIntList.java,v 1.6 2003/10/09 20:51:15 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * This implementation supports all optional methods.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.5 $ $Date: 2003/08/31 17:21:14 $\n+ * @version $Revision: 1.6 $ $Date: 2003/10/09 20:51:15 $\n  * \n  * @author Rodney Waldhoff \n  */\n      * Constructs a list containing the elements of the given collection, \n      * in the order they are returned by that collection's iterator.\n      * \n-     * @see ArrayIntList#addAll(org.apache.commons.collections.primitives.LongCollection)\n+     * @see AbstractLongCollection#addAll(LongCollection)\n      * @param that the non-<code>null</code> collection of <code>int</code>s \n      *        to add\n      * @throws NullPointerException if <i>that</i> is <code>null</code>\n--- a/src/java/org/apache/commons/collections/primitives/CharList.java\n+++ b/src/java/org/apache/commons/collections/primitives/CharList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/CharList.java,v 1.2 2003/08/31 17:21:14 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/CharList.java,v 1.3 2003/10/09 20:51:15 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * @see org.apache.commons.collections.primitives.adapters.ListCharList\n  *\n  * @since Commons Collections 2.2\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:21:14 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/09 20:51:15 $\n  * \n  * @author Rodney Waldhoff \n  */\n      * This contract ensures that this method is consistent with \n      * {@link #equals equals} and with the \n      * {@link java.util.List#hashCode hashCode}\n-     * method of a {@link java.util.List List} of {@link Char}s. \n+     * method of a {@link java.util.List List} of {@link Character}s. \n      * \n      * @return my hash code\n      */\n--- a/src/java/org/apache/commons/collections/primitives/IntCollections.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntCollections.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntCollections.java,v 1.3 2003/08/31 17:21:15 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntCollections.java,v 1.4 2003/10/09 20:51:15 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * The methods of this class all throw a NullPointerException is the \n  * provided collections are null.\n  * \n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:21:15 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/09 20:51:15 $\n  * \n  * @author Rodney Waldhoff \n  */\n     \n     /**\n      * Returns an unmodifiable version of the given non-null IntIterator.\n-     * @param list the non-null IntIterator to wrap in an unmodifiable decorator\n+     * @param iter the non-null IntIterator to wrap in an unmodifiable decorator\n      * @return an unmodifiable version of the given non-null IntIterator\n      * @throws NullPointerException if the given IntIterator is null\n      * @see org.apache.commons.collections.primitives.decorators.UnmodifiableIntIterator#wrap\n         \n     /**\n      * Returns an unmodifiable version of the given non-null IntListIterator.\n-     * @param list the non-null IntListIterator to wrap in an unmodifiable decorator\n+     * @param iter the non-null IntListIterator to wrap in an unmodifiable decorator\n      * @return an unmodifiable version of the given non-null IntListIterator\n      * @throws NullPointerException if the given IntListIterator is null\n      * @see org.apache.commons.collections.primitives.decorators.UnmodifiableIntListIterator#wrap", "timestamp": 1065732675, "metainfo": ""}