{"sha": "4dbcfeffbfef90f72a2cd5439128dd7cd6a89072", "log": "Move input parameter cloning from factory method to the ctor to prevent findbugs warning.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/functors/InstantiateFactory.java\n+++ b/src/main/java/org/apache/commons/collections/functors/InstantiateFactory.java\n      * \n      * @param <T>  the type the factory creates\n      * @param classToInstantiate  the class to instantiate, not null\n-     * @param paramTypes  the constructor parameter types\n-     * @param args  the constructor arguments\n+     * @param paramTypes  the constructor parameter types, cloned\n+     * @param args  the constructor arguments, cloned\n      * @return a new instantiate factory\n      */\n-    public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, Class<?>[] paramTypes,\n+    public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate,\n+                                                    Class<?>[] paramTypes,\n                                                     Object[] args) {\n         if (classToInstantiate == null) {\n             throw new IllegalArgumentException(\"Class to instantiate must not be null\");\n         if (paramTypes == null || paramTypes.length == 0) {\n             return new InstantiateFactory<T>(classToInstantiate);\n         }\n-        paramTypes = paramTypes.clone();\n-        args = args.clone();\n         return new InstantiateFactory<T>(classToInstantiate, paramTypes, args);\n     }\n \n      * Use <code>getInstance</code> if you want that.\n      * \n      * @param classToInstantiate  the class to instantiate\n-     * @param paramTypes  the constructor parameter types, not cloned\n-     * @param args  the constructor arguments, not cloned\n+     * @param paramTypes  the constructor parameter types, cloned\n+     * @param args  the constructor arguments, cloned\n      */\n     public InstantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args) {\n         super();\n         iClassToInstantiate = classToInstantiate;\n-        iParamTypes = paramTypes;\n-        iArgs = args;\n+        iParamTypes = paramTypes.clone();\n+        iArgs = args.clone();\n         findConstructor();\n     }\n \n     private void findConstructor() {\n         try {\n             iConstructor = iClassToInstantiate.getConstructor(iParamTypes);\n-\n         } catch (final NoSuchMethodException ex) {\n             throw new IllegalArgumentException(\"InstantiateFactory: The constructor must exist and be public \");\n         }", "timestamp": 1358870928, "metainfo": ""}