{"sha": "6bf2ec4c869b053b2fe2a8365f8b6f43609abab9", "log": "Convert protected methods to public to handle VerifyError (due to inner classes being unable to see protected methods from another package)   ", "commit": "\n--- a/src/test/org/apache/commons/collections/AbstractTestObject.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestObject.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/AbstractTestObject.java,v 1.1 2003/10/02 22:14:29 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/AbstractTestObject.java,v 1.2 2003/11/18 22:37:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your {@link Object} fails.\n  *\n- * @version $Revision: 1.1 $ $Date: 2003/10/02 22:14:29 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:15 $\n  * \n  * @author Rodney Waldhoff\n  * @author Stephen Colebourne\n      * \n      * @return the object to test\n      */\n-    protected abstract Object makeObject();\n+    public abstract Object makeObject();\n \n     /**\n      * Override this method if a subclass is testing an object\n      * \n      * @return true\n      */\n-    protected boolean supportsEmptyCollections() {\n+    public boolean supportsEmptyCollections() {\n         return true;\n     }\n \n      * \n      * @return true\n      */\n-    protected boolean supportsFullCollections() {\n+    public boolean supportsFullCollections() {\n         return true;\n     }\n \n      * @return The version, or <code>null</code> if this object shouldn't be\n      * tested for compatibility with previous versions.\n      */\n-    protected String getCompatibilityVersion() {\n+    public String getCompatibilityVersion() {\n         return \"1\";\n     }\n \n--- a/src/test/org/apache/commons/collections/BulkTest.java\n+++ b/src/test/org/apache/commons/collections/BulkTest.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/BulkTest.java,v 1.7 2003/11/18 21:28:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/BulkTest.java,v 1.8 2003/11/18 22:37:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *  interpret bulk test methods.\n  *\n  *  @author Paul Jack\n- *  @version $Id: BulkTest.java,v 1.7 2003/11/18 21:28:16 scolebourne Exp $\n+ *  @version $Id: BulkTest.java,v 1.8 2003/11/18 22:37:16 scolebourne Exp $\n  */\n public class BulkTest extends TestCase implements Cloneable {\n \n      *  @return an array of the names of tests to ignore, or null if\n      *   no tests should be ignored\n      */\n-    protected String[] ignoredTests() {\n+    public String[] ignoredTests() {\n         return null;\n     }\n \n--- a/src/test/org/apache/commons/collections/TestBeanMap.java\n+++ b/src/test/org/apache/commons/collections/TestBeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBeanMap.java,v 1.15 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBeanMap.java,v 1.16 2003/11/18 22:37:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Test cases for BeanMap\n  * \n- * @version $Revision: 1.15 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.16 $ $Date: 2003/11/18 22:37:15 $\n  * \n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n     //\n     // Then, I manually added the \"class\" key, which is a property that exists for\n     // all beans (and all objects for that matter.\n-    protected Object[] getSampleKeys() {\n+    public Object[] getSampleKeys() {\n         Object[] keys = new Object[] {\n             \"someIntValue\",\n             \"someLongValue\",\n     private Object objectInFullMap = new Object();\n \n     // note to self: the sample values were created manually\n-    protected Object[] getSampleValues() {\n+    public Object[] getSampleValues() {\n         Object[] values = new Object[] {\n             new Integer(1234),\n             new Long(1298341928234L),\n         return values;\n     }\n \n-    protected Object[] getNewSampleValues() {\n+    public Object[] getNewSampleValues() {\n         Object[] values = new Object[] {\n             new Integer(223),\n             new Long(23341928234L),\n     /**\n      * Values is a dead copy in BeanMap, so refresh each time.\n      */\n-    protected void verifyValues() {\n+    public void verifyValues() {\n         values = map.values();\n         super.verifyValues();\n     }\n      * bean has.  Adding and removing mappings is not possible, thus this\n      * method is overridden to return false.\n      */\n-    protected boolean isPutAddSupported() {\n+    public boolean isPutAddSupported() {\n         return false;\n     }\n \n      * bean has.  Adding and removing mappings is not possible, thus this\n      * method is overridden to return false.\n      */\n-    protected boolean isRemoveSupported() {\n+    public boolean isRemoveSupported() {\n         return false;\n     }\n \n-    protected Map makeFullMap() {\n+    public Map makeFullMap() {\n         // note: These values must match (i.e. .equals() must return true)\n         // those returned from getSampleValues().\n         BeanWithProperties bean = new BeanWithProperties();\n         return new BeanMap(bean);\n     }\n \n-    protected Map makeEmptyMap() {\n+    public Map makeEmptyMap() {\n         return new BeanMap();\n     }\n \n-    protected String[] ignoredTests() {\n+    public String[] ignoredTests() {\n         // Ignore the serialization tests on collection views.\n         return new String[] {\n          \"TestBeanMap.bulkTestMapEntrySet.testCanonicalEmptyCollectionExists\",\n--- a/src/test/org/apache/commons/collections/TestBinaryHeap.java\n+++ b/src/test/org/apache/commons/collections/TestBinaryHeap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBinaryHeap.java,v 1.12 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBinaryHeap.java,v 1.13 2003/11/18 22:37:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests the BinaryHeap.\n  * \n- * @version $Revision: 1.12 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.13 $ $Date: 2003/11/18 22:37:16 $\n  * \n  * @author Michael A. Smith\n  */\n     }\n \n     //-----------------------------------------------------------------------  \n-    protected void verify() {\n+    public void verify() {\n         super.verify();\n         BinaryHeap heap = (BinaryHeap) collection;\n \n      * Overridden because UnboundedFifoBuffer isn't fail fast.\n      * @return false\n      */\n-    protected boolean isFailFastSupported() {\n+    public boolean isFailFastSupported() {\n         return false;\n     }\n \n     //-----------------------------------------------------------------------  \n-    protected Collection makeConfirmedCollection() {\n+    public Collection makeConfirmedCollection() {\n         return new ArrayList();\n     }\n \n-    protected Collection makeConfirmedFullCollection() {\n+    public Collection makeConfirmedFullCollection() {\n         ArrayList list = new ArrayList();\n         list.addAll(Arrays.asList(getFullElements()));\n         return list;\n     /**\n      * Return a new, empty {@link Object} to used for testing.\n      */\n-    protected Collection makeCollection() {\n+    public Collection makeCollection() {\n         return new BinaryHeap();\n     }\n \n     //-----------------------------------------------------------------------  \n-    protected Object[] getFullElements() {\n+    public Object[] getFullElements() {\n         return getFullNonNullStringElements();\n     }\n \n-    protected Object[] getOtherElements() {\n+    public Object[] getOtherElements() {\n         return getOtherNonNullStringElements();\n     }\n \n--- a/src/test/org/apache/commons/collections/TestBoundedFifoBuffer.java\n+++ b/src/test/org/apache/commons/collections/TestBoundedFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBoundedFifoBuffer.java,v 1.10 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBoundedFifoBuffer.java,v 1.11 2003/11/18 22:37:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Test cases for BoundedFifoBuffer.\n  * \n- * @version $Revision: 1.10 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.11 $ $Date: 2003/11/18 22:37:15 $\n  * \n  * @author Paul Jack\n  */\n      *  the buffer contains the same elements in the same sequence as the\n      *  list.\n      */\n-    protected void verify() {\n+    public void verify() {\n         super.verify();\n         Iterator iterator1 = collection.iterator();\n         Iterator iterator2 = confirmed.iterator();\n      * Overridden because UnboundedFifoBuffer doesn't allow null elements.\n      * @return false\n      */\n-    protected boolean isNullSupported() {\n+    public boolean isNullSupported() {\n         return false;\n     }\n \n      * Overridden because UnboundedFifoBuffer isn't fail fast.\n      * @return false\n      */\n-    protected boolean isFailFastSupported() {\n+    public boolean isFailFastSupported() {\n         return false;\n     }\n \n      *\n      *  @return an empty ArrayList\n      */\n-    protected Collection makeConfirmedCollection() {\n+    public Collection makeConfirmedCollection() {\n         return new ArrayList();\n     }\n \n      *\n      *  @return a full ArrayList\n      */\n-    protected Collection makeConfirmedFullCollection() {\n+    public Collection makeConfirmedFullCollection() {\n         Collection c = makeConfirmedCollection();\n         c.addAll(java.util.Arrays.asList(getFullElements()));\n         return c;\n      *  \n      *  @return an empty BoundedFifoBuffer\n      */\n-    protected Collection makeCollection() {\n+    public Collection makeCollection() {\n         return new BoundedFifoBuffer(100);\n     }\n \n--- a/src/test/org/apache/commons/collections/TestCircularFifoBuffer.java\n+++ b/src/test/org/apache/commons/collections/TestCircularFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCircularFifoBuffer.java,v 1.6 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCircularFifoBuffer.java,v 1.7 2003/11/18 22:37:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Test cases for CircularFifoBuffer.\n  * \n- * @version $Revision: 1.6 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/18 22:37:16 $\n  * \n  * @author Stephen Colebourne\n  */\n      *  the buffer contains the same elements in the same sequence as the\n      *  list.\n      */\n-    protected void verify() {\n+    public void verify() {\n         super.verify();\n         Iterator iterator1 = collection.iterator();\n         Iterator iterator2 = confirmed.iterator();\n      * Overridden because UnboundedFifoBuffer doesn't allow null elements.\n      * @return false\n      */\n-    protected boolean isNullSupported() {\n+    public boolean isNullSupported() {\n         return false;\n     }\n \n      * Overridden because UnboundedFifoBuffer isn't fail fast.\n      * @return false\n      */\n-    protected boolean isFailFastSupported() {\n+    public boolean isFailFastSupported() {\n         return false;\n     }\n \n      *\n      * @return an empty ArrayList\n      */\n-    protected Collection makeConfirmedCollection() {\n+    public Collection makeConfirmedCollection() {\n         return new ArrayList();\n     }\n \n      *\n      * @return a full ArrayList\n      */\n-    protected Collection makeConfirmedFullCollection() {\n+    public Collection makeConfirmedFullCollection() {\n         Collection c = makeConfirmedCollection();\n         c.addAll(java.util.Arrays.asList(getFullElements()));\n         return c;\n      *  \n      * @return an empty BoundedFifoBuffer\n      */\n-    protected Collection makeCollection() {\n+    public Collection makeCollection() {\n         return new CircularFifoBuffer(100);\n     }\n \n--- a/src/test/org/apache/commons/collections/TestCursorableLinkedList.java\n+++ b/src/test/org/apache/commons/collections/TestCursorableLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCursorableLinkedList.java,v 1.15 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCursorableLinkedList.java,v 1.16 2003/11/18 22:37:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Test class.\n  * \n- * @version $Revision: 1.15 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.16 $ $Date: 2003/11/18 22:37:15 $\n  * \n  * @author Rodney Waldhoff\n  * @author Simon Kitching\n      *\n      *  @return an array of sublist serialization test names \n      */\n-    protected String[] ignoredTests() {\n+    public String[] ignoredTests() {\n         ArrayList list = new ArrayList();\n         String prefix = \"TestCursorableLinkedList\";\n         String bulk = \".bulkTestSubList\";\n--- a/src/test/org/apache/commons/collections/TestDoubleOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/TestDoubleOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestDoubleOrderedMap.java,v 1.12 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestDoubleOrderedMap.java,v 1.13 2003/11/18 22:37:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Map that does not support duplicate keys, duplicate \n  * values, or null values.\n  * \n- * @version $Revision: 1.12 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.13 $ $Date: 2003/11/18 22:37:15 $\n  * \n  * @author Marc Johnson\n  * @author Stephen Colebourne\n     /**\n      *  The default comparator in double ordered map does not allow null keys.\n      **/\n-    protected boolean isAllowNullKey() {\n+    public boolean isAllowNullKey() {\n         return false;\n     }\n \n      *  The default comparator in double ordered map does not allow null keys,\n      *  and values are keys in this map.\n      **/\n-    protected boolean isAllowNullValue() {\n+    public boolean isAllowNullValue() {\n         return false;\n     }\n \n     /**\n      *  Double ordered map does not support duplicate values\n      **/\n-    protected boolean isAllowDuplicateValues() {\n+    public boolean isAllowDuplicateValues() {\n         return false;\n     }\n     \n      * differs from the standard Map contract which would replace the value\n      * for that key and return it.\n      */\n-    protected boolean isPutChangeSupported() {\n+    public boolean isPutChangeSupported() {\n         return false;\n     }\n \n     /**\n      * setValue() is not supported as it can change the map.\n      */\n-    protected boolean isSetValueSupported() {\n+    public boolean isSetValueSupported() {\n         return false;\n     }\n \n-    protected Map makeEmptyMap() {\n+    public Map makeEmptyMap() {\n         return new DoubleOrderedMap();\n     }\n \n--- a/src/test/org/apache/commons/collections/TestFlat3Map.java\n+++ b/src/test/org/apache/commons/collections/TestFlat3Map.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestFlat3Map.java,v 1.3 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestFlat3Map.java,v 1.4 2003/11/18 22:37:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.3 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/18 22:37:16 $\n  * \n  * @author Stephen Colebourne\n  */\n         return BulkTest.makeSuite(TestFlat3Map.class);\n     }\n \n-    protected Map makeEmptyMap() {\n+    public Map makeEmptyMap() {\n         return new Flat3Map();\n     }\n \n             super(\"TestFlatMapIterator\");\n         }\n         \n-        protected Object[] addSetValues() {\n+        public Object[] addSetValues() {\n             return TestFlat3Map.this.getNewSampleValues();\n         }\n         \n-        protected boolean supportsRemove() {\n+        public boolean supportsRemove() {\n             return TestFlat3Map.this.isRemoveSupported();\n         }\n \n-        protected boolean supportsSetValue() {\n+        public boolean supportsSetValue() {\n             return TestFlat3Map.this.isSetValueSupported();\n         }\n \n-        protected MapIterator makeEmptyMapIterator() {\n+        public MapIterator makeEmptyMapIterator() {\n             resetEmpty();\n             return ((Flat3Map) TestFlat3Map.this.map).mapIterator();\n         }\n \n-        protected MapIterator makeFullMapIterator() {\n+        public MapIterator makeFullMapIterator() {\n             resetFull();\n             return ((Flat3Map) TestFlat3Map.this.map).mapIterator();\n         }\n         \n-        protected Map getMap() {\n+        public Map getMap() {\n             // assumes makeFullMapIterator() called first\n             return TestFlat3Map.this.map;\n         }\n         \n-        protected Map getConfirmedMap() {\n+        public Map getConfirmedMap() {\n             // assumes makeFullMapIterator() called first\n             return TestFlat3Map.this.confirmed;\n         }\n         \n-        protected void verify() {\n+        public void verify() {\n             super.verify();\n             TestFlat3Map.this.verify();\n         }\n--- a/src/test/org/apache/commons/collections/TestHashBag.java\n+++ b/src/test/org/apache/commons/collections/TestHashBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestHashBag.java,v 1.7 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestHashBag.java,v 1.8 2003/11/18 22:37:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Extension of {@link TestBag} for exercising the {@link HashBag}\n  * implementation.\n  * \n- * @version $Revision: 1.7 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/18 22:37:16 $\n  *\n  * @author Chuck Burdick\n  */\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    protected Bag makeBag() {\n+    public Bag makeBag() {\n         return new HashBag();\n     }\n     \n--- a/src/test/org/apache/commons/collections/TestLRUMap.java\n+++ b/src/test/org/apache/commons/collections/TestLRUMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestLRUMap.java,v 1.26 2003/11/01 18:47:18 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestLRUMap.java,v 1.27 2003/11/18 22:37:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests LRUMap.\n  * \n- * @version $Revision: 1.26 $ $Date: 2003/11/01 18:47:18 $\n+ * @version $Revision: 1.27 $ $Date: 2003/11/18 22:37:15 $\n  * \n  * @author James Strachan\n  * @author Morgan Delagrange\n     /**\n      * Override as test uses iterator() and getKey() in combination which doesn't work.\n      */\n-    protected String[] ignoredTests() {\n+    public String[] ignoredTests() {\n         return new String[] {\"TestLRUMap.bulkTestMapEntrySet.testMapEntrySetIteratorEntry\"};\n     }\n \n--- a/src/test/org/apache/commons/collections/TestLinkedList.java\n+++ b/src/test/org/apache/commons/collections/TestLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestLinkedList.java,v 1.6 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestLinkedList.java,v 1.7 2003/11/18 22:37:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your {@link List} fails.\n  * \n- * @version $Revision: 1.6 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/18 22:37:15 $\n  *\n  * @author Rich Dougherty\n  */\n         super(testName);\n     }\n \n-    protected List makeEmptyList() {\n+    public List makeEmptyList() {\n         return makeEmptyLinkedList();\n     }\n \n-    protected List makeFullList() {\n+    public List makeFullList() {\n         return makeFullLinkedList();\n     }\n \n     /**\n      *  Returns an empty {@link ArrayList}.\n      */\n-    protected Collection makeConfirmedCollection() {\n+    public Collection makeConfirmedCollection() {\n         return new LinkedList();\n     }\n \n     /**\n      *  Returns a full {@link ArrayList}.\n      */\n-    protected Collection makeConfirmedFullCollection() {\n+    public Collection makeConfirmedFullCollection() {\n         List list = new LinkedList();\n         list.addAll(Arrays.asList(getFullElements()));\n         return list;\n--- a/src/test/org/apache/commons/collections/TestMultiHashMap.java\n+++ b/src/test/org/apache/commons/collections/TestMultiHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMultiHashMap.java,v 1.14 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMultiHashMap.java,v 1.15 2003/11/18 22:37:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Unit Tests for <code>MultiHashMap</code>.\n  * \n- * @version $Revision: 1.14 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.15 $ $Date: 2003/11/18 22:37:16 $\n  *\n  * @author Unknown\n  */\n         return \"2\";\n     }\n \n-    protected Map makeEmptyMap() {\n+    public Map makeEmptyMap() {\n         return new MultiHashMap();\n     }\n     \n--- a/src/test/org/apache/commons/collections/TestReferenceMap.java\n+++ b/src/test/org/apache/commons/collections/TestReferenceMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestReferenceMap.java,v 1.14 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestReferenceMap.java,v 1.15 2003/11/18 22:37:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests for ReferenceMap. \n  * \n- * @version $Revision: 1.14 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.15 $ $Date: 2003/11/18 22:37:15 $\n  *\n  * @author Paul Jack\n  */\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    protected Map makeEmptyMap() {\n+    public Map makeEmptyMap() {\n         ReferenceMap map = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.WEAK);\n         return map;\n     }\n--- a/src/test/org/apache/commons/collections/TestSequencedHashMap.java\n+++ b/src/test/org/apache/commons/collections/TestSequencedHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSequencedHashMap.java,v 1.23 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSequencedHashMap.java,v 1.24 2003/11/18 22:37:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Be sure to use the \"labRat\" instance whenever possible,\n  * so that subclasses will be tested correctly.\n  * \n- * @version $Revision: 1.23 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.24 $ $Date: 2003/11/18 22:37:15 $\n  * \n  * @author Morgan Delagrange\n  * @author Daniel Rall\n         labRat = (SequencedHashMap) makeEmptyMap();\n     }\n \n-    protected Map makeEmptyMap() {\n+    public Map makeEmptyMap() {\n         return new SequencedHashMap();\n     }\n \n         assertEquals(\"test with non-existing key failed\", -1, labRat.indexOf(\"NonExistingKey\"));\n     }\n     \n-    protected void tearDown() throws Exception {\n+    public void tearDown() throws Exception {\n         labRat = null;\n     }\n }\n--- a/src/test/org/apache/commons/collections/TestStaticBucketMap.java\n+++ b/src/test/org/apache/commons/collections/TestStaticBucketMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestStaticBucketMap.java,v 1.8 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestStaticBucketMap.java,v 1.9 2003/11/18 22:37:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Unit tests \n  * {@link org.apache.commons.collections.StaticBucketMap}.\n  * \n- * @version $Revision: 1.8 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/18 22:37:16 $\n  * \n  * @author Michael A. Smith\n  */\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    protected Map makeEmptyMap() {\n+    public Map makeEmptyMap() {\n         return new StaticBucketMap(30);\n     }\n \n-    protected String[] ignoredTests() {\n+    public String[] ignoredTests() {\n         String pre = \"TestStaticBucketMap.bulkTestMap\";\n         String post = \".testCollectionIteratorFailFast\";\n         return new String[] {\n--- a/src/test/org/apache/commons/collections/TestTreeBag.java\n+++ b/src/test/org/apache/commons/collections/TestTreeBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTreeBag.java,v 1.7 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTreeBag.java,v 1.8 2003/11/18 22:37:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Extension of {@link TestBag} for exercising the {@link TreeBag}\n  * implementation.\n  * \n- * @version $Revision: 1.7 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/18 22:37:16 $\n  *\n  * @author Chuck Burdick\n  */\n       junit.textui.TestRunner.main(testCaseName);\n    }\n \n-   protected Bag makeBag() {\n+   public Bag makeBag() {\n       return new TreeBag();\n    }\n \n--- a/src/test/org/apache/commons/collections/TestUnboundedFifoBuffer.java\n+++ b/src/test/org/apache/commons/collections/TestUnboundedFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestUnboundedFifoBuffer.java,v 1.9 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestUnboundedFifoBuffer.java,v 1.10 2003/11/18 22:37:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Test cases for UnboundedFifoBuffer.\n  * \n- * @version $Revision: 1.9 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/18 22:37:16 $\n  * \n  * @author Unknown\n  */\n      *  Verifies that the ArrayList has the same elements in the same \n      *  sequence as the UnboundedFifoBuffer.\n      */\n-    protected void verify() {\n+    public void verify() {\n         super.verify();\n         Iterator iterator1 = collection.iterator();\n         Iterator iterator2 = confirmed.iterator();\n      * Overridden because UnboundedFifoBuffer doesn't allow null elements.\n      * @return false\n      */\n-    protected boolean isNullSupported() {\n+    public boolean isNullSupported() {\n         return false;\n     }\n \n      * Overridden because UnboundedFifoBuffer isn't fail fast.\n      * @return false\n      */\n-    protected boolean isFailFastSupported() {\n+    public boolean isFailFastSupported() {\n         return false;\n     }\n \n      *\n      *  @return an empty ArrayList\n      */\n-    protected Collection makeConfirmedCollection() {\n+    public Collection makeConfirmedCollection() {\n         return new ArrayList();\n     }\n \n      *\n      *  @return a full ArrayList\n      */\n-    protected Collection makeConfirmedFullCollection() {\n+    public Collection makeConfirmedFullCollection() {\n         Collection c = makeConfirmedCollection();\n         c.addAll(java.util.Arrays.asList(getFullElements()));\n         return c;\n      *\n      *  @return an empty UnboundedFifoBuffer\n      */\n-    protected Collection makeCollection() {\n+    public Collection makeCollection() {\n         return new UnboundedFifoBuffer(5);\n     }\n \n--- a/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n+++ b/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/AbstractTestBag.java,v 1.1 2003/11/16 22:15:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/AbstractTestBag.java,v 1.2 2003/11/18 22:37:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your {@link Bag} fails.\n  *\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 22:15:10 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:15 $\n  * \n  * @author Chuck Burdick\n  * @author Stephen Colebourne\n      * \n      * @return the bag to be tested\n      */\n-    protected abstract Bag makeBag();\n+    public abstract Bag makeBag();\n \n     /**\n      * Implements the superclass method to return the Bag.\n      * \n      * @return the bag to be tested\n      */\n-    protected Object makeObject() {\n+    public Object makeObject() {\n         return makeBag();\n     }\n \n--- a/src/test/org/apache/commons/collections/bag/TestPredicatedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestPredicatedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestPredicatedBag.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestPredicatedBag.java,v 1.3 2003/11/18 22:37:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:15 $\n  * \n  * @author Phil Steitz\n  */\n         return PredicatedBag.decorate(bag, predicate);\n     }\n \n-    protected Bag makeBag() {\n+    public Bag makeBag() {\n         return decorateBag(new HashBag(), truePredicate);\n     }\n     \n--- a/src/test/org/apache/commons/collections/bag/TestPredicatedSortedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestPredicatedSortedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestPredicatedSortedBag.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestPredicatedSortedBag.java,v 1.3 2003/11/18 22:37:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:15 $\n  * \n  * @author Phil Steitz\n  */\n         return PredicatedSortedBag.decorate(bag, predicate);\n     }\n     \n-    protected Bag makeBag() {\n+    public Bag makeBag() {\n         return decorateBag(emptyBag, truePredicate);\n     }\n     \n--- a/src/test/org/apache/commons/collections/bag/TestTransformedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestTransformedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTransformedBag.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTransformedBag.java,v 1.3 2003/11/18 22:37:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:15 $\n  * \n  * @author Stephen Colebourne\n  */\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    protected Bag makeBag() {\n+    public Bag makeBag() {\n         return TransformedBag.decorate(new HashBag(), TestTransformedCollection.NOOP_TRANSFORMER);\n     }\n \n--- a/src/test/org/apache/commons/collections/bag/TestTransformedSortedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestTransformedSortedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTransformedSortedBag.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTransformedSortedBag.java,v 1.3 2003/11/18 22:37:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:15 $\n  * \n  * @author Stephen Colebourne\n  */\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    protected Bag makeBag() {\n+    public Bag makeBag() {\n         return TransformedSortedBag.decorate(new TreeBag(), TestTransformedCollection.NOOP_TRANSFORMER);\n     }\n \n--- a/src/test/org/apache/commons/collections/bag/TestTypedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestTypedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTypedBag.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTypedBag.java,v 1.3 2003/11/18 22:37:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:15 $\n  * \n  * @author Phil Steitz\n  */\n         return TypedBag.decorate(bag, claz);\n     }\n \n-    protected Bag makeBag() {\n+    public Bag makeBag() {\n         return decorateBag(new HashBag(), objectClass);\n     }\n     \n--- a/src/test/org/apache/commons/collections/bag/TestTypedSortedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestTypedSortedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTypedSortedBag.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTypedSortedBag.java,v 1.3 2003/11/18 22:37:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:15 $\n  * \n  * @author Phil Steitz\n  */\n         return TypedSortedBag.decorate(bag, claz);\n     }\n \n-    protected Bag makeBag() {\n+    public Bag makeBag() {\n         return decorateBag(emptyBag, objectClass);\n     }\n     \n--- a/src/test/org/apache/commons/collections/bidimap/AbstractTestBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/AbstractTestBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestBidiMap.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestBidiMap.java,v 1.3 2003/11/18 22:37:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Abstract test class for {@link BidiMap} methods and contracts.\n  * \n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:16 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n      * \n      * @return an empty <code>BidiMap</code> implementation.\n      */\n-    protected abstract BidiMap makeEmptyBidiMap();\n+    public abstract BidiMap makeEmptyBidiMap();\n \n     /**\n      * Override to create a full <code>BidiMap</code> other than the default.\n      * \n      * @return a full <code>BidiMap</code> implementation.\n      */\n-    protected BidiMap makeFullBidiMap() {\n+    public BidiMap makeFullBidiMap() {\n         final BidiMap map = makeEmptyBidiMap();\n         for (int i = 0; i < entries.length; i++) {\n             map.put(entries[i][0], entries[i][1]);\n     /**\n      * Override to return the empty BidiMap.\n      */\n-    protected final  Map makeEmptyMap() {\n+    public final  Map makeEmptyMap() {\n         return makeEmptyBidiMap();\n     }\n \n     /**\n      * Override to indicate to AbstractTestMap this is a BidiMap.\n      */\n-    protected boolean isAllowDuplicateValues() {\n+    public boolean isAllowDuplicateValues() {\n         return false;\n     }\n     \n     /**\n      * Override as DualHashBidiMap didn't exist until version 3.\n      */\n-    protected String getCompatibilityVersion() {\n+    public String getCompatibilityVersion() {\n         return \"3\";\n     }\n \n      * <p>\n      * This implementation checks the inverse map as well.\n      */\n-    protected void verify() {\n+    public void verify() {\n         verifyInverse();\n         super.verify();\n     }\n \n-    protected void verifyInverse() {\n+    public void verifyInverse() {\n         assertEquals(map.size(), ((BidiMap) map).inverseBidiMap().size());\n         Map map1 = new HashMap(map);\n         Map map2 = new HashMap(((BidiMap) map).inverseBidiMap());\n             super();\n             this.main = main;\n         }\n-        protected BidiMap makeEmptyBidiMap() {\n+        public BidiMap makeEmptyBidiMap() {\n             return main.makeEmptyBidiMap().inverseBidiMap();\n         }\n-        protected BidiMap makeFullBidiMap() {\n+        public BidiMap makeFullBidiMap() {\n             return main.makeFullBidiMap().inverseBidiMap();\n         }\n-        protected Object[] getSampleKeys() {\n+        public Object[] getSampleKeys() {\n             return main.getSampleValues();\n         }\n-        protected Object[] getSampleValues() {\n+        public Object[] getSampleValues() {\n             return main.getSampleKeys();\n         }\n         \n-        protected String getCompatibilityVersion() {\n+        public String getCompatibilityVersion() {\n             return main.getCompatibilityVersion();\n         }\n-        protected boolean isAllowNullKey() {\n+        public boolean isAllowNullKey() {\n             return main.isAllowNullKey();\n         }\n-        protected boolean isAllowNullValue() {\n+        public boolean isAllowNullValue() {\n             return main.isAllowNullValue();\n         }\n-        protected boolean isPutAddSupported() {\n+        public boolean isPutAddSupported() {\n             return main.isPutAddSupported();\n         }\n-        protected boolean isPutChangeSupported() {\n+        public boolean isPutChangeSupported() {\n             return main.isPutChangeSupported();\n         }\n-        protected boolean isSetValueSupported() {\n+        public boolean isSetValueSupported() {\n             return main.isSetValueSupported();\n         }\n-        protected boolean isRemoveSupported() {\n+        public boolean isRemoveSupported() {\n             return main.isRemoveSupported();\n         }\n \n             super(\"TestBidiMapIterator\");\n         }\n         \n-        protected Object[] addSetValues() {\n+        public Object[] addSetValues() {\n             return AbstractTestBidiMap.this.getNewSampleValues();\n         }\n         \n-        protected boolean supportsRemove() {\n+        public boolean supportsRemove() {\n             return AbstractTestBidiMap.this.isRemoveSupported();\n         }\n \n-        protected boolean supportsSetValue() {\n+        public boolean supportsSetValue() {\n             return AbstractTestBidiMap.this.isSetValueSupported();\n         }\n \n-        protected MapIterator makeEmptyMapIterator() {\n+        public MapIterator makeEmptyMapIterator() {\n             resetEmpty();\n             return ((BidiMap) AbstractTestBidiMap.this.map).mapIterator();\n         }\n \n-        protected MapIterator makeFullMapIterator() {\n+        public MapIterator makeFullMapIterator() {\n             resetFull();\n             return ((BidiMap) AbstractTestBidiMap.this.map).mapIterator();\n         }\n         \n-        protected Map getMap() {\n+        public Map getMap() {\n             // assumes makeFullMapIterator() called first\n             return AbstractTestBidiMap.this.map;\n         }\n         \n-        protected Map getConfirmedMap() {\n+        public Map getConfirmedMap() {\n             // assumes makeFullMapIterator() called first\n             return AbstractTestBidiMap.this.confirmed;\n         }\n         \n-        protected void verify() {\n+        public void verify() {\n             super.verify();\n             AbstractTestBidiMap.this.verify();\n         }\n--- a/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java,v 1.3 2003/11/16 22:15:11 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java,v 1.4 2003/11/18 22:37:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Abstract test class for {@link SortedBidiMap} methods and contracts.\n  * \n- * @version $Revision: 1.3 $ $Date: 2003/11/16 22:15:11 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/18 22:37:16 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n     }\n \n     //-----------------------------------------------------------------------\n-    protected boolean isAllowNullKey() {\n+    public boolean isAllowNullKey() {\n         return false;\n     }\n-    protected boolean isAllowNullValue() {\n+    public boolean isAllowNullValue() {\n         return false;\n     }\n-    protected Map makeConfirmedMap() {\n+    public Map makeConfirmedMap() {\n         return new TreeMap();\n     }\n \n--- a/src/test/org/apache/commons/collections/bidimap/TestDualHashBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestDualHashBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/TestDualHashBidiMap.java,v 1.1 2003/11/16 20:35:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/TestDualHashBidiMap.java,v 1.2 2003/11/18 22:37:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/11/16 20:35:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:16 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n         super(testName);\n     }\n \n-    protected BidiMap makeEmptyBidiMap() {\n+    public BidiMap makeEmptyBidiMap() {\n         return new DualHashBidiMap();\n     }\n \n     /**\n      * Override to prevent infinite recursion of tests.\n      */\n-    protected String[] ignoredTests() {\n+    public String[] ignoredTests() {\n         return new String[] {\"TestDualHashBidiMap.bulkTestInverseMap.bulkTestInverseMap\"};\n     }\n     \n--- a/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap.java,v 1.1 2003/11/16 20:35:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap.java,v 1.2 2003/11/18 22:37:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/11/16 20:35:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:16 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n         super(testName);\n     }\n \n-    protected BidiMap makeEmptyBidiMap() {\n+    public BidiMap makeEmptyBidiMap() {\n         return new DualTreeBidiMap();\n     }\n \n     /**\n      * Override to prevent infinite recursion of tests.\n      */\n-    protected String[] ignoredTests() {\n+    public String[] ignoredTests() {\n         return new String[] {\"TestDualTreeBidiMap.bulkTestInverseMap.bulkTestInverseMap\"};\n     }\n     \n--- a/src/test/org/apache/commons/collections/bidimap/TestTreeBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestTreeBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/TestTreeBidiMap.java,v 1.1 2003/11/16 20:35:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/TestTreeBidiMap.java,v 1.2 2003/11/18 22:37:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/11/16 20:35:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:16 $\n  * \n  * @author Stephen Colebourne\n  */\n         super(testName);\n     }\n \n-    protected BidiMap makeEmptyBidiMap() {\n+    public BidiMap makeEmptyBidiMap() {\n         return new TreeBidiMap();\n     }\n     \n-    protected Map makeConfirmedMap() {\n+    public Map makeConfirmedMap() {\n         return new TreeMap();\n     }\n \n     /**\n      * Override to prevent infinite recursion of tests.\n      */\n-    protected String[] ignoredTests() {\n+    public String[] ignoredTests() {\n         return new String[] {\"TestTreeBidiMap.bulkTestInverseMap.bulkTestInverseMap\"};\n     }\n     \n-    protected boolean isAllowNullKey() {\n+    public boolean isAllowNullKey() {\n         return false;\n     }\n     \n-    protected boolean isAllowNullValue() {\n+    public boolean isAllowNullValue() {\n         return false;\n     }\n     \n-    protected boolean isSetValueSupported() {\n+    public boolean isSetValueSupported() {\n         return false;\n     }\n     \n--- a/src/test/org/apache/commons/collections/buffer/TestBlockingBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestBlockingBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/buffer/TestBlockingBuffer.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/buffer/TestBlockingBuffer.java,v 1.2 2003/11/18 22:37:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $\n+ * @version $Revision: 1.2 $\n  * \n  * @author Janek Bogucki\n  * @author Phil Steitz\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    protected Object makeObject() {\n+    public Object makeObject() {\n         return BlockingBuffer.decorate(new MyBuffer());\n     }\n \n--- a/src/test/org/apache/commons/collections/collection/AbstractTestCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/AbstractTestCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/AbstractTestCollection.java,v 1.1 2003/11/16 22:15:11 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/AbstractTestCollection.java,v 1.2 2003/11/18 22:37:18 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * You should create a concrete subclass of this class to test any custom\n  * {@link Collection} implementation.  At minimum, you'll have to \n  * implement the {@link #makeCollection()} method.  You might want to \n- * override some of the additional protected methods as well:\n+ * override some of the additional public methods as well:\n  * <p>\n  * <b>Element Population Methods</b>\n  * <p>\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your {@link Collection} fails.\n  *\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 22:15:11 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:18 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n     /** \n      *  A collection instance that will be used for testing.\n      */\n-    protected Collection collection;\n+    public Collection collection;\n \n     /** \n      *  Confirmed collection.  This is an instance of a collection that is\n      *  collection, and then calling verify() to make sure your collection\n      *  still matches the confirmed collection.\n      */\n-    protected Collection confirmed;\n+    public Collection confirmed;\n \n     /**\n      * JUnit constructor.\n      *  should provide additional tests on iterator.remove() to make sure the\n      *  proper elements are removed when remove() is called on the iterator.\n      **/\n-    protected boolean areEqualElementsDistinguishable() {\n+    public boolean areEqualElementsDistinguishable() {\n         return false;\n     }\n \n      *  Default implementation returns true.  Override if your collection\n      *  class does not support add or addAll.\n      */\n-    protected boolean isAddSupported() {\n+    public boolean isAddSupported() {\n         return true;\n     }\n \n      *  Default implementation returns true.  Override if your collection\n      *  class does not support removal operations.\n      */\n-    protected boolean isRemoveSupported() {\n+    public boolean isRemoveSupported() {\n         return true;\n     }\n \n      * Returns true to indicate that the collection supports holding null.\n      * The default implementation returns true;\n      */\n-    protected boolean isNullSupported() {\n+    public boolean isNullSupported() {\n         return true;\n     }\n \n      * Returns true to indicate that the collection supports fail fast iterators.\n      * The default implementation returns true;\n      */\n-    protected boolean isFailFastSupported() {\n+    public boolean isFailFastSupported() {\n         return false;\n     }\n \n      *  Verifies that {@link #collection} and {@link #confirmed} have \n      *  identical state.\n      */\n-    protected void verify() {\n+    public void verify() {\n         int confirmedSize = confirmed.size();\n         assertEquals(\"Collection size should match confirmed collection's\",\n                      confirmedSize, collection.size());\n      *  collections.  Invoke this method before performing a modification\n      *  test.\n      */\n-    protected void resetEmpty() {\n+    public void resetEmpty() {\n         this.collection = makeCollection();\n         this.confirmed = makeConfirmedCollection();\n     }\n      *  collections.  Invoke this method before performing a modification\n      *  test.\n      */\n-    protected void resetFull() {\n+    public void resetFull() {\n         this.collection = makeFullCollection();\n         this.confirmed = makeConfirmedFullCollection();\n     }\n      *\n      *  @return a confirmed empty collection\n      */\n-    protected abstract Collection makeConfirmedCollection();\n+    public abstract Collection makeConfirmedCollection();\n \n     /**\n      *  Returns a confirmed full collection.\n      *\n      *  @return a confirmed full collection\n      */\n-    protected abstract Collection makeConfirmedFullCollection();\n+    public abstract Collection makeConfirmedFullCollection();\n \n     /**\n      * Return a new, empty {@link Collection} to be used for testing.\n      */\n-    protected abstract Collection makeCollection();\n+    public abstract Collection makeCollection();\n \n     /**\n      *  Returns a full collection to be used for testing.  The collection\n      *  the results of {@link #getFullElements()}.  Override this default\n      *  if your collection doesn't support addAll.\n      */\n-    protected Collection makeFullCollection() {\n+    public Collection makeFullCollection() {\n         Collection c = makeCollection();\n         c.addAll(Arrays.asList(getFullElements()));\n         return c;\n     /**\n      *  Returns an empty collection for Object tests.\n      */\n-    protected Object makeObject() {\n+    public Object makeObject() {\n         return makeCollection();\n     }\n \n     /**\n      * Creates a new Map Entry that is independent of the first and the map.\n      */\n-    protected Map.Entry cloneMapEntry(Map.Entry entry) {\n+    public Map.Entry cloneMapEntry(Map.Entry entry) {\n         HashMap map = new HashMap();\n         map.put(entry.getKey(), entry.getValue());\n         return (Map.Entry) map.entrySet().iterator().next();\n      *  override {@link #makeFullCollection()}, you <I>must</I> override\n      *  this method to reflect the contents of a full collection.\n      */\n-    protected Object[] getFullElements() {\n+    public Object[] getFullElements() {\n         if (isNullSupported()) {\n             ArrayList list = new ArrayList();\n             list.addAll(Arrays.asList(getFullNonNullElements()));\n      *  to an empty or full collection, so if your collection restricts\n      *  certain kinds of elements, you should override this method.\n      */\n-    protected Object[] getOtherElements() {\n+    public Object[] getOtherElements() {\n         return getOtherNonNullElements();\n     }\n     \n      *  the results of this method if your collection does not support\n      *  the null element.\n      */\n-    protected Object[] getFullNonNullElements() {\n+    public Object[] getFullNonNullElements() {\n         return new Object[] {\n             new String(\"\"),\n             new String(\"One\"),\n      *  {@link #getOtherElements()}.  Includes many objects\n      *  of different types.\n      */\n-    protected Object[] getOtherNonNullElements() {\n+    public Object[] getOtherNonNullElements() {\n         return new Object[] {\n             new Integer(0),\n             new Float(0),\n      *  the results of this method if your collection does not support\n      *  heterogenous elements or the null element.\n      */\n-    protected Object[] getFullNonNullStringElements() {\n+    public Object[] getFullNonNullStringElements() {\n         return new Object[] {\n             \"If\",\"the\",\"dull\",\"substance\",\"of\",\"my\",\"flesh\",\"were\",\"thought\",\n             \"Injurious\",\"distance\",\"could\",\"not\",\"stop\",\"my\",\"way\",\n      *  the results of this method if your collection does not support\n      *  heterogenous elements or the null element.\n      */\n-    protected Object[] getOtherNonNullStringElements() {\n+    public Object[] getOtherNonNullStringElements() {\n         return new Object[] {\n             \"For\",\"then\",\"despite\",/* of */\"space\",\"I\",\"would\",\"be\",\"brought\",\n             \"From\",\"limits\",\"far\",\"remote\",\"where\",\"thou\",\"dost\",\"stay\"\n--- a/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java,v 1.3 2003/11/18 22:37:18 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * {@link CompositeCollection} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:18 $\n  * \n  * @author Brian McCallister\n  * @author Phil Steitz\n     /**\n      * Run stock collection tests without Mutator, so turn off add, remove\n      */\n-    protected boolean isAddSupported() {\n+    public boolean isAddSupported() {\n         return false;\n     }\n     \n-    protected boolean isRemoveSupported() {\n+    public boolean isRemoveSupported() {\n         return false;\n     }\n     \n         return new HashSet();\n     }\n     \n-    protected Object[] getFullElements() {\n+    public Object[] getFullElements() {\n         return new Object[] {\"1\", \"2\", \"3\", \"4\"};\n     }\n     \n     /**\n      * Full collection consists of 5 collections, each with one element\n      */\n-    protected Collection makeFullCollection() {\n+    public Collection makeFullCollection() {\n         CompositeCollection compositeCollection = new CompositeCollection();\n         Object[] elements = getFullElements();\n         for (int i = 0; i < elements.length; i++) {\n     /**\n      * Full collection should look like a collection with 5 elements\n      */\n-    protected Collection makeConfirmedFullCollection() {\n+    public Collection makeConfirmedFullCollection() {\n         Collection collection = new HashSet();\n         collection.addAll(Arrays.asList(getFullElements()));\n         return collection;\n--- a/src/test/org/apache/commons/collections/collection/TestPredicatedCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/TestPredicatedCollection.java\n  * {@link PredicatedCollection} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:18 $\n  * \n  * @author Phil Steitz\n  */\n         return new ArrayList();\n     }\n     \n-    protected Object[] getFullElements() {\n+    public Object[] getFullElements() {\n         return new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n     }\n     \n-    protected Collection makeFullCollection() {\n+    public Collection makeFullCollection() {\n         List list = new ArrayList();\n         list.addAll(Arrays.asList(getFullElements()));\n         return decorateCollection(list, truePredicate);\n     }\n     \n-    protected Collection makeConfirmedFullCollection() {\n+    public Collection makeConfirmedFullCollection() {\n         List list = new ArrayList();\n         list.addAll(Arrays.asList(getFullElements()));\n         return list;\n--- a/src/test/org/apache/commons/collections/collection/TestTransformedCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/TestTransformedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/TestTransformedCollection.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/TestTransformedCollection.java,v 1.3 2003/11/18 22:37:18 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:18 $\n  * \n  * @author Stephen Colebourne\n  */\n         return new ArrayList();\n     }\n \n-    protected Collection makeConfirmedFullCollection() {\n+    public Collection makeConfirmedFullCollection() {\n         List list = new ArrayList();\n         list.addAll(Arrays.asList(getFullElements()));\n         return list;\n         return TransformedCollection.decorate(new ArrayList(), NOOP_TRANSFORMER);\n     }\n \n-    protected Collection makeFullCollection() {\n+    public Collection makeFullCollection() {\n         List list = new ArrayList();\n         list.addAll(Arrays.asList(getFullElements()));\n         return TransformedCollection.decorate(list, NOOP_TRANSFORMER);\n     }\n     \n     //-----------------------------------------------------------------------\n-    protected Object[] getFullElements() {\n+    public Object[] getFullElements() {\n         return new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n     }\n \n-    protected Object[] getOtherElements() {\n+    public Object[] getOtherElements() {\n         return new Object[] {\"9\", \"88\", \"678\", \"87\", \"98\", \"78\", \"99\"};\n     }\n \n--- a/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java,v 1.2 2003/10/02 22:14:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java,v 1.3 2003/11/18 22:37:18 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n      * \n      * @return the comparator to test\n      */\n-    protected abstract Comparator makeComparator();\n+    public abstract Comparator makeComparator();\n     \n     /**\n      * Implement this method to return a list of sorted objects.\n      * \n      * @return sorted objects\n      */\n-    protected abstract List getComparableObjectsOrdered();\n+    public abstract List getComparableObjectsOrdered();\n \n     //-----------------------------------------------------------------------\n     /**\n      * \n      * @return a full iterator\n      */\n-    protected Object makeObject() {\n+    public Object makeObject() {\n         return makeComparator();\n     }\n \n      * Overrides superclass to set the compatability to version 2\n      * as there were no Comparators in version 1.x.\n      */\n-    protected String getCompatibilityVersion() {\n+    public String getCompatibilityVersion() {\n         return \"2\";\n     }\n \n--- a/src/test/org/apache/commons/collections/comparators/TestBooleanComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestBooleanComparator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/TestBooleanComparator.java,v 1.6 2003/10/06 21:02:50 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/TestBooleanComparator.java,v 1.7 2003/11/18 22:37:18 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests for {@link BooleanComparator}.\n  * \n- * @version $Revision: 1.6 $ $Date: 2003/10/06 21:02:50 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/18 22:37:18 $\n  * \n  * @author Rodney Waldhoff\n  */\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    protected Comparator makeComparator() {\n+    public Comparator makeComparator() {\n         return new BooleanComparator();\n     }\n \n-    protected List getComparableObjectsOrdered() {\n+    public List getComparableObjectsOrdered() {\n         List list = new ArrayList();\n         list.add(new Boolean(false));\n         list.add(Boolean.FALSE);\n--- a/src/test/org/apache/commons/collections/comparators/TestComparableComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestComparableComparator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/TestComparableComparator.java,v 1.3 2003/10/01 22:14:48 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/TestComparableComparator.java,v 1.4 2003/11/18 22:37:18 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests for ComparableComparator.\n  * \n- * @version $Revision: 1.3 $ $Date: 2003/10/01 22:14:48 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/18 22:37:18 $\n  * \n  * @author Unknown\n  */\n         return new TestSuite(TestComparableComparator.class);\n     }\n \n-    protected Comparator makeComparator() {\n+    public Comparator makeComparator() {\n         return new ComparableComparator();\n     }\n \n-    protected List getComparableObjectsOrdered() {\n+    public List getComparableObjectsOrdered() {\n         List list = new LinkedList();\n         list.add(new Integer(1));\n         list.add(new Integer(2));\n--- a/src/test/org/apache/commons/collections/comparators/TestComparatorChain.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestComparatorChain.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/TestComparatorChain.java,v 1.7 2003/10/01 22:14:48 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/TestComparatorChain.java,v 1.8 2003/11/18 22:37:18 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests for ComparatorChain.\n  * \n- * @version $Revision: 1.7 $ $Date: 2003/10/01 22:14:48 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/18 22:37:18 $\n  * \n  * @author Unknown\n  */\n         return new TestSuite(TestComparatorChain.class);\n     }\n \n-    protected Comparator makeComparator() {\n+    public Comparator makeComparator() {\n         ComparatorChain chain = new ComparatorChain(new ColumnComparator(0));\n         chain.addComparator(new ColumnComparator(1),true); // reverse the second column\n         chain.addComparator(new ColumnComparator(2),false);\n         assertTrue(chain.compare(new Integer(4), new Integer(4)) == 0);            \n     }\n \n-    protected List getComparableObjectsOrdered() {\n+    public List getComparableObjectsOrdered() {\n         List list = new LinkedList();\n         // this is the correct order assuming a\n         // \"0th forward, 1st reverse, 2nd forward\" sort\n--- a/src/test/org/apache/commons/collections/comparators/TestNullComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestNullComparator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/TestNullComparator.java,v 1.6 2003/10/01 22:14:48 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/TestNullComparator.java,v 1.7 2003/11/18 22:37:18 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Test the NullComparator.\n  * \n- * @version $Revision: 1.6 $ $Date: 2003/10/01 22:14:48 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/18 22:37:18 $\n  * \n  * @author Michael A. Smith\n  */\n \t    super(testName);\n \t}\n \n-    protected Comparator makeComparator() {\n+    public Comparator makeComparator() {\n \t    return new NullComparator();\n \t}\n \t\n-    protected List getComparableObjectsOrdered() {\n+    public List getComparableObjectsOrdered() {\n         List list = new LinkedList();\n \t    list.add(new Integer(1));\n \t    list.add(new Integer(2));\n--- a/src/test/org/apache/commons/collections/comparators/TestReverseComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestReverseComparator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/TestReverseComparator.java,v 1.6 2003/10/01 22:14:48 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/TestReverseComparator.java,v 1.7 2003/11/18 22:37:18 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests for ReverseComparator.\n  * \n- * @version $Revision: 1.6 $ $Date: 2003/10/01 22:14:48 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/18 22:37:18 $\n  * \n  * @author Unknown\n  */\n      * \n      * @return Comparator that returns \"natural\" order\n      */\n-    protected Comparator makeComparator() {\n+    public Comparator makeComparator() {\n         return new ReverseComparator(Collections.reverseOrder());\n     }\n \n-    protected List getComparableObjectsOrdered() {\n+    public List getComparableObjectsOrdered() {\n         List list = new LinkedList();\n         list.add(new Integer(1));\n         list.add(new Integer(2));\n--- a/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java,v 1.4 2003/11/08 18:46:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java,v 1.5 2003/11/18 22:37:14 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * overriding the supportsXxx() methods if necessary.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/11/08 18:46:57 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/18 22:37:14 $\n  * \n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n      * \n      * @return an empty iterator\n      */\n-    protected abstract Iterator makeEmptyIterator();\n+    public abstract Iterator makeEmptyIterator();\n \n     /**\n      * Implement this method to return an iterator over a collection with elements.\n      * \n      * @return a full iterator\n      */\n-    protected abstract Iterator makeFullIterator();\n+    public abstract Iterator makeFullIterator();\n \n     /**\n      * Implements the abstract superclass method to return the full iterator.\n      * \n      * @return a full iterator\n      */\n-    protected Object makeObject() {\n+    public Object makeObject() {\n         return makeFullIterator();\n     }\n \n      * \n      * @return true if Iterator can be empty\n      */\n-    protected boolean supportsEmptyIterator() {\n+    public boolean supportsEmptyIterator() {\n         return true;\n     }\n \n      * \n      * @return true if Iterator can be full\n      */\n-    protected boolean supportsFullIterator() {\n+    public boolean supportsFullIterator() {\n         return true;\n     }\n \n      * \n      * @return true if Iterator supports remove\n      */\n-    protected boolean supportsRemove() {\n+    public boolean supportsRemove() {\n         return true;\n     }\n \n     /**\n      * Allows subclasses to add complex cross verification\n      */\n-    protected void verify() {\n+    public void verify() {\n         // do nothing\n     }\n \n--- a/src/test/org/apache/commons/collections/iterators/AbstractTestListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/AbstractTestListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestListIterator.java,v 1.3 2003/10/09 20:18:25 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestListIterator.java,v 1.4 2003/11/18 22:37:13 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * overriding the supportsXxx() methods if necessary.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/10/09 20:18:25 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/18 22:37:13 $\n  * \n  * @author Rodney Waldhoff\n  * @author Stephen Colebourne\n      * \n      * @return an empty iterator\n      */\n-    protected abstract ListIterator makeEmptyListIterator();\n+    public abstract ListIterator makeEmptyListIterator();\n \n     /**\n      * Implement this method to return a list iterator over a collection with elements.\n      * \n      * @return a full iterator\n      */\n-    protected abstract ListIterator makeFullListIterator();\n+    public abstract ListIterator makeFullListIterator();\n \n     /**\n      * Implements the abstract superclass method to return the list iterator.\n      * \n      * @return an empty iterator\n      */\n-    protected Iterator makeEmptyIterator() {\n+    public Iterator makeEmptyIterator() {\n         return makeEmptyListIterator();\n     }\n \n      * \n      * @return a full iterator\n      */\n-    protected Iterator makeFullIterator() {\n+    public Iterator makeFullIterator() {\n         return makeFullListIterator();\n     }\n \n      * \n      * @return true if Iterator supports add\n      */\n-    protected boolean supportsAdd() {\n+    public boolean supportsAdd() {\n         return true;\n     }\n \n      * \n      * @return true if Iterator supports set\n      */\n-    protected boolean supportsSet() {\n+    public boolean supportsSet() {\n         return true;\n     }\n \n      * The value to be used in the add and set tests.\n      * Default is null.\n      */\n-    protected Object addSetValue() {\n+    public Object addSetValue() {\n         return null;\n     }\n \n--- a/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java,v 1.3 2003/11/08 18:46:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java,v 1.4 2003/11/18 22:37:14 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * overriding the supportsXxx() methods if necessary.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/11/08 18:46:57 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/18 22:37:14 $\n  * \n  * @author Stephen Colebourne\n  */\n      * \n      * @return an empty iterator\n      */\n-    protected abstract MapIterator makeEmptyMapIterator();\n+    public abstract MapIterator makeEmptyMapIterator();\n \n     /**\n      * Implement this method to return a map iterator over a map with elements.\n      * \n      * @return a full iterator\n      */\n-    protected abstract MapIterator makeFullMapIterator();\n+    public abstract MapIterator makeFullMapIterator();\n \n     /**\n      * Implement this method to return the map which contains the same data as the\n      * \n      * @return a full map which can be updated\n      */\n-    protected abstract Map getMap();\n+    public abstract Map getMap();\n     \n     /**\n      * Implement this method to return the confirmed map which contains the same\n      * \n      * @return a full map which can be updated\n      */\n-    protected abstract Map getConfirmedMap();\n+    public abstract Map getConfirmedMap();\n     \n     /**\n      * Implements the abstract superclass method to return the list iterator.\n      * \n      * @return an empty iterator\n      */\n-    protected final Iterator makeEmptyIterator() {\n+    public final Iterator makeEmptyIterator() {\n         return makeEmptyMapIterator();\n     }\n \n      * \n      * @return a full iterator\n      */\n-    protected final Iterator makeFullIterator() {\n+    public final Iterator makeFullIterator() {\n         return makeFullMapIterator();\n     }\n \n      * \n      * @return true if Iterator supports set\n      */\n-    protected boolean supportsSetValue() {\n+    public boolean supportsSetValue() {\n         return true;\n     }\n \n      * The values to be used in the add and set tests.\n      * Default is two strings.\n      */\n-    protected Object[] addSetValues() {\n+    public Object[] addSetValues() {\n         return new Object[] {\"A\", \"B\"};\n     }\n \n--- a/src/test/org/apache/commons/collections/iterators/TestUnmodifiableMapIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestUnmodifiableMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestUnmodifiableMapIterator.java,v 1.3 2003/11/16 20:35:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestUnmodifiableMapIterator.java,v 1.4 2003/11/18 22:37:13 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests the UnmodifiableMapIterator.\n  * \n- * @version $Revision: 1.3 $ $Date: 2003/11/16 20:35:47 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/18 22:37:13 $\n  * \n  * @author Stephen Colebourne\n  */\n         return UnmodifiableMapIterator.decorate(((BidiMap) getMap()).mapIterator());\n     }\n     \n-    protected Map getMap() {\n+    public Map getMap() {\n         Map testMap = new DualHashBidiMap();\n         testMap.put(\"A\", \"a\");\n         testMap.put(\"B\", \"b\");\n         return testMap;\n     }\n \n-    protected Map getConfirmedMap() {\n+    public Map getConfirmedMap() {\n         Map testMap = new HashMap();\n         testMap.put(\"A\", \"a\");\n         testMap.put(\"B\", \"b\");\n--- a/src/test/org/apache/commons/collections/list/AbstractTestList.java\n+++ b/src/test/org/apache/commons/collections/list/AbstractTestList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/AbstractTestList.java,v 1.1 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/AbstractTestList.java,v 1.2 2003/11/18 22:37:14 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * test case (method) your {@link List} fails or override one of the\n  * protected methods from AbstractTestCollection.\n  *\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:14 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n      *  Default implementation returns true.  Override if your collection\n      *  class does not support set.\n      */\n-    protected boolean isSetSupported() {\n+    public boolean isSetSupported() {\n         return true;\n     }\n \n      *  Verifies that the test list implementation matches the confirmed list\n      *  implementation.\n      */\n-    protected void verify() {\n+    public void verify() {\n         super.verify();\n \n         List list1 = getList();\n     /**\n      * Returns an empty {@link ArrayList}.\n      */\n-    protected Collection makeConfirmedCollection() {\n+    public Collection makeConfirmedCollection() {\n         ArrayList list = new ArrayList();\n         return list;\n     }\n     /**\n      * Returns a full {@link ArrayList}.\n      */\n-    protected Collection makeConfirmedFullCollection() {\n+    public Collection makeConfirmedFullCollection() {\n         ArrayList list = new ArrayList();\n         list.addAll(Arrays.asList(getFullElements()));\n         return list;\n      *\n      * @return an empty list for testing.\n      */\n-    protected abstract List makeEmptyList();\n+    public abstract List makeEmptyList();\n \n     /**\n      * Return a new, full {@link List} to be used for testing.\n      *\n      * @return a full list for testing\n      */\n-    protected List makeFullList() {\n+    public List makeFullList() {\n         // only works if list supports optional \"addAll(Collection)\" \n         List list = makeEmptyList();\n         list.addAll(Arrays.asList(getFullElements()));\n      *\n      * @return an empty list to be used for testing\n      */\n-    protected final Collection makeCollection() {\n+    public final Collection makeCollection() {\n         return makeEmptyList();\n     }\n \n      *\n      * @return a full list to be used for testing\n      */\n-    protected final Collection makeFullCollection() {\n+    public final Collection makeFullCollection() {\n         return makeFullList();\n     }\n \n      *\n      * @return the collection field as a List\n      */\n-    protected List getList() {\n+    public List getList() {\n         return (List) collection;\n     }\n \n      *\n      * @return the confirmed field as a List\n      */\n-    protected List getConfirmedList() {\n+    public List getConfirmedList() {\n         return (List) confirmed;\n     }\n \n     }\n \n \n-   static class BulkTestSubList extends AbstractTestList {\n+   public static class BulkTestSubList extends AbstractTestList {\n \n        private AbstractTestList outer;\n \n        }\n \n \n-       protected Object[] getFullElements() {\n+       public Object[] getFullElements() {\n            List l = Arrays.asList(outer.getFullElements());\n            return l.subList(3, l.size() - 3).toArray();\n        }\n \n \n-       protected Object[] getOtherElements() {\n+       public Object[] getOtherElements() {\n            return outer.getOtherElements();\n        }\n \n \n-       protected boolean isAddSupported() {\n+       public boolean isAddSupported() {\n            return outer.isAddSupported();\n        }\n \n-       protected boolean isSetSupported() {\n+       public boolean isSetSupported() {\n            return outer.isSetSupported();\n        }\n \n-       protected boolean isRemoveSupported() {\n+       public boolean isRemoveSupported() {\n            return outer.isRemoveSupported();\n        }\n \n \n-       protected List makeEmptyList() { \n+       public List makeEmptyList() { \n            return outer.makeFullList().subList(4, 4); \n        }\n \n \n-       protected List makeFullList() {\n+       public List makeFullList() {\n            int size = getFullElements().length;\n            return outer.makeFullList().subList(3, size - 3);\n        }\n \n \n-       protected void resetEmpty() {\n+       public void resetEmpty() {\n            outer.resetFull();\n            this.collection = outer.getList().subList(4, 4);\n            this.confirmed = outer.getConfirmedList().subList(4, 4);\n        }\n \n-       protected void resetFull() {\n+       public void resetFull() {\n            outer.resetFull();\n            int size = outer.confirmed.size();\n            this.collection = outer.getList().subList(3, size - 3);\n        }\n \n \n-       protected void verify() {\n+       public void verify() {\n            super.verify();\n            outer.verify();\n        }\n--- a/src/test/org/apache/commons/collections/list/TestFixedSizeList.java\n+++ b/src/test/org/apache/commons/collections/list/TestFixedSizeList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestFixedSizeList.java,v 1.2 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestFixedSizeList.java,v 1.3 2003/11/18 22:37:14 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:14 $\n  * \n  * @author Stephen Colebourne\n  */\n         return FixedSizeList.decorate(new ArrayList());\n     }\n \n-    protected List makeFullList() {\n+    public List makeFullList() {\n         List list = new ArrayList();\n         list.addAll(Arrays.asList(getFullElements()));\n         return FixedSizeList.decorate(list);\n     }\n     \n-    protected boolean isAddSupported() {\n+    public boolean isAddSupported() {\n         return false;\n     }\n \n-    protected boolean isRemoveSupported() {\n+    public boolean isRemoveSupported() {\n         return false;\n     }\n \n--- a/src/test/org/apache/commons/collections/list/TestPredicatedList.java\n+++ b/src/test/org/apache/commons/collections/list/TestPredicatedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestPredicatedList.java,v 1.2 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestPredicatedList.java,v 1.3 2003/11/18 22:37:14 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link PredicatedList} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:14 $\n  * \n  * @author Phil Steitz\n  */\n         return decorateList(new ArrayList(), truePredicate);\n     }\n     \n-    protected Object[] getFullElements() {\n+    public Object[] getFullElements() {\n         return new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n     }\n     \n--- a/src/test/org/apache/commons/collections/list/TestSetUniqueList.java\n+++ b/src/test/org/apache/commons/collections/list/TestSetUniqueList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestSetUniqueList.java,v 1.2 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestSetUniqueList.java,v 1.3 2003/11/18 22:37:14 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * JUnit tests.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:14 $\n  * \n  * @author Matthew Hawthorne\n  */\n     }\n \n     //-----------------------------------------------------------------------\n-    protected List makeEmptyList() {\n+    public List makeEmptyList() {\n         return new SetUniqueList(new ArrayList(), new HashSet());\n     }\n \n         } catch (UnsupportedOperationException ex) {}\n     }\n     \n-    protected Object[] getFullNonNullElements() {\n+    public Object[] getFullNonNullElements() {\n         // override to avoid duplicate \"One\"\n         return new Object[] {\n             new String(\"\"),\n         }\n     }\n     \n-    protected void verify() {\n+    public void verify() {\n         super.verify();\n         \n         if (extraVerify) {\n--- a/src/test/org/apache/commons/collections/list/TestTransformedList.java\n+++ b/src/test/org/apache/commons/collections/list/TestTransformedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestTransformedList.java,v 1.2 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestTransformedList.java,v 1.3 2003/11/18 22:37:14 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:14 $\n  * \n  * @author Stephen Colebourne\n  */\n         return new ArrayList();\n     }\n \n-    protected Collection makeConfirmedFullCollection() {\n+    public Collection makeConfirmedFullCollection() {\n         List list = new ArrayList();\n         list.addAll(Arrays.asList(getFullElements()));\n         return list;\n         return TransformedList.decorate(new ArrayList(), TestTransformedCollection.NOOP_TRANSFORMER);\n     }\n \n-    protected List makeFullList() {\n+    public List makeFullList() {\n         List list = new ArrayList();\n         list.addAll(Arrays.asList(getFullElements()));\n         return TransformedList.decorate(list, TestTransformedCollection.NOOP_TRANSFORMER);\n--- a/src/test/org/apache/commons/collections/list/TestUnmodifiableList.java\n+++ b/src/test/org/apache/commons/collections/list/TestUnmodifiableList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestUnmodifiableList.java,v 1.2 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestUnmodifiableList.java,v 1.3 2003/11/18 22:37:14 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link UnmodifiableList} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:14 $\n  * \n  * @author Phil Steitz\n  */\n         return UnmodifiableList.decorate(list);\n     }\n     \n-    protected boolean isSetSupported() {\n+    public boolean isSetSupported() {\n         return false;\n     }\n     \n-    protected boolean isAddSupported() {\n+    public boolean isAddSupported() {\n         return false;\n     }\n     \n-    protected boolean isRemoveSupported() {\n+    public boolean isRemoveSupported() {\n         return false;\n     }   \n //--------------------------------------------------------------------   \n--- a/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/AbstractTestMap.java,v 1.1 2003/11/16 22:15:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/AbstractTestMap.java,v 1.2 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @author Rodney Waldhoff\n  * @author Paul Jack\n  * @author Stephen Colebourne\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 22:15:10 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:17 $\n  */\n public abstract class AbstractTestMap extends AbstractTestObject {\n \n      * Default implementation returns true.\n      * Override if your collection class does not support put adding.\n      */\n-    protected boolean isPutAddSupported() {\n+    public boolean isPutAddSupported() {\n         return true;\n     }\n \n      * Default implementation returns true.\n      * Override if your collection class does not support put changing.\n      */\n-    protected boolean isPutChangeSupported() {\n+    public boolean isPutChangeSupported() {\n         return true;\n     }\n \n      * Override if your collection class does not support setValue but does\n      * support put changing.\n      */\n-    protected boolean isSetValueSupported() {\n+    public boolean isSetValueSupported() {\n         return isPutChangeSupported();\n     }\n \n      * Default implementation returns true.\n      * Override if your collection class does not support removal operations.\n      */\n-    protected boolean isRemoveSupported() {\n+    public boolean isRemoveSupported() {\n         return true;\n     }\n \n      * Default implementation returns true.\n      * Override if your collection class does not support null keys.\n      */\n-    protected boolean isAllowNullKey() {\n+    public boolean isAllowNullKey() {\n         return true;\n     }\n \n      * Default implementation returns true.\n      * Override if your collection class does not support null values.\n      */\n-    protected boolean isAllowNullValue() {\n+    public boolean isAllowNullValue() {\n         return true;\n     }\n \n      * Default implementation returns true.\n      * Override if your collection class does not support duplicate values.\n      */\n-    protected boolean isAllowDuplicateValues() {\n+    public boolean isAllowDuplicateValues() {\n         return true;\n     }\n \n      *  default implementation constructs a set of String keys, and includes a\n      *  single null key if {@link #isAllowNullKey()} returns <code>true</code>.\n      */\n-    protected Object[] getSampleKeys() {\n+    public Object[] getSampleKeys() {\n         Object[] result = new Object[] {\n             \"blah\", \"foo\", \"bar\", \"baz\", \"tmp\", \"gosh\", \"golly\", \"gee\", \n             \"hello\", \"goodbye\", \"we'll\", \"see\", \"you\", \"all\", \"again\",\n     }\n \n \n-    protected Object[] getOtherKeys() {\n+    public Object[] getOtherKeys() {\n         return getOtherNonNullStringElements();\n     }\n \n-    protected Object[] getOtherValues() {\n+    public Object[] getOtherValues() {\n         return getOtherNonNullStringElements();\n     }\n \n      * collection does not support heterogenous elements or the null element.\n      * </p>\n      */\n-    protected Object[] getOtherNonNullStringElements() {\n+    public Object[] getOtherNonNullStringElements() {\n         return new Object[] {\n             \"For\",\"then\",\"despite\",/* of */\"space\",\"I\",\"would\",\"be\",\"brought\",\n             \"From\",\"limits\",\"far\",\"remote\",\"where\",\"thou\",\"dost\",\"stay\"\n      * two values that are the same if {@link #isAllowDuplicateValues()} returns\n      * <code>true</code>.\n      */\n-    protected Object[] getSampleValues() {\n+    public Object[] getSampleValues() {\n         Object[] result = new Object[] {\n             \"blahv\", \"foov\", \"barv\", \"bazv\", \"tmpv\", \"goshv\", \"gollyv\", \"geev\",\n             \"hellov\", \"goodbyev\", \"we'llv\", \"seev\", \"youv\", \"allv\", \"againv\",\n      * that are the same if {@link #isAllowDuplicateValues()} returns\n      * <code>true</code>.  \n      */\n-    protected Object[] getNewSampleValues() {\n+    public Object[] getNewSampleValues() {\n         Object[] result = new Object[] {\n             (isAllowNullValue() && isAllowDuplicateValues()) ? null : \"newnonnullvalue\",\n             \"newvalue\",\n      *  Helper method to add all the mappings described by {@link\n      *  #getSampleKeys()} and {@link #getSampleValues()}.\n      */\n-    protected void addSampleMappings(Map m) {\n+    public void addSampleMappings(Map m) {\n \n         Object[] keys = getSampleKeys();\n         Object[] values = getSampleValues();\n      * \n      * @return the map to be tested\n      */\n-    protected abstract Map makeEmptyMap();\n+    public abstract Map makeEmptyMap();\n \n     /**\n      * Return a new, populated map.  The mappings in the map should match the\n      * \n      * @return the map to be tested\n      */\n-    protected Map makeFullMap() {\n+    public Map makeFullMap() {\n         Map m = makeEmptyMap();\n         addSampleMappings(m);\n         return m;\n      * \n      * @return a map that is known to be valid\n      */\n-    protected Map makeConfirmedMap() {\n+    public Map makeConfirmedMap() {\n         return new HashMap();\n     }\n \n     /**\n      * Creates a new Map Entry that is independent of the first and the map.\n      */\n-    protected Map.Entry cloneMapEntry(Map.Entry entry) {\n+    public Map.Entry cloneMapEntry(Map.Entry entry) {\n         HashMap map = new HashMap();\n         map.put(entry.getKey(), entry.getValue());\n         return (Map.Entry) map.entrySet().iterator().next();\n     /**\n      * Gets the compatability version, needed for package access.\n      */\n-    protected String getCompatibilityVersion() {\n+    public String getCompatibilityVersion() {\n         return super.getCompatibilityVersion();\n     }\n     //-----------------------------------------------------------------------\n         }\n \n         // Have to implement manually; entrySet doesn't support addAll\n-        protected Object[] getFullElements() {\n+        public Object[] getFullElements() {\n             Object[] k = getSampleKeys();\n             Object[] v = getSampleValues();\n             return makeEntryArray(k, v);\n         }\n         \n         // Have to implement manually; entrySet doesn't support addAll\n-        protected Object[] getOtherElements() {\n+        public Object[] getOtherElements() {\n             Object[] k = getOtherKeys();\n             Object[] v = getOtherValues();\n             return makeEntryArray(k, v);\n         }\n         \n-        protected Set makeEmptySet() {\n+        public Set makeEmptySet() {\n             return makeEmptyMap().entrySet();\n         }\n         \n-        protected Set makeFullSet() {\n+        public Set makeFullSet() {\n             return makeFullMap().entrySet();\n         }\n         \n-        protected boolean isAddSupported() {\n+        public boolean isAddSupported() {\n             // Collection views don't support add operations.\n             return false;\n         }\n-        protected boolean isRemoveSupported() {\n+        public boolean isRemoveSupported() {\n             // Entry set should only support remove if map does\n             return AbstractTestMap.this.isRemoveSupported();\n         }\n-        protected boolean supportsEmptyCollections() {\n+        public boolean supportsEmptyCollections() {\n             return AbstractTestMap.this.supportsEmptyCollections();\n         }\n-        protected boolean supportsFullCollections() {\n+        public boolean supportsFullCollections() {\n             return AbstractTestMap.this.supportsFullCollections();\n         }\n         \n-        protected void resetFull() {\n+        public void resetFull() {\n             AbstractTestMap.this.resetFull();\n             collection = map.entrySet();\n             TestMapEntrySet.this.confirmed = AbstractTestMap.this.confirmed.entrySet();\n         }\n         \n-        protected void resetEmpty() {\n+        public void resetEmpty() {\n             AbstractTestMap.this.resetEmpty();\n             collection = map.entrySet();\n             TestMapEntrySet.this.confirmed = AbstractTestMap.this.confirmed.entrySet();\n             verify();\n         }\n         \n-        protected Map.Entry getEntry(Iterator itConfirmed, Object key) {\n+        public Map.Entry getEntry(Iterator itConfirmed, Object key) {\n             Map.Entry entry = null;\n             while (itConfirmed.hasNext()) {\n                 Map.Entry temp = (Map.Entry) itConfirmed.next();\n             return entry;\n         }\n \n-        protected void verify() {\n+        public void verify() {\n             super.verify();\n             AbstractTestMap.this.verify();\n         }\n         public TestMapKeySet() {\n             super(\"\");\n         }\n-        protected Object[] getFullElements() {\n+        public Object[] getFullElements() {\n             return getSampleKeys();\n         }\n         \n-        protected Object[] getOtherElements() {\n+        public Object[] getOtherElements() {\n             return getOtherKeys();\n         }\n         \n-        protected Set makeEmptySet() {\n+        public Set makeEmptySet() {\n             return makeEmptyMap().keySet();\n         }\n         \n-        protected Set makeFullSet() {\n+        public Set makeFullSet() {\n             return makeFullMap().keySet();\n         }\n         \n-        protected boolean isNullSupported() {\n+        public boolean isNullSupported() {\n             return AbstractTestMap.this.isAllowNullKey();\n         }\n-        protected boolean isAddSupported() {\n+        public boolean isAddSupported() {\n             return false;\n         }\n-        protected boolean isRemoveSupported() {\n+        public boolean isRemoveSupported() {\n             return AbstractTestMap.this.isRemoveSupported();\n         }\n-        protected boolean supportsEmptyCollections() {\n+        public boolean supportsEmptyCollections() {\n             return AbstractTestMap.this.supportsEmptyCollections();\n         }\n-        protected boolean supportsFullCollections() {\n+        public boolean supportsFullCollections() {\n             return AbstractTestMap.this.supportsFullCollections();\n         }\n         \n-        protected void resetEmpty() {\n+        public void resetEmpty() {\n             AbstractTestMap.this.resetEmpty();\n             collection = map.keySet();\n             TestMapKeySet.this.confirmed = AbstractTestMap.this.confirmed.keySet();\n         }\n         \n-        protected void resetFull() {\n+        public void resetFull() {\n             AbstractTestMap.this.resetFull();\n             collection = map.keySet();\n             TestMapKeySet.this.confirmed = AbstractTestMap.this.confirmed.keySet();\n         }\n         \n-        protected void verify() {\n+        public void verify() {\n             super.verify();\n             AbstractTestMap.this.verify();\n         }\n             super(\"\");\n         }\n \n-        protected Object[] getFullElements() {\n+        public Object[] getFullElements() {\n             return getSampleValues();\n         }\n         \n-        protected Object[] getOtherElements() {\n+        public Object[] getOtherElements() {\n             return getOtherValues();\n         }\n         \n-        protected Collection makeCollection() {\n+        public Collection makeCollection() {\n             return makeEmptyMap().values();\n         }\n         \n-        protected Collection makeFullCollection() {\n+        public Collection makeFullCollection() {\n             return makeFullMap().values();\n         }\n         \n-        protected boolean isNullSupported() {\n+        public boolean isNullSupported() {\n             return AbstractTestMap.this.isAllowNullKey();\n         }\n-        protected boolean isAddSupported() {\n+        public boolean isAddSupported() {\n             return false;\n         }\n-        protected boolean isRemoveSupported() {\n+        public boolean isRemoveSupported() {\n             return AbstractTestMap.this.isRemoveSupported();\n         }\n-        protected boolean supportsEmptyCollections() {\n+        public boolean supportsEmptyCollections() {\n             return AbstractTestMap.this.supportsEmptyCollections();\n         }\n-        protected boolean supportsFullCollections() {\n+        public boolean supportsFullCollections() {\n             return AbstractTestMap.this.supportsFullCollections();\n         }\n \n-        protected boolean areEqualElementsDistinguishable() {\n+        public boolean areEqualElementsDistinguishable() {\n             // equal values are associated with different keys, so they are\n             // distinguishable.  \n             return true;\n         }\n \n-        protected Collection makeConfirmedCollection() {\n+        public Collection makeConfirmedCollection() {\n             // never gets called, reset methods are overridden\n             return null;\n         }\n         \n-        protected Collection makeConfirmedFullCollection() {\n+        public Collection makeConfirmedFullCollection() {\n             // never gets called, reset methods are overridden\n             return null;\n         }\n         \n-        protected void resetFull() {\n+        public void resetFull() {\n             AbstractTestMap.this.resetFull();\n             collection = map.values();\n             TestMapValues.this.confirmed = AbstractTestMap.this.confirmed.values();\n         }\n         \n-        protected void resetEmpty() {\n+        public void resetEmpty() {\n             AbstractTestMap.this.resetEmpty();\n             collection = map.values();\n             TestMapValues.this.confirmed = AbstractTestMap.this.confirmed.values();\n         }\n \n-        protected void verify() {\n+        public void verify() {\n             super.verify();\n             AbstractTestMap.this.verify();\n         }\n      * Resets the {@link #map}, {@link #entrySet}, {@link #keySet},\n      * {@link #values} and {@link #confirmed} fields to empty.\n      */\n-    protected void resetEmpty() {\n+    public void resetEmpty() {\n         this.map = makeEmptyMap();\n         views();\n         this.confirmed = makeConfirmedMap();\n      * Resets the {@link #map}, {@link #entrySet}, {@link #keySet},\n      * {@link #values} and {@link #confirmed} fields to full.\n      */\n-    protected void resetFull() {\n+    public void resetFull() {\n         this.map = makeFullMap();\n         views();\n         this.confirmed = makeConfirmedMap();\n      * compared; and <Code>containsAll</Code> tests are run on the \n      * collection views.\n      */\n-    protected void verify() {\n+    public void verify() {\n         verifyMap();\n         verifyEntrySet();\n         verifyKeySet();\n         verifyValues();\n     }\n \n-    protected void verifyMap() {\n+    public void verifyMap() {\n         int size = confirmed.size();\n         boolean empty = confirmed.isEmpty();\n         assertEquals(\"Map should be same size as HashMap\", \n         // causing LRUMap to change).\n     }\n \n-    protected void verifyEntrySet() {\n+    public void verifyEntrySet() {\n         int size = confirmed.size();\n         boolean empty = confirmed.isEmpty();\n         assertEquals(\"entrySet should be same size as HashMap's\" +\n                      confirmed.entrySet(), entrySet);\n     }\n \n-    protected void verifyKeySet() { \n+    public void verifyKeySet() { \n         int size = confirmed.size();\n         boolean empty = confirmed.isEmpty();\n         assertEquals(\"keySet should be same size as HashMap's\" +\n                      confirmed.keySet(), keySet);\n     }\n \n-    protected void verifyValues() {\n+    public void verifyValues() {\n         List known = new ArrayList(confirmed.values());\n         List test = new ArrayList(values);\n \n     /**\n      * Erases any leftover instance variables by setting them to null.\n      */\n-    protected void tearDown() throws Exception {\n+    public void tearDown() throws Exception {\n         map = null;\n         keySet = null;\n         entrySet = null;\n--- a/src/test/org/apache/commons/collections/map/AbstractTestSortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/AbstractTestSortedMap.java,v 1.1 2003/11/16 22:15:11 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/AbstractTestSortedMap.java,v 1.2 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Abstract test class for {@link java.util.SortedMap} methods and contracts.\n  *\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 22:15:11 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Stephen Colebourne\n  */\n      * \n      * @return false\n      */\n-    protected boolean isAllowNullKey() {\n+    public boolean isAllowNullKey() {\n         return false;\n     }\n \n      * \n      * @return a map that is known to be valid\n      */\n-    protected Map makeConfirmedMap() {\n+    public Map makeConfirmedMap() {\n         return new TreeMap();\n     }\n \n             super(name);\n             this.main = main;\n         }\n-        protected void resetEmpty() {\n+        public void resetEmpty() {\n             // needed to init verify correctly\n             main.resetEmpty();\n             super.resetEmpty();\n         }\n-        protected void resetFull() {\n+        public void resetFull() {\n             // needed to init verify correctly\n             main.resetFull();\n             super.resetFull();\n         }\n-        protected void verify() {\n+        public void verify() {\n             // cross verify changes on view with changes on main map\n             super.verify();\n             main.verify();\n             return null;  // block infinite recursion\n         }\n         \n-        protected Object[] getSampleKeys() {\n+        public Object[] getSampleKeys() {\n             return subSortedKeys.toArray();\n         }\n-        protected Object[] getSampleValues() {\n+        public Object[] getSampleValues() {\n             return subSortedValues.toArray();\n         }\n-        protected Object[] getNewSampleValues() {\n+        public Object[] getNewSampleValues() {\n             return subSortedNewValues.toArray();\n         }\n         \n-        protected String getCompatibilityVersion() {\n+        public String getCompatibilityVersion() {\n             return main.getCompatibilityVersion();\n         }\n-        protected boolean isAllowNullKey() {\n+        public boolean isAllowNullKey() {\n             return main.isAllowNullKey();\n         }\n-        protected boolean isAllowNullValue() {\n+        public boolean isAllowNullValue() {\n             return main.isAllowNullValue();\n         }\n-        protected boolean isPutAddSupported() {\n+        public boolean isPutAddSupported() {\n             return main.isPutAddSupported();\n         }\n-        protected boolean isPutChangeSupported() {\n+        public boolean isPutChangeSupported() {\n             return main.isPutChangeSupported();\n         }\n-        protected boolean isRemoveSupported() {\n+        public boolean isRemoveSupported() {\n             return main.isRemoveSupported();\n         }\n-        protected boolean supportsEmptyCollections() {\n+        public boolean supportsEmptyCollections() {\n             return false;\n         }\n-        protected boolean supportsFullCollections() {\n+        public boolean supportsFullCollections() {\n             return false;\n         }\n     }\n             this.subSortedValues.subList(SUBSIZE, this.subSortedValues.size()).clear();\n             this.subSortedNewValues.addAll(Arrays.asList(main.getNewSampleValues()).subList(0, SUBSIZE));\n         }\n-        protected Map makeEmptyMap() {\n+        public Map makeEmptyMap() {\n             // done this way so toKey is correctly set in the returned map\n             return ((SortedMap) main.makeEmptyMap()).headMap(toKey);\n         }\n-        protected Map makeFullMap() {\n+        public Map makeFullMap() {\n             return ((SortedMap) main.makeFullMap()).headMap(toKey);\n         }\n         public void testHeadMapOutOfRange() {\n             this.subSortedValues.subList(0, this.subSortedValues.size() - SUBSIZE).clear();\n             this.subSortedNewValues.addAll(Arrays.asList(main.getNewSampleValues()).subList(0, SUBSIZE));\n         }\n-        protected Map makeEmptyMap() {\n+        public Map makeEmptyMap() {\n             // done this way so toKey is correctly set in the returned map\n             return ((SortedMap) main.makeEmptyMap()).tailMap(fromKey);\n         }\n-        protected Map makeFullMap() {\n+        public Map makeFullMap() {\n             return ((SortedMap) main.makeFullMap()).tailMap(fromKey);\n         }\n         public void testTailMapOutOfRange() {\n                 SUBSIZE, this.main.getNewSampleValues().length - SUBSIZE));\n         }\n         \n-        protected Map makeEmptyMap() {\n+        public Map makeEmptyMap() {\n             // done this way so toKey is correctly set in the returned map\n             return ((SortedMap) main.makeEmptyMap()).subMap(fromKey, toKey);\n         }\n-        protected Map makeFullMap() {\n+        public Map makeFullMap() {\n             return ((SortedMap) main.makeFullMap()).subMap(fromKey, toKey);\n         }\n         public void testSubMapOutOfRange() {\n--- a/src/test/org/apache/commons/collections/map/TestFixedSizeMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestFixedSizeMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestFixedSizeMap.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestFixedSizeMap.java,v 1.3 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Stephen Colebourne\n  */\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    protected Map makeEmptyMap() {\n+    public Map makeEmptyMap() {\n         return FixedSizeMap.decorate(new HashMap());\n     }\n \n-    protected Map makeFullMap() {\n+    public Map makeFullMap() {\n         Map map = new HashMap();\n         addSampleMappings(map);\n         return FixedSizeMap.decorate(map);\n     }\n     \n-    protected boolean isPutAddSupported() {\n+    public boolean isPutAddSupported() {\n         return false;\n     }\n \n-    protected boolean isRemoveSupported() {\n+    public boolean isRemoveSupported() {\n         return false;\n     }\n \n--- a/src/test/org/apache/commons/collections/map/TestFixedSizeSortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestFixedSizeSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestFixedSizeSortedMap.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestFixedSizeSortedMap.java,v 1.3 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Stephen Colebourne\n  */\n         return FixedSizeSortedMap.decorate(new TreeMap());\n     }\n \n-    protected Map makeFullMap() {\n+    public Map makeFullMap() {\n         SortedMap map = new TreeMap();\n         addSampleMappings(map);\n         return FixedSizeSortedMap.decorate(map);\n     }\n     \n-    protected boolean isPutAddSupported() {\n+    public boolean isPutAddSupported() {\n         return false;\n     }\n \n-    protected boolean isRemoveSupported() {\n+    public boolean isRemoveSupported() {\n         return false;\n     }\n \n--- a/src/test/org/apache/commons/collections/map/TestLazyMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestLazyMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestLazyMap.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestLazyMap.java,v 1.3 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link LazyMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Phil Steitz\n  */\n         return LazyMap.decorate(map, factory);\n     }\n     \n-    protected Map makeEmptyMap() {\n+    public Map makeEmptyMap() {\n         return decorateMap(new HashMap(), nullFactory);\n     }\n     \n--- a/src/test/org/apache/commons/collections/map/TestLazySortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestLazySortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestLazySortedMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestLazySortedMap.java,v 1.2 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link LazySortedMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Phil Steitz\n  */\n         return decorateMap(new TreeMap(), nullFactory);\n     }\n     \n-    protected boolean isAllowNullKey() {\n+    public boolean isAllowNullKey() {\n         return false;\n     }\n     \n--- a/src/test/org/apache/commons/collections/map/TestListOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestListOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestListOrderedMap.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestListOrderedMap.java,v 1.3 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Henri Yandell\n  * @author Stephen Colebourne\n             super(\"TestOrderedMapIterator\");\n         }\n         \n-        protected Object addSetValue() {\n-            return TestListOrderedMap.this.getNewSampleValues()[0];\n-        }\n-        \n-        protected boolean supportsRemove() {\n+        public boolean supportsRemove() {\n             return TestListOrderedMap.this.isRemoveSupported();\n         }\n \n-        protected boolean supportsSetValue() {\n+        public boolean supportsSetValue() {\n             return TestListOrderedMap.this.isSetValueSupported();\n         }\n \n-        protected MapIterator makeEmptyMapIterator() {\n+        public MapIterator makeEmptyMapIterator() {\n             resetEmpty();\n             return ((ListOrderedMap) TestListOrderedMap.this.map).mapIterator();\n         }\n \n-        protected MapIterator makeFullMapIterator() {\n+        public MapIterator makeFullMapIterator() {\n             resetFull();\n             return ((ListOrderedMap) TestListOrderedMap.this.map).mapIterator();\n         }\n         \n-        protected Map getMap() {\n+        public Map getMap() {\n             // assumes makeFullMapIterator() called first\n             return TestListOrderedMap.this.map;\n         }\n         \n-        protected Map getConfirmedMap() {\n+        public Map getConfirmedMap() {\n             // assumes makeFullMapIterator() called first\n             return TestListOrderedMap.this.confirmed;\n         }\n         \n-        protected void verify() {\n+        public void verify() {\n             super.verify();\n             TestListOrderedMap.this.verify();\n         }\n--- a/src/test/org/apache/commons/collections/map/TestPredicatedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestPredicatedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestPredicatedMap.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestPredicatedMap.java,v 1.3 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link PredicatedMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Phil Steitz\n  */\n         return PredicatedMap.decorate(map, keyPredicate, valuePredicate);\n     }\n     \n-    protected Map makeEmptyMap() {\n+    public Map makeEmptyMap() {\n         return decorateMap(new HashMap(), truePredicate, truePredicate);\n     }\n     \n--- a/src/test/org/apache/commons/collections/map/TestPredicatedSortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestPredicatedSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestPredicatedSortedMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestPredicatedSortedMap.java,v 1.2 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link PredicatedSortedMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Phil Steitz\n  */\n         return decorateMap(new TreeMap(), testPredicate, testPredicate);\n     } \n     \n-    protected boolean isAllowNullKey() {\n+    public boolean isAllowNullKey() {\n         return false;\n     }\n     \n--- a/src/test/org/apache/commons/collections/map/TestTransformedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestTransformedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestTransformedMap.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestTransformedMap.java,v 1.3 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Stephen Colebourne\n  */\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    protected Map makeEmptyMap() {\n+    public Map makeEmptyMap() {\n         return TransformedMap.decorate(new HashMap(), TestTransformedCollection.NOOP_TRANSFORMER, TestTransformedCollection.NOOP_TRANSFORMER);\n     }\n \n--- a/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java,v 1.3 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link UnmodifiableMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Phil Steitz\n  */\n     \n     //-------------------------------------------------------------------\n     \n-    protected Map makeEmptyMap() {\n+    public Map makeEmptyMap() {\n         return UnmodifiableMap.decorate(new HashMap());\n     }\n     \n-    protected boolean isPutChangeSupported() {\n+    public boolean isPutChangeSupported() {\n         return false;\n     }\n     \n-    protected boolean isPutAddSupported() {\n+    public boolean isPutAddSupported() {\n         return false;\n     }\n     \n-    protected boolean isRemoveSupported() {\n+    public boolean isRemoveSupported() {\n         return false;\n     }\n     \n-    protected Map makeFullMap() {\n+    public Map makeFullMap() {\n         Map m = new HashMap();\n         addSampleMappings(m);\n         return UnmodifiableMap.decorate(m);\n--- a/src/test/org/apache/commons/collections/observed/TestObservableBag.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableBag.java,v 1.4 2003/11/16 22:15:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableBag.java,v 1.5 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link ObservableBag} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/11/16 22:15:12 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Stephen Colebourne\n  */\n     }\n \n     //-----------------------------------------------------------------------\n-    protected Bag makeBag() {\n+    public Bag makeBag() {\n         return ObservableBag.decorate(new HashBag(), ObservedTestHelper.LISTENER);\n     }\n \n--- a/src/test/org/apache/commons/collections/observed/TestObservableBuffer.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableBuffer.java,v 1.4 2003/11/16 22:15:11 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableBuffer.java,v 1.5 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link ObservableBuffer} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/11/16 22:15:11 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Stephen Colebourne\n  */\n         return new ArrayStack();\n     }\n \n-    protected Collection makeConfirmedFullCollection() {\n+    public Collection makeConfirmedFullCollection() {\n         ArrayStack stack = new ArrayStack();\n         stack.addAll(Arrays.asList(getFullElements()));\n         return stack;\n         return ObservableBuffer.decorate(new ArrayStack(), ObservedTestHelper.LISTENER);\n     }\n \n-    protected Collection makeFullCollection() {\n+    public Collection makeFullCollection() {\n         List stack = new ArrayStack();\n         stack.addAll(Arrays.asList(getFullElements()));\n         return ObservableBuffer.decorate(stack, ObservedTestHelper.LISTENER);\n--- a/src/test/org/apache/commons/collections/observed/TestObservableCollection.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableCollection.java,v 1.3 2003/11/16 22:15:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableCollection.java,v 1.4 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link ObservedCollection} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/11/16 22:15:12 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Stephen Colebourne\n  */\n         return new ArrayList();\n     }\n \n-    protected Collection makeConfirmedFullCollection() {\n+    public Collection makeConfirmedFullCollection() {\n         List list = new ArrayList();\n         list.addAll(Arrays.asList(getFullElements()));\n         return list;\n         return ObservableCollection.decorate(new ArrayList(), ObservedTestHelper.LISTENER);\n     }\n \n-    protected Collection makeFullCollection() {\n+    public Collection makeFullCollection() {\n         List list = new ArrayList();\n         list.addAll(Arrays.asList(getFullElements()));\n         return ObservableCollection.decorate(list, ObservedTestHelper.LISTENER);\n--- a/src/test/org/apache/commons/collections/observed/TestObservableList.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableList.java,v 1.3 2003/11/16 22:15:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableList.java,v 1.4 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link ObservedList} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/11/16 22:15:12 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Stephen Colebourne\n  */\n         return ObservableList.decorate(new ArrayList(), ObservedTestHelper.LISTENER);\n     }\n \n-    protected List makeFullList() {\n+    public List makeFullList() {\n         List set = new ArrayList();\n         set.addAll(Arrays.asList(getFullElements()));\n         return ObservableList.decorate(set, ObservedTestHelper.LISTENER);\n--- a/src/test/org/apache/commons/collections/observed/TestObservableSet.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSet.java,v 1.3 2003/11/16 22:15:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSet.java,v 1.4 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link ObservedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/11/16 22:15:12 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Stephen Colebourne\n  */\n     }\n \n     //-----------------------------------------------------------------------\n-    protected Set makeEmptySet() {\n+    public Set makeEmptySet() {\n         return ObservableSet.decorate(new HashSet(), ObservedTestHelper.LISTENER);\n     }\n \n-    protected Set makeFullSet() {\n+    public Set makeFullSet() {\n         Set set = new HashSet();\n         set.addAll(Arrays.asList(getFullElements()));\n         return ObservableSet.decorate(set, ObservedTestHelper.LISTENER);\n--- a/src/test/org/apache/commons/collections/observed/TestObservableSortedBag.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableSortedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSortedBag.java,v 1.4 2003/11/16 22:15:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSortedBag.java,v 1.5 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link ObservedSortedBag} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/11/16 22:15:12 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Stephen Colebourne\n  */\n     }\n \n     //-----------------------------------------------------------------------\n-    protected Bag makeBag() {\n+    public Bag makeBag() {\n         return ObservableSortedBag.decorate(new TreeBag(), ObservedTestHelper.LISTENER);\n     }\n \n--- a/src/test/org/apache/commons/collections/observed/TestObservableSortedSet.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSortedSet.java,v 1.6 2003/11/16 22:15:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSortedSet.java,v 1.7 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link ObservedSortedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2003/11/16 22:15:12 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Stephen Colebourne\n  */\n     }\n \n     //-----------------------------------------------------------------------\n-    protected Set makeEmptySet() {\n+    public Set makeEmptySet() {\n         return ObservableSortedSet.decorate(new TreeSet(), ObservedTestHelper.LISTENER);\n     }\n \n-    protected Set makeFullSet() {\n+    public Set makeFullSet() {\n         SortedSet set = new TreeSet();\n         set.addAll(Arrays.asList(getFullElements()));\n         return ObservableSortedSet.decorate(set, ObservedTestHelper.LISTENER);\n--- a/src/test/org/apache/commons/collections/pairs/AbstractTestMapEntry.java\n+++ b/src/test/org/apache/commons/collections/pairs/AbstractTestMapEntry.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/pairs/Attic/AbstractTestMapEntry.java,v 1.2 2003/11/02 19:44:37 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/pairs/Attic/AbstractTestMapEntry.java,v 1.3 2003/11/18 22:37:18 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * type being tested.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/02 19:44:37 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:18 $\n  * \n  * @author Neil O'Toole\n  */\n      * This implementation simply calls {@link #makeMapEntry(Object, Object)}\n      * with null for key and value. Subclasses can override this method if desired.\n      */\n-    protected Map.Entry makeMapEntry() {\n+    public Map.Entry makeMapEntry() {\n         return makeMapEntry(null, null);\n     }\n \n      * Subclasses should override this method to return a Map.Entry\n      * of the type being tested.\n      */\n-    protected abstract Map.Entry makeMapEntry(Object key, Object value);\n+    public abstract Map.Entry makeMapEntry(Object key, Object value);\n \n     /**\n      * Makes a Map.Entry of a type that's known to work correctly.\n      */\n-    protected Map.Entry makeKnownMapEntry() {\n+    public Map.Entry makeKnownMapEntry() {\n         return makeKnownMapEntry(null, null);\n     }\n \n     /**\n      * Makes a Map.Entry of a type that's known to work correctly.\n      */\n-    protected Map.Entry makeKnownMapEntry(Object key, Object value) {\n+    public Map.Entry makeKnownMapEntry(Object key, Object value) {\n         Map map = new HashMap(1);\n         map.put(key, value);\n         Map.Entry entry = (Map.Entry) map.entrySet().iterator().next();\n--- a/src/test/org/apache/commons/collections/set/AbstractTestSet.java\n+++ b/src/test/org/apache/commons/collections/set/AbstractTestSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/AbstractTestSet.java,v 1.1 2003/11/16 22:15:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/AbstractTestSet.java,v 1.2 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * elements may be added; see {@link AbstractTestCollection} for more details.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 22:15:10 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Paul Jack\n  */\n     /**\n      * Provides additional verifications for sets.\n      */\n-    protected void verify() {\n+    public void verify() {\n         super.verify();\n         \n         assertEquals(\"Sets should be equal\", confirmed, collection);\n      *\n      * @return a confirmed empty collection\n      */\n-    protected Collection makeConfirmedCollection() {\n+    public Collection makeConfirmedCollection() {\n         return new HashSet();\n     }\n \n      *\n      * @return a confirmed full collection\n      */\n-    protected Collection makeConfirmedFullCollection() {\n+    public Collection makeConfirmedFullCollection() {\n         Collection set = makeConfirmedCollection();\n         set.addAll(Arrays.asList(getFullElements()));\n         return set;\n      *\n      * @return an empty set\n      */\n-    protected abstract Set makeEmptySet();\n+    public abstract Set makeEmptySet();\n \n     /**\n      * Makes a full set by first creating an empty set and then adding\n      *\n      * @return a full set\n      */\n-    protected Set makeFullSet() {\n+    public Set makeFullSet() {\n         Set set = makeEmptySet();\n         set.addAll(Arrays.asList(getFullElements()));\n         return set;\n      *\n      * @return an empty collection\n      */\n-    protected final Collection makeCollection() {\n+    public final Collection makeCollection() {\n         return makeEmptySet();\n     }\n \n      *\n      * @return a full collection\n      */\n-    protected final Collection makeFullCollection() {\n+    public final Collection makeFullCollection() {\n         return makeFullSet();\n     }\n \n     /**\n      * Return the {@link AbstractTestCollection#collection} fixture, but cast as a Set.  \n      */\n-    protected Set getSet() {\n+    public Set getSet() {\n         return (Set)collection;\n     }\n \n     /**\n      * Return the {@link AbstractTestCollection#confirmed} fixture, but cast as a Set.\n      */\n-    protected Set getConfirmedSet() {\n+    public Set getConfirmedSet() {\n         return (Set)confirmed;\n     }\n \n--- a/src/test/org/apache/commons/collections/set/AbstractTestSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/AbstractTestSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/AbstractTestSortedSet.java,v 1.1 2003/11/16 22:15:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/AbstractTestSortedSet.java,v 1.2 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * elements may be added; see {@link AbstractTestCollection} for more details.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 22:15:10 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Stephen Colebourne\n  * @author Dieter Wimberger\n      * Verification extension, will check the order of elements,\n      * the sets should already be verified equal.\n      */\n-    protected void verify() {\n+    public void verify() {\n         super.verify();\n         \n         // Check that iterator returns elements in order and first() and last()\n      * Overridden because SortedSets don't allow null elements (normally).\n      * @return false\n      */\n-    protected boolean isNullSupported() {\n+    public boolean isNullSupported() {\n         return false;\n     }\n \n      *\n      * @return a confirmed empty collection\n      */\n-    protected Collection makeConfirmedCollection() {\n+    public Collection makeConfirmedCollection() {\n         return new TreeSet();\n     }\n \n      * Return the {@link AbstractTestCollection#confirmed} fixture, but cast as a\n      * SortedSet.\n      */\n-    protected SortedSet getConfirmedSortedSet() {\n+    public SortedSet getConfirmedSortedSet() {\n         return (SortedSet) confirmed;\n     }\n \n     /**\n      * Override to return comparable objects.\n      */\n-    protected Object[] getFullNonNullElements() {\n+    public Object[] getFullNonNullElements() {\n         Object[] elements = new Object[30];\n \n         for (int i = 0; i < 30; i++) {\n     /**\n      * Override to return comparable objects.\n      */\n-    protected Object[] getOtherNonNullElements() {\n+    public Object[] getOtherNonNullElements() {\n         Object[] elements = new Object[30];\n         for (int i = 0; i < 30; i++) {\n             elements[i] = new Integer(i + i + 2);\n \n         } //TestSortedSetSubSet\n \n-        protected boolean isNullSupported() {\n+        public boolean isNullSupported() {\n             return AbstractTestSortedSet.this.isNullSupported();\n         } //useNullValue\n \n-        protected Object[] getFullElements() {\n+        public Object[] getFullElements() {\n             //System.out.println(\"getFullElements()\");\n             return m_FullElements;\n         }\n \n-        protected Object[] getOtherElements() {\n+        public Object[] getOtherElements() {\n             return m_OtherElements;\n         }\n \n             }\n         } //getSubSet\n \n-        protected Set makeEmptySet() {\n+        public Set makeEmptySet() {\n             SortedSet s = (SortedSet) AbstractTestSortedSet.this.makeFullSet();\n             s = getSubSet(s);\n             s.clear();\n             return s;\n         } //makeEmptySet\n \n-        protected Set makeFullSet() {\n+        public Set makeFullSet() {\n             SortedSet s = (SortedSet) AbstractTestSortedSet.this.makeFullCollection();\n             return getSubSet(s);\n         } //makeFullSet\n \n-        protected void resetFull() {\n+        public void resetFull() {\n             AbstractTestSortedSet.this.resetFull();\n             TestSortedSetSubSet.this.confirmed = getSubSet((SortedSet) AbstractTestSortedSet.this.confirmed);\n             TestSortedSetSubSet.this.collection = getSubSet((SortedSet) AbstractTestSortedSet.this.collection);\n         }\n \n-        protected void resetEmpty() {\n+        public void resetEmpty() {\n             TestSortedSetSubSet.this.resetFull();\n             TestSortedSetSubSet.this.confirmed.clear();\n             TestSortedSetSubSet.this.collection.clear();\n--- a/src/test/org/apache/commons/collections/set/TestListOrderedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestListOrderedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestListOrderedSet.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestListOrderedSet.java,v 1.3 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Henning P. Schmiedehausen\n  * @author Stephen Colebourne\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    protected Set makeEmptySet() {\n+    public Set makeEmptySet() {\n         return ListOrderedSet.decorate(new HashSet());\n     }\n \n--- a/src/test/org/apache/commons/collections/set/TestPredicatedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestPredicatedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestPredicatedSet.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestPredicatedSet.java,v 1.3 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link PredicatedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Phil Steitz\n  */\n         return PredicatedSet.decorate(set, predicate);\n     }\n     \n-    protected Set makeEmptySet() {\n+    public Set makeEmptySet() {\n         return decorateSet(new HashSet(), truePredicate);\n     }\n     \n-    protected Object[] getFullElements() {\n+    public Object[] getFullElements() {\n         return new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n     }\n     \n--- a/src/test/org/apache/commons/collections/set/TestTransformedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestTransformedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestTransformedSet.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestTransformedSet.java,v 1.3 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Stephen Colebourne\n  */\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    protected Collection makeConfirmedCollection() {\n+    public Collection makeConfirmedCollection() {\n         return new HashSet();\n     }\n \n-    protected Collection makeConfirmedFullCollection() {\n+    public Collection makeConfirmedFullCollection() {\n         Set set = new HashSet();\n         set.addAll(Arrays.asList(getFullElements()));\n         return set;\n     }\n     \n-    protected Set makeEmptySet() {\n+    public Set makeEmptySet() {\n         return TransformedSet.decorate(new HashSet(), TestTransformedCollection.NOOP_TRANSFORMER);\n     }\n \n-    protected Set makeFullSet() {\n+    public Set makeFullSet() {\n         Set list = new HashSet();\n         list.addAll(Arrays.asList(getFullElements()));\n         return TransformedSet.decorate(list, TestTransformedCollection.NOOP_TRANSFORMER);\n--- a/src/test/org/apache/commons/collections/set/TestTransformedSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestTransformedSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestTransformedSortedSet.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestTransformedSortedSet.java,v 1.3 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Stephen Colebourne\n  */\n     }\n \n     //-----------------------------------------------------------------------\n-    protected Set makeEmptySet() {\n+    public Set makeEmptySet() {\n         return TransformedSortedSet.decorate(new TreeSet(), TestTransformedCollection.NOOP_TRANSFORMER);\n     }\n \n-    protected Set makeFullSet() {\n+    public Set makeFullSet() {\n         SortedSet set = new TreeSet();\n         set.addAll(Arrays.asList(getFullElements()));\n         return TransformedSortedSet.decorate(set, TestTransformedCollection.NOOP_TRANSFORMER);\n--- a/src/test/org/apache/commons/collections/set/TestUnmodifiableSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestUnmodifiableSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestUnmodifiableSortedSet.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestUnmodifiableSortedSet.java,v 1.3 2003/11/18 22:37:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link UnmodifiableSortedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:17 $\n  * \n  * @author Phil Steitz\n  */\n         return UnmodifiableSortedSet.decorate(set);\n     }\n     \n-    protected boolean isAddSupported() {\n+    public boolean isAddSupported() {\n         return false;\n     }\n     \n-    protected boolean isRemoveSupported() {\n+    public boolean isRemoveSupported() {\n         return false;\n     }\n            ", "timestamp": 1069195038, "metainfo": ""}