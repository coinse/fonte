{"sha": "8d92a78bb64c9e36e5ab92377081d6a7a6072e1d", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r740150 | mbenson | 2009-02-02 15:24:00 -0800 (Mon, 02 Feb 2009) | 1 line          make all [collections] maps implement IterableMap     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/PredicatedMap.java\n+++ b/src/java/org/apache/commons/collections/map/PredicatedMap.java\n import java.util.Iterator;\n import java.util.Map;\n \n+import org.apache.commons.collections.IterableMap;\n import org.apache.commons.collections.Predicate;\n \n /**\n  * @author Stephen Colebourne\n  * @author Paul Jack\n  */\n-public class PredicatedMap\n-        extends AbstractInputCheckedMapDecorator\n+public class PredicatedMap<K, V>\n+        extends AbstractInputCheckedMapDecorator<K, V>\n         implements Serializable {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 7412622456128415156L;\n \n     /** The key predicate to use */\n-    protected final Predicate keyPredicate;\n+    protected final Predicate<? super K> keyPredicate;\n+\n     /** The value predicate to use */\n-    protected final Predicate valuePredicate;\n+    protected final Predicate<? super V> valuePredicate;\n \n     /**\n      * Factory method to create a predicated (validating) map.\n      * @param valuePredicate  the predicate to validate to values, null means no check\n      * @throws IllegalArgumentException if the map is null\n      */\n-    public static Map decorate(Map map, Predicate keyPredicate, Predicate valuePredicate) {\n-        return new PredicatedMap(map, keyPredicate, valuePredicate);\n+    public static <K, V> IterableMap<K, V> decorate(Map<K, V> map, Predicate<? super K> keyPredicate, Predicate<? super V> valuePredicate) {\n+        return new PredicatedMap<K, V>(map, keyPredicate, valuePredicate);\n     }\n \n     //-----------------------------------------------------------------------\n      * @param valuePredicate  the predicate to validate to values, null means no check\n      * @throws IllegalArgumentException if the map is null\n      */\n-    protected PredicatedMap(Map map, Predicate keyPredicate, Predicate valuePredicate) {\n+    protected PredicatedMap(Map<K, V> map, Predicate<? super K> keyPredicate, Predicate<? super V> valuePredicate) {\n         super(map);\n         this.keyPredicate = keyPredicate;\n         this.valuePredicate = valuePredicate;\n         \n-        Iterator it = map.entrySet().iterator();\n+        Iterator<Map.Entry<K, V>> it = map.entrySet().iterator();\n         while (it.hasNext()) {\n-            Map.Entry entry = (Map.Entry) it.next();\n-            Object key = entry.getKey();\n-            Object value = entry.getValue();\n-            validate(key, value);\n+            Map.Entry<K, V> entry = it.next();\n+            validate(entry.getKey(), entry.getValue());\n         }\n     }\n \n      * @throws ClassNotFoundException\n      * @since Commons Collections 3.1\n      */\n+    @SuppressWarnings(\"unchecked\")\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n         map = (Map) in.readObject();\n      * @param value  the value to validate\n      * @throws IllegalArgumentException if invalid\n      */\n-    protected void validate(Object key, Object value) {\n+    protected void validate(K key, V value) {\n         if (keyPredicate != null && keyPredicate.evaluate(key) == false) {\n             throw new IllegalArgumentException(\"Cannot add key - Predicate rejected it\");\n         }\n      * @throws IllegalArgumentException if invalid\n      * @since Commons Collections 3.1\n      */\n-    protected Object checkSetValue(Object value) {\n+    protected V checkSetValue(V value) {\n         if (valuePredicate.evaluate(value) == false) {\n             throw new IllegalArgumentException(\"Cannot set value - Predicate rejected it\");\n         }\n     }\n \n     //-----------------------------------------------------------------------\n-    public Object put(Object key, Object value) {\n+    public V put(K key, V value) {\n         validate(key, value);\n         return map.put(key, value);\n     }\n \n-    public void putAll(Map mapToCopy) {\n-        Iterator it = mapToCopy.entrySet().iterator();\n-        while (it.hasNext()) {\n-            Map.Entry entry = (Map.Entry) it.next();\n-            Object key = entry.getKey();\n-            Object value = entry.getValue();\n-            validate(key, value);\n+    public void putAll(Map<? extends K, ? extends V> mapToCopy) {\n+        for (Map.Entry<? extends K, ? extends V> entry : mapToCopy.entrySet()) {\n+            validate(entry.getKey(), entry.getValue());\n         }\n-        map.putAll(mapToCopy);\n+        super.putAll(mapToCopy);\n     }\n \n }", "timestamp": 1252994174, "metainfo": ""}