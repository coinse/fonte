{"sha": "dc7995810d77783e329db6557ce80ffd80621e0f", "log": "* add copy constructors to AbstractRandomAccessIntList, ArrayIntList and ArrayUnsignedShortList * more javadocs   ", "commit": "\n--- a/src/java/org/apache/commons/collections/primitives/AbstractRandomAccessIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractRandomAccessIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractRandomAccessIntList.java,v 1.7 2003/01/11 21:28:02 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractRandomAccessIntList.java,v 1.8 2003/01/13 12:59:45 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.ConcurrentModificationException;\n import java.util.NoSuchElementException;\n \n-\n+/**\n+ * Abstract base class for {@link IntList}s backed \n+ * by random access structures like arrays.\n+ * <p />\n+ * Read-only subclasses must override {@link #get}\n+ * and {@link #size}.  Mutable subclasses\n+ * should also override {@link #set}.  Variably-sized\n+ * subclasses should also override {@link #add} \n+ * and {@link #removeElementAt}.  All other methods\n+ * have at least some base implementation derived from \n+ * these.  Subclasses may choose to override these methods\n+ * to provide a more efficient implementation.\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.8 $ $Date: 2003/01/13 12:59:45 $\n+ * \n+ * @author Rodney Waldhoff \n+ */\n public abstract class AbstractRandomAccessIntList extends AbstractIntCollection implements IntList {\n \n     // constructors\n     //-------------------------------------------------------------------------\n \n-    protected AbstractRandomAccessIntList() { }    \n+    /** Constructs any empty list. */\n+    protected AbstractRandomAccessIntList() { \n+    }    \n+\n+    /** \n+     * Constructs a list containing the elements of the given collection, \n+     * in the order they are returned by that collection's iterator.\n+     * \n+     * @see #addAll\n+     * @param that the non-<code>null</code> collection of <code>int</code>s \n+     *        to add\n+     * @throws NullPointerException if <i>that</i> is <code>null</code>\n+     * @throws UnsupportedOperationException if {@link #addAll} does\n+     */\n+    protected AbstractRandomAccessIntList(IntCollection that) { \n+        addAll(that);\n+    }    \n \n     // fully abstract methods\n     //-------------------------------------------------------------------------\n     // unsupported in base\n     //-------------------------------------------------------------------------\n     \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n     public int removeElementAt(int index) {\n         throw new UnsupportedOperationException();\n     }\n     \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n     public int set(int index, int element) {\n         throw new UnsupportedOperationException();\n     }\n         \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n     public void add(int index, int element) {\n         throw new UnsupportedOperationException();\n     }\n \n     //-------------------------------------------------------------------------\n+\n+    // javadocs here are inherited\n     \n     public boolean add(int element) {\n         add(size(),element);\n         return new RandomAccessIntSubList(this,fromIndex,toIndex);\n     }\n \n-    /** \n-     * Returns <code>true</code> iff <i>that</i> is \n-     * an {@link IntList} with the same {@link #size size}\n-     * as me, and whose {@link #iterator iterator} returns the \n-     * same sequence of values as mine.\n-     */\n     public boolean equals(Object that) {\n         if(this == that) { \n             return true; \n     // protected utilities\n     //-------------------------------------------------------------------------\n     \n+    /** Get my count of structural modifications. */\n     protected int getModCount() {\n         return _modCount;\n     }\n \n+    /** Increment my count of structural modifications. */\n     protected void incrModCount() {\n         _modCount++;\n     }\n     // inner classes\n     //-------------------------------------------------------------------------\n     \n-    protected static class ComodChecker {\n+    private static class ComodChecker {\n         ComodChecker(AbstractRandomAccessIntList source) {\n             _source = source;  \n             resyncModCount();             \n--- a/src/java/org/apache/commons/collections/primitives/ArrayIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ArrayIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayIntList.java,v 1.3 2003/01/11 21:28:02 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayIntList.java,v 1.4 2003/01/13 12:59:45 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n package org.apache.commons.collections.primitives;\n \n /**\n- * A list of <code>int</code> elements backed by an <code>int</code> array.\n- *\n- * @version $Revision: 1.3 $ $Date: 2003/01/11 21:28:02 $\n+ * An {@link IntList} backed by an array of <code>int</code>s.\n+ * This implementation supports all optional methods.\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.4 $ $Date: 2003/01/13 12:59:45 $\n+ * \n  * @author Rodney Waldhoff \n  */\n public class ArrayIntList extends AbstractRandomAccessIntList implements IntList {\n     // constructors\n     //-------------------------------------------------------------------------\n \n-    protected ArrayIntList() {\n+    /** \n+     * Construct an empty list with the default\n+     * initial capacity.\n+     */\n+    public ArrayIntList() {\n         this(8);\n     }    \n \n-    protected ArrayIntList(int initialCapacity) {\n+    /**\n+     * Construct an empty list with the given\n+     * initial capacity.\n+     * @throws IllegalArgumentException when <i>initialCapacity</i> is negative\n+     */\n+    public ArrayIntList(int initialCapacity) {\n         if(initialCapacity < 0) {\n             throw new IllegalArgumentException(\"capacity \" + initialCapacity);\n         }\n         _size = 0;\n     }    \n \n+    /** \n+     * Constructs a list containing the elements of the given collection, \n+     * in the order they are returned by that collection's iterator.\n+     * \n+     * @see ArrayIntList#addAll(org.apache.commons.collections.primitives.IntCollection)\n+     * @param that the non-<code>null</code> collection of <code>int</code>s \n+     *        to add\n+     * @throws NullPointerException if <i>that</i> is <code>null</code>\n+     */\n+    public ArrayIntList(IntCollection that) { \n+        this(that.size());\n+        addAll(that);\n+    }    \n+\n     // IntList methods\n     //-------------------------------------------------------------------------\n \n         return _size;\n     }\n     \n+    /** \n+     * Removes the element at the specified position in \n+     * (optional operation).  Any subsequent elements \n+     * are shifted to the left, subtracting one from their \n+     * indices.  Returns the element that was removed from\n+     * the list.\n+     * \n+     * @param index the index of the element to remove\n+     * @return the value of the element that was removed\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n     public int removeElementAt(int index) {\n         checkRange(index);\n         incrModCount();\n         return oldval;\n     }\n     \n+    /** \n+     * Replaces the element at the specified \n+     * position in me with the specified element\n+     * (optional operation). \n+     * \n+     * @param index the index of the element to change\n+     * @param element the value to be stored at the specified position\n+     * @return the value previously stored at the specified position\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n     public int set(int index, int element) {\n         checkRange(index);\n         incrModCount();\n         return oldval;\n     }\n         \n+    /** \n+     * Inserts the specified element at the specified position \n+     * (optional operation). Shifts the element currently \n+     * at that position (if any) and any subsequent elements to the \n+     * right, increasing their indices.\n+     * \n+     * @param index the index at which to insert the element\n+     * @param element the value to insert\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IllegalArgumentException if some aspect of the specified element \n+     *         prevents it from being added to me\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n     public void add(int index, int element) {\n         checkRangeIncludingEndpoint(index);\n         incrModCount();\n     // capacity methods\n     //-------------------------------------------------------------------------\n \n+    /** \n+     * Increases my capacity, if necessary, to ensure that I can hold at \n+     * least the number of elements specified by the minimum capacity \n+     * argument without growing.\n+     */\n     public void ensureCapacity(int mincap) {\n         incrModCount();\n         if(mincap > _data.length) {\n         }\n     }\n \n+    /** \n+     * Reduce my capacity, if necessary, to match my\n+     * current {@link #size}.\n+     */\n     public void trimToSize() {\n         incrModCount();\n         if(_size < _data.length) {\n \n     // private methods\n     //-------------------------------------------------------------------------\n+    \n     private final void checkRange(int index) {\n         if(index < 0 || index >= _size) {\n             throw new IndexOutOfBoundsException(\"Should be at least 0 and less than \" + _size + \", found \" + index);\n--- a/src/java/org/apache/commons/collections/primitives/ArrayUnsignedShortList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ArrayUnsignedShortList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayUnsignedShortList.java,v 1.2 2003/01/11 21:28:02 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayUnsignedShortList.java,v 1.3 2003/01/13 12:59:45 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.io.Serializable;\n \n /**\n- * A list of unsigned 16-bit values backed by a <code>short</code> array.\n- * Mutators on this class will reject any <code>int</code> that does not\n- * express an unsigned 16-bit value.\n- *\n- * @version $Revision: 1.2 $ $Date: 2003/01/11 21:28:02 $\n+ * An {@link IntList} backed by an array of unsigned\n+ * <code>short</code> values.\n+ * This list stores <code>int</code> values\n+ * in the range [{@link #MIN_VALUE <code>0</code>},\n+ * {@link #MAX_VALUE <code>65535</code>}] in 16-bits \n+ * per element.  Attempts to use elements outside this \n+ * range may cause an \n+ * {@link IllegalArgumentException IllegalArgumentException} \n+ * to be thrown.\n+ * <p />\n+ * This implementation supports all optional methods.\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.3 $ $Date: 2003/01/13 12:59:45 $\n+ * \n  * @author Rodney Waldhoff \n  */\n public class ArrayUnsignedShortList extends AbstractRandomAccessIntList implements IntList, Serializable {\n     // constructors\n     //-------------------------------------------------------------------------\n \n+    /** \n+     * Construct an empty list with the default\n+     * initial capacity.\n+     */\n     protected ArrayUnsignedShortList() {\n         this(8);\n     }    \n \n+    /**\n+     * Construct an empty list with the given\n+     * initial capacity.\n+     * @throws IllegalArgumentException when <i>initialCapacity</i> is negative\n+     */\n     protected ArrayUnsignedShortList(int initialCapacity) {\n         if(initialCapacity < 0) {\n             throw new IllegalArgumentException(\"capacity \" + initialCapacity);\n         _size = 0;\n     }    \n \n+    /** \n+     * Constructs a list containing the elements of the given collection, \n+     * in the order they are returned by that collection's iterator.\n+     * \n+     * @see ArrayIntList#addAll(org.apache.commons.collections.primitives.IntCollection)\n+     * @param that the non-<code>null</code> collection of <code>int</code>s \n+     *        to add\n+     * @throws NullPointerException if <i>that</i> is <code>null</code>\n+     */\n+    public ArrayUnsignedShortList(IntCollection that) { \n+        this(that.size());\n+        addAll(that);\n+    }    \n+\n     // IntList methods\n     //-------------------------------------------------------------------------\n \n+    /** \n+     * Returns the element at the specified position within \n+     * me. \n+     * By construction, the returned value will be \n+     * between {@link #MIN_VALUE} and {@link #MAX_VALUE}, inclusive.\n+     * \n+     * @param index the index of the element to return\n+     * @return the value of the element at the specified position\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n     public int get(int index) {\n         checkRange(index);\n         return toInt(_data[index]);\n         return _size;\n     }\n     \n+    /** \n+     * Removes the element at the specified position in \n+     * (optional operation).  Any subsequent elements \n+     * are shifted to the left, subtracting one from their \n+     * indices.  Returns the element that was removed from\n+     * the list.\n+     * By construction, the returned value will be \n+     * between {@link #MIN_VALUE} and {@link #MAX_VALUE}, inclusive.\n+     * \n+     * @param index the index of the element to remove\n+     * @return the value of the element that was removed\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n     public int removeElementAt(int index) {\n         checkRange(index);\n         incrModCount();\n         return oldval;\n     }\n     \n+    /** \n+     * Replaces the element at the specified \n+     * position in me with the specified element\n+     * (optional operation). \n+     * Throws {@link IllegalArgumentException} if <i>element</i>\n+     * is less than {@link #MIN_VALUE} or greater than {@link #MAX_VALUE}.\n+     * \n+     * @param index the index of the element to change\n+     * @param element the value to be stored at the specified position\n+     * @return the value previously stored at the specified position\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n     public int set(int index, int element) {\n         assertValidUnsignedShort(element);\n         checkRange(index);\n         return oldval;\n     }\n         \n+    /** \n+     * Inserts the specified element at the specified position \n+     * (optional operation). Shifts the element currently \n+     * at that position (if any) and any subsequent elements to the \n+     * right, increasing their indices.\n+     * Throws {@link IllegalArgumentException} if <i>element</i>\n+     * is less than {@link #MIN_VALUE} or greater than {@link #MAX_VALUE}.\n+     * \n+     * @param index the index at which to insert the element\n+     * @param element the value to insert\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IllegalArgumentException if some aspect of the specified element \n+     *         prevents it from being added to me\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n     public void add(int index, int element) {\n         assertValidUnsignedShort(element);\n         checkRangeIncludingEndpoint(index);\n     // capacity methods\n     //-------------------------------------------------------------------------\n \n+    /** \n+     * Increases my capacity, if necessary, to ensure that I can hold at \n+     * least the number of elements specified by the minimum capacity \n+     * argument without growing.\n+     */\n     public void ensureCapacity(int mincap) {\n         incrModCount();\n         if(mincap > _data.length) {\n         }\n     }\n \n+    /** \n+     * Reduce my capacity, if necessary, to match my\n+     * current {@link #size}.\n+     */\n     public void trimToSize() {\n         incrModCount();\n         if(_size < _data.length) {\n     // attributes\n     //-------------------------------------------------------------------------\n     \n-    /** The maximum possible unsigned 16-bit value. */\n+    /** The maximum possible unsigned 16-bit value (<code>0xFFFF</code>). */\n     public static final int MAX_VALUE = 0xFFFF;\n \n \n-    /** The minimum possible unsigned 16-bit value. */\n+    /** The minimum possible unsigned 16-bit value  (<code>0x0000</code>). */\n     public static final int MIN_VALUE = 0;\n \n     private transient short[] _data = null;\n--- a/src/java/org/apache/commons/collections/primitives/IntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntList.java,v 1.11 2003/01/12 15:23:19 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntList.java,v 1.12 2003/01/13 12:59:45 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n package org.apache.commons.collections.primitives;\n \n /**\n- * An ordered collection (a list) of <code>int</code> values.\n+ * An ordered collection of <code>int</code> values.\n  *\n  * @see org.apache.commons.collections.primitives.adapters.IntListList\n  * @see org.apache.commons.collections.primitives.adapters.ListIntList\n  *\n  * @since Commons Collections 2.2\n- * @version $Revision: 1.11 $ $Date: 2003/01/12 15:23:19 $\n+ * @version $Revision: 1.12 $ $Date: 2003/01/13 12:59:45 $\n  * \n  * @author Rodney Waldhoff \n  */\n public interface IntList extends IntCollection {\n     /** \n+     * Appends the specified element to the end of me\n+     * (optional operation).  Returns <code>true</code>\n+     * if I changed as a result of this call.\n+     * <p/>\n+     * If a collection refuses to add the specified\n+     * element for any reason other than that it already contains\n+     * the element, it <i>must</i> throw an exception (rather than\n+     * simply returning <tt>false</tt>).  This preserves the invariant\n+     * that a collection always contains the specified element after \n+     * this call returns. \n+     * \n+     * @param element the value whose presence within me is to be ensured\n+     * @return <code>true</code> iff I changed as a result of this call\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IllegalArgumentException may be thrown if some aspect of the \n+     *         specified element prevents it from being added to me\n+     */\n+    boolean add(int element);\n+       \n+    /** \n      * Inserts the specified element at the specified position \n-     * within me (optional operation). Shifts the element currently \n+     * (optional operation). Shifts the element currently \n      * at that position (if any) and any subsequent elements to the \n      * right, increasing their indices.\n      * \n         \n     /**\n      * Returns my hash code.\n-     * <p>\n+     * <p />\n      * The hash code of an <code>IntList</code> is defined to be the\n      * result of the following calculation:\n      * <pre>int hash = 1;\n      * for(IntIterator iter = iterator(); iter.hasNext(); ) {\n      *   hash = 31*hash + iter.next();\n      * }</pre>\n-     * <p>\n+     * <p />\n      * This contract ensures that this method is consistent with \n      * {@link #equals} and with the {@link java.util.List#hashCode hashCode}\n      * method of a {@link java.util.List List} of {@link Integer}s. \n     int lastIndexOf(int element);\n     \n     /** \n-     * Returns a {@link IntListIterator list iterator} over all \n-     * my elements in the appropriate sequence.\n+     * Returns a \n+     * {@link IntListIterator bidirectional iterator}\n+     * over all my elements, in the appropriate sequence.\n      */\n     IntListIterator listIterator();\n     \n     /** \n-     * Returns a {@link IntListIterator list iterator}\n+     * Returns a \n+     * {@link IntListIterator bidirectional iterator}\n      * over my elements, in the appropriate sequence, \n      * starting at the specified position. The \n-     * specified index indicates the first element \n-     * that would be returned by an initial call \n-     * to the next method. An initial call to the \n-     * previous method would return the element \n-     * with the specified index minus one.\n+     * specified <i>index</i> indicates the first \n+     * element that would be returned by an initial \n+     * call to the \n+     * {@link IntListIterator#next next} \n+     * method. An initial call to the \n+     * {@link IntListIterator#previous previous}\n+     * method would return the element with the specified \n+     * <i>index</i> minus one.\n      * \n      * @throws IndexOutOfBoundsException if the specified index is out of range\n      */", "timestamp": 1042462785, "metainfo": ""}