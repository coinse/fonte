{"sha": "8ffdacacc3101c7744e21215693d57370fb1d352", "log": "Add @since tags   ", "commit": "\n--- a/src/java/org/apache/commons/collections/functors/CloneTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/CloneTransformer.java\n  * Clone is performed using <code>PrototypeFactory.getInstance(input).create()</code>.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/31 22:06:11 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/31 23:13:04 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Factory returning the singleton instance.\n      * \n      * @return the singleton instance\n+     * @since Commons Collections 3.1\n      */\n     public static Transformer getInstance() {\n         return INSTANCE;\n--- a/src/java/org/apache/commons/collections/functors/ExceptionClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionClosure.java\n  * Closure implementation that always throws an exception.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/03/31 22:06:11 $\n+ * @version $Revision: 1.6 $ $Date: 2004/03/31 23:13:04 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Factory returning the singleton instance.\n      * \n      * @return the singleton instance\n+     * @since Commons Collections 3.1\n      */\n     public static Closure getInstance() {\n         return INSTANCE;\n--- a/src/java/org/apache/commons/collections/functors/ExceptionFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionFactory.java\n  * Factory implementation that always throws an exception.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/03/31 22:06:11 $\n+ * @version $Revision: 1.6 $ $Date: 2004/03/31 23:13:04 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Factory returning the singleton instance.\n      * \n      * @return the singleton instance\n+     * @since Commons Collections 3.1\n      */\n     public static Factory getInstance() {\n         return INSTANCE;\n--- a/src/java/org/apache/commons/collections/functors/ExceptionPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionPredicate.java\n  * Predicate implementation that always throws an exception.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/03/31 22:06:11 $\n+ * @version $Revision: 1.6 $ $Date: 2004/03/31 23:13:04 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Factory returning the singleton instance.\n      * \n      * @return the singleton instance\n+     * @since Commons Collections 3.1\n      */\n     public static Predicate getInstance() {\n         return INSTANCE;\n--- a/src/java/org/apache/commons/collections/functors/ExceptionTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionTransformer.java\n  * Transformer implementation that always throws an exception.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/03/31 22:06:11 $\n+ * @version $Revision: 1.6 $ $Date: 2004/03/31 23:13:04 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Factory returning the singleton instance.\n      * \n      * @return the singleton instance\n+     * @since Commons Collections 3.1\n      */\n     public static Transformer getInstance() {\n         return INSTANCE;\n--- a/src/java/org/apache/commons/collections/functors/FalsePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/FalsePredicate.java\n  * Predicate implementation that always returns false.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/31 22:06:11 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/31 23:13:04 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Factory returning the singleton instance.\n      * \n      * @return the singleton instance\n+     * @since Commons Collections 3.1\n      */\n     public static Predicate getInstance() {\n         return INSTANCE;\n--- a/src/java/org/apache/commons/collections/functors/NOPClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/NOPClosure.java\n  * Closure implementation that does nothing.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/31 22:06:11 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/31 23:13:04 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Factory returning the singleton instance.\n      * \n      * @return the singleton instance\n+     * @since Commons Collections 3.1\n      */\n     public static Closure getInstance() {\n         return INSTANCE;\n--- a/src/java/org/apache/commons/collections/functors/NOPTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/NOPTransformer.java\n  * Transformer implementation that does nothing.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/31 22:06:11 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/31 23:13:04 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Factory returning the singleton instance.\n      * \n      * @return the singleton instance\n+     * @since Commons Collections 3.1\n      */\n     public static Transformer getInstance() {\n         return INSTANCE;\n--- a/src/java/org/apache/commons/collections/functors/NotNullPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NotNullPredicate.java\n  * Predicate implementation that returns true if the input is not null.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/31 22:06:11 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/31 23:13:04 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Factory returning the singleton instance.\n      * \n      * @return the singleton instance\n+     * @since Commons Collections 3.1\n      */\n     public static Predicate getInstance() {\n         return INSTANCE;\n--- a/src/java/org/apache/commons/collections/functors/NullPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NullPredicate.java\n  * Predicate implementation that returns true if the input is null.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/31 22:06:11 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/31 23:13:04 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Factory returning the singleton instance.\n      * \n      * @return the singleton instance\n+     * @since Commons Collections 3.1\n      */\n     public static Predicate getInstance() {\n         return INSTANCE;\n--- a/src/java/org/apache/commons/collections/functors/StringValueTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/StringValueTransformer.java\n  * Transformer implementation that returns the <code>String.valueOf</code>.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/03/31 22:06:11 $\n+ * @version $Revision: 1.6 $ $Date: 2004/03/31 23:13:04 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Factory returning the singleton instance.\n      * \n      * @return the singleton instance\n+     * @since Commons Collections 3.1\n      */\n     public static Transformer getInstance() {\n         return INSTANCE;\n--- a/src/java/org/apache/commons/collections/functors/TruePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/TruePredicate.java\n  * Predicate implementation that always returns true.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/31 22:06:11 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/31 23:13:04 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Factory returning the singleton instance.\n      * \n      * @return the singleton instance\n+     * @since Commons Collections 3.1\n      */\n     public static Predicate getInstance() {\n         return INSTANCE;", "timestamp": 1080774784, "metainfo": ""}