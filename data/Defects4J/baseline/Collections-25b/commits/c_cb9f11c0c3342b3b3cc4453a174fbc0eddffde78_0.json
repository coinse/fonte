{"sha": "cb9f11c0c3342b3b3cc4453a174fbc0eddffde78", "log": "[COLLECTIONS-399] Added get(index) method to BoundedFifoBuffer.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n      * Write the buffer out using a custom routine.\n      *\n      * @param out  the output stream\n-     * @throws IOException\n+     * @throws IOException if an I/O error occurs while writing to the output stream\n      */\n     private void writeObject(ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n      * Read the buffer in using a custom routine.\n      *\n      * @param in  the input stream\n-     * @throws IOException\n-     * @throws ClassNotFoundException\n+     * @throws IOException if an I/O error occurs while writing to the output stream\n+     * @throws ClassNotFoundException if the class of a serialized object can not be found\n      */\n     @SuppressWarnings(\"unchecked\")\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         return elements[start];\n     }\n \n+    /**\n+     * Returns the element at the specified position in this buffer.\n+     *\n+     * @param index the position of the element in the buffer\n+     * @return the element at position {@code index}\n+     * @throws NoSuchElementException if the requested position is outside the range [0, size)\n+     */\n+    public E get(int index) {\n+        if (index < 0 || index >= size()) {\n+            throw new NoSuchElementException();\n+        }\n+        \n+        final int idx = (start + index) % maxElements;\n+        return elements[idx];\n+    }\n+ \n     /**\n      * Removes the least recently inserted element from this buffer.\n      *\n--- a/src/test/java/org/apache/commons/collections/buffer/TestBoundedFifoBuffer.java\n+++ b/src/test/java/org/apache/commons/collections/buffer/TestBoundedFifoBuffer.java\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.NoSuchElementException;\n \n import junit.framework.Test;\n \n             return;\n         }\n         fail();\n+    }\n+    \n+    /**\n+     * Tests that the get(index) method correctly throws an exception.\n+     */\n+    public void testGetException() {\n+        resetFull();\n+        try {\n+            getCollection().get(-1);\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            getCollection().get(getCollection().size());\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testGetIndex() {\n+        resetFull();\n+        \n+        BoundedFifoBuffer<E> buffer = getCollection();\n+        List<E> confirmed = getConfirmed();\n+        for (int i = 0; i < confirmed.size(); i++) {\n+            assertEquals(confirmed.get(i), buffer.get(i));\n+        }\n+\n+        // remove the first two elements and check again\n+        buffer.remove();\n+        buffer.remove();\n+        \n+        for (int i = 0; i < buffer.size(); i++) {\n+            assertEquals(confirmed.get(i + 2), buffer.get(i));\n+        }        \n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/collections/buffer/TestCircularFifoBuffer.java\n+++ b/src/test/java/org/apache/commons/collections/buffer/TestCircularFifoBuffer.java\n         assertEquals(true, b3.contains(\"c\"));\n     }\n \n+    public void testGetIndex() {\n+        resetFull();\n+        \n+        CircularFifoBuffer<E> buffer = getCollection();\n+        List<E> confirmed = getConfirmed();\n+        for (int i = 0; i < confirmed.size(); i++) {\n+            assertEquals(confirmed.get(i), buffer.get(i));\n+        }\n+\n+        // remove the first two elements and check again\n+        buffer.remove();\n+        buffer.remove();\n+        \n+        for (int i = 0; i < buffer.size(); i++) {\n+            assertEquals(confirmed.get(i + 2), buffer.get(i));\n+        }        \n+    }\n+\n     @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";", "timestamp": 1340139948, "metainfo": ""}