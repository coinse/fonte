{"sha": "a47d25a4ff3241b79ed53c705bc9f86b3e14fe3d", "log": "* allow zero as an initial capacity for the primitive array lists (once again).  (java.util.ArrayList allows it, why shouldn't we?) * add tests to enforce the contract   ", "commit": "\n--- a/src/java/org/apache/commons/collections/primitives/FloatArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/FloatArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/FloatArrayList.java,v 1.4 2002/08/23 17:31:28 pjack Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/23 17:31:28 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/FloatArrayList.java,v 1.5 2002/09/07 20:33:32 rwaldhoff Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/09/07 20:33:32 $\n  *\n  * ====================================================================\n  *\n  * {@link java.util.ArrayList} of {@link Float} values and allows for\n  * better compile-time type checking.<P>\n  *\n- * @version $Revision: 1.4 $ $Date: 2002/08/23 17:31:28 $\n+ * @version $Revision: 1.5 $ $Date: 2002/09/07 20:33:32 $\n  * @author Rodney Waldhoff \n  */\n public class FloatArrayList extends AbstractList implements List, Serializable {\n      *  capacity.\n      *\n      *  @param capacity  the initial capacity for the list\n-     *  @throws IllegalArgumentException if capacity is less than or equal \n-     *   to zero\n+     *  @throws IllegalArgumentException if capacity is less than zero\n      */\n     public FloatArrayList(int capacity) {\n-        if (capacity <= 0) {\n+        if (capacity < 0) {\n             throw new IllegalArgumentException(\"capacity=\" + capacity);\n         }\n         _data = new float[capacity];\n--- a/src/java/org/apache/commons/collections/primitives/IntArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntArrayList.java,v 1.5 2002/08/22 01:50:54 pjack Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/22 01:50:54 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntArrayList.java,v 1.6 2002/09/07 20:33:32 rwaldhoff Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/09/07 20:33:32 $\n  *\n  * ====================================================================\n  *\n  * {@link java.util.ArrayList} of {@link Integer} values and allows for\n  * better compile-time type checking.<P>\n  *\n- * @version $Revision: 1.5 $ $Date: 2002/08/22 01:50:54 $\n+ * @version $Revision: 1.6 $ $Date: 2002/09/07 20:33:32 $\n  * @author Rodney Waldhoff \n  */\n public class IntArrayList extends AbstractIntArrayList implements Serializable {\n      *  Constructs a new <Code>IntArrayList</Code> with the given capacity.\n      *\n      *  @param the capacity for the list\n-     *  @throws IllegalArgumentException  if the capacity is less than or\n-     *   equal to zero\n+     *  @throws IllegalArgumentException  if the capacity is less than zero\n      */\n     public IntArrayList(int capacity) {\n-        if (capacity <= 0) {\n+        if (capacity < 0) {\n             throw new IllegalArgumentException(\"capacity \" + capacity);\n         }\n         _data = new int[capacity];\n--- a/src/java/org/apache/commons/collections/primitives/LongArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/LongArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/LongArrayList.java,v 1.5 2002/08/22 01:50:54 pjack Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/22 01:50:54 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/LongArrayList.java,v 1.6 2002/09/07 20:33:32 rwaldhoff Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/09/07 20:33:32 $\n  *\n  * ====================================================================\n  *\n  * {@link java.util.ArrayList} of {@link Long} values and allows for\n  * better compile-time type checking.<P>\n  *\n- * @version $Revision: 1.5 $ $Date: 2002/08/22 01:50:54 $\n+ * @version $Revision: 1.6 $ $Date: 2002/09/07 20:33:32 $\n  * @author Rodney Waldhoff \n  */\n public class LongArrayList extends AbstractLongArrayList implements Serializable {\n      *  capacity.\n      *\n      *  @param capacity  the initial capacity for the array\n-     *  @throws IllegalArgumentException if the capacity is less than or \n-     *    equal to zero\n+     *  @throws IllegalArgumentException if the capacity is less than zero\n      */\n     public LongArrayList(int capacity) {\n-        if (capacity <= 0) {\n+        if (capacity < 0) {\n             throw new IllegalArgumentException(\"capacity=\" + capacity);\n         }\n         _data = new long[capacity];\n--- a/src/java/org/apache/commons/collections/primitives/ShortArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ShortArrayList.java,v 1.5 2002/08/22 01:50:54 pjack Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/22 01:50:54 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ShortArrayList.java,v 1.6 2002/09/07 20:33:32 rwaldhoff Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/09/07 20:33:32 $\n  *\n  * ====================================================================\n  *\n  * {@link java.util.ArrayList} of {@link Short} values and allows for\n  * better compile-time type checking.<P>\n  *\n- * @version $Revision: 1.5 $ $Date: 2002/08/22 01:50:54 $\n+ * @version $Revision: 1.6 $ $Date: 2002/09/07 20:33:32 $\n  * @author Rodney Waldhoff \n  */\n public class ShortArrayList extends AbstractShortArrayList implements Serializable {\n      *  capacity.\n      *\n      *  @param capacity  the initial capacity for the array\n-     *  @throws IllegalArgumentException if the capacity is less than or \n-     *    equal to zero\n+     *  @throws IllegalArgumentException if the capacity is less than zero\n      */\n     public ShortArrayList(int capacity) {\n-        if (capacity <= 0) {\n+        if (capacity < 0) {\n             throw new IllegalArgumentException(\"capacity=\" + capacity);\n         }\n         _data = new short[capacity];\n--- a/src/java/org/apache/commons/collections/primitives/UnsignedByteArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedByteArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedByteArrayList.java,v 1.5 2002/08/22 01:50:54 pjack Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/22 01:50:54 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedByteArrayList.java,v 1.6 2002/09/07 20:33:32 rwaldhoff Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/09/07 20:33:32 $\n  *\n  * ====================================================================\n  *\n  * than a {@link java.util.ArrayList} and offers better compile-time type\n  * checking.\n  *\n- * @version $Revision: 1.5 $ $Date: 2002/08/22 01:50:54 $\n+ * @version $Revision: 1.6 $ $Date: 2002/09/07 20:33:32 $\n  * @author Rodney Waldhoff \n  */\n public class UnsignedByteArrayList extends AbstractShortArrayList implements Serializable {\n      *  specified initial capacity.\n      *\n      *  @param capacity  the capacity for this list\n-     *  @throws IllegalArgumentException if the given capacity is less than \n-     *    or equal to zero\n+     *  @throws IllegalArgumentException if the given capacity is less than zero\n      */\n     public UnsignedByteArrayList(int capacity) {\n-        if (capacity <= 0) {\n+        if (capacity < 0) {\n             throw new IllegalArgumentException(\"capacity=\" + capacity);\n         }\n         _data = new byte[capacity];\n         checkRangeIncludingEndpoint(index);\n         ensureCapacity(_size+1);\n         int numtomove = _size-index;\n-\tSystem.arraycopy(_data,index,_data,index+1,numtomove);\n-\t_data[index] = fromShort(value);\n-\t_size++;\n+        System.arraycopy(_data,index,_data,index+1,numtomove);\n+        _data[index] = fromShort(value);\n+        _size++;\n     }\n \n     public void clear() {\n-\tmodCount++;\n+        modCount++;\n         _size = 0;\n     }\n \n     public short removeShortAt(int index) {\n         checkRange(index);\n-\tmodCount++;\n+        modCount++;\n         short oldval = toShort(_data[index]);\n-\tint numtomove = _size - index - 1;\n-\tif(numtomove > 0) {\n-\t    System.arraycopy(_data,index+1,_data,index,numtomove);\n+        int numtomove = _size - index - 1;\n+\t    if(numtomove > 0) {\n+\t        System.arraycopy(_data,index+1,_data,index,numtomove);\n         }\n         _size--;\n-\treturn oldval;\n+        return oldval;\n     }\n \n     public boolean removeShort(short value) {\n     }\n \n     public void ensureCapacity(int mincap) {\n-\tmodCount++;\n-\tif(mincap > _data.length) {\n-\t    int newcap = (_data.length * 3)/2 + 1;\n-\t    byte[] olddata = _data;\n-\t    _data = new byte[newcap < mincap ? mincap : newcap];\n-\t    System.arraycopy(olddata,0,_data,0,_size);\n-\t}\n+        modCount++;\n+        if(mincap > _data.length) {\n+            int newcap = (_data.length * 3)/2 + 1;\n+            byte[] olddata = _data;\n+            _data = new byte[newcap < mincap ? mincap : newcap];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n     }\n \n     public void trimToSize() {\n-\tmodCount++;\n-\tif(_size < _data.length) {\n-\t    byte[] olddata = _data;\n-\t    _data = new byte[_size];\n-\t    System.arraycopy(olddata,0,_data,0,_size);\n-\t}\n+        modCount++;\n+        if(_size < _data.length) {\n+            byte[] olddata = _data;\n+            _data = new byte[_size];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n     }\n \n     //---------------------------------------------------------------\n     }\n \n     private void writeObject(ObjectOutputStream out) throws IOException{\n-\tout.defaultWriteObject();\n+        out.defaultWriteObject();\n         out.writeInt(_data.length);\n-\tfor(int i=0;i<_size;i++) {\n+        for(int i=0;i<_size;i++) {\n             out.writeByte(_data[i]);\n         }\n     }\n \n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n-\tin.defaultReadObject();\n+        in.defaultReadObject();\n         _data = new byte[in.readInt()];\n-\tfor(int i=0;i<_size;i++) {\n+        for(int i=0;i<_size;i++) {\n             _data[i] = in.readByte();\n         }\n     }\n--- a/src/java/org/apache/commons/collections/primitives/UnsignedIntArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedIntArrayList.java,v 1.5 2002/08/22 01:50:54 pjack Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/22 01:50:54 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedIntArrayList.java,v 1.6 2002/09/07 20:33:32 rwaldhoff Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/09/07 20:33:32 $\n  *\n  * ====================================================================\n  *\n  * than a {@link java.util.ArrayList} and offers better compile-time type\n  * checking.\n  *\n- * @version $Revision: 1.5 $ $Date: 2002/08/22 01:50:54 $\n+ * @version $Revision: 1.6 $ $Date: 2002/09/07 20:33:32 $\n  * @author Rodney Waldhoff \n  */\n public class UnsignedIntArrayList extends AbstractLongArrayList implements Serializable {\n      *  specified initial capacity.\n      *\n      *  @param capacity  the capacity for this list\n-     *  @throws IllegalArgumentException if the given capacity is less than \n-     *    or equal to zero\n+     *  @throws IllegalArgumentException if the given capacity is less than zero\n      */\n     public UnsignedIntArrayList(int capacity) {\n-        if (capacity <= 0) {\n+        if (capacity < 0) {\n             throw new IllegalArgumentException(\"capacity=\" + capacity);\n         }\n         _data = new int[capacity];\n         checkRangeIncludingEndpoint(index);\n         ensureCapacity(_size+1);\n         int numtomove = _size-index;\n-\tSystem.arraycopy(_data,index,_data,index+1,numtomove);\n-\t_data[index] = fromLong(value);\n-\t_size++;\n+        System.arraycopy(_data,index,_data,index+1,numtomove);\n+        _data[index] = fromLong(value);\n+        _size++;\n     }\n \n     public void clear() {\n-\tmodCount++;\n+        modCount++;\n         _size = 0;\n     }\n \n     public long removeLongAt(int index) {\n         checkRange(index);\n-\tmodCount++;\n+        modCount++;\n         long oldval = toLong(_data[index]);\n-\tint numtomove = _size - index - 1;\n-\tif(numtomove > 0) {\n-\t    System.arraycopy(_data,index+1,_data,index,numtomove);\n+        int numtomove = _size - index - 1;\n+        if(numtomove > 0) {\n+            System.arraycopy(_data,index+1,_data,index,numtomove);\n         }\n         _size--;\n-\treturn oldval;\n+        return oldval;\n     }\n \n     public boolean removeLong(long value) {\n     }\n \n     public void ensureCapacity(int mincap) {\n-\tmodCount++;\n-\tif(mincap > _data.length) {\n-\t    int newcap = (_data.length * 3)/2 + 1;\n-\t    int[] olddata = _data;\n-\t    _data = new int[newcap < mincap ? mincap : newcap];\n-\t    System.arraycopy(olddata,0,_data,0,_size);\n-\t}\n+        modCount++;\n+\t    if(mincap > _data.length) {\n+            int newcap = (_data.length * 3)/2 + 1;\n+            int[] olddata = _data;\n+            _data = new int[newcap < mincap ? mincap : newcap];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n     }\n \n     public void trimToSize() {\n-\tmodCount++;\n-\tif(_size < _data.length) {\n-\t    int[] olddata = _data;\n-\t    _data = new int[_size];\n-\t    System.arraycopy(olddata,0,_data,0,_size);\n-\t}\n+        modCount++;\n+        if(_size < _data.length) {\n+            int[] olddata = _data;\n+            _data = new int[_size];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n     }\n \n     //---------------------------------------------------------------\n         }\n     }\n     private void writeObject(ObjectOutputStream out) throws IOException{\n-\tout.defaultWriteObject();\n+        out.defaultWriteObject();\n         out.writeInt(_data.length);\n-\tfor(int i=0;i<_size;i++) {\n+        for(int i=0;i<_size;i++) {\n             out.writeInt(_data[i]);\n         }\n     }\n \n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n-\tin.defaultReadObject();\n+        in.defaultReadObject();\n         _data = new int[in.readInt()];\n-\tfor(int i=0;i<_size;i++) {\n+        for(int i=0;i<_size;i++) {\n             _data[i] = in.readInt();\n         }\n     }\n--- a/src/java/org/apache/commons/collections/primitives/UnsignedShortArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedShortArrayList.java,v 1.5 2002/08/22 01:50:54 pjack Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/22 01:50:54 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedShortArrayList.java,v 1.6 2002/09/07 20:33:32 rwaldhoff Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/09/07 20:33:32 $\n  *\n  * ====================================================================\n  *\n  * than a {@link java.util.ArrayList} and offers better compile-time type\n  * checking.\n  *\n- * @version $Revision: 1.5 $ $Date: 2002/08/22 01:50:54 $\n+ * @version $Revision: 1.6 $ $Date: 2002/09/07 20:33:32 $\n  * @author Rodney Waldhoff \n  */\n public class UnsignedShortArrayList extends AbstractIntArrayList implements Serializable {\n      *  specified initial capacity.\n      *\n      *  @param capacity  the capacity for this list\n-     *  @throws IllegalArgumentException if the given capacity is less than \n-     *    or equal to zero\n+     *  @throws IllegalArgumentException if the given capacity is less than zero\n      */\n     public UnsignedShortArrayList(int capacity) {\n-        if (capacity <= 0) {\n+        if (capacity < 0) {\n             throw new IllegalArgumentException(\"capacity=\" + capacity);\n         }\n         _data = new short[capacity];\n         checkRangeIncludingEndpoint(index);\n         ensureCapacity(_size+1);\n         int numtomove = _size-index;\n-\tSystem.arraycopy(_data,index,_data,index+1,numtomove);\n-\t_data[index] = fromInt(value);\n-\t_size++;\n+        System.arraycopy(_data,index,_data,index+1,numtomove);\n+        _data[index] = fromInt(value);\n+        _size++;\n     }\n \n     public void clear() {\n-\tmodCount++;\n+        modCount++;\n         _size = 0;\n     }\n \n     public int removeIntAt(int index) {\n         checkRange(index);\n-\tmodCount++;\n+        modCount++;\n         int oldval = toInt(_data[index]);\n-\tint numtomove = _size - index - 1;\n-\tif(numtomove > 0) {\n-\t    System.arraycopy(_data,index+1,_data,index,numtomove);\n+        int numtomove = _size - index - 1;\n+        if(numtomove > 0) {\n+            System.arraycopy(_data,index+1,_data,index,numtomove);\n         }\n         _size--;\n-\treturn oldval;\n+        return oldval;\n     }\n \n     public boolean removeInt(int value) {\n     }\n \n     public void ensureCapacity(int mincap) {\n-\tmodCount++;\n-\tif(mincap > _data.length) {\n-\t    int newcap = (_data.length * 3)/2 + 1;\n-\t    short[] olddata = _data;\n-\t    _data = new short[newcap < mincap ? mincap : newcap];\n-\t    System.arraycopy(olddata,0,_data,0,_size);\n-\t}\n+        modCount++;\n+\t    if(mincap > _data.length) {\n+            int newcap = (_data.length * 3)/2 + 1;\n+            short[] olddata = _data;\n+            _data = new short[newcap < mincap ? mincap : newcap];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n     }\n \n     public void trimToSize() {\n-\tmodCount++;\n-\tif(_size < _data.length) {\n-\t    short[] olddata = _data;\n-\t    _data = new short[_size];\n-\t    System.arraycopy(olddata,0,_data,0,_size);\n-\t}\n+        modCount++;\n+        if(_size < _data.length) {\n+            short[] olddata = _data;\n+            _data = new short[_size];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n     }\n \n     //---------------------------------------------------------------\n     }\n \n     private void writeObject(ObjectOutputStream out) throws IOException{\n-\tout.defaultWriteObject();\n+        out.defaultWriteObject();\n         out.writeInt(_data.length);\n-\tfor(int i=0;i<_size;i++) {\n+        for(int i=0;i<_size;i++) {\n             out.writeShort(_data[i]);\n         }\n     }\n \n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n-\tin.defaultReadObject();\n+        in.defaultReadObject();\n         _data = new short[in.readInt()];\n-\tfor(int i=0;i<_size;i++) {\n+        for(int i=0;i<_size;i++) {\n             _data[i] = in.readShort();\n         }\n     }\n--- a/src/test/org/apache/commons/collections/primitives/TestFloatArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestFloatArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestFloatArrayList.java,v 1.2 2002/06/21 04:01:31 mas Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/06/21 04:01:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestFloatArrayList.java,v 1.3 2002/09/07 20:33:32 rwaldhoff Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/09/07 20:33:32 $\n  *\n  * ====================================================================\n  *\n import java.util.List;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2002/06/21 04:01:31 $\n+ * @version $Revision: 1.3 $ $Date: 2002/09/07 20:33:32 $\n  * @author Rodney Waldhoff\n  */\n public class TestFloatArrayList extends TestList {\n     }\n \n     //------------------------------------------------------------------- Tests\n+\n+   public void testZeroInitialCapacityIsValid() {\n+       FloatArrayList list = new FloatArrayList(0);\n+   }\n \n     public void testAddGet() {\n         FloatArrayList list = createList();\n--- a/src/test/org/apache/commons/collections/primitives/TestIntArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/19 21:19:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntArrayList.java,v 1.4 2002/09/07 20:33:32 rwaldhoff Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/09/07 20:33:32 $\n  *\n  * ====================================================================\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n+ * @version $Revision: 1.4 $ $Date: 2002/09/07 20:33:32 $\n  * @author Rodney Waldhoff\n  */\n public class TestIntArrayList extends TestAbstractIntArrayList {\n         return new IntArrayList();\n     }\n \n+    //---------------------------------------------------------------- Tests\n+\n+    public void testZeroInitialCapacityIsValid() {\n+        IntArrayList list = new IntArrayList(0);\n+    }\n+\n }\n \n--- a/src/test/org/apache/commons/collections/primitives/TestLongArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestLongArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestLongArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/19 21:19:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestLongArrayList.java,v 1.4 2002/09/07 20:33:32 rwaldhoff Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/09/07 20:33:32 $\n  *\n  * ====================================================================\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n+ * @version $Revision: 1.4 $ $Date: 2002/09/07 20:33:32 $\n  * @author Rodney Waldhoff\n  */\n public class TestLongArrayList extends TestAbstractLongArrayList {\n         return new LongArrayList();\n     }\n \n+    //---------------------------------------------------------------- Tests\n+\n+    public void testZeroInitialCapacityIsValid() {\n+        LongArrayList list = new LongArrayList(0);\n+    }\n+\n }\n \n--- a/src/test/org/apache/commons/collections/primitives/TestShortArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestShortArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/19 21:19:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestShortArrayList.java,v 1.4 2002/09/07 20:33:32 rwaldhoff Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/09/07 20:33:32 $\n  *\n  * ====================================================================\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n+ * @version $Revision: 1.4 $ $Date: 2002/09/07 20:33:32 $\n  * @author Rodney Waldhoff\n  */\n public class TestShortArrayList extends TestAbstractShortArrayList {\n         return new ShortArrayList();\n     }\n \n+    //---------------------------------------------------------------- Tests\n+\n+    public void testZeroInitialCapacityIsValid() {\n+        ShortArrayList list = new ShortArrayList(0);\n+    }\n+\n }\n \n--- a/src/test/org/apache/commons/collections/primitives/TestUnsignedByteArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestUnsignedByteArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedByteArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/19 21:19:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedByteArrayList.java,v 1.4 2002/09/07 20:33:32 rwaldhoff Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/09/07 20:33:32 $\n  *\n  * ====================================================================\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n+ * @version $Revision: 1.4 $ $Date: 2002/09/07 20:33:32 $\n  * @author Rodney Waldhoff\n  */\n public class TestUnsignedByteArrayList extends TestAbstractShortArrayList {\n         return new UnsignedByteArrayList();\n     }\n \n+    //---------------------------------------------------------------- Tests\n+\n+    public void testZeroInitialCapacityIsValid() {\n+        UnsignedByteArrayList list = new UnsignedByteArrayList(0);\n+    }\n+\n }\n \n--- a/src/test/org/apache/commons/collections/primitives/TestUnsignedIntArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestUnsignedIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedIntArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/19 21:19:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedIntArrayList.java,v 1.4 2002/09/07 20:33:32 rwaldhoff Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/09/07 20:33:32 $\n  *\n  * ====================================================================\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n+ * @version $Revision: 1.4 $ $Date: 2002/09/07 20:33:32 $\n  * @author Rodney Waldhoff\n  */\n public class TestUnsignedIntArrayList extends TestAbstractLongArrayList {\n         return new UnsignedIntArrayList();\n     }\n \n+    //---------------------------------------------------------------- Tests\n+\n+    public void testZeroInitialCapacityIsValid() {\n+        UnsignedIntArrayList list = new UnsignedIntArrayList(0);\n+    }\n+\n }\n \n--- a/src/test/org/apache/commons/collections/primitives/TestUnsignedShortArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestUnsignedShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedShortArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/19 21:19:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedShortArrayList.java,v 1.4 2002/09/07 20:33:32 rwaldhoff Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/09/07 20:33:32 $\n  *\n  * ====================================================================\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n+ * @version $Revision: 1.4 $ $Date: 2002/09/07 20:33:32 $\n  * @author Rodney Waldhoff\n  */\n public class TestUnsignedShortArrayList extends TestAbstractIntArrayList {\n         return new UnsignedShortArrayList();\n     }\n \n+    //---------------------------------------------------------------- Tests\n+\n+    public void testZeroInitialCapacityIsValid() {\n+        UnsignedShortArrayList list = new UnsignedShortArrayList(0);\n+    }\n+\n }\n ", "timestamp": 1031430812, "metainfo": ""}