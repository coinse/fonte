{"sha": "ce1dc52becc6c0b93c5a041cb527e945a48795c0", "log": "Add comment to Todo.  ", "commit": "\n--- a/src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java\n         assertEquals(\"hashCodes should be the same\", getConfirmed().hashCode(), getMap().hashCode());\n         // this fails for LRUMap because confirmed.equals() somehow modifies\n         // map, causing concurrent modification exceptions.\n-        //assertEquals(\"Map should still equal HashMap\", confirmed, map);\n+        // assertEquals(\"Map should still equal HashMap\", confirmed, map);\n         // this works though and performs the same verification:\n         assertTrue(\"Map should still equal HashMap\", getMap().equals(getConfirmed()));\n         // TODO: this should really be reexamined to figure out why LRU map\n         // behaves like it does (the equals shouldn't modify since all accesses\n         // by the confirmed collection should be through an iterator, thus not\n         // causing LRUMap to change).\n+        // When comparing two maps, the entries in the map have to be accessed\n+        // (usually with the get(Object) method). In the case of the LRUMap, this\n+        // also alters the modCount as moveToMRU is called for the retrieved entry.\n+        // Imho, the modCount should not be increased for a read-only operation.\n     }\n \n     public void verifyEntrySet() {", "timestamp": 1371405755, "metainfo": ""}