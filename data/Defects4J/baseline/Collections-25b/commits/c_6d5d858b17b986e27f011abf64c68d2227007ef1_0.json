{"sha": "6d5d858b17b986e27f011abf64c68d2227007ef1", "log": "Remove added inheritDoc tags again.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/bidimap/AbstractBidiMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/AbstractBidiMapDecorator.java\n         return decorated().mapIterator();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public K getKey(Object value) {\n         return decorated().getKey(value);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public K removeValue(Object value) {\n         return decorated().removeValue(value);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public BidiMap<V, K> inverseBidiMap() {\n         return decorated().inverseBidiMap();\n     }\n--- a/src/main/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java\n     // Map delegation\n     //-----------------------------------------------------------------------\n     \n-    /**\n-     * {@inheritDoc}\n-     */\n     public V get(Object key) {\n         return normalMap.get(key);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public int size() {\n         return normalMap.size();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public boolean isEmpty() {\n         return normalMap.isEmpty();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public boolean containsKey(Object key) {\n         return normalMap.containsKey(key);\n     }\n     // BidiMap changes\n     //-----------------------------------------------------------------------\n     \n-    /**\n-     * {@inheritDoc}\n-     */\n     public V put(K key, V value) {\n         if (normalMap.containsKey(key)) {\n             reverseMap.remove(normalMap.get(key));\n         return obj;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public void putAll(Map<? extends K, ? extends V> map) {\n         for (Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {\n             put(entry.getKey(), entry.getValue());\n         }\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public V remove(Object key) {\n         V value = null;\n         if (normalMap.containsKey(key)) {\n         return value;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public void clear() {\n         normalMap.clear();\n         reverseMap.clear();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public boolean containsValue(Object value) {\n         return reverseMap.containsKey(value);\n     }\n         return new BidiMapIterator<K, V>(this);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public K getKey(Object value) {\n         return reverseMap.get(value);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public K removeValue(Object value) {\n         K key = null;\n         if (reverseMap.containsKey(value)) {\n         return key;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public BidiMap<V, K> inverseBidiMap() {\n         if (inverseBidiMap == null) {\n             inverseBidiMap = createBidiMap(reverseMap, normalMap, this);\n             this.iterator = parent.normalMap.entrySet().iterator();\n         }\n \n-        /** {@inheritDoc} */\n         public boolean hasNext() {\n             return iterator.hasNext();\n         }\n \n-        /** {@inheritDoc} */\n         public K next() {\n             last = iterator.next();\n             canRemove = true;\n             return last.getKey();\n         }\n \n-        /** {@inheritDoc} */\n         public void remove() {\n             if (canRemove == false) {\n                 throw new IllegalStateException(\"Iterator remove() can only be called once after next()\");\n             canRemove = false;\n         }\n \n-        /** {@inheritDoc} */\n         public K getKey() {\n             if (last == null) {\n                 throw new IllegalStateException(\n             return last.getKey();\n         }\n \n-        /** {@inheritDoc} */\n         public V getValue() {\n             if (last == null) {\n                 throw new IllegalStateException(\n             return last.getValue();\n         }\n \n-        /** {@inheritDoc} */\n         public V setValue(V value) {\n             if (last == null) {\n                 throw new IllegalStateException(\n             return parent.put(last.getKey(), value);\n         }\n \n-        /** {@inheritDoc} */\n         public void reset() {\n             iterator = parent.normalMap.entrySet().iterator();\n             last = null;\n--- a/src/main/java/org/apache/commons/collections/bidimap/AbstractOrderedBidiMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/AbstractOrderedBidiMapDecorator.java\n         return decorated().mapIterator();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public K firstKey() {\n         return decorated().firstKey();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public K lastKey() {\n         return decorated().lastKey();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public K nextKey(K key) {\n         return decorated().nextKey(key);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public K previousKey(K key) {\n         return decorated().previousKey(key);\n     }\n--- a/src/main/java/org/apache/commons/collections/bidimap/AbstractSortedBidiMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/AbstractSortedBidiMapDecorator.java\n         return decorated().inverseBidiMap();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public Comparator<? super K> comparator() {\n         return decorated().comparator();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public Comparator<? super V> valueComparator() {\n         return decorated().valueComparator();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public SortedMap<K, V> subMap(K fromKey, K toKey) {\n         return decorated().subMap(fromKey, toKey);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public SortedMap<K, V> headMap(K toKey) {\n         return decorated().headMap(toKey);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public SortedMap<K, V> tailMap(K fromKey) {\n         return decorated().tailMap(fromKey);\n     }\n--- a/src/main/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n \n     //-----------------------------------------------------------------------\n     \n-    /**\n-     * {@inheritDoc}\n-     */\n     public Comparator<? super K> comparator() {\n         return ((SortedMap<K, V>) normalMap).comparator();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public Comparator<? super V> valueComparator() {\n         return ((SortedMap<V, K>) reverseMap).comparator();\n         \n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public K firstKey() {\n         return ((SortedMap<K, V>) normalMap).firstKey();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public K lastKey() {\n         return ((SortedMap<K, V>) normalMap).lastKey();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public K nextKey(K key) {\n         if (isEmpty()) {\n             return null;\n         return null;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public K previousKey(K key) {\n         if (isEmpty()) {\n             return null;\n         return new BidiOrderedMapIterator<K, V>(this);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public SortedBidiMap<V, K> inverseSortedBidiMap() {\n         return inverseBidiMap();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public OrderedBidiMap<V, K> inverseOrderedBidiMap() {\n         return inverseBidiMap();\n     }\n \n     //-----------------------------------------------------------------------\n     \n-    /**\n-     * {@inheritDoc}\n-     */\n     public SortedMap<K, V> headMap(K toKey) {\n         SortedMap<K, V> sub = ((SortedMap<K, V>) normalMap).headMap(toKey);\n         return new ViewMap<K, V>(this, sub);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public SortedMap<K, V> tailMap(K fromKey) {\n         SortedMap<K, V> sub = ((SortedMap<K, V>) normalMap).tailMap(fromKey);\n         return new ViewMap<K, V>(this, sub);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     public SortedMap<K, V> subMap(K fromKey, K toKey) {\n         SortedMap<K, V> sub = ((SortedMap<K, V>) normalMap).subMap(fromKey, toKey);\n         return new ViewMap<K, V>(this, sub);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     @Override\n     public SortedBidiMap<V, K> inverseBidiMap() {\n         return (SortedBidiMap<V, K>) super.inverseBidiMap();\n             iterator = new ArrayList<Map.Entry<K, V>>(parent.entrySet()).listIterator();\n         }\n \n-        /** {@inheritDoc} */\n         public boolean hasNext() {\n             return iterator.hasNext();\n         }\n \n-        /** {@inheritDoc} */\n         public K next() {\n             last = iterator.next();\n             return last.getKey();\n         }\n \n-        /** {@inheritDoc} */\n         public boolean hasPrevious() {\n             return iterator.hasPrevious();\n         }\n \n-        /** {@inheritDoc} */\n         public K previous() {\n             last = iterator.previous();\n             return last.getKey();\n         }\n \n-        /** {@inheritDoc} */\n         public void remove() {\n             iterator.remove();\n             parent.remove(last.getKey());\n             last = null;\n         }\n \n-        /** {@inheritDoc} */\n         public K getKey() {\n             if (last == null) {\n                 throw new IllegalStateException(\n             return last.getKey();\n         }\n \n-        /** {@inheritDoc} */\n         public V getValue() {\n             if (last == null) {\n                 throw new IllegalStateException(\n             return last.getValue();\n         }\n \n-        /** {@inheritDoc} */\n         public V setValue(V value) {\n             if (last == null) {\n                 throw new IllegalStateException(\n             return parent.put(last.getKey(), value);\n         }\n \n-        /** {@inheritDoc} */\n         public void reset() {\n             iterator = new ArrayList<Map.Entry<K, V>>(parent.entrySet()).listIterator();\n             last = null;\n--- a/src/main/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n             this.description = description;\n         }\n \n-        /**\n-         * {@inheritDoc}\n-         */\n         @Override\n         public String toString() {\n             return description;\n     }\n \n     //-----------------------------------------------------------------------\n-    /**\n-     * {@inheritDoc}\n-     */\n     public OrderedMapIterator<K, V> mapIterator() {\n         if (isEmpty()) {\n             return EmptyOrderedMapIterator.<K, V>emptyOrderedMapIterator();", "timestamp": 1344690125, "metainfo": ""}