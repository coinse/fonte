{"sha": "a99c022fbb9ce7c5da00992a125fc0e8ae848509", "log": "Generics  ", "commit": "\n--- a/src/test/org/apache/commons/collections/map/EmptyMapMutator.java\n+++ b/src/test/org/apache/commons/collections/map/EmptyMapMutator.java\n  * the class has to be separate of TestCompositeMap, else the test \n  * class also has to be serialized. \n  */\n-class EmptyMapMutator implements CompositeMap.MapMutator {\n+class EmptyMapMutator<K,V> implements CompositeMap.MapMutator<K,V> {\n     /** Serialization version */\n     private static final long serialVersionUID = -2729718980002476794L;\n \n-    public void resolveCollision(CompositeMap composite,\n-    Map existing,\n-    Map added,\n-    Collection intersect) {\n+    public void resolveCollision(CompositeMap<K,V> composite,\n+    Map<K,V> existing,\n+    Map<K,V> added,\n+    Collection<K> intersect) {\n         // Do nothing\n     }\n     \n-    public Object put(CompositeMap map, Map[] composited, Object key, Object value) {\n+    public V put(CompositeMap<K, V> map, Map<K, V>[] composited, K key, V value) {\n         return composited[0].put(key, value);\n     }\n     \n-    public void putAll(CompositeMap map, Map[] composited, Map t) {\n+    public void putAll(CompositeMap<K, V> map, Map<K, V>[] composited, Map<? extends K, ? extends V> t) {\n         composited[0].putAll(t);\n     }\n-    \n+\n }\n--- a/src/test/org/apache/commons/collections/map/TestCompositeMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestCompositeMap.java\n     public CompositeMap<K, V> makeObject() {\n         CompositeMap<K, V> map = new CompositeMap<K, V>();\n         map.addComposited(new HashMap<K, V>());\n-        map.setMutator( new EmptyMapMutator() );\n+        map.setMutator( new EmptyMapMutator<K, V>() );\n         return map;\n     }\n     ", "timestamp": 1287738038, "metainfo": ""}