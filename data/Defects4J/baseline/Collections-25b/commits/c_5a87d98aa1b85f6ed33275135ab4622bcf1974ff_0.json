{"sha": "5a87d98aa1b85f6ed33275135ab4622bcf1974ff", "log": "[COLLECTION-497,498,499] Refactored test framework for bag implementations, added missing tests, added CollectionSortedBag.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/bag/CollectionBag.java\n+++ b/src/main/java/org/apache/commons/collections4/bag/CollectionBag.java\n \n     @Override\n     public boolean removeAll(final Collection<?> coll) {\n-        boolean result = false;\n         if (coll != null) {\n+            boolean result = false;\n             final Iterator<?> i = coll.iterator();\n             while (i.hasNext()) {\n                 final Object obj = i.next();\n                 final boolean changed = remove(obj, getCount(obj));\n                 result = result || changed;\n             }\n+            return result;\n+        } else {\n+            return decorated().removeAll(coll);\n         }\n-        return result;\n     }\n \n     @Override\n     public boolean retainAll(final Collection<?> coll) {\n-        boolean modified = false;\n-        final Iterator<E> e = iterator();\n-        while (e.hasNext()) {\n-            if (!coll.contains(e.next())) {\n-                e.remove();\n-                modified = true;\n+        if (coll != null) {\n+            boolean modified = false;\n+            final Iterator<E> e = iterator();\n+            while (e.hasNext()) {\n+                if (!coll.contains(e.next())) {\n+                    e.remove();\n+                    modified = true;\n+                }\n             }\n+            return modified;\n+        } else {\n+            return decorated().retainAll(coll);\n         }\n-        return modified;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java\n import java.io.IOException;\n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.ConcurrentModificationException;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.NoSuchElementException;\n-\n-import org.apache.commons.collections4.AbstractObjectTest;\n+import java.util.Set;\n+\n import org.apache.commons.collections4.Bag;\n+import org.apache.commons.collections4.BulkTest;\n+import org.apache.commons.collections4.collection.AbstractCollectionTest;\n+import org.apache.commons.collections4.set.AbstractSetTest;\n \n /**\n  * Abstract test class for {@link org.apache.commons.collections4.Bag Bag} methods and contracts.\n  * If your bag fails one of these tests by design,\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your bag fails.\n+ * <p>\n+ * <b>Note:</b> The Bag interface does not conform to the Collection interface\n+ * so the generic collection tests from AbstractCollectionTest would normally fail.\n+ * As a work-around since 4.0, a CollectionBag decorator can be used\n+ * to make any Bag implementation comply to the Collection contract.\n+ * <p>\n+ * This abstract test class does wrap the concrete bag implementation\n+ * with such a decorator, see the overridden {@link #resetEmpty()} and\n+ * {@link #resetFull()} methods.\n+ * <p>\n+ * In addition to the generic collection tests (prefix testCollection) inherited\n+ * from AbstractCollectionTest, there are test methods that test the \"normal\" Bag\n+ * interface (prefix testBag). For Bag specific tests use the {@link #makeObject()} and \n+ * {@link #makeFullCollection()} methods instead of {@link #resetEmpty()} and resetFull(),\n+ * otherwise the collection will be wrapped by a {@link CollectionBag} decorator.\n  *\n  * @version $Id$\n  */\n-public abstract class AbstractBagTest<T> extends AbstractObjectTest {\n-//  TODO: this class should really extend from AbstractCollectionTest, but the bag\n-//  implementations currently do not conform to the Collection interface.  Once\n-//  those are fixed or at least a strategy is made for resolving the issue, this\n-//  can be changed back to extend TestCollection instead.\n+public abstract class AbstractBagTest<T> extends AbstractCollectionTest<T> {\n \n     /**\n      * JUnit constructor.\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Returns an empty {@link ArrayList}.\n+     */\n+    @Override\n+    public Collection<T> makeConfirmedCollection() {\n+        final ArrayList<T> list = new ArrayList<T>();\n+        return list;\n+    }\n+\n+    /**\n+     * Returns a full collection.\n+     */\n+    @Override\n+    public Collection<T> makeConfirmedFullCollection() {\n+        final Collection<T> coll = makeConfirmedCollection();\n+        coll.addAll(Arrays.asList(getFullElements()));\n+        return coll;\n+    }\n+\n+    /**\n      * Return a new, empty bag to used for testing.\n      *\n      * @return the bag to be tested\n     @Override\n     public abstract Bag<T> makeObject();\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Bag<T> makeFullCollection() {\n+        final Bag<T> bag = makeObject();\n+        bag.addAll(Arrays.asList(getFullElements()));\n+        return bag;\n+    }\n+\n     //-----------------------------------------------------------------------\n+\n+    @Override\n+    public void resetEmpty() {\n+        this.setCollection(CollectionBag.collectionBag(makeObject()));\n+        this.setConfirmed(makeConfirmedCollection());\n+    }\n+\n+    @Override\n+    public void resetFull() {\n+        this.setCollection(CollectionBag.collectionBag(makeFullCollection()));\n+        this.setConfirmed(makeConfirmedFullCollection());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the {@link #collection} field cast to a {@link Bag}.\n+     *\n+     * @return the collection field as a Bag\n+     */\n+    @Override\n+    public Bag<T> getCollection() {\n+        return (Bag<T>) super.getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     @SuppressWarnings(\"unchecked\")\n     public void testBagAdd() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n         final Bag<T> bag = makeObject();\n         bag.add((T) \"A\");\n         assertTrue(\"Should contain 'A'\", bag.contains(\"A\"));\n     public void testBagEqualsSelf() {\n         final Bag<T> bag = makeObject();\n         assertTrue(bag.equals(bag));\n+        \n+        if (!isAddSupported()) {\n+            return;\n+        }\n+        \n         bag.add((T) \"elt\");\n         assertTrue(bag.equals(bag));\n         bag.add((T) \"elt\"); // again\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public void testRemove() {\n+    public void testBagRemove() {\n+        if (!isRemoveSupported()) {\n+            return;\n+        }\n+\n         final Bag<T> bag = makeObject();\n         bag.add((T) \"A\");\n         assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public void testRemoveAll() {\n+    public void testBagRemoveAll() {\n+        if (!isRemoveSupported()) {\n+            return;\n+        }\n+        \n         final Bag<T> bag = makeObject();\n         bag.add((T) \"A\", 2);\n         assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public void testContains() {\n+    public void testBagContains() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+        \n         final Bag<T> bag = makeObject();\n \n         assertEquals(\"Bag does not have at least 1 'A'\", false, bag.contains(\"A\"));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public void testContainsAll() {\n+    public void testBagContainsAll() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+        \n         final Bag<T> bag = makeObject();\n         final List<String> known = new ArrayList<String>();\n         final List<String> known1A = new ArrayList<String>();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public void testSize() {\n+    public void testBagSize() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+        \n         final Bag<T> bag = makeObject();\n         assertEquals(\"Should have 0 total items\", 0, bag.size());\n         bag.add((T) \"A\");\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public void testRetainAll() {\n+    public void testBagRetainAll() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+        \n         final Bag<T> bag = makeObject();\n         bag.add((T) \"A\");\n         bag.add((T) \"A\");\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public void testIterator() {\n+    public void testBagIterator() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n         final Bag<T> bag = makeObject();\n         bag.add((T) \"A\");\n         bag.add((T) \"A\");\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public void testIteratorFail() {\n+    public void testBagIteratorFail() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n         final Bag<T> bag = makeObject();\n         bag.add((T) \"A\");\n         bag.add((T) \"A\");\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public void testIteratorFailNoMore() {\n+    public void testBagIteratorFailNoMore() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n         final Bag<T> bag = makeObject();\n         bag.add((T) \"A\");\n         bag.add((T) \"A\");\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public void testIteratorFailDoubleRemove() {\n+    public void testBagIteratorFailDoubleRemove() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n         final Bag<T> bag = makeObject();\n         bag.add((T) \"A\");\n         bag.add((T) \"A\");\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public void testIteratorRemoveProtectsInvariants() {\n+    public void testBagIteratorRemoveProtectsInvariants() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n         final Bag<T> bag = makeObject();\n         bag.add((T) \"A\");\n         bag.add((T) \"A\");\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public void testToArray() {\n+    public void testBagToArray() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n         final Bag<T> bag = makeObject();\n         bag.add((T) \"A\");\n         bag.add((T) \"A\");\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public void testToArrayPopulate() {\n+    public void testBagToArrayPopulate() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n         final Bag<T> bag = makeObject();\n         bag.add((T) \"A\");\n         bag.add((T) \"A\");\n \n     //-----------------------------------------------------------------------\n     @SuppressWarnings(\"unchecked\")\n-    public void testEquals() {\n+    public void testBagEquals() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n         final Bag<T> bag = makeObject();\n         final Bag<T> bag2 = makeObject();\n         assertEquals(true, bag.equals(bag2));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public void testEqualsHashBag() {\n+    public void testBagEqualsHashBag() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n         final Bag<T> bag = makeObject();\n         final Bag<T> bag2 = new HashBag<T>();\n         assertEquals(true, bag.equals(bag2));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public void testHashCode() {\n+    public void testBagHashCode() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n         final Bag<T> bag = makeObject();\n         final Bag<T> bag2 = makeObject();\n         assertEquals(0, bag.hashCode());\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testEmptyBagSerialization() throws IOException, ClassNotFoundException {\n-        final Bag<T> bag = makeObject();\n-        if (!(bag instanceof Serializable && isTestSerialization())) {\n-            return;\n-        }\n-\n-        final byte[] objekt = writeExternalFormToBytes((Serializable) bag);\n-        final Bag<?> bag2 = (Bag<?>) readExternalFormFromBytes(objekt);\n-\n-        assertEquals(\"Bag should be empty\",0, bag.size());\n-        assertEquals(\"Bag should be empty\",0, bag2.size());\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testFullBagSerialization() throws IOException, ClassNotFoundException {\n-        final Bag<T> bag = makeObject();\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"C\");\n-        final int size = bag.size();\n-        if (!(bag instanceof Serializable && isTestSerialization())) {\n-            return;\n-        }\n-\n-        final byte[] objekt = writeExternalFormToBytes((Serializable) bag);\n-        final Bag<?> bag2 = (Bag<?>) readExternalFormFromBytes(objekt);\n-\n-        assertEquals(\"Bag should be same size\", size, bag.size());\n-        assertEquals(\"Bag should be same size\", size, bag2.size());\n-    }\n+\n+    /**\n+     * Bulk test {@link Bag#uniqueSet()}.  This method runs through all of\n+     * the tests in {@link AbstractSetTest}.\n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the bag and the other collection views are still valid.\n+     *\n+     * @return a {@link AbstractSetTest} instance for testing the bag's unique set\n+     */\n+    public BulkTest bulkTestBagUniqueSet() {\n+        return new TestBagUniqueSet();\n+    }\n+\n+    public class TestBagUniqueSet extends AbstractSetTest<T> {\n+        public TestBagUniqueSet() {\n+            super(\"\");\n+        }\n+\n+        @Override\n+        public T[] getFullElements() {\n+            return AbstractBagTest.this.getFullElements();\n+        }\n+\n+        @Override\n+        public T[] getOtherElements() {\n+            return AbstractBagTest.this.getOtherElements();\n+        }\n+\n+        @Override\n+        public Set<T> makeObject() {\n+            return AbstractBagTest.this.makeObject().uniqueSet();\n+        }\n+\n+        @Override\n+        public Set<T> makeFullCollection() {\n+            return AbstractBagTest.this.makeFullCollection().uniqueSet();\n+        }\n+\n+        @Override\n+        public boolean isNullSupported() {\n+            return AbstractBagTest.this.isNullSupported();\n+        }\n+\n+        @Override\n+        public boolean isAddSupported() {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean isRemoveSupported() {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean isTestSerialization() {\n+            return false;\n+        }\n+\n+        @Override\n+        public void resetEmpty() {\n+            AbstractBagTest.this.resetEmpty();\n+            TestBagUniqueSet.this.setCollection(AbstractBagTest.this.getCollection().uniqueSet());\n+            TestBagUniqueSet.this.setConfirmed(new HashSet<T>(AbstractBagTest.this.getConfirmed()));\n+        }\n+\n+        @Override\n+        public void resetFull() {\n+            AbstractBagTest.this.resetFull();\n+            TestBagUniqueSet.this.setCollection(AbstractBagTest.this.getCollection().uniqueSet());\n+            TestBagUniqueSet.this.setConfirmed(new HashSet<T>(AbstractBagTest.this.getConfirmed()));\n+        }\n+\n+        @Override\n+        public void verify() {\n+            super.verify();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n \n     /**\n      * Compare the current serialized form of the Bag\n      * Compare the current serialized form of the Bag\n      * against the canonical version in SVN.\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public void testFullBagCompatibility() throws IOException, ClassNotFoundException {\n         // test to make sure the canonical form has been preserved\n-        final Bag<T> bag = makeObject();\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"C\");\n+        final Bag<T> bag = makeFullCollection();\n         if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n             final Bag<?> bag2 = (Bag<?>) readExternalFormFromDisk(getCanonicalFullCollectionName(bag));\n             assertEquals(\"Bag is the right size\",bag.size(), bag2.size());\n--- a/src/test/java/org/apache/commons/collections4/bag/AbstractSortedBagTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bag/AbstractSortedBagTest.java\n  */\n package org.apache.commons.collections4.bag;\n \n+import java.util.Iterator;\n+\n import org.apache.commons.collections4.SortedBag;\n \n /**\n         super(testName);\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Verification extension, will check the order of elements,\n+     * the sets should already be verified equal.\n+     */\n+    @Override\n+    public void verify() {\n+        super.verify();\n+\n+        // Check that iterator returns elements in order and first() and last()\n+        // are consistent\n+        final Iterator<T> colliter = getCollection().iterator();\n+        final Iterator<T> confiter = getConfirmed().iterator();\n+        T first = null;\n+        T last = null;\n+        while (colliter.hasNext()) {\n+            if (first == null) {\n+                first = colliter.next();\n+                last = first;\n+            } else {\n+              last = colliter.next();\n+            }\n+            assertEquals(\"Element appears to be out of order.\", last, confiter.next());\n+        }\n+        if (getCollection().size() > 0) {\n+            assertEquals(\"Incorrect element returned by first().\", first,\n+                getCollection().first());\n+            assertEquals(\"Incorrect element returned by last().\", last,\n+                getCollection().last());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Overridden because SortedBags don't allow null elements (normally).\n+     * @return false\n+     */\n+    @Override\n+    public boolean isNullSupported() {\n+        return false;\n+    }\n+\n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public abstract SortedBag<T> makeObject();\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public SortedBag<T> makeFullCollection() {\n+        return (SortedBag<T>) super.makeFullCollection();\n+    }\n+\n+    /**\n+     * Returns an empty {@link TreeBag} for use in modification testing.\n+     *\n+     * @return a confirmed empty collection\n+     */\n+    @Override\n+    public SortedBag<T> makeConfirmedCollection() {\n+        return new TreeBag<T>();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    @Override\n+    public void resetEmpty() {\n+        this.setCollection(CollectionSortedBag.collectionSortedBag(makeObject()));\n+        this.setConfirmed(makeConfirmedCollection());\n+    }\n+\n+    @Override\n+    public void resetFull() {\n+        this.setCollection(CollectionSortedBag.collectionSortedBag(makeFullCollection()));\n+        this.setConfirmed(makeConfirmedFullCollection());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Override to return comparable objects.\n+     */\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public T[] getFullNonNullElements() {\n+        final Object[] elements = new Object[30];\n+\n+        for (int i = 0; i < 30; i++) {\n+            elements[i] = Integer.valueOf(i + i + 1);\n+        }\n+        return (T[]) elements;\n+    }\n+\n+    /**\n+     * Override to return comparable objects.\n+     */\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public T[] getOtherNonNullElements() {\n+        final Object[] elements = new Object[30];\n+        for (int i = 0; i < 30; i++) {\n+            elements[i] = Integer.valueOf(i + i + 2);\n+        }\n+        return (T[]) elements;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the {@link #collection} field cast to a {@link SortedBag}.\n+     *\n+     * @return the collection field as a SortedBag\n+     */\n+    @Override\n+    public SortedBag<T> getCollection() {\n+        return (SortedBag<T>) super.getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n     // TODO: Add the SortedBag tests!\n }\n--- a/src/test/java/org/apache/commons/collections4/bag/CollectionBagTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bag/CollectionBagTest.java\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.ConcurrentModificationException;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.NoSuchElementException;\n \n import org.apache.commons.collections4.Bag;\n import org.apache.commons.collections4.bag.HashBag;\n \n /**\n  * Test class for {@link CollectionBag}.\n+ * <p>\n+ * Note: This test is mainly for serialization support, the CollectionBag decorator\n+ * is extensively used and tested in AbstractBagTest. \n  *\n  * @version $Id$\n  * @since 4.0\n     }\n \n //    public void testCreate() throws Exception {\n-//        Bag bag = makeObject();\n-//        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/CollectionBag.emptyCollection.version4.obj\");\n-//        bag = makeObject();\n-//        bag.add(\"A\");\n-//        bag.add(\"A\");\n-//        bag.add(\"B\");\n-//        bag.add(\"B\");\n-//        bag.add(\"C\");\n-//        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/CollectionBag.fullCollection.version4.obj\");\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) getCollection(), \"src/test/resources/data/test/CollectionBag.emptyCollection.version4.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) getCollection(), \"src/test/resources/data/test/CollectionBag.fullCollection.version4.obj\");\n //    }\n-    \n-    //-----------------------------------------------------------------------\n-    @SuppressWarnings(\"unchecked\")\n-    public void testBagAdd() {\n-        final Bag<T> bag = makeObject();\n-        bag.add((T) \"A\");\n-        assertTrue(\"Should contain 'A'\", bag.contains(\"A\"));\n-        assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n-        bag.add((T) \"A\");\n-        assertTrue(\"Should contain 'A'\", bag.contains(\"A\"));\n-        assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n-        bag.add((T) \"B\");\n-        assertTrue(bag.contains(\"A\"));\n-        assertTrue(bag.contains(\"B\"));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testBagEqualsSelf() {\n-        final Bag<T> bag = makeObject();\n-        assertTrue(bag.equals(bag));\n-        bag.add((T) \"elt\");\n-        assertTrue(bag.equals(bag));\n-        bag.add((T) \"elt\"); // again\n-        assertTrue(bag.equals(bag));\n-        bag.add((T) \"elt2\");\n-        assertTrue(bag.equals(bag));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testRemove() {\n-        final Bag<T> bag = makeObject();\n-        bag.add((T) \"A\");\n-        assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n-        bag.remove(\"A\");\n-        assertEquals(\"Should have count of 0\", 0, bag.getCount(\"A\"));\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        assertEquals(\"Should have count of 4\", 4, bag.getCount(\"A\"));\n-        bag.remove(\"A\", 0);\n-        assertEquals(\"Should have count of 4\", 4, bag.getCount(\"A\"));\n-        bag.remove(\"A\", 2);\n-        assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n-        bag.remove(\"A\");\n-        assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testRemoveAll() {\n-        final Bag<T> bag = makeObject();\n-        bag.add((T) \"A\", 2);\n-        assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n-        bag.add((T) \"B\");\n-        bag.add((T) \"C\");\n-        assertEquals(\"Should have count of 4\", 4, bag.size());\n-        final List<String> delete = new ArrayList<String>();\n-        delete.add(\"A\");\n-        delete.add(\"B\");\n-        bag.removeAll(delete);\n-        assertEquals(\"Should have count of 0\", 0, bag.getCount(\"A\"));\n-        assertEquals(\"Should have count of 0\", 0, bag.getCount(\"B\"));\n-        assertEquals(\"Should have count of 1\", 1, bag.getCount(\"C\"));\n-        assertEquals(\"Should have count of 1\", 1, bag.size());\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testContains() {\n-        final Bag<T> bag = makeObject();\n-\n-        assertEquals(\"Bag does not have at least 1 'A'\", false, bag.contains(\"A\"));\n-        assertEquals(\"Bag does not have at least 1 'B'\", false, bag.contains(\"B\"));\n-\n-        bag.add((T) \"A\");  // bag 1A\n-        assertEquals(\"Bag has at least 1 'A'\", true, bag.contains(\"A\"));\n-        assertEquals(\"Bag does not have at least 1 'B'\", false, bag.contains(\"B\"));\n-\n-        bag.add((T) \"A\");  // bag 2A\n-        assertEquals(\"Bag has at least 1 'A'\", true, bag.contains(\"A\"));\n-        assertEquals(\"Bag does not have at least 1 'B'\", false, bag.contains(\"B\"));\n-\n-        bag.add((T) \"B\");  // bag 2A,1B\n-        assertEquals(\"Bag has at least 1 'A'\", true, bag.contains(\"A\"));\n-        assertEquals(\"Bag has at least 1 'B'\", true, bag.contains(\"B\"));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testContainsAll() {\n-        final Bag<T> bag = makeObject();\n-        final List<String> known = new ArrayList<String>();\n-        final List<String> known1A = new ArrayList<String>();\n-        known1A.add(\"A\");\n-        final List<String> known2A = new ArrayList<String>();\n-        known2A.add(\"A\");\n-        known2A.add(\"A\");\n-        final List<String> known1B = new ArrayList<String>();\n-        known1B.add(\"B\");\n-        final List<String> known1A1B = new ArrayList<String>();\n-        known1A1B.add(\"A\");\n-        known1A1B.add(\"B\");\n-\n-        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n-        assertEquals(\"Bag does not containsAll of 1 'A'\", false, bag.containsAll(known1A));\n-        assertEquals(\"Bag does not containsAll of 2 'A'\", false, bag.containsAll(known2A));\n-        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n-        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n-\n-        bag.add((T) \"A\");  // bag 1A\n-        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n-        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n-        assertEquals(\"Bag does containsAll of 2 'A'\", true, bag.containsAll(known2A));\n-        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n-        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n-\n-        bag.add((T) \"A\");  // bag 2A\n-        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n-        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n-        assertEquals(\"Bag containsAll of 2 'A'\", true, bag.containsAll(known2A));\n-        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n-        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n-\n-        bag.add((T) \"A\");  // bag 3A\n-        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n-        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n-        assertEquals(\"Bag containsAll of 2 'A'\", true, bag.containsAll(known2A));\n-        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n-        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n-\n-        bag.add((T) \"B\");  // bag 3A1B\n-        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n-        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n-        assertEquals(\"Bag containsAll of 2 'A'\", true, bag.containsAll(known2A));\n-        assertEquals(\"Bag containsAll of 1 'B'\", true, bag.containsAll(known1B));\n-        assertEquals(\"Bag containsAll of 1 'A' 1 'B'\", true, bag.containsAll(known1A1B));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testSize() {\n-        final Bag<T> bag = makeObject();\n-        assertEquals(\"Should have 0 total items\", 0, bag.size());\n-        bag.add((T) \"A\");\n-        assertEquals(\"Should have 1 total items\", 1, bag.size());\n-        bag.add((T) \"A\");\n-        assertEquals(\"Should have 2 total items\", 2, bag.size());\n-        bag.add((T) \"A\");\n-        assertEquals(\"Should have 3 total items\", 3, bag.size());\n-        bag.add((T) \"B\");\n-        assertEquals(\"Should have 4 total items\", 4, bag.size());\n-        bag.add((T) \"B\");\n-        assertEquals(\"Should have 5 total items\", 5, bag.size());\n-        bag.remove(\"A\", 2);\n-        assertEquals(\"Should have 1 'A'\", 1, bag.getCount(\"A\"));\n-        assertEquals(\"Should have 3 total items\", 3, bag.size());\n-        // this should only remove 1 occurrence of B\n-        bag.remove(\"B\");\n-        assertEquals(\"Should have 2 total item\", 2, bag.size());\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testRetainAll() {\n-        final Bag<T> bag = makeObject();\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"C\");\n-        final List<String> retains = new ArrayList<String>();\n-        retains.add(\"B\");\n-        retains.add(\"C\");\n-        bag.retainAll(retains);\n-        assertEquals(\"Should have 3 total items\", 3, bag.size());\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testIterator() {\n-        final Bag<T> bag = makeObject();\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        bag.add((T) \"B\");\n-        assertEquals(\"Bag should have 3 items\", 3, bag.size());\n-        final Iterator<T> i = bag.iterator();\n-\n-        boolean foundA = false;\n-        while (i.hasNext()) {\n-            final String element = (String) i.next();\n-            // ignore the first A, remove the second via Iterator.remove()\n-            if (element.equals(\"A\")) {\n-                if (foundA == false) {\n-                    foundA = true;\n-                } else {\n-                    i.remove();\n-                }\n-            }\n-        }\n-\n-        assertTrue(\"Bag should still contain 'A'\", bag.contains(\"A\"));\n-        assertEquals(\"Bag should have 2 items\", 2, bag.size());\n-        assertEquals(\"Bag should have 1 'A'\", 1, bag.getCount(\"A\"));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testIteratorFail() {\n-        final Bag<T> bag = makeObject();\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        bag.add((T) \"B\");\n-        final Iterator<T> it = bag.iterator();\n-        it.next();\n-        bag.remove(\"A\");\n-        try {\n-            it.next();\n-            fail(\"Should throw ConcurrentModificationException\");\n-        } catch (final ConcurrentModificationException e) {\n-            // expected\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testIteratorFailNoMore() {\n-        final Bag<T> bag = makeObject();\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        bag.add((T) \"B\");\n-        final Iterator<T> it = bag.iterator();\n-        it.next();\n-        it.next();\n-        it.next();\n-        try {\n-            it.next();\n-            fail(\"Should throw NoSuchElementException\");\n-        } catch (final NoSuchElementException ex) {\n-            // expected\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testIteratorFailDoubleRemove() {\n-        final Bag<T> bag = makeObject();\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        bag.add((T) \"B\");\n-        final Iterator<T> it = bag.iterator();\n-        it.next();\n-        it.next();\n-        assertEquals(3, bag.size());\n-        it.remove();\n-        assertEquals(2, bag.size());\n-        try {\n-            it.remove();\n-            fail(\"Should throw IllegalStateException\");\n-        } catch (final IllegalStateException ex) {\n-            // expected\n-        }\n-        assertEquals(2, bag.size());\n-        it.next();\n-        it.remove();\n-        assertEquals(1, bag.size());\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testIteratorRemoveProtectsInvariants() {\n-        final Bag<T> bag = makeObject();\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        assertEquals(2, bag.size());\n-        final Iterator<T> it = bag.iterator();\n-        assertEquals(\"A\", it.next());\n-        assertEquals(true, it.hasNext());\n-        it.remove();\n-        assertEquals(1, bag.size());\n-        assertEquals(true, it.hasNext());\n-        assertEquals(\"A\", it.next());\n-        assertEquals(false, it.hasNext());\n-        it.remove();\n-        assertEquals(0, bag.size());\n-        assertEquals(false, it.hasNext());\n-\n-        final Iterator<T> it2 = bag.iterator();\n-        assertEquals(false, it2.hasNext());\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testToArray() {\n-        final Bag<T> bag = makeObject();\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"C\");\n-        final Object[] array = bag.toArray();\n-        int a = 0, b = 0, c = 0;\n-        for (final Object element : array) {\n-            a += element.equals(\"A\") ? 1 : 0;\n-            b += element.equals(\"B\") ? 1 : 0;\n-            c += element.equals(\"C\") ? 1 : 0;\n-        }\n-        assertEquals(2, a);\n-        assertEquals(2, b);\n-        assertEquals(1, c);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testToArrayPopulate() {\n-        final Bag<T> bag = makeObject();\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"C\");\n-        final String[] array = bag.toArray(new String[0]);\n-        int a = 0, b = 0, c = 0;\n-        for (final String element : array) {\n-            a += element.equals(\"A\") ? 1 : 0;\n-            b += element.equals(\"B\") ? 1 : 0;\n-            c += element.equals(\"C\") ? 1 : 0;\n-        }\n-        assertEquals(2, a);\n-        assertEquals(2, b);\n-        assertEquals(1, c);\n-    }\n \n     //-----------------------------------------------------------------------\n-    @SuppressWarnings(\"unchecked\")\n-    public void testEquals() {\n-        final Bag<T> bag = makeObject();\n-        final Bag<T> bag2 = makeObject();\n-        assertEquals(true, bag.equals(bag2));\n-        bag.add((T) \"A\");\n-        assertEquals(false, bag.equals(bag2));\n-        bag2.add((T) \"A\");\n-        assertEquals(true, bag.equals(bag2));\n-        bag.add((T) \"A\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"C\");\n-        bag2.add((T) \"A\");\n-        bag2.add((T) \"B\");\n-        bag2.add((T) \"B\");\n-        bag2.add((T) \"C\");\n-        assertEquals(true, bag.equals(bag2));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testEqualsHashBag() {\n-        final Bag<T> bag = makeObject();\n-        final Bag<T> bag2 = new HashBag<T>();\n-        assertEquals(true, bag.equals(bag2));\n-        bag.add((T) \"A\");\n-        assertEquals(false, bag.equals(bag2));\n-        bag2.add((T) \"A\");\n-        assertEquals(true, bag.equals(bag2));\n-        bag.add((T) \"A\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"C\");\n-        bag2.add((T) \"A\");\n-        bag2.add((T) \"B\");\n-        bag2.add((T) \"B\");\n-        bag2.add((T) \"C\");\n-        assertEquals(true, bag.equals(bag2));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testHashCode() {\n-        final Bag<T> bag = makeObject();\n-        final Bag<T> bag2 = makeObject();\n-        assertEquals(0, bag.hashCode());\n-        assertEquals(0, bag2.hashCode());\n-        assertEquals(bag.hashCode(), bag2.hashCode());\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"C\");\n-        bag2.add((T) \"A\");\n-        bag2.add((T) \"A\");\n-        bag2.add((T) \"B\");\n-        bag2.add((T) \"B\");\n-        bag2.add((T) \"C\");\n-        assertEquals(bag.hashCode(), bag2.hashCode());\n-\n-        int total = 0;\n-        total += \"A\".hashCode() ^ 2;\n-        total += \"B\".hashCode() ^ 2;\n-        total += \"C\".hashCode() ^ 1;\n-        assertEquals(total, bag.hashCode());\n-        assertEquals(total, bag2.hashCode());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testEmptyBagSerialization() throws IOException, ClassNotFoundException {\n-        final Bag<T> bag = makeObject();\n-        if (!(bag instanceof Serializable && isTestSerialization())) {\n-            return;\n-        }\n-\n-        final byte[] objekt = writeExternalFormToBytes((Serializable) bag);\n-        final Bag<?> bag2 = (Bag<?>) readExternalFormFromBytes(objekt);\n-\n-        assertEquals(\"Bag should be empty\",0, bag.size());\n-        assertEquals(\"Bag should be empty\",0, bag2.size());\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testFullBagSerialization() throws IOException, ClassNotFoundException {\n-        final Bag<T> bag = makeObject();\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"C\");\n-        final int size = bag.size();\n-        if (!(bag instanceof Serializable && isTestSerialization())) {\n-            return;\n-        }\n-\n-        final byte[] objekt = writeExternalFormToBytes((Serializable) bag);\n-        final Bag<?> bag2 = (Bag<?>) readExternalFormFromBytes(objekt);\n-\n-        assertEquals(\"Bag should be same size\", size, bag.size());\n-        assertEquals(\"Bag should be same size\", size, bag2.size());\n-    }\n \n     /**\n      * Compare the current serialized form of the Bag\n      * Compare the current serialized form of the Bag\n      * against the canonical version in SVN.\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public void testFullBagCompatibility() throws IOException, ClassNotFoundException {\n         // test to make sure the canonical form has been preserved\n-        final Bag<T> bag = makeObject();\n-        bag.add((T) \"A\");\n-        bag.add((T) \"A\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"B\");\n-        bag.add((T) \"C\");\n+        final Bag<T> bag = (Bag<T>) makeFullCollection();\n         if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n             final Bag<?> bag2 = (Bag<?>) readExternalFormFromDisk(getCanonicalFullCollectionName(bag));\n             assertEquals(\"Bag is the right size\",bag.size(), bag2.size());\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections4/bag/CollectionSortedBagTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4.bag;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.apache.commons.collections4.Bag;\n+import org.apache.commons.collections4.SortedBag;\n+import org.apache.commons.collections4.collection.AbstractCollectionTest;\n+\n+/**\n+ * Test class for {@link CollectionSortedBag}.\n+ * <p>\n+ * Note: This test is mainly for serialization support, the CollectionSortedBag decorator\n+ * is extensively used and tested in AbstractSortedBagTest. \n+ *\n+ * @version $Id$\n+ * @since 4.0\n+ */\n+public class CollectionSortedBagTest<T> extends AbstractCollectionTest<T> {\n+\n+    /**\n+     * JUnit constructor.\n+     *\n+     * @param testName  the test class name\n+     */\n+    public CollectionSortedBagTest(final String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    \n+    /**\n+     * Overridden because SortedBags don't allow null elements (normally).\n+     * @return false\n+     */\n+    @Override\n+    public boolean isNullSupported() {\n+        return false;\n+    }\n+\n+    @Override\n+    public Bag<T> makeObject() {\n+        return CollectionSortedBag.collectionSortedBag(new TreeBag<T>());\n+    }\n+\n+    /**\n+     * Returns an empty List for use in modification testing.\n+     *\n+     * @return a confirmed empty collection\n+     */\n+    @Override\n+    public Collection<T> makeConfirmedCollection() {\n+        return new ArrayList<T>();\n+    }\n+\n+    /**\n+     * Returns a full Set for use in modification testing.\n+     *\n+     * @return a confirmed full collection\n+     */\n+    @Override\n+    public Collection<T> makeConfirmedFullCollection() {\n+        final Collection<T> set = makeConfirmedCollection();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return set;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Override to return comparable objects.\n+     */\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public T[] getFullNonNullElements() {\n+        final Object[] elements = new Object[30];\n+\n+        for (int i = 0; i < 30; i++) {\n+            elements[i] = Integer.valueOf(i + i + 1);\n+        }\n+        return (T[]) elements;\n+    }\n+\n+    /**\n+     * Override to return comparable objects.\n+     */\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public T[] getOtherNonNullElements() {\n+        final Object[] elements = new Object[30];\n+        for (int i = 0; i < 30; i++) {\n+            elements[i] = Integer.valueOf(i + i + 2);\n+        }\n+        return (T[]) elements;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"4\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) getCollection(), \"src/test/resources/data/test/CollectionSortedBag.emptyCollection.version4.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) getCollection(), \"src/test/resources/data/test/CollectionSortedBag.fullCollection.version4.obj\");\n+//    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    /**\n+     * Compare the current serialized form of the Bag\n+     * against the canonical version in SVN.\n+     */\n+    public void testEmptyBagCompatibility() throws IOException, ClassNotFoundException {\n+        // test to make sure the canonical form has been preserved\n+        final Bag<T> bag = makeObject();\n+        if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n+            final Bag<?> bag2 = (Bag<?>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(bag));\n+            assertTrue(\"Bag is empty\",bag2.size()  == 0);\n+            assertEquals(bag, bag2);\n+        }\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the Bag\n+     * against the canonical version in SVN.\n+     */\n+    public void testFullBagCompatibility() throws IOException, ClassNotFoundException {\n+        // test to make sure the canonical form has been preserved\n+        final SortedBag<T> bag = (SortedBag<T>) makeFullCollection();\n+        if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n+            final SortedBag<?> bag2 = (SortedBag<?>) readExternalFormFromDisk(getCanonicalFullCollectionName(bag));\n+            assertEquals(\"Bag is the right size\", bag.size(), bag2.size());\n+            assertEquals(bag, bag2);\n+        }\n+    }\n+\n+}\n--- a/src/test/java/org/apache/commons/collections4/bag/HashBagTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bag/HashBagTest.java\n  */\n package org.apache.commons.collections4.bag;\n \n+import junit.framework.Test;\n+\n import org.apache.commons.collections4.Bag;\n+import org.apache.commons.collections4.BulkTest;\n \n /**\n  * Extension of {@link AbstractBagTest} for exercising the {@link HashBag}\n         super(testName);\n     }\n \n+    public static Test suite() {\n+        return BulkTest.makeSuite(HashBagTest.class);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n     @Override\n     public Bag<T> makeObject() {\n         return new HashBag<T>();\n     }\n \n //    public void testCreate() throws Exception {\n-//        Bag bag = makeObject();\n+//        Bag<T> bag = makeObject();\n //        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/HashBag.emptyCollection.version4.obj\");\n-//        bag = makeObject();\n-//        bag.add(\"A\");\n-//        bag.add(\"A\");\n-//        bag.add(\"B\");\n-//        bag.add(\"B\");\n-//        bag.add(\"C\");\n+//        bag = makeFullCollection();\n //        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/HashBag.fullCollection.version4.obj\");\n //    }\n }\n--- a/src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java\n \n import java.util.Set;\n \n+import junit.framework.Test;\n+\n import org.apache.commons.collections4.Bag;\n+import org.apache.commons.collections4.BulkTest;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.functors.TruePredicate;\n \n \n     public PredicatedBagTest(final String testName) {\n         super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(PredicatedBagTest.class);\n     }\n \n     //--------------------------------------------------------------------------\n     }\n \n //    public void testCreate() throws Exception {\n-//        Bag bag = makeObject();\n+//        Bag<T> bag = makeObject();\n //        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/PredicatedBag.emptyCollection.version4.obj\");\n-//        bag = makeObject();\n-//        bag.add(\"A\");\n-//        bag.add(\"A\");\n-//        bag.add(\"B\");\n-//        bag.add(\"B\");\n-//        bag.add(\"C\");\n+//        bag = makeFullCollection();\n //        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/PredicatedBag.fullCollection.version4.obj\");\n //    }\n \n--- a/src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java\n \n import java.util.Comparator;\n \n+import junit.framework.Test;\n+\n+import org.apache.commons.collections4.BulkTest;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.SortedBag;\n import org.apache.commons.collections4.functors.TruePredicate;\n \n     public PredicatedSortedBagTest(final String testName) {\n         super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(PredicatedSortedBagTest.class);\n     }\n \n     //--------------------------------------------------------------------------\n     }\n \n //    public void testCreate() throws Exception {\n-//        org.apache.commons.collections4.Bag bag = makeObject();\n+//        Bag<T> bag = makeObject();\n //        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/PredicatedSortedBag.emptyCollection.version4.obj\");\n-//        bag = makeObject();\n-//        bag.add(\"A\");\n-//        bag.add(\"A\");\n-//        bag.add(\"B\");\n-//        bag.add(\"B\");\n-//        bag.add(\"C\");\n+//        bag = makeFullCollection();\n //        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/PredicatedSortedBag.fullCollection.version4.obj\");\n //    }\n \n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections4/bag/SynchronizedBagTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4.bag;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections4.Bag;\n+import org.apache.commons.collections4.BulkTest;\n+\n+/**\n+ * Extension of {@link AbstractBagTest} for exercising the {@link SynchronizedBag}\n+ * implementation.\n+ *\n+ * @since 4.0\n+ * @version $Id$\n+ */\n+public class SynchronizedBagTest<T> extends AbstractBagTest<T> {\n+\n+    public SynchronizedBagTest(final String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(SynchronizedBagTest.class);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    @Override\n+    public Bag<T> makeObject() {\n+        return SynchronizedBag.synchronizedBag(new HashBag<T>());\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"4\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        Bag<T> bag = makeObject();\n+//        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/SynchronizedBag.emptyCollection.version4.obj\");\n+//        bag = makeFullCollection();\n+//        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/SynchronizedBag.fullCollection.version4.obj\");\n+//    }\n+\n+}\n--- a/src/test/java/org/apache/commons/collections4/bag/TransformedBagTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bag/TransformedBagTest.java\n  */\n package org.apache.commons.collections4.bag;\n \n+import junit.framework.Test;\n+\n import org.apache.commons.collections4.Bag;\n+import org.apache.commons.collections4.BulkTest;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.collections4.collection.TransformedCollectionTest;\n \n     public TransformedBagTest(final String testName) {\n         super(testName);\n     }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(TransformedBagTest.class);\n+    }\n+\n+    //-----------------------------------------------------------------------\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     }\n \n //    public void testCreate() throws Exception {\n-//        Bag bag = makeObject();\n+//        Bag<T> bag = makeObject();\n //        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/TransformedBag.emptyCollection.version4.obj\");\n-//        bag = makeObject();\n-//        bag.add(\"A\");\n-//        bag.add(\"A\");\n-//        bag.add(\"B\");\n-//        bag.add(\"B\");\n-//        bag.add(\"C\");\n+//        bag = makeFullCollection();\n //        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/TransformedBag.fullCollection.version4.obj\");\n //    }\n \n--- a/src/test/java/org/apache/commons/collections4/bag/TransformedSortedBagTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bag/TransformedSortedBagTest.java\n  */\n package org.apache.commons.collections4.bag;\n \n+import junit.framework.Test;\n+\n import org.apache.commons.collections4.Bag;\n+import org.apache.commons.collections4.BulkTest;\n import org.apache.commons.collections4.SortedBag;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.collections4.collection.TransformedCollectionTest;\n     public TransformedSortedBagTest(final String testName) {\n         super(testName);\n     }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(TransformedSortedBagTest.class);\n+    }\n+\n+    //-----------------------------------------------------------------------\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     }\n \n //    public void testCreate() throws Exception {\n-//        Bag bag = makeObject();\n+//        Bag<T> bag = makeObject();\n //        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/TransformedSortedBag.emptyCollection.version4.obj\");\n-//        bag = makeObject();\n-//        bag.add(\"A\");\n-//        bag.add(\"A\");\n-//        bag.add(\"B\");\n-//        bag.add(\"B\");\n-//        bag.add(\"C\");\n+//        bag = makeFullCollection();\n //        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/TransformedSortedBag.fullCollection.version4.obj\");\n //    }\n \n--- a/src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java\n  */\n package org.apache.commons.collections4.bag;\n \n+import junit.framework.Test;\n+\n import org.apache.commons.collections4.Bag;\n+import org.apache.commons.collections4.BulkTest;\n import org.apache.commons.collections4.SortedBag;\n \n /**\n     public TreeBagTest(final String testName) {\n         super(testName);\n     }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(TreeBagTest.class);\n+    }\n+\n+    //-----------------------------------------------------------------------\n \n     @Override\n     public SortedBag<T> makeObject() {\n     }\n \n //    public void testCreate() throws Exception {\n-//        Bag bag = makeObject();\n+//        Bag<T> bag = makeObject();\n //        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/TreeBag.emptyCollection.version4.obj\");\n-//        bag = makeObject();\n-//        bag.add(\"A\");\n-//        bag.add(\"A\");\n-//        bag.add(\"B\");\n-//        bag.add(\"B\");\n-//        bag.add(\"C\");\n+//        bag = makeFullCollection();\n //        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/TreeBag.fullCollection.version4.obj\");\n //    }\n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections4/bag/UnmodifiableBagTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4.bag;\n+\n+import java.util.Arrays;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections4.Bag;\n+import org.apache.commons.collections4.BulkTest;\n+import org.apache.commons.collections4.Unmodifiable;\n+import org.apache.commons.collections4.collection.AbstractCollectionTest;\n+\n+/**\n+ * Extension of {@link AbstractCollectionTest} for exercising the\n+ * {@link UnmodifiableBag} implementation.\n+ *\n+ * @since 4.0\n+ * @version $Id$\n+ */\n+public class UnmodifiableBagTest<E> extends AbstractBagTest<E> {\n+\n+    public UnmodifiableBagTest(final String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(UnmodifiableBagTest.class);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Override\n+    public Bag<E> makeObject() {\n+        return UnmodifiableBag.unmodifiableBag(new HashBag<E>());\n+    }\n+\n+    @Override\n+    public Bag<E> makeFullCollection() {\n+        final Bag<E> bag = new HashBag<E>();\n+        bag.addAll(Arrays.asList(getFullElements()));\n+        return UnmodifiableBag.unmodifiableBag(bag);\n+    }\n+\n+    @Override\n+    public Bag<E> getCollection() {\n+        return super.getCollection();\n+    }\n+\n+    @Override\n+    public boolean isAddSupported() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isRemoveSupported() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isNullSupported() {\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testUnmodifiable() {\n+        assertTrue(makeObject() instanceof Unmodifiable);\n+        assertTrue(makeFullCollection() instanceof Unmodifiable);\n+    }\n+    \n+    public void testDecorateFactory() {\n+        final Bag<E> queue = makeFullCollection();\n+        assertSame(queue, UnmodifiableBag.unmodifiableBag(queue));\n+\n+        try {\n+            UnmodifiableBag.unmodifiableBag(null);\n+            fail();\n+        } catch (final IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"4\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        Bag<E> bag = makeObject();\n+//        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/UnmodifiableBag.emptyCollection.version4.obj\");\n+//        bag = makeFullCollection();\n+//        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/UnmodifiableBag.fullCollection.version4.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBagTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4.bag;\n+\n+import java.util.Arrays;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections4.BulkTest;\n+import org.apache.commons.collections4.SortedBag;\n+import org.apache.commons.collections4.Unmodifiable;\n+import org.apache.commons.collections4.collection.AbstractCollectionTest;\n+\n+/**\n+ * Extension of {@link AbstractCollectionTest} for exercising the\n+ * {@link UnmodifiableSortedBag} implementation.\n+ *\n+ * @since 4.0\n+ * @version $Id$\n+ */\n+public class UnmodifiableSortedBagTest<E> extends AbstractSortedBagTest<E> {\n+\n+    public UnmodifiableSortedBagTest(final String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(UnmodifiableSortedBagTest.class);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Override\n+    public SortedBag<E> makeObject() {\n+        return UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<E>());\n+    }\n+\n+    @Override\n+    public SortedBag<E> makeFullCollection() {\n+        final SortedBag<E> bag = new TreeBag<E>();\n+        bag.addAll(Arrays.asList(getFullElements()));\n+        return UnmodifiableSortedBag.unmodifiableSortedBag(bag);\n+    }\n+\n+    @Override\n+    public SortedBag<E> getCollection() {\n+        return super.getCollection();\n+    }\n+\n+    @Override\n+    public boolean isAddSupported() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isRemoveSupported() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isNullSupported() {\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testUnmodifiable() {\n+        assertTrue(makeObject() instanceof Unmodifiable);\n+        assertTrue(makeFullCollection() instanceof Unmodifiable);\n+    }\n+    \n+    public void testDecorateFactory() {\n+        final SortedBag<E> queue = makeFullCollection();\n+        assertSame(queue, UnmodifiableSortedBag.unmodifiableSortedBag(queue));\n+\n+        try {\n+            UnmodifiableSortedBag.unmodifiableSortedBag(null);\n+            fail();\n+        } catch (final IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"4\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        SortedBag<E> bag = makeObject();\n+//        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/UnmodifiableSortedBag.emptyCollection.version4.obj\");\n+//        bag = makeFullCollection();\n+//        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/UnmodifiableSortedBag.fullCollection.version4.obj\");\n+//    }\n+\n+}", "timestamp": 1384201702, "metainfo": ""}