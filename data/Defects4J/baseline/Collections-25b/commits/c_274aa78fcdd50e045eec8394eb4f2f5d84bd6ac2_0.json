{"sha": "274aa78fcdd50e045eec8394eb4f2f5d84bd6ac2", "log": "Remove trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/sequence/CommandVisitor.java\n+++ b/src/main/java/org/apache/commons/collections4/sequence/CommandVisitor.java\n  */\n package org.apache.commons.collections4.sequence;\n \n-/** \n+/**\n  * This interface should be implemented by user object to walk\n  * through {@link EditScript EditScript} objects.\n  * <p>\n  * subsequence:\n  * <pre>\n  * import org.apache.commons.collections4.comparators.sequence.CommandVisitor;\n- * \n+ *\n  * import java.util.ArrayList;\n  *\n  * public class LongestCommonSubSequence implements CommandVisitor {\n- * \n+ *\n  *   public LongestCommonSubSequence() {\n  *     a = new ArrayList();\n  *   }\n- * \n+ *\n  *   public void visitInsertCommand(Object object) {\n  *   }\n- * \n+ *\n  *   public void visitKeepCommand(Object object) {\n  *     a.add(object);\n  *   }\n- * \n+ *\n  *   public void visitDeleteCommand(Object object) {\n  *   }\n- * \n+ *\n  *   public Object[] getSubSequence() {\n  *     return a.toArray();\n  *   }\n- * \n+ *\n  *   private ArrayList a;\n- * \n+ *\n  * }\n  * </pre>\n  * <p>\n  * they transform the first sequence into the second one:\n  * <pre>\n  * import org.apache.commons.collections4.comparators.sequence.CommandVisitor;\n- * \n+ *\n  * import java.util.Arrays;\n  * import java.util.ArrayList;\n  * import java.util.Iterator;\n  *\n  * public class ShowVisitor implements CommandVisitor {\n- * \n+ *\n  *   public ShowVisitor(Object[] sequence1) {\n  *     v = new ArrayList();\n  *     v.addAll(Arrays.asList(sequence1));\n  *     index = 0;\n  *   }\n- * \n+ *\n  *   public void visitInsertCommand(Object object) {\n  *     v.insertElementAt(object, index++);\n  *     display(\"insert\", object);\n  *   }\n- * \n+ *\n  *   public void visitKeepCommand(Object object) {\n  *     ++index;\n  *     display(\"keep  \", object);\n  *   }\n- * \n+ *\n  *   public void visitDeleteCommand(Object object) {\n  *     v.remove(index);\n  *     display(\"delete\", object);\n  *   }\n- * \n+ *\n  *   private void display(String commandName, Object object) {\n  *     System.out.println(commandName + \" \" + object + \" ->\" + this);\n  *   }\n- * \n+ *\n  *   public String toString() {\n  *     StringBuffer buffer = new StringBuffer();\n  *     for (Iterator iter = v.iterator(); iter.hasNext();) {\n  *     }\n  *     return buffer.toString();\n  *   }\n- * \n+ *\n  *   private ArrayList v;\n  *   private int index;\n- * \n+ *\n  * }\n  * </pre>\n  *\n  */\n public interface CommandVisitor<T> {\n \n-    /** \n+    /**\n      * Method called when an insert command is encountered.\n      *\n      * @param object object to insert (this object comes from the second sequence)\n      */\n     void visitInsertCommand(T object);\n \n-    /** \n+    /**\n      * Method called when a keep command is encountered.\n      *\n      * @param object object to keep (this object comes from the first sequence)\n      */\n     void visitKeepCommand(T object);\n \n-    /** \n+    /**\n      * Method called when a delete command is encountered.\n      *\n      * @param object object to delete (this object comes from the first sequence)\n--- a/src/main/java/org/apache/commons/collections4/sequence/DeleteCommand.java\n+++ b/src/main/java/org/apache/commons/collections4/sequence/DeleteCommand.java\n  * transforming the first sequence into the second sequence uses an instance of\n  * this class to represent the deletion of this object. The objects embedded in\n  * these type of commands always come from the first sequence.\n- * \n+ *\n  * @see SequencesComparator\n  * @see EditScript\n- * \n+ *\n  * @since 4.0\n  * @version $Id$\n  */\n     /**\n      * Accept a visitor. When a <code>DeleteCommand</code> accepts a visitor, it calls\n      * its {@link CommandVisitor#visitDeleteCommand visitDeleteCommand} method.\n-     * \n+     *\n      * @param visitor  the visitor to be accepted\n-     */    \n+     */\n     @Override\n     public void accept(final CommandVisitor<T> visitor) {\n         visitor.visitDeleteCommand(getObject());\n-    }    \n+    }\n }\n--- a/src/main/java/org/apache/commons/collections4/sequence/EditCommand.java\n+++ b/src/main/java/org/apache/commons/collections4/sequence/EditCommand.java\n  * the object passed as an argument comes from the second sequence) ; this can\n  * be important if subclassing is used for some elements in the first sequence\n  * and the <code>equals</code> method is specialized.\n- * \n+ *\n  * @see SequencesComparator\n  * @see EditScript\n- * \n+ *\n  * @since 4.0\n  * @version $Id$\n  */\n \n     /**\n      * Simple constructor. Creates a new instance of EditCommand\n-     * \n+     *\n      * @param object  reference to the object associated with this command, this\n      *   refers to an element of one of the sequences being compared\n      */\n      * <p>\n      * This method is invoked for each commands belonging to\n      * an {@link EditScript EditScript}, in order to implement the visitor design pattern\n-     * \n+     *\n      * @param visitor  the visitor to be accepted\n      */\n     public abstract void accept(CommandVisitor<T> visitor);\n--- a/src/main/java/org/apache/commons/collections4/sequence/EditScript.java\n+++ b/src/main/java/org/apache/commons/collections4/sequence/EditScript.java\n  * commands} come from the first sequence. This can be important if subclassing\n  * is used for some elements in the first sequence and the <code>equals</code>\n  * method is specialized.\n- * \n+ *\n  * @see SequencesComparator\n  * @see EditCommand\n  * @see CommandVisitor\n  * @see ReplacementsHandler\n- * \n+ *\n  * @since 4.0\n  * @version $Id$\n  */\n \n     /**\n      * Add a keep command to the script.\n-     * \n+     *\n      * @param command  command to add\n      */\n     public void append(final KeepCommand<T> command) {\n \n     /**\n      * Add an insert command to the script.\n-     * \n+     *\n      * @param command  command to add\n      */\n     public void append(final InsertCommand<T> command) {\n \n     /**\n      * Add a delete command to the script.\n-     * \n+     *\n      * @param command  command to add\n      */\n     public void append(final DeleteCommand<T> command) {\n      * own visitor, the script will be responsible to drive it through the\n      * commands in order and call the appropriate method as each command is\n      * encountered.\n-     * \n+     *\n      * @param visitor  the visitor that will visit all commands in turn\n      */\n     public void visit(final CommandVisitor<T> visitor) {\n      * Get the length of the Longest Common Subsequence (LCS). The length of the\n      * longest common subsequence is the number of {@link KeepCommand keep\n      * commands} in the script.\n-     * \n+     *\n      * @return length of the Longest Common Subsequence\n      */\n     public int getLCSLength() {\n      * Get the number of effective modifications. The number of effective\n      * modification is the number of {@link DeleteCommand delete} and\n      * {@link InsertCommand insert} commands in the script.\n-     * \n+     *\n      * @return number of effective modifications\n      */\n     public int getModifications() {\n--- a/src/main/java/org/apache/commons/collections4/sequence/InsertCommand.java\n+++ b/src/main/java/org/apache/commons/collections4/sequence/InsertCommand.java\n  * transforming the first sequence into the second sequence uses an instance of\n  * this class to represent the insertion of this object. The objects embedded in\n  * these type of commands always come from the second sequence.\n- * \n+ *\n  * @see SequencesComparator\n  * @see EditScript\n- * \n+ *\n  * @since 4.0\n  * @version $Id$\n  */\n \n     /**\n      * Simple constructor. Creates a new instance of InsertCommand\n-     * \n+     *\n      * @param object  the object of the second sequence that should be inserted\n      */\n     public InsertCommand(final T object) {\n      * Accept a visitor. When an <code>InsertCommand</code> accepts a visitor,\n      * it calls its {@link CommandVisitor#visitInsertCommand visitInsertCommand}\n      * method.\n-     * \n+     *\n      * @param visitor  the visitor to be accepted\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/collections4/sequence/KeepCommand.java\n+++ b/src/main/java/org/apache/commons/collections4/sequence/KeepCommand.java\n  * transforming the first sequence into the second sequence uses an instance of\n  * this class to represent the keeping of this object. The objects embedded in\n  * these type of commands always come from the first sequence.\n- * \n+ *\n  * @see SequencesComparator\n  * @see EditScript\n- * \n+ *\n  * @since 4.0\n  * @version $Id$\n  */\n \n     /**\n      * Simple constructor. Creates a new instance of KeepCommand\n-     * \n+     *\n      * @param object  the object belonging to both sequences (the object is a\n      *   reference to the instance in the first sequence which is known\n      *   to be equal to an instance in the second sequence)\n     /**\n      * Accept a visitor. When a <code>KeepCommand</code> accepts a visitor, it\n      * calls its {@link CommandVisitor#visitKeepCommand visitKeepCommand} method.\n-     * \n+     *\n      * @param visitor  the visitor to be accepted\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/collections4/sequence/ReplacementsFinder.java\n+++ b/src/main/java/org/apache/commons/collections4/sequence/ReplacementsFinder.java\n  * {@link CommandVisitor CommandVisitor} interface) and calls a user-supplied\n  * handler implementing the {@link ReplacementsHandler ReplacementsHandler}\n  * interface to process the sub-sequences.\n- * \n+ *\n  * @see ReplacementsHandler\n  * @see EditScript\n  * @see SequencesComparator\n- * \n+ *\n  * @since 4.0\n  * @version $Id$\n  */\n--- a/src/main/java/org/apache/commons/collections4/sequence/ReplacementsHandler.java\n+++ b/src/main/java/org/apache/commons/collections4/sequence/ReplacementsHandler.java\n \n /**\n  * This interface is devoted to handle synchronized replacement sequences.\n- * \n+ *\n  * @see ReplacementsFinder\n  * @since 4.0\n  * @version $Id$\n      * <p>\n      * The replacement is defined as replacing the <code>from</code>\n      * sub-sequence into the <code>to</code> sub-sequence.\n-     * \n+     *\n      * @param skipped  number of tokens skipped since the last call (i.e. number of\n      *   tokens that were in both sequences), this number should be strictly positive\n      *   except on the very first call where it can be zero (if the first object of\n--- a/src/main/java/org/apache/commons/collections4/sequence/SequencesComparator.java\n+++ b/src/main/java/org/apache/commons/collections4/sequence/SequencesComparator.java\n  * containing all the\n  * {@link EditCommand commands}\n  * needed to transform the first sequence into the second one.\n- * \n+ *\n  * @see EditScript\n  * @see EditCommand\n  * @see CommandVisitor\n- * \n+ *\n  * @since 4.0\n  * @version $Id$\n  */\n      * sequence and <code>o2</code> belongs to the second sequence. This can be\n      * important if subclassing is used for some elements in the first sequence\n      * and the <code>equals</code> method is specialized.\n-     * \n+     *\n      * @param sequence1  first sequence to be compared\n      * @param sequence2  second sequence to be compared\n      */\n      * It is <em>guaranteed</em> that the comparisons will always be done as\n      * <code>Equator.equate(o1, o2)</code> where <code>o1</code> belongs to the first\n      * sequence and <code>o2</code> belongs to the second sequence.\n-     * \n+     *\n      * @param sequence1  first sequence to be compared\n      * @param sequence2  second sequence to be compared\n      * @param equator  the equator to use for testing object equality\n      * {@link KeepCommand keep commands} come from the first sequence. This can\n      * be important if subclassing is used for some elements in the first\n      * sequence and the <code>equals</code> method is specialized.\n-     * \n+     *\n      * @return the edit script resulting from the comparison of the two\n      *         sequences\n      */\n         return new Snake(start, end, diag);\n     }\n \n-    /** \n+    /**\n      * Get the middle snake corresponding to two subsequences of the\n      * main sequences.\n      * <p>\n      * The snake is found using the MYERS Algorithm (this algorithms has\n      * also been implemented in the GNU diff program). This algorithm is\n-     * explained in Eugene Myers article: \n+     * explained in Eugene Myers article:\n      * <a href=\"http://www.cs.arizona.edu/people/gene/PAPERS/diff.ps\">\n      * An O(ND) Difference Algorithm and Its Variations</a>.\n      *\n          * @param start  start index of the snake\n          * @param end  end index of the snake\n          * @param diag  diagonal number\n-         */ \n+         */\n         public Snake(final int start, final int end, final int diag) {\n             this.start = start;\n             this.end   = end;\n          * Get the diagonal number of the snake.\n          *\n          * @return diagonal number of the snake\n-         */  \n+         */\n         public int getDiag() {\n             return diag;\n         }", "timestamp": 1367346843, "metainfo": ""}