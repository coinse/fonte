{"sha": "039cffde35c919479f1ca914c0f29283321b991b", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r740150 | mbenson | 2009-02-02 15:24:00 -0800 (Mon, 02 Feb 2009) | 1 line          make all [collections] maps implement IterableMap     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/map/TestDefaultedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestDefaultedMap.java\n \n import org.apache.commons.collections.Factory;\n import org.apache.commons.collections.FactoryUtils;\n+import org.apache.commons.collections.IterableMap;\n import org.apache.commons.collections.Transformer;\n import org.apache.commons.collections.functors.ConstantFactory;\n \n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDefaultedMap extends AbstractTestMap {\n+public class TestDefaultedMap<K, V> extends AbstractTestIterableMap<K, V> {\n \n-    protected static final Factory nullFactory = FactoryUtils.nullFactory();\n+    protected final Factory<V> nullFactory = FactoryUtils.<V>nullFactory();\n \n     public TestDefaultedMap(String testName) {\n         super(testName);\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    //-----------------------------------------------------------------------    \n-    public Map makeEmptyMap() {\n-        return DefaultedMap.decorate(new HashMap(), nullFactory);\n+    //-----------------------------------------------------------------------\n+    public IterableMap<K, V> makeObject() {\n+        return DefaultedMap.decorate(new HashMap<K, V>(), nullFactory);\n     }\n \n-    //-----------------------------------------------------------------------    \n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n     public void testMapGet() {\n-        Map map = new DefaultedMap(\"NULL\");\n-        \n+        Map<K, V> map = new DefaultedMap<K, V>((V) \"NULL\");\n+\n         assertEquals(0, map.size());\n         assertEquals(false, map.containsKey(\"NotInMap\"));\n         assertEquals(\"NULL\", map.get(\"NotInMap\"));\n-        \n-        map.put(\"Key\", \"Value\");\n+\n+        map.put((K) \"Key\", (V) \"Value\");\n         assertEquals(1, map.size());\n         assertEquals(true, map.containsKey(\"Key\"));\n         assertEquals(\"Value\", map.get(\"Key\"));\n         assertEquals(\"NULL\", map.get(\"NotInMap\"));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testMapGet2() {\n-        HashMap base = new HashMap();\n-        Map map = DefaultedMap.decorate(base, \"NULL\");\n-        \n+        HashMap<K, V> base = new HashMap<K, V>();\n+        Map<K, V> map = DefaultedMap.decorate(base, (V) \"NULL\");\n+\n         assertEquals(0, map.size());\n         assertEquals(0, base.size());\n         assertEquals(false, map.containsKey(\"NotInMap\"));\n         assertEquals(\"NULL\", map.get(\"NotInMap\"));\n-        \n-        map.put(\"Key\", \"Value\");\n+\n+        map.put((K) \"Key\", (V) \"Value\");\n         assertEquals(1, map.size());\n         assertEquals(1, base.size());\n         assertEquals(true, map.containsKey(\"Key\"));\n         assertEquals(\"NULL\", map.get(\"NotInMap\"));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testMapGet3() {\n-        HashMap base = new HashMap();\n-        Map map = DefaultedMap.decorate(base, ConstantFactory.getInstance(\"NULL\"));\n-        \n+        HashMap<K, V> base = new HashMap<K, V>();\n+        Map<K, V> map = DefaultedMap.decorate(base, ConstantFactory.getInstance((V) \"NULL\"));\n+\n         assertEquals(0, map.size());\n         assertEquals(0, base.size());\n         assertEquals(false, map.containsKey(\"NotInMap\"));\n         assertEquals(\"NULL\", map.get(\"NotInMap\"));\n-        \n-        map.put(\"Key\", \"Value\");\n+\n+        map.put((K) \"Key\", (V) \"Value\");\n         assertEquals(1, map.size());\n         assertEquals(1, base.size());\n         assertEquals(true, map.containsKey(\"Key\"));\n         assertEquals(\"NULL\", map.get(\"NotInMap\"));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testMapGet4() {\n-        HashMap base = new HashMap();\n-        Map map = DefaultedMap.decorate(base, new Transformer() {\n-            public Object transform(Object input) {\n+        HashMap<K, V> base = new HashMap<K, V>();\n+        Map<K, V> map = DefaultedMap.decorate(base, new Transformer<K, V>() {\n+            public V transform(K input) {\n                 if (input instanceof String) {\n-                    return \"NULL\";\n+                    return (V) \"NULL\";\n                 }\n-                return \"NULL_OBJECT\";\n+                return (V) \"NULL_OBJECT\";\n             }\n         });\n-        \n+\n         assertEquals(0, map.size());\n         assertEquals(0, base.size());\n         assertEquals(false, map.containsKey(\"NotInMap\"));\n         assertEquals(\"NULL\", map.get(\"NotInMap\"));\n         assertEquals(\"NULL_OBJECT\", map.get(new Integer(0)));\n-        \n-        map.put(\"Key\", \"Value\");\n+\n+        map.put((K) \"Key\", (V) \"Value\");\n         assertEquals(1, map.size());\n         assertEquals(1, base.size());\n         assertEquals(true, map.containsKey(\"Key\"));", "timestamp": 1252994247, "metainfo": ""}