{"sha": "43e7d538398821eb7869657d66d97f9cacf8c6a5", "log": "document IntList.equals and IntList.hashCode contracts add test ensuring proper implementation of IntList.hashCode   ", "commit": "\n--- a/src/java/org/apache/commons/collections/primitives/IntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntList.java,v 1.7 2003/01/10 19:24:10 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntList.java,v 1.8 2003/01/10 21:13:19 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @see org.apache.commons.collections.primitives.adapters.ListIntList\n  *\n  * @since Commons Collections 2.2\n- * @version $Revision: 1.7 $ $Date: 2003/01/10 19:24:10 $\n+ * @version $Revision: 1.8 $ $Date: 2003/01/10 21:13:19 $\n  * \n  * @author Rodney Waldhoff \n  */\n      */\n     boolean addAll(int index, IntCollection collection);\n     \n+    /**\n+     * Returns <code>true</code> iff <i>that</i> is an <code>IntList</code>\n+     * that contains the same elements in the same order as me.\n+     * In other words, returns <code>true</code> iff <i>that</i> is\n+     * an <code>IntList</code> that has the same {@link #size} as me,\n+     * and for which the elements returned that its \n+     * {@link IntList#iterator iterator} are equal (<code>==</code>) to\n+     * the corresponding elements within me.\n+     * (This contract ensures that this method works properly across \n+     * different implementations of the <code>IntList</code> interface.\n+     * \n+     * @param that the object to compare to me\n+     * @return <code>true</code> iff <i>that</i> is an <code>IntList</code>\n+     *         that contains the same elements in the same order as me\n+     */\n+    boolean equals(Object that);\n+    \n     /** \n      * Returns the element at the specified position within \n      * me. \n      * @throws IndexOutOfBoundsException if the specified index is out of range\n      */\n     int get(int index);\n-    \n+        \n+    /**\n+     * Returns my hash code.\n+     * <p>\n+     * The hash code of an <code>IntList</code> is defined to be the\n+     * result of the following calculation:\n+     * <pre>int hash = 1;\n+     * for(IntIterator iter = iterator(); iter.hasNext(); ) {\n+     *   hash = 31*hash + iter.next();\n+     * }</pre>\n+     * <p>\n+     * This contract ensures that this method is consistent with \n+     * {@link #equals} and with the {@link java.util.List#hashCode hashCode}\n+     * method of a {@link java.util.List List} of {@link Integer}s. \n+     * \n+     * @return my hash code\n+     */\n+    int hashCode();\n+\n     /** \n      * Returns the index of the first occurrence \n      * of the specified element within me, \n--- a/src/test/org/apache/commons/collections/primitives/TestIntList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntList.java,v 1.1 2003/01/10 13:27:55 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntList.java,v 1.2 2003/01/10 21:13:19 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.primitives.adapters.ListIntList;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/01/10 13:27:55 $\n+ * @version $Revision: 1.2 $ $Date: 2003/01/10 21:13:19 $\n  * @author Rodney Waldhoff\n  */\n public abstract class TestIntList extends TestList {\n \n     // tests\n     // ------------------------------------------------------------------------\n+\n+    public void testHashCodeSpecification() {\n+        IntList list = makeFullIntList();\n+        int hash = 1;\n+        for(IntIterator iter = list.iterator(); iter.hasNext(); ) {\n+            hash = 31*hash + iter.next();\n+        }\n+        assertEquals(hash,list.hashCode());\n+    }\n \n     public void testEqualsWithTwoIntLists() {\n         IntList one = makeEmptyIntList();", "timestamp": 1042233199, "metainfo": ""}