{"sha": "1e7b7fc64c68111899f035228fdda98357b502ee", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471580 | scolebourne | 2006-11-05 16:22:53 -0800 (Sun, 05 Nov 2006) | 1 line          Generify CompositeCollection     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/set/TestCompositeSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestCompositeSet.java\n  */\n package org.apache.commons.collections.set;\n \n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.collection.CompositeCollection;\n \n-import java.util.Set;\n-import java.util.HashSet;\n-import java.util.Collection;\n-\n /**\n- * Extension of {@link AbstractTestSet} for exercising the \n+ * Extension of {@link AbstractTestSet} for exercising the\n  * {@link CompositeSet} implementation.\n  *\n  * @since Commons Collections 3.0\n  * @author Phil Steitz\n  */\n \n-public class TestCompositeSet extends AbstractTestSet {\n+public class TestCompositeSet<E> extends AbstractTestSet<E> {\n     public TestCompositeSet(String name) {\n         super(name);\n     }\n-    \n+\n     public static Test suite() {\n         return new TestSuite(TestCompositeSet.class);\n     }\n-    \n-    public Set makeEmptySet() {\n-        final HashSet contained = new HashSet();\n-        CompositeSet set = new CompositeSet(contained);\n+\n+    public CompositeSet<E> makeObject() {\n+        final HashSet<E> contained = new HashSet<E>();\n+        CompositeSet<E> set = new CompositeSet<E>(contained);\n         set.setMutator( new EmptySetMutator(contained) );\n         return set;\n     }\n-    \n-    public Set buildOne() {\n-        HashSet set = new HashSet();\n-        set.add(\"1\");\n-        set.add(\"2\");\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public Set<E> buildOne() {\n+        HashSet<E> set = new HashSet<E>();\n+        set.add((E) \"1\");\n+        set.add((E) \"2\");\n         return set;\n     }\n-    \n-    public Set buildTwo() {\n-        HashSet set = new HashSet();\n-        set.add(\"3\");\n-        set.add(\"4\");\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public Set<E> buildTwo() {\n+        HashSet<E> set = new HashSet<E>();\n+        set.add((E) \"3\");\n+        set.add((E) \"4\");\n         return set;\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testContains() {\n-        CompositeSet set = new CompositeSet(new Set[]{buildOne(), buildTwo()});\n+        CompositeSet<E> set = new CompositeSet<E>(new Set[]{ buildOne(), buildTwo() });\n         assertTrue(set.contains(\"1\"));\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testRemoveUnderlying() {\n-        Set one = buildOne();\n-        Set two = buildTwo();\n-        CompositeSet set = new CompositeSet(new Set[]{one, two});\n+        Set<E> one = buildOne();\n+        Set<E> two = buildTwo();\n+        CompositeSet<E> set = new CompositeSet<E>(new Set[] { one, two });\n         one.remove(\"1\");\n         assertFalse(set.contains(\"1\"));\n-        \n+\n         two.remove(\"3\");\n         assertFalse(set.contains(\"3\"));\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testRemoveComposited() {\n-        Set one = buildOne();\n-        Set two = buildTwo();\n-        CompositeSet set = new CompositeSet(new Set[]{one, two});\n+        Set<E> one = buildOne();\n+        Set<E> two = buildTwo();\n+        CompositeSet<E> set = new CompositeSet<E>(new Set[] { one, two });\n         set.remove(\"1\");\n         assertFalse(one.contains(\"1\"));\n-        \n+\n         set.remove(\"3\");\n         assertFalse(one.contains(\"3\"));\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testFailedCollisionResolution() {\n-        Set one = buildOne();\n-        Set two = buildTwo();\n-        CompositeSet set = new CompositeSet(new Set[]{one, two});\n-        set.setMutator(new CompositeSet.SetMutator() {\n-            public void resolveCollision(CompositeSet comp, Set existing, \n-                Set added, Collection intersects) {\n+        Set<E> one = buildOne();\n+        Set<E> two = buildTwo();\n+        CompositeSet<E> set = new CompositeSet<E>(new Set[] { one, two });\n+        set.setMutator(new CompositeSet.SetMutator<E>() {\n+            public void resolveCollision(CompositeSet<E> comp, Set<E> existing,\n+                Set<E> added, Collection<E> intersects) {\n+                //noop\n             }\n-            \n-            public boolean add(CompositeCollection composite, \n-                Collection[] collections, Object obj) {\n+\n+            public boolean add(CompositeCollection<E> composite,\n+                    List<Collection<E>> collections, E obj) {\n                 throw new UnsupportedOperationException();\n             }\n-            \n-            public boolean addAll(CompositeCollection composite, \n-                Collection[] collections, Collection coll) {\n+\n+            public boolean addAll(CompositeCollection<E> composite,\n+                    List<Collection<E>> collections, Collection<? extends E> coll) {\n                 throw new UnsupportedOperationException();\n             }\n-            \n-            public boolean remove(CompositeCollection composite, \n-                Collection[] collections, Object obj) {\n+\n+            public boolean remove(CompositeCollection<E> composite,\n+                    List<Collection<E>> collections, Object obj) {\n                 throw new UnsupportedOperationException();\n             }\n         });\n-        \n-        HashSet three = new HashSet();\n-        three.add(\"1\");\n+\n+        HashSet<E> three = new HashSet<E>();\n+        three.add((E) \"1\");\n         try {\n             set.addComposited(three);\n             fail(\"IllegalArgumentException should have been thrown\");\n             // expected\n         }\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testAddComposited() {\n-        Set one = buildOne();\n-        Set two = buildTwo();\n-        CompositeSet set = new CompositeSet();\n+        Set<E> one = buildOne();\n+        Set<E> two = buildTwo();\n+        CompositeSet<E> set = new CompositeSet<E>();\n         set.addComposited(one, two);\n-        CompositeSet set2 = new CompositeSet(buildOne());\n+        CompositeSet<E> set2 = new CompositeSet<E>(buildOne());\n         set2.addComposited(buildTwo());\n         assertTrue(set.equals(set2));\n-        HashSet set3 = new HashSet();\n-        set3.add(\"1\");\n-        set3.add(\"2\");\n-        set3.add(\"3\");\n-        HashSet set4 = new HashSet();\n-        set4.add(\"4\");\n-        CompositeSet set5 = new CompositeSet(set3);\n+        HashSet<E> set3 = new HashSet<E>();\n+        set3.add((E) \"1\");\n+        set3.add((E) \"2\");\n+        set3.add((E) \"3\");\n+        HashSet<E> set4 = new HashSet<E>();\n+        set4.add((E) \"4\");\n+        CompositeSet<E> set5 = new CompositeSet<E>(set3);\n         set5.addComposited(set4);\n         assertTrue(set.equals(set5));\n         try {", "timestamp": 1252994265, "metainfo": ""}