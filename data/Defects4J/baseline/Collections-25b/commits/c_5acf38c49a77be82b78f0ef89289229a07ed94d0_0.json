{"sha": "5acf38c49a77be82b78f0ef89289229a07ed94d0", "log": "Document the existence of the new DualHashBidiMap/DualTreeBidiMap classes   ", "commit": "\n--- a/src/java/org/apache/commons/collections/DoubleOrderedMap.java\n+++ b/src/java/org/apache/commons/collections/DoubleOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DoubleOrderedMap.java,v 1.6 2003/08/31 17:26:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DoubleOrderedMap.java,v 1.7 2003/11/01 18:45:48 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Red-Black tree-based implementation of Map. This class guarantees\n  * that the map will be in both ascending key order and ascending\n  * value order, sorted according to the natural order for the key's\n- * and value's classes.<p>\n- *\n+ * and value's classes.\n+ * <p>\n  * This Map is intended for applications that need to be able to look\n  * up a key-value pairing by either key or value, and need to do so\n- * with equal efficiency.<p>\n- *\n+ * with equal efficiency.\n+ * <p>\n  * While that goal could be accomplished by taking a pair of TreeMaps\n  * and redirecting requests to the appropriate TreeMap (e.g.,\n  * containsKey would be directed to the TreeMap that maps values to\n  * to values), there are problems with that implementation,\n  * particularly when trying to keep the two TreeMaps synchronized with\n  * each other. And if the data contained in the TreeMaps is large, the\n- * cost of redundant storage becomes significant.<p>\n- *\n+ * cost of redundant storage becomes significant. (See also the new\n+ * {@link org.apache.commons.collections.DualTreeBidiMap DualTreeBidiMap} and\n+ * {@link org.apache.commons.collections.DualHashBidiMap DualHashBidiMap}\n+ * implementations.)\n+ * <p>\n  * This solution keeps the data properly synchronized and minimizes\n  * the data storage. The red-black algorithm is based on TreeMap's,\n  * but has been modified to simultaneously map a tree node by key and\n  * operations (there is a savings in that the lookup of the node to be\n  * removed only has to be performed once). And since only one node\n  * contains the key and value, storage is significantly less than that\n- * required by two TreeMaps.<p>\n- *\n+ * required by two TreeMaps.\n+ * <p>\n  * There are some limitations placed on data kept in this Map. The\n- * biggest one is this:<p>\n- *\n+ * biggest one is this:\n+ * <p>\n  * When performing a put operation, neither the key nor the value may\n  * already exist in the Map. In the java.util Map implementations\n  * (HashMap, TreeMap), you can perform a put with an already mapped\n  * key, and neither cares about duplicate values at all ... but this\n  * implementation's put method with throw an IllegalArgumentException\n- * if either the key or the value is already in the Map.<p>\n- *\n+ * if either the key or the value is already in the Map.\n+ * <p>\n  * Obviously, that same restriction (and consequence of failing to\n- * heed that restriction) applies to the putAll method.<p>\n- *\n+ * heed that restriction) applies to the putAll method.\n+ * <p>\n  * The Map.Entry instances returned by the appropriate methods will\n  * not allow setValue() and will throw an\n- * UnsupportedOperationException on attempts to call that method.<p>\n- *\n+ * UnsupportedOperationException on attempts to call that method.\n+ * <p>\n  * New methods are added to take advantage of the fact that values are\n- * kept sorted independently of their keys:<p>\n- *\n+ * kept sorted independently of their keys:\n+ * <p>\n  * Object getKeyForValue(Object value) is the opposite of get; it\n- * takes a value and returns its key, if any.<p>\n- *\n+ * takes a value and returns its key, if any.\n+ * <p>\n  * Object removeValue(Object value) finds and removes the specified\n- * value and returns the now un-used key.<p>\n- *\n+ * value and returns the now un-used key.\n+ * <p>\n  * Set entrySetByValue() returns the Map.Entry's in a Set whose\n  * iterator will iterate over the Map.Entry's in ascending order by\n- * their corresponding values.<p>\n- *\n+ * their corresponding values.\n+ * <p>\n  * Set keySetByValue() returns the keys in a Set whose iterator will\n  * iterate over the keys in ascending order by their corresponding\n- * values.<p>\n+ * values.\n+ * <p>\n+ * Collection valuesByValue() returns the values in a Collection whose\n+ * iterator will iterate over the values in ascending order.\n  *\n- * Collection valuesByValue() returns the values in a Collection whose\n- * iterator will iterate over the values in ascending order.<p>\n- *\n+ * @see BidiMap\n+ * @see DualTreeBidiMap\n+ * @see DualHashBidiMap\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.6 $ $Date: 2003/08/31 17:26:43 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/01 18:45:48 $\n  * \n- * @author Marc Johnson (marcj at users dot sourceforge dot net)\n+ * @author Marc Johnson\n  */\n public final class DoubleOrderedMap extends AbstractMap {\n //  final for performance\n      * by the map, so changes to the map are reflected in the set, and\n      * vice-versa.  If the map is modified while an iteration over the\n      * set is in progress, the results of the iteration are\n-     * undefined. The set supports element removal, which removes the\n-     * corresponding mapping from the map, via the Iterator.remove,\n-     * Set.remove, removeAll, retainAll and clear operations.  It does\n-     * not support the add or addAll operations.\n+     * undefined.\n+     * <p>\n+     * The set supports element removal, which removes the corresponding\n+     * mapping from the map, via the Iterator.remove, Set.remove, removeAll,\n+     * retainAll and clear operations.\n+     * It does not support the add or addAll operations.\n+     * The setValue method is not supported on the Map Entry.\n      *\n      * @return a set view of the mappings contained in this map.\n      */", "timestamp": 1067712348, "metainfo": ""}