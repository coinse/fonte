{"sha": "c491e7f4f5b0c4fcebcc19dff336f1170cf2aa1c", "log": "Collection and List decorators (previously inner classes)   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/AbstractCollectionDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/AbstractCollectionDecorator.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+/**\n+ * <code>AbstractCollectionDecorator</code> decorates a <code>Collection</code>\n+ * implementation.\n+ * <p>\n+ * Each method call made on this <code>Collection</code> is forwarded to the\n+ * decorated <code>Collection</code>. This class is used as a framework on which\n+ * to build to extensions such as synchronized and unmodifiable behaviour. The\n+ * main advantage of decoration is that one decorator can wrap any implementation\n+ * of <code>Collection</code>, whereas sub-classing requires a new class to be\n+ * written for each implementation.\n+ * <p>\n+ * This implementation does not perform any special processing with\n+ * {@link #iterator()}. Instead it simply returns the value from the \n+ * wrapped collection. This may be undesirable, for example if you are trying\n+ * to write an unmodifiable implementation it might provide a loophole.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public abstract class AbstractCollectionDecorator implements Collection {\n+\n+    /** The collection being decorated */\n+    protected final Collection collection;\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @throws IllegalArgumentException if the collection is null\n+     */\n+    protected AbstractCollectionDecorator(Collection coll) {\n+        if (coll == null) {\n+            throw new IllegalArgumentException(\"Collection must not be null\");\n+        }\n+        this.collection = coll;\n+    }\n+\n+    public boolean add(Object object) {\n+        return collection.add(object);\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        return collection.addAll(coll);\n+    }\n+\n+    public void clear() {\n+        collection.clear();\n+    }\n+\n+    public boolean contains(Object object) {\n+        return collection.contains(object);\n+    }\n+\n+    public boolean isEmpty() {\n+        return collection.isEmpty();\n+    }\n+\n+    public Iterator iterator() {\n+        return collection.iterator();\n+    }\n+\n+    public boolean remove(Object object) {\n+        return collection.remove(object);\n+    }\n+\n+    public int size() {\n+        return collection.size();\n+    }\n+\n+    public Object[] toArray() {\n+        return collection.toArray();\n+    }\n+\n+    public Object[] toArray(Object[] object) {\n+        return collection.toArray(object);\n+    }\n+\n+    public boolean containsAll(Collection coll) {\n+        return collection.containsAll(coll);\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        return collection.removeAll(coll);\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        return collection.retainAll(coll);\n+    }\n+\n+    public boolean equals(Object object) {\n+        if (object == this) {\n+            return true;\n+        }\n+        return collection.equals(object);\n+    }\n+\n+    public int hashCode() {\n+        return collection.hashCode();\n+    }\n+\n+    public String toString() {\n+        return collection.toString();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/AbstractListDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/AbstractListDecorator.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * <code>AbstractListDecorator</code> decorates another <code>List</code>.\n+ * <p>\n+ * Methods are forwarded directly to the decorated list.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractListDecorator extends AbstractCollectionDecorator implements List {\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    protected AbstractListDecorator(List list) {\n+        super(list);\n+    }\n+\n+    public void add(int index, Object object) {\n+        getList().add(index, object);\n+    }\n+\n+    public boolean addAll(int index, Collection coll) {\n+        return getList().addAll(index, coll);\n+    }\n+\n+    public Object get(int index) {\n+        return getList().get(index);\n+    }\n+\n+    public int indexOf(Object object) {\n+        return getList().indexOf(object);\n+    }\n+\n+    public int lastIndexOf(Object object) {\n+        return getList().lastIndexOf(object);\n+    }\n+\n+    public ListIterator listIterator() {\n+        return getList().listIterator();\n+    }\n+\n+    public ListIterator listIterator(int index) {\n+        return getList().listIterator(index);\n+    }\n+\n+    public Object remove(int index) {\n+        return getList().remove(index);\n+    }\n+\n+    public Object set(int index, Object object) {\n+        return getList().set(index, object);\n+    }\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        return getList().subList(fromIndex, toIndex);\n+    }\n+\n+    protected List getList() {\n+        return (List) collection;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/AbstractListIteratorDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/AbstractListIteratorDecorator.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * <code>AbstractListIteratorDecorator</code> decorates another \n+ * <code>ListIterator</code>.\n+ * <p>\n+ * Methods are forwarded directly to the decorated iterator.\n+ * <p>\n+ * This class is similar to {@link org.apache.commons.collections.iterators.ProxyListIterator},\n+ * however that class allows the list iterator to be set, which is too insecure\n+ * for some list implementations.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractListIteratorDecorator implements ListIterator {\n+\n+    /** The iterator to delegate to */\n+    protected final ListIterator iterator;\n+\n+    /**\n+     * Constructor that wraps the specified iterator.\n+     * \n+     * @param iterator  the iterator to decorate\n+     */\n+    public AbstractListIteratorDecorator(ListIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    public boolean hasNext() {\n+        return iterator.hasNext();\n+    }\n+\n+    public Object next() {\n+        return iterator.next();\n+    }\n+\n+    public boolean hasPrevious() {\n+        return iterator.hasPrevious();\n+    }\n+\n+    public Object previous() {\n+        return iterator.previous();\n+    }\n+\n+    public int nextIndex() {\n+        return iterator.nextIndex();\n+    }\n+\n+    public int previousIndex() {\n+        return iterator.previousIndex();\n+    }\n+\n+    public void remove() {\n+        iterator.remove();\n+    }\n+\n+    public void add(Object object) {\n+        iterator.add(object);\n+    }\n+\n+    public void set(Object object) {\n+        iterator.set(object);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/FixedSizeList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/FixedSizeList.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * <code>FixedSizeList</code> decorates another <code>List</code> to\n+ * fix the size.\n+ * <p>\n+ * The add, remove, clear and retain operations are unsupported.\n+ * The set method is allowed (as it doesn't change the list size).\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class FixedSizeList extends UnmodifiableCollection implements List {\n+\n+    /**\n+     * Factory method to create a fixed size list.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    public static List decorate(List list) {\n+        return new FixedSizeList(list);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    protected FixedSizeList(List list) {\n+        super(list);\n+    }\n+\n+    public void add(int index, Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean addAll(int index, Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Object get(int index) {\n+        return getList().get(index);\n+    }\n+\n+    public int indexOf(Object object) {\n+        return getList().indexOf(object);\n+    }\n+\n+    public int lastIndexOf(Object object) {\n+        return getList().lastIndexOf(object);\n+    }\n+\n+    public ListIterator listIterator() {\n+        return listIterator(0);\n+    }\n+\n+    public ListIterator listIterator(int index) {\n+        return new AbstractListIteratorDecorator(getList().listIterator(index)) {\n+            public void remove() {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            public void add(Object object) {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            public void remove(Object object) {\n+                throw new UnsupportedOperationException();\n+            }\n+        };\n+    }\n+\n+    public Object remove(int index) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Object set(int index, Object object) {\n+        return getList().set(index, object);\n+    }\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        List sub = getList().subList(fromIndex, toIndex);\n+        return new FixedSizeList(sub);\n+    }\n+\n+    protected List getList() {\n+        return (List) collection;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/LazyList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/LazyList.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.List;\n+\n+import org.apache.commons.collections.Factory;\n+\n+/**\n+ * <code>LazyList</code> decorates another <code>List</code>\n+ * to create objects in the list on demand.\n+ * <p>\n+ * When the {@link #get(int)} method is called with an index greater than\n+ * the size of the list, the list will automatically grow in size and return\n+ * a new object from the specified factory. The gaps will be filled by null.\n+ * If a get method call encounters a null, it will be replaced with a new\n+ * object from the factory. Thus this list is unsuitable for storing null\n+ * objects.\n+ * <p>\n+ * For instance:\n+ *\n+ * <pre>\n+ * Factory factory = new Factory() {\n+ *     public Object create() {\n+ *         return new Date();\n+ *     }\n+ * }\n+ * List lazy = LazyList.decorate(new ArrayList(), factory);\n+ * Object obj = lazy.get(3);\n+ * </pre>\n+ *\n+ * After the above code is executed, <code>obj</code> will contain\n+ * a new <code>Date</code> instance.  Furthermore, that <code>Date</code>\n+ * instance is the fourth element in the list.  The first, second, \n+ * and third element are all set to <code>null</code>.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Arron Bates\n+ * @author Paul Jack\n+ */\n+public class LazyList extends AbstractListDecorator {\n+    \n+    /** The factory to use to lazily instantiate the objects */\n+    protected final Factory factory;\n+\n+    /**\n+     * Factory method to create a lazily instantiating list.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param factory  the factory to use for creation, must not be null\n+     * @throws IllegalArgumentException if list or factory is null\n+     */\n+    public static List decorate(List list, Factory factory) {\n+        return new LazyList(list, factory);\n+    }\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param factory  the factory to use for creation, must not be null\n+     * @throws IllegalArgumentException if list or factory is null\n+     */\n+    protected LazyList(List list, Factory factory) {\n+        super(list);\n+        if (factory == null) {\n+            throw new IllegalArgumentException(\"Factory must not be null\");\n+        }\n+        this.factory = factory;\n+    }\n+\n+    \n+    /**\n+     * Decorate the get method to perform the lazy behaviour.\n+     * <p>\n+     * If the requested index is greater than the current size, the list will \n+     * grow to the new size and a new object will be returned from the factory.\n+     * Indexes inbetween the old size and the requested size are left with a \n+     * placeholder that is replaced with a factory object when requested.\n+     * \n+     * @param index  the index to retrieve\n+     */\n+    public Object get(int index) {\n+        int size = getList().size();\n+        if (index < size) {\n+            // within bounds, get the object\n+            Object object = getList().get(index);\n+            if (object == null) {\n+                // item is a place holder, create new one, set and return\n+                object = factory.create();\n+                getList().set(index, object);\n+                return object;\n+            } else {\n+                // good and ready to go\n+                return object;\n+            }\n+        } else {\n+            // we have to grow the list\n+            for (int i = size; i < index; i++) {\n+                getList().add(null);\n+            }\n+            // create our last object, set and return\n+            Object object = factory.create();\n+            getList().add(object);\n+            return object;\n+        }\n+    }\n+\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        List sub = getList().subList(fromIndex, toIndex);\n+        return new LazyList(sub, factory);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedCollection.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * <code>PredicatedCollection</code> decorates another <code>Collection</code>\n+ * to validate additions match a specified predicate.\n+ * <p>\n+ * If an object cannot be addded to the collection, an IllegalArgumentException\n+ * is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class PredicatedCollection extends AbstractCollectionDecorator {\n+\n+    /** The predicate to use */\n+    protected final Predicate predicate;\n+\n+    /**\n+     * Factory method to create a predicated (validating) collection.\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are validated.\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if collection or predicate is null\n+     * @throws IllegalArgumentException if the collection contains invalid elements\n+     */\n+    public static Collection decorate(Collection coll, Predicate predicate) {\n+        return new PredicatedCollection(coll, predicate);\n+    }\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are validated.\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if collection or predicate is null\n+     * @throws IllegalArgumentException if the collection contains invalid elements\n+     */\n+    protected PredicatedCollection(Collection coll, Predicate predicate) {\n+        super(coll);\n+        if (predicate == null) {\n+            throw new IllegalArgumentException(\"Predicate must not be null\");\n+        }\n+        this.predicate = predicate;\n+        for (Iterator it = coll.iterator(); it.hasNext(); ) {\n+            validate(it.next());\n+        }\n+    }\n+\n+    /**\n+     * Override to validate the object being added to ensure it matches\n+     * the predicate.\n+     * \n+     * @param object  the object being added\n+     * @return the result of adding to the underlying collection\n+     * @throws IllegalArgumentException if the add is invalid\n+     */\n+    public boolean add(Object object) {\n+        validate(object);\n+        return collection.add(object);\n+    }\n+\n+    /**\n+     * Override to validate the objects being added to ensure they match\n+     * the predicate. If any one fails, no update is made to the underlying\n+     * collection.\n+     * \n+     * @param coll  the collection being added\n+     * @return the result of adding to the underlying collection\n+     * @throws IllegalArgumentException if the add is invalid\n+     */\n+    public boolean addAll(Collection coll) {\n+        for (Iterator it = coll.iterator(); it.hasNext(); ) {\n+            validate(it.next());\n+        }\n+        return collection.addAll(coll);\n+    }\n+\n+    /**\n+     * Validates the object being added to ensure it matches the predicate.\n+     * <p>\n+     * The predicate itself should not throw an exception, but return false to\n+     * indicate that the object cannot be added.\n+     * \n+     * @param object  the object being added\n+     * @throws IllegalArgumentException if the add is invalid\n+     */\n+    protected void validate(Object object) {\n+        if (predicate.evaluate(object) == false) {\n+            throw new IllegalArgumentException(\"Cannot add Object '\" + object + \"' - Predicate rejected it\");\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedList.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * <code>PredicatedList</code> decorates another <code>List</code>\n+ * to validate additions match a specified predicate.\n+ * <p>\n+ * If an object cannot be addded to the list, an IllegalArgumentException\n+ * is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class PredicatedList extends PredicatedCollection implements List {\n+\n+    /**\n+     * Factory method to create a predicated (validating) collection.\n+     * <p>\n+     * If there are any elements already in the list being decorated, they\n+     * are validated.\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if collection or predicate is null\n+     * @throws IllegalArgumentException if the collection contains invalid elements\n+     */\n+    public static List decorate(List list, Predicate predicate) {\n+        return new PredicatedList(list, predicate);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the list being decorated, they\n+     * are validated.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if collection or predicate is null\n+     * @throws IllegalArgumentException if the collection contains invalid elements\n+     */\n+    protected PredicatedList(List list, Predicate predicate) {\n+        super(list, predicate);\n+    }\n+\n+    public void add(int index, Object object) {\n+        validate(object);\n+        getList().add(index, object);\n+    }\n+\n+    public boolean addAll(int index, Collection coll) {\n+        for (Iterator it = coll.iterator(); it.hasNext(); ) {\n+            validate(it.next());\n+        }\n+        return getList().addAll(index, coll);\n+    }\n+\n+    public Object get(int index) {\n+        return getList().get(index);\n+    }\n+\n+    public int indexOf(Object object) {\n+        return getList().indexOf(object);\n+    }\n+\n+    public int lastIndexOf(Object object) {\n+        return getList().lastIndexOf(object);\n+    }\n+\n+    public ListIterator listIterator() {\n+        return listIterator(0);\n+    }\n+\n+    public ListIterator listIterator(int i) {\n+        return new AbstractListIteratorDecorator(getList().listIterator(i)) {\n+            public void add(Object object) {\n+                validate(object);\n+                iterator.add(object);\n+            }\n+\n+            public void set(Object object) {\n+                validate(object);\n+                iterator.set(object);\n+            }\n+        };\n+    }\n+\n+    public Object remove(int index) {\n+        return getList().remove(index);\n+    }\n+\n+    public Object set(int index, Object object) {\n+        validate(object);\n+        return getList().set(index, object);\n+    }\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        List sub = getList().subList(fromIndex, toIndex);\n+        return new PredicatedList(sub, predicate);\n+    }\n+\n+    protected List getList() {\n+        return (List) collection;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/SynchronizedCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/SynchronizedCollection.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+/**\n+ * <code>SynchronizedCollection</code> decorates another <code>Collection</code>\n+ * to synchronize the method calls.\n+ * <p>\n+ * Iterators must be manually synchronized:\n+ * <pre>\n+ * synchronized (coll) {\n+ *   Iterator it = coll.iterator();\n+ *   // do stuff with iterator\n+ * }\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class SynchronizedCollection implements Collection {\n+\n+    /** The collection to decorate */\n+    protected final Collection collection;\n+\n+    /**\n+     * Factory method to create a synchronized collection.\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @throws IllegalArgumentException if collection is null\n+     */\n+    public static Collection decorate(Collection coll) {\n+        return new SynchronizedCollection(coll);\n+    }\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @throws IllegalArgumentException if the collection is null\n+     */\n+    protected SynchronizedCollection(Collection collection) {\n+        if (collection == null) {\n+            throw new IllegalArgumentException(\"Collection must not be null\");\n+        }\n+        this.collection = collection;\n+    }\n+\n+    public synchronized boolean add(Object object) {\n+        return collection.add(object);\n+    }\n+\n+    public synchronized boolean addAll(Collection coll) {\n+        return collection.addAll(coll);\n+    }\n+\n+    public synchronized void clear() {\n+        collection.clear();\n+    }\n+\n+    public synchronized boolean contains(Object object) {\n+        return collection.contains(object);\n+    }\n+\n+    public synchronized boolean containsAll(Collection coll) {\n+        return collection.containsAll(coll);\n+    }\n+\n+    public synchronized boolean isEmpty() {\n+        return collection.isEmpty();\n+    }\n+\n+    /**\n+     * Iterators must be manually synchronized.\n+     * <pre>\n+     * synchronized (coll) {\n+     *   Iterator it = coll.iterator();\n+     *   // do stuff with iterator\n+     * }\n+     * \n+     * @return an iterator that must be manually synchronized on the collection\n+     */\n+    public Iterator iterator() {\n+        return collection.iterator();\n+    }\n+\n+    public synchronized Object[] toArray() {\n+        return collection.toArray();\n+    }\n+\n+    public synchronized Object[] toArray(Object[] object) {\n+        return collection.toArray(object);\n+    }\n+\n+    public synchronized boolean remove(Object object) {\n+        return collection.remove(object);\n+    }\n+\n+    public synchronized boolean removeAll(Collection coll) {\n+        return collection.removeAll(coll);\n+    }\n+\n+    public synchronized boolean retainAll(Collection coll) {\n+        return collection.retainAll(coll);\n+    }\n+\n+    public synchronized int size() {\n+        return collection.size();\n+    }\n+\n+    public synchronized boolean equals(Object object) {\n+        if (object == this) {\n+            return true;\n+        }\n+        return collection.equals(object);\n+    }\n+\n+    public synchronized int hashCode() {\n+        return collection.hashCode();\n+    }\n+\n+    public synchronized String toString() {\n+        return collection.toString();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/SynchronizedList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/SynchronizedList.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * <code>SynchronizedList</code> decorates another <code>List</code>.\n+ * <p>\n+ * Methods are synchronized, then forwarded to the decorated list.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class SynchronizedList extends SynchronizedCollection implements List {\n+\n+    /**\n+     * Factory method to create a synchronized list.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if collection is null\n+     */\n+    public static List decorate(List list) {\n+        return new SynchronizedList(list);\n+    }\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    protected SynchronizedList(List list) {\n+        super(list);\n+    }\n+\n+    public synchronized void add(int index, Object object) {\n+        getList().add(index, object);\n+    }\n+\n+    public synchronized boolean addAll(int index, Collection coll) {\n+        return getList().addAll(index, coll);\n+    }\n+\n+    public synchronized Object get(int index) {\n+        return getList().get(index);\n+    }\n+\n+    public synchronized int indexOf(Object object) {\n+        return getList().indexOf(object);\n+    }\n+\n+    public synchronized int lastIndexOf(Object object) {\n+        return getList().lastIndexOf(object);\n+    }\n+\n+    /**\n+     * Iterators must be manually synchronized.\n+     * <pre>\n+     * synchronized (coll) {\n+     *   ListIterator it = coll.listIterator();\n+     *   // do stuff with iterator\n+     * }\n+     * \n+     * @return an iterator that must be manually synchronized on the collection\n+     */\n+    public ListIterator listIterator() {\n+        return getList().listIterator();\n+    }\n+\n+    /**\n+     * Iterators must be manually synchronized.\n+     * <pre>\n+     * synchronized (coll) {\n+     *   ListIterator it = coll.listIterator(3);\n+     *   // do stuff with iterator\n+     * }\n+     * \n+     * @return an iterator that must be manually synchronized on the collection\n+     */\n+    public ListIterator listIterator(int index) {\n+        return getList().listIterator(index);\n+    }\n+\n+    public synchronized Object remove(int index) {\n+        return getList().remove(index);\n+    }\n+\n+    public synchronized Object set(int index, Object object) {\n+        return getList().set(index, object);\n+    }\n+\n+    public synchronized List subList(int fromIndex, int toIndex) {\n+        return getList().subList(fromIndex, toIndex);\n+    }\n+\n+    protected List getList() {\n+        return (List) collection;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/TypedCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedCollection.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * <code>TypedCollection</code> decorates another <code>Collection</code>\n+ * to validate that elements added are of a specific type.\n+ * <p>\n+ * The validation of additions is performed via an instanceof test against \n+ * a specified <code>Class</code>. If an object cannot be addded to the\n+ * collection, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Matthew Hawthorne\n+ */\n+public class TypedCollection extends PredicatedCollection {\n+\n+    /**\n+     * Factory method to create a typed collection.\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are validated.\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @param type  the type to allow into the collection, must not be null\n+     * @throws IllegalArgumentException if collection or type is null\n+     * @throws IllegalArgumentException if the collection contains invalid elements\n+     */\n+    public static Collection decorate(Collection coll, Class type) {\n+        return new TypedCollection(coll, type);\n+    }\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are validated.\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @param type  the type to allow into the collection, must not be null\n+     * @throws IllegalArgumentException if collection or type is null\n+     * @throws IllegalArgumentException if the collection contains invalid elements\n+     */\n+    protected TypedCollection(Collection coll, Class type) {\n+        super(coll, getPredicate(type));\n+    }\n+\n+    /**\n+     * Gets a predicate to validate the additions to the collection.\n+     * \n+     * @param type  the type, must not be null\n+     * @throws IllegalArgumentException if type is null\n+     */\n+    static Predicate getPredicate(Class type) {\n+        return new InstanceofPredicate(type);\n+    }\n+\n+    /**\n+     * <code>Predicate</code> implementation that checks the type of an object.\n+     * This class may eventually be replaced by \n+     * <code>org.apache.commons.lang.functor.PredicateUtils.instanceofPredicate()</code>.\n+     */\n+    static class InstanceofPredicate implements Predicate {\n+        /** The type to check for */\n+        private final Class type;\n+\n+        /**\n+         * Constructor\n+         */\n+        public InstanceofPredicate(Class type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Type must not be null\");\n+            }\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Return true if the object is an instanceof the type of the predicate.\n+         * @param object an <code>Object</code>\n+         * @return <code>true</code> if the object is an instanceof the type of the predicate\n+         */\n+        public boolean evaluate(Object object) {\n+            return type.isInstance(object);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/TypedList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedList.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.List;\n+\n+/**\n+ * <code>TypedList</code> decorates another <code>List</code>\n+ * to validate that elements added are of a specific type.\n+ * <p>\n+ * The validation of additions is performed via an instanceof test against \n+ * a specified <code>Class</code>. If an object cannot be addded to the\n+ * collection, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Matthew Hawthorne\n+ */\n+public class TypedList extends PredicatedList {\n+\n+    /**\n+     * Factory method to create a typed collection.\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are validated.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param type  the type to allow into the collection, must not be null\n+     * @throws IllegalArgumentException if list or type is null\n+     * @throws IllegalArgumentException if the list contains invalid elements\n+     */\n+    public static List decorate(List list, Class type) {\n+        return new TypedList(list, type);\n+    }\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are validated.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param type  the type to allow into the collection, must not be null\n+     * @throws IllegalArgumentException if list or type is null\n+     * @throws IllegalArgumentException if the list contains invalid elements\n+     */\n+    protected TypedList(List list, Class type) {\n+        super(list, TypedCollection.getPredicate(type));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/UnmodifiableCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiableCollection.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections.IteratorUtils;\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * <code>PredicatedCollection</code> decorates another <code>Collection</code>\n+ * to validate addition match a specified predicate.\n+ * <p>\n+ * If an object cannot be addded to the collection, an IllegalArgumentException\n+ * is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class UnmodifiableCollection extends AbstractCollectionDecorator {\n+\n+    /**\n+     * Factory method to create an unmodifiable collection.\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @throws IllegalArgumentException if collection is null\n+     */\n+    public static Collection decorate(Collection coll) {\n+        return new UnmodifiableCollection(coll);\n+    }\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @throws IllegalArgumentException if collection is null\n+     */\n+    protected UnmodifiableCollection(Collection coll) {\n+        super(coll);\n+    }\n+\n+    /**\n+     * Override as method unsupported.\n+     * @throws UnsupportedOperationException\n+     */\n+    public boolean add(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Override as method unsupported.\n+     * @throws UnsupportedOperationException\n+     */\n+    public boolean addAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Override as method unsupported.\n+     * @throws UnsupportedOperationException\n+     */\n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Override to return an unmodifiable iterator.\n+     * \n+     * @return unmodifiable iterator\n+     */\n+    public Iterator iterator() {\n+        return IteratorUtils.unmodifiableIterator(collection.iterator());\n+    }\n+\n+    /**\n+     * Override as method unsupported.\n+     * @throws UnsupportedOperationException\n+     */\n+    public boolean remove(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Override as method unsupported.\n+     * @throws UnsupportedOperationException\n+     */\n+    public boolean removeAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Override as method unsupported.\n+     * @throws UnsupportedOperationException\n+     */\n+    public boolean retainAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/UnmodifiableList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiableList.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.IteratorUtils;\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * <code>UnmodifiableList</code> decorates another <code>List</code> to\n+ * ensure it can't be altered.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class UnmodifiableList extends UnmodifiableCollection implements List {\n+\n+    /**\n+     * Factory method to create an unmodifiable list.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    public static List decorate(List list) {\n+        return new UnmodifiableList(list);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    protected UnmodifiableList(List list) {\n+        super(list);\n+    }\n+\n+    public void add(int index, Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean addAll(int index, Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Object get(int index) {\n+        return getList().get(index);\n+    }\n+\n+    public int indexOf(Object object) {\n+        return getList().indexOf(object);\n+    }\n+\n+    public int lastIndexOf(Object object) {\n+        return getList().lastIndexOf(object);\n+    }\n+\n+    public ListIterator listIterator() {\n+        return IteratorUtils.unmodifiableListIterator(getList().listIterator());\n+    }\n+\n+    public ListIterator listIterator(int index) {\n+        return IteratorUtils.unmodifiableListIterator(getList().listIterator(index));\n+    }\n+\n+    public Object remove(int index) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Object set(int index, Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        List sub = getList().subList(fromIndex, toIndex);\n+        return new UnmodifiableList(sub);\n+    }\n+\n+    protected List getList() {\n+        return (List) collection;\n+    }\n+\n+}", "timestamp": 1051641827, "metainfo": ""}