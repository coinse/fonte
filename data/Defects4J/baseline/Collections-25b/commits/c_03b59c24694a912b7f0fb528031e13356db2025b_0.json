{"sha": "03b59c24694a912b7f0fb528031e13356db2025b", "log": "Added tests for collect, decorator factories.   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Id: TestCollectionUtils.java,v 1.20 2003/09/21 20:56:51 psteitz Exp $\n- * $Revision: 1.20 $\n- * $Date: 2003/09/21 20:56:51 $\n+ * $Id: TestCollectionUtils.java,v 1.21 2003/09/22 08:22:53 psteitz Exp $\n+ * $Revision: 1.21 $\n+ * $Date: 2003/09/22 08:22:53 $\n  *\n  * ====================================================================\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.decorators.PredicatedCollection;\n+import org.apache.commons.collections.decorators.SynchronizedCollection;\n import org.apache.commons.collections.decorators.TransformedCollection;\n+import org.apache.commons.collections.decorators.UnmodifiableCollection;\n+ \n \n /**\n  * Tests for CollectionUtils.\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n  * \n- * @version $Revision: 1.20 $ $Date: 2003/09/21 20:56:51 $\n+ * @version $Revision: 1.21 $ $Date: 2003/09/22 08:22:53 $\n  */\n public class TestCollectionUtils extends TestCase {\n     public TestCollectionUtils(String testName) {\n         assertTrue(output.contains(\"One\"));\n         assertTrue(output.contains(\"Three\"));\n         assertTrue(output.contains(\"Four\"));\n+    }\n+    \n+    public void testCollect() {\n+        Transformer transformer = TransformerUtils.constantTransformer(\"z\");\n+        Collection collection = CollectionUtils.collect(_a, transformer);\n+        assertTrue(collection.size() == _a.size());\n+        assertTrue(_a.contains(\"a\") && ! _a.contains(\"z\"));\n+        assertTrue(collection.contains(\"z\") && !collection.contains(\"a\"));\n+        \n+        collection = new ArrayList();\n+        CollectionUtils.collect(_a, transformer, collection);\n+        assertTrue(collection.size() == _a.size());\n+        assertTrue(_a.contains(\"a\") && ! _a.contains(\"z\"));\n+        assertTrue(collection.contains(\"z\") && !collection.contains(\"a\"));\n+        \n+        Iterator iterator = null;\n+        collection = new ArrayList();\n+        CollectionUtils.collect(iterator, transformer, collection);\n+        \n+        iterator = _a.iterator();\n+        CollectionUtils.collect(iterator, transformer, collection);\n+        assertTrue(collection.size() == _a.size());\n+        assertTrue(_a.contains(\"a\") && ! _a.contains(\"z\"));\n+        assertTrue(collection.contains(\"z\") && !collection.contains(\"a\")); \n+        \n+        iterator = _a.iterator();\n+        collection = CollectionUtils.collect(iterator, transformer);\n+        assertTrue(collection.size() == _a.size());\n+        assertTrue(collection.contains(\"z\") && !collection.contains(\"a\")); \n+        collection = CollectionUtils.collect((Iterator) null, (Transformer) null);\n+        assertTrue(collection.size() == 0);\n+           \n+        int size = _a.size();\n+        CollectionUtils.collect((Collection) null, transformer, _a);\n+        assertTrue(_a.size() == size && _a.contains(\"a\"));\n+        CollectionUtils.collect(_b, null, _a);\n+        assertTrue(_a.size() == size && _a.contains(\"a\"));\n+        \n     }\n \n     Transformer TRANSFORM_TO_INTEGER = new Transformer() {\n             // expected\n         }             \n     }\n+     \n+    public void testSynchronizedCollection() {\n+        Collection col = CollectionUtils.synchronizedCollection(new ArrayList());\n+        assertTrue(\"Returned object should be a SynchronizedCollection.\",\n+            col instanceof SynchronizedCollection);\n+        try {\n+            col = CollectionUtils.synchronizedCollection(null);\n+            fail(\"Expecting IllegalArgumentException for null collection.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+    }\n+    \n+    public void testUnmodifiableCollection() {\n+        Collection col = CollectionUtils.unmodifiableCollection(new ArrayList());\n+        assertTrue(\"Returned object should be a UnmodifiableCollection.\",\n+            col instanceof UnmodifiableCollection);\n+        try {\n+            col = CollectionUtils.unmodifiableCollection(null);\n+            fail(\"Expecting IllegalArgumentException for null collection.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+    }\n+\n }", "timestamp": 1064218973, "metainfo": ""}