{"sha": "56d551feff30b2610d8c37f78a35b6ee53e927ba", "log": "SingletonIterator - make remove() functionality optional   ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/SingletonIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/SingletonIterator.java\n  * object instance.\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.12 $ $Date: 2004/02/18 00:59:50 $\n+ * @version $Revision: 1.13 $ $Date: 2004/04/09 14:38:47 $\n  * \n  * @author James Strachan\n  * @author Stephen Colebourne\n public class SingletonIterator\n \t\timplements Iterator, ResettableIterator {\n \n+    /** Whether remove is allowed */\n+    private final boolean removeAllowed;\n+    /** Is the cursor before the first element */\n     private boolean beforeFirst = true;\n+    /** Has the element been removed */\n     private boolean removed = false;\n+    /** The object */\n     private Object object;\n \n     /**\n-     * Constructs a new <code>SingletonIterator</code>.\n+     * Constructs a new <code>SingletonIterator</code> where <code>remove</code>\n+     * is a permitted operation.\n      *\n      * @param object  the single object to return from the iterator\n      */\n     public SingletonIterator(Object object) {\n+        this(object, true);\n+    }\n+\n+    /**\n+     * Constructs a new <code>SingletonIterator</code> optionally choosing if\n+     * <code>remove</code> is a permitted operation.\n+     *\n+     * @param object  the single object to return from the iterator\n+     * @param removeAllowed  true if remove is allowed\n+     */\n+    public SingletonIterator(Object object, boolean removeAllowed) {\n         super();\n         this.object = object;\n+        this.removeAllowed = removeAllowed;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Is another object available from the iterator?\n      * <p>\n \n     /**\n      * Remove the object from this iterator.\n+     * \n      * @throws IllegalStateException if the <tt>next</tt> method has not\n      *        yet been called, or the <tt>remove</tt> method has already\n      *        been called after the last call to the <tt>next</tt>\n      *        method.\n+     * @throws UnsupportedOperationException if remove is not supported\n      */\n-    public void remove() {       \n-        if(removed || beforeFirst) {\n-            throw new IllegalStateException();\n+    public void remove() {\n+        if (removeAllowed) {\n+            if (removed || beforeFirst) {\n+                throw new IllegalStateException();\n+            } else {\n+                object = null;\n+                removed = true;\n+            }\n         } else {\n-            object = null;\n-            removed = true;\n+            throw new UnsupportedOperationException();\n         }\n     }\n     \n--- a/src/test/org/apache/commons/collections/iterators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestAll.java\n /**\n  * Entry point for all iterator tests.\n  * \n- * @version $Revision: 1.14 $ $Date: 2004/03/20 00:21:08 $\n+ * @version $Revision: 1.15 $ $Date: 2004/04/09 14:38:47 $\n  * \n  * @author Rodney Waldhoff\n  */\n         suite.addTest(TestListIteratorWrapper.suite());\n         suite.addTest(TestLoopingIterator.suite());\n         suite.addTest(TestSingletonIterator.suite());\n+        suite.addTest(TestSingletonIterator2.suite());\n         suite.addTest(TestSingletonListIterator.suite());\n         suite.addTest(TestObjectGraphIterator.suite());\n         suite.addTest(TestUniqueFilterIterator.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestSingletonIterator2.java\n+/*\n+ *  Copyright 2001-2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.ResettableIterator;\n+\n+/**\n+ * Tests the SingletonIterator to ensure that the next() method will actually\n+ * perform the iteration rather than the hasNext() method.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2004/04/09 14:38:47 $\n+ * \n+ * @author James Strachan\n+ */\n+public class TestSingletonIterator2 extends AbstractTestIterator {\n+\n+    private static final Object testValue = \"foo\";\n+\n+    public static Test suite() {\n+        return new TestSuite(TestSingletonIterator2.class);\n+    }\n+\n+    public TestSingletonIterator2(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Iterator makeEmptyIterator() {\n+        SingletonIterator iter = new SingletonIterator(testValue);\n+        iter.next();\n+        iter.remove();\n+        iter.reset();\n+        return iter;\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        return new SingletonIterator(testValue, false);\n+    }\n+\n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+    public boolean supportsEmptyIterator() {\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIterator() {\n+        Iterator iter = (Iterator) makeObject();\n+        assertTrue(\"Iterator has a first item\", iter.hasNext());\n+\n+        Object iterValue = iter.next();\n+        assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasNext());\n+\n+        try {\n+            iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\n+                \"NoSuchElementException must be thrown\",\n+                e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+    }\n+\n+    public void testReset() {\n+        ResettableIterator it = (ResettableIterator) makeObject();\n+\n+        assertEquals(true, it.hasNext());\n+        assertEquals(testValue, it.next());\n+        assertEquals(false, it.hasNext());\n+\n+        it.reset();\n+\n+        assertEquals(true, it.hasNext());\n+        assertEquals(testValue, it.next());\n+        assertEquals(false, it.hasNext());\n+\n+        it.reset();\n+        it.reset();\n+\n+        assertEquals(true, it.hasNext());\n+    }\n+\n+}", "timestamp": 1081521527, "metainfo": ""}