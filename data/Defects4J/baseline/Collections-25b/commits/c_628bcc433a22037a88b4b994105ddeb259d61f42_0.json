{"sha": "628bcc433a22037a88b4b994105ddeb259d61f42", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r468687 | scolebourne | 2006-10-28 05:53:28 -0700 (Sat, 28 Oct 2006) | 1 line          COLLECTIONS-229 - Remove deprecated classes and code     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/list/TestCursorableLinkedList.java\n+++ b/src/test/org/apache/commons/collections/list/TestCursorableLinkedList.java\n  * @author Rodney Waldhoff\n  * @author Simon Kitching\n  */\n-public class TestCursorableLinkedList extends TestAbstractLinkedList {\n+public class TestCursorableLinkedList<E> extends TestAbstractLinkedList<E> {\n     public TestCursorableLinkedList(String testName) {\n         super(testName);\n     }\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    private CursorableLinkedList list = null;\n+    private CursorableLinkedList<E> list;\n \n     public void setUp() {\n-        list = new CursorableLinkedList();\n-    }\n-\n-    public List makeEmptyList() {\n-        return new CursorableLinkedList();\n-    }\n-\n+        list = new CursorableLinkedList<E>();\n+    }\n+\n+    public CursorableLinkedList<E> makeObject() {\n+        return new CursorableLinkedList<E>();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testAdd() {\n         assertEquals(\"[]\",list.toString());\n-        assertTrue(list.add(new Integer(1)));\n+        assertTrue(list.add((E) new Integer(1)));\n         assertEquals(\"[1]\",list.toString());\n-        assertTrue(list.add(new Integer(2)));\n+        assertTrue(list.add((E) new Integer(2)));\n         assertEquals(\"[1, 2]\",list.toString());\n-        assertTrue(list.add(new Integer(3)));\n+        assertTrue(list.add((E) new Integer(3)));\n         assertEquals(\"[1, 2, 3]\",list.toString());\n-        assertTrue(list.addFirst(new Integer(0)));\n+        assertTrue(list.addFirst((E) new Integer(0)));\n         assertEquals(\"[0, 1, 2, 3]\",list.toString());\n-        assertTrue(list.addLast(new Integer(4)));\n+        assertTrue(list.addLast((E) new Integer(4)));\n         assertEquals(\"[0, 1, 2, 3, 4]\",list.toString());\n-        list.add(0,new Integer(-2));\n+        list.add(0,(E) new Integer(-2));\n         assertEquals(\"[-2, 0, 1, 2, 3, 4]\",list.toString());\n-        list.add(1,new Integer(-1));\n+        list.add(1,(E) new Integer(-1));\n         assertEquals(\"[-2, -1, 0, 1, 2, 3, 4]\",list.toString());\n-        list.add(7,new Integer(5));\n+        list.add(7,(E) new Integer(5));\n         assertEquals(\"[-2, -1, 0, 1, 2, 3, 4, 5]\",list.toString());\n \n-        java.util.List list2 = new java.util.LinkedList();\n-        list2.add(\"A\");\n-        list2.add(\"B\");\n-        list2.add(\"C\");\n+        java.util.List<E> list2 = new java.util.LinkedList<E>();\n+        list2.add((E) \"A\");\n+        list2.add((E) \"B\");\n+        list2.add((E) \"C\");\n \n         assertTrue(list.addAll(list2));\n         assertEquals(\"[-2, -1, 0, 1, 2, 3, 4, 5, A, B, C]\",list.toString());\n         assertEquals(\"[-2, -1, 0, A, B, C, 1, 2, 3, 4, 5, A, B, C]\",list.toString());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testClear() {\n         assertEquals(0,list.size());\n         assertTrue(list.isEmpty());\n         assertEquals(0,list.size());\n         assertTrue(list.isEmpty());\n \n-        list.add(\"element\");\n+        list.add((E) \"element\");\n         assertEquals(1,list.size());\n         assertTrue(!list.isEmpty());\n \n         assertEquals(0,list.size());\n         assertTrue(list.isEmpty());\n \n-        list.add(\"element1\");\n-        list.add(\"element2\");\n+        list.add((E) \"element1\");\n+        list.add((E) \"element2\");\n         assertEquals(2,list.size());\n         assertTrue(!list.isEmpty());\n \n         assertEquals(0,list.size());\n         assertTrue(list.isEmpty());\n \n-        for(int i=0;i<1000;i++) {\n-            list.add(new Integer(i));\n+        for (int i = 0; i < 1000; i++) {\n+            list.add((E) new Integer(i));\n         }\n-        assertEquals(1000,list.size());\n+        assertEquals(1000, list.size());\n         assertTrue(!list.isEmpty());\n \n         list.clear();\n         assertTrue(list.isEmpty());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testContains() {\n         assertTrue(!list.contains(\"A\"));\n-        assertTrue(list.add(\"A\"));\n+        assertTrue(list.add((E) \"A\"));\n         assertTrue(list.contains(\"A\"));\n-        assertTrue(list.add(\"B\"));\n+        assertTrue(list.add((E) \"B\"));\n         assertTrue(list.contains(\"A\"));\n-        assertTrue(list.addFirst(\"a\"));\n+        assertTrue(list.addFirst((E) \"a\"));\n         assertTrue(list.contains(\"A\"));\n         assertTrue(list.remove(\"a\"));\n         assertTrue(list.contains(\"A\"));\n         assertTrue(!list.contains(\"A\"));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testContainsAll() {\n         assertTrue(list.containsAll(list));\n-        java.util.List list2 = new java.util.LinkedList();\n+        java.util.List<E> list2 = new java.util.LinkedList<E>();\n         assertTrue(list.containsAll(list2));\n-        list2.add(\"A\");\n+        list2.add((E) \"A\");\n         assertTrue(!list.containsAll(list2));\n-        list.add(\"B\");\n-        list.add(\"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"A\");\n         assertTrue(list.containsAll(list2));\n-        list2.add(\"B\");\n+        list2.add((E) \"B\");\n         assertTrue(list.containsAll(list2));\n-        list2.add(\"C\");\n+        list2.add((E) \"C\");\n         assertTrue(!list.containsAll(list2));\n-        list.add(\"C\");\n+        list.add((E) \"C\");\n         assertTrue(list.containsAll(list2));\n-        list2.add(\"C\");\n+        list2.add((E) \"C\");\n         assertTrue(list.containsAll(list2));\n         assertTrue(list.containsAll(list));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testCursorNavigation() {\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"4\");\n-        list.add(\"5\");\n-        CursorableLinkedList.Cursor it = list.cursor();\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+        CursorableLinkedList.Cursor<E> it = list.cursor();\n         assertTrue(it.hasNext());\n         assertTrue(!it.hasPrevious());\n-        assertEquals(\"1\",it.next());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(\"1\",it.previous());\n+        assertEquals(\"1\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"1\", it.previous());\n         assertTrue(it.hasNext());\n         assertTrue(!it.hasPrevious());\n-        assertEquals(\"1\",it.next());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(\"2\",it.next());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(\"2\",it.previous());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(\"2\",it.next());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(\"3\",it.next());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(\"4\",it.next());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(\"5\",it.next());\n+        assertEquals(\"1\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"2\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"2\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"2\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"3\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"4\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"5\", it.next());\n         assertTrue(!it.hasNext());\n         assertTrue(it.hasPrevious());\n-        assertEquals(\"5\",it.previous());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(\"4\",it.previous());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(\"3\",it.previous());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(\"2\",it.previous());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(\"1\",it.previous());\n+        assertEquals(\"5\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"4\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"3\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"2\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"1\", it.previous());\n         assertTrue(it.hasNext());\n         assertTrue(!it.hasPrevious());\n         it.close();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testCursorSet() {\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"4\");\n-        list.add(\"5\");\n-\n-        CursorableLinkedList.Cursor it = list.cursor();\n-        assertEquals(\"1\",it.next());\n-        it.set(\"a\");\n-        assertEquals(\"a\",it.previous());\n-        it.set(\"A\");\n-        assertEquals(\"A\",it.next());\n-        assertEquals(\"2\",it.next());\n-        it.set(\"B\");\n-        assertEquals(\"3\",it.next());\n-        assertEquals(\"4\",it.next());\n-        it.set(\"D\");\n-        assertEquals(\"5\",it.next());\n-        it.set(\"E\");\n-        assertEquals(\"[A, B, 3, D, E]\",list.toString());\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+\n+        CursorableLinkedList.Cursor<E> it = list.cursor();\n+        assertEquals(\"1\", it.next());\n+        it.set((E) \"a\");\n+        assertEquals(\"a\", it.previous());\n+        it.set((E) \"A\");\n+        assertEquals(\"A\", it.next());\n+        assertEquals(\"2\", it.next());\n+        it.set((E) \"B\");\n+        assertEquals(\"3\", it.next());\n+        assertEquals(\"4\", it.next());\n+        it.set((E) \"D\");\n+        assertEquals(\"5\", it.next());\n+        it.set((E) \"E\");\n+        assertEquals(\"[A, B, 3, D, E]\", list.toString());\n         it.close();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testCursorRemove() {\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"4\");\n-        list.add(\"5\");\n-\n-        CursorableLinkedList.Cursor it = list.cursor();\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+\n+        CursorableLinkedList.Cursor<E> it = list.cursor();\n         try {\n             it.remove();\n             fail();\n-        } catch(IllegalStateException e) {\n+        } catch (IllegalStateException e) {\n             // expected\n         }\n-        assertEquals(\"1\",it.next());\n-        assertEquals(\"2\",it.next());\n-        assertEquals(\"[1, 2, 3, 4, 5]\",list.toString());\n+        assertEquals(\"1\", it.next());\n+        assertEquals(\"2\", it.next());\n+        assertEquals(\"[1, 2, 3, 4, 5]\", list.toString());\n         it.remove();\n-        assertEquals(\"[1, 3, 4, 5]\",list.toString());\n-        assertEquals(\"3\",it.next());\n-        assertEquals(\"3\",it.previous());\n-        assertEquals(\"1\",it.previous());\n+        assertEquals(\"[1, 3, 4, 5]\", list.toString());\n+        assertEquals(\"3\", it.next());\n+        assertEquals(\"3\", it.previous());\n+        assertEquals(\"1\", it.previous());\n         it.remove();\n-        assertEquals(\"[3, 4, 5]\",list.toString());\n+        assertEquals(\"[3, 4, 5]\", list.toString());\n         assertTrue(!it.hasPrevious());\n-        assertEquals(\"3\",it.next());\n+        assertEquals(\"3\", it.next());\n         it.remove();\n-        assertEquals(\"[4, 5]\",list.toString());\n+        assertEquals(\"[4, 5]\", list.toString());\n         try {\n             it.remove();\n-        } catch(IllegalStateException e) {\n+        } catch (IllegalStateException e) {\n             // expected\n         }\n-        assertEquals(\"4\",it.next());\n-        assertEquals(\"5\",it.next());\n+        assertEquals(\"4\", it.next());\n+        assertEquals(\"5\", it.next());\n         it.remove();\n-        assertEquals(\"[4]\",list.toString());\n-        assertEquals(\"4\",it.previous());\n+        assertEquals(\"[4]\", list.toString());\n+        assertEquals(\"4\", it.previous());\n         it.remove();\n-        assertEquals(\"[]\",list.toString());\n+        assertEquals(\"[]\", list.toString());\n         it.close();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testCursorAdd() {\n-        CursorableLinkedList.Cursor it = list.cursor();\n-        it.add(\"1\");\n-        assertEquals(\"[1]\",list.toString());\n-        it.add(\"3\");\n-        assertEquals(\"[1, 3]\",list.toString());\n-        it.add(\"5\");\n-        assertEquals(\"[1, 3, 5]\",list.toString());\n-        assertEquals(\"5\",it.previous());\n-        it.add(\"4\");\n-        assertEquals(\"[1, 3, 4, 5]\",list.toString());\n-        assertEquals(\"4\",it.previous());\n-        assertEquals(\"3\",it.previous());\n-        it.add(\"2\");\n-        assertEquals(\"[1, 2, 3, 4, 5]\",list.toString());\n+        CursorableLinkedList.Cursor<E> it = list.cursor();\n+        it.add((E) \"1\");\n+        assertEquals(\"[1]\", list.toString());\n+        it.add((E) \"3\");\n+        assertEquals(\"[1, 3]\", list.toString());\n+        it.add((E) \"5\");\n+        assertEquals(\"[1, 3, 5]\", list.toString());\n+        assertEquals(\"5\", it.previous());\n+        it.add((E) \"4\");\n+        assertEquals(\"[1, 3, 4, 5]\", list.toString());\n+        assertEquals(\"4\", it.previous());\n+        assertEquals(\"3\", it.previous());\n+        it.add((E) \"2\");\n+        assertEquals(\"[1, 2, 3, 4, 5]\", list.toString());\n         it.close();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testCursorConcurrentModification() {\n         // this test verifies that cursors remain valid when the list\n         // is modified via other means.\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"5\");\n-        list.add(\"7\");\n-        list.add(\"9\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n-        CursorableLinkedList.Cursor c2 = list.cursor();\n-        Iterator li = list.iterator();\n-        \n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"5\");\n+        list.add((E) \"7\");\n+        list.add((E) \"9\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        CursorableLinkedList.Cursor<E> c2 = list.cursor();\n+        Iterator<E> li = list.iterator();\n+\n         // test cursors remain valid when list modified by std Iterator\n         // test cursors skip elements removed via ListIterator\n-        assertEquals(\"1\",li.next());\n-        assertEquals(\"2\",li.next());\n+        assertEquals(\"1\", li.next());\n+        assertEquals(\"2\", li.next());\n         li.remove();\n-        assertEquals(\"3\",li.next());\n-        assertEquals(\"1\",c1.next());\n-        assertEquals(\"3\",c1.next());\n-        assertEquals(\"1\",c2.next());\n-        \n+        assertEquals(\"3\", li.next());\n+        assertEquals(\"1\", c1.next());\n+        assertEquals(\"3\", c1.next());\n+        assertEquals(\"1\", c2.next());\n+\n         // test cursor c1 can remove elements from previously modified list\n         // test cursor c2 skips elements removed via different cursor\n         c1.remove();\n-        assertEquals(\"5\",c2.next());\n-        c2.add(\"6\");\n-        assertEquals(\"5\",c1.next());\n-        assertEquals(\"6\",c1.next());\n-        assertEquals(\"7\",c1.next());\n-        \n+        assertEquals(\"5\", c2.next());\n+        c2.add((E) \"6\");\n+        assertEquals(\"5\", c1.next());\n+        assertEquals(\"6\", c1.next());\n+        assertEquals(\"7\", c1.next());\n+\n         // test cursors remain valid when list mod via CursorableLinkedList\n         // test cursor remains valid when elements inserted into list before\n         // the current position of the cursor.\n-        list.add(0, \"0\");\n+        list.add(0, (E) \"0\");\n \n         // test cursor remains valid when element inserted immediately after\n         // current element of a cursor, and the element is seen on the\n         // next call to the next method of that cursor.\n-        list.add(5, \"8\");\n-\n-        assertEquals(\"8\",c1.next());\n-        assertEquals(\"9\",c1.next());\n-        c1.add(\"10\");\n-        assertEquals(\"7\",c2.next());\n-        assertEquals(\"8\",c2.next());\n-        assertEquals(\"9\",c2.next());\n-        assertEquals(\"10\",c2.next());\n-        \n+        list.add(5, (E) \"8\");\n+\n+        assertEquals(\"8\", c1.next());\n+        assertEquals(\"9\", c1.next());\n+        c1.add((E) \"10\");\n+        assertEquals(\"7\", c2.next());\n+        assertEquals(\"8\", c2.next());\n+        assertEquals(\"9\", c2.next());\n+        assertEquals(\"10\", c2.next());\n+\n         try {\n             c2.next();\n             fail();\n-        } catch (NoSuchElementException nse) {}\n-        \n+        } catch (NoSuchElementException nse) {\n+        }\n+\n         try {\n             li.next();\n             fail();\n-        } catch (ConcurrentModificationException cme) {}\n-        \n-        c1.close();  // not necessary\n-        c2.close();  // not necessary\n-    }\n-    \n+        } catch (ConcurrentModificationException cme) {\n+        }\n+\n+        c1.close(); // not necessary\n+        c2.close(); // not necessary\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testCursorNextIndexMid() {\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"5\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n-        Iterator li = list.iterator();\n-        \n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"5\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        Iterator<E> li = list.iterator();\n+\n         // test cursors remain valid when list modified by std Iterator\n         // test cursors skip elements removed via ListIterator\n         assertEquals(\"1\", li.next());\n         assertEquals(1, c1.nextIndex());\n         assertEquals(\"3\", c1.next());\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testCursorNextIndexFirst() {\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"5\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n-        \n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"5\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+\n         assertEquals(0, c1.nextIndex());\n         list.remove(0);\n         assertEquals(0, c1.nextIndex());\n         assertEquals(1, c1.nextIndex());\n         assertEquals(\"3\", c1.next());\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testCursorNextIndexAddBefore() {\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"5\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n-        \n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"5\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+\n         assertEquals(0, c1.nextIndex());\n         assertEquals(\"1\", c1.next());\n-        list.add(0, \"0\");\n+        list.add(0, (E) \"0\");\n         assertEquals(2, c1.nextIndex());\n         assertEquals(\"2\", c1.next());\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testCursorNextIndexAddNext() {\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"5\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n-        \n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"5\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+\n         assertEquals(0, c1.nextIndex());\n-        list.add(0, \"0\");\n+        list.add(0, (E) \"0\");\n         assertEquals(0, c1.nextIndex());\n         assertEquals(\"0\", c1.next());\n         assertEquals(1, c1.nextIndex());\n         assertEquals(\"1\", c1.next());\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testCursorNextIndexAddAfter() {\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"5\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n-        \n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"5\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+\n         assertEquals(0, c1.nextIndex());\n-        list.add(1, \"0\");\n+        list.add(1, (E) \"0\");\n         assertEquals(0, c1.nextIndex());\n         assertEquals(\"1\", c1.next());\n         assertEquals(1, c1.nextIndex());\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n     public void testInternalState_CursorNextNextPreviousRemoveIndex1ByList() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n         assertEquals(\"A\", c1.next());\n         assertEquals(\"B\", c1.next());\n         assertEquals(\"B\", c1.previous());\n-        \n+\n         assertEquals(\"B\", list.remove(1));\n-        \n+\n         assertEquals(true, c1.nextIndexValid);\n         assertEquals(1, c1.nextIndex);\n         assertEquals(true, c1.currentRemovedByAnother);\n         assertEquals(null, c1.current);\n         assertEquals(\"C\", c1.next.value);\n-        \n+\n         assertEquals(\"[A, C]\", list.toString());\n         c1.remove();  // works ok\n         assertEquals(\"[A, C]\", list.toString());\n         } catch (IllegalStateException ex) {}\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testInternalState_CursorNextRemoveIndex1ByList() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n         assertEquals(\"A\", c1.next());\n-        \n+\n         assertEquals(\"B\", list.remove(1));\n-        \n+\n         assertEquals(true, c1.nextIndexValid);\n         assertEquals(1, c1.nextIndex);\n         assertEquals(false, c1.currentRemovedByAnother);\n         assertEquals(\"A\", c1.current.value);\n         assertEquals(\"C\", c1.next.value);\n-        \n+\n         assertEquals(\"[A, C]\", list.toString());\n         c1.remove();  // works ok\n         assertEquals(\"[C]\", list.toString());\n         } catch (IllegalStateException ex) {}\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testInternalState_CursorNextNextRemoveIndex1ByList() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n         assertEquals(\"A\", c1.next());\n         assertEquals(\"B\", c1.next());\n-        \n+\n         assertEquals(\"B\", list.remove(1));\n-        \n+\n         assertEquals(true, c1.nextIndexValid);\n         assertEquals(1, c1.nextIndex);\n         assertEquals(true, c1.currentRemovedByAnother);\n         assertEquals(null, c1.current);\n         assertEquals(\"C\", c1.next.value);\n-        \n+\n         assertEquals(\"[A, C]\", list.toString());\n         c1.remove();  // works ok\n         assertEquals(\"[A, C]\", list.toString());\n         } catch (IllegalStateException ex) {}\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testInternalState_CursorNextNextNextRemoveIndex1ByList() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-        list.add(\"D\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+        list.add((E) \"D\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n         assertEquals(\"A\", c1.next());\n         assertEquals(\"B\", c1.next());\n         assertEquals(\"C\", c1.next());\n-        \n+\n         assertEquals(\"B\", list.remove(1));\n-        \n+\n         assertEquals(false, c1.nextIndexValid);\n         assertEquals(false, c1.currentRemovedByAnother);\n         assertEquals(\"C\", c1.current.value);\n         assertEquals(\"D\", c1.next.value);\n-        \n+\n         assertEquals(\"[A, C, D]\", list.toString());\n         c1.remove();  // works ok\n         assertEquals(\"[A, D]\", list.toString());\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n     public void testInternalState_CursorNextNextPreviousRemoveByIterator() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n         assertEquals(\"A\", c1.next());\n         assertEquals(\"B\", c1.next());\n         assertEquals(\"B\", c1.previous());\n-        \n+\n         c1.remove();\n-        \n+\n         assertEquals(true, c1.nextIndexValid);\n         assertEquals(1, c1.nextIndex);\n         assertEquals(false, c1.currentRemovedByAnother);\n         assertEquals(null, c1.current);\n         assertEquals(\"C\", c1.next.value);\n-        \n+\n         assertEquals(\"[A, C]\", list.toString());\n         try {\n             c1.remove();\n         } catch (IllegalStateException ex) {}\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testInternalState_CursorNextNextRemoveByIterator() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n         assertEquals(\"A\", c1.next());\n         assertEquals(\"B\", c1.next());\n-        \n+\n         c1.remove();\n-        \n+\n         assertEquals(true, c1.nextIndexValid);\n         assertEquals(1, c1.nextIndex);\n         assertEquals(false, c1.currentRemovedByAnother);\n         assertEquals(null, c1.current);\n         assertEquals(\"C\", c1.next.value);\n-        \n+\n         assertEquals(\"[A, C]\", list.toString());\n         try {\n             c1.remove();\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n     public void testInternalState_CursorNextNextPreviousAddIndex1ByList() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n         assertEquals(\"A\", c1.next());\n         assertEquals(\"B\", c1.next());\n         assertEquals(\"B\", c1.previous());\n-        \n-        list.add(1, \"Z\");\n-        \n+\n+        list.add(1, (E) \"Z\");\n+\n         assertEquals(true, c1.nextIndexValid);\n         assertEquals(1, c1.nextIndex);\n         assertEquals(\"B\", c1.current.value);\n         assertEquals(\"Z\", c1.next.value);\n-        \n+\n         assertEquals(\"[A, Z, B, C]\", list.toString());\n         c1.remove();  // works ok\n         assertEquals(\"[A, Z, C]\", list.toString());\n         } catch (IllegalStateException ex) {}\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testInternalState_CursorNextAddIndex1ByList() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n         assertEquals(\"A\", c1.next());\n-        \n-        list.add(1, \"Z\");\n-        \n+\n+        list.add(1, (E) \"Z\");\n+\n         assertEquals(true, c1.nextIndexValid);\n         assertEquals(1, c1.nextIndex);\n         assertEquals(\"A\", c1.current.value);\n         assertEquals(\"Z\", c1.next.value);\n-        \n+\n         assertEquals(\"[A, Z, B, C]\", list.toString());\n         c1.remove();  // works ok\n         assertEquals(\"[Z, B, C]\", list.toString());\n         } catch (IllegalStateException ex) {}\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testInternalState_CursorNextNextAddIndex1ByList() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n         assertEquals(\"A\", c1.next());\n         assertEquals(\"B\", c1.next());\n-        \n-        list.add(1, \"Z\");\n-        \n+\n+        list.add(1, (E) \"Z\");\n+\n         assertEquals(false, c1.nextIndexValid);\n         assertEquals(\"B\", c1.current.value);\n         assertEquals(\"C\", c1.next.value);\n-        \n+\n         assertEquals(\"[A, Z, B, C]\", list.toString());\n         c1.remove();  // works ok\n         assertEquals(\"[A, Z, C]\", list.toString());\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n     public void testInternalState_CursorNextNextPreviousAddByIterator() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n         assertEquals(\"A\", c1.next());\n         assertEquals(\"B\", c1.next());\n         assertEquals(\"B\", c1.previous());\n-        \n-        c1.add(\"Z\");\n-        \n+\n+        c1.add((E) \"Z\");\n+\n         assertEquals(true, c1.nextIndexValid);\n         assertEquals(2, c1.nextIndex);\n         assertEquals(null, c1.current);\n         assertEquals(\"B\", c1.next.value);\n-        \n+\n         assertEquals(\"[A, Z, B, C]\", list.toString());\n         try {\n             c1.remove();\n         } catch (IllegalStateException ex) {}\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testInternalState_CursorNextNextAddByIterator() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n         assertEquals(\"A\", c1.next());\n         assertEquals(\"B\", c1.next());\n-        \n-        c1.add(\"Z\");\n-        \n+\n+        c1.add((E) \"Z\");\n+\n         assertEquals(true, c1.nextIndexValid);\n         assertEquals(3, c1.nextIndex);\n         assertEquals(false, c1.currentRemovedByAnother);\n         assertEquals(null, c1.current);\n         assertEquals(\"C\", c1.next.value);\n-        \n+\n         assertEquals(\"[A, B, Z, C]\", list.toString());\n         try {\n             c1.remove();\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n     public void testInternalState_CursorNextNextRemoveByListSetByIterator() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n         assertEquals(\"A\", c1.next());\n         assertEquals(\"B\", c1.next());\n-        \n+\n         list.remove(1);\n-        \n+\n         assertEquals(true, c1.nextIndexValid);\n         assertEquals(1, c1.nextIndex);\n         assertEquals(null, c1.current);\n         assertEquals(\"C\", c1.next.value);\n         assertEquals(\"[A, C]\", list.toString());\n-        \n-        try {\n-            c1.set(\"Z\");\n+\n+        try {\n+            c1.set((E) \"Z\");\n             fail();\n         } catch (IllegalStateException ex) {}\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n     public void testInternalState_CursorNextNextPreviousSetByIterator() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n         assertEquals(\"A\", c1.next());\n         assertEquals(\"B\", c1.next());\n         assertEquals(\"B\", c1.previous());\n-        \n-        c1.set(\"Z\");\n-        \n+\n+        c1.set((E) \"Z\");\n+\n         assertEquals(true, c1.nextIndexValid);\n         assertEquals(1, c1.nextIndex);\n         assertEquals(\"Z\", c1.current.value);\n         assertEquals(\"Z\", c1.next.value);\n-        \n+\n         assertEquals(\"[A, Z, C]\", list.toString());\n         c1.remove();  // works ok\n         assertEquals(\"[A, C]\", list.toString());\n         } catch (IllegalStateException ex) {}\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testInternalState_CursorNextNextSetByIterator() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-\n-        CursorableLinkedList.Cursor c1 = list.cursor();\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n         assertEquals(\"A\", c1.next());\n         assertEquals(\"B\", c1.next());\n-        \n-        c1.set(\"Z\");\n-        \n+\n+        c1.set((E) \"Z\");\n+\n         assertEquals(true, c1.nextIndexValid);\n         assertEquals(2, c1.nextIndex);\n         assertEquals(\"Z\", c1.current.value);\n         assertEquals(\"C\", c1.next.value);\n-        \n+\n         assertEquals(\"[A, Z, C]\", list.toString());\n         c1.remove();  // works ok\n         assertEquals(\"[A, C]\", list.toString());\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n     public void testEqualsAndHashCode() {\n         assertTrue(list.equals(list));\n         assertEquals(list.hashCode(),list.hashCode());\n-        list.add(\"A\");\n+        list.add((E) \"A\");\n         assertTrue(list.equals(list));\n         assertEquals(list.hashCode(),list.hashCode());\n \n-        CursorableLinkedList list2 = new CursorableLinkedList();\n+        CursorableLinkedList<E> list2 = new CursorableLinkedList<E>();\n         assertTrue(!list.equals(list2));\n         assertTrue(!list2.equals(list));\n \n-        java.util.List list3 = new java.util.LinkedList();\n+        java.util.List<E> list3 = new java.util.LinkedList<E>();\n         assertTrue(!list.equals(list3));\n         assertTrue(!list3.equals(list));\n         assertTrue(list2.equals(list3));\n         assertTrue(list3.equals(list2));\n         assertEquals(list2.hashCode(),list3.hashCode());\n \n-        list2.add(\"A\");\n+        list2.add((E) \"A\");\n         assertTrue(list.equals(list2));\n         assertTrue(list2.equals(list));\n         assertTrue(!list2.equals(list3));\n         assertTrue(!list3.equals(list2));\n \n-        list3.add(\"A\");\n+        list3.add((E) \"A\");\n         assertTrue(list2.equals(list3));\n         assertTrue(list3.equals(list2));\n         assertEquals(list2.hashCode(),list3.hashCode());\n \n-        list.add(\"B\");\n+        list.add((E) \"B\");\n         assertTrue(list.equals(list));\n         assertTrue(!list.equals(list2));\n         assertTrue(!list2.equals(list));\n         assertTrue(!list.equals(list3));\n         assertTrue(!list3.equals(list));\n \n-        list2.add(\"B\");\n-        list3.add(\"B\");\n+        list2.add((E) \"B\");\n+        list3.add((E) \"B\");\n         assertTrue(list.equals(list));\n         assertTrue(list.equals(list2));\n         assertTrue(list2.equals(list));\n         assertTrue(list3.equals(list2));\n         assertEquals(list2.hashCode(),list3.hashCode());\n \n-        list.add(\"C\");\n-        list2.add(\"C\");\n-        list3.add(\"C\");\n+        list.add((E) \"C\");\n+        list2.add((E) \"C\");\n+        list3.add((E) \"C\");\n         assertTrue(list.equals(list));\n         assertTrue(list.equals(list2));\n         assertTrue(list2.equals(list));\n         assertEquals(list.hashCode(),list2.hashCode());\n         assertEquals(list2.hashCode(),list3.hashCode());\n \n-        list.add(\"D\");\n-        list2.addFirst(\"D\");\n+        list.add((E) \"D\");\n+        list2.addFirst((E) \"D\");\n         assertTrue(list.equals(list));\n         assertTrue(!list.equals(list2));\n         assertTrue(!list2.equals(list));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testGet() {\n         try {\n             list.get(0);\n             // expected\n         }\n \n-        assertTrue(list.add(\"A\"));\n+        assertTrue(list.add((E) \"A\"));\n         assertEquals(\"A\",list.get(0));\n-        assertTrue(list.add(\"B\"));\n+        assertTrue(list.add((E) \"B\"));\n         assertEquals(\"A\",list.get(0));\n         assertEquals(\"B\",list.get(1));\n \n         }\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testIndexOf() {\n         assertEquals(-1,list.indexOf(\"A\"));\n         assertEquals(-1,list.lastIndexOf(\"A\"));\n-        list.add(\"A\");\n+        list.add((E) \"A\");\n         assertEquals(0,list.indexOf(\"A\"));\n         assertEquals(0,list.lastIndexOf(\"A\"));\n         assertEquals(-1,list.indexOf(\"B\"));\n         assertEquals(-1,list.lastIndexOf(\"B\"));\n-        list.add(\"B\");\n+        list.add((E) \"B\");\n         assertEquals(0,list.indexOf(\"A\"));\n         assertEquals(0,list.lastIndexOf(\"A\"));\n         assertEquals(1,list.indexOf(\"B\"));\n         assertEquals(1,list.lastIndexOf(\"B\"));\n-        list.addFirst(\"B\");\n+        list.addFirst((E) \"B\");\n         assertEquals(1,list.indexOf(\"A\"));\n         assertEquals(1,list.lastIndexOf(\"A\"));\n         assertEquals(0,list.indexOf(\"B\"));\n         assertEquals(2,list.lastIndexOf(\"B\"));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testIsEmpty() {\n         assertTrue(list.isEmpty());\n-        list.add(\"element\");\n+        list.add((E) \"element\");\n         assertTrue(!list.isEmpty());\n         list.remove(\"element\");\n         assertTrue(list.isEmpty());\n-        list.add(\"element\");\n+        list.add((E) \"element\");\n         assertTrue(!list.isEmpty());\n         list.clear();\n         assertTrue(list.isEmpty());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testIterator() {\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"4\");\n-        list.add(\"5\");\n-        Iterator it = list.iterator();\n-        assertTrue(it.hasNext());\n-        assertEquals(\"1\",it.next());\n-        assertTrue(it.hasNext());\n-        assertEquals(\"2\",it.next());\n-        assertTrue(it.hasNext());\n-        assertEquals(\"3\",it.next());\n-        assertTrue(it.hasNext());\n-        assertEquals(\"4\",it.next());\n-        assertTrue(it.hasNext());\n-        assertEquals(\"5\",it.next());\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+        Iterator<E> it = list.iterator();\n+        assertTrue(it.hasNext());\n+        assertEquals(\"1\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"2\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"3\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"4\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"5\", it.next());\n         assertTrue(!it.hasNext());\n \n         it = list.iterator();\n         assertTrue(it.hasNext());\n-        assertEquals(\"1\",it.next());\n+        assertEquals(\"1\", it.next());\n         it.remove();\n-        assertEquals(\"[2, 3, 4, 5]\",list.toString());\n-        assertTrue(it.hasNext());\n-        assertEquals(\"2\",it.next());\n+        assertEquals(\"[2, 3, 4, 5]\", list.toString());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"2\", it.next());\n         it.remove();\n-        assertEquals(\"[3, 4, 5]\",list.toString());\n-        assertTrue(it.hasNext());\n-        assertEquals(\"3\",it.next());\n+        assertEquals(\"[3, 4, 5]\", list.toString());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"3\", it.next());\n         it.remove();\n-        assertEquals(\"[4, 5]\",list.toString());\n-        assertTrue(it.hasNext());\n-        assertEquals(\"4\",it.next());\n+        assertEquals(\"[4, 5]\", list.toString());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"4\", it.next());\n         it.remove();\n-        assertEquals(\"[5]\",list.toString());\n-        assertTrue(it.hasNext());\n-        assertEquals(\"5\",it.next());\n+        assertEquals(\"[5]\", list.toString());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"5\", it.next());\n         it.remove();\n-        assertEquals(\"[]\",list.toString());\n+        assertEquals(\"[]\", list.toString());\n         assertTrue(!it.hasNext());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testListIteratorNavigation() {\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"4\");\n-        list.add(\"5\");\n-        ListIterator it = list.listIterator();\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+        ListIterator<E> it = list.listIterator();\n         assertTrue(it.hasNext());\n         assertTrue(!it.hasPrevious());\n-        assertEquals(-1,it.previousIndex());\n-        assertEquals(0,it.nextIndex());\n-        assertEquals(\"1\",it.next());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(0,it.previousIndex());\n-        assertEquals(1,it.nextIndex());\n-        assertEquals(\"1\",it.previous());\n+        assertEquals(-1, it.previousIndex());\n+        assertEquals(0, it.nextIndex());\n+        assertEquals(\"1\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(0, it.previousIndex());\n+        assertEquals(1, it.nextIndex());\n+        assertEquals(\"1\", it.previous());\n         assertTrue(it.hasNext());\n         assertTrue(!it.hasPrevious());\n-        assertEquals(-1,it.previousIndex());\n-        assertEquals(0,it.nextIndex());\n-        assertEquals(\"1\",it.next());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(0,it.previousIndex());\n-        assertEquals(1,it.nextIndex());\n-        assertEquals(\"2\",it.next());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(1,it.previousIndex());\n-        assertEquals(2,it.nextIndex());\n-        assertEquals(\"2\",it.previous());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(0,it.previousIndex());\n-        assertEquals(1,it.nextIndex());\n-        assertEquals(\"2\",it.next());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(1,it.previousIndex());\n-        assertEquals(2,it.nextIndex());\n-        assertEquals(\"3\",it.next());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(2,it.previousIndex());\n-        assertEquals(3,it.nextIndex());\n-        assertEquals(\"4\",it.next());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(3,it.previousIndex());\n-        assertEquals(4,it.nextIndex());\n-        assertEquals(\"5\",it.next());\n+        assertEquals(-1, it.previousIndex());\n+        assertEquals(0, it.nextIndex());\n+        assertEquals(\"1\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(0, it.previousIndex());\n+        assertEquals(1, it.nextIndex());\n+        assertEquals(\"2\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(1, it.previousIndex());\n+        assertEquals(2, it.nextIndex());\n+        assertEquals(\"2\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(0, it.previousIndex());\n+        assertEquals(1, it.nextIndex());\n+        assertEquals(\"2\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(1, it.previousIndex());\n+        assertEquals(2, it.nextIndex());\n+        assertEquals(\"3\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(2, it.previousIndex());\n+        assertEquals(3, it.nextIndex());\n+        assertEquals(\"4\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(3, it.previousIndex());\n+        assertEquals(4, it.nextIndex());\n+        assertEquals(\"5\", it.next());\n         assertTrue(!it.hasNext());\n         assertTrue(it.hasPrevious());\n-        assertEquals(4,it.previousIndex());\n-        assertEquals(5,it.nextIndex());\n-        assertEquals(\"5\",it.previous());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(3,it.previousIndex());\n-        assertEquals(4,it.nextIndex());\n-        assertEquals(\"4\",it.previous());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(2,it.previousIndex());\n-        assertEquals(3,it.nextIndex());\n-        assertEquals(\"3\",it.previous());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(1,it.previousIndex());\n-        assertEquals(2,it.nextIndex());\n-        assertEquals(\"2\",it.previous());\n-        assertTrue(it.hasNext());\n-        assertTrue(it.hasPrevious());\n-        assertEquals(0,it.previousIndex());\n-        assertEquals(1,it.nextIndex());\n-        assertEquals(\"1\",it.previous());\n+        assertEquals(4, it.previousIndex());\n+        assertEquals(5, it.nextIndex());\n+        assertEquals(\"5\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(3, it.previousIndex());\n+        assertEquals(4, it.nextIndex());\n+        assertEquals(\"4\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(2, it.previousIndex());\n+        assertEquals(3, it.nextIndex());\n+        assertEquals(\"3\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(1, it.previousIndex());\n+        assertEquals(2, it.nextIndex());\n+        assertEquals(\"2\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(0, it.previousIndex());\n+        assertEquals(1, it.nextIndex());\n+        assertEquals(\"1\", it.previous());\n         assertTrue(it.hasNext());\n         assertTrue(!it.hasPrevious());\n-        assertEquals(-1,it.previousIndex());\n-        assertEquals(0,it.nextIndex());\n-    }\n-\n+        assertEquals(-1, it.previousIndex());\n+        assertEquals(0, it.nextIndex());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testListIteratorSet() {\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"4\");\n-        list.add(\"5\");\n-\n-        ListIterator it = list.listIterator();\n-        assertEquals(\"1\",it.next());\n-        it.set(\"a\");\n-        assertEquals(\"a\",it.previous());\n-        it.set(\"A\");\n-        assertEquals(\"A\",it.next());\n-        assertEquals(\"2\",it.next());\n-        it.set(\"B\");\n-        assertEquals(\"3\",it.next());\n-        assertEquals(\"4\",it.next());\n-        it.set(\"D\");\n-        assertEquals(\"5\",it.next());\n-        it.set(\"E\");\n-        assertEquals(\"[A, B, 3, D, E]\",list.toString());\n-    }\n-\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+\n+        ListIterator<E> it = list.listIterator();\n+        assertEquals(\"1\", it.next());\n+        it.set((E) \"a\");\n+        assertEquals(\"a\", it.previous());\n+        it.set((E) \"A\");\n+        assertEquals(\"A\", it.next());\n+        assertEquals(\"2\", it.next());\n+        it.set((E) \"B\");\n+        assertEquals(\"3\", it.next());\n+        assertEquals(\"4\", it.next());\n+        it.set((E) \"D\");\n+        assertEquals(\"5\", it.next());\n+        it.set((E) \"E\");\n+        assertEquals(\"[A, B, 3, D, E]\", list.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testListIteratorRemove() {\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"4\");\n-        list.add(\"5\");\n-\n-        ListIterator it = list.listIterator();\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+\n+        ListIterator<E> it = list.listIterator();\n         try {\n             it.remove();\n         } catch(IllegalStateException e) {\n         assertEquals(\"[]\",list.toString());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testListIteratorAdd() {\n-        ListIterator it = list.listIterator();\n-        it.add(\"1\");\n-        assertEquals(\"[1]\",list.toString());\n-        it.add(\"3\");\n-        assertEquals(\"[1, 3]\",list.toString());\n-        it.add(\"5\");\n-        assertEquals(\"[1, 3, 5]\",list.toString());\n-        assertEquals(\"5\",it.previous());\n-        it.add(\"4\");\n-        assertEquals(\"[1, 3, 4, 5]\",list.toString());\n-        assertEquals(\"4\",it.previous());\n-        assertEquals(\"3\",it.previous());\n-        it.add(\"2\");\n-        assertEquals(\"[1, 2, 3, 4, 5]\",list.toString());\n-    }\n-\n+        ListIterator<E> it = list.listIterator();\n+        it.add((E) \"1\");\n+        assertEquals(\"[1]\", list.toString());\n+        it.add((E) \"3\");\n+        assertEquals(\"[1, 3]\", list.toString());\n+        it.add((E) \"5\");\n+        assertEquals(\"[1, 3, 5]\", list.toString());\n+        assertEquals(\"5\", it.previous());\n+        it.add((E) \"4\");\n+        assertEquals(\"[1, 3, 4, 5]\", list.toString());\n+        assertEquals(\"4\", it.previous());\n+        assertEquals(\"3\", it.previous());\n+        it.add((E) \"2\");\n+        assertEquals(\"[1, 2, 3, 4, 5]\", list.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testRemoveAll() {\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"4\");\n-        list.add(\"5\");\n-\n-        HashSet set = new HashSet();\n-        set.add(\"A\");\n-        set.add(\"2\");\n-        set.add(\"C\");\n-        set.add(\"4\");\n-        set.add(\"D\");\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+\n+        HashSet<E> set = new HashSet<E>();\n+        set.add((E) \"A\");\n+        set.add((E) \"2\");\n+        set.add((E) \"C\");\n+        set.add((E) \"4\");\n+        set.add((E) \"D\");\n \n         assertTrue(list.removeAll(set));\n-        assertEquals(\"[1, 3, 5]\",list.toString());\n+        assertEquals(\"[1, 3, 5]\", list.toString());\n         assertTrue(!list.removeAll(set));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testRemoveByIndex() {\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"4\");\n-        list.add(\"5\");\n-        assertEquals(\"[1, 2, 3, 4, 5]\",list.toString());\n-        assertEquals(\"1\",list.remove(0));\n-        assertEquals(\"[2, 3, 4, 5]\",list.toString());\n-        assertEquals(\"3\",list.remove(1));\n-        assertEquals(\"[2, 4, 5]\",list.toString());\n-        assertEquals(\"4\",list.remove(1));\n-        assertEquals(\"[2, 5]\",list.toString());\n-        assertEquals(\"5\",list.remove(1));\n-        assertEquals(\"[2]\",list.toString());\n-        assertEquals(\"2\",list.remove(0));\n-        assertEquals(\"[]\",list.toString());\n-    }\n-\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+        assertEquals(\"[1, 2, 3, 4, 5]\", list.toString());\n+        assertEquals(\"1\", list.remove(0));\n+        assertEquals(\"[2, 3, 4, 5]\", list.toString());\n+        assertEquals(\"3\", list.remove(1));\n+        assertEquals(\"[2, 4, 5]\", list.toString());\n+        assertEquals(\"4\", list.remove(1));\n+        assertEquals(\"[2, 5]\", list.toString());\n+        assertEquals(\"5\", list.remove(1));\n+        assertEquals(\"[2]\", list.toString());\n+        assertEquals(\"2\", list.remove(0));\n+        assertEquals(\"[]\", list.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testRemove() {\n-        list.add(\"1\");\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"4\");\n-        list.add(\"5\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"4\");\n-        list.add(\"5\");\n-        assertEquals(\"[1, 1, 2, 3, 4, 5, 2, 3, 4, 5]\",list.toString());\n+        list.add((E) \"1\");\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+        assertEquals(\"[1, 1, 2, 3, 4, 5, 2, 3, 4, 5]\", list.toString());\n         assertTrue(!list.remove(\"6\"));\n         assertTrue(list.remove(\"5\"));\n-        assertEquals(\"[1, 1, 2, 3, 4, 2, 3, 4, 5]\",list.toString());\n+        assertEquals(\"[1, 1, 2, 3, 4, 2, 3, 4, 5]\", list.toString());\n         assertTrue(list.remove(\"5\"));\n-        assertEquals(\"[1, 1, 2, 3, 4, 2, 3, 4]\",list.toString());\n+        assertEquals(\"[1, 1, 2, 3, 4, 2, 3, 4]\", list.toString());\n         assertTrue(!list.remove(\"5\"));\n         assertTrue(list.remove(\"1\"));\n-        assertEquals(\"[1, 2, 3, 4, 2, 3, 4]\",list.toString());\n+        assertEquals(\"[1, 2, 3, 4, 2, 3, 4]\", list.toString());\n         assertTrue(list.remove(\"1\"));\n-        assertEquals(\"[2, 3, 4, 2, 3, 4]\",list.toString());\n+        assertEquals(\"[2, 3, 4, 2, 3, 4]\", list.toString());\n         assertTrue(list.remove(\"2\"));\n-        assertEquals(\"[3, 4, 2, 3, 4]\",list.toString());\n+        assertEquals(\"[3, 4, 2, 3, 4]\", list.toString());\n         assertTrue(list.remove(\"2\"));\n-        assertEquals(\"[3, 4, 3, 4]\",list.toString());\n+        assertEquals(\"[3, 4, 3, 4]\", list.toString());\n         assertTrue(list.remove(\"3\"));\n-        assertEquals(\"[4, 3, 4]\",list.toString());\n+        assertEquals(\"[4, 3, 4]\", list.toString());\n         assertTrue(list.remove(\"3\"));\n-        assertEquals(\"[4, 4]\",list.toString());\n+        assertEquals(\"[4, 4]\", list.toString());\n         assertTrue(list.remove(\"4\"));\n-        assertEquals(\"[4]\",list.toString());\n+        assertEquals(\"[4]\", list.toString());\n         assertTrue(list.remove(\"4\"));\n-        assertEquals(\"[]\",list.toString());\n-    }\n-\n+        assertEquals(\"[]\", list.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testRetainAll() {\n-        list.add(\"1\");\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"3\");\n-        list.add(\"4\");\n-        list.add(\"4\");\n-        list.add(\"5\");\n-        list.add(\"5\");\n-\n-        HashSet set = new HashSet();\n-        set.add(\"A\");\n-        set.add(\"2\");\n-        set.add(\"C\");\n-        set.add(\"4\");\n-        set.add(\"D\");\n+        list.add((E) \"1\");\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+        list.add((E) \"5\");\n+\n+        HashSet<E> set = new HashSet<E>();\n+        set.add((E) \"A\");\n+        set.add((E) \"2\");\n+        set.add((E) \"C\");\n+        set.add((E) \"4\");\n+        set.add((E) \"D\");\n \n         assertTrue(list.retainAll(set));\n-        assertEquals(\"[2, 2, 4, 4]\",list.toString());\n+        assertEquals(\"[2, 2, 4, 4]\", list.toString());\n         assertTrue(!list.retainAll(set));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testSet() {\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"4\");\n-        list.add(\"5\");\n-        assertEquals(\"[1, 2, 3, 4, 5]\",list.toString());\n-        list.set(0,\"A\");\n-        assertEquals(\"[A, 2, 3, 4, 5]\",list.toString());\n-        list.set(1,\"B\");\n-        assertEquals(\"[A, B, 3, 4, 5]\",list.toString());\n-        list.set(2,\"C\");\n-        assertEquals(\"[A, B, C, 4, 5]\",list.toString());\n-        list.set(3,\"D\");\n-        assertEquals(\"[A, B, C, D, 5]\",list.toString());\n-        list.set(4,\"E\");\n-        assertEquals(\"[A, B, C, D, E]\",list.toString());\n-    }\n-\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+        assertEquals(\"[1, 2, 3, 4, 5]\", list.toString());\n+        list.set(0, (E) \"A\");\n+        assertEquals(\"[A, 2, 3, 4, 5]\", list.toString());\n+        list.set(1, (E) \"B\");\n+        assertEquals(\"[A, B, 3, 4, 5]\", list.toString());\n+        list.set(2, (E) \"C\");\n+        assertEquals(\"[A, B, C, 4, 5]\", list.toString());\n+        list.set(3, (E) \"D\");\n+        assertEquals(\"[A, B, C, D, 5]\", list.toString());\n+        list.set(4, (E) \"E\");\n+        assertEquals(\"[A, B, C, D, E]\", list.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testSubList() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-        list.add(\"D\");\n-        list.add(\"E\");\n-\n-        assertEquals(\"[A, B, C, D, E]\",list.toString());\n-        assertEquals(\"[A, B, C, D, E]\",list.subList(0,5).toString());\n-        assertEquals(\"[B, C, D, E]\",list.subList(1,5).toString());\n-        assertEquals(\"[C, D, E]\",list.subList(2,5).toString());\n-        assertEquals(\"[D, E]\",list.subList(3,5).toString());\n-        assertEquals(\"[E]\",list.subList(4,5).toString());\n-        assertEquals(\"[]\",list.subList(5,5).toString());\n-    }\n-\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+        list.add((E) \"D\");\n+        list.add((E) \"E\");\n+\n+        assertEquals(\"[A, B, C, D, E]\", list.toString());\n+        assertEquals(\"[A, B, C, D, E]\", list.subList(0, 5).toString());\n+        assertEquals(\"[B, C, D, E]\", list.subList(1, 5).toString());\n+        assertEquals(\"[C, D, E]\", list.subList(2, 5).toString());\n+        assertEquals(\"[D, E]\", list.subList(3, 5).toString());\n+        assertEquals(\"[E]\", list.subList(4, 5).toString());\n+        assertEquals(\"[]\", list.subList(5, 5).toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testSubListAddEnd() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-        list.add(\"D\");\n-        list.add(\"E\");\n-\n-        List sublist = list.subList(5,5);\n-        sublist.add(\"F\");\n-        assertEquals(\"[A, B, C, D, E, F]\",list.toString());\n-        assertEquals(\"[F]\",sublist.toString());\n-        sublist.add(\"G\");\n-        assertEquals(\"[A, B, C, D, E, F, G]\",list.toString());\n-        assertEquals(\"[F, G]\",sublist.toString());\n-    }\n-\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+        list.add((E) \"D\");\n+        list.add((E) \"E\");\n+\n+        List<E> sublist = list.subList(5, 5);\n+        sublist.add((E) \"F\");\n+        assertEquals(\"[A, B, C, D, E, F]\", list.toString());\n+        assertEquals(\"[F]\", sublist.toString());\n+        sublist.add((E) \"G\");\n+        assertEquals(\"[A, B, C, D, E, F, G]\", list.toString());\n+        assertEquals(\"[F, G]\", sublist.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testSubListAddBegin() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-        list.add(\"D\");\n-        list.add(\"E\");\n-\n-        List sublist = list.subList(0,0);\n-        sublist.add(\"a\");\n-        assertEquals(\"[a, A, B, C, D, E]\",list.toString());\n-        assertEquals(\"[a]\",sublist.toString());\n-        sublist.add(\"b\");\n-        assertEquals(\"[a, b, A, B, C, D, E]\",list.toString());\n-        assertEquals(\"[a, b]\",sublist.toString());\n-    }\n-\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+        list.add((E) \"D\");\n+        list.add((E) \"E\");\n+\n+        List<E> sublist = list.subList(0, 0);\n+        sublist.add((E) \"a\");\n+        assertEquals(\"[a, A, B, C, D, E]\", list.toString());\n+        assertEquals(\"[a]\", sublist.toString());\n+        sublist.add((E) \"b\");\n+        assertEquals(\"[a, b, A, B, C, D, E]\", list.toString());\n+        assertEquals(\"[a, b]\", sublist.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testSubListAddMiddle() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-        list.add(\"D\");\n-        list.add(\"E\");\n-\n-        List sublist = list.subList(1,3);\n-        sublist.add(\"a\");\n-        assertEquals(\"[A, B, C, a, D, E]\",list.toString());\n-        assertEquals(\"[B, C, a]\",sublist.toString());\n-        sublist.add(\"b\");\n-        assertEquals(\"[A, B, C, a, b, D, E]\",list.toString());\n-        assertEquals(\"[B, C, a, b]\",sublist.toString());\n-    }\n-\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+        list.add((E) \"D\");\n+        list.add((E) \"E\");\n+\n+        List<E> sublist = list.subList(1, 3);\n+        sublist.add((E) \"a\");\n+        assertEquals(\"[A, B, C, a, D, E]\", list.toString());\n+        assertEquals(\"[B, C, a]\", sublist.toString());\n+        sublist.add((E) \"b\");\n+        assertEquals(\"[A, B, C, a, b, D, E]\", list.toString());\n+        assertEquals(\"[B, C, a, b]\", sublist.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testSubListRemove() {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-        list.add(\"D\");\n-        list.add(\"E\");\n-\n-        List sublist = list.subList(1,4);\n-        assertEquals(\"[B, C, D]\",sublist.toString());\n-        assertEquals(\"[A, B, C, D, E]\",list.toString());\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+        list.add((E) \"D\");\n+        list.add((E) \"E\");\n+\n+        List<E> sublist = list.subList(1, 4);\n+        assertEquals(\"[B, C, D]\", sublist.toString());\n+        assertEquals(\"[A, B, C, D, E]\", list.toString());\n         sublist.remove(\"C\");\n-        assertEquals(\"[B, D]\",sublist.toString());\n-        assertEquals(\"[A, B, D, E]\",list.toString());\n+        assertEquals(\"[B, D]\", sublist.toString());\n+        assertEquals(\"[A, B, D, E]\", list.toString());\n         sublist.remove(1);\n-        assertEquals(\"[B]\",sublist.toString());\n-        assertEquals(\"[A, B, E]\",list.toString());\n+        assertEquals(\"[B]\", sublist.toString());\n+        assertEquals(\"[A, B, E]\", list.toString());\n         sublist.clear();\n-        assertEquals(\"[]\",sublist.toString());\n-        assertEquals(\"[A, E]\",list.toString());\n-    }\n-\n+        assertEquals(\"[]\", sublist.toString());\n+        assertEquals(\"[A, E]\", list.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testToArray() {\n-        list.add(\"1\");\n-        list.add(\"2\");\n-        list.add(\"3\");\n-        list.add(\"4\");\n-        list.add(\"5\");\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n \n         Object[] elts = list.toArray();\n-        assertEquals(\"1\",elts[0]);\n-        assertEquals(\"2\",elts[1]);\n-        assertEquals(\"3\",elts[2]);\n-        assertEquals(\"4\",elts[3]);\n-        assertEquals(\"5\",elts[4]);\n-        assertEquals(5,elts.length);\n-\n-        String[] elts2 = (String[])(list.toArray(new String[0]));\n-        assertEquals(\"1\",elts2[0]);\n-        assertEquals(\"2\",elts2[1]);\n-        assertEquals(\"3\",elts2[2]);\n-        assertEquals(\"4\",elts2[3]);\n-        assertEquals(\"5\",elts2[4]);\n-        assertEquals(5,elts2.length);\n+        assertEquals(\"1\", elts[0]);\n+        assertEquals(\"2\", elts[1]);\n+        assertEquals(\"3\", elts[2]);\n+        assertEquals(\"4\", elts[3]);\n+        assertEquals(\"5\", elts[4]);\n+        assertEquals(5, elts.length);\n+\n+        String[] elts2 = (String[]) (list.toArray(new String[0]));\n+        assertEquals(\"1\", elts2[0]);\n+        assertEquals(\"2\", elts2[1]);\n+        assertEquals(\"3\", elts2[2]);\n+        assertEquals(\"4\", elts2[3]);\n+        assertEquals(\"5\", elts2[4]);\n+        assertEquals(5, elts2.length);\n \n         String[] elts3 = new String[5];\n-        assertSame(elts3,list.toArray(elts3));\n-        assertEquals(\"1\",elts3[0]);\n-        assertEquals(\"2\",elts3[1]);\n-        assertEquals(\"3\",elts3[2]);\n-        assertEquals(\"4\",elts3[3]);\n-        assertEquals(\"5\",elts3[4]);\n-        assertEquals(5,elts3.length);\n+        assertSame(elts3, list.toArray(elts3));\n+        assertEquals(\"1\", elts3[0]);\n+        assertEquals(\"2\", elts3[1]);\n+        assertEquals(\"3\", elts3[2]);\n+        assertEquals(\"4\", elts3[3]);\n+        assertEquals(\"5\", elts3[4]);\n+        assertEquals(5, elts3.length);\n \n         String[] elts4 = new String[3];\n-        String[] elts4b = (String[])(list.toArray(elts4));\n+        String[] elts4b = (String[]) (list.toArray(elts4));\n         assertTrue(elts4 != elts4b);\n-        assertEquals(\"1\",elts4b[0]);\n-        assertEquals(\"2\",elts4b[1]);\n-        assertEquals(\"3\",elts4b[2]);\n-        assertEquals(\"4\",elts4b[3]);\n-        assertEquals(\"5\",elts4b[4]);\n-        assertEquals(5,elts4b.length);\n-    }\n-\n+        assertEquals(\"1\", elts4b[0]);\n+        assertEquals(\"2\", elts4b[1]);\n+        assertEquals(\"3\", elts4b[2]);\n+        assertEquals(\"4\", elts4b[3]);\n+        assertEquals(\"5\", elts4b[4]);\n+        assertEquals(5, elts4b.length);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testSerialization() throws Exception {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-        list.add(\"D\");\n-        list.add(\"E\");\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+        list.add((E) \"D\");\n+        list.add((E) \"E\");\n \n         java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream();\n         java.io.ObjectOutputStream out = new java.io.ObjectOutputStream(buf);\n         assertTrue(list.equals(list2));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testSerializationWithOpenCursor() throws Exception {\n-        list.add(\"A\");\n-        list.add(\"B\");\n-        list.add(\"C\");\n-        list.add(\"D\");\n-        list.add(\"E\");\n-        CursorableLinkedList.Cursor cursor = list.cursor();\n-\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+        list.add((E) \"D\");\n+        list.add((E) \"E\");\n         java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream();\n         java.io.ObjectOutputStream out = new java.io.ObjectOutputStream(buf);\n         out.writeObject(list);\n         assertTrue(list.equals(list2));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testLongSerialization() throws Exception {\n         // recursive serialization will cause a stack\n         // overflow exception with long lists\n-        for(int i=0;i<10000;i++) {\n-            list.add(new Integer(i));\n+        for (int i = 0; i < 10000; i++) {\n+            list.add((E) new Integer(i));\n         }\n \n         java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream();\n         assertTrue(list.equals(list2));\n     }\n \n-\n     /**\n      *  Ignore the serialization tests for sublists and sub-sublists.\n      *\n-     *  @return an array of sublist serialization test names \n+     *  @return an array of sublist serialization test names\n      */\n     public String[] ignoredTests() {\n-        ArrayList list = new ArrayList();\n+        ArrayList<String> list = new ArrayList<String>();\n         String prefix = \"TestCursorableLinkedList\";\n         String bulk = \".bulkTestSubList\";\n         String[] ignored = new String[] {\n-          \".testEmptyListSerialization\",\n-          \".testFullListSerialization\", \n-          \".testEmptyListCompatibility\", \n-          \".testFullListCompatibility\", \n-          \".testSimpleSerialization\",\n-          \".testCanonicalEmptyCollectionExists\",\n-          \".testCanonicalFullCollectionExists\",\n-          \".testSerializeDeserializeThenCompare\"\n+                \".testEmptyListSerialization\",\n+                \".testFullListSerialization\",\n+                \".testEmptyListCompatibility\",\n+                \".testFullListCompatibility\",\n+                \".testSimpleSerialization\",\n+                \".testCanonicalEmptyCollectionExists\",\n+                \".testCanonicalFullCollectionExists\",\n+                \".testSerializeDeserializeThenCompare\"\n         };\n         for (int i = 0; i < ignored.length; i++) {\n             list.add(prefix + bulk + ignored[i]);\n             list.add(prefix + bulk + bulk + ignored[i]);\n         }\n-        return (String[])list.toArray(new String[0]);\n-    }\n+        return (String[]) list.toArray(new String[0]);\n+    }\n+\n+    public String getCompatibilityVersion() {\n+        return \"4.0\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"C:/commons/collections/data/test/CursorableLinkedList.emptyCollection.version4.0.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"C:/commons/collections/data/test/CursorableLinkedList.fullCollection.version4.0.obj\");\n+//    }\n \n }", "timestamp": 1252994239, "metainfo": ""}